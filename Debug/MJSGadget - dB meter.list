
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029004  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c60  080290c8  080290c8  0002a0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dd28  0802dd28  0002f448  2**0
                  CONTENTS
  4 .ARM          00000008  0802dd28  0802dd28  0002ed28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802dd30  0802dd30  0002f448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802dd30  0802dd30  0002ed30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802dd34  0802dd34  0002ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000448  20000000  0802dd38  0002f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031f8  20000448  0802e180  0002f448  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003640  0802e180  0002f640  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036a10  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009ce5  00000000  00000000  00065e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002da0  00000000  00000000  0006fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021fa  00000000  00000000  00072908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024267  00000000  00000000  00074b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000460f7  00000000  00000000  00098d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2fc0  00000000  00000000  000dee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00181e20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb88  00000000  00000000  00181ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018da5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018dac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00190045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000448 	.word	0x20000448
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080290ac 	.word	0x080290ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000044c 	.word	0x2000044c
 8000104:	080290ac 	.word	0x080290ac

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802ce44 	.word	0x0802ce44
 8000e0c:	0802ce84 	.word	0x0802ce84
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802cec0 	.word	0x0802cec0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af02      	add	r7, sp, #8
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	0019      	movs	r1, r3
 800365e:	260e      	movs	r6, #14
 8003660:	19bb      	adds	r3, r7, r6
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c0a      	adds	r2, r1, #0
 8003672:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteMemRegister+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteMemRegister+0x58>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <WriteMemRegister+0x5c>)
 8003682:	7918      	ldrb	r0, [r3, #4]
 8003684:	68bd      	ldr	r5, [r7, #8]
 8003686:	230c      	movs	r3, #12
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	19bb      	adds	r3, r7, r6
 800368e:	8819      	ldrh	r1, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	002b      	movs	r3, r5
 8003698:	47a0      	blx	r4
 800369a:	0003      	movs	r3, r0
 800369c:	e000      	b.n	80036a0 <WriteMemRegister+0x50>
  }
  return false;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b005      	add	sp, #20
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000474 	.word	0x20000474
 80036ac:	200004a4 	.word	0x200004a4

080036b0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0004      	movs	r4, r0
 80036b8:	0008      	movs	r0, r1
 80036ba:	60ba      	str	r2, [r7, #8]
 80036bc:	0019      	movs	r1, r3
 80036be:	260e      	movs	r6, #14
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <ReadMemRegister+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <ReadMemRegister+0x58>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <ReadMemRegister+0x5c>)
 80036e2:	7918      	ldrb	r0, [r3, #4]
 80036e4:	68bd      	ldr	r5, [r7, #8]
 80036e6:	230c      	movs	r3, #12
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	002b      	movs	r3, r5
 80036f8:	47a0      	blx	r4
 80036fa:	0003      	movs	r3, r0
 80036fc:	e000      	b.n	8003700 <ReadMemRegister+0x50>
  }
  return false;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b005      	add	sp, #20
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	20000470 	.word	0x20000470
 800370c:	200004a4 	.word	0x200004a4

08003710 <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003714:	4b02      	ldr	r3, [pc, #8]	@ (8003720 <ResetENS160samplecounter+0x10>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000046c 	.word	0x2000046c

08003724 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 800372c:	f00f fefe 	bl	801352c <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	18d2      	adds	r2, r2, r3
 8003736:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <setENS160TimeStamp+0x20>)
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	20000468 	.word	0x20000468

08003748 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <ENS_Init+0x20>)
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <ENS_Init+0x24>)
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]
}	
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	20000470 	.word	0x20000470
 800376c:	20000474 	.word	0x20000474

08003770 <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003776:	1dbb      	adds	r3, r7, #6
 8003778:	22f0      	movs	r2, #240	@ 0xf0
 800377a:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800377c:	1dba      	adds	r2, r7, #6
 800377e:	2301      	movs	r3, #1
 8003780:	2101      	movs	r1, #1
 8003782:	2010      	movs	r0, #16
 8003784:	f7ff ff64 	bl	8003650 <WriteMemRegister>
 8003788:	0003      	movs	r3, r0
 800378a:	001a      	movs	r2, r3
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003790:	201e      	movs	r0, #30
 8003792:	f00f fed5 	bl	8013540 <HAL_Delay>
	return result;
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	4193      	sbcs	r3, r2
 800379e:	b2db      	uxtb	r3, r3
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 80037ae:	003b      	movs	r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 80037ba:	003a      	movs	r2, r7
 80037bc:	2302      	movs	r3, #2
 80037be:	2101      	movs	r1, #1
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7ff ff75 	bl	80036b0 <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 80037c6:	003b      	movs	r3, r7
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	003b      	movs	r3, r7
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <ENS160_checkPartID+0xa8>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <ENS160_checkPartID+0x68>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	23b0      	movs	r3, #176	@ 0xb0
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d009      	beq.n	8003804 <ENS160_checkPartID+0x5c>
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	2362      	movs	r3, #98	@ 0x62
 80037f6:	33ff      	adds	r3, #255	@ 0xff
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d101      	bne.n	8003800 <ENS160_checkPartID+0x58>
 80037fc:	4b15      	ldr	r3, [pc, #84]	@ (8003854 <ENS160_checkPartID+0xac>)
 80037fe:	e002      	b.n	8003806 <ENS160_checkPartID+0x5e>
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <ENS160_checkPartID+0xb0>)
 8003802:	e000      	b.n	8003806 <ENS160_checkPartID+0x5e>
 8003804:	4b15      	ldr	r3, [pc, #84]	@ (800385c <ENS160_checkPartID+0xb4>)
 8003806:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <ENS160_checkPartID+0xb8>)
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <ENS160_checkPartID+0xbc>)
 800380a:	2003      	movs	r0, #3
 800380c:	f00f f958 	bl	8012ac0 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	23b0      	movs	r3, #176	@ 0xb0
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <ENS160_checkPartID+0x82>
	  hwsw._revENS16x = 0;
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <ENS160_checkPartID+0xc0>)
 800381e:	2200      	movs	r2, #0
 8003820:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e00b      	b.n	8003842 <ENS160_checkPartID+0x9a>
	}
	else if (part_id == ENS161_PARTID) {
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	2362      	movs	r3, #98	@ 0x62
 8003830:	33ff      	adds	r3, #255	@ 0xff
 8003832:	429a      	cmp	r2, r3
 8003834:	d105      	bne.n	8003842 <ENS160_checkPartID+0x9a>
	  hwsw._revENS16x = 1;
 8003836:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <ENS160_checkPartID+0xc0>)
 8003838:	2201      	movs	r2, #1
 800383a:	70da      	strb	r2, [r3, #3]
	  result = true;
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	20000464 	.word	0x20000464
 8003854:	080290c8 	.word	0x080290c8
 8003858:	080290d4 	.word	0x080290d4
 800385c:	080290d8 	.word	0x080290d8
 8003860:	080290e4 	.word	0x080290e4
 8003864:	08029104 	.word	0x08029104
 8003868:	200004a4 	.word	0x200004a4

0800386c <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003872:	4a27      	ldr	r2, [pc, #156]	@ (8003910 <ENS160_clearCommand+0xa4>)
 8003874:	2301      	movs	r3, #1
 8003876:	2101      	movs	r1, #1
 8003878:	2012      	movs	r0, #18
 800387a:	f7ff fee9 	bl	8003650 <WriteMemRegister>
 800387e:	0003      	movs	r3, r0
 8003880:	001a      	movs	r2, r3
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <ENS160_clearCommand+0xa8>)
 8003884:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003886:	200a      	movs	r0, #10
 8003888:	f00f fe5a 	bl	8013540 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <ENS160_clearCommand+0xa4>)
 800388e:	22cc      	movs	r2, #204	@ 0xcc
 8003890:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003892:	4a1f      	ldr	r2, [pc, #124]	@ (8003910 <ENS160_clearCommand+0xa4>)
 8003894:	2301      	movs	r3, #1
 8003896:	2101      	movs	r1, #1
 8003898:	2012      	movs	r0, #18
 800389a:	f7ff fed9 	bl	8003650 <WriteMemRegister>
 800389e:	0003      	movs	r3, r0
 80038a0:	001a      	movs	r2, r3
 80038a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038ac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038ae:	200a      	movs	r0, #10
 80038b0:	f00f fe46 	bl	8013540 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 80038b4:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038b6:	2301      	movs	r3, #1
 80038b8:	2101      	movs	r1, #1
 80038ba:	2020      	movs	r0, #32
 80038bc:	f7ff fef8 	bl	80036b0 <ReadMemRegister>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4013      	ands	r3, r2
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038ce:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <ENS160_clearCommand+0xac>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 80038d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <ENS160_clearCommand+0x7e>
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <ENS160_clearCommand+0xb0>)
 80038e8:	e000      	b.n	80038ec <ENS160_clearCommand+0x80>
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <ENS160_clearCommand+0xb4>)
 80038ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <ENS160_clearCommand+0xb8>)
 80038ee:	490e      	ldr	r1, [pc, #56]	@ (8003928 <ENS160_clearCommand+0xbc>)
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	0003      	movs	r3, r0
 80038f4:	2003      	movs	r0, #3
 80038f6:	f00f f8e3 	bl	8012ac0 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038fa:	200a      	movs	r0, #10
 80038fc:	f00f fe20 	bl	8013540 <HAL_Delay>
		
	return result;
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <ENS160_clearCommand+0xa8>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	4193      	sbcs	r3, r2
 8003908:	b2db      	uxtb	r3, r3
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200004ac 	.word	0x200004ac
 8003914:	200004ad 	.word	0x200004ad
 8003918:	20000464 	.word	0x20000464
 800391c:	08029108 	.word	0x08029108
 8003920:	080290d4 	.word	0x080290d4
 8003924:	0802910c 	.word	0x0802910c
 8003928:	08029104 	.word	0x08029104

0800392c <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b085      	sub	sp, #20
 8003930:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003932:	f7ff ff9b 	bl	800386c <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003936:	200a      	movs	r0, #10
 8003938:	f00f fe02 	bl	8013540 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	220e      	movs	r2, #14
 8003940:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	2301      	movs	r3, #1
 8003946:	2101      	movs	r1, #1
 8003948:	2012      	movs	r0, #18
 800394a:	f7ff fe81 	bl	8003650 <WriteMemRegister>

	HAL_Delay(10);
 800394e:	200a      	movs	r0, #10
 8003950:	f00f fdf6 	bl	8013540 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003954:	1d3a      	adds	r2, r7, #4
 8003956:	2303      	movs	r3, #3
 8003958:	2101      	movs	r1, #1
 800395a:	204c      	movs	r0, #76	@ 0x4c
 800395c:	f7ff fea8 	bl	80036b0 <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003966:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	785a      	ldrb	r2, [r3, #1]
 800396c:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800396e:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	789a      	ldrb	r2, [r3, #2]
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003976:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003978:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d903      	bls.n	8003988 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
 8003986:	e002      	b.n	800398e <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800398a:	2200      	movs	r2, #0
 800398c:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 800398e:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <ENS160_getFirmware+0xa8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	001c      	movs	r4, r3
 800399c:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	0018      	movs	r0, r3
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <ENS160_getFirmware+0xac>)
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <ENS160_getFirmware+0xb0>)
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	9000      	str	r0, [sp, #0]
 80039ae:	0023      	movs	r3, r4
 80039b0:	2003      	movs	r0, #3
 80039b2:	f00f f885 	bl	8012ac0 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80039b6:	200a      	movs	r0, #10
 80039b8:	f00f fdc2 	bl	8013540 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	1e5a      	subs	r2, r3, #1
 80039c2:	4193      	sbcs	r3, r2
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b003      	add	sp, #12
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	200004a4 	.word	0x200004a4
 80039d4:	20000464 	.word	0x20000464
 80039d8:	08029138 	.word	0x08029138
 80039dc:	08029104 	.word	0x08029104

080039e0 <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d108      	bne.n	8003a06 <ENS160_setMode+0x26>
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <ENS160_setMode+0x58>)
 80039f6:	78db      	ldrb	r3, [r3, #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <ENS160_setMode+0x26>
	  result = 1;
 80039fc:	230f      	movs	r3, #15
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e00a      	b.n	8003a1c <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003a06:	1dfa      	adds	r2, r7, #7
 8003a08:	2301      	movs	r3, #1
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2010      	movs	r0, #16
 8003a0e:	f7ff fe1f 	bl	8003650 <WriteMemRegister>
 8003a12:	0003      	movs	r3, r0
 8003a14:	001a      	movs	r2, r3
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003a1c:	200a      	movs	r0, #10
 8003a1e:	f00f fd8f 	bl	8013540 <HAL_Delay>
	
	return result;
 8003a22:	230f      	movs	r3, #15
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	4193      	sbcs	r3, r2
 8003a2c:	b2db      	uxtb	r3, r3
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	200004a4 	.word	0x200004a4

08003a3c <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003a48:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <ENS_DeviceConnected+0xec>)
 8003a4a:	2252      	movs	r2, #82	@ 0x52
 8003a4c:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e02d      	b.n	8003ab2 <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003a56:	f7ff fe8b 	bl	8003770 <ENS160_reset>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	401a      	ands	r2, r3
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	1e51      	subs	r1, r2, #1
 8003a68:	418a      	sbcs	r2, r1
 8003a6a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003a6c:	f7ff fe9c 	bl	80037a8 <ENS160_checkPartID>
 8003a70:	0003      	movs	r3, r0
 8003a72:	001a      	movs	r2, r3
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	401a      	ands	r2, r3
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	1e51      	subs	r1, r2, #1
 8003a7e:	418a      	sbcs	r2, r1
 8003a80:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4053      	eors	r3, r2
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003a90:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <ENS_DeviceConnected+0xf0>)
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <ENS_DeviceConnected+0xf4>)
 8003a94:	0019      	movs	r1, r3
 8003a96:	2002      	movs	r0, #2
 8003a98:	f00f f812 	bl	8012ac0 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003a9c:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <ENS_DeviceConnected+0xec>)
 8003a9e:	2253      	movs	r2, #83	@ 0x53
 8003aa0:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003aa8:	1dbb      	adds	r3, r7, #6
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	3201      	adds	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	1dbb      	adds	r3, r7, #6
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d9cd      	bls.n	8003a56 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02b      	beq.n	8003b1a <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7ff ff8c 	bl	80039e0 <ENS160_setMode>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	001a      	movs	r2, r3
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	1e51      	subs	r1, r2, #1
 8003ad6:	418a      	sbcs	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003ada:	f7ff fec7 	bl	800386c <ENS160_clearCommand>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	1dfb      	adds	r3, r7, #7
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	1e51      	subs	r1, r2, #1
 8003aec:	418a      	sbcs	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003af0:	f7ff ff1c 	bl	800392c <ENS160_getFirmware>
 8003af4:	0003      	movs	r3, r0
 8003af6:	001a      	movs	r2, r3
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	401a      	ands	r2, r3
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	1e51      	subs	r1, r2, #1
 8003b02:	418a      	sbcs	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <ENS_DeviceConnected+0xf8>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <ENS_DeviceConnected+0xfc>)
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <ENS_DeviceConnected+0x100>)
 8003b12:	0019      	movs	r1, r3
 8003b14:	2003      	movs	r0, #3
 8003b16:	f00e ffd3 	bl	8012ac0 <CreateLine>
    }
  }
  return _available;
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	200004a4 	.word	0x200004a4
 8003b2c:	08029154 	.word	0x08029154
 8003b30:	08029174 	.word	0x08029174
 8003b34:	20000464 	.word	0x20000464
 8003b38:	08029178 	.word	0x08029178
 8003b3c:	08029104 	.word	0x08029104

08003b40 <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003b46:	1dfa      	adds	r2, r7, #7
 8003b48:	2301      	movs	r3, #1
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2020      	movs	r0, #32
 8003b4e:	f7ff fdaf 	bl	80036b0 <ReadMemRegister>

  if (debugENS160) {
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <ENS160_readStatus+0x34>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <ENS160_readStatus+0x38>)
 8003b60:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <ENS160_readStatus+0x3c>)
 8003b62:	2003      	movs	r0, #3
 8003b64:	f00e ffac 	bl	8012ac0 <CreateLine>
  }
  return status;
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000464 	.word	0x20000464
 8003b78:	080291ac 	.word	0x080291ac
 8003b7c:	08029104 	.word	0x08029104

08003b80 <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003b8c:	2317      	movs	r3, #23
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003b94:	4b32      	ldr	r3, [pc, #200]	@ (8003c60 <ENS160_measure+0xe0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003b9c:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <ENS160_measure+0xe4>)
 8003b9e:	4b32      	ldr	r3, [pc, #200]	@ (8003c68 <ENS160_measure+0xe8>)
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	f00e ff8c 	bl	8012ac0 <CreateLine>
	}
	
	if (waitForNew) {
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f00f fcc5 	bl	8013540 <HAL_Delay>
			status = ENS160_readStatus();
 8003bb6:	2516      	movs	r5, #22
 8003bb8:	197c      	adds	r4, r7, r5
 8003bba:	f7ff ffc1 	bl	8003b40 <ENS160_readStatus>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <ENS160_measure+0x30>
 8003bd0:	e002      	b.n	8003bd8 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	f00f fcb4 	bl	8013540 <HAL_Delay>
	}
	
	newData = true;
 8003bd8:	2317      	movs	r3, #23
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 8003be0:	240c      	movs	r4, #12
 8003be2:	193a      	adds	r2, r7, r4
 8003be4:	2307      	movs	r3, #7
 8003be6:	2101      	movs	r1, #1
 8003be8:	2021      	movs	r0, #33	@ 0x21
 8003bea:	f7ff fd61 	bl	80036b0 <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 8003bee:	0021      	movs	r1, r4
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <ENS160_measure+0xec>)
 8003bf6:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	789b      	ldrb	r3, [r3, #2]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <ENS160_measure+0xec>)
 8003c0e:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	b21a      	sxth	r2, r3
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	791b      	ldrb	r3, [r3, #4]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <ENS160_measure+0xec>)
 8003c26:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <ENS160_measure+0xf0>)
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <ENS160_measure+0xca>
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	795b      	ldrb	r3, [r3, #5]
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	799b      	ldrb	r3, [r3, #6]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <ENS160_measure+0xec>)
 8003c46:	80da      	strh	r2, [r3, #6]
 8003c48:	e002      	b.n	8003c50 <ENS160_measure+0xd0>
  	else pred._data_aqi500 = 0;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <ENS160_measure+0xec>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8003c50:	2317      	movs	r3, #23
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	20000464 	.word	0x20000464
 8003c64:	080291c0 	.word	0x080291c0
 8003c68:	08029104 	.word	0x08029104
 8003c6c:	2000049c 	.word	0x2000049c
 8003c70:	200004a4 	.word	0x200004a4

08003c74 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 8003c80:	2317      	movs	r3, #23
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 8003c88:	4bae      	ldr	r3, [pc, #696]	@ (8003f44 <ENS160_measureRaw+0x2d0>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 8003c90:	4aad      	ldr	r2, [pc, #692]	@ (8003f48 <ENS160_measureRaw+0x2d4>)
 8003c92:	4bae      	ldr	r3, [pc, #696]	@ (8003f4c <ENS160_measureRaw+0x2d8>)
 8003c94:	0019      	movs	r1, r3
 8003c96:	2003      	movs	r0, #3
 8003c98:	f00e ff12 	bl	8012ac0 <CreateLine>
	}
	
	if (waitForNew) {
 8003c9c:	1dfb      	adds	r3, r7, #7
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f00f fc4b 	bl	8013540 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003caa:	240b      	movs	r4, #11
 8003cac:	193a      	adds	r2, r7, r4
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2020      	movs	r0, #32
 8003cb4:	f7ff fcfc 	bl	80036b0 <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ee      	beq.n	8003ca4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 8003cc6:	240c      	movs	r4, #12
 8003cc8:	193a      	adds	r2, r7, r4
 8003cca:	2308      	movs	r3, #8
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2048      	movs	r0, #72	@ 0x48
 8003cd0:	f7ff fcee 	bl	80036b0 <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	001a      	movs	r2, r3
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fd fcc0 	bl	8001668 <__aeabi_ui2f>
 8003ce8:	1c03      	adds	r3, r0, #0
 8003cea:	218a      	movs	r1, #138	@ 0x8a
 8003cec:	05c9      	lsls	r1, r1, #23
 8003cee:	1c18      	adds	r0, r3, #0
 8003cf0:	f7fc ff70 	bl	8000bd4 <__aeabi_fdiv>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	1c18      	adds	r0, r3, #0
 8003cf8:	f7ff fbb4 	bl	8003464 <__aeabi_f2d>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	000b      	movs	r3, r1
 8003d00:	2000      	movs	r0, #0
 8003d02:	2180      	movs	r1, #128	@ 0x80
 8003d04:	05c9      	lsls	r1, r1, #23
 8003d06:	f023 fefb 	bl	8027b00 <pow>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	000b      	movs	r3, r1
 8003d0e:	0010      	movs	r0, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	f7fc fc9b 	bl	800064c <__aeabi_d2uiz>
 8003d16:	0002      	movs	r2, r0
 8003d18:	4b8d      	ldr	r3, [pc, #564]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003d1a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003d1c:	193b      	adds	r3, r7, r4
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	001a      	movs	r2, r3
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fd fc9c 	bl	8001668 <__aeabi_ui2f>
 8003d30:	1c03      	adds	r3, r0, #0
 8003d32:	218a      	movs	r1, #138	@ 0x8a
 8003d34:	05c9      	lsls	r1, r1, #23
 8003d36:	1c18      	adds	r0, r3, #0
 8003d38:	f7fc ff4c 	bl	8000bd4 <__aeabi_fdiv>
 8003d3c:	1c03      	adds	r3, r0, #0
 8003d3e:	1c18      	adds	r0, r3, #0
 8003d40:	f7ff fb90 	bl	8003464 <__aeabi_f2d>
 8003d44:	0002      	movs	r2, r0
 8003d46:	000b      	movs	r3, r1
 8003d48:	2000      	movs	r0, #0
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	05c9      	lsls	r1, r1, #23
 8003d4e:	f023 fed7 	bl	8027b00 <pow>
 8003d52:	0002      	movs	r2, r0
 8003d54:	000b      	movs	r3, r1
 8003d56:	0010      	movs	r0, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	f7fc fc77 	bl	800064c <__aeabi_d2uiz>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003d62:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	001a      	movs	r2, r3
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	795b      	ldrb	r3, [r3, #5]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fd fc78 	bl	8001668 <__aeabi_ui2f>
 8003d78:	1c03      	adds	r3, r0, #0
 8003d7a:	218a      	movs	r1, #138	@ 0x8a
 8003d7c:	05c9      	lsls	r1, r1, #23
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7fc ff28 	bl	8000bd4 <__aeabi_fdiv>
 8003d84:	1c03      	adds	r3, r0, #0
 8003d86:	1c18      	adds	r0, r3, #0
 8003d88:	f7ff fb6c 	bl	8003464 <__aeabi_f2d>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	2000      	movs	r0, #0
 8003d92:	2180      	movs	r1, #128	@ 0x80
 8003d94:	05c9      	lsls	r1, r1, #23
 8003d96:	f023 feb3 	bl	8027b00 <pow>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	000b      	movs	r3, r1
 8003d9e:	0010      	movs	r0, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	f7fc fc53 	bl	800064c <__aeabi_d2uiz>
 8003da6:	0002      	movs	r2, r0
 8003da8:	4b69      	ldr	r3, [pc, #420]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003daa:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	799b      	ldrb	r3, [r3, #6]
 8003db0:	001a      	movs	r2, r3
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	79db      	ldrb	r3, [r3, #7]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4313      	orrs	r3, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fd fc54 	bl	8001668 <__aeabi_ui2f>
 8003dc0:	1c03      	adds	r3, r0, #0
 8003dc2:	218a      	movs	r1, #138	@ 0x8a
 8003dc4:	05c9      	lsls	r1, r1, #23
 8003dc6:	1c18      	adds	r0, r3, #0
 8003dc8:	f7fc ff04 	bl	8000bd4 <__aeabi_fdiv>
 8003dcc:	1c03      	adds	r3, r0, #0
 8003dce:	1c18      	adds	r0, r3, #0
 8003dd0:	f7ff fb48 	bl	8003464 <__aeabi_f2d>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	000b      	movs	r3, r1
 8003dd8:	2000      	movs	r0, #0
 8003dda:	2180      	movs	r1, #128	@ 0x80
 8003ddc:	05c9      	lsls	r1, r1, #23
 8003dde:	f023 fe8f 	bl	8027b00 <pow>
 8003de2:	0002      	movs	r2, r0
 8003de4:	000b      	movs	r3, r1
 8003de6:	0010      	movs	r0, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	f7fc fc2f 	bl	800064c <__aeabi_d2uiz>
 8003dee:	0002      	movs	r2, r0
 8003df0:	4b57      	ldr	r3, [pc, #348]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003df2:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8003df4:	193a      	adds	r2, r7, r4
 8003df6:	2308      	movs	r3, #8
 8003df8:	2101      	movs	r1, #1
 8003dfa:	2028      	movs	r0, #40	@ 0x28
 8003dfc:	f7ff fc58 	bl	80036b0 <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	001a      	movs	r2, r3
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fd fc2a 	bl	8001668 <__aeabi_ui2f>
 8003e14:	1c03      	adds	r3, r0, #0
 8003e16:	218a      	movs	r1, #138	@ 0x8a
 8003e18:	05c9      	lsls	r1, r1, #23
 8003e1a:	1c18      	adds	r0, r3, #0
 8003e1c:	f7fc feda 	bl	8000bd4 <__aeabi_fdiv>
 8003e20:	1c03      	adds	r3, r0, #0
 8003e22:	1c18      	adds	r0, r3, #0
 8003e24:	f7ff fb1e 	bl	8003464 <__aeabi_f2d>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	000b      	movs	r3, r1
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	05c9      	lsls	r1, r1, #23
 8003e32:	f023 fe65 	bl	8027b00 <pow>
 8003e36:	0002      	movs	r2, r0
 8003e38:	000b      	movs	r3, r1
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	f7fc fc05 	bl	800064c <__aeabi_d2uiz>
 8003e42:	0002      	movs	r2, r0
 8003e44:	4b42      	ldr	r3, [pc, #264]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003e46:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	789b      	ldrb	r3, [r3, #2]
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	78db      	ldrb	r3, [r3, #3]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4313      	orrs	r3, r2
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd fc06 	bl	8001668 <__aeabi_ui2f>
 8003e5c:	1c03      	adds	r3, r0, #0
 8003e5e:	218a      	movs	r1, #138	@ 0x8a
 8003e60:	05c9      	lsls	r1, r1, #23
 8003e62:	1c18      	adds	r0, r3, #0
 8003e64:	f7fc feb6 	bl	8000bd4 <__aeabi_fdiv>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	1c18      	adds	r0, r3, #0
 8003e6c:	f7ff fafa 	bl	8003464 <__aeabi_f2d>
 8003e70:	0002      	movs	r2, r0
 8003e72:	000b      	movs	r3, r1
 8003e74:	2000      	movs	r0, #0
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	05c9      	lsls	r1, r1, #23
 8003e7a:	f023 fe41 	bl	8027b00 <pow>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	000b      	movs	r3, r1
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	f7fc fbe1 	bl	800064c <__aeabi_d2uiz>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	4b30      	ldr	r3, [pc, #192]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003e8e:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	791b      	ldrb	r3, [r3, #4]
 8003e94:	001a      	movs	r2, r3
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	795b      	ldrb	r3, [r3, #5]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fd fbe2 	bl	8001668 <__aeabi_ui2f>
 8003ea4:	1c03      	adds	r3, r0, #0
 8003ea6:	218a      	movs	r1, #138	@ 0x8a
 8003ea8:	05c9      	lsls	r1, r1, #23
 8003eaa:	1c18      	adds	r0, r3, #0
 8003eac:	f7fc fe92 	bl	8000bd4 <__aeabi_fdiv>
 8003eb0:	1c03      	adds	r3, r0, #0
 8003eb2:	1c18      	adds	r0, r3, #0
 8003eb4:	f7ff fad6 	bl	8003464 <__aeabi_f2d>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	000b      	movs	r3, r1
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	05c9      	lsls	r1, r1, #23
 8003ec2:	f023 fe1d 	bl	8027b00 <pow>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	000b      	movs	r3, r1
 8003eca:	0010      	movs	r0, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	f7fc fbbd 	bl	800064c <__aeabi_d2uiz>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003ed6:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	799b      	ldrb	r3, [r3, #6]
 8003edc:	001a      	movs	r2, r3
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	79db      	ldrb	r3, [r3, #7]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fbbe 	bl	8001668 <__aeabi_ui2f>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	218a      	movs	r1, #138	@ 0x8a
 8003ef0:	05c9      	lsls	r1, r1, #23
 8003ef2:	1c18      	adds	r0, r3, #0
 8003ef4:	f7fc fe6e 	bl	8000bd4 <__aeabi_fdiv>
 8003ef8:	1c03      	adds	r3, r0, #0
 8003efa:	1c18      	adds	r0, r3, #0
 8003efc:	f7ff fab2 	bl	8003464 <__aeabi_f2d>
 8003f00:	0002      	movs	r2, r0
 8003f02:	000b      	movs	r3, r1
 8003f04:	2000      	movs	r0, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	05c9      	lsls	r1, r1, #23
 8003f0a:	f023 fdf9 	bl	8027b00 <pow>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	000b      	movs	r3, r1
 8003f12:	0010      	movs	r0, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	f7fc fb99 	bl	800064c <__aeabi_d2uiz>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003f1e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8003f20:	193a      	adds	r2, r7, r4
 8003f22:	2301      	movs	r3, #1
 8003f24:	2101      	movs	r1, #1
 8003f26:	2038      	movs	r0, #56	@ 0x38
 8003f28:	f7ff fbc2 	bl	80036b0 <ReadMemRegister>
    raw._misr = i2cbuf[0];
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	7819      	ldrb	r1, [r3, #0]
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003f32:	2220      	movs	r2, #32
 8003f34:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b007      	add	sp, #28
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	20000464 	.word	0x20000464
 8003f48:	080291dc 	.word	0x080291dc
 8003f4c:	08029104 	.word	0x08029104
 8003f50:	20000478 	.word	0x20000478

08003f54 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	1dbb      	adds	r3, r7, #6
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	1c0a      	adds	r2, r1, #0
 8003f64:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 8003f72:	1dbb      	adds	r3, r7, #6
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 8003f98:	187a      	adds	r2, r7, r1
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	2013      	movs	r0, #19
 8003fa0:	f7ff fb56 	bl	8003650 <WriteMemRegister>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	210f      	movs	r1, #15
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	701a      	strb	r2, [r3, #0]
  return result;
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	4193      	sbcs	r3, r2
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 8003fca:	4916      	ldr	r1, [pc, #88]	@ (8004024 <ENS160_set_envdata+0x64>)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fc fc77 	bl	80008c0 <__aeabi_fadd>
 8003fd2:	1c03      	adds	r3, r0, #0
 8003fd4:	2185      	movs	r1, #133	@ 0x85
 8003fd6:	05c9      	lsls	r1, r1, #23
 8003fd8:	1c18      	adds	r0, r3, #0
 8003fda:	f7fc ffe1 	bl	8000fa0 <__aeabi_fmul>
 8003fde:	1c03      	adds	r3, r0, #0
 8003fe0:	250e      	movs	r5, #14
 8003fe2:	197c      	adds	r4, r7, r5
 8003fe4:	1c18      	adds	r0, r3, #0
 8003fe6:	f7fc fb19 	bl	800061c <__aeabi_f2uiz>
 8003fea:	0003      	movs	r3, r0
 8003fec:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 8003fee:	2188      	movs	r1, #136	@ 0x88
 8003ff0:	05c9      	lsls	r1, r1, #23
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	f7fc ffd4 	bl	8000fa0 <__aeabi_fmul>
 8003ff8:	1c03      	adds	r3, r0, #0
 8003ffa:	260c      	movs	r6, #12
 8003ffc:	19bc      	adds	r4, r7, r6
 8003ffe:	1c18      	adds	r0, r3, #0
 8004000:	f7fc fb0c 	bl	800061c <__aeabi_f2uiz>
 8004004:	0003      	movs	r3, r0
 8004006:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004008:	19bb      	adds	r3, r7, r6
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	197b      	adds	r3, r7, r5
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	0011      	movs	r1, r2
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff ff9e 	bl	8003f54 <ENS160_set_envdata210>
 8004018:	0003      	movs	r3, r0
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b005      	add	sp, #20
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	43889333 	.word	0x43889333

08004028 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b085      	sub	sp, #20
 800402c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800402e:	4bd0      	ldr	r3, [pc, #832]	@ (8004370 <ENS_Upkeep+0x348>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0018      	movs	r0, r3
 8004034:	f00e fcee 	bl	8012a14 <TimestampIsReached>
 8004038:	0003      	movs	r3, r0
 800403a:	001a      	movs	r2, r3
 800403c:	2301      	movs	r3, #1
 800403e:	4053      	eors	r3, r2
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <ENS_Upkeep+0x24>
    return ENSState;
 8004046:	4bcb      	ldr	r3, [pc, #812]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	e212      	b.n	8004472 <ENS_Upkeep+0x44a>
  }
  switch(ENSState) {
 800404c:	4bc9      	ldr	r3, [pc, #804]	@ (8004374 <ENS_Upkeep+0x34c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d900      	bls.n	8004056 <ENS_Upkeep+0x2e>
 8004054:	e1f6      	b.n	8004444 <ENS_Upkeep+0x41c>
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	4bc7      	ldr	r3, [pc, #796]	@ (8004378 <ENS_Upkeep+0x350>)
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004060:	4ac6      	ldr	r2, [pc, #792]	@ (800437c <ENS_Upkeep+0x354>)
 8004062:	4bc7      	ldr	r3, [pc, #796]	@ (8004380 <ENS_Upkeep+0x358>)
 8004064:	0019      	movs	r1, r3
 8004066:	2003      	movs	r0, #3
 8004068:	f00e fd2a 	bl	8012ac0 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800406c:	f00f fa5e 	bl	801352c <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	4ac4      	ldr	r2, [pc, #784]	@ (8004384 <ENS_Upkeep+0x35c>)
 8004074:	189a      	adds	r2, r3, r2
 8004076:	4bbe      	ldr	r3, [pc, #760]	@ (8004370 <ENS_Upkeep+0x348>)
 8004078:	601a      	str	r2, [r3, #0]
    break;
 800407a:	e1f8      	b.n	800446e <ENS_Upkeep+0x446>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 800407c:	f008 fe00 	bl	800cc80 <getSensorLock>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d000      	beq.n	8004086 <ENS_Upkeep+0x5e>
 8004084:	e1ea      	b.n	800445c <ENS_Upkeep+0x434>
      break;
    }
    setSensorLock(ENS160);
 8004086:	2005      	movs	r0, #5
 8004088:	f008 fde6 	bl	800cc58 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800408c:	1d3c      	adds	r4, r7, #4
 800408e:	2002      	movs	r0, #2
 8004090:	f7ff fca6 	bl	80039e0 <ENS160_setMode>
 8004094:	0003      	movs	r3, r0
 8004096:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <ENS_Upkeep+0x7c>
 80040a0:	4bb9      	ldr	r3, [pc, #740]	@ (8004388 <ENS_Upkeep+0x360>)
 80040a2:	e000      	b.n	80040a6 <ENS_Upkeep+0x7e>
 80040a4:	4bb9      	ldr	r3, [pc, #740]	@ (800438c <ENS_Upkeep+0x364>)
 80040a6:	4aba      	ldr	r2, [pc, #744]	@ (8004390 <ENS_Upkeep+0x368>)
 80040a8:	49b5      	ldr	r1, [pc, #724]	@ (8004380 <ENS_Upkeep+0x358>)
 80040aa:	2003      	movs	r0, #3
 80040ac:	f00e fd08 	bl	8012ac0 <CreateLine>
    setSensorLock(FREE);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f008 fdd1 	bl	800cc58 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80040b6:	4baf      	ldr	r3, [pc, #700]	@ (8004374 <ENS_Upkeep+0x34c>)
 80040b8:	2203      	movs	r2, #3
 80040ba:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80040bc:	f00f fa36 	bl	801352c <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	22fa      	movs	r2, #250	@ 0xfa
 80040c4:	0092      	lsls	r2, r2, #2
 80040c6:	189a      	adds	r2, r3, r2
 80040c8:	4ba9      	ldr	r3, [pc, #676]	@ (8004370 <ENS_Upkeep+0x348>)
 80040ca:	601a      	str	r2, [r3, #0]
    break;
 80040cc:	e1cf      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 80040ce:	f008 fdd7 	bl	800cc80 <getSensorLock>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d000      	beq.n	80040d8 <ENS_Upkeep+0xb0>
 80040d6:	e1c3      	b.n	8004460 <ENS_Upkeep+0x438>
      break;
    }
    setSensorLock(ENS160);
 80040d8:	2005      	movs	r0, #5
 80040da:	f008 fdbd 	bl	800cc58 <setSensorLock>
    status = ENS160_readStatus();
 80040de:	1d7c      	adds	r4, r7, #5
 80040e0:	f7ff fd2e 	bl	8003b40 <ENS160_readStatus>
 80040e4:	0003      	movs	r3, r0
 80040e6:	7023      	strb	r3, [r4, #0]
    setSensorLock(FREE);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f008 fdb5 	bl	800cc58 <setSensorLock>
    if ((status & 0x0C) != 0) {
 80040ee:	1d7b      	adds	r3, r7, #5
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	220c      	movs	r2, #12
 80040f4:	4013      	ands	r3, r2
 80040f6:	d02e      	beq.n	8004156 <ENS_Upkeep+0x12e>
      switch (status >> 2) {
 80040f8:	1d7b      	adds	r3, r7, #5
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d013      	beq.n	800412c <ENS_Upkeep+0x104>
 8004104:	dc19      	bgt.n	800413a <ENS_Upkeep+0x112>
 8004106:	2b01      	cmp	r3, #1
 8004108:	d002      	beq.n	8004110 <ENS_Upkeep+0xe8>
 800410a:	2b02      	cmp	r3, #2
 800410c:	d007      	beq.n	800411e <ENS_Upkeep+0xf6>
 800410e:	e014      	b.n	800413a <ENS_Upkeep+0x112>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004110:	4aa0      	ldr	r2, [pc, #640]	@ (8004394 <ENS_Upkeep+0x36c>)
 8004112:	4b9b      	ldr	r3, [pc, #620]	@ (8004380 <ENS_Upkeep+0x358>)
 8004114:	0019      	movs	r1, r3
 8004116:	2003      	movs	r0, #3
 8004118:	f00e fcd2 	bl	8012ac0 <CreateLine>
        break;
 800411c:	e00d      	b.n	800413a <ENS_Upkeep+0x112>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800411e:	4a9e      	ldr	r2, [pc, #632]	@ (8004398 <ENS_Upkeep+0x370>)
 8004120:	4b97      	ldr	r3, [pc, #604]	@ (8004380 <ENS_Upkeep+0x358>)
 8004122:	0019      	movs	r1, r3
 8004124:	2003      	movs	r0, #3
 8004126:	f00e fccb 	bl	8012ac0 <CreateLine>
        break;
 800412a:	e006      	b.n	800413a <ENS_Upkeep+0x112>
      case 3:
        Debug("ENS160 Invalid output");
 800412c:	4a9b      	ldr	r2, [pc, #620]	@ (800439c <ENS_Upkeep+0x374>)
 800412e:	4b94      	ldr	r3, [pc, #592]	@ (8004380 <ENS_Upkeep+0x358>)
 8004130:	0019      	movs	r1, r3
 8004132:	2003      	movs	r0, #3
 8004134:	f00e fcc4 	bl	8012ac0 <CreateLine>
        break;
 8004138:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800413a:	1d7b      	adds	r3, r7, #5
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2203      	movs	r2, #3
 8004140:	4013      	ands	r3, r2
 8004142:	d108      	bne.n	8004156 <ENS_Upkeep+0x12e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004144:	f00f f9f2 	bl	801352c <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	22fa      	movs	r2, #250	@ 0xfa
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	189a      	adds	r2, r3, r2
 8004150:	4b87      	ldr	r3, [pc, #540]	@ (8004370 <ENS_Upkeep+0x348>)
 8004152:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004154:	e18b      	b.n	800446e <ENS_Upkeep+0x446>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004156:	4b87      	ldr	r3, [pc, #540]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004158:	2204      	movs	r2, #4
 800415a:	701a      	strb	r2, [r3, #0]
    break;
 800415c:	e187      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800415e:	f008 fd8f 	bl	800cc80 <getSensorLock>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d036      	beq.n	80041d4 <ENS_Upkeep+0x1ac>
 8004166:	f008 fd8b 	bl	800cc80 <getSensorLock>
 800416a:	0003      	movs	r3, r0
 800416c:	2b05      	cmp	r3, #5
 800416e:	d031      	beq.n	80041d4 <ENS_Upkeep+0x1ac>
      uint8_t locktype = getSensorLock();
 8004170:	1dbc      	adds	r4, r7, #6
 8004172:	f008 fd85 	bl	800cc80 <getSensorLock>
 8004176:	0003      	movs	r3, r0
 8004178:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 800417a:	1dbb      	adds	r3, r7, #6
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d019      	beq.n	80041b6 <ENS_Upkeep+0x18e>
 8004182:	1dbb      	adds	r3, r7, #6
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d013      	beq.n	80041b2 <ENS_Upkeep+0x18a>
 800418a:	1dbb      	adds	r3, r7, #6
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d00d      	beq.n	80041ae <ENS_Upkeep+0x186>
 8004192:	1dbb      	adds	r3, r7, #6
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d007      	beq.n	80041aa <ENS_Upkeep+0x182>
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d101      	bne.n	80041a6 <ENS_Upkeep+0x17e>
 80041a2:	4b7f      	ldr	r3, [pc, #508]	@ (80043a0 <ENS_Upkeep+0x378>)
 80041a4:	e008      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041a6:	4b7f      	ldr	r3, [pc, #508]	@ (80043a4 <ENS_Upkeep+0x37c>)
 80041a8:	e006      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041aa:	4b7f      	ldr	r3, [pc, #508]	@ (80043a8 <ENS_Upkeep+0x380>)
 80041ac:	e004      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041ae:	4b7f      	ldr	r3, [pc, #508]	@ (80043ac <ENS_Upkeep+0x384>)
 80041b0:	e002      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041b2:	4b7f      	ldr	r3, [pc, #508]	@ (80043b0 <ENS_Upkeep+0x388>)
 80041b4:	e000      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041b6:	4b7f      	ldr	r3, [pc, #508]	@ (80043b4 <ENS_Upkeep+0x38c>)
 80041b8:	4a7f      	ldr	r2, [pc, #508]	@ (80043b8 <ENS_Upkeep+0x390>)
 80041ba:	4971      	ldr	r1, [pc, #452]	@ (8004380 <ENS_Upkeep+0x358>)
 80041bc:	2003      	movs	r0, #3
 80041be:	f00e fc7f 	bl	8012ac0 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80041c2:	f00f f9b3 	bl	801352c <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	334e      	adds	r3, #78	@ 0x4e
 80041ca:	33ff      	adds	r3, #255	@ 0xff
 80041cc:	001a      	movs	r2, r3
 80041ce:	4b68      	ldr	r3, [pc, #416]	@ (8004370 <ENS_Upkeep+0x348>)
 80041d0:	601a      	str	r2, [r3, #0]
      break;
 80041d2:	e14c      	b.n	800446e <ENS_Upkeep+0x446>
    }
    setSensorLock(ENS160);
 80041d4:	2005      	movs	r0, #5
 80041d6:	f008 fd3f 	bl	800cc58 <setSensorLock>
    status = ENS160_readStatus();
 80041da:	1d7c      	adds	r4, r7, #5
 80041dc:	f7ff fcb0 	bl	8003b40 <ENS160_readStatus>
 80041e0:	0003      	movs	r3, r0
 80041e2:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 80041e4:	1d7b      	adds	r3, r7, #5
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d10b      	bne.n	8004206 <ENS_Upkeep+0x1de>
      ENS160TimeStamp = HAL_GetTick() + 500;
 80041ee:	f00f f99d 	bl	801352c <HAL_GetTick>
 80041f2:	0003      	movs	r3, r0
 80041f4:	33f5      	adds	r3, #245	@ 0xf5
 80041f6:	33ff      	adds	r3, #255	@ 0xff
 80041f8:	001a      	movs	r2, r3
 80041fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004370 <ENS_Upkeep+0x348>)
 80041fc:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      setSensorLock(FREE);
 80041fe:	2000      	movs	r0, #0
 8004200:	f008 fd2a 	bl	800cc58 <setSensorLock>
      break;
 8004204:	e133      	b.n	800446e <ENS_Upkeep+0x446>
    }
    ENS160_measure(false);
 8004206:	2000      	movs	r0, #0
 8004208:	f7ff fcba 	bl	8003b80 <ENS160_measure>
    HAL_Delay(10);
 800420c:	200a      	movs	r0, #10
 800420e:	f00f f997 	bl	8013540 <HAL_Delay>
    ENS160_measureRaw(false);
 8004212:	2000      	movs	r0, #0
 8004214:	f7ff fd2e 	bl	8003c74 <ENS160_measureRaw>
    HAL_Delay(10);
 8004218:	200a      	movs	r0, #10
 800421a:	f00f f991 	bl	8013540 <HAL_Delay>
    setSensorLock(FREE);
 800421e:	2000      	movs	r0, #0
 8004220:	f008 fd1a 	bl	800cc58 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004224:	4b53      	ldr	r3, [pc, #332]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004226:	2206      	movs	r2, #6
 8004228:	701a      	strb	r2, [r3, #0]
    break;
 800422a:	e120      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800422c:	4b63      	ldr	r3, [pc, #396]	@ (80043bc <ENS_Upkeep+0x394>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d13b      	bne.n	80042ac <ENS_Upkeep+0x284>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004234:	4b62      	ldr	r3, [pc, #392]	@ (80043c0 <ENS_Upkeep+0x398>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	001c      	movs	r4, r3
 800423a:	4b61      	ldr	r3, [pc, #388]	@ (80043c0 <ENS_Upkeep+0x398>)
 800423c:	885b      	ldrh	r3, [r3, #2]
 800423e:	0018      	movs	r0, r3
 8004240:	4b5f      	ldr	r3, [pc, #380]	@ (80043c0 <ENS_Upkeep+0x398>)
 8004242:	889b      	ldrh	r3, [r3, #4]
 8004244:	4a5f      	ldr	r2, [pc, #380]	@ (80043c4 <ENS_Upkeep+0x39c>)
 8004246:	4960      	ldr	r1, [pc, #384]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	9000      	str	r0, [sp, #0]
 800424c:	0023      	movs	r3, r4
 800424e:	2002      	movs	r0, #2
 8004250:	f00e fc36 	bl	8012ac0 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004254:	4b5d      	ldr	r3, [pc, #372]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	4b5c      	ldr	r3, [pc, #368]	@ (80043cc <ENS_Upkeep+0x3a4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a5c      	ldr	r2, [pc, #368]	@ (80043d0 <ENS_Upkeep+0x3a8>)
 800425e:	495a      	ldr	r1, [pc, #360]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	0003      	movs	r3, r0
 8004264:	2002      	movs	r0, #2
 8004266:	f00e fc2b 	bl	8012ac0 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 800426a:	4b58      	ldr	r3, [pc, #352]	@ (80043cc <ENS_Upkeep+0x3a4>)
 800426c:	6898      	ldr	r0, [r3, #8]
 800426e:	4b57      	ldr	r3, [pc, #348]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4a58      	ldr	r2, [pc, #352]	@ (80043d4 <ENS_Upkeep+0x3ac>)
 8004274:	4954      	ldr	r1, [pc, #336]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	0003      	movs	r3, r0
 800427a:	2002      	movs	r0, #2
 800427c:	f00e fc20 	bl	8012ac0 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 8004280:	4b52      	ldr	r3, [pc, #328]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004282:	6918      	ldr	r0, [r3, #16]
 8004284:	4b51      	ldr	r3, [pc, #324]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	4a53      	ldr	r2, [pc, #332]	@ (80043d8 <ENS_Upkeep+0x3b0>)
 800428a:	494f      	ldr	r1, [pc, #316]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	0003      	movs	r3, r0
 8004290:	2002      	movs	r0, #2
 8004292:	f00e fc15 	bl	8012ac0 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 8004296:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004298:	6998      	ldr	r0, [r3, #24]
 800429a:	4b4c      	ldr	r3, [pc, #304]	@ (80043cc <ENS_Upkeep+0x3a4>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a4f      	ldr	r2, [pc, #316]	@ (80043dc <ENS_Upkeep+0x3b4>)
 80042a0:	4949      	ldr	r1, [pc, #292]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0003      	movs	r3, r0
 80042a6:	2002      	movs	r0, #2
 80042a8:	f00e fc0a 	bl	8012ac0 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80042ac:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <ENS_Upkeep+0x394>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d103      	bne.n	80042bc <ENS_Upkeep+0x294>
 80042b4:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <ENS_Upkeep+0x394>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e005      	b.n	80042c8 <ENS_Upkeep+0x2a0>
 80042bc:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <ENS_Upkeep+0x394>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <ENS_Upkeep+0x394>)
 80042c6:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80042c8:	4b3d      	ldr	r3, [pc, #244]	@ (80043c0 <ENS_Upkeep+0x398>)
 80042ca:	7818      	ldrb	r0, [r3, #0]
 80042cc:	4b3c      	ldr	r3, [pc, #240]	@ (80043c0 <ENS_Upkeep+0x398>)
 80042ce:	8859      	ldrh	r1, [r3, #2]
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <ENS_Upkeep+0x398>)
 80042d2:	889b      	ldrh	r3, [r3, #4]
 80042d4:	001a      	movs	r2, r3
 80042d6:	f000 f9fb 	bl	80046d0 <setENS160>
    ENSState = ENS_LOW_POWER;
 80042da:	4b26      	ldr	r3, [pc, #152]	@ (8004374 <ENS_Upkeep+0x34c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
    break;
 80042e0:	e0c5      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80042e2:	f00f f923 	bl	801352c <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	22fa      	movs	r2, #250	@ 0xfa
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	189a      	adds	r2, r3, r2
 80042ee:	4b20      	ldr	r3, [pc, #128]	@ (8004370 <ENS_Upkeep+0x348>)
 80042f0:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80042f2:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <ENS_Upkeep+0x3b8>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	4053      	eors	r3, r2
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d032      	beq.n	8004366 <ENS_Upkeep+0x33e>
 8004300:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <ENS_Upkeep+0x3bc>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4053      	eors	r3, r2
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02b      	beq.n	8004366 <ENS_Upkeep+0x33e>
 800430e:	4b2b      	ldr	r3, [pc, #172]	@ (80043bc <ENS_Upkeep+0x394>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d927      	bls.n	8004366 <ENS_Upkeep+0x33e>
      if (getSensorLock() != FREE) {
 8004316:	f008 fcb3 	bl	800cc80 <getSensorLock>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d000      	beq.n	8004320 <ENS_Upkeep+0x2f8>
 800431e:	e0a1      	b.n	8004464 <ENS_Upkeep+0x43c>
        break;
      }
      setSensorLock(ENS160);
 8004320:	2005      	movs	r0, #5
 8004322:	f008 fc99 	bl	800cc58 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004326:	1cfc      	adds	r4, r7, #3
 8004328:	2000      	movs	r0, #0
 800432a:	f7ff fb59 	bl	80039e0 <ENS160_setMode>
 800432e:	0003      	movs	r3, r0
 8004330:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004332:	1cfb      	adds	r3, r7, #3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <ENS_Upkeep+0x316>
 800433a:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <ENS_Upkeep+0x360>)
 800433c:	e000      	b.n	8004340 <ENS_Upkeep+0x318>
 800433e:	4b13      	ldr	r3, [pc, #76]	@ (800438c <ENS_Upkeep+0x364>)
 8004340:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <ENS_Upkeep+0x394>)
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	0010      	movs	r0, r2
 8004346:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <ENS_Upkeep+0x3c0>)
 8004348:	490d      	ldr	r1, [pc, #52]	@ (8004380 <ENS_Upkeep+0x358>)
 800434a:	9000      	str	r0, [sp, #0]
 800434c:	2003      	movs	r0, #3
 800434e:	f00e fbb7 	bl	8012ac0 <CreateLine>
      setSensorLock(FREE);
 8004352:	2000      	movs	r0, #0
 8004354:	f008 fc80 	bl	800cc58 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004358:	f00f f8e8 	bl	801352c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <ENS_Upkeep+0x3c4>)
 8004360:	189a      	adds	r2, r3, r2
 8004362:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <ENS_Upkeep+0x348>)
 8004364:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004366:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004368:	2208      	movs	r2, #8
 800436a:	701a      	strb	r2, [r3, #0]
    break;
 800436c:	e07f      	b.n	800446e <ENS_Upkeep+0x446>
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	20000468 	.word	0x20000468
 8004374:	20000000 	.word	0x20000000
 8004378:	0802cf00 	.word	0x0802cf00
 800437c:	080291fc 	.word	0x080291fc
 8004380:	08029104 	.word	0x08029104
 8004384:	002f9b80 	.word	0x002f9b80
 8004388:	08029230 	.word	0x08029230
 800438c:	08029238 	.word	0x08029238
 8004390:	08029240 	.word	0x08029240
 8004394:	08029264 	.word	0x08029264
 8004398:	0802927c 	.word	0x0802927c
 800439c:	0802929c 	.word	0x0802929c
 80043a0:	080292b4 	.word	0x080292b4
 80043a4:	080292bc 	.word	0x080292bc
 80043a8:	080292c4 	.word	0x080292c4
 80043ac:	080292cc 	.word	0x080292cc
 80043b0:	080292d4 	.word	0x080292d4
 80043b4:	080292dc 	.word	0x080292dc
 80043b8:	080292e4 	.word	0x080292e4
 80043bc:	2000046c 	.word	0x2000046c
 80043c0:	2000049c 	.word	0x2000049c
 80043c4:	0802930c 	.word	0x0802930c
 80043c8:	08029174 	.word	0x08029174
 80043cc:	20000478 	.word	0x20000478
 80043d0:	08029338 	.word	0x08029338
 80043d4:	08029354 	.word	0x08029354
 80043d8:	08029370 	.word	0x08029370
 80043dc:	0802938c 	.word	0x0802938c
 80043e0:	20001e75 	.word	0x20001e75
 80043e4:	20001e76 	.word	0x20001e76
 80043e8:	080293a8 	.word	0x080293a8
 80043ec:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80043f0:	f008 fc46 	bl	800cc80 <getSensorLock>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d137      	bne.n	8004468 <ENS_Upkeep+0x440>
        break;
      }
      setSensorLock(ENS160);
 80043f8:	2005      	movs	r0, #5
 80043fa:	f008 fc2d 	bl	800cc58 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80043fe:	1cba      	adds	r2, r7, #2
 8004400:	2301      	movs	r3, #1
 8004402:	2101      	movs	r1, #1
 8004404:	2010      	movs	r0, #16
 8004406:	f7ff f953 	bl	80036b0 <ReadMemRegister>
      if (data == 0) {
 800440a:	1cbb      	adds	r3, r7, #2
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d111      	bne.n	8004436 <ENS_Upkeep+0x40e>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004412:	1dfc      	adds	r4, r7, #7
 8004414:	2002      	movs	r0, #2
 8004416:	f7ff fae3 	bl	80039e0 <ENS160_setMode>
 800441a:	0003      	movs	r3, r0
 800441c:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <ENS_Upkeep+0x402>
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <ENS_Upkeep+0x454>)
 8004428:	e000      	b.n	800442c <ENS_Upkeep+0x404>
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <ENS_Upkeep+0x458>)
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <ENS_Upkeep+0x45c>)
 800442e:	4916      	ldr	r1, [pc, #88]	@ (8004488 <ENS_Upkeep+0x460>)
 8004430:	2003      	movs	r0, #3
 8004432:	f00e fb45 	bl	8012ac0 <CreateLine>
      }
      setSensorLock(FREE);
 8004436:	2000      	movs	r0, #0
 8004438:	f008 fc0e 	bl	800cc58 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <ENS_Upkeep+0x464>)
 800443e:	2203      	movs	r2, #3
 8004440:	701a      	strb	r2, [r3, #0]
    break;
 8004442:	e014      	b.n	800446e <ENS_Upkeep+0x446>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <ENS_Upkeep+0x464>)
 8004446:	2202      	movs	r2, #2
 8004448:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800444a:	f008 fc19 	bl	800cc80 <getSensorLock>
 800444e:	0003      	movs	r3, r0
 8004450:	2b05      	cmp	r3, #5
 8004452:	d00b      	beq.n	800446c <ENS_Upkeep+0x444>
      setSensorLock(FREE);
 8004454:	2000      	movs	r0, #0
 8004456:	f008 fbff 	bl	800cc58 <setSensorLock>
    }
    break;
 800445a:	e007      	b.n	800446c <ENS_Upkeep+0x444>
      break;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e006      	b.n	800446e <ENS_Upkeep+0x446>
      break;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e004      	b.n	800446e <ENS_Upkeep+0x446>
        break;
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	e002      	b.n	800446e <ENS_Upkeep+0x446>
        break;
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	e000      	b.n	800446e <ENS_Upkeep+0x446>
    break;
 800446c:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <ENS_Upkeep+0x464>)
 8004470:	781b      	ldrb	r3, [r3, #0]
}
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b003      	add	sp, #12
 8004478:	bd90      	pop	{r4, r7, pc}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	08029230 	.word	0x08029230
 8004480:	08029238 	.word	0x08029238
 8004484:	080293e0 	.word	0x080293e0
 8004488:	08029104 	.word	0x08029104
 800448c:	20000000 	.word	0x20000000

08004490 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004494:	4b02      	ldr	r3, [pc, #8]	@ (80044a0 <forceNTPupdate+0x10>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000688 	.word	0x20000688

080044a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80044ac:	f00f f83e 	bl	801352c <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	18d2      	adds	r2, r2, r3
 80044b6:	4b03      	ldr	r3, [pc, #12]	@ (80044c4 <setESPTimeStamp+0x20>)
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	20000684 	.word	0x20000684

080044c8 <setCharges>:
void setCharges(){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80044cc:	f004 fc24 	bl	8008d18 <ReadBatteryVoltage>
 80044d0:	1c02      	adds	r2, r0, #0
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <setCharges+0x3c>)
 80044d4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80044d6:	f004 fc81 	bl	8008ddc <ReadSolarVoltage>
 80044da:	0003      	movs	r3, r0
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fe ff6f 	bl	80033c0 <__aeabi_i2d>
 80044e2:	2200      	movs	r2, #0
 80044e4:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <setCharges+0x40>)
 80044e6:	f7fd fc65 	bl	8001db4 <__aeabi_ddiv>
 80044ea:	0002      	movs	r2, r0
 80044ec:	000b      	movs	r3, r1
 80044ee:	0010      	movs	r0, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	f7fe ffff 	bl	80034f4 <__aeabi_d2f>
 80044f6:	1c02      	adds	r2, r0, #0
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <setCharges+0x44>)
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			@ (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	200005dc 	.word	0x200005dc
 8004508:	408f4000 	.word	0x408f4000
 800450c:	200005e0 	.word	0x200005e0

08004510 <checkEEprom>:
bool checkEEprom(){
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <checkEEprom+0x5c>)
 8004518:	4815      	ldr	r0, [pc, #84]	@ (8004570 <checkEEprom+0x60>)
 800451a:	220c      	movs	r2, #12
 800451c:	0019      	movs	r1, r3
 800451e:	f006 fe4d 	bl	800b1bc <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e00e      	b.n	8004548 <checkEEprom+0x38>
    configSum += tempConfig[i];
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <checkEEprom+0x5c>)
 8004530:	5cd3      	ldrb	r3, [r2, r3]
 8004532:	001a      	movs	r2, r3
 8004534:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <checkEEprom+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	18d2      	adds	r2, r2, r3
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <checkEEprom+0x64>)
 800453c:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	3201      	adds	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	1dfb      	adds	r3, r7, #7
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b0b      	cmp	r3, #11
 800454e:	d9ec      	bls.n	800452a <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <checkEEprom+0x64>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	425a      	negs	r2, r3
 8004556:	4153      	adcs	r3, r2
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <checkEEprom+0x68>)
 800455c:	701a      	strb	r2, [r3, #0]
  return test;
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <checkEEprom+0x68>)
 8004560:	781b      	ldrb	r3, [r3, #0]
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b002      	add	sp, #8
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	20000710 	.word	0x20000710
 8004570:	0808000c 	.word	0x0808000c
 8004574:	2000071c 	.word	0x2000071c
 8004578:	20000720 	.word	0x20000720

0800457c <checkName>:
bool checkName(){
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <checkName+0x5c>)
 8004584:	4815      	ldr	r0, [pc, #84]	@ (80045dc <checkName+0x60>)
 8004586:	2220      	movs	r2, #32
 8004588:	0019      	movs	r1, r3
 800458a:	f006 fe17 	bl	800b1bc <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e00e      	b.n	80045b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004596:	1dfb      	adds	r3, r7, #7
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	4a0f      	ldr	r2, [pc, #60]	@ (80045d8 <checkName+0x5c>)
 800459c:	5cd3      	ldrb	r3, [r2, r3]
 800459e:	001a      	movs	r2, r3
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <checkName+0x64>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	18d2      	adds	r2, r2, r3
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <checkName+0x64>)
 80045a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	3201      	adds	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b0b      	cmp	r3, #11
 80045ba:	d9ec      	bls.n	8004596 <checkName+0x1a>
  }
  test = (configSum != 0);
 80045bc:	4b08      	ldr	r3, [pc, #32]	@ (80045e0 <checkName+0x64>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	4193      	sbcs	r3, r2
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <checkName+0x68>)
 80045c8:	701a      	strb	r2, [r3, #0]
  return test;
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <checkName+0x68>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	20000724 	.word	0x20000724
 80045dc:	08080090 	.word	0x08080090
 80045e0:	20000744 	.word	0x20000744
 80045e4:	20000748 	.word	0x20000748

080045e8 <setHIDS>:


void setHIDS(float temp, float humid){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <setHIDS+0x20>)
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <setHIDS+0x20>)
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	20000694 	.word	0x20000694

0800460c <setVOC>:

void setVOC(uint16_t voc) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	0002      	movs	r2, r0
 8004614:	1dbb      	adds	r3, r7, #6
 8004616:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004618:	4b04      	ldr	r3, [pc, #16]	@ (800462c <setVOC+0x20>)
 800461a:	1dba      	adds	r2, r7, #6
 800461c:	2158      	movs	r1, #88	@ 0x58
 800461e:	8812      	ldrh	r2, [r2, #0]
 8004620:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	20000694 	.word	0x20000694

08004630 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 800463a:	4b10      	ldr	r3, [pc, #64]	@ (800467c <setAHT2x+0x4c>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (airhum > MeasVal.AHT2x_humiditymax) {
 8004640:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <setAHT2x+0x4c>)
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004644:	1c19      	adds	r1, r3, #0
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f7fb ff86 	bl	8000558 <__aeabi_fcmpgt>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d002      	beq.n	8004656 <setAHT2x+0x26>
    MeasVal.AHT2x_humiditymax = airhum;
 8004650:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <setAHT2x+0x4c>)
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  MeasVal.AHT2x_temperature = airtemp;
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <setAHT2x+0x4c>)
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (airtemp > MeasVal.AHT2x_temperaturemax) {
 800465c:	4b07      	ldr	r3, [pc, #28]	@ (800467c <setAHT2x+0x4c>)
 800465e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004660:	1c19      	adds	r1, r3, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fb ff78 	bl	8000558 <__aeabi_fcmpgt>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d100      	bne.n	800466e <setAHT2x+0x3e>
    MeasVal.AHT2x_temperaturemax = airtemp;
  }
}
 800466c:	e002      	b.n	8004674 <setAHT2x+0x44>
    MeasVal.AHT2x_temperaturemax = airtemp;
 800466e:	4b03      	ldr	r3, [pc, #12]	@ (800467c <setAHT2x+0x4c>)
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000694 	.word	0x20000694

08004680 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <setBMP280+0x4c>)
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (airtemp > MeasVal.BMP280_temperaturemax) {
 8004690:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <setBMP280+0x4c>)
 8004692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004694:	1c19      	adds	r1, r3, #0
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fb ff5e 	bl	8000558 <__aeabi_fcmpgt>
 800469c:	1e03      	subs	r3, r0, #0
 800469e:	d002      	beq.n	80046a6 <setBMP280+0x26>
    MeasVal.BMP280_temperaturemax = airtemp;
 80046a0:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <setBMP280+0x4c>)
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  MeasVal.BMP280_airpressure = airhpa;
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <setBMP280+0x4c>)
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	651a      	str	r2, [r3, #80]	@ 0x50
  if (airhpa > MeasVal.BMP280_airpressuremax) {
 80046ac:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <setBMP280+0x4c>)
 80046ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b0:	1c19      	adds	r1, r3, #0
 80046b2:	6838      	ldr	r0, [r7, #0]
 80046b4:	f7fb ff50 	bl	8000558 <__aeabi_fcmpgt>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d100      	bne.n	80046be <setBMP280+0x3e>
    MeasVal.BMP280_airpressuremax = airhpa;
  }
}
 80046bc:	e002      	b.n	80046c4 <setBMP280+0x44>
    MeasVal.BMP280_airpressuremax = airhpa;
 80046be:	4b03      	ldr	r3, [pc, #12]	@ (80046cc <setBMP280+0x4c>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000694 	.word	0x20000694

080046d0 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	0004      	movs	r4, r0
 80046d8:	0008      	movs	r0, r1
 80046da:	0011      	movs	r1, r2
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	1c22      	adds	r2, r4, #0
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	1c02      	adds	r2, r0, #0
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	1cbb      	adds	r3, r7, #2
 80046ea:	1c0a      	adds	r2, r1, #0
 80046ec:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 80046ee:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <setENS160+0x74>)
 80046f0:	1dfa      	adds	r2, r7, #7
 80046f2:	2164      	movs	r1, #100	@ 0x64
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 80046f8:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <setENS160+0x74>)
 80046fa:	2265      	movs	r2, #101	@ 0x65
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	1dfa      	adds	r2, r7, #7
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d904      	bls.n	8004710 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <setENS160+0x74>)
 8004708:	1dfa      	adds	r2, r7, #7
 800470a:	2165      	movs	r1, #101	@ 0x65
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <setENS160+0x74>)
 8004712:	1d3a      	adds	r2, r7, #4
 8004714:	215a      	movs	r1, #90	@ 0x5a
 8004716:	8812      	ldrh	r2, [r2, #0]
 8004718:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 800471a:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <setENS160+0x74>)
 800471c:	1cba      	adds	r2, r7, #2
 800471e:	2160      	movs	r1, #96	@ 0x60
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004724:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <setENS160+0x74>)
 8004726:	2262      	movs	r2, #98	@ 0x62
 8004728:	5a9b      	ldrh	r3, [r3, r2]
 800472a:	1cba      	adds	r2, r7, #2
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d904      	bls.n	800473c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004732:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <setENS160+0x74>)
 8004734:	1cba      	adds	r2, r7, #2
 8004736:	2162      	movs	r1, #98	@ 0x62
 8004738:	8812      	ldrh	r2, [r2, #0]
 800473a:	525a      	strh	r2, [r3, r1]
  }
}
 800473c:	46c0      	nop			@ (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b003      	add	sp, #12
 8004742:	bd90      	pop	{r4, r7, pc}
 8004744:	20000694 	.word	0x20000694

08004748 <sethPa>:

void sethPa(float hPa) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <sethPa+0x30>)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	675a      	str	r2, [r3, #116]	@ 0x74
  if (hPa > MeasVal.hPaValuemax) {
 8004756:	4b08      	ldr	r3, [pc, #32]	@ (8004778 <sethPa+0x30>)
 8004758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800475a:	1c19      	adds	r1, r3, #0
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fb fefb 	bl	8000558 <__aeabi_fcmpgt>
 8004762:	1e03      	subs	r3, r0, #0
 8004764:	d100      	bne.n	8004768 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004766:	e002      	b.n	800476e <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <sethPa+0x30>)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	20000694 	.word	0x20000694

0800477c <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <setMic+0x28>)
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	669a      	str	r2, [r3, #104]	@ 0x68
  MeasVal.dBApeak = dBmax;
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <setMic+0x28>)
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	66da      	str	r2, [r3, #108]	@ 0x6c
  MeasVal.dBAaverage = dBAavg;
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <setMic+0x28>)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	671a      	str	r2, [r3, #112]	@ 0x70
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b004      	add	sp, #16
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	20000694 	.word	0x20000694

080047a8 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	0002      	movs	r2, r0
 80047b0:	1dbb      	adds	r3, r7, #6
 80047b2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fc ff09 	bl	80015d0 <__aeabi_i2f>
 80047be:	1c03      	adds	r3, r0, #0
 80047c0:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <setPM1p0+0x50>)
 80047c2:	1c18      	adds	r0, r3, #0
 80047c4:	f7fc fa06 	bl	8000bd4 <__aeabi_fdiv>
 80047c8:	1c03      	adds	r3, r0, #0
 80047ca:	1c1a      	adds	r2, r3, #0
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <setPM1p0+0x54>)
 80047ce:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <setPM1p0+0x54>)
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <setPM1p0+0x54>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	1c19      	adds	r1, r3, #0
 80047da:	1c10      	adds	r0, r2, #0
 80047dc:	f7fb febc 	bl	8000558 <__aeabi_fcmpgt>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	d100      	bne.n	80047e6 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 80047e4:	e003      	b.n	80047ee <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <setPM1p0+0x54>)
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <setPM1p0+0x54>)
 80047ec:	60da      	str	r2, [r3, #12]
}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	41200000 	.word	0x41200000
 80047fc:	20000694 	.word	0x20000694

08004800 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	0002      	movs	r2, r0
 8004808:	1dbb      	adds	r3, r7, #6
 800480a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 800480c:	1dbb      	adds	r3, r7, #6
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fc fedd 	bl	80015d0 <__aeabi_i2f>
 8004816:	1c03      	adds	r3, r0, #0
 8004818:	490d      	ldr	r1, [pc, #52]	@ (8004850 <setPM2p5+0x50>)
 800481a:	1c18      	adds	r0, r3, #0
 800481c:	f7fc f9da 	bl	8000bd4 <__aeabi_fdiv>
 8004820:	1c03      	adds	r3, r0, #0
 8004822:	1c1a      	adds	r2, r3, #0
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <setPM2p5+0x54>)
 8004826:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004828:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <setPM2p5+0x54>)
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <setPM2p5+0x54>)
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	1c19      	adds	r1, r3, #0
 8004832:	1c10      	adds	r0, r2, #0
 8004834:	f7fb fe90 	bl	8000558 <__aeabi_fcmpgt>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d100      	bne.n	800483e <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 800483c:	e003      	b.n	8004846 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800483e:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <setPM2p5+0x54>)
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <setPM2p5+0x54>)
 8004844:	615a      	str	r2, [r3, #20]
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b002      	add	sp, #8
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	41200000 	.word	0x41200000
 8004854:	20000694 	.word	0x20000694

08004858 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	0002      	movs	r2, r0
 8004860:	1dbb      	adds	r3, r7, #6
 8004862:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004864:	1dbb      	adds	r3, r7, #6
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	0018      	movs	r0, r3
 800486a:	f7fc feb1 	bl	80015d0 <__aeabi_i2f>
 800486e:	1c03      	adds	r3, r0, #0
 8004870:	490d      	ldr	r1, [pc, #52]	@ (80048a8 <setPM4p0+0x50>)
 8004872:	1c18      	adds	r0, r3, #0
 8004874:	f7fc f9ae 	bl	8000bd4 <__aeabi_fdiv>
 8004878:	1c03      	adds	r3, r0, #0
 800487a:	1c1a      	adds	r2, r3, #0
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <setPM4p0+0x54>)
 800487e:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <setPM4p0+0x54>)
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <setPM4p0+0x54>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	1c19      	adds	r1, r3, #0
 800488a:	1c10      	adds	r0, r2, #0
 800488c:	f7fb fe64 	bl	8000558 <__aeabi_fcmpgt>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d100      	bne.n	8004896 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004894:	e003      	b.n	800489e <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <setPM4p0+0x54>)
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <setPM4p0+0x54>)
 800489c:	61da      	str	r2, [r3, #28]
}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	41200000 	.word	0x41200000
 80048ac:	20000694 	.word	0x20000694

080048b0 <setPM10>:

void setPM10(uint16_t PM10) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	0002      	movs	r2, r0
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80048bc:	1dbb      	adds	r3, r7, #6
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fc fe85 	bl	80015d0 <__aeabi_i2f>
 80048c6:	1c03      	adds	r3, r0, #0
 80048c8:	490d      	ldr	r1, [pc, #52]	@ (8004900 <setPM10+0x50>)
 80048ca:	1c18      	adds	r0, r3, #0
 80048cc:	f7fc f982 	bl	8000bd4 <__aeabi_fdiv>
 80048d0:	1c03      	adds	r3, r0, #0
 80048d2:	1c1a      	adds	r2, r3, #0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <setPM10+0x54>)
 80048d6:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <setPM10+0x54>)
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <setPM10+0x54>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	1c19      	adds	r1, r3, #0
 80048e2:	1c10      	adds	r0, r2, #0
 80048e4:	f7fb fe38 	bl	8000558 <__aeabi_fcmpgt>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d100      	bne.n	80048ee <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80048ec:	e003      	b.n	80048f6 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <setPM10+0x54>)
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <setPM10+0x54>)
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	41200000 	.word	0x41200000
 8004904:	20000694 	.word	0x20000694

08004908 <setNOx>:

void setNOx(uint16_t nox) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	0002      	movs	r2, r0
 8004910:	1dbb      	adds	r3, r7, #6
 8004912:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004914:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <setNOx+0x38>)
 8004916:	1dba      	adds	r2, r7, #6
 8004918:	215c      	movs	r1, #92	@ 0x5c
 800491a:	8812      	ldrh	r2, [r2, #0]
 800491c:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <setNOx+0x38>)
 8004920:	225e      	movs	r2, #94	@ 0x5e
 8004922:	5a9b      	ldrh	r3, [r3, r2]
 8004924:	1dba      	adds	r2, r7, #6
 8004926:	8812      	ldrh	r2, [r2, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d904      	bls.n	8004936 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 800492c:	4b04      	ldr	r3, [pc, #16]	@ (8004940 <setNOx+0x38>)
 800492e:	1dba      	adds	r2, r7, #6
 8004930:	215e      	movs	r1, #94	@ 0x5e
 8004932:	8812      	ldrh	r2, [r2, #0]
 8004934:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	46bd      	mov	sp, r7
 800493a:	b002      	add	sp, #8
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	20000694 	.word	0x20000694

08004944 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 800494e:	490a      	ldr	r1, [pc, #40]	@ (8004978 <SetSEN545temphum+0x34>)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fc f93f 	bl	8000bd4 <__aeabi_fdiv>
 8004956:	1c03      	adds	r3, r0, #0
 8004958:	1c1a      	adds	r2, r3, #0
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <SetSEN545temphum+0x38>)
 800495c:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 800495e:	4908      	ldr	r1, [pc, #32]	@ (8004980 <SetSEN545temphum+0x3c>)
 8004960:	6838      	ldr	r0, [r7, #0]
 8004962:	f7fc f937 	bl	8000bd4 <__aeabi_fdiv>
 8004966:	1c03      	adds	r3, r0, #0
 8004968:	1c1a      	adds	r2, r3, #0
 800496a:	4b04      	ldr	r3, [pc, #16]	@ (800497c <SetSEN545temphum+0x38>)
 800496c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800496e:	46c0      	nop			@ (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b002      	add	sp, #8
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	43480000 	.word	0x43480000
 800497c:	20000694 	.word	0x20000694
 8004980:	42c80000 	.word	0x42c80000

08004984 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004988:	f008 fd30 	bl	800d3ec <sen5x_Get_sen5x_enable_state>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d00f      	beq.n	80049b0 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004990:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 8004992:	2200      	movs	r2, #0
 8004994:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 8004998:	2200      	movs	r2, #0
 800499a:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 80049a8:	4b0e      	ldr	r3, [pc, #56]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049aa:	225e      	movs	r2, #94	@ 0x5e
 80049ac:	2100      	movs	r1, #0
 80049ae:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.AHT2x_humiditymax = 0.0;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  MeasVal.AHT2x_temperaturemax = 0.0;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44
  MeasVal.BMP280_temperaturemax = 0.0;
 80049bc:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049be:	2200      	movs	r2, #0
 80049c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  MeasVal.BMP280_airpressuremax = 0.0;
 80049c2:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54
  MeasVal.eCO2Indexmax = 0;
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049ca:	2262      	movs	r2, #98	@ 0x62
 80049cc:	2100      	movs	r1, #0
 80049ce:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049d2:	2265      	movs	r2, #101	@ 0x65
 80049d4:	2100      	movs	r1, #0
 80049d6:	5499      	strb	r1, [r3, r2]
  MeasVal.hPaValuemax = 0.0;
 80049d8:	4b02      	ldr	r3, [pc, #8]	@ (80049e4 <resetMaxMeasurementValues+0x60>)
 80049da:	2200      	movs	r2, #0
 80049dc:	679a      	str	r2, [r3, #120]	@ 0x78
}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000694 	.word	0x20000694

080049e8 <SetConfigMode>:

void SetConfigMode(){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <SetConfigMode+0x30>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	4053      	eors	r3, r2
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 80049fa:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <SetConfigMode+0x34>)
 80049fc:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <SetConfigMode+0x38>)
 80049fe:	0019      	movs	r1, r3
 8004a00:	2003      	movs	r0, #3
 8004a02:	f00e f85d 	bl	8012ac0 <CreateLine>
  }
  ReconfigSet = true;
 8004a06:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <SetConfigMode+0x30>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <SetConfigMode+0x3c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	200005bb 	.word	0x200005bb
 8004a1c:	08029410 	.word	0x08029410
 8004a20:	08029430 	.word	0x08029430
 8004a24:	20000207 	.word	0x20000207

08004a28 <GetReconfigMode>:

bool GetReconfigMode() {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004a2c:	4b02      	ldr	r3, [pc, #8]	@ (8004a38 <GetReconfigMode+0x10>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
}
 8004a30:	0018      	movs	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	200005bb 	.word	0x200005bb

08004a3c <ESP_GetUID>:

void ESP_GetUID(){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004a40:	f00e fdbe 	bl	80135c0 <HAL_GetUIDw0>
 8004a44:	0002      	movs	r2, r0
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <ESP_GetUID+0x28>)
 8004a48:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004a4a:	f00e fdc3 	bl	80135d4 <HAL_GetUIDw1>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <ESP_GetUID+0x28>)
 8004a52:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004a54:	f00e fdc8 	bl	80135e8 <HAL_GetUIDw2>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	4b02      	ldr	r3, [pc, #8]	@ (8004a64 <ESP_GetUID+0x28>)
 8004a5c:	609a      	str	r2, [r3, #8]
}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200005c4 	.word	0x200005c4

08004a68 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004a70:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <ESP_Init+0x2c>)
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a76:	4b08      	ldr	r3, [pc, #32]	@ (8004a98 <ESP_Init+0x30>)
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004a7c:	f7ff ffde 	bl	8004a3c <ESP_GetUID>
  beurs = checkEEprom();
 8004a80:	f7ff fd46 	bl	8004510 <checkEEprom>
 8004a84:	0003      	movs	r3, r0
 8004a86:	001a      	movs	r2, r3
 8004a88:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <ESP_Init+0x34>)
 8004a8a:	701a      	strb	r2, [r3, #0]
}
 8004a8c:	46c0      	nop			@ (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	200004b0 	.word	0x200004b0
 8004a98:	2000002c 	.word	0x2000002c
 8004a9c:	200005be 	.word	0x200005be

08004aa0 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004aa0:	b5b0      	push	{r4, r5, r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	1cbb      	adds	r3, r7, #2
 8004aac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <ESP_Send+0x54>)
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	250f      	movs	r5, #15
 8004ab4:	197c      	adds	r4, r7, r5
 8004ab6:	1cbb      	adds	r3, r7, #2
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0019      	movs	r1, r3
 8004abe:	f017 faf7 	bl	801c0b0 <HAL_UART_Transmit_DMA>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004ac6:	197b      	adds	r3, r7, r5
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004ace:	4a0a      	ldr	r2, [pc, #40]	@ (8004af8 <ESP_Send+0x58>)
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <ESP_Send+0x5c>)
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f00d fff3 	bl	8012ac0 <CreateLine>
    return false;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e006      	b.n	8004aec <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <ESP_Send+0x60>)
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f020 f85d 	bl	8024ba4 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b004      	add	sp, #16
 8004af2:	bdb0      	pop	{r4, r5, r7, pc}
 8004af4:	200004b0 	.word	0x200004b0
 8004af8:	08029434 	.word	0x08029434
 8004afc:	08029454 	.word	0x08029454
 8004b00:	08029458 	.word	0x08029458

08004b04 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	000a      	movs	r2, r1
 8004b0e:	1cbb      	adds	r3, r7, #2
 8004b10:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004b12:	4b5d      	ldr	r3, [pc, #372]	@ (8004c88 <ESP_Receive+0x184>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004b18:	260f      	movs	r6, #15
 8004b1a:	19bb      	adds	r3, r7, r6
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004b20:	4b5a      	ldr	r3, [pc, #360]	@ (8004c8c <ESP_Receive+0x188>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	250d      	movs	r5, #13
 8004b26:	197c      	adds	r4, r7, r5
 8004b28:	1cbb      	adds	r3, r7, #2
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0019      	movs	r1, r3
 8004b30:	f017 fb4e 	bl	801c1d0 <HAL_UART_Receive_DMA>
 8004b34:	0003      	movs	r3, r0
 8004b36:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004b38:	002c      	movs	r4, r5
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d100      	bne.n	8004b44 <ESP_Receive+0x40>
 8004b42:	e09c      	b.n	8004c7e <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004b44:	4b51      	ldr	r3, [pc, #324]	@ (8004c8c <ESP_Receive+0x188>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2284      	movs	r2, #132	@ 0x84
 8004b4a:	589b      	ldr	r3, [r3, r2]
 8004b4c:	4a50      	ldr	r2, [pc, #320]	@ (8004c90 <ESP_Receive+0x18c>)
 8004b4e:	4951      	ldr	r1, [pc, #324]	@ (8004c94 <ESP_Receive+0x190>)
 8004b50:	2001      	movs	r0, #1
 8004b52:	f00d ffb5 	bl	8012ac0 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004b56:	193b      	adds	r3, r7, r4
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d008      	beq.n	8004b72 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004b60:	4a4d      	ldr	r2, [pc, #308]	@ (8004c98 <ESP_Receive+0x194>)
 8004b62:	4b4c      	ldr	r3, [pc, #304]	@ (8004c94 <ESP_Receive+0x190>)
 8004b64:	0019      	movs	r1, r3
 8004b66:	2001      	movs	r0, #1
 8004b68:	f00d ffaa 	bl	8012ac0 <CreateLine>
      reset = true;
 8004b6c:	19bb      	adds	r3, r7, r6
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004b72:	230d      	movs	r3, #13
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d005      	beq.n	8004b8a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004b7e:	4a47      	ldr	r2, [pc, #284]	@ (8004c9c <ESP_Receive+0x198>)
 8004b80:	4b44      	ldr	r3, [pc, #272]	@ (8004c94 <ESP_Receive+0x190>)
 8004b82:	0019      	movs	r1, r3
 8004b84:	2001      	movs	r0, #1
 8004b86:	f00d ff9b 	bl	8012ac0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004b8a:	230d      	movs	r3, #13
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2204      	movs	r2, #4
 8004b92:	4013      	ands	r3, r2
 8004b94:	d005      	beq.n	8004ba2 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004b96:	4a42      	ldr	r2, [pc, #264]	@ (8004ca0 <ESP_Receive+0x19c>)
 8004b98:	4b3e      	ldr	r3, [pc, #248]	@ (8004c94 <ESP_Receive+0x190>)
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f00d ff8f 	bl	8012ac0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004ba2:	230d      	movs	r3, #13
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	4013      	ands	r3, r2
 8004bac:	d005      	beq.n	8004bba <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004bae:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca4 <ESP_Receive+0x1a0>)
 8004bb0:	4b38      	ldr	r3, [pc, #224]	@ (8004c94 <ESP_Receive+0x190>)
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f00d ff83 	bl	8012ac0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004bba:	230d      	movs	r3, #13
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d005      	beq.n	8004bd2 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004bc6:	4a38      	ldr	r2, [pc, #224]	@ (8004ca8 <ESP_Receive+0x1a4>)
 8004bc8:	4b32      	ldr	r3, [pc, #200]	@ (8004c94 <ESP_Receive+0x190>)
 8004bca:	0019      	movs	r1, r3
 8004bcc:	2001      	movs	r0, #1
 8004bce:	f00d ff77 	bl	8012ac0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004bd2:	230d      	movs	r3, #13
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d005      	beq.n	8004bea <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004bde:	4a33      	ldr	r2, [pc, #204]	@ (8004cac <ESP_Receive+0x1a8>)
 8004be0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c94 <ESP_Receive+0x190>)
 8004be2:	0019      	movs	r1, r3
 8004be4:	2001      	movs	r0, #1
 8004be6:	f00d ff6b 	bl	8012ac0 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004bea:	230d      	movs	r3, #13
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2240      	movs	r2, #64	@ 0x40
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d005      	beq.n	8004c02 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb0 <ESP_Receive+0x1ac>)
 8004bf8:	4b26      	ldr	r3, [pc, #152]	@ (8004c94 <ESP_Receive+0x190>)
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	f00d ff5f 	bl	8012ac0 <CreateLine>
    }
#endif
    if (reset) {
 8004c02:	230f      	movs	r3, #15
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d033      	beq.n	8004c74 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c0c:	4b29      	ldr	r3, [pc, #164]	@ (8004cb4 <ESP_Receive+0x1b0>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2101      	movs	r1, #1
 8004c12:	0018      	movs	r0, r3
 8004c14:	f00f ff1b 	bl	8014a4e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f00e fc91 	bl	8013540 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004c1e:	2380      	movs	r3, #128	@ 0x80
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	4825      	ldr	r0, [pc, #148]	@ (8004cb8 <ESP_Receive+0x1b4>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	0019      	movs	r1, r3
 8004c28:	f00f ff11 	bl	8014a4e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f00e fc87 	bl	8013540 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004c32:	4b20      	ldr	r3, [pc, #128]	@ (8004cb4 <ESP_Receive+0x1b0>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	2102      	movs	r1, #2
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f00f ff08 	bl	8014a4e <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004c3e:	230e      	movs	r3, #14
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e00e      	b.n	8004c66 <ESP_Receive+0x162>
        SetAllREDLED();
 8004c48:	f00c fe50 	bl	80118ec <SetAllREDLED>
        SetLEDsOff();
 8004c4c:	f00c fe32 	bl	80118b4 <SetLEDsOff>
        HAL_Delay(500);
 8004c50:	23fa      	movs	r3, #250	@ 0xfa
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	0018      	movs	r0, r3
 8004c56:	f00e fc73 	bl	8013540 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004c5a:	210e      	movs	r1, #14
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	3201      	adds	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	230e      	movs	r3, #14
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d9eb      	bls.n	8004c48 <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 8004c70:	f00f f925 	bl	8013ebe <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <ESP_Receive+0x184>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
    return false;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <ESP_Receive+0x17c>
  }
  return true;
 8004c7e:	2301      	movs	r3, #1
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b005      	add	sp, #20
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	200004b4 	.word	0x200004b4
 8004c8c:	200004b0 	.word	0x200004b0
 8004c90:	08029468 	.word	0x08029468
 8004c94:	08029454 	.word	0x08029454
 8004c98:	08029498 	.word	0x08029498
 8004c9c:	080294bc 	.word	0x080294bc
 8004ca0:	080294e0 	.word	0x080294e0
 8004ca4:	08029504 	.word	0x08029504
 8004ca8:	08029528 	.word	0x08029528
 8004cac:	08029554 	.word	0x08029554
 8004cb0:	08029584 	.word	0x08029584
 8004cb4:	50001c00 	.word	0x50001c00
 8004cb8:	50000800 	.word	0x50000800

08004cbc <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8004cc4:	4b39      	ldr	r3, [pc, #228]	@ (8004dac <HAL_UART_ErrorCallback+0xf0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d16b      	bne.n	8004da6 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2284      	movs	r2, #132	@ 0x84
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d065      	beq.n	8004da4 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2284      	movs	r2, #132	@ 0x84
 8004cdc:	589b      	ldr	r3, [r3, r2]
 8004cde:	4a34      	ldr	r2, [pc, #208]	@ (8004db0 <HAL_UART_ErrorCallback+0xf4>)
 8004ce0:	4934      	ldr	r1, [pc, #208]	@ (8004db4 <HAL_UART_ErrorCallback+0xf8>)
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	f00d feec 	bl	8012ac0 <CreateLine>
    switch (huart->ErrorCode) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2284      	movs	r2, #132	@ 0x84
 8004cec:	589b      	ldr	r3, [r3, r2]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d851      	bhi.n	8004d96 <HAL_UART_ErrorCallback+0xda>
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	4b30      	ldr	r3, [pc, #192]	@ (8004db8 <HAL_UART_ErrorCallback+0xfc>)
 8004cf6:	18d3      	adds	r3, r2, r3
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8004cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8004dbc <HAL_UART_ErrorCallback+0x100>)
 8004cfe:	4b30      	ldr	r3, [pc, #192]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d00:	0019      	movs	r1, r3
 8004d02:	2001      	movs	r0, #1
 8004d04:	f00d fedc 	bl	8012ac0 <CreateLine>
        break;
 8004d08:	e04d      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8004d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc4 <HAL_UART_ErrorCallback+0x108>)
 8004d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d0e:	0019      	movs	r1, r3
 8004d10:	2001      	movs	r0, #1
 8004d12:	f00d fed5 	bl	8012ac0 <CreateLine>
        break;
 8004d16:	e046      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8004d18:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc8 <HAL_UART_ErrorCallback+0x10c>)
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f00d fece 	bl	8012ac0 <CreateLine>
        break;
 8004d24:	e03f      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8004d26:	4a29      	ldr	r2, [pc, #164]	@ (8004dcc <HAL_UART_ErrorCallback+0x110>)
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f00d fec7 	bl	8012ac0 <CreateLine>
        break;
 8004d32:	e038      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8004d34:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <HAL_UART_ErrorCallback+0x114>)
 8004d36:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d38:	0019      	movs	r1, r3
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	f00d fec0 	bl	8012ac0 <CreateLine>
        break;
 8004d40:	e031      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <HAL_UART_ErrorCallback+0x118>)
 8004d44:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d46:	0019      	movs	r1, r3
 8004d48:	2001      	movs	r0, #1
 8004d4a:	f00d feb9 	bl	8012ac0 <CreateLine>
        break;
 8004d4e:	e02a      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8004d50:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <HAL_UART_ErrorCallback+0x11c>)
 8004d52:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d54:	0019      	movs	r1, r3
 8004d56:	2001      	movs	r0, #1
 8004d58:	f00d feb2 	bl	8012ac0 <CreateLine>
        break;
 8004d5c:	e023      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <HAL_UART_ErrorCallback+0x120>)
 8004d60:	4b17      	ldr	r3, [pc, #92]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d62:	0019      	movs	r1, r3
 8004d64:	2001      	movs	r0, #1
 8004d66:	f00d feab 	bl	8012ac0 <CreateLine>
        break;
 8004d6a:	e01c      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004de0 <HAL_UART_ErrorCallback+0x124>)
 8004d6e:	4b14      	ldr	r3, [pc, #80]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d70:	0019      	movs	r1, r3
 8004d72:	2001      	movs	r0, #1
 8004d74:	f00d fea4 	bl	8012ac0 <CreateLine>
        break;
 8004d78:	e015      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_UART_ErrorCallback+0x128>)
 8004d7c:	4b10      	ldr	r3, [pc, #64]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d7e:	0019      	movs	r1, r3
 8004d80:	2001      	movs	r0, #1
 8004d82:	f00d fe9d 	bl	8012ac0 <CreateLine>
        break;
 8004d86:	e00e      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8004d88:	4a17      	ldr	r2, [pc, #92]	@ (8004de8 <HAL_UART_ErrorCallback+0x12c>)
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f00d fe96 	bl	8012ac0 <CreateLine>
        break;
 8004d94:	e007      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8004d96:	4a15      	ldr	r2, [pc, #84]	@ (8004dec <HAL_UART_ErrorCallback+0x130>)
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <HAL_UART_ErrorCallback+0x104>)
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f00d fe8f 	bl	8012ac0 <CreateLine>
 8004da2:	e000      	b.n	8004da6 <HAL_UART_ErrorCallback+0xea>
      return;
 8004da4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	200004b0 	.word	0x200004b0
 8004db0:	080295b4 	.word	0x080295b4
 8004db4:	08029430 	.word	0x08029430
 8004db8:	0802cfb0 	.word	0x0802cfb0
 8004dbc:	080295e4 	.word	0x080295e4
 8004dc0:	08029454 	.word	0x08029454
 8004dc4:	08029618 	.word	0x08029618
 8004dc8:	08029644 	.word	0x08029644
 8004dcc:	08029678 	.word	0x08029678
 8004dd0:	080296a4 	.word	0x080296a4
 8004dd4:	080296cc 	.word	0x080296cc
 8004dd8:	080296fc 	.word	0x080296fc
 8004ddc:	08029734 	.word	0x08029734
 8004de0:	0802976c 	.word	0x0802976c
 8004de4:	08029794 	.word	0x08029794
 8004de8:	080297bc 	.word	0x080297bc
 8004dec:	080297e8 	.word	0x080297e8

08004df0 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b42      	cmp	r3, #66	@ 0x42
 8004e02:	d905      	bls.n	8004e10 <isKeyValid+0x20>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2bff      	cmp	r3, #255	@ 0xff
 8004e0a:	d001      	beq.n	8004e10 <isKeyValid+0x20>
    return true;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01d      	b.n	8004e4c <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <isKeyValid+0x64>)
 8004e16:	0018      	movs	r0, r3
 8004e18:	f01f fec4 	bl	8024ba4 <iprintf>
    for (int i = 0; i < 12; i++) {
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e00c      	b.n	8004e3c <isKeyValid+0x4c>
      printf("%02x", data[i]);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	18d3      	adds	r3, r2, r3
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <isKeyValid+0x68>)
 8004e2e:	0011      	movs	r1, r2
 8004e30:	0018      	movs	r0, r3
 8004e32:	f01f feb7 	bl	8024ba4 <iprintf>
    for (int i = 0; i < 12; i++) {
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b0b      	cmp	r3, #11
 8004e40:	ddef      	ble.n	8004e22 <isKeyValid+0x32>
    }
    printf("\r\n");
 8004e42:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <isKeyValid+0x6c>)
 8004e44:	0018      	movs	r0, r3
 8004e46:	f01f ff13 	bl	8024c70 <puts>
    return false;
 8004e4a:	2300      	movs	r3, #0
  }
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b006      	add	sp, #24
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	0802980c 	.word	0x0802980c
 8004e58:	08029844 	.word	0x08029844
 8004e5c:	0802984c 	.word	0x0802984c

08004e60 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e010      	b.n	8004e92 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	001a      	movs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	1898      	adds	r0, r3, r2
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	18d3      	adds	r3, r2, r3
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	001a      	movs	r2, r3
 8004e84:	4b07      	ldr	r3, [pc, #28]	@ (8004ea4 <uint8ArrayToString+0x44>)
 8004e86:	0019      	movs	r1, r3
 8004e88:	f01f fefc 	bl	8024c84 <siprintf>
  for (int i = 0; i < 12; i++) {
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b0b      	cmp	r3, #11
 8004e96:	ddeb      	ble.n	8004e70 <uint8ArrayToString+0x10>
  }
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b004      	add	sp, #16
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	08029844 	.word	0x08029844

08004ea8 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	b089      	sub	sp, #36	@ 0x24
 8004eac:	af04      	add	r7, sp, #16
 8004eae:	6039      	str	r1, [r7, #0]
 8004eb0:	0011      	movs	r1, r2
 8004eb2:	1dfb      	adds	r3, r7, #7
 8004eb4:	1c02      	adds	r2, r0, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	1dbb      	adds	r3, r7, #6
 8004eba:	1c0a      	adds	r2, r1, #0
 8004ebc:	701a      	strb	r2, [r3, #0]

#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8004ebe:	f7ff fb5d 	bl	800457c <checkName>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d00a      	beq.n	8004edc <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004ec6:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <CreateMessage+0x2c>)
 8004ec8:	4803      	ldr	r0, [pc, #12]	@ (8004ed8 <CreateMessage+0x30>)
 8004eca:	2220      	movs	r2, #32
 8004ecc:	0019      	movs	r1, r3
 8004ece:	f006 f975 	bl	800b1bc <ReadUint8ArrayEEprom>
 8004ed2:	e009      	b.n	8004ee8 <CreateMessage+0x40>
 8004ed4:	2000074c 	.word	0x2000074c
 8004ed8:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8004edc:	4bed      	ldr	r3, [pc, #948]	@ (8005294 <CreateMessage+0x3ec>)
 8004ede:	4aee      	ldr	r2, [pc, #952]	@ (8005298 <CreateMessage+0x3f0>)
 8004ee0:	6811      	ldr	r1, [r2, #0]
 8004ee2:	6019      	str	r1, [r3, #0]
 8004ee4:	7912      	ldrb	r2, [r2, #4]
 8004ee6:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8004ee8:	f7ff faee 	bl	80044c8 <setCharges>
  uint16_t index = 0;
 8004eec:	260e      	movs	r6, #14
 8004eee:	19bb      	adds	r3, r7, r6
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8004ef4:	19bb      	adds	r3, r7, r6
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	4be8      	ldr	r3, [pc, #928]	@ (800529c <CreateMessage+0x3f4>)
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	4ae8      	ldr	r2, [pc, #928]	@ (80052a0 <CreateMessage+0x3f8>)
 8004efe:	0011      	movs	r1, r2
 8004f00:	0018      	movs	r0, r3
 8004f02:	f01f febf 	bl	8024c84 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 8004f06:	4be7      	ldr	r3, [pc, #924]	@ (80052a4 <CreateMessage+0x3fc>)
 8004f08:	48e7      	ldr	r0, [pc, #924]	@ (80052a8 <CreateMessage+0x400>)
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	f006 f955 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004f12:	4ae4      	ldr	r2, [pc, #912]	@ (80052a4 <CreateMessage+0x3fc>)
 8004f14:	4be5      	ldr	r3, [pc, #916]	@ (80052ac <CreateMessage+0x404>)
 8004f16:	0011      	movs	r1, r2
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7ff ffa1 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8004f1e:	4be4      	ldr	r3, [pc, #912]	@ (80052b0 <CreateMessage+0x408>)
 8004f20:	689c      	ldr	r4, [r3, #8]
 8004f22:	4be4      	ldr	r3, [pc, #912]	@ (80052b4 <CreateMessage+0x40c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1c18      	adds	r0, r3, #0
 8004f28:	f7fe fa9c 	bl	8003464 <__aeabi_f2d>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	000b      	movs	r3, r1
 8004f30:	4dd8      	ldr	r5, [pc, #864]	@ (8005294 <CreateMessage+0x3ec>)
 8004f32:	49e1      	ldr	r1, [pc, #900]	@ (80052b8 <CreateMessage+0x410>)
 8004f34:	48e1      	ldr	r0, [pc, #900]	@ (80052bc <CreateMessage+0x414>)
 8004f36:	9202      	str	r2, [sp, #8]
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	4bdc      	ldr	r3, [pc, #880]	@ (80052ac <CreateMessage+0x404>)
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	002b      	movs	r3, r5
 8004f40:	0022      	movs	r2, r4
 8004f42:	f01f fe9f 	bl	8024c84 <siprintf>
#endif
index = strlen(message);
 8004f46:	4bd5      	ldr	r3, [pc, #852]	@ (800529c <CreateMessage+0x3f4>)
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7fb f90f 	bl	800016c <strlen>
 8004f4e:	0002      	movs	r2, r0
 8004f50:	19bb      	adds	r3, r7, r6
 8004f52:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004f54:	1dbb      	adds	r3, r7, #6
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d019      	beq.n	8004f90 <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004f5c:	4bcf      	ldr	r3, [pc, #828]	@ (800529c <CreateMessage+0x3f4>)
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7fb f904 	bl	800016c <strlen>
 8004f64:	0003      	movs	r3, r0
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4bcc      	ldr	r3, [pc, #816]	@ (800529c <CreateMessage+0x3f4>)
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff fd97 	bl	8004aa0 <ESP_Send>
 8004f72:	0003      	movs	r3, r0
 8004f74:	001a      	movs	r2, r3
 8004f76:	4bd2      	ldr	r3, [pc, #840]	@ (80052c0 <CreateMessage+0x418>)
 8004f78:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004f7a:	4bd2      	ldr	r3, [pc, #840]	@ (80052c4 <CreateMessage+0x41c>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	001a      	movs	r2, r3
 8004f80:	4bcf      	ldr	r3, [pc, #828]	@ (80052c0 <CreateMessage+0x418>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4013      	ands	r3, r2
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	4193      	sbcs	r3, r2
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	4bcd      	ldr	r3, [pc, #820]	@ (80052c4 <CreateMessage+0x41c>)
 8004f8e:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8004f90:	4bc4      	ldr	r3, [pc, #784]	@ (80052a4 <CreateMessage+0x3fc>)
 8004f92:	48cd      	ldr	r0, [pc, #820]	@ (80052c8 <CreateMessage+0x420>)
 8004f94:	220c      	movs	r2, #12
 8004f96:	0019      	movs	r1, r3
 8004f98:	f006 f910 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004f9c:	4ac1      	ldr	r2, [pc, #772]	@ (80052a4 <CreateMessage+0x3fc>)
 8004f9e:	4bc3      	ldr	r3, [pc, #780]	@ (80052ac <CreateMessage+0x404>)
 8004fa0:	0011      	movs	r1, r2
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff ff5c 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8004fa8:	4bc1      	ldr	r3, [pc, #772]	@ (80052b0 <CreateMessage+0x408>)
 8004faa:	689c      	ldr	r4, [r3, #8]
 8004fac:	4bc1      	ldr	r3, [pc, #772]	@ (80052b4 <CreateMessage+0x40c>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	1c18      	adds	r0, r3, #0
 8004fb2:	f7fe fa57 	bl	8003464 <__aeabi_f2d>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	000b      	movs	r3, r1
 8004fba:	4db6      	ldr	r5, [pc, #728]	@ (8005294 <CreateMessage+0x3ec>)
 8004fbc:	49c3      	ldr	r1, [pc, #780]	@ (80052cc <CreateMessage+0x424>)
 8004fbe:	48b7      	ldr	r0, [pc, #732]	@ (800529c <CreateMessage+0x3f4>)
 8004fc0:	9202      	str	r2, [sp, #8]
 8004fc2:	9303      	str	r3, [sp, #12]
 8004fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80052ac <CreateMessage+0x404>)
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	002b      	movs	r3, r5
 8004fca:	0022      	movs	r2, r4
 8004fcc:	f01f fe5a 	bl	8024c84 <siprintf>
#endif
  index += strlen(message);
 8004fd0:	4bb2      	ldr	r3, [pc, #712]	@ (800529c <CreateMessage+0x3f4>)
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7fb f8ca 	bl	800016c <strlen>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	b299      	uxth	r1, r3
 8004fdc:	220e      	movs	r2, #14
 8004fde:	18bb      	adds	r3, r7, r2
 8004fe0:	18ba      	adds	r2, r7, r2
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	188a      	adds	r2, r1, r2
 8004fe6:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004fe8:	1dbb      	adds	r3, r7, #6
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d019      	beq.n	8005024 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004ff0:	4baa      	ldr	r3, [pc, #680]	@ (800529c <CreateMessage+0x3f4>)
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f7fb f8ba 	bl	800016c <strlen>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	4ba7      	ldr	r3, [pc, #668]	@ (800529c <CreateMessage+0x3f4>)
 8004ffe:	0011      	movs	r1, r2
 8005000:	0018      	movs	r0, r3
 8005002:	f7ff fd4d 	bl	8004aa0 <ESP_Send>
 8005006:	0003      	movs	r3, r0
 8005008:	001a      	movs	r2, r3
 800500a:	4bad      	ldr	r3, [pc, #692]	@ (80052c0 <CreateMessage+0x418>)
 800500c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800500e:	4bad      	ldr	r3, [pc, #692]	@ (80052c4 <CreateMessage+0x41c>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	001a      	movs	r2, r3
 8005014:	4baa      	ldr	r3, [pc, #680]	@ (80052c0 <CreateMessage+0x418>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	4013      	ands	r3, r2
 800501a:	1e5a      	subs	r2, r3, #1
 800501c:	4193      	sbcs	r3, r2
 800501e:	b2da      	uxtb	r2, r3
 8005020:	4ba8      	ldr	r3, [pc, #672]	@ (80052c4 <CreateMessage+0x41c>)
 8005022:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005024:	4b9f      	ldr	r3, [pc, #636]	@ (80052a4 <CreateMessage+0x3fc>)
 8005026:	48aa      	ldr	r0, [pc, #680]	@ (80052d0 <CreateMessage+0x428>)
 8005028:	220c      	movs	r2, #12
 800502a:	0019      	movs	r1, r3
 800502c:	f006 f8c6 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005030:	4a9c      	ldr	r2, [pc, #624]	@ (80052a4 <CreateMessage+0x3fc>)
 8005032:	4b9e      	ldr	r3, [pc, #632]	@ (80052ac <CreateMessage+0x404>)
 8005034:	0011      	movs	r1, r2
 8005036:	0018      	movs	r0, r3
 8005038:	f7ff ff12 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 800503c:	4b9c      	ldr	r3, [pc, #624]	@ (80052b0 <CreateMessage+0x408>)
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	4b9c      	ldr	r3, [pc, #624]	@ (80052b4 <CreateMessage+0x40c>)
 8005042:	2158      	movs	r1, #88	@ 0x58
 8005044:	5a5b      	ldrh	r3, [r3, r1]
 8005046:	4c93      	ldr	r4, [pc, #588]	@ (8005294 <CreateMessage+0x3ec>)
 8005048:	49a2      	ldr	r1, [pc, #648]	@ (80052d4 <CreateMessage+0x42c>)
 800504a:	4894      	ldr	r0, [pc, #592]	@ (800529c <CreateMessage+0x3f4>)
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	4b97      	ldr	r3, [pc, #604]	@ (80052ac <CreateMessage+0x404>)
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	0023      	movs	r3, r4
 8005054:	f01f fe16 	bl	8024c84 <siprintf>
#endif
  index += strlen(message);
 8005058:	4b90      	ldr	r3, [pc, #576]	@ (800529c <CreateMessage+0x3f4>)
 800505a:	0018      	movs	r0, r3
 800505c:	f7fb f886 	bl	800016c <strlen>
 8005060:	0003      	movs	r3, r0
 8005062:	b299      	uxth	r1, r3
 8005064:	220e      	movs	r2, #14
 8005066:	18bb      	adds	r3, r7, r2
 8005068:	18ba      	adds	r2, r7, r2
 800506a:	8812      	ldrh	r2, [r2, #0]
 800506c:	188a      	adds	r2, r1, r2
 800506e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005070:	1dbb      	adds	r3, r7, #6
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d019      	beq.n	80050ac <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005078:	4b88      	ldr	r3, [pc, #544]	@ (800529c <CreateMessage+0x3f4>)
 800507a:	0018      	movs	r0, r3
 800507c:	f7fb f876 	bl	800016c <strlen>
 8005080:	0003      	movs	r3, r0
 8005082:	b29a      	uxth	r2, r3
 8005084:	4b85      	ldr	r3, [pc, #532]	@ (800529c <CreateMessage+0x3f4>)
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff fd09 	bl	8004aa0 <ESP_Send>
 800508e:	0003      	movs	r3, r0
 8005090:	001a      	movs	r2, r3
 8005092:	4b8b      	ldr	r3, [pc, #556]	@ (80052c0 <CreateMessage+0x418>)
 8005094:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005096:	4b8b      	ldr	r3, [pc, #556]	@ (80052c4 <CreateMessage+0x41c>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	001a      	movs	r2, r3
 800509c:	4b88      	ldr	r3, [pc, #544]	@ (80052c0 <CreateMessage+0x418>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	4013      	ands	r3, r2
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	4193      	sbcs	r3, r2
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	4b86      	ldr	r3, [pc, #536]	@ (80052c4 <CreateMessage+0x41c>)
 80050aa:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 80050ac:	f007 f9b0 	bl	800c410 <IsBMP280SensorPresent>
 80050b0:	1e03      	subs	r3, r0, #0
 80050b2:	d100      	bne.n	80050b6 <CreateMessage+0x20e>
 80050b4:	e0ab      	b.n	800520e <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 80050b6:	4b7b      	ldr	r3, [pc, #492]	@ (80052a4 <CreateMessage+0x3fc>)
 80050b8:	4887      	ldr	r0, [pc, #540]	@ (80052d8 <CreateMessage+0x430>)
 80050ba:	220c      	movs	r2, #12
 80050bc:	0019      	movs	r1, r3
 80050be:	f006 f87d 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && (MeasVal.hPaValuemax != 0.0)) {
 80050c2:	4a86      	ldr	r2, [pc, #536]	@ (80052dc <CreateMessage+0x434>)
 80050c4:	4986      	ldr	r1, [pc, #536]	@ (80052e0 <CreateMessage+0x438>)
 80050c6:	4b77      	ldr	r3, [pc, #476]	@ (80052a4 <CreateMessage+0x3fc>)
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7ff fe91 	bl	8004df0 <isKeyValid>
 80050ce:	1e03      	subs	r3, r0, #0
 80050d0:	d04b      	beq.n	800516a <CreateMessage+0x2c2>
 80050d2:	4b78      	ldr	r3, [pc, #480]	@ (80052b4 <CreateMessage+0x40c>)
 80050d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d6:	2100      	movs	r1, #0
 80050d8:	1c18      	adds	r0, r3, #0
 80050da:	f7fb fa23 	bl	8000524 <__aeabi_fcmpeq>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d143      	bne.n	800516a <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 80050e2:	4a70      	ldr	r2, [pc, #448]	@ (80052a4 <CreateMessage+0x3fc>)
 80050e4:	4b71      	ldr	r3, [pc, #452]	@ (80052ac <CreateMessage+0x404>)
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff feb9 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 80050ee:	4b70      	ldr	r3, [pc, #448]	@ (80052b0 <CreateMessage+0x408>)
 80050f0:	689c      	ldr	r4, [r3, #8]
 80050f2:	4b70      	ldr	r3, [pc, #448]	@ (80052b4 <CreateMessage+0x40c>)
 80050f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050f6:	1c18      	adds	r0, r3, #0
 80050f8:	f7fe f9b4 	bl	8003464 <__aeabi_f2d>
 80050fc:	0002      	movs	r2, r0
 80050fe:	000b      	movs	r3, r1
 8005100:	4d64      	ldr	r5, [pc, #400]	@ (8005294 <CreateMessage+0x3ec>)
 8005102:	4978      	ldr	r1, [pc, #480]	@ (80052e4 <CreateMessage+0x43c>)
 8005104:	4865      	ldr	r0, [pc, #404]	@ (800529c <CreateMessage+0x3f4>)
 8005106:	9202      	str	r2, [sp, #8]
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	4b68      	ldr	r3, [pc, #416]	@ (80052ac <CreateMessage+0x404>)
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	002b      	movs	r3, r5
 8005110:	0022      	movs	r2, r4
 8005112:	f01f fdb7 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 8005116:	4b61      	ldr	r3, [pc, #388]	@ (800529c <CreateMessage+0x3f4>)
 8005118:	0018      	movs	r0, r3
 800511a:	f7fb f827 	bl	800016c <strlen>
 800511e:	0003      	movs	r3, r0
 8005120:	b299      	uxth	r1, r3
 8005122:	220e      	movs	r2, #14
 8005124:	18bb      	adds	r3, r7, r2
 8005126:	18ba      	adds	r2, r7, r2
 8005128:	8812      	ldrh	r2, [r2, #0]
 800512a:	188a      	adds	r2, r1, r2
 800512c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800512e:	1dbb      	adds	r3, r7, #6
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d019      	beq.n	800516a <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005136:	4b59      	ldr	r3, [pc, #356]	@ (800529c <CreateMessage+0x3f4>)
 8005138:	0018      	movs	r0, r3
 800513a:	f7fb f817 	bl	800016c <strlen>
 800513e:	0003      	movs	r3, r0
 8005140:	b29a      	uxth	r2, r3
 8005142:	4b56      	ldr	r3, [pc, #344]	@ (800529c <CreateMessage+0x3f4>)
 8005144:	0011      	movs	r1, r2
 8005146:	0018      	movs	r0, r3
 8005148:	f7ff fcaa 	bl	8004aa0 <ESP_Send>
 800514c:	0003      	movs	r3, r0
 800514e:	001a      	movs	r2, r3
 8005150:	4b5b      	ldr	r3, [pc, #364]	@ (80052c0 <CreateMessage+0x418>)
 8005152:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005154:	4b5b      	ldr	r3, [pc, #364]	@ (80052c4 <CreateMessage+0x41c>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	001a      	movs	r2, r3
 800515a:	4b59      	ldr	r3, [pc, #356]	@ (80052c0 <CreateMessage+0x418>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	4013      	ands	r3, r2
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	4193      	sbcs	r3, r2
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4b57      	ldr	r3, [pc, #348]	@ (80052c4 <CreateMessage+0x41c>)
 8005168:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 800516a:	4b4e      	ldr	r3, [pc, #312]	@ (80052a4 <CreateMessage+0x3fc>)
 800516c:	485e      	ldr	r0, [pc, #376]	@ (80052e8 <CreateMessage+0x440>)
 800516e:	220c      	movs	r2, #12
 8005170:	0019      	movs	r1, r3
 8005172:	f006 f823 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005176:	4a5d      	ldr	r2, [pc, #372]	@ (80052ec <CreateMessage+0x444>)
 8005178:	4959      	ldr	r1, [pc, #356]	@ (80052e0 <CreateMessage+0x438>)
 800517a:	4b4a      	ldr	r3, [pc, #296]	@ (80052a4 <CreateMessage+0x3fc>)
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff fe37 	bl	8004df0 <isKeyValid>
 8005182:	1e03      	subs	r3, r0, #0
 8005184:	d043      	beq.n	800520e <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 8005186:	4a47      	ldr	r2, [pc, #284]	@ (80052a4 <CreateMessage+0x3fc>)
 8005188:	4b48      	ldr	r3, [pc, #288]	@ (80052ac <CreateMessage+0x404>)
 800518a:	0011      	movs	r1, r2
 800518c:	0018      	movs	r0, r3
 800518e:	f7ff fe67 	bl	8004e60 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperaturemax);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperaturemax);
 8005192:	4b47      	ldr	r3, [pc, #284]	@ (80052b0 <CreateMessage+0x408>)
 8005194:	689c      	ldr	r4, [r3, #8]
 8005196:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <CreateMessage+0x40c>)
 8005198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519a:	1c18      	adds	r0, r3, #0
 800519c:	f7fe f962 	bl	8003464 <__aeabi_f2d>
 80051a0:	0002      	movs	r2, r0
 80051a2:	000b      	movs	r3, r1
 80051a4:	4d3b      	ldr	r5, [pc, #236]	@ (8005294 <CreateMessage+0x3ec>)
 80051a6:	4952      	ldr	r1, [pc, #328]	@ (80052f0 <CreateMessage+0x448>)
 80051a8:	483c      	ldr	r0, [pc, #240]	@ (800529c <CreateMessage+0x3f4>)
 80051aa:	9202      	str	r2, [sp, #8]
 80051ac:	9303      	str	r3, [sp, #12]
 80051ae:	4b3f      	ldr	r3, [pc, #252]	@ (80052ac <CreateMessage+0x404>)
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	002b      	movs	r3, r5
 80051b4:	0022      	movs	r2, r4
 80051b6:	f01f fd65 	bl	8024c84 <siprintf>
  #endif
      index += strlen(message);
 80051ba:	4b38      	ldr	r3, [pc, #224]	@ (800529c <CreateMessage+0x3f4>)
 80051bc:	0018      	movs	r0, r3
 80051be:	f7fa ffd5 	bl	800016c <strlen>
 80051c2:	0003      	movs	r3, r0
 80051c4:	b299      	uxth	r1, r3
 80051c6:	220e      	movs	r2, #14
 80051c8:	18bb      	adds	r3, r7, r2
 80051ca:	18ba      	adds	r2, r7, r2
 80051cc:	8812      	ldrh	r2, [r2, #0]
 80051ce:	188a      	adds	r2, r1, r2
 80051d0:	801a      	strh	r2, [r3, #0]
      if (send) {
 80051d2:	1dbb      	adds	r3, r7, #6
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d019      	beq.n	800520e <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80051da:	4b30      	ldr	r3, [pc, #192]	@ (800529c <CreateMessage+0x3f4>)
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fa ffc5 	bl	800016c <strlen>
 80051e2:	0003      	movs	r3, r0
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	4b2d      	ldr	r3, [pc, #180]	@ (800529c <CreateMessage+0x3f4>)
 80051e8:	0011      	movs	r1, r2
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff fc58 	bl	8004aa0 <ESP_Send>
 80051f0:	0003      	movs	r3, r0
 80051f2:	001a      	movs	r2, r3
 80051f4:	4b32      	ldr	r3, [pc, #200]	@ (80052c0 <CreateMessage+0x418>)
 80051f6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80051f8:	4b32      	ldr	r3, [pc, #200]	@ (80052c4 <CreateMessage+0x41c>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	001a      	movs	r2, r3
 80051fe:	4b30      	ldr	r3, [pc, #192]	@ (80052c0 <CreateMessage+0x418>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	4013      	ands	r3, r2
 8005204:	1e5a      	subs	r2, r3, #1
 8005206:	4193      	sbcs	r3, r2
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4b2e      	ldr	r3, [pc, #184]	@ (80052c4 <CreateMessage+0x41c>)
 800520c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 800520e:	4b25      	ldr	r3, [pc, #148]	@ (80052a4 <CreateMessage+0x3fc>)
 8005210:	4838      	ldr	r0, [pc, #224]	@ (80052f4 <CreateMessage+0x44c>)
 8005212:	220c      	movs	r2, #12
 8005214:	0019      	movs	r1, r3
 8005216:	f005 ffd1 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800521a:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <CreateMessage+0x3fc>)
 800521c:	4b23      	ldr	r3, [pc, #140]	@ (80052ac <CreateMessage+0x404>)
 800521e:	0011      	movs	r1, r2
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff fe1d 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8005226:	4b22      	ldr	r3, [pc, #136]	@ (80052b0 <CreateMessage+0x408>)
 8005228:	689c      	ldr	r4, [r3, #8]
 800522a:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <CreateMessage+0x40c>)
 800522c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800522e:	1c18      	adds	r0, r3, #0
 8005230:	f7fe f918 	bl	8003464 <__aeabi_f2d>
 8005234:	0002      	movs	r2, r0
 8005236:	000b      	movs	r3, r1
 8005238:	4d16      	ldr	r5, [pc, #88]	@ (8005294 <CreateMessage+0x3ec>)
 800523a:	492f      	ldr	r1, [pc, #188]	@ (80052f8 <CreateMessage+0x450>)
 800523c:	4817      	ldr	r0, [pc, #92]	@ (800529c <CreateMessage+0x3f4>)
 800523e:	9202      	str	r2, [sp, #8]
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <CreateMessage+0x404>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	002b      	movs	r3, r5
 8005248:	0022      	movs	r2, r4
 800524a:	f01f fd1b 	bl	8024c84 <siprintf>
#endif
  index += strlen(message);
 800524e:	4b13      	ldr	r3, [pc, #76]	@ (800529c <CreateMessage+0x3f4>)
 8005250:	0018      	movs	r0, r3
 8005252:	f7fa ff8b 	bl	800016c <strlen>
 8005256:	0003      	movs	r3, r0
 8005258:	b299      	uxth	r1, r3
 800525a:	220e      	movs	r2, #14
 800525c:	18bb      	adds	r3, r7, r2
 800525e:	18ba      	adds	r2, r7, r2
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	188a      	adds	r2, r1, r2
 8005264:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005266:	1dbb      	adds	r3, r7, #6
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04e      	beq.n	800530c <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800526e:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <CreateMessage+0x3f4>)
 8005270:	0018      	movs	r0, r3
 8005272:	f7fa ff7b 	bl	800016c <strlen>
 8005276:	0003      	movs	r3, r0
 8005278:	b29a      	uxth	r2, r3
 800527a:	4b08      	ldr	r3, [pc, #32]	@ (800529c <CreateMessage+0x3f4>)
 800527c:	0011      	movs	r1, r2
 800527e:	0018      	movs	r0, r3
 8005280:	f7ff fc0e 	bl	8004aa0 <ESP_Send>
 8005284:	0003      	movs	r3, r0
 8005286:	001a      	movs	r2, r3
 8005288:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <CreateMessage+0x418>)
 800528a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <CreateMessage+0x41c>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	001a      	movs	r2, r3
 8005292:	e033      	b.n	80052fc <CreateMessage+0x454>
 8005294:	2000074c 	.word	0x2000074c
 8005298:	0802cf44 	.word	0x0802cf44
 800529c:	200005e4 	.word	0x200005e4
 80052a0:	08029850 	.word	0x08029850
 80052a4:	2000076c 	.word	0x2000076c
 80052a8:	0808000c 	.word	0x0808000c
 80052ac:	20000778 	.word	0x20000778
 80052b0:	200005c4 	.word	0x200005c4
 80052b4:	20000694 	.word	0x20000694
 80052b8:	08029854 	.word	0x08029854
 80052bc:	200005e5 	.word	0x200005e5
 80052c0:	20000791 	.word	0x20000791
 80052c4:	2000002d 	.word	0x2000002d
 80052c8:	08080018 	.word	0x08080018
 80052cc:	080298a8 	.word	0x080298a8
 80052d0:	08080030 	.word	0x08080030
 80052d4:	08029900 	.word	0x08029900
 80052d8:	0808003c 	.word	0x0808003c
 80052dc:	08029954 	.word	0x08029954
 80052e0:	08029958 	.word	0x08029958
 80052e4:	08029960 	.word	0x08029960
 80052e8:	080800e0 	.word	0x080800e0
 80052ec:	080299bc 	.word	0x080299bc
 80052f0:	080299c8 	.word	0x080299c8
 80052f4:	08080048 	.word	0x08080048
 80052f8:	08029a24 	.word	0x08029a24
 80052fc:	4be8      	ldr	r3, [pc, #928]	@ (80056a0 <CreateMessage+0x7f8>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	4013      	ands	r3, r2
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	4193      	sbcs	r3, r2
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4be6      	ldr	r3, [pc, #920]	@ (80056a4 <CreateMessage+0x7fc>)
 800530a:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	4053      	eors	r3, r2
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d100      	bne.n	800531c <CreateMessage+0x474>
 800531a:	e2bd      	b.n	8005898 <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 800531c:	4be2      	ldr	r3, [pc, #904]	@ (80056a8 <CreateMessage+0x800>)
 800531e:	48e3      	ldr	r0, [pc, #908]	@ (80056ac <CreateMessage+0x804>)
 8005320:	220c      	movs	r2, #12
 8005322:	0019      	movs	r1, r3
 8005324:	f005 ff4a 	bl	800b1bc <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005328:	4adf      	ldr	r2, [pc, #892]	@ (80056a8 <CreateMessage+0x800>)
 800532a:	4be1      	ldr	r3, [pc, #900]	@ (80056b0 <CreateMessage+0x808>)
 800532c:	0011      	movs	r1, r2
 800532e:	0018      	movs	r0, r3
 8005330:	f7ff fd96 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8005334:	4bdf      	ldr	r3, [pc, #892]	@ (80056b4 <CreateMessage+0x80c>)
 8005336:	689c      	ldr	r4, [r3, #8]
 8005338:	4bdf      	ldr	r3, [pc, #892]	@ (80056b8 <CreateMessage+0x810>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	1c18      	adds	r0, r3, #0
 800533e:	f7fe f891 	bl	8003464 <__aeabi_f2d>
 8005342:	0002      	movs	r2, r0
 8005344:	000b      	movs	r3, r1
 8005346:	4ddd      	ldr	r5, [pc, #884]	@ (80056bc <CreateMessage+0x814>)
 8005348:	49dd      	ldr	r1, [pc, #884]	@ (80056c0 <CreateMessage+0x818>)
 800534a:	48de      	ldr	r0, [pc, #888]	@ (80056c4 <CreateMessage+0x81c>)
 800534c:	9202      	str	r2, [sp, #8]
 800534e:	9303      	str	r3, [sp, #12]
 8005350:	4bd7      	ldr	r3, [pc, #860]	@ (80056b0 <CreateMessage+0x808>)
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	002b      	movs	r3, r5
 8005356:	0022      	movs	r2, r4
 8005358:	f01f fc94 	bl	8024c84 <siprintf>
#endif
    index += strlen(message);
 800535c:	4bd9      	ldr	r3, [pc, #868]	@ (80056c4 <CreateMessage+0x81c>)
 800535e:	0018      	movs	r0, r3
 8005360:	f7fa ff04 	bl	800016c <strlen>
 8005364:	0003      	movs	r3, r0
 8005366:	b299      	uxth	r1, r3
 8005368:	220e      	movs	r2, #14
 800536a:	18bb      	adds	r3, r7, r2
 800536c:	18ba      	adds	r2, r7, r2
 800536e:	8812      	ldrh	r2, [r2, #0]
 8005370:	188a      	adds	r2, r1, r2
 8005372:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005374:	1dbb      	adds	r3, r7, #6
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d019      	beq.n	80053b0 <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800537c:	4bd1      	ldr	r3, [pc, #836]	@ (80056c4 <CreateMessage+0x81c>)
 800537e:	0018      	movs	r0, r3
 8005380:	f7fa fef4 	bl	800016c <strlen>
 8005384:	0003      	movs	r3, r0
 8005386:	b29a      	uxth	r2, r3
 8005388:	4bce      	ldr	r3, [pc, #824]	@ (80056c4 <CreateMessage+0x81c>)
 800538a:	0011      	movs	r1, r2
 800538c:	0018      	movs	r0, r3
 800538e:	f7ff fb87 	bl	8004aa0 <ESP_Send>
 8005392:	0003      	movs	r3, r0
 8005394:	001a      	movs	r2, r3
 8005396:	4bc2      	ldr	r3, [pc, #776]	@ (80056a0 <CreateMessage+0x7f8>)
 8005398:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 800539a:	4bc2      	ldr	r3, [pc, #776]	@ (80056a4 <CreateMessage+0x7fc>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	001a      	movs	r2, r3
 80053a0:	4bbf      	ldr	r3, [pc, #764]	@ (80056a0 <CreateMessage+0x7f8>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	4013      	ands	r3, r2
 80053a6:	1e5a      	subs	r2, r3, #1
 80053a8:	4193      	sbcs	r3, r2
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4bbd      	ldr	r3, [pc, #756]	@ (80056a4 <CreateMessage+0x7fc>)
 80053ae:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80053b0:	4bc5      	ldr	r3, [pc, #788]	@ (80056c8 <CreateMessage+0x820>)
 80053b2:	791b      	ldrb	r3, [r3, #4]
 80053b4:	2b35      	cmp	r3, #53	@ 0x35
 80053b6:	d147      	bne.n	8005448 <CreateMessage+0x5a0>
 80053b8:	f003 fd64 	bl	8008e84 <Check_USB_PowerOn>
 80053bc:	1e03      	subs	r3, r0, #0
 80053be:	d043      	beq.n	8005448 <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 80053c0:	4bb9      	ldr	r3, [pc, #740]	@ (80056a8 <CreateMessage+0x800>)
 80053c2:	48c2      	ldr	r0, [pc, #776]	@ (80056cc <CreateMessage+0x824>)
 80053c4:	220c      	movs	r2, #12
 80053c6:	0019      	movs	r1, r3
 80053c8:	f005 fef8 	bl	800b1bc <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 80053cc:	4ab6      	ldr	r2, [pc, #728]	@ (80056a8 <CreateMessage+0x800>)
 80053ce:	4bb8      	ldr	r3, [pc, #736]	@ (80056b0 <CreateMessage+0x808>)
 80053d0:	0011      	movs	r1, r2
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7ff fd44 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 80053d8:	4bb6      	ldr	r3, [pc, #728]	@ (80056b4 <CreateMessage+0x80c>)
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4bbc      	ldr	r3, [pc, #752]	@ (80056d0 <CreateMessage+0x828>)
 80053de:	215e      	movs	r1, #94	@ 0x5e
 80053e0:	5a5b      	ldrh	r3, [r3, r1]
 80053e2:	4cb6      	ldr	r4, [pc, #728]	@ (80056bc <CreateMessage+0x814>)
 80053e4:	49bb      	ldr	r1, [pc, #748]	@ (80056d4 <CreateMessage+0x82c>)
 80053e6:	48b7      	ldr	r0, [pc, #732]	@ (80056c4 <CreateMessage+0x81c>)
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	4bb1      	ldr	r3, [pc, #708]	@ (80056b0 <CreateMessage+0x808>)
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	0023      	movs	r3, r4
 80053f0:	f01f fc48 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 80053f4:	4bb3      	ldr	r3, [pc, #716]	@ (80056c4 <CreateMessage+0x81c>)
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fa feb8 	bl	800016c <strlen>
 80053fc:	0003      	movs	r3, r0
 80053fe:	b299      	uxth	r1, r3
 8005400:	220e      	movs	r2, #14
 8005402:	18bb      	adds	r3, r7, r2
 8005404:	18ba      	adds	r2, r7, r2
 8005406:	8812      	ldrh	r2, [r2, #0]
 8005408:	188a      	adds	r2, r1, r2
 800540a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800540c:	1dbb      	adds	r3, r7, #6
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005414:	4bab      	ldr	r3, [pc, #684]	@ (80056c4 <CreateMessage+0x81c>)
 8005416:	0018      	movs	r0, r3
 8005418:	f7fa fea8 	bl	800016c <strlen>
 800541c:	0003      	movs	r3, r0
 800541e:	b29a      	uxth	r2, r3
 8005420:	4ba8      	ldr	r3, [pc, #672]	@ (80056c4 <CreateMessage+0x81c>)
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f7ff fb3b 	bl	8004aa0 <ESP_Send>
 800542a:	0003      	movs	r3, r0
 800542c:	001a      	movs	r2, r3
 800542e:	4b9c      	ldr	r3, [pc, #624]	@ (80056a0 <CreateMessage+0x7f8>)
 8005430:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005432:	4b9c      	ldr	r3, [pc, #624]	@ (80056a4 <CreateMessage+0x7fc>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	001a      	movs	r2, r3
 8005438:	4b99      	ldr	r3, [pc, #612]	@ (80056a0 <CreateMessage+0x7f8>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4013      	ands	r3, r2
 800543e:	1e5a      	subs	r2, r3, #1
 8005440:	4193      	sbcs	r3, r2
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b97      	ldr	r3, [pc, #604]	@ (80056a4 <CreateMessage+0x7fc>)
 8005446:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005448:	4b97      	ldr	r3, [pc, #604]	@ (80056a8 <CreateMessage+0x800>)
 800544a:	48a3      	ldr	r0, [pc, #652]	@ (80056d8 <CreateMessage+0x830>)
 800544c:	220c      	movs	r2, #12
 800544e:	0019      	movs	r1, r3
 8005450:	f005 feb4 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005454:	4b9c      	ldr	r3, [pc, #624]	@ (80056c8 <CreateMessage+0x820>)
 8005456:	791b      	ldrb	r3, [r3, #4]
 8005458:	2b34      	cmp	r3, #52	@ 0x34
 800545a:	d003      	beq.n	8005464 <CreateMessage+0x5bc>
 800545c:	4b9a      	ldr	r3, [pc, #616]	@ (80056c8 <CreateMessage+0x820>)
 800545e:	791b      	ldrb	r3, [r3, #4]
 8005460:	2b35      	cmp	r3, #53	@ 0x35
 8005462:	d14b      	bne.n	80054fc <CreateMessage+0x654>
 8005464:	4a9d      	ldr	r2, [pc, #628]	@ (80056dc <CreateMessage+0x834>)
 8005466:	499e      	ldr	r1, [pc, #632]	@ (80056e0 <CreateMessage+0x838>)
 8005468:	4b8f      	ldr	r3, [pc, #572]	@ (80056a8 <CreateMessage+0x800>)
 800546a:	0018      	movs	r0, r3
 800546c:	f7ff fcc0 	bl	8004df0 <isKeyValid>
 8005470:	1e03      	subs	r3, r0, #0
 8005472:	d043      	beq.n	80054fc <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 8005474:	4a8c      	ldr	r2, [pc, #560]	@ (80056a8 <CreateMessage+0x800>)
 8005476:	4b8e      	ldr	r3, [pc, #568]	@ (80056b0 <CreateMessage+0x808>)
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f7ff fcf0 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 8005480:	4b8c      	ldr	r3, [pc, #560]	@ (80056b4 <CreateMessage+0x80c>)
 8005482:	689c      	ldr	r4, [r3, #8]
 8005484:	4b92      	ldr	r3, [pc, #584]	@ (80056d0 <CreateMessage+0x828>)
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	1c18      	adds	r0, r3, #0
 800548a:	f7fd ffeb 	bl	8003464 <__aeabi_f2d>
 800548e:	0002      	movs	r2, r0
 8005490:	000b      	movs	r3, r1
 8005492:	4d8a      	ldr	r5, [pc, #552]	@ (80056bc <CreateMessage+0x814>)
 8005494:	4993      	ldr	r1, [pc, #588]	@ (80056e4 <CreateMessage+0x83c>)
 8005496:	488b      	ldr	r0, [pc, #556]	@ (80056c4 <CreateMessage+0x81c>)
 8005498:	9202      	str	r2, [sp, #8]
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	4b84      	ldr	r3, [pc, #528]	@ (80056b0 <CreateMessage+0x808>)
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	002b      	movs	r3, r5
 80054a2:	0022      	movs	r2, r4
 80054a4:	f01f fbee 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 80054a8:	4b86      	ldr	r3, [pc, #536]	@ (80056c4 <CreateMessage+0x81c>)
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7fa fe5e 	bl	800016c <strlen>
 80054b0:	0003      	movs	r3, r0
 80054b2:	b299      	uxth	r1, r3
 80054b4:	220e      	movs	r2, #14
 80054b6:	18bb      	adds	r3, r7, r2
 80054b8:	18ba      	adds	r2, r7, r2
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	188a      	adds	r2, r1, r2
 80054be:	801a      	strh	r2, [r3, #0]
      if (send) {
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d019      	beq.n	80054fc <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80054c8:	4b7e      	ldr	r3, [pc, #504]	@ (80056c4 <CreateMessage+0x81c>)
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7fa fe4e 	bl	800016c <strlen>
 80054d0:	0003      	movs	r3, r0
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b7b      	ldr	r3, [pc, #492]	@ (80056c4 <CreateMessage+0x81c>)
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff fae1 	bl	8004aa0 <ESP_Send>
 80054de:	0003      	movs	r3, r0
 80054e0:	001a      	movs	r2, r3
 80054e2:	4b6f      	ldr	r3, [pc, #444]	@ (80056a0 <CreateMessage+0x7f8>)
 80054e4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80054e6:	4b6f      	ldr	r3, [pc, #444]	@ (80056a4 <CreateMessage+0x7fc>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	001a      	movs	r2, r3
 80054ec:	4b6c      	ldr	r3, [pc, #432]	@ (80056a0 <CreateMessage+0x7f8>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4013      	ands	r3, r2
 80054f2:	1e5a      	subs	r2, r3, #1
 80054f4:	4193      	sbcs	r3, r2
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	4b6a      	ldr	r3, [pc, #424]	@ (80056a4 <CreateMessage+0x7fc>)
 80054fa:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 80054fc:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <CreateMessage+0x800>)
 80054fe:	487a      	ldr	r0, [pc, #488]	@ (80056e8 <CreateMessage+0x840>)
 8005500:	220c      	movs	r2, #12
 8005502:	0019      	movs	r1, r3
 8005504:	f005 fe5a 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005508:	4b6f      	ldr	r3, [pc, #444]	@ (80056c8 <CreateMessage+0x820>)
 800550a:	791b      	ldrb	r3, [r3, #4]
 800550c:	2b34      	cmp	r3, #52	@ 0x34
 800550e:	d003      	beq.n	8005518 <CreateMessage+0x670>
 8005510:	4b6d      	ldr	r3, [pc, #436]	@ (80056c8 <CreateMessage+0x820>)
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	2b35      	cmp	r3, #53	@ 0x35
 8005516:	d14b      	bne.n	80055b0 <CreateMessage+0x708>
 8005518:	4a74      	ldr	r2, [pc, #464]	@ (80056ec <CreateMessage+0x844>)
 800551a:	4971      	ldr	r1, [pc, #452]	@ (80056e0 <CreateMessage+0x838>)
 800551c:	4b62      	ldr	r3, [pc, #392]	@ (80056a8 <CreateMessage+0x800>)
 800551e:	0018      	movs	r0, r3
 8005520:	f7ff fc66 	bl	8004df0 <isKeyValid>
 8005524:	1e03      	subs	r3, r0, #0
 8005526:	d043      	beq.n	80055b0 <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 8005528:	4a5f      	ldr	r2, [pc, #380]	@ (80056a8 <CreateMessage+0x800>)
 800552a:	4b61      	ldr	r3, [pc, #388]	@ (80056b0 <CreateMessage+0x808>)
 800552c:	0011      	movs	r1, r2
 800552e:	0018      	movs	r0, r3
 8005530:	f7ff fc96 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 8005534:	4b5f      	ldr	r3, [pc, #380]	@ (80056b4 <CreateMessage+0x80c>)
 8005536:	689c      	ldr	r4, [r3, #8]
 8005538:	4b65      	ldr	r3, [pc, #404]	@ (80056d0 <CreateMessage+0x828>)
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	1c18      	adds	r0, r3, #0
 800553e:	f7fd ff91 	bl	8003464 <__aeabi_f2d>
 8005542:	0002      	movs	r2, r0
 8005544:	000b      	movs	r3, r1
 8005546:	4d5d      	ldr	r5, [pc, #372]	@ (80056bc <CreateMessage+0x814>)
 8005548:	4969      	ldr	r1, [pc, #420]	@ (80056f0 <CreateMessage+0x848>)
 800554a:	485e      	ldr	r0, [pc, #376]	@ (80056c4 <CreateMessage+0x81c>)
 800554c:	9202      	str	r2, [sp, #8]
 800554e:	9303      	str	r3, [sp, #12]
 8005550:	4b57      	ldr	r3, [pc, #348]	@ (80056b0 <CreateMessage+0x808>)
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	002b      	movs	r3, r5
 8005556:	0022      	movs	r2, r4
 8005558:	f01f fb94 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 800555c:	4b59      	ldr	r3, [pc, #356]	@ (80056c4 <CreateMessage+0x81c>)
 800555e:	0018      	movs	r0, r3
 8005560:	f7fa fe04 	bl	800016c <strlen>
 8005564:	0003      	movs	r3, r0
 8005566:	b299      	uxth	r1, r3
 8005568:	220e      	movs	r2, #14
 800556a:	18bb      	adds	r3, r7, r2
 800556c:	18ba      	adds	r2, r7, r2
 800556e:	8812      	ldrh	r2, [r2, #0]
 8005570:	188a      	adds	r2, r1, r2
 8005572:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800557c:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <CreateMessage+0x81c>)
 800557e:	0018      	movs	r0, r3
 8005580:	f7fa fdf4 	bl	800016c <strlen>
 8005584:	0003      	movs	r3, r0
 8005586:	b29a      	uxth	r2, r3
 8005588:	4b4e      	ldr	r3, [pc, #312]	@ (80056c4 <CreateMessage+0x81c>)
 800558a:	0011      	movs	r1, r2
 800558c:	0018      	movs	r0, r3
 800558e:	f7ff fa87 	bl	8004aa0 <ESP_Send>
 8005592:	0003      	movs	r3, r0
 8005594:	001a      	movs	r2, r3
 8005596:	4b42      	ldr	r3, [pc, #264]	@ (80056a0 <CreateMessage+0x7f8>)
 8005598:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800559a:	4b42      	ldr	r3, [pc, #264]	@ (80056a4 <CreateMessage+0x7fc>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	001a      	movs	r2, r3
 80055a0:	4b3f      	ldr	r3, [pc, #252]	@ (80056a0 <CreateMessage+0x7f8>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4013      	ands	r3, r2
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	4193      	sbcs	r3, r2
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	4b3d      	ldr	r3, [pc, #244]	@ (80056a4 <CreateMessage+0x7fc>)
 80055ae:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 80055b0:	f007 ff1c 	bl	800d3ec <sen5x_Get_sen5x_enable_state>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d100      	bne.n	80055ba <CreateMessage+0x712>
 80055b8:	e16e      	b.n	8005898 <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 80055ba:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <CreateMessage+0x800>)
 80055bc:	484d      	ldr	r0, [pc, #308]	@ (80056f4 <CreateMessage+0x84c>)
 80055be:	220c      	movs	r2, #12
 80055c0:	0019      	movs	r1, r3
 80055c2:	f005 fdfb 	bl	800b1bc <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 80055c6:	4a4c      	ldr	r2, [pc, #304]	@ (80056f8 <CreateMessage+0x850>)
 80055c8:	494c      	ldr	r1, [pc, #304]	@ (80056fc <CreateMessage+0x854>)
 80055ca:	4b37      	ldr	r3, [pc, #220]	@ (80056a8 <CreateMessage+0x800>)
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7ff fc0f 	bl	8004df0 <isKeyValid>
 80055d2:	1e03      	subs	r3, r0, #0
 80055d4:	d043      	beq.n	800565e <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 80055d6:	4a34      	ldr	r2, [pc, #208]	@ (80056a8 <CreateMessage+0x800>)
 80055d8:	4b35      	ldr	r3, [pc, #212]	@ (80056b0 <CreateMessage+0x808>)
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff fc3f 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 80055e2:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <CreateMessage+0x80c>)
 80055e4:	689c      	ldr	r4, [r3, #8]
 80055e6:	4b3a      	ldr	r3, [pc, #232]	@ (80056d0 <CreateMessage+0x828>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	1c18      	adds	r0, r3, #0
 80055ec:	f7fd ff3a 	bl	8003464 <__aeabi_f2d>
 80055f0:	0002      	movs	r2, r0
 80055f2:	000b      	movs	r3, r1
 80055f4:	4d31      	ldr	r5, [pc, #196]	@ (80056bc <CreateMessage+0x814>)
 80055f6:	4942      	ldr	r1, [pc, #264]	@ (8005700 <CreateMessage+0x858>)
 80055f8:	4832      	ldr	r0, [pc, #200]	@ (80056c4 <CreateMessage+0x81c>)
 80055fa:	9202      	str	r2, [sp, #8]
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	4b2c      	ldr	r3, [pc, #176]	@ (80056b0 <CreateMessage+0x808>)
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	002b      	movs	r3, r5
 8005604:	0022      	movs	r2, r4
 8005606:	f01f fb3d 	bl	8024c84 <siprintf>
#endif
        index += strlen(message);
 800560a:	4b2e      	ldr	r3, [pc, #184]	@ (80056c4 <CreateMessage+0x81c>)
 800560c:	0018      	movs	r0, r3
 800560e:	f7fa fdad 	bl	800016c <strlen>
 8005612:	0003      	movs	r3, r0
 8005614:	b299      	uxth	r1, r3
 8005616:	220e      	movs	r2, #14
 8005618:	18bb      	adds	r3, r7, r2
 800561a:	18ba      	adds	r2, r7, r2
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	188a      	adds	r2, r1, r2
 8005620:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005622:	1dbb      	adds	r3, r7, #6
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 800562a:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <CreateMessage+0x81c>)
 800562c:	0018      	movs	r0, r3
 800562e:	f7fa fd9d 	bl	800016c <strlen>
 8005632:	0003      	movs	r3, r0
 8005634:	b29a      	uxth	r2, r3
 8005636:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <CreateMessage+0x81c>)
 8005638:	0011      	movs	r1, r2
 800563a:	0018      	movs	r0, r3
 800563c:	f7ff fa30 	bl	8004aa0 <ESP_Send>
 8005640:	0003      	movs	r3, r0
 8005642:	001a      	movs	r2, r3
 8005644:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <CreateMessage+0x7f8>)
 8005646:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005648:	4b16      	ldr	r3, [pc, #88]	@ (80056a4 <CreateMessage+0x7fc>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	001a      	movs	r2, r3
 800564e:	4b14      	ldr	r3, [pc, #80]	@ (80056a0 <CreateMessage+0x7f8>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	4013      	ands	r3, r2
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	4193      	sbcs	r3, r2
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <CreateMessage+0x7fc>)
 800565c:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 800565e:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <CreateMessage+0x800>)
 8005660:	4828      	ldr	r0, [pc, #160]	@ (8005704 <CreateMessage+0x85c>)
 8005662:	220c      	movs	r2, #12
 8005664:	0019      	movs	r1, r3
 8005666:	f005 fda9 	bl	800b1bc <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 800566a:	4a0f      	ldr	r2, [pc, #60]	@ (80056a8 <CreateMessage+0x800>)
 800566c:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <CreateMessage+0x808>)
 800566e:	0011      	movs	r1, r2
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff fbf5 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005676:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <CreateMessage+0x80c>)
 8005678:	689c      	ldr	r4, [r3, #8]
 800567a:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <CreateMessage+0x828>)
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	1c18      	adds	r0, r3, #0
 8005680:	f7fd fef0 	bl	8003464 <__aeabi_f2d>
 8005684:	0002      	movs	r2, r0
 8005686:	000b      	movs	r3, r1
 8005688:	4d0c      	ldr	r5, [pc, #48]	@ (80056bc <CreateMessage+0x814>)
 800568a:	491f      	ldr	r1, [pc, #124]	@ (8005708 <CreateMessage+0x860>)
 800568c:	480d      	ldr	r0, [pc, #52]	@ (80056c4 <CreateMessage+0x81c>)
 800568e:	9202      	str	r2, [sp, #8]
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <CreateMessage+0x808>)
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	002b      	movs	r3, r5
 8005698:	0022      	movs	r2, r4
 800569a:	f01f faf3 	bl	8024c84 <siprintf>
 800569e:	e035      	b.n	800570c <CreateMessage+0x864>
 80056a0:	20000791 	.word	0x20000791
 80056a4:	2000002d 	.word	0x2000002d
 80056a8:	2000076c 	.word	0x2000076c
 80056ac:	08080078 	.word	0x08080078
 80056b0:	20000778 	.word	0x20000778
 80056b4:	200005c4 	.word	0x200005c4
 80056b8:	200005e0 	.word	0x200005e0
 80056bc:	2000074c 	.word	0x2000074c
 80056c0:	08029a80 	.word	0x08029a80
 80056c4:	200005e4 	.word	0x200005e4
 80056c8:	20000ee8 	.word	0x20000ee8
 80056cc:	08080024 	.word	0x08080024
 80056d0:	20000694 	.word	0x20000694
 80056d4:	08029ae0 	.word	0x08029ae0
 80056d8:	08080170 	.word	0x08080170
 80056dc:	08029b34 	.word	0x08029b34
 80056e0:	08029b40 	.word	0x08029b40
 80056e4:	08029b48 	.word	0x08029b48
 80056e8:	0808017c 	.word	0x0808017c
 80056ec:	08029ba4 	.word	0x08029ba4
 80056f0:	08029bb0 	.word	0x08029bb0
 80056f4:	080800b0 	.word	0x080800b0
 80056f8:	08029c10 	.word	0x08029c10
 80056fc:	08029c1c 	.word	0x08029c1c
 8005700:	08029c20 	.word	0x08029c20
 8005704:	08080054 	.word	0x08080054
 8005708:	08029c78 	.word	0x08029c78
#endif
      index += strlen(message);
 800570c:	4beb      	ldr	r3, [pc, #940]	@ (8005abc <CreateMessage+0xc14>)
 800570e:	0018      	movs	r0, r3
 8005710:	f7fa fd2c 	bl	800016c <strlen>
 8005714:	0003      	movs	r3, r0
 8005716:	b299      	uxth	r1, r3
 8005718:	220e      	movs	r2, #14
 800571a:	18bb      	adds	r3, r7, r2
 800571c:	18ba      	adds	r2, r7, r2
 800571e:	8812      	ldrh	r2, [r2, #0]
 8005720:	188a      	adds	r2, r1, r2
 8005722:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005724:	1dbb      	adds	r3, r7, #6
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d019      	beq.n	8005760 <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800572c:	4be3      	ldr	r3, [pc, #908]	@ (8005abc <CreateMessage+0xc14>)
 800572e:	0018      	movs	r0, r3
 8005730:	f7fa fd1c 	bl	800016c <strlen>
 8005734:	0003      	movs	r3, r0
 8005736:	b29a      	uxth	r2, r3
 8005738:	4be0      	ldr	r3, [pc, #896]	@ (8005abc <CreateMessage+0xc14>)
 800573a:	0011      	movs	r1, r2
 800573c:	0018      	movs	r0, r3
 800573e:	f7ff f9af 	bl	8004aa0 <ESP_Send>
 8005742:	0003      	movs	r3, r0
 8005744:	001a      	movs	r2, r3
 8005746:	4bde      	ldr	r3, [pc, #888]	@ (8005ac0 <CreateMessage+0xc18>)
 8005748:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800574a:	4bde      	ldr	r3, [pc, #888]	@ (8005ac4 <CreateMessage+0xc1c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	001a      	movs	r2, r3
 8005750:	4bdb      	ldr	r3, [pc, #876]	@ (8005ac0 <CreateMessage+0xc18>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4bd9      	ldr	r3, [pc, #868]	@ (8005ac4 <CreateMessage+0xc1c>)
 800575e:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005760:	4bd9      	ldr	r3, [pc, #868]	@ (8005ac8 <CreateMessage+0xc20>)
 8005762:	48da      	ldr	r0, [pc, #872]	@ (8005acc <CreateMessage+0xc24>)
 8005764:	220c      	movs	r2, #12
 8005766:	0019      	movs	r1, r3
 8005768:	f005 fd28 	bl	800b1bc <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 800576c:	4ad8      	ldr	r2, [pc, #864]	@ (8005ad0 <CreateMessage+0xc28>)
 800576e:	49d9      	ldr	r1, [pc, #868]	@ (8005ad4 <CreateMessage+0xc2c>)
 8005770:	4bd5      	ldr	r3, [pc, #852]	@ (8005ac8 <CreateMessage+0xc20>)
 8005772:	0018      	movs	r0, r3
 8005774:	f7ff fb3c 	bl	8004df0 <isKeyValid>
 8005778:	1e03      	subs	r3, r0, #0
 800577a:	d043      	beq.n	8005804 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 800577c:	4ad2      	ldr	r2, [pc, #840]	@ (8005ac8 <CreateMessage+0xc20>)
 800577e:	4bd6      	ldr	r3, [pc, #856]	@ (8005ad8 <CreateMessage+0xc30>)
 8005780:	0011      	movs	r1, r2
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff fb6c 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 8005788:	4bd4      	ldr	r3, [pc, #848]	@ (8005adc <CreateMessage+0xc34>)
 800578a:	689c      	ldr	r4, [r3, #8]
 800578c:	4bd4      	ldr	r3, [pc, #848]	@ (8005ae0 <CreateMessage+0xc38>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	1c18      	adds	r0, r3, #0
 8005792:	f7fd fe67 	bl	8003464 <__aeabi_f2d>
 8005796:	0002      	movs	r2, r0
 8005798:	000b      	movs	r3, r1
 800579a:	4dd2      	ldr	r5, [pc, #840]	@ (8005ae4 <CreateMessage+0xc3c>)
 800579c:	49d2      	ldr	r1, [pc, #840]	@ (8005ae8 <CreateMessage+0xc40>)
 800579e:	48c7      	ldr	r0, [pc, #796]	@ (8005abc <CreateMessage+0xc14>)
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	4bcc      	ldr	r3, [pc, #816]	@ (8005ad8 <CreateMessage+0xc30>)
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	002b      	movs	r3, r5
 80057aa:	0022      	movs	r2, r4
 80057ac:	f01f fa6a 	bl	8024c84 <siprintf>
#endif
        index += strlen(message);
 80057b0:	4bc2      	ldr	r3, [pc, #776]	@ (8005abc <CreateMessage+0xc14>)
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fa fcda 	bl	800016c <strlen>
 80057b8:	0003      	movs	r3, r0
 80057ba:	b299      	uxth	r1, r3
 80057bc:	220e      	movs	r2, #14
 80057be:	18bb      	adds	r3, r7, r2
 80057c0:	18ba      	adds	r2, r7, r2
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	188a      	adds	r2, r1, r2
 80057c6:	801a      	strh	r2, [r3, #0]
        if (send) {
 80057c8:	1dbb      	adds	r3, r7, #6
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d019      	beq.n	8005804 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 80057d0:	4bba      	ldr	r3, [pc, #744]	@ (8005abc <CreateMessage+0xc14>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7fa fcca 	bl	800016c <strlen>
 80057d8:	0003      	movs	r3, r0
 80057da:	b29a      	uxth	r2, r3
 80057dc:	4bb7      	ldr	r3, [pc, #732]	@ (8005abc <CreateMessage+0xc14>)
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff f95d 	bl	8004aa0 <ESP_Send>
 80057e6:	0003      	movs	r3, r0
 80057e8:	001a      	movs	r2, r3
 80057ea:	4bb5      	ldr	r3, [pc, #724]	@ (8005ac0 <CreateMessage+0xc18>)
 80057ec:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 80057ee:	4bb5      	ldr	r3, [pc, #724]	@ (8005ac4 <CreateMessage+0xc1c>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	001a      	movs	r2, r3
 80057f4:	4bb2      	ldr	r3, [pc, #712]	@ (8005ac0 <CreateMessage+0xc18>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4013      	ands	r3, r2
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	4193      	sbcs	r3, r2
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4bb0      	ldr	r3, [pc, #704]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005802:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005804:	4bb0      	ldr	r3, [pc, #704]	@ (8005ac8 <CreateMessage+0xc20>)
 8005806:	48b9      	ldr	r0, [pc, #740]	@ (8005aec <CreateMessage+0xc44>)
 8005808:	220c      	movs	r2, #12
 800580a:	0019      	movs	r1, r3
 800580c:	f005 fcd6 	bl	800b1bc <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005810:	4aad      	ldr	r2, [pc, #692]	@ (8005ac8 <CreateMessage+0xc20>)
 8005812:	4bb1      	ldr	r3, [pc, #708]	@ (8005ad8 <CreateMessage+0xc30>)
 8005814:	0011      	movs	r1, r2
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fb22 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800581c:	4baf      	ldr	r3, [pc, #700]	@ (8005adc <CreateMessage+0xc34>)
 800581e:	689c      	ldr	r4, [r3, #8]
 8005820:	4baf      	ldr	r3, [pc, #700]	@ (8005ae0 <CreateMessage+0xc38>)
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	1c18      	adds	r0, r3, #0
 8005826:	f7fd fe1d 	bl	8003464 <__aeabi_f2d>
 800582a:	0002      	movs	r2, r0
 800582c:	000b      	movs	r3, r1
 800582e:	4dad      	ldr	r5, [pc, #692]	@ (8005ae4 <CreateMessage+0xc3c>)
 8005830:	49af      	ldr	r1, [pc, #700]	@ (8005af0 <CreateMessage+0xc48>)
 8005832:	48a2      	ldr	r0, [pc, #648]	@ (8005abc <CreateMessage+0xc14>)
 8005834:	9202      	str	r2, [sp, #8]
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	4ba7      	ldr	r3, [pc, #668]	@ (8005ad8 <CreateMessage+0xc30>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	002b      	movs	r3, r5
 800583e:	0022      	movs	r2, r4
 8005840:	f01f fa20 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 8005844:	4b9d      	ldr	r3, [pc, #628]	@ (8005abc <CreateMessage+0xc14>)
 8005846:	0018      	movs	r0, r3
 8005848:	f7fa fc90 	bl	800016c <strlen>
 800584c:	0003      	movs	r3, r0
 800584e:	b299      	uxth	r1, r3
 8005850:	220e      	movs	r2, #14
 8005852:	18bb      	adds	r3, r7, r2
 8005854:	18ba      	adds	r2, r7, r2
 8005856:	8812      	ldrh	r2, [r2, #0]
 8005858:	188a      	adds	r2, r1, r2
 800585a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800585c:	1dbb      	adds	r3, r7, #6
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d019      	beq.n	8005898 <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005864:	4b95      	ldr	r3, [pc, #596]	@ (8005abc <CreateMessage+0xc14>)
 8005866:	0018      	movs	r0, r3
 8005868:	f7fa fc80 	bl	800016c <strlen>
 800586c:	0003      	movs	r3, r0
 800586e:	b29a      	uxth	r2, r3
 8005870:	4b92      	ldr	r3, [pc, #584]	@ (8005abc <CreateMessage+0xc14>)
 8005872:	0011      	movs	r1, r2
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff f913 	bl	8004aa0 <ESP_Send>
 800587a:	0003      	movs	r3, r0
 800587c:	001a      	movs	r2, r3
 800587e:	4b90      	ldr	r3, [pc, #576]	@ (8005ac0 <CreateMessage+0xc18>)
 8005880:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005882:	4b90      	ldr	r3, [pc, #576]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	001a      	movs	r2, r3
 8005888:	4b8d      	ldr	r3, [pc, #564]	@ (8005ac0 <CreateMessage+0xc18>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	4013      	ands	r3, r2
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	4193      	sbcs	r3, r2
 8005892:	b2da      	uxtb	r2, r3
 8005894:	4b8b      	ldr	r3, [pc, #556]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005896:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005898:	f006 fdb0 	bl	800c3fc <IsAHT20SensorPresent>
 800589c:	1e03      	subs	r3, r0, #0
 800589e:	d100      	bne.n	80058a2 <CreateMessage+0x9fa>
 80058a0:	e0a3      	b.n	80059ea <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 80058a2:	4b89      	ldr	r3, [pc, #548]	@ (8005ac8 <CreateMessage+0xc20>)
 80058a4:	4893      	ldr	r0, [pc, #588]	@ (8005af4 <CreateMessage+0xc4c>)
 80058a6:	220c      	movs	r2, #12
 80058a8:	0019      	movs	r1, r3
 80058aa:	f005 fc87 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 80058ae:	4a92      	ldr	r2, [pc, #584]	@ (8005af8 <CreateMessage+0xc50>)
 80058b0:	4992      	ldr	r1, [pc, #584]	@ (8005afc <CreateMessage+0xc54>)
 80058b2:	4b85      	ldr	r3, [pc, #532]	@ (8005ac8 <CreateMessage+0xc20>)
 80058b4:	0018      	movs	r0, r3
 80058b6:	f7ff fa9b 	bl	8004df0 <isKeyValid>
 80058ba:	1e03      	subs	r3, r0, #0
 80058bc:	d043      	beq.n	8005946 <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 80058be:	4a82      	ldr	r2, [pc, #520]	@ (8005ac8 <CreateMessage+0xc20>)
 80058c0:	4b85      	ldr	r3, [pc, #532]	@ (8005ad8 <CreateMessage+0xc30>)
 80058c2:	0011      	movs	r1, r2
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff facb 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperaturemax);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperaturemax);
 80058ca:	4b84      	ldr	r3, [pc, #528]	@ (8005adc <CreateMessage+0xc34>)
 80058cc:	689c      	ldr	r4, [r3, #8]
 80058ce:	4b84      	ldr	r3, [pc, #528]	@ (8005ae0 <CreateMessage+0xc38>)
 80058d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d2:	1c18      	adds	r0, r3, #0
 80058d4:	f7fd fdc6 	bl	8003464 <__aeabi_f2d>
 80058d8:	0002      	movs	r2, r0
 80058da:	000b      	movs	r3, r1
 80058dc:	4d81      	ldr	r5, [pc, #516]	@ (8005ae4 <CreateMessage+0xc3c>)
 80058de:	4988      	ldr	r1, [pc, #544]	@ (8005b00 <CreateMessage+0xc58>)
 80058e0:	4876      	ldr	r0, [pc, #472]	@ (8005abc <CreateMessage+0xc14>)
 80058e2:	9202      	str	r2, [sp, #8]
 80058e4:	9303      	str	r3, [sp, #12]
 80058e6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ad8 <CreateMessage+0xc30>)
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	002b      	movs	r3, r5
 80058ec:	0022      	movs	r2, r4
 80058ee:	f01f f9c9 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 80058f2:	4b72      	ldr	r3, [pc, #456]	@ (8005abc <CreateMessage+0xc14>)
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7fa fc39 	bl	800016c <strlen>
 80058fa:	0003      	movs	r3, r0
 80058fc:	b299      	uxth	r1, r3
 80058fe:	220e      	movs	r2, #14
 8005900:	18bb      	adds	r3, r7, r2
 8005902:	18ba      	adds	r2, r7, r2
 8005904:	8812      	ldrh	r2, [r2, #0]
 8005906:	188a      	adds	r2, r1, r2
 8005908:	801a      	strh	r2, [r3, #0]
      if (send) {
 800590a:	1dbb      	adds	r3, r7, #6
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d019      	beq.n	8005946 <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005912:	4b6a      	ldr	r3, [pc, #424]	@ (8005abc <CreateMessage+0xc14>)
 8005914:	0018      	movs	r0, r3
 8005916:	f7fa fc29 	bl	800016c <strlen>
 800591a:	0003      	movs	r3, r0
 800591c:	b29a      	uxth	r2, r3
 800591e:	4b67      	ldr	r3, [pc, #412]	@ (8005abc <CreateMessage+0xc14>)
 8005920:	0011      	movs	r1, r2
 8005922:	0018      	movs	r0, r3
 8005924:	f7ff f8bc 	bl	8004aa0 <ESP_Send>
 8005928:	0003      	movs	r3, r0
 800592a:	001a      	movs	r2, r3
 800592c:	4b64      	ldr	r3, [pc, #400]	@ (8005ac0 <CreateMessage+0xc18>)
 800592e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005930:	4b64      	ldr	r3, [pc, #400]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	001a      	movs	r2, r3
 8005936:	4b62      	ldr	r3, [pc, #392]	@ (8005ac0 <CreateMessage+0xc18>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	4193      	sbcs	r3, r2
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4b60      	ldr	r3, [pc, #384]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005944:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005946:	4b60      	ldr	r3, [pc, #384]	@ (8005ac8 <CreateMessage+0xc20>)
 8005948:	486e      	ldr	r0, [pc, #440]	@ (8005b04 <CreateMessage+0xc5c>)
 800594a:	220c      	movs	r2, #12
 800594c:	0019      	movs	r1, r3
 800594e:	f005 fc35 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005952:	4a6d      	ldr	r2, [pc, #436]	@ (8005b08 <CreateMessage+0xc60>)
 8005954:	4969      	ldr	r1, [pc, #420]	@ (8005afc <CreateMessage+0xc54>)
 8005956:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac8 <CreateMessage+0xc20>)
 8005958:	0018      	movs	r0, r3
 800595a:	f7ff fa49 	bl	8004df0 <isKeyValid>
 800595e:	1e03      	subs	r3, r0, #0
 8005960:	d043      	beq.n	80059ea <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005962:	4a59      	ldr	r2, [pc, #356]	@ (8005ac8 <CreateMessage+0xc20>)
 8005964:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad8 <CreateMessage+0xc30>)
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f7ff fa79 	bl	8004e60 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humiditymax);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humiditymax);
 800596e:	4b5b      	ldr	r3, [pc, #364]	@ (8005adc <CreateMessage+0xc34>)
 8005970:	689c      	ldr	r4, [r3, #8]
 8005972:	4b5b      	ldr	r3, [pc, #364]	@ (8005ae0 <CreateMessage+0xc38>)
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	1c18      	adds	r0, r3, #0
 8005978:	f7fd fd74 	bl	8003464 <__aeabi_f2d>
 800597c:	0002      	movs	r2, r0
 800597e:	000b      	movs	r3, r1
 8005980:	4d58      	ldr	r5, [pc, #352]	@ (8005ae4 <CreateMessage+0xc3c>)
 8005982:	4962      	ldr	r1, [pc, #392]	@ (8005b0c <CreateMessage+0xc64>)
 8005984:	484d      	ldr	r0, [pc, #308]	@ (8005abc <CreateMessage+0xc14>)
 8005986:	9202      	str	r2, [sp, #8]
 8005988:	9303      	str	r3, [sp, #12]
 800598a:	4b53      	ldr	r3, [pc, #332]	@ (8005ad8 <CreateMessage+0xc30>)
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	002b      	movs	r3, r5
 8005990:	0022      	movs	r2, r4
 8005992:	f01f f977 	bl	8024c84 <siprintf>
  #endif
      index += strlen(message);
 8005996:	4b49      	ldr	r3, [pc, #292]	@ (8005abc <CreateMessage+0xc14>)
 8005998:	0018      	movs	r0, r3
 800599a:	f7fa fbe7 	bl	800016c <strlen>
 800599e:	0003      	movs	r3, r0
 80059a0:	b299      	uxth	r1, r3
 80059a2:	220e      	movs	r2, #14
 80059a4:	18bb      	adds	r3, r7, r2
 80059a6:	18ba      	adds	r2, r7, r2
 80059a8:	8812      	ldrh	r2, [r2, #0]
 80059aa:	188a      	adds	r2, r1, r2
 80059ac:	801a      	strh	r2, [r3, #0]
      if (send) {
 80059ae:	1dbb      	adds	r3, r7, #6
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d019      	beq.n	80059ea <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80059b6:	4b41      	ldr	r3, [pc, #260]	@ (8005abc <CreateMessage+0xc14>)
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fa fbd7 	bl	800016c <strlen>
 80059be:	0003      	movs	r3, r0
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	4b3e      	ldr	r3, [pc, #248]	@ (8005abc <CreateMessage+0xc14>)
 80059c4:	0011      	movs	r1, r2
 80059c6:	0018      	movs	r0, r3
 80059c8:	f7ff f86a 	bl	8004aa0 <ESP_Send>
 80059cc:	0003      	movs	r3, r0
 80059ce:	001a      	movs	r2, r3
 80059d0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac0 <CreateMessage+0xc18>)
 80059d2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80059d4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <CreateMessage+0xc1c>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	001a      	movs	r2, r3
 80059da:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <CreateMessage+0xc18>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4013      	ands	r3, r2
 80059e0:	1e5a      	subs	r2, r3, #1
 80059e2:	4193      	sbcs	r3, r2
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4b37      	ldr	r3, [pc, #220]	@ (8005ac4 <CreateMessage+0xc1c>)
 80059e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 80059ea:	f006 fd1b 	bl	800c424 <IsENS160SensorPresent>
 80059ee:	1e03      	subs	r3, r0, #0
 80059f0:	d100      	bne.n	80059f4 <CreateMessage+0xb4c>
 80059f2:	e11b      	b.n	8005c2c <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 80059f4:	4b34      	ldr	r3, [pc, #208]	@ (8005ac8 <CreateMessage+0xc20>)
 80059f6:	4846      	ldr	r0, [pc, #280]	@ (8005b10 <CreateMessage+0xc68>)
 80059f8:	220c      	movs	r2, #12
 80059fa:	0019      	movs	r1, r3
 80059fc:	f005 fbde 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005a00:	4a44      	ldr	r2, [pc, #272]	@ (8005b14 <CreateMessage+0xc6c>)
 8005a02:	4945      	ldr	r1, [pc, #276]	@ (8005b18 <CreateMessage+0xc70>)
 8005a04:	4b30      	ldr	r3, [pc, #192]	@ (8005ac8 <CreateMessage+0xc20>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff f9f2 	bl	8004df0 <isKeyValid>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d03d      	beq.n	8005a8c <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005a10:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac8 <CreateMessage+0xc20>)
 8005a12:	4b31      	ldr	r3, [pc, #196]	@ (8005ad8 <CreateMessage+0xc30>)
 8005a14:	0011      	movs	r1, r2
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7ff fa22 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005adc <CreateMessage+0xc34>)
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <CreateMessage+0xc38>)
 8005a22:	2165      	movs	r1, #101	@ 0x65
 8005a24:	5c5b      	ldrb	r3, [r3, r1]
 8005a26:	4c2f      	ldr	r4, [pc, #188]	@ (8005ae4 <CreateMessage+0xc3c>)
 8005a28:	493c      	ldr	r1, [pc, #240]	@ (8005b1c <CreateMessage+0xc74>)
 8005a2a:	4824      	ldr	r0, [pc, #144]	@ (8005abc <CreateMessage+0xc14>)
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad8 <CreateMessage+0xc30>)
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	0023      	movs	r3, r4
 8005a34:	f01f f926 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 8005a38:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <CreateMessage+0xc14>)
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7fa fb96 	bl	800016c <strlen>
 8005a40:	0003      	movs	r3, r0
 8005a42:	b299      	uxth	r1, r3
 8005a44:	220e      	movs	r2, #14
 8005a46:	18bb      	adds	r3, r7, r2
 8005a48:	18ba      	adds	r2, r7, r2
 8005a4a:	8812      	ldrh	r2, [r2, #0]
 8005a4c:	188a      	adds	r2, r1, r2
 8005a4e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005a50:	1dbb      	adds	r3, r7, #6
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d019      	beq.n	8005a8c <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005a58:	4b18      	ldr	r3, [pc, #96]	@ (8005abc <CreateMessage+0xc14>)
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7fa fb86 	bl	800016c <strlen>
 8005a60:	0003      	movs	r3, r0
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	4b15      	ldr	r3, [pc, #84]	@ (8005abc <CreateMessage+0xc14>)
 8005a66:	0011      	movs	r1, r2
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f7ff f819 	bl	8004aa0 <ESP_Send>
 8005a6e:	0003      	movs	r3, r0
 8005a70:	001a      	movs	r2, r3
 8005a72:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <CreateMessage+0xc18>)
 8005a74:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a76:	4b13      	ldr	r3, [pc, #76]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <CreateMessage+0xc18>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	4013      	ands	r3, r2
 8005a82:	1e5a      	subs	r2, r3, #1
 8005a84:	4193      	sbcs	r3, r2
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <CreateMessage+0xc1c>)
 8005a8a:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <CreateMessage+0xc20>)
 8005a8e:	4824      	ldr	r0, [pc, #144]	@ (8005b20 <CreateMessage+0xc78>)
 8005a90:	220c      	movs	r2, #12
 8005a92:	0019      	movs	r1, r3
 8005a94:	f005 fb92 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005a98:	4a22      	ldr	r2, [pc, #136]	@ (8005b24 <CreateMessage+0xc7c>)
 8005a9a:	491f      	ldr	r1, [pc, #124]	@ (8005b18 <CreateMessage+0xc70>)
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <CreateMessage+0xc20>)
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7ff f9a6 	bl	8004df0 <isKeyValid>
 8005aa4:	1e03      	subs	r3, r0, #0
 8005aa6:	d075      	beq.n	8005b94 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005aa8:	4a07      	ldr	r2, [pc, #28]	@ (8005ac8 <CreateMessage+0xc20>)
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <CreateMessage+0xc30>)
 8005aac:	0011      	movs	r1, r2
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7ff f9d6 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005ab4:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <CreateMessage+0xc34>)
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	e036      	b.n	8005b28 <CreateMessage+0xc80>
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	200005e4 	.word	0x200005e4
 8005ac0:	20000791 	.word	0x20000791
 8005ac4:	2000002d 	.word	0x2000002d
 8005ac8:	2000076c 	.word	0x2000076c
 8005acc:	080800bc 	.word	0x080800bc
 8005ad0:	08029c10 	.word	0x08029c10
 8005ad4:	08029cd4 	.word	0x08029cd4
 8005ad8:	20000778 	.word	0x20000778
 8005adc:	200005c4 	.word	0x200005c4
 8005ae0:	20000694 	.word	0x20000694
 8005ae4:	2000074c 	.word	0x2000074c
 8005ae8:	08029cd8 	.word	0x08029cd8
 8005aec:	08080060 	.word	0x08080060
 8005af0:	08029d30 	.word	0x08029d30
 8005af4:	080800c8 	.word	0x080800c8
 8005af8:	08029b34 	.word	0x08029b34
 8005afc:	08029d8c 	.word	0x08029d8c
 8005b00:	08029d94 	.word	0x08029d94
 8005b04:	080800d4 	.word	0x080800d4
 8005b08:	08029ba4 	.word	0x08029ba4
 8005b0c:	08029df0 	.word	0x08029df0
 8005b10:	080800ec 	.word	0x080800ec
 8005b14:	08029e4c 	.word	0x08029e4c
 8005b18:	08029e60 	.word	0x08029e60
 8005b1c:	08029e68 	.word	0x08029e68
 8005b20:	080800f8 	.word	0x080800f8
 8005b24:	08029ec0 	.word	0x08029ec0
 8005b28:	4b71      	ldr	r3, [pc, #452]	@ (8005cf0 <CreateMessage+0xe48>)
 8005b2a:	215a      	movs	r1, #90	@ 0x5a
 8005b2c:	5a5b      	ldrh	r3, [r3, r1]
 8005b2e:	4c71      	ldr	r4, [pc, #452]	@ (8005cf4 <CreateMessage+0xe4c>)
 8005b30:	4971      	ldr	r1, [pc, #452]	@ (8005cf8 <CreateMessage+0xe50>)
 8005b32:	4872      	ldr	r0, [pc, #456]	@ (8005cfc <CreateMessage+0xe54>)
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	4b72      	ldr	r3, [pc, #456]	@ (8005d00 <CreateMessage+0xe58>)
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	0023      	movs	r3, r4
 8005b3c:	f01f f8a2 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 8005b40:	4b6e      	ldr	r3, [pc, #440]	@ (8005cfc <CreateMessage+0xe54>)
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7fa fb12 	bl	800016c <strlen>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	220e      	movs	r2, #14
 8005b4e:	18bb      	adds	r3, r7, r2
 8005b50:	18ba      	adds	r2, r7, r2
 8005b52:	8812      	ldrh	r2, [r2, #0]
 8005b54:	188a      	adds	r2, r1, r2
 8005b56:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b58:	1dbb      	adds	r3, r7, #6
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d019      	beq.n	8005b94 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b60:	4b66      	ldr	r3, [pc, #408]	@ (8005cfc <CreateMessage+0xe54>)
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7fa fb02 	bl	800016c <strlen>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	4b63      	ldr	r3, [pc, #396]	@ (8005cfc <CreateMessage+0xe54>)
 8005b6e:	0011      	movs	r1, r2
 8005b70:	0018      	movs	r0, r3
 8005b72:	f7fe ff95 	bl	8004aa0 <ESP_Send>
 8005b76:	0003      	movs	r3, r0
 8005b78:	001a      	movs	r2, r3
 8005b7a:	4b62      	ldr	r3, [pc, #392]	@ (8005d04 <CreateMessage+0xe5c>)
 8005b7c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b7e:	4b62      	ldr	r3, [pc, #392]	@ (8005d08 <CreateMessage+0xe60>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	001a      	movs	r2, r3
 8005b84:	4b5f      	ldr	r3, [pc, #380]	@ (8005d04 <CreateMessage+0xe5c>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	1e5a      	subs	r2, r3, #1
 8005b8c:	4193      	sbcs	r3, r2
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b5d      	ldr	r3, [pc, #372]	@ (8005d08 <CreateMessage+0xe60>)
 8005b92:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005b94:	4b5d      	ldr	r3, [pc, #372]	@ (8005d0c <CreateMessage+0xe64>)
 8005b96:	485e      	ldr	r0, [pc, #376]	@ (8005d10 <CreateMessage+0xe68>)
 8005b98:	220c      	movs	r2, #12
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	f005 fb0e 	bl	800b1bc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005ba0:	4a5c      	ldr	r2, [pc, #368]	@ (8005d14 <CreateMessage+0xe6c>)
 8005ba2:	495d      	ldr	r1, [pc, #372]	@ (8005d18 <CreateMessage+0xe70>)
 8005ba4:	4b59      	ldr	r3, [pc, #356]	@ (8005d0c <CreateMessage+0xe64>)
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f7ff f922 	bl	8004df0 <isKeyValid>
 8005bac:	1e03      	subs	r3, r0, #0
 8005bae:	d03d      	beq.n	8005c2c <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8005bb0:	4a56      	ldr	r2, [pc, #344]	@ (8005d0c <CreateMessage+0xe64>)
 8005bb2:	4b53      	ldr	r3, [pc, #332]	@ (8005d00 <CreateMessage+0xe58>)
 8005bb4:	0011      	movs	r1, r2
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff f952 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8005bbc:	4b57      	ldr	r3, [pc, #348]	@ (8005d1c <CreateMessage+0xe74>)
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8005cf0 <CreateMessage+0xe48>)
 8005bc2:	2162      	movs	r1, #98	@ 0x62
 8005bc4:	5a5b      	ldrh	r3, [r3, r1]
 8005bc6:	4c4b      	ldr	r4, [pc, #300]	@ (8005cf4 <CreateMessage+0xe4c>)
 8005bc8:	4955      	ldr	r1, [pc, #340]	@ (8005d20 <CreateMessage+0xe78>)
 8005bca:	484c      	ldr	r0, [pc, #304]	@ (8005cfc <CreateMessage+0xe54>)
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	4b4c      	ldr	r3, [pc, #304]	@ (8005d00 <CreateMessage+0xe58>)
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	0023      	movs	r3, r4
 8005bd4:	f01f f856 	bl	8024c84 <siprintf>
#endif
      index += strlen(message);
 8005bd8:	4b48      	ldr	r3, [pc, #288]	@ (8005cfc <CreateMessage+0xe54>)
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7fa fac6 	bl	800016c <strlen>
 8005be0:	0003      	movs	r3, r0
 8005be2:	b299      	uxth	r1, r3
 8005be4:	220e      	movs	r2, #14
 8005be6:	18bb      	adds	r3, r7, r2
 8005be8:	18ba      	adds	r2, r7, r2
 8005bea:	8812      	ldrh	r2, [r2, #0]
 8005bec:	188a      	adds	r2, r1, r2
 8005bee:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005bf0:	1dbb      	adds	r3, r7, #6
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d019      	beq.n	8005c2c <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005bf8:	4b40      	ldr	r3, [pc, #256]	@ (8005cfc <CreateMessage+0xe54>)
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7fa fab6 	bl	800016c <strlen>
 8005c00:	0003      	movs	r3, r0
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	4b3d      	ldr	r3, [pc, #244]	@ (8005cfc <CreateMessage+0xe54>)
 8005c06:	0011      	movs	r1, r2
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fe ff49 	bl	8004aa0 <ESP_Send>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	001a      	movs	r2, r3
 8005c12:	4b3c      	ldr	r3, [pc, #240]	@ (8005d04 <CreateMessage+0xe5c>)
 8005c14:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c16:	4b3c      	ldr	r3, [pc, #240]	@ (8005d08 <CreateMessage+0xe60>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	001a      	movs	r2, r3
 8005c1c:	4b39      	ldr	r3, [pc, #228]	@ (8005d04 <CreateMessage+0xe5c>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	4013      	ands	r3, r2
 8005c22:	1e5a      	subs	r2, r3, #1
 8005c24:	4193      	sbcs	r3, r2
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	4b37      	ldr	r3, [pc, #220]	@ (8005d08 <CreateMessage+0xe60>)
 8005c2a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8005c2c:	4b37      	ldr	r3, [pc, #220]	@ (8005d0c <CreateMessage+0xe64>)
 8005c2e:	483d      	ldr	r0, [pc, #244]	@ (8005d24 <CreateMessage+0xe7c>)
 8005c30:	220c      	movs	r2, #12
 8005c32:	0019      	movs	r1, r3
 8005c34:	f005 fac2 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005c38:	4a34      	ldr	r2, [pc, #208]	@ (8005d0c <CreateMessage+0xe64>)
 8005c3a:	4b31      	ldr	r3, [pc, #196]	@ (8005d00 <CreateMessage+0xe58>)
 8005c3c:	0011      	movs	r1, r2
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff f90e 	bl	8004e60 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8005c44:	4b35      	ldr	r3, [pc, #212]	@ (8005d1c <CreateMessage+0xe74>)
 8005c46:	689c      	ldr	r4, [r3, #8]
 8005c48:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <CreateMessage+0xe80>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1c18      	adds	r0, r3, #0
 8005c4e:	f7fd fc09 	bl	8003464 <__aeabi_f2d>
 8005c52:	0002      	movs	r2, r0
 8005c54:	000b      	movs	r3, r1
 8005c56:	4d27      	ldr	r5, [pc, #156]	@ (8005cf4 <CreateMessage+0xe4c>)
 8005c58:	4934      	ldr	r1, [pc, #208]	@ (8005d2c <CreateMessage+0xe84>)
 8005c5a:	4828      	ldr	r0, [pc, #160]	@ (8005cfc <CreateMessage+0xe54>)
 8005c5c:	9202      	str	r2, [sp, #8]
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	4b27      	ldr	r3, [pc, #156]	@ (8005d00 <CreateMessage+0xe58>)
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	002b      	movs	r3, r5
 8005c66:	0022      	movs	r2, r4
 8005c68:	f01f f80c 	bl	8024c84 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8005c6c:	4b23      	ldr	r3, [pc, #140]	@ (8005cfc <CreateMessage+0xe54>)
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7fa fa7c 	bl	800016c <strlen>
 8005c74:	0002      	movs	r2, r0
 8005c76:	4b21      	ldr	r3, [pc, #132]	@ (8005cfc <CreateMessage+0xe54>)
 8005c78:	18d3      	adds	r3, r2, r3
 8005c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d30 <CreateMessage+0xe88>)
 8005c7c:	0011      	movs	r1, r2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f01f f800 	bl	8024c84 <siprintf>
  index += strlen(message);
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <CreateMessage+0xe54>)
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fa fa70 	bl	800016c <strlen>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	220e      	movs	r2, #14
 8005c92:	18bb      	adds	r3, r7, r2
 8005c94:	18ba      	adds	r2, r7, r2
 8005c96:	8812      	ldrh	r2, [r2, #0]
 8005c98:	188a      	adds	r2, r1, r2
 8005c9a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005c9c:	1dbb      	adds	r3, r7, #6
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d019      	beq.n	8005cd8 <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005ca4:	4b15      	ldr	r3, [pc, #84]	@ (8005cfc <CreateMessage+0xe54>)
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fa fa60 	bl	800016c <strlen>
 8005cac:	0003      	movs	r3, r0
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	4b12      	ldr	r3, [pc, #72]	@ (8005cfc <CreateMessage+0xe54>)
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7fe fef3 	bl	8004aa0 <ESP_Send>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	001a      	movs	r2, r3
 8005cbe:	4b11      	ldr	r3, [pc, #68]	@ (8005d04 <CreateMessage+0xe5c>)
 8005cc0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	@ (8005d08 <CreateMessage+0xe60>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	001a      	movs	r2, r3
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d04 <CreateMessage+0xe5c>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	4193      	sbcs	r3, r2
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <CreateMessage+0xe60>)
 8005cd6:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d08 <CreateMessage+0xe60>)
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	701a      	strb	r2, [r3, #0]
  return index;
 8005ce0:	230e      	movs	r3, #14
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	881b      	ldrh	r3, [r3, #0]
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b005      	add	sp, #20
 8005cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	20000694 	.word	0x20000694
 8005cf4:	2000074c 	.word	0x2000074c
 8005cf8:	08029ec8 	.word	0x08029ec8
 8005cfc:	200005e4 	.word	0x200005e4
 8005d00:	20000778 	.word	0x20000778
 8005d04:	20000791 	.word	0x20000791
 8005d08:	2000002d 	.word	0x2000002d
 8005d0c:	2000076c 	.word	0x2000076c
 8005d10:	08080104 	.word	0x08080104
 8005d14:	08029f24 	.word	0x08029f24
 8005d18:	08029e60 	.word	0x08029e60
 8005d1c:	200005c4 	.word	0x200005c4
 8005d20:	08029f2c 	.word	0x08029f2c
 8005d24:	0808006c 	.word	0x0808006c
 8005d28:	200005dc 	.word	0x200005dc
 8005d2c:	08029f88 	.word	0x08029f88
 8005d30:	08029fe0 	.word	0x08029fe0

08005d34 <StartProg>:

void StartProg(){
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8005d38:	2064      	movs	r0, #100	@ 0x64
 8005d3a:	f00d fc01 	bl	8013540 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005d3e:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <StartProg+0x60>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	2101      	movs	r1, #1
 8005d44:	0018      	movs	r0, r3
 8005d46:	f00e fe82 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005d4a:	2064      	movs	r0, #100	@ 0x64
 8005d4c:	f00d fbf8 	bl	8013540 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <StartProg+0x60>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	2102      	movs	r1, #2
 8005d56:	0018      	movs	r0, r3
 8005d58:	f00e fe79 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005d5c:	23fa      	movs	r3, #250	@ 0xfa
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	0018      	movs	r0, r3
 8005d62:	f00d fbed 	bl	8013540 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <StartProg+0x60>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f00e fe6e 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005d72:	23fa      	movs	r3, #250	@ 0xfa
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	0018      	movs	r0, r3
 8005d78:	f00d fbe2 	bl	8013540 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <StartProg+0x60>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2102      	movs	r1, #2
 8005d82:	0018      	movs	r0, r3
 8005d84:	f00e fe63 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8005d88:	2028      	movs	r0, #40	@ 0x28
 8005d8a:	f00d fbd9 	bl	8013540 <HAL_Delay>
}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	50001c00 	.word	0x50001c00

08005d98 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8005d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9a:	b0d9      	sub	sp, #356	@ 0x164
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	0008      	movs	r0, r1
 8005da2:	0011      	movs	r1, r2
 8005da4:	4ba4      	ldr	r3, [pc, #656]	@ (8006038 <ParseBuffer+0x2a0>)
 8005da6:	24b0      	movs	r4, #176	@ 0xb0
 8005da8:	0064      	lsls	r4, r4, #1
 8005daa:	191b      	adds	r3, r3, r4
 8005dac:	19db      	adds	r3, r3, r7
 8005dae:	1c02      	adds	r2, r0, #0
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	4ba2      	ldr	r3, [pc, #648]	@ (800603c <ParseBuffer+0x2a4>)
 8005db4:	191b      	adds	r3, r3, r4
 8005db6:	19db      	adds	r3, r3, r7
 8005db8:	1c0a      	adds	r2, r1, #0
 8005dba:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	005a      	lsls	r2, r3, #1
 8005dc0:	2348      	movs	r3, #72	@ 0x48
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f01f f8c2 	bl	8024f50 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8005dcc:	2360      	movs	r3, #96	@ 0x60
 8005dce:	33ff      	adds	r3, #255	@ 0xff
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8005dd6:	23ae      	movs	r3, #174	@ 0xae
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	2200      	movs	r2, #0
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	e013      	b.n	8005e0a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8005de2:	20ae      	movs	r0, #174	@ 0xae
 8005de4:	0040      	lsls	r0, r0, #1
 8005de6:	183b      	adds	r3, r7, r0
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	18d2      	adds	r2, r2, r3
 8005dee:	183b      	adds	r3, r7, r0
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	7811      	ldrb	r1, [r2, #0]
 8005df4:	4a92      	ldr	r2, [pc, #584]	@ (8006040 <ParseBuffer+0x2a8>)
 8005df6:	24b0      	movs	r4, #176	@ 0xb0
 8005df8:	0064      	lsls	r4, r4, #1
 8005dfa:	1912      	adds	r2, r2, r4
 8005dfc:	19d2      	adds	r2, r2, r7
 8005dfe:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8005e00:	183b      	adds	r3, r7, r0
 8005e02:	881a      	ldrh	r2, [r3, #0]
 8005e04:	183b      	adds	r3, r7, r0
 8005e06:	3201      	adds	r2, #1
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	23ae      	movs	r3, #174	@ 0xae
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	18fa      	adds	r2, r7, r3
 8005e10:	4b89      	ldr	r3, [pc, #548]	@ (8006038 <ParseBuffer+0x2a0>)
 8005e12:	21b0      	movs	r1, #176	@ 0xb0
 8005e14:	0049      	lsls	r1, r1, #1
 8005e16:	185b      	adds	r3, r3, r1
 8005e18:	19db      	adds	r3, r3, r7
 8005e1a:	8812      	ldrh	r2, [r2, #0]
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d3df      	bcc.n	8005de2 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8005e22:	4b85      	ldr	r3, [pc, #532]	@ (8006038 <ParseBuffer+0x2a0>)
 8005e24:	185b      	adds	r3, r3, r1
 8005e26:	19db      	adds	r3, r3, r7
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	4a85      	ldr	r2, [pc, #532]	@ (8006040 <ParseBuffer+0x2a8>)
 8005e2c:	1852      	adds	r2, r2, r1
 8005e2e:	19d2      	adds	r2, r2, r7
 8005e30:	2100      	movs	r1, #0
 8005e32:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8005e34:	f00c febe 	bl	8012bb4 <GetVerboseLevel>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d106      	bne.n	8005e4c <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8005e3e:	2348      	movs	r3, #72	@ 0x48
 8005e40:	18fa      	adds	r2, r7, r3
 8005e42:	4b80      	ldr	r3, [pc, #512]	@ (8006044 <ParseBuffer+0x2ac>)
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f01e feac 	bl	8024ba4 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	26ac      	movs	r6, #172	@ 0xac
 8005e50:	0076      	lsls	r6, r6, #1
 8005e52:	19ba      	adds	r2, r7, r6
 8005e54:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8005e56:	4b7c      	ldr	r3, [pc, #496]	@ (8006048 <ParseBuffer+0x2b0>)
 8005e58:	25b0      	movs	r5, #176	@ 0xb0
 8005e5a:	006d      	lsls	r5, r5, #1
 8005e5c:	195b      	adds	r3, r3, r5
 8005e5e:	19db      	adds	r3, r3, r7
 8005e60:	4a7a      	ldr	r2, [pc, #488]	@ (800604c <ParseBuffer+0x2b4>)
 8005e62:	8811      	ldrh	r1, [r2, #0]
 8005e64:	8019      	strh	r1, [r3, #0]
 8005e66:	7892      	ldrb	r2, [r2, #2]
 8005e68:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8005e6a:	4b79      	ldr	r3, [pc, #484]	@ (8006050 <ParseBuffer+0x2b8>)
 8005e6c:	195b      	adds	r3, r3, r5
 8005e6e:	19db      	adds	r3, r3, r7
 8005e70:	4a78      	ldr	r2, [pc, #480]	@ (8006054 <ParseBuffer+0x2bc>)
 8005e72:	6811      	ldr	r1, [r2, #0]
 8005e74:	6019      	str	r1, [r3, #0]
 8005e76:	8892      	ldrh	r2, [r2, #4]
 8005e78:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8005e7a:	4b77      	ldr	r3, [pc, #476]	@ (8006058 <ParseBuffer+0x2c0>)
 8005e7c:	195b      	adds	r3, r3, r5
 8005e7e:	19db      	adds	r3, r3, r7
 8005e80:	4a76      	ldr	r2, [pc, #472]	@ (800605c <ParseBuffer+0x2c4>)
 8005e82:	6811      	ldr	r1, [r2, #0]
 8005e84:	6019      	str	r1, [r3, #0]
 8005e86:	7912      	ldrb	r2, [r2, #4]
 8005e88:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8005e8a:	4b75      	ldr	r3, [pc, #468]	@ (8006060 <ParseBuffer+0x2c8>)
 8005e8c:	195b      	adds	r3, r3, r5
 8005e8e:	19db      	adds	r3, r3, r7
 8005e90:	4a74      	ldr	r2, [pc, #464]	@ (8006064 <ParseBuffer+0x2cc>)
 8005e92:	6811      	ldr	r1, [r2, #0]
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	8892      	ldrh	r2, [r2, #4]
 8005e98:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8005e9a:	4b73      	ldr	r3, [pc, #460]	@ (8006068 <ParseBuffer+0x2d0>)
 8005e9c:	195b      	adds	r3, r3, r5
 8005e9e:	19db      	adds	r3, r3, r7
 8005ea0:	223e      	movs	r2, #62	@ 0x3e
 8005ea2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8005ea4:	4b71      	ldr	r3, [pc, #452]	@ (800606c <ParseBuffer+0x2d4>)
 8005ea6:	195b      	adds	r3, r3, r5
 8005ea8:	19db      	adds	r3, r3, r7
 8005eaa:	4a71      	ldr	r2, [pc, #452]	@ (8006070 <ParseBuffer+0x2d8>)
 8005eac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005eae:	c313      	stmia	r3!, {r0, r1, r4}
 8005eb0:	8811      	ldrh	r1, [r2, #0]
 8005eb2:	8019      	strh	r1, [r3, #0]
 8005eb4:	7892      	ldrb	r2, [r2, #2]
 8005eb6:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8005eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8006074 <ParseBuffer+0x2dc>)
 8005eba:	195b      	adds	r3, r3, r5
 8005ebc:	19db      	adds	r3, r3, r7
 8005ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8006078 <ParseBuffer+0x2e0>)
 8005ec0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ec2:	c313      	stmia	r3!, {r0, r1, r4}
 8005ec4:	8812      	ldrh	r2, [r2, #0]
 8005ec6:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8005ec8:	4b5c      	ldr	r3, [pc, #368]	@ (800603c <ParseBuffer+0x2a4>)
 8005eca:	195b      	adds	r3, r3, r5
 8005ecc:	19db      	adds	r3, r3, r7
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8005ed4:	2344      	movs	r3, #68	@ 0x44
 8005ed6:	18fa      	adds	r2, r7, r3
 8005ed8:	2348      	movs	r3, #72	@ 0x48
 8005eda:	18fb      	adds	r3, r7, r3
 8005edc:	0011      	movs	r1, r2
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f01f f871 	bl	8024fc6 <strstr>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	19ba      	adds	r2, r7, r6
 8005ee8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8005eea:	4b54      	ldr	r3, [pc, #336]	@ (800603c <ParseBuffer+0x2a4>)
 8005eec:	22b0      	movs	r2, #176	@ 0xb0
 8005eee:	0052      	lsls	r2, r2, #1
 8005ef0:	189b      	adds	r3, r3, r2
 8005ef2:	19db      	adds	r3, r3, r7
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10c      	bne.n	8005f14 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8005efa:	232c      	movs	r3, #44	@ 0x2c
 8005efc:	18fa      	adds	r2, r7, r3
 8005efe:	2348      	movs	r3, #72	@ 0x48
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	0011      	movs	r1, r2
 8005f04:	0018      	movs	r0, r3
 8005f06:	f01f f85e 	bl	8024fc6 <strstr>
 8005f0a:	0003      	movs	r3, r0
 8005f0c:	22ac      	movs	r2, #172	@ 0xac
 8005f0e:	0052      	lsls	r2, r2, #1
 8005f10:	18ba      	adds	r2, r7, r2
 8005f12:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8005f14:	4b49      	ldr	r3, [pc, #292]	@ (800603c <ParseBuffer+0x2a4>)
 8005f16:	22b0      	movs	r2, #176	@ 0xb0
 8005f18:	0052      	lsls	r2, r2, #1
 8005f1a:	189b      	adds	r3, r3, r2
 8005f1c:	19db      	adds	r3, r3, r7
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d10c      	bne.n	8005f3e <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8005f24:	2328      	movs	r3, #40	@ 0x28
 8005f26:	18fa      	adds	r2, r7, r3
 8005f28:	2348      	movs	r3, #72	@ 0x48
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	0011      	movs	r1, r2
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f01f f849 	bl	8024fc6 <strstr>
 8005f34:	0003      	movs	r3, r0
 8005f36:	22ac      	movs	r2, #172	@ 0xac
 8005f38:	0052      	lsls	r2, r2, #1
 8005f3a:	18ba      	adds	r2, r7, r2
 8005f3c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800603c <ParseBuffer+0x2a4>)
 8005f40:	22b0      	movs	r2, #176	@ 0xb0
 8005f42:	0052      	lsls	r2, r2, #1
 8005f44:	189b      	adds	r3, r3, r2
 8005f46:	19db      	adds	r3, r3, r7
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d10c      	bne.n	8005f68 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8005f4e:	2308      	movs	r3, #8
 8005f50:	18fa      	adds	r2, r7, r3
 8005f52:	2348      	movs	r3, #72	@ 0x48
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	0011      	movs	r1, r2
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f01f f834 	bl	8024fc6 <strstr>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	22ac      	movs	r2, #172	@ 0xac
 8005f62:	0052      	lsls	r2, r2, #1
 8005f64:	18ba      	adds	r2, r7, r2
 8005f66:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8005f68:	233c      	movs	r3, #60	@ 0x3c
 8005f6a:	18fa      	adds	r2, r7, r3
 8005f6c:	2448      	movs	r4, #72	@ 0x48
 8005f6e:	193b      	adds	r3, r7, r4
 8005f70:	0011      	movs	r1, r2
 8005f72:	0018      	movs	r0, r3
 8005f74:	f01f f827 	bl	8024fc6 <strstr>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	22aa      	movs	r2, #170	@ 0xaa
 8005f7c:	0052      	lsls	r2, r2, #1
 8005f7e:	18ba      	adds	r2, r7, r2
 8005f80:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8005f82:	2318      	movs	r3, #24
 8005f84:	18fa      	adds	r2, r7, r3
 8005f86:	193b      	adds	r3, r7, r4
 8005f88:	0011      	movs	r1, r2
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f01f f81b 	bl	8024fc6 <strstr>
 8005f90:	0003      	movs	r3, r0
 8005f92:	22a8      	movs	r2, #168	@ 0xa8
 8005f94:	0052      	lsls	r2, r2, #1
 8005f96:	18ba      	adds	r2, r7, r2
 8005f98:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8005f9a:	4a38      	ldr	r2, [pc, #224]	@ (800607c <ParseBuffer+0x2e4>)
 8005f9c:	193b      	adds	r3, r7, r4
 8005f9e:	0011      	movs	r1, r2
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f01f f810 	bl	8024fc6 <strstr>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	22a6      	movs	r2, #166	@ 0xa6
 8005faa:	0052      	lsls	r2, r2, #1
 8005fac:	18ba      	adds	r2, r7, r2
 8005fae:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8005fb0:	2334      	movs	r3, #52	@ 0x34
 8005fb2:	18fa      	adds	r2, r7, r3
 8005fb4:	193b      	adds	r3, r7, r4
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f01f f804 	bl	8024fc6 <strstr>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	22a4      	movs	r2, #164	@ 0xa4
 8005fc2:	0052      	lsls	r2, r2, #1
 8005fc4:	18ba      	adds	r2, r7, r2
 8005fc6:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006038 <ParseBuffer+0x2a0>)
 8005fca:	21b0      	movs	r1, #176	@ 0xb0
 8005fcc:	0049      	lsls	r1, r1, #1
 8005fce:	185b      	adds	r3, r3, r1
 8005fd0:	19db      	adds	r3, r3, r7
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d800      	bhi.n	8005fda <ParseBuffer+0x242>
 8005fd8:	e0bf      	b.n	800615a <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8005fda:	22ac      	movs	r2, #172	@ 0xac
 8005fdc:	0052      	lsls	r2, r2, #1
 8005fde:	18bb      	adds	r3, r7, r2
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d052      	beq.n	800608c <ParseBuffer+0x2f4>
 8005fe6:	18bb      	adds	r3, r7, r2
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b4f      	cmp	r3, #79	@ 0x4f
 8005fee:	d14d      	bne.n	800608c <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8005ff0:	2360      	movs	r3, #96	@ 0x60
 8005ff2:	33ff      	adds	r3, #255	@ 0xff
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8005ffa:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <ParseBuffer+0x2e8>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b12      	cmp	r3, #18
 8006000:	d144      	bne.n	800608c <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8006002:	4b0d      	ldr	r3, [pc, #52]	@ (8006038 <ParseBuffer+0x2a0>)
 8006004:	185b      	adds	r3, r3, r1
 8006006:	19db      	adds	r3, r3, r7
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	2b2b      	cmp	r3, #43	@ 0x2b
 800600c:	d10b      	bne.n	8006026 <ParseBuffer+0x28e>
 800600e:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <ParseBuffer+0x2a8>)
 8006010:	185b      	adds	r3, r3, r1
 8006012:	19db      	adds	r3, r3, r7
 8006014:	2221      	movs	r2, #33	@ 0x21
 8006016:	5c9b      	ldrb	r3, [r3, r2]
 8006018:	2b32      	cmp	r3, #50	@ 0x32
 800601a:	d104      	bne.n	8006026 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 800601c:	193b      	adds	r3, r7, r4
 800601e:	0018      	movs	r0, r3
 8006020:	f003 f8b0 	bl	8009184 <ParseTime>
 8006024:	e032      	b.n	800608c <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 8006026:	4a17      	ldr	r2, [pc, #92]	@ (8006084 <ParseBuffer+0x2ec>)
 8006028:	4b17      	ldr	r3, [pc, #92]	@ (8006088 <ParseBuffer+0x2f0>)
 800602a:	0019      	movs	r1, r3
 800602c:	2001      	movs	r0, #1
 800602e:	f00c fd47 	bl	8012ac0 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8006032:	2306      	movs	r3, #6
 8006034:	e095      	b.n	8006162 <ParseBuffer+0x3ca>
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	fffffea2 	.word	0xfffffea2
 800603c:	fffffea1 	.word	0xfffffea1
 8006040:	fffffee8 	.word	0xfffffee8
 8006044:	08029fe4 	.word	0x08029fe4
 8006048:	fffffee4 	.word	0xfffffee4
 800604c:	0802a010 	.word	0x0802a010
 8006050:	fffffedc 	.word	0xfffffedc
 8006054:	0802a014 	.word	0x0802a014
 8006058:	fffffed4 	.word	0xfffffed4
 800605c:	0802a01c 	.word	0x0802a01c
 8006060:	fffffecc 	.word	0xfffffecc
 8006064:	0802a024 	.word	0x0802a024
 8006068:	fffffec8 	.word	0xfffffec8
 800606c:	fffffeb8 	.word	0xfffffeb8
 8006070:	0802a02c 	.word	0x0802a02c
 8006074:	fffffea8 	.word	0xfffffea8
 8006078:	0802a03c 	.word	0x0802a03c
 800607c:	0802cf24 	.word	0x0802cf24
 8006080:	2000068e 	.word	0x2000068e
 8006084:	08029ffc 	.word	0x08029ffc
 8006088:	08029454 	.word	0x08029454
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800608c:	22ac      	movs	r2, #172	@ 0xac
 800608e:	0052      	lsls	r2, r2, #1
 8006090:	18bb      	adds	r3, r7, r2
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <ParseBuffer+0x314>
 8006098:	18bb      	adds	r3, r7, r2
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b72      	cmp	r3, #114	@ 0x72
 80060a0:	d104      	bne.n	80060ac <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 80060a2:	2360      	movs	r3, #96	@ 0x60
 80060a4:	33ff      	adds	r3, #255	@ 0xff
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2202      	movs	r2, #2
 80060aa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80060ac:	22ac      	movs	r2, #172	@ 0xac
 80060ae:	0052      	lsls	r2, r2, #1
 80060b0:	18bb      	adds	r3, r7, r2
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <ParseBuffer+0x334>
 80060b8:	18bb      	adds	r3, r7, r2
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b3e      	cmp	r3, #62	@ 0x3e
 80060c0:	d104      	bne.n	80060cc <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 80060c2:	2360      	movs	r3, #96	@ 0x60
 80060c4:	33ff      	adds	r3, #255	@ 0xff
 80060c6:	18fb      	adds	r3, r7, r3
 80060c8:	2205      	movs	r2, #5
 80060ca:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80060cc:	22ac      	movs	r2, #172	@ 0xac
 80060ce:	0052      	lsls	r2, r2, #1
 80060d0:	18bb      	adds	r3, r7, r2
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <ParseBuffer+0x354>
 80060d8:	18bb      	adds	r3, r7, r2
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b2b      	cmp	r3, #43	@ 0x2b
 80060e0:	d104      	bne.n	80060ec <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 80060e2:	2360      	movs	r3, #96	@ 0x60
 80060e4:	33ff      	adds	r3, #255	@ 0xff
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	220b      	movs	r2, #11
 80060ea:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80060ec:	22aa      	movs	r2, #170	@ 0xaa
 80060ee:	0052      	lsls	r2, r2, #1
 80060f0:	18bb      	adds	r3, r7, r2
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <ParseBuffer+0x36a>
 80060f8:	18bb      	adds	r3, r7, r2
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b45      	cmp	r3, #69	@ 0x45
 8006100:	d00a      	beq.n	8006118 <ParseBuffer+0x380>
 8006102:	22a4      	movs	r2, #164	@ 0xa4
 8006104:	0052      	lsls	r2, r2, #1
 8006106:	18bb      	adds	r3, r7, r2
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <ParseBuffer+0x38a>
 800610e:	18bb      	adds	r3, r7, r2
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b46      	cmp	r3, #70	@ 0x46
 8006116:	d104      	bne.n	8006122 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 8006118:	2360      	movs	r3, #96	@ 0x60
 800611a:	33ff      	adds	r3, #255	@ 0xff
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2201      	movs	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006122:	22a8      	movs	r2, #168	@ 0xa8
 8006124:	0052      	lsls	r2, r2, #1
 8006126:	18bb      	adds	r3, r7, r2
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <ParseBuffer+0x3a6>
 800612e:	18bb      	adds	r3, r7, r2
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b57      	cmp	r3, #87	@ 0x57
 8006136:	d102      	bne.n	800613e <ParseBuffer+0x3a6>
      ConnectionMade = true;
 8006138:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <ParseBuffer+0x3d4>)
 800613a:	2201      	movs	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800613e:	22a6      	movs	r2, #166	@ 0xa6
 8006140:	0052      	lsls	r2, r2, #1
 8006142:	18bb      	adds	r3, r7, r2
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <ParseBuffer+0x3c2>
 800614a:	18bb      	adds	r3, r7, r2
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b32      	cmp	r3, #50	@ 0x32
 8006152:	d102      	bne.n	800615a <ParseBuffer+0x3c2>
      beurs = true;
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <ParseBuffer+0x3d8>)
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800615a:	2360      	movs	r3, #96	@ 0x60
 800615c:	33ff      	adds	r3, #255	@ 0xff
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	781b      	ldrb	r3, [r3, #0]

}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b059      	add	sp, #356	@ 0x164
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	200005bc 	.word	0x200005bc
 8006170:	200005be 	.word	0x200005be

08006174 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <PollAwake+0x34>)
 800617c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0018      	movs	r0, r3
 8006182:	f7f9 fff3 	bl	800016c <strlen>
 8006186:	0003      	movs	r3, r0
 8006188:	b29a      	uxth	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0011      	movs	r1, r2
 800618e:	0018      	movs	r0, r3
 8006190:	f7fe fc86 	bl	8004aa0 <ESP_Send>
 8006194:	1e03      	subs	r3, r0, #0
 8006196:	d001      	beq.n	800619c <PollAwake+0x28>
    return true;
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <PollAwake+0x2a>
  }
  else{
    return false;
 800619c:	2300      	movs	r3, #0
  }
}
 800619e:	0018      	movs	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b002      	add	sp, #8
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			@ (mov r8, r8)
 80061a8:	0802a04c 	.word	0x0802a04c

080061ac <RFPower>:

bool RFPower(){
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <RFPower+0x34>)
 80061b4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7f9 ffd7 	bl	800016c <strlen>
 80061be:	0003      	movs	r3, r0
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0011      	movs	r1, r2
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7fe fc6a 	bl	8004aa0 <ESP_Send>
 80061cc:	1e03      	subs	r3, r0, #0
 80061ce:	d001      	beq.n	80061d4 <RFPower+0x28>
    return true;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <RFPower+0x2a>
  }
  else{
    return false;
 80061d4:	2300      	movs	r3, #0
  }
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b002      	add	sp, #8
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	0802a054 	.word	0x0802a054

080061e4 <CheckRFPower>:

bool CheckRFPower(){
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80061ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006218 <CheckRFPower+0x34>)
 80061ec:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7f9 ffbb 	bl	800016c <strlen>
 80061f6:	0003      	movs	r3, r0
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0011      	movs	r1, r2
 80061fe:	0018      	movs	r0, r3
 8006200:	f7fe fc4e 	bl	8004aa0 <ESP_Send>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d001      	beq.n	800620c <CheckRFPower+0x28>
    return true;
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800620c:	2300      	movs	r3, #0
  }
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b002      	add	sp, #8
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	0802a064 	.word	0x0802a064

0800621c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006222:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <ATRestore+0x34>)
 8006224:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0018      	movs	r0, r3
 800622a:	f7f9 ff9f 	bl	800016c <strlen>
 800622e:	0003      	movs	r3, r0
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	0011      	movs	r1, r2
 8006236:	0018      	movs	r0, r3
 8006238:	f7fe fc32 	bl	8004aa0 <ESP_Send>
 800623c:	1e03      	subs	r3, r0, #0
 800623e:	d001      	beq.n	8006244 <ATRestore+0x28>
    return true;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <ATRestore+0x2a>
  }
  else{
    return false;
 8006244:	2300      	movs	r3, #0
  }
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	0802a074 	.word	0x0802a074

08006254 <CWINIT>:

bool CWINIT(){
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <CWINIT+0x34>)
 800625c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0018      	movs	r0, r3
 8006262:	f7f9 ff83 	bl	800016c <strlen>
 8006266:	0003      	movs	r3, r0
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	0011      	movs	r1, r2
 800626e:	0018      	movs	r0, r3
 8006270:	f7fe fc16 	bl	8004aa0 <ESP_Send>
 8006274:	1e03      	subs	r3, r0, #0
 8006276:	d001      	beq.n	800627c <CWINIT+0x28>
    return true;
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <CWINIT+0x2a>
  }
  else{
    return false;
 800627c:	2300      	movs	r3, #0
  }
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b002      	add	sp, #8
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	0802a084 	.word	0x0802a084

0800628c <CWMODE1>:

bool CWMODE1(){
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006292:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <CWMODE1+0x34>)
 8006294:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0018      	movs	r0, r3
 800629a:	f7f9 ff67 	bl	800016c <strlen>
 800629e:	0003      	movs	r3, r0
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0011      	movs	r1, r2
 80062a6:	0018      	movs	r0, r3
 80062a8:	f7fe fbfa 	bl	8004aa0 <ESP_Send>
 80062ac:	1e03      	subs	r3, r0, #0
 80062ae:	d001      	beq.n	80062b4 <CWMODE1+0x28>
    return true;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80062b4:	2300      	movs	r3, #0
  }
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b002      	add	sp, #8
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	0802a094 	.word	0x0802a094

080062c4 <CWMODE2>:

bool CWMODE2(){
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80062ca:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <CWMODE2+0x34>)
 80062cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7f9 ff4b 	bl	800016c <strlen>
 80062d6:	0003      	movs	r3, r0
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f7fe fbde 	bl	8004aa0 <ESP_Send>
 80062e4:	1e03      	subs	r3, r0, #0
 80062e6:	d001      	beq.n	80062ec <CWMODE2+0x28>
    return true;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <CWMODE2+0x2a>
  }
  else{
    return false;
 80062ec:	2300      	movs	r3, #0
  }
}
 80062ee:	0018      	movs	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b002      	add	sp, #8
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	0802a0a4 	.word	0x0802a0a4

080062fc <CWAUTOCONN>:

bool CWAUTOCONN(){
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006302:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <CWAUTOCONN+0x34>)
 8006304:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	0018      	movs	r0, r3
 800630a:	f7f9 ff2f 	bl	800016c <strlen>
 800630e:	0003      	movs	r3, r0
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0011      	movs	r1, r2
 8006316:	0018      	movs	r0, r3
 8006318:	f7fe fbc2 	bl	8004aa0 <ESP_Send>
 800631c:	1e03      	subs	r3, r0, #0
 800631e:	d001      	beq.n	8006324 <CWAUTOCONN+0x28>
    return true;
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006324:	2300      	movs	r3, #0
  }
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b002      	add	sp, #8
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	0802a0b4 	.word	0x0802a0b4

08006334 <CWJAP>:

bool CWJAP(){
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006336:	46c6      	mov	lr, r8
 8006338:	b500      	push	{lr}
 800633a:	b0a2      	sub	sp, #136	@ 0x88
 800633c:	af00      	add	r7, sp, #0
 800633e:	466b      	mov	r3, sp
 8006340:	4698      	mov	r8, r3
  beursTest = true;
 8006342:	4b39      	ldr	r3, [pc, #228]	@ (8006428 <CWJAP+0xf4>)
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8006348:	2618      	movs	r6, #24
 800634a:	19bb      	adds	r3, r7, r6
 800634c:	2264      	movs	r2, #100	@ 0x64
 800634e:	2100      	movs	r1, #0
 8006350:	0018      	movs	r0, r3
 8006352:	f01e fdfd 	bl	8024f50 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8006356:	4b35      	ldr	r3, [pc, #212]	@ (800642c <CWJAP+0xf8>)
 8006358:	4a35      	ldr	r2, [pc, #212]	@ (8006430 <CWJAP+0xfc>)
 800635a:	4936      	ldr	r1, [pc, #216]	@ (8006434 <CWJAP+0x100>)
 800635c:	19b8      	adds	r0, r7, r6
 800635e:	f01e fc91 	bl	8024c84 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006362:	19bb      	adds	r3, r7, r6
 8006364:	0018      	movs	r0, r3
 8006366:	f7f9 ff01 	bl	800016c <strlen>
 800636a:	0002      	movs	r2, r0
 800636c:	216f      	movs	r1, #111	@ 0x6f
 800636e:	0030      	movs	r0, r6
 8006370:	180b      	adds	r3, r1, r0
 8006372:	19db      	adds	r3, r3, r7
 8006374:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8006376:	180b      	adds	r3, r1, r0
 8006378:	19db      	adds	r3, r3, r7
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	1e5a      	subs	r2, r3, #1
 8006380:	2180      	movs	r1, #128	@ 0x80
 8006382:	1879      	adds	r1, r7, r1
 8006384:	600a      	str	r2, [r1, #0]
 8006386:	001a      	movs	r2, r3
 8006388:	60ba      	str	r2, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	60fa      	str	r2, [r7, #12]
 800638e:	68b8      	ldr	r0, [r7, #8]
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	0002      	movs	r2, r0
 8006394:	0f52      	lsrs	r2, r2, #29
 8006396:	000e      	movs	r6, r1
 8006398:	00f6      	lsls	r6, r6, #3
 800639a:	617e      	str	r6, [r7, #20]
 800639c:	697e      	ldr	r6, [r7, #20]
 800639e:	4316      	orrs	r6, r2
 80063a0:	617e      	str	r6, [r7, #20]
 80063a2:	0002      	movs	r2, r0
 80063a4:	00d2      	lsls	r2, r2, #3
 80063a6:	613a      	str	r2, [r7, #16]
 80063a8:	001a      	movs	r2, r3
 80063aa:	603a      	str	r2, [r7, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	6838      	ldr	r0, [r7, #0]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	0002      	movs	r2, r0
 80063b6:	0f52      	lsrs	r2, r2, #29
 80063b8:	000e      	movs	r6, r1
 80063ba:	00f5      	lsls	r5, r6, #3
 80063bc:	4315      	orrs	r5, r2
 80063be:	0002      	movs	r2, r0
 80063c0:	00d4      	lsls	r4, r2, #3
 80063c2:	3307      	adds	r3, #7
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	466a      	mov	r2, sp
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	469d      	mov	sp, r3
 80063ce:	466b      	mov	r3, sp
 80063d0:	3300      	adds	r3, #0
 80063d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80063d4:	246f      	movs	r4, #111	@ 0x6f
 80063d6:	2518      	movs	r5, #24
 80063d8:	1963      	adds	r3, r4, r5
 80063da:	19db      	adds	r3, r3, r7
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	001a      	movs	r2, r3
 80063e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063e4:	2100      	movs	r1, #0
 80063e6:	0018      	movs	r0, r3
 80063e8:	f01e fdb2 	bl	8024f50 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80063ec:	1963      	adds	r3, r4, r5
 80063ee:	19db      	adds	r3, r3, r7
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	1979      	adds	r1, r7, r5
 80063f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063f6:	0018      	movs	r0, r3
 80063f8:	f01e fdd1 	bl	8024f9e <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80063fc:	1963      	adds	r3, r4, r5
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b29a      	uxth	r2, r3
 8006404:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006406:	0011      	movs	r1, r2
 8006408:	0018      	movs	r0, r3
 800640a:	f7fe fb49 	bl	8004aa0 <ESP_Send>
 800640e:	1e03      	subs	r3, r0, #0
 8006410:	d001      	beq.n	8006416 <CWJAP+0xe2>
    return true;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <CWJAP+0xe4>
  }
  else{
    return false;
 8006416:	2300      	movs	r3, #0
 8006418:	46c5      	mov	sp, r8
  }
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b022      	add	sp, #136	@ 0x88
 8006420:	bc80      	pop	{r7}
 8006422:	46b8      	mov	r8, r7
 8006424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006426:	46c0      	nop			@ (mov r8, r8)
 8006428:	200005bd 	.word	0x200005bd
 800642c:	0802cf30 	.word	0x0802cf30
 8006430:	0802cf24 	.word	0x0802cf24
 8006434:	0802a0c8 	.word	0x0802a0c8

08006438 <CWMODE3>:

bool CWMODE3(){
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800643e:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <CWMODE3+0x34>)
 8006440:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0018      	movs	r0, r3
 8006446:	f7f9 fe91 	bl	800016c <strlen>
 800644a:	0003      	movs	r3, r0
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0011      	movs	r1, r2
 8006452:	0018      	movs	r0, r3
 8006454:	f7fe fb24 	bl	8004aa0 <ESP_Send>
 8006458:	1e03      	subs	r3, r0, #0
 800645a:	d001      	beq.n	8006460 <CWMODE3+0x28>
    return true;
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <CWMODE3+0x2a>
  }
  else{
    return false;
 8006460:	2300      	movs	r3, #0
  }
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b002      	add	sp, #8
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	0802a0e0 	.word	0x0802a0e0

08006470 <CWSTATE>:

bool CWSTATE(){
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <CWSTATE+0x34>)
 8006478:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	0018      	movs	r0, r3
 800647e:	f7f9 fe75 	bl	800016c <strlen>
 8006482:	0003      	movs	r3, r0
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	0011      	movs	r1, r2
 800648a:	0018      	movs	r0, r3
 800648c:	f7fe fb08 	bl	8004aa0 <ESP_Send>
 8006490:	1e03      	subs	r3, r0, #0
 8006492:	d001      	beq.n	8006498 <CWSTATE+0x28>
    return true;
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <CWSTATE+0x2a>
  }
  else{
    return false;
 8006498:	2300      	movs	r3, #0
  }
}
 800649a:	0018      	movs	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	b002      	add	sp, #8
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	0802a0f0 	.word	0x0802a0f0

080064a8 <CWSAP>:

bool CWSAP(){
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80064ae:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <CWSAP+0x34>)
 80064b0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0018      	movs	r0, r3
 80064b6:	f7f9 fe59 	bl	800016c <strlen>
 80064ba:	0003      	movs	r3, r0
 80064bc:	b29a      	uxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0011      	movs	r1, r2
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7fe faec 	bl	8004aa0 <ESP_Send>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d001      	beq.n	80064d0 <CWSAP+0x28>
    return true;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <CWSAP+0x2a>
  }
  else{
    return false;
 80064d0:	2300      	movs	r3, #0
  }
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b002      	add	sp, #8
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	0802a100 	.word	0x0802a100

080064e0 <CIPMUX>:

bool CIPMUX(){
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <CIPMUX+0x34>)
 80064e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7f9 fe3d 	bl	800016c <strlen>
 80064f2:	0003      	movs	r3, r0
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	0011      	movs	r1, r2
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7fe fad0 	bl	8004aa0 <ESP_Send>
 8006500:	1e03      	subs	r3, r0, #0
 8006502:	d001      	beq.n	8006508 <CIPMUX+0x28>
    return true;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <CIPMUX+0x2a>
  }
  else{
    return false;
 8006508:	2300      	movs	r3, #0
  }
}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b002      	add	sp, #8
 8006510:	bd80      	pop	{r7, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	0802a124 	.word	0x0802a124

08006518 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800651e:	4b0b      	ldr	r3, [pc, #44]	@ (800654c <WEBSERVER+0x34>)
 8006520:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	0018      	movs	r0, r3
 8006526:	f7f9 fe21 	bl	800016c <strlen>
 800652a:	0003      	movs	r3, r0
 800652c:	b29a      	uxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0011      	movs	r1, r2
 8006532:	0018      	movs	r0, r3
 8006534:	f7fe fab4 	bl	8004aa0 <ESP_Send>
 8006538:	1e03      	subs	r3, r0, #0
 800653a:	d001      	beq.n	8006540 <WEBSERVER+0x28>
    return true;
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006540:	2300      	movs	r3, #0
  }
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b002      	add	sp, #8
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	0802a134 	.word	0x0802a134

08006550 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b085      	sub	sp, #20
 8006554:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8006556:	1cfb      	adds	r3, r7, #3
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 800655c:	4b26      	ldr	r3, [pc, #152]	@ (80065f8 <HTTPCPOST+0xa8>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	1dbc      	adds	r4, r7, #6
 8006562:	1cf9      	adds	r1, r7, #3
 8006564:	2200      	movs	r2, #0
 8006566:	0018      	movs	r0, r3
 8006568:	f7fe fc9e 	bl	8004ea8 <CreateMessage>
 800656c:	0003      	movs	r3, r0
 800656e:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8006570:	4b21      	ldr	r3, [pc, #132]	@ (80065f8 <HTTPCPOST+0xa8>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8006578:	1dbb      	adds	r3, r7, #6
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	4a1f      	ldr	r2, [pc, #124]	@ (80065fc <HTTPCPOST+0xac>)
 800657e:	4920      	ldr	r1, [pc, #128]	@ (8006600 <HTTPCPOST+0xb0>)
 8006580:	4820      	ldr	r0, [pc, #128]	@ (8006604 <HTTPCPOST+0xb4>)
 8006582:	f01e fb7f 	bl	8024c84 <siprintf>
 8006586:	e015      	b.n	80065b4 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006588:	4b1f      	ldr	r3, [pc, #124]	@ (8006608 <HTTPCPOST+0xb8>)
 800658a:	4820      	ldr	r0, [pc, #128]	@ (800660c <HTTPCPOST+0xbc>)
 800658c:	220c      	movs	r2, #12
 800658e:	0019      	movs	r1, r3
 8006590:	f004 fe14 	bl	800b1bc <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8006594:	4a1c      	ldr	r2, [pc, #112]	@ (8006608 <HTTPCPOST+0xb8>)
 8006596:	4b1e      	ldr	r3, [pc, #120]	@ (8006610 <HTTPCPOST+0xc0>)
 8006598:	0011      	movs	r1, r2
 800659a:	0018      	movs	r0, r3
 800659c:	f7fe fc60 	bl	8004e60 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80065a0:	1dbb      	adds	r3, r7, #6
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	4c1a      	ldr	r4, [pc, #104]	@ (8006610 <HTTPCPOST+0xc0>)
 80065a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006614 <HTTPCPOST+0xc4>)
 80065a8:	491b      	ldr	r1, [pc, #108]	@ (8006618 <HTTPCPOST+0xc8>)
 80065aa:	4816      	ldr	r0, [pc, #88]	@ (8006604 <HTTPCPOST+0xb4>)
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	0023      	movs	r3, r4
 80065b0:	f01e fb68 	bl	8024c84 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 80065b4:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <HTTPCPOST+0xb4>)
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7f9 fdd8 	bl	800016c <strlen>
 80065bc:	0002      	movs	r2, r0
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	8818      	ldrh	r0, [r3, #0]
 80065c6:	1cfb      	adds	r3, r7, #3
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	4a14      	ldr	r2, [pc, #80]	@ (800661c <HTTPCPOST+0xcc>)
 80065cc:	4914      	ldr	r1, [pc, #80]	@ (8006620 <HTTPCPOST+0xd0>)
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	0003      	movs	r3, r0
 80065d2:	2003      	movs	r0, #3
 80065d4:	f00c fa74 	bl	8012ac0 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 80065d8:	1d3b      	adds	r3, r7, #4
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	4b09      	ldr	r3, [pc, #36]	@ (8006604 <HTTPCPOST+0xb4>)
 80065de:	0011      	movs	r1, r2
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fe fa5d 	bl	8004aa0 <ESP_Send>
 80065e6:	1e03      	subs	r3, r0, #0
 80065e8:	d001      	beq.n	80065ee <HTTPCPOST+0x9e>
    return true;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 80065ee:	2300      	movs	r3, #0
  }
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b003      	add	sp, #12
 80065f6:	bd90      	pop	{r4, r7, pc}
 80065f8:	200005be 	.word	0x200005be
 80065fc:	0802cf4c 	.word	0x0802cf4c
 8006600:	0802a14c 	.word	0x0802a14c
 8006604:	200005e4 	.word	0x200005e4
 8006608:	20000794 	.word	0x20000794
 800660c:	08080000 	.word	0x08080000
 8006610:	200007a0 	.word	0x200007a0
 8006614:	0802cf88 	.word	0x0802cf88
 8006618:	0802a184 	.word	0x0802a184
 800661c:	0802a1c4 	.word	0x0802a1c4
 8006620:	08029430 	.word	0x08029430

08006624 <SENDDATA>:

bool SENDDATA(){
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af02      	add	r7, sp, #8
  bool result = false;
 800662a:	1dfb      	adds	r3, r7, #7
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8006630:	4b0e      	ldr	r3, [pc, #56]	@ (800666c <SENDDATA+0x48>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	1df9      	adds	r1, r7, #7
 8006636:	2201      	movs	r2, #1
 8006638:	0018      	movs	r0, r3
 800663a:	f7fe fc35 	bl	8004ea8 <CreateMessage>
 800663e:	0003      	movs	r3, r0
 8006640:	001a      	movs	r2, r3
 8006642:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <SENDDATA+0x4c>)
 8006644:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006646:	1dfb      	adds	r3, r7, #7
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	0018      	movs	r0, r3
 800664c:	4b08      	ldr	r3, [pc, #32]	@ (8006670 <SENDDATA+0x4c>)
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	4a08      	ldr	r2, [pc, #32]	@ (8006674 <SENDDATA+0x50>)
 8006652:	4909      	ldr	r1, [pc, #36]	@ (8006678 <SENDDATA+0x54>)
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	0003      	movs	r3, r0
 8006658:	2003      	movs	r0, #3
 800665a:	f00c fa31 	bl	8012ac0 <CreateLine>
  return result;
 800665e:	1dfb      	adds	r3, r7, #7
 8006660:	781b      	ldrb	r3, [r3, #0]
}
 8006662:	0018      	movs	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	b002      	add	sp, #8
 8006668:	bd80      	pop	{r7, pc}
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	200005be 	.word	0x200005be
 8006670:	200005d8 	.word	0x200005d8
 8006674:	0802a220 	.word	0x0802a220
 8006678:	08029430 	.word	0x08029430

0800667c <SLEEP>:

bool SLEEP(){
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006682:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <SLEEP+0x34>)
 8006684:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f7f9 fd6f 	bl	800016c <strlen>
 800668e:	0003      	movs	r3, r0
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	0011      	movs	r1, r2
 8006696:	0018      	movs	r0, r3
 8006698:	f7fe fa02 	bl	8004aa0 <ESP_Send>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	d001      	beq.n	80066a4 <SLEEP+0x28>
    return true;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <SLEEP+0x2a>
  }
  else{
    return false;
 80066a4:	2300      	movs	r3, #0
  }
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b002      	add	sp, #8
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	0802a25c 	.word	0x0802a25c

080066b4 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <CIPSNTPCFG+0x3c>)
 80066bc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7f9 fd53 	bl	800016c <strlen>
 80066c6:	0003      	movs	r3, r0
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	0011      	movs	r1, r2
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7fe f9e6 	bl	8004aa0 <ESP_Send>
 80066d4:	1e03      	subs	r3, r0, #0
 80066d6:	d006      	beq.n	80066e6 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 80066d8:	23fa      	movs	r3, #250	@ 0xfa
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	0018      	movs	r0, r3
 80066de:	f00c ff2f 	bl	8013540 <HAL_Delay>
    return true;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 80066e6:	2300      	movs	r3, #0
  }
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b002      	add	sp, #8
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	0802a26c 	.word	0x0802a26c

080066f4 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 80066fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <CIPSNTPTIME+0x34>)
 80066fc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	0018      	movs	r0, r3
 8006702:	f7f9 fd33 	bl	800016c <strlen>
 8006706:	0003      	movs	r3, r0
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0011      	movs	r1, r2
 800670e:	0018      	movs	r0, r3
 8006710:	f7fe f9c6 	bl	8004aa0 <ESP_Send>
 8006714:	1e03      	subs	r3, r0, #0
 8006716:	d001      	beq.n	800671c <CIPSNTPTIME+0x28>
    return true;
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 800671c:	2300      	movs	r3, #0
  }
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b002      	add	sp, #8
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			@ (mov r8, r8)
 8006728:	0802a2bc 	.word	0x0802a2bc

0800672c <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <CIPSNTPINTV+0x34>)
 8006734:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0018      	movs	r0, r3
 800673a:	f7f9 fd17 	bl	800016c <strlen>
 800673e:	0003      	movs	r3, r0
 8006740:	b29a      	uxth	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f7fe f9aa 	bl	8004aa0 <ESP_Send>
 800674c:	1e03      	subs	r3, r0, #0
 800674e:	d001      	beq.n	8006754 <CIPSNTPINTV+0x28>
    return true;
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006754:	2300      	movs	r3, #0
  }
}
 8006756:	0018      	movs	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	b002      	add	sp, #8
 800675c:	bd80      	pop	{r7, pc}
 800675e:	46c0      	nop			@ (mov r8, r8)
 8006760:	0802a2d0 	.word	0x0802a2d0

08006764 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006764:	b5b0      	push	{r4, r5, r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	0002      	movs	r2, r0
 800676c:	1dfb      	adds	r3, r7, #7
 800676e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006770:	4b6c      	ldr	r3, [pc, #432]	@ (8006924 <DMA_ProcessBuffer+0x1c0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	b29a      	uxth	r2, r3
 8006778:	200e      	movs	r0, #14
 800677a:	183b      	adds	r3, r7, r0
 800677c:	2180      	movs	r1, #128	@ 0x80
 800677e:	0049      	lsls	r1, r1, #1
 8006780:	1a8a      	subs	r2, r1, r2
 8006782:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006784:	230d      	movs	r3, #13
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	2203      	movs	r2, #3
 800678a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 800678c:	183b      	adds	r3, r7, r0
 800678e:	881a      	ldrh	r2, [r3, #0]
 8006790:	2380      	movs	r3, #128	@ 0x80
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	429a      	cmp	r2, r3
 8006796:	d903      	bls.n	80067a0 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006798:	183b      	adds	r3, r7, r0
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	0052      	lsls	r2, r2, #1
 800679e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80067a0:	4b61      	ldr	r3, [pc, #388]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	001a      	movs	r2, r3
 80067a8:	230e      	movs	r3, #14
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d131      	bne.n	8006816 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 80067b2:	4b5e      	ldr	r3, [pc, #376]	@ (800692c <DMA_ProcessBuffer+0x1c8>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b14      	cmp	r3, #20
 80067b8:	d91b      	bls.n	80067f2 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80067ba:	4b5c      	ldr	r3, [pc, #368]	@ (800692c <DMA_ProcessBuffer+0x1c8>)
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80067c0:	4b5b      	ldr	r3, [pc, #364]	@ (8006930 <DMA_ProcessBuffer+0x1cc>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <DMA_ProcessBuffer+0x74>
 80067c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006934 <DMA_ProcessBuffer+0x1d0>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 80067d0:	230d      	movs	r3, #13
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	2207      	movs	r2, #7
 80067d6:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80067d8:	4b55      	ldr	r3, [pc, #340]	@ (8006930 <DMA_ProcessBuffer+0x1cc>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d103      	bne.n	80067e8 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 80067e0:	4b55      	ldr	r3, [pc, #340]	@ (8006938 <DMA_ProcessBuffer+0x1d4>)
 80067e2:	220b      	movs	r2, #11
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e016      	b.n	8006816 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80067e8:	230d      	movs	r3, #13
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	2206      	movs	r2, #6
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e011      	b.n	8006816 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 80067f2:	4b4e      	ldr	r3, [pc, #312]	@ (800692c <DMA_ProcessBuffer+0x1c8>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	3301      	adds	r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	4b4c      	ldr	r3, [pc, #304]	@ (800692c <DMA_ProcessBuffer+0x1c8>)
 80067fc:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 80067fe:	f00c fe95 	bl	801352c <HAL_GetTick>
 8006802:	0003      	movs	r3, r0
 8006804:	33f5      	adds	r3, #245	@ 0xf5
 8006806:	33ff      	adds	r3, #255	@ 0xff
 8006808:	001a      	movs	r2, r3
 800680a:	4b4c      	ldr	r3, [pc, #304]	@ (800693c <DMA_ProcessBuffer+0x1d8>)
 800680c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800680e:	230d      	movs	r3, #13
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2204      	movs	r2, #4
 8006814:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006816:	4b44      	ldr	r3, [pc, #272]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	001a      	movs	r2, r3
 800681e:	210e      	movs	r1, #14
 8006820:	187b      	adds	r3, r7, r1
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	4293      	cmp	r3, r2
 8006826:	d100      	bne.n	800682a <DMA_ProcessBuffer+0xc6>
 8006828:	e075      	b.n	8006916 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 800682a:	4b40      	ldr	r3, [pc, #256]	@ (800692c <DMA_ProcessBuffer+0x1c8>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006830:	4b43      	ldr	r3, [pc, #268]	@ (8006940 <DMA_ProcessBuffer+0x1dc>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b2da      	uxtb	r2, r3
 8006836:	4b3c      	ldr	r3, [pc, #240]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	429a      	cmp	r2, r3
 800683e:	d109      	bne.n	8006854 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006840:	187b      	adds	r3, r7, r1
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	4b3e      	ldr	r3, [pc, #248]	@ (8006940 <DMA_ProcessBuffer+0x1dc>)
 8006848:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800684a:	230d      	movs	r3, #13
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	220a      	movs	r2, #10
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e060      	b.n	8006916 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006854:	4b3a      	ldr	r3, [pc, #232]	@ (8006940 <DMA_ProcessBuffer+0x1dc>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	001a      	movs	r2, r3
 800685c:	210e      	movs	r1, #14
 800685e:	187b      	adds	r3, r7, r1
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006866:	187b      	adds	r3, r7, r1
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b34      	ldr	r3, [pc, #208]	@ (8006940 <DMA_ProcessBuffer+0x1dc>)
 800686e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006870:	230d      	movs	r3, #13
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	220a      	movs	r2, #10
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e04d      	b.n	8006916 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 800687a:	4b2b      	ldr	r3, [pc, #172]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	001a      	movs	r2, r3
 8006882:	210e      	movs	r1, #14
 8006884:	187b      	adds	r3, r7, r1
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	4293      	cmp	r3, r2
 800688a:	d917      	bls.n	80068bc <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800688c:	4b26      	ldr	r3, [pc, #152]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	001a      	movs	r2, r3
 8006894:	4b2b      	ldr	r3, [pc, #172]	@ (8006944 <DMA_ProcessBuffer+0x1e0>)
 8006896:	18d0      	adds	r0, r2, r3
 8006898:	4b23      	ldr	r3, [pc, #140]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	001a      	movs	r2, r3
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	b299      	uxth	r1, r3
 80068a8:	230d      	movs	r3, #13
 80068aa:	18fc      	adds	r4, r7, r3
 80068ac:	1dfb      	adds	r3, r7, #7
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	001a      	movs	r2, r3
 80068b2:	f7ff fa71 	bl	8005d98 <ParseBuffer>
 80068b6:	0003      	movs	r3, r0
 80068b8:	7023      	strb	r3, [r4, #0]
 80068ba:	e026      	b.n	800690a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80068bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	001a      	movs	r2, r3
 80068c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006944 <DMA_ProcessBuffer+0x1e0>)
 80068c6:	18d0      	adds	r0, r2, r3
 80068c8:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	001a      	movs	r2, r3
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	b299      	uxth	r1, r3
 80068d8:	250d      	movs	r5, #13
 80068da:	197c      	adds	r4, r7, r5
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	001a      	movs	r2, r3
 80068e2:	f7ff fa59 	bl	8005d98 <ParseBuffer>
 80068e6:	0003      	movs	r3, r0
 80068e8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80068ea:	210e      	movs	r1, #14
 80068ec:	187b      	adds	r3, r7, r1
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80068f4:	197c      	adds	r4, r7, r5
 80068f6:	1dfb      	adds	r3, r7, #7
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	187b      	adds	r3, r7, r1
 80068fc:	8819      	ldrh	r1, [r3, #0]
 80068fe:	4b11      	ldr	r3, [pc, #68]	@ (8006944 <DMA_ProcessBuffer+0x1e0>)
 8006900:	0018      	movs	r0, r3
 8006902:	f7ff fa49 	bl	8005d98 <ParseBuffer>
 8006906:	0003      	movs	r3, r0
 8006908:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800690a:	230e      	movs	r3, #14
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <DMA_ProcessBuffer+0x1c4>)
 8006914:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006916:	230d      	movs	r3, #13
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	781b      	ldrb	r3, [r3, #0]
}
 800691c:	0018      	movs	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	b004      	add	sp, #16
 8006922:	bdb0      	pop	{r4, r5, r7, pc}
 8006924:	2000217c 	.word	0x2000217c
 8006928:	200007b9 	.word	0x200007b9
 800692c:	2000068c 	.word	0x2000068c
 8006930:	2000068e 	.word	0x2000068e
 8006934:	20000001 	.word	0x20000001
 8006938:	2000002c 	.word	0x2000002c
 800693c:	20000684 	.word	0x20000684
 8006940:	200007ba 	.word	0x200007ba
 8006944:	200004b8 	.word	0x200004b8

08006948 <clearDMABuffer>:

void clearDMABuffer(){
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 800694c:	2380      	movs	r3, #128	@ 0x80
 800694e:	005a      	lsls	r2, r3, #1
 8006950:	4b03      	ldr	r3, [pc, #12]	@ (8006960 <clearDMABuffer+0x18>)
 8006952:	2100      	movs	r1, #0
 8006954:	0018      	movs	r0, r3
 8006956:	f01e fafb 	bl	8024f50 <memset>
}
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	200004b8 	.word	0x200004b8

08006964 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	0002      	movs	r2, r0
 800696c:	1dfb      	adds	r3, r7, #7
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	1c0a      	adds	r2, r1, #0
 8006974:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006976:	210f      	movs	r1, #15
 8006978:	187b      	adds	r3, r7, r1
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800697e:	1dbb      	adds	r3, r7, #6
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006986:	187b      	adds	r3, r7, r1
 8006988:	1dfa      	adds	r2, r7, #7
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	4251      	negs	r1, r2
 800698e:	414a      	adcs	r2, r1
 8006990:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006992:	1dbb      	adds	r3, r7, #6
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d107      	bne.n	80069aa <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800699a:	230f      	movs	r3, #15
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	1dfa      	adds	r2, r7, #7
 80069a0:	7812      	ldrb	r2, [r2, #0]
 80069a2:	3a02      	subs	r2, #2
 80069a4:	4251      	negs	r1, r2
 80069a6:	414a      	adcs	r2, r1
 80069a8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80069aa:	1dbb      	adds	r3, r7, #6
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d107      	bne.n	80069c2 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80069b2:	230f      	movs	r3, #15
 80069b4:	18fb      	adds	r3, r7, r3
 80069b6:	1dfa      	adds	r2, r7, #7
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	3a05      	subs	r2, #5
 80069bc:	4251      	negs	r1, r2
 80069be:	414a      	adcs	r2, r1
 80069c0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80069c2:	1dbb      	adds	r3, r7, #6
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d107      	bne.n	80069da <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80069ca:	230f      	movs	r3, #15
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	1dfa      	adds	r2, r7, #7
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	3a0b      	subs	r2, #11
 80069d4:	4251      	negs	r1, r2
 80069d6:	414a      	adcs	r2, r1
 80069d8:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80069da:	230f      	movs	r3, #15
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	781b      	ldrb	r3, [r3, #0]
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b004      	add	sp, #16
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <AT_Send>:

bool AT_Send(AT_Commands state){
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	0002      	movs	r2, r0
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80069f4:	230f      	movs	r3, #15
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
  switch (state){
 80069fc:	1dfb      	adds	r3, r7, #7
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b14      	cmp	r3, #20
 8006a02:	d900      	bls.n	8006a06 <AT_Send+0x1e>
 8006a04:	e19e      	b.n	8006d44 <AT_Send+0x35c>
 8006a06:	009a      	lsls	r2, r3, #2
 8006a08:	4bd2      	ldr	r3, [pc, #840]	@ (8006d54 <AT_Send+0x36c>)
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006a10:	4bd1      	ldr	r3, [pc, #836]	@ (8006d58 <AT_Send+0x370>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	0018      	movs	r0, r3
 8006a16:	f00b fffd 	bl	8012a14 <TimestampIsReached>
 8006a1a:	1e03      	subs	r3, r0, #0
 8006a1c:	d100      	bne.n	8006a20 <AT_Send+0x38>
 8006a1e:	e190      	b.n	8006d42 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006a20:	4ace      	ldr	r2, [pc, #824]	@ (8006d5c <AT_Send+0x374>)
 8006a22:	4bcf      	ldr	r3, [pc, #828]	@ (8006d60 <AT_Send+0x378>)
 8006a24:	0019      	movs	r1, r3
 8006a26:	2003      	movs	r0, #3
 8006a28:	f00c f84a 	bl	8012ac0 <CreateLine>
    ATCommandSend = PollAwake();
 8006a2c:	230f      	movs	r3, #15
 8006a2e:	18fc      	adds	r4, r7, r3
 8006a30:	f7ff fba0 	bl	8006174 <PollAwake>
 8006a34:	0003      	movs	r3, r0
 8006a36:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006a38:	f00c fd78 	bl	801352c <HAL_GetTick>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	3332      	adds	r3, #50	@ 0x32
 8006a40:	001a      	movs	r2, r3
 8006a42:	4bc5      	ldr	r3, [pc, #788]	@ (8006d58 <AT_Send+0x370>)
 8006a44:	601a      	str	r2, [r3, #0]
  }
  break;
 8006a46:	e17c      	b.n	8006d42 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006a48:	4ac6      	ldr	r2, [pc, #792]	@ (8006d64 <AT_Send+0x37c>)
 8006a4a:	4bc5      	ldr	r3, [pc, #788]	@ (8006d60 <AT_Send+0x378>)
 8006a4c:	0019      	movs	r1, r3
 8006a4e:	2003      	movs	r0, #3
 8006a50:	f00c f836 	bl	8012ac0 <CreateLine>
    ATCommandSend = RFPower();
 8006a54:	230f      	movs	r3, #15
 8006a56:	18fc      	adds	r4, r7, r3
 8006a58:	f7ff fba8 	bl	80061ac <RFPower>
 8006a5c:	0003      	movs	r3, r0
 8006a5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006a60:	f00c fd64 	bl	801352c <HAL_GetTick>
 8006a64:	0003      	movs	r3, r0
 8006a66:	330a      	adds	r3, #10
 8006a68:	001a      	movs	r2, r3
 8006a6a:	4bbb      	ldr	r3, [pc, #748]	@ (8006d58 <AT_Send+0x370>)
 8006a6c:	601a      	str	r2, [r3, #0]
    break;
 8006a6e:	e169      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006a70:	4abd      	ldr	r2, [pc, #756]	@ (8006d68 <AT_Send+0x380>)
 8006a72:	4bbb      	ldr	r3, [pc, #748]	@ (8006d60 <AT_Send+0x378>)
 8006a74:	0019      	movs	r1, r3
 8006a76:	2003      	movs	r0, #3
 8006a78:	f00c f822 	bl	8012ac0 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006a7c:	230f      	movs	r3, #15
 8006a7e:	18fc      	adds	r4, r7, r3
 8006a80:	f7ff fbb0 	bl	80061e4 <CheckRFPower>
 8006a84:	0003      	movs	r3, r0
 8006a86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006a88:	f00c fd50 	bl	801352c <HAL_GetTick>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	330a      	adds	r3, #10
 8006a90:	001a      	movs	r2, r3
 8006a92:	4bb1      	ldr	r3, [pc, #708]	@ (8006d58 <AT_Send+0x370>)
 8006a94:	601a      	str	r2, [r3, #0]
    break;
 8006a96:	e155      	b.n	8006d44 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006a98:	4ab4      	ldr	r2, [pc, #720]	@ (8006d6c <AT_Send+0x384>)
 8006a9a:	4bb1      	ldr	r3, [pc, #708]	@ (8006d60 <AT_Send+0x378>)
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	2003      	movs	r0, #3
 8006aa0:	f00c f80e 	bl	8012ac0 <CreateLine>
    ATCommandSend = ATRestore();
 8006aa4:	230f      	movs	r3, #15
 8006aa6:	18fc      	adds	r4, r7, r3
 8006aa8:	f7ff fbb8 	bl	800621c <ATRestore>
 8006aac:	0003      	movs	r3, r0
 8006aae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006ab0:	f00c fd3c 	bl	801352c <HAL_GetTick>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	3332      	adds	r3, #50	@ 0x32
 8006ab8:	001a      	movs	r2, r3
 8006aba:	4ba7      	ldr	r3, [pc, #668]	@ (8006d58 <AT_Send+0x370>)
 8006abc:	601a      	str	r2, [r3, #0]
    break;
 8006abe:	e141      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006ac0:	4aab      	ldr	r2, [pc, #684]	@ (8006d70 <AT_Send+0x388>)
 8006ac2:	4ba7      	ldr	r3, [pc, #668]	@ (8006d60 <AT_Send+0x378>)
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	2003      	movs	r0, #3
 8006ac8:	f00b fffa 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWINIT();
 8006acc:	230f      	movs	r3, #15
 8006ace:	18fc      	adds	r4, r7, r3
 8006ad0:	f7ff fbc0 	bl	8006254 <CWINIT>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006ad8:	f00c fd28 	bl	801352c <HAL_GetTick>
 8006adc:	0003      	movs	r3, r0
 8006ade:	33f5      	adds	r3, #245	@ 0xf5
 8006ae0:	33ff      	adds	r3, #255	@ 0xff
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8006d58 <AT_Send+0x370>)
 8006ae6:	601a      	str	r2, [r3, #0]
    break;
 8006ae8:	e12c      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006aea:	4aa2      	ldr	r2, [pc, #648]	@ (8006d74 <AT_Send+0x38c>)
 8006aec:	4b9c      	ldr	r3, [pc, #624]	@ (8006d60 <AT_Send+0x378>)
 8006aee:	0019      	movs	r1, r3
 8006af0:	2003      	movs	r0, #3
 8006af2:	f00b ffe5 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWSTATE();
 8006af6:	230f      	movs	r3, #15
 8006af8:	18fc      	adds	r4, r7, r3
 8006afa:	f7ff fcb9 	bl	8006470 <CWSTATE>
 8006afe:	0003      	movs	r3, r0
 8006b00:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006b02:	f00c fd13 	bl	801352c <HAL_GetTick>
 8006b06:	0003      	movs	r3, r0
 8006b08:	33f5      	adds	r3, #245	@ 0xf5
 8006b0a:	33ff      	adds	r3, #255	@ 0xff
 8006b0c:	001a      	movs	r2, r3
 8006b0e:	4b92      	ldr	r3, [pc, #584]	@ (8006d58 <AT_Send+0x370>)
 8006b10:	601a      	str	r2, [r3, #0]
    break;
 8006b12:	e117      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006b14:	4a98      	ldr	r2, [pc, #608]	@ (8006d78 <AT_Send+0x390>)
 8006b16:	4b92      	ldr	r3, [pc, #584]	@ (8006d60 <AT_Send+0x378>)
 8006b18:	0019      	movs	r1, r3
 8006b1a:	2003      	movs	r0, #3
 8006b1c:	f00b ffd0 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWMODE1();
 8006b20:	230f      	movs	r3, #15
 8006b22:	18fc      	adds	r4, r7, r3
 8006b24:	f7ff fbb2 	bl	800628c <CWMODE1>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006b2c:	f00c fcfe 	bl	801352c <HAL_GetTick>
 8006b30:	0003      	movs	r3, r0
 8006b32:	330a      	adds	r3, #10
 8006b34:	001a      	movs	r2, r3
 8006b36:	4b88      	ldr	r3, [pc, #544]	@ (8006d58 <AT_Send+0x370>)
 8006b38:	601a      	str	r2, [r3, #0]
    break;
 8006b3a:	e103      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8006d78 <AT_Send+0x390>)
 8006b3e:	4b88      	ldr	r3, [pc, #544]	@ (8006d60 <AT_Send+0x378>)
 8006b40:	0019      	movs	r1, r3
 8006b42:	2003      	movs	r0, #3
 8006b44:	f00b ffbc 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWMODE2();
 8006b48:	230f      	movs	r3, #15
 8006b4a:	18fc      	adds	r4, r7, r3
 8006b4c:	f7ff fbba 	bl	80062c4 <CWMODE2>
 8006b50:	0003      	movs	r3, r0
 8006b52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006b54:	f00c fcea 	bl	801352c <HAL_GetTick>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	330a      	adds	r3, #10
 8006b5c:	001a      	movs	r2, r3
 8006b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d58 <AT_Send+0x370>)
 8006b60:	601a      	str	r2, [r3, #0]
    break;
 8006b62:	e0ef      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006b64:	4a85      	ldr	r2, [pc, #532]	@ (8006d7c <AT_Send+0x394>)
 8006b66:	4b7e      	ldr	r3, [pc, #504]	@ (8006d60 <AT_Send+0x378>)
 8006b68:	0019      	movs	r1, r3
 8006b6a:	2003      	movs	r0, #3
 8006b6c:	f00b ffa8 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006b70:	230f      	movs	r3, #15
 8006b72:	18fc      	adds	r4, r7, r3
 8006b74:	f7ff fbc2 	bl	80062fc <CWAUTOCONN>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006b7c:	f00c fcd6 	bl	801352c <HAL_GetTick>
 8006b80:	0003      	movs	r3, r0
 8006b82:	330a      	adds	r3, #10
 8006b84:	001a      	movs	r2, r3
 8006b86:	4b74      	ldr	r3, [pc, #464]	@ (8006d58 <AT_Send+0x370>)
 8006b88:	601a      	str	r2, [r3, #0]
    break;
 8006b8a:	e0db      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006b8c:	4a7c      	ldr	r2, [pc, #496]	@ (8006d80 <AT_Send+0x398>)
 8006b8e:	4b74      	ldr	r3, [pc, #464]	@ (8006d60 <AT_Send+0x378>)
 8006b90:	0019      	movs	r1, r3
 8006b92:	2003      	movs	r0, #3
 8006b94:	f00b ff94 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWJAP();
 8006b98:	230f      	movs	r3, #15
 8006b9a:	18fc      	adds	r4, r7, r3
 8006b9c:	f7ff fbca 	bl	8006334 <CWJAP>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006ba4:	f00c fcc2 	bl	801352c <HAL_GetTick>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	3332      	adds	r3, #50	@ 0x32
 8006bac:	001a      	movs	r2, r3
 8006bae:	4b6a      	ldr	r3, [pc, #424]	@ (8006d58 <AT_Send+0x370>)
 8006bb0:	601a      	str	r2, [r3, #0]
    break;
 8006bb2:	e0c7      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006bb4:	4a73      	ldr	r2, [pc, #460]	@ (8006d84 <AT_Send+0x39c>)
 8006bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d60 <AT_Send+0x378>)
 8006bb8:	0019      	movs	r1, r3
 8006bba:	2003      	movs	r0, #3
 8006bbc:	f00b ff80 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWMODE3();
 8006bc0:	230f      	movs	r3, #15
 8006bc2:	18fc      	adds	r4, r7, r3
 8006bc4:	f7ff fc38 	bl	8006438 <CWMODE3>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006bcc:	f00c fcae 	bl	801352c <HAL_GetTick>
 8006bd0:	0003      	movs	r3, r0
 8006bd2:	330a      	adds	r3, #10
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	4b60      	ldr	r3, [pc, #384]	@ (8006d58 <AT_Send+0x370>)
 8006bd8:	601a      	str	r2, [r3, #0]
    break;
 8006bda:	e0b3      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8006d88 <AT_Send+0x3a0>)
 8006bde:	4b60      	ldr	r3, [pc, #384]	@ (8006d60 <AT_Send+0x378>)
 8006be0:	0019      	movs	r1, r3
 8006be2:	2003      	movs	r0, #3
 8006be4:	f00b ff6c 	bl	8012ac0 <CreateLine>
    ATCommandSend = CWSAP();
 8006be8:	230f      	movs	r3, #15
 8006bea:	18fc      	adds	r4, r7, r3
 8006bec:	f7ff fc5c 	bl	80064a8 <CWSAP>
 8006bf0:	0003      	movs	r3, r0
 8006bf2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006bf4:	f00c fc9a 	bl	801352c <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	330a      	adds	r3, #10
 8006bfc:	001a      	movs	r2, r3
 8006bfe:	4b56      	ldr	r3, [pc, #344]	@ (8006d58 <AT_Send+0x370>)
 8006c00:	601a      	str	r2, [r3, #0]
    break;
 8006c02:	e09f      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8006c04:	4a61      	ldr	r2, [pc, #388]	@ (8006d8c <AT_Send+0x3a4>)
 8006c06:	4b56      	ldr	r3, [pc, #344]	@ (8006d60 <AT_Send+0x378>)
 8006c08:	0019      	movs	r1, r3
 8006c0a:	2003      	movs	r0, #3
 8006c0c:	f00b ff58 	bl	8012ac0 <CreateLine>
    ATCommandSend = CIPMUX();
 8006c10:	230f      	movs	r3, #15
 8006c12:	18fc      	adds	r4, r7, r3
 8006c14:	f7ff fc64 	bl	80064e0 <CIPMUX>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006c1c:	f00c fc86 	bl	801352c <HAL_GetTick>
 8006c20:	0003      	movs	r3, r0
 8006c22:	330a      	adds	r3, #10
 8006c24:	001a      	movs	r2, r3
 8006c26:	4b4c      	ldr	r3, [pc, #304]	@ (8006d58 <AT_Send+0x370>)
 8006c28:	601a      	str	r2, [r3, #0]
    break;
 8006c2a:	e08b      	b.n	8006d44 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8006c2c:	4a58      	ldr	r2, [pc, #352]	@ (8006d90 <AT_Send+0x3a8>)
 8006c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8006d60 <AT_Send+0x378>)
 8006c30:	0019      	movs	r1, r3
 8006c32:	2003      	movs	r0, #3
 8006c34:	f00b ff44 	bl	8012ac0 <CreateLine>
    ATCommandSend = WEBSERVER();
 8006c38:	230f      	movs	r3, #15
 8006c3a:	18fc      	adds	r4, r7, r3
 8006c3c:	f7ff fc6c 	bl	8006518 <WEBSERVER>
 8006c40:	0003      	movs	r3, r0
 8006c42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006c44:	f00c fc72 	bl	801352c <HAL_GetTick>
 8006c48:	0003      	movs	r3, r0
 8006c4a:	330a      	adds	r3, #10
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	4b42      	ldr	r3, [pc, #264]	@ (8006d58 <AT_Send+0x370>)
 8006c50:	601a      	str	r2, [r3, #0]
    break;
 8006c52:	e077      	b.n	8006d44 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8006c54:	230f      	movs	r3, #15
 8006c56:	18fc      	adds	r4, r7, r3
 8006c58:	f7ff fc7a 	bl	8006550 <HTTPCPOST>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006c60:	f00c fc64 	bl	801352c <HAL_GetTick>
 8006c64:	0003      	movs	r3, r0
 8006c66:	33f5      	adds	r3, #245	@ 0xf5
 8006c68:	33ff      	adds	r3, #255	@ 0xff
 8006c6a:	001a      	movs	r2, r3
 8006c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d58 <AT_Send+0x370>)
 8006c6e:	601a      	str	r2, [r3, #0]
    break;
 8006c70:	e068      	b.n	8006d44 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8006c72:	4a48      	ldr	r2, [pc, #288]	@ (8006d94 <AT_Send+0x3ac>)
 8006c74:	4b3a      	ldr	r3, [pc, #232]	@ (8006d60 <AT_Send+0x378>)
 8006c76:	0019      	movs	r1, r3
 8006c78:	2003      	movs	r0, #3
 8006c7a:	f00b ff21 	bl	8012ac0 <CreateLine>
    ATCommandSend = SENDDATA();
 8006c7e:	230f      	movs	r3, #15
 8006c80:	18fc      	adds	r4, r7, r3
 8006c82:	f7ff fccf 	bl	8006624 <SENDDATA>
 8006c86:	0003      	movs	r3, r0
 8006c88:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8006c8a:	f00c fc4f 	bl	801352c <HAL_GetTick>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	33f5      	adds	r3, #245	@ 0xf5
 8006c92:	33ff      	adds	r3, #255	@ 0xff
 8006c94:	001a      	movs	r2, r3
 8006c96:	4b30      	ldr	r3, [pc, #192]	@ (8006d58 <AT_Send+0x370>)
 8006c98:	601a      	str	r2, [r3, #0]
    break;
 8006c9a:	e053      	b.n	8006d44 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8006c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d98 <AT_Send+0x3b0>)
 8006c9e:	4b30      	ldr	r3, [pc, #192]	@ (8006d60 <AT_Send+0x378>)
 8006ca0:	0019      	movs	r1, r3
 8006ca2:	2003      	movs	r0, #3
 8006ca4:	f00b ff0c 	bl	8012ac0 <CreateLine>
    ATCommandSend = SLEEP();
 8006ca8:	230f      	movs	r3, #15
 8006caa:	18fc      	adds	r4, r7, r3
 8006cac:	f7ff fce6 	bl	800667c <SLEEP>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006cb4:	f00c fc3a 	bl	801352c <HAL_GetTick>
 8006cb8:	0003      	movs	r3, r0
 8006cba:	330a      	adds	r3, #10
 8006cbc:	001a      	movs	r2, r3
 8006cbe:	4b26      	ldr	r3, [pc, #152]	@ (8006d58 <AT_Send+0x370>)
 8006cc0:	601a      	str	r2, [r3, #0]
    break;
 8006cc2:	e03f      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8006cc4:	4a35      	ldr	r2, [pc, #212]	@ (8006d9c <AT_Send+0x3b4>)
 8006cc6:	4b26      	ldr	r3, [pc, #152]	@ (8006d60 <AT_Send+0x378>)
 8006cc8:	0019      	movs	r1, r3
 8006cca:	2003      	movs	r0, #3
 8006ccc:	f00b fef8 	bl	8012ac0 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8006cd0:	230f      	movs	r3, #15
 8006cd2:	18fc      	adds	r4, r7, r3
 8006cd4:	f7ff fcee 	bl	80066b4 <CIPSNTPCFG>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006cdc:	f00c fc26 	bl	801352c <HAL_GetTick>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	330a      	adds	r3, #10
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d58 <AT_Send+0x370>)
 8006ce8:	601a      	str	r2, [r3, #0]
    break;
 8006cea:	e02b      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8006cec:	4a2c      	ldr	r2, [pc, #176]	@ (8006da0 <AT_Send+0x3b8>)
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <AT_Send+0x378>)
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	2003      	movs	r0, #3
 8006cf4:	f00b fee4 	bl	8012ac0 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8006cf8:	230f      	movs	r3, #15
 8006cfa:	18fc      	adds	r4, r7, r3
 8006cfc:	f7ff fcfa 	bl	80066f4 <CIPSNTPTIME>
 8006d00:	0003      	movs	r3, r0
 8006d02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006d04:	f00c fc12 	bl	801352c <HAL_GetTick>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	33f5      	adds	r3, #245	@ 0xf5
 8006d0c:	33ff      	adds	r3, #255	@ 0xff
 8006d0e:	001a      	movs	r2, r3
 8006d10:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <AT_Send+0x370>)
 8006d12:	601a      	str	r2, [r3, #0]
    break;
 8006d14:	e016      	b.n	8006d44 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8006d16:	4a23      	ldr	r2, [pc, #140]	@ (8006da4 <AT_Send+0x3bc>)
 8006d18:	4b11      	ldr	r3, [pc, #68]	@ (8006d60 <AT_Send+0x378>)
 8006d1a:	0019      	movs	r1, r3
 8006d1c:	2003      	movs	r0, #3
 8006d1e:	f00b fecf 	bl	8012ac0 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8006d22:	230f      	movs	r3, #15
 8006d24:	18fc      	adds	r4, r7, r3
 8006d26:	f7ff fd01 	bl	800672c <CIPSNTPINTV>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006d2e:	f00c fbfd 	bl	801352c <HAL_GetTick>
 8006d32:	0003      	movs	r3, r0
 8006d34:	330a      	adds	r3, #10
 8006d36:	001a      	movs	r2, r3
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <AT_Send+0x370>)
 8006d3a:	601a      	str	r2, [r3, #0]
    break;
 8006d3c:	e002      	b.n	8006d44 <AT_Send+0x35c>

  case AT_END:
    break;
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	e000      	b.n	8006d44 <AT_Send+0x35c>
  break;
 8006d42:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8006d44:	230f      	movs	r3, #15
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	781b      	ldrb	r3, [r3, #0]
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b005      	add	sp, #20
 8006d50:	bd90      	pop	{r4, r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	0802cfe4 	.word	0x0802cfe4
 8006d58:	20000684 	.word	0x20000684
 8006d5c:	0802a2e8 	.word	0x0802a2e8
 8006d60:	08029430 	.word	0x08029430
 8006d64:	0802a2f4 	.word	0x0802a2f4
 8006d68:	0802a308 	.word	0x0802a308
 8006d6c:	0802a31c 	.word	0x0802a31c
 8006d70:	0802a32c 	.word	0x0802a32c
 8006d74:	0802a340 	.word	0x0802a340
 8006d78:	0802a358 	.word	0x0802a358
 8006d7c:	0802a370 	.word	0x0802a370
 8006d80:	0802a388 	.word	0x0802a388
 8006d84:	0802a39c 	.word	0x0802a39c
 8006d88:	0802a3b8 	.word	0x0802a3b8
 8006d8c:	0802a3d4 	.word	0x0802a3d4
 8006d90:	0802a3f0 	.word	0x0802a3f0
 8006d94:	0802a40c 	.word	0x0802a40c
 8006d98:	0802a41c 	.word	0x0802a41c
 8006d9c:	0802a440 	.word	0x0802a440
 8006da0:	0802a454 	.word	0x0802a454
 8006da4:	0802a46c 	.word	0x0802a46c

08006da8 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8006dae:	1dfb      	adds	r3, r7, #7
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8006db4:	4b7d      	ldr	r3, [pc, #500]	@ (8006fac <ESP_WakeTest+0x204>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b05      	cmp	r3, #5
 8006dba:	d900      	bls.n	8006dbe <ESP_WakeTest+0x16>
 8006dbc:	e0d9      	b.n	8006f72 <ESP_WakeTest+0x1ca>
 8006dbe:	009a      	lsls	r2, r3, #2
 8006dc0:	4b7b      	ldr	r3, [pc, #492]	@ (8006fb0 <ESP_WakeTest+0x208>)
 8006dc2:	18d3      	adds	r3, r2, r3
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8006dc8:	4b7a      	ldr	r3, [pc, #488]	@ (8006fb4 <ESP_WakeTest+0x20c>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	4053      	eors	r3, r2
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d036      	beq.n	8006e44 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006dd6:	2380      	movs	r3, #128	@ 0x80
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	4877      	ldr	r0, [pc, #476]	@ (8006fb8 <ESP_WakeTest+0x210>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	0019      	movs	r1, r3
 8006de0:	f00d fe35 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8006de4:	2032      	movs	r0, #50	@ 0x32
 8006de6:	f00c fbab 	bl	8013540 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	4872      	ldr	r0, [pc, #456]	@ (8006fb8 <ESP_WakeTest+0x210>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	0019      	movs	r1, r3
 8006df4:	f00d fe2b 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006df8:	200a      	movs	r0, #10
 8006dfa:	f00c fba1 	bl	8013540 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8006fbc <ESP_WakeTest+0x214>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	2101      	movs	r1, #1
 8006e04:	0018      	movs	r0, r3
 8006e06:	f00d fe22 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006e0a:	200a      	movs	r0, #10
 8006e0c:	f00c fb98 	bl	8013540 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006e10:	4b6a      	ldr	r3, [pc, #424]	@ (8006fbc <ESP_WakeTest+0x214>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	2102      	movs	r1, #2
 8006e16:	0018      	movs	r0, r3
 8006e18:	f00d fe19 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006e1c:	200a      	movs	r0, #10
 8006e1e:	f00c fb8f 	bl	8013540 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006e22:	4b66      	ldr	r3, [pc, #408]	@ (8006fbc <ESP_WakeTest+0x214>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	2101      	movs	r1, #1
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f00d fe10 	bl	8014a4e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006e2e:	f00c fb7d 	bl	801352c <HAL_GetTick>
 8006e32:	0003      	movs	r3, r0
 8006e34:	22af      	movs	r2, #175	@ 0xaf
 8006e36:	0092      	lsls	r2, r2, #2
 8006e38:	189a      	adds	r2, r3, r2
 8006e3a:	4b61      	ldr	r3, [pc, #388]	@ (8006fc0 <ESP_WakeTest+0x218>)
 8006e3c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8006fb4 <ESP_WakeTest+0x20c>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8006e44:	2380      	movs	r3, #128	@ 0x80
 8006e46:	005a      	lsls	r2, r3, #1
 8006e48:	4b5e      	ldr	r3, [pc, #376]	@ (8006fc4 <ESP_WakeTest+0x21c>)
 8006e4a:	0011      	movs	r1, r2
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f7fd fe59 	bl	8004b04 <ESP_Receive>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d100      	bne.n	8006e58 <ESP_WakeTest+0xb0>
 8006e56:	e09f      	b.n	8006f98 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8006e58:	4b54      	ldr	r3, [pc, #336]	@ (8006fac <ESP_WakeTest+0x204>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006e5e:	e09b      	b.n	8006f98 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8006e60:	4b57      	ldr	r3, [pc, #348]	@ (8006fc0 <ESP_WakeTest+0x218>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f00b fdd5 	bl	8012a14 <TimestampIsReached>
 8006e6a:	1e03      	subs	r3, r0, #0
 8006e6c:	d100      	bne.n	8006e70 <ESP_WakeTest+0xc8>
 8006e6e:	e095      	b.n	8006f9c <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8006e70:	4b55      	ldr	r3, [pc, #340]	@ (8006fc8 <ESP_WakeTest+0x220>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	1dfc      	adds	r4, r7, #7
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7ff fdb6 	bl	80069e8 <AT_Send>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8006e80:	1dfb      	adds	r3, r7, #7
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d100      	bne.n	8006e8a <ESP_WakeTest+0xe2>
 8006e88:	e088      	b.n	8006f9c <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8006e8a:	4b48      	ldr	r3, [pc, #288]	@ (8006fac <ESP_WakeTest+0x204>)
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006e90:	e084      	b.n	8006f9c <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8006e92:	4b4b      	ldr	r3, [pc, #300]	@ (8006fc0 <ESP_WakeTest+0x218>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f00b fdbc 	bl	8012a14 <TimestampIsReached>
 8006e9c:	1e03      	subs	r3, r0, #0
 8006e9e:	d100      	bne.n	8006ea2 <ESP_WakeTest+0xfa>
 8006ea0:	e07e      	b.n	8006fa0 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8006ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8006fcc <ESP_WakeTest+0x224>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff fc5c 	bl	8006764 <DMA_ProcessBuffer>
 8006eac:	0003      	movs	r3, r0
 8006eae:	001a      	movs	r2, r3
 8006eb0:	4b47      	ldr	r3, [pc, #284]	@ (8006fd0 <ESP_WakeTest+0x228>)
 8006eb2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8006eb4:	4b46      	ldr	r3, [pc, #280]	@ (8006fd0 <ESP_WakeTest+0x228>)
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	4b44      	ldr	r3, [pc, #272]	@ (8006fcc <ESP_WakeTest+0x224>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	1dbc      	adds	r4, r7, #6
 8006ebe:	0019      	movs	r1, r3
 8006ec0:	0010      	movs	r0, r2
 8006ec2:	f7ff fd4f 	bl	8006964 <ATCompare>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8006eca:	4b41      	ldr	r3, [pc, #260]	@ (8006fd0 <ESP_WakeTest+0x228>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d102      	bne.n	8006ed8 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8006ed2:	4b36      	ldr	r3, [pc, #216]	@ (8006fac <ESP_WakeTest+0x204>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8006ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd0 <ESP_WakeTest+0x228>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b07      	cmp	r3, #7
 8006ede:	d104      	bne.n	8006eea <ESP_WakeTest+0x142>
          StartProg();
 8006ee0:	f7fe ff28 	bl	8005d34 <StartProg>
          TestState = ESP_TEST_BOOT;
 8006ee4:	4b31      	ldr	r3, [pc, #196]	@ (8006fac <ESP_WakeTest+0x204>)
 8006ee6:	2205      	movs	r2, #5
 8006ee8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <ESP_WakeTest+0x228>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d109      	bne.n	8006f06 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8006ef2:	f00c fb1b 	bl	801352c <HAL_GetTick>
 8006ef6:	0003      	movs	r3, r0
 8006ef8:	3332      	adds	r3, #50	@ 0x32
 8006efa:	001a      	movs	r2, r3
 8006efc:	4b30      	ldr	r3, [pc, #192]	@ (8006fc0 <ESP_WakeTest+0x218>)
 8006efe:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8006f00:	4b2a      	ldr	r3, [pc, #168]	@ (8006fac <ESP_WakeTest+0x204>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8006f06:	1dbb      	adds	r3, r7, #6
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d048      	beq.n	8006fa0 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 8006f0e:	4b27      	ldr	r3, [pc, #156]	@ (8006fac <ESP_WakeTest+0x204>)
 8006f10:	2203      	movs	r2, #3
 8006f12:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006f14:	e044      	b.n	8006fa0 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8006f16:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd4 <ESP_WakeTest+0x22c>)
 8006f18:	22fa      	movs	r2, #250	@ 0xfa
 8006f1a:	0112      	lsls	r2, r2, #4
 8006f1c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8006f1e:	f00a fac3 	bl	80114a8 <Calculate_LED_ON>
 8006f22:	0003      	movs	r3, r0
 8006f24:	001a      	movs	r2, r3
 8006f26:	4b2b      	ldr	r3, [pc, #172]	@ (8006fd4 <ESP_WakeTest+0x22c>)
 8006f28:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd4 <ESP_WakeTest+0x22c>)
 8006f2c:	22fa      	movs	r2, #250	@ 0xfa
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8006f32:	4b1e      	ldr	r3, [pc, #120]	@ (8006fac <ESP_WakeTest+0x204>)
 8006f34:	2204      	movs	r2, #4
 8006f36:	701a      	strb	r2, [r3, #0]

      break;
 8006f38:	e033      	b.n	8006fa2 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8006f3a:	4b27      	ldr	r3, [pc, #156]	@ (8006fd8 <ESP_WakeTest+0x230>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8006f40:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb4 <ESP_WakeTest+0x20c>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006f46:	4b1d      	ldr	r3, [pc, #116]	@ (8006fbc <ESP_WakeTest+0x214>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f00d fd7e 	bl	8014a4e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006f52:	2380      	movs	r3, #128	@ 0x80
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	4818      	ldr	r0, [pc, #96]	@ (8006fb8 <ESP_WakeTest+0x210>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	f00d fd77 	bl	8014a4e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8006f60:	4b16      	ldr	r3, [pc, #88]	@ (8006fbc <ESP_WakeTest+0x214>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	2102      	movs	r1, #2
 8006f66:	0018      	movs	r0, r3
 8006f68:	f00d fd71 	bl	8014a4e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8006f6c:	f005 fac8 	bl	800c500 <SetESPMeasurementDone>
      break;
 8006f70:	e017      	b.n	8006fa2 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8006f72:	4b0e      	ldr	r3, [pc, #56]	@ (8006fac <ESP_WakeTest+0x204>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
      break;
 8006f78:	e013      	b.n	8006fa2 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8006f7a:	4b16      	ldr	r3, [pc, #88]	@ (8006fd4 <ESP_WakeTest+0x22c>)
 8006f7c:	22fa      	movs	r2, #250	@ 0xfa
 8006f7e:	0112      	lsls	r2, r2, #4
 8006f80:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8006f82:	4b14      	ldr	r3, [pc, #80]	@ (8006fd4 <ESP_WakeTest+0x22c>)
 8006f84:	22fa      	movs	r2, #250	@ 0xfa
 8006f86:	0112      	lsls	r2, r2, #4
 8006f88:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8006f8a:	f00a fa8d 	bl	80114a8 <Calculate_LED_ON>
 8006f8e:	0003      	movs	r3, r0
 8006f90:	001a      	movs	r2, r3
 8006f92:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <ESP_WakeTest+0x22c>)
 8006f94:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8006f96:	e004      	b.n	8006fa2 <ESP_WakeTest+0x1fa>
      break;
 8006f98:	46c0      	nop			@ (mov r8, r8)
 8006f9a:	e002      	b.n	8006fa2 <ESP_WakeTest+0x1fa>
      break;
 8006f9c:	46c0      	nop			@ (mov r8, r8)
 8006f9e:	e000      	b.n	8006fa2 <ESP_WakeTest+0x1fa>
      break;
 8006fa0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006fa2:	46c0      	nop			@ (mov r8, r8)
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b003      	add	sp, #12
 8006fa8:	bd90      	pop	{r4, r7, pc}
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	20000690 	.word	0x20000690
 8006fb0:	0802d038 	.word	0x0802d038
 8006fb4:	200005b8 	.word	0x200005b8
 8006fb8:	50000800 	.word	0x50000800
 8006fbc:	50001c00 	.word	0x50001c00
 8006fc0:	20000684 	.word	0x20000684
 8006fc4:	200004b8 	.word	0x200004b8
 8006fc8:	2000068e 	.word	0x2000068e
 8006fcc:	2000068d 	.word	0x2000068d
 8006fd0:	2000002e 	.word	0x2000002e
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	20000001 	.word	0x20000001

08006fdc <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8006fdc:	b5b0      	push	{r4, r5, r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8006fe2:	1dfb      	adds	r3, r7, #7
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8006fe8:	4bdf      	ldr	r3, [pc, #892]	@ (8007368 <ESP_Upkeep+0x38c>)
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	4bdf      	ldr	r3, [pc, #892]	@ (800736c <ESP_Upkeep+0x390>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d024      	beq.n	800703e <ESP_Upkeep+0x62>
 8006ff4:	f00b fdde 	bl	8012bb4 <GetVerboseLevel>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d11f      	bne.n	800703e <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8006ffe:	4bda      	ldr	r3, [pc, #872]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	4bda      	ldr	r3, [pc, #872]	@ (800736c <ESP_Upkeep+0x390>)
 8007004:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8007006:	4bd9      	ldr	r3, [pc, #868]	@ (800736c <ESP_Upkeep+0x390>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b03      	cmp	r3, #3
 800700c:	d103      	bne.n	8007016 <ESP_Upkeep+0x3a>
 800700e:	4bd8      	ldr	r3, [pc, #864]	@ (8007370 <ESP_Upkeep+0x394>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b0e      	cmp	r3, #14
 8007014:	d013      	beq.n	800703e <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8007016:	4bd5      	ldr	r3, [pc, #852]	@ (800736c <ESP_Upkeep+0x390>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	001d      	movs	r5, r3
 800701c:	4bd4      	ldr	r3, [pc, #848]	@ (8007370 <ESP_Upkeep+0x394>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	0018      	movs	r0, r3
 8007022:	4bd4      	ldr	r3, [pc, #848]	@ (8007374 <ESP_Upkeep+0x398>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	001c      	movs	r4, r3
 8007028:	4bd3      	ldr	r3, [pc, #844]	@ (8007378 <ESP_Upkeep+0x39c>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	4ad3      	ldr	r2, [pc, #844]	@ (800737c <ESP_Upkeep+0x3a0>)
 800702e:	49d4      	ldr	r1, [pc, #848]	@ (8007380 <ESP_Upkeep+0x3a4>)
 8007030:	9302      	str	r3, [sp, #8]
 8007032:	9401      	str	r4, [sp, #4]
 8007034:	9000      	str	r0, [sp, #0]
 8007036:	002b      	movs	r3, r5
 8007038:	2003      	movs	r0, #3
 800703a:	f00b fd41 	bl	8012ac0 <CreateLine>
    }
  }
  switch (EspState) {
 800703e:	4bca      	ldr	r3, [pc, #808]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b0f      	cmp	r3, #15
 8007044:	d901      	bls.n	800704a <ESP_Upkeep+0x6e>
 8007046:	f000 fc4c 	bl	80078e2 <ESP_Upkeep+0x906>
 800704a:	009a      	lsls	r2, r3, #2
 800704c:	4bcd      	ldr	r3, [pc, #820]	@ (8007384 <ESP_Upkeep+0x3a8>)
 800704e:	18d3      	adds	r3, r2, r3
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007054:	4bc4      	ldr	r3, [pc, #784]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
      break;
 800705a:	f000 fc5d 	bl	8007918 <ESP_Upkeep+0x93c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800705e:	4bca      	ldr	r3, [pc, #808]	@ (8007388 <ESP_Upkeep+0x3ac>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007064:	f005 fcac 	bl	800c9c0 <AllDevicesReady>
 8007068:	0003      	movs	r3, r0
 800706a:	001a      	movs	r2, r3
 800706c:	2301      	movs	r3, #1
 800706e:	4053      	eors	r3, r2
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <ESP_Upkeep+0x9e>
 8007076:	f000 fc40 	bl	80078fa <ESP_Upkeep+0x91e>
        break;
      }
      SetESPIndicator();
 800707a:	f00a fba7 	bl	80117cc <SetESPIndicator>
      if(!EspTurnedOn){
 800707e:	4bc3      	ldr	r3, [pc, #780]	@ (800738c <ESP_Upkeep+0x3b0>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2201      	movs	r2, #1
 8007084:	4053      	eors	r3, r2
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d036      	beq.n	80070fa <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800708c:	2380      	movs	r3, #128	@ 0x80
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	48bf      	ldr	r0, [pc, #764]	@ (8007390 <ESP_Upkeep+0x3b4>)
 8007092:	2200      	movs	r2, #0
 8007094:	0019      	movs	r1, r3
 8007096:	f00d fcda 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f00c fa50 	bl	8013540 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80070a0:	2380      	movs	r3, #128	@ 0x80
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	48ba      	ldr	r0, [pc, #744]	@ (8007390 <ESP_Upkeep+0x3b4>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	0019      	movs	r1, r3
 80070aa:	f00d fcd0 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070ae:	2001      	movs	r0, #1
 80070b0:	f00c fa46 	bl	8013540 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80070b4:	4bb7      	ldr	r3, [pc, #732]	@ (8007394 <ESP_Upkeep+0x3b8>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	2101      	movs	r1, #1
 80070ba:	0018      	movs	r0, r3
 80070bc:	f00d fcc7 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070c0:	2001      	movs	r0, #1
 80070c2:	f00c fa3d 	bl	8013540 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80070c6:	4bb3      	ldr	r3, [pc, #716]	@ (8007394 <ESP_Upkeep+0x3b8>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	2102      	movs	r1, #2
 80070cc:	0018      	movs	r0, r3
 80070ce:	f00d fcbe 	bl	8014a4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070d2:	2001      	movs	r0, #1
 80070d4:	f00c fa34 	bl	8013540 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80070d8:	4bae      	ldr	r3, [pc, #696]	@ (8007394 <ESP_Upkeep+0x3b8>)
 80070da:	2201      	movs	r2, #1
 80070dc:	2101      	movs	r1, #1
 80070de:	0018      	movs	r0, r3
 80070e0:	f00d fcb5 	bl	8014a4e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80070e4:	f00c fa22 	bl	801352c <HAL_GetTick>
 80070e8:	0003      	movs	r3, r0
 80070ea:	22af      	movs	r2, #175	@ 0xaf
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	189a      	adds	r2, r3, r2
 80070f0:	4ba9      	ldr	r3, [pc, #676]	@ (8007398 <ESP_Upkeep+0x3bc>)
 80070f2:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80070f4:	4ba5      	ldr	r3, [pc, #660]	@ (800738c <ESP_Upkeep+0x3b0>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80070fa:	2380      	movs	r3, #128	@ 0x80
 80070fc:	005a      	lsls	r2, r3, #1
 80070fe:	4ba7      	ldr	r3, [pc, #668]	@ (800739c <ESP_Upkeep+0x3c0>)
 8007100:	0011      	movs	r1, r2
 8007102:	0018      	movs	r0, r3
 8007104:	f7fd fcfe 	bl	8004b04 <ESP_Receive>
 8007108:	1e03      	subs	r3, r0, #0
 800710a:	d101      	bne.n	8007110 <ESP_Upkeep+0x134>
 800710c:	f000 fbf7 	bl	80078fe <ESP_Upkeep+0x922>
        EspState = ESP_STATE_WAIT_AWAKE;
 8007110:	4b95      	ldr	r3, [pc, #596]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007112:	220f      	movs	r2, #15
 8007114:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007116:	f00c fa09 	bl	801352c <HAL_GetTick>
 800711a:	0003      	movs	r3, r0
 800711c:	22fa      	movs	r2, #250	@ 0xfa
 800711e:	00d2      	lsls	r2, r2, #3
 8007120:	189a      	adds	r2, r3, r2
 8007122:	4b9f      	ldr	r3, [pc, #636]	@ (80073a0 <ESP_Upkeep+0x3c4>)
 8007124:	601a      	str	r2, [r3, #0]
      }
      break;
 8007126:	f000 fbea 	bl	80078fe <ESP_Upkeep+0x922>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800712a:	2001      	movs	r0, #1
 800712c:	f7ff fb1a 	bl	8006764 <DMA_ProcessBuffer>
 8007130:	0003      	movs	r3, r0
 8007132:	001a      	movs	r2, r3
 8007134:	4b9b      	ldr	r3, [pc, #620]	@ (80073a4 <ESP_Upkeep+0x3c8>)
 8007136:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007138:	4b9a      	ldr	r3, [pc, #616]	@ (80073a4 <ESP_Upkeep+0x3c8>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	1dbc      	adds	r4, r7, #6
 800713e:	2101      	movs	r1, #1
 8007140:	0018      	movs	r0, r3
 8007142:	f7ff fc0f 	bl	8006964 <ATCompare>
 8007146:	0003      	movs	r3, r0
 8007148:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800714a:	1dbb      	adds	r3, r7, #6
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d108      	bne.n	8007164 <ESP_Upkeep+0x188>
 8007152:	4b93      	ldr	r3, [pc, #588]	@ (80073a0 <ESP_Upkeep+0x3c4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	0018      	movs	r0, r3
 8007158:	f00b fc5c 	bl	8012a14 <TimestampIsReached>
 800715c:	1e03      	subs	r3, r0, #0
 800715e:	d101      	bne.n	8007164 <ESP_Upkeep+0x188>
 8007160:	f000 fbcf 	bl	8007902 <ESP_Upkeep+0x926>
          EspState = ESP_STATE_MODE_SELECT;
 8007164:	4b80      	ldr	r3, [pc, #512]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007166:	220b      	movs	r2, #11
 8007168:	701a      	strb	r2, [r3, #0]
        }
        break;
 800716a:	f000 fbca 	bl	8007902 <ESP_Upkeep+0x926>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 800716e:	4b8e      	ldr	r3, [pc, #568]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007170:	2209      	movs	r2, #9
 8007172:	2114      	movs	r1, #20
 8007174:	0018      	movs	r0, r3
 8007176:	f01d feeb 	bl	8024f50 <memset>
      if(!InitIsDone || WifiReset){
 800717a:	4b8c      	ldr	r3, [pc, #560]	@ (80073ac <ESP_Upkeep+0x3d0>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	4053      	eors	r3, r2
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <ESP_Upkeep+0x1b4>
 8007188:	4b89      	ldr	r3, [pc, #548]	@ (80073b0 <ESP_Upkeep+0x3d4>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01a      	beq.n	80071c6 <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 8007190:	4b85      	ldr	r3, [pc, #532]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007192:	4a88      	ldr	r2, [pc, #544]	@ (80073b4 <ESP_Upkeep+0x3d8>)
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	6019      	str	r1, [r3, #0]
 8007198:	8891      	ldrh	r1, [r2, #4]
 800719a:	8099      	strh	r1, [r3, #4]
 800719c:	7992      	ldrb	r2, [r2, #6]
 800719e:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80071a0:	4b71      	ldr	r3, [pc, #452]	@ (8007368 <ESP_Upkeep+0x38c>)
 80071a2:	2204      	movs	r2, #4
 80071a4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80071a6:	4b84      	ldr	r3, [pc, #528]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80071ac:	4b71      	ldr	r3, [pc, #452]	@ (8007374 <ESP_Upkeep+0x398>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80071b2:	4b81      	ldr	r3, [pc, #516]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	001a      	movs	r2, r3
 80071b8:	4b7b      	ldr	r3, [pc, #492]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 80071ba:	5c9a      	ldrb	r2, [r3, r2]
 80071bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <ESP_Upkeep+0x394>)
 80071be:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80071c0:	4b6d      	ldr	r3, [pc, #436]	@ (8007378 <ESP_Upkeep+0x39c>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80071c6:	4b79      	ldr	r3, [pc, #484]	@ (80073ac <ESP_Upkeep+0x3d0>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d01f      	beq.n	800720e <ESP_Upkeep+0x232>
 80071ce:	4b7b      	ldr	r3, [pc, #492]	@ (80073bc <ESP_Upkeep+0x3e0>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2201      	movs	r2, #1
 80071d4:	4053      	eors	r3, r2
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d018      	beq.n	800720e <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80071dc:	4b72      	ldr	r3, [pc, #456]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 80071de:	4a78      	ldr	r2, [pc, #480]	@ (80073c0 <ESP_Upkeep+0x3e4>)
 80071e0:	6811      	ldr	r1, [r2, #0]
 80071e2:	6019      	str	r1, [r3, #0]
 80071e4:	8892      	ldrh	r2, [r2, #4]
 80071e6:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80071e8:	4b5f      	ldr	r3, [pc, #380]	@ (8007368 <ESP_Upkeep+0x38c>)
 80071ea:	2204      	movs	r2, #4
 80071ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80071ee:	4b72      	ldr	r3, [pc, #456]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80071f4:	4b5f      	ldr	r3, [pc, #380]	@ (8007374 <ESP_Upkeep+0x398>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80071fa:	4b6f      	ldr	r3, [pc, #444]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	001a      	movs	r2, r3
 8007200:	4b69      	ldr	r3, [pc, #420]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007202:	5c9a      	ldrb	r2, [r3, r2]
 8007204:	4b5a      	ldr	r3, [pc, #360]	@ (8007370 <ESP_Upkeep+0x394>)
 8007206:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007208:	4b5b      	ldr	r3, [pc, #364]	@ (8007378 <ESP_Upkeep+0x39c>)
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800720e:	4b67      	ldr	r3, [pc, #412]	@ (80073ac <ESP_Upkeep+0x3d0>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d021      	beq.n	800725a <ESP_Upkeep+0x27e>
 8007216:	4b69      	ldr	r3, [pc, #420]	@ (80073bc <ESP_Upkeep+0x3e0>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01d      	beq.n	800725a <ESP_Upkeep+0x27e>
 800721e:	4b69      	ldr	r3, [pc, #420]	@ (80073c4 <ESP_Upkeep+0x3e8>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2201      	movs	r2, #1
 8007224:	4053      	eors	r3, r2
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d016      	beq.n	800725a <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800722c:	4b66      	ldr	r3, [pc, #408]	@ (80073c8 <ESP_Upkeep+0x3ec>)
 800722e:	881a      	ldrh	r2, [r3, #0]
 8007230:	4b5d      	ldr	r3, [pc, #372]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007232:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007234:	4b4c      	ldr	r3, [pc, #304]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007236:	2204      	movs	r2, #4
 8007238:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800723a:	4b5f      	ldr	r3, [pc, #380]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8007240:	4b4c      	ldr	r3, [pc, #304]	@ (8007374 <ESP_Upkeep+0x398>)
 8007242:	2204      	movs	r2, #4
 8007244:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007246:	4b5c      	ldr	r3, [pc, #368]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	001a      	movs	r2, r3
 800724c:	4b56      	ldr	r3, [pc, #344]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 800724e:	5c9a      	ldrb	r2, [r3, r2]
 8007250:	4b47      	ldr	r3, [pc, #284]	@ (8007370 <ESP_Upkeep+0x394>)
 8007252:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007254:	4b48      	ldr	r3, [pc, #288]	@ (8007378 <ESP_Upkeep+0x39c>)
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800725a:	4b54      	ldr	r3, [pc, #336]	@ (80073ac <ESP_Upkeep+0x3d0>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d02c      	beq.n	80072bc <ESP_Upkeep+0x2e0>
 8007262:	4b56      	ldr	r3, [pc, #344]	@ (80073bc <ESP_Upkeep+0x3e0>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d028      	beq.n	80072bc <ESP_Upkeep+0x2e0>
 800726a:	4b56      	ldr	r3, [pc, #344]	@ (80073c4 <ESP_Upkeep+0x3e8>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d024      	beq.n	80072bc <ESP_Upkeep+0x2e0>
 8007272:	4b56      	ldr	r3, [pc, #344]	@ (80073cc <ESP_Upkeep+0x3f0>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2201      	movs	r2, #1
 8007278:	4053      	eors	r3, r2
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01d      	beq.n	80072bc <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007280:	4b49      	ldr	r3, [pc, #292]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007282:	4a53      	ldr	r2, [pc, #332]	@ (80073d0 <ESP_Upkeep+0x3f4>)
 8007284:	8811      	ldrh	r1, [r2, #0]
 8007286:	8019      	strh	r1, [r3, #0]
 8007288:	7892      	ldrb	r2, [r2, #2]
 800728a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800728c:	4b36      	ldr	r3, [pc, #216]	@ (8007368 <ESP_Upkeep+0x38c>)
 800728e:	2204      	movs	r2, #4
 8007290:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007292:	4b49      	ldr	r3, [pc, #292]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007298:	4b36      	ldr	r3, [pc, #216]	@ (8007374 <ESP_Upkeep+0x398>)
 800729a:	2202      	movs	r2, #2
 800729c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800729e:	f00c f945 	bl	801352c <HAL_GetTick>
 80072a2:	0002      	movs	r2, r0
 80072a4:	4b4b      	ldr	r3, [pc, #300]	@ (80073d4 <ESP_Upkeep+0x3f8>)
 80072a6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80072a8:	4b43      	ldr	r3, [pc, #268]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	001a      	movs	r2, r3
 80072ae:	4b3e      	ldr	r3, [pc, #248]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 80072b0:	5c9a      	ldrb	r2, [r3, r2]
 80072b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007370 <ESP_Upkeep+0x394>)
 80072b4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80072b6:	4b30      	ldr	r3, [pc, #192]	@ (8007378 <ESP_Upkeep+0x39c>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80072bc:	4b3b      	ldr	r3, [pc, #236]	@ (80073ac <ESP_Upkeep+0x3d0>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d027      	beq.n	8007314 <ESP_Upkeep+0x338>
 80072c4:	4b3d      	ldr	r3, [pc, #244]	@ (80073bc <ESP_Upkeep+0x3e0>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d023      	beq.n	8007314 <ESP_Upkeep+0x338>
 80072cc:	4b3d      	ldr	r3, [pc, #244]	@ (80073c4 <ESP_Upkeep+0x3e8>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01f      	beq.n	8007314 <ESP_Upkeep+0x338>
 80072d4:	4b3d      	ldr	r3, [pc, #244]	@ (80073cc <ESP_Upkeep+0x3f0>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80072dc:	4b3e      	ldr	r3, [pc, #248]	@ (80073d8 <ESP_Upkeep+0x3fc>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4b31      	ldr	r3, [pc, #196]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 80072e2:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80072e4:	4b20      	ldr	r3, [pc, #128]	@ (8007368 <ESP_Upkeep+0x38c>)
 80072e6:	2204      	movs	r2, #4
 80072e8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80072ea:	4b33      	ldr	r3, [pc, #204]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80072f0:	4b20      	ldr	r3, [pc, #128]	@ (8007374 <ESP_Upkeep+0x398>)
 80072f2:	2205      	movs	r2, #5
 80072f4:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80072f6:	f00c f919 	bl	801352c <HAL_GetTick>
 80072fa:	0002      	movs	r2, r0
 80072fc:	4b35      	ldr	r3, [pc, #212]	@ (80073d4 <ESP_Upkeep+0x3f8>)
 80072fe:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007300:	4b2d      	ldr	r3, [pc, #180]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	001a      	movs	r2, r3
 8007306:	4b28      	ldr	r3, [pc, #160]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007308:	5c9a      	ldrb	r2, [r3, r2]
 800730a:	4b19      	ldr	r3, [pc, #100]	@ (8007370 <ESP_Upkeep+0x394>)
 800730c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800730e:	4b1a      	ldr	r3, [pc, #104]	@ (8007378 <ESP_Upkeep+0x39c>)
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007314:	4b31      	ldr	r3, [pc, #196]	@ (80073dc <ESP_Upkeep+0x400>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d100      	bne.n	800731e <ESP_Upkeep+0x342>
 800731c:	e2f3      	b.n	8007906 <ESP_Upkeep+0x92a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800731e:	4b22      	ldr	r3, [pc, #136]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 8007320:	4a2f      	ldr	r2, [pc, #188]	@ (80073e0 <ESP_Upkeep+0x404>)
 8007322:	6811      	ldr	r1, [r2, #0]
 8007324:	6019      	str	r1, [r3, #0]
 8007326:	7912      	ldrb	r2, [r2, #4]
 8007328:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800732a:	4a2e      	ldr	r2, [pc, #184]	@ (80073e4 <ESP_Upkeep+0x408>)
 800732c:	4b14      	ldr	r3, [pc, #80]	@ (8007380 <ESP_Upkeep+0x3a4>)
 800732e:	0019      	movs	r1, r3
 8007330:	2003      	movs	r0, #3
 8007332:	f00b fbc5 	bl	8012ac0 <CreateLine>
        DisableConnectedDevices();
 8007336:	f005 fc69 	bl	800cc0c <DisableConnectedDevices>
        usblog = false;
 800733a:	4b2b      	ldr	r3, [pc, #172]	@ (80073e8 <ESP_Upkeep+0x40c>)
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007340:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <ESP_Upkeep+0x38c>)
 8007342:	2204      	movs	r2, #4
 8007344:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007346:	4b1c      	ldr	r3, [pc, #112]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800734c:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <ESP_Upkeep+0x398>)
 800734e:	2203      	movs	r2, #3
 8007350:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007352:	4b19      	ldr	r3, [pc, #100]	@ (80073b8 <ESP_Upkeep+0x3dc>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	001a      	movs	r2, r3
 8007358:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <ESP_Upkeep+0x3cc>)
 800735a:	5c9a      	ldrb	r2, [r3, r2]
 800735c:	4b04      	ldr	r3, [pc, #16]	@ (8007370 <ESP_Upkeep+0x394>)
 800735e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <ESP_Upkeep+0x39c>)
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007366:	e2ce      	b.n	8007906 <ESP_Upkeep+0x92a>
 8007368:	2000002c 	.word	0x2000002c
 800736c:	20000003 	.word	0x20000003
 8007370:	2000068e 	.word	0x2000068e
 8007374:	2000068f 	.word	0x2000068f
 8007378:	2000068d 	.word	0x2000068d
 800737c:	0802a48c 	.word	0x0802a48c
 8007380:	08029430 	.word	0x08029430
 8007384:	0802d050 	.word	0x0802d050
 8007388:	20000e3c 	.word	0x20000e3c
 800738c:	200005b8 	.word	0x200005b8
 8007390:	50000800 	.word	0x50000800
 8007394:	50001c00 	.word	0x50001c00
 8007398:	20000684 	.word	0x20000684
 800739c:	200004b8 	.word	0x200004b8
 80073a0:	200007bc 	.word	0x200007bc
 80073a4:	2000002f 	.word	0x2000002f
 80073a8:	20000674 	.word	0x20000674
 80073ac:	200005b9 	.word	0x200005b9
 80073b0:	200005ba 	.word	0x200005ba
 80073b4:	20000004 	.word	0x20000004
 80073b8:	2000067e 	.word	0x2000067e
 80073bc:	200005bc 	.word	0x200005bc
 80073c0:	20000014 	.word	0x20000014
 80073c4:	200005bd 	.word	0x200005bd
 80073c8:	20000010 	.word	0x20000010
 80073cc:	20000002 	.word	0x20000002
 80073d0:	2000000c 	.word	0x2000000c
 80073d4:	200005d0 	.word	0x200005d0
 80073d8:	20000024 	.word	0x20000024
 80073dc:	200005bb 	.word	0x200005bb
 80073e0:	2000001c 	.word	0x2000001c
 80073e4:	0802a4b8 	.word	0x0802a4b8
 80073e8:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80073ec:	4bd7      	ldr	r3, [pc, #860]	@ (800774c <ESP_Upkeep+0x770>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	1dfc      	adds	r4, r7, #7
 80073f2:	0018      	movs	r0, r3
 80073f4:	f7ff faf8 	bl	80069e8 <AT_Send>
 80073f8:	0003      	movs	r3, r0
 80073fa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80073fc:	1dfb      	adds	r3, r7, #7
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d100      	bne.n	8007406 <ESP_Upkeep+0x42a>
 8007404:	e281      	b.n	800790a <ESP_Upkeep+0x92e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007406:	4bd2      	ldr	r3, [pc, #840]	@ (8007750 <ESP_Upkeep+0x774>)
 8007408:	2203      	movs	r2, #3
 800740a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800740c:	e27d      	b.n	800790a <ESP_Upkeep+0x92e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800740e:	4bd1      	ldr	r3, [pc, #836]	@ (8007754 <ESP_Upkeep+0x778>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <ESP_Upkeep+0x44a>
 8007416:	4bd0      	ldr	r3, [pc, #832]	@ (8007758 <ESP_Upkeep+0x77c>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d003      	beq.n	8007426 <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 800741e:	4bcc      	ldr	r3, [pc, #816]	@ (8007750 <ESP_Upkeep+0x774>)
 8007420:	220b      	movs	r2, #11
 8007422:	701a      	strb	r2, [r3, #0]
        break;
 8007424:	e278      	b.n	8007918 <ESP_Upkeep+0x93c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007426:	4bcd      	ldr	r3, [pc, #820]	@ (800775c <ESP_Upkeep+0x780>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	0018      	movs	r0, r3
 800742c:	f00b faf2 	bl	8012a14 <TimestampIsReached>
 8007430:	1e03      	subs	r3, r0, #0
 8007432:	d100      	bne.n	8007436 <ESP_Upkeep+0x45a>
 8007434:	e26b      	b.n	800790e <ESP_Upkeep+0x932>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007436:	4bca      	ldr	r3, [pc, #808]	@ (8007760 <ESP_Upkeep+0x784>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	0018      	movs	r0, r3
 800743c:	f7ff f992 	bl	8006764 <DMA_ProcessBuffer>
 8007440:	0003      	movs	r3, r0
 8007442:	001a      	movs	r2, r3
 8007444:	4bc7      	ldr	r3, [pc, #796]	@ (8007764 <ESP_Upkeep+0x788>)
 8007446:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007448:	4bc6      	ldr	r3, [pc, #792]	@ (8007764 <ESP_Upkeep+0x788>)
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	4bc4      	ldr	r3, [pc, #784]	@ (8007760 <ESP_Upkeep+0x784>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	1d7c      	adds	r4, r7, #5
 8007452:	0019      	movs	r1, r3
 8007454:	0010      	movs	r0, r2
 8007456:	f7ff fa85 	bl	8006964 <ATCompare>
 800745a:	0003      	movs	r3, r0
 800745c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800745e:	4bc1      	ldr	r3, [pc, #772]	@ (8007764 <ESP_Upkeep+0x788>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d138      	bne.n	80074d8 <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 8007466:	4bb9      	ldr	r3, [pc, #740]	@ (800774c <ESP_Upkeep+0x770>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b0f      	cmp	r3, #15
 800746c:	d108      	bne.n	8007480 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 800746e:	4bb7      	ldr	r3, [pc, #732]	@ (800774c <ESP_Upkeep+0x770>)
 8007470:	220e      	movs	r2, #14
 8007472:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007474:	4bba      	ldr	r3, [pc, #744]	@ (8007760 <ESP_Upkeep+0x784>)
 8007476:	2202      	movs	r2, #2
 8007478:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800747a:	4bbb      	ldr	r3, [pc, #748]	@ (8007768 <ESP_Upkeep+0x78c>)
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007480:	4bb3      	ldr	r3, [pc, #716]	@ (8007750 <ESP_Upkeep+0x774>)
 8007482:	2204      	movs	r2, #4
 8007484:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007486:	4bb9      	ldr	r3, [pc, #740]	@ (800776c <ESP_Upkeep+0x790>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	4bb7      	ldr	r3, [pc, #732]	@ (800776c <ESP_Upkeep+0x790>)
 8007490:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007492:	4bb6      	ldr	r3, [pc, #728]	@ (800776c <ESP_Upkeep+0x790>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d91e      	bls.n	80074d8 <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800749a:	f00c f847 	bl	801352c <HAL_GetTick>
 800749e:	0003      	movs	r3, r0
 80074a0:	4ab3      	ldr	r2, [pc, #716]	@ (8007770 <ESP_Upkeep+0x794>)
 80074a2:	189a      	adds	r2, r3, r2
 80074a4:	4bad      	ldr	r3, [pc, #692]	@ (800775c <ESP_Upkeep+0x780>)
 80074a6:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80074a8:	4bb2      	ldr	r3, [pc, #712]	@ (8007774 <ESP_Upkeep+0x798>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80074ae:	f7ff fa4b 	bl	8006948 <clearDMABuffer>
            stop = HAL_GetTick();
 80074b2:	f00c f83b 	bl	801352c <HAL_GetTick>
 80074b6:	0002      	movs	r2, r0
 80074b8:	4baf      	ldr	r3, [pc, #700]	@ (8007778 <ESP_Upkeep+0x79c>)
 80074ba:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80074bc:	4bae      	ldr	r3, [pc, #696]	@ (8007778 <ESP_Upkeep+0x79c>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4bae      	ldr	r3, [pc, #696]	@ (800777c <ESP_Upkeep+0x7a0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	4aae      	ldr	r2, [pc, #696]	@ (8007780 <ESP_Upkeep+0x7a4>)
 80074c8:	49ae      	ldr	r1, [pc, #696]	@ (8007784 <ESP_Upkeep+0x7a8>)
 80074ca:	2001      	movs	r0, #1
 80074cc:	f00b faf8 	bl	8012ac0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80074d0:	4b9f      	ldr	r3, [pc, #636]	@ (8007750 <ESP_Upkeep+0x774>)
 80074d2:	220d      	movs	r2, #13
 80074d4:	701a      	strb	r2, [r3, #0]
            break;
 80074d6:	e21f      	b.n	8007918 <ESP_Upkeep+0x93c>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80074d8:	4ba2      	ldr	r3, [pc, #648]	@ (8007764 <ESP_Upkeep+0x788>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d106      	bne.n	80074ee <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 80074e0:	f00c f824 	bl	801352c <HAL_GetTick>
 80074e4:	0003      	movs	r3, r0
 80074e6:	330a      	adds	r3, #10
 80074e8:	001a      	movs	r2, r3
 80074ea:	4b9c      	ldr	r3, [pc, #624]	@ (800775c <ESP_Upkeep+0x780>)
 80074ec:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80074ee:	4b9d      	ldr	r3, [pc, #628]	@ (8007764 <ESP_Upkeep+0x788>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b0a      	cmp	r3, #10
 80074f4:	d106      	bne.n	8007504 <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 80074f6:	f00c f819 	bl	801352c <HAL_GetTick>
 80074fa:	0003      	movs	r3, r0
 80074fc:	330a      	adds	r3, #10
 80074fe:	001a      	movs	r2, r3
 8007500:	4b96      	ldr	r3, [pc, #600]	@ (800775c <ESP_Upkeep+0x780>)
 8007502:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007504:	4b97      	ldr	r3, [pc, #604]	@ (8007764 <ESP_Upkeep+0x788>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d14b      	bne.n	80075a4 <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 800750c:	4b9e      	ldr	r3, [pc, #632]	@ (8007788 <ESP_Upkeep+0x7ac>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	4b9c      	ldr	r3, [pc, #624]	@ (8007788 <ESP_Upkeep+0x7ac>)
 8007516:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007518:	4a9c      	ldr	r2, [pc, #624]	@ (800778c <ESP_Upkeep+0x7b0>)
 800751a:	4b9a      	ldr	r3, [pc, #616]	@ (8007784 <ESP_Upkeep+0x7a8>)
 800751c:	0019      	movs	r1, r3
 800751e:	2001      	movs	r0, #1
 8007520:	f00b face 	bl	8012ac0 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007524:	4b98      	ldr	r3, [pc, #608]	@ (8007788 <ESP_Upkeep+0x7ac>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d924      	bls.n	8007576 <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 800752c:	f00b fffe 	bl	801352c <HAL_GetTick>
 8007530:	0003      	movs	r3, r0
 8007532:	4a97      	ldr	r2, [pc, #604]	@ (8007790 <ESP_Upkeep+0x7b4>)
 8007534:	189a      	adds	r2, r3, r2
 8007536:	4b89      	ldr	r3, [pc, #548]	@ (800775c <ESP_Upkeep+0x780>)
 8007538:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800753a:	4b8e      	ldr	r3, [pc, #568]	@ (8007774 <ESP_Upkeep+0x798>)
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007540:	f7ff fa02 	bl	8006948 <clearDMABuffer>
            stop = HAL_GetTick();
 8007544:	f00b fff2 	bl	801352c <HAL_GetTick>
 8007548:	0002      	movs	r2, r0
 800754a:	4b8b      	ldr	r3, [pc, #556]	@ (8007778 <ESP_Upkeep+0x79c>)
 800754c:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800754e:	4b8a      	ldr	r3, [pc, #552]	@ (8007778 <ESP_Upkeep+0x79c>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b8a      	ldr	r3, [pc, #552]	@ (800777c <ESP_Upkeep+0x7a0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	4a8e      	ldr	r2, [pc, #568]	@ (8007794 <ESP_Upkeep+0x7b8>)
 800755a:	498a      	ldr	r1, [pc, #552]	@ (8007784 <ESP_Upkeep+0x7a8>)
 800755c:	2001      	movs	r0, #1
 800755e:	f00b faaf 	bl	8012ac0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007562:	4b7b      	ldr	r3, [pc, #492]	@ (8007750 <ESP_Upkeep+0x774>)
 8007564:	220d      	movs	r2, #13
 8007566:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007568:	4b78      	ldr	r3, [pc, #480]	@ (800774c <ESP_Upkeep+0x770>)
 800756a:	2214      	movs	r2, #20
 800756c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 800756e:	4b7c      	ldr	r3, [pc, #496]	@ (8007760 <ESP_Upkeep+0x784>)
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
            break;
 8007574:	e1d0      	b.n	8007918 <ESP_Upkeep+0x93c>
          }
          if(ATCommand != AT_SENDDATA){
 8007576:	4b75      	ldr	r3, [pc, #468]	@ (800774c <ESP_Upkeep+0x770>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d003      	beq.n	8007586 <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 800757e:	4b74      	ldr	r3, [pc, #464]	@ (8007750 <ESP_Upkeep+0x774>)
 8007580:	2204      	movs	r2, #4
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e00e      	b.n	80075a4 <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007586:	4b71      	ldr	r3, [pc, #452]	@ (800774c <ESP_Upkeep+0x770>)
 8007588:	220e      	movs	r2, #14
 800758a:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800758c:	4b76      	ldr	r3, [pc, #472]	@ (8007768 <ESP_Upkeep+0x78c>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	b2da      	uxtb	r2, r3
 8007594:	4b74      	ldr	r3, [pc, #464]	@ (8007768 <ESP_Upkeep+0x78c>)
 8007596:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007598:	4b71      	ldr	r3, [pc, #452]	@ (8007760 <ESP_Upkeep+0x784>)
 800759a:	2202      	movs	r2, #2
 800759c:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800759e:	4b6c      	ldr	r3, [pc, #432]	@ (8007750 <ESP_Upkeep+0x774>)
 80075a0:	2204      	movs	r2, #4
 80075a2:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80075a4:	1d7b      	adds	r3, r7, #5
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d100      	bne.n	80075ae <ESP_Upkeep+0x5d2>
 80075ac:	e1af      	b.n	800790e <ESP_Upkeep+0x932>
          EspState = ESP_STATE_NEXT_AT;
 80075ae:	4b68      	ldr	r3, [pc, #416]	@ (8007750 <ESP_Upkeep+0x774>)
 80075b0:	2205      	movs	r2, #5
 80075b2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075b4:	e1ab      	b.n	800790e <ESP_Upkeep+0x932>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 80075b6:	4b6c      	ldr	r3, [pc, #432]	@ (8007768 <ESP_Upkeep+0x78c>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	4b6a      	ldr	r3, [pc, #424]	@ (8007768 <ESP_Upkeep+0x78c>)
 80075c0:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80075c2:	4b69      	ldr	r3, [pc, #420]	@ (8007768 <ESP_Upkeep+0x78c>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	001a      	movs	r2, r3
 80075c8:	4b73      	ldr	r3, [pc, #460]	@ (8007798 <ESP_Upkeep+0x7bc>)
 80075ca:	5c9a      	ldrb	r2, [r3, r2]
 80075cc:	4b5f      	ldr	r3, [pc, #380]	@ (800774c <ESP_Upkeep+0x770>)
 80075ce:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80075d0:	4b5e      	ldr	r3, [pc, #376]	@ (800774c <ESP_Upkeep+0x770>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d102      	bne.n	80075de <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80075d8:	4b61      	ldr	r3, [pc, #388]	@ (8007760 <ESP_Upkeep+0x784>)
 80075da:	2201      	movs	r2, #1
 80075dc:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80075de:	4b5b      	ldr	r3, [pc, #364]	@ (800774c <ESP_Upkeep+0x770>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b0e      	cmp	r3, #14
 80075e4:	d102      	bne.n	80075ec <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80075e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007760 <ESP_Upkeep+0x784>)
 80075e8:	2202      	movs	r2, #2
 80075ea:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80075ec:	4b57      	ldr	r3, [pc, #348]	@ (800774c <ESP_Upkeep+0x770>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b0e      	cmp	r3, #14
 80075f2:	d006      	beq.n	8007602 <ESP_Upkeep+0x626>
 80075f4:	4b55      	ldr	r3, [pc, #340]	@ (800774c <ESP_Upkeep+0x770>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d002      	beq.n	8007602 <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80075fc:	4b58      	ldr	r3, [pc, #352]	@ (8007760 <ESP_Upkeep+0x784>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007602:	4b52      	ldr	r3, [pc, #328]	@ (800774c <ESP_Upkeep+0x770>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b11      	cmp	r3, #17
 8007608:	d102      	bne.n	8007610 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 800760a:	4b55      	ldr	r3, [pc, #340]	@ (8007760 <ESP_Upkeep+0x784>)
 800760c:	2205      	movs	r2, #5
 800760e:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8007610:	4b4f      	ldr	r3, [pc, #316]	@ (8007750 <ESP_Upkeep+0x774>)
 8007612:	2204      	movs	r2, #4
 8007614:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007616:	4b4d      	ldr	r3, [pc, #308]	@ (800774c <ESP_Upkeep+0x770>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b14      	cmp	r3, #20
 800761c:	d000      	beq.n	8007620 <ESP_Upkeep+0x644>
 800761e:	e178      	b.n	8007912 <ESP_Upkeep+0x936>
        if(Mode == AT_MODE_SEND){
 8007620:	4b4d      	ldr	r3, [pc, #308]	@ (8007758 <ESP_Upkeep+0x77c>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d124      	bne.n	8007672 <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007628:	f00b ff80 	bl	801352c <HAL_GetTick>
 800762c:	0003      	movs	r3, r0
 800762e:	4a50      	ldr	r2, [pc, #320]	@ (8007770 <ESP_Upkeep+0x794>)
 8007630:	189a      	adds	r2, r3, r2
 8007632:	4b4a      	ldr	r3, [pc, #296]	@ (800775c <ESP_Upkeep+0x780>)
 8007634:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007636:	f7ff f987 	bl	8006948 <clearDMABuffer>
          stop = HAL_GetTick();
 800763a:	f00b ff77 	bl	801352c <HAL_GetTick>
 800763e:	0002      	movs	r2, r0
 8007640:	4b4d      	ldr	r3, [pc, #308]	@ (8007778 <ESP_Upkeep+0x79c>)
 8007642:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007644:	4b4c      	ldr	r3, [pc, #304]	@ (8007778 <ESP_Upkeep+0x79c>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b4c      	ldr	r3, [pc, #304]	@ (800777c <ESP_Upkeep+0x7a0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	4a53      	ldr	r2, [pc, #332]	@ (800779c <ESP_Upkeep+0x7c0>)
 8007650:	4953      	ldr	r1, [pc, #332]	@ (80077a0 <ESP_Upkeep+0x7c4>)
 8007652:	2002      	movs	r0, #2
 8007654:	f00b fa34 	bl	8012ac0 <CreateLine>
          ResetdBAmax();
 8007658:	f005 fb60 	bl	800cd1c <ResetdBAmax>
          resetMaxMeasurementValues();
 800765c:	f7fd f992 	bl	8004984 <resetMaxMeasurementValues>
          showTime();
 8007660:	f001 fc40 	bl	8008ee4 <showTime>
          ESPTransmitDone = true;
 8007664:	4b43      	ldr	r3, [pc, #268]	@ (8007774 <ESP_Upkeep+0x798>)
 8007666:	2201      	movs	r2, #1
 8007668:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 800766a:	4b39      	ldr	r3, [pc, #228]	@ (8007750 <ESP_Upkeep+0x774>)
 800766c:	220d      	movs	r2, #13
 800766e:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007670:	e14f      	b.n	8007912 <ESP_Upkeep+0x936>
        else if (Mode == AT_MODE_GETTIME) {
 8007672:	4b39      	ldr	r3, [pc, #228]	@ (8007758 <ESP_Upkeep+0x77c>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b05      	cmp	r3, #5
 8007678:	d12f      	bne.n	80076da <ESP_Upkeep+0x6fe>
            setTime = false;
 800767a:	4b4a      	ldr	r3, [pc, #296]	@ (80077a4 <ESP_Upkeep+0x7c8>)
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007680:	f001 fc82 	bl	8008f88 <calculateNextNTPTime>
 8007684:	0002      	movs	r2, r0
 8007686:	4b48      	ldr	r3, [pc, #288]	@ (80077a8 <ESP_Upkeep+0x7cc>)
 8007688:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 800768a:	4b47      	ldr	r3, [pc, #284]	@ (80077a8 <ESP_Upkeep+0x7cc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a47      	ldr	r2, [pc, #284]	@ (80077ac <ESP_Upkeep+0x7d0>)
 8007690:	189a      	adds	r2, r3, r2
 8007692:	4b45      	ldr	r3, [pc, #276]	@ (80077a8 <ESP_Upkeep+0x7cc>)
 8007694:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007696:	4b45      	ldr	r3, [pc, #276]	@ (80077ac <ESP_Upkeep+0x7d0>)
 8007698:	4a45      	ldr	r2, [pc, #276]	@ (80077b0 <ESP_Upkeep+0x7d4>)
 800769a:	4941      	ldr	r1, [pc, #260]	@ (80077a0 <ESP_Upkeep+0x7c4>)
 800769c:	2002      	movs	r0, #2
 800769e:	f00b fa0f 	bl	8012ac0 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 80076a2:	4b44      	ldr	r3, [pc, #272]	@ (80077b4 <ESP_Upkeep+0x7d8>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b2d      	ldr	r3, [pc, #180]	@ (800775c <ESP_Upkeep+0x780>)
 80076a8:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 80076aa:	f7ff f94d 	bl	8006948 <clearDMABuffer>
            stop = HAL_GetTick();
 80076ae:	f00b ff3d 	bl	801352c <HAL_GetTick>
 80076b2:	0002      	movs	r2, r0
 80076b4:	4b30      	ldr	r3, [pc, #192]	@ (8007778 <ESP_Upkeep+0x79c>)
 80076b6:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 80076b8:	4b2f      	ldr	r3, [pc, #188]	@ (8007778 <ESP_Upkeep+0x79c>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4b2f      	ldr	r3, [pc, #188]	@ (800777c <ESP_Upkeep+0x7a0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a3d      	ldr	r2, [pc, #244]	@ (80077b8 <ESP_Upkeep+0x7dc>)
 80076c4:	4936      	ldr	r1, [pc, #216]	@ (80077a0 <ESP_Upkeep+0x7c4>)
 80076c6:	2002      	movs	r0, #2
 80076c8:	f00b f9fa 	bl	8012ac0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80076cc:	4b20      	ldr	r3, [pc, #128]	@ (8007750 <ESP_Upkeep+0x774>)
 80076ce:	220d      	movs	r2, #13
 80076d0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 80076d2:	4b21      	ldr	r3, [pc, #132]	@ (8007758 <ESP_Upkeep+0x77c>)
 80076d4:	2202      	movs	r2, #2
 80076d6:	701a      	strb	r2, [r3, #0]
    break;
 80076d8:	e11b      	b.n	8007912 <ESP_Upkeep+0x936>
          EspState = ESP_STATE_RESET;
 80076da:	4b1d      	ldr	r3, [pc, #116]	@ (8007750 <ESP_Upkeep+0x774>)
 80076dc:	2209      	movs	r2, #9
 80076de:	701a      	strb	r2, [r3, #0]
    break;
 80076e0:	e117      	b.n	8007912 <ESP_Upkeep+0x936>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 80076e2:	4b36      	ldr	r3, [pc, #216]	@ (80077bc <ESP_Upkeep+0x7e0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80076e8:	4b35      	ldr	r3, [pc, #212]	@ (80077c0 <ESP_Upkeep+0x7e4>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	2101      	movs	r1, #1
 80076ee:	0018      	movs	r0, r3
 80076f0:	f00d f9ad 	bl	8014a4e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80076f4:	2001      	movs	r0, #1
 80076f6:	f00b ff23 	bl	8013540 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80076fa:	2380      	movs	r3, #128	@ 0x80
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	4831      	ldr	r0, [pc, #196]	@ (80077c4 <ESP_Upkeep+0x7e8>)
 8007700:	2200      	movs	r2, #0
 8007702:	0019      	movs	r1, r3
 8007704:	f00d f9a3 	bl	8014a4e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007708:	2001      	movs	r0, #1
 800770a:	f00b ff19 	bl	8013540 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800770e:	4b2c      	ldr	r3, [pc, #176]	@ (80077c0 <ESP_Upkeep+0x7e4>)
 8007710:	2200      	movs	r2, #0
 8007712:	2102      	movs	r1, #2
 8007714:	0018      	movs	r0, r3
 8007716:	f00d f99a 	bl	8014a4e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <ESP_Upkeep+0x774>)
 800771c:	2209      	movs	r2, #9
 800771e:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007720:	2001      	movs	r0, #1
 8007722:	f00b ff0d 	bl	8013540 <HAL_Delay>
      ResetESPIndicator();
 8007726:	f00a f869 	bl	80117fc <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 800772a:	f001 fbab 	bl	8008e84 <Check_USB_PowerOn>
 800772e:	1e03      	subs	r3, r0, #0
 8007730:	d103      	bne.n	800773a <ESP_Upkeep+0x75e>
 8007732:	4b25      	ldr	r3, [pc, #148]	@ (80077c8 <ESP_Upkeep+0x7ec>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <ESP_Upkeep+0x762>
        EnabledConnectedDevices();
 800773a:	f005 fa0f 	bl	800cb5c <EnabledConnectedDevices>
      }
      errorcntr = 0;
 800773e:	4b0b      	ldr	r3, [pc, #44]	@ (800776c <ESP_Upkeep+0x790>)
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007744:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <ESP_Upkeep+0x7ac>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	e0e5      	b.n	8007918 <ESP_Upkeep+0x93c>
 800774c:	2000068e 	.word	0x2000068e
 8007750:	2000002c 	.word	0x2000002c
 8007754:	200005bb 	.word	0x200005bb
 8007758:	2000068f 	.word	0x2000068f
 800775c:	20000684 	.word	0x20000684
 8007760:	2000068d 	.word	0x2000068d
 8007764:	2000002f 	.word	0x2000002f
 8007768:	2000067e 	.word	0x2000067e
 800776c:	2000067f 	.word	0x2000067f
 8007770:	0003a980 	.word	0x0003a980
 8007774:	200005c0 	.word	0x200005c0
 8007778:	200005d4 	.word	0x200005d4
 800777c:	200005d0 	.word	0x200005d0
 8007780:	0802a4e8 	.word	0x0802a4e8
 8007784:	08029454 	.word	0x08029454
 8007788:	20000680 	.word	0x20000680
 800778c:	0802a51c 	.word	0x0802a51c
 8007790:	0000c350 	.word	0x0000c350
 8007794:	0802a558 	.word	0x0802a558
 8007798:	20000674 	.word	0x20000674
 800779c:	0802a588 	.word	0x0802a588
 80077a0:	0802a5a0 	.word	0x0802a5a0
 80077a4:	20000002 	.word	0x20000002
 80077a8:	20000688 	.word	0x20000688
 80077ac:	00012686 	.word	0x00012686
 80077b0:	0802a5a4 	.word	0x0802a5a4
 80077b4:	20000028 	.word	0x20000028
 80077b8:	0802a5e8 	.word	0x0802a5e8
 80077bc:	200005b8 	.word	0x200005b8
 80077c0:	50001c00 	.word	0x50001c00
 80077c4:	50000800 	.word	0x50000800
 80077c8:	20001e76 	.word	0x20001e76

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80077cc:	4b55      	ldr	r3, [pc, #340]	@ (8007924 <ESP_Upkeep+0x948>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f00b f91f 	bl	8012a14 <TimestampIsReached>
 80077d6:	1e03      	subs	r3, r0, #0
 80077d8:	d103      	bne.n	80077e2 <ESP_Upkeep+0x806>
 80077da:	4b53      	ldr	r3, [pc, #332]	@ (8007928 <ESP_Upkeep+0x94c>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d043      	beq.n	800786a <ESP_Upkeep+0x88e>
        ESPTransmitDone = false;
 80077e2:	4b52      	ldr	r3, [pc, #328]	@ (800792c <ESP_Upkeep+0x950>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 80077e8:	4b51      	ldr	r3, [pc, #324]	@ (8007930 <ESP_Upkeep+0x954>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <ESP_Upkeep+0x820>
          InitIsDone = true;
 80077f0:	4b50      	ldr	r3, [pc, #320]	@ (8007934 <ESP_Upkeep+0x958>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80077f6:	4b50      	ldr	r3, [pc, #320]	@ (8007938 <ESP_Upkeep+0x95c>)
 80077f8:	220b      	movs	r2, #11
 80077fa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80077fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007930 <ESP_Upkeep+0x954>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d108      	bne.n	8007816 <ESP_Upkeep+0x83a>
          ConnectionMade = true;
 8007804:	4b4d      	ldr	r3, [pc, #308]	@ (800793c <ESP_Upkeep+0x960>)
 8007806:	2201      	movs	r2, #1
 8007808:	701a      	strb	r2, [r3, #0]
          beurs = true;
 800780a:	4b4d      	ldr	r3, [pc, #308]	@ (8007940 <ESP_Upkeep+0x964>)
 800780c:	2201      	movs	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007810:	4b49      	ldr	r3, [pc, #292]	@ (8007938 <ESP_Upkeep+0x95c>)
 8007812:	220b      	movs	r2, #11
 8007814:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007816:	4b46      	ldr	r3, [pc, #280]	@ (8007930 <ESP_Upkeep+0x954>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d102      	bne.n	8007824 <ESP_Upkeep+0x848>
          EspState = ESP_STATE_INIT;
 800781e:	4b46      	ldr	r3, [pc, #280]	@ (8007938 <ESP_Upkeep+0x95c>)
 8007820:	2202      	movs	r2, #2
 8007822:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8007824:	4b42      	ldr	r3, [pc, #264]	@ (8007930 <ESP_Upkeep+0x954>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d108      	bne.n	800783e <ESP_Upkeep+0x862>
          EspState = ESP_STATE_CONFIG;
 800782c:	4b42      	ldr	r3, [pc, #264]	@ (8007938 <ESP_Upkeep+0x95c>)
 800782e:	220e      	movs	r2, #14
 8007830:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007832:	4a44      	ldr	r2, [pc, #272]	@ (8007944 <ESP_Upkeep+0x968>)
 8007834:	4b44      	ldr	r3, [pc, #272]	@ (8007948 <ESP_Upkeep+0x96c>)
 8007836:	0019      	movs	r1, r3
 8007838:	2002      	movs	r0, #2
 800783a:	f00b f941 	bl	8012ac0 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800783e:	4b3c      	ldr	r3, [pc, #240]	@ (8007930 <ESP_Upkeep+0x954>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b04      	cmp	r3, #4
 8007844:	d105      	bne.n	8007852 <ESP_Upkeep+0x876>
          EspState = ESP_STATE_MODE_SELECT;
 8007846:	4b3c      	ldr	r3, [pc, #240]	@ (8007938 <ESP_Upkeep+0x95c>)
 8007848:	220b      	movs	r2, #11
 800784a:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 800784c:	4b3f      	ldr	r3, [pc, #252]	@ (800794c <ESP_Upkeep+0x970>)
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007852:	4b35      	ldr	r3, [pc, #212]	@ (8007928 <ESP_Upkeep+0x94c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d020      	beq.n	800789c <ESP_Upkeep+0x8c0>
 800785a:	4b35      	ldr	r3, [pc, #212]	@ (8007930 <ESP_Upkeep+0x954>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d01c      	beq.n	800789c <ESP_Upkeep+0x8c0>
          EspState = ESP_STATE_INIT;
 8007862:	4b35      	ldr	r3, [pc, #212]	@ (8007938 <ESP_Upkeep+0x95c>)
 8007864:	2202      	movs	r2, #2
 8007866:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007868:	e018      	b.n	800789c <ESP_Upkeep+0x8c0>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 800786a:	f001 fb8d 	bl	8008f88 <calculateNextNTPTime>
 800786e:	0002      	movs	r2, r0
 8007870:	4b37      	ldr	r3, [pc, #220]	@ (8007950 <ESP_Upkeep+0x974>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d94e      	bls.n	8007916 <ESP_Upkeep+0x93a>
        if(Mode == AT_MODE_SEND ) {
 8007878:	4b2d      	ldr	r3, [pc, #180]	@ (8007930 <ESP_Upkeep+0x954>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d14a      	bne.n	8007916 <ESP_Upkeep+0x93a>
           Mode = AT_MODE_GETTIME;
 8007880:	4b2b      	ldr	r3, [pc, #172]	@ (8007930 <ESP_Upkeep+0x954>)
 8007882:	2205      	movs	r2, #5
 8007884:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007886:	4b2c      	ldr	r3, [pc, #176]	@ (8007938 <ESP_Upkeep+0x95c>)
 8007888:	2202      	movs	r2, #2
 800788a:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 800788c:	4b25      	ldr	r3, [pc, #148]	@ (8007924 <ESP_Upkeep+0x948>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b30      	ldr	r3, [pc, #192]	@ (8007954 <ESP_Upkeep+0x978>)
 8007892:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007894:	4b30      	ldr	r3, [pc, #192]	@ (8007958 <ESP_Upkeep+0x97c>)
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800789a:	e03c      	b.n	8007916 <ESP_Upkeep+0x93a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800789c:	46c0      	nop			@ (mov r8, r8)
      break;
 800789e:	e03a      	b.n	8007916 <ESP_Upkeep+0x93a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80078a0:	4b2e      	ldr	r3, [pc, #184]	@ (800795c <ESP_Upkeep+0x980>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2201      	movs	r2, #1
 80078a6:	4053      	eors	r3, r2
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <ESP_Upkeep+0x8e4>
        Info("Do nothing until reset");
 80078ae:	4a25      	ldr	r2, [pc, #148]	@ (8007944 <ESP_Upkeep+0x968>)
 80078b0:	4b25      	ldr	r3, [pc, #148]	@ (8007948 <ESP_Upkeep+0x96c>)
 80078b2:	0019      	movs	r1, r3
 80078b4:	2002      	movs	r0, #2
 80078b6:	f00b f903 	bl	8012ac0 <CreateLine>
        msgdone = true;
 80078ba:	4b28      	ldr	r3, [pc, #160]	@ (800795c <ESP_Upkeep+0x980>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 80078c0:	f01a f90c 	bl	8021adc <GetUsbRxPointer>
 80078c4:	0003      	movs	r3, r0
 80078c6:	0018      	movs	r0, r3
 80078c8:	f000 f980 	bl	8007bcc <Process_PC_Config>
      break;
 80078cc:	e024      	b.n	8007918 <ESP_Upkeep+0x93c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 80078ce:	4a24      	ldr	r2, [pc, #144]	@ (8007960 <ESP_Upkeep+0x984>)
 80078d0:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <ESP_Upkeep+0x988>)
 80078d2:	0019      	movs	r1, r3
 80078d4:	2001      	movs	r0, #1
 80078d6:	f00b f8f3 	bl	8012ac0 <CreateLine>
      EspState = ESP_STATE_INIT;
 80078da:	4b17      	ldr	r3, [pc, #92]	@ (8007938 <ESP_Upkeep+0x95c>)
 80078dc:	2202      	movs	r2, #2
 80078de:	701a      	strb	r2, [r3, #0]
      break;
 80078e0:	e01a      	b.n	8007918 <ESP_Upkeep+0x93c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 80078e2:	4a21      	ldr	r2, [pc, #132]	@ (8007968 <ESP_Upkeep+0x98c>)
 80078e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007964 <ESP_Upkeep+0x988>)
 80078e6:	0019      	movs	r1, r3
 80078e8:	2001      	movs	r0, #1
 80078ea:	f00b f8e9 	bl	8012ac0 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80078ee:	4b12      	ldr	r3, [pc, #72]	@ (8007938 <ESP_Upkeep+0x95c>)
 80078f0:	2207      	movs	r2, #7
 80078f2:	701a      	strb	r2, [r3, #0]
      break;
 80078f4:	e010      	b.n	8007918 <ESP_Upkeep+0x93c>
      break;
 80078f6:	46c0      	nop			@ (mov r8, r8)
 80078f8:	e00e      	b.n	8007918 <ESP_Upkeep+0x93c>
        break;
 80078fa:	46c0      	nop			@ (mov r8, r8)
 80078fc:	e00c      	b.n	8007918 <ESP_Upkeep+0x93c>
      break;
 80078fe:	46c0      	nop			@ (mov r8, r8)
 8007900:	e00a      	b.n	8007918 <ESP_Upkeep+0x93c>
        break;
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	e008      	b.n	8007918 <ESP_Upkeep+0x93c>
    break;
 8007906:	46c0      	nop			@ (mov r8, r8)
 8007908:	e006      	b.n	8007918 <ESP_Upkeep+0x93c>
    break;
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	e004      	b.n	8007918 <ESP_Upkeep+0x93c>
      break;
 800790e:	46c0      	nop			@ (mov r8, r8)
 8007910:	e002      	b.n	8007918 <ESP_Upkeep+0x93c>
    break;
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	e000      	b.n	8007918 <ESP_Upkeep+0x93c>
      break;
 8007916:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <ESP_Upkeep+0x95c>)
 800791a:	781b      	ldrb	r3, [r3, #0]
}
 800791c:	0018      	movs	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	b002      	add	sp, #8
 8007922:	bdb0      	pop	{r4, r5, r7, pc}
 8007924:	20000684 	.word	0x20000684
 8007928:	200005bb 	.word	0x200005bb
 800792c:	200005c0 	.word	0x200005c0
 8007930:	2000068f 	.word	0x2000068f
 8007934:	200005b9 	.word	0x200005b9
 8007938:	2000002c 	.word	0x2000002c
 800793c:	200005bc 	.word	0x200005bc
 8007940:	200005be 	.word	0x200005be
 8007944:	0802a608 	.word	0x0802a608
 8007948:	0802a5a0 	.word	0x0802a5a0
 800794c:	200005bd 	.word	0x200005bd
 8007950:	20000688 	.word	0x20000688
 8007954:	20000028 	.word	0x20000028
 8007958:	20000002 	.word	0x20000002
 800795c:	200005bf 	.word	0x200005bf
 8007960:	0802a620 	.word	0x0802a620
 8007964:	08029454 	.word	0x08029454
 8007968:	0802a634 	.word	0x0802a634

0800796c <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007974:	4b12      	ldr	r3, [pc, #72]	@ (80079c0 <I2CSensors_Init+0x54>)
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 800797a:	4a12      	ldr	r2, [pc, #72]	@ (80079c4 <I2CSensors_Init+0x58>)
 800797c:	4b12      	ldr	r3, [pc, #72]	@ (80079c8 <I2CSensors_Init+0x5c>)
 800797e:	0011      	movs	r1, r2
 8007980:	0018      	movs	r0, r3
 8007982:	f00b fa99 	bl	8012eb8 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8007986:	4a0f      	ldr	r2, [pc, #60]	@ (80079c4 <I2CSensors_Init+0x58>)
 8007988:	4b0f      	ldr	r3, [pc, #60]	@ (80079c8 <I2CSensors_Init+0x5c>)
 800798a:	0011      	movs	r1, r2
 800798c:	0018      	movs	r0, r3
 800798e:	f008 f901 	bl	800fb94 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007992:	4a0e      	ldr	r2, [pc, #56]	@ (80079cc <I2CSensors_Init+0x60>)
 8007994:	490b      	ldr	r1, [pc, #44]	@ (80079c4 <I2CSensors_Init+0x58>)
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <I2CSensors_Init+0x5c>)
 8007998:	0018      	movs	r0, r3
 800799a:	f002 fa37 	bl	8009e0c <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 800799e:	4a0c      	ldr	r2, [pc, #48]	@ (80079d0 <I2CSensors_Init+0x64>)
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <I2CSensors_Init+0x68>)
 80079a2:	0011      	movs	r1, r2
 80079a4:	0018      	movs	r0, r3
 80079a6:	f002 fff3 	bl	800a990 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80079aa:	4a09      	ldr	r2, [pc, #36]	@ (80079d0 <I2CSensors_Init+0x64>)
 80079ac:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <I2CSensors_Init+0x68>)
 80079ae:	0011      	movs	r1, r2
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7fb fec9 	bl	8003748 <ENS_Init>
}
 80079b6:	46c0      	nop			@ (mov r8, r8)
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b002      	add	sp, #8
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	200007c0 	.word	0x200007c0
 80079c4:	08007a85 	.word	0x08007a85
 80079c8:	08007a31 	.word	0x08007a31
 80079cc:	080079d9 	.word	0x080079d9
 80079d0:	08007b55 	.word	0x08007b55
 80079d4:	08007ad9 	.word	0x08007ad9

080079d8 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80079d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079da:	b087      	sub	sp, #28
 80079dc:	af02      	add	r7, sp, #8
 80079de:	6039      	str	r1, [r7, #0]
 80079e0:	0011      	movs	r1, r2
 80079e2:	1dfb      	adds	r3, r7, #7
 80079e4:	1c02      	adds	r2, r0, #0
 80079e6:	701a      	strb	r2, [r3, #0]
 80079e8:	1dbb      	adds	r3, r7, #6
 80079ea:	1c0a      	adds	r2, r1, #0
 80079ec:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 80079ee:	4b0f      	ldr	r3, [pc, #60]	@ (8007a2c <ReadI2CDirect+0x54>)
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	1dfb      	adds	r3, r7, #7
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	18db      	adds	r3, r3, r3
 80079fa:	b299      	uxth	r1, r3
 80079fc:	1dbb      	adds	r3, r7, #6
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	260f      	movs	r6, #15
 8007a04:	19bc      	adds	r4, r7, r6
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	25fa      	movs	r5, #250	@ 0xfa
 8007a0a:	9500      	str	r5, [sp, #0]
 8007a0c:	f00d f9f6 	bl	8014dfc <HAL_I2C_Master_Receive>
 8007a10:	0003      	movs	r3, r0
 8007a12:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007a14:	19bb      	adds	r3, r7, r6
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <ReadI2CDirect+0x48>
        return false;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e000      	b.n	8007a22 <ReadI2CDirect+0x4a>
    }
    return true;
 8007a20:	2301      	movs	r3, #1
}
 8007a22:	0018      	movs	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b005      	add	sp, #20
 8007a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	200007c0 	.word	0x200007c0

08007a30 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007a30:	b5b0      	push	{r4, r5, r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6039      	str	r1, [r7, #0]
 8007a38:	0011      	movs	r1, r2
 8007a3a:	1dfb      	adds	r3, r7, #7
 8007a3c:	1c02      	adds	r2, r0, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	1dbb      	adds	r3, r7, #6
 8007a42:	1c0a      	adds	r2, r1, #0
 8007a44:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007a46:	4b0e      	ldr	r3, [pc, #56]	@ (8007a80 <ReadI2C+0x50>)
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	1dfb      	adds	r3, r7, #7
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	18db      	adds	r3, r3, r3
 8007a52:	b299      	uxth	r1, r3
 8007a54:	1dbb      	adds	r3, r7, #6
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	250f      	movs	r5, #15
 8007a5c:	197c      	adds	r4, r7, r5
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	f00d fbda 	bl	8015218 <HAL_I2C_Master_Receive_DMA>
 8007a64:	0003      	movs	r3, r0
 8007a66:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007a68:	197b      	adds	r3, r7, r5
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <ReadI2C+0x44>
        return false;
 8007a70:	2300      	movs	r3, #0
 8007a72:	e000      	b.n	8007a76 <ReadI2C+0x46>
    }
    return true;
 8007a74:	2301      	movs	r3, #1
}
 8007a76:	0018      	movs	r0, r3
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	b004      	add	sp, #16
 8007a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a7e:	46c0      	nop			@ (mov r8, r8)
 8007a80:	200007c0 	.word	0x200007c0

08007a84 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007a84:	b5b0      	push	{r4, r5, r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6039      	str	r1, [r7, #0]
 8007a8c:	0011      	movs	r1, r2
 8007a8e:	1dfb      	adds	r3, r7, #7
 8007a90:	1c02      	adds	r2, r0, #0
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	1dbb      	adds	r3, r7, #6
 8007a96:	1c0a      	adds	r2, r1, #0
 8007a98:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad4 <WriteI2C+0x50>)
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	1dfb      	adds	r3, r7, #7
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	18db      	adds	r3, r3, r3
 8007aa6:	b299      	uxth	r1, r3
 8007aa8:	1dbb      	adds	r3, r7, #6
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	250f      	movs	r5, #15
 8007ab0:	197c      	adds	r4, r7, r5
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	f00d faaa 	bl	801500c <HAL_I2C_Master_Transmit_DMA>
 8007ab8:	0003      	movs	r3, r0
 8007aba:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007abc:	197b      	adds	r3, r7, r5
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <WriteI2C+0x44>
        return false;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <WriteI2C+0x46>
    }
    return true;
 8007ac8:	2301      	movs	r3, #1
}
 8007aca:	0018      	movs	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b004      	add	sp, #16
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad2:	46c0      	nop			@ (mov r8, r8)
 8007ad4:	200007c0 	.word	0x200007c0

08007ad8 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ada:	b08b      	sub	sp, #44	@ 0x2c
 8007adc:	af04      	add	r7, sp, #16
 8007ade:	0004      	movs	r4, r0
 8007ae0:	0008      	movs	r0, r1
 8007ae2:	0011      	movs	r1, r2
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	250f      	movs	r5, #15
 8007ae8:	197b      	adds	r3, r7, r5
 8007aea:	1c22      	adds	r2, r4, #0
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	260c      	movs	r6, #12
 8007af0:	19bb      	adds	r3, r7, r6
 8007af2:	1c02      	adds	r2, r0, #0
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	230a      	movs	r3, #10
 8007af8:	18fb      	adds	r3, r7, r3
 8007afa:	1c0a      	adds	r2, r1, #0
 8007afc:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007afe:	4b14      	ldr	r3, [pc, #80]	@ (8007b50 <ReadI2CMem+0x78>)
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	197b      	adds	r3, r7, r5
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	18db      	adds	r3, r3, r3
 8007b0a:	b299      	uxth	r1, r3
 8007b0c:	2217      	movs	r2, #23
 8007b0e:	18bc      	adds	r4, r7, r2
 8007b10:	230a      	movs	r3, #10
 8007b12:	18fb      	adds	r3, r7, r3
 8007b14:	881d      	ldrh	r5, [r3, #0]
 8007b16:	19bb      	adds	r3, r7, r6
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	2364      	movs	r3, #100	@ 0x64
 8007b1c:	9302      	str	r3, [sp, #8]
 8007b1e:	2328      	movs	r3, #40	@ 0x28
 8007b20:	2608      	movs	r6, #8
 8007b22:	199b      	adds	r3, r3, r6
 8007b24:	19db      	adds	r3, r3, r7
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	002b      	movs	r3, r5
 8007b30:	f00d fc78 	bl	8015424 <HAL_I2C_Mem_Read>
 8007b34:	0003      	movs	r3, r0
 8007b36:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007b38:	2217      	movs	r2, #23
 8007b3a:	18bb      	adds	r3, r7, r2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <ReadI2CMem+0x6e>
     return false;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e000      	b.n	8007b48 <ReadI2CMem+0x70>
   }
   return true;
 8007b46:	2301      	movs	r3, #1
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b007      	add	sp, #28
 8007b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b50:	200007c0 	.word	0x200007c0

08007b54 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b089      	sub	sp, #36	@ 0x24
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	0004      	movs	r4, r0
 8007b5c:	0008      	movs	r0, r1
 8007b5e:	0011      	movs	r1, r2
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	250f      	movs	r5, #15
 8007b64:	197b      	adds	r3, r7, r5
 8007b66:	1c22      	adds	r2, r4, #0
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	260c      	movs	r6, #12
 8007b6c:	19bb      	adds	r3, r7, r6
 8007b6e:	1c02      	adds	r2, r0, #0
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	230a      	movs	r3, #10
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	1c0a      	adds	r2, r1, #0
 8007b78:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007b7a:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <WriteI2CMem+0x74>)
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	197b      	adds	r3, r7, r5
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	18db      	adds	r3, r3, r3
 8007b86:	b299      	uxth	r1, r3
 8007b88:	2217      	movs	r2, #23
 8007b8a:	18bc      	adds	r4, r7, r2
 8007b8c:	230a      	movs	r3, #10
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	881d      	ldrh	r5, [r3, #0]
 8007b92:	19bb      	adds	r3, r7, r6
 8007b94:	881a      	ldrh	r2, [r3, #0]
 8007b96:	2328      	movs	r3, #40	@ 0x28
 8007b98:	2608      	movs	r6, #8
 8007b9a:	199b      	adds	r3, r3, r6
 8007b9c:	19db      	adds	r3, r3, r7
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	002b      	movs	r3, r5
 8007ba8:	f00d fd70 	bl	801568c <HAL_I2C_Mem_Write_DMA>
 8007bac:	0003      	movs	r3, r0
 8007bae:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007bb0:	2217      	movs	r2, #23
 8007bb2:	18bb      	adds	r3, r7, r2
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <WriteI2CMem+0x6a>
     return false;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e000      	b.n	8007bc0 <WriteI2CMem+0x6c>
   }
   return true;
 8007bbe:	2301      	movs	r3, #1
}
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	b007      	add	sp, #28
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc8:	200007c0 	.word	0x200007c0

08007bcc <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007bcc:	b590      	push	{r4, r7, lr}
 8007bce:	b0c3      	sub	sp, #268	@ 0x10c
 8007bd0:	af3e      	add	r7, sp, #248	@ 0xf8
 8007bd2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007bd4:	f019 ffa2 	bl	8021b1c <GetUsbRxDataSize>
 8007bd8:	0003      	movs	r3, r0
 8007bda:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	d971      	bls.n	8007cc6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2123      	movs	r1, #35	@ 0x23
 8007be6:	0018      	movs	r0, r3
 8007be8:	f01d f9ba 	bl	8024f60 <strchr>
 8007bec:	0003      	movs	r3, r0
 8007bee:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d065      	beq.n	8007cc2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	785a      	ldrb	r2, [r3, #1]
 8007bfa:	4b34      	ldr	r3, [pc, #208]	@ (8007ccc <Process_PC_Config+0x100>)
 8007bfc:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	789a      	ldrb	r2, [r3, #2]
 8007c02:	4b32      	ldr	r3, [pc, #200]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c04:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8007c06:	4b31      	ldr	r3, [pc, #196]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	3305      	adds	r3, #5
 8007c0c:	001a      	movs	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d351      	bcc.n	8007cb8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	1cd9      	adds	r1, r3, #3
 8007c18:	4b2c      	ldr	r3, [pc, #176]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007cd0 <Process_PC_Config+0x104>)
 8007c20:	0018      	movs	r0, r3
 8007c22:	f01d fa71 	bl	8025108 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8007c26:	4b29      	ldr	r3, [pc, #164]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	3303      	adds	r3, #3
 8007c2c:	001a      	movs	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	189b      	adds	r3, r3, r2
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	021b      	lsls	r3, r3, #8
 8007c36:	b21a      	sxth	r2, r3
 8007c38:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	18cb      	adds	r3, r1, r3
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	b21b      	sxth	r3, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b21b      	sxth	r3, r3
 8007c4a:	b299      	uxth	r1, r3
 8007c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c4e:	2381      	movs	r3, #129	@ 0x81
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8007c54:	4a1d      	ldr	r2, [pc, #116]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c56:	2381      	movs	r3, #129	@ 0x81
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	5ad4      	ldrh	r4, [r2, r3]
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	3303      	adds	r3, #3
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	0011      	movs	r1, r2
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f000 fa13 	bl	8008094 <CRC16_ARC>
 8007c6e:	0003      	movs	r3, r0
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d007      	beq.n	8007c84 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8007c74:	4b15      	ldr	r3, [pc, #84]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c76:	785a      	ldrb	r2, [r3, #1]
 8007c78:	4b15      	ldr	r3, [pc, #84]	@ (8007cd0 <Process_PC_Config+0x104>)
 8007c7a:	0019      	movs	r1, r3
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f000 f9b7 	bl	8007ff0 <Create_Message>
 8007c82:	e016      	b.n	8007cb2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8007c84:	4c11      	ldr	r4, [pc, #68]	@ (8007ccc <Process_PC_Config+0x100>)
 8007c86:	466b      	mov	r3, sp
 8007c88:	0018      	movs	r0, r3
 8007c8a:	0023      	movs	r3, r4
 8007c8c:	3310      	adds	r3, #16
 8007c8e:	22f4      	movs	r2, #244	@ 0xf4
 8007c90:	0019      	movs	r1, r3
 8007c92:	f01d fa39 	bl	8025108 <memcpy>
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	68a2      	ldr	r2, [r4, #8]
 8007c9c:	68e3      	ldr	r3, [r4, #12]
 8007c9e:	f000 f819 	bl	8007cd4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <Process_PC_Config+0x100>)
 8007ca4:	7818      	ldrb	r0, [r3, #0]
 8007ca6:	4b09      	ldr	r3, [pc, #36]	@ (8007ccc <Process_PC_Config+0x100>)
 8007ca8:	785a      	ldrb	r2, [r3, #1]
 8007caa:	4b09      	ldr	r3, [pc, #36]	@ (8007cd0 <Process_PC_Config+0x104>)
 8007cac:	0019      	movs	r1, r3
 8007cae:	f000 f99f 	bl	8007ff0 <Create_Message>
                }
                ResetUsbRxDataSize();
 8007cb2:	f019 ff1b 	bl	8021aec <ResetUsbRxDataSize>
                return;
 8007cb6:	e006      	b.n	8007cc6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f019 ff38 	bl	8021b30 <GetUsbRxNextChunk>
 8007cc0:	e001      	b.n	8007cc6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8007cc2:	f019 ff13 	bl	8021aec <ResetUsbRxDataSize>
        }
    }
}
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b005      	add	sp, #20
 8007cca:	bd90      	pop	{r4, r7, pc}
 8007ccc:	200007c4 	.word	0x200007c4
 8007cd0:	200007c6 	.word	0x200007c6

08007cd4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	b5b0      	push	{r4, r5, r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	2518      	movs	r5, #24
 8007cde:	197c      	adds	r4, r7, r5
 8007ce0:	6020      	str	r0, [r4, #0]
 8007ce2:	6061      	str	r1, [r4, #4]
 8007ce4:	60a2      	str	r2, [r4, #8]
 8007ce6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8007ce8:	197b      	adds	r3, r7, r5
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2bfe      	cmp	r3, #254	@ 0xfe
 8007cee:	d100      	bne.n	8007cf2 <ProcessCmd+0x1e>
 8007cf0:	e122      	b.n	8007f38 <ProcessCmd+0x264>
 8007cf2:	dd00      	ble.n	8007cf6 <ProcessCmd+0x22>
 8007cf4:	e142      	b.n	8007f7c <ProcessCmd+0x2a8>
 8007cf6:	2b18      	cmp	r3, #24
 8007cf8:	dc0a      	bgt.n	8007d10 <ProcessCmd+0x3c>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	da00      	bge.n	8007d00 <ProcessCmd+0x2c>
 8007cfe:	e13d      	b.n	8007f7c <ProcessCmd+0x2a8>
 8007d00:	2b18      	cmp	r3, #24
 8007d02:	d900      	bls.n	8007d06 <ProcessCmd+0x32>
 8007d04:	e13a      	b.n	8007f7c <ProcessCmd+0x2a8>
 8007d06:	009a      	lsls	r2, r3, #2
 8007d08:	4ba0      	ldr	r3, [pc, #640]	@ (8007f8c <ProcessCmd+0x2b8>)
 8007d0a:	18d3      	adds	r3, r2, r3
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	469f      	mov	pc, r3
 8007d10:	2bfd      	cmp	r3, #253	@ 0xfd
 8007d12:	d100      	bne.n	8007d16 <ProcessCmd+0x42>
 8007d14:	e108      	b.n	8007f28 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 8007d16:	e131      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d18:	2118      	movs	r1, #24
 8007d1a:	187b      	adds	r3, r7, r1
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	001a      	movs	r2, r3
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	1c99      	adds	r1, r3, #2
 8007d24:	489a      	ldr	r0, [pc, #616]	@ (8007f90 <ProcessCmd+0x2bc>)
 8007d26:	230c      	movs	r3, #12
 8007d28:	f003 fa2c 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007d2c:	e126      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d2e:	2118      	movs	r1, #24
 8007d30:	187b      	adds	r3, r7, r1
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	001a      	movs	r2, r3
 8007d36:	187b      	adds	r3, r7, r1
 8007d38:	1c99      	adds	r1, r3, #2
 8007d3a:	4896      	ldr	r0, [pc, #600]	@ (8007f94 <ProcessCmd+0x2c0>)
 8007d3c:	230c      	movs	r3, #12
 8007d3e:	f003 fa21 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007d42:	e11b      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d44:	2118      	movs	r1, #24
 8007d46:	187b      	adds	r3, r7, r1
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	001a      	movs	r2, r3
 8007d4c:	187b      	adds	r3, r7, r1
 8007d4e:	1c99      	adds	r1, r3, #2
 8007d50:	4891      	ldr	r0, [pc, #580]	@ (8007f98 <ProcessCmd+0x2c4>)
 8007d52:	230c      	movs	r3, #12
 8007d54:	f003 fa16 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007d58:	e110      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d5a:	2118      	movs	r1, #24
 8007d5c:	187b      	adds	r3, r7, r1
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	001a      	movs	r2, r3
 8007d62:	187b      	adds	r3, r7, r1
 8007d64:	1c99      	adds	r1, r3, #2
 8007d66:	488d      	ldr	r0, [pc, #564]	@ (8007f9c <ProcessCmd+0x2c8>)
 8007d68:	230c      	movs	r3, #12
 8007d6a:	f003 fa0b 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007d6e:	e105      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d70:	2118      	movs	r1, #24
 8007d72:	187b      	adds	r3, r7, r1
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	001a      	movs	r2, r3
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	1c99      	adds	r1, r3, #2
 8007d7c:	4888      	ldr	r0, [pc, #544]	@ (8007fa0 <ProcessCmd+0x2cc>)
 8007d7e:	230c      	movs	r3, #12
 8007d80:	f003 fa00 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007d84:	e0fa      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d86:	2118      	movs	r1, #24
 8007d88:	187b      	adds	r3, r7, r1
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	187b      	adds	r3, r7, r1
 8007d90:	1c99      	adds	r1, r3, #2
 8007d92:	4884      	ldr	r0, [pc, #528]	@ (8007fa4 <ProcessCmd+0x2d0>)
 8007d94:	230c      	movs	r3, #12
 8007d96:	f003 f9f5 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007d9a:	e0ef      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d9c:	2118      	movs	r1, #24
 8007d9e:	187b      	adds	r3, r7, r1
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	001a      	movs	r2, r3
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	1c99      	adds	r1, r3, #2
 8007da8:	487f      	ldr	r0, [pc, #508]	@ (8007fa8 <ProcessCmd+0x2d4>)
 8007daa:	230c      	movs	r3, #12
 8007dac:	f003 f9ea 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007db0:	e0e4      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007db2:	2118      	movs	r1, #24
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	001a      	movs	r2, r3
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	1c99      	adds	r1, r3, #2
 8007dbe:	487b      	ldr	r0, [pc, #492]	@ (8007fac <ProcessCmd+0x2d8>)
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	f003 f9df 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007dc6:	e0d9      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007dc8:	2118      	movs	r1, #24
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	001a      	movs	r2, r3
 8007dd0:	187b      	adds	r3, r7, r1
 8007dd2:	1c99      	adds	r1, r3, #2
 8007dd4:	4876      	ldr	r0, [pc, #472]	@ (8007fb0 <ProcessCmd+0x2dc>)
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	f003 f9d4 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007ddc:	e0ce      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007dde:	2118      	movs	r1, #24
 8007de0:	187b      	adds	r3, r7, r1
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	001a      	movs	r2, r3
 8007de6:	187b      	adds	r3, r7, r1
 8007de8:	1c99      	adds	r1, r3, #2
 8007dea:	4872      	ldr	r0, [pc, #456]	@ (8007fb4 <ProcessCmd+0x2e0>)
 8007dec:	230c      	movs	r3, #12
 8007dee:	f003 f9c9 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007df2:	e0c3      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007df4:	2118      	movs	r1, #24
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	001a      	movs	r2, r3
 8007dfc:	187b      	adds	r3, r7, r1
 8007dfe:	1c99      	adds	r1, r3, #2
 8007e00:	486d      	ldr	r0, [pc, #436]	@ (8007fb8 <ProcessCmd+0x2e4>)
 8007e02:	230c      	movs	r3, #12
 8007e04:	f003 f9be 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e08:	e0b8      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8007e0a:	2118      	movs	r1, #24
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	001a      	movs	r2, r3
 8007e12:	187b      	adds	r3, r7, r1
 8007e14:	1c99      	adds	r1, r3, #2
 8007e16:	4869      	ldr	r0, [pc, #420]	@ (8007fbc <ProcessCmd+0x2e8>)
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f003 f9b3 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e1e:	e0ad      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e20:	2118      	movs	r1, #24
 8007e22:	187b      	adds	r3, r7, r1
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	001a      	movs	r2, r3
 8007e28:	187b      	adds	r3, r7, r1
 8007e2a:	1c99      	adds	r1, r3, #2
 8007e2c:	4864      	ldr	r0, [pc, #400]	@ (8007fc0 <ProcessCmd+0x2ec>)
 8007e2e:	230c      	movs	r3, #12
 8007e30:	f003 f9a8 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e34:	e0a2      	b.n	8007f7c <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e36:	2118      	movs	r1, #24
 8007e38:	187b      	adds	r3, r7, r1
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	001a      	movs	r2, r3
 8007e3e:	187b      	adds	r3, r7, r1
 8007e40:	1c99      	adds	r1, r3, #2
 8007e42:	4860      	ldr	r0, [pc, #384]	@ (8007fc4 <ProcessCmd+0x2f0>)
 8007e44:	230c      	movs	r3, #12
 8007e46:	f003 f99d 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e4a:	e097      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e4c:	2118      	movs	r1, #24
 8007e4e:	187b      	adds	r3, r7, r1
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	001a      	movs	r2, r3
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	1c99      	adds	r1, r3, #2
 8007e58:	485b      	ldr	r0, [pc, #364]	@ (8007fc8 <ProcessCmd+0x2f4>)
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	f003 f992 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e60:	e08c      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e62:	2118      	movs	r1, #24
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	001a      	movs	r2, r3
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	1c99      	adds	r1, r3, #2
 8007e6e:	4857      	ldr	r0, [pc, #348]	@ (8007fcc <ProcessCmd+0x2f8>)
 8007e70:	230c      	movs	r3, #12
 8007e72:	f003 f987 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e76:	e081      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e78:	2118      	movs	r1, #24
 8007e7a:	187b      	adds	r3, r7, r1
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	001a      	movs	r2, r3
 8007e80:	187b      	adds	r3, r7, r1
 8007e82:	1c99      	adds	r1, r3, #2
 8007e84:	4852      	ldr	r0, [pc, #328]	@ (8007fd0 <ProcessCmd+0x2fc>)
 8007e86:	230c      	movs	r3, #12
 8007e88:	f003 f97c 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007e8c:	e076      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e8e:	2118      	movs	r1, #24
 8007e90:	187b      	adds	r3, r7, r1
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	001a      	movs	r2, r3
 8007e96:	187b      	adds	r3, r7, r1
 8007e98:	1c99      	adds	r1, r3, #2
 8007e9a:	484e      	ldr	r0, [pc, #312]	@ (8007fd4 <ProcessCmd+0x300>)
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	f003 f971 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007ea2:	e06b      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ea4:	2118      	movs	r1, #24
 8007ea6:	187b      	adds	r3, r7, r1
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	001a      	movs	r2, r3
 8007eac:	187b      	adds	r3, r7, r1
 8007eae:	1c99      	adds	r1, r3, #2
 8007eb0:	4849      	ldr	r0, [pc, #292]	@ (8007fd8 <ProcessCmd+0x304>)
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	f003 f966 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007eb8:	e060      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007eba:	2118      	movs	r1, #24
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	1c99      	adds	r1, r3, #2
 8007ec6:	4845      	ldr	r0, [pc, #276]	@ (8007fdc <ProcessCmd+0x308>)
 8007ec8:	230c      	movs	r3, #12
 8007eca:	f003 f95b 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007ece:	e055      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ed0:	2118      	movs	r1, #24
 8007ed2:	187b      	adds	r3, r7, r1
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	187b      	adds	r3, r7, r1
 8007eda:	1c99      	adds	r1, r3, #2
 8007edc:	4840      	ldr	r0, [pc, #256]	@ (8007fe0 <ProcessCmd+0x30c>)
 8007ede:	230c      	movs	r3, #12
 8007ee0:	f003 f950 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007ee4:	e04a      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ee6:	2118      	movs	r1, #24
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	001a      	movs	r2, r3
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	1c99      	adds	r1, r3, #2
 8007ef2:	483c      	ldr	r0, [pc, #240]	@ (8007fe4 <ProcessCmd+0x310>)
 8007ef4:	230c      	movs	r3, #12
 8007ef6:	f003 f945 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007efa:	e03f      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007efc:	2118      	movs	r1, #24
 8007efe:	187b      	adds	r3, r7, r1
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	001a      	movs	r2, r3
 8007f04:	187b      	adds	r3, r7, r1
 8007f06:	1c99      	adds	r1, r3, #2
 8007f08:	4837      	ldr	r0, [pc, #220]	@ (8007fe8 <ProcessCmd+0x314>)
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	f003 f93a 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007f10:	e034      	b.n	8007f7c <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007f12:	2118      	movs	r1, #24
 8007f14:	187b      	adds	r3, r7, r1
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	001a      	movs	r2, r3
 8007f1a:	187b      	adds	r3, r7, r1
 8007f1c:	1c99      	adds	r1, r3, #2
 8007f1e:	4833      	ldr	r0, [pc, #204]	@ (8007fec <ProcessCmd+0x318>)
 8007f20:	230c      	movs	r3, #12
 8007f22:	f003 f92f 	bl	800b184 <WriteUint8ArrayEepromSafe>
        break;
 8007f26:	e029      	b.n	8007f7c <ProcessCmd+0x2a8>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8007f28:	23c4      	movs	r3, #196	@ 0xc4
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4a18      	ldr	r2, [pc, #96]	@ (8007f90 <ProcessCmd+0x2bc>)
 8007f2e:	0019      	movs	r1, r3
 8007f30:	0010      	movs	r0, r2
 8007f32:	f003 f96c 	bl	800b20e <ClearEEprom>
        break;
 8007f36:	e021      	b.n	8007f7c <ProcessCmd+0x2a8>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8007f38:	2118      	movs	r1, #24
 8007f3a:	187b      	adds	r3, r7, r1
 8007f3c:	789b      	ldrb	r3, [r3, #2]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	b21a      	sxth	r2, r3
 8007f42:	187b      	adds	r3, r7, r1
 8007f44:	78db      	ldrb	r3, [r3, #3]
 8007f46:	b21b      	sxth	r3, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	b21a      	sxth	r2, r3
 8007f4c:	1dbb      	adds	r3, r7, #6
 8007f4e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8007f50:	1dbb      	adds	r3, r7, #6
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	23c0      	movs	r3, #192	@ 0xc0
 8007f56:	015b      	lsls	r3, r3, #5
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d207      	bcs.n	8007f6c <ProcessCmd+0x298>
                ClearEEprom(EEPromStartAddr, size);
 8007f5c:	1dbb      	adds	r3, r7, #6
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	4a0b      	ldr	r2, [pc, #44]	@ (8007f90 <ProcessCmd+0x2bc>)
 8007f62:	0019      	movs	r1, r3
 8007f64:	0010      	movs	r0, r2
 8007f66:	f003 f952 	bl	800b20e <ClearEEprom>
            break;
 8007f6a:	e006      	b.n	8007f7a <ProcessCmd+0x2a6>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8007f6c:	23c0      	movs	r3, #192	@ 0xc0
 8007f6e:	015b      	lsls	r3, r3, #5
 8007f70:	4a07      	ldr	r2, [pc, #28]	@ (8007f90 <ProcessCmd+0x2bc>)
 8007f72:	0019      	movs	r1, r3
 8007f74:	0010      	movs	r0, r2
 8007f76:	f003 f94a 	bl	800b20e <ClearEEprom>
            break;
 8007f7a:	46c0      	nop			@ (mov r8, r8)
}
 8007f7c:	46c0      	nop			@ (mov r8, r8)
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	b002      	add	sp, #8
 8007f82:	bcb0      	pop	{r4, r5, r7}
 8007f84:	bc08      	pop	{r3}
 8007f86:	b004      	add	sp, #16
 8007f88:	4718      	bx	r3
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	0802d090 	.word	0x0802d090
 8007f90:	08080000 	.word	0x08080000
 8007f94:	0808000c 	.word	0x0808000c
 8007f98:	08080018 	.word	0x08080018
 8007f9c:	08080024 	.word	0x08080024
 8007fa0:	08080030 	.word	0x08080030
 8007fa4:	0808003c 	.word	0x0808003c
 8007fa8:	08080048 	.word	0x08080048
 8007fac:	08080054 	.word	0x08080054
 8007fb0:	08080060 	.word	0x08080060
 8007fb4:	0808006c 	.word	0x0808006c
 8007fb8:	08080078 	.word	0x08080078
 8007fbc:	08080090 	.word	0x08080090
 8007fc0:	080800b0 	.word	0x080800b0
 8007fc4:	080800bc 	.word	0x080800bc
 8007fc8:	080800c8 	.word	0x080800c8
 8007fcc:	080800d4 	.word	0x080800d4
 8007fd0:	080800e0 	.word	0x080800e0
 8007fd4:	080800ec 	.word	0x080800ec
 8007fd8:	080800f8 	.word	0x080800f8
 8007fdc:	08080104 	.word	0x08080104
 8007fe0:	08080110 	.word	0x08080110
 8007fe4:	08080130 	.word	0x08080130
 8007fe8:	08080170 	.word	0x08080170
 8007fec:	0808017c 	.word	0x0808017c

08007ff0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8007ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6039      	str	r1, [r7, #0]
 8007ff8:	0011      	movs	r1, r2
 8007ffa:	1dfb      	adds	r3, r7, #7
 8007ffc:	1c02      	adds	r2, r0, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	1dbb      	adds	r3, r7, #6
 8008002:	1c0a      	adds	r2, r1, #0
 8008004:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8008006:	2223      	movs	r2, #35	@ 0x23
 8008008:	4b20      	ldr	r3, [pc, #128]	@ (800808c <Create_Message+0x9c>)
 800800a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800800c:	4b1f      	ldr	r3, [pc, #124]	@ (800808c <Create_Message+0x9c>)
 800800e:	1dfa      	adds	r2, r7, #7
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8008014:	4b1d      	ldr	r3, [pc, #116]	@ (800808c <Create_Message+0x9c>)
 8008016:	1dba      	adds	r2, r7, #6
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800801c:	1dbb      	adds	r3, r7, #6
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	4b1b      	ldr	r3, [pc, #108]	@ (8008090 <Create_Message+0xa0>)
 8008024:	0018      	movs	r0, r3
 8008026:	f01d f86f 	bl	8025108 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800802a:	1dbb      	adds	r3, r7, #6
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b29a      	uxth	r2, r3
 8008030:	250e      	movs	r5, #14
 8008032:	197b      	adds	r3, r7, r5
 8008034:	3203      	adds	r2, #3
 8008036:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008038:	260c      	movs	r6, #12
 800803a:	19bc      	adds	r4, r7, r6
 800803c:	197b      	adds	r3, r7, r5
 800803e:	881a      	ldrh	r2, [r3, #0]
 8008040:	4b12      	ldr	r3, [pc, #72]	@ (800808c <Create_Message+0x9c>)
 8008042:	0011      	movs	r1, r2
 8008044:	0018      	movs	r0, r3
 8008046:	f000 f825 	bl	8008094 <CRC16_ARC>
 800804a:	0003      	movs	r3, r0
 800804c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800804e:	0030      	movs	r0, r6
 8008050:	183b      	adds	r3, r7, r0
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	0a1b      	lsrs	r3, r3, #8
 8008056:	b29a      	uxth	r2, r3
 8008058:	197b      	adds	r3, r7, r5
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b2d1      	uxtb	r1, r2
 800805e:	4a0b      	ldr	r2, [pc, #44]	@ (800808c <Create_Message+0x9c>)
 8008060:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008062:	197b      	adds	r3, r7, r5
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	3301      	adds	r3, #1
 8008068:	183a      	adds	r2, r7, r0
 800806a:	8812      	ldrh	r2, [r2, #0]
 800806c:	b2d1      	uxtb	r1, r2
 800806e:	4a07      	ldr	r2, [pc, #28]	@ (800808c <Create_Message+0x9c>)
 8008070:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008072:	197b      	adds	r3, r7, r5
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	3302      	adds	r3, #2
 8008078:	b29a      	uxth	r2, r3
 800807a:	4b04      	ldr	r3, [pc, #16]	@ (800808c <Create_Message+0x9c>)
 800807c:	0011      	movs	r1, r2
 800807e:	0018      	movs	r0, r3
 8008080:	f019 fcf2 	bl	8021a68 <CDC_Transmit_FS>
}
 8008084:	46c0      	nop			@ (mov r8, r8)
 8008086:	46bd      	mov	sp, r7
 8008088:	b005      	add	sp, #20
 800808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808c:	200008d0 	.word	0x200008d0
 8008090:	200008d3 	.word	0x200008d3

08008094 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	000a      	movs	r2, r1
 800809e:	1cbb      	adds	r3, r7, #2
 80080a0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80080a2:	2316      	movs	r3, #22
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	2200      	movs	r2, #0
 80080a8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80080aa:	2300      	movs	r3, #0
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	e02e      	b.n	800810e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	18d3      	adds	r3, r2, r3
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	0019      	movs	r1, r3
 80080ba:	2216      	movs	r2, #22
 80080bc:	18bb      	adds	r3, r7, r2
 80080be:	18ba      	adds	r2, r7, r2
 80080c0:	8812      	ldrh	r2, [r2, #0]
 80080c2:	404a      	eors	r2, r1
 80080c4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e01a      	b.n	8008102 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80080cc:	2116      	movs	r1, #22
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	2201      	movs	r2, #1
 80080d4:	4013      	ands	r3, r2
 80080d6:	d00b      	beq.n	80080f0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	187a      	adds	r2, r7, r1
 80080dc:	8812      	ldrh	r2, [r2, #0]
 80080de:	0852      	lsrs	r2, r2, #1
 80080e0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80080e2:	187b      	adds	r3, r7, r1
 80080e4:	187a      	adds	r2, r7, r1
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	490f      	ldr	r1, [pc, #60]	@ (8008128 <CRC16_ARC+0x94>)
 80080ea:	404a      	eors	r2, r1
 80080ec:	801a      	strh	r2, [r3, #0]
 80080ee:	e005      	b.n	80080fc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80080f0:	2216      	movs	r2, #22
 80080f2:	18bb      	adds	r3, r7, r2
 80080f4:	18ba      	adds	r2, r7, r2
 80080f6:	8812      	ldrh	r2, [r2, #0]
 80080f8:	0852      	lsrs	r2, r2, #1
 80080fa:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b07      	cmp	r3, #7
 8008106:	dde1      	ble.n	80080cc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	3301      	adds	r3, #1
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	1cbb      	adds	r3, r7, #2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	429a      	cmp	r2, r3
 8008116:	dbcb      	blt.n	80080b0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008118:	2316      	movs	r3, #22
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	881b      	ldrh	r3, [r3, #0]
}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b006      	add	sp, #24
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	ffffa001 	.word	0xffffa001

0800812c <printf_USB>:

void printf_USB(const char* message, ...)
{
 800812c:	b40f      	push	{r0, r1, r2, r3}
 800812e:	b590      	push	{r4, r7, lr}
 8008130:	b0a9      	sub	sp, #164	@ 0xa4
 8008132:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008134:	23ac      	movs	r3, #172	@ 0xac
 8008136:	2108      	movs	r1, #8
 8008138:	185b      	adds	r3, r3, r1
 800813a:	19db      	adds	r3, r3, r7
 800813c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	23a8      	movs	r3, #168	@ 0xa8
 8008142:	185b      	adds	r3, r3, r1
 8008144:	19db      	adds	r3, r3, r7
 8008146:	6819      	ldr	r1, [r3, #0]
 8008148:	2408      	movs	r4, #8
 800814a:	193b      	adds	r3, r7, r4
 800814c:	0018      	movs	r0, r3
 800814e:	f01c fe53 	bl	8024df8 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008152:	193b      	adds	r3, r7, r4
 8008154:	0018      	movs	r0, r3
 8008156:	f7f8 f809 	bl	800016c <strlen>
 800815a:	0003      	movs	r3, r0
 800815c:	b29a      	uxth	r2, r3
 800815e:	193b      	adds	r3, r7, r4
 8008160:	0011      	movs	r1, r2
 8008162:	0018      	movs	r0, r3
 8008164:	f019 fc80 	bl	8021a68 <CDC_Transmit_FS>
}
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b029      	add	sp, #164	@ 0xa4
 800816e:	bc90      	pop	{r4, r7}
 8008170:	bc08      	pop	{r3}
 8008172:	b004      	add	sp, #16
 8008174:	4718      	bx	r3

08008176 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	000a      	movs	r2, r1
 8008180:	1cfb      	adds	r3, r7, #3
 8008182:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008184:	1cfb      	adds	r3, r7, #3
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <PC_selectout+0x1e>
    printf_USB(msg);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	0018      	movs	r0, r3
 8008190:	f7ff ffcc 	bl	800812c <printf_USB>
  }
//  else {
    printf(msg);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	0018      	movs	r0, r3
 8008198:	f01c fd04 	bl	8024ba4 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800819c:	200a      	movs	r0, #10
 800819e:	f00b f9cf 	bl	8013540 <HAL_Delay>
}
 80081a2:	46c0      	nop			@ (mov r8, r8)
 80081a4:	46bd      	mov	sp, r7
 80081a6:	b002      	add	sp, #8
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <PC_show_Keys>:

void PC_show_Keys() {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  static uint8_t SEN55TempConfig[IdSize];         // 23
  static uint8_t SEN55HumidConfig[IdSize];        // 24

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 80081b0:	f000 fe68 	bl	8008e84 <Check_USB_PowerOn>
 80081b4:	1e03      	subs	r3, r0, #0
 80081b6:	d005      	beq.n	80081c4 <PC_show_Keys+0x18>
    usb_out = true;
 80081b8:	4b01      	ldr	r3, [pc, #4]	@ (80081c0 <PC_show_Keys+0x14>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e004      	b.n	80081ca <PC_show_Keys+0x1e>
 80081c0:	200009d5 	.word	0x200009d5
  }
  else {
    usb_out = false;
 80081c4:	4bfd      	ldr	r3, [pc, #1012]	@ (80085bc <PC_show_Keys+0x410>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80081ca:	4afd      	ldr	r2, [pc, #1012]	@ (80085c0 <PC_show_Keys+0x414>)
 80081cc:	4bfd      	ldr	r3, [pc, #1012]	@ (80085c4 <PC_show_Keys+0x418>)
 80081ce:	0011      	movs	r1, r2
 80081d0:	0018      	movs	r0, r3
 80081d2:	f01c fd57 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80081d6:	4bf9      	ldr	r3, [pc, #996]	@ (80085bc <PC_show_Keys+0x410>)
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	4bfa      	ldr	r3, [pc, #1000]	@ (80085c4 <PC_show_Keys+0x418>)
 80081dc:	0011      	movs	r1, r2
 80081de:	0018      	movs	r0, r3
 80081e0:	f7ff ffc9 	bl	8008176 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80081e4:	4bf8      	ldr	r3, [pc, #992]	@ (80085c8 <PC_show_Keys+0x41c>)
 80081e6:	48f9      	ldr	r0, [pc, #996]	@ (80085cc <PC_show_Keys+0x420>)
 80081e8:	220c      	movs	r2, #12
 80081ea:	0019      	movs	r1, r3
 80081ec:	f002 ffe6 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80081f0:	4af5      	ldr	r2, [pc, #980]	@ (80085c8 <PC_show_Keys+0x41c>)
 80081f2:	4bf7      	ldr	r3, [pc, #988]	@ (80085d0 <PC_show_Keys+0x424>)
 80081f4:	0011      	movs	r1, r2
 80081f6:	0018      	movs	r0, r3
 80081f8:	f7fc fe32 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 80081fc:	4af4      	ldr	r2, [pc, #976]	@ (80085d0 <PC_show_Keys+0x424>)
 80081fe:	49f5      	ldr	r1, [pc, #980]	@ (80085d4 <PC_show_Keys+0x428>)
 8008200:	4bf0      	ldr	r3, [pc, #960]	@ (80085c4 <PC_show_Keys+0x418>)
 8008202:	0018      	movs	r0, r3
 8008204:	f01c fd3e 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008208:	4bec      	ldr	r3, [pc, #944]	@ (80085bc <PC_show_Keys+0x410>)
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	4bed      	ldr	r3, [pc, #948]	@ (80085c4 <PC_show_Keys+0x418>)
 800820e:	0011      	movs	r1, r2
 8008210:	0018      	movs	r0, r3
 8008212:	f7ff ffb0 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008216:	4bf0      	ldr	r3, [pc, #960]	@ (80085d8 <PC_show_Keys+0x42c>)
 8008218:	48f0      	ldr	r0, [pc, #960]	@ (80085dc <PC_show_Keys+0x430>)
 800821a:	220c      	movs	r2, #12
 800821c:	0019      	movs	r1, r3
 800821e:	f002 ffcd 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008222:	4aed      	ldr	r2, [pc, #948]	@ (80085d8 <PC_show_Keys+0x42c>)
 8008224:	4bea      	ldr	r3, [pc, #936]	@ (80085d0 <PC_show_Keys+0x424>)
 8008226:	0011      	movs	r1, r2
 8008228:	0018      	movs	r0, r3
 800822a:	f7fc fe19 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 800822e:	4ae8      	ldr	r2, [pc, #928]	@ (80085d0 <PC_show_Keys+0x424>)
 8008230:	49eb      	ldr	r1, [pc, #940]	@ (80085e0 <PC_show_Keys+0x434>)
 8008232:	4be4      	ldr	r3, [pc, #912]	@ (80085c4 <PC_show_Keys+0x418>)
 8008234:	0018      	movs	r0, r3
 8008236:	f01c fd25 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800823a:	4be0      	ldr	r3, [pc, #896]	@ (80085bc <PC_show_Keys+0x410>)
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	4be1      	ldr	r3, [pc, #900]	@ (80085c4 <PC_show_Keys+0x418>)
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f7ff ff97 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008248:	4be6      	ldr	r3, [pc, #920]	@ (80085e4 <PC_show_Keys+0x438>)
 800824a:	48e7      	ldr	r0, [pc, #924]	@ (80085e8 <PC_show_Keys+0x43c>)
 800824c:	220c      	movs	r2, #12
 800824e:	0019      	movs	r1, r3
 8008250:	f002 ffb4 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008254:	4ae3      	ldr	r2, [pc, #908]	@ (80085e4 <PC_show_Keys+0x438>)
 8008256:	4bde      	ldr	r3, [pc, #888]	@ (80085d0 <PC_show_Keys+0x424>)
 8008258:	0011      	movs	r1, r2
 800825a:	0018      	movs	r0, r3
 800825c:	f7fc fe00 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 8008260:	4adb      	ldr	r2, [pc, #876]	@ (80085d0 <PC_show_Keys+0x424>)
 8008262:	49e2      	ldr	r1, [pc, #904]	@ (80085ec <PC_show_Keys+0x440>)
 8008264:	4bd7      	ldr	r3, [pc, #860]	@ (80085c4 <PC_show_Keys+0x418>)
 8008266:	0018      	movs	r0, r3
 8008268:	f01c fd0c 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800826c:	4bd3      	ldr	r3, [pc, #844]	@ (80085bc <PC_show_Keys+0x410>)
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	4bd4      	ldr	r3, [pc, #848]	@ (80085c4 <PC_show_Keys+0x418>)
 8008272:	0011      	movs	r1, r2
 8008274:	0018      	movs	r0, r3
 8008276:	f7ff ff7e 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800827a:	4bdd      	ldr	r3, [pc, #884]	@ (80085f0 <PC_show_Keys+0x444>)
 800827c:	48dd      	ldr	r0, [pc, #884]	@ (80085f4 <PC_show_Keys+0x448>)
 800827e:	220c      	movs	r2, #12
 8008280:	0019      	movs	r1, r3
 8008282:	f002 ff9b 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008286:	4ada      	ldr	r2, [pc, #872]	@ (80085f0 <PC_show_Keys+0x444>)
 8008288:	4bd1      	ldr	r3, [pc, #836]	@ (80085d0 <PC_show_Keys+0x424>)
 800828a:	0011      	movs	r1, r2
 800828c:	0018      	movs	r0, r3
 800828e:	f7fc fde7 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 8008292:	4acf      	ldr	r2, [pc, #828]	@ (80085d0 <PC_show_Keys+0x424>)
 8008294:	49d8      	ldr	r1, [pc, #864]	@ (80085f8 <PC_show_Keys+0x44c>)
 8008296:	4bcb      	ldr	r3, [pc, #812]	@ (80085c4 <PC_show_Keys+0x418>)
 8008298:	0018      	movs	r0, r3
 800829a:	f01c fcf3 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800829e:	4bc7      	ldr	r3, [pc, #796]	@ (80085bc <PC_show_Keys+0x410>)
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	4bc8      	ldr	r3, [pc, #800]	@ (80085c4 <PC_show_Keys+0x418>)
 80082a4:	0011      	movs	r1, r2
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7ff ff65 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80082ac:	4bd3      	ldr	r3, [pc, #844]	@ (80085fc <PC_show_Keys+0x450>)
 80082ae:	48d4      	ldr	r0, [pc, #848]	@ (8008600 <PC_show_Keys+0x454>)
 80082b0:	220c      	movs	r2, #12
 80082b2:	0019      	movs	r1, r3
 80082b4:	f002 ff82 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80082b8:	4ad0      	ldr	r2, [pc, #832]	@ (80085fc <PC_show_Keys+0x450>)
 80082ba:	4bc5      	ldr	r3, [pc, #788]	@ (80085d0 <PC_show_Keys+0x424>)
 80082bc:	0011      	movs	r1, r2
 80082be:	0018      	movs	r0, r3
 80082c0:	f7fc fdce 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 80082c4:	4ac2      	ldr	r2, [pc, #776]	@ (80085d0 <PC_show_Keys+0x424>)
 80082c6:	49cf      	ldr	r1, [pc, #828]	@ (8008604 <PC_show_Keys+0x458>)
 80082c8:	4bbe      	ldr	r3, [pc, #760]	@ (80085c4 <PC_show_Keys+0x418>)
 80082ca:	0018      	movs	r0, r3
 80082cc:	f01c fcda 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80082d0:	4bba      	ldr	r3, [pc, #744]	@ (80085bc <PC_show_Keys+0x410>)
 80082d2:	781a      	ldrb	r2, [r3, #0]
 80082d4:	4bbb      	ldr	r3, [pc, #748]	@ (80085c4 <PC_show_Keys+0x418>)
 80082d6:	0011      	movs	r1, r2
 80082d8:	0018      	movs	r0, r3
 80082da:	f7ff ff4c 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80082de:	4bca      	ldr	r3, [pc, #808]	@ (8008608 <PC_show_Keys+0x45c>)
 80082e0:	48ca      	ldr	r0, [pc, #808]	@ (800860c <PC_show_Keys+0x460>)
 80082e2:	220c      	movs	r2, #12
 80082e4:	0019      	movs	r1, r3
 80082e6:	f002 ff69 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80082ea:	4ac7      	ldr	r2, [pc, #796]	@ (8008608 <PC_show_Keys+0x45c>)
 80082ec:	4bb8      	ldr	r3, [pc, #736]	@ (80085d0 <PC_show_Keys+0x424>)
 80082ee:	0011      	movs	r1, r2
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7fc fdb5 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 80082f6:	4ac6      	ldr	r2, [pc, #792]	@ (8008610 <PC_show_Keys+0x464>)
 80082f8:	4bb2      	ldr	r3, [pc, #712]	@ (80085c4 <PC_show_Keys+0x418>)
 80082fa:	0011      	movs	r1, r2
 80082fc:	0018      	movs	r0, r3
 80082fe:	f01c fcc1 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008302:	4bae      	ldr	r3, [pc, #696]	@ (80085bc <PC_show_Keys+0x410>)
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	4baf      	ldr	r3, [pc, #700]	@ (80085c4 <PC_show_Keys+0x418>)
 8008308:	0011      	movs	r1, r2
 800830a:	0018      	movs	r0, r3
 800830c:	f7ff ff33 	bl	8008176 <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 8008310:	4aaf      	ldr	r2, [pc, #700]	@ (80085d0 <PC_show_Keys+0x424>)
 8008312:	49c0      	ldr	r1, [pc, #768]	@ (8008614 <PC_show_Keys+0x468>)
 8008314:	4bab      	ldr	r3, [pc, #684]	@ (80085c4 <PC_show_Keys+0x418>)
 8008316:	0018      	movs	r0, r3
 8008318:	f01c fcb4 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800831c:	4ba7      	ldr	r3, [pc, #668]	@ (80085bc <PC_show_Keys+0x410>)
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	4ba8      	ldr	r3, [pc, #672]	@ (80085c4 <PC_show_Keys+0x418>)
 8008322:	0011      	movs	r1, r2
 8008324:	0018      	movs	r0, r3
 8008326:	f7ff ff26 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 800832a:	4bbb      	ldr	r3, [pc, #748]	@ (8008618 <PC_show_Keys+0x46c>)
 800832c:	48bb      	ldr	r0, [pc, #748]	@ (800861c <PC_show_Keys+0x470>)
 800832e:	220c      	movs	r2, #12
 8008330:	0019      	movs	r1, r3
 8008332:	f002 ff43 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008336:	4ab8      	ldr	r2, [pc, #736]	@ (8008618 <PC_show_Keys+0x46c>)
 8008338:	4ba5      	ldr	r3, [pc, #660]	@ (80085d0 <PC_show_Keys+0x424>)
 800833a:	0011      	movs	r1, r2
 800833c:	0018      	movs	r0, r3
 800833e:	f7fc fd8f 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 8008342:	4ab7      	ldr	r2, [pc, #732]	@ (8008620 <PC_show_Keys+0x474>)
 8008344:	4b9f      	ldr	r3, [pc, #636]	@ (80085c4 <PC_show_Keys+0x418>)
 8008346:	0011      	movs	r1, r2
 8008348:	0018      	movs	r0, r3
 800834a:	f01c fc9b 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800834e:	4b9b      	ldr	r3, [pc, #620]	@ (80085bc <PC_show_Keys+0x410>)
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	4b9c      	ldr	r3, [pc, #624]	@ (80085c4 <PC_show_Keys+0x418>)
 8008354:	0011      	movs	r1, r2
 8008356:	0018      	movs	r0, r3
 8008358:	f7ff ff0d 	bl	8008176 <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 800835c:	4a9c      	ldr	r2, [pc, #624]	@ (80085d0 <PC_show_Keys+0x424>)
 800835e:	49b1      	ldr	r1, [pc, #708]	@ (8008624 <PC_show_Keys+0x478>)
 8008360:	4b98      	ldr	r3, [pc, #608]	@ (80085c4 <PC_show_Keys+0x418>)
 8008362:	0018      	movs	r0, r3
 8008364:	f01c fc8e 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008368:	4b94      	ldr	r3, [pc, #592]	@ (80085bc <PC_show_Keys+0x410>)
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	4b95      	ldr	r3, [pc, #596]	@ (80085c4 <PC_show_Keys+0x418>)
 800836e:	0011      	movs	r1, r2
 8008370:	0018      	movs	r0, r3
 8008372:	f7ff ff00 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008376:	4bac      	ldr	r3, [pc, #688]	@ (8008628 <PC_show_Keys+0x47c>)
 8008378:	48ac      	ldr	r0, [pc, #688]	@ (800862c <PC_show_Keys+0x480>)
 800837a:	220c      	movs	r2, #12
 800837c:	0019      	movs	r1, r3
 800837e:	f002 ff1d 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008382:	4aa9      	ldr	r2, [pc, #676]	@ (8008628 <PC_show_Keys+0x47c>)
 8008384:	4b92      	ldr	r3, [pc, #584]	@ (80085d0 <PC_show_Keys+0x424>)
 8008386:	0011      	movs	r1, r2
 8008388:	0018      	movs	r0, r3
 800838a:	f7fc fd69 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 800838e:	4a90      	ldr	r2, [pc, #576]	@ (80085d0 <PC_show_Keys+0x424>)
 8008390:	49a7      	ldr	r1, [pc, #668]	@ (8008630 <PC_show_Keys+0x484>)
 8008392:	4b8c      	ldr	r3, [pc, #560]	@ (80085c4 <PC_show_Keys+0x418>)
 8008394:	0018      	movs	r0, r3
 8008396:	f01c fc75 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800839a:	4b88      	ldr	r3, [pc, #544]	@ (80085bc <PC_show_Keys+0x410>)
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	4b89      	ldr	r3, [pc, #548]	@ (80085c4 <PC_show_Keys+0x418>)
 80083a0:	0011      	movs	r1, r2
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7ff fee7 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 80083a8:	4ba2      	ldr	r3, [pc, #648]	@ (8008634 <PC_show_Keys+0x488>)
 80083aa:	48a3      	ldr	r0, [pc, #652]	@ (8008638 <PC_show_Keys+0x48c>)
 80083ac:	220c      	movs	r2, #12
 80083ae:	0019      	movs	r1, r3
 80083b0:	f002 ff04 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 80083b4:	4a9f      	ldr	r2, [pc, #636]	@ (8008634 <PC_show_Keys+0x488>)
 80083b6:	4b86      	ldr	r3, [pc, #536]	@ (80085d0 <PC_show_Keys+0x424>)
 80083b8:	0011      	movs	r1, r2
 80083ba:	0018      	movs	r0, r3
 80083bc:	f7fc fd50 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 80083c0:	4a83      	ldr	r2, [pc, #524]	@ (80085d0 <PC_show_Keys+0x424>)
 80083c2:	499e      	ldr	r1, [pc, #632]	@ (800863c <PC_show_Keys+0x490>)
 80083c4:	4b7f      	ldr	r3, [pc, #508]	@ (80085c4 <PC_show_Keys+0x418>)
 80083c6:	0018      	movs	r0, r3
 80083c8:	f01c fc5c 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80083cc:	4b7b      	ldr	r3, [pc, #492]	@ (80085bc <PC_show_Keys+0x410>)
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	4b7c      	ldr	r3, [pc, #496]	@ (80085c4 <PC_show_Keys+0x418>)
 80083d2:	0011      	movs	r1, r2
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7ff fece 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80083da:	4b99      	ldr	r3, [pc, #612]	@ (8008640 <PC_show_Keys+0x494>)
 80083dc:	4899      	ldr	r0, [pc, #612]	@ (8008644 <PC_show_Keys+0x498>)
 80083de:	220c      	movs	r2, #12
 80083e0:	0019      	movs	r1, r3
 80083e2:	f002 feeb 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80083e6:	4a96      	ldr	r2, [pc, #600]	@ (8008640 <PC_show_Keys+0x494>)
 80083e8:	4b79      	ldr	r3, [pc, #484]	@ (80085d0 <PC_show_Keys+0x424>)
 80083ea:	0011      	movs	r1, r2
 80083ec:	0018      	movs	r0, r3
 80083ee:	f7fc fd37 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 80083f2:	4a77      	ldr	r2, [pc, #476]	@ (80085d0 <PC_show_Keys+0x424>)
 80083f4:	4994      	ldr	r1, [pc, #592]	@ (8008648 <PC_show_Keys+0x49c>)
 80083f6:	4b73      	ldr	r3, [pc, #460]	@ (80085c4 <PC_show_Keys+0x418>)
 80083f8:	0018      	movs	r0, r3
 80083fa:	f01c fc43 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80083fe:	4b6f      	ldr	r3, [pc, #444]	@ (80085bc <PC_show_Keys+0x410>)
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	4b70      	ldr	r3, [pc, #448]	@ (80085c4 <PC_show_Keys+0x418>)
 8008404:	0011      	movs	r1, r2
 8008406:	0018      	movs	r0, r3
 8008408:	f7ff feb5 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 800840c:	4b8f      	ldr	r3, [pc, #572]	@ (800864c <PC_show_Keys+0x4a0>)
 800840e:	4890      	ldr	r0, [pc, #576]	@ (8008650 <PC_show_Keys+0x4a4>)
 8008410:	220c      	movs	r2, #12
 8008412:	0019      	movs	r1, r3
 8008414:	f002 fed2 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008418:	4a8c      	ldr	r2, [pc, #560]	@ (800864c <PC_show_Keys+0x4a0>)
 800841a:	4b6d      	ldr	r3, [pc, #436]	@ (80085d0 <PC_show_Keys+0x424>)
 800841c:	0011      	movs	r1, r2
 800841e:	0018      	movs	r0, r3
 8008420:	f7fc fd1e 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 8008424:	4a6a      	ldr	r2, [pc, #424]	@ (80085d0 <PC_show_Keys+0x424>)
 8008426:	498b      	ldr	r1, [pc, #556]	@ (8008654 <PC_show_Keys+0x4a8>)
 8008428:	4b66      	ldr	r3, [pc, #408]	@ (80085c4 <PC_show_Keys+0x418>)
 800842a:	0018      	movs	r0, r3
 800842c:	f01c fc2a 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008430:	4b62      	ldr	r3, [pc, #392]	@ (80085bc <PC_show_Keys+0x410>)
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	4b63      	ldr	r3, [pc, #396]	@ (80085c4 <PC_show_Keys+0x418>)
 8008436:	0011      	movs	r1, r2
 8008438:	0018      	movs	r0, r3
 800843a:	f7ff fe9c 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 800843e:	4b86      	ldr	r3, [pc, #536]	@ (8008658 <PC_show_Keys+0x4ac>)
 8008440:	4886      	ldr	r0, [pc, #536]	@ (800865c <PC_show_Keys+0x4b0>)
 8008442:	220c      	movs	r2, #12
 8008444:	0019      	movs	r1, r3
 8008446:	f002 feb9 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 800844a:	4a83      	ldr	r2, [pc, #524]	@ (8008658 <PC_show_Keys+0x4ac>)
 800844c:	4b60      	ldr	r3, [pc, #384]	@ (80085d0 <PC_show_Keys+0x424>)
 800844e:	0011      	movs	r1, r2
 8008450:	0018      	movs	r0, r3
 8008452:	f7fc fd05 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 8008456:	4a5e      	ldr	r2, [pc, #376]	@ (80085d0 <PC_show_Keys+0x424>)
 8008458:	4981      	ldr	r1, [pc, #516]	@ (8008660 <PC_show_Keys+0x4b4>)
 800845a:	4b5a      	ldr	r3, [pc, #360]	@ (80085c4 <PC_show_Keys+0x418>)
 800845c:	0018      	movs	r0, r3
 800845e:	f01c fc11 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008462:	4b56      	ldr	r3, [pc, #344]	@ (80085bc <PC_show_Keys+0x410>)
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	4b57      	ldr	r3, [pc, #348]	@ (80085c4 <PC_show_Keys+0x418>)
 8008468:	0011      	movs	r1, r2
 800846a:	0018      	movs	r0, r3
 800846c:	f7ff fe83 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008470:	4b7c      	ldr	r3, [pc, #496]	@ (8008664 <PC_show_Keys+0x4b8>)
 8008472:	487d      	ldr	r0, [pc, #500]	@ (8008668 <PC_show_Keys+0x4bc>)
 8008474:	2220      	movs	r2, #32
 8008476:	0019      	movs	r1, r3
 8008478:	f002 fea0 	bl	800b1bc <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 800847c:	4a7b      	ldr	r2, [pc, #492]	@ (800866c <PC_show_Keys+0x4c0>)
 800847e:	4b51      	ldr	r3, [pc, #324]	@ (80085c4 <PC_show_Keys+0x418>)
 8008480:	0011      	movs	r1, r2
 8008482:	0018      	movs	r0, r3
 8008484:	f01c fbfe 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008488:	4b4c      	ldr	r3, [pc, #304]	@ (80085bc <PC_show_Keys+0x410>)
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	4b4d      	ldr	r3, [pc, #308]	@ (80085c4 <PC_show_Keys+0x418>)
 800848e:	0011      	movs	r1, r2
 8008490:	0018      	movs	r0, r3
 8008492:	f7ff fe70 	bl	8008176 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008496:	4a73      	ldr	r2, [pc, #460]	@ (8008664 <PC_show_Keys+0x4b8>)
 8008498:	4975      	ldr	r1, [pc, #468]	@ (8008670 <PC_show_Keys+0x4c4>)
 800849a:	4b4a      	ldr	r3, [pc, #296]	@ (80085c4 <PC_show_Keys+0x418>)
 800849c:	0018      	movs	r0, r3
 800849e:	f01c fbf1 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80084a2:	4b46      	ldr	r3, [pc, #280]	@ (80085bc <PC_show_Keys+0x410>)
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	4b47      	ldr	r3, [pc, #284]	@ (80085c4 <PC_show_Keys+0x418>)
 80084a8:	0011      	movs	r1, r2
 80084aa:	0018      	movs	r0, r3
 80084ac:	f7ff fe63 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 80084b0:	4b70      	ldr	r3, [pc, #448]	@ (8008674 <PC_show_Keys+0x4c8>)
 80084b2:	4871      	ldr	r0, [pc, #452]	@ (8008678 <PC_show_Keys+0x4cc>)
 80084b4:	220c      	movs	r2, #12
 80084b6:	0019      	movs	r1, r3
 80084b8:	f002 fe80 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 80084bc:	4a6d      	ldr	r2, [pc, #436]	@ (8008674 <PC_show_Keys+0x4c8>)
 80084be:	4b44      	ldr	r3, [pc, #272]	@ (80085d0 <PC_show_Keys+0x424>)
 80084c0:	0011      	movs	r1, r2
 80084c2:	0018      	movs	r0, r3
 80084c4:	f7fc fccc 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 80084c8:	4a41      	ldr	r2, [pc, #260]	@ (80085d0 <PC_show_Keys+0x424>)
 80084ca:	496c      	ldr	r1, [pc, #432]	@ (800867c <PC_show_Keys+0x4d0>)
 80084cc:	4b3d      	ldr	r3, [pc, #244]	@ (80085c4 <PC_show_Keys+0x418>)
 80084ce:	0018      	movs	r0, r3
 80084d0:	f01c fbd8 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80084d4:	4b39      	ldr	r3, [pc, #228]	@ (80085bc <PC_show_Keys+0x410>)
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	4b3a      	ldr	r3, [pc, #232]	@ (80085c4 <PC_show_Keys+0x418>)
 80084da:	0011      	movs	r1, r2
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff fe4a 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 80084e2:	4b67      	ldr	r3, [pc, #412]	@ (8008680 <PC_show_Keys+0x4d4>)
 80084e4:	4867      	ldr	r0, [pc, #412]	@ (8008684 <PC_show_Keys+0x4d8>)
 80084e6:	220c      	movs	r2, #12
 80084e8:	0019      	movs	r1, r3
 80084ea:	f002 fe67 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80084ee:	4a64      	ldr	r2, [pc, #400]	@ (8008680 <PC_show_Keys+0x4d4>)
 80084f0:	4b37      	ldr	r3, [pc, #220]	@ (80085d0 <PC_show_Keys+0x424>)
 80084f2:	0011      	movs	r1, r2
 80084f4:	0018      	movs	r0, r3
 80084f6:	f7fc fcb3 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 80084fa:	4a35      	ldr	r2, [pc, #212]	@ (80085d0 <PC_show_Keys+0x424>)
 80084fc:	4962      	ldr	r1, [pc, #392]	@ (8008688 <PC_show_Keys+0x4dc>)
 80084fe:	4b31      	ldr	r3, [pc, #196]	@ (80085c4 <PC_show_Keys+0x418>)
 8008500:	0018      	movs	r0, r3
 8008502:	f01c fbbf 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008506:	4b2d      	ldr	r3, [pc, #180]	@ (80085bc <PC_show_Keys+0x410>)
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	4b2e      	ldr	r3, [pc, #184]	@ (80085c4 <PC_show_Keys+0x418>)
 800850c:	0011      	movs	r1, r2
 800850e:	0018      	movs	r0, r3
 8008510:	f7ff fe31 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008514:	4b5d      	ldr	r3, [pc, #372]	@ (800868c <PC_show_Keys+0x4e0>)
 8008516:	485e      	ldr	r0, [pc, #376]	@ (8008690 <PC_show_Keys+0x4e4>)
 8008518:	220c      	movs	r2, #12
 800851a:	0019      	movs	r1, r3
 800851c:	f002 fe4e 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008520:	4a5a      	ldr	r2, [pc, #360]	@ (800868c <PC_show_Keys+0x4e0>)
 8008522:	4b2b      	ldr	r3, [pc, #172]	@ (80085d0 <PC_show_Keys+0x424>)
 8008524:	0011      	movs	r1, r2
 8008526:	0018      	movs	r0, r3
 8008528:	f7fc fc9a 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 800852c:	4a28      	ldr	r2, [pc, #160]	@ (80085d0 <PC_show_Keys+0x424>)
 800852e:	4959      	ldr	r1, [pc, #356]	@ (8008694 <PC_show_Keys+0x4e8>)
 8008530:	4b24      	ldr	r3, [pc, #144]	@ (80085c4 <PC_show_Keys+0x418>)
 8008532:	0018      	movs	r0, r3
 8008534:	f01c fba6 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008538:	4b20      	ldr	r3, [pc, #128]	@ (80085bc <PC_show_Keys+0x410>)
 800853a:	781a      	ldrb	r2, [r3, #0]
 800853c:	4b21      	ldr	r3, [pc, #132]	@ (80085c4 <PC_show_Keys+0x418>)
 800853e:	0011      	movs	r1, r2
 8008540:	0018      	movs	r0, r3
 8008542:	f7ff fe18 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008546:	4b54      	ldr	r3, [pc, #336]	@ (8008698 <PC_show_Keys+0x4ec>)
 8008548:	4854      	ldr	r0, [pc, #336]	@ (800869c <PC_show_Keys+0x4f0>)
 800854a:	220c      	movs	r2, #12
 800854c:	0019      	movs	r1, r3
 800854e:	f002 fe35 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008552:	4a51      	ldr	r2, [pc, #324]	@ (8008698 <PC_show_Keys+0x4ec>)
 8008554:	4b1e      	ldr	r3, [pc, #120]	@ (80085d0 <PC_show_Keys+0x424>)
 8008556:	0011      	movs	r1, r2
 8008558:	0018      	movs	r0, r3
 800855a:	f7fc fc81 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 800855e:	4a1c      	ldr	r2, [pc, #112]	@ (80085d0 <PC_show_Keys+0x424>)
 8008560:	494f      	ldr	r1, [pc, #316]	@ (80086a0 <PC_show_Keys+0x4f4>)
 8008562:	4b18      	ldr	r3, [pc, #96]	@ (80085c4 <PC_show_Keys+0x418>)
 8008564:	0018      	movs	r0, r3
 8008566:	f01c fb8d 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800856a:	4b14      	ldr	r3, [pc, #80]	@ (80085bc <PC_show_Keys+0x410>)
 800856c:	781a      	ldrb	r2, [r3, #0]
 800856e:	4b15      	ldr	r3, [pc, #84]	@ (80085c4 <PC_show_Keys+0x418>)
 8008570:	0011      	movs	r1, r2
 8008572:	0018      	movs	r0, r3
 8008574:	f7ff fdff 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008578:	4b4a      	ldr	r3, [pc, #296]	@ (80086a4 <PC_show_Keys+0x4f8>)
 800857a:	484b      	ldr	r0, [pc, #300]	@ (80086a8 <PC_show_Keys+0x4fc>)
 800857c:	220c      	movs	r2, #12
 800857e:	0019      	movs	r1, r3
 8008580:	f002 fe1c 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008584:	4a47      	ldr	r2, [pc, #284]	@ (80086a4 <PC_show_Keys+0x4f8>)
 8008586:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <PC_show_Keys+0x424>)
 8008588:	0011      	movs	r1, r2
 800858a:	0018      	movs	r0, r3
 800858c:	f7fc fc68 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008590:	4a0f      	ldr	r2, [pc, #60]	@ (80085d0 <PC_show_Keys+0x424>)
 8008592:	4946      	ldr	r1, [pc, #280]	@ (80086ac <PC_show_Keys+0x500>)
 8008594:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <PC_show_Keys+0x418>)
 8008596:	0018      	movs	r0, r3
 8008598:	f01c fb74 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800859c:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <PC_show_Keys+0x410>)
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	4b08      	ldr	r3, [pc, #32]	@ (80085c4 <PC_show_Keys+0x418>)
 80085a2:	0011      	movs	r1, r2
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7ff fde6 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 80085aa:	4b41      	ldr	r3, [pc, #260]	@ (80086b0 <PC_show_Keys+0x504>)
 80085ac:	4841      	ldr	r0, [pc, #260]	@ (80086b4 <PC_show_Keys+0x508>)
 80085ae:	220c      	movs	r2, #12
 80085b0:	0019      	movs	r1, r3
 80085b2:	f002 fe03 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 80085b6:	4a3e      	ldr	r2, [pc, #248]	@ (80086b0 <PC_show_Keys+0x504>)
 80085b8:	e07e      	b.n	80086b8 <PC_show_Keys+0x50c>
 80085ba:	46c0      	nop			@ (mov r8, r8)
 80085bc:	200009d5 	.word	0x200009d5
 80085c0:	0802a664 	.word	0x0802a664
 80085c4:	200009d8 	.word	0x200009d8
 80085c8:	20000a20 	.word	0x20000a20
 80085cc:	08080000 	.word	0x08080000
 80085d0:	20000a2c 	.word	0x20000a2c
 80085d4:	0802a680 	.word	0x0802a680
 80085d8:	20000a48 	.word	0x20000a48
 80085dc:	0808000c 	.word	0x0808000c
 80085e0:	0802a6ac 	.word	0x0802a6ac
 80085e4:	20000a54 	.word	0x20000a54
 80085e8:	08080018 	.word	0x08080018
 80085ec:	0802a6d8 	.word	0x0802a6d8
 80085f0:	20000a60 	.word	0x20000a60
 80085f4:	08080024 	.word	0x08080024
 80085f8:	0802a704 	.word	0x0802a704
 80085fc:	20000a6c 	.word	0x20000a6c
 8008600:	08080030 	.word	0x08080030
 8008604:	0802a730 	.word	0x0802a730
 8008608:	20000a78 	.word	0x20000a78
 800860c:	0808003c 	.word	0x0808003c
 8008610:	0802a75c 	.word	0x0802a75c
 8008614:	0802a778 	.word	0x0802a778
 8008618:	20000a84 	.word	0x20000a84
 800861c:	08080048 	.word	0x08080048
 8008620:	0802a7a4 	.word	0x0802a7a4
 8008624:	0802a7b8 	.word	0x0802a7b8
 8008628:	20000a90 	.word	0x20000a90
 800862c:	08080054 	.word	0x08080054
 8008630:	0802a7e4 	.word	0x0802a7e4
 8008634:	20000a9c 	.word	0x20000a9c
 8008638:	08080060 	.word	0x08080060
 800863c:	0802a810 	.word	0x0802a810
 8008640:	20000aa8 	.word	0x20000aa8
 8008644:	0808006c 	.word	0x0808006c
 8008648:	0802a83c 	.word	0x0802a83c
 800864c:	20000ab4 	.word	0x20000ab4
 8008650:	08080078 	.word	0x08080078
 8008654:	0802a868 	.word	0x0802a868
 8008658:	20000ac0 	.word	0x20000ac0
 800865c:	08080084 	.word	0x08080084
 8008660:	0802a894 	.word	0x0802a894
 8008664:	20000acc 	.word	0x20000acc
 8008668:	08080090 	.word	0x08080090
 800866c:	0802a8c0 	.word	0x0802a8c0
 8008670:	0802a8e8 	.word	0x0802a8e8
 8008674:	20000aec 	.word	0x20000aec
 8008678:	080800b0 	.word	0x080800b0
 800867c:	0802a8f0 	.word	0x0802a8f0
 8008680:	20000af8 	.word	0x20000af8
 8008684:	080800bc 	.word	0x080800bc
 8008688:	0802a91c 	.word	0x0802a91c
 800868c:	20000b04 	.word	0x20000b04
 8008690:	080800c8 	.word	0x080800c8
 8008694:	0802a948 	.word	0x0802a948
 8008698:	20000b10 	.word	0x20000b10
 800869c:	080800d4 	.word	0x080800d4
 80086a0:	0802a974 	.word	0x0802a974
 80086a4:	20000b1c 	.word	0x20000b1c
 80086a8:	080800e0 	.word	0x080800e0
 80086ac:	0802a9a0 	.word	0x0802a9a0
 80086b0:	20000b28 	.word	0x20000b28
 80086b4:	080800ec 	.word	0x080800ec
 80086b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008830 <PC_show_Keys+0x684>)
 80086ba:	0011      	movs	r1, r2
 80086bc:	0018      	movs	r0, r3
 80086be:	f7fc fbcf 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 80086c2:	4a5b      	ldr	r2, [pc, #364]	@ (8008830 <PC_show_Keys+0x684>)
 80086c4:	495b      	ldr	r1, [pc, #364]	@ (8008834 <PC_show_Keys+0x688>)
 80086c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008838 <PC_show_Keys+0x68c>)
 80086c8:	0018      	movs	r0, r3
 80086ca:	f01c fadb 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086ce:	4b5b      	ldr	r3, [pc, #364]	@ (800883c <PC_show_Keys+0x690>)
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	4b59      	ldr	r3, [pc, #356]	@ (8008838 <PC_show_Keys+0x68c>)
 80086d4:	0011      	movs	r1, r2
 80086d6:	0018      	movs	r0, r3
 80086d8:	f7ff fd4d 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 80086dc:	4b58      	ldr	r3, [pc, #352]	@ (8008840 <PC_show_Keys+0x694>)
 80086de:	4859      	ldr	r0, [pc, #356]	@ (8008844 <PC_show_Keys+0x698>)
 80086e0:	220c      	movs	r2, #12
 80086e2:	0019      	movs	r1, r3
 80086e4:	f002 fd6a 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 80086e8:	4a55      	ldr	r2, [pc, #340]	@ (8008840 <PC_show_Keys+0x694>)
 80086ea:	4b51      	ldr	r3, [pc, #324]	@ (8008830 <PC_show_Keys+0x684>)
 80086ec:	0011      	movs	r1, r2
 80086ee:	0018      	movs	r0, r3
 80086f0:	f7fc fbb6 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 80086f4:	4a4e      	ldr	r2, [pc, #312]	@ (8008830 <PC_show_Keys+0x684>)
 80086f6:	4954      	ldr	r1, [pc, #336]	@ (8008848 <PC_show_Keys+0x69c>)
 80086f8:	4b4f      	ldr	r3, [pc, #316]	@ (8008838 <PC_show_Keys+0x68c>)
 80086fa:	0018      	movs	r0, r3
 80086fc:	f01c fac2 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008700:	4b4e      	ldr	r3, [pc, #312]	@ (800883c <PC_show_Keys+0x690>)
 8008702:	781a      	ldrb	r2, [r3, #0]
 8008704:	4b4c      	ldr	r3, [pc, #304]	@ (8008838 <PC_show_Keys+0x68c>)
 8008706:	0011      	movs	r1, r2
 8008708:	0018      	movs	r0, r3
 800870a:	f7ff fd34 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 800870e:	4b4f      	ldr	r3, [pc, #316]	@ (800884c <PC_show_Keys+0x6a0>)
 8008710:	484f      	ldr	r0, [pc, #316]	@ (8008850 <PC_show_Keys+0x6a4>)
 8008712:	220c      	movs	r2, #12
 8008714:	0019      	movs	r1, r3
 8008716:	f002 fd51 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 800871a:	4a4c      	ldr	r2, [pc, #304]	@ (800884c <PC_show_Keys+0x6a0>)
 800871c:	4b44      	ldr	r3, [pc, #272]	@ (8008830 <PC_show_Keys+0x684>)
 800871e:	0011      	movs	r1, r2
 8008720:	0018      	movs	r0, r3
 8008722:	f7fc fb9d 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008726:	4a42      	ldr	r2, [pc, #264]	@ (8008830 <PC_show_Keys+0x684>)
 8008728:	494a      	ldr	r1, [pc, #296]	@ (8008854 <PC_show_Keys+0x6a8>)
 800872a:	4b43      	ldr	r3, [pc, #268]	@ (8008838 <PC_show_Keys+0x68c>)
 800872c:	0018      	movs	r0, r3
 800872e:	f01c faa9 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008732:	4b42      	ldr	r3, [pc, #264]	@ (800883c <PC_show_Keys+0x690>)
 8008734:	781a      	ldrb	r2, [r3, #0]
 8008736:	4b40      	ldr	r3, [pc, #256]	@ (8008838 <PC_show_Keys+0x68c>)
 8008738:	0011      	movs	r1, r2
 800873a:	0018      	movs	r0, r3
 800873c:	f7ff fd1b 	bl	8008176 <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008740:	4a45      	ldr	r2, [pc, #276]	@ (8008858 <PC_show_Keys+0x6ac>)
 8008742:	4b3d      	ldr	r3, [pc, #244]	@ (8008838 <PC_show_Keys+0x68c>)
 8008744:	0011      	movs	r1, r2
 8008746:	0018      	movs	r0, r3
 8008748:	f01c fa9c 	bl	8024c84 <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 800874c:	4b43      	ldr	r3, [pc, #268]	@ (800885c <PC_show_Keys+0x6b0>)
 800874e:	4844      	ldr	r0, [pc, #272]	@ (8008860 <PC_show_Keys+0x6b4>)
 8008750:	220c      	movs	r2, #12
 8008752:	0019      	movs	r1, r3
 8008754:	f002 fd32 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008758:	4a40      	ldr	r2, [pc, #256]	@ (800885c <PC_show_Keys+0x6b0>)
 800875a:	4b35      	ldr	r3, [pc, #212]	@ (8008830 <PC_show_Keys+0x684>)
 800875c:	0011      	movs	r1, r2
 800875e:	0018      	movs	r0, r3
 8008760:	f7fc fb7e 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008764:	4a32      	ldr	r2, [pc, #200]	@ (8008830 <PC_show_Keys+0x684>)
 8008766:	493f      	ldr	r1, [pc, #252]	@ (8008864 <PC_show_Keys+0x6b8>)
 8008768:	4b33      	ldr	r3, [pc, #204]	@ (8008838 <PC_show_Keys+0x68c>)
 800876a:	0018      	movs	r0, r3
 800876c:	f01c fa8a 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008770:	4b32      	ldr	r3, [pc, #200]	@ (800883c <PC_show_Keys+0x690>)
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	4b30      	ldr	r3, [pc, #192]	@ (8008838 <PC_show_Keys+0x68c>)
 8008776:	0011      	movs	r1, r2
 8008778:	0018      	movs	r0, r3
 800877a:	f7ff fcfc 	bl	8008176 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 800877e:	4b3a      	ldr	r3, [pc, #232]	@ (8008868 <PC_show_Keys+0x6bc>)
 8008780:	483a      	ldr	r0, [pc, #232]	@ (800886c <PC_show_Keys+0x6c0>)
 8008782:	220c      	movs	r2, #12
 8008784:	0019      	movs	r1, r3
 8008786:	f002 fd19 	bl	800b1bc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 800878a:	4a37      	ldr	r2, [pc, #220]	@ (8008868 <PC_show_Keys+0x6bc>)
 800878c:	4b28      	ldr	r3, [pc, #160]	@ (8008830 <PC_show_Keys+0x684>)
 800878e:	0011      	movs	r1, r2
 8008790:	0018      	movs	r0, r3
 8008792:	f7fc fb65 	bl	8004e60 <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008796:	4a26      	ldr	r2, [pc, #152]	@ (8008830 <PC_show_Keys+0x684>)
 8008798:	4935      	ldr	r1, [pc, #212]	@ (8008870 <PC_show_Keys+0x6c4>)
 800879a:	4b27      	ldr	r3, [pc, #156]	@ (8008838 <PC_show_Keys+0x68c>)
 800879c:	0018      	movs	r0, r3
 800879e:	f01c fa71 	bl	8024c84 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087a2:	4b26      	ldr	r3, [pc, #152]	@ (800883c <PC_show_Keys+0x690>)
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	4b24      	ldr	r3, [pc, #144]	@ (8008838 <PC_show_Keys+0x68c>)
 80087a8:	0011      	movs	r1, r2
 80087aa:	0018      	movs	r0, r3
 80087ac:	f7ff fce3 	bl	8008176 <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 80087b0:	4b30      	ldr	r3, [pc, #192]	@ (8008874 <PC_show_Keys+0x6c8>)
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff fcba 	bl	800812c <printf_USB>
  HAL_Delay(10);
 80087b8:	200a      	movs	r0, #10
 80087ba:	f00a fec1 	bl	8013540 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 80087be:	4b2e      	ldr	r3, [pc, #184]	@ (8008878 <PC_show_Keys+0x6cc>)
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7ff fcb3 	bl	800812c <printf_USB>
  HAL_Delay(10);
 80087c6:	200a      	movs	r0, #10
 80087c8:	f00a feba 	bl	8013540 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 80087cc:	4b2b      	ldr	r3, [pc, #172]	@ (800887c <PC_show_Keys+0x6d0>)
 80087ce:	0018      	movs	r0, r3
 80087d0:	f7ff fcac 	bl	800812c <printf_USB>
  HAL_Delay(10);
 80087d4:	200a      	movs	r0, #10
 80087d6:	f00a feb3 	bl	8013540 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 80087da:	4b29      	ldr	r3, [pc, #164]	@ (8008880 <PC_show_Keys+0x6d4>)
 80087dc:	0018      	movs	r0, r3
 80087de:	f7ff fca5 	bl	800812c <printf_USB>
  HAL_Delay(10);
 80087e2:	200a      	movs	r0, #10
 80087e4:	f00a feac 	bl	8013540 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 80087e8:	4b26      	ldr	r3, [pc, #152]	@ (8008884 <PC_show_Keys+0x6d8>)
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7ff fc9e 	bl	800812c <printf_USB>
  HAL_Delay(10);
 80087f0:	200a      	movs	r0, #10
 80087f2:	f00a fea5 	bl	8013540 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 80087f6:	4b24      	ldr	r3, [pc, #144]	@ (8008888 <PC_show_Keys+0x6dc>)
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7ff fc97 	bl	800812c <printf_USB>
  HAL_Delay(10);
 80087fe:	200a      	movs	r0, #10
 8008800:	f00a fe9e 	bl	8013540 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008804:	4b21      	ldr	r3, [pc, #132]	@ (800888c <PC_show_Keys+0x6e0>)
 8008806:	0018      	movs	r0, r3
 8008808:	f7ff fc90 	bl	800812c <printf_USB>
  HAL_Delay(10);
 800880c:	200a      	movs	r0, #10
 800880e:	f00a fe97 	bl	8013540 <HAL_Delay>
  if (!usb_out) {
 8008812:	4b0a      	ldr	r3, [pc, #40]	@ (800883c <PC_show_Keys+0x690>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2201      	movs	r2, #1
 8008818:	4053      	eors	r3, r2
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the configuration programm.\r\n");
 8008820:	4b1b      	ldr	r3, [pc, #108]	@ (8008890 <PC_show_Keys+0x6e4>)
 8008822:	0018      	movs	r0, r3
 8008824:	f01c fa24 	bl	8024c70 <puts>
  }
}
 8008828:	46c0      	nop			@ (mov r8, r8)
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	20000a2c 	.word	0x20000a2c
 8008834:	0802a9cc 	.word	0x0802a9cc
 8008838:	200009d8 	.word	0x200009d8
 800883c:	200009d5 	.word	0x200009d5
 8008840:	20000b34 	.word	0x20000b34
 8008844:	080800f8 	.word	0x080800f8
 8008848:	0802a9f8 	.word	0x0802a9f8
 800884c:	20000b40 	.word	0x20000b40
 8008850:	08080104 	.word	0x08080104
 8008854:	0802aa24 	.word	0x0802aa24
 8008858:	0802aa50 	.word	0x0802aa50
 800885c:	20000b4c 	.word	0x20000b4c
 8008860:	08080170 	.word	0x08080170
 8008864:	0802aa7c 	.word	0x0802aa7c
 8008868:	20000b58 	.word	0x20000b58
 800886c:	0808017c 	.word	0x0808017c
 8008870:	0802aaa8 	.word	0x0802aaa8
 8008874:	0802aad4 	.word	0x0802aad4
 8008878:	0802aaec 	.word	0x0802aaec
 800887c:	0802ab18 	.word	0x0802ab18
 8008880:	0802ab48 	.word	0x0802ab48
 8008884:	0802ab84 	.word	0x0802ab84
 8008888:	0802abbc 	.word	0x0802abbc
 800888c:	0802abf0 	.word	0x0802abf0
 8008890:	0802ac10 	.word	0x0802ac10

08008894 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	4b20      	ldr	r3, [pc, #128]	@ (8008924 <ascii_to_uint8+0x90>)
 80088a4:	18d3      	adds	r3, r2, r3
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	001a      	movs	r2, r3
 80088aa:	2304      	movs	r3, #4
 80088ac:	4013      	ands	r3, r2
 80088ae:	d00a      	beq.n	80088c6 <ascii_to_uint8+0x32>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008924 <ascii_to_uint8+0x90>)
 80088ba:	18d3      	adds	r3, r2, r3
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	001a      	movs	r2, r3
 80088c0:	2304      	movs	r3, #4
 80088c2:	4013      	ands	r3, r2
 80088c4:	d105      	bne.n	80088d2 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 80088c6:	4b18      	ldr	r3, [pc, #96]	@ (8008928 <ascii_to_uint8+0x94>)
 80088c8:	0018      	movs	r0, r3
 80088ca:	f7ff fc2f 	bl	800812c <printf_USB>
    return 100;
 80088ce:	2364      	movs	r3, #100	@ 0x64
 80088d0:	e024      	b.n	800891c <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	1c1a      	adds	r2, r3, #0
 80088d8:	0092      	lsls	r2, r2, #2
 80088da:	18d3      	adds	r3, r2, r3
 80088dc:	18db      	adds	r3, r3, r3
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3301      	adds	r3, #1
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	18d3      	adds	r3, r2, r3
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	210f      	movs	r1, #15
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	3a10      	subs	r2, #16
 80088f0:	701a      	strb	r2, [r3, #0]
  if (value > 24 || value == 21 || value == 22) {
 80088f2:	187b      	adds	r3, r7, r1
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b18      	cmp	r3, #24
 80088f8:	d807      	bhi.n	800890a <ascii_to_uint8+0x76>
 80088fa:	187b      	adds	r3, r7, r1
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b15      	cmp	r3, #21
 8008900:	d003      	beq.n	800890a <ascii_to_uint8+0x76>
 8008902:	187b      	adds	r3, r7, r1
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b16      	cmp	r3, #22
 8008908:	d105      	bne.n	8008916 <ascii_to_uint8+0x82>
    printf_USB("Error: value out of range\r\n");
 800890a:	4b08      	ldr	r3, [pc, #32]	@ (800892c <ascii_to_uint8+0x98>)
 800890c:	0018      	movs	r0, r3
 800890e:	f7ff fc0d 	bl	800812c <printf_USB>
    return 100;
 8008912:	2364      	movs	r3, #100	@ 0x64
 8008914:	e002      	b.n	800891c <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8008916:	230f      	movs	r3, #15
 8008918:	18fb      	adds	r3, r7, r3
 800891a:	781b      	ldrb	r3, [r3, #0]
}
 800891c:	0018      	movs	r0, r3
 800891e:	46bd      	mov	sp, r7
 8008920:	b004      	add	sp, #16
 8008922:	bd80      	pop	{r7, pc}
 8008924:	0802d910 	.word	0x0802d910
 8008928:	0802ac58 	.word	0x0802ac58
 800892c:	0802ac80 	.word	0x0802ac80

08008930 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b0d1      	sub	sp, #324	@ 0x144
 8008934:	af3e      	add	r7, sp, #248	@ 0xf8
 8008936:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008938:	f019 f8f0 	bl	8021b1c <GetUsbRxDataSize>
 800893c:	0003      	movs	r3, r0
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008940:	2347      	movs	r3, #71	@ 0x47
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2124      	movs	r1, #36	@ 0x24
 800894c:	0018      	movs	r0, r3
 800894e:	f01c fb07 	bl	8024f60 <strchr>
 8008952:	0003      	movs	r3, r0
 8008954:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10f      	bne.n	800897c <Process_USB_input+0x4c>
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00c      	beq.n	800897c <Process_USB_input+0x4c>
 8008962:	4bdb      	ldr	r3, [pc, #876]	@ (8008cd0 <Process_USB_input+0x3a0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b1c      	cmp	r3, #28
 8008968:	d008      	beq.n	800897c <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 800896a:	4ada      	ldr	r2, [pc, #872]	@ (8008cd4 <Process_USB_input+0x3a4>)
 800896c:	4bda      	ldr	r3, [pc, #872]	@ (8008cd8 <Process_USB_input+0x3a8>)
 800896e:	0019      	movs	r1, r3
 8008970:	2003      	movs	r0, #3
 8008972:	f00a f8a5 	bl	8012ac0 <CreateLine>
      len = 28;
 8008976:	4bd6      	ldr	r3, [pc, #856]	@ (8008cd0 <Process_USB_input+0x3a0>)
 8008978:	221c      	movs	r2, #28
 800897a:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 800897c:	4bd4      	ldr	r3, [pc, #848]	@ (8008cd0 <Process_USB_input+0x3a0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008982:	429a      	cmp	r2, r3
 8008984:	d200      	bcs.n	8008988 <Process_USB_input+0x58>
 8008986:	e18b      	b.n	8008ca0 <Process_USB_input+0x370>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4bd4      	ldr	r3, [pc, #848]	@ (8008cdc <Process_USB_input+0x3ac>)
 800898c:	0011      	movs	r1, r2
 800898e:	0018      	movs	r0, r3
 8008990:	f7ff fbcc 	bl	800812c <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4bd2      	ldr	r3, [pc, #840]	@ (8008ce0 <Process_USB_input+0x3b0>)
 8008998:	0011      	movs	r1, r2
 800899a:	0018      	movs	r0, r3
 800899c:	f7ff fbc6 	bl	800812c <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b24      	cmp	r3, #36	@ 0x24
 80089a6:	d102      	bne.n	80089ae <Process_USB_input+0x7e>
      len = 28;
 80089a8:	4bc9      	ldr	r3, [pc, #804]	@ (8008cd0 <Process_USB_input+0x3a0>)
 80089aa:	221c      	movs	r2, #28
 80089ac:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b23      	cmp	r3, #35	@ 0x23
 80089b4:	d004      	beq.n	80089c0 <Process_USB_input+0x90>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b24      	cmp	r3, #36	@ 0x24
 80089bc:	d000      	beq.n	80089c0 <Process_USB_input+0x90>
 80089be:	e152      	b.n	8008c66 <Process_USB_input+0x336>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3301      	adds	r3, #1
 80089c4:	0018      	movs	r0, r3
 80089c6:	f7ff ff65 	bl	8008894 <ascii_to_uint8>
 80089ca:	0003      	movs	r3, r0
 80089cc:	001a      	movs	r2, r3
 80089ce:	4bc5      	ldr	r3, [pc, #788]	@ (8008ce4 <Process_USB_input+0x3b4>)
 80089d0:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 80089d2:	4bc4      	ldr	r3, [pc, #784]	@ (8008ce4 <Process_USB_input+0x3b4>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b64      	cmp	r3, #100	@ 0x64
 80089d8:	d101      	bne.n	80089de <Process_USB_input+0xae>
        return false; // value out of range
 80089da:	2300      	movs	r3, #0
 80089dc:	e173      	b.n	8008cc6 <Process_USB_input+0x396>
      }
      if (data[3] == ',') {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3303      	adds	r3, #3
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80089e6:	d000      	beq.n	80089ea <Process_USB_input+0xba>
 80089e8:	e121      	b.n	8008c2e <Process_USB_input+0x2fe>
        for (uint8_t i=4; i < len; i++) {
 80089ea:	2346      	movs	r3, #70	@ 0x46
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	2204      	movs	r2, #4
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	e0a9      	b.n	8008b48 <Process_USB_input+0x218>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 80089f4:	200a      	movs	r0, #10
 80089f6:	f00a fda3 	bl	8013540 <HAL_Delay>
          if (isxdigit(data[i])) {
 80089fa:	2146      	movs	r1, #70	@ 0x46
 80089fc:	187b      	adds	r3, r7, r1
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	18d3      	adds	r3, r2, r3
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	4bb7      	ldr	r3, [pc, #732]	@ (8008ce8 <Process_USB_input+0x3b8>)
 8008a0a:	18d3      	adds	r3, r2, r3
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	001a      	movs	r2, r3
 8008a10:	2344      	movs	r3, #68	@ 0x44
 8008a12:	4013      	ands	r3, r2
 8008a14:	d069      	beq.n	8008aea <Process_USB_input+0x1ba>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008a16:	4bb5      	ldr	r3, [pc, #724]	@ (8008cec <Process_USB_input+0x3bc>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	b25a      	sxtb	r2, r3
 8008a1e:	0008      	movs	r0, r1
 8008a20:	187b      	adds	r3, r7, r1
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	18cb      	adds	r3, r1, r3
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	1c59      	adds	r1, r3, #1
 8008a2c:	4bae      	ldr	r3, [pc, #696]	@ (8008ce8 <Process_USB_input+0x3b8>)
 8008a2e:	18cb      	adds	r3, r1, r3
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	0019      	movs	r1, r3
 8008a34:	2304      	movs	r3, #4
 8008a36:	400b      	ands	r3, r1
 8008a38:	d008      	beq.n	8008a4c <Process_USB_input+0x11c>
 8008a3a:	183b      	adds	r3, r7, r0
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	18cb      	adds	r3, r1, r3
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	3b30      	subs	r3, #48	@ 0x30
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	b25b      	sxtb	r3, r3
 8008a4a:	e01e      	b.n	8008a8a <Process_USB_input+0x15a>
 8008a4c:	2346      	movs	r3, #70	@ 0x46
 8008a4e:	18fb      	adds	r3, r7, r3
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	18c9      	adds	r1, r1, r3
 8008a56:	2037      	movs	r0, #55	@ 0x37
 8008a58:	183b      	adds	r3, r7, r0
 8008a5a:	7809      	ldrb	r1, [r1, #0]
 8008a5c:	7019      	strb	r1, [r3, #0]
 8008a5e:	183b      	adds	r3, r7, r0
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	1c59      	adds	r1, r3, #1
 8008a64:	4ba0      	ldr	r3, [pc, #640]	@ (8008ce8 <Process_USB_input+0x3b8>)
 8008a66:	18cb      	adds	r3, r1, r3
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	400b      	ands	r3, r1
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d103      	bne.n	8008a7c <Process_USB_input+0x14c>
 8008a74:	183b      	adds	r3, r7, r0
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	3b20      	subs	r3, #32
 8008a7a:	e002      	b.n	8008a82 <Process_USB_input+0x152>
 8008a7c:	2337      	movs	r3, #55	@ 0x37
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	3b37      	subs	r3, #55	@ 0x37
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	b25b      	sxtb	r3, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b25b      	sxtb	r3, r3
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	4b96      	ldr	r3, [pc, #600]	@ (8008cec <Process_USB_input+0x3bc>)
 8008a92:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008a94:	200a      	movs	r0, #10
 8008a96:	f00a fd53 	bl	8013540 <HAL_Delay>
            if (len == 28) {
 8008a9a:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd0 <Process_USB_input+0x3a0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b1c      	cmp	r3, #28
 8008aa0:	d14c      	bne.n	8008b3c <Process_USB_input+0x20c>
              if ((i % 2) == 1) {
 8008aa2:	2346      	movs	r3, #70	@ 0x46
 8008aa4:	18fb      	adds	r3, r7, r3
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4013      	ands	r3, r2
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d044      	beq.n	8008b3c <Process_USB_input+0x20c>
                data[r] = result;
 8008ab2:	2447      	movs	r4, #71	@ 0x47
 8008ab4:	193b      	adds	r3, r7, r4
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	18d3      	adds	r3, r2, r3
 8008abc:	4a8b      	ldr	r2, [pc, #556]	@ (8008cec <Process_USB_input+0x3bc>)
 8008abe:	7812      	ldrb	r2, [r2, #0]
 8008ac0:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008ac2:	193b      	adds	r3, r7, r4
 8008ac4:	7818      	ldrb	r0, [r3, #0]
 8008ac6:	193b      	adds	r3, r7, r4
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	18d3      	adds	r3, r2, r3
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	4a87      	ldr	r2, [pc, #540]	@ (8008cf0 <Process_USB_input+0x3c0>)
 8008ad2:	4981      	ldr	r1, [pc, #516]	@ (8008cd8 <Process_USB_input+0x3a8>)
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	2003      	movs	r0, #3
 8008ada:	f009 fff1 	bl	8012ac0 <CreateLine>
                r++;
 8008ade:	193b      	adds	r3, r7, r4
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	193b      	adds	r3, r7, r4
 8008ae4:	3201      	adds	r2, #1
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	e028      	b.n	8008b3c <Process_USB_input+0x20c>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008aea:	2046      	movs	r0, #70	@ 0x46
 8008aec:	183b      	adds	r3, r7, r0
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	18d3      	adds	r3, r2, r3
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	0019      	movs	r1, r3
 8008af8:	183b      	adds	r3, r7, r0
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	4b7d      	ldr	r3, [pc, #500]	@ (8008cf4 <Process_USB_input+0x3c4>)
 8008afe:	0018      	movs	r0, r3
 8008b00:	f7ff fb14 	bl	800812c <printf_USB>
            ResetUsbRxDataSize();
 8008b04:	f018 fff2 	bl	8021aec <ResetUsbRxDataSize>
            PC_show_Keys();
 8008b08:	f7ff fb50 	bl	80081ac <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008b0c:	2345      	movs	r3, #69	@ 0x45
 8008b0e:	18fb      	adds	r3, r7, r3
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e00b      	b.n	8008b2e <Process_USB_input+0x1fe>
              data[i] = '\0';
 8008b16:	2145      	movs	r1, #69	@ 0x45
 8008b18:	187b      	adds	r3, r7, r1
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	18d3      	adds	r3, r2, r3
 8008b20:	2200      	movs	r2, #0
 8008b22:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008b24:	187b      	adds	r3, r7, r1
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	2345      	movs	r3, #69	@ 0x45
 8008b30:	18fb      	adds	r3, r7, r3
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b1f      	cmp	r3, #31
 8008b36:	d9ee      	bls.n	8008b16 <Process_USB_input+0x1e6>
            }
            return false; // Of een andere foutwaarde
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e0c4      	b.n	8008cc6 <Process_USB_input+0x396>
        for (uint8_t i=4; i < len; i++) {
 8008b3c:	2146      	movs	r1, #70	@ 0x46
 8008b3e:	187b      	adds	r3, r7, r1
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	3201      	adds	r2, #1
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	2346      	movs	r3, #70	@ 0x46
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	781a      	ldrb	r2, [r3, #0]
 8008b4e:	4b60      	ldr	r3, [pc, #384]	@ (8008cd0 <Process_USB_input+0x3a0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d200      	bcs.n	8008b58 <Process_USB_input+0x228>
 8008b56:	e74d      	b.n	80089f4 <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008b58:	4b5d      	ldr	r3, [pc, #372]	@ (8008cd0 <Process_USB_input+0x3a0>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b06      	cmp	r3, #6
 8008b5e:	d114      	bne.n	8008b8a <Process_USB_input+0x25a>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008b60:	2428      	movs	r4, #40	@ 0x28
 8008b62:	193b      	adds	r3, r7, r4
 8008b64:	4864      	ldr	r0, [pc, #400]	@ (8008cf8 <Process_USB_input+0x3c8>)
 8008b66:	220c      	movs	r2, #12
 8008b68:	0019      	movs	r1, r3
 8008b6a:	f002 fb27 	bl	800b1bc <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8008cec <Process_USB_input+0x3bc>)
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	0021      	movs	r1, r4
 8008b74:	187b      	adds	r3, r7, r1
 8008b76:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008b78:	4b5a      	ldr	r3, [pc, #360]	@ (8008ce4 <Process_USB_input+0x3b4>)
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	1879      	adds	r1, r7, r1
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	220c      	movs	r2, #12
 8008b82:	0018      	movs	r0, r3
 8008b84:	f01c fac0 	bl	8025108 <memcpy>
 8008b88:	e005      	b.n	8008b96 <Process_USB_input+0x266>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8008cfc <Process_USB_input+0x3cc>)
 8008b8e:	220c      	movs	r2, #12
 8008b90:	0018      	movs	r0, r3
 8008b92:	f01c fab9 	bl	8025108 <memcpy>
        }
        received.Payload[12] = '\0';
 8008b96:	4b53      	ldr	r3, [pc, #332]	@ (8008ce4 <Process_USB_input+0x3b4>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8008b9c:	4b51      	ldr	r3, [pc, #324]	@ (8008ce4 <Process_USB_input+0x3b4>)
 8008b9e:	220c      	movs	r2, #12
 8008ba0:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 8008ba2:	4b50      	ldr	r3, [pc, #320]	@ (8008ce4 <Process_USB_input+0x3b4>)
 8008ba4:	789b      	ldrb	r3, [r3, #2]
 8008ba6:	4a56      	ldr	r2, [pc, #344]	@ (8008d00 <Process_USB_input+0x3d0>)
 8008ba8:	494b      	ldr	r1, [pc, #300]	@ (8008cd8 <Process_USB_input+0x3a8>)
 8008baa:	2003      	movs	r0, #3
 8008bac:	f009 ff88 	bl	8012ac0 <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 8008bb0:	4a52      	ldr	r2, [pc, #328]	@ (8008cfc <Process_USB_input+0x3cc>)
 8008bb2:	240c      	movs	r4, #12
 8008bb4:	193b      	adds	r3, r7, r4
 8008bb6:	0011      	movs	r1, r2
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f7fc f951 	bl	8004e60 <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8008bbe:	193b      	adds	r3, r7, r4
 8008bc0:	4a50      	ldr	r2, [pc, #320]	@ (8008d04 <Process_USB_input+0x3d4>)
 8008bc2:	4945      	ldr	r1, [pc, #276]	@ (8008cd8 <Process_USB_input+0x3a8>)
 8008bc4:	2003      	movs	r0, #3
 8008bc6:	f009 ff7b 	bl	8012ac0 <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8008bca:	4b46      	ldr	r3, [pc, #280]	@ (8008ce4 <Process_USB_input+0x3b4>)
 8008bcc:	789b      	ldrb	r3, [r3, #2]
 8008bce:	4a4e      	ldr	r2, [pc, #312]	@ (8008d08 <Process_USB_input+0x3d8>)
 8008bd0:	4941      	ldr	r1, [pc, #260]	@ (8008cd8 <Process_USB_input+0x3a8>)
 8008bd2:	2003      	movs	r0, #3
 8008bd4:	f009 ff74 	bl	8012ac0 <CreateLine>
        ProcessCmd(received);
 8008bd8:	4c42      	ldr	r4, [pc, #264]	@ (8008ce4 <Process_USB_input+0x3b4>)
 8008bda:	466b      	mov	r3, sp
 8008bdc:	0018      	movs	r0, r3
 8008bde:	0023      	movs	r3, r4
 8008be0:	3310      	adds	r3, #16
 8008be2:	22f4      	movs	r2, #244	@ 0xf4
 8008be4:	0019      	movs	r1, r3
 8008be6:	f01c fa8f 	bl	8025108 <memcpy>
 8008bea:	6820      	ldr	r0, [r4, #0]
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	68a2      	ldr	r2, [r4, #8]
 8008bf0:	68e3      	ldr	r3, [r4, #12]
 8008bf2:	f7ff f86f 	bl	8007cd4 <ProcessCmd>
        ResetUsbRxDataSize();
 8008bf6:	f018 ff79 	bl	8021aec <ResetUsbRxDataSize>
        PC_show_Keys();
 8008bfa:	f7ff fad7 	bl	80081ac <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8008bfe:	2344      	movs	r3, #68	@ 0x44
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e00b      	b.n	8008c20 <Process_USB_input+0x2f0>
          data[i] = '\0';
 8008c08:	2144      	movs	r1, #68	@ 0x44
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	2200      	movs	r2, #0
 8008c14:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8008c16:	187b      	adds	r3, r7, r1
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	3201      	adds	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	2344      	movs	r3, #68	@ 0x44
 8008c22:	18fb      	adds	r3, r7, r3
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b1f      	cmp	r3, #31
 8008c28:	d9ee      	bls.n	8008c08 <Process_USB_input+0x2d8>
        }
        return true;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e04b      	b.n	8008cc6 <Process_USB_input+0x396>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8008c2e:	4b37      	ldr	r3, [pc, #220]	@ (8008d0c <Process_USB_input+0x3dc>)
 8008c30:	0018      	movs	r0, r3
 8008c32:	f7ff fa7b 	bl	800812c <printf_USB>
        ResetUsbRxDataSize();
 8008c36:	f018 ff59 	bl	8021aec <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 8008c3a:	2343      	movs	r3, #67	@ 0x43
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e00b      	b.n	8008c5c <Process_USB_input+0x32c>
          data[i] = '\0';
 8008c44:	2143      	movs	r1, #67	@ 0x43
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	18d3      	adds	r3, r2, r3
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	187b      	adds	r3, r7, r1
 8008c58:	3201      	adds	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	2343      	movs	r3, #67	@ 0x43
 8008c5e:	18fb      	adds	r3, r7, r3
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b1f      	cmp	r3, #31
 8008c64:	d9ee      	bls.n	8008c44 <Process_USB_input+0x314>
        }
      }
    }
//    else {
    len = 6;
 8008c66:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd0 <Process_USB_input+0x3a0>)
 8008c68:	2206      	movs	r2, #6
 8008c6a:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 8008c6c:	f7ff fa9e 	bl	80081ac <PC_show_Keys>
    ResetUsbRxDataSize();
 8008c70:	f018 ff3c 	bl	8021aec <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 8008c74:	2342      	movs	r3, #66	@ 0x42
 8008c76:	18fb      	adds	r3, r7, r3
 8008c78:	2200      	movs	r2, #0
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e00b      	b.n	8008c96 <Process_USB_input+0x366>
      data[i] = '\0';
 8008c7e:	2142      	movs	r1, #66	@ 0x42
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	18d3      	adds	r3, r2, r3
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8008c8c:	187b      	adds	r3, r7, r1
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	187b      	adds	r3, r7, r1
 8008c92:	3201      	adds	r2, #1
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	2342      	movs	r3, #66	@ 0x42
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b1f      	cmp	r3, #31
 8008c9e:	d9ee      	bls.n	8008c7e <Process_USB_input+0x34e>
    }
  }
  if (formerlength != length) {
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8008d10 <Process_USB_input+0x3e0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d008      	beq.n	8008cbc <Process_USB_input+0x38c>
    printf_USB("USB input: %s\r", (const char*)data);
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	4b19      	ldr	r3, [pc, #100]	@ (8008d14 <Process_USB_input+0x3e4>)
 8008cae:	0011      	movs	r1, r2
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f7ff fa3b 	bl	800812c <printf_USB>
    formerlength = length;
 8008cb6:	4b16      	ldr	r3, [pc, #88]	@ (8008d10 <Process_USB_input+0x3e0>)
 8008cb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cba:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8008cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f018 ff36 	bl	8021b30 <GetUsbRxNextChunk>

  return false;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	b013      	add	sp, #76	@ 0x4c
 8008ccc:	bd90      	pop	{r4, r7, pc}
 8008cce:	46c0      	nop			@ (mov r8, r8)
 8008cd0:	20000030 	.word	0x20000030
 8008cd4:	0802ac9c 	.word	0x0802ac9c
 8008cd8:	0802acdc 	.word	0x0802acdc
 8008cdc:	0802ace0 	.word	0x0802ace0
 8008ce0:	0802ad0c 	.word	0x0802ad0c
 8008ce4:	200007c4 	.word	0x200007c4
 8008ce8:	0802d910 	.word	0x0802d910
 8008cec:	200008c8 	.word	0x200008c8
 8008cf0:	0802ad1c 	.word	0x0802ad1c
 8008cf4:	0802ad30 	.word	0x0802ad30
 8008cf8:	08080000 	.word	0x08080000
 8008cfc:	200007c6 	.word	0x200007c6
 8008d00:	0802ad68 	.word	0x0802ad68
 8008d04:	0802ad94 	.word	0x0802ad94
 8008d08:	0802adb8 	.word	0x0802adb8
 8008d0c:	0802ade4 	.word	0x0802ade4
 8008d10:	200008cc 	.word	0x200008cc
 8008d14:	0802ae10 	.word	0x0802ae10

08008d18 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8008d1c:	4b26      	ldr	r3, [pc, #152]	@ (8008db8 <ReadBatteryVoltage+0xa0>)
 8008d1e:	4a27      	ldr	r2, [pc, #156]	@ (8008dbc <ReadBatteryVoltage+0xa4>)
 8008d20:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d22:	4b25      	ldr	r3, [pc, #148]	@ (8008db8 <ReadBatteryVoltage+0xa0>)
 8008d24:	2280      	movs	r2, #128	@ 0x80
 8008d26:	0152      	lsls	r2, r2, #5
 8008d28:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d2a:	4a23      	ldr	r2, [pc, #140]	@ (8008db8 <ReadBatteryVoltage+0xa0>)
 8008d2c:	4b24      	ldr	r3, [pc, #144]	@ (8008dc0 <ReadBatteryVoltage+0xa8>)
 8008d2e:	0011      	movs	r1, r2
 8008d30:	0018      	movs	r0, r3
 8008d32:	f00a fed3 	bl	8013adc <HAL_ADC_ConfigChannel>
 8008d36:	1e03      	subs	r3, r0, #0
 8008d38:	d001      	beq.n	8008d3e <ReadBatteryVoltage+0x26>
    Error_Handler();
 8008d3a:	f003 faf9 	bl	800c330 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8008d3e:	4b20      	ldr	r3, [pc, #128]	@ (8008dc0 <ReadBatteryVoltage+0xa8>)
 8008d40:	0018      	movs	r0, r3
 8008d42:	f00a fdcf 	bl	80138e4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8008d46:	4b1e      	ldr	r3, [pc, #120]	@ (8008dc0 <ReadBatteryVoltage+0xa8>)
 8008d48:	2101      	movs	r1, #1
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f00a fe1e 	bl	801398c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8008d50:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc0 <ReadBatteryVoltage+0xa8>)
 8008d52:	0018      	movs	r0, r3
 8008d54:	f00a feb6 	bl	8013ac4 <HAL_ADC_GetValue>
 8008d58:	0002      	movs	r2, r0
 8008d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc4 <ReadBatteryVoltage+0xac>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4353      	muls	r3, r2
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4919      	ldr	r1, [pc, #100]	@ (8008dc8 <ReadBatteryVoltage+0xb0>)
 8008d64:	0018      	movs	r0, r3
 8008d66:	f7f7 fa1d 	bl	80001a4 <__udivsi3>
 8008d6a:	0003      	movs	r3, r0
 8008d6c:	001a      	movs	r2, r3
 8008d6e:	4b17      	ldr	r3, [pc, #92]	@ (8008dcc <ReadBatteryVoltage+0xb4>)
 8008d70:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8008d72:	4b16      	ldr	r3, [pc, #88]	@ (8008dcc <ReadBatteryVoltage+0xb4>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	0018      	movs	r0, r3
 8008d78:	f7f8 fc76 	bl	8001668 <__aeabi_ui2f>
 8008d7c:	1c03      	adds	r3, r0, #0
 8008d7e:	4914      	ldr	r1, [pc, #80]	@ (8008dd0 <ReadBatteryVoltage+0xb8>)
 8008d80:	1c18      	adds	r0, r3, #0
 8008d82:	f7f7 ff27 	bl	8000bd4 <__aeabi_fdiv>
 8008d86:	1c03      	adds	r3, r0, #0
 8008d88:	1c1a      	adds	r2, r3, #0
 8008d8a:	4b12      	ldr	r3, [pc, #72]	@ (8008dd4 <ReadBatteryVoltage+0xbc>)
 8008d8c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <ReadBatteryVoltage+0xa0>)
 8008d90:	4a0a      	ldr	r2, [pc, #40]	@ (8008dbc <ReadBatteryVoltage+0xa4>)
 8008d92:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8008d94:	4b08      	ldr	r3, [pc, #32]	@ (8008db8 <ReadBatteryVoltage+0xa0>)
 8008d96:	4a10      	ldr	r2, [pc, #64]	@ (8008dd8 <ReadBatteryVoltage+0xc0>)
 8008d98:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d9a:	4a07      	ldr	r2, [pc, #28]	@ (8008db8 <ReadBatteryVoltage+0xa0>)
 8008d9c:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <ReadBatteryVoltage+0xa8>)
 8008d9e:	0011      	movs	r1, r2
 8008da0:	0018      	movs	r0, r3
 8008da2:	f00a fe9b 	bl	8013adc <HAL_ADC_ConfigChannel>
 8008da6:	1e03      	subs	r3, r0, #0
 8008da8:	d001      	beq.n	8008dae <ReadBatteryVoltage+0x96>
    Error_Handler();
 8008daa:	f003 fac1 	bl	800c330 <Error_Handler>
  }
  return trueValue;
 8008dae:	4b09      	ldr	r3, [pc, #36]	@ (8008dd4 <ReadBatteryVoltage+0xbc>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 }
 8008db2:	1c18      	adds	r0, r3, #0
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000b64 	.word	0x20000b64
 8008dbc:	38004000 	.word	0x38004000
 8008dc0:	20000ba0 	.word	0x20000ba0
 8008dc4:	20000034 	.word	0x20000034
 8008dc8:	00000fff 	.word	0x00000fff
 8008dcc:	20000b6c 	.word	0x20000b6c
 8008dd0:	447a0000 	.word	0x447a0000
 8008dd4:	20000b70 	.word	0x20000b70
 8008dd8:	00001001 	.word	0x00001001

08008ddc <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8008de0:	4b21      	ldr	r3, [pc, #132]	@ (8008e68 <ReadSolarVoltage+0x8c>)
 8008de2:	4a22      	ldr	r2, [pc, #136]	@ (8008e6c <ReadSolarVoltage+0x90>)
 8008de4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008de6:	4b20      	ldr	r3, [pc, #128]	@ (8008e68 <ReadSolarVoltage+0x8c>)
 8008de8:	2280      	movs	r2, #128	@ 0x80
 8008dea:	0152      	lsls	r2, r2, #5
 8008dec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dee:	4a1e      	ldr	r2, [pc, #120]	@ (8008e68 <ReadSolarVoltage+0x8c>)
 8008df0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e70 <ReadSolarVoltage+0x94>)
 8008df2:	0011      	movs	r1, r2
 8008df4:	0018      	movs	r0, r3
 8008df6:	f00a fe71 	bl	8013adc <HAL_ADC_ConfigChannel>
 8008dfa:	1e03      	subs	r3, r0, #0
 8008dfc:	d001      	beq.n	8008e02 <ReadSolarVoltage+0x26>
    Error_Handler();
 8008dfe:	f003 fa97 	bl	800c330 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8008e02:	4b1b      	ldr	r3, [pc, #108]	@ (8008e70 <ReadSolarVoltage+0x94>)
 8008e04:	0018      	movs	r0, r3
 8008e06:	f00a fd6d 	bl	80138e4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8008e0a:	4b19      	ldr	r3, [pc, #100]	@ (8008e70 <ReadSolarVoltage+0x94>)
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f00a fdbc 	bl	801398c <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8008e14:	4b16      	ldr	r3, [pc, #88]	@ (8008e70 <ReadSolarVoltage+0x94>)
 8008e16:	0018      	movs	r0, r3
 8008e18:	f00a fe54 	bl	8013ac4 <HAL_ADC_GetValue>
 8008e1c:	0002      	movs	r2, r0
 8008e1e:	4b15      	ldr	r3, [pc, #84]	@ (8008e74 <ReadSolarVoltage+0x98>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	435a      	muls	r2, r3
 8008e24:	0013      	movs	r3, r2
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	189b      	adds	r3, r3, r2
 8008e2a:	4913      	ldr	r1, [pc, #76]	@ (8008e78 <ReadSolarVoltage+0x9c>)
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	f7f7 f9b9 	bl	80001a4 <__udivsi3>
 8008e32:	0003      	movs	r3, r0
 8008e34:	001a      	movs	r2, r3
 8008e36:	4b11      	ldr	r3, [pc, #68]	@ (8008e7c <ReadSolarVoltage+0xa0>)
 8008e38:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <ReadSolarVoltage+0x8c>)
 8008e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008e6c <ReadSolarVoltage+0x90>)
 8008e3e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8008e40:	4b09      	ldr	r3, [pc, #36]	@ (8008e68 <ReadSolarVoltage+0x8c>)
 8008e42:	4a0f      	ldr	r2, [pc, #60]	@ (8008e80 <ReadSolarVoltage+0xa4>)
 8008e44:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e46:	4a08      	ldr	r2, [pc, #32]	@ (8008e68 <ReadSolarVoltage+0x8c>)
 8008e48:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <ReadSolarVoltage+0x94>)
 8008e4a:	0011      	movs	r1, r2
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f00a fe45 	bl	8013adc <HAL_ADC_ConfigChannel>
 8008e52:	1e03      	subs	r3, r0, #0
 8008e54:	d001      	beq.n	8008e5a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8008e56:	f003 fa6b 	bl	800c330 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8008e5a:	4b08      	ldr	r3, [pc, #32]	@ (8008e7c <ReadSolarVoltage+0xa0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 }
 8008e60:	0018      	movs	r0, r3
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	20000b64 	.word	0x20000b64
 8008e6c:	3c008000 	.word	0x3c008000
 8008e70:	20000ba0 	.word	0x20000ba0
 8008e74:	20000034 	.word	0x20000034
 8008e78:	00000fff 	.word	0x00000fff
 8008e7c:	20000b74 	.word	0x20000b74
 8008e80:	00001001 	.word	0x00001001

08008e84 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8008e88:	23a0      	movs	r3, #160	@ 0xa0
 8008e8a:	05db      	lsls	r3, r3, #23
 8008e8c:	2180      	movs	r1, #128	@ 0x80
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f00b fdc0 	bl	8014a14 <HAL_GPIO_ReadPin>
 8008e94:	0003      	movs	r3, r0
 8008e96:	1e5a      	subs	r2, r3, #1
 8008e98:	4193      	sbcs	r3, r2
 8008e9a:	b2db      	uxtb	r3, r3
}
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8008ea6:	2380      	movs	r3, #128	@ 0x80
 8008ea8:	021a      	lsls	r2, r3, #8
 8008eaa:	23a0      	movs	r3, #160	@ 0xa0
 8008eac:	05db      	lsls	r3, r3, #23
 8008eae:	0011      	movs	r1, r2
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f00b fdaf 	bl	8014a14 <HAL_GPIO_ReadPin>
 8008eb6:	0003      	movs	r3, r0
 8008eb8:	1e5a      	subs	r2, r3, #1
 8008eba:	4193      	sbcs	r3, r2
 8008ebc:	b2db      	uxtb	r3, r3
}
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8008ec8:	4b05      	ldr	r3, [pc, #20]	@ (8008ee0 <UserButton_Pressed+0x1c>)
 8008eca:	2104      	movs	r1, #4
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f00b fda1 	bl	8014a14 <HAL_GPIO_ReadPin>
 8008ed2:	0003      	movs	r3, r0
 8008ed4:	425a      	negs	r2, r3
 8008ed6:	4153      	adcs	r3, r2
 8008ed8:	b2db      	uxtb	r3, r3
}
 8008eda:	0018      	movs	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	50000c00 	.word	0x50000c00

08008ee4 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee6:	46d6      	mov	lr, sl
 8008ee8:	464f      	mov	r7, r9
 8008eea:	4646      	mov	r6, r8
 8008eec:	b5c0      	push	{r6, r7, lr}
 8008eee:	b08e      	sub	sp, #56	@ 0x38
 8008ef0:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8008ef2:	4b21      	ldr	r3, [pc, #132]	@ (8008f78 <showTime+0x94>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d036      	beq.n	8008f68 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008efa:	003a      	movs	r2, r7
 8008efc:	1d3b      	adds	r3, r7, #4
 8008efe:	0011      	movs	r1, r2
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 fa3f 	bl	8009384 <RTC_GetTime>
  UpdateSystemUptime();
 8008f06:	f000 f853 	bl	8008fb0 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f0a:	003b      	movs	r3, r7
 8008f0c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f0e:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f10:	003b      	movs	r3, r7
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f16:	4b19      	ldr	r3, [pc, #100]	@ (8008f7c <showTime+0x98>)
 8008f18:	0092      	lsls	r2, r2, #2
 8008f1a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f1c:	003b      	movs	r3, r7
 8008f1e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f20:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f22:	1d3b      	adds	r3, r7, #4
 8008f24:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f26:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f28:	1d3b      	adds	r3, r7, #4
 8008f2a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f2c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f2e:	1d3b      	adds	r3, r7, #4
 8008f30:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f32:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f34:	4b12      	ldr	r3, [pc, #72]	@ (8008f80 <showTime+0x9c>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f38:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f3a:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <showTime+0x9c>)
 8008f3c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f3e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f40:	4b0f      	ldr	r3, [pc, #60]	@ (8008f80 <showTime+0x9c>)
 8008f42:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f44:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f46:	4b0e      	ldr	r3, [pc, #56]	@ (8008f80 <showTime+0x9c>)
 8008f48:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f4a:	480e      	ldr	r0, [pc, #56]	@ (8008f84 <showTime+0xa0>)
 8008f4c:	9306      	str	r3, [sp, #24]
 8008f4e:	4643      	mov	r3, r8
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	4663      	mov	r3, ip
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	9603      	str	r6, [sp, #12]
 8008f58:	9502      	str	r5, [sp, #8]
 8008f5a:	9401      	str	r4, [sp, #4]
 8008f5c:	9100      	str	r1, [sp, #0]
 8008f5e:	4653      	mov	r3, sl
 8008f60:	4649      	mov	r1, r9
 8008f62:	f01b fe1f 	bl	8024ba4 <iprintf>
 8008f66:	e000      	b.n	8008f6a <showTime+0x86>
    return;
 8008f68:	46c0      	nop			@ (mov r8, r8)
}
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b006      	add	sp, #24
 8008f6e:	bce0      	pop	{r5, r6, r7}
 8008f70:	46ba      	mov	sl, r7
 8008f72:	46b1      	mov	r9, r6
 8008f74:	46a8      	mov	r8, r5
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	20000b84 	.word	0x20000b84
 8008f7c:	20000054 	.word	0x20000054
 8008f80:	20000b78 	.word	0x20000b78
 8008f84:	0802ae6c 	.word	0x0802ae6c

08008f88 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008f8e:	003a      	movs	r2, r7
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	0011      	movs	r1, r2
 8008f94:	0018      	movs	r0, r3
 8008f96:	f000 f9f5 	bl	8009384 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8008f9a:	1d3a      	adds	r2, r7, #4
 8008f9c:	003b      	movs	r3, r7
 8008f9e:	0011      	movs	r1, r2
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f000 fbc7 	bl	8009734 <makeTime>
 8008fa6:	0003      	movs	r3, r0
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b006      	add	sp, #24
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8008fb6:	003a      	movs	r2, r7
 8008fb8:	1d3b      	adds	r3, r7, #4
 8008fba:	0011      	movs	r1, r2
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f000 f9e1 	bl	8009384 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8008fc2:	1d3a      	adds	r2, r7, #4
 8008fc4:	003b      	movs	r3, r7
 8008fc6:	0011      	movs	r1, r2
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f000 fbb3 	bl	8009734 <makeTime>
 8008fce:	0002      	movs	r2, r0
 8008fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800904c <UpdateSystemUptime+0x9c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	213c      	movs	r1, #60	@ 0x3c
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f7f7 f965 	bl	80002b0 <__aeabi_uidivmod>
 8008fe6:	000b      	movs	r3, r1
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	4b19      	ldr	r3, [pc, #100]	@ (8009050 <UpdateSystemUptime+0xa0>)
 8008fec:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	213c      	movs	r1, #60	@ 0x3c
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7f7 f8d6 	bl	80001a4 <__udivsi3>
 8008ff8:	0003      	movs	r3, r0
 8008ffa:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	213c      	movs	r1, #60	@ 0x3c
 8009000:	0018      	movs	r0, r3
 8009002:	f7f7 f955 	bl	80002b0 <__aeabi_uidivmod>
 8009006:	000b      	movs	r3, r1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <UpdateSystemUptime+0xa0>)
 800900c:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	213c      	movs	r1, #60	@ 0x3c
 8009012:	0018      	movs	r0, r3
 8009014:	f7f7 f8c6 	bl	80001a4 <__udivsi3>
 8009018:	0003      	movs	r3, r0
 800901a:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2118      	movs	r1, #24
 8009020:	0018      	movs	r0, r3
 8009022:	f7f7 f945 	bl	80002b0 <__aeabi_uidivmod>
 8009026:	000b      	movs	r3, r1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <UpdateSystemUptime+0xa0>)
 800902c:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2118      	movs	r1, #24
 8009032:	0018      	movs	r0, r3
 8009034:	f7f7 f8b6 	bl	80001a4 <__udivsi3>
 8009038:	0003      	movs	r3, r0
 800903a:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	b29a      	uxth	r2, r3
 8009040:	4b03      	ldr	r3, [pc, #12]	@ (8009050 <UpdateSystemUptime+0xa0>)
 8009042:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009044:	46c0      	nop			@ (mov r8, r8)
 8009046:	46bd      	mov	sp, r7
 8009048:	b008      	add	sp, #32
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000b84 	.word	0x20000b84
 8009050:	20000b78 	.word	0x20000b78

08009054 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	0008      	movs	r0, r1
 800905e:	0011      	movs	r1, r2
 8009060:	1cfb      	adds	r3, r7, #3
 8009062:	1c02      	adds	r2, r0, #0
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	1cbb      	adds	r3, r7, #2
 8009068:	1c0a      	adds	r2, r1, #0
 800906a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800906c:	230e      	movs	r3, #14
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009074:	230f      	movs	r3, #15
 8009076:	18fb      	adds	r3, r7, r3
 8009078:	1cfa      	adds	r2, r7, #3
 800907a:	7812      	ldrb	r2, [r2, #0]
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	e015      	b.n	80090ac <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009080:	200f      	movs	r0, #15
 8009082:	183b      	adds	r3, r7, r0
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	18d2      	adds	r2, r2, r3
 800908a:	240e      	movs	r4, #14
 800908c:	193b      	adds	r3, r7, r4
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	7811      	ldrb	r1, [r2, #0]
 8009092:	2208      	movs	r2, #8
 8009094:	18ba      	adds	r2, r7, r2
 8009096:	54d1      	strb	r1, [r2, r3]
    pos++;
 8009098:	193b      	adds	r3, r7, r4
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	193b      	adds	r3, r7, r4
 800909e:	3201      	adds	r2, #1
 80090a0:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80090a2:	183b      	adds	r3, r7, r0
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	183b      	adds	r3, r7, r0
 80090a8:	3201      	adds	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
 80090ac:	200f      	movs	r0, #15
 80090ae:	183a      	adds	r2, r7, r0
 80090b0:	1cbb      	adds	r3, r7, #2
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d9e2      	bls.n	8009080 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80090ba:	230e      	movs	r3, #14
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2208      	movs	r2, #8
 80090c2:	18ba      	adds	r2, r7, r2
 80090c4:	2100      	movs	r1, #0
 80090c6:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80090c8:	1cfb      	adds	r3, r7, #3
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b13      	cmp	r3, #19
 80090ce:	d849      	bhi.n	8009164 <aBuff2int+0x110>
    if (start == 17) { //month
 80090d0:	1cfb      	adds	r3, r7, #3
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b11      	cmp	r3, #17
 80090d6:	d122      	bne.n	800911e <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80090d8:	183b      	adds	r3, r7, r0
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	e018      	b.n	8009112 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80090e0:	240f      	movs	r4, #15
 80090e2:	193b      	adds	r3, r7, r4
 80090e4:	781a      	ldrb	r2, [r3, #0]
 80090e6:	4b25      	ldr	r3, [pc, #148]	@ (800917c <aBuff2int+0x128>)
 80090e8:	0092      	lsls	r2, r2, #2
 80090ea:	58d2      	ldr	r2, [r2, r3]
 80090ec:	2308      	movs	r3, #8
 80090ee:	18fb      	adds	r3, r7, r3
 80090f0:	0011      	movs	r1, r2
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7f7 f830 	bl	8000158 <strcmp>
 80090f8:	1e03      	subs	r3, r0, #0
 80090fa:	d104      	bne.n	8009106 <aBuff2int+0xb2>
          return i+1;
 80090fc:	193b      	adds	r3, r7, r4
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	b2db      	uxtb	r3, r3
 8009104:	e035      	b.n	8009172 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8009106:	210f      	movs	r1, #15
 8009108:	187b      	adds	r3, r7, r1
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	187b      	adds	r3, r7, r1
 800910e:	3201      	adds	r2, #1
 8009110:	701a      	strb	r2, [r3, #0]
 8009112:	230f      	movs	r3, #15
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b0b      	cmp	r3, #11
 800911a:	d9e1      	bls.n	80090e0 <aBuff2int+0x8c>
 800911c:	e022      	b.n	8009164 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800911e:	230f      	movs	r3, #15
 8009120:	18fb      	adds	r3, r7, r3
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	e018      	b.n	800915a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8009128:	240f      	movs	r4, #15
 800912a:	193b      	adds	r3, r7, r4
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	4b14      	ldr	r3, [pc, #80]	@ (8009180 <aBuff2int+0x12c>)
 8009130:	0092      	lsls	r2, r2, #2
 8009132:	58d2      	ldr	r2, [r2, r3]
 8009134:	2308      	movs	r3, #8
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	0011      	movs	r1, r2
 800913a:	0018      	movs	r0, r3
 800913c:	f7f7 f80c 	bl	8000158 <strcmp>
 8009140:	1e03      	subs	r3, r0, #0
 8009142:	d104      	bne.n	800914e <aBuff2int+0xfa>
          return i+1;
 8009144:	193b      	adds	r3, r7, r4
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	3301      	adds	r3, #1
 800914a:	b2db      	uxtb	r3, r3
 800914c:	e011      	b.n	8009172 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800914e:	210f      	movs	r1, #15
 8009150:	187b      	adds	r3, r7, r1
 8009152:	781a      	ldrb	r2, [r3, #0]
 8009154:	187b      	adds	r3, r7, r1
 8009156:	3201      	adds	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	230f      	movs	r3, #15
 800915c:	18fb      	adds	r3, r7, r3
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b06      	cmp	r3, #6
 8009162:	d9e1      	bls.n	8009128 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8009164:	2308      	movs	r3, #8
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	0018      	movs	r0, r3
 800916a:	f01a f940 	bl	80233ee <atoi>
 800916e:	0003      	movs	r3, r0
 8009170:	b2db      	uxtb	r3, r3
}
 8009172:	0018      	movs	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	b005      	add	sp, #20
 8009178:	bd90      	pop	{r4, r7, pc}
 800917a:	46c0      	nop			@ (mov r8, r8)
 800917c:	20000054 	.word	0x20000054
 8009180:	20000038 	.word	0x20000038

08009184 <ParseTime>:

void ParseTime(char* buffer) {
 8009184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009186:	b08b      	sub	sp, #44	@ 0x2c
 8009188:	af02      	add	r7, sp, #8
 800918a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800918c:	2408      	movs	r4, #8
 800918e:	193a      	adds	r2, r7, r4
 8009190:	260c      	movs	r6, #12
 8009192:	19bb      	adds	r3, r7, r6
 8009194:	0011      	movs	r1, r2
 8009196:	0018      	movs	r0, r3
 8009198:	f000 f8f4 	bl	8009384 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2219      	movs	r2, #25
 80091a0:	2118      	movs	r1, #24
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7ff ff56 	bl	8009054 <aBuff2int>
 80091a8:	0003      	movs	r3, r0
 80091aa:	001a      	movs	r2, r3
 80091ac:	19bb      	adds	r3, r7, r6
 80091ae:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	221c      	movs	r2, #28
 80091b4:	211b      	movs	r1, #27
 80091b6:	0018      	movs	r0, r3
 80091b8:	f7ff ff4c 	bl	8009054 <aBuff2int>
 80091bc:	0003      	movs	r3, r0
 80091be:	001a      	movs	r2, r3
 80091c0:	19bb      	adds	r3, r7, r6
 80091c2:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	221f      	movs	r2, #31
 80091c8:	211e      	movs	r1, #30
 80091ca:	0018      	movs	r0, r3
 80091cc:	f7ff ff42 	bl	8009054 <aBuff2int>
 80091d0:	0003      	movs	r3, r0
 80091d2:	001a      	movs	r2, r3
 80091d4:	19bb      	adds	r3, r7, r6
 80091d6:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2224      	movs	r2, #36	@ 0x24
 80091dc:	2123      	movs	r1, #35	@ 0x23
 80091de:	0018      	movs	r0, r3
 80091e0:	f7ff ff38 	bl	8009054 <aBuff2int>
 80091e4:	0003      	movs	r3, r0
 80091e6:	001a      	movs	r2, r3
 80091e8:	0025      	movs	r5, r4
 80091ea:	197b      	adds	r3, r7, r5
 80091ec:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2213      	movs	r2, #19
 80091f2:	2111      	movs	r1, #17
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7ff ff2d 	bl	8009054 <aBuff2int>
 80091fa:	0003      	movs	r3, r0
 80091fc:	001a      	movs	r2, r3
 80091fe:	197b      	adds	r3, r7, r5
 8009200:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2216      	movs	r2, #22
 8009206:	2115      	movs	r1, #21
 8009208:	0018      	movs	r0, r3
 800920a:	f7ff ff23 	bl	8009054 <aBuff2int>
 800920e:	0003      	movs	r3, r0
 8009210:	001a      	movs	r2, r3
 8009212:	197b      	adds	r3, r7, r5
 8009214:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220f      	movs	r2, #15
 800921a:	210d      	movs	r1, #13
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff ff19 	bl	8009054 <aBuff2int>
 8009222:	0003      	movs	r3, r0
 8009224:	001a      	movs	r2, r3
 8009226:	197b      	adds	r3, r7, r5
 8009228:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800922a:	19bb      	adds	r3, r7, r6
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	001c      	movs	r4, r3
 8009230:	19bb      	adds	r3, r7, r6
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	0018      	movs	r0, r3
 8009236:	19bb      	adds	r3, r7, r6
 8009238:	789b      	ldrb	r3, [r3, #2]
 800923a:	4a1c      	ldr	r2, [pc, #112]	@ (80092ac <ParseTime+0x128>)
 800923c:	491c      	ldr	r1, [pc, #112]	@ (80092b0 <ParseTime+0x12c>)
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	9000      	str	r0, [sp, #0]
 8009242:	0023      	movs	r3, r4
 8009244:	2003      	movs	r0, #3
 8009246:	f009 fc3b 	bl	8012ac0 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800924a:	197b      	adds	r3, r7, r5
 800924c:	789b      	ldrb	r3, [r3, #2]
 800924e:	001c      	movs	r4, r3
 8009250:	197b      	adds	r3, r7, r5
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	0018      	movs	r0, r3
 8009256:	197b      	adds	r3, r7, r5
 8009258:	78db      	ldrb	r3, [r3, #3]
 800925a:	4a16      	ldr	r2, [pc, #88]	@ (80092b4 <ParseTime+0x130>)
 800925c:	4914      	ldr	r1, [pc, #80]	@ (80092b0 <ParseTime+0x12c>)
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	9000      	str	r0, [sp, #0]
 8009262:	0023      	movs	r3, r4
 8009264:	2003      	movs	r0, #3
 8009266:	f009 fc2b 	bl	8012ac0 <CreateLine>
  RTC_SetTime(&currentTime);
 800926a:	19bb      	adds	r3, r7, r6
 800926c:	0018      	movs	r0, r3
 800926e:	f000 f825 	bl	80092bc <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8009272:	197b      	adds	r3, r7, r5
 8009274:	0018      	movs	r0, r3
 8009276:	f000 f847 	bl	8009308 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800927a:	197b      	adds	r3, r7, r5
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d101      	bne.n	8009286 <ParseTime+0x102>
    reset_fanCleaningDone();
 8009282:	f004 f9a7 	bl	800d5d4 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8009286:	4b0c      	ldr	r3, [pc, #48]	@ (80092b8 <ParseTime+0x134>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800928e:	230c      	movs	r3, #12
 8009290:	18fa      	adds	r2, r7, r3
 8009292:	2308      	movs	r3, #8
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	0011      	movs	r1, r2
 8009298:	0018      	movs	r0, r3
 800929a:	f000 fa4b 	bl	8009734 <makeTime>
 800929e:	0002      	movs	r2, r0
 80092a0:	4b05      	ldr	r3, [pc, #20]	@ (80092b8 <ParseTime+0x134>)
 80092a2:	601a      	str	r2, [r3, #0]
  }
}
 80092a4:	46c0      	nop			@ (mov r8, r8)
 80092a6:	46bd      	mov	sp, r7
 80092a8:	b009      	add	sp, #36	@ 0x24
 80092aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ac:	0802aec4 	.word	0x0802aec4
 80092b0:	0802aefc 	.word	0x0802aefc
 80092b4:	0802af00 	.word	0x0802af00
 80092b8:	20000b84 	.word	0x20000b84

080092bc <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80092d6:	4b09      	ldr	r3, [pc, #36]	@ (80092fc <RTC_SetTime+0x40>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	0018      	movs	r0, r3
 80092e0:	f011 fcdc 	bl	801ac9c <HAL_RTC_SetTime>
 80092e4:	1e03      	subs	r3, r0, #0
 80092e6:	d005      	beq.n	80092f4 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80092e8:	4a05      	ldr	r2, [pc, #20]	@ (8009300 <RTC_SetTime+0x44>)
 80092ea:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <RTC_SetTime+0x48>)
 80092ec:	0019      	movs	r1, r3
 80092ee:	2001      	movs	r0, #1
 80092f0:	f009 fbe6 	bl	8012ac0 <CreateLine>
    }
}
 80092f4:	46c0      	nop			@ (mov r8, r8)
 80092f6:	46bd      	mov	sp, r7
 80092f8:	b002      	add	sp, #8
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000b80 	.word	0x20000b80
 8009300:	0802af34 	.word	0x0802af34
 8009304:	0802af50 	.word	0x0802af50

08009308 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009310:	4b16      	ldr	r3, [pc, #88]	@ (800936c <RTC_SetDate+0x64>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	0018      	movs	r0, r3
 800931a:	f011 fdc7 	bl	801aeac <HAL_RTC_SetDate>
 800931e:	1e03      	subs	r3, r0, #0
 8009320:	d005      	beq.n	800932e <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8009322:	4a13      	ldr	r2, [pc, #76]	@ (8009370 <RTC_SetDate+0x68>)
 8009324:	4b13      	ldr	r3, [pc, #76]	@ (8009374 <RTC_SetDate+0x6c>)
 8009326:	0019      	movs	r1, r3
 8009328:	2001      	movs	r0, #1
 800932a:	f009 fbc9 	bl	8012ac0 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800932e:	4b0f      	ldr	r3, [pc, #60]	@ (800936c <RTC_SetDate+0x64>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2101      	movs	r1, #1
 8009334:	0018      	movs	r0, r3
 8009336:	f012 f8ff 	bl	801b538 <HAL_RTCEx_BKUPRead>
 800933a:	0003      	movs	r3, r0
 800933c:	4a0e      	ldr	r2, [pc, #56]	@ (8009378 <RTC_SetDate+0x70>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d010      	beq.n	8009364 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8009342:	4a0e      	ldr	r2, [pc, #56]	@ (800937c <RTC_SetDate+0x74>)
 8009344:	4b0e      	ldr	r3, [pc, #56]	@ (8009380 <RTC_SetDate+0x78>)
 8009346:	0019      	movs	r1, r3
 8009348:	2003      	movs	r0, #3
 800934a:	f009 fbb9 	bl	8012ac0 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800934e:	f010 fc25 	bl	8019b9c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8009352:	4b06      	ldr	r3, [pc, #24]	@ (800936c <RTC_SetDate+0x64>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a08      	ldr	r2, [pc, #32]	@ (8009378 <RTC_SetDate+0x70>)
 8009358:	2101      	movs	r1, #1
 800935a:	0018      	movs	r0, r3
 800935c:	f012 f8d4 	bl	801b508 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8009360:	f010 fc2a 	bl	8019bb8 <HAL_PWR_DisableBkUpAccess>
    }
}
 8009364:	46c0      	nop			@ (mov r8, r8)
 8009366:	46bd      	mov	sp, r7
 8009368:	b002      	add	sp, #8
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20000b80 	.word	0x20000b80
 8009370:	0802af54 	.word	0x0802af54
 8009374:	0802af50 	.word	0x0802af50
 8009378:	0000bebe 	.word	0x0000bebe
 800937c:	0802af70 	.word	0x0802af70
 8009380:	0802aefc 	.word	0x0802aefc

08009384 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8009384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800938e:	250f      	movs	r5, #15
 8009390:	197b      	adds	r3, r7, r5
 8009392:	2201      	movs	r2, #1
 8009394:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8009396:	230e      	movs	r3, #14
 8009398:	18fb      	adds	r3, r7, r3
 800939a:	2200      	movs	r2, #0
 800939c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800939e:	260c      	movs	r6, #12
 80093a0:	19bc      	adds	r4, r7, r6
 80093a2:	f008 fc17 	bl	8011bd4 <powerCheck>
 80093a6:	0003      	movs	r3, r0
 80093a8:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80093aa:	19bb      	adds	r3, r7, r6
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d104      	bne.n	80093bc <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80093b2:	197b      	adds	r3, r7, r5
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	197b      	adds	r3, r7, r5
 80093b8:	3201      	adds	r2, #1
 80093ba:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80093bc:	230d      	movs	r3, #13
 80093be:	18fb      	adds	r3, r7, r3
 80093c0:	2200      	movs	r2, #0
 80093c2:	701a      	strb	r2, [r3, #0]
 80093c4:	e039      	b.n	800943a <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80093c6:	4b23      	ldr	r3, [pc, #140]	@ (8009454 <RTC_GetTime+0xd0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	0018      	movs	r0, r3
 80093d0:	f011 fd0e 	bl	801adf0 <HAL_RTC_GetTime>
 80093d4:	1e03      	subs	r3, r0, #0
 80093d6:	d005      	beq.n	80093e4 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80093d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009458 <RTC_GetTime+0xd4>)
 80093da:	4b20      	ldr	r3, [pc, #128]	@ (800945c <RTC_GetTime+0xd8>)
 80093dc:	0019      	movs	r1, r3
 80093de:	2001      	movs	r0, #1
 80093e0:	f009 fb6e 	bl	8012ac0 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80093e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009454 <RTC_GetTime+0xd0>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	0018      	movs	r0, r3
 80093ee:	f011 fdf1 	bl	801afd4 <HAL_RTC_GetDate>
 80093f2:	1e03      	subs	r3, r0, #0
 80093f4:	d005      	beq.n	8009402 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80093f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009460 <RTC_GetTime+0xdc>)
 80093f8:	4b18      	ldr	r3, [pc, #96]	@ (800945c <RTC_GetTime+0xd8>)
 80093fa:	0019      	movs	r1, r3
 80093fc:	2001      	movs	r0, #1
 80093fe:	f009 fb5f 	bl	8012ac0 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8009402:	230c      	movs	r3, #12
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d110      	bne.n	800942e <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	210e      	movs	r1, #14
 8009412:	187a      	adds	r2, r7, r1
 8009414:	7812      	ldrb	r2, [r2, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d018      	beq.n	800944c <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 800941a:	187b      	adds	r3, r7, r1
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	701a      	strb	r2, [r3, #0]
        t++;
 8009422:	210f      	movs	r1, #15
 8009424:	187b      	adds	r3, r7, r1
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	187b      	adds	r3, r7, r1
 800942a:	3201      	adds	r2, #1
 800942c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800942e:	210d      	movs	r1, #13
 8009430:	187b      	adds	r3, r7, r1
 8009432:	781a      	ldrb	r2, [r3, #0]
 8009434:	187b      	adds	r3, r7, r1
 8009436:	3201      	adds	r2, #1
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	230d      	movs	r3, #13
 800943c:	18fa      	adds	r2, r7, r3
 800943e:	230f      	movs	r3, #15
 8009440:	18fb      	adds	r3, r7, r3
 8009442:	7812      	ldrb	r2, [r2, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d3bd      	bcc.n	80093c6 <RTC_GetTime+0x42>
 800944a:	e000      	b.n	800944e <RTC_GetTime+0xca>
      }
      else {
        return;
 800944c:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800944e:	46bd      	mov	sp, r7
 8009450:	b005      	add	sp, #20
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009454:	20000b80 	.word	0x20000b80
 8009458:	0802af88 	.word	0x0802af88
 800945c:	0802af50 	.word	0x0802af50
 8009460:	0802afa4 	.word	0x0802afa4

08009464 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800946a:	003a      	movs	r2, r7
 800946c:	1d3b      	adds	r3, r7, #4
 800946e:	0011      	movs	r1, r2
 8009470:	0018      	movs	r0, r3
 8009472:	f7ff ff87 	bl	8009384 <RTC_GetTime>
  return currentDate.WeekDay;
 8009476:	003b      	movs	r3, r7
 8009478:	781b      	ldrb	r3, [r3, #0]
}
 800947a:	0018      	movs	r0, r3
 800947c:	46bd      	mov	sp, r7
 800947e:	b006      	add	sp, #24
 8009480:	bd80      	pop	{r7, pc}

08009482 <getPosixTime>:

uint32_t getPosixTime(void) {
 8009482:	b580      	push	{r7, lr}
 8009484:	b086      	sub	sp, #24
 8009486:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009488:	003a      	movs	r2, r7
 800948a:	1d3b      	adds	r3, r7, #4
 800948c:	0011      	movs	r1, r2
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff ff78 	bl	8009384 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009494:	1d3a      	adds	r2, r7, #4
 8009496:	003b      	movs	r3, r7
 8009498:	0011      	movs	r1, r2
 800949a:	0018      	movs	r0, r3
 800949c:	f000 f94a 	bl	8009734 <makeTime>
 80094a0:	0003      	movs	r3, r0
}
 80094a2:	0018      	movs	r0, r3
 80094a4:	46bd      	mov	sp, r7
 80094a6:	b006      	add	sp, #24
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 80094ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ae:	b08d      	sub	sp, #52	@ 0x34
 80094b0:	af04      	add	r7, sp, #16
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 80094b6:	240c      	movs	r4, #12
 80094b8:	193a      	adds	r2, r7, r4
 80094ba:	2508      	movs	r5, #8
 80094bc:	1979      	adds	r1, r7, r5
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	0018      	movs	r0, r3
 80094c2:	f000 fa01 	bl	80098c8 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80094c6:	002a      	movs	r2, r5
 80094c8:	18bb      	adds	r3, r7, r2
 80094ca:	789b      	ldrb	r3, [r3, #2]
 80094cc:	001e      	movs	r6, r3
 80094ce:	18bb      	adds	r3, r7, r2
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	469c      	mov	ip, r3
 80094d4:	18bb      	adds	r3, r7, r2
 80094d6:	78db      	ldrb	r3, [r3, #3]
 80094d8:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80094da:	0021      	movs	r1, r4
 80094dc:	187b      	adds	r3, r7, r1
 80094de:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80094e0:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80094e2:	187b      	adds	r3, r7, r1
 80094e4:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80094e6:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80094e8:	187b      	adds	r3, r7, r1
 80094ea:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80094ec:	4906      	ldr	r1, [pc, #24]	@ (8009508 <getUTCfromPosixTime+0x5c>)
 80094ee:	6838      	ldr	r0, [r7, #0]
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	9502      	str	r5, [sp, #8]
 80094f4:	9401      	str	r4, [sp, #4]
 80094f6:	9200      	str	r2, [sp, #0]
 80094f8:	4663      	mov	r3, ip
 80094fa:	0032      	movs	r2, r6
 80094fc:	f01b fbc2 	bl	8024c84 <siprintf>
}
 8009500:	46c0      	nop			@ (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b009      	add	sp, #36	@ 0x24
 8009506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009508:	0802afc0 	.word	0x0802afc0

0800950c <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009514:	4b10      	ldr	r3, [pc, #64]	@ (8009558 <RTC_SetWakeUpTimer+0x4c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	0018      	movs	r0, r3
 800951a:	f011 ff59 	bl	801b3d0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800951e:	4b0e      	ldr	r3, [pc, #56]	@ (8009558 <RTC_SetWakeUpTimer+0x4c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	22ff      	movs	r2, #255	@ 0xff
 8009528:	401a      	ands	r2, r3
 800952a:	4b0b      	ldr	r3, [pc, #44]	@ (8009558 <RTC_SetWakeUpTimer+0x4c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	490a      	ldr	r1, [pc, #40]	@ (800955c <RTC_SetWakeUpTimer+0x50>)
 8009532:	430a      	orrs	r2, r1
 8009534:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8009536:	4b0a      	ldr	r3, [pc, #40]	@ (8009560 <RTC_SetWakeUpTimer+0x54>)
 8009538:	2280      	movs	r2, #128	@ 0x80
 800953a:	0352      	lsls	r2, r2, #13
 800953c:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <RTC_SetWakeUpTimer+0x4c>)
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3b01      	subs	r3, #1
 8009546:	2204      	movs	r2, #4
 8009548:	0019      	movs	r1, r3
 800954a:	f011 fe69 	bl	801b220 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	46bd      	mov	sp, r7
 8009552:	b002      	add	sp, #8
 8009554:	bd80      	pop	{r7, pc}
 8009556:	46c0      	nop			@ (mov r8, r8)
 8009558:	20000b80 	.word	0x20000b80
 800955c:	fffffb7f 	.word	0xfffffb7f
 8009560:	40010400 	.word	0x40010400

08009564 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8009568:	4a0b      	ldr	r2, [pc, #44]	@ (8009598 <Enter_Standby_Mode+0x34>)
 800956a:	4b0c      	ldr	r3, [pc, #48]	@ (800959c <Enter_Standby_Mode+0x38>)
 800956c:	0019      	movs	r1, r3
 800956e:	2003      	movs	r0, #3
 8009570:	f009 faa6 	bl	8012ac0 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8009574:	2064      	movs	r0, #100	@ 0x64
 8009576:	f009 ffe3 	bl	8013540 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800957a:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <Enter_Standby_Mode+0x3c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	0018      	movs	r0, r3
 8009580:	f011 ff26 	bl	801b3d0 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8009584:	f002 f8f4 	bl	800b770 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8009588:	f009 fffe 	bl	8013588 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 800958c:	f010 fb80 	bl	8019c90 <HAL_PWR_EnterSTANDBYMode>
}
 8009590:	46c0      	nop			@ (mov r8, r8)
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	46c0      	nop			@ (mov r8, r8)
 8009598:	0802b014 	.word	0x0802b014
 800959c:	0802aefc 	.word	0x0802aefc
 80095a0:	20000b80 	.word	0x20000b80

080095a4 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	0002      	movs	r2, r0
 80095ac:	1dbb      	adds	r3, r7, #6
 80095ae:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 80095b0:	4b4e      	ldr	r3, [pc, #312]	@ (80096ec <Enter_Stop_Mode+0x148>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 80095b8:	f003 ffe0 	bl	800d57c <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 80095bc:	f7ff fbac 	bl	8008d18 <ReadBatteryVoltage>
 80095c0:	1c03      	adds	r3, r0, #0
 80095c2:	1c18      	adds	r0, r3, #0
 80095c4:	f7f9 ff4e 	bl	8003464 <__aeabi_f2d>
 80095c8:	0002      	movs	r2, r0
 80095ca:	000b      	movs	r3, r1
 80095cc:	4848      	ldr	r0, [pc, #288]	@ (80096f0 <Enter_Stop_Mode+0x14c>)
 80095ce:	4949      	ldr	r1, [pc, #292]	@ (80096f4 <Enter_Stop_Mode+0x150>)
 80095d0:	9200      	str	r2, [sp, #0]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	0002      	movs	r2, r0
 80095d6:	2002      	movs	r0, #2
 80095d8:	f009 fa72 	bl	8012ac0 <CreateLine>
  powerDisplay(powerCheck());
 80095dc:	f008 fafa 	bl	8011bd4 <powerCheck>
 80095e0:	0003      	movs	r3, r0
 80095e2:	0018      	movs	r0, r3
 80095e4:	f008 fb12 	bl	8011c0c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80095e8:	1dbb      	adds	r3, r7, #6
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	4a42      	ldr	r2, [pc, #264]	@ (80096f8 <Enter_Stop_Mode+0x154>)
 80095ee:	4943      	ldr	r1, [pc, #268]	@ (80096fc <Enter_Stop_Mode+0x158>)
 80095f0:	2003      	movs	r0, #3
 80095f2:	f009 fa65 	bl	8012ac0 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80095f6:	f7ff ff44 	bl	8009482 <getPosixTime>
 80095fa:	0002      	movs	r2, r0
 80095fc:	1dbb      	adds	r3, r7, #6
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	18d3      	adds	r3, r2, r3
 8009602:	4a3f      	ldr	r2, [pc, #252]	@ (8009700 <Enter_Stop_Mode+0x15c>)
 8009604:	0011      	movs	r1, r2
 8009606:	0018      	movs	r0, r3
 8009608:	f7ff ff50 	bl	80094ac <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800960c:	4b3c      	ldr	r3, [pc, #240]	@ (8009700 <Enter_Stop_Mode+0x15c>)
 800960e:	4a3d      	ldr	r2, [pc, #244]	@ (8009704 <Enter_Stop_Mode+0x160>)
 8009610:	4938      	ldr	r1, [pc, #224]	@ (80096f4 <Enter_Stop_Mode+0x150>)
 8009612:	2002      	movs	r0, #2
 8009614:	f009 fa54 	bl	8012ac0 <CreateLine>
  HAL_Delay(100);
 8009618:	2064      	movs	r0, #100	@ 0x64
 800961a:	f009 ff91 	bl	8013540 <HAL_Delay>
  HAL_SuspendTick();
 800961e:	f009 ffb3 	bl	8013588 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009622:	1dbb      	adds	r3, r7, #6
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	0018      	movs	r0, r3
 8009628:	f7ff ff70 	bl	800950c <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800962c:	2101      	movs	r1, #1
 800962e:	2001      	movs	r0, #1
 8009630:	f010 fad2 	bl	8019bd8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009634:	f002 fd2c 	bl	800c090 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009638:	f009 ffb4 	bl	80135a4 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800963c:	1dbb      	adds	r3, r7, #6
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	0018      	movs	r0, r3
 8009642:	f003 ff0f 	bl	800d464 <sen5x_enable>
 8009646:	1e03      	subs	r3, r0, #0
 8009648:	d01e      	beq.n	8009688 <Enter_Stop_Mode+0xe4>
    showTime();
 800964a:	f7ff fc4b 	bl	8008ee4 <showTime>
    set_light_on_state();
 800964e:	f004 fc3d 	bl	800decc <set_light_on_state>
    if (!userToggle) {
 8009652:	4b2d      	ldr	r3, [pc, #180]	@ (8009708 <Enter_Stop_Mode+0x164>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2201      	movs	r2, #1
 8009658:	4053      	eors	r3, r2
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d013      	beq.n	8009688 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009660:	201c      	movs	r0, #28
 8009662:	f7ff ff53 	bl	800950c <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8009666:	4a24      	ldr	r2, [pc, #144]	@ (80096f8 <Enter_Stop_Mode+0x154>)
 8009668:	4924      	ldr	r1, [pc, #144]	@ (80096fc <Enter_Stop_Mode+0x158>)
 800966a:	231c      	movs	r3, #28
 800966c:	2003      	movs	r0, #3
 800966e:	f009 fa27 	bl	8012ac0 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009672:	2101      	movs	r1, #1
 8009674:	2001      	movs	r0, #1
 8009676:	f010 faaf 	bl	8019bd8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800967a:	f002 fd09 	bl	800c090 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800967e:	f009 ff91 	bl	80135a4 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8009682:	2000      	movs	r0, #0
 8009684:	f003 fecc 	bl	800d420 <setsen5xReadTimer>
    }
  }
  showTime();
 8009688:	f7ff fc2c 	bl	8008ee4 <showTime>
  EnabledConnectedDevices();
 800968c:	f003 fa66 	bl	800cb5c <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 8009690:	f003 fb60 	bl	800cd54 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8009694:	f006 fa74 	bl	800fb80 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 8009698:	f7fa f83a 	bl	8003710 <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 800969c:	2000      	movs	r0, #0
 800969e:	f003 fed1 	bl	800d444 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 80096a2:	4b1a      	ldr	r3, [pc, #104]	@ (800970c <Enter_Stop_Mode+0x168>)
 80096a4:	0018      	movs	r0, r3
 80096a6:	f7fa fefd 	bl	80044a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 80096aa:	201e      	movs	r0, #30
 80096ac:	f006 fa56 	bl	800fb5c <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 80096b0:	205a      	movs	r0, #90	@ 0x5a
 80096b2:	f009 fc61 	bl	8012f78 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 80096b6:	203c      	movs	r0, #60	@ 0x3c
 80096b8:	f000 fb96 	bl	8009de8 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 80096bc:	205a      	movs	r0, #90	@ 0x5a
 80096be:	f000 ff35 	bl	800a52c <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 80096c2:	2000      	movs	r0, #0
 80096c4:	f7fa f82e 	bl	8003724 <setENS160TimeStamp>
  setMICTimeStamp(0);
 80096c8:	2000      	movs	r0, #0
 80096ca:	f003 fb31 	bl	800cd30 <setMICTimeStamp>
  ESPTransmitDone = false;
 80096ce:	4b10      	ldr	r3, [pc, #64]	@ (8009710 <Enter_Stop_Mode+0x16c>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 80096d4:	f009 ff2a 	bl	801352c <HAL_GetTick>
 80096d8:	0003      	movs	r3, r0
 80096da:	4a0c      	ldr	r2, [pc, #48]	@ (800970c <Enter_Stop_Mode+0x168>)
 80096dc:	189a      	adds	r2, r3, r2
 80096de:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <Enter_Stop_Mode+0x170>)
 80096e0:	601a      	str	r2, [r3, #0]
}
 80096e2:	46c0      	nop			@ (mov r8, r8)
 80096e4:	46bd      	mov	sp, r7
 80096e6:	b002      	add	sp, #8
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	46c0      	nop			@ (mov r8, r8)
 80096ec:	20000ee5 	.word	0x20000ee5
 80096f0:	0802b038 	.word	0x0802b038
 80096f4:	0802b050 	.word	0x0802b050
 80096f8:	0802b054 	.word	0x0802b054
 80096fc:	0802aefc 	.word	0x0802aefc
 8009700:	20000b88 	.word	0x20000b88
 8009704:	0802b078 	.word	0x0802b078
 8009708:	20001e76 	.word	0x20001e76
 800970c:	00001194 	.word	0x00001194
 8009710:	200005c0 	.word	0x200005c0
 8009714:	20000e3c 	.word	0x20000e3c

08009718 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009720:	4b03      	ldr	r3, [pc, #12]	@ (8009730 <InitClock+0x18>)
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
}
 8009726:	46c0      	nop			@ (mov r8, r8)
 8009728:	46bd      	mov	sp, r7
 800972a:	b002      	add	sp, #8
 800972c:	bd80      	pop	{r7, pc}
 800972e:	46c0      	nop			@ (mov r8, r8)
 8009730:	20000b80 	.word	0x20000b80

08009734 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	78db      	ldrb	r3, [r3, #3]
 8009742:	001a      	movs	r2, r3
 8009744:	0013      	movs	r3, r2
 8009746:	025b      	lsls	r3, r3, #9
 8009748:	189b      	adds	r3, r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	189b      	adds	r3, r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	189b      	adds	r3, r3, r2
 8009752:	011a      	lsls	r2, r3, #4
 8009754:	1ad2      	subs	r2, r2, r3
 8009756:	01d3      	lsls	r3, r2, #7
 8009758:	001a      	movs	r2, r3
 800975a:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	e028      	b.n	80097b4 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4a53      	ldr	r2, [pc, #332]	@ (80098b4 <makeTime+0x180>)
 8009766:	4293      	cmp	r3, r2
 8009768:	db21      	blt.n	80097ae <makeTime+0x7a>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a52      	ldr	r2, [pc, #328]	@ (80098b8 <makeTime+0x184>)
 800976e:	4694      	mov	ip, r2
 8009770:	4463      	add	r3, ip
 8009772:	001a      	movs	r2, r3
 8009774:	2303      	movs	r3, #3
 8009776:	4013      	ands	r3, r2
 8009778:	d119      	bne.n	80097ae <makeTime+0x7a>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4a4e      	ldr	r2, [pc, #312]	@ (80098b8 <makeTime+0x184>)
 800977e:	4694      	mov	ip, r2
 8009780:	4463      	add	r3, ip
 8009782:	2164      	movs	r1, #100	@ 0x64
 8009784:	0018      	movs	r0, r3
 8009786:	f7f6 fe7d 	bl	8000484 <__aeabi_idivmod>
 800978a:	1e0b      	subs	r3, r1, #0
 800978c:	d10a      	bne.n	80097a4 <makeTime+0x70>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a49      	ldr	r2, [pc, #292]	@ (80098b8 <makeTime+0x184>)
 8009792:	4694      	mov	ip, r2
 8009794:	4463      	add	r3, ip
 8009796:	22c8      	movs	r2, #200	@ 0xc8
 8009798:	0051      	lsls	r1, r2, #1
 800979a:	0018      	movs	r0, r3
 800979c:	f7f6 fe72 	bl	8000484 <__aeabi_idivmod>
 80097a0:	1e0b      	subs	r3, r1, #0
 80097a2:	d104      	bne.n	80097ae <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4a45      	ldr	r2, [pc, #276]	@ (80098bc <makeTime+0x188>)
 80097a8:	4694      	mov	ip, r2
 80097aa:	4463      	add	r3, ip
 80097ac:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	001a      	movs	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4293      	cmp	r3, r2
 80097be:	dbd0      	blt.n	8009762 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 80097c0:	2301      	movs	r3, #1
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	e03c      	b.n	8009840 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d125      	bne.n	8009818 <makeTime+0xe4>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	78db      	ldrb	r3, [r3, #3]
 80097d0:	4a39      	ldr	r2, [pc, #228]	@ (80098b8 <makeTime+0x184>)
 80097d2:	4694      	mov	ip, r2
 80097d4:	4463      	add	r3, ip
 80097d6:	001a      	movs	r2, r3
 80097d8:	2303      	movs	r3, #3
 80097da:	4013      	ands	r3, r2
 80097dc:	d11c      	bne.n	8009818 <makeTime+0xe4>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	78db      	ldrb	r3, [r3, #3]
 80097e2:	4a35      	ldr	r2, [pc, #212]	@ (80098b8 <makeTime+0x184>)
 80097e4:	4694      	mov	ip, r2
 80097e6:	4463      	add	r3, ip
 80097e8:	2164      	movs	r1, #100	@ 0x64
 80097ea:	0018      	movs	r0, r3
 80097ec:	f7f6 fe4a 	bl	8000484 <__aeabi_idivmod>
 80097f0:	1e0b      	subs	r3, r1, #0
 80097f2:	d10b      	bne.n	800980c <makeTime+0xd8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	78db      	ldrb	r3, [r3, #3]
 80097f8:	4a2f      	ldr	r2, [pc, #188]	@ (80098b8 <makeTime+0x184>)
 80097fa:	4694      	mov	ip, r2
 80097fc:	4463      	add	r3, ip
 80097fe:	22c8      	movs	r2, #200	@ 0xc8
 8009800:	0051      	lsls	r1, r2, #1
 8009802:	0018      	movs	r0, r3
 8009804:	f7f6 fe3e 	bl	8000484 <__aeabi_idivmod>
 8009808:	1e0b      	subs	r3, r1, #0
 800980a:	d105      	bne.n	8009818 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	4a2c      	ldr	r2, [pc, #176]	@ (80098c0 <makeTime+0x18c>)
 8009810:	4694      	mov	ip, r2
 8009812:	4463      	add	r3, ip
 8009814:	60bb      	str	r3, [r7, #8]
 8009816:	e010      	b.n	800983a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3b01      	subs	r3, #1
 800981c:	4a29      	ldr	r2, [pc, #164]	@ (80098c4 <makeTime+0x190>)
 800981e:	5cd3      	ldrb	r3, [r2, r3]
 8009820:	001a      	movs	r2, r3
 8009822:	0013      	movs	r3, r2
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	189b      	adds	r3, r3, r2
 8009828:	011a      	lsls	r2, r3, #4
 800982a:	1ad2      	subs	r2, r2, r3
 800982c:	0113      	lsls	r3, r2, #4
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	01db      	lsls	r3, r3, #7
 8009832:	001a      	movs	r2, r3
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	189b      	adds	r3, r3, r2
 8009838:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	785b      	ldrb	r3, [r3, #1]
 8009844:	001a      	movs	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4293      	cmp	r3, r2
 800984a:	dbbc      	blt.n	80097c6 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	789b      	ldrb	r3, [r3, #2]
 8009850:	3b01      	subs	r3, #1
 8009852:	001a      	movs	r2, r3
 8009854:	0013      	movs	r3, r2
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	189b      	adds	r3, r3, r2
 800985a:	011a      	lsls	r2, r3, #4
 800985c:	1ad2      	subs	r2, r2, r3
 800985e:	0113      	lsls	r3, r2, #4
 8009860:	1a9b      	subs	r3, r3, r2
 8009862:	01db      	lsls	r3, r3, #7
 8009864:	001a      	movs	r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	189b      	adds	r3, r3, r2
 800986a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	001a      	movs	r2, r3
 8009872:	0013      	movs	r3, r2
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	1a9b      	subs	r3, r3, r2
 8009878:	011a      	lsls	r2, r3, #4
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	0113      	lsls	r3, r2, #4
 800987e:	001a      	movs	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	189b      	adds	r3, r3, r2
 8009884:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	001a      	movs	r2, r3
 800988c:	0013      	movs	r3, r2
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	001a      	movs	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	189b      	adds	r3, r3, r2
 800989a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	789b      	ldrb	r3, [r3, #2]
 80098a0:	001a      	movs	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	189b      	adds	r3, r3, r2
 80098a6:	60bb      	str	r3, [r7, #8]
  return seconds;
 80098a8:	68bb      	ldr	r3, [r7, #8]
}
 80098aa:	0018      	movs	r0, r3
 80098ac:	46bd      	mov	sp, r7
 80098ae:	b004      	add	sp, #16
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	46c0      	nop			@ (mov r8, r8)
 80098b4:	fffff84f 	.word	0xfffff84f
 80098b8:	000007b2 	.word	0x000007b2
 80098bc:	00015180 	.word	0x00015180
 80098c0:	00263b80 	.word	0x00263b80
 80098c4:	0802d0f4 	.word	0x0802d0f4

080098c8 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b089      	sub	sp, #36	@ 0x24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	213c      	movs	r1, #60	@ 0x3c
 80098dc:	0018      	movs	r0, r3
 80098de:	f7f6 fce7 	bl	80002b0 <__aeabi_uidivmod>
 80098e2:	000b      	movs	r3, r1
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	213c      	movs	r1, #60	@ 0x3c
 80098ee:	0018      	movs	r0, r3
 80098f0:	f7f6 fc58 	bl	80001a4 <__udivsi3>
 80098f4:	0003      	movs	r3, r0
 80098f6:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	213c      	movs	r1, #60	@ 0x3c
 80098fc:	0018      	movs	r0, r3
 80098fe:	f7f6 fcd7 	bl	80002b0 <__aeabi_uidivmod>
 8009902:	000b      	movs	r3, r1
 8009904:	b2da      	uxtb	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	213c      	movs	r1, #60	@ 0x3c
 800990e:	0018      	movs	r0, r3
 8009910:	f7f6 fc48 	bl	80001a4 <__udivsi3>
 8009914:	0003      	movs	r3, r0
 8009916:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	2118      	movs	r1, #24
 800991c:	0018      	movs	r0, r3
 800991e:	f7f6 fcc7 	bl	80002b0 <__aeabi_uidivmod>
 8009922:	000b      	movs	r3, r1
 8009924:	b2da      	uxtb	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2118      	movs	r1, #24
 800992e:	0018      	movs	r0, r3
 8009930:	f7f6 fc38 	bl	80001a4 <__udivsi3>
 8009934:	0003      	movs	r3, r0
 8009936:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	3b01      	subs	r3, #1
 800993c:	2107      	movs	r1, #7
 800993e:	0018      	movs	r0, r3
 8009940:	f7f6 fcb6 	bl	80002b0 <__aeabi_uidivmod>
 8009944:	000b      	movs	r3, r1
 8009946:	b2db      	uxtb	r3, r3
 8009948:	3301      	adds	r3, #1
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009950:	231f      	movs	r3, #31
 8009952:	18fb      	adds	r3, r7, r3
 8009954:	2200      	movs	r2, #0
 8009956:	701a      	strb	r2, [r3, #0]
  days = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800995c:	e005      	b.n	800996a <breakPosixTime+0xa2>
    year++;
 800995e:	211f      	movs	r1, #31
 8009960:	187b      	adds	r3, r7, r1
 8009962:	781a      	ldrb	r2, [r3, #0]
 8009964:	187b      	adds	r3, r7, r1
 8009966:	3201      	adds	r2, #1
 8009968:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800996a:	241f      	movs	r4, #31
 800996c:	193b      	adds	r3, r7, r4
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	4a64      	ldr	r2, [pc, #400]	@ (8009b04 <breakPosixTime+0x23c>)
 8009972:	4694      	mov	ip, r2
 8009974:	4463      	add	r3, ip
 8009976:	001a      	movs	r2, r3
 8009978:	2303      	movs	r3, #3
 800997a:	4013      	ands	r3, r2
 800997c:	d119      	bne.n	80099b2 <breakPosixTime+0xea>
 800997e:	193b      	adds	r3, r7, r4
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	4a60      	ldr	r2, [pc, #384]	@ (8009b04 <breakPosixTime+0x23c>)
 8009984:	4694      	mov	ip, r2
 8009986:	4463      	add	r3, ip
 8009988:	2164      	movs	r1, #100	@ 0x64
 800998a:	0018      	movs	r0, r3
 800998c:	f7f6 fd7a 	bl	8000484 <__aeabi_idivmod>
 8009990:	1e0b      	subs	r3, r1, #0
 8009992:	d10b      	bne.n	80099ac <breakPosixTime+0xe4>
 8009994:	193b      	adds	r3, r7, r4
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4a5a      	ldr	r2, [pc, #360]	@ (8009b04 <breakPosixTime+0x23c>)
 800999a:	4694      	mov	ip, r2
 800999c:	4463      	add	r3, ip
 800999e:	22c8      	movs	r2, #200	@ 0xc8
 80099a0:	0051      	lsls	r1, r2, #1
 80099a2:	0018      	movs	r0, r3
 80099a4:	f7f6 fd6e 	bl	8000484 <__aeabi_idivmod>
 80099a8:	1e0b      	subs	r3, r1, #0
 80099aa:	d102      	bne.n	80099b2 <breakPosixTime+0xea>
 80099ac:	23b7      	movs	r3, #183	@ 0xb7
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	e001      	b.n	80099b6 <breakPosixTime+0xee>
 80099b2:	236e      	movs	r3, #110	@ 0x6e
 80099b4:	33ff      	adds	r3, #255	@ 0xff
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	18d3      	adds	r3, r2, r3
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d9cc      	bls.n	800995e <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	241f      	movs	r4, #31
 80099c8:	193a      	adds	r2, r7, r4
 80099ca:	7812      	ldrb	r2, [r2, #0]
 80099cc:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 80099ce:	193b      	adds	r3, r7, r4
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	4a4c      	ldr	r2, [pc, #304]	@ (8009b04 <breakPosixTime+0x23c>)
 80099d4:	4694      	mov	ip, r2
 80099d6:	4463      	add	r3, ip
 80099d8:	001a      	movs	r2, r3
 80099da:	2303      	movs	r3, #3
 80099dc:	4013      	ands	r3, r2
 80099de:	d119      	bne.n	8009a14 <breakPosixTime+0x14c>
 80099e0:	193b      	adds	r3, r7, r4
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	4a47      	ldr	r2, [pc, #284]	@ (8009b04 <breakPosixTime+0x23c>)
 80099e6:	4694      	mov	ip, r2
 80099e8:	4463      	add	r3, ip
 80099ea:	2164      	movs	r1, #100	@ 0x64
 80099ec:	0018      	movs	r0, r3
 80099ee:	f7f6 fd49 	bl	8000484 <__aeabi_idivmod>
 80099f2:	1e0b      	subs	r3, r1, #0
 80099f4:	d10b      	bne.n	8009a0e <breakPosixTime+0x146>
 80099f6:	193b      	adds	r3, r7, r4
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	4a42      	ldr	r2, [pc, #264]	@ (8009b04 <breakPosixTime+0x23c>)
 80099fc:	4694      	mov	ip, r2
 80099fe:	4463      	add	r3, ip
 8009a00:	22c8      	movs	r2, #200	@ 0xc8
 8009a02:	0051      	lsls	r1, r2, #1
 8009a04:	0018      	movs	r0, r3
 8009a06:	f7f6 fd3d 	bl	8000484 <__aeabi_idivmod>
 8009a0a:	1e0b      	subs	r3, r1, #0
 8009a0c:	d102      	bne.n	8009a14 <breakPosixTime+0x14c>
 8009a0e:	23b7      	movs	r3, #183	@ 0xb7
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	e001      	b.n	8009a18 <breakPosixTime+0x150>
 8009a14:	236e      	movs	r3, #110	@ 0x6e
 8009a16:	33ff      	adds	r3, #255	@ 0xff
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	61bb      	str	r3, [r7, #24]

  days=0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	617b      	str	r3, [r7, #20]
  month=0;
 8009a2a:	211e      	movs	r1, #30
 8009a2c:	187b      	adds	r3, r7, r1
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009a32:	231d      	movs	r3, #29
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8009a3a:	187b      	adds	r3, r7, r1
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	e048      	b.n	8009ad4 <breakPosixTime+0x20c>
    if (month==1) { // february
 8009a42:	231e      	movs	r3, #30
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d12a      	bne.n	8009aa2 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8009a4c:	241f      	movs	r4, #31
 8009a4e:	193b      	adds	r3, r7, r4
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	4a2c      	ldr	r2, [pc, #176]	@ (8009b04 <breakPosixTime+0x23c>)
 8009a54:	4694      	mov	ip, r2
 8009a56:	4463      	add	r3, ip
 8009a58:	001a      	movs	r2, r3
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	d11b      	bne.n	8009a98 <breakPosixTime+0x1d0>
 8009a60:	193b      	adds	r3, r7, r4
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	4a27      	ldr	r2, [pc, #156]	@ (8009b04 <breakPosixTime+0x23c>)
 8009a66:	4694      	mov	ip, r2
 8009a68:	4463      	add	r3, ip
 8009a6a:	2164      	movs	r1, #100	@ 0x64
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f7f6 fd09 	bl	8000484 <__aeabi_idivmod>
 8009a72:	1e0b      	subs	r3, r1, #0
 8009a74:	d10b      	bne.n	8009a8e <breakPosixTime+0x1c6>
 8009a76:	193b      	adds	r3, r7, r4
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4a22      	ldr	r2, [pc, #136]	@ (8009b04 <breakPosixTime+0x23c>)
 8009a7c:	4694      	mov	ip, r2
 8009a7e:	4463      	add	r3, ip
 8009a80:	22c8      	movs	r2, #200	@ 0xc8
 8009a82:	0051      	lsls	r1, r2, #1
 8009a84:	0018      	movs	r0, r3
 8009a86:	f7f6 fcfd 	bl	8000484 <__aeabi_idivmod>
 8009a8a:	1e0b      	subs	r3, r1, #0
 8009a8c:	d104      	bne.n	8009a98 <breakPosixTime+0x1d0>
        monthLength=29;
 8009a8e:	231d      	movs	r3, #29
 8009a90:	18fb      	adds	r3, r7, r3
 8009a92:	221d      	movs	r2, #29
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	e00c      	b.n	8009ab2 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8009a98:	231d      	movs	r3, #29
 8009a9a:	18fb      	adds	r3, r7, r3
 8009a9c:	221c      	movs	r2, #28
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e007      	b.n	8009ab2 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8009aa2:	231e      	movs	r3, #30
 8009aa4:	18fb      	adds	r3, r7, r3
 8009aa6:	781a      	ldrb	r2, [r3, #0]
 8009aa8:	231d      	movs	r3, #29
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	4916      	ldr	r1, [pc, #88]	@ (8009b08 <breakPosixTime+0x240>)
 8009aae:	5c8a      	ldrb	r2, [r1, r2]
 8009ab0:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8009ab2:	211d      	movs	r1, #29
 8009ab4:	187b      	adds	r3, r7, r1
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d310      	bcc.n	8009ae0 <breakPosixTime+0x218>
      time -= monthLength;
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8009ac8:	211e      	movs	r1, #30
 8009aca:	187b      	adds	r3, r7, r1
 8009acc:	781a      	ldrb	r2, [r3, #0]
 8009ace:	187b      	adds	r3, r7, r1
 8009ad0:	3201      	adds	r2, #1
 8009ad2:	701a      	strb	r2, [r3, #0]
 8009ad4:	231e      	movs	r3, #30
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b0b      	cmp	r3, #11
 8009adc:	d9b1      	bls.n	8009a42 <breakPosixTime+0x17a>
 8009ade:	e000      	b.n	8009ae2 <breakPosixTime+0x21a>
    } else {
        break;
 8009ae0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8009ae2:	231e      	movs	r3, #30
 8009ae4:	18fb      	adds	r3, r7, r3
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	3301      	adds	r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	709a      	strb	r2, [r3, #2]
}
 8009afc:	46c0      	nop			@ (mov r8, r8)
 8009afe:	46bd      	mov	sp, r7
 8009b00:	b009      	add	sp, #36	@ 0x24
 8009b02:	bd90      	pop	{r4, r7, pc}
 8009b04:	000007b2 	.word	0x000007b2
 8009b08:	0802d0f4 	.word	0x0802d0f4

08009b0c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009b12:	003b      	movs	r3, r7
 8009b14:	0018      	movs	r0, r3
 8009b16:	2308      	movs	r3, #8
 8009b18:	001a      	movs	r2, r3
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	f01b fa18 	bl	8024f50 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8009b20:	4b30      	ldr	r3, [pc, #192]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b22:	4a31      	ldr	r2, [pc, #196]	@ (8009be8 <MX_ADC_Init+0xdc>)
 8009b24:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8009b26:	4b2f      	ldr	r3, [pc, #188]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b2e:	22c0      	movs	r2, #192	@ 0xc0
 8009b30:	0612      	lsls	r2, r2, #24
 8009b32:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009b34:	4b2b      	ldr	r3, [pc, #172]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8009b40:	4b28      	ldr	r3, [pc, #160]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009b46:	4b27      	ldr	r3, [pc, #156]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8009b4c:	4b25      	ldr	r3, [pc, #148]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b4e:	2220      	movs	r2, #32
 8009b50:	2100      	movs	r1, #0
 8009b52:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8009b54:	4b23      	ldr	r3, [pc, #140]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b56:	2221      	movs	r2, #33	@ 0x21
 8009b58:	2101      	movs	r1, #1
 8009b5a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009b5c:	4b21      	ldr	r3, [pc, #132]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009b62:	4b20      	ldr	r3, [pc, #128]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b64:	22c2      	movs	r2, #194	@ 0xc2
 8009b66:	32ff      	adds	r2, #255	@ 0xff
 8009b68:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8009b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b6c:	222c      	movs	r2, #44	@ 0x2c
 8009b6e:	2100      	movs	r1, #0
 8009b70:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009b72:	4b1c      	ldr	r3, [pc, #112]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b74:	2204      	movs	r2, #4
 8009b76:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009b78:	4b1a      	ldr	r3, [pc, #104]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8009b7e:	4b19      	ldr	r3, [pc, #100]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8009b84:	4b17      	ldr	r3, [pc, #92]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8009b8a:	4b16      	ldr	r3, [pc, #88]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8009b90:	4b14      	ldr	r3, [pc, #80]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009b92:	0018      	movs	r0, r3
 8009b94:	f009 fd32 	bl	80135fc <HAL_ADC_Init>
 8009b98:	1e03      	subs	r3, r0, #0
 8009b9a:	d001      	beq.n	8009ba0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8009b9c:	f002 fbc8 	bl	800c330 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009ba0:	003b      	movs	r3, r7
 8009ba2:	4a12      	ldr	r2, [pc, #72]	@ (8009bec <MX_ADC_Init+0xe0>)
 8009ba4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009ba6:	003b      	movs	r3, r7
 8009ba8:	2280      	movs	r2, #128	@ 0x80
 8009baa:	0152      	lsls	r2, r2, #5
 8009bac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8009bae:	003a      	movs	r2, r7
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009bb2:	0011      	movs	r1, r2
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f009 ff91 	bl	8013adc <HAL_ADC_ConfigChannel>
 8009bba:	1e03      	subs	r3, r0, #0
 8009bbc:	d001      	beq.n	8009bc2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8009bbe:	f002 fbb7 	bl	800c330 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009bc2:	003b      	movs	r3, r7
 8009bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8009bf0 <MX_ADC_Init+0xe4>)
 8009bc6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8009bc8:	003a      	movs	r2, r7
 8009bca:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <MX_ADC_Init+0xd8>)
 8009bcc:	0011      	movs	r1, r2
 8009bce:	0018      	movs	r0, r3
 8009bd0:	f009 ff84 	bl	8013adc <HAL_ADC_ConfigChannel>
 8009bd4:	1e03      	subs	r3, r0, #0
 8009bd6:	d001      	beq.n	8009bdc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8009bd8:	f002 fbaa 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8009bdc:	46c0      	nop			@ (mov r8, r8)
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b002      	add	sp, #8
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000ba0 	.word	0x20000ba0
 8009be8:	40012400 	.word	0x40012400
 8009bec:	38004000 	.word	0x38004000
 8009bf0:	3c008000 	.word	0x3c008000

08009bf4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b089      	sub	sp, #36	@ 0x24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bfc:	240c      	movs	r4, #12
 8009bfe:	193b      	adds	r3, r7, r4
 8009c00:	0018      	movs	r0, r3
 8009c02:	2314      	movs	r3, #20
 8009c04:	001a      	movs	r2, r3
 8009c06:	2100      	movs	r1, #0
 8009c08:	f01b f9a2 	bl	8024f50 <memset>
  if(adcHandle->Instance==ADC1)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a14      	ldr	r2, [pc, #80]	@ (8009c64 <HAL_ADC_MspInit+0x70>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d121      	bne.n	8009c5a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009c16:	4b14      	ldr	r3, [pc, #80]	@ (8009c68 <HAL_ADC_MspInit+0x74>)
 8009c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c1a:	4b13      	ldr	r3, [pc, #76]	@ (8009c68 <HAL_ADC_MspInit+0x74>)
 8009c1c:	2180      	movs	r1, #128	@ 0x80
 8009c1e:	0089      	lsls	r1, r1, #2
 8009c20:	430a      	orrs	r2, r1
 8009c22:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c24:	4b10      	ldr	r3, [pc, #64]	@ (8009c68 <HAL_ADC_MspInit+0x74>)
 8009c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c28:	4b0f      	ldr	r3, [pc, #60]	@ (8009c68 <HAL_ADC_MspInit+0x74>)
 8009c2a:	2104      	movs	r1, #4
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009c30:	4b0d      	ldr	r3, [pc, #52]	@ (8009c68 <HAL_ADC_MspInit+0x74>)
 8009c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c34:	2204      	movs	r2, #4
 8009c36:	4013      	ands	r3, r2
 8009c38:	60bb      	str	r3, [r7, #8]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8009c3c:	193b      	adds	r3, r7, r4
 8009c3e:	2230      	movs	r2, #48	@ 0x30
 8009c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c42:	193b      	adds	r3, r7, r4
 8009c44:	2203      	movs	r2, #3
 8009c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c48:	193b      	adds	r3, r7, r4
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c4e:	193b      	adds	r3, r7, r4
 8009c50:	4a06      	ldr	r2, [pc, #24]	@ (8009c6c <HAL_ADC_MspInit+0x78>)
 8009c52:	0019      	movs	r1, r3
 8009c54:	0010      	movs	r0, r2
 8009c56:	f00a fd5f 	bl	8014718 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009c5a:	46c0      	nop			@ (mov r8, r8)
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	b009      	add	sp, #36	@ 0x24
 8009c60:	bd90      	pop	{r4, r7, pc}
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	40012400 	.word	0x40012400
 8009c68:	40021000 	.word	0x40021000
 8009c6c:	50000800 	.word	0x50000800

08009c70 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6039      	str	r1, [r7, #0]
 8009c78:	0011      	movs	r1, r2
 8009c7a:	1dfb      	adds	r3, r7, #7
 8009c7c:	1c02      	adds	r2, r0, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	1dbb      	adds	r3, r7, #6
 8009c82:	1c0a      	adds	r2, r1, #0
 8009c84:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 8009c86:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb0 <ReadDirRegister+0x40>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 8009c8e:	4b08      	ldr	r3, [pc, #32]	@ (8009cb0 <ReadDirRegister+0x40>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	1dba      	adds	r2, r7, #6
 8009c94:	7814      	ldrb	r4, [r2, #0]
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	1dfa      	adds	r2, r7, #7
 8009c9a:	7810      	ldrb	r0, [r2, #0]
 8009c9c:	0022      	movs	r2, r4
 8009c9e:	4798      	blx	r3
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	e000      	b.n	8009ca6 <ReadDirRegister+0x36>
  }
  return false;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	b003      	add	sp, #12
 8009cac:	bd90      	pop	{r4, r7, pc}
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	20000c08 	.word	0x20000c08

08009cb4 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009cb4:	b590      	push	{r4, r7, lr}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6039      	str	r1, [r7, #0]
 8009cbc:	0011      	movs	r1, r2
 8009cbe:	1dfb      	adds	r3, r7, #7
 8009cc0:	1c02      	adds	r2, r0, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	1dbb      	adds	r3, r7, #6
 8009cc6:	1c0a      	adds	r2, r1, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8009cca:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf4 <ReadRegister+0x40>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8009cd2:	4b08      	ldr	r3, [pc, #32]	@ (8009cf4 <ReadRegister+0x40>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	1dba      	adds	r2, r7, #6
 8009cd8:	7814      	ldrb	r4, [r2, #0]
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	1dfa      	adds	r2, r7, #7
 8009cde:	7810      	ldrb	r0, [r2, #0]
 8009ce0:	0022      	movs	r2, r4
 8009ce2:	4798      	blx	r3
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	e000      	b.n	8009cea <ReadRegister+0x36>
  }
  return false;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b003      	add	sp, #12
 8009cf0:	bd90      	pop	{r4, r7, pc}
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	20000c00 	.word	0x20000c00

08009cf8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009cf8:	b590      	push	{r4, r7, lr}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6039      	str	r1, [r7, #0]
 8009d00:	0011      	movs	r1, r2
 8009d02:	1dfb      	adds	r3, r7, #7
 8009d04:	1c02      	adds	r2, r0, #0
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	1dbb      	adds	r3, r7, #6
 8009d0a:	1c0a      	adds	r2, r1, #0
 8009d0c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d38 <WriteRegister+0x40>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009d16:	4b08      	ldr	r3, [pc, #32]	@ (8009d38 <WriteRegister+0x40>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	1dba      	adds	r2, r7, #6
 8009d1c:	7814      	ldrb	r4, [r2, #0]
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	1dfa      	adds	r2, r7, #7
 8009d22:	7810      	ldrb	r0, [r2, #0]
 8009d24:	0022      	movs	r2, r4
 8009d26:	4798      	blx	r3
 8009d28:	0003      	movs	r3, r0
 8009d2a:	e000      	b.n	8009d2e <WriteRegister+0x36>
  }
  return false;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	0018      	movs	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b003      	add	sp, #12
 8009d34:	bd90      	pop	{r4, r7, pc}
 8009d36:	46c0      	nop			@ (mov r8, r8)
 8009d38:	20000c04 	.word	0x20000c04

08009d3c <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	000a      	movs	r2, r1
 8009d46:	1cfb      	adds	r3, r7, #3
 8009d48:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8009d4a:	230f      	movs	r3, #15
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	22ff      	movs	r2, #255	@ 0xff
 8009d50:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009d52:	230e      	movs	r3, #14
 8009d54:	18fb      	adds	r3, r7, r3
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	e037      	b.n	8009dcc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009d5c:	230e      	movs	r3, #14
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	18d3      	adds	r3, r2, r3
 8009d66:	7819      	ldrb	r1, [r3, #0]
 8009d68:	220f      	movs	r2, #15
 8009d6a:	18bb      	adds	r3, r7, r2
 8009d6c:	18ba      	adds	r2, r7, r2
 8009d6e:	7812      	ldrb	r2, [r2, #0]
 8009d70:	404a      	eors	r2, r1
 8009d72:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009d74:	230d      	movs	r3, #13
 8009d76:	18fb      	adds	r3, r7, r3
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e01b      	b.n	8009db6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8009d7e:	210f      	movs	r1, #15
 8009d80:	187b      	adds	r3, r7, r1
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b25b      	sxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da09      	bge.n	8009d9e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8009d8a:	187b      	adds	r3, r7, r1
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	2231      	movs	r2, #49	@ 0x31
 8009d94:	4053      	eors	r3, r2
 8009d96:	b25a      	sxtb	r2, r3
 8009d98:	187b      	adds	r3, r7, r1
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e005      	b.n	8009daa <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009d9e:	230f      	movs	r3, #15
 8009da0:	18fa      	adds	r2, r7, r3
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	18db      	adds	r3, r3, r3
 8009da8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009daa:	210d      	movs	r1, #13
 8009dac:	187b      	adds	r3, r7, r1
 8009dae:	781a      	ldrb	r2, [r3, #0]
 8009db0:	187b      	adds	r3, r7, r1
 8009db2:	3201      	adds	r2, #1
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	230d      	movs	r3, #13
 8009db8:	18fb      	adds	r3, r7, r3
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	d9de      	bls.n	8009d7e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009dc0:	210e      	movs	r1, #14
 8009dc2:	187b      	adds	r3, r7, r1
 8009dc4:	781a      	ldrb	r2, [r3, #0]
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	3201      	adds	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
 8009dcc:	230e      	movs	r3, #14
 8009dce:	18fa      	adds	r2, r7, r3
 8009dd0:	1cfb      	adds	r3, r7, #3
 8009dd2:	7812      	ldrb	r2, [r2, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d3c0      	bcc.n	8009d5c <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009dda:	230f      	movs	r3, #15
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	781b      	ldrb	r3, [r3, #0]
}
 8009de0:	0018      	movs	r0, r3
 8009de2:	46bd      	mov	sp, r7
 8009de4:	b004      	add	sp, #16
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8009df0:	f009 fb9c 	bl	801352c <HAL_GetTick>
 8009df4:	0002      	movs	r2, r0
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	18d2      	adds	r2, r2, r3
 8009dfa:	4b03      	ldr	r3, [pc, #12]	@ (8009e08 <setAHT20TimeStamp+0x20>)
 8009dfc:	601a      	str	r2, [r3, #0]
}
 8009dfe:	46c0      	nop			@ (mov r8, r8)
 8009e00:	46bd      	mov	sp, r7
 8009e02:	b002      	add	sp, #8
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	46c0      	nop			@ (mov r8, r8)
 8009e08:	20000bfc 	.word	0x20000bfc

08009e0c <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 8009e18:	4b06      	ldr	r3, [pc, #24]	@ (8009e34 <AHT_Init+0x28>)
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 8009e1e:	4b06      	ldr	r3, [pc, #24]	@ (8009e38 <AHT_Init+0x2c>)
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8009e24:	4b05      	ldr	r3, [pc, #20]	@ (8009e3c <AHT_Init+0x30>)
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	46c0      	nop			@ (mov r8, r8)
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b004      	add	sp, #16
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	46c0      	nop			@ (mov r8, r8)
 8009e34:	20000c08 	.word	0x20000c08
 8009e38:	20000c00 	.word	0x20000c00
 8009e3c:	20000c04 	.word	0x20000c04

08009e40 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	0002      	movs	r2, r0
 8009e48:	1dfb      	adds	r3, r7, #7
 8009e4a:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8009e4c:	4b18      	ldr	r3, [pc, #96]	@ (8009eb0 <AHT20_register_reset+0x70>)
 8009e4e:	1dfa      	adds	r2, r7, #7
 8009e50:	7812      	ldrb	r2, [r2, #0]
 8009e52:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8009e54:	4b16      	ldr	r3, [pc, #88]	@ (8009eb0 <AHT20_register_reset+0x70>)
 8009e56:	2203      	movs	r2, #3
 8009e58:	0019      	movs	r1, r3
 8009e5a:	2038      	movs	r0, #56	@ 0x38
 8009e5c:	f7ff ff4c 	bl	8009cf8 <WriteRegister>
  HAL_Delay(15);
 8009e60:	200f      	movs	r0, #15
 8009e62:	f009 fb6d 	bl	8013540 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8009e66:	4b13      	ldr	r3, [pc, #76]	@ (8009eb4 <AHT20_register_reset+0x74>)
 8009e68:	2203      	movs	r2, #3
 8009e6a:	0019      	movs	r1, r3
 8009e6c:	2038      	movs	r0, #56	@ 0x38
 8009e6e:	f7ff ff21 	bl	8009cb4 <ReadRegister>
  HAL_Delay(15);
 8009e72:	200f      	movs	r0, #15
 8009e74:	f009 fb64 	bl	8013540 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8009e78:	4b0e      	ldr	r3, [pc, #56]	@ (8009eb4 <AHT20_register_reset+0x74>)
 8009e7a:	22b0      	movs	r2, #176	@ 0xb0
 8009e7c:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8009e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009eb4 <AHT20_register_reset+0x74>)
 8009e80:	789b      	ldrb	r3, [r3, #2]
 8009e82:	0018      	movs	r0, r3
 8009e84:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <AHT20_register_reset+0x74>)
 8009e86:	78db      	ldrb	r3, [r3, #3]
 8009e88:	4a0b      	ldr	r2, [pc, #44]	@ (8009eb8 <AHT20_register_reset+0x78>)
 8009e8a:	490c      	ldr	r1, [pc, #48]	@ (8009ebc <AHT20_register_reset+0x7c>)
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	0003      	movs	r3, r0
 8009e90:	2003      	movs	r0, #3
 8009e92:	f008 fe15 	bl	8012ac0 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8009e96:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <AHT20_register_reset+0x74>)
 8009e98:	2203      	movs	r2, #3
 8009e9a:	0019      	movs	r1, r3
 8009e9c:	2038      	movs	r0, #56	@ 0x38
 8009e9e:	f7ff ff2b 	bl	8009cf8 <WriteRegister>
  HAL_Delay(15);
 8009ea2:	200f      	movs	r0, #15
 8009ea4:	f009 fb4c 	bl	8013540 <HAL_Delay>
}
 8009ea8:	46c0      	nop			@ (mov r8, r8)
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	b002      	add	sp, #8
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20000090 	.word	0x20000090
 8009eb4:	20000c0c 	.word	0x20000c0c
 8009eb8:	0802b098 	.word	0x0802b098
 8009ebc:	0802b0e8 	.word	0x0802b0e8

08009ec0 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8009ec4:	201b      	movs	r0, #27
 8009ec6:	f7ff ffbb 	bl	8009e40 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8009eca:	201c      	movs	r0, #28
 8009ecc:	f7ff ffb8 	bl	8009e40 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8009ed0:	201e      	movs	r0, #30
 8009ed2:	f7ff ffb5 	bl	8009e40 <AHT20_register_reset>
}
 8009ed6:	46c0      	nop			@ (mov r8, r8)
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <AHT20_read_status>:

uint8_t AHT20_read_status() {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8009ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8009f14 <AHT20_read_status+0x38>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	0019      	movs	r1, r3
 8009ee6:	2038      	movs	r0, #56	@ 0x38
 8009ee8:	f7ff ff06 	bl	8009cf8 <WriteRegister>
  HAL_Delay(10);
 8009eec:	200a      	movs	r0, #10
 8009eee:	f009 fb27 	bl	8013540 <HAL_Delay>
  airtemphumraw[0] = 0;
 8009ef2:	4b09      	ldr	r3, [pc, #36]	@ (8009f18 <AHT20_read_status+0x3c>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8009ef8:	4b07      	ldr	r3, [pc, #28]	@ (8009f18 <AHT20_read_status+0x3c>)
 8009efa:	2201      	movs	r2, #1
 8009efc:	0019      	movs	r1, r3
 8009efe:	2038      	movs	r0, #56	@ 0x38
 8009f00:	f7ff fed8 	bl	8009cb4 <ReadRegister>
  HAL_Delay(10);
 8009f04:	200a      	movs	r0, #10
 8009f06:	f009 fb1b 	bl	8013540 <HAL_Delay>
  return airtemphumraw[0];
 8009f0a:	4b03      	ldr	r3, [pc, #12]	@ (8009f18 <AHT20_read_status+0x3c>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
}
 8009f0e:	0018      	movs	r0, r3
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000008c 	.word	0x2000008c
 8009f18:	20000c0c 	.word	0x20000c0c

08009f1c <AHT20_init>:

bool AHT20_init(void) {
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 8009f22:	f009 fb03 	bl	801352c <HAL_GetTick>
 8009f26:	0003      	movs	r3, r0
 8009f28:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b77      	cmp	r3, #119	@ 0x77
 8009f2e:	d805      	bhi.n	8009f3c <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2278      	movs	r2, #120	@ 0x78
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	0018      	movs	r0, r3
 8009f38:	f009 fb02 	bl	8013540 <HAL_Delay>
  }
  AHT20_read_status();
 8009f3c:	f7ff ffce 	bl	8009edc <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8009f40:	4b0e      	ldr	r3, [pc, #56]	@ (8009f7c <AHT20_init+0x60>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	4a0e      	ldr	r2, [pc, #56]	@ (8009f80 <AHT20_init+0x64>)
 8009f46:	490f      	ldr	r1, [pc, #60]	@ (8009f84 <AHT20_init+0x68>)
 8009f48:	2003      	movs	r0, #3
 8009f4a:	f008 fdb9 	bl	8012ac0 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f7c <AHT20_init+0x60>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	001a      	movs	r2, r3
 8009f54:	2318      	movs	r3, #24
 8009f56:	4013      	ands	r3, r2
 8009f58:	2b18      	cmp	r3, #24
 8009f5a:	d00a      	beq.n	8009f72 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <AHT20_init+0x6c>)
 8009f5e:	2203      	movs	r2, #3
 8009f60:	0019      	movs	r1, r3
 8009f62:	2038      	movs	r0, #56	@ 0x38
 8009f64:	f7ff fec8 	bl	8009cf8 <WriteRegister>
    HAL_Delay(10);
 8009f68:	200a      	movs	r0, #10
 8009f6a:	f009 fae9 	bl	8013540 <HAL_Delay>
    AHT20_Start_Init();
 8009f6e:	f7ff ffa7 	bl	8009ec0 <AHT20_Start_Init>
  }
  return true;
 8009f72:	2301      	movs	r3, #1
}
 8009f74:	0018      	movs	r0, r3
 8009f76:	46bd      	mov	sp, r7
 8009f78:	b002      	add	sp, #8
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20000c0c 	.word	0x20000c0c
 8009f80:	0802b0ec 	.word	0x0802b0ec
 8009f84:	0802b0e8 	.word	0x0802b0e8
 8009f88:	20000084 	.word	0x20000084

08009f8c <AHT20_calibrate>:


bool AHT20_calibrate() {
 8009f8c:	b590      	push	{r4, r7, lr}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8009f92:	1dfc      	adds	r4, r7, #7
 8009f94:	4b10      	ldr	r3, [pc, #64]	@ (8009fd8 <AHT20_calibrate+0x4c>)
 8009f96:	2201      	movs	r2, #1
 8009f98:	0019      	movs	r1, r3
 8009f9a:	2038      	movs	r0, #56	@ 0x38
 8009f9c:	f7ff feac 	bl	8009cf8 <WriteRegister>
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8009fa4:	1dfb      	adds	r3, r7, #7
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	4053      	eors	r3, r2
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 8009fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8009fdc <AHT20_calibrate+0x50>)
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe0 <AHT20_calibrate+0x54>)
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f008 fd81 	bl	8012ac0 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 8009fbe:	f009 fab5 	bl	801352c <HAL_GetTick>
 8009fc2:	0003      	movs	r3, r0
 8009fc4:	3332      	adds	r3, #50	@ 0x32
 8009fc6:	001a      	movs	r2, r3
 8009fc8:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <AHT20_calibrate+0x58>)
 8009fca:	601a      	str	r2, [r3, #0]
  return response;
 8009fcc:	1dfb      	adds	r3, r7, #7
 8009fce:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b003      	add	sp, #12
 8009fd6:	bd90      	pop	{r4, r7, pc}
 8009fd8:	2000008c 	.word	0x2000008c
 8009fdc:	0802b114 	.word	0x0802b114
 8009fe0:	0802b14c 	.word	0x0802b14c
 8009fe4:	20000bfc 	.word	0x20000bfc

08009fe8 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 8009fec:	4a0a      	ldr	r2, [pc, #40]	@ (800a018 <AHT20_DeviceConnected+0x30>)
 8009fee:	4b0b      	ldr	r3, [pc, #44]	@ (800a01c <AHT20_DeviceConnected+0x34>)
 8009ff0:	0019      	movs	r1, r3
 8009ff2:	2003      	movs	r0, #3
 8009ff4:	f008 fd64 	bl	8012ac0 <CreateLine>
   AHT20_init();
 8009ff8:	f7ff ff90 	bl	8009f1c <AHT20_init>
   HAL_Delay(10);
 8009ffc:	200a      	movs	r0, #10
 8009ffe:	f009 fa9f 	bl	8013540 <HAL_Delay>
   AHT20_calibrate();
 800a002:	f7ff ffc3 	bl	8009f8c <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a006:	f7ff ff69 	bl	8009edc <AHT20_read_status>
 800a00a:	0003      	movs	r3, r0
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	4193      	sbcs	r3, r2
 800a010:	b2db      	uxtb	r3, r3
 }
 800a012:	0018      	movs	r0, r3
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	0802b150 	.word	0x0802b150
 800a01c:	0802b0e8 	.word	0x0802b0e8

0800a020 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a026:	1dfc      	adds	r4, r7, #7
 800a028:	4b10      	ldr	r3, [pc, #64]	@ (800a06c <AHT20_StartMeasurement+0x4c>)
 800a02a:	2203      	movs	r2, #3
 800a02c:	0019      	movs	r1, r3
 800a02e:	2038      	movs	r0, #56	@ 0x38
 800a030:	f7ff fe62 	bl	8009cf8 <WriteRegister>
 800a034:	0003      	movs	r3, r0
 800a036:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a038:	1dfb      	adds	r3, r7, #7
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2201      	movs	r2, #1
 800a03e:	4053      	eors	r3, r2
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a046:	4a0a      	ldr	r2, [pc, #40]	@ (800a070 <AHT20_StartMeasurement+0x50>)
 800a048:	4b0a      	ldr	r3, [pc, #40]	@ (800a074 <AHT20_StartMeasurement+0x54>)
 800a04a:	0019      	movs	r1, r3
 800a04c:	2001      	movs	r0, #1
 800a04e:	f008 fd37 	bl	8012ac0 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a052:	f009 fa6b 	bl	801352c <HAL_GetTick>
 800a056:	0003      	movs	r3, r0
 800a058:	33fa      	adds	r3, #250	@ 0xfa
 800a05a:	001a      	movs	r2, r3
 800a05c:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <AHT20_StartMeasurement+0x58>)
 800a05e:	601a      	str	r2, [r3, #0]
  return response;
 800a060:	1dfb      	adds	r3, r7, #7
 800a062:	781b      	ldrb	r3, [r3, #0]
}
 800a064:	0018      	movs	r0, r3
 800a066:	46bd      	mov	sp, r7
 800a068:	b003      	add	sp, #12
 800a06a:	bd90      	pop	{r4, r7, pc}
 800a06c:	20000088 	.word	0x20000088
 800a070:	0802b168 	.word	0x0802b168
 800a074:	0802b14c 	.word	0x0802b14c
 800a078:	20000bfc 	.word	0x20000bfc

0800a07c <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a082:	f009 fa53 	bl	801352c <HAL_GetTick>
 800a086:	0003      	movs	r3, r0
 800a088:	22fa      	movs	r2, #250	@ 0xfa
 800a08a:	0092      	lsls	r2, r2, #2
 800a08c:	189a      	adds	r2, r3, r2
 800a08e:	4b2c      	ldr	r3, [pc, #176]	@ (800a140 <AHT20_GetMeasurementValues+0xc4>)
 800a090:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a092:	e01f      	b.n	800a0d4 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a094:	4a2b      	ldr	r2, [pc, #172]	@ (800a144 <AHT20_GetMeasurementValues+0xc8>)
 800a096:	4b2c      	ldr	r3, [pc, #176]	@ (800a148 <AHT20_GetMeasurementValues+0xcc>)
 800a098:	0019      	movs	r1, r3
 800a09a:	2002      	movs	r0, #2
 800a09c:	f008 fd10 	bl	8012ac0 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a0a0:	4b27      	ldr	r3, [pc, #156]	@ (800a140 <AHT20_GetMeasurementValues+0xc4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f008 fcb5 	bl	8012a14 <TimestampIsReached>
 800a0aa:	1e03      	subs	r3, r0, #0
 800a0ac:	d00f      	beq.n	800a0ce <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a0ae:	4a27      	ldr	r2, [pc, #156]	@ (800a14c <AHT20_GetMeasurementValues+0xd0>)
 800a0b0:	4b27      	ldr	r3, [pc, #156]	@ (800a150 <AHT20_GetMeasurementValues+0xd4>)
 800a0b2:	0019      	movs	r1, r3
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f008 fd03 	bl	8012ac0 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a0ba:	f009 fa37 	bl	801352c <HAL_GetTick>
 800a0be:	0003      	movs	r3, r0
 800a0c0:	22fa      	movs	r2, #250	@ 0xfa
 800a0c2:	00d2      	lsls	r2, r2, #3
 800a0c4:	189a      	adds	r2, r3, r2
 800a0c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a140 <AHT20_GetMeasurementValues+0xc4>)
 800a0c8:	601a      	str	r2, [r3, #0]
      return false;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e034      	b.n	800a138 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a0ce:	200a      	movs	r0, #10
 800a0d0:	f009 fa36 	bl	8013540 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a0d4:	f7ff ff02 	bl	8009edc <AHT20_read_status>
 800a0d8:	0003      	movs	r3, r0
 800a0da:	001a      	movs	r2, r3
 800a0dc:	2380      	movs	r3, #128	@ 0x80
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b80      	cmp	r3, #128	@ 0x80
 800a0e2:	d0d7      	beq.n	800a094 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a0e4:	200a      	movs	r0, #10
 800a0e6:	f009 fa2b 	bl	8013540 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a0ea:	1dfb      	adds	r3, r7, #7
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	e009      	b.n	800a106 <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a0f2:	1dfb      	adds	r3, r7, #7
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	4a17      	ldr	r2, [pc, #92]	@ (800a154 <AHT20_GetMeasurementValues+0xd8>)
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a0fc:	1dfb      	adds	r3, r7, #7
 800a0fe:	781a      	ldrb	r2, [r3, #0]
 800a100:	1dfb      	adds	r3, r7, #7
 800a102:	3201      	adds	r2, #1
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	1dfb      	adds	r3, r7, #7
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b06      	cmp	r3, #6
 800a10c:	d9f1      	bls.n	800a0f2 <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a10e:	1dbc      	adds	r4, r7, #6
 800a110:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <AHT20_GetMeasurementValues+0xd8>)
 800a112:	2207      	movs	r2, #7
 800a114:	0019      	movs	r1, r3
 800a116:	2038      	movs	r0, #56	@ 0x38
 800a118:	f7ff fdaa 	bl	8009c70 <ReadDirRegister>
 800a11c:	0003      	movs	r3, r0
 800a11e:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a120:	200a      	movs	r0, #10
 800a122:	f009 fa0d 	bl	8013540 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a126:	f009 fa01 	bl	801352c <HAL_GetTick>
 800a12a:	0003      	movs	r3, r0
 800a12c:	3364      	adds	r3, #100	@ 0x64
 800a12e:	001a      	movs	r2, r3
 800a130:	4b03      	ldr	r3, [pc, #12]	@ (800a140 <AHT20_GetMeasurementValues+0xc4>)
 800a132:	601a      	str	r2, [r3, #0]
  return response;
 800a134:	1dbb      	adds	r3, r7, #6
 800a136:	781b      	ldrb	r3, [r3, #0]
}
 800a138:	0018      	movs	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b003      	add	sp, #12
 800a13e:	bd90      	pop	{r4, r7, pc}
 800a140:	20000bfc 	.word	0x20000bfc
 800a144:	0802b194 	.word	0x0802b194
 800a148:	0802b1bc 	.word	0x0802b1bc
 800a14c:	0802b1c0 	.word	0x0802b1c0
 800a150:	0802b14c 	.word	0x0802b14c
 800a154:	20000c0c 	.word	0x20000c0c

0800a158 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a15a:	46c6      	mov	lr, r8
 800a15c:	b500      	push	{lr}
 800a15e:	b08a      	sub	sp, #40	@ 0x28
 800a160:	af06      	add	r7, sp, #24
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a166:	4b5a      	ldr	r3, [pc, #360]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a168:	799c      	ldrb	r4, [r3, #6]
 800a16a:	4b59      	ldr	r3, [pc, #356]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a16c:	2106      	movs	r1, #6
 800a16e:	0018      	movs	r0, r3
 800a170:	f7ff fde4 	bl	8009d3c <CalculateCRC>
 800a174:	0003      	movs	r3, r0
 800a176:	429c      	cmp	r4, r3
 800a178:	d044      	beq.n	800a204 <AHT20_Calculate+0xac>
 800a17a:	4b55      	ldr	r3, [pc, #340]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a17c:	799b      	ldrb	r3, [r3, #6]
 800a17e:	2bff      	cmp	r3, #255	@ 0xff
 800a180:	d040      	beq.n	800a204 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a182:	4b53      	ldr	r3, [pc, #332]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	4698      	mov	r8, r3
 800a188:	4b51      	ldr	r3, [pc, #324]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	0018      	movs	r0, r3
 800a18e:	4b50      	ldr	r3, [pc, #320]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a190:	789b      	ldrb	r3, [r3, #2]
 800a192:	001c      	movs	r4, r3
 800a194:	4b4e      	ldr	r3, [pc, #312]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a196:	78db      	ldrb	r3, [r3, #3]
 800a198:	001d      	movs	r5, r3
 800a19a:	4b4d      	ldr	r3, [pc, #308]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	001e      	movs	r6, r3
 800a1a0:	4b4b      	ldr	r3, [pc, #300]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a1a2:	795b      	ldrb	r3, [r3, #5]
 800a1a4:	469c      	mov	ip, r3
 800a1a6:	4b4a      	ldr	r3, [pc, #296]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a1a8:	799b      	ldrb	r3, [r3, #6]
 800a1aa:	4a4a      	ldr	r2, [pc, #296]	@ (800a2d4 <AHT20_Calculate+0x17c>)
 800a1ac:	494a      	ldr	r1, [pc, #296]	@ (800a2d8 <AHT20_Calculate+0x180>)
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	4663      	mov	r3, ip
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	9603      	str	r6, [sp, #12]
 800a1b6:	9502      	str	r5, [sp, #8]
 800a1b8:	9401      	str	r4, [sp, #4]
 800a1ba:	9000      	str	r0, [sp, #0]
 800a1bc:	4643      	mov	r3, r8
 800a1be:	2003      	movs	r0, #3
 800a1c0:	f008 fc7e 	bl	8012ac0 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a1c4:	4b42      	ldr	r3, [pc, #264]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a1c6:	799b      	ldrb	r3, [r3, #6]
 800a1c8:	001c      	movs	r4, r3
 800a1ca:	4b41      	ldr	r3, [pc, #260]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a1cc:	2106      	movs	r1, #6
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f7ff fdb4 	bl	8009d3c <CalculateCRC>
 800a1d4:	0003      	movs	r3, r0
 800a1d6:	4a41      	ldr	r2, [pc, #260]	@ (800a2dc <AHT20_Calculate+0x184>)
 800a1d8:	4941      	ldr	r1, [pc, #260]	@ (800a2e0 <AHT20_Calculate+0x188>)
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	0023      	movs	r3, r4
 800a1de:	2001      	movs	r0, #1
 800a1e0:	f008 fc6e 	bl	8012ac0 <CreateLine>
    *airtemp = 0.0;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a1f0:	f009 f99c 	bl	801352c <HAL_GetTick>
 800a1f4:	0003      	movs	r3, r0
 800a1f6:	22fa      	movs	r2, #250	@ 0xfa
 800a1f8:	00d2      	lsls	r2, r2, #3
 800a1fa:	189a      	adds	r2, r3, r2
 800a1fc:	4b39      	ldr	r3, [pc, #228]	@ (800a2e4 <AHT20_Calculate+0x18c>)
 800a1fe:	601a      	str	r2, [r3, #0]
    return false;
 800a200:	2300      	movs	r3, #0
 800a202:	e05f      	b.n	800a2c4 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a204:	4b38      	ldr	r3, [pc, #224]	@ (800a2e8 <AHT20_Calculate+0x190>)
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a20a:	4b31      	ldr	r3, [pc, #196]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	041a      	lsls	r2, r3, #16
 800a210:	23f0      	movs	r3, #240	@ 0xf0
 800a212:	031b      	lsls	r3, r3, #12
 800a214:	401a      	ands	r2, r3
 800a216:	4b2e      	ldr	r3, [pc, #184]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a218:	791b      	ldrb	r3, [r3, #4]
 800a21a:	021b      	lsls	r3, r3, #8
 800a21c:	18d3      	adds	r3, r2, r3
 800a21e:	4a2c      	ldr	r2, [pc, #176]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a220:	7952      	ldrb	r2, [r2, #5]
 800a222:	189b      	adds	r3, r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7f7 fa1e 	bl	8001668 <__aeabi_ui2f>
 800a22c:	1c03      	adds	r3, r0, #0
 800a22e:	2193      	movs	r1, #147	@ 0x93
 800a230:	05c9      	lsls	r1, r1, #23
 800a232:	1c18      	adds	r0, r3, #0
 800a234:	f7f6 fcce 	bl	8000bd4 <__aeabi_fdiv>
 800a238:	1c03      	adds	r3, r0, #0
 800a23a:	492c      	ldr	r1, [pc, #176]	@ (800a2ec <AHT20_Calculate+0x194>)
 800a23c:	1c18      	adds	r0, r3, #0
 800a23e:	f7f6 feaf 	bl	8000fa0 <__aeabi_fmul>
 800a242:	1c03      	adds	r3, r0, #0
 800a244:	492a      	ldr	r1, [pc, #168]	@ (800a2f0 <AHT20_Calculate+0x198>)
 800a246:	1c18      	adds	r0, r3, #0
 800a248:	f7f6 ffe8 	bl	800121c <__aeabi_fsub>
 800a24c:	1c03      	adds	r3, r0, #0
 800a24e:	1c1a      	adds	r2, r3, #0
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a254:	4b1e      	ldr	r3, [pc, #120]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	031a      	lsls	r2, r3, #12
 800a25a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a25c:	789b      	ldrb	r3, [r3, #2]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	18d3      	adds	r3, r2, r3
 800a262:	4a1b      	ldr	r2, [pc, #108]	@ (800a2d0 <AHT20_Calculate+0x178>)
 800a264:	78d2      	ldrb	r2, [r2, #3]
 800a266:	0912      	lsrs	r2, r2, #4
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	189b      	adds	r3, r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a26e:	68b8      	ldr	r0, [r7, #8]
 800a270:	f7f7 f9fa 	bl	8001668 <__aeabi_ui2f>
 800a274:	1c03      	adds	r3, r0, #0
 800a276:	2193      	movs	r1, #147	@ 0x93
 800a278:	05c9      	lsls	r1, r1, #23
 800a27a:	1c18      	adds	r0, r3, #0
 800a27c:	f7f6 fcaa 	bl	8000bd4 <__aeabi_fdiv>
 800a280:	1c03      	adds	r3, r0, #0
 800a282:	491c      	ldr	r1, [pc, #112]	@ (800a2f4 <AHT20_Calculate+0x19c>)
 800a284:	1c18      	adds	r0, r3, #0
 800a286:	f7f6 fe8b 	bl	8000fa0 <__aeabi_fmul>
 800a28a:	1c03      	adds	r3, r0, #0
 800a28c:	1c1a      	adds	r2, r3, #0
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	1c18      	adds	r0, r3, #0
 800a298:	f7f9 f8e4 	bl	8003464 <__aeabi_f2d>
 800a29c:	0004      	movs	r4, r0
 800a29e:	000d      	movs	r5, r1
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	1c18      	adds	r0, r3, #0
 800a2a6:	f7f9 f8dd 	bl	8003464 <__aeabi_f2d>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	000b      	movs	r3, r1
 800a2ae:	4812      	ldr	r0, [pc, #72]	@ (800a2f8 <AHT20_Calculate+0x1a0>)
 800a2b0:	4909      	ldr	r1, [pc, #36]	@ (800a2d8 <AHT20_Calculate+0x180>)
 800a2b2:	9202      	str	r2, [sp, #8]
 800a2b4:	9303      	str	r3, [sp, #12]
 800a2b6:	9400      	str	r4, [sp, #0]
 800a2b8:	9501      	str	r5, [sp, #4]
 800a2ba:	0002      	movs	r2, r0
 800a2bc:	2003      	movs	r0, #3
 800a2be:	f008 fbff 	bl	8012ac0 <CreateLine>
  return true;
 800a2c2:	2301      	movs	r3, #1
}
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	b004      	add	sp, #16
 800a2ca:	bc80      	pop	{r7}
 800a2cc:	46b8      	mov	r8, r7
 800a2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d0:	20000c0c 	.word	0x20000c0c
 800a2d4:	0802b1e4 	.word	0x0802b1e4
 800a2d8:	0802b0e8 	.word	0x0802b0e8
 800a2dc:	0802b264 	.word	0x0802b264
 800a2e0:	0802b14c 	.word	0x0802b14c
 800a2e4:	20000bfc 	.word	0x20000bfc
 800a2e8:	20000c13 	.word	0x20000c13
 800a2ec:	43480000 	.word	0x43480000
 800a2f0:	42480000 	.word	0x42480000
 800a2f4:	42c80000 	.word	0x42c80000
 800a2f8:	0802b28c 	.word	0x0802b28c

0800a2fc <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a302:	4b50      	ldr	r3, [pc, #320]	@ (800a444 <AHT_Upkeep+0x148>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	0018      	movs	r0, r3
 800a308:	f008 fb84 	bl	8012a14 <TimestampIsReached>
 800a30c:	0003      	movs	r3, r0
 800a30e:	001a      	movs	r2, r3
 800a310:	2301      	movs	r3, #1
 800a312:	4053      	eors	r3, r2
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <AHT_Upkeep+0x24>
    return AHTState;
 800a31a:	4b4b      	ldr	r3, [pc, #300]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	e08d      	b.n	800a43c <AHT_Upkeep+0x140>
  }
  switch(AHTState) {
 800a320:	4b49      	ldr	r3, [pc, #292]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b05      	cmp	r3, #5
 800a326:	d863      	bhi.n	800a3f0 <AHT_Upkeep+0xf4>
 800a328:	009a      	lsls	r2, r3, #2
 800a32a:	4b48      	ldr	r3, [pc, #288]	@ (800a44c <AHT_Upkeep+0x150>)
 800a32c:	18d3      	adds	r3, r2, r3
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a332:	4a47      	ldr	r2, [pc, #284]	@ (800a450 <AHT_Upkeep+0x154>)
 800a334:	4b47      	ldr	r3, [pc, #284]	@ (800a454 <AHT_Upkeep+0x158>)
 800a336:	0019      	movs	r1, r3
 800a338:	2003      	movs	r0, #3
 800a33a:	f008 fbc1 	bl	8012ac0 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a33e:	f009 f8f5 	bl	801352c <HAL_GetTick>
 800a342:	0003      	movs	r3, r0
 800a344:	4a44      	ldr	r2, [pc, #272]	@ (800a458 <AHT_Upkeep+0x15c>)
 800a346:	189a      	adds	r2, r3, r2
 800a348:	4b3e      	ldr	r3, [pc, #248]	@ (800a444 <AHT_Upkeep+0x148>)
 800a34a:	601a      	str	r2, [r3, #0]
    break;
 800a34c:	e074      	b.n	800a438 <AHT_Upkeep+0x13c>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a34e:	f002 fc97 	bl	800cc80 <getSensorLock>
 800a352:	1e03      	subs	r3, r0, #0
 800a354:	d16b      	bne.n	800a42e <AHT_Upkeep+0x132>
      break;
    }
    setSensorLock(AHT20);
 800a356:	2003      	movs	r0, #3
 800a358:	f002 fc7e 	bl	800cc58 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a35c:	f7ff fe60 	bl	800a020 <AHT20_StartMeasurement>
 800a360:	0003      	movs	r3, r0
 800a362:	001a      	movs	r2, r3
 800a364:	2301      	movs	r3, #1
 800a366:	4053      	eors	r3, r2
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <AHT_Upkeep+0x7a>
      AHTState = AHT20_ERROR;
 800a36e:	4b36      	ldr	r3, [pc, #216]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a370:	22ff      	movs	r2, #255	@ 0xff
 800a372:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 800a374:	e060      	b.n	800a438 <AHT_Upkeep+0x13c>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a376:	4b34      	ldr	r3, [pc, #208]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a378:	2202      	movs	r2, #2
 800a37a:	701a      	strb	r2, [r3, #0]
    break;
 800a37c:	e05c      	b.n	800a438 <AHT_Upkeep+0x13c>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a37e:	f7ff fe7d 	bl	800a07c <AHT20_GetMeasurementValues>
 800a382:	1e03      	subs	r3, r0, #0
 800a384:	d055      	beq.n	800a432 <AHT_Upkeep+0x136>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 800a386:	2000      	movs	r0, #0
 800a388:	f002 fc66 	bl	800cc58 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a38c:	4b2e      	ldr	r3, [pc, #184]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a38e:	2203      	movs	r2, #3
 800a390:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a392:	e04e      	b.n	800a432 <AHT_Upkeep+0x136>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a394:	003a      	movs	r2, r7
 800a396:	1d3b      	adds	r3, r7, #4
 800a398:	0011      	movs	r1, r2
 800a39a:	0018      	movs	r0, r3
 800a39c:	f7ff fedc 	bl	800a158 <AHT20_Calculate>
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	001a      	movs	r2, r3
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4053      	eors	r3, r2
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d005      	beq.n	800a3ba <AHT_Upkeep+0xbe>
      AHTState = AHT20_ERROR;
 800a3ae:	4b26      	ldr	r3, [pc, #152]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a3b0:	22ff      	movs	r2, #255	@ 0xff
 800a3b2:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800a3b4:	4b24      	ldr	r3, [pc, #144]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	e040      	b.n	800a43c <AHT_Upkeep+0x140>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	1c11      	adds	r1, r2, #0
 800a3c0:	1c18      	adds	r0, r3, #0
 800a3c2:	f7fa f935 	bl	8004630 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	1c11      	adds	r1, r2, #0
 800a3cc:	1c18      	adds	r0, r3, #0
 800a3ce:	f7f9 fdf7 	bl	8003fc0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800a3d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a3d4:	2205      	movs	r2, #5
 800a3d6:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800a3d8:	f009 f8a8 	bl	801352c <HAL_GetTick>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	4a1f      	ldr	r2, [pc, #124]	@ (800a45c <AHT_Upkeep+0x160>)
 800a3e0:	189a      	adds	r2, r3, r2
 800a3e2:	4b18      	ldr	r3, [pc, #96]	@ (800a444 <AHT_Upkeep+0x148>)
 800a3e4:	601a      	str	r2, [r3, #0]
    break;
 800a3e6:	e027      	b.n	800a438 <AHT_Upkeep+0x13c>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a3e8:	4b17      	ldr	r3, [pc, #92]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	701a      	strb	r2, [r3, #0]
  break;
 800a3ee:	e023      	b.n	800a438 <AHT_Upkeep+0x13c>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a3f0:	4b15      	ldr	r3, [pc, #84]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a3f6:	f002 fc43 	bl	800cc80 <getSensorLock>
 800a3fa:	0003      	movs	r3, r0
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d102      	bne.n	800a406 <AHT_Upkeep+0x10a>
      setSensorLock(FREE);
 800a400:	2000      	movs	r0, #0
 800a402:	f002 fc29 	bl	800cc58 <setSensorLock>
    }
    AHTerrors++;
 800a406:	4b16      	ldr	r3, [pc, #88]	@ (800a460 <AHT_Upkeep+0x164>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	4b14      	ldr	r3, [pc, #80]	@ (800a460 <AHT_Upkeep+0x164>)
 800a410:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a412:	4b13      	ldr	r3, [pc, #76]	@ (800a460 <AHT_Upkeep+0x164>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b19      	cmp	r3, #25
 800a418:	d90d      	bls.n	800a436 <AHT_Upkeep+0x13a>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a41a:	4a12      	ldr	r2, [pc, #72]	@ (800a464 <AHT_Upkeep+0x168>)
 800a41c:	4b12      	ldr	r3, [pc, #72]	@ (800a468 <AHT_Upkeep+0x16c>)
 800a41e:	0019      	movs	r1, r3
 800a420:	2001      	movs	r0, #1
 800a422:	f008 fb4d 	bl	8012ac0 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800a426:	4b08      	ldr	r3, [pc, #32]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a42c:	e003      	b.n	800a436 <AHT_Upkeep+0x13a>
      break;
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	e002      	b.n	800a438 <AHT_Upkeep+0x13c>
    break;
 800a432:	46c0      	nop			@ (mov r8, r8)
 800a434:	e000      	b.n	800a438 <AHT_Upkeep+0x13c>
    break;
 800a436:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800a438:	4b03      	ldr	r3, [pc, #12]	@ (800a448 <AHT_Upkeep+0x14c>)
 800a43a:	781b      	ldrb	r3, [r3, #0]
}
 800a43c:	0018      	movs	r0, r3
 800a43e:	46bd      	mov	sp, r7
 800a440:	b002      	add	sp, #8
 800a442:	bd80      	pop	{r7, pc}
 800a444:	20000bfc 	.word	0x20000bfc
 800a448:	20000093 	.word	0x20000093
 800a44c:	0802d100 	.word	0x0802d100
 800a450:	0802b2c0 	.word	0x0802b2c0
 800a454:	0802b0e8 	.word	0x0802b0e8
 800a458:	000dbba0 	.word	0x000dbba0
 800a45c:	0000ea60 	.word	0x0000ea60
 800a460:	20000c13 	.word	0x20000c13
 800a464:	0802b2e8 	.word	0x0802b2e8
 800a468:	0802b14c 	.word	0x0802b14c

0800a46c <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46e:	b087      	sub	sp, #28
 800a470:	af02      	add	r7, sp, #8
 800a472:	0004      	movs	r4, r0
 800a474:	0008      	movs	r0, r1
 800a476:	60ba      	str	r2, [r7, #8]
 800a478:	0019      	movs	r1, r3
 800a47a:	260e      	movs	r6, #14
 800a47c:	19bb      	adds	r3, r7, r6
 800a47e:	1c22      	adds	r2, r4, #0
 800a480:	801a      	strh	r2, [r3, #0]
 800a482:	230c      	movs	r3, #12
 800a484:	18fb      	adds	r3, r7, r3
 800a486:	1c02      	adds	r2, r0, #0
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	1dbb      	adds	r3, r7, #6
 800a48c:	1c0a      	adds	r2, r1, #0
 800a48e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800a490:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c4 <WriteMemRegister+0x58>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d010      	beq.n	800a4ba <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a498:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <WriteMemRegister+0x58>)
 800a49a:	681c      	ldr	r4, [r3, #0]
 800a49c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <WriteMemRegister+0x5c>)
 800a49e:	7818      	ldrb	r0, [r3, #0]
 800a4a0:	68bd      	ldr	r5, [r7, #8]
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	18fb      	adds	r3, r7, r3
 800a4a6:	881a      	ldrh	r2, [r3, #0]
 800a4a8:	19bb      	adds	r3, r7, r6
 800a4aa:	8819      	ldrh	r1, [r3, #0]
 800a4ac:	1dbb      	adds	r3, r7, #6
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	002b      	movs	r3, r5
 800a4b4:	47a0      	blx	r4
 800a4b6:	0003      	movs	r3, r0
 800a4b8:	e000      	b.n	800a4bc <WriteMemRegister+0x50>
  }
  return false;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	0018      	movs	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	b005      	add	sp, #20
 800a4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c4:	20000c14 	.word	0x20000c14
 800a4c8:	20000094 	.word	0x20000094

0800a4cc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	0004      	movs	r4, r0
 800a4d4:	0008      	movs	r0, r1
 800a4d6:	60ba      	str	r2, [r7, #8]
 800a4d8:	0019      	movs	r1, r3
 800a4da:	260e      	movs	r6, #14
 800a4dc:	19bb      	adds	r3, r7, r6
 800a4de:	1c22      	adds	r2, r4, #0
 800a4e0:	801a      	strh	r2, [r3, #0]
 800a4e2:	230c      	movs	r3, #12
 800a4e4:	18fb      	adds	r3, r7, r3
 800a4e6:	1c02      	adds	r2, r0, #0
 800a4e8:	801a      	strh	r2, [r3, #0]
 800a4ea:	1dbb      	adds	r3, r7, #6
 800a4ec:	1c0a      	adds	r2, r1, #0
 800a4ee:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a524 <ReadMemRegister+0x58>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d010      	beq.n	800a51a <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a524 <ReadMemRegister+0x58>)
 800a4fa:	681c      	ldr	r4, [r3, #0]
 800a4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a528 <ReadMemRegister+0x5c>)
 800a4fe:	7818      	ldrb	r0, [r3, #0]
 800a500:	68bd      	ldr	r5, [r7, #8]
 800a502:	230c      	movs	r3, #12
 800a504:	18fb      	adds	r3, r7, r3
 800a506:	881a      	ldrh	r2, [r3, #0]
 800a508:	19bb      	adds	r3, r7, r6
 800a50a:	8819      	ldrh	r1, [r3, #0]
 800a50c:	1dbb      	adds	r3, r7, #6
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	002b      	movs	r3, r5
 800a514:	47a0      	blx	r4
 800a516:	0003      	movs	r3, r0
 800a518:	e000      	b.n	800a51c <ReadMemRegister+0x50>
  }
  return false;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	0018      	movs	r0, r3
 800a51e:	46bd      	mov	sp, r7
 800a520:	b005      	add	sp, #20
 800a522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a524:	20000c18 	.word	0x20000c18
 800a528:	20000094 	.word	0x20000094

0800a52c <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800a534:	f008 fffa 	bl	801352c <HAL_GetTick>
 800a538:	0002      	movs	r2, r0
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	18d2      	adds	r2, r2, r3
 800a53e:	4b03      	ldr	r3, [pc, #12]	@ (800a54c <setBMP280TimeStamp+0x20>)
 800a540:	601a      	str	r2, [r3, #0]
}
 800a542:	46c0      	nop			@ (mov r8, r8)
 800a544:	46bd      	mov	sp, r7
 800a546:	b002      	add	sp, #8
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	20000c40 	.word	0x20000c40

0800a550 <BMP280_reset>:

static void BMP280_reset() {
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800a556:	1dfb      	adds	r3, r7, #7
 800a558:	22b6      	movs	r2, #182	@ 0xb6
 800a55a:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800a55c:	1dfa      	adds	r2, r7, #7
 800a55e:	2301      	movs	r3, #1
 800a560:	2101      	movs	r1, #1
 800a562:	20e0      	movs	r0, #224	@ 0xe0
 800a564:	f7ff ff82 	bl	800a46c <WriteMemRegister>
  Info("BMP280 has been reset");
 800a568:	4a06      	ldr	r2, [pc, #24]	@ (800a584 <BMP280_reset+0x34>)
 800a56a:	4b07      	ldr	r3, [pc, #28]	@ (800a588 <BMP280_reset+0x38>)
 800a56c:	0019      	movs	r1, r3
 800a56e:	2002      	movs	r0, #2
 800a570:	f008 faa6 	bl	8012ac0 <CreateLine>
  HAL_Delay(100);
 800a574:	2064      	movs	r0, #100	@ 0x64
 800a576:	f008 ffe3 	bl	8013540 <HAL_Delay>
}
 800a57a:	46c0      	nop			@ (mov r8, r8)
 800a57c:	46bd      	mov	sp, r7
 800a57e:	b002      	add	sp, #8
 800a580:	bd80      	pop	{r7, pc}
 800a582:	46c0      	nop			@ (mov r8, r8)
 800a584:	0802b32c 	.word	0x0802b32c
 800a588:	0802b344 	.word	0x0802b344

0800a58c <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800a58c:	b590      	push	{r4, r7, lr}
 800a58e:	b083      	sub	sp, #12
 800a590:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800a592:	4aae      	ldr	r2, [pc, #696]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a594:	231a      	movs	r3, #26
 800a596:	2101      	movs	r1, #1
 800a598:	2088      	movs	r0, #136	@ 0x88
 800a59a:	f7ff ff97 	bl	800a4cc <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800a59e:	4bab      	ldr	r3, [pc, #684]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	021b      	lsls	r3, r3, #8
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4aa9      	ldr	r2, [pc, #676]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5a8:	7812      	ldrb	r2, [r2, #0]
 800a5aa:	189b      	adds	r3, r3, r2
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	4ba8      	ldr	r3, [pc, #672]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a5b0:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800a5b2:	4ba6      	ldr	r3, [pc, #664]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5b4:	78db      	ldrb	r3, [r3, #3]
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	4aa4      	ldr	r2, [pc, #656]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5bc:	7892      	ldrb	r2, [r2, #2]
 800a5be:	189b      	adds	r3, r3, r2
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	b21a      	sxth	r2, r3
 800a5c4:	4ba2      	ldr	r3, [pc, #648]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a5c6:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800a5c8:	4ba0      	ldr	r3, [pc, #640]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5ca:	795b      	ldrb	r3, [r3, #5]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4a9e      	ldr	r2, [pc, #632]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5d2:	7912      	ldrb	r2, [r2, #4]
 800a5d4:	189b      	adds	r3, r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	b21a      	sxth	r2, r3
 800a5da:	4b9d      	ldr	r3, [pc, #628]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a5dc:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800a5de:	4b9b      	ldr	r3, [pc, #620]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5e0:	79db      	ldrb	r3, [r3, #7]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4a99      	ldr	r2, [pc, #612]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5e8:	7992      	ldrb	r2, [r2, #6]
 800a5ea:	189b      	adds	r3, r3, r2
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	4b98      	ldr	r3, [pc, #608]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a5f0:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800a5f2:	4b96      	ldr	r3, [pc, #600]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5f4:	7a5b      	ldrb	r3, [r3, #9]
 800a5f6:	021b      	lsls	r3, r3, #8
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	4a94      	ldr	r2, [pc, #592]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a5fc:	7a12      	ldrb	r2, [r2, #8]
 800a5fe:	189b      	adds	r3, r3, r2
 800a600:	b29b      	uxth	r3, r3
 800a602:	b21a      	sxth	r2, r3
 800a604:	4b92      	ldr	r3, [pc, #584]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a606:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800a608:	4b90      	ldr	r3, [pc, #576]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a60a:	7adb      	ldrb	r3, [r3, #11]
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4a8e      	ldr	r2, [pc, #568]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a612:	7a92      	ldrb	r2, [r2, #10]
 800a614:	189b      	adds	r3, r3, r2
 800a616:	b29b      	uxth	r3, r3
 800a618:	b21a      	sxth	r2, r3
 800a61a:	4b8d      	ldr	r3, [pc, #564]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a61c:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800a61e:	4b8b      	ldr	r3, [pc, #556]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a620:	7b5b      	ldrb	r3, [r3, #13]
 800a622:	021b      	lsls	r3, r3, #8
 800a624:	b29b      	uxth	r3, r3
 800a626:	4a89      	ldr	r2, [pc, #548]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a628:	7b12      	ldrb	r2, [r2, #12]
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	b21a      	sxth	r2, r3
 800a630:	4b87      	ldr	r3, [pc, #540]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a632:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800a634:	4b85      	ldr	r3, [pc, #532]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a636:	7bdb      	ldrb	r3, [r3, #15]
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4a83      	ldr	r2, [pc, #524]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a63e:	7b92      	ldrb	r2, [r2, #14]
 800a640:	189b      	adds	r3, r3, r2
 800a642:	b29b      	uxth	r3, r3
 800a644:	b21a      	sxth	r2, r3
 800a646:	4b82      	ldr	r3, [pc, #520]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a648:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800a64a:	4b80      	ldr	r3, [pc, #512]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a64c:	7c5b      	ldrb	r3, [r3, #17]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	b29b      	uxth	r3, r3
 800a652:	4a7e      	ldr	r2, [pc, #504]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a654:	7c12      	ldrb	r2, [r2, #16]
 800a656:	189b      	adds	r3, r3, r2
 800a658:	b29b      	uxth	r3, r3
 800a65a:	b21a      	sxth	r2, r3
 800a65c:	4b7c      	ldr	r3, [pc, #496]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a65e:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800a660:	4b7a      	ldr	r3, [pc, #488]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a662:	7cdb      	ldrb	r3, [r3, #19]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	b29b      	uxth	r3, r3
 800a668:	4a78      	ldr	r2, [pc, #480]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a66a:	7c92      	ldrb	r2, [r2, #18]
 800a66c:	189b      	adds	r3, r3, r2
 800a66e:	b29b      	uxth	r3, r3
 800a670:	b21a      	sxth	r2, r3
 800a672:	4b77      	ldr	r3, [pc, #476]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a674:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800a676:	4b75      	ldr	r3, [pc, #468]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a678:	7d5b      	ldrb	r3, [r3, #21]
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	4a73      	ldr	r2, [pc, #460]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a680:	7d12      	ldrb	r2, [r2, #20]
 800a682:	189b      	adds	r3, r3, r2
 800a684:	b29b      	uxth	r3, r3
 800a686:	b21a      	sxth	r2, r3
 800a688:	4b71      	ldr	r3, [pc, #452]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a68a:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800a68c:	4b6f      	ldr	r3, [pc, #444]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a68e:	7ddb      	ldrb	r3, [r3, #23]
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	b29b      	uxth	r3, r3
 800a694:	4a6d      	ldr	r2, [pc, #436]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a696:	7d92      	ldrb	r2, [r2, #22]
 800a698:	189b      	adds	r3, r3, r2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	b21a      	sxth	r2, r3
 800a69e:	4b6c      	ldr	r3, [pc, #432]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a6a0:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800a6a2:	4a6c      	ldr	r2, [pc, #432]	@ (800a854 <BMP280_get_calibration+0x2c8>)
 800a6a4:	4b6c      	ldr	r3, [pc, #432]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a6a6:	0019      	movs	r1, r3
 800a6a8:	2003      	movs	r0, #3
 800a6aa:	f008 fa09 	bl	8012ac0 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800a6ae:	4b67      	ldr	r3, [pc, #412]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a6b0:	785b      	ldrb	r3, [r3, #1]
 800a6b2:	001c      	movs	r4, r3
 800a6b4:	4b65      	ldr	r3, [pc, #404]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	4b65      	ldr	r3, [pc, #404]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	4a67      	ldr	r2, [pc, #412]	@ (800a85c <BMP280_get_calibration+0x2d0>)
 800a6c0:	4965      	ldr	r1, [pc, #404]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	9000      	str	r0, [sp, #0]
 800a6c6:	0023      	movs	r3, r4
 800a6c8:	2003      	movs	r0, #3
 800a6ca:	f008 f9f9 	bl	8012ac0 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800a6ce:	4b5f      	ldr	r3, [pc, #380]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a6d0:	78db      	ldrb	r3, [r3, #3]
 800a6d2:	001c      	movs	r4, r3
 800a6d4:	4b5d      	ldr	r3, [pc, #372]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a6d6:	789b      	ldrb	r3, [r3, #2]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	4b5d      	ldr	r3, [pc, #372]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a6dc:	2202      	movs	r2, #2
 800a6de:	5e9b      	ldrsh	r3, [r3, r2]
 800a6e0:	4a5f      	ldr	r2, [pc, #380]	@ (800a860 <BMP280_get_calibration+0x2d4>)
 800a6e2:	495d      	ldr	r1, [pc, #372]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	9000      	str	r0, [sp, #0]
 800a6e8:	0023      	movs	r3, r4
 800a6ea:	2003      	movs	r0, #3
 800a6ec:	f008 f9e8 	bl	8012ac0 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800a6f0:	4b56      	ldr	r3, [pc, #344]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a6f2:	795b      	ldrb	r3, [r3, #5]
 800a6f4:	001c      	movs	r4, r3
 800a6f6:	4b55      	ldr	r3, [pc, #340]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a6f8:	791b      	ldrb	r3, [r3, #4]
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	4b54      	ldr	r3, [pc, #336]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a6fe:	2204      	movs	r2, #4
 800a700:	5e9b      	ldrsh	r3, [r3, r2]
 800a702:	4a58      	ldr	r2, [pc, #352]	@ (800a864 <BMP280_get_calibration+0x2d8>)
 800a704:	4954      	ldr	r1, [pc, #336]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	9000      	str	r0, [sp, #0]
 800a70a:	0023      	movs	r3, r4
 800a70c:	2003      	movs	r0, #3
 800a70e:	f008 f9d7 	bl	8012ac0 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800a712:	4b4e      	ldr	r3, [pc, #312]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a714:	79db      	ldrb	r3, [r3, #7]
 800a716:	001c      	movs	r4, r3
 800a718:	4b4c      	ldr	r3, [pc, #304]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a71a:	799b      	ldrb	r3, [r3, #6]
 800a71c:	0018      	movs	r0, r3
 800a71e:	4b4c      	ldr	r3, [pc, #304]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a720:	88db      	ldrh	r3, [r3, #6]
 800a722:	4a51      	ldr	r2, [pc, #324]	@ (800a868 <BMP280_get_calibration+0x2dc>)
 800a724:	494c      	ldr	r1, [pc, #304]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	9000      	str	r0, [sp, #0]
 800a72a:	0023      	movs	r3, r4
 800a72c:	2003      	movs	r0, #3
 800a72e:	f008 f9c7 	bl	8012ac0 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800a732:	4b46      	ldr	r3, [pc, #280]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a734:	7a5b      	ldrb	r3, [r3, #9]
 800a736:	001c      	movs	r4, r3
 800a738:	4b44      	ldr	r3, [pc, #272]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a73a:	7a1b      	ldrb	r3, [r3, #8]
 800a73c:	0018      	movs	r0, r3
 800a73e:	4b44      	ldr	r3, [pc, #272]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a740:	2208      	movs	r2, #8
 800a742:	5e9b      	ldrsh	r3, [r3, r2]
 800a744:	4a49      	ldr	r2, [pc, #292]	@ (800a86c <BMP280_get_calibration+0x2e0>)
 800a746:	4944      	ldr	r1, [pc, #272]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	9000      	str	r0, [sp, #0]
 800a74c:	0023      	movs	r3, r4
 800a74e:	2003      	movs	r0, #3
 800a750:	f008 f9b6 	bl	8012ac0 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800a754:	4b3d      	ldr	r3, [pc, #244]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a756:	7adb      	ldrb	r3, [r3, #11]
 800a758:	001c      	movs	r4, r3
 800a75a:	4b3c      	ldr	r3, [pc, #240]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a75c:	7a9b      	ldrb	r3, [r3, #10]
 800a75e:	0018      	movs	r0, r3
 800a760:	4b3b      	ldr	r3, [pc, #236]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a762:	220a      	movs	r2, #10
 800a764:	5e9b      	ldrsh	r3, [r3, r2]
 800a766:	4a42      	ldr	r2, [pc, #264]	@ (800a870 <BMP280_get_calibration+0x2e4>)
 800a768:	493b      	ldr	r1, [pc, #236]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	9000      	str	r0, [sp, #0]
 800a76e:	0023      	movs	r3, r4
 800a770:	2003      	movs	r0, #3
 800a772:	f008 f9a5 	bl	8012ac0 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800a776:	4b35      	ldr	r3, [pc, #212]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a778:	7b5b      	ldrb	r3, [r3, #13]
 800a77a:	001c      	movs	r4, r3
 800a77c:	4b33      	ldr	r3, [pc, #204]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a77e:	7b1b      	ldrb	r3, [r3, #12]
 800a780:	0018      	movs	r0, r3
 800a782:	4b33      	ldr	r3, [pc, #204]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a784:	220c      	movs	r2, #12
 800a786:	5e9b      	ldrsh	r3, [r3, r2]
 800a788:	4a3a      	ldr	r2, [pc, #232]	@ (800a874 <BMP280_get_calibration+0x2e8>)
 800a78a:	4933      	ldr	r1, [pc, #204]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	9000      	str	r0, [sp, #0]
 800a790:	0023      	movs	r3, r4
 800a792:	2003      	movs	r0, #3
 800a794:	f008 f994 	bl	8012ac0 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800a798:	4b2c      	ldr	r3, [pc, #176]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a79a:	7bdb      	ldrb	r3, [r3, #15]
 800a79c:	001c      	movs	r4, r3
 800a79e:	4b2b      	ldr	r3, [pc, #172]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a7a0:	7b9b      	ldrb	r3, [r3, #14]
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	4b2a      	ldr	r3, [pc, #168]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a7a6:	220e      	movs	r2, #14
 800a7a8:	5e9b      	ldrsh	r3, [r3, r2]
 800a7aa:	4a33      	ldr	r2, [pc, #204]	@ (800a878 <BMP280_get_calibration+0x2ec>)
 800a7ac:	492a      	ldr	r1, [pc, #168]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	9000      	str	r0, [sp, #0]
 800a7b2:	0023      	movs	r3, r4
 800a7b4:	2003      	movs	r0, #3
 800a7b6:	f008 f983 	bl	8012ac0 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800a7ba:	4b24      	ldr	r3, [pc, #144]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a7bc:	7c5b      	ldrb	r3, [r3, #17]
 800a7be:	001c      	movs	r4, r3
 800a7c0:	4b22      	ldr	r3, [pc, #136]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a7c2:	7c1b      	ldrb	r3, [r3, #16]
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	4b22      	ldr	r3, [pc, #136]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a7c8:	2210      	movs	r2, #16
 800a7ca:	5e9b      	ldrsh	r3, [r3, r2]
 800a7cc:	4a2b      	ldr	r2, [pc, #172]	@ (800a87c <BMP280_get_calibration+0x2f0>)
 800a7ce:	4922      	ldr	r1, [pc, #136]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a7d0:	9301      	str	r3, [sp, #4]
 800a7d2:	9000      	str	r0, [sp, #0]
 800a7d4:	0023      	movs	r3, r4
 800a7d6:	2003      	movs	r0, #3
 800a7d8:	f008 f972 	bl	8012ac0 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800a7dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a7de:	7cdb      	ldrb	r3, [r3, #19]
 800a7e0:	001c      	movs	r4, r3
 800a7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a7e4:	7c9b      	ldrb	r3, [r3, #18]
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	4b19      	ldr	r3, [pc, #100]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a7ea:	2212      	movs	r2, #18
 800a7ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a7ee:	4a24      	ldr	r2, [pc, #144]	@ (800a880 <BMP280_get_calibration+0x2f4>)
 800a7f0:	4919      	ldr	r1, [pc, #100]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	9000      	str	r0, [sp, #0]
 800a7f6:	0023      	movs	r3, r4
 800a7f8:	2003      	movs	r0, #3
 800a7fa:	f008 f961 	bl	8012ac0 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800a7fe:	4b13      	ldr	r3, [pc, #76]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a800:	7d5b      	ldrb	r3, [r3, #21]
 800a802:	001c      	movs	r4, r3
 800a804:	4b11      	ldr	r3, [pc, #68]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	0018      	movs	r0, r3
 800a80a:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a80c:	2214      	movs	r2, #20
 800a80e:	5e9b      	ldrsh	r3, [r3, r2]
 800a810:	4a1c      	ldr	r2, [pc, #112]	@ (800a884 <BMP280_get_calibration+0x2f8>)
 800a812:	4911      	ldr	r1, [pc, #68]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	9000      	str	r0, [sp, #0]
 800a818:	0023      	movs	r3, r4
 800a81a:	2003      	movs	r0, #3
 800a81c:	f008 f950 	bl	8012ac0 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800a820:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a822:	7ddb      	ldrb	r3, [r3, #23]
 800a824:	001c      	movs	r4, r3
 800a826:	4b09      	ldr	r3, [pc, #36]	@ (800a84c <BMP280_get_calibration+0x2c0>)
 800a828:	7d9b      	ldrb	r3, [r3, #22]
 800a82a:	0018      	movs	r0, r3
 800a82c:	4b08      	ldr	r3, [pc, #32]	@ (800a850 <BMP280_get_calibration+0x2c4>)
 800a82e:	2216      	movs	r2, #22
 800a830:	5e9b      	ldrsh	r3, [r3, r2]
 800a832:	4a15      	ldr	r2, [pc, #84]	@ (800a888 <BMP280_get_calibration+0x2fc>)
 800a834:	4908      	ldr	r1, [pc, #32]	@ (800a858 <BMP280_get_calibration+0x2cc>)
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	9000      	str	r0, [sp, #0]
 800a83a:	0023      	movs	r3, r4
 800a83c:	2003      	movs	r0, #3
 800a83e:	f008 f93f 	bl	8012ac0 <CreateLine>
}
 800a842:	46c0      	nop			@ (mov r8, r8)
 800a844:	46bd      	mov	sp, r7
 800a846:	b001      	add	sp, #4
 800a848:	bd90      	pop	{r4, r7, pc}
 800a84a:	46c0      	nop			@ (mov r8, r8)
 800a84c:	20000c44 	.word	0x20000c44
 800a850:	20000c1c 	.word	0x20000c1c
 800a854:	0802b348 	.word	0x0802b348
 800a858:	0802b364 	.word	0x0802b364
 800a85c:	0802b368 	.word	0x0802b368
 800a860:	0802b39c 	.word	0x0802b39c
 800a864:	0802b3d0 	.word	0x0802b3d0
 800a868:	0802b404 	.word	0x0802b404
 800a86c:	0802b438 	.word	0x0802b438
 800a870:	0802b46c 	.word	0x0802b46c
 800a874:	0802b4a0 	.word	0x0802b4a0
 800a878:	0802b4d4 	.word	0x0802b4d4
 800a87c:	0802b508 	.word	0x0802b508
 800a880:	0802b53c 	.word	0x0802b53c
 800a884:	0802b570 	.word	0x0802b570
 800a888:	0802b5a4 	.word	0x0802b5a4

0800a88c <BMP280_probe>:

static bool BMP280_probe() {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800a892:	4b34      	ldr	r3, [pc, #208]	@ (800a964 <BMP280_probe+0xd8>)
 800a894:	2276      	movs	r2, #118	@ 0x76
 800a896:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800a898:	1dba      	adds	r2, r7, #6
 800a89a:	2301      	movs	r3, #1
 800a89c:	2101      	movs	r1, #1
 800a89e:	20d0      	movs	r0, #208	@ 0xd0
 800a8a0:	f7ff fe14 	bl	800a4cc <ReadMemRegister>
 800a8a4:	0003      	movs	r3, r0
 800a8a6:	001a      	movs	r2, r3
 800a8a8:	1dfb      	adds	r3, r7, #7
 800a8aa:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800a8ac:	1dfb      	adds	r3, r7, #7
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	b25b      	sxtb	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <BMP280_probe+0x40>
 800a8b6:	1dbb      	adds	r3, r7, #6
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d006      	beq.n	800a8cc <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800a8be:	1dbb      	adds	r3, r7, #6
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	4a29      	ldr	r2, [pc, #164]	@ (800a968 <BMP280_probe+0xdc>)
 800a8c4:	4929      	ldr	r1, [pc, #164]	@ (800a96c <BMP280_probe+0xe0>)
 800a8c6:	2003      	movs	r0, #3
 800a8c8:	f008 f8fa 	bl	8012ac0 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800a8cc:	1dbb      	adds	r3, r7, #6
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	2b58      	cmp	r3, #88	@ 0x58
 800a8d2:	d01f      	beq.n	800a914 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800a8d4:	4b23      	ldr	r3, [pc, #140]	@ (800a964 <BMP280_probe+0xd8>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	4b21      	ldr	r3, [pc, #132]	@ (800a964 <BMP280_probe+0xd8>)
 800a8de:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800a8e0:	1dba      	adds	r2, r7, #6
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	20d0      	movs	r0, #208	@ 0xd0
 800a8e8:	f7ff fdf0 	bl	800a4cc <ReadMemRegister>
 800a8ec:	0003      	movs	r3, r0
 800a8ee:	001a      	movs	r2, r3
 800a8f0:	1dfb      	adds	r3, r7, #7
 800a8f2:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800a8f4:	1dfb      	adds	r3, r7, #7
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <BMP280_probe+0x88>
 800a8fe:	1dbb      	adds	r3, r7, #6
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d006      	beq.n	800a914 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800a906:	1dbb      	adds	r3, r7, #6
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	4a17      	ldr	r2, [pc, #92]	@ (800a968 <BMP280_probe+0xdc>)
 800a90c:	4917      	ldr	r1, [pc, #92]	@ (800a96c <BMP280_probe+0xe0>)
 800a90e:	2003      	movs	r0, #3
 800a910:	f008 f8d6 	bl	8012ac0 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800a914:	1dbb      	adds	r3, r7, #6
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b58      	cmp	r3, #88	@ 0x58
 800a91a:	d110      	bne.n	800a93e <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800a91c:	1dbb      	adds	r3, r7, #6
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	0018      	movs	r0, r3
 800a922:	4b10      	ldr	r3, [pc, #64]	@ (800a964 <BMP280_probe+0xd8>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	4a12      	ldr	r2, [pc, #72]	@ (800a970 <BMP280_probe+0xe4>)
 800a928:	4912      	ldr	r1, [pc, #72]	@ (800a974 <BMP280_probe+0xe8>)
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	0003      	movs	r3, r0
 800a92e:	2002      	movs	r0, #2
 800a930:	f008 f8c6 	bl	8012ac0 <CreateLine>
      BMP280_reset(); // get an initial state
 800a934:	f7ff fe0c 	bl	800a550 <BMP280_reset>
      BMP280_get_calibration();
 800a938:	f7ff fe28 	bl	800a58c <BMP280_get_calibration>
 800a93c:	e008      	b.n	800a950 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800a93e:	4b09      	ldr	r3, [pc, #36]	@ (800a964 <BMP280_probe+0xd8>)
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800a944:	4a0c      	ldr	r2, [pc, #48]	@ (800a978 <BMP280_probe+0xec>)
 800a946:	4b0d      	ldr	r3, [pc, #52]	@ (800a97c <BMP280_probe+0xf0>)
 800a948:	0019      	movs	r1, r3
 800a94a:	2001      	movs	r0, #1
 800a94c:	f008 f8b8 	bl	8012ac0 <CreateLine>
    }
    return bmp280I2Caddr;
 800a950:	4b04      	ldr	r3, [pc, #16]	@ (800a964 <BMP280_probe+0xd8>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	1e5a      	subs	r2, r3, #1
 800a956:	4193      	sbcs	r3, r2
 800a958:	b2db      	uxtb	r3, r3
}
 800a95a:	0018      	movs	r0, r3
 800a95c:	46bd      	mov	sp, r7
 800a95e:	b002      	add	sp, #8
 800a960:	bd80      	pop	{r7, pc}
 800a962:	46c0      	nop			@ (mov r8, r8)
 800a964:	20000094 	.word	0x20000094
 800a968:	0802b5d8 	.word	0x0802b5d8
 800a96c:	0802b364 	.word	0x0802b364
 800a970:	0802b608 	.word	0x0802b608
 800a974:	0802b344 	.word	0x0802b344
 800a978:	0802b640 	.word	0x0802b640
 800a97c:	0802b654 	.word	0x0802b654

0800a980 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800a984:	f7ff ff82 	bl	800a88c <BMP280_probe>
 800a988:	0003      	movs	r3, r0
}
 800a98a:	0018      	movs	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800a99a:	4b05      	ldr	r3, [pc, #20]	@ (800a9b0 <BMP_Init+0x20>)
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800a9a0:	4b04      	ldr	r3, [pc, #16]	@ (800a9b4 <BMP_Init+0x24>)
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	601a      	str	r2, [r3, #0]
}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	46c0      	nop			@ (mov r8, r8)
 800a9b0:	20000c18 	.word	0x20000c18
 800a9b4:	20000c14 	.word	0x20000c14

0800a9b8 <BMP280_set_config>:


static bool BMP280_set_config() {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800a9be:	1dbb      	adds	r3, r7, #6
 800a9c0:	228c      	movs	r2, #140	@ 0x8c
 800a9c2:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800a9c4:	1dba      	adds	r2, r7, #6
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	20f5      	movs	r0, #245	@ 0xf5
 800a9cc:	f7ff fd4e 	bl	800a46c <WriteMemRegister>
 800a9d0:	0003      	movs	r3, r0
 800a9d2:	001a      	movs	r2, r3
 800a9d4:	1dfb      	adds	r3, r7, #7
 800a9d6:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800a9d8:	f008 fda8 	bl	801352c <HAL_GetTick>
 800a9dc:	0003      	movs	r3, r0
 800a9de:	330a      	adds	r3, #10
 800a9e0:	001a      	movs	r2, r3
 800a9e2:	4b06      	ldr	r3, [pc, #24]	@ (800a9fc <BMP280_set_config+0x44>)
 800a9e4:	601a      	str	r2, [r3, #0]
  return rslt;
 800a9e6:	1dfb      	adds	r3, r7, #7
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	4193      	sbcs	r3, r2
 800a9f0:	b2db      	uxtb	r3, r3
}
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b002      	add	sp, #8
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	46c0      	nop			@ (mov r8, r8)
 800a9fc:	20000c40 	.word	0x20000c40

0800aa00 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800aa06:	1dbb      	adds	r3, r7, #6
 800aa08:	2208      	movs	r2, #8
 800aa0a:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800aa0c:	4b22      	ldr	r3, [pc, #136]	@ (800aa98 <BMP280_set_mode+0x98>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	224c      	movs	r2, #76	@ 0x4c
 800aa12:	4313      	orrs	r3, r2
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	1d7b      	adds	r3, r7, #5
 800aa18:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800aa1a:	1d7a      	adds	r2, r7, #5
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	2101      	movs	r1, #1
 800aa20:	20f4      	movs	r0, #244	@ 0xf4
 800aa22:	f7ff fd23 	bl	800a46c <WriteMemRegister>
 800aa26:	0003      	movs	r3, r0
 800aa28:	001a      	movs	r2, r3
 800aa2a:	1dfb      	adds	r3, r7, #7
 800aa2c:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800aa2e:	f008 fd7d 	bl	801352c <HAL_GetTick>
 800aa32:	0003      	movs	r3, r0
 800aa34:	22fa      	movs	r2, #250	@ 0xfa
 800aa36:	0092      	lsls	r2, r2, #2
 800aa38:	189a      	adds	r2, r3, r2
 800aa3a:	4b18      	ldr	r3, [pc, #96]	@ (800aa9c <BMP280_set_mode+0x9c>)
 800aa3c:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800aa3e:	e016      	b.n	800aa6e <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800aa40:	1dba      	adds	r2, r7, #6
 800aa42:	2301      	movs	r3, #1
 800aa44:	2101      	movs	r1, #1
 800aa46:	20f3      	movs	r0, #243	@ 0xf3
 800aa48:	f7ff fd40 	bl	800a4cc <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800aa4c:	4b13      	ldr	r3, [pc, #76]	@ (800aa9c <BMP280_set_mode+0x9c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	0018      	movs	r0, r3
 800aa52:	f007 ffdf 	bl	8012a14 <TimestampIsReached>
 800aa56:	1e03      	subs	r3, r0, #0
 800aa58:	d006      	beq.n	800aa68 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800aa5a:	4a11      	ldr	r2, [pc, #68]	@ (800aaa0 <BMP280_set_mode+0xa0>)
 800aa5c:	4b11      	ldr	r3, [pc, #68]	@ (800aaa4 <BMP280_set_mode+0xa4>)
 800aa5e:	0019      	movs	r1, r3
 800aa60:	2001      	movs	r0, #1
 800aa62:	f008 f82d 	bl	8012ac0 <CreateLine>
      break;
 800aa66:	e008      	b.n	800aa7a <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800aa68:	2001      	movs	r0, #1
 800aa6a:	f008 fd69 	bl	8013540 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800aa6e:	1dbb      	adds	r3, r7, #6
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	001a      	movs	r2, r3
 800aa74:	2308      	movs	r3, #8
 800aa76:	4013      	ands	r3, r2
 800aa78:	d1e2      	bne.n	800aa40 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800aa7a:	f008 fd57 	bl	801352c <HAL_GetTick>
 800aa7e:	0002      	movs	r2, r0
 800aa80:	4b06      	ldr	r3, [pc, #24]	@ (800aa9c <BMP280_set_mode+0x9c>)
 800aa82:	601a      	str	r2, [r3, #0]
  return rslt;
 800aa84:	1dfb      	adds	r3, r7, #7
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	1e5a      	subs	r2, r3, #1
 800aa8c:	4193      	sbcs	r3, r2
 800aa8e:	b2db      	uxtb	r3, r3
}
 800aa90:	0018      	movs	r0, r3
 800aa92:	46bd      	mov	sp, r7
 800aa94:	b002      	add	sp, #8
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000095 	.word	0x20000095
 800aa9c:	20000c40 	.word	0x20000c40
 800aaa0:	0802b658 	.word	0x0802b658
 800aaa4:	0802b654 	.word	0x0802b654

0800aaa8 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800aaae:	1dba      	adds	r2, r7, #6
 800aab0:	2301      	movs	r3, #1
 800aab2:	2101      	movs	r1, #1
 800aab4:	20f4      	movs	r0, #244	@ 0xf4
 800aab6:	f7ff fd09 	bl	800a4cc <ReadMemRegister>
 800aaba:	0003      	movs	r3, r0
 800aabc:	001a      	movs	r2, r3
 800aabe:	1dfb      	adds	r3, r7, #7
 800aac0:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800aac2:	1dbb      	adds	r3, r7, #6
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2203      	movs	r2, #3
 800aac8:	4013      	ands	r3, r2
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	1dbb      	adds	r3, r7, #6
 800aace:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800aad0:	f008 fd2c 	bl	801352c <HAL_GetTick>
 800aad4:	0003      	movs	r3, r0
 800aad6:	330a      	adds	r3, #10
 800aad8:	001a      	movs	r2, r3
 800aada:	4b08      	ldr	r3, [pc, #32]	@ (800aafc <BMP280_get_mode+0x54>)
 800aadc:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800aade:	1dfb      	adds	r3, r7, #7
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	b25b      	sxtb	r3, r3
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <BMP280_get_mode+0x46>
    bmpData = 255;
 800aae8:	1dbb      	adds	r3, r7, #6
 800aaea:	22ff      	movs	r2, #255	@ 0xff
 800aaec:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800aaee:	1dbb      	adds	r3, r7, #6
 800aaf0:	781b      	ldrb	r3, [r3, #0]
}
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	b002      	add	sp, #8
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	46c0      	nop			@ (mov r8, r8)
 800aafc:	20000c40 	.word	0x20000c40

0800ab00 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800ab00:	b5b0      	push	{r4, r5, r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800ab06:	1d3a      	adds	r2, r7, #4
 800ab08:	2306      	movs	r3, #6
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	20f7      	movs	r0, #247	@ 0xf7
 800ab0e:	f7ff fcdd 	bl	800a4cc <ReadMemRegister>
 800ab12:	0003      	movs	r3, r0
 800ab14:	001a      	movs	r2, r3
 800ab16:	230f      	movs	r3, #15
 800ab18:	18fb      	adds	r3, r7, r3
 800ab1a:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800ab1c:	1d3b      	adds	r3, r7, #4
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b80      	cmp	r3, #128	@ 0x80
 800ab22:	d00f      	beq.n	800ab44 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800ab24:	1d3b      	adds	r3, r7, #4
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	031a      	lsls	r2, r3, #12
 800ab2a:	1d3b      	adds	r3, r7, #4
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	18d3      	adds	r3, r2, r3
 800ab32:	1d3a      	adds	r2, r7, #4
 800ab34:	7892      	ldrb	r2, [r2, #2]
 800ab36:	0912      	lsrs	r2, r2, #4
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	189b      	adds	r3, r3, r2
 800ab3c:	001a      	movs	r2, r3
 800ab3e:	4b2d      	ldr	r3, [pc, #180]	@ (800abf4 <BMP280_get_measurement_values+0xf4>)
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	e01b      	b.n	800ab7c <BMP280_get_measurement_values+0x7c>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 800ab44:	4a2c      	ldr	r2, [pc, #176]	@ (800abf8 <BMP280_get_measurement_values+0xf8>)
 800ab46:	4b2d      	ldr	r3, [pc, #180]	@ (800abfc <BMP280_get_measurement_values+0xfc>)
 800ab48:	0019      	movs	r1, r3
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	f007 ffb8 	bl	8012ac0 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800ab50:	1d3b      	adds	r3, r7, #4
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	001d      	movs	r5, r3
 800ab56:	1d3b      	adds	r3, r7, #4
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	0018      	movs	r0, r3
 800ab5c:	1d3b      	adds	r3, r7, #4
 800ab5e:	789b      	ldrb	r3, [r3, #2]
 800ab60:	001c      	movs	r4, r3
 800ab62:	4b24      	ldr	r3, [pc, #144]	@ (800abf4 <BMP280_get_measurement_values+0xf4>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a26      	ldr	r2, [pc, #152]	@ (800ac00 <BMP280_get_measurement_values+0x100>)
 800ab68:	4926      	ldr	r1, [pc, #152]	@ (800ac04 <BMP280_get_measurement_values+0x104>)
 800ab6a:	9302      	str	r3, [sp, #8]
 800ab6c:	9401      	str	r4, [sp, #4]
 800ab6e:	9000      	str	r0, [sp, #0]
 800ab70:	002b      	movs	r3, r5
 800ab72:	2003      	movs	r0, #3
 800ab74:	f007 ffa4 	bl	8012ac0 <CreateLine>
    SetAllBlueLED();
 800ab78:	f006 fef6 	bl	8011968 <SetAllBlueLED>
  }
  if (bmpData[3] != 0x80) {
 800ab7c:	1d3b      	adds	r3, r7, #4
 800ab7e:	78db      	ldrb	r3, [r3, #3]
 800ab80:	2b80      	cmp	r3, #128	@ 0x80
 800ab82:	d00f      	beq.n	800aba4 <BMP280_get_measurement_values+0xa4>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800ab84:	1d3b      	adds	r3, r7, #4
 800ab86:	78db      	ldrb	r3, [r3, #3]
 800ab88:	031a      	lsls	r2, r3, #12
 800ab8a:	1d3b      	adds	r3, r7, #4
 800ab8c:	791b      	ldrb	r3, [r3, #4]
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	18d3      	adds	r3, r2, r3
 800ab92:	1d3a      	adds	r2, r7, #4
 800ab94:	7952      	ldrb	r2, [r2, #5]
 800ab96:	0912      	lsrs	r2, r2, #4
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	001a      	movs	r2, r3
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	@ (800ac08 <BMP280_get_measurement_values+0x108>)
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	e01b      	b.n	800abdc <BMP280_get_measurement_values+0xdc>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 800aba4:	4a19      	ldr	r2, [pc, #100]	@ (800ac0c <BMP280_get_measurement_values+0x10c>)
 800aba6:	4b15      	ldr	r3, [pc, #84]	@ (800abfc <BMP280_get_measurement_values+0xfc>)
 800aba8:	0019      	movs	r1, r3
 800abaa:	2001      	movs	r0, #1
 800abac:	f007 ff88 	bl	8012ac0 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800abb0:	1d3b      	adds	r3, r7, #4
 800abb2:	78db      	ldrb	r3, [r3, #3]
 800abb4:	001d      	movs	r5, r3
 800abb6:	1d3b      	adds	r3, r7, #4
 800abb8:	791b      	ldrb	r3, [r3, #4]
 800abba:	0018      	movs	r0, r3
 800abbc:	1d3b      	adds	r3, r7, #4
 800abbe:	795b      	ldrb	r3, [r3, #5]
 800abc0:	001c      	movs	r4, r3
 800abc2:	4b11      	ldr	r3, [pc, #68]	@ (800ac08 <BMP280_get_measurement_values+0x108>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a12      	ldr	r2, [pc, #72]	@ (800ac10 <BMP280_get_measurement_values+0x110>)
 800abc8:	490e      	ldr	r1, [pc, #56]	@ (800ac04 <BMP280_get_measurement_values+0x104>)
 800abca:	9302      	str	r3, [sp, #8]
 800abcc:	9401      	str	r4, [sp, #4]
 800abce:	9000      	str	r0, [sp, #0]
 800abd0:	002b      	movs	r3, r5
 800abd2:	2003      	movs	r0, #3
 800abd4:	f007 ff74 	bl	8012ac0 <CreateLine>
    SetAllBlueLED();
 800abd8:	f006 fec6 	bl	8011968 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800abdc:	230f      	movs	r3, #15
 800abde:	18fb      	adds	r3, r7, r3
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b25b      	sxtb	r3, r3
 800abe4:	1e5a      	subs	r2, r3, #1
 800abe6:	4193      	sbcs	r3, r2
 800abe8:	b2db      	uxtb	r3, r3
}
 800abea:	0018      	movs	r0, r3
 800abec:	46bd      	mov	sp, r7
 800abee:	b004      	add	sp, #16
 800abf0:	bdb0      	pop	{r4, r5, r7, pc}
 800abf2:	46c0      	nop			@ (mov r8, r8)
 800abf4:	20000c3c 	.word	0x20000c3c
 800abf8:	0802b684 	.word	0x0802b684
 800abfc:	0802b654 	.word	0x0802b654
 800ac00:	0802b6c8 	.word	0x0802b6c8
 800ac04:	0802b364 	.word	0x0802b364
 800ac08:	20000c38 	.word	0x20000c38
 800ac0c:	0802b710 	.word	0x0802b710
 800ac10:	0802b74c 	.word	0x0802b74c

0800ac14 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800ac1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ac94 <BMP280_calc_temperature+0x80>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	10da      	asrs	r2, r3, #3
 800ac24:	4b1c      	ldr	r3, [pc, #112]	@ (800ac98 <BMP280_calc_temperature+0x84>)
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	4a1a      	ldr	r2, [pc, #104]	@ (800ac98 <BMP280_calc_temperature+0x84>)
 800ac2e:	2102      	movs	r1, #2
 800ac30:	5e52      	ldrsh	r2, [r2, r1]
 800ac32:	4353      	muls	r3, r2
 800ac34:	12db      	asrs	r3, r3, #11
 800ac36:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	111b      	asrs	r3, r3, #4
 800ac3c:	4a16      	ldr	r2, [pc, #88]	@ (800ac98 <BMP280_calc_temperature+0x84>)
 800ac3e:	8812      	ldrh	r2, [r2, #0]
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	1112      	asrs	r2, r2, #4
 800ac46:	4914      	ldr	r1, [pc, #80]	@ (800ac98 <BMP280_calc_temperature+0x84>)
 800ac48:	8809      	ldrh	r1, [r1, #0]
 800ac4a:	1a52      	subs	r2, r2, r1
 800ac4c:	4353      	muls	r3, r2
 800ac4e:	131b      	asrs	r3, r3, #12
 800ac50:	4a11      	ldr	r2, [pc, #68]	@ (800ac98 <BMP280_calc_temperature+0x84>)
 800ac52:	2104      	movs	r1, #4
 800ac54:	5e52      	ldrsh	r2, [r2, r1]
 800ac56:	4353      	muls	r3, r2
 800ac58:	139b      	asrs	r3, r3, #14
 800ac5a:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	18d2      	adds	r2, r2, r3
 800ac62:	4b0e      	ldr	r3, [pc, #56]	@ (800ac9c <BMP280_calc_temperature+0x88>)
 800ac64:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <BMP280_calc_temperature+0x88>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	0013      	movs	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	189b      	adds	r3, r3, r2
 800ac70:	3380      	adds	r3, #128	@ 0x80
 800ac72:	121b      	asrs	r3, r3, #8
 800ac74:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800ac76:	68b8      	ldr	r0, [r7, #8]
 800ac78:	f7f6 fcaa 	bl	80015d0 <__aeabi_i2f>
 800ac7c:	1c03      	adds	r3, r0, #0
 800ac7e:	4908      	ldr	r1, [pc, #32]	@ (800aca0 <BMP280_calc_temperature+0x8c>)
 800ac80:	1c18      	adds	r0, r3, #0
 800ac82:	f7f5 ffa7 	bl	8000bd4 <__aeabi_fdiv>
 800ac86:	1c03      	adds	r3, r0, #0
 800ac88:	607b      	str	r3, [r7, #4]
  return airTemp;
 800ac8a:	687b      	ldr	r3, [r7, #4]
}
 800ac8c:	1c18      	adds	r0, r3, #0
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	b006      	add	sp, #24
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20000c38 	.word	0x20000c38
 800ac98:	20000c1c 	.word	0x20000c1c
 800ac9c:	20000c34 	.word	0x20000c34
 800aca0:	42c80000 	.word	0x42c80000

0800aca4 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800acaa:	4b4e      	ldr	r3, [pc, #312]	@ (800ade4 <BMP280_calc_pressure+0x140>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800acb0:	4b4d      	ldr	r3, [pc, #308]	@ (800ade8 <BMP280_calc_pressure+0x144>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	105b      	asrs	r3, r3, #1
 800acb6:	4a4d      	ldr	r2, [pc, #308]	@ (800adec <BMP280_calc_pressure+0x148>)
 800acb8:	4694      	mov	ip, r2
 800acba:	4463      	add	r3, ip
 800acbc:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	109b      	asrs	r3, r3, #2
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	1092      	asrs	r2, r2, #2
 800acc6:	4353      	muls	r3, r2
 800acc8:	12db      	asrs	r3, r3, #11
 800acca:	4a49      	ldr	r2, [pc, #292]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800accc:	2110      	movs	r1, #16
 800acce:	5e52      	ldrsh	r2, [r2, r1]
 800acd0:	4353      	muls	r3, r2
 800acd2:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800acd4:	4b46      	ldr	r3, [pc, #280]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800acd6:	220e      	movs	r2, #14
 800acd8:	5e9b      	ldrsh	r3, [r3, r2]
 800acda:	001a      	movs	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4353      	muls	r3, r2
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	18d3      	adds	r3, r2, r3
 800ace6:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	109a      	asrs	r2, r3, #2
 800acec:	4b40      	ldr	r3, [pc, #256]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800acee:	210c      	movs	r1, #12
 800acf0:	5e5b      	ldrsh	r3, [r3, r1]
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	18d3      	adds	r3, r2, r3
 800acf6:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800acf8:	4b3d      	ldr	r3, [pc, #244]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800acfa:	220a      	movs	r2, #10
 800acfc:	5e9b      	ldrsh	r3, [r3, r2]
 800acfe:	0019      	movs	r1, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	109b      	asrs	r3, r3, #2
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	1092      	asrs	r2, r2, #2
 800ad08:	4353      	muls	r3, r2
 800ad0a:	135b      	asrs	r3, r3, #13
 800ad0c:	434b      	muls	r3, r1
 800ad0e:	10da      	asrs	r2, r3, #3
 800ad10:	4b37      	ldr	r3, [pc, #220]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800ad12:	2108      	movs	r1, #8
 800ad14:	5e5b      	ldrsh	r3, [r3, r1]
 800ad16:	0019      	movs	r1, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	434b      	muls	r3, r1
 800ad1c:	105b      	asrs	r3, r3, #1
 800ad1e:	18d3      	adds	r3, r2, r3
 800ad20:	149b      	asrs	r3, r3, #18
 800ad22:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2280      	movs	r2, #128	@ 0x80
 800ad28:	0212      	lsls	r2, r2, #8
 800ad2a:	4694      	mov	ip, r2
 800ad2c:	4463      	add	r3, ip
 800ad2e:	4a30      	ldr	r2, [pc, #192]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800ad30:	88d2      	ldrh	r2, [r2, #6]
 800ad32:	4353      	muls	r3, r2
 800ad34:	13db      	asrs	r3, r3, #15
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <BMP280_calc_pressure+0x9e>
    return 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e04b      	b.n	800adda <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2280      	movs	r2, #128	@ 0x80
 800ad46:	0352      	lsls	r2, r2, #13
 800ad48:	1ad2      	subs	r2, r2, r3
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	131b      	asrs	r3, r3, #12
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	001a      	movs	r2, r3
 800ad52:	4b28      	ldr	r3, [pc, #160]	@ (800adf4 <BMP280_calc_pressure+0x150>)
 800ad54:	4353      	muls	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	db09      	blt.n	800ad72 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	0011      	movs	r1, r2
 800ad66:	0018      	movs	r0, r3
 800ad68:	f7f5 fa1c 	bl	80001a4 <__udivsi3>
 800ad6c:	0003      	movs	r3, r0
 800ad6e:	617b      	str	r3, [r7, #20]
 800ad70:	e007      	b.n	800ad82 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	0019      	movs	r1, r3
 800ad76:	6978      	ldr	r0, [r7, #20]
 800ad78:	f7f5 fa14 	bl	80001a4 <__udivsi3>
 800ad7c:	0003      	movs	r3, r0
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800ad82:	4b1b      	ldr	r3, [pc, #108]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800ad84:	2216      	movs	r2, #22
 800ad86:	5e9b      	ldrsh	r3, [r3, r2]
 800ad88:	0019      	movs	r1, r3
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	08db      	lsrs	r3, r3, #3
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	08d2      	lsrs	r2, r2, #3
 800ad92:	4353      	muls	r3, r2
 800ad94:	0b5b      	lsrs	r3, r3, #13
 800ad96:	434b      	muls	r3, r1
 800ad98:	131b      	asrs	r3, r3, #12
 800ad9a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	089b      	lsrs	r3, r3, #2
 800ada0:	001a      	movs	r2, r3
 800ada2:	4b13      	ldr	r3, [pc, #76]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800ada4:	2114      	movs	r1, #20
 800ada6:	5e5b      	ldrsh	r3, [r3, r1]
 800ada8:	4353      	muls	r3, r2
 800adaa:	135b      	asrs	r3, r3, #13
 800adac:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	18d3      	adds	r3, r2, r3
 800adb4:	4a0e      	ldr	r2, [pc, #56]	@ (800adf0 <BMP280_calc_pressure+0x14c>)
 800adb6:	2112      	movs	r1, #18
 800adb8:	5e52      	ldrsh	r2, [r2, r1]
 800adba:	189b      	adds	r3, r3, r2
 800adbc:	111a      	asrs	r2, r3, #4
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	18d3      	adds	r3, r2, r3
 800adc2:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800adc4:	6978      	ldr	r0, [r7, #20]
 800adc6:	f7f6 fc4f 	bl	8001668 <__aeabi_ui2f>
 800adca:	1c03      	adds	r3, r0, #0
 800adcc:	490a      	ldr	r1, [pc, #40]	@ (800adf8 <BMP280_calc_pressure+0x154>)
 800adce:	1c18      	adds	r0, r3, #0
 800add0:	f7f5 ff00 	bl	8000bd4 <__aeabi_fdiv>
 800add4:	1c03      	adds	r3, r0, #0
 800add6:	607b      	str	r3, [r7, #4]
  return airhPa;
 800add8:	687b      	ldr	r3, [r7, #4]
}
 800adda:	1c18      	adds	r0, r3, #0
 800addc:	46bd      	mov	sp, r7
 800adde:	b006      	add	sp, #24
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	46c0      	nop			@ (mov r8, r8)
 800ade4:	20000c3c 	.word	0x20000c3c
 800ade8:	20000c34 	.word	0x20000c34
 800adec:	ffff0600 	.word	0xffff0600
 800adf0:	20000c1c 	.word	0x20000c1c
 800adf4:	00000c35 	.word	0x00000c35
 800adf8:	42c80000 	.word	0x42c80000

0800adfc <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800adfc:	b5b0      	push	{r4, r5, r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800ae02:	4b9a      	ldr	r3, [pc, #616]	@ (800b06c <BMP_Upkeep+0x270>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	0018      	movs	r0, r3
 800ae08:	f007 fe04 	bl	8012a14 <TimestampIsReached>
 800ae0c:	0003      	movs	r3, r0
 800ae0e:	001a      	movs	r2, r3
 800ae10:	2301      	movs	r3, #1
 800ae12:	4053      	eors	r3, r2
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <BMP_Upkeep+0x24>
    return BMPState;
 800ae1a:	4b95      	ldr	r3, [pc, #596]	@ (800b070 <BMP_Upkeep+0x274>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	e120      	b.n	800b062 <BMP_Upkeep+0x266>
  }
  switch(BMPState) {
 800ae20:	4b93      	ldr	r3, [pc, #588]	@ (800b070 <BMP_Upkeep+0x274>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d900      	bls.n	800ae2a <BMP_Upkeep+0x2e>
 800ae28:	e106      	b.n	800b038 <BMP_Upkeep+0x23c>
 800ae2a:	009a      	lsls	r2, r3, #2
 800ae2c:	4b91      	ldr	r3, [pc, #580]	@ (800b074 <BMP_Upkeep+0x278>)
 800ae2e:	18d3      	adds	r3, r2, r3
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800ae34:	4a90      	ldr	r2, [pc, #576]	@ (800b078 <BMP_Upkeep+0x27c>)
 800ae36:	4b91      	ldr	r3, [pc, #580]	@ (800b07c <BMP_Upkeep+0x280>)
 800ae38:	0019      	movs	r1, r3
 800ae3a:	2003      	movs	r0, #3
 800ae3c:	f007 fe40 	bl	8012ac0 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800ae40:	f008 fb74 	bl	801352c <HAL_GetTick>
 800ae44:	0003      	movs	r3, r0
 800ae46:	4a8e      	ldr	r2, [pc, #568]	@ (800b080 <BMP_Upkeep+0x284>)
 800ae48:	189a      	adds	r2, r3, r2
 800ae4a:	4b88      	ldr	r3, [pc, #544]	@ (800b06c <BMP_Upkeep+0x270>)
 800ae4c:	601a      	str	r2, [r3, #0]
    break;
 800ae4e:	e106      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800ae50:	f001 ff16 	bl	800cc80 <getSensorLock>
 800ae54:	1e03      	subs	r3, r0, #0
 800ae56:	d000      	beq.n	800ae5a <BMP_Upkeep+0x5e>
 800ae58:	e0fa      	b.n	800b050 <BMP_Upkeep+0x254>
      break;
    }
    BMP280_reset();
 800ae5a:	f7ff fb79 	bl	800a550 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 800ae5e:	4b84      	ldr	r3, [pc, #528]	@ (800b070 <BMP_Upkeep+0x274>)
 800ae60:	2201      	movs	r2, #1
 800ae62:	701a      	strb	r2, [r3, #0]
    break;
 800ae64:	e0fb      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800ae66:	f001 ff0b 	bl	800cc80 <getSensorLock>
 800ae6a:	1e03      	subs	r3, r0, #0
 800ae6c:	d000      	beq.n	800ae70 <BMP_Upkeep+0x74>
 800ae6e:	e0f1      	b.n	800b054 <BMP_Upkeep+0x258>
      break;
    }
    setSensorLock(BMP280);
 800ae70:	2004      	movs	r0, #4
 800ae72:	f001 fef1 	bl	800cc58 <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 800ae76:	200a      	movs	r0, #10
 800ae78:	f008 fb62 	bl	8013540 <HAL_Delay>
    if (BMP280_set_config()) {
 800ae7c:	f7ff fd9c 	bl	800a9b8 <BMP280_set_config>
 800ae80:	1e03      	subs	r3, r0, #0
 800ae82:	d003      	beq.n	800ae8c <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800ae84:	4b7a      	ldr	r3, [pc, #488]	@ (800b070 <BMP_Upkeep+0x274>)
 800ae86:	2202      	movs	r2, #2
 800ae88:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 800ae8a:	e0e8      	b.n	800b05e <BMP_Upkeep+0x262>
      BMPState = BMP_STATE_INIT;
 800ae8c:	4b78      	ldr	r3, [pc, #480]	@ (800b070 <BMP_Upkeep+0x274>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	701a      	strb	r2, [r3, #0]
  break;
 800ae92:	e0e4      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 800ae94:	f001 fef4 	bl	800cc80 <getSensorLock>
 800ae98:	1e03      	subs	r3, r0, #0
 800ae9a:	d035      	beq.n	800af08 <BMP_Upkeep+0x10c>
 800ae9c:	f001 fef0 	bl	800cc80 <getSensorLock>
 800aea0:	0003      	movs	r3, r0
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	d030      	beq.n	800af08 <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 800aea6:	1dfc      	adds	r4, r7, #7
 800aea8:	f001 feea 	bl	800cc80 <getSensorLock>
 800aeac:	0003      	movs	r3, r0
 800aeae:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800aeb0:	1dfb      	adds	r3, r7, #7
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d019      	beq.n	800aeec <BMP_Upkeep+0xf0>
 800aeb8:	1dfb      	adds	r3, r7, #7
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d013      	beq.n	800aee8 <BMP_Upkeep+0xec>
 800aec0:	1dfb      	adds	r3, r7, #7
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d00d      	beq.n	800aee4 <BMP_Upkeep+0xe8>
 800aec8:	1dfb      	adds	r3, r7, #7
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b03      	cmp	r3, #3
 800aece:	d007      	beq.n	800aee0 <BMP_Upkeep+0xe4>
 800aed0:	1dfb      	adds	r3, r7, #7
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b04      	cmp	r3, #4
 800aed6:	d101      	bne.n	800aedc <BMP_Upkeep+0xe0>
 800aed8:	4b6a      	ldr	r3, [pc, #424]	@ (800b084 <BMP_Upkeep+0x288>)
 800aeda:	e008      	b.n	800aeee <BMP_Upkeep+0xf2>
 800aedc:	4b6a      	ldr	r3, [pc, #424]	@ (800b088 <BMP_Upkeep+0x28c>)
 800aede:	e006      	b.n	800aeee <BMP_Upkeep+0xf2>
 800aee0:	4b6a      	ldr	r3, [pc, #424]	@ (800b08c <BMP_Upkeep+0x290>)
 800aee2:	e004      	b.n	800aeee <BMP_Upkeep+0xf2>
 800aee4:	4b6a      	ldr	r3, [pc, #424]	@ (800b090 <BMP_Upkeep+0x294>)
 800aee6:	e002      	b.n	800aeee <BMP_Upkeep+0xf2>
 800aee8:	4b6a      	ldr	r3, [pc, #424]	@ (800b094 <BMP_Upkeep+0x298>)
 800aeea:	e000      	b.n	800aeee <BMP_Upkeep+0xf2>
 800aeec:	4b6a      	ldr	r3, [pc, #424]	@ (800b098 <BMP_Upkeep+0x29c>)
 800aeee:	4a6b      	ldr	r2, [pc, #428]	@ (800b09c <BMP_Upkeep+0x2a0>)
 800aef0:	4962      	ldr	r1, [pc, #392]	@ (800b07c <BMP_Upkeep+0x280>)
 800aef2:	2003      	movs	r0, #3
 800aef4:	f007 fde4 	bl	8012ac0 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800aef8:	f008 fb18 	bl	801352c <HAL_GetTick>
 800aefc:	0003      	movs	r3, r0
 800aefe:	3361      	adds	r3, #97	@ 0x61
 800af00:	001a      	movs	r2, r3
 800af02:	4b5a      	ldr	r3, [pc, #360]	@ (800b06c <BMP_Upkeep+0x270>)
 800af04:	601a      	str	r2, [r3, #0]
      break;
 800af06:	e0aa      	b.n	800b05e <BMP_Upkeep+0x262>
    }
    if (getSensorLock() == FREE) {
 800af08:	f001 feba 	bl	800cc80 <getSensorLock>
 800af0c:	1e03      	subs	r3, r0, #0
 800af0e:	d105      	bne.n	800af1c <BMP_Upkeep+0x120>
      HAL_Delay(10);
 800af10:	200a      	movs	r0, #10
 800af12:	f008 fb15 	bl	8013540 <HAL_Delay>
      setSensorLock(BMP280);
 800af16:	2004      	movs	r0, #4
 800af18:	f001 fe9e 	bl	800cc58 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800af1c:	f7ff fd70 	bl	800aa00 <BMP280_set_mode>
 800af20:	1e03      	subs	r3, r0, #0
 800af22:	d003      	beq.n	800af2c <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800af24:	4b52      	ldr	r3, [pc, #328]	@ (800b070 <BMP_Upkeep+0x274>)
 800af26:	2205      	movs	r2, #5
 800af28:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 800af2a:	e098      	b.n	800b05e <BMP_Upkeep+0x262>
      Error("Error while setting BMP280 to forced mode");
 800af2c:	4a5c      	ldr	r2, [pc, #368]	@ (800b0a0 <BMP_Upkeep+0x2a4>)
 800af2e:	4b5d      	ldr	r3, [pc, #372]	@ (800b0a4 <BMP_Upkeep+0x2a8>)
 800af30:	0019      	movs	r1, r3
 800af32:	2001      	movs	r0, #1
 800af34:	f007 fdc4 	bl	8012ac0 <CreateLine>
      BMPState = BMP_STATE_INIT ;
 800af38:	4b4d      	ldr	r3, [pc, #308]	@ (800b070 <BMP_Upkeep+0x274>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
    break;
 800af3e:	e08e      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 800af40:	f7ff fdde 	bl	800ab00 <BMP280_get_measurement_values>
 800af44:	1e03      	subs	r3, r0, #0
 800af46:	d006      	beq.n	800af56 <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 800af48:	2000      	movs	r0, #0
 800af4a:	f001 fe85 	bl	800cc58 <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800af4e:	4b48      	ldr	r3, [pc, #288]	@ (800b070 <BMP_Upkeep+0x274>)
 800af50:	2203      	movs	r2, #3
 800af52:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 800af54:	e083      	b.n	800b05e <BMP_Upkeep+0x262>
      BMPState = BMP_STATE_INIT;
 800af56:	4b46      	ldr	r3, [pc, #280]	@ (800b070 <BMP_Upkeep+0x274>)
 800af58:	2200      	movs	r2, #0
 800af5a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 800af5c:	4a52      	ldr	r2, [pc, #328]	@ (800b0a8 <BMP_Upkeep+0x2ac>)
 800af5e:	4b51      	ldr	r3, [pc, #324]	@ (800b0a4 <BMP_Upkeep+0x2a8>)
 800af60:	0019      	movs	r1, r3
 800af62:	2001      	movs	r0, #1
 800af64:	f007 fdac 	bl	8012ac0 <CreateLine>
  break;
 800af68:	e079      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800af6a:	f7ff fe53 	bl	800ac14 <BMP280_calc_temperature>
 800af6e:	1c03      	adds	r3, r0, #0
 800af70:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800af72:	f7ff fe97 	bl	800aca4 <BMP280_calc_pressure>
 800af76:	1c03      	adds	r3, r0, #0
 800af78:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800af7a:	494c      	ldr	r1, [pc, #304]	@ (800b0ac <BMP_Upkeep+0x2b0>)
 800af7c:	68b8      	ldr	r0, [r7, #8]
 800af7e:	f7f5 faeb 	bl	8000558 <__aeabi_fcmpgt>
 800af82:	1e03      	subs	r3, r0, #0
 800af84:	d02b      	beq.n	800afde <BMP_Upkeep+0x1e2>
 800af86:	494a      	ldr	r1, [pc, #296]	@ (800b0b0 <BMP_Upkeep+0x2b4>)
 800af88:	68b8      	ldr	r0, [r7, #8]
 800af8a:	f7f5 fad1 	bl	8000530 <__aeabi_fcmplt>
 800af8e:	1e03      	subs	r3, r0, #0
 800af90:	d025      	beq.n	800afde <BMP_Upkeep+0x1e2>
      sethPa(airhpa);
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	1c18      	adds	r0, r3, #0
 800af96:	f7f9 fbd7 	bl	8004748 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7f8 fa62 	bl	8003464 <__aeabi_f2d>
 800afa0:	0004      	movs	r4, r0
 800afa2:	000d      	movs	r5, r1
 800afa4:	68b8      	ldr	r0, [r7, #8]
 800afa6:	f7f8 fa5d 	bl	8003464 <__aeabi_f2d>
 800afaa:	0002      	movs	r2, r0
 800afac:	000b      	movs	r3, r1
 800afae:	4841      	ldr	r0, [pc, #260]	@ (800b0b4 <BMP_Upkeep+0x2b8>)
 800afb0:	4941      	ldr	r1, [pc, #260]	@ (800b0b8 <BMP_Upkeep+0x2bc>)
 800afb2:	9202      	str	r2, [sp, #8]
 800afb4:	9303      	str	r3, [sp, #12]
 800afb6:	9400      	str	r4, [sp, #0]
 800afb8:	9501      	str	r5, [sp, #4]
 800afba:	0002      	movs	r2, r0
 800afbc:	2002      	movs	r0, #2
 800afbe:	f007 fd7f 	bl	8012ac0 <CreateLine>
      setBMP280(airtemp, airhpa);
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	1c11      	adds	r1, r2, #0
 800afc8:	1c18      	adds	r0, r3, #0
 800afca:	f7f9 fb59 	bl	8004680 <setBMP280>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800afce:	f008 faad 	bl	801352c <HAL_GetTick>
 800afd2:	0003      	movs	r3, r0
 800afd4:	4a39      	ldr	r2, [pc, #228]	@ (800b0bc <BMP_Upkeep+0x2c0>)
 800afd6:	189a      	adds	r2, r3, r2
 800afd8:	4b24      	ldr	r3, [pc, #144]	@ (800b06c <BMP_Upkeep+0x270>)
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	e00c      	b.n	800aff8 <BMP_Upkeep+0x1fc>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800afde:	4a38      	ldr	r2, [pc, #224]	@ (800b0c0 <BMP_Upkeep+0x2c4>)
 800afe0:	4b30      	ldr	r3, [pc, #192]	@ (800b0a4 <BMP_Upkeep+0x2a8>)
 800afe2:	0019      	movs	r1, r3
 800afe4:	2001      	movs	r0, #1
 800afe6:	f007 fd6b 	bl	8012ac0 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800afea:	f008 fa9f 	bl	801352c <HAL_GetTick>
 800afee:	0003      	movs	r3, r0
 800aff0:	4a34      	ldr	r2, [pc, #208]	@ (800b0c4 <BMP_Upkeep+0x2c8>)
 800aff2:	189a      	adds	r2, r3, r2
 800aff4:	4b1d      	ldr	r3, [pc, #116]	@ (800b06c <BMP_Upkeep+0x270>)
 800aff6:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800aff8:	4b1d      	ldr	r3, [pc, #116]	@ (800b070 <BMP_Upkeep+0x274>)
 800affa:	2208      	movs	r2, #8
 800affc:	701a      	strb	r2, [r3, #0]
    break;
 800affe:	e02e      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b000:	4b1b      	ldr	r3, [pc, #108]	@ (800b070 <BMP_Upkeep+0x274>)
 800b002:	2209      	movs	r2, #9
 800b004:	701a      	strb	r2, [r3, #0]
    break;
 800b006:	e02a      	b.n	800b05e <BMP_Upkeep+0x262>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b008:	f001 fe3a 	bl	800cc80 <getSensorLock>
 800b00c:	1e03      	subs	r3, r0, #0
 800b00e:	d123      	bne.n	800b058 <BMP_Upkeep+0x25c>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b010:	f7ff fd4a 	bl	800aaa8 <BMP280_get_mode>
 800b014:	0003      	movs	r3, r0
 800b016:	2b03      	cmp	r3, #3
 800b018:	d103      	bne.n	800b022 <BMP_Upkeep+0x226>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b01a:	4b15      	ldr	r3, [pc, #84]	@ (800b070 <BMP_Upkeep+0x274>)
 800b01c:	2205      	movs	r2, #5
 800b01e:	701a      	strb	r2, [r3, #0]
 800b020:	e002      	b.n	800b028 <BMP_Upkeep+0x22c>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b022:	4b13      	ldr	r3, [pc, #76]	@ (800b070 <BMP_Upkeep+0x274>)
 800b024:	2202      	movs	r2, #2
 800b026:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b028:	f008 fa80 	bl	801352c <HAL_GetTick>
 800b02c:	0003      	movs	r3, r0
 800b02e:	3317      	adds	r3, #23
 800b030:	001a      	movs	r2, r3
 800b032:	4b0e      	ldr	r3, [pc, #56]	@ (800b06c <BMP_Upkeep+0x270>)
 800b034:	601a      	str	r2, [r3, #0]
    break;
 800b036:	e012      	b.n	800b05e <BMP_Upkeep+0x262>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b038:	4b0d      	ldr	r3, [pc, #52]	@ (800b070 <BMP_Upkeep+0x274>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 800b03e:	f001 fe1f 	bl	800cc80 <getSensorLock>
 800b042:	0003      	movs	r3, r0
 800b044:	2b04      	cmp	r3, #4
 800b046:	d009      	beq.n	800b05c <BMP_Upkeep+0x260>
      setSensorLock(FREE);
 800b048:	2000      	movs	r0, #0
 800b04a:	f001 fe05 	bl	800cc58 <setSensorLock>
    }
    break;
 800b04e:	e005      	b.n	800b05c <BMP_Upkeep+0x260>
      break;
 800b050:	46c0      	nop			@ (mov r8, r8)
 800b052:	e004      	b.n	800b05e <BMP_Upkeep+0x262>
      break;
 800b054:	46c0      	nop			@ (mov r8, r8)
 800b056:	e002      	b.n	800b05e <BMP_Upkeep+0x262>
      break;
 800b058:	46c0      	nop			@ (mov r8, r8)
 800b05a:	e000      	b.n	800b05e <BMP_Upkeep+0x262>
    break;
 800b05c:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <BMP_Upkeep+0x274>)
 800b060:	781b      	ldrb	r3, [r3, #0]
}
 800b062:	0018      	movs	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	b004      	add	sp, #16
 800b068:	bdb0      	pop	{r4, r5, r7, pc}
 800b06a:	46c0      	nop			@ (mov r8, r8)
 800b06c:	20000c40 	.word	0x20000c40
 800b070:	20000096 	.word	0x20000096
 800b074:	0802d118 	.word	0x0802d118
 800b078:	0802b794 	.word	0x0802b794
 800b07c:	0802b364 	.word	0x0802b364
 800b080:	002f9b80 	.word	0x002f9b80
 800b084:	0802b7d0 	.word	0x0802b7d0
 800b088:	0802b7d8 	.word	0x0802b7d8
 800b08c:	0802b7e0 	.word	0x0802b7e0
 800b090:	0802b7e8 	.word	0x0802b7e8
 800b094:	0802b7f0 	.word	0x0802b7f0
 800b098:	0802b7f8 	.word	0x0802b7f8
 800b09c:	0802b800 	.word	0x0802b800
 800b0a0:	0802b828 	.word	0x0802b828
 800b0a4:	0802b654 	.word	0x0802b654
 800b0a8:	0802b854 	.word	0x0802b854
 800b0ac:	44548000 	.word	0x44548000
 800b0b0:	44898000 	.word	0x44898000
 800b0b4:	0802b88c 	.word	0x0802b88c
 800b0b8:	0802b344 	.word	0x0802b344
 800b0bc:	0000ea60 	.word	0x0000ea60
 800b0c0:	0802b8c4 	.word	0x0802b8c4
 800b0c4:	00002710 	.word	0x00002710

0800b0c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b0ce:	4b10      	ldr	r3, [pc, #64]	@ (800b110 <MX_DMA_Init+0x48>)
 800b0d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b110 <MX_DMA_Init+0x48>)
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0da:	4b0d      	ldr	r3, [pc, #52]	@ (800b110 <MX_DMA_Init+0x48>)
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	607b      	str	r3, [r7, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	200a      	movs	r0, #10
 800b0ec:	f008 fec2 	bl	8013e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b0f0:	200a      	movs	r0, #10
 800b0f2:	f008 fed4 	bl	8013e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2103      	movs	r1, #3
 800b0fa:	200b      	movs	r0, #11
 800b0fc:	f008 feba 	bl	8013e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b100:	200b      	movs	r0, #11
 800b102:	f008 fecc 	bl	8013e9e <HAL_NVIC_EnableIRQ>

}
 800b106:	46c0      	nop			@ (mov r8, r8)
 800b108:	46bd      	mov	sp, r7
 800b10a:	b002      	add	sp, #8
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	40021000 	.word	0x40021000

0800b114 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	1dbb      	adds	r3, r7, #6
 800b120:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b122:	4b17      	ldr	r3, [pc, #92]	@ (800b180 <WriteUint8ArrayEeprom+0x6c>)
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b128:	f009 fa36 	bl	8014598 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b12c:	2316      	movs	r3, #22
 800b12e:	18fb      	adds	r3, r7, r3
 800b130:	2200      	movs	r2, #0
 800b132:	801a      	strh	r2, [r3, #0]
 800b134:	e015      	b.n	800b162 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b136:	4b12      	ldr	r3, [pc, #72]	@ (800b180 <WriteUint8ArrayEeprom+0x6c>)
 800b138:	6819      	ldr	r1, [r3, #0]
 800b13a:	2416      	movs	r4, #22
 800b13c:	193b      	adds	r3, r7, r4
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	18d3      	adds	r3, r2, r3
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	001a      	movs	r2, r3
 800b148:	2000      	movs	r0, #0
 800b14a:	f009 fa8d 	bl	8014668 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b14e:	4b0c      	ldr	r3, [pc, #48]	@ (800b180 <WriteUint8ArrayEeprom+0x6c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	4b0a      	ldr	r3, [pc, #40]	@ (800b180 <WriteUint8ArrayEeprom+0x6c>)
 800b156:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b158:	193b      	adds	r3, r7, r4
 800b15a:	881a      	ldrh	r2, [r3, #0]
 800b15c:	193b      	adds	r3, r7, r4
 800b15e:	3201      	adds	r2, #1
 800b160:	801a      	strh	r2, [r3, #0]
 800b162:	2316      	movs	r3, #22
 800b164:	18fa      	adds	r2, r7, r3
 800b166:	1dbb      	adds	r3, r7, #6
 800b168:	8812      	ldrh	r2, [r2, #0]
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d3e2      	bcc.n	800b136 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b170:	f009 fa40 	bl	80145f4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b174:	4b02      	ldr	r3, [pc, #8]	@ (800b180 <WriteUint8ArrayEeprom+0x6c>)
 800b176:	681b      	ldr	r3, [r3, #0]
}
 800b178:	0018      	movs	r0, r3
 800b17a:	46bd      	mov	sp, r7
 800b17c:	b007      	add	sp, #28
 800b17e:	bd90      	pop	{r4, r7, pc}
 800b180:	20000c64 	.word	0x20000c64

0800b184 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	0019      	movs	r1, r3
 800b190:	1dbb      	adds	r3, r7, #6
 800b192:	801a      	strh	r2, [r3, #0]
 800b194:	1d3b      	adds	r3, r7, #4
 800b196:	1c0a      	adds	r2, r1, #0
 800b198:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b19a:	1dba      	adds	r2, r7, #6
 800b19c:	1d3b      	adds	r3, r7, #4
 800b19e:	8812      	ldrh	r2, [r2, #0]
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d806      	bhi.n	800b1b4 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b1a6:	1dbb      	adds	r3, r7, #6
 800b1a8:	881a      	ldrh	r2, [r3, #0]
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	f7ff ffb0 	bl	800b114 <WriteUint8ArrayEeprom>
    }
}
 800b1b4:	46c0      	nop			@ (mov r8, r8)
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	b004      	add	sp, #16
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	1dbb      	adds	r3, r7, #6
 800b1c8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b1ca:	2316      	movs	r3, #22
 800b1cc:	18fb      	adds	r3, r7, r3
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	801a      	strh	r2, [r3, #0]
 800b1d2:	e010      	b.n	800b1f6 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b1d4:	2016      	movs	r0, #22
 800b1d6:	183b      	adds	r3, r7, r0
 800b1d8:	881a      	ldrh	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	18d3      	adds	r3, r2, r3
 800b1de:	0019      	movs	r1, r3
 800b1e0:	183b      	adds	r3, r7, r0
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	18d3      	adds	r3, r2, r3
 800b1e8:	780a      	ldrb	r2, [r1, #0]
 800b1ea:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b1ec:	183b      	adds	r3, r7, r0
 800b1ee:	881a      	ldrh	r2, [r3, #0]
 800b1f0:	183b      	adds	r3, r7, r0
 800b1f2:	3201      	adds	r2, #1
 800b1f4:	801a      	strh	r2, [r3, #0]
 800b1f6:	2316      	movs	r3, #22
 800b1f8:	18fa      	adds	r2, r7, r3
 800b1fa:	1dbb      	adds	r3, r7, #6
 800b1fc:	8812      	ldrh	r2, [r2, #0]
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	429a      	cmp	r2, r3
 800b202:	d3e7      	bcc.n	800b1d4 <ReadUint8ArrayEEprom+0x18>
    }
}
 800b204:	46c0      	nop			@ (mov r8, r8)
 800b206:	46c0      	nop			@ (mov r8, r8)
 800b208:	46bd      	mov	sp, r7
 800b20a:	b006      	add	sp, #24
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b20e:	b590      	push	{r4, r7, lr}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	000a      	movs	r2, r1
 800b218:	1cbb      	adds	r3, r7, #2
 800b21a:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b21c:	f009 f9bc 	bl	8014598 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b220:	230e      	movs	r3, #14
 800b222:	18fb      	adds	r3, r7, r3
 800b224:	2200      	movs	r2, #0
 800b226:	801a      	strh	r2, [r3, #0]
 800b228:	e00c      	b.n	800b244 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b22a:	240e      	movs	r4, #14
 800b22c:	193b      	adds	r3, r7, r4
 800b22e:	881a      	ldrh	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	18d3      	adds	r3, r2, r3
 800b234:	0018      	movs	r0, r3
 800b236:	f009 f9eb 	bl	8014610 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b23a:	193b      	adds	r3, r7, r4
 800b23c:	193a      	adds	r2, r7, r4
 800b23e:	8812      	ldrh	r2, [r2, #0]
 800b240:	3204      	adds	r2, #4
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	230e      	movs	r3, #14
 800b246:	18fa      	adds	r2, r7, r3
 800b248:	1cbb      	adds	r3, r7, #2
 800b24a:	8812      	ldrh	r2, [r2, #0]
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d3eb      	bcc.n	800b22a <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b252:	f009 f9cf 	bl	80145f4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b256:	46c0      	nop			@ (mov r8, r8)
 800b258:	46bd      	mov	sp, r7
 800b25a:	b005      	add	sp, #20
 800b25c:	bd90      	pop	{r4, r7, pc}
	...

0800b260 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b270:	d901      	bls.n	800b276 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b272:	237f      	movs	r3, #127	@ 0x7f
 800b274:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b276:	2017      	movs	r0, #23
 800b278:	183b      	adds	r3, r7, r0
 800b27a:	490d      	ldr	r1, [pc, #52]	@ (800b2b0 <accessLUT10log10+0x50>)
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	188a      	adds	r2, r1, r2
 800b280:	7812      	ldrb	r2, [r2, #0]
 800b282:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b284:	0001      	movs	r1, r0
 800b286:	187b      	adds	r3, r7, r1
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2206      	movs	r2, #6
 800b28c:	4113      	asrs	r3, r2
 800b28e:	001a      	movs	r2, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800b294:	187b      	adds	r3, r7, r1
 800b296:	781a      	ldrb	r2, [r3, #0]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2106      	movs	r1, #6
 800b29e:	408b      	lsls	r3, r1
 800b2a0:	1ad2      	subs	r2, r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	601a      	str	r2, [r3, #0]
}
 800b2a6:	46c0      	nop			@ (mov r8, r8)
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	b006      	add	sp, #24
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	46c0      	nop			@ (mov r8, r8)
 800b2b0:	0802d140 	.word	0x0802d140

0800b2b4 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800b2b4:	b5b0      	push	{r4, r5, r7, lr}
 800b2b6:	b090      	sub	sp, #64	@ 0x40
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6138      	str	r0, [r7, #16]
 800b2bc:	6179      	str	r1, [r7, #20]
 800b2be:	60fa      	str	r2, [r7, #12]
 800b2c0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800b2c2:	2308      	movs	r3, #8
 800b2c4:	001a      	movs	r2, r3
 800b2c6:	3a20      	subs	r2, #32
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	db03      	blt.n	800b2d4 <efficient10log10+0x20>
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	4091      	lsls	r1, r2
 800b2d0:	000d      	movs	r5, r1
 800b2d2:	e008      	b.n	800b2e6 <efficient10log10+0x32>
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	2101      	movs	r1, #1
 800b2da:	40d1      	lsrs	r1, r2
 800b2dc:	000a      	movs	r2, r1
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4099      	lsls	r1, r3
 800b2e2:	000d      	movs	r5, r1
 800b2e4:	4315      	orrs	r5, r2
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	409a      	lsls	r2, r3
 800b2ea:	0014      	movs	r4, r2
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	4252      	negs	r2, r2
 800b2f0:	17d3      	asrs	r3, r2, #31
 800b2f2:	1912      	adds	r2, r2, r4
 800b2f4:	416b      	adcs	r3, r5
 800b2f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2f8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800b2fa:	2336      	movs	r3, #54	@ 0x36
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	189b      	adds	r3, r3, r2
 800b300:	19db      	adds	r3, r3, r7
 800b302:	2200      	movs	r2, #0
 800b304:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b306:	e017      	b.n	800b338 <efficient10log10+0x84>
    {
        P = P >> 1;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	07db      	lsls	r3, r3, #31
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	0852      	lsrs	r2, r2, #1
 800b310:	603a      	str	r2, [r7, #0]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	431a      	orrs	r2, r3
 800b316:	603a      	str	r2, [r7, #0]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	607b      	str	r3, [r7, #4]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	687c      	ldr	r4, [r7, #4]
 800b322:	613b      	str	r3, [r7, #16]
 800b324:	617c      	str	r4, [r7, #20]
        bShift++;
 800b326:	2136      	movs	r1, #54	@ 0x36
 800b328:	2008      	movs	r0, #8
 800b32a:	180b      	adds	r3, r1, r0
 800b32c:	19db      	adds	r3, r3, r7
 800b32e:	881a      	ldrh	r2, [r3, #0]
 800b330:	180b      	adds	r3, r1, r0
 800b332:	19db      	adds	r3, r3, r7
 800b334:	3201      	adds	r2, #1
 800b336:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d8e3      	bhi.n	800b308 <efficient10log10+0x54>
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b344:	429a      	cmp	r2, r3
 800b346:	d103      	bne.n	800b350 <efficient10log10+0x9c>
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d8db      	bhi.n	800b308 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	2308      	movs	r3, #8
 800b354:	3b01      	subs	r3, #1
 800b356:	2101      	movs	r1, #1
 800b358:	4099      	lsls	r1, r3
 800b35a:	000b      	movs	r3, r1
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800b368:	231c      	movs	r3, #28
 800b36a:	2408      	movs	r4, #8
 800b36c:	191b      	adds	r3, r3, r4
 800b36e:	19da      	adds	r2, r3, r7
 800b370:	2320      	movs	r3, #32
 800b372:	191b      	adds	r3, r3, r4
 800b374:	19d9      	adds	r1, r3, r7
 800b376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b378:	0018      	movs	r0, r3
 800b37a:	f7ff ff71 	bl	800b260 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b37e:	2215      	movs	r2, #21
 800b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b382:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800b384:	2036      	movs	r0, #54	@ 0x36
 800b386:	1902      	adds	r2, r0, r4
 800b388:	19d2      	adds	r2, r2, r7
 800b38a:	8812      	ldrh	r2, [r2, #0]
 800b38c:	2103      	movs	r1, #3
 800b38e:	434a      	muls	r2, r1
 800b390:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b392:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800b394:	0021      	movs	r1, r4
 800b396:	1843      	adds	r3, r0, r1
 800b398:	19db      	adds	r3, r3, r7
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	2201      	movs	r2, #1
 800b39e:	4353      	muls	r3, r2
 800b3a0:	2203      	movs	r2, #3
 800b3a2:	4113      	asrs	r3, r2
 800b3a4:	001a      	movs	r2, r3
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a8:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800b3aa:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800b3ac:	2314      	movs	r3, #20
 800b3ae:	185b      	adds	r3, r3, r1
 800b3b0:	19da      	adds	r2, r3, r7
 800b3b2:	2318      	movs	r3, #24
 800b3b4:	185b      	adds	r3, r3, r1
 800b3b6:	19db      	adds	r3, r3, r7
 800b3b8:	0011      	movs	r1, r2
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	f000 f80a 	bl	800b3d4 <correctIntFracNumber>
    integerPart[0] = intPart;
 800b3c0:	6a3a      	ldr	r2, [r7, #32]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800b3c6:	69fa      	ldr	r2, [r7, #28]
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	601a      	str	r2, [r3, #0]
}
 800b3cc:	46c0      	nop			@ (mov r8, r8)
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	b010      	add	sp, #64	@ 0x40
 800b3d2:	bdb0      	pop	{r4, r5, r7, pc}

0800b3d4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800b3de:	e00a      	b.n	800b3f6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3b0a      	subs	r3, #10
 800b3f0:	001a      	movs	r2, r3
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b09      	cmp	r3, #9
 800b3fc:	dcf0      	bgt.n	800b3e0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800b3fe:	e00a      	b.n	800b416 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	1e5a      	subs	r2, r3, #1
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	330a      	adds	r3, #10
 800b410:	001a      	movs	r2, r3
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3309      	adds	r3, #9
 800b41c:	dbf0      	blt.n	800b400 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	da0f      	bge.n	800b446 <correctIntFracNumber+0x72>
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	dd0b      	ble.n	800b446 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3b0a      	subs	r3, #10
 800b43e:	001a      	movs	r2, r3
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800b444:	e012      	b.n	800b46c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dd0e      	ble.n	800b46c <correctIntFracNumber+0x98>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	da0a      	bge.n	800b46c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	1e5a      	subs	r2, r3, #1
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	330a      	adds	r3, #10
 800b466:	001a      	movs	r2, r3
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	601a      	str	r2, [r3, #0]
}
 800b46c:	46c0      	nop			@ (mov r8, r8)
 800b46e:	46bd      	mov	sp, r7
 800b470:	b002      	add	sp, #8
 800b472:	bd80      	pop	{r7, pc}

0800b474 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b474:	b590      	push	{r4, r7, lr}
 800b476:	b08b      	sub	sp, #44	@ 0x2c
 800b478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b47a:	2414      	movs	r4, #20
 800b47c:	193b      	adds	r3, r7, r4
 800b47e:	0018      	movs	r0, r3
 800b480:	2314      	movs	r3, #20
 800b482:	001a      	movs	r2, r3
 800b484:	2100      	movs	r1, #0
 800b486:	f019 fd63 	bl	8024f50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b48a:	4b8a      	ldr	r3, [pc, #552]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b48e:	4b89      	ldr	r3, [pc, #548]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b490:	2104      	movs	r1, #4
 800b492:	430a      	orrs	r2, r1
 800b494:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b496:	4b87      	ldr	r3, [pc, #540]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49a:	2204      	movs	r2, #4
 800b49c:	4013      	ands	r3, r2
 800b49e:	613b      	str	r3, [r7, #16]
 800b4a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b4a2:	4b84      	ldr	r3, [pc, #528]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4a6:	4b83      	ldr	r3, [pc, #524]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4a8:	2180      	movs	r1, #128	@ 0x80
 800b4aa:	430a      	orrs	r2, r1
 800b4ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b4ae:	4b81      	ldr	r3, [pc, #516]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b2:	2280      	movs	r2, #128	@ 0x80
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4ba:	4b7e      	ldr	r3, [pc, #504]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4be:	4b7d      	ldr	r3, [pc, #500]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b4c6:	4b7b      	ldr	r3, [pc, #492]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60bb      	str	r3, [r7, #8]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4d2:	4b78      	ldr	r3, [pc, #480]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d6:	4b77      	ldr	r3, [pc, #476]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4d8:	2102      	movs	r1, #2
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b4de:	4b75      	ldr	r3, [pc, #468]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b4ea:	4b72      	ldr	r3, [pc, #456]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ee:	4b71      	ldr	r3, [pc, #452]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4f0:	2108      	movs	r1, #8
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b4f6:	4b6f      	ldr	r3, [pc, #444]	@ (800b6b4 <MX_GPIO_Init+0x240>)
 800b4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4fa:	2208      	movs	r2, #8
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	603b      	str	r3, [r7, #0]
 800b500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800b502:	4b6d      	ldr	r3, [pc, #436]	@ (800b6b8 <MX_GPIO_Init+0x244>)
 800b504:	2201      	movs	r2, #1
 800b506:	2101      	movs	r1, #1
 800b508:	0018      	movs	r0, r3
 800b50a:	f009 faa0 	bl	8014a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800b50e:	4b6a      	ldr	r3, [pc, #424]	@ (800b6b8 <MX_GPIO_Init+0x244>)
 800b510:	2200      	movs	r2, #0
 800b512:	2102      	movs	r1, #2
 800b514:	0018      	movs	r0, r3
 800b516:	f009 fa9a 	bl	8014a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800b51a:	4968      	ldr	r1, [pc, #416]	@ (800b6bc <MX_GPIO_Init+0x248>)
 800b51c:	4b68      	ldr	r3, [pc, #416]	@ (800b6c0 <MX_GPIO_Init+0x24c>)
 800b51e:	2201      	movs	r2, #1
 800b520:	0018      	movs	r0, r3
 800b522:	f009 fa94 	bl	8014a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800b526:	2380      	movs	r3, #128	@ 0x80
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	4866      	ldr	r0, [pc, #408]	@ (800b6c4 <MX_GPIO_Init+0x250>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	0019      	movs	r1, r3
 800b530:	f009 fa8d 	bl	8014a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b534:	2380      	movs	r3, #128	@ 0x80
 800b536:	015b      	lsls	r3, r3, #5
 800b538:	4862      	ldr	r0, [pc, #392]	@ (800b6c4 <MX_GPIO_Init+0x250>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	0019      	movs	r1, r3
 800b53e:	f009 fa86 	bl	8014a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800b542:	193b      	adds	r3, r7, r4
 800b544:	4a60      	ldr	r2, [pc, #384]	@ (800b6c8 <MX_GPIO_Init+0x254>)
 800b546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b548:	193b      	adds	r3, r7, r4
 800b54a:	2203      	movs	r2, #3
 800b54c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b54e:	193b      	adds	r3, r7, r4
 800b550:	2200      	movs	r2, #0
 800b552:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b554:	193b      	adds	r3, r7, r4
 800b556:	4a5b      	ldr	r2, [pc, #364]	@ (800b6c4 <MX_GPIO_Init+0x250>)
 800b558:	0019      	movs	r1, r3
 800b55a:	0010      	movs	r0, r2
 800b55c:	f009 f8dc 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800b560:	193b      	adds	r3, r7, r4
 800b562:	2203      	movs	r2, #3
 800b564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b566:	193b      	adds	r3, r7, r4
 800b568:	2201      	movs	r2, #1
 800b56a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b56c:	193b      	adds	r3, r7, r4
 800b56e:	2200      	movs	r2, #0
 800b570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b572:	193b      	adds	r3, r7, r4
 800b574:	2200      	movs	r2, #0
 800b576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b578:	193b      	adds	r3, r7, r4
 800b57a:	4a4f      	ldr	r2, [pc, #316]	@ (800b6b8 <MX_GPIO_Init+0x244>)
 800b57c:	0019      	movs	r1, r3
 800b57e:	0010      	movs	r0, r2
 800b580:	f009 f8ca 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800b584:	193b      	adds	r3, r7, r4
 800b586:	2270      	movs	r2, #112	@ 0x70
 800b588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b58a:	193b      	adds	r3, r7, r4
 800b58c:	2203      	movs	r2, #3
 800b58e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b590:	193b      	adds	r3, r7, r4
 800b592:	2200      	movs	r2, #0
 800b594:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b596:	193a      	adds	r2, r7, r4
 800b598:	23a0      	movs	r3, #160	@ 0xa0
 800b59a:	05db      	lsls	r3, r3, #23
 800b59c:	0011      	movs	r1, r2
 800b59e:	0018      	movs	r0, r3
 800b5a0:	f009 f8ba 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800b5a4:	193b      	adds	r3, r7, r4
 800b5a6:	22c0      	movs	r2, #192	@ 0xc0
 800b5a8:	0052      	lsls	r2, r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b5ac:	193b      	adds	r3, r7, r4
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b2:	193b      	adds	r3, r7, r4
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5b8:	193a      	adds	r2, r7, r4
 800b5ba:	23a0      	movs	r3, #160	@ 0xa0
 800b5bc:	05db      	lsls	r3, r3, #23
 800b5be:	0011      	movs	r1, r2
 800b5c0:	0018      	movs	r0, r3
 800b5c2:	f009 f8a9 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800b5c6:	193b      	adds	r3, r7, r4
 800b5c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b6bc <MX_GPIO_Init+0x248>)
 800b5ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5cc:	193b      	adds	r3, r7, r4
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d2:	193b      	adds	r3, r7, r4
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5d8:	193b      	adds	r3, r7, r4
 800b5da:	2200      	movs	r2, #0
 800b5dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5de:	193b      	adds	r3, r7, r4
 800b5e0:	4a37      	ldr	r2, [pc, #220]	@ (800b6c0 <MX_GPIO_Init+0x24c>)
 800b5e2:	0019      	movs	r1, r3
 800b5e4:	0010      	movs	r0, r2
 800b5e6:	f009 f897 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800b5ea:	193b      	adds	r3, r7, r4
 800b5ec:	4a37      	ldr	r2, [pc, #220]	@ (800b6cc <MX_GPIO_Init+0x258>)
 800b5ee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5f0:	193b      	adds	r3, r7, r4
 800b5f2:	2203      	movs	r2, #3
 800b5f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f6:	193b      	adds	r3, r7, r4
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5fc:	193b      	adds	r3, r7, r4
 800b5fe:	4a30      	ldr	r2, [pc, #192]	@ (800b6c0 <MX_GPIO_Init+0x24c>)
 800b600:	0019      	movs	r1, r3
 800b602:	0010      	movs	r0, r2
 800b604:	f009 f888 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800b608:	0021      	movs	r1, r4
 800b60a:	187b      	adds	r3, r7, r1
 800b60c:	2280      	movs	r2, #128	@ 0x80
 800b60e:	0092      	lsls	r2, r2, #2
 800b610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b612:	000c      	movs	r4, r1
 800b614:	193b      	adds	r3, r7, r4
 800b616:	2200      	movs	r2, #0
 800b618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b61a:	193b      	adds	r3, r7, r4
 800b61c:	2200      	movs	r2, #0
 800b61e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800b620:	193b      	adds	r3, r7, r4
 800b622:	4a28      	ldr	r2, [pc, #160]	@ (800b6c4 <MX_GPIO_Init+0x250>)
 800b624:	0019      	movs	r1, r3
 800b626:	0010      	movs	r0, r2
 800b628:	f009 f876 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800b62c:	193b      	adds	r3, r7, r4
 800b62e:	2280      	movs	r2, #128	@ 0x80
 800b630:	0212      	lsls	r2, r2, #8
 800b632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b634:	193b      	adds	r3, r7, r4
 800b636:	2288      	movs	r2, #136	@ 0x88
 800b638:	0352      	lsls	r2, r2, #13
 800b63a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b63c:	193b      	adds	r3, r7, r4
 800b63e:	2200      	movs	r2, #0
 800b640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800b642:	193a      	adds	r2, r7, r4
 800b644:	23a0      	movs	r3, #160	@ 0xa0
 800b646:	05db      	lsls	r3, r3, #23
 800b648:	0011      	movs	r1, r2
 800b64a:	0018      	movs	r0, r3
 800b64c:	f009 f864 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800b650:	0021      	movs	r1, r4
 800b652:	187b      	adds	r3, r7, r1
 800b654:	22c0      	movs	r2, #192	@ 0xc0
 800b656:	0152      	lsls	r2, r2, #5
 800b658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b65a:	000c      	movs	r4, r1
 800b65c:	193b      	adds	r3, r7, r4
 800b65e:	2201      	movs	r2, #1
 800b660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b662:	193b      	adds	r3, r7, r4
 800b664:	2200      	movs	r2, #0
 800b666:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b668:	193b      	adds	r3, r7, r4
 800b66a:	2200      	movs	r2, #0
 800b66c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b66e:	193b      	adds	r3, r7, r4
 800b670:	4a14      	ldr	r2, [pc, #80]	@ (800b6c4 <MX_GPIO_Init+0x250>)
 800b672:	0019      	movs	r1, r3
 800b674:	0010      	movs	r0, r2
 800b676:	f009 f84f 	bl	8014718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800b67a:	0021      	movs	r1, r4
 800b67c:	187b      	adds	r3, r7, r1
 800b67e:	2204      	movs	r2, #4
 800b680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b682:	187b      	adds	r3, r7, r1
 800b684:	2200      	movs	r2, #0
 800b686:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b688:	187b      	adds	r3, r7, r1
 800b68a:	2201      	movs	r2, #1
 800b68c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800b68e:	187b      	adds	r3, r7, r1
 800b690:	4a0f      	ldr	r2, [pc, #60]	@ (800b6d0 <MX_GPIO_Init+0x25c>)
 800b692:	0019      	movs	r1, r3
 800b694:	0010      	movs	r0, r2
 800b696:	f009 f83f 	bl	8014718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800b69a:	2200      	movs	r2, #0
 800b69c:	2100      	movs	r1, #0
 800b69e:	2007      	movs	r0, #7
 800b6a0:	f008 fbe8 	bl	8013e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800b6a4:	2007      	movs	r0, #7
 800b6a6:	f008 fbfa 	bl	8013e9e <HAL_NVIC_EnableIRQ>

}
 800b6aa:	46c0      	nop			@ (mov r8, r8)
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b00b      	add	sp, #44	@ 0x2c
 800b6b0:	bd90      	pop	{r4, r7, pc}
 800b6b2:	46c0      	nop			@ (mov r8, r8)
 800b6b4:	40021000 	.word	0x40021000
 800b6b8:	50001c00 	.word	0x50001c00
 800b6bc:	00000301 	.word	0x00000301
 800b6c0:	50000400 	.word	0x50000400
 800b6c4:	50000800 	.word	0x50000800
 800b6c8:	0000200c 	.word	0x0000200c
 800b6cc:	0000403e 	.word	0x0000403e
 800b6d0:	50000c00 	.word	0x50000c00

0800b6d4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	f010 f826 	bl	801b734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2108      	movs	r1, #8
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	f010 f821 	bl	801b734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	210c      	movs	r1, #12
 800b6f6:	0018      	movs	r0, r3
 800b6f8:	f010 f81c 	bl	801b734 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800b6fc:	2380      	movs	r3, #128	@ 0x80
 800b6fe:	05db      	lsls	r3, r3, #23
 800b700:	22fa      	movs	r2, #250	@ 0xfa
 800b702:	0112      	lsls	r2, r2, #4
 800b704:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800b706:	2380      	movs	r3, #128	@ 0x80
 800b708:	05db      	lsls	r3, r3, #23
 800b70a:	22fa      	movs	r2, #250	@ 0xfa
 800b70c:	0112      	lsls	r2, r2, #4
 800b70e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800b710:	2380      	movs	r3, #128	@ 0x80
 800b712:	05db      	lsls	r3, r3, #23
 800b714:	22fa      	movs	r2, #250	@ 0xfa
 800b716:	0112      	lsls	r2, r2, #4
 800b718:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800b71a:	2380      	movs	r3, #128	@ 0x80
 800b71c:	05db      	lsls	r3, r3, #23
 800b71e:	22fa      	movs	r2, #250	@ 0xfa
 800b720:	0112      	lsls	r2, r2, #4
 800b722:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2100      	movs	r1, #0
 800b728:	0018      	movs	r0, r3
 800b72a:	f010 f803 	bl	801b734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2104      	movs	r1, #4
 800b732:	0018      	movs	r0, r3
 800b734:	f00f fffe 	bl	801b734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2108      	movs	r1, #8
 800b73c:	0018      	movs	r0, r3
 800b73e:	f00f fff9 	bl	801b734 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800b742:	4b0a      	ldr	r3, [pc, #40]	@ (800b76c <GPIO_InitPWMLEDs+0x98>)
 800b744:	22fa      	movs	r2, #250	@ 0xfa
 800b746:	0112      	lsls	r2, r2, #4
 800b748:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800b74a:	4b08      	ldr	r3, [pc, #32]	@ (800b76c <GPIO_InitPWMLEDs+0x98>)
 800b74c:	22fa      	movs	r2, #250	@ 0xfa
 800b74e:	0112      	lsls	r2, r2, #4
 800b750:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800b752:	4b06      	ldr	r3, [pc, #24]	@ (800b76c <GPIO_InitPWMLEDs+0x98>)
 800b754:	22fa      	movs	r2, #250	@ 0xfa
 800b756:	0112      	lsls	r2, r2, #4
 800b758:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800b75a:	4b04      	ldr	r3, [pc, #16]	@ (800b76c <GPIO_InitPWMLEDs+0x98>)
 800b75c:	22fa      	movs	r2, #250	@ 0xfa
 800b75e:	0112      	lsls	r2, r2, #4
 800b760:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b762:	46c0      	nop			@ (mov r8, r8)
 800b764:	46bd      	mov	sp, r7
 800b766:	b002      	add	sp, #8
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	46c0      	nop			@ (mov r8, r8)
 800b76c:	40000400 	.word	0x40000400

0800b770 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b776:	1d3b      	adds	r3, r7, #4
 800b778:	0018      	movs	r0, r3
 800b77a:	2314      	movs	r3, #20
 800b77c:	001a      	movs	r2, r3
 800b77e:	2100      	movs	r1, #0
 800b780:	f019 fbe6 	bl	8024f50 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800b784:	1d3b      	adds	r3, r7, #4
 800b786:	2205      	movs	r2, #5
 800b788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b78a:	1d3b      	adds	r3, r7, #4
 800b78c:	2203      	movs	r2, #3
 800b78e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b790:	1d3b      	adds	r3, r7, #4
 800b792:	2200      	movs	r2, #0
 800b794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b796:	1d3a      	adds	r2, r7, #4
 800b798:	23a0      	movs	r3, #160	@ 0xa0
 800b79a:	05db      	lsls	r3, r3, #23
 800b79c:	0011      	movs	r1, r2
 800b79e:	0018      	movs	r0, r3
 800b7a0:	f008 ffba 	bl	8014718 <HAL_GPIO_Init>
}
 800b7a4:	46c0      	nop			@ (mov r8, r8)
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	b006      	add	sp, #24
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b7b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b824 <MX_I2C1_Init+0x78>)
 800b7b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800b7b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b828 <MX_I2C1_Init+0x7c>)
 800b7ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b7bc:	4b18      	ldr	r3, [pc, #96]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b7c2:	4b17      	ldr	r3, [pc, #92]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b7c8:	4b15      	ldr	r3, [pc, #84]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b7ce:	4b14      	ldr	r3, [pc, #80]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b7d4:	4b12      	ldr	r3, [pc, #72]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b7da:	4b11      	ldr	r3, [pc, #68]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f009 f969 	bl	8014ac0 <HAL_I2C_Init>
 800b7ee:	1e03      	subs	r3, r0, #0
 800b7f0:	d001      	beq.n	800b7f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b7f2:	f000 fd9d 	bl	800c330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f00b ffd2 	bl	80177a4 <HAL_I2CEx_ConfigAnalogFilter>
 800b800:	1e03      	subs	r3, r0, #0
 800b802:	d001      	beq.n	800b808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b804:	f000 fd94 	bl	800c330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b808:	4b05      	ldr	r3, [pc, #20]	@ (800b820 <MX_I2C1_Init+0x74>)
 800b80a:	2100      	movs	r1, #0
 800b80c:	0018      	movs	r0, r3
 800b80e:	f00c f815 	bl	801783c <HAL_I2CEx_ConfigDigitalFilter>
 800b812:	1e03      	subs	r3, r0, #0
 800b814:	d001      	beq.n	800b81a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b816:	f000 fd8b 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b81a:	46c0      	nop			@ (mov r8, r8)
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	20000c68 	.word	0x20000c68
 800b824:	40005400 	.word	0x40005400
 800b828:	00503d58 	.word	0x00503d58

0800b82c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800b830:	4b1b      	ldr	r3, [pc, #108]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b832:	4a1c      	ldr	r2, [pc, #112]	@ (800b8a4 <MX_I2C2_Init+0x78>)
 800b834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800b836:	4b1a      	ldr	r3, [pc, #104]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b838:	4a1b      	ldr	r2, [pc, #108]	@ (800b8a8 <MX_I2C2_Init+0x7c>)
 800b83a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b83c:	4b18      	ldr	r3, [pc, #96]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b83e:	2200      	movs	r2, #0
 800b840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b842:	4b17      	ldr	r3, [pc, #92]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b844:	2201      	movs	r2, #1
 800b846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b848:	4b15      	ldr	r3, [pc, #84]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b84e:	4b14      	ldr	r3, [pc, #80]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b850:	2200      	movs	r2, #0
 800b852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b854:	4b12      	ldr	r3, [pc, #72]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b856:	2200      	movs	r2, #0
 800b858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b85a:	4b11      	ldr	r3, [pc, #68]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b860:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b862:	2200      	movs	r2, #0
 800b864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b866:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b868:	0018      	movs	r0, r3
 800b86a:	f009 f929 	bl	8014ac0 <HAL_I2C_Init>
 800b86e:	1e03      	subs	r3, r0, #0
 800b870:	d001      	beq.n	800b876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b872:	f000 fd5d 	bl	800c330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b876:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b878:	2100      	movs	r1, #0
 800b87a:	0018      	movs	r0, r3
 800b87c:	f00b ff92 	bl	80177a4 <HAL_I2CEx_ConfigAnalogFilter>
 800b880:	1e03      	subs	r3, r0, #0
 800b882:	d001      	beq.n	800b888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b884:	f000 fd54 	bl	800c330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b888:	4b05      	ldr	r3, [pc, #20]	@ (800b8a0 <MX_I2C2_Init+0x74>)
 800b88a:	2100      	movs	r1, #0
 800b88c:	0018      	movs	r0, r3
 800b88e:	f00b ffd5 	bl	801783c <HAL_I2CEx_ConfigDigitalFilter>
 800b892:	1e03      	subs	r3, r0, #0
 800b894:	d001      	beq.n	800b89a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b896:	f000 fd4b 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800b89a:	46c0      	nop			@ (mov r8, r8)
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20000cbc 	.word	0x20000cbc
 800b8a4:	40005800 	.word	0x40005800
 800b8a8:	00503d58 	.word	0x00503d58

0800b8ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b08b      	sub	sp, #44	@ 0x2c
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8b4:	2414      	movs	r4, #20
 800b8b6:	193b      	adds	r3, r7, r4
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	2314      	movs	r3, #20
 800b8bc:	001a      	movs	r2, r3
 800b8be:	2100      	movs	r1, #0
 800b8c0:	f019 fb46 	bl	8024f50 <memset>
  if(i2cHandle->Instance==I2C1)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a5d      	ldr	r2, [pc, #372]	@ (800ba40 <HAL_I2C_MspInit+0x194>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d000      	beq.n	800b8d0 <HAL_I2C_MspInit+0x24>
 800b8ce:	e083      	b.n	800b9d8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8d0:	4b5c      	ldr	r3, [pc, #368]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d4:	4b5b      	ldr	r3, [pc, #364]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b8d6:	2102      	movs	r1, #2
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b8dc:	4b59      	ldr	r3, [pc, #356]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	613b      	str	r3, [r7, #16]
 800b8e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b8e8:	0021      	movs	r1, r4
 800b8ea:	187b      	adds	r3, r7, r1
 800b8ec:	22c0      	movs	r2, #192	@ 0xc0
 800b8ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b8f0:	187b      	adds	r3, r7, r1
 800b8f2:	2212      	movs	r2, #18
 800b8f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f6:	187b      	adds	r3, r7, r1
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8fc:	187b      	adds	r3, r7, r1
 800b8fe:	2203      	movs	r2, #3
 800b900:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800b902:	187b      	adds	r3, r7, r1
 800b904:	2201      	movs	r2, #1
 800b906:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b908:	187b      	adds	r3, r7, r1
 800b90a:	4a4f      	ldr	r2, [pc, #316]	@ (800ba48 <HAL_I2C_MspInit+0x19c>)
 800b90c:	0019      	movs	r1, r3
 800b90e:	0010      	movs	r0, r2
 800b910:	f008 ff02 	bl	8014718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b914:	4b4b      	ldr	r3, [pc, #300]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b918:	4b4a      	ldr	r3, [pc, #296]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b91a:	2180      	movs	r1, #128	@ 0x80
 800b91c:	0389      	lsls	r1, r1, #14
 800b91e:	430a      	orrs	r2, r1
 800b920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800b922:	4b4a      	ldr	r3, [pc, #296]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b924:	4a4a      	ldr	r2, [pc, #296]	@ (800ba50 <HAL_I2C_MspInit+0x1a4>)
 800b926:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800b928:	4b48      	ldr	r3, [pc, #288]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b92a:	2206      	movs	r2, #6
 800b92c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b92e:	4b47      	ldr	r3, [pc, #284]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b930:	2200      	movs	r2, #0
 800b932:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b934:	4b45      	ldr	r3, [pc, #276]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b936:	2200      	movs	r2, #0
 800b938:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b93a:	4b44      	ldr	r3, [pc, #272]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b93c:	2280      	movs	r2, #128	@ 0x80
 800b93e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b940:	4b42      	ldr	r3, [pc, #264]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b942:	2200      	movs	r2, #0
 800b944:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b946:	4b41      	ldr	r3, [pc, #260]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b948:	2200      	movs	r2, #0
 800b94a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800b94c:	4b3f      	ldr	r3, [pc, #252]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b94e:	2200      	movs	r2, #0
 800b950:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b952:	4b3e      	ldr	r3, [pc, #248]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b954:	2200      	movs	r2, #0
 800b956:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800b958:	4b3c      	ldr	r3, [pc, #240]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b95a:	0018      	movs	r0, r3
 800b95c:	f008 fac0 	bl	8013ee0 <HAL_DMA_Init>
 800b960:	1e03      	subs	r3, r0, #0
 800b962:	d001      	beq.n	800b968 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800b964:	f000 fce4 	bl	800c330 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a38      	ldr	r2, [pc, #224]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b96c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b96e:	4b37      	ldr	r3, [pc, #220]	@ (800ba4c <HAL_I2C_MspInit+0x1a0>)
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800b974:	4b37      	ldr	r3, [pc, #220]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b976:	4a38      	ldr	r2, [pc, #224]	@ (800ba58 <HAL_I2C_MspInit+0x1ac>)
 800b978:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800b97a:	4b36      	ldr	r3, [pc, #216]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b97c:	2206      	movs	r2, #6
 800b97e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b980:	4b34      	ldr	r3, [pc, #208]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b982:	2210      	movs	r2, #16
 800b984:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b986:	4b33      	ldr	r3, [pc, #204]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b988:	2200      	movs	r2, #0
 800b98a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b98c:	4b31      	ldr	r3, [pc, #196]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b98e:	2280      	movs	r2, #128	@ 0x80
 800b990:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b992:	4b30      	ldr	r3, [pc, #192]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b994:	2200      	movs	r2, #0
 800b996:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b998:	4b2e      	ldr	r3, [pc, #184]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b99e:	4b2d      	ldr	r3, [pc, #180]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b9a4:	4b2b      	ldr	r3, [pc, #172]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b9aa:	4b2a      	ldr	r3, [pc, #168]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	f008 fa97 	bl	8013ee0 <HAL_DMA_Init>
 800b9b2:	1e03      	subs	r3, r0, #0
 800b9b4:	d001      	beq.n	800b9ba <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800b9b6:	f000 fcbb 	bl	800c330 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a25      	ldr	r2, [pc, #148]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b9be:	639a      	str	r2, [r3, #56]	@ 0x38
 800b9c0:	4b24      	ldr	r3, [pc, #144]	@ (800ba54 <HAL_I2C_MspInit+0x1a8>)
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	2017      	movs	r0, #23
 800b9cc:	f008 fa52 	bl	8013e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800b9d0:	2017      	movs	r0, #23
 800b9d2:	f008 fa64 	bl	8013e9e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b9d6:	e02e      	b.n	800ba36 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a1f      	ldr	r2, [pc, #124]	@ (800ba5c <HAL_I2C_MspInit+0x1b0>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d129      	bne.n	800ba36 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9e2:	4b18      	ldr	r3, [pc, #96]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e6:	4b17      	ldr	r3, [pc, #92]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9ee:	4b15      	ldr	r3, [pc, #84]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800b9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b9fa:	2114      	movs	r1, #20
 800b9fc:	187b      	adds	r3, r7, r1
 800b9fe:	22c0      	movs	r2, #192	@ 0xc0
 800ba00:	0112      	lsls	r2, r2, #4
 800ba02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ba04:	187b      	adds	r3, r7, r1
 800ba06:	2212      	movs	r2, #18
 800ba08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba0a:	187b      	adds	r3, r7, r1
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba10:	187b      	adds	r3, r7, r1
 800ba12:	2203      	movs	r2, #3
 800ba14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800ba16:	187b      	adds	r3, r7, r1
 800ba18:	2206      	movs	r2, #6
 800ba1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba1c:	187b      	adds	r3, r7, r1
 800ba1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ba48 <HAL_I2C_MspInit+0x19c>)
 800ba20:	0019      	movs	r1, r3
 800ba22:	0010      	movs	r0, r2
 800ba24:	f008 fe78 	bl	8014718 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ba28:	4b06      	ldr	r3, [pc, #24]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800ba2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba2c:	4b05      	ldr	r3, [pc, #20]	@ (800ba44 <HAL_I2C_MspInit+0x198>)
 800ba2e:	2180      	movs	r1, #128	@ 0x80
 800ba30:	03c9      	lsls	r1, r1, #15
 800ba32:	430a      	orrs	r2, r1
 800ba34:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ba36:	46c0      	nop			@ (mov r8, r8)
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	b00b      	add	sp, #44	@ 0x2c
 800ba3c:	bd90      	pop	{r4, r7, pc}
 800ba3e:	46c0      	nop			@ (mov r8, r8)
 800ba40:	40005400 	.word	0x40005400
 800ba44:	40021000 	.word	0x40021000
 800ba48:	50000400 	.word	0x50000400
 800ba4c:	20000d10 	.word	0x20000d10
 800ba50:	40020030 	.word	0x40020030
 800ba54:	20000d58 	.word	0x20000d58
 800ba58:	4002001c 	.word	0x4002001c
 800ba5c:	40005800 	.word	0x40005800

0800ba60 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800ba64:	4b10      	ldr	r3, [pc, #64]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba66:	4a11      	ldr	r2, [pc, #68]	@ (800baac <MX_I2S2_Init+0x4c>)
 800ba68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800ba6a:	4b0f      	ldr	r3, [pc, #60]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba6c:	22c0      	movs	r2, #192	@ 0xc0
 800ba6e:	0092      	lsls	r2, r2, #2
 800ba70:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800ba72:	4b0d      	ldr	r3, [pc, #52]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800ba78:	4b0b      	ldr	r3, [pc, #44]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800ba7e:	4b0a      	ldr	r3, [pc, #40]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800ba84:	4b08      	ldr	r3, [pc, #32]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba86:	22fa      	movs	r2, #250	@ 0xfa
 800ba88:	0192      	lsls	r2, r2, #6
 800ba8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800ba8c:	4b06      	ldr	r3, [pc, #24]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800ba92:	4b05      	ldr	r3, [pc, #20]	@ (800baa8 <MX_I2S2_Init+0x48>)
 800ba94:	0018      	movs	r0, r3
 800ba96:	f00b ff1d 	bl	80178d4 <HAL_I2S_Init>
 800ba9a:	1e03      	subs	r3, r0, #0
 800ba9c:	d001      	beq.n	800baa2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800ba9e:	f000 fc47 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800baa2:	46c0      	nop			@ (mov r8, r8)
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20000da0 	.word	0x20000da0
 800baac:	40003800 	.word	0x40003800

0800bab0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800bab0:	b590      	push	{r4, r7, lr}
 800bab2:	b089      	sub	sp, #36	@ 0x24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bab8:	240c      	movs	r4, #12
 800baba:	193b      	adds	r3, r7, r4
 800babc:	0018      	movs	r0, r3
 800babe:	2314      	movs	r3, #20
 800bac0:	001a      	movs	r2, r3
 800bac2:	2100      	movs	r1, #0
 800bac4:	f019 fa44 	bl	8024f50 <memset>
  if(i2sHandle->Instance==SPI2)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a2d      	ldr	r2, [pc, #180]	@ (800bb84 <HAL_I2S_MspInit+0xd4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d154      	bne.n	800bb7c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bad2:	4b2d      	ldr	r3, [pc, #180]	@ (800bb88 <HAL_I2S_MspInit+0xd8>)
 800bad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bad6:	4b2c      	ldr	r3, [pc, #176]	@ (800bb88 <HAL_I2S_MspInit+0xd8>)
 800bad8:	2180      	movs	r1, #128	@ 0x80
 800bada:	01c9      	lsls	r1, r1, #7
 800badc:	430a      	orrs	r2, r1
 800bade:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bae0:	4b29      	ldr	r3, [pc, #164]	@ (800bb88 <HAL_I2S_MspInit+0xd8>)
 800bae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae4:	4b28      	ldr	r3, [pc, #160]	@ (800bb88 <HAL_I2S_MspInit+0xd8>)
 800bae6:	2102      	movs	r1, #2
 800bae8:	430a      	orrs	r2, r1
 800baea:	62da      	str	r2, [r3, #44]	@ 0x2c
 800baec:	4b26      	ldr	r3, [pc, #152]	@ (800bb88 <HAL_I2S_MspInit+0xd8>)
 800baee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf0:	2202      	movs	r2, #2
 800baf2:	4013      	ands	r3, r2
 800baf4:	60bb      	str	r3, [r7, #8]
 800baf6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800baf8:	193b      	adds	r3, r7, r4
 800bafa:	22b0      	movs	r2, #176	@ 0xb0
 800bafc:	0212      	lsls	r2, r2, #8
 800bafe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb00:	0021      	movs	r1, r4
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	2202      	movs	r2, #2
 800bb06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb08:	187b      	adds	r3, r7, r1
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb0e:	187b      	adds	r3, r7, r1
 800bb10:	2200      	movs	r2, #0
 800bb12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800bb14:	187b      	adds	r3, r7, r1
 800bb16:	2200      	movs	r2, #0
 800bb18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb1a:	187b      	adds	r3, r7, r1
 800bb1c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb8c <HAL_I2S_MspInit+0xdc>)
 800bb1e:	0019      	movs	r1, r3
 800bb20:	0010      	movs	r0, r2
 800bb22:	f008 fdf9 	bl	8014718 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800bb26:	4b1a      	ldr	r3, [pc, #104]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb28:	4a1a      	ldr	r2, [pc, #104]	@ (800bb94 <HAL_I2S_MspInit+0xe4>)
 800bb2a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800bb2c:	4b18      	ldr	r3, [pc, #96]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb2e:	2202      	movs	r2, #2
 800bb30:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bb32:	4b17      	ldr	r3, [pc, #92]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bb38:	4b15      	ldr	r3, [pc, #84]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bb3e:	4b14      	ldr	r3, [pc, #80]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb40:	2280      	movs	r2, #128	@ 0x80
 800bb42:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bb44:	4b12      	ldr	r3, [pc, #72]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb46:	2280      	movs	r2, #128	@ 0x80
 800bb48:	0052      	lsls	r2, r2, #1
 800bb4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bb4c:	4b10      	ldr	r3, [pc, #64]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb4e:	2280      	movs	r2, #128	@ 0x80
 800bb50:	00d2      	lsls	r2, r2, #3
 800bb52:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800bb54:	4b0e      	ldr	r3, [pc, #56]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb56:	2220      	movs	r2, #32
 800bb58:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bb5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800bb60:	4b0b      	ldr	r3, [pc, #44]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb62:	0018      	movs	r0, r3
 800bb64:	f008 f9bc 	bl	8013ee0 <HAL_DMA_Init>
 800bb68:	1e03      	subs	r3, r0, #0
 800bb6a:	d001      	beq.n	800bb70 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800bb6c:	f000 fbe0 	bl	800c330 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a07      	ldr	r2, [pc, #28]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb74:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb76:	4b06      	ldr	r3, [pc, #24]	@ (800bb90 <HAL_I2S_MspInit+0xe0>)
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800bb7c:	46c0      	nop			@ (mov r8, r8)
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b009      	add	sp, #36	@ 0x24
 800bb82:	bd90      	pop	{r4, r7, pc}
 800bb84:	40003800 	.word	0x40003800
 800bb88:	40021000 	.word	0x40021000
 800bb8c:	50000400 	.word	0x50000400
 800bb90:	20000ddc 	.word	0x20000ddc
 800bb94:	40020044 	.word	0x40020044

0800bb98 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  testDone = true;
 800bb9c:	4b14      	ldr	r3, [pc, #80]	@ (800bbf0 <SetTestDone+0x58>)
 800bb9e:	2201      	movs	r2, #1
 800bba0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800bba2:	23fa      	movs	r3, #250	@ 0xfa
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	0018      	movs	r0, r3
 800bba8:	f007 fcca 	bl	8013540 <HAL_Delay>
  SetDBLED(false, false, true);
 800bbac:	2201      	movs	r2, #1
 800bbae:	2100      	movs	r1, #0
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f005 fcf5 	bl	80115a0 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800bbb6:	4a0f      	ldr	r2, [pc, #60]	@ (800bbf4 <SetTestDone+0x5c>)
 800bbb8:	23fa      	movs	r3, #250	@ 0xfa
 800bbba:	0119      	lsls	r1, r3, #4
 800bbbc:	23fa      	movs	r3, #250	@ 0xfa
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f005 fcb9 	bl	8011538 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800bbc6:	4a0b      	ldr	r2, [pc, #44]	@ (800bbf4 <SetTestDone+0x5c>)
 800bbc8:	23fa      	movs	r3, #250	@ 0xfa
 800bbca:	0119      	lsls	r1, r3, #4
 800bbcc:	23fa      	movs	r3, #250	@ 0xfa
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f005 fd2f 	bl	8011634 <SetVocLED>
  HAL_Delay(500);
 800bbd6:	23fa      	movs	r3, #250	@ 0xfa
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f007 fcb0 	bl	8013540 <HAL_Delay>
  SetLEDsOff();
 800bbe0:	f005 fe68 	bl	80118b4 <SetLEDsOff>
  InitDone();
 800bbe4:	f005 fbfc 	bl	80113e0 <InitDone>
}
 800bbe8:	46c0      	nop			@ (mov r8, r8)
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	46c0      	nop			@ (mov r8, r8)
 800bbf0:	20000e24 	.word	0x20000e24
 800bbf4:	00000bb8 	.word	0x00000bb8

0800bbf8 <FlashLEDs>:

void FlashLEDs(){
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800bbfe:	1dfb      	adds	r3, r7, #7
 800bc00:	2200      	movs	r2, #0
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	e021      	b.n	800bc4a <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800bc06:	2201      	movs	r2, #1
 800bc08:	2101      	movs	r1, #1
 800bc0a:	2001      	movs	r0, #1
 800bc0c:	f005 fcc8 	bl	80115a0 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800bc10:	4a12      	ldr	r2, [pc, #72]	@ (800bc5c <FlashLEDs+0x64>)
 800bc12:	23fa      	movs	r3, #250	@ 0xfa
 800bc14:	0119      	lsls	r1, r3, #4
 800bc16:	23fa      	movs	r3, #250	@ 0xfa
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	0018      	movs	r0, r3
 800bc1c:	f005 fc8c 	bl	8011538 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800bc20:	4a0e      	ldr	r2, [pc, #56]	@ (800bc5c <FlashLEDs+0x64>)
 800bc22:	23fa      	movs	r3, #250	@ 0xfa
 800bc24:	0119      	lsls	r1, r3, #4
 800bc26:	23fa      	movs	r3, #250	@ 0xfa
 800bc28:	011b      	lsls	r3, r3, #4
 800bc2a:	0018      	movs	r0, r3
 800bc2c:	f005 fd02 	bl	8011634 <SetVocLED>
    HAL_Delay(250);
 800bc30:	20fa      	movs	r0, #250	@ 0xfa
 800bc32:	f007 fc85 	bl	8013540 <HAL_Delay>
    SetLEDsOff();
 800bc36:	f005 fe3d 	bl	80118b4 <SetLEDsOff>
    HAL_Delay(250);
 800bc3a:	20fa      	movs	r0, #250	@ 0xfa
 800bc3c:	f007 fc80 	bl	8013540 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800bc40:	1dfb      	adds	r3, r7, #7
 800bc42:	781a      	ldrb	r2, [r3, #0]
 800bc44:	1dfb      	adds	r3, r7, #7
 800bc46:	3201      	adds	r2, #1
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	1dfb      	adds	r3, r7, #7
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	d9d9      	bls.n	800bc06 <FlashLEDs+0xe>
  }
}
 800bc52:	46c0      	nop			@ (mov r8, r8)
 800bc54:	46c0      	nop			@ (mov r8, r8)
 800bc56:	46bd      	mov	sp, r7
 800bc58:	b002      	add	sp, #8
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	00000bb8 	.word	0x00000bb8

0800bc60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bc66:	f007 fbfb 	bl	8013460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bc6a:	f000 fa11 	bl	800c090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bc6e:	f7ff fc01 	bl	800b474 <MX_GPIO_Init>
  MX_DMA_Init();
 800bc72:	f7ff fa29 	bl	800b0c8 <MX_DMA_Init>
  MX_I2C1_Init();
 800bc76:	f7ff fd99 	bl	800b7ac <MX_I2C1_Init>
  MX_I2S2_Init();
 800bc7a:	f7ff fef1 	bl	800ba60 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800bc7e:	f006 fd31 	bl	80126e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800bc82:	f7ff fdd3 	bl	800b82c <MX_I2C2_Init>
  MX_TIM2_Init();
 800bc86:	f006 fb25 	bl	80122d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800bc8a:	f006 fb97 	bl	80123bc <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800bc8e:	f006 fd59 	bl	8012744 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800bc92:	f7fd ff3b 	bl	8009b0c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800bc96:	f015 fe47 	bl	8021928 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800bc9a:	f001 fb19 	bl	800d2d0 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800bc9e:	f006 fceb 	bl	8012678 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800bca2:	f006 fc09 	bl	80124b8 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800bca6:	4ad1      	ldr	r2, [pc, #836]	@ (800bfec <main+0x38c>)
 800bca8:	4bd1      	ldr	r3, [pc, #836]	@ (800bff0 <main+0x390>)
 800bcaa:	0011      	movs	r1, r2
 800bcac:	0018      	movs	r0, r3
 800bcae:	f7ff fd11 	bl	800b6d4 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800bcb2:	f006 ff89 	bl	8012bc8 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800bcb6:	f006 f995 	bl	8011fe4 <Battery_Upkeep>
 800bcba:	0003      	movs	r3, r0
 800bcbc:	001a      	movs	r2, r3
 800bcbe:	4bcd      	ldr	r3, [pc, #820]	@ (800bff4 <main+0x394>)
 800bcc0:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800bcc2:	4bcc      	ldr	r3, [pc, #816]	@ (800bff4 <main+0x394>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d113      	bne.n	800bcf2 <main+0x92>
    SetAllREDLED();
 800bcca:	f005 fe0f 	bl	80118ec <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800bcce:	f7fd f823 	bl	8008d18 <ReadBatteryVoltage>
 800bcd2:	1c03      	adds	r3, r0, #0
 800bcd4:	1c18      	adds	r0, r3, #0
 800bcd6:	f7f7 fbc5 	bl	8003464 <__aeabi_f2d>
 800bcda:	0002      	movs	r2, r0
 800bcdc:	000b      	movs	r3, r1
 800bcde:	48c6      	ldr	r0, [pc, #792]	@ (800bff8 <main+0x398>)
 800bce0:	49c6      	ldr	r1, [pc, #792]	@ (800bffc <main+0x39c>)
 800bce2:	9200      	str	r2, [sp, #0]
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	0002      	movs	r2, r0
 800bce8:	2002      	movs	r0, #2
 800bcea:	f006 fee9 	bl	8012ac0 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800bcee:	f7fd fc39 	bl	8009564 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800bcf2:	f7fd f8e7 	bl	8008ec4 <UserButton_Pressed>
 800bcf6:	1e03      	subs	r3, r0, #0
 800bcf8:	d004      	beq.n	800bd04 <main+0xa4>
    EnableESPProg();
 800bcfa:	f015 fee5 	bl	8021ac8 <EnableESPProg>
    ESP_Programming = true;
 800bcfe:	4bc0      	ldr	r3, [pc, #768]	@ (800c000 <main+0x3a0>)
 800bd00:	2201      	movs	r2, #1
 800bd02:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800bd04:	2003      	movs	r0, #3
 800bd06:	f006 ff45 	bl	8012b94 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800bd0a:	49be      	ldr	r1, [pc, #760]	@ (800c004 <main+0x3a4>)
 800bd0c:	4bbe      	ldr	r3, [pc, #760]	@ (800c008 <main+0x3a8>)
 800bd0e:	2201      	movs	r2, #1
 800bd10:	0018      	movs	r0, r3
 800bd12:	f010 f96f 	bl	801bff4 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800bd16:	4bbd      	ldr	r3, [pc, #756]	@ (800c00c <main+0x3ac>)
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f7fd fcfd 	bl	8009718 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800bd1e:	4abc      	ldr	r2, [pc, #752]	@ (800c010 <main+0x3b0>)
 800bd20:	49bc      	ldr	r1, [pc, #752]	@ (800c014 <main+0x3b4>)
 800bd22:	48bd      	ldr	r0, [pc, #756]	@ (800c018 <main+0x3b8>)
 800bd24:	230b      	movs	r3, #11
 800bd26:	f004 fcd1 	bl	80106cc <soundInit>
 800bd2a:	0003      	movs	r3, r0
 800bd2c:	001a      	movs	r2, r3
 800bd2e:	2301      	movs	r3, #1
 800bd30:	4053      	eors	r3, r2
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d005      	beq.n	800bd44 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800bd38:	4ab8      	ldr	r2, [pc, #736]	@ (800c01c <main+0x3bc>)
 800bd3a:	4bb9      	ldr	r3, [pc, #740]	@ (800c020 <main+0x3c0>)
 800bd3c:	21f9      	movs	r1, #249	@ 0xf9
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f006 ff76 	bl	8012c30 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800bd44:	4bb7      	ldr	r3, [pc, #732]	@ (800c024 <main+0x3c4>)
 800bd46:	4ab8      	ldr	r2, [pc, #736]	@ (800c028 <main+0x3c8>)
 800bd48:	49b2      	ldr	r1, [pc, #712]	@ (800c014 <main+0x3b4>)
 800bd4a:	48b8      	ldr	r0, [pc, #736]	@ (800c02c <main+0x3cc>)
 800bd4c:	f000 fbe2 	bl	800c514 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800bd50:	f007 fbec 	bl	801352c <HAL_GetTick>
 800bd54:	0003      	movs	r3, r0
 800bd56:	4ab6      	ldr	r2, [pc, #728]	@ (800c030 <main+0x3d0>)
 800bd58:	189a      	adds	r2, r3, r2
 800bd5a:	4bb6      	ldr	r3, [pc, #728]	@ (800c034 <main+0x3d4>)
 800bd5c:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800bd5e:	f7fd f891 	bl	8008e84 <Check_USB_PowerOn>
 800bd62:	0003      	movs	r3, r0
 800bd64:	1e5a      	subs	r2, r3, #1
 800bd66:	4193      	sbcs	r3, r2
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	4053      	eors	r3, r2
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	1c1a      	adds	r2, r3, #0
 800bd72:	2301      	movs	r3, #1
 800bd74:	4013      	ands	r3, r2
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	4baf      	ldr	r3, [pc, #700]	@ (800c038 <main+0x3d8>)
 800bd7a:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800bd7c:	f7fd f882 	bl	8008e84 <Check_USB_PowerOn>
 800bd80:	1e03      	subs	r3, r0, #0
 800bd82:	d003      	beq.n	800bd8c <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800bd84:	4bad      	ldr	r3, [pc, #692]	@ (800c03c <main+0x3dc>)
 800bd86:	0018      	movs	r0, r3
 800bd88:	f7fc f9d0 	bl	800812c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800bd8c:	4bac      	ldr	r3, [pc, #688]	@ (800c040 <main+0x3e0>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	0018      	movs	r0, r3
 800bd92:	f006 fe3f 	bl	8012a14 <TimestampIsReached>
 800bd96:	1e03      	subs	r3, r0, #0
 800bd98:	d00e      	beq.n	800bdb8 <main+0x158>
      charge = Battery_Upkeep();
 800bd9a:	f006 f923 	bl	8011fe4 <Battery_Upkeep>
 800bd9e:	0003      	movs	r3, r0
 800bda0:	001a      	movs	r2, r3
 800bda2:	4b94      	ldr	r3, [pc, #592]	@ (800bff4 <main+0x394>)
 800bda4:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800bda6:	f007 fbc1 	bl	801352c <HAL_GetTick>
 800bdaa:	0003      	movs	r3, r0
 800bdac:	4aa5      	ldr	r2, [pc, #660]	@ (800c044 <main+0x3e4>)
 800bdae:	189a      	adds	r2, r3, r2
 800bdb0:	4ba3      	ldr	r3, [pc, #652]	@ (800c040 <main+0x3e0>)
 800bdb2:	601a      	str	r2, [r3, #0]
      showTime();
 800bdb4:	f7fd f896 	bl	8008ee4 <showTime>

    }
    configCheck();
 800bdb8:	f005 ff70 	bl	8011c9c <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800bdbc:	4ba2      	ldr	r3, [pc, #648]	@ (800c048 <main+0x3e8>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800bdc2:	4b8c      	ldr	r3, [pc, #560]	@ (800bff4 <main+0x394>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d003      	beq.n	800bdd2 <main+0x172>
 800bdca:	4b8a      	ldr	r3, [pc, #552]	@ (800bff4 <main+0x394>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d104      	bne.n	800bddc <main+0x17c>
      FlashLEDs();
 800bdd2:	f7ff ff11 	bl	800bbf8 <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800bdd6:	4b9d      	ldr	r3, [pc, #628]	@ (800c04c <main+0x3ec>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800bddc:	4b85      	ldr	r3, [pc, #532]	@ (800bff4 <main+0x394>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <main+0x198>
 800bde4:	4b9a      	ldr	r3, [pc, #616]	@ (800c050 <main+0x3f0>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b09      	cmp	r3, #9
 800bdea:	d105      	bne.n	800bdf8 <main+0x198>
       batteryEmpty = true;
 800bdec:	4b99      	ldr	r3, [pc, #612]	@ (800c054 <main+0x3f4>)
 800bdee:	2201      	movs	r2, #1
 800bdf0:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800bdf2:	f7fd fbb7 	bl	8009564 <Enter_Standby_Mode>
 800bdf6:	e002      	b.n	800bdfe <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800bdf8:	4b96      	ldr	r3, [pc, #600]	@ (800c054 <main+0x3f4>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800bdfe:	4b96      	ldr	r3, [pc, #600]	@ (800c058 <main+0x3f8>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d100      	bne.n	800be08 <main+0x1a8>
 800be06:	e09c      	b.n	800bf42 <main+0x2e2>
 800be08:	4b7d      	ldr	r3, [pc, #500]	@ (800c000 <main+0x3a0>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2201      	movs	r2, #1
 800be0e:	4053      	eors	r3, r2
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d100      	bne.n	800be18 <main+0x1b8>
 800be16:	e094      	b.n	800bf42 <main+0x2e2>
 800be18:	4b8e      	ldr	r3, [pc, #568]	@ (800c054 <main+0x3f4>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2201      	movs	r2, #1
 800be1e:	4053      	eors	r3, r2
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d100      	bne.n	800be28 <main+0x1c8>
 800be26:	e08c      	b.n	800bf42 <main+0x2e2>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800be28:	4b83      	ldr	r3, [pc, #524]	@ (800c038 <main+0x3d8>)
 800be2a:	781a      	ldrb	r2, [r3, #0]
 800be2c:	4b8b      	ldr	r3, [pc, #556]	@ (800c05c <main+0x3fc>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d034      	beq.n	800be9e <main+0x23e>
        if (IsSGPPresent() && !usbPluggedIn) {
 800be34:	f000 fb00 	bl	800c438 <IsSGPPresent>
 800be38:	1e03      	subs	r3, r0, #0
 800be3a:	d009      	beq.n	800be50 <main+0x1f0>
 800be3c:	4b87      	ldr	r3, [pc, #540]	@ (800c05c <main+0x3fc>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	2201      	movs	r2, #1
 800be42:	4053      	eors	r3, r2
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d002      	beq.n	800be50 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800be4a:	2001      	movs	r0, #1
 800be4c:	f000 fafe 	bl	800c44c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800be50:	4b83      	ldr	r3, [pc, #524]	@ (800c060 <main+0x400>)
 800be52:	791b      	ldrb	r3, [r3, #4]
 800be54:	2b34      	cmp	r3, #52	@ 0x34
 800be56:	d003      	beq.n	800be60 <main+0x200>
 800be58:	4b81      	ldr	r3, [pc, #516]	@ (800c060 <main+0x400>)
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	2b35      	cmp	r3, #53	@ 0x35
 800be5e:	d106      	bne.n	800be6e <main+0x20e>
 800be60:	4b7e      	ldr	r3, [pc, #504]	@ (800c05c <main+0x3fc>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800be68:	2000      	movs	r0, #0
 800be6a:	f000 faef 	bl	800c44c <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn) {
 800be6e:	4b7b      	ldr	r3, [pc, #492]	@ (800c05c <main+0x3fc>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2201      	movs	r2, #1
 800be74:	4053      	eors	r3, r2
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00c      	beq.n	800be96 <main+0x236>
          Debug("Device time out set in main due to powerstatus shift");
 800be7c:	4a79      	ldr	r2, [pc, #484]	@ (800c064 <main+0x404>)
 800be7e:	4b7a      	ldr	r3, [pc, #488]	@ (800c068 <main+0x408>)
 800be80:	0019      	movs	r1, r3
 800be82:	2003      	movs	r0, #3
 800be84:	f006 fe1c 	bl	8012ac0 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800be88:	f007 fb50 	bl	801352c <HAL_GetTick>
 800be8c:	0003      	movs	r3, r0
 800be8e:	4a77      	ldr	r2, [pc, #476]	@ (800c06c <main+0x40c>)
 800be90:	189a      	adds	r2, r3, r2
 800be92:	4b68      	ldr	r3, [pc, #416]	@ (800c034 <main+0x3d4>)
 800be94:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800be96:	4b71      	ldr	r3, [pc, #452]	@ (800c05c <main+0x3fc>)
 800be98:	781a      	ldrb	r2, [r3, #0]
 800be9a:	4b67      	ldr	r3, [pc, #412]	@ (800c038 <main+0x3d8>)
 800be9c:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800be9e:	f000 fef9 	bl	800cc94 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800bea2:	4b6a      	ldr	r3, [pc, #424]	@ (800c04c <main+0x3ec>)
 800bea4:	78db      	ldrb	r3, [r3, #3]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d005      	beq.n	800beb6 <main+0x256>
        MICstate = Mic_Upkeep();
 800beaa:	f001 f8fd 	bl	800d0a8 <Mic_Upkeep>
 800beae:	0003      	movs	r3, r0
 800beb0:	001a      	movs	r2, r3
 800beb2:	4b6f      	ldr	r3, [pc, #444]	@ (800c070 <main+0x410>)
 800beb4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800beb6:	4b4f      	ldr	r3, [pc, #316]	@ (800bff4 <main+0x394>)
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d803      	bhi.n	800bec6 <main+0x266>
 800bebe:	4b62      	ldr	r3, [pc, #392]	@ (800c048 <main+0x3e8>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d016      	beq.n	800bef4 <main+0x294>
 800bec6:	4b61      	ldr	r3, [pc, #388]	@ (800c04c <main+0x3ec>)
 800bec8:	789b      	ldrb	r3, [r3, #2]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d012      	beq.n	800bef4 <main+0x294>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800bece:	f001 fa8d 	bl	800d3ec <sen5x_Get_sen5x_enable_state>
 800bed2:	0003      	movs	r3, r0
 800bed4:	001a      	movs	r2, r3
 800bed6:	2301      	movs	r3, #1
 800bed8:	4053      	eors	r3, r2
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d006      	beq.n	800beee <main+0x28e>
 800bee0:	4b5e      	ldr	r3, [pc, #376]	@ (800c05c <main+0x3fc>)
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <main+0x28e>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800bee8:	2000      	movs	r0, #0
 800beea:	f001 fabb 	bl	800d464 <sen5x_enable>
        }
        sen5x_statemachine();
 800beee:	f002 f82b 	bl	800df48 <sen5x_statemachine>
 800bef2:	e020      	b.n	800bf36 <main+0x2d6>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800bef4:	4b3f      	ldr	r3, [pc, #252]	@ (800bff4 <main+0x394>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d81c      	bhi.n	800bf36 <main+0x2d6>
 800befc:	4b52      	ldr	r3, [pc, #328]	@ (800c048 <main+0x3e8>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2201      	movs	r2, #1
 800bf02:	4053      	eors	r3, r2
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d015      	beq.n	800bf36 <main+0x2d6>
 800bf0a:	4b50      	ldr	r3, [pc, #320]	@ (800c04c <main+0x3ec>)
 800bf0c:	789b      	ldrb	r3, [r3, #2]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d011      	beq.n	800bf36 <main+0x2d6>
        Info("Battery level insufficient for sen5x operation");
 800bf12:	4a58      	ldr	r2, [pc, #352]	@ (800c074 <main+0x414>)
 800bf14:	4b39      	ldr	r3, [pc, #228]	@ (800bffc <main+0x39c>)
 800bf16:	0019      	movs	r1, r3
 800bf18:	2002      	movs	r0, #2
 800bf1a:	f006 fdd1 	bl	8012ac0 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800bf1e:	4b4b      	ldr	r3, [pc, #300]	@ (800c04c <main+0x3ec>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800bf24:	4b54      	ldr	r3, [pc, #336]	@ (800c078 <main+0x418>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800bf2a:	4b54      	ldr	r3, [pc, #336]	@ (800c07c <main+0x41c>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <main+0x2d6>
          sen5x_Power_Off();
 800bf32:	f001 fb23 	bl	800d57c <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800bf36:	f7fb f851 	bl	8006fdc <ESP_Upkeep>
 800bf3a:	0003      	movs	r3, r0
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	4b44      	ldr	r3, [pc, #272]	@ (800c050 <main+0x3f0>)
 800bf40:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800bf42:	4b45      	ldr	r3, [pc, #276]	@ (800c058 <main+0x3f8>)
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	2201      	movs	r2, #1
 800bf48:	4053      	eors	r3, r2
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00f      	beq.n	800bf70 <main+0x310>
 800bf50:	4b2b      	ldr	r3, [pc, #172]	@ (800c000 <main+0x3a0>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2201      	movs	r2, #1
 800bf56:	4053      	eors	r3, r2
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d008      	beq.n	800bf70 <main+0x310>
 800bf5e:	4b3d      	ldr	r3, [pc, #244]	@ (800c054 <main+0x3f4>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2201      	movs	r2, #1
 800bf64:	4053      	eors	r3, r2
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <main+0x310>
      Device_Test();  // for device with startup time
 800bf6c:	f000 fcaa 	bl	800c8c4 <Device_Test>
    }
    if (!usbPluggedIn) {
 800bf70:	4b3a      	ldr	r3, [pc, #232]	@ (800c05c <main+0x3fc>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	2201      	movs	r2, #1
 800bf76:	4053      	eors	r3, r2
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d01c      	beq.n	800bfb8 <main+0x358>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800bf7e:	4b40      	ldr	r3, [pc, #256]	@ (800c080 <main+0x420>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	2201      	movs	r2, #1
 800bf84:	4053      	eors	r3, r2
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d015      	beq.n	800bfb8 <main+0x358>
 800bf8c:	f000 fd18 	bl	800c9c0 <AllDevicesReady>
 800bf90:	1e03      	subs	r3, r0, #0
 800bf92:	d011      	beq.n	800bfb8 <main+0x358>
 800bf94:	4b3b      	ldr	r3, [pc, #236]	@ (800c084 <main+0x424>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00d      	beq.n	800bfb8 <main+0x358>
        EnabledConnectedDevices();
 800bf9c:	f000 fdde 	bl	800cb5c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800bfa0:	4b39      	ldr	r3, [pc, #228]	@ (800c088 <main+0x428>)
 800bfa2:	795b      	ldrb	r3, [r3, #5]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <main+0x34e>
 800bfa8:	23d7      	movs	r3, #215	@ 0xd7
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	e001      	b.n	800bfb2 <main+0x352>
 800bfae:	23dc      	movs	r3, #220	@ 0xdc
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f7fd faf6 	bl	80095a4 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800bfb8:	4b12      	ldr	r3, [pc, #72]	@ (800c004 <main+0x3a4>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <main+0x364>
      check_cli_command();
 800bfc0:	f000 f8f0 	bl	800c1a4 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800bfc4:	f7fc ff5e 	bl	8008e84 <Check_USB_PowerOn>
 800bfc8:	1e03      	subs	r3, r0, #0
 800bfca:	d100      	bne.n	800bfce <main+0x36e>
 800bfcc:	e6de      	b.n	800bd8c <main+0x12c>
 800bfce:	4b2f      	ldr	r3, [pc, #188]	@ (800c08c <main+0x42c>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	4053      	eors	r3, r2
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d100      	bne.n	800bfde <main+0x37e>
 800bfdc:	e6d6      	b.n	800bd8c <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800bfde:	f015 fd7d 	bl	8021adc <GetUsbRxPointer>
 800bfe2:	0003      	movs	r3, r0
 800bfe4:	0018      	movs	r0, r3
 800bfe6:	f7fc fca3 	bl	8008930 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800bfea:	e6cf      	b.n	800bd8c <main+0x12c>
 800bfec:	20001ed4 	.word	0x20001ed4
 800bff0:	20001e94 	.word	0x20001e94
 800bff4:	20000e40 	.word	0x20000e40
 800bff8:	0802b8f8 	.word	0x0802b8f8
 800bffc:	0802b91c 	.word	0x0802b91c
 800c000:	20000e25 	.word	0x20000e25
 800c004:	20000e2c 	.word	0x20000e2c
 800c008:	2000200c 	.word	0x2000200c
 800c00c:	20000ec0 	.word	0x20000ec0
 800c010:	20001f14 	.word	0x20001f14
 800c014:	20000da0 	.word	0x20000da0
 800c018:	20000ddc 	.word	0x20000ddc
 800c01c:	0802b920 	.word	0x0802b920
 800c020:	0802d210 	.word	0x0802d210
 800c024:	200020c4 	.word	0x200020c4
 800c028:	20000ba0 	.word	0x20000ba0
 800c02c:	20000c68 	.word	0x20000c68
 800c030:	000061a8 	.word	0x000061a8
 800c034:	20000e3c 	.word	0x20000e3c
 800c038:	20000e27 	.word	0x20000e27
 800c03c:	0802b934 	.word	0x0802b934
 800c040:	20000098 	.word	0x20000098
 800c044:	0000c350 	.word	0x0000c350
 800c048:	20000097 	.word	0x20000097
 800c04c:	20000e44 	.word	0x20000e44
 800c050:	20000e29 	.word	0x20000e29
 800c054:	20000e26 	.word	0x20000e26
 800c058:	20000e24 	.word	0x20000e24
 800c05c:	20001e75 	.word	0x20001e75
 800c060:	20000ee8 	.word	0x20000ee8
 800c064:	0802b968 	.word	0x0802b968
 800c068:	0802b9a0 	.word	0x0802b9a0
 800c06c:	00001194 	.word	0x00001194
 800c070:	20000e28 	.word	0x20000e28
 800c074:	0802b9a4 	.word	0x0802b9a4
 800c078:	20000ee6 	.word	0x20000ee6
 800c07c:	20000ee5 	.word	0x20000ee5
 800c080:	20001e76 	.word	0x20001e76
 800c084:	200005c0 	.word	0x200005c0
 800c088:	20000e4c 	.word	0x20000e4c
 800c08c:	200005bb 	.word	0x200005bb

0800c090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c090:	b590      	push	{r4, r7, lr}
 800c092:	b09d      	sub	sp, #116	@ 0x74
 800c094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c096:	2438      	movs	r4, #56	@ 0x38
 800c098:	193b      	adds	r3, r7, r4
 800c09a:	0018      	movs	r0, r3
 800c09c:	2338      	movs	r3, #56	@ 0x38
 800c09e:	001a      	movs	r2, r3
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	f018 ff55 	bl	8024f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c0a6:	2324      	movs	r3, #36	@ 0x24
 800c0a8:	18fb      	adds	r3, r7, r3
 800c0aa:	0018      	movs	r0, r3
 800c0ac:	2314      	movs	r3, #20
 800c0ae:	001a      	movs	r2, r3
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	f018 ff4d 	bl	8024f50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c0b6:	003b      	movs	r3, r7
 800c0b8:	0018      	movs	r0, r3
 800c0ba:	2324      	movs	r3, #36	@ 0x24
 800c0bc:	001a      	movs	r2, r3
 800c0be:	2100      	movs	r1, #0
 800c0c0:	f018 ff46 	bl	8024f50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0c4:	4b34      	ldr	r3, [pc, #208]	@ (800c198 <SystemClock_Config+0x108>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a34      	ldr	r2, [pc, #208]	@ (800c19c <SystemClock_Config+0x10c>)
 800c0ca:	401a      	ands	r2, r3
 800c0cc:	4b32      	ldr	r3, [pc, #200]	@ (800c198 <SystemClock_Config+0x108>)
 800c0ce:	2180      	movs	r1, #128	@ 0x80
 800c0d0:	0109      	lsls	r1, r1, #4
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c0d6:	f00d fd61 	bl	8019b9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c0da:	4b31      	ldr	r3, [pc, #196]	@ (800c1a0 <SystemClock_Config+0x110>)
 800c0dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0de:	4a2f      	ldr	r2, [pc, #188]	@ (800c19c <SystemClock_Config+0x10c>)
 800c0e0:	401a      	ands	r2, r3
 800c0e2:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a0 <SystemClock_Config+0x110>)
 800c0e4:	2180      	movs	r1, #128	@ 0x80
 800c0e6:	0149      	lsls	r1, r1, #5
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c0ec:	193b      	adds	r3, r7, r4
 800c0ee:	2226      	movs	r2, #38	@ 0x26
 800c0f0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c0f2:	193b      	adds	r3, r7, r4
 800c0f4:	2280      	movs	r2, #128	@ 0x80
 800c0f6:	0052      	lsls	r2, r2, #1
 800c0f8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c0fa:	0021      	movs	r1, r4
 800c0fc:	187b      	adds	r3, r7, r1
 800c0fe:	2201      	movs	r2, #1
 800c100:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c102:	187b      	adds	r3, r7, r1
 800c104:	2210      	movs	r2, #16
 800c106:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c108:	187b      	adds	r3, r7, r1
 800c10a:	2201      	movs	r2, #1
 800c10c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c10e:	187b      	adds	r3, r7, r1
 800c110:	2200      	movs	r2, #0
 800c112:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c114:	187b      	adds	r3, r7, r1
 800c116:	0018      	movs	r0, r3
 800c118:	f00d fdd0 	bl	8019cbc <HAL_RCC_OscConfig>
 800c11c:	1e03      	subs	r3, r0, #0
 800c11e:	d001      	beq.n	800c124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c120:	f000 f906 	bl	800c330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c124:	2124      	movs	r1, #36	@ 0x24
 800c126:	187b      	adds	r3, r7, r1
 800c128:	220f      	movs	r2, #15
 800c12a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c12c:	187b      	adds	r3, r7, r1
 800c12e:	2201      	movs	r2, #1
 800c130:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c132:	187b      	adds	r3, r7, r1
 800c134:	2200      	movs	r2, #0
 800c136:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c138:	187b      	adds	r3, r7, r1
 800c13a:	2200      	movs	r2, #0
 800c13c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c13e:	187b      	adds	r3, r7, r1
 800c140:	2200      	movs	r2, #0
 800c142:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c144:	187b      	adds	r3, r7, r1
 800c146:	2100      	movs	r1, #0
 800c148:	0018      	movs	r0, r3
 800c14a:	f00e f98b 	bl	801a464 <HAL_RCC_ClockConfig>
 800c14e:	1e03      	subs	r3, r0, #0
 800c150:	d001      	beq.n	800c156 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c152:	f000 f8ed 	bl	800c330 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c156:	003b      	movs	r3, r7
 800c158:	226d      	movs	r2, #109	@ 0x6d
 800c15a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c15c:	003b      	movs	r3, r7
 800c15e:	2200      	movs	r2, #0
 800c160:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c162:	003b      	movs	r3, r7
 800c164:	2200      	movs	r2, #0
 800c166:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c168:	003b      	movs	r3, r7
 800c16a:	2200      	movs	r2, #0
 800c16c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c16e:	003b      	movs	r3, r7
 800c170:	2280      	movs	r2, #128	@ 0x80
 800c172:	0252      	lsls	r2, r2, #9
 800c174:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c176:	003b      	movs	r3, r7
 800c178:	2280      	movs	r2, #128	@ 0x80
 800c17a:	04d2      	lsls	r2, r2, #19
 800c17c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c17e:	003b      	movs	r3, r7
 800c180:	0018      	movs	r0, r3
 800c182:	f00e fb93 	bl	801a8ac <HAL_RCCEx_PeriphCLKConfig>
 800c186:	1e03      	subs	r3, r0, #0
 800c188:	d001      	beq.n	800c18e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c18a:	f000 f8d1 	bl	800c330 <Error_Handler>
  }
}
 800c18e:	46c0      	nop			@ (mov r8, r8)
 800c190:	46bd      	mov	sp, r7
 800c192:	b01d      	add	sp, #116	@ 0x74
 800c194:	bd90      	pop	{r4, r7, pc}
 800c196:	46c0      	nop			@ (mov r8, r8)
 800c198:	40007000 	.word	0x40007000
 800c19c:	ffffe7ff 	.word	0xffffe7ff
 800c1a0:	40021000 	.word	0x40021000

0800c1a4 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c1a8:	4b34      	ldr	r3, [pc, #208]	@ (800c27c <check_cli_command+0xd8>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	3b61      	subs	r3, #97	@ 0x61
 800c1ae:	2b13      	cmp	r3, #19
 800c1b0:	d833      	bhi.n	800c21a <check_cli_command+0x76>
 800c1b2:	009a      	lsls	r2, r3, #2
 800c1b4:	4b32      	ldr	r3, [pc, #200]	@ (800c280 <check_cli_command+0xdc>)
 800c1b6:	18d3      	adds	r3, r2, r3
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c1bc:	4b31      	ldr	r3, [pc, #196]	@ (800c284 <check_cli_command+0xe0>)
 800c1be:	0018      	movs	r0, r3
 800c1c0:	f018 fd56 	bl	8024c70 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c1c4:	2003      	movs	r0, #3
 800c1c6:	f006 fce5 	bl	8012b94 <SetVerboseLevel>
      break;
 800c1ca:	e051      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c1cc:	f7fb ffee 	bl	80081ac <PC_show_Keys>
    break;
 800c1d0:	e04e      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c1d2:	f7f8 f95d 	bl	8004490 <forceNTPupdate>
    break;
 800c1d6:	e04b      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c1d8:	4b2b      	ldr	r3, [pc, #172]	@ (800c288 <check_cli_command+0xe4>)
 800c1da:	0018      	movs	r0, r3
 800c1dc:	f018 fd48 	bl	8024c70 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c1e0:	2002      	movs	r0, #2
 800c1e2:	f006 fcd7 	bl	8012b94 <SetVerboseLevel>
      break;
 800c1e6:	e043      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c1e8:	4b28      	ldr	r3, [pc, #160]	@ (800c28c <check_cli_command+0xe8>)
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f018 fd40 	bl	8024c70 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	f006 fccf 	bl	8012b94 <SetVerboseLevel>
      break;
 800c1f6:	e03b      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c1f8:	4b25      	ldr	r3, [pc, #148]	@ (800c290 <check_cli_command+0xec>)
 800c1fa:	0018      	movs	r0, r3
 800c1fc:	f018 fd38 	bl	8024c70 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c200:	2000      	movs	r0, #0
 800c202:	f006 fcc7 	bl	8012b94 <SetVerboseLevel>
      break;
 800c206:	e033      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c208:	f007 f990 	bl	801352c <HAL_GetTick>
 800c20c:	0002      	movs	r2, r0
 800c20e:	4b21      	ldr	r3, [pc, #132]	@ (800c294 <check_cli_command+0xf0>)
 800c210:	601a      	str	r2, [r3, #0]
      break;
 800c212:	e02d      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c214:	f7fc fe66 	bl	8008ee4 <showTime>
      break;
 800c218:	e02a      	b.n	800c270 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800c21a:	4a1f      	ldr	r2, [pc, #124]	@ (800c298 <check_cli_command+0xf4>)
 800c21c:	4b1f      	ldr	r3, [pc, #124]	@ (800c29c <check_cli_command+0xf8>)
 800c21e:	0019      	movs	r1, r3
 800c220:	2001      	movs	r0, #1
 800c222:	f006 fc4d 	bl	8012ac0 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800c226:	4b1e      	ldr	r3, [pc, #120]	@ (800c2a0 <check_cli_command+0xfc>)
 800c228:	0018      	movs	r0, r3
 800c22a:	f018 fd21 	bl	8024c70 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800c22e:	4b1d      	ldr	r3, [pc, #116]	@ (800c2a4 <check_cli_command+0x100>)
 800c230:	0018      	movs	r0, r3
 800c232:	f018 fd1d 	bl	8024c70 <puts>
      printf("e - show EEPROM\r\n");
 800c236:	4b1c      	ldr	r3, [pc, #112]	@ (800c2a8 <check_cli_command+0x104>)
 800c238:	0018      	movs	r0, r3
 800c23a:	f018 fd19 	bl	8024c70 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800c23e:	4b1b      	ldr	r3, [pc, #108]	@ (800c2ac <check_cli_command+0x108>)
 800c240:	0018      	movs	r0, r3
 800c242:	f018 fd15 	bl	8024c70 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800c246:	4b1a      	ldr	r3, [pc, #104]	@ (800c2b0 <check_cli_command+0x10c>)
 800c248:	0018      	movs	r0, r3
 800c24a:	f018 fd11 	bl	8024c70 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800c24e:	4b19      	ldr	r3, [pc, #100]	@ (800c2b4 <check_cli_command+0x110>)
 800c250:	0018      	movs	r0, r3
 800c252:	f018 fd0d 	bl	8024c70 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800c256:	4b18      	ldr	r3, [pc, #96]	@ (800c2b8 <check_cli_command+0x114>)
 800c258:	0018      	movs	r0, r3
 800c25a:	f018 fd09 	bl	8024c70 <puts>
      printf("s - Start particle measurement\r\n");
 800c25e:	4b17      	ldr	r3, [pc, #92]	@ (800c2bc <check_cli_command+0x118>)
 800c260:	0018      	movs	r0, r3
 800c262:	f018 fd05 	bl	8024c70 <puts>
      printf("t - Show actual systemtime\r\n");
 800c266:	4b16      	ldr	r3, [pc, #88]	@ (800c2c0 <check_cli_command+0x11c>)
 800c268:	0018      	movs	r0, r3
 800c26a:	f018 fd01 	bl	8024c70 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800c26e:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800c270:	4b02      	ldr	r3, [pc, #8]	@ (800c27c <check_cli_command+0xd8>)
 800c272:	2200      	movs	r2, #0
 800c274:	701a      	strb	r2, [r3, #0]
}
 800c276:	46c0      	nop			@ (mov r8, r8)
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	20000e2c 	.word	0x20000e2c
 800c280:	0802d1c0 	.word	0x0802d1c0
 800c284:	0802b9d4 	.word	0x0802b9d4
 800c288:	0802b9f0 	.word	0x0802b9f0
 800c28c:	0802ba0c 	.word	0x0802ba0c
 800c290:	0802ba2c 	.word	0x0802ba2c
 800c294:	20000ef4 	.word	0x20000ef4
 800c298:	0802ba48 	.word	0x0802ba48
 800c29c:	0802ba78 	.word	0x0802ba78
 800c2a0:	0802ba7c 	.word	0x0802ba7c
 800c2a4:	0802ba94 	.word	0x0802ba94
 800c2a8:	0802bab4 	.word	0x0802bab4
 800c2ac:	0802bac8 	.word	0x0802bac8
 800c2b0:	0802baec 	.word	0x0802baec
 800c2b4:	0802bb0c 	.word	0x0802bb0c
 800c2b8:	0802bb30 	.word	0x0802bb30
 800c2bc:	0802bb50 	.word	0x0802bb50
 800c2c0:	0802bb70 	.word	0x0802bb70

0800c2c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c2cc:	4907      	ldr	r1, [pc, #28]	@ (800c2ec <HAL_UART_RxCpltCallback+0x28>)
 800c2ce:	4b08      	ldr	r3, [pc, #32]	@ (800c2f0 <HAL_UART_RxCpltCallback+0x2c>)
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	f00f fe8e 	bl	801bff4 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800c2d8:	4904      	ldr	r1, [pc, #16]	@ (800c2ec <HAL_UART_RxCpltCallback+0x28>)
 800c2da:	4b05      	ldr	r3, [pc, #20]	@ (800c2f0 <HAL_UART_RxCpltCallback+0x2c>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	0018      	movs	r0, r3
 800c2e0:	f00f fe88 	bl	801bff4 <HAL_UART_Receive_IT>
}
 800c2e4:	46c0      	nop			@ (mov r8, r8)
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b002      	add	sp, #8
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20000e2c 	.word	0x20000e2c
 800c2f0:	2000200c 	.word	0x2000200c

0800c2f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	0002      	movs	r2, r0
 800c2fc:	1dbb      	adds	r3, r7, #6
 800c2fe:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800c300:	1dbb      	adds	r3, r7, #6
 800c302:	881a      	ldrh	r2, [r3, #0]
 800c304:	2380      	movs	r3, #128	@ 0x80
 800c306:	021b      	lsls	r3, r3, #8
 800c308:	429a      	cmp	r2, r3
 800c30a:	d10b      	bne.n	800c324 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800c30c:	f005 fe7e 	bl	801200c <setuserToggle>
    if (GetPMSensorPresence()) {
 800c310:	f000 f860 	bl	800c3d4 <GetPMSensorPresence>
 800c314:	1e03      	subs	r3, r0, #0
 800c316:	d005      	beq.n	800c324 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800c318:	4b04      	ldr	r3, [pc, #16]	@ (800c32c <HAL_GPIO_EXTI_Callback+0x38>)
 800c31a:	2201      	movs	r2, #1
 800c31c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800c31e:	2000      	movs	r0, #0
 800c320:	f001 f86e 	bl	800d400 <sen5x_Set_sen5x_state>
    }
  }
}
 800c324:	46c0      	nop			@ (mov r8, r8)
 800c326:	46bd      	mov	sp, r7
 800c328:	b002      	add	sp, #8
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20000e44 	.word	0x20000e44

0800c330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800c334:	f005 fada 	bl	80118ec <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c338:	b672      	cpsid	i
}
 800c33a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800c33c:	4a05      	ldr	r2, [pc, #20]	@ (800c354 <Error_Handler+0x24>)
 800c33e:	4b06      	ldr	r3, [pc, #24]	@ (800c358 <Error_Handler+0x28>)
 800c340:	0019      	movs	r1, r3
 800c342:	2001      	movs	r0, #1
 800c344:	f006 fbbc 	bl	8012ac0 <CreateLine>

    HAL_Delay(2500);
 800c348:	4b04      	ldr	r3, [pc, #16]	@ (800c35c <Error_Handler+0x2c>)
 800c34a:	0018      	movs	r0, r3
 800c34c:	f007 f8f8 	bl	8013540 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800c350:	46c0      	nop			@ (mov r8, r8)
 800c352:	e7f3      	b.n	800c33c <Error_Handler+0xc>
 800c354:	0802bb8c 	.word	0x0802bb8c
 800c358:	0802ba78 	.word	0x0802ba78
 800c35c:	000009c4 	.word	0x000009c4

0800c360 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800c364:	4b19      	ldr	r3, [pc, #100]	@ (800c3cc <testInit+0x6c>)
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800c36a:	4b18      	ldr	r3, [pc, #96]	@ (800c3cc <testInit+0x6c>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800c370:	4b16      	ldr	r3, [pc, #88]	@ (800c3cc <testInit+0x6c>)
 800c372:	2200      	movs	r2, #0
 800c374:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800c376:	4b15      	ldr	r3, [pc, #84]	@ (800c3cc <testInit+0x6c>)
 800c378:	2200      	movs	r2, #0
 800c37a:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800c37c:	4b13      	ldr	r3, [pc, #76]	@ (800c3cc <testInit+0x6c>)
 800c37e:	2200      	movs	r2, #0
 800c380:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800c382:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <testInit+0x6c>)
 800c384:	2200      	movs	r2, #0
 800c386:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800c388:	4b10      	ldr	r3, [pc, #64]	@ (800c3cc <testInit+0x6c>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800c38e:	4b0f      	ldr	r3, [pc, #60]	@ (800c3cc <testInit+0x6c>)
 800c390:	2200      	movs	r2, #0
 800c392:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800c394:	4b0d      	ldr	r3, [pc, #52]	@ (800c3cc <testInit+0x6c>)
 800c396:	2200      	movs	r2, #0
 800c398:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800c39a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d0 <testInit+0x70>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c3d0 <testInit+0x70>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800c3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d0 <testInit+0x70>)
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800c3ac:	4b08      	ldr	r3, [pc, #32]	@ (800c3d0 <testInit+0x70>)
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800c3b2:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <testInit+0x70>)
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800c3b8:	4b05      	ldr	r3, [pc, #20]	@ (800c3d0 <testInit+0x70>)
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800c3be:	4b04      	ldr	r3, [pc, #16]	@ (800c3d0 <testInit+0x70>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	719a      	strb	r2, [r3, #6]
}
 800c3c4:	46c0      	nop			@ (mov r8, r8)
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	46c0      	nop			@ (mov r8, r8)
 800c3cc:	20000e4c 	.word	0x20000e4c
 800c3d0:	20000e44 	.word	0x20000e44

0800c3d4 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800c3d8:	4b02      	ldr	r3, [pc, #8]	@ (800c3e4 <GetPMSensorPresence+0x10>)
 800c3da:	795b      	ldrb	r3, [r3, #5]
}
 800c3dc:	0018      	movs	r0, r3
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	46c0      	nop			@ (mov r8, r8)
 800c3e4:	20000e4c 	.word	0x20000e4c

0800c3e8 <DisablePMSensor>:

void DisablePMSensor() {
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800c3ec:	4b02      	ldr	r3, [pc, #8]	@ (800c3f8 <DisablePMSensor+0x10>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	715a      	strb	r2, [r3, #5]
}
 800c3f2:	46c0      	nop			@ (mov r8, r8)
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000e4c 	.word	0x20000e4c

0800c3fc <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800c400:	4b02      	ldr	r3, [pc, #8]	@ (800c40c <IsAHT20SensorPresent+0x10>)
 800c402:	789b      	ldrb	r3, [r3, #2]
}
 800c404:	0018      	movs	r0, r3
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	46c0      	nop			@ (mov r8, r8)
 800c40c:	20000e4c 	.word	0x20000e4c

0800c410 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800c414:	4b02      	ldr	r3, [pc, #8]	@ (800c420 <IsBMP280SensorPresent+0x10>)
 800c416:	791b      	ldrb	r3, [r3, #4]
}
 800c418:	0018      	movs	r0, r3
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	46c0      	nop			@ (mov r8, r8)
 800c420:	20000e4c 	.word	0x20000e4c

0800c424 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800c428:	4b02      	ldr	r3, [pc, #8]	@ (800c434 <IsENS160SensorPresent+0x10>)
 800c42a:	78db      	ldrb	r3, [r3, #3]
}
 800c42c:	0018      	movs	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	46c0      	nop			@ (mov r8, r8)
 800c434:	20000e4c 	.word	0x20000e4c

0800c438 <IsSGPPresent>:

bool IsSGPPresent() {
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800c43c:	4b02      	ldr	r3, [pc, #8]	@ (800c448 <IsSGPPresent+0x10>)
 800c43e:	785b      	ldrb	r3, [r3, #1]
}
 800c440:	0018      	movs	r0, r3
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	46c0      	nop			@ (mov r8, r8)
 800c448:	20000e4c 	.word	0x20000e4c

0800c44c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	0002      	movs	r2, r0
 800c454:	1dfb      	adds	r3, r7, #7
 800c456:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800c458:	4b0b      	ldr	r3, [pc, #44]	@ (800c488 <SetVOCSensorDIS_ENA+0x3c>)
 800c45a:	1dfa      	adds	r2, r7, #7
 800c45c:	7812      	ldrb	r2, [r2, #0]
 800c45e:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800c460:	4b0a      	ldr	r3, [pc, #40]	@ (800c48c <SetVOCSensorDIS_ENA+0x40>)
 800c462:	1dfa      	adds	r2, r7, #7
 800c464:	7812      	ldrb	r2, [r2, #0]
 800c466:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800c468:	1dfb      	adds	r3, r7, #7
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <SetVOCSensorDIS_ENA+0x28>
 800c470:	4b07      	ldr	r3, [pc, #28]	@ (800c490 <SetVOCSensorDIS_ENA+0x44>)
 800c472:	e000      	b.n	800c476 <SetVOCSensorDIS_ENA+0x2a>
 800c474:	4b07      	ldr	r3, [pc, #28]	@ (800c494 <SetVOCSensorDIS_ENA+0x48>)
 800c476:	4a08      	ldr	r2, [pc, #32]	@ (800c498 <SetVOCSensorDIS_ENA+0x4c>)
 800c478:	4908      	ldr	r1, [pc, #32]	@ (800c49c <SetVOCSensorDIS_ENA+0x50>)
 800c47a:	2003      	movs	r0, #3
 800c47c:	f006 fb20 	bl	8012ac0 <CreateLine>
}
 800c480:	46c0      	nop			@ (mov r8, r8)
 800c482:	46bd      	mov	sp, r7
 800c484:	b002      	add	sp, #8
 800c486:	bd80      	pop	{r7, pc}
 800c488:	20000e4c 	.word	0x20000e4c
 800c48c:	20000e44 	.word	0x20000e44
 800c490:	0802bbb8 	.word	0x0802bbb8
 800c494:	0802bbc0 	.word	0x0802bbc0
 800c498:	0802bbcc 	.word	0x0802bbcc
 800c49c:	0802bbe0 	.word	0x0802bbe0

0800c4a0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800c4a4:	4b02      	ldr	r3, [pc, #8]	@ (800c4b0 <IsPMSensorEnabled+0x10>)
 800c4a6:	789b      	ldrb	r3, [r3, #2]
}
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	46c0      	nop			@ (mov r8, r8)
 800c4b0:	20000e44 	.word	0x20000e44

0800c4b4 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	0002      	movs	r2, r0
 800c4bc:	1dfb      	adds	r3, r7, #7
 800c4be:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800c4c0:	4b05      	ldr	r3, [pc, #20]	@ (800c4d8 <SetVOCSensorStatus+0x24>)
 800c4c2:	7a1b      	ldrb	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d003      	beq.n	800c4d0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800c4c8:	4b04      	ldr	r3, [pc, #16]	@ (800c4dc <SetVOCSensorStatus+0x28>)
 800c4ca:	1dfa      	adds	r2, r7, #7
 800c4cc:	7812      	ldrb	r2, [r2, #0]
 800c4ce:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800c4d0:	46c0      	nop			@ (mov r8, r8)
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	b002      	add	sp, #8
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	20000e4c 	.word	0x20000e4c
 800c4dc:	20000e44 	.word	0x20000e44

0800c4e0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	0002      	movs	r2, r0
 800c4e8:	1dfb      	adds	r3, r7, #7
 800c4ea:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800c4ec:	4b03      	ldr	r3, [pc, #12]	@ (800c4fc <SetPMSensorStatus+0x1c>)
 800c4ee:	1dfa      	adds	r2, r7, #7
 800c4f0:	7812      	ldrb	r2, [r2, #0]
 800c4f2:	709a      	strb	r2, [r3, #2]
}
 800c4f4:	46c0      	nop			@ (mov r8, r8)
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	b002      	add	sp, #8
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20000e44 	.word	0x20000e44

0800c500 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800c504:	4b02      	ldr	r3, [pc, #8]	@ (800c510 <SetESPMeasurementDone+0x10>)
 800c506:	2201      	movs	r2, #1
 800c508:	71da      	strb	r2, [r3, #7]
}
 800c50a:	46c0      	nop			@ (mov r8, r8)
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000e4c 	.word	0x20000e4c

0800c514 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
  testInit();
 800c522:	f7ff ff1d 	bl	800c360 <testInit>
  I2CSensors_Init(sensorI2C);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	0018      	movs	r0, r3
 800c52a:	f7fb fa1f 	bl	800796c <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800c52e:	f006 fd91 	bl	8013054 <HIDS_DeviceConnected>
 800c532:	0003      	movs	r3, r0
 800c534:	001a      	movs	r2, r3
 800c536:	2301      	movs	r3, #1
 800c538:	4053      	eors	r3, r2
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00c      	beq.n	800c55a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800c540:	4abf      	ldr	r2, [pc, #764]	@ (800c840 <Device_Init+0x32c>)
 800c542:	4bc0      	ldr	r3, [pc, #768]	@ (800c844 <Device_Init+0x330>)
 800c544:	0019      	movs	r1, r3
 800c546:	2001      	movs	r0, #1
 800c548:	f006 faba 	bl	8012ac0 <CreateLine>
     SensorProbe.HT_Present = false;
 800c54c:	4bbe      	ldr	r3, [pc, #760]	@ (800c848 <Device_Init+0x334>)
 800c54e:	2200      	movs	r2, #0
 800c550:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800c552:	4bbe      	ldr	r3, [pc, #760]	@ (800c84c <Device_Init+0x338>)
 800c554:	2200      	movs	r2, #0
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	e008      	b.n	800c56c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800c55a:	4bbb      	ldr	r3, [pc, #748]	@ (800c848 <Device_Init+0x334>)
 800c55c:	2201      	movs	r2, #1
 800c55e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800c560:	4abb      	ldr	r2, [pc, #748]	@ (800c850 <Device_Init+0x33c>)
 800c562:	4bbc      	ldr	r3, [pc, #752]	@ (800c854 <Device_Init+0x340>)
 800c564:	0019      	movs	r1, r3
 800c566:	2003      	movs	r0, #3
 800c568:	f006 faaa 	bl	8012ac0 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800c56c:	f7fe fa08 	bl	800a980 <BMP280_DeviceConnected>
 800c570:	0003      	movs	r3, r0
 800c572:	001a      	movs	r2, r3
 800c574:	2301      	movs	r3, #1
 800c576:	4053      	eors	r3, r2
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00c      	beq.n	800c598 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800c57e:	4ab6      	ldr	r2, [pc, #728]	@ (800c858 <Device_Init+0x344>)
 800c580:	4bb0      	ldr	r3, [pc, #704]	@ (800c844 <Device_Init+0x330>)
 800c582:	0019      	movs	r1, r3
 800c584:	2001      	movs	r0, #1
 800c586:	f006 fa9b 	bl	8012ac0 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800c58a:	4baf      	ldr	r3, [pc, #700]	@ (800c848 <Device_Init+0x334>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800c590:	4bae      	ldr	r3, [pc, #696]	@ (800c84c <Device_Init+0x338>)
 800c592:	2200      	movs	r2, #0
 800c594:	715a      	strb	r2, [r3, #5]
 800c596:	e008      	b.n	800c5aa <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800c598:	4bab      	ldr	r3, [pc, #684]	@ (800c848 <Device_Init+0x334>)
 800c59a:	2201      	movs	r2, #1
 800c59c:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800c59e:	4aaf      	ldr	r2, [pc, #700]	@ (800c85c <Device_Init+0x348>)
 800c5a0:	4bac      	ldr	r3, [pc, #688]	@ (800c854 <Device_Init+0x340>)
 800c5a2:	0019      	movs	r1, r3
 800c5a4:	2003      	movs	r0, #3
 800c5a6:	f006 fa8b 	bl	8012ac0 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800c5aa:	f003 fcc9 	bl	800ff40 <SGP_DeviceConnected>
 800c5ae:	0003      	movs	r3, r0
 800c5b0:	001a      	movs	r2, r3
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4053      	eors	r3, r2
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00c      	beq.n	800c5d6 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800c5bc:	4ba2      	ldr	r3, [pc, #648]	@ (800c848 <Device_Init+0x334>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800c5c2:	4aa7      	ldr	r2, [pc, #668]	@ (800c860 <Device_Init+0x34c>)
 800c5c4:	4b9f      	ldr	r3, [pc, #636]	@ (800c844 <Device_Init+0x330>)
 800c5c6:	0019      	movs	r1, r3
 800c5c8:	2001      	movs	r0, #1
 800c5ca:	f006 fa79 	bl	8012ac0 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800c5ce:	4b9f      	ldr	r3, [pc, #636]	@ (800c84c <Device_Init+0x338>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	705a      	strb	r2, [r3, #1]
 800c5d4:	e00b      	b.n	800c5ee <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800c5d6:	4b9c      	ldr	r3, [pc, #624]	@ (800c848 <Device_Init+0x334>)
 800c5d8:	2201      	movs	r2, #1
 800c5da:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800c5dc:	4b9a      	ldr	r3, [pc, #616]	@ (800c848 <Device_Init+0x334>)
 800c5de:	2201      	movs	r2, #1
 800c5e0:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800c5e2:	4aa0      	ldr	r2, [pc, #640]	@ (800c864 <Device_Init+0x350>)
 800c5e4:	4b9b      	ldr	r3, [pc, #620]	@ (800c854 <Device_Init+0x340>)
 800c5e6:	0019      	movs	r1, r3
 800c5e8:	2003      	movs	r0, #3
 800c5ea:	f006 fa69 	bl	8012ac0 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800c5ee:	f7f7 fa25 	bl	8003a3c <ENS_DeviceConnected>
 800c5f2:	0003      	movs	r3, r0
 800c5f4:	001a      	movs	r2, r3
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	4053      	eors	r3, r2
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00c      	beq.n	800c61a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800c600:	4b91      	ldr	r3, [pc, #580]	@ (800c848 <Device_Init+0x334>)
 800c602:	2200      	movs	r2, #0
 800c604:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800c606:	4a98      	ldr	r2, [pc, #608]	@ (800c868 <Device_Init+0x354>)
 800c608:	4b8e      	ldr	r3, [pc, #568]	@ (800c844 <Device_Init+0x330>)
 800c60a:	0019      	movs	r1, r3
 800c60c:	2001      	movs	r0, #1
 800c60e:	f006 fa57 	bl	8012ac0 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800c612:	4b8e      	ldr	r3, [pc, #568]	@ (800c84c <Device_Init+0x338>)
 800c614:	2200      	movs	r2, #0
 800c616:	719a      	strb	r2, [r3, #6]
 800c618:	e008      	b.n	800c62c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800c61a:	4b8b      	ldr	r3, [pc, #556]	@ (800c848 <Device_Init+0x334>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800c620:	4a92      	ldr	r2, [pc, #584]	@ (800c86c <Device_Init+0x358>)
 800c622:	4b8c      	ldr	r3, [pc, #560]	@ (800c854 <Device_Init+0x340>)
 800c624:	0019      	movs	r1, r3
 800c626:	2003      	movs	r0, #3
 800c628:	f006 fa4a 	bl	8012ac0 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800c62c:	f7fd fcdc 	bl	8009fe8 <AHT20_DeviceConnected>
 800c630:	0003      	movs	r3, r0
 800c632:	001a      	movs	r2, r3
 800c634:	2301      	movs	r3, #1
 800c636:	4053      	eors	r3, r2
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00c      	beq.n	800c658 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800c63e:	4a8c      	ldr	r2, [pc, #560]	@ (800c870 <Device_Init+0x35c>)
 800c640:	4b80      	ldr	r3, [pc, #512]	@ (800c844 <Device_Init+0x330>)
 800c642:	0019      	movs	r1, r3
 800c644:	2001      	movs	r0, #1
 800c646:	f006 fa3b 	bl	8012ac0 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800c64a:	4b7f      	ldr	r3, [pc, #508]	@ (800c848 <Device_Init+0x334>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800c650:	4b7e      	ldr	r3, [pc, #504]	@ (800c84c <Device_Init+0x338>)
 800c652:	2200      	movs	r2, #0
 800c654:	711a      	strb	r2, [r3, #4]
 800c656:	e008      	b.n	800c66a <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800c658:	4b7b      	ldr	r3, [pc, #492]	@ (800c848 <Device_Init+0x334>)
 800c65a:	2201      	movs	r2, #1
 800c65c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800c65e:	4a85      	ldr	r2, [pc, #532]	@ (800c874 <Device_Init+0x360>)
 800c660:	4b7c      	ldr	r3, [pc, #496]	@ (800c854 <Device_Init+0x340>)
 800c662:	0019      	movs	r1, r3
 800c664:	2003      	movs	r0, #3
 800c666:	f006 fa2b 	bl	8012ac0 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800c66a:	4b77      	ldr	r3, [pc, #476]	@ (800c848 <Device_Init+0x334>)
 800c66c:	785b      	ldrb	r3, [r3, #1]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d009      	beq.n	800c686 <Device_Init+0x172>
 800c672:	4b75      	ldr	r3, [pc, #468]	@ (800c848 <Device_Init+0x334>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d005      	beq.n	800c686 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800c67a:	2200      	movs	r2, #0
 800c67c:	2101      	movs	r1, #1
 800c67e:	2000      	movs	r0, #0
 800c680:	f004 ff8e 	bl	80115a0 <SetDBLED>
 800c684:	e018      	b.n	800c6b8 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800c686:	2200      	movs	r2, #0
 800c688:	2100      	movs	r1, #0
 800c68a:	2001      	movs	r0, #1
 800c68c:	f004 ff88 	bl	80115a0 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800c690:	4b79      	ldr	r3, [pc, #484]	@ (800c878 <Device_Init+0x364>)
 800c692:	2200      	movs	r2, #0
 800c694:	2101      	movs	r1, #1
 800c696:	0018      	movs	r0, r3
 800c698:	f008 f9d9 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800c69c:	2380      	movs	r3, #128	@ 0x80
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	4875      	ldr	r0, [pc, #468]	@ (800c878 <Device_Init+0x364>)
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	0019      	movs	r1, r3
 800c6a6:	f008 f9d2 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800c6aa:	2380      	movs	r3, #128	@ 0x80
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4872      	ldr	r0, [pc, #456]	@ (800c878 <Device_Init+0x364>)
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	0019      	movs	r1, r3
 800c6b4:	f008 f9cb 	bl	8014a4e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800c6b8:	4b64      	ldr	r3, [pc, #400]	@ (800c84c <Device_Init+0x338>)
 800c6ba:	78db      	ldrb	r3, [r3, #3]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d028      	beq.n	800c712 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800c6c0:	4a6e      	ldr	r2, [pc, #440]	@ (800c87c <Device_Init+0x368>)
 800c6c2:	4b6f      	ldr	r3, [pc, #444]	@ (800c880 <Device_Init+0x36c>)
 800c6c4:	0019      	movs	r1, r3
 800c6c6:	2002      	movs	r0, #2
 800c6c8:	f006 f9fa 	bl	8012ac0 <CreateLine>
    if (!enableMicrophone(true)) {
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	f004 f865 	bl	801079c <enableMicrophone>
 800c6d2:	0003      	movs	r3, r0
 800c6d4:	001a      	movs	r2, r3
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4053      	eors	r3, r2
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00c      	beq.n	800c6fa <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800c6e0:	4a68      	ldr	r2, [pc, #416]	@ (800c884 <Device_Init+0x370>)
 800c6e2:	4b58      	ldr	r3, [pc, #352]	@ (800c844 <Device_Init+0x330>)
 800c6e4:	0019      	movs	r1, r3
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	f006 f9ea 	bl	8012ac0 <CreateLine>
      SensorProbe.MIC_Present = false;
 800c6ec:	4b56      	ldr	r3, [pc, #344]	@ (800c848 <Device_Init+0x334>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800c6f2:	4b56      	ldr	r3, [pc, #344]	@ (800c84c <Device_Init+0x338>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	70da      	strb	r2, [r3, #3]
 800c6f8:	e00b      	b.n	800c712 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800c6fa:	4b53      	ldr	r3, [pc, #332]	@ (800c848 <Device_Init+0x334>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800c700:	4b52      	ldr	r3, [pc, #328]	@ (800c84c <Device_Init+0x338>)
 800c702:	2201      	movs	r2, #1
 800c704:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800c706:	4a60      	ldr	r2, [pc, #384]	@ (800c888 <Device_Init+0x374>)
 800c708:	4b52      	ldr	r3, [pc, #328]	@ (800c854 <Device_Init+0x340>)
 800c70a:	0019      	movs	r1, r3
 800c70c:	2003      	movs	r0, #3
 800c70e:	f006 f9d7 	bl	8012ac0 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800c712:	f000 ff69 	bl	800d5e8 <probe_sen5x>
 800c716:	1e03      	subs	r3, r0, #0
 800c718:	d122      	bne.n	800c760 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800c71a:	4a5c      	ldr	r2, [pc, #368]	@ (800c88c <Device_Init+0x378>)
 800c71c:	4b4d      	ldr	r3, [pc, #308]	@ (800c854 <Device_Init+0x340>)
 800c71e:	0019      	movs	r1, r3
 800c720:	2003      	movs	r0, #3
 800c722:	f006 f9cd 	bl	8012ac0 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800c726:	4b48      	ldr	r3, [pc, #288]	@ (800c848 <Device_Init+0x334>)
 800c728:	2201      	movs	r2, #1
 800c72a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800c72c:	4b47      	ldr	r3, [pc, #284]	@ (800c84c <Device_Init+0x338>)
 800c72e:	2201      	movs	r2, #1
 800c730:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800c732:	4b57      	ldr	r3, [pc, #348]	@ (800c890 <Device_Init+0x37c>)
 800c734:	791b      	ldrb	r3, [r3, #4]
 800c736:	2b34      	cmp	r3, #52	@ 0x34
 800c738:	d003      	beq.n	800c742 <Device_Init+0x22e>
 800c73a:	4b55      	ldr	r3, [pc, #340]	@ (800c890 <Device_Init+0x37c>)
 800c73c:	791b      	ldrb	r3, [r3, #4]
 800c73e:	2b35      	cmp	r3, #53	@ 0x35
 800c740:	d11c      	bne.n	800c77c <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800c742:	4a54      	ldr	r2, [pc, #336]	@ (800c894 <Device_Init+0x380>)
 800c744:	4b4e      	ldr	r3, [pc, #312]	@ (800c880 <Device_Init+0x36c>)
 800c746:	0019      	movs	r1, r3
 800c748:	2002      	movs	r0, #2
 800c74a:	f006 f9b9 	bl	8012ac0 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800c74e:	4b3f      	ldr	r3, [pc, #252]	@ (800c84c <Device_Init+0x338>)
 800c750:	2200      	movs	r2, #0
 800c752:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800c754:	4b3c      	ldr	r3, [pc, #240]	@ (800c848 <Device_Init+0x334>)
 800c756:	2200      	movs	r2, #0
 800c758:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800c75a:	f003 fdd5 	bl	8010308 <SGP_SoftReset>
 800c75e:	e00d      	b.n	800c77c <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800c760:	f000 ff0c 	bl	800d57c <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800c764:	4a4c      	ldr	r2, [pc, #304]	@ (800c898 <Device_Init+0x384>)
 800c766:	4b3b      	ldr	r3, [pc, #236]	@ (800c854 <Device_Init+0x340>)
 800c768:	0019      	movs	r1, r3
 800c76a:	2003      	movs	r0, #3
 800c76c:	f006 f9a8 	bl	8012ac0 <CreateLine>
    SensorProbe.PM_Present = false;
 800c770:	4b35      	ldr	r3, [pc, #212]	@ (800c848 <Device_Init+0x334>)
 800c772:	2200      	movs	r2, #0
 800c774:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800c776:	4b35      	ldr	r3, [pc, #212]	@ (800c84c <Device_Init+0x338>)
 800c778:	2200      	movs	r2, #0
 800c77a:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800c77c:	4b32      	ldr	r3, [pc, #200]	@ (800c848 <Device_Init+0x334>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <Device_Init+0x274>
 800c784:	4b45      	ldr	r3, [pc, #276]	@ (800c89c <Device_Init+0x388>)
 800c786:	e000      	b.n	800c78a <Device_Init+0x276>
 800c788:	4b45      	ldr	r3, [pc, #276]	@ (800c8a0 <Device_Init+0x38c>)
 800c78a:	4a46      	ldr	r2, [pc, #280]	@ (800c8a4 <Device_Init+0x390>)
 800c78c:	493c      	ldr	r1, [pc, #240]	@ (800c880 <Device_Init+0x36c>)
 800c78e:	2002      	movs	r0, #2
 800c790:	f006 f996 	bl	8012ac0 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800c794:	4b2c      	ldr	r3, [pc, #176]	@ (800c848 <Device_Init+0x334>)
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <Device_Init+0x28c>
 800c79c:	4b3f      	ldr	r3, [pc, #252]	@ (800c89c <Device_Init+0x388>)
 800c79e:	e000      	b.n	800c7a2 <Device_Init+0x28e>
 800c7a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c8a0 <Device_Init+0x38c>)
 800c7a2:	4a41      	ldr	r2, [pc, #260]	@ (800c8a8 <Device_Init+0x394>)
 800c7a4:	4936      	ldr	r1, [pc, #216]	@ (800c880 <Device_Init+0x36c>)
 800c7a6:	2002      	movs	r0, #2
 800c7a8:	f006 f98a 	bl	8012ac0 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800c7ac:	4b26      	ldr	r3, [pc, #152]	@ (800c848 <Device_Init+0x334>)
 800c7ae:	789b      	ldrb	r3, [r3, #2]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d001      	beq.n	800c7b8 <Device_Init+0x2a4>
 800c7b4:	4b39      	ldr	r3, [pc, #228]	@ (800c89c <Device_Init+0x388>)
 800c7b6:	e000      	b.n	800c7ba <Device_Init+0x2a6>
 800c7b8:	4b39      	ldr	r3, [pc, #228]	@ (800c8a0 <Device_Init+0x38c>)
 800c7ba:	4a3c      	ldr	r2, [pc, #240]	@ (800c8ac <Device_Init+0x398>)
 800c7bc:	4930      	ldr	r1, [pc, #192]	@ (800c880 <Device_Init+0x36c>)
 800c7be:	2002      	movs	r0, #2
 800c7c0:	f006 f97e 	bl	8012ac0 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800c7c4:	4b20      	ldr	r3, [pc, #128]	@ (800c848 <Device_Init+0x334>)
 800c7c6:	791b      	ldrb	r3, [r3, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <Device_Init+0x2bc>
 800c7cc:	4b33      	ldr	r3, [pc, #204]	@ (800c89c <Device_Init+0x388>)
 800c7ce:	e000      	b.n	800c7d2 <Device_Init+0x2be>
 800c7d0:	4b33      	ldr	r3, [pc, #204]	@ (800c8a0 <Device_Init+0x38c>)
 800c7d2:	4a37      	ldr	r2, [pc, #220]	@ (800c8b0 <Device_Init+0x39c>)
 800c7d4:	492a      	ldr	r1, [pc, #168]	@ (800c880 <Device_Init+0x36c>)
 800c7d6:	2002      	movs	r0, #2
 800c7d8:	f006 f972 	bl	8012ac0 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800c7dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c848 <Device_Init+0x334>)
 800c7de:	78db      	ldrb	r3, [r3, #3]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <Device_Init+0x2d4>
 800c7e4:	4b2d      	ldr	r3, [pc, #180]	@ (800c89c <Device_Init+0x388>)
 800c7e6:	e000      	b.n	800c7ea <Device_Init+0x2d6>
 800c7e8:	4b2d      	ldr	r3, [pc, #180]	@ (800c8a0 <Device_Init+0x38c>)
 800c7ea:	4a32      	ldr	r2, [pc, #200]	@ (800c8b4 <Device_Init+0x3a0>)
 800c7ec:	4924      	ldr	r1, [pc, #144]	@ (800c880 <Device_Init+0x36c>)
 800c7ee:	2002      	movs	r0, #2
 800c7f0:	f006 f966 	bl	8012ac0 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800c7f4:	4b14      	ldr	r3, [pc, #80]	@ (800c848 <Device_Init+0x334>)
 800c7f6:	795b      	ldrb	r3, [r3, #5]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <Device_Init+0x2ec>
 800c7fc:	4b27      	ldr	r3, [pc, #156]	@ (800c89c <Device_Init+0x388>)
 800c7fe:	e000      	b.n	800c802 <Device_Init+0x2ee>
 800c800:	4b27      	ldr	r3, [pc, #156]	@ (800c8a0 <Device_Init+0x38c>)
 800c802:	4a2d      	ldr	r2, [pc, #180]	@ (800c8b8 <Device_Init+0x3a4>)
 800c804:	491e      	ldr	r1, [pc, #120]	@ (800c880 <Device_Init+0x36c>)
 800c806:	2002      	movs	r0, #2
 800c808:	f006 f95a 	bl	8012ac0 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800c80c:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <Device_Init+0x334>)
 800c80e:	799b      	ldrb	r3, [r3, #6]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <Device_Init+0x304>
 800c814:	4b21      	ldr	r3, [pc, #132]	@ (800c89c <Device_Init+0x388>)
 800c816:	e000      	b.n	800c81a <Device_Init+0x306>
 800c818:	4b21      	ldr	r3, [pc, #132]	@ (800c8a0 <Device_Init+0x38c>)
 800c81a:	4a28      	ldr	r2, [pc, #160]	@ (800c8bc <Device_Init+0x3a8>)
 800c81c:	4918      	ldr	r1, [pc, #96]	@ (800c880 <Device_Init+0x36c>)
 800c81e:	2002      	movs	r0, #2
 800c820:	f006 f94e 	bl	8012ac0 <CreateLine>
  ESP_Init(espUart);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	0018      	movs	r0, r3
 800c828:	f7f8 f91e 	bl	8004a68 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800c82c:	4a24      	ldr	r2, [pc, #144]	@ (800c8c0 <Device_Init+0x3ac>)
 800c82e:	4b09      	ldr	r3, [pc, #36]	@ (800c854 <Device_Init+0x340>)
 800c830:	0019      	movs	r1, r3
 800c832:	2003      	movs	r0, #3
 800c834:	f006 f944 	bl	8012ac0 <CreateLine>
}
 800c838:	46c0      	nop			@ (mov r8, r8)
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b004      	add	sp, #16
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	0802bbe4 	.word	0x0802bbe4
 800c844:	0802bc14 	.word	0x0802bc14
 800c848:	20000e4c 	.word	0x20000e4c
 800c84c:	20000e44 	.word	0x20000e44
 800c850:	0802bc18 	.word	0x0802bc18
 800c854:	0802bbe0 	.word	0x0802bbe0
 800c858:	0802bc44 	.word	0x0802bc44
 800c85c:	0802bc78 	.word	0x0802bc78
 800c860:	0802bca8 	.word	0x0802bca8
 800c864:	0802bcc4 	.word	0x0802bcc4
 800c868:	0802bcdc 	.word	0x0802bcdc
 800c86c:	0802bcf8 	.word	0x0802bcf8
 800c870:	0802bd10 	.word	0x0802bd10
 800c874:	0802bd44 	.word	0x0802bd44
 800c878:	50000400 	.word	0x50000400
 800c87c:	0802bd78 	.word	0x0802bd78
 800c880:	0802bd9c 	.word	0x0802bd9c
 800c884:	0802bda0 	.word	0x0802bda0
 800c888:	0802bdcc 	.word	0x0802bdcc
 800c88c:	0802bdf8 	.word	0x0802bdf8
 800c890:	20000ee8 	.word	0x20000ee8
 800c894:	0802be10 	.word	0x0802be10
 800c898:	0802be60 	.word	0x0802be60
 800c89c:	0802be84 	.word	0x0802be84
 800c8a0:	0802be88 	.word	0x0802be88
 800c8a4:	0802be8c 	.word	0x0802be8c
 800c8a8:	0802bea8 	.word	0x0802bea8
 800c8ac:	0802bec4 	.word	0x0802bec4
 800c8b0:	0802bee4 	.word	0x0802bee4
 800c8b4:	0802bf04 	.word	0x0802bf04
 800c8b8:	0802bf24 	.word	0x0802bf24
 800c8bc:	0802bf40 	.word	0x0802bf40
 800c8c0:	0802bf5c 	.word	0x0802bf5c

0800c8c4 <Device_Test>:

void Device_Test(){
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800c8c8:	4b34      	ldr	r3, [pc, #208]	@ (800c99c <Device_Test+0xd8>)
 800c8ca:	799b      	ldrb	r3, [r3, #6]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	4053      	eors	r3, r2
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d027      	beq.n	800c926 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800c8d6:	f000 fbb7 	bl	800d048 <MIC_TestMeasurementDone>
 800c8da:	1e03      	subs	r3, r0, #0
 800c8dc:	d011      	beq.n	800c902 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800c8de:	4b2f      	ldr	r3, [pc, #188]	@ (800c99c <Device_Test+0xd8>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800c8e4:	4b2e      	ldr	r3, [pc, #184]	@ (800c9a0 <Device_Test+0xdc>)
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800c8ea:	f004 fddd 	bl	80114a8 <Calculate_LED_ON>
 800c8ee:	0003      	movs	r3, r0
 800c8f0:	0019      	movs	r1, r3
 800c8f2:	23fa      	movs	r3, #250	@ 0xfa
 800c8f4:	011a      	lsls	r2, r3, #4
 800c8f6:	23fa      	movs	r3, #250	@ 0xfa
 800c8f8:	011b      	lsls	r3, r3, #4
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	f004 fe1c 	bl	8011538 <SetStatusLED>
 800c900:	e011      	b.n	800c926 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800c902:	f003 ff27 	bl	8010754 <micSettlingComplete>
 800c906:	1e03      	subs	r3, r0, #0
 800c908:	d00d      	beq.n	800c926 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800c90a:	4b25      	ldr	r3, [pc, #148]	@ (800c9a0 <Device_Test+0xdc>)
 800c90c:	2201      	movs	r2, #1
 800c90e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800c910:	f004 fdca 	bl	80114a8 <Calculate_LED_ON>
 800c914:	0003      	movs	r3, r0
 800c916:	0018      	movs	r0, r3
 800c918:	23fa      	movs	r3, #250	@ 0xfa
 800c91a:	011a      	lsls	r2, r3, #4
 800c91c:	23fa      	movs	r3, #250	@ 0xfa
 800c91e:	011b      	lsls	r3, r3, #4
 800c920:	0019      	movs	r1, r3
 800c922:	f004 fe09 	bl	8011538 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800c926:	4b1d      	ldr	r3, [pc, #116]	@ (800c99c <Device_Test+0xd8>)
 800c928:	79db      	ldrb	r3, [r3, #7]
 800c92a:	2201      	movs	r2, #1
 800c92c:	4053      	eors	r3, r2
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800c934:	f7fa fa38 	bl	8006da8 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800c938:	4b18      	ldr	r3, [pc, #96]	@ (800c99c <Device_Test+0xd8>)
 800c93a:	79db      	ldrb	r3, [r3, #7]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <Device_Test+0x84>
 800c940:	4b16      	ldr	r3, [pc, #88]	@ (800c99c <Device_Test+0xd8>)
 800c942:	799b      	ldrb	r3, [r3, #6]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <Device_Test+0x92>
 800c948:	4b16      	ldr	r3, [pc, #88]	@ (800c9a4 <Device_Test+0xe0>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	0018      	movs	r0, r3
 800c94e:	f006 f861 	bl	8012a14 <TimestampIsReached>
 800c952:	1e03      	subs	r3, r0, #0
 800c954:	d01f      	beq.n	800c996 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800c956:	4b11      	ldr	r3, [pc, #68]	@ (800c99c <Device_Test+0xd8>)
 800c958:	79db      	ldrb	r3, [r3, #7]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <Device_Test+0x9e>
 800c95e:	4b12      	ldr	r3, [pc, #72]	@ (800c9a8 <Device_Test+0xe4>)
 800c960:	e000      	b.n	800c964 <Device_Test+0xa0>
 800c962:	4b12      	ldr	r3, [pc, #72]	@ (800c9ac <Device_Test+0xe8>)
 800c964:	4a12      	ldr	r2, [pc, #72]	@ (800c9b0 <Device_Test+0xec>)
 800c966:	4913      	ldr	r1, [pc, #76]	@ (800c9b4 <Device_Test+0xf0>)
 800c968:	2002      	movs	r0, #2
 800c96a:	f006 f8a9 	bl	8012ac0 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800c96e:	4b0b      	ldr	r3, [pc, #44]	@ (800c99c <Device_Test+0xd8>)
 800c970:	799b      	ldrb	r3, [r3, #6]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <Device_Test+0xb6>
 800c976:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <Device_Test+0xe4>)
 800c978:	e000      	b.n	800c97c <Device_Test+0xb8>
 800c97a:	4b0c      	ldr	r3, [pc, #48]	@ (800c9ac <Device_Test+0xe8>)
 800c97c:	4a0e      	ldr	r2, [pc, #56]	@ (800c9b8 <Device_Test+0xf4>)
 800c97e:	490d      	ldr	r1, [pc, #52]	@ (800c9b4 <Device_Test+0xf0>)
 800c980:	2002      	movs	r0, #2
 800c982:	f006 f89d 	bl	8012ac0 <CreateLine>
    Info("Test completed");
 800c986:	4a0d      	ldr	r2, [pc, #52]	@ (800c9bc <Device_Test+0xf8>)
 800c988:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b4 <Device_Test+0xf0>)
 800c98a:	0019      	movs	r1, r3
 800c98c:	2002      	movs	r0, #2
 800c98e:	f006 f897 	bl	8012ac0 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800c992:	f7ff f901 	bl	800bb98 <SetTestDone>
  }
}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	20000e4c 	.word	0x20000e4c
 800c9a0:	20000e44 	.word	0x20000e44
 800c9a4:	20000e3c 	.word	0x20000e3c
 800c9a8:	0802bf80 	.word	0x0802bf80
 800c9ac:	0802bf88 	.word	0x0802bf88
 800c9b0:	0802bf90 	.word	0x0802bf90
 800c9b4:	0802bd9c 	.word	0x0802bd9c
 800c9b8:	0802bfa4 	.word	0x0802bfa4
 800c9bc:	0802bfb8 	.word	0x0802bfb8

0800c9c0 <AllDevicesReady>:

bool AllDevicesReady() {
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800c9c6:	4b56      	ldr	r3, [pc, #344]	@ (800cb20 <AllDevicesReady+0x160>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	0018      	movs	r0, r3
 800c9cc:	f006 f822 	bl	8012a14 <TimestampIsReached>
 800c9d0:	1e03      	subs	r3, r0, #0
 800c9d2:	d100      	bne.n	800c9d6 <AllDevicesReady+0x16>
 800c9d4:	e09f      	b.n	800cb16 <AllDevicesReady+0x156>
    if (!sensorsdisablereq) {
 800c9d6:	4b53      	ldr	r3, [pc, #332]	@ (800cb24 <AllDevicesReady+0x164>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	4053      	eors	r3, r2
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d008      	beq.n	800c9f6 <AllDevicesReady+0x36>
      Debug("Requesting all device ready");
 800c9e4:	4a50      	ldr	r2, [pc, #320]	@ (800cb28 <AllDevicesReady+0x168>)
 800c9e6:	4b51      	ldr	r3, [pc, #324]	@ (800cb2c <AllDevicesReady+0x16c>)
 800c9e8:	0019      	movs	r1, r3
 800c9ea:	2003      	movs	r0, #3
 800c9ec:	f006 f868 	bl	8012ac0 <CreateLine>
      sensorsdisablereq = true;
 800c9f0:	4b4c      	ldr	r3, [pc, #304]	@ (800cb24 <AllDevicesReady+0x164>)
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800c9f6:	4b4e      	ldr	r3, [pc, #312]	@ (800cb30 <AllDevicesReady+0x170>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b06      	cmp	r3, #6
 800c9fc:	d102      	bne.n	800ca04 <AllDevicesReady+0x44>
      Sensor.HT_measurementEnabled = false;
 800c9fe:	4b4d      	ldr	r3, [pc, #308]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800ca04:	4b4c      	ldr	r3, [pc, #304]	@ (800cb38 <AllDevicesReady+0x178>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b05      	cmp	r3, #5
 800ca0a:	d006      	beq.n	800ca1a <AllDevicesReady+0x5a>
 800ca0c:	4b4b      	ldr	r3, [pc, #300]	@ (800cb3c <AllDevicesReady+0x17c>)
 800ca0e:	789b      	ldrb	r3, [r3, #2]
 800ca10:	2201      	movs	r2, #1
 800ca12:	4053      	eors	r3, r2
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <AllDevicesReady+0x60>
      Sensor.AHT_measurementEnabled = false;
 800ca1a:	4b46      	ldr	r3, [pc, #280]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800ca20:	4b47      	ldr	r3, [pc, #284]	@ (800cb40 <AllDevicesReady+0x180>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d006      	beq.n	800ca36 <AllDevicesReady+0x76>
 800ca28:	4b44      	ldr	r3, [pc, #272]	@ (800cb3c <AllDevicesReady+0x17c>)
 800ca2a:	791b      	ldrb	r3, [r3, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	4053      	eors	r3, r2
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <AllDevicesReady+0x7c>
      Sensor.BMP_measurementEnabled = false;
 800ca36:	4b3f      	ldr	r3, [pc, #252]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800ca3c:	4b41      	ldr	r3, [pc, #260]	@ (800cb44 <AllDevicesReady+0x184>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d006      	beq.n	800ca52 <AllDevicesReady+0x92>
 800ca44:	4b3d      	ldr	r3, [pc, #244]	@ (800cb3c <AllDevicesReady+0x17c>)
 800ca46:	78db      	ldrb	r3, [r3, #3]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	4053      	eors	r3, r2
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <AllDevicesReady+0x98>
      Sensor.ENS_measurementEnabled = false;
 800ca52:	4b38      	ldr	r3, [pc, #224]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800ca58:	4b3b      	ldr	r3, [pc, #236]	@ (800cb48 <AllDevicesReady+0x188>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b07      	cmp	r3, #7
 800ca5e:	d006      	beq.n	800ca6e <AllDevicesReady+0xae>
 800ca60:	4b36      	ldr	r3, [pc, #216]	@ (800cb3c <AllDevicesReady+0x17c>)
 800ca62:	7a1b      	ldrb	r3, [r3, #8]
 800ca64:	2201      	movs	r2, #1
 800ca66:	4053      	eors	r3, r2
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <AllDevicesReady+0xb4>
      Sensor.VOC_measurementEnabled = false;
 800ca6e:	4b31      	ldr	r3, [pc, #196]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800ca74:	4b35      	ldr	r3, [pc, #212]	@ (800cb4c <AllDevicesReady+0x18c>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d003      	beq.n	800ca84 <AllDevicesReady+0xc4>
 800ca7c:	4b33      	ldr	r3, [pc, #204]	@ (800cb4c <AllDevicesReady+0x18c>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d102      	bne.n	800ca8a <AllDevicesReady+0xca>
      Sensor.PM_measurementEnabled = false;
 800ca84:	4b2b      	ldr	r3, [pc, #172]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800ca8a:	4b31      	ldr	r3, [pc, #196]	@ (800cb50 <AllDevicesReady+0x190>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b03      	cmp	r3, #3
 800ca90:	d102      	bne.n	800ca98 <AllDevicesReady+0xd8>
      Sensor.MIC_measurementEnabled = false;
 800ca92:	4b28      	ldr	r3, [pc, #160]	@ (800cb34 <AllDevicesReady+0x174>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800ca98:	4b2e      	ldr	r3, [pc, #184]	@ (800cb54 <AllDevicesReady+0x194>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b09      	cmp	r3, #9
 800ca9e:	d003      	beq.n	800caa8 <AllDevicesReady+0xe8>
 800caa0:	4b2c      	ldr	r3, [pc, #176]	@ (800cb54 <AllDevicesReady+0x194>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d136      	bne.n	800cb16 <AllDevicesReady+0x156>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800caa8:	4b22      	ldr	r3, [pc, #136]	@ (800cb34 <AllDevicesReady+0x174>)
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	4b21      	ldr	r3, [pc, #132]	@ (800cb34 <AllDevicesReady+0x174>)
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	4b1f      	ldr	r3, [pc, #124]	@ (800cb34 <AllDevicesReady+0x174>)
 800cab6:	791b      	ldrb	r3, [r3, #4]
 800cab8:	4313      	orrs	r3, r2
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	4b1d      	ldr	r3, [pc, #116]	@ (800cb34 <AllDevicesReady+0x174>)
 800cabe:	795b      	ldrb	r3, [r3, #5]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cac4:	4b1b      	ldr	r3, [pc, #108]	@ (800cb34 <AllDevicesReady+0x174>)
 800cac6:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cac8:	4313      	orrs	r3, r2
 800caca:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cacc:	4b19      	ldr	r3, [pc, #100]	@ (800cb34 <AllDevicesReady+0x174>)
 800cace:	789b      	ldrb	r3, [r3, #2]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	4b17      	ldr	r3, [pc, #92]	@ (800cb34 <AllDevicesReady+0x174>)
 800cad6:	78db      	ldrb	r3, [r3, #3]
 800cad8:	4313      	orrs	r3, r2
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	1e5a      	subs	r2, r3, #1
 800cade:	4193      	sbcs	r3, r2
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2201      	movs	r2, #1
 800cae4:	4053      	eors	r3, r2
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800caea:	1dfb      	adds	r3, r7, #7
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	2101      	movs	r1, #1
 800caf2:	400a      	ands	r2, r1
 800caf4:	701a      	strb	r2, [r3, #0]

      if (!status) {
 800caf6:	1dfb      	adds	r3, r7, #7
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2201      	movs	r2, #1
 800cafc:	4053      	eors	r3, r2
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d105      	bne.n	800cb10 <AllDevicesReady+0x150>
//        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
//          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled);
      }
      else {
        Debug("All sensors in wait");
 800cb04:	4a14      	ldr	r2, [pc, #80]	@ (800cb58 <AllDevicesReady+0x198>)
 800cb06:	4b09      	ldr	r3, [pc, #36]	@ (800cb2c <AllDevicesReady+0x16c>)
 800cb08:	0019      	movs	r1, r3
 800cb0a:	2003      	movs	r0, #3
 800cb0c:	f005 ffd8 	bl	8012ac0 <CreateLine>
      }

      return status;
 800cb10:	1dfb      	adds	r3, r7, #7
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	e000      	b.n	800cb18 <AllDevicesReady+0x158>
    }
  }
  return false;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	0018      	movs	r0, r3
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b002      	add	sp, #8
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20000e3c 	.word	0x20000e3c
 800cb24:	20000e5b 	.word	0x20000e5b
 800cb28:	0802bfc8 	.word	0x0802bfc8
 800cb2c:	0802bbe0 	.word	0x0802bbe0
 800cb30:	20000e57 	.word	0x20000e57
 800cb34:	20000e44 	.word	0x20000e44
 800cb38:	20000e58 	.word	0x20000e58
 800cb3c:	20000e4c 	.word	0x20000e4c
 800cb40:	20000e59 	.word	0x20000e59
 800cb44:	20000e5a 	.word	0x20000e5a
 800cb48:	20000e56 	.word	0x20000e56
 800cb4c:	2000009d 	.word	0x2000009d
 800cb50:	20000e28 	.word	0x20000e28
 800cb54:	20000e29 	.word	0x20000e29
 800cb58:	0802bfe4 	.word	0x0802bfe4

0800cb5c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800cb60:	4b23      	ldr	r3, [pc, #140]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800cb68:	4b22      	ldr	r3, [pc, #136]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800cb6e:	4b20      	ldr	r3, [pc, #128]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cb70:	789b      	ldrb	r3, [r3, #2]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800cb76:	4b1f      	ldr	r3, [pc, #124]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cb78:	2201      	movs	r2, #1
 800cb7a:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800cb7c:	4b1c      	ldr	r3, [pc, #112]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cb7e:	791b      	ldrb	r3, [r3, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800cb84:	4b1b      	ldr	r3, [pc, #108]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800cb8a:	4b19      	ldr	r3, [pc, #100]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cb8c:	78db      	ldrb	r3, [r3, #3]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d002      	beq.n	800cb98 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800cb92:	4b18      	ldr	r3, [pc, #96]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cb94:	2201      	movs	r2, #1
 800cb96:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800cb98:	4b15      	ldr	r3, [pc, #84]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d006      	beq.n	800cbae <EnabledConnectedDevices+0x52>
 800cba0:	4b13      	ldr	r3, [pc, #76]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cba2:	7a1b      	ldrb	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800cba8:	4b12      	ldr	r3, [pc, #72]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cbaa:	2201      	movs	r2, #1
 800cbac:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800cbae:	4b10      	ldr	r3, [pc, #64]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cbb0:	795b      	ldrb	r3, [r3, #5]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800cbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cbb8:	2201      	movs	r2, #1
 800cbba:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800cbbc:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf0 <EnabledConnectedDevices+0x94>)
 800cbbe:	799b      	ldrb	r3, [r3, #6]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800cbc4:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf4 <EnabledConnectedDevices+0x98>)
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800cbca:	f006 fcaf 	bl	801352c <HAL_GetTick>
 800cbce:	0003      	movs	r3, r0
 800cbd0:	4a09      	ldr	r2, [pc, #36]	@ (800cbf8 <EnabledConnectedDevices+0x9c>)
 800cbd2:	189a      	adds	r2, r3, r2
 800cbd4:	4b09      	ldr	r3, [pc, #36]	@ (800cbfc <EnabledConnectedDevices+0xa0>)
 800cbd6:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800cbd8:	4b09      	ldr	r3, [pc, #36]	@ (800cc00 <EnabledConnectedDevices+0xa4>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800cbde:	4a09      	ldr	r2, [pc, #36]	@ (800cc04 <EnabledConnectedDevices+0xa8>)
 800cbe0:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <EnabledConnectedDevices+0xac>)
 800cbe2:	0019      	movs	r1, r3
 800cbe4:	2003      	movs	r0, #3
 800cbe6:	f005 ff6b 	bl	8012ac0 <CreateLine>
}
 800cbea:	46c0      	nop			@ (mov r8, r8)
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20000e4c 	.word	0x20000e4c
 800cbf4:	20000e44 	.word	0x20000e44
 800cbf8:	00124f80 	.word	0x00124f80
 800cbfc:	20000e3c 	.word	0x20000e3c
 800cc00:	20000e5b 	.word	0x20000e5b
 800cc04:	0802bff8 	.word	0x0802bff8
 800cc08:	0802bbe0 	.word	0x0802bbe0

0800cc0c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800cc10:	4b0e      	ldr	r3, [pc, #56]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800cc16:	4b0d      	ldr	r3, [pc, #52]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800cc22:	4b0a      	ldr	r3, [pc, #40]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800cc28:	4b08      	ldr	r3, [pc, #32]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800cc2e:	4b07      	ldr	r3, [pc, #28]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800cc34:	4b05      	ldr	r3, [pc, #20]	@ (800cc4c <DisableConnectedDevices+0x40>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800cc3a:	4a05      	ldr	r2, [pc, #20]	@ (800cc50 <DisableConnectedDevices+0x44>)
 800cc3c:	4b05      	ldr	r3, [pc, #20]	@ (800cc54 <DisableConnectedDevices+0x48>)
 800cc3e:	0019      	movs	r1, r3
 800cc40:	2003      	movs	r0, #3
 800cc42:	f005 ff3d 	bl	8012ac0 <CreateLine>
}
 800cc46:	46c0      	nop			@ (mov r8, r8)
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20000e44 	.word	0x20000e44
 800cc50:	0802c008 	.word	0x0802c008
 800cc54:	0802bbe0 	.word	0x0802bbe0

0800cc58 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	0002      	movs	r2, r0
 800cc60:	1dfb      	adds	r3, r7, #7
 800cc62:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800cc64:	4b05      	ldr	r3, [pc, #20]	@ (800cc7c <setSensorLock+0x24>)
 800cc66:	1dfa      	adds	r2, r7, #7
 800cc68:	7812      	ldrb	r2, [r2, #0]
 800cc6a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800cc6c:	200a      	movs	r0, #10
 800cc6e:	f006 fc67 	bl	8013540 <HAL_Delay>
}
 800cc72:	46c0      	nop			@ (mov r8, r8)
 800cc74:	46bd      	mov	sp, r7
 800cc76:	b002      	add	sp, #8
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	46c0      	nop			@ (mov r8, r8)
 800cc7c:	20000e55 	.word	0x20000e55

0800cc80 <getSensorLock>:

uint8_t getSensorLock() {
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800cc84:	4b02      	ldr	r3, [pc, #8]	@ (800cc90 <getSensorLock+0x10>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
}
 800cc88:	0018      	movs	r0, r3
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	46c0      	nop			@ (mov r8, r8)
 800cc90:	20000e55 	.word	0x20000e55

0800cc94 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800cc98:	4b1a      	ldr	r3, [pc, #104]	@ (800cd04 <UpkeepI2Csensors+0x70>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d005      	beq.n	800ccac <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800cca0:	f006 faca 	bl	8013238 <HIDS_Upkeep>
 800cca4:	0003      	movs	r3, r0
 800cca6:	001a      	movs	r2, r3
 800cca8:	4b17      	ldr	r3, [pc, #92]	@ (800cd08 <UpkeepI2Csensors+0x74>)
 800ccaa:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800ccac:	4b15      	ldr	r3, [pc, #84]	@ (800cd04 <UpkeepI2Csensors+0x70>)
 800ccae:	785b      	ldrb	r3, [r3, #1]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800ccb4:	f003 fb4e 	bl	8010354 <SGP_Upkeep>
 800ccb8:	0003      	movs	r3, r0
 800ccba:	001a      	movs	r2, r3
 800ccbc:	4b13      	ldr	r3, [pc, #76]	@ (800cd0c <UpkeepI2Csensors+0x78>)
 800ccbe:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800ccc0:	4b10      	ldr	r3, [pc, #64]	@ (800cd04 <UpkeepI2Csensors+0x70>)
 800ccc2:	791b      	ldrb	r3, [r3, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d005      	beq.n	800ccd4 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800ccc8:	f7fd fb18 	bl	800a2fc <AHT_Upkeep>
 800cccc:	0003      	movs	r3, r0
 800ccce:	001a      	movs	r2, r3
 800ccd0:	4b0f      	ldr	r3, [pc, #60]	@ (800cd10 <UpkeepI2Csensors+0x7c>)
 800ccd2:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800ccd4:	4b0b      	ldr	r3, [pc, #44]	@ (800cd04 <UpkeepI2Csensors+0x70>)
 800ccd6:	795b      	ldrb	r3, [r3, #5]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d005      	beq.n	800cce8 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800ccdc:	f7fe f88e 	bl	800adfc <BMP_Upkeep>
 800cce0:	0003      	movs	r3, r0
 800cce2:	001a      	movs	r2, r3
 800cce4:	4b0b      	ldr	r3, [pc, #44]	@ (800cd14 <UpkeepI2Csensors+0x80>)
 800cce6:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800cce8:	4b06      	ldr	r3, [pc, #24]	@ (800cd04 <UpkeepI2Csensors+0x70>)
 800ccea:	799b      	ldrb	r3, [r3, #6]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d005      	beq.n	800ccfc <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800ccf0:	f7f7 f99a 	bl	8004028 <ENS_Upkeep>
 800ccf4:	0003      	movs	r3, r0
 800ccf6:	001a      	movs	r2, r3
 800ccf8:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <UpkeepI2Csensors+0x84>)
 800ccfa:	701a      	strb	r2, [r3, #0]
  }
}
 800ccfc:	46c0      	nop			@ (mov r8, r8)
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	46c0      	nop			@ (mov r8, r8)
 800cd04:	20000e44 	.word	0x20000e44
 800cd08:	20000e57 	.word	0x20000e57
 800cd0c:	20000e56 	.word	0x20000e56
 800cd10:	20000e58 	.word	0x20000e58
 800cd14:	20000e59 	.word	0x20000e59
 800cd18:	20000e5a 	.word	0x20000e5a

0800cd1c <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800cd20:	4b02      	ldr	r3, [pc, #8]	@ (800cd2c <ResetdBAmax+0x10>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
}
 800cd26:	46c0      	nop			@ (mov r8, r8)
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20000ea0 	.word	0x20000ea0

0800cd30 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800cd38:	f006 fbf8 	bl	801352c <HAL_GetTick>
 800cd3c:	0002      	movs	r2, r0
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	18d2      	adds	r2, r2, r3
 800cd42:	4b03      	ldr	r3, [pc, #12]	@ (800cd50 <setMICTimeStamp+0x20>)
 800cd44:	601a      	str	r2, [r3, #0]
}
 800cd46:	46c0      	nop			@ (mov r8, r8)
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	b002      	add	sp, #8
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	46c0      	nop			@ (mov r8, r8)
 800cd50:	20000ea8 	.word	0x20000ea8

0800cd54 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
  counter = 0;
 800cd58:	4b05      	ldr	r3, [pc, #20]	@ (800cd70 <ResetDBACalculator+0x1c>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800cd5e:	4b05      	ldr	r3, [pc, #20]	@ (800cd74 <ResetDBACalculator+0x20>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800cd64:	4b04      	ldr	r3, [pc, #16]	@ (800cd78 <ResetDBACalculator+0x24>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	701a      	strb	r2, [r3, #0]
}
 800cd6a:	46c0      	nop			@ (mov r8, r8)
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	20000ea4 	.word	0x20000ea4
 800cd74:	2000009c 	.word	0x2000009c
 800cd78:	20000ea5 	.word	0x20000ea5

0800cd7c <MIC_Print>:

void MIC_Print(void) {
 800cd7c:	b5b0      	push	{r4, r5, r7, lr}
 800cd7e:	b08a      	sub	sp, #40	@ 0x28
 800cd80:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800cd82:	4b9f      	ldr	r3, [pc, #636]	@ (800d000 <MIC_Print+0x284>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	4b9f      	ldr	r3, [pc, #636]	@ (800d004 <MIC_Print+0x288>)
 800cd88:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800cd8a:	4b9f      	ldr	r3, [pc, #636]	@ (800d008 <MIC_Print+0x28c>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	001a      	movs	r2, r3
 800cd90:	4b9c      	ldr	r3, [pc, #624]	@ (800d004 <MIC_Print+0x288>)
 800cd92:	6819      	ldr	r1, [r3, #0]
 800cd94:	4b9d      	ldr	r3, [pc, #628]	@ (800d00c <MIC_Print+0x290>)
 800cd96:	0092      	lsls	r2, r2, #2
 800cd98:	50d1      	str	r1, [r2, r3]
  counter++;
 800cd9a:	4b9b      	ldr	r3, [pc, #620]	@ (800d008 <MIC_Print+0x28c>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	4b99      	ldr	r3, [pc, #612]	@ (800d008 <MIC_Print+0x28c>)
 800cda4:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800cda6:	4b98      	ldr	r3, [pc, #608]	@ (800d008 <MIC_Print+0x28c>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b09      	cmp	r3, #9
 800cdac:	d80b      	bhi.n	800cdc6 <MIC_Print+0x4a>
 800cdae:	4b98      	ldr	r3, [pc, #608]	@ (800d010 <MIC_Print+0x294>)
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	4053      	eors	r3, r2
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d004      	beq.n	800cdc6 <MIC_Print+0x4a>
    denominator = counter;
 800cdbc:	4b92      	ldr	r3, [pc, #584]	@ (800d008 <MIC_Print+0x28c>)
 800cdbe:	781a      	ldrb	r2, [r3, #0]
 800cdc0:	4b94      	ldr	r3, [pc, #592]	@ (800d014 <MIC_Print+0x298>)
 800cdc2:	701a      	strb	r2, [r3, #0]
 800cdc4:	e005      	b.n	800cdd2 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800cdc6:	4b93      	ldr	r3, [pc, #588]	@ (800d014 <MIC_Print+0x298>)
 800cdc8:	220a      	movs	r2, #10
 800cdca:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800cdcc:	4b90      	ldr	r3, [pc, #576]	@ (800d010 <MIC_Print+0x294>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800cdd2:	4b91      	ldr	r3, [pc, #580]	@ (800d018 <MIC_Print+0x29c>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800cdd8:	230f      	movs	r3, #15
 800cdda:	18fb      	adds	r3, r7, r3
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]
 800cde0:	e042      	b.n	800ce68 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800cde2:	240f      	movs	r4, #15
 800cde4:	193b      	adds	r3, r7, r4
 800cde6:	781a      	ldrb	r2, [r3, #0]
 800cde8:	4b88      	ldr	r3, [pc, #544]	@ (800d00c <MIC_Print+0x290>)
 800cdea:	0092      	lsls	r2, r2, #2
 800cdec:	58d2      	ldr	r2, [r2, r3]
 800cdee:	4b8a      	ldr	r3, [pc, #552]	@ (800d018 <MIC_Print+0x29c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	1c19      	adds	r1, r3, #0
 800cdf4:	1c10      	adds	r0, r2, #0
 800cdf6:	f7f3 fd63 	bl	80008c0 <__aeabi_fadd>
 800cdfa:	1c03      	adds	r3, r0, #0
 800cdfc:	1c1a      	adds	r2, r3, #0
 800cdfe:	4b86      	ldr	r3, [pc, #536]	@ (800d018 <MIC_Print+0x29c>)
 800ce00:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800ce02:	193b      	adds	r3, r7, r4
 800ce04:	781a      	ldrb	r2, [r3, #0]
 800ce06:	4b81      	ldr	r3, [pc, #516]	@ (800d00c <MIC_Print+0x290>)
 800ce08:	0092      	lsls	r2, r2, #2
 800ce0a:	58d2      	ldr	r2, [r2, r3]
 800ce0c:	4b83      	ldr	r3, [pc, #524]	@ (800d01c <MIC_Print+0x2a0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	1c19      	adds	r1, r3, #0
 800ce12:	1c10      	adds	r0, r2, #0
 800ce14:	f7f3 fba0 	bl	8000558 <__aeabi_fcmpgt>
 800ce18:	1e03      	subs	r3, r0, #0
 800ce1a:	d006      	beq.n	800ce2a <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800ce1c:	193b      	adds	r3, r7, r4
 800ce1e:	781a      	ldrb	r2, [r3, #0]
 800ce20:	4b7a      	ldr	r3, [pc, #488]	@ (800d00c <MIC_Print+0x290>)
 800ce22:	0092      	lsls	r2, r2, #2
 800ce24:	58d2      	ldr	r2, [r2, r3]
 800ce26:	4b7d      	ldr	r3, [pc, #500]	@ (800d01c <MIC_Print+0x2a0>)
 800ce28:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800ce2a:	4b7b      	ldr	r3, [pc, #492]	@ (800d018 <MIC_Print+0x29c>)
 800ce2c:	681c      	ldr	r4, [r3, #0]
 800ce2e:	4b79      	ldr	r3, [pc, #484]	@ (800d014 <MIC_Print+0x298>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	0018      	movs	r0, r3
 800ce34:	f7f4 fc18 	bl	8001668 <__aeabi_ui2f>
 800ce38:	1c03      	adds	r3, r0, #0
 800ce3a:	1c19      	adds	r1, r3, #0
 800ce3c:	1c20      	adds	r0, r4, #0
 800ce3e:	f7f3 fec9 	bl	8000bd4 <__aeabi_fdiv>
 800ce42:	1c03      	adds	r3, r0, #0
 800ce44:	1c1a      	adds	r2, r3, #0
 800ce46:	4b76      	ldr	r3, [pc, #472]	@ (800d020 <MIC_Print+0x2a4>)
 800ce48:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800ce4a:	4b6e      	ldr	r3, [pc, #440]	@ (800d004 <MIC_Print+0x288>)
 800ce4c:	6818      	ldr	r0, [r3, #0]
 800ce4e:	4b73      	ldr	r3, [pc, #460]	@ (800d01c <MIC_Print+0x2a0>)
 800ce50:	6819      	ldr	r1, [r3, #0]
 800ce52:	4b73      	ldr	r3, [pc, #460]	@ (800d020 <MIC_Print+0x2a4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	1c1a      	adds	r2, r3, #0
 800ce58:	f7f7 fc90 	bl	800477c <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800ce5c:	210f      	movs	r1, #15
 800ce5e:	187b      	adds	r3, r7, r1
 800ce60:	781a      	ldrb	r2, [r3, #0]
 800ce62:	187b      	adds	r3, r7, r1
 800ce64:	3201      	adds	r2, #1
 800ce66:	701a      	strb	r2, [r3, #0]
 800ce68:	4b6a      	ldr	r3, [pc, #424]	@ (800d014 <MIC_Print+0x298>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	220f      	movs	r2, #15
 800ce6e:	18ba      	adds	r2, r7, r2
 800ce70:	7812      	ldrb	r2, [r2, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d3b5      	bcc.n	800cde2 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800ce76:	4b63      	ldr	r3, [pc, #396]	@ (800d004 <MIC_Print+0x288>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	1c18      	adds	r0, r3, #0
 800ce7c:	f7f6 faf2 	bl	8003464 <__aeabi_f2d>
 800ce80:	6038      	str	r0, [r7, #0]
 800ce82:	6079      	str	r1, [r7, #4]
 800ce84:	4b65      	ldr	r3, [pc, #404]	@ (800d01c <MIC_Print+0x2a0>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	1c18      	adds	r0, r3, #0
 800ce8a:	f7f6 faeb 	bl	8003464 <__aeabi_f2d>
 800ce8e:	0004      	movs	r4, r0
 800ce90:	000d      	movs	r5, r1
 800ce92:	4b63      	ldr	r3, [pc, #396]	@ (800d020 <MIC_Print+0x2a4>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	1c18      	adds	r0, r3, #0
 800ce98:	f7f6 fae4 	bl	8003464 <__aeabi_f2d>
 800ce9c:	0002      	movs	r2, r0
 800ce9e:	000b      	movs	r3, r1
 800cea0:	4960      	ldr	r1, [pc, #384]	@ (800d024 <MIC_Print+0x2a8>)
 800cea2:	9204      	str	r2, [sp, #16]
 800cea4:	9305      	str	r3, [sp, #20]
 800cea6:	9402      	str	r4, [sp, #8]
 800cea8:	9503      	str	r5, [sp, #12]
 800ceaa:	4b5f      	ldr	r3, [pc, #380]	@ (800d028 <MIC_Print+0x2ac>)
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	0008      	movs	r0, r1
 800ceb4:	f017 fe76 	bl	8024ba4 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800ceb8:	4b53      	ldr	r3, [pc, #332]	@ (800d008 <MIC_Print+0x28c>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b0a      	cmp	r3, #10
 800cebe:	d902      	bls.n	800cec6 <MIC_Print+0x14a>
    counter = 0;
 800cec0:	4b51      	ldr	r3, [pc, #324]	@ (800d008 <MIC_Print+0x28c>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800cec6:	4b4f      	ldr	r3, [pc, #316]	@ (800d004 <MIC_Print+0x288>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4958      	ldr	r1, [pc, #352]	@ (800d02c <MIC_Print+0x2b0>)
 800cecc:	1c18      	adds	r0, r3, #0
 800cece:	f7f3 fb4d 	bl	800056c <__aeabi_fcmpge>
 800ced2:	1e03      	subs	r3, r0, #0
 800ced4:	d004      	beq.n	800cee0 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800ced6:	2201      	movs	r2, #1
 800ced8:	2101      	movs	r1, #1
 800ceda:	2001      	movs	r0, #1
 800cedc:	f004 fb60 	bl	80115a0 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800cee0:	4b48      	ldr	r3, [pc, #288]	@ (800d004 <MIC_Print+0x288>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4952      	ldr	r1, [pc, #328]	@ (800d030 <MIC_Print+0x2b4>)
 800cee6:	1c18      	adds	r0, r3, #0
 800cee8:	f7f3 fb40 	bl	800056c <__aeabi_fcmpge>
 800ceec:	1e03      	subs	r3, r0, #0
 800ceee:	d00c      	beq.n	800cf0a <MIC_Print+0x18e>
 800cef0:	4b44      	ldr	r3, [pc, #272]	@ (800d004 <MIC_Print+0x288>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	494d      	ldr	r1, [pc, #308]	@ (800d02c <MIC_Print+0x2b0>)
 800cef6:	1c18      	adds	r0, r3, #0
 800cef8:	f7f3 fb1a 	bl	8000530 <__aeabi_fcmplt>
 800cefc:	1e03      	subs	r3, r0, #0
 800cefe:	d004      	beq.n	800cf0a <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800cf00:	2200      	movs	r2, #0
 800cf02:	2100      	movs	r1, #0
 800cf04:	2001      	movs	r0, #1
 800cf06:	f004 fb4b 	bl	80115a0 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800cf0a:	4b3e      	ldr	r3, [pc, #248]	@ (800d004 <MIC_Print+0x288>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4949      	ldr	r1, [pc, #292]	@ (800d034 <MIC_Print+0x2b8>)
 800cf10:	1c18      	adds	r0, r3, #0
 800cf12:	f7f3 fb2b 	bl	800056c <__aeabi_fcmpge>
 800cf16:	1e03      	subs	r3, r0, #0
 800cf18:	d00c      	beq.n	800cf34 <MIC_Print+0x1b8>
 800cf1a:	4b3a      	ldr	r3, [pc, #232]	@ (800d004 <MIC_Print+0x288>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4944      	ldr	r1, [pc, #272]	@ (800d030 <MIC_Print+0x2b4>)
 800cf20:	1c18      	adds	r0, r3, #0
 800cf22:	f7f3 fb05 	bl	8000530 <__aeabi_fcmplt>
 800cf26:	1e03      	subs	r3, r0, #0
 800cf28:	d004      	beq.n	800cf34 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	2001      	movs	r0, #1
 800cf30:	f004 fb36 	bl	80115a0 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800cf34:	4b33      	ldr	r3, [pc, #204]	@ (800d004 <MIC_Print+0x288>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	493f      	ldr	r1, [pc, #252]	@ (800d038 <MIC_Print+0x2bc>)
 800cf3a:	1c18      	adds	r0, r3, #0
 800cf3c:	f7f3 fb16 	bl	800056c <__aeabi_fcmpge>
 800cf40:	1e03      	subs	r3, r0, #0
 800cf42:	d00c      	beq.n	800cf5e <MIC_Print+0x1e2>
 800cf44:	4b2f      	ldr	r3, [pc, #188]	@ (800d004 <MIC_Print+0x288>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	493a      	ldr	r1, [pc, #232]	@ (800d034 <MIC_Print+0x2b8>)
 800cf4a:	1c18      	adds	r0, r3, #0
 800cf4c:	f7f3 faf0 	bl	8000530 <__aeabi_fcmplt>
 800cf50:	1e03      	subs	r3, r0, #0
 800cf52:	d004      	beq.n	800cf5e <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800cf54:	2200      	movs	r2, #0
 800cf56:	2101      	movs	r1, #1
 800cf58:	2000      	movs	r0, #0
 800cf5a:	f004 fb21 	bl	80115a0 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800cf5e:	4b29      	ldr	r3, [pc, #164]	@ (800d004 <MIC_Print+0x288>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4936      	ldr	r1, [pc, #216]	@ (800d03c <MIC_Print+0x2c0>)
 800cf64:	1c18      	adds	r0, r3, #0
 800cf66:	f7f3 fb01 	bl	800056c <__aeabi_fcmpge>
 800cf6a:	1e03      	subs	r3, r0, #0
 800cf6c:	d00c      	beq.n	800cf88 <MIC_Print+0x20c>
 800cf6e:	4b25      	ldr	r3, [pc, #148]	@ (800d004 <MIC_Print+0x288>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4931      	ldr	r1, [pc, #196]	@ (800d038 <MIC_Print+0x2bc>)
 800cf74:	1c18      	adds	r0, r3, #0
 800cf76:	f7f3 fadb 	bl	8000530 <__aeabi_fcmplt>
 800cf7a:	1e03      	subs	r3, r0, #0
 800cf7c:	d004      	beq.n	800cf88 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800cf7e:	2201      	movs	r2, #1
 800cf80:	2101      	movs	r1, #1
 800cf82:	2000      	movs	r0, #0
 800cf84:	f004 fb0c 	bl	80115a0 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800cf88:	4b1e      	ldr	r3, [pc, #120]	@ (800d004 <MIC_Print+0x288>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	492c      	ldr	r1, [pc, #176]	@ (800d040 <MIC_Print+0x2c4>)
 800cf8e:	1c18      	adds	r0, r3, #0
 800cf90:	f7f3 faec 	bl	800056c <__aeabi_fcmpge>
 800cf94:	1e03      	subs	r3, r0, #0
 800cf96:	d00c      	beq.n	800cfb2 <MIC_Print+0x236>
 800cf98:	4b1a      	ldr	r3, [pc, #104]	@ (800d004 <MIC_Print+0x288>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4927      	ldr	r1, [pc, #156]	@ (800d03c <MIC_Print+0x2c0>)
 800cf9e:	1c18      	adds	r0, r3, #0
 800cfa0:	f7f3 fac6 	bl	8000530 <__aeabi_fcmplt>
 800cfa4:	1e03      	subs	r3, r0, #0
 800cfa6:	d004      	beq.n	800cfb2 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	2100      	movs	r1, #0
 800cfac:	2000      	movs	r0, #0
 800cfae:	f004 faf7 	bl	80115a0 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800cfb2:	4b14      	ldr	r3, [pc, #80]	@ (800d004 <MIC_Print+0x288>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4923      	ldr	r1, [pc, #140]	@ (800d044 <MIC_Print+0x2c8>)
 800cfb8:	1c18      	adds	r0, r3, #0
 800cfba:	f7f3 fad7 	bl	800056c <__aeabi_fcmpge>
 800cfbe:	1e03      	subs	r3, r0, #0
 800cfc0:	d00c      	beq.n	800cfdc <MIC_Print+0x260>
 800cfc2:	4b10      	ldr	r3, [pc, #64]	@ (800d004 <MIC_Print+0x288>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	491e      	ldr	r1, [pc, #120]	@ (800d040 <MIC_Print+0x2c4>)
 800cfc8:	1c18      	adds	r0, r3, #0
 800cfca:	f7f3 fab1 	bl	8000530 <__aeabi_fcmplt>
 800cfce:	1e03      	subs	r3, r0, #0
 800cfd0:	d004      	beq.n	800cfdc <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	f004 fae2 	bl	80115a0 <SetDBLED>
  }
  if(dBA < 35){//off
 800cfdc:	4b09      	ldr	r3, [pc, #36]	@ (800d004 <MIC_Print+0x288>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4918      	ldr	r1, [pc, #96]	@ (800d044 <MIC_Print+0x2c8>)
 800cfe2:	1c18      	adds	r0, r3, #0
 800cfe4:	f7f3 faa4 	bl	8000530 <__aeabi_fcmplt>
 800cfe8:	1e03      	subs	r3, r0, #0
 800cfea:	d100      	bne.n	800cfee <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800cfec:	e004      	b.n	800cff8 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800cfee:	2200      	movs	r2, #0
 800cff0:	2100      	movs	r1, #0
 800cff2:	2000      	movs	r0, #0
 800cff4:	f004 fad4 	bl	80115a0 <SetDBLED>
}
 800cff8:	46c0      	nop			@ (mov r8, r8)
 800cffa:	46bd      	mov	sp, r7
 800cffc:	b004      	add	sp, #16
 800cffe:	bdb0      	pop	{r4, r5, r7, pc}
 800d000:	20000e9c 	.word	0x20000e9c
 800d004:	20000e68 	.word	0x20000e68
 800d008:	20000ea4 	.word	0x20000ea4
 800d00c:	20000e6c 	.word	0x20000e6c
 800d010:	20000ea5 	.word	0x20000ea5
 800d014:	2000009c 	.word	0x2000009c
 800d018:	20000e98 	.word	0x20000e98
 800d01c:	20000ea0 	.word	0x20000ea0
 800d020:	20000e94 	.word	0x20000e94
 800d024:	0802c01c 	.word	0x0802c01c
 800d028:	20000e5c 	.word	0x20000e5c
 800d02c:	42b40000 	.word	0x42b40000
 800d030:	42a00000 	.word	0x42a00000
 800d034:	428c0000 	.word	0x428c0000
 800d038:	42700000 	.word	0x42700000
 800d03c:	42480000 	.word	0x42480000
 800d040:	42200000 	.word	0x42200000
 800d044:	420c0000 	.word	0x420c0000

0800d048 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d04e:	4b11      	ldr	r3, [pc, #68]	@ (800d094 <MIC_TestMeasurementDone+0x4c>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	4a10      	ldr	r2, [pc, #64]	@ (800d098 <MIC_TestMeasurementDone+0x50>)
 800d056:	4911      	ldr	r1, [pc, #68]	@ (800d09c <MIC_TestMeasurementDone+0x54>)
 800d058:	2002      	movs	r0, #2
 800d05a:	f005 fd31 	bl	8012ac0 <CreateLine>
  if(DataReady) {
 800d05e:	4b0d      	ldr	r3, [pc, #52]	@ (800d094 <MIC_TestMeasurementDone+0x4c>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d010      	beq.n	800d08a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d068:	1dfb      	adds	r3, r7, #7
 800d06a:	4a0d      	ldr	r2, [pc, #52]	@ (800d0a0 <MIC_TestMeasurementDone+0x58>)
 800d06c:	7812      	ldrb	r2, [r2, #0]
 800d06e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d070:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a0 <MIC_TestMeasurementDone+0x58>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	4a0b      	ldr	r2, [pc, #44]	@ (800d0a4 <MIC_TestMeasurementDone+0x5c>)
 800d078:	4908      	ldr	r1, [pc, #32]	@ (800d09c <MIC_TestMeasurementDone+0x54>)
 800d07a:	2002      	movs	r0, #2
 800d07c:	f005 fd20 	bl	8012ac0 <CreateLine>
    ResetMICIndicator();
 800d080:	f004 fb7c 	bl	801177c <ResetMICIndicator>
    return Check;
 800d084:	1dfb      	adds	r3, r7, #7
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	e000      	b.n	800d08c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	0018      	movs	r0, r3
 800d08e:	46bd      	mov	sp, r7
 800d090:	b002      	add	sp, #8
 800d092:	bd80      	pop	{r7, pc}
 800d094:	20000fd9 	.word	0x20000fd9
 800d098:	0802c064 	.word	0x0802c064
 800d09c:	0802c090 	.word	0x0802c090
 800d0a0:	20000fda 	.word	0x20000fda
 800d0a4:	0802c094 	.word	0x0802c094

0800d0a8 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d0ae:	4b78      	ldr	r3, [pc, #480]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d100      	bne.n	800d0b8 <Mic_Upkeep+0x10>
 800d0b6:	e0b8      	b.n	800d22a <Mic_Upkeep+0x182>
 800d0b8:	dd00      	ble.n	800d0bc <Mic_Upkeep+0x14>
 800d0ba:	e0d3      	b.n	800d264 <Mic_Upkeep+0x1bc>
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d037      	beq.n	800d130 <Mic_Upkeep+0x88>
 800d0c0:	dd00      	ble.n	800d0c4 <Mic_Upkeep+0x1c>
 800d0c2:	e0cf      	b.n	800d264 <Mic_Upkeep+0x1bc>
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <Mic_Upkeep+0x26>
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d014      	beq.n	800d0f6 <Mic_Upkeep+0x4e>
 800d0cc:	e0ca      	b.n	800d264 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d0ce:	2001      	movs	r0, #1
 800d0d0:	f003 fb64 	bl	801079c <enableMicrophone>
 800d0d4:	0003      	movs	r3, r0
 800d0d6:	001a      	movs	r2, r3
 800d0d8:	2301      	movs	r3, #1
 800d0da:	4053      	eors	r3, r2
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d005      	beq.n	800d0ee <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d0e2:	4a6c      	ldr	r2, [pc, #432]	@ (800d294 <Mic_Upkeep+0x1ec>)
 800d0e4:	4b6c      	ldr	r3, [pc, #432]	@ (800d298 <Mic_Upkeep+0x1f0>)
 800d0e6:	217f      	movs	r1, #127	@ 0x7f
 800d0e8:	0018      	movs	r0, r3
 800d0ea:	f005 fda1 	bl	8012c30 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d0ee:	4b68      	ldr	r3, [pc, #416]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	701a      	strb	r2, [r3, #0]
    break;
 800d0f4:	e0c5      	b.n	800d282 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d0f6:	f003 fb2d 	bl	8010754 <micSettlingComplete>
 800d0fa:	1e03      	subs	r3, r0, #0
 800d0fc:	d105      	bne.n	800d10a <Mic_Upkeep+0x62>
 800d0fe:	4b67      	ldr	r3, [pc, #412]	@ (800d29c <Mic_Upkeep+0x1f4>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	b2db      	uxtb	r3, r3
 800d104:	2b00      	cmp	r3, #0
 800d106:	d100      	bne.n	800d10a <Mic_Upkeep+0x62>
 800d108:	e0b6      	b.n	800d278 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d10a:	f003 fbb1 	bl	8010870 <startSPLcalculation>
 800d10e:	0003      	movs	r3, r0
 800d110:	001a      	movs	r2, r3
 800d112:	2301      	movs	r3, #1
 800d114:	4053      	eors	r3, r2
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d11c:	4a5d      	ldr	r2, [pc, #372]	@ (800d294 <Mic_Upkeep+0x1ec>)
 800d11e:	4b5e      	ldr	r3, [pc, #376]	@ (800d298 <Mic_Upkeep+0x1f0>)
 800d120:	2188      	movs	r1, #136	@ 0x88
 800d122:	0018      	movs	r0, r3
 800d124:	f005 fd84 	bl	8012c30 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d128:	4b59      	ldr	r3, [pc, #356]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d12a:	2202      	movs	r2, #2
 800d12c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d12e:	e0a3      	b.n	800d278 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d130:	4b5b      	ldr	r3, [pc, #364]	@ (800d2a0 <Mic_Upkeep+0x1f8>)
 800d132:	2201      	movs	r2, #1
 800d134:	2101      	movs	r1, #1
 800d136:	0018      	movs	r0, r3
 800d138:	f003 f9ee 	bl	8010518 <getSoundData>
 800d13c:	1e03      	subs	r3, r0, #0
 800d13e:	d100      	bne.n	800d142 <Mic_Upkeep+0x9a>
 800d140:	e09c      	b.n	800d27c <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d142:	f003 fae7 	bl	8010714 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d146:	4b56      	ldr	r3, [pc, #344]	@ (800d2a0 <Mic_Upkeep+0x1f8>)
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	001a      	movs	r2, r3
 800d14c:	4b54      	ldr	r3, [pc, #336]	@ (800d2a0 <Mic_Upkeep+0x1f8>)
 800d14e:	785b      	ldrb	r3, [r3, #1]
 800d150:	4954      	ldr	r1, [pc, #336]	@ (800d2a4 <Mic_Upkeep+0x1fc>)
 800d152:	0038      	movs	r0, r7
 800d154:	f017 fd96 	bl	8024c84 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800d158:	4b51      	ldr	r3, [pc, #324]	@ (800d2a0 <Mic_Upkeep+0x1f8>)
 800d15a:	89db      	ldrh	r3, [r3, #14]
 800d15c:	001a      	movs	r2, r3
 800d15e:	4b50      	ldr	r3, [pc, #320]	@ (800d2a0 <Mic_Upkeep+0x1f8>)
 800d160:	7c1b      	ldrb	r3, [r3, #16]
 800d162:	4951      	ldr	r1, [pc, #324]	@ (800d2a8 <Mic_Upkeep+0x200>)
 800d164:	4851      	ldr	r0, [pc, #324]	@ (800d2ac <Mic_Upkeep+0x204>)
 800d166:	f017 fd8d 	bl	8024c84 <siprintf>
      dBValue = atof(dBbuffer);
 800d16a:	003b      	movs	r3, r7
 800d16c:	0018      	movs	r0, r3
 800d16e:	f016 f939 	bl	80233e4 <atof>
 800d172:	0002      	movs	r2, r0
 800d174:	000b      	movs	r3, r1
 800d176:	0010      	movs	r0, r2
 800d178:	0019      	movs	r1, r3
 800d17a:	f7f6 f9bb 	bl	80034f4 <__aeabi_d2f>
 800d17e:	1c02      	adds	r2, r0, #0
 800d180:	4b4b      	ldr	r3, [pc, #300]	@ (800d2b0 <Mic_Upkeep+0x208>)
 800d182:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800d184:	4b4a      	ldr	r3, [pc, #296]	@ (800d2b0 <Mic_Upkeep+0x208>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	494a      	ldr	r1, [pc, #296]	@ (800d2b4 <Mic_Upkeep+0x20c>)
 800d18a:	1c18      	adds	r0, r3, #0
 800d18c:	f7f3 ff08 	bl	8000fa0 <__aeabi_fmul>
 800d190:	1c03      	adds	r3, r0, #0
 800d192:	1c18      	adds	r0, r3, #0
 800d194:	f7f6 f966 	bl	8003464 <__aeabi_f2d>
 800d198:	2200      	movs	r2, #0
 800d19a:	4b47      	ldr	r3, [pc, #284]	@ (800d2b8 <Mic_Upkeep+0x210>)
 800d19c:	f7f4 faa6 	bl	80016ec <__aeabi_dadd>
 800d1a0:	0002      	movs	r2, r0
 800d1a2:	000b      	movs	r3, r1
 800d1a4:	0010      	movs	r0, r2
 800d1a6:	0019      	movs	r1, r3
 800d1a8:	f7f6 f8ce 	bl	8003348 <__aeabi_d2iz>
 800d1ac:	0003      	movs	r3, r0
 800d1ae:	0018      	movs	r0, r3
 800d1b0:	f7f6 f906 	bl	80033c0 <__aeabi_i2d>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4b41      	ldr	r3, [pc, #260]	@ (800d2bc <Mic_Upkeep+0x214>)
 800d1b8:	f7f4 fdfc 	bl	8001db4 <__aeabi_ddiv>
 800d1bc:	0002      	movs	r2, r0
 800d1be:	000b      	movs	r3, r1
 800d1c0:	0010      	movs	r0, r2
 800d1c2:	0019      	movs	r1, r3
 800d1c4:	f7f6 f996 	bl	80034f4 <__aeabi_d2f>
 800d1c8:	1c02      	adds	r2, r0, #0
 800d1ca:	4b39      	ldr	r3, [pc, #228]	@ (800d2b0 <Mic_Upkeep+0x208>)
 800d1cc:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800d1ce:	f7ff fdd5 	bl	800cd7c <MIC_Print>
      if (!startSPLcalculation()) {
 800d1d2:	f003 fb4d 	bl	8010870 <startSPLcalculation>
 800d1d6:	0003      	movs	r3, r0
 800d1d8:	001a      	movs	r2, r3
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4053      	eors	r3, r2
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d005      	beq.n	800d1f0 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800d1e4:	4a2b      	ldr	r2, [pc, #172]	@ (800d294 <Mic_Upkeep+0x1ec>)
 800d1e6:	4b2c      	ldr	r3, [pc, #176]	@ (800d298 <Mic_Upkeep+0x1f0>)
 800d1e8:	2198      	movs	r1, #152	@ 0x98
 800d1ea:	0018      	movs	r0, r3
 800d1ec:	f005 fd20 	bl	8012c30 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	f003 fad3 	bl	801079c <enableMicrophone>
 800d1f6:	0003      	movs	r3, r0
 800d1f8:	001a      	movs	r2, r3
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4053      	eors	r3, r2
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800d204:	4a23      	ldr	r2, [pc, #140]	@ (800d294 <Mic_Upkeep+0x1ec>)
 800d206:	4b24      	ldr	r3, [pc, #144]	@ (800d298 <Mic_Upkeep+0x1f0>)
 800d208:	219b      	movs	r1, #155	@ 0x9b
 800d20a:	0018      	movs	r0, r3
 800d20c:	f005 fd10 	bl	8012c30 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800d210:	f006 f98c 	bl	801352c <HAL_GetTick>
 800d214:	0003      	movs	r3, r0
 800d216:	4a2a      	ldr	r2, [pc, #168]	@ (800d2c0 <Mic_Upkeep+0x218>)
 800d218:	189a      	adds	r2, r3, r2
 800d21a:	4b2a      	ldr	r3, [pc, #168]	@ (800d2c4 <Mic_Upkeep+0x21c>)
 800d21c:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800d21e:	4b1c      	ldr	r3, [pc, #112]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d220:	2203      	movs	r2, #3
 800d222:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800d224:	f004 faaa 	bl	801177c <ResetMICIndicator>
    }
    break;
 800d228:	e028      	b.n	800d27c <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800d22a:	4b26      	ldr	r3, [pc, #152]	@ (800d2c4 <Mic_Upkeep+0x21c>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	0018      	movs	r0, r3
 800d230:	f005 fbf0 	bl	8012a14 <TimestampIsReached>
 800d234:	1e03      	subs	r3, r0, #0
 800d236:	d023      	beq.n	800d280 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800d238:	2001      	movs	r0, #1
 800d23a:	f003 faaf 	bl	801079c <enableMicrophone>
 800d23e:	0003      	movs	r3, r0
 800d240:	001a      	movs	r2, r3
 800d242:	2301      	movs	r3, #1
 800d244:	4053      	eors	r3, r2
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d005      	beq.n	800d258 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800d24c:	4a11      	ldr	r2, [pc, #68]	@ (800d294 <Mic_Upkeep+0x1ec>)
 800d24e:	4b12      	ldr	r3, [pc, #72]	@ (800d298 <Mic_Upkeep+0x1f0>)
 800d250:	21a6      	movs	r1, #166	@ 0xa6
 800d252:	0018      	movs	r0, r3
 800d254:	f005 fcec 	bl	8012c30 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800d258:	4b0d      	ldr	r3, [pc, #52]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d25a:	2201      	movs	r2, #1
 800d25c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800d25e:	f004 fa4b 	bl	80116f8 <SetMICIndicator>
    }
    break;
 800d262:	e00d      	b.n	800d280 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800d264:	4a18      	ldr	r2, [pc, #96]	@ (800d2c8 <Mic_Upkeep+0x220>)
 800d266:	4b19      	ldr	r3, [pc, #100]	@ (800d2cc <Mic_Upkeep+0x224>)
 800d268:	0019      	movs	r1, r3
 800d26a:	2003      	movs	r0, #3
 800d26c:	f005 fc28 	bl	8012ac0 <CreateLine>
    MicState = MIC_STATE_INIT;
 800d270:	4b07      	ldr	r3, [pc, #28]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d272:	2200      	movs	r2, #0
 800d274:	701a      	strb	r2, [r3, #0]
    break;
 800d276:	e004      	b.n	800d282 <Mic_Upkeep+0x1da>
    break;
 800d278:	46c0      	nop			@ (mov r8, r8)
 800d27a:	e002      	b.n	800d282 <Mic_Upkeep+0x1da>
    break;
 800d27c:	46c0      	nop			@ (mov r8, r8)
 800d27e:	e000      	b.n	800d282 <Mic_Upkeep+0x1da>
    break;
 800d280:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800d282:	4b03      	ldr	r3, [pc, #12]	@ (800d290 <Mic_Upkeep+0x1e8>)
 800d284:	781b      	ldrb	r3, [r3, #0]
}
 800d286:	0018      	movs	r0, r3
 800d288:	46bd      	mov	sp, r7
 800d28a:	b002      	add	sp, #8
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	46c0      	nop			@ (mov r8, r8)
 800d290:	20000ebe 	.word	0x20000ebe
 800d294:	0802c0ac 	.word	0x0802c0ac
 800d298:	0802d218 	.word	0x0802d218
 800d29c:	20000fd9 	.word	0x20000fd9
 800d2a0:	20000eac 	.word	0x20000eac
 800d2a4:	0802c0c8 	.word	0x0802c0c8
 800d2a8:	0802c0d0 	.word	0x0802c0d0
 800d2ac:	20000e5c 	.word	0x20000e5c
 800d2b0:	20000e9c 	.word	0x20000e9c
 800d2b4:	42c80000 	.word	0x42c80000
 800d2b8:	3fe00000 	.word	0x3fe00000
 800d2bc:	40590000 	.word	0x40590000
 800d2c0:	000002f3 	.word	0x000002f3
 800d2c4:	20000ea8 	.word	0x20000ea8
 800d2c8:	0802c0d8 	.word	0x0802c0d8
 800d2cc:	0802c0f8 	.word	0x0802c0f8

0800d2d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d2d6:	1d3b      	adds	r3, r7, #4
 800d2d8:	0018      	movs	r0, r3
 800d2da:	2314      	movs	r3, #20
 800d2dc:	001a      	movs	r2, r3
 800d2de:	2100      	movs	r1, #0
 800d2e0:	f017 fe36 	bl	8024f50 <memset>
  RTC_DateTypeDef sDate = {0};
 800d2e4:	003b      	movs	r3, r7
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d2ea:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d2ec:	4a2e      	ldr	r2, [pc, #184]	@ (800d3a8 <MX_RTC_Init+0xd8>)
 800d2ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d2f0:	4b2c      	ldr	r3, [pc, #176]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d2f8:	227f      	movs	r2, #127	@ 0x7f
 800d2fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d2fc:	4b29      	ldr	r3, [pc, #164]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d2fe:	22ff      	movs	r2, #255	@ 0xff
 800d300:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d302:	4b28      	ldr	r3, [pc, #160]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d304:	2200      	movs	r2, #0
 800d306:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d308:	4b26      	ldr	r3, [pc, #152]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d30e:	4b25      	ldr	r3, [pc, #148]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d310:	2200      	movs	r2, #0
 800d312:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d314:	4b23      	ldr	r3, [pc, #140]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d316:	2200      	movs	r2, #0
 800d318:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d31a:	4b22      	ldr	r3, [pc, #136]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d31c:	0018      	movs	r0, r3
 800d31e:	f00d fc21 	bl	801ab64 <HAL_RTC_Init>
 800d322:	1e03      	subs	r3, r0, #0
 800d324:	d001      	beq.n	800d32a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800d326:	f7ff f803 	bl	800c330 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800d32a:	1d3b      	adds	r3, r7, #4
 800d32c:	220d      	movs	r2, #13
 800d32e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800d330:	1d3b      	adds	r3, r7, #4
 800d332:	2200      	movs	r2, #0
 800d334:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800d336:	1d3b      	adds	r3, r7, #4
 800d338:	2200      	movs	r2, #0
 800d33a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d33c:	1d3b      	adds	r3, r7, #4
 800d33e:	2200      	movs	r2, #0
 800d340:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d342:	1d3b      	adds	r3, r7, #4
 800d344:	2200      	movs	r2, #0
 800d346:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d348:	1d39      	adds	r1, r7, #4
 800d34a:	4b16      	ldr	r3, [pc, #88]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	0018      	movs	r0, r3
 800d350:	f00d fca4 	bl	801ac9c <HAL_RTC_SetTime>
 800d354:	1e03      	subs	r3, r0, #0
 800d356:	d001      	beq.n	800d35c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800d358:	f7fe ffea 	bl	800c330 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800d35c:	003b      	movs	r3, r7
 800d35e:	2206      	movs	r2, #6
 800d360:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800d362:	003b      	movs	r3, r7
 800d364:	2211      	movs	r2, #17
 800d366:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800d368:	003b      	movs	r3, r7
 800d36a:	2217      	movs	r2, #23
 800d36c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800d36e:	003b      	movs	r3, r7
 800d370:	2218      	movs	r2, #24
 800d372:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d374:	0039      	movs	r1, r7
 800d376:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d378:	2200      	movs	r2, #0
 800d37a:	0018      	movs	r0, r3
 800d37c:	f00d fd96 	bl	801aeac <HAL_RTC_SetDate>
 800d380:	1e03      	subs	r3, r0, #0
 800d382:	d001      	beq.n	800d388 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800d384:	f7fe ffd4 	bl	800c330 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800d388:	4b06      	ldr	r3, [pc, #24]	@ (800d3a4 <MX_RTC_Init+0xd4>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	2100      	movs	r1, #0
 800d38e:	0018      	movs	r0, r3
 800d390:	f00d ff46 	bl	801b220 <HAL_RTCEx_SetWakeUpTimer_IT>
 800d394:	1e03      	subs	r3, r0, #0
 800d396:	d001      	beq.n	800d39c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800d398:	f7fe ffca 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d39c:	46c0      	nop			@ (mov r8, r8)
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	b006      	add	sp, #24
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20000ec0 	.word	0x20000ec0
 800d3a8:	40002800 	.word	0x40002800

0800d3ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d3e4 <HAL_RTC_MspInit+0x38>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d10e      	bne.n	800d3dc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d3be:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e8 <HAL_RTC_MspInit+0x3c>)
 800d3c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3c2:	4b09      	ldr	r3, [pc, #36]	@ (800d3e8 <HAL_RTC_MspInit+0x3c>)
 800d3c4:	2180      	movs	r1, #128	@ 0x80
 800d3c6:	02c9      	lsls	r1, r1, #11
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	2002      	movs	r0, #2
 800d3d2:	f006 fd4f 	bl	8013e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800d3d6:	2002      	movs	r0, #2
 800d3d8:	f006 fd61 	bl	8013e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d3dc:	46c0      	nop			@ (mov r8, r8)
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	b002      	add	sp, #8
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	40002800 	.word	0x40002800
 800d3e8:	40021000 	.word	0x40021000

0800d3ec <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800d3f0:	4b02      	ldr	r3, [pc, #8]	@ (800d3fc <sen5x_Get_sen5x_enable_state+0x10>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
}
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	46c0      	nop			@ (mov r8, r8)
 800d3fc:	20000ee7 	.word	0x20000ee7

0800d400 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	0002      	movs	r2, r0
 800d408:	1dfb      	adds	r3, r7, #7
 800d40a:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800d40c:	4b03      	ldr	r3, [pc, #12]	@ (800d41c <sen5x_Set_sen5x_state+0x1c>)
 800d40e:	1dfa      	adds	r2, r7, #7
 800d410:	7812      	ldrb	r2, [r2, #0]
 800d412:	701a      	strb	r2, [r3, #0]
}
 800d414:	46c0      	nop			@ (mov r8, r8)
 800d416:	46bd      	mov	sp, r7
 800d418:	b002      	add	sp, #8
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	20000ee7 	.word	0x20000ee7

0800d420 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800d428:	f006 f880 	bl	801352c <HAL_GetTick>
 800d42c:	0002      	movs	r2, r0
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	18d2      	adds	r2, r2, r3
 800d432:	4b03      	ldr	r3, [pc, #12]	@ (800d440 <setsen5xReadTimer+0x20>)
 800d434:	601a      	str	r2, [r3, #0]
}
 800d436:	46c0      	nop			@ (mov r8, r8)
 800d438:	46bd      	mov	sp, r7
 800d43a:	b002      	add	sp, #8
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	46c0      	nop			@ (mov r8, r8)
 800d440:	20000ef4 	.word	0x20000ef4

0800d444 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	0002      	movs	r2, r0
 800d44c:	1dfb      	adds	r3, r7, #7
 800d44e:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800d450:	4b03      	ldr	r3, [pc, #12]	@ (800d460 <setsen5xSamplecounter+0x1c>)
 800d452:	2200      	movs	r2, #0
 800d454:	701a      	strb	r2, [r3, #0]
}
 800d456:	46c0      	nop			@ (mov r8, r8)
 800d458:	46bd      	mov	sp, r7
 800d45a:	b002      	add	sp, #8
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	46c0      	nop			@ (mov r8, r8)
 800d460:	20000ef0 	.word	0x20000ef0

0800d464 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800d46c:	f7ff f818 	bl	800c4a0 <IsPMSensorEnabled>
 800d470:	1e03      	subs	r3, r0, #0
 800d472:	d035      	beq.n	800d4e0 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800d474:	f003 ffbe 	bl	80113f4 <batteryChargeCheck>
 800d478:	0003      	movs	r3, r0
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d103      	bne.n	800d486 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800d47e:	4b20      	ldr	r3, [pc, #128]	@ (800d500 <sen5x_enable+0x9c>)
 800d480:	2201      	movs	r2, #1
 800d482:	701a      	strb	r2, [r3, #0]
 800d484:	e00d      	b.n	800d4a2 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800d486:	4b1e      	ldr	r3, [pc, #120]	@ (800d500 <sen5x_enable+0x9c>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	1e5a      	subs	r2, r3, #1
 800d48c:	4193      	sbcs	r3, r2
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2201      	movs	r2, #1
 800d492:	4053      	eors	r3, r2
 800d494:	b2db      	uxtb	r3, r3
 800d496:	1c1a      	adds	r2, r3, #0
 800d498:	2301      	movs	r3, #1
 800d49a:	4013      	ands	r3, r2
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	4b18      	ldr	r3, [pc, #96]	@ (800d500 <sen5x_enable+0x9c>)
 800d4a0:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800d4a2:	4b17      	ldr	r3, [pc, #92]	@ (800d500 <sen5x_enable+0x9c>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	f7ff ffb8 	bl	800d420 <setsen5xReadTimer>
 800d4b0:	e009      	b.n	800d4c6 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800d4b2:	f006 f83b 	bl	801352c <HAL_GetTick>
 800d4b6:	0002      	movs	r2, r0
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2164      	movs	r1, #100	@ 0x64
 800d4bc:	434b      	muls	r3, r1
 800d4be:	18d3      	adds	r3, r2, r3
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f7ff ffad 	bl	800d420 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800d4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800d500 <sen5x_enable+0x9c>)
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d001      	beq.n	800d4d2 <sen5x_enable+0x6e>
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <sen5x_enable+0xa0>)
 800d4d0:	e000      	b.n	800d4d4 <sen5x_enable+0x70>
 800d4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d508 <sen5x_enable+0xa4>)
 800d4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800d50c <sen5x_enable+0xa8>)
 800d4d6:	490e      	ldr	r1, [pc, #56]	@ (800d510 <sen5x_enable+0xac>)
 800d4d8:	2002      	movs	r0, #2
 800d4da:	f005 faf1 	bl	8012ac0 <CreateLine>
 800d4de:	e005      	b.n	800d4ec <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800d4e0:	4a0c      	ldr	r2, [pc, #48]	@ (800d514 <sen5x_enable+0xb0>)
 800d4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d510 <sen5x_enable+0xac>)
 800d4e4:	0019      	movs	r1, r3
 800d4e6:	2002      	movs	r0, #2
 800d4e8:	f005 faea 	bl	8012ac0 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <sen5x_enable+0xb4>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800d4f2:	4b03      	ldr	r3, [pc, #12]	@ (800d500 <sen5x_enable+0x9c>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b002      	add	sp, #8
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	46c0      	nop			@ (mov r8, r8)
 800d500:	20000ee7 	.word	0x20000ee7
 800d504:	0802c0fc 	.word	0x0802c0fc
 800d508:	0802c104 	.word	0x0802c104
 800d50c:	0802c110 	.word	0x0802c110
 800d510:	0802c12c 	.word	0x0802c12c
 800d514:	0802c130 	.word	0x0802c130
 800d518:	2000009d 	.word	0x2000009d

0800d51c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800d51c:	b580      	push	{r7, lr}
 800d51e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800d520:	2380      	movs	r3, #128	@ 0x80
 800d522:	015b      	lsls	r3, r3, #5
 800d524:	480f      	ldr	r0, [pc, #60]	@ (800d564 <sen5x_Power_On+0x48>)
 800d526:	2201      	movs	r2, #1
 800d528:	0019      	movs	r1, r3
 800d52a:	f007 fa90 	bl	8014a4e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800d52e:	4a0e      	ldr	r2, [pc, #56]	@ (800d568 <sen5x_Power_On+0x4c>)
 800d530:	4b0e      	ldr	r3, [pc, #56]	@ (800d56c <sen5x_Power_On+0x50>)
 800d532:	0019      	movs	r1, r3
 800d534:	2003      	movs	r0, #3
 800d536:	f005 fac3 	bl	8012ac0 <CreateLine>
  HAL_Delay(150);
 800d53a:	2096      	movs	r0, #150	@ 0x96
 800d53c:	f006 f800 	bl	8013540 <HAL_Delay>
  if (sen5x_device_reset()) {
 800d540:	f001 f9b2 	bl	800e8a8 <sen5x_device_reset>
 800d544:	1e03      	subs	r3, r0, #0
 800d546:	d006      	beq.n	800d556 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800d548:	4a09      	ldr	r2, [pc, #36]	@ (800d570 <sen5x_Power_On+0x54>)
 800d54a:	4b0a      	ldr	r3, [pc, #40]	@ (800d574 <sen5x_Power_On+0x58>)
 800d54c:	0019      	movs	r1, r3
 800d54e:	2001      	movs	r0, #1
 800d550:	f005 fab6 	bl	8012ac0 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800d554:	e002      	b.n	800d55c <sen5x_Power_On+0x40>
    sen5x_On = true;
 800d556:	4b08      	ldr	r3, [pc, #32]	@ (800d578 <sen5x_Power_On+0x5c>)
 800d558:	2201      	movs	r2, #1
 800d55a:	701a      	strb	r2, [r3, #0]
}
 800d55c:	46c0      	nop			@ (mov r8, r8)
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	46c0      	nop			@ (mov r8, r8)
 800d564:	50000800 	.word	0x50000800
 800d568:	0802c150 	.word	0x0802c150
 800d56c:	0802c16c 	.word	0x0802c16c
 800d570:	0802c170 	.word	0x0802c170
 800d574:	0802c198 	.word	0x0802c198
 800d578:	20000ee5 	.word	0x20000ee5

0800d57c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800d580:	4b0e      	ldr	r3, [pc, #56]	@ (800d5bc <sen5x_Power_Off+0x40>)
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d006      	beq.n	800d596 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800d588:	4a0d      	ldr	r2, [pc, #52]	@ (800d5c0 <sen5x_Power_Off+0x44>)
 800d58a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c4 <sen5x_Power_Off+0x48>)
 800d58c:	0019      	movs	r1, r3
 800d58e:	2003      	movs	r0, #3
 800d590:	f005 fa96 	bl	8012ac0 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800d594:	e00f      	b.n	800d5b6 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800d596:	4a0c      	ldr	r2, [pc, #48]	@ (800d5c8 <sen5x_Power_Off+0x4c>)
 800d598:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c4 <sen5x_Power_Off+0x48>)
 800d59a:	0019      	movs	r1, r3
 800d59c:	2003      	movs	r0, #3
 800d59e:	f005 fa8f 	bl	8012ac0 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800d5a2:	2380      	movs	r3, #128	@ 0x80
 800d5a4:	015b      	lsls	r3, r3, #5
 800d5a6:	4809      	ldr	r0, [pc, #36]	@ (800d5cc <sen5x_Power_Off+0x50>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	0019      	movs	r1, r3
 800d5ac:	f007 fa4f 	bl	8014a4e <HAL_GPIO_WritePin>
      sen5x_On = false;
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <sen5x_Power_Off+0x54>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	701a      	strb	r2, [r3, #0]
}
 800d5b6:	46c0      	nop			@ (mov r8, r8)
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	20000ee6 	.word	0x20000ee6
 800d5c0:	0802c19c 	.word	0x0802c19c
 800d5c4:	0802c16c 	.word	0x0802c16c
 800d5c8:	0802c1cc 	.word	0x0802c1cc
 800d5cc:	50000800 	.word	0x50000800
 800d5d0:	20000ee5 	.word	0x20000ee5

0800d5d4 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800d5d8:	4b02      	ldr	r3, [pc, #8]	@ (800d5e4 <reset_fanCleaningDone+0x10>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	701a      	strb	r2, [r3, #0]
}
 800d5de:	46c0      	nop			@ (mov r8, r8)
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	20000ee4 	.word	0x20000ee4

0800d5e8 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ea:	b093      	sub	sp, #76	@ 0x4c
 800d5ec:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800d5ee:	2436      	movs	r4, #54	@ 0x36
 800d5f0:	193b      	adds	r3, r7, r4
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800d5f6:	2335      	movs	r3, #53	@ 0x35
 800d5f8:	18fb      	adds	r3, r7, r3
 800d5fa:	2220      	movs	r2, #32
 800d5fc:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800d5fe:	2334      	movs	r3, #52	@ 0x34
 800d600:	18fb      	adds	r3, r7, r3
 800d602:	2220      	movs	r2, #32
 800d604:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800d606:	f7ff ff89 	bl	800d51c <sen5x_Power_On>
  error = sen5x_device_reset();
 800d60a:	0025      	movs	r5, r4
 800d60c:	193c      	adds	r4, r7, r4
 800d60e:	f001 f94b 	bl	800e8a8 <sen5x_device_reset>
 800d612:	0003      	movs	r3, r0
 800d614:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d616:	002c      	movs	r4, r5
 800d618:	193b      	adds	r3, r7, r4
 800d61a:	2200      	movs	r2, #0
 800d61c:	5e9b      	ldrsh	r3, [r3, r2]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00b      	beq.n	800d63a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800d622:	193b      	adds	r3, r7, r4
 800d624:	2200      	movs	r2, #0
 800d626:	5e9b      	ldrsh	r3, [r3, r2]
 800d628:	4a75      	ldr	r2, [pc, #468]	@ (800d800 <probe_sen5x+0x218>)
 800d62a:	4976      	ldr	r1, [pc, #472]	@ (800d804 <probe_sen5x+0x21c>)
 800d62c:	2001      	movs	r0, #1
 800d62e:	f005 fa47 	bl	8012ac0 <CreateLine>
      return error;
 800d632:	193b      	adds	r3, r7, r4
 800d634:	2200      	movs	r2, #0
 800d636:	5e9b      	ldrsh	r3, [r3, r2]
 800d638:	e0de      	b.n	800d7f8 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800d63a:	2536      	movs	r5, #54	@ 0x36
 800d63c:	197c      	adds	r4, r7, r5
 800d63e:	2335      	movs	r3, #53	@ 0x35
 800d640:	18fb      	adds	r3, r7, r3
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	230c      	movs	r3, #12
 800d646:	18fb      	adds	r3, r7, r3
 800d648:	0011      	movs	r1, r2
 800d64a:	0018      	movs	r0, r3
 800d64c:	f001 f818 	bl	800e680 <sen5x_get_serial_number>
 800d650:	0003      	movs	r3, r0
 800d652:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d654:	197b      	adds	r3, r7, r5
 800d656:	2200      	movs	r2, #0
 800d658:	5e9b      	ldrsh	r3, [r3, r2]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00b      	beq.n	800d676 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800d65e:	197b      	adds	r3, r7, r5
 800d660:	2200      	movs	r2, #0
 800d662:	5e9a      	ldrsh	r2, [r3, r2]
 800d664:	4b68      	ldr	r3, [pc, #416]	@ (800d808 <probe_sen5x+0x220>)
 800d666:	0011      	movs	r1, r2
 800d668:	0018      	movs	r0, r3
 800d66a:	f017 fa9b 	bl	8024ba4 <iprintf>
      return error;
 800d66e:	197b      	adds	r3, r7, r5
 800d670:	2200      	movs	r2, #0
 800d672:	5e9b      	ldrsh	r3, [r3, r2]
 800d674:	e0c0      	b.n	800d7f8 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800d676:	230c      	movs	r3, #12
 800d678:	18fa      	adds	r2, r7, r3
 800d67a:	4b64      	ldr	r3, [pc, #400]	@ (800d80c <probe_sen5x+0x224>)
 800d67c:	0011      	movs	r1, r2
 800d67e:	0018      	movs	r0, r3
 800d680:	f017 fa90 	bl	8024ba4 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800d684:	2536      	movs	r5, #54	@ 0x36
 800d686:	197c      	adds	r4, r7, r5
 800d688:	2334      	movs	r3, #52	@ 0x34
 800d68a:	18fb      	adds	r3, r7, r3
 800d68c:	781a      	ldrb	r2, [r3, #0]
 800d68e:	4b60      	ldr	r3, [pc, #384]	@ (800d810 <probe_sen5x+0x228>)
 800d690:	0011      	movs	r1, r2
 800d692:	0018      	movs	r0, r3
 800d694:	f000 ff9e 	bl	800e5d4 <sen5x_get_product_name>
 800d698:	0003      	movs	r3, r0
 800d69a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d69c:	197b      	adds	r3, r7, r5
 800d69e:	2200      	movs	r2, #0
 800d6a0:	5e9b      	ldrsh	r3, [r3, r2]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800d6a6:	197b      	adds	r3, r7, r5
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	5e9a      	ldrsh	r2, [r3, r2]
 800d6ac:	4b59      	ldr	r3, [pc, #356]	@ (800d814 <probe_sen5x+0x22c>)
 800d6ae:	0011      	movs	r1, r2
 800d6b0:	0018      	movs	r0, r3
 800d6b2:	f017 fa77 	bl	8024ba4 <iprintf>
      return error;
 800d6b6:	197b      	adds	r3, r7, r5
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	5e9b      	ldrsh	r3, [r3, r2]
 800d6bc:	e09c      	b.n	800d7f8 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800d6be:	4a54      	ldr	r2, [pc, #336]	@ (800d810 <probe_sen5x+0x228>)
 800d6c0:	4b55      	ldr	r3, [pc, #340]	@ (800d818 <probe_sen5x+0x230>)
 800d6c2:	0011      	movs	r1, r2
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f017 fa6d 	bl	8024ba4 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800d6ca:	2636      	movs	r6, #54	@ 0x36
 800d6cc:	19bc      	adds	r4, r7, r6
 800d6ce:	2308      	movs	r3, #8
 800d6d0:	18fd      	adds	r5, r7, r3
 800d6d2:	2309      	movs	r3, #9
 800d6d4:	18fa      	adds	r2, r7, r3
 800d6d6:	230a      	movs	r3, #10
 800d6d8:	18f9      	adds	r1, r7, r3
 800d6da:	230b      	movs	r3, #11
 800d6dc:	18f8      	adds	r0, r7, r3
 800d6de:	1d7b      	adds	r3, r7, #5
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	1dbb      	adds	r3, r7, #6
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	1dfb      	adds	r3, r7, #7
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	002b      	movs	r3, r5
 800d6ec:	f001 f81e 	bl	800e72c <sen5x_get_version>
 800d6f0:	0003      	movs	r3, r0
 800d6f2:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800d6f4:	19bb      	adds	r3, r7, r6
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	5e9b      	ldrsh	r3, [r3, r2]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00b      	beq.n	800d716 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800d6fe:	19bb      	adds	r3, r7, r6
 800d700:	2200      	movs	r2, #0
 800d702:	5e9a      	ldrsh	r2, [r3, r2]
 800d704:	4b45      	ldr	r3, [pc, #276]	@ (800d81c <probe_sen5x+0x234>)
 800d706:	0011      	movs	r1, r2
 800d708:	0018      	movs	r0, r3
 800d70a:	f017 fa4b 	bl	8024ba4 <iprintf>
      return error;
 800d70e:	19bb      	adds	r3, r7, r6
 800d710:	2200      	movs	r2, #0
 800d712:	5e9b      	ldrsh	r3, [r3, r2]
 800d714:	e070      	b.n	800d7f8 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800d716:	230b      	movs	r3, #11
 800d718:	18fb      	adds	r3, r7, r3
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	0019      	movs	r1, r3
 800d71e:	230a      	movs	r3, #10
 800d720:	18fb      	adds	r3, r7, r3
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	001a      	movs	r2, r3
 800d726:	2308      	movs	r3, #8
 800d728:	18fb      	adds	r3, r7, r3
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	001c      	movs	r4, r3
 800d72e:	1dfb      	adds	r3, r7, #7
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	483b      	ldr	r0, [pc, #236]	@ (800d820 <probe_sen5x+0x238>)
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	0023      	movs	r3, r4
 800d738:	f017 fa34 	bl	8024ba4 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800d73c:	2300      	movs	r3, #0
 800d73e:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800d740:	262e      	movs	r6, #46	@ 0x2e
 800d742:	19bb      	adds	r3, r7, r6
 800d744:	2200      	movs	r2, #0
 800d746:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800d748:	232c      	movs	r3, #44	@ 0x2c
 800d74a:	18fb      	adds	r3, r7, r3
 800d74c:	2200      	movs	r2, #0
 800d74e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800d750:	4934      	ldr	r1, [pc, #208]	@ (800d824 <probe_sen5x+0x23c>)
 800d752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d754:	f7f3 fc24 	bl	8000fa0 <__aeabi_fmul>
 800d758:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800d75a:	1c18      	adds	r0, r3, #0
 800d75c:	f7f3 ff18 	bl	8001590 <__aeabi_f2iz>
 800d760:	0003      	movs	r3, r0
 800d762:	b218      	sxth	r0, r3
 800d764:	2536      	movs	r5, #54	@ 0x36
 800d766:	197c      	adds	r4, r7, r5
 800d768:	232c      	movs	r3, #44	@ 0x2c
 800d76a:	18fb      	adds	r3, r7, r3
 800d76c:	881a      	ldrh	r2, [r3, #0]
 800d76e:	19bb      	adds	r3, r7, r6
 800d770:	2100      	movs	r1, #0
 800d772:	5e5b      	ldrsh	r3, [r3, r1]
 800d774:	0019      	movs	r1, r3
 800d776:	f000 fec9 	bl	800e50c <sen5x_set_temperature_offset_parameters>
 800d77a:	0003      	movs	r3, r0
 800d77c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d77e:	197b      	adds	r3, r7, r5
 800d780:	2200      	movs	r2, #0
 800d782:	5e9b      	ldrsh	r3, [r3, r2]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800d788:	197b      	adds	r3, r7, r5
 800d78a:	2200      	movs	r2, #0
 800d78c:	5e9b      	ldrsh	r3, [r3, r2]
 800d78e:	4a26      	ldr	r2, [pc, #152]	@ (800d828 <probe_sen5x+0x240>)
 800d790:	491c      	ldr	r1, [pc, #112]	@ (800d804 <probe_sen5x+0x21c>)
 800d792:	2001      	movs	r0, #1
 800d794:	f005 f994 	bl	8012ac0 <CreateLine>
      return error;
 800d798:	197b      	adds	r3, r7, r5
 800d79a:	2200      	movs	r2, #0
 800d79c:	5e9b      	ldrsh	r3, [r3, r2]
 800d79e:	e02b      	b.n	800d7f8 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800d7a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7a2:	f7f5 fe5f 	bl	8003464 <__aeabi_f2d>
 800d7a6:	0002      	movs	r2, r0
 800d7a8:	000b      	movs	r3, r1
 800d7aa:	4820      	ldr	r0, [pc, #128]	@ (800d82c <probe_sen5x+0x244>)
 800d7ac:	4920      	ldr	r1, [pc, #128]	@ (800d830 <probe_sen5x+0x248>)
 800d7ae:	9200      	str	r2, [sp, #0]
 800d7b0:	9301      	str	r3, [sp, #4]
 800d7b2:	0002      	movs	r2, r0
 800d7b4:	2002      	movs	r0, #2
 800d7b6:	f005 f983 	bl	8012ac0 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800d7ba:	f7fb fb63 	bl	8008e84 <Check_USB_PowerOn>
 800d7be:	0003      	movs	r3, r0
 800d7c0:	001a      	movs	r2, r3
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	4053      	eors	r3, r2
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00a      	beq.n	800d7e2 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800d7cc:	f7ff fed6 	bl	800d57c <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800d7d0:	f005 feac 	bl	801352c <HAL_GetTick>
 800d7d4:	0003      	movs	r3, r0
 800d7d6:	22fa      	movs	r2, #250	@ 0xfa
 800d7d8:	00d2      	lsls	r2, r2, #3
 800d7da:	189a      	adds	r2, r3, r2
 800d7dc:	4b15      	ldr	r3, [pc, #84]	@ (800d834 <probe_sen5x+0x24c>)
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	e006      	b.n	800d7f0 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800d7e2:	f005 fea3 	bl	801352c <HAL_GetTick>
 800d7e6:	0003      	movs	r3, r0
 800d7e8:	4a13      	ldr	r2, [pc, #76]	@ (800d838 <probe_sen5x+0x250>)
 800d7ea:	189a      	adds	r2, r3, r2
 800d7ec:	4b11      	ldr	r3, [pc, #68]	@ (800d834 <probe_sen5x+0x24c>)
 800d7ee:	601a      	str	r2, [r3, #0]
  }
  return error;
 800d7f0:	2336      	movs	r3, #54	@ 0x36
 800d7f2:	18fb      	adds	r3, r7, r3
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d7f8:	0018      	movs	r0, r3
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	b00f      	add	sp, #60	@ 0x3c
 800d7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d800:	0802c1e8 	.word	0x0802c1e8
 800d804:	0802c198 	.word	0x0802c198
 800d808:	0802c214 	.word	0x0802c214
 800d80c:	0802c244 	.word	0x0802c244
 800d810:	20000ee8 	.word	0x20000ee8
 800d814:	0802c258 	.word	0x0802c258
 800d818:	0802c288 	.word	0x0802c288
 800d81c:	0802c29c 	.word	0x0802c29c
 800d820:	0802c2c8 	.word	0x0802c2c8
 800d824:	43480000 	.word	0x43480000
 800d828:	0802c2ec 	.word	0x0802c2ec
 800d82c:	0802c32c 	.word	0x0802c32c
 800d830:	0802c12c 	.word	0x0802c12c
 800d834:	20000ef4 	.word	0x20000ef4
 800d838:	00006d60 	.word	0x00006d60

0800d83c <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800d83c:	b590      	push	{r4, r7, lr}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800d842:	1dbb      	adds	r3, r7, #6
 800d844:	2200      	movs	r2, #0
 800d846:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800d848:	4b1b      	ldr	r3, [pc, #108]	@ (800d8b8 <sen5x_lightup_measurement+0x7c>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00b      	beq.n	800d868 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800d850:	4a1a      	ldr	r2, [pc, #104]	@ (800d8bc <sen5x_lightup_measurement+0x80>)
 800d852:	4b1b      	ldr	r3, [pc, #108]	@ (800d8c0 <sen5x_lightup_measurement+0x84>)
 800d854:	0019      	movs	r1, r3
 800d856:	2002      	movs	r0, #2
 800d858:	f005 f932 	bl	8012ac0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800d85c:	1dbc      	adds	r4, r7, #6
 800d85e:	f000 fce1 	bl	800e224 <sen5x_start_measurement_without_pm>
 800d862:	0003      	movs	r3, r0
 800d864:	8023      	strh	r3, [r4, #0]
 800d866:	e00a      	b.n	800d87e <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800d868:	4a16      	ldr	r2, [pc, #88]	@ (800d8c4 <sen5x_lightup_measurement+0x88>)
 800d86a:	4b15      	ldr	r3, [pc, #84]	@ (800d8c0 <sen5x_lightup_measurement+0x84>)
 800d86c:	0019      	movs	r1, r3
 800d86e:	2002      	movs	r0, #2
 800d870:	f005 f926 	bl	8012ac0 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800d874:	1dbc      	adds	r4, r7, #6
 800d876:	f000 fca7 	bl	800e1c8 <sen5x_start_measurement>
 800d87a:	0003      	movs	r3, r0
 800d87c:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800d87e:	1dbb      	adds	r3, r7, #6
 800d880:	2200      	movs	r2, #0
 800d882:	5e9b      	ldrsh	r3, [r3, r2]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d008      	beq.n	800d89a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800d888:	1dbb      	adds	r3, r7, #6
 800d88a:	2200      	movs	r2, #0
 800d88c:	5e9b      	ldrsh	r3, [r3, r2]
 800d88e:	4a0e      	ldr	r2, [pc, #56]	@ (800d8c8 <sen5x_lightup_measurement+0x8c>)
 800d890:	490e      	ldr	r1, [pc, #56]	@ (800d8cc <sen5x_lightup_measurement+0x90>)
 800d892:	2001      	movs	r0, #1
 800d894:	f005 f914 	bl	8012ac0 <CreateLine>
 800d898:	e007      	b.n	800d8aa <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800d89a:	f7fb fb23 	bl	8008ee4 <showTime>
    Info("sen5x_start_measurement executed");
 800d89e:	4a0c      	ldr	r2, [pc, #48]	@ (800d8d0 <sen5x_lightup_measurement+0x94>)
 800d8a0:	4b07      	ldr	r3, [pc, #28]	@ (800d8c0 <sen5x_lightup_measurement+0x84>)
 800d8a2:	0019      	movs	r1, r3
 800d8a4:	2002      	movs	r0, #2
 800d8a6:	f005 f90b 	bl	8012ac0 <CreateLine>
  }
  return error;
 800d8aa:	1dbb      	adds	r3, r7, #6
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	b003      	add	sp, #12
 800d8b6:	bd90      	pop	{r4, r7, pc}
 800d8b8:	20000ee6 	.word	0x20000ee6
 800d8bc:	0802c364 	.word	0x0802c364
 800d8c0:	0802c12c 	.word	0x0802c12c
 800d8c4:	0802c390 	.word	0x0802c390
 800d8c8:	0802c3b0 	.word	0x0802c3b0
 800d8cc:	0802c198 	.word	0x0802c198
 800d8d0:	0802c3e0 	.word	0x0802c3e0

0800d8d4 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800d8da:	1dbb      	adds	r3, r7, #6
 800d8dc:	2200      	movs	r2, #0
 800d8de:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800d8e0:	4b21      	ldr	r3, [pc, #132]	@ (800d968 <sen5x_extinguish_measurement+0x94>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d01e      	beq.n	800d926 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800d8e8:	4a20      	ldr	r2, [pc, #128]	@ (800d96c <sen5x_extinguish_measurement+0x98>)
 800d8ea:	4b21      	ldr	r3, [pc, #132]	@ (800d970 <sen5x_extinguish_measurement+0x9c>)
 800d8ec:	0019      	movs	r1, r3
 800d8ee:	2002      	movs	r0, #2
 800d8f0:	f005 f8e6 	bl	8012ac0 <CreateLine>
    Info("PM measurement is disabled");
 800d8f4:	4a1f      	ldr	r2, [pc, #124]	@ (800d974 <sen5x_extinguish_measurement+0xa0>)
 800d8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d970 <sen5x_extinguish_measurement+0x9c>)
 800d8f8:	0019      	movs	r1, r3
 800d8fa:	2002      	movs	r0, #2
 800d8fc:	f005 f8e0 	bl	8012ac0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800d900:	1dbc      	adds	r4, r7, #6
 800d902:	f000 fc8f 	bl	800e224 <sen5x_start_measurement_without_pm>
 800d906:	0003      	movs	r3, r0
 800d908:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d90a:	1dbb      	adds	r3, r7, #6
 800d90c:	2200      	movs	r2, #0
 800d90e:	5e9b      	ldrsh	r3, [r3, r2]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d022      	beq.n	800d95a <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800d914:	1dbb      	adds	r3, r7, #6
 800d916:	2200      	movs	r2, #0
 800d918:	5e9b      	ldrsh	r3, [r3, r2]
 800d91a:	4a17      	ldr	r2, [pc, #92]	@ (800d978 <sen5x_extinguish_measurement+0xa4>)
 800d91c:	4917      	ldr	r1, [pc, #92]	@ (800d97c <sen5x_extinguish_measurement+0xa8>)
 800d91e:	2001      	movs	r0, #1
 800d920:	f005 f8ce 	bl	8012ac0 <CreateLine>
 800d924:	e019      	b.n	800d95a <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800d926:	1dbc      	adds	r4, r7, #6
 800d928:	f000 fcaa 	bl	800e280 <sen5x_stop_measurement>
 800d92c:	0003      	movs	r3, r0
 800d92e:	8023      	strh	r3, [r4, #0]
    showTime();
 800d930:	f7fb fad8 	bl	8008ee4 <showTime>
    Info("sen5x_stop_measurement executed");
 800d934:	4a12      	ldr	r2, [pc, #72]	@ (800d980 <sen5x_extinguish_measurement+0xac>)
 800d936:	4b0e      	ldr	r3, [pc, #56]	@ (800d970 <sen5x_extinguish_measurement+0x9c>)
 800d938:	0019      	movs	r1, r3
 800d93a:	2002      	movs	r0, #2
 800d93c:	f005 f8c0 	bl	8012ac0 <CreateLine>
    if (error) {
 800d940:	1dbb      	adds	r3, r7, #6
 800d942:	2200      	movs	r2, #0
 800d944:	5e9b      	ldrsh	r3, [r3, r2]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d007      	beq.n	800d95a <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800d94a:	1dbb      	adds	r3, r7, #6
 800d94c:	2200      	movs	r2, #0
 800d94e:	5e9b      	ldrsh	r3, [r3, r2]
 800d950:	4a0c      	ldr	r2, [pc, #48]	@ (800d984 <sen5x_extinguish_measurement+0xb0>)
 800d952:	490a      	ldr	r1, [pc, #40]	@ (800d97c <sen5x_extinguish_measurement+0xa8>)
 800d954:	2001      	movs	r0, #1
 800d956:	f005 f8b3 	bl	8012ac0 <CreateLine>
    }
  }
  return error;
 800d95a:	1dbb      	adds	r3, r7, #6
 800d95c:	2200      	movs	r2, #0
 800d95e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d960:	0018      	movs	r0, r3
 800d962:	46bd      	mov	sp, r7
 800d964:	b003      	add	sp, #12
 800d966:	bd90      	pop	{r4, r7, pc}
 800d968:	20000ee6 	.word	0x20000ee6
 800d96c:	0802c404 	.word	0x0802c404
 800d970:	0802c12c 	.word	0x0802c12c
 800d974:	0802c43c 	.word	0x0802c43c
 800d978:	0802c458 	.word	0x0802c458
 800d97c:	0802c198 	.word	0x0802c198
 800d980:	0802c498 	.word	0x0802c498
 800d984:	0802c4b8 	.word	0x0802c4b8

0800d988 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800d988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98a:	b08d      	sub	sp, #52	@ 0x34
 800d98c:	af04      	add	r7, sp, #16
 800d98e:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800d990:	261e      	movs	r6, #30
 800d992:	19bb      	adds	r3, r7, r6
 800d994:	2200      	movs	r2, #0
 800d996:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800d998:	19bc      	adds	r4, r7, r6
 800d99a:	2316      	movs	r3, #22
 800d99c:	18fd      	adds	r5, r7, r3
 800d99e:	2318      	movs	r3, #24
 800d9a0:	18fa      	adds	r2, r7, r3
 800d9a2:	231a      	movs	r3, #26
 800d9a4:	18f9      	adds	r1, r7, r3
 800d9a6:	231c      	movs	r3, #28
 800d9a8:	18f8      	adds	r0, r7, r3
 800d9aa:	230e      	movs	r3, #14
 800d9ac:	18fb      	adds	r3, r7, r3
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	2310      	movs	r3, #16
 800d9b2:	18fb      	adds	r3, r7, r3
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	2312      	movs	r3, #18
 800d9b8:	18fb      	adds	r3, r7, r3
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	2314      	movs	r3, #20
 800d9be:	18fb      	adds	r3, r7, r3
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	002b      	movs	r3, r5
 800d9c4:	f000 fcde 	bl	800e384 <sen5x_read_measured_values>
 800d9c8:	0003      	movs	r3, r0
 800d9ca:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800d9cc:	19bb      	adds	r3, r7, r6
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	5e9b      	ldrsh	r3, [r3, r2]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d003      	beq.n	800d9de <sen5x_read_measurement+0x56>
    return error;
 800d9d6:	19bb      	adds	r3, r7, r6
 800d9d8:	2200      	movs	r2, #0
 800d9da:	5e9b      	ldrsh	r3, [r3, r2]
 800d9dc:	e02c      	b.n	800da38 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800d9de:	231c      	movs	r3, #28
 800d9e0:	18fb      	adds	r3, r7, r3
 800d9e2:	881a      	ldrh	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800d9e8:	231a      	movs	r3, #26
 800d9ea:	18fb      	adds	r3, r7, r3
 800d9ec:	881a      	ldrh	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800d9f2:	2318      	movs	r3, #24
 800d9f4:	18fb      	adds	r3, r7, r3
 800d9f6:	881a      	ldrh	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800d9fc:	2316      	movs	r3, #22
 800d9fe:	18fb      	adds	r3, r7, r3
 800da00:	881a      	ldrh	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800da06:	2314      	movs	r3, #20
 800da08:	18fb      	adds	r3, r7, r3
 800da0a:	2200      	movs	r2, #0
 800da0c:	5e9a      	ldrsh	r2, [r3, r2]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800da12:	2312      	movs	r3, #18
 800da14:	18fb      	adds	r3, r7, r3
 800da16:	2200      	movs	r2, #0
 800da18:	5e9a      	ldrsh	r2, [r3, r2]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800da1e:	2310      	movs	r3, #16
 800da20:	18fb      	adds	r3, r7, r3
 800da22:	2200      	movs	r2, #0
 800da24:	5e9a      	ldrsh	r2, [r3, r2]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800da2a:	230e      	movs	r3, #14
 800da2c:	18fb      	adds	r3, r7, r3
 800da2e:	2200      	movs	r2, #0
 800da30:	5e9a      	ldrsh	r2, [r3, r2]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	81da      	strh	r2, [r3, #14]
  return 0;
 800da36:	2300      	movs	r3, #0
}
 800da38:	0018      	movs	r0, r3
 800da3a:	46bd      	mov	sp, r7
 800da3c:	b009      	add	sp, #36	@ 0x24
 800da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da40 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800da44:	4b63      	ldr	r3, [pc, #396]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	4a63      	ldr	r2, [pc, #396]	@ (800dbd8 <sen5x_printvalues+0x198>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d013      	beq.n	800da76 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800da4e:	4b61      	ldr	r3, [pc, #388]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800da50:	881b      	ldrh	r3, [r3, #0]
 800da52:	0018      	movs	r0, r3
 800da54:	f7f3 fdbc 	bl	80015d0 <__aeabi_i2f>
 800da58:	1c03      	adds	r3, r0, #0
 800da5a:	4960      	ldr	r1, [pc, #384]	@ (800dbdc <sen5x_printvalues+0x19c>)
 800da5c:	1c18      	adds	r0, r3, #0
 800da5e:	f7f3 f8b9 	bl	8000bd4 <__aeabi_fdiv>
 800da62:	1c03      	adds	r3, r0, #0
 800da64:	1c18      	adds	r0, r3, #0
 800da66:	f7f5 fcfd 	bl	8003464 <__aeabi_f2d>
 800da6a:	0002      	movs	r2, r0
 800da6c:	000b      	movs	r3, r1
 800da6e:	495c      	ldr	r1, [pc, #368]	@ (800dbe0 <sen5x_printvalues+0x1a0>)
 800da70:	0008      	movs	r0, r1
 800da72:	f017 f897 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800da76:	4b57      	ldr	r3, [pc, #348]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800da78:	885b      	ldrh	r3, [r3, #2]
 800da7a:	4a57      	ldr	r2, [pc, #348]	@ (800dbd8 <sen5x_printvalues+0x198>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d013      	beq.n	800daa8 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800da80:	4b54      	ldr	r3, [pc, #336]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800da82:	885b      	ldrh	r3, [r3, #2]
 800da84:	0018      	movs	r0, r3
 800da86:	f7f3 fda3 	bl	80015d0 <__aeabi_i2f>
 800da8a:	1c03      	adds	r3, r0, #0
 800da8c:	4953      	ldr	r1, [pc, #332]	@ (800dbdc <sen5x_printvalues+0x19c>)
 800da8e:	1c18      	adds	r0, r3, #0
 800da90:	f7f3 f8a0 	bl	8000bd4 <__aeabi_fdiv>
 800da94:	1c03      	adds	r3, r0, #0
 800da96:	1c18      	adds	r0, r3, #0
 800da98:	f7f5 fce4 	bl	8003464 <__aeabi_f2d>
 800da9c:	0002      	movs	r2, r0
 800da9e:	000b      	movs	r3, r1
 800daa0:	4950      	ldr	r1, [pc, #320]	@ (800dbe4 <sen5x_printvalues+0x1a4>)
 800daa2:	0008      	movs	r0, r1
 800daa4:	f017 f87e 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800daa8:	4b4a      	ldr	r3, [pc, #296]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800daaa:	889b      	ldrh	r3, [r3, #4]
 800daac:	4a4a      	ldr	r2, [pc, #296]	@ (800dbd8 <sen5x_printvalues+0x198>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d013      	beq.n	800dada <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800dab2:	4b48      	ldr	r3, [pc, #288]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800dab4:	889b      	ldrh	r3, [r3, #4]
 800dab6:	0018      	movs	r0, r3
 800dab8:	f7f3 fd8a 	bl	80015d0 <__aeabi_i2f>
 800dabc:	1c03      	adds	r3, r0, #0
 800dabe:	4947      	ldr	r1, [pc, #284]	@ (800dbdc <sen5x_printvalues+0x19c>)
 800dac0:	1c18      	adds	r0, r3, #0
 800dac2:	f7f3 f887 	bl	8000bd4 <__aeabi_fdiv>
 800dac6:	1c03      	adds	r3, r0, #0
 800dac8:	1c18      	adds	r0, r3, #0
 800daca:	f7f5 fccb 	bl	8003464 <__aeabi_f2d>
 800dace:	0002      	movs	r2, r0
 800dad0:	000b      	movs	r3, r1
 800dad2:	4945      	ldr	r1, [pc, #276]	@ (800dbe8 <sen5x_printvalues+0x1a8>)
 800dad4:	0008      	movs	r0, r1
 800dad6:	f017 f865 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800dada:	4b3e      	ldr	r3, [pc, #248]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800dadc:	88db      	ldrh	r3, [r3, #6]
 800dade:	4a3e      	ldr	r2, [pc, #248]	@ (800dbd8 <sen5x_printvalues+0x198>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d013      	beq.n	800db0c <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800dae4:	4b3b      	ldr	r3, [pc, #236]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800dae6:	88db      	ldrh	r3, [r3, #6]
 800dae8:	0018      	movs	r0, r3
 800daea:	f7f3 fd71 	bl	80015d0 <__aeabi_i2f>
 800daee:	1c03      	adds	r3, r0, #0
 800daf0:	493a      	ldr	r1, [pc, #232]	@ (800dbdc <sen5x_printvalues+0x19c>)
 800daf2:	1c18      	adds	r0, r3, #0
 800daf4:	f7f3 f86e 	bl	8000bd4 <__aeabi_fdiv>
 800daf8:	1c03      	adds	r3, r0, #0
 800dafa:	1c18      	adds	r0, r3, #0
 800dafc:	f7f5 fcb2 	bl	8003464 <__aeabi_f2d>
 800db00:	0002      	movs	r2, r0
 800db02:	000b      	movs	r3, r1
 800db04:	4939      	ldr	r1, [pc, #228]	@ (800dbec <sen5x_printvalues+0x1ac>)
 800db06:	0008      	movs	r0, r1
 800db08:	f017 f84c 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800db0c:	4b31      	ldr	r3, [pc, #196]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800db0e:	2208      	movs	r2, #8
 800db10:	5e9b      	ldrsh	r3, [r3, r2]
 800db12:	4a37      	ldr	r2, [pc, #220]	@ (800dbf0 <sen5x_printvalues+0x1b0>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d014      	beq.n	800db42 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800db18:	4b2e      	ldr	r3, [pc, #184]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800db1a:	2208      	movs	r2, #8
 800db1c:	5e9b      	ldrsh	r3, [r3, r2]
 800db1e:	0018      	movs	r0, r3
 800db20:	f7f3 fd56 	bl	80015d0 <__aeabi_i2f>
 800db24:	1c03      	adds	r3, r0, #0
 800db26:	4933      	ldr	r1, [pc, #204]	@ (800dbf4 <sen5x_printvalues+0x1b4>)
 800db28:	1c18      	adds	r0, r3, #0
 800db2a:	f7f3 f853 	bl	8000bd4 <__aeabi_fdiv>
 800db2e:	1c03      	adds	r3, r0, #0
 800db30:	1c18      	adds	r0, r3, #0
 800db32:	f7f5 fc97 	bl	8003464 <__aeabi_f2d>
 800db36:	0002      	movs	r2, r0
 800db38:	000b      	movs	r3, r1
 800db3a:	492f      	ldr	r1, [pc, #188]	@ (800dbf8 <sen5x_printvalues+0x1b8>)
 800db3c:	0008      	movs	r0, r1
 800db3e:	f017 f831 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800db42:	4b24      	ldr	r3, [pc, #144]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800db44:	220a      	movs	r2, #10
 800db46:	5e9b      	ldrsh	r3, [r3, r2]
 800db48:	4a29      	ldr	r2, [pc, #164]	@ (800dbf0 <sen5x_printvalues+0x1b0>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d014      	beq.n	800db78 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800db4e:	4b21      	ldr	r3, [pc, #132]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800db50:	220a      	movs	r2, #10
 800db52:	5e9b      	ldrsh	r3, [r3, r2]
 800db54:	0018      	movs	r0, r3
 800db56:	f7f3 fd3b 	bl	80015d0 <__aeabi_i2f>
 800db5a:	1c03      	adds	r3, r0, #0
 800db5c:	4927      	ldr	r1, [pc, #156]	@ (800dbfc <sen5x_printvalues+0x1bc>)
 800db5e:	1c18      	adds	r0, r3, #0
 800db60:	f7f3 f838 	bl	8000bd4 <__aeabi_fdiv>
 800db64:	1c03      	adds	r3, r0, #0
 800db66:	1c18      	adds	r0, r3, #0
 800db68:	f7f5 fc7c 	bl	8003464 <__aeabi_f2d>
 800db6c:	0002      	movs	r2, r0
 800db6e:	000b      	movs	r3, r1
 800db70:	4923      	ldr	r1, [pc, #140]	@ (800dc00 <sen5x_printvalues+0x1c0>)
 800db72:	0008      	movs	r0, r1
 800db74:	f017 f816 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800db78:	4b16      	ldr	r3, [pc, #88]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800db7a:	220c      	movs	r2, #12
 800db7c:	5e9b      	ldrsh	r3, [r3, r2]
 800db7e:	4a1c      	ldr	r2, [pc, #112]	@ (800dbf0 <sen5x_printvalues+0x1b0>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d00e      	beq.n	800dba2 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800db84:	4b13      	ldr	r3, [pc, #76]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800db86:	220c      	movs	r2, #12
 800db88:	5e9b      	ldrsh	r3, [r3, r2]
 800db8a:	210a      	movs	r1, #10
 800db8c:	0018      	movs	r0, r3
 800db8e:	f7f2 fb93 	bl	80002b8 <__divsi3>
 800db92:	0003      	movs	r3, r0
 800db94:	b21b      	sxth	r3, r3
 800db96:	001a      	movs	r2, r3
 800db98:	4b1a      	ldr	r3, [pc, #104]	@ (800dc04 <sen5x_printvalues+0x1c4>)
 800db9a:	0011      	movs	r1, r2
 800db9c:	0018      	movs	r0, r3
 800db9e:	f017 f801 	bl	8024ba4 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800dba2:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800dba4:	220e      	movs	r2, #14
 800dba6:	5e9b      	ldrsh	r3, [r3, r2]
 800dba8:	4a11      	ldr	r2, [pc, #68]	@ (800dbf0 <sen5x_printvalues+0x1b0>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d00e      	beq.n	800dbcc <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800dbae:	4b09      	ldr	r3, [pc, #36]	@ (800dbd4 <sen5x_printvalues+0x194>)
 800dbb0:	220e      	movs	r2, #14
 800dbb2:	5e9b      	ldrsh	r3, [r3, r2]
 800dbb4:	210a      	movs	r1, #10
 800dbb6:	0018      	movs	r0, r3
 800dbb8:	f7f2 fb7e 	bl	80002b8 <__divsi3>
 800dbbc:	0003      	movs	r3, r0
 800dbbe:	b21b      	sxth	r3, r3
 800dbc0:	001a      	movs	r2, r3
 800dbc2:	4b11      	ldr	r3, [pc, #68]	@ (800dc08 <sen5x_printvalues+0x1c8>)
 800dbc4:	0011      	movs	r1, r2
 800dbc6:	0018      	movs	r0, r3
 800dbc8:	f016 ffec 	bl	8024ba4 <iprintf>
  }
}
 800dbcc:	46c0      	nop			@ (mov r8, r8)
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	46c0      	nop			@ (mov r8, r8)
 800dbd4:	20000ef8 	.word	0x20000ef8
 800dbd8:	0000ffff 	.word	0x0000ffff
 800dbdc:	41200000 	.word	0x41200000
 800dbe0:	0802c4e8 	.word	0x0802c4e8
 800dbe4:	0802c514 	.word	0x0802c514
 800dbe8:	0802c540 	.word	0x0802c540
 800dbec:	0802c56c 	.word	0x0802c56c
 800dbf0:	00007fff 	.word	0x00007fff
 800dbf4:	42c80000 	.word	0x42c80000
 800dbf8:	0802c598 	.word	0x0802c598
 800dbfc:	43480000 	.word	0x43480000
 800dc00:	0802c5bc 	.word	0x0802c5bc
 800dc04:	0802c5e4 	.word	0x0802c5e4
 800dc08:	0802c5fc 	.word	0x0802c5fc

0800dc0c <sen5xStore>:

void sen5xStore() {
 800dc0c:	b5b0      	push	{r4, r5, r7, lr}
 800dc0e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800dc10:	4b41      	ldr	r3, [pc, #260]	@ (800dd18 <sen5xStore+0x10c>)
 800dc12:	881b      	ldrh	r3, [r3, #0]
 800dc14:	4a41      	ldr	r2, [pc, #260]	@ (800dd1c <sen5xStore+0x110>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d004      	beq.n	800dc24 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800dc1a:	4b3f      	ldr	r3, [pc, #252]	@ (800dd18 <sen5xStore+0x10c>)
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	0018      	movs	r0, r3
 800dc20:	f7f6 fdc2 	bl	80047a8 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800dc24:	4b3c      	ldr	r3, [pc, #240]	@ (800dd18 <sen5xStore+0x10c>)
 800dc26:	885b      	ldrh	r3, [r3, #2]
 800dc28:	4a3c      	ldr	r2, [pc, #240]	@ (800dd1c <sen5xStore+0x110>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d004      	beq.n	800dc38 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800dc2e:	4b3a      	ldr	r3, [pc, #232]	@ (800dd18 <sen5xStore+0x10c>)
 800dc30:	885b      	ldrh	r3, [r3, #2]
 800dc32:	0018      	movs	r0, r3
 800dc34:	f7f6 fde4 	bl	8004800 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800dc38:	4b37      	ldr	r3, [pc, #220]	@ (800dd18 <sen5xStore+0x10c>)
 800dc3a:	889b      	ldrh	r3, [r3, #4]
 800dc3c:	4a37      	ldr	r2, [pc, #220]	@ (800dd1c <sen5xStore+0x110>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d004      	beq.n	800dc4c <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800dc42:	4b35      	ldr	r3, [pc, #212]	@ (800dd18 <sen5xStore+0x10c>)
 800dc44:	889b      	ldrh	r3, [r3, #4]
 800dc46:	0018      	movs	r0, r3
 800dc48:	f7f6 fe06 	bl	8004858 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800dc4c:	4b32      	ldr	r3, [pc, #200]	@ (800dd18 <sen5xStore+0x10c>)
 800dc4e:	88db      	ldrh	r3, [r3, #6]
 800dc50:	4a32      	ldr	r2, [pc, #200]	@ (800dd1c <sen5xStore+0x110>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d004      	beq.n	800dc60 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800dc56:	4b30      	ldr	r3, [pc, #192]	@ (800dd18 <sen5xStore+0x10c>)
 800dc58:	88db      	ldrh	r3, [r3, #6]
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f7f6 fe28 	bl	80048b0 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dc60:	4b2f      	ldr	r3, [pc, #188]	@ (800dd20 <sen5xStore+0x114>)
 800dc62:	791b      	ldrb	r3, [r3, #4]
 800dc64:	2b34      	cmp	r3, #52	@ 0x34
 800dc66:	d003      	beq.n	800dc70 <sen5xStore+0x64>
 800dc68:	4b2d      	ldr	r3, [pc, #180]	@ (800dd20 <sen5xStore+0x114>)
 800dc6a:	791b      	ldrb	r3, [r3, #4]
 800dc6c:	2b35      	cmp	r3, #53	@ 0x35
 800dc6e:	d14f      	bne.n	800dd10 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800dc70:	4b29      	ldr	r3, [pc, #164]	@ (800dd18 <sen5xStore+0x10c>)
 800dc72:	220a      	movs	r2, #10
 800dc74:	5e9b      	ldrsh	r3, [r3, r2]
 800dc76:	0018      	movs	r0, r3
 800dc78:	f7f3 fcaa 	bl	80015d0 <__aeabi_i2f>
 800dc7c:	1c04      	adds	r4, r0, #0
 800dc7e:	4b26      	ldr	r3, [pc, #152]	@ (800dd18 <sen5xStore+0x10c>)
 800dc80:	2208      	movs	r2, #8
 800dc82:	5e9b      	ldrsh	r3, [r3, r2]
 800dc84:	0018      	movs	r0, r3
 800dc86:	f7f3 fca3 	bl	80015d0 <__aeabi_i2f>
 800dc8a:	1c03      	adds	r3, r0, #0
 800dc8c:	1c19      	adds	r1, r3, #0
 800dc8e:	1c20      	adds	r0, r4, #0
 800dc90:	f7f6 fe58 	bl	8004944 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800dc94:	4b23      	ldr	r3, [pc, #140]	@ (800dd24 <sen5xStore+0x118>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	4053      	eors	r3, r2
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d103      	bne.n	800dcaa <sen5xStore+0x9e>
 800dca2:	4b21      	ldr	r3, [pc, #132]	@ (800dd28 <sen5xStore+0x11c>)
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d032      	beq.n	800dd10 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800dcaa:	4b1b      	ldr	r3, [pc, #108]	@ (800dd18 <sen5xStore+0x10c>)
 800dcac:	220c      	movs	r2, #12
 800dcae:	5e9b      	ldrsh	r3, [r3, r2]
 800dcb0:	4a1e      	ldr	r2, [pc, #120]	@ (800dd2c <sen5xStore+0x120>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d019      	beq.n	800dcea <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800dcb6:	4b18      	ldr	r3, [pc, #96]	@ (800dd18 <sen5xStore+0x10c>)
 800dcb8:	220c      	movs	r2, #12
 800dcba:	5e9b      	ldrsh	r3, [r3, r2]
 800dcbc:	210a      	movs	r1, #10
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f7f2 fafa 	bl	80002b8 <__divsi3>
 800dcc4:	0003      	movs	r3, r0
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	0018      	movs	r0, r3
 800dccc:	f003 fea0 	bl	8011a10 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800dcd0:	4b11      	ldr	r3, [pc, #68]	@ (800dd18 <sen5xStore+0x10c>)
 800dcd2:	220c      	movs	r2, #12
 800dcd4:	5e9b      	ldrsh	r3, [r3, r2]
 800dcd6:	210a      	movs	r1, #10
 800dcd8:	0018      	movs	r0, r3
 800dcda:	f7f2 faed 	bl	80002b8 <__divsi3>
 800dcde:	0003      	movs	r3, r0
 800dce0:	b21b      	sxth	r3, r3
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	0018      	movs	r0, r3
 800dce6:	f7f6 fc91 	bl	800460c <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800dcea:	4b0b      	ldr	r3, [pc, #44]	@ (800dd18 <sen5xStore+0x10c>)
 800dcec:	220e      	movs	r2, #14
 800dcee:	5e9b      	ldrsh	r3, [r3, r2]
 800dcf0:	4a0e      	ldr	r2, [pc, #56]	@ (800dd2c <sen5xStore+0x120>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d00c      	beq.n	800dd10 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800dcf6:	4b08      	ldr	r3, [pc, #32]	@ (800dd18 <sen5xStore+0x10c>)
 800dcf8:	220e      	movs	r2, #14
 800dcfa:	5e9b      	ldrsh	r3, [r3, r2]
 800dcfc:	210a      	movs	r1, #10
 800dcfe:	0018      	movs	r0, r3
 800dd00:	f7f2 fada 	bl	80002b8 <__divsi3>
 800dd04:	0003      	movs	r3, r0
 800dd06:	b21b      	sxth	r3, r3
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	0018      	movs	r0, r3
 800dd0c:	f7f6 fdfc 	bl	8004908 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800dd10:	46c0      	nop			@ (mov r8, r8)
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bdb0      	pop	{r4, r5, r7, pc}
 800dd16:	46c0      	nop			@ (mov r8, r8)
 800dd18:	20000ef8 	.word	0x20000ef8
 800dd1c:	0000ffff 	.word	0x0000ffff
 800dd20:	20000ee8 	.word	0x20000ee8
 800dd24:	20000ee6 	.word	0x20000ee6
 800dd28:	20001e75 	.word	0x20001e75
 800dd2c:	00007fff 	.word	0x00007fff

0800dd30 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800dd30:	b590      	push	{r4, r7, lr}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af02      	add	r7, sp, #8
 800dd36:	6039      	str	r1, [r7, #0]
 800dd38:	0011      	movs	r1, r2
 800dd3a:	1dfb      	adds	r3, r7, #7
 800dd3c:	1c02      	adds	r2, r0, #0
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	1d3b      	adds	r3, r7, #4
 800dd42:	1c0a      	adds	r2, r1, #0
 800dd44:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800dd46:	1dfb      	adds	r3, r7, #7
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	18db      	adds	r3, r3, r3
 800dd4e:	b299      	uxth	r1, r3
 800dd50:	1d3b      	adds	r3, r7, #4
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	4805      	ldr	r0, [pc, #20]	@ (800dd6c <sensirion_i2c_hal_read+0x3c>)
 800dd58:	2464      	movs	r4, #100	@ 0x64
 800dd5a:	9400      	str	r4, [sp, #0]
 800dd5c:	f007 f84e 	bl	8014dfc <HAL_I2C_Master_Receive>
 800dd60:	0003      	movs	r3, r0
 800dd62:	b25b      	sxtb	r3, r3
}
 800dd64:	0018      	movs	r0, r3
 800dd66:	46bd      	mov	sp, r7
 800dd68:	b003      	add	sp, #12
 800dd6a:	bd90      	pop	{r4, r7, pc}
 800dd6c:	20000cbc 	.word	0x20000cbc

0800dd70 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800dd70:	b590      	push	{r4, r7, lr}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af02      	add	r7, sp, #8
 800dd76:	6039      	str	r1, [r7, #0]
 800dd78:	0011      	movs	r1, r2
 800dd7a:	1dfb      	adds	r3, r7, #7
 800dd7c:	1c02      	adds	r2, r0, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
 800dd80:	1d3b      	adds	r3, r7, #4
 800dd82:	1c0a      	adds	r2, r1, #0
 800dd84:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800dd86:	1dfb      	adds	r3, r7, #7
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	18db      	adds	r3, r3, r3
 800dd8e:	b299      	uxth	r1, r3
 800dd90:	1d3b      	adds	r3, r7, #4
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	683a      	ldr	r2, [r7, #0]
 800dd96:	4805      	ldr	r0, [pc, #20]	@ (800ddac <sensirion_i2c_hal_write+0x3c>)
 800dd98:	2464      	movs	r4, #100	@ 0x64
 800dd9a:	9400      	str	r4, [sp, #0]
 800dd9c:	f006 ff26 	bl	8014bec <HAL_I2C_Master_Transmit>
 800dda0:	0003      	movs	r3, r0
 800dda2:	b25b      	sxtb	r3, r3
}
 800dda4:	0018      	movs	r0, r3
 800dda6:	46bd      	mov	sp, r7
 800dda8:	b003      	add	sp, #12
 800ddaa:	bd90      	pop	{r4, r7, pc}
 800ddac:	20000cbc 	.word	0x20000cbc

0800ddb0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	22fa      	movs	r2, #250	@ 0xfa
 800ddbc:	0091      	lsls	r1, r2, #2
 800ddbe:	0018      	movs	r0, r3
 800ddc0:	f7f2 f9f0 	bl	80001a4 <__udivsi3>
 800ddc4:	0003      	movs	r3, r0
 800ddc6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	22fa      	movs	r2, #250	@ 0xfa
 800ddcc:	0091      	lsls	r1, r2, #2
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f7f2 fa6e 	bl	80002b0 <__aeabi_uidivmod>
 800ddd4:	1e0b      	subs	r3, r1, #0
 800ddd6:	d002      	beq.n	800ddde <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	0018      	movs	r0, r3
 800dde2:	f005 fbad 	bl	8013540 <HAL_Delay>
}
 800dde6:	46c0      	nop			@ (mov r8, r8)
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b004      	add	sp, #16
 800ddec:	bd80      	pop	{r7, pc}
	...

0800ddf0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800ddfa:	1d3b      	adds	r3, r7, #4
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	f000 fd01 	bl	800e804 <sen5x_read_device_status>
 800de02:	1e03      	subs	r3, r0, #0
 800de04:	d007      	beq.n	800de16 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800de06:	4a28      	ldr	r2, [pc, #160]	@ (800dea8 <sen5x_check_for_errors+0xb8>)
 800de08:	4b28      	ldr	r3, [pc, #160]	@ (800deac <sen5x_check_for_errors+0xbc>)
 800de0a:	0019      	movs	r1, r3
 800de0c:	2001      	movs	r0, #1
 800de0e:	f004 fe57 	bl	8012ac0 <CreateLine>
    return true;
 800de12:	2301      	movs	r3, #1
 800de14:	e043      	b.n	800de9e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d101      	bne.n	800de20 <sen5x_check_for_errors+0x30>
    return false;
 800de1c:	2300      	movs	r3, #0
 800de1e:	e03e      	b.n	800de9e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	2380      	movs	r3, #128	@ 0x80
 800de24:	039b      	lsls	r3, r3, #14
 800de26:	4013      	ands	r3, r2
 800de28:	d005      	beq.n	800de36 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800de2a:	4a21      	ldr	r2, [pc, #132]	@ (800deb0 <sen5x_check_for_errors+0xc0>)
 800de2c:	4b21      	ldr	r3, [pc, #132]	@ (800deb4 <sen5x_check_for_errors+0xc4>)
 800de2e:	0019      	movs	r1, r3
 800de30:	2003      	movs	r0, #3
 800de32:	f004 fe45 	bl	8012ac0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	2380      	movs	r3, #128	@ 0x80
 800de3a:	031b      	lsls	r3, r3, #12
 800de3c:	4013      	ands	r3, r2
 800de3e:	d005      	beq.n	800de4c <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800de40:	4a1d      	ldr	r2, [pc, #116]	@ (800deb8 <sen5x_check_for_errors+0xc8>)
 800de42:	4b1c      	ldr	r3, [pc, #112]	@ (800deb4 <sen5x_check_for_errors+0xc4>)
 800de44:	0019      	movs	r1, r3
 800de46:	2003      	movs	r0, #3
 800de48:	f004 fe3a 	bl	8012ac0 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2280      	movs	r2, #128	@ 0x80
 800de50:	4013      	ands	r3, r2
 800de52:	d005      	beq.n	800de60 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800de54:	4a19      	ldr	r2, [pc, #100]	@ (800debc <sen5x_check_for_errors+0xcc>)
 800de56:	4b17      	ldr	r3, [pc, #92]	@ (800deb4 <sen5x_check_for_errors+0xc4>)
 800de58:	0019      	movs	r1, r3
 800de5a:	2003      	movs	r0, #3
 800de5c:	f004 fe30 	bl	8012ac0 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2240      	movs	r2, #64	@ 0x40
 800de64:	4013      	ands	r3, r2
 800de66:	d005      	beq.n	800de74 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800de68:	4a15      	ldr	r2, [pc, #84]	@ (800dec0 <sen5x_check_for_errors+0xd0>)
 800de6a:	4b12      	ldr	r3, [pc, #72]	@ (800deb4 <sen5x_check_for_errors+0xc4>)
 800de6c:	0019      	movs	r1, r3
 800de6e:	2003      	movs	r0, #3
 800de70:	f004 fe26 	bl	8012ac0 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2220      	movs	r2, #32
 800de78:	4013      	ands	r3, r2
 800de7a:	d005      	beq.n	800de88 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800de7c:	4a11      	ldr	r2, [pc, #68]	@ (800dec4 <sen5x_check_for_errors+0xd4>)
 800de7e:	4b0d      	ldr	r3, [pc, #52]	@ (800deb4 <sen5x_check_for_errors+0xc4>)
 800de80:	0019      	movs	r1, r3
 800de82:	2003      	movs	r0, #3
 800de84:	f004 fe1c 	bl	8012ac0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2210      	movs	r2, #16
 800de8c:	4013      	ands	r3, r2
 800de8e:	d005      	beq.n	800de9c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800de90:	4a0d      	ldr	r2, [pc, #52]	@ (800dec8 <sen5x_check_for_errors+0xd8>)
 800de92:	4b08      	ldr	r3, [pc, #32]	@ (800deb4 <sen5x_check_for_errors+0xc4>)
 800de94:	0019      	movs	r1, r3
 800de96:	2003      	movs	r0, #3
 800de98:	f004 fe12 	bl	8012ac0 <CreateLine>
  }
  return 1;
 800de9c:	2301      	movs	r3, #1
}
 800de9e:	0018      	movs	r0, r3
 800dea0:	46bd      	mov	sp, r7
 800dea2:	b002      	add	sp, #8
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	0802c614 	.word	0x0802c614
 800deac:	0802c198 	.word	0x0802c198
 800deb0:	0802c640 	.word	0x0802c640
 800deb4:	0802c16c 	.word	0x0802c16c
 800deb8:	0802c660 	.word	0x0802c660
 800debc:	0802c67c 	.word	0x0802c67c
 800dec0:	0802c6a0 	.word	0x0802c6a0
 800dec4:	0802c6c0 	.word	0x0802c6c0
 800dec8:	0802c6d4 	.word	0x0802c6d4

0800decc <set_light_on_state>:

void set_light_on_state(void) {
 800decc:	b580      	push	{r7, lr}
 800dece:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800ded0:	4b15      	ldr	r3, [pc, #84]	@ (800df28 <set_light_on_state+0x5c>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2201      	movs	r2, #1
 800ded6:	4053      	eors	r3, r2
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d008      	beq.n	800def0 <set_light_on_state+0x24>
    sen5x_Power_On();
 800dede:	f7ff fb1d 	bl	800d51c <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800dee2:	4a12      	ldr	r2, [pc, #72]	@ (800df2c <set_light_on_state+0x60>)
 800dee4:	4b12      	ldr	r3, [pc, #72]	@ (800df30 <set_light_on_state+0x64>)
 800dee6:	0019      	movs	r1, r3
 800dee8:	2003      	movs	r0, #3
 800deea:	f004 fde9 	bl	8012ac0 <CreateLine>
 800deee:	e00a      	b.n	800df06 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800def0:	f005 fb1c 	bl	801352c <HAL_GetTick>
 800def4:	0002      	movs	r2, r0
 800def6:	4b0f      	ldr	r3, [pc, #60]	@ (800df34 <set_light_on_state+0x68>)
 800def8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800defa:	4a0f      	ldr	r2, [pc, #60]	@ (800df38 <set_light_on_state+0x6c>)
 800defc:	4b0c      	ldr	r3, [pc, #48]	@ (800df30 <set_light_on_state+0x64>)
 800defe:	0019      	movs	r1, r3
 800df00:	2003      	movs	r0, #3
 800df02:	f004 fddd 	bl	8012ac0 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800df06:	f7ff fc99 	bl	800d83c <sen5x_lightup_measurement>
 800df0a:	1e03      	subs	r3, r0, #0
 800df0c:	d005      	beq.n	800df1a <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800df0e:	4a0b      	ldr	r2, [pc, #44]	@ (800df3c <set_light_on_state+0x70>)
 800df10:	4b0b      	ldr	r3, [pc, #44]	@ (800df40 <set_light_on_state+0x74>)
 800df12:	0019      	movs	r1, r3
 800df14:	2001      	movs	r0, #1
 800df16:	f004 fdd3 	bl	8012ac0 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800df1a:	4b0a      	ldr	r3, [pc, #40]	@ (800df44 <set_light_on_state+0x78>)
 800df1c:	2203      	movs	r2, #3
 800df1e:	701a      	strb	r2, [r3, #0]
}
 800df20:	46c0      	nop			@ (mov r8, r8)
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	46c0      	nop			@ (mov r8, r8)
 800df28:	20000ee5 	.word	0x20000ee5
 800df2c:	0802c710 	.word	0x0802c710
 800df30:	0802c16c 	.word	0x0802c16c
 800df34:	20000ef4 	.word	0x20000ef4
 800df38:	0802c730 	.word	0x0802c730
 800df3c:	0802c748 	.word	0x0802c748
 800df40:	0802c198 	.word	0x0802c198
 800df44:	2000009d 	.word	0x2000009d

0800df48 <sen5x_statemachine>:

void sen5x_statemachine() {
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800df4e:	1dfb      	adds	r3, r7, #7
 800df50:	2200      	movs	r2, #0
 800df52:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800df54:	4b86      	ldr	r3, [pc, #536]	@ (800e170 <sen5x_statemachine+0x228>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	0018      	movs	r0, r3
 800df5a:	f004 fd5b 	bl	8012a14 <TimestampIsReached>
 800df5e:	1e03      	subs	r3, r0, #0
 800df60:	d100      	bne.n	800df64 <sen5x_statemachine+0x1c>
 800df62:	e100      	b.n	800e166 <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800df64:	4b83      	ldr	r3, [pc, #524]	@ (800e174 <sen5x_statemachine+0x22c>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b05      	cmp	r3, #5
 800df6a:	d900      	bls.n	800df6e <sen5x_statemachine+0x26>
 800df6c:	e0fb      	b.n	800e166 <sen5x_statemachine+0x21e>
 800df6e:	009a      	lsls	r2, r3, #2
 800df70:	4b81      	ldr	r3, [pc, #516]	@ (800e178 <sen5x_statemachine+0x230>)
 800df72:	18d3      	adds	r3, r2, r3
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800df78:	4a80      	ldr	r2, [pc, #512]	@ (800e17c <sen5x_statemachine+0x234>)
 800df7a:	4b81      	ldr	r3, [pc, #516]	@ (800e180 <sen5x_statemachine+0x238>)
 800df7c:	0019      	movs	r1, r3
 800df7e:	2001      	movs	r0, #1
 800df80:	f004 fd9e 	bl	8012ac0 <CreateLine>
      SetPMSensorStatus(false);
 800df84:	2000      	movs	r0, #0
 800df86:	f7fe faab 	bl	800c4e0 <SetPMSensorStatus>
      DisablePMSensor();
 800df8a:	f7fe fa2d 	bl	800c3e8 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800df8e:	f005 facd 	bl	801352c <HAL_GetTick>
 800df92:	0003      	movs	r3, r0
 800df94:	4a7b      	ldr	r2, [pc, #492]	@ (800e184 <sen5x_statemachine+0x23c>)
 800df96:	189a      	adds	r2, r3, r2
 800df98:	4b75      	ldr	r3, [pc, #468]	@ (800e170 <sen5x_statemachine+0x228>)
 800df9a:	601a      	str	r2, [r3, #0]
      break;
 800df9c:	e0e3      	b.n	800e166 <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800df9e:	f005 fac5 	bl	801352c <HAL_GetTick>
 800dfa2:	0003      	movs	r3, r0
 800dfa4:	4a78      	ldr	r2, [pc, #480]	@ (800e188 <sen5x_statemachine+0x240>)
 800dfa6:	189a      	adds	r2, r3, r2
 800dfa8:	4b71      	ldr	r3, [pc, #452]	@ (800e170 <sen5x_statemachine+0x228>)
 800dfaa:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800dfac:	f7ff ff8e 	bl	800decc <set_light_on_state>
      break;
 800dfb0:	e0d9      	b.n	800e166 <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800dfb2:	4b70      	ldr	r3, [pc, #448]	@ (800e174 <sen5x_statemachine+0x22c>)
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800dfb8:	4b74      	ldr	r3, [pc, #464]	@ (800e18c <sen5x_statemachine+0x244>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b05      	cmp	r3, #5
 800dfbe:	d905      	bls.n	800dfcc <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800dfc0:	4b6c      	ldr	r3, [pc, #432]	@ (800e174 <sen5x_statemachine+0x22c>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800dfc6:	f7ff fad9 	bl	800d57c <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800dfca:	e0c9      	b.n	800e160 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800dfcc:	f7ff ff10 	bl	800ddf0 <sen5x_check_for_errors>
 800dfd0:	1e03      	subs	r3, r0, #0
 800dfd2:	d01f      	beq.n	800e014 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800dfd4:	f000 fc68 	bl	800e8a8 <sen5x_device_reset>
 800dfd8:	1e03      	subs	r3, r0, #0
 800dfda:	d00f      	beq.n	800dffc <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800dfdc:	4a6c      	ldr	r2, [pc, #432]	@ (800e190 <sen5x_statemachine+0x248>)
 800dfde:	4b68      	ldr	r3, [pc, #416]	@ (800e180 <sen5x_statemachine+0x238>)
 800dfe0:	0019      	movs	r1, r3
 800dfe2:	2001      	movs	r0, #1
 800dfe4:	f004 fd6c 	bl	8012ac0 <CreateLine>
            sen5xErrors++;
 800dfe8:	4b68      	ldr	r3, [pc, #416]	@ (800e18c <sen5x_statemachine+0x244>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	3301      	adds	r3, #1
 800dfee:	b2da      	uxtb	r2, r3
 800dff0:	4b66      	ldr	r3, [pc, #408]	@ (800e18c <sen5x_statemachine+0x244>)
 800dff2:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800dff4:	4b5f      	ldr	r3, [pc, #380]	@ (800e174 <sen5x_statemachine+0x22c>)
 800dff6:	2203      	movs	r2, #3
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	e005      	b.n	800e008 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800dffc:	4a65      	ldr	r2, [pc, #404]	@ (800e194 <sen5x_statemachine+0x24c>)
 800dffe:	4b66      	ldr	r3, [pc, #408]	@ (800e198 <sen5x_statemachine+0x250>)
 800e000:	0019      	movs	r1, r3
 800e002:	2002      	movs	r0, #2
 800e004:	f004 fd5c 	bl	8012ac0 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e008:	f005 fa90 	bl	801352c <HAL_GetTick>
 800e00c:	0002      	movs	r2, r0
 800e00e:	4b58      	ldr	r3, [pc, #352]	@ (800e170 <sen5x_statemachine+0x228>)
 800e010:	601a      	str	r2, [r3, #0]
      break;
 800e012:	e0a5      	b.n	800e160 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800e014:	4b5d      	ldr	r3, [pc, #372]	@ (800e18c <sen5x_statemachine+0x244>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d100      	bne.n	800e01e <sen5x_statemachine+0xd6>
 800e01c:	e0a0      	b.n	800e160 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800e01e:	4b5b      	ldr	r3, [pc, #364]	@ (800e18c <sen5x_statemachine+0x244>)
 800e020:	2200      	movs	r2, #0
 800e022:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e024:	4a5d      	ldr	r2, [pc, #372]	@ (800e19c <sen5x_statemachine+0x254>)
 800e026:	4b5e      	ldr	r3, [pc, #376]	@ (800e1a0 <sen5x_statemachine+0x258>)
 800e028:	0019      	movs	r1, r3
 800e02a:	2003      	movs	r0, #3
 800e02c:	f004 fd48 	bl	8012ac0 <CreateLine>
      break;
 800e030:	e096      	b.n	800e160 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e032:	1dfb      	adds	r3, r7, #7
 800e034:	0018      	movs	r0, r3
 800e036:	f000 f953 	bl	800e2e0 <sen5x_read_data_ready>
      if (data_ready) {
 800e03a:	1dfb      	adds	r3, r7, #7
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d02c      	beq.n	800e09c <sen5x_statemachine+0x154>
        SetPMIndicator();
 800e042:	f003 fbf1 	bl	8011828 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e046:	4b57      	ldr	r3, [pc, #348]	@ (800e1a4 <sen5x_statemachine+0x25c>)
 800e048:	0018      	movs	r0, r3
 800e04a:	f7ff fc9d 	bl	800d988 <sen5x_read_measurement>
 800e04e:	1e03      	subs	r3, r0, #0
 800e050:	d00b      	beq.n	800e06a <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800e052:	4a55      	ldr	r2, [pc, #340]	@ (800e1a8 <sen5x_statemachine+0x260>)
 800e054:	4b4a      	ldr	r3, [pc, #296]	@ (800e180 <sen5x_statemachine+0x238>)
 800e056:	0019      	movs	r1, r3
 800e058:	2001      	movs	r0, #1
 800e05a:	f004 fd31 	bl	8012ac0 <CreateLine>
          sen5xErrors++;
 800e05e:	4b4b      	ldr	r3, [pc, #300]	@ (800e18c <sen5x_statemachine+0x244>)
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	b2da      	uxtb	r2, r3
 800e066:	4b49      	ldr	r3, [pc, #292]	@ (800e18c <sen5x_statemachine+0x244>)
 800e068:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e06a:	4b50      	ldr	r3, [pc, #320]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	3301      	adds	r3, #1
 800e070:	b2da      	uxtb	r2, r3
 800e072:	4b4e      	ldr	r3, [pc, #312]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e074:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e076:	4b4d      	ldr	r3, [pc, #308]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	2b1f      	cmp	r3, #31
 800e07c:	d102      	bne.n	800e084 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800e07e:	4b4b      	ldr	r3, [pc, #300]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e080:	2200      	movs	r2, #0
 800e082:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e084:	4b49      	ldr	r3, [pc, #292]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d901      	bls.n	800e090 <sen5x_statemachine+0x148>
          sen5xStore();
 800e08c:	f7ff fdbe 	bl	800dc0c <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e090:	4b46      	ldr	r3, [pc, #280]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b02      	cmp	r3, #2
 800e096:	d101      	bne.n	800e09c <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e098:	f7ff fcd2 	bl	800da40 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e09c:	4b44      	ldr	r3, [pc, #272]	@ (800e1b0 <sen5x_statemachine+0x268>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d103      	bne.n	800e0ac <sen5x_statemachine+0x164>
 800e0a4:	4b41      	ldr	r3, [pc, #260]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d95b      	bls.n	800e164 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800e0ac:	4b31      	ldr	r3, [pc, #196]	@ (800e174 <sen5x_statemachine+0x22c>)
 800e0ae:	2204      	movs	r2, #4
 800e0b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e0b2:	e057      	b.n	800e164 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800e0b4:	f7fb f9d6 	bl	8009464 <RTC_GetWeekday>
 800e0b8:	0003      	movs	r3, r0
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d11a      	bne.n	800e0f4 <sen5x_statemachine+0x1ac>
 800e0be:	4b3d      	ldr	r3, [pc, #244]	@ (800e1b4 <sen5x_statemachine+0x26c>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	4053      	eors	r3, r2
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d013      	beq.n	800e0f4 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800e0cc:	f000 f9ee 	bl	800e4ac <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e0d0:	4a39      	ldr	r2, [pc, #228]	@ (800e1b8 <sen5x_statemachine+0x270>)
 800e0d2:	4b31      	ldr	r3, [pc, #196]	@ (800e198 <sen5x_statemachine+0x250>)
 800e0d4:	0019      	movs	r1, r3
 800e0d6:	2002      	movs	r0, #2
 800e0d8:	f004 fcf2 	bl	8012ac0 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e0dc:	f005 fa26 	bl	801352c <HAL_GetTick>
 800e0e0:	0003      	movs	r3, r0
 800e0e2:	4a36      	ldr	r2, [pc, #216]	@ (800e1bc <sen5x_statemachine+0x274>)
 800e0e4:	189a      	adds	r2, r3, r2
 800e0e6:	4b22      	ldr	r3, [pc, #136]	@ (800e170 <sen5x_statemachine+0x228>)
 800e0e8:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e0ea:	4b32      	ldr	r3, [pc, #200]	@ (800e1b4 <sen5x_statemachine+0x26c>)
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e0f0:	f7ff fba4 	bl	800d83c <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e0f4:	4b1f      	ldr	r3, [pc, #124]	@ (800e174 <sen5x_statemachine+0x22c>)
 800e0f6:	2205      	movs	r2, #5
 800e0f8:	701a      	strb	r2, [r3, #0]
      break;
 800e0fa:	e034      	b.n	800e166 <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e0fc:	4b2c      	ldr	r3, [pc, #176]	@ (800e1b0 <sen5x_statemachine+0x268>)
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	2201      	movs	r2, #1
 800e102:	4053      	eors	r3, r2
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d01c      	beq.n	800e144 <sen5x_statemachine+0x1fc>
 800e10a:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c0 <sen5x_statemachine+0x278>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2201      	movs	r2, #1
 800e110:	4053      	eors	r3, r2
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d015      	beq.n	800e144 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800e118:	f7ff fbdc 	bl	800d8d4 <sen5x_extinguish_measurement>
 800e11c:	1e03      	subs	r3, r0, #0
 800e11e:	d005      	beq.n	800e12c <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800e120:	4a28      	ldr	r2, [pc, #160]	@ (800e1c4 <sen5x_statemachine+0x27c>)
 800e122:	4b17      	ldr	r3, [pc, #92]	@ (800e180 <sen5x_statemachine+0x238>)
 800e124:	0019      	movs	r1, r3
 800e126:	2001      	movs	r0, #1
 800e128:	f004 fcca 	bl	8012ac0 <CreateLine>
        }
        sen5xSamples = 0;
 800e12c:	4b1f      	ldr	r3, [pc, #124]	@ (800e1ac <sen5x_statemachine+0x264>)
 800e12e:	2200      	movs	r2, #0
 800e130:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e132:	f7ff fa23 	bl	800d57c <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800e136:	2000      	movs	r0, #0
 800e138:	f7fe f9d2 	bl	800c4e0 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800e13c:	4b0d      	ldr	r3, [pc, #52]	@ (800e174 <sen5x_statemachine+0x22c>)
 800e13e:	2201      	movs	r2, #1
 800e140:	701a      	strb	r2, [r3, #0]
 800e142:	e002      	b.n	800e14a <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800e144:	4b0b      	ldr	r3, [pc, #44]	@ (800e174 <sen5x_statemachine+0x22c>)
 800e146:	2203      	movs	r2, #3
 800e148:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800e14a:	f003 fb93 	bl	8011874 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800e14e:	f005 f9ed 	bl	801352c <HAL_GetTick>
 800e152:	0003      	movs	r3, r0
 800e154:	22fa      	movs	r2, #250	@ 0xfa
 800e156:	0092      	lsls	r2, r2, #2
 800e158:	189a      	adds	r2, r3, r2
 800e15a:	4b05      	ldr	r3, [pc, #20]	@ (800e170 <sen5x_statemachine+0x228>)
 800e15c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800e15e:	e002      	b.n	800e166 <sen5x_statemachine+0x21e>
      break;
 800e160:	46c0      	nop			@ (mov r8, r8)
 800e162:	e000      	b.n	800e166 <sen5x_statemachine+0x21e>
      break;
 800e164:	46c0      	nop			@ (mov r8, r8)
}
 800e166:	46c0      	nop			@ (mov r8, r8)
 800e168:	46bd      	mov	sp, r7
 800e16a:	b002      	add	sp, #8
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	46c0      	nop			@ (mov r8, r8)
 800e170:	20000ef4 	.word	0x20000ef4
 800e174:	2000009d 	.word	0x2000009d
 800e178:	0802d224 	.word	0x0802d224
 800e17c:	0802c774 	.word	0x0802c774
 800e180:	0802c198 	.word	0x0802c198
 800e184:	002fefd8 	.word	0x002fefd8
 800e188:	00005910 	.word	0x00005910
 800e18c:	20000ef1 	.word	0x20000ef1
 800e190:	0802c7a4 	.word	0x0802c7a4
 800e194:	0802c7bc 	.word	0x0802c7bc
 800e198:	0802c12c 	.word	0x0802c12c
 800e19c:	0802c7d4 	.word	0x0802c7d4
 800e1a0:	0802c16c 	.word	0x0802c16c
 800e1a4:	20000ef8 	.word	0x20000ef8
 800e1a8:	0802c7e8 	.word	0x0802c7e8
 800e1ac:	20000ef0 	.word	0x20000ef0
 800e1b0:	20001e75 	.word	0x20001e75
 800e1b4:	20000ee4 	.word	0x20000ee4
 800e1b8:	0802c818 	.word	0x0802c818
 800e1bc:	00002710 	.word	0x00002710
 800e1c0:	20001e76 	.word	0x20001e76
 800e1c4:	0802c830 	.word	0x0802c830

0800e1c8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800e1c8:	b590      	push	{r4, r7, lr}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e1ce:	1dbb      	adds	r3, r7, #6
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800e1d4:	1dbc      	adds	r4, r7, #6
 800e1d6:	1dbb      	adds	r3, r7, #6
 800e1d8:	8819      	ldrh	r1, [r3, #0]
 800e1da:	003b      	movs	r3, r7
 800e1dc:	2221      	movs	r2, #33	@ 0x21
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f001 fb54 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e1e4:	0003      	movs	r3, r0
 800e1e6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e1e8:	1d3c      	adds	r4, r7, #4
 800e1ea:	1dbb      	adds	r3, r7, #6
 800e1ec:	881a      	ldrh	r2, [r3, #0]
 800e1ee:	003b      	movs	r3, r7
 800e1f0:	0019      	movs	r1, r3
 800e1f2:	2069      	movs	r0, #105	@ 0x69
 800e1f4:	f001 fbce 	bl	800f994 <sensirion_i2c_write_data>
 800e1f8:	0003      	movs	r3, r0
 800e1fa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e1fc:	1d3b      	adds	r3, r7, #4
 800e1fe:	2200      	movs	r2, #0
 800e200:	5e9b      	ldrsh	r3, [r3, r2]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <sen5x_start_measurement+0x46>
        return error;
 800e206:	1d3b      	adds	r3, r7, #4
 800e208:	2200      	movs	r2, #0
 800e20a:	5e9b      	ldrsh	r3, [r3, r2]
 800e20c:	e004      	b.n	800e218 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e20e:	4b04      	ldr	r3, [pc, #16]	@ (800e220 <sen5x_start_measurement+0x58>)
 800e210:	0018      	movs	r0, r3
 800e212:	f7ff fdcd 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e216:	2300      	movs	r3, #0
}
 800e218:	0018      	movs	r0, r3
 800e21a:	46bd      	mov	sp, r7
 800e21c:	b003      	add	sp, #12
 800e21e:	bd90      	pop	{r4, r7, pc}
 800e220:	0000c350 	.word	0x0000c350

0800e224 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800e224:	b590      	push	{r4, r7, lr}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e22a:	1dbb      	adds	r3, r7, #6
 800e22c:	2200      	movs	r2, #0
 800e22e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800e230:	1dbc      	adds	r4, r7, #6
 800e232:	1dbb      	adds	r3, r7, #6
 800e234:	8819      	ldrh	r1, [r3, #0]
 800e236:	003b      	movs	r3, r7
 800e238:	2237      	movs	r2, #55	@ 0x37
 800e23a:	0018      	movs	r0, r3
 800e23c:	f001 fb26 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e240:	0003      	movs	r3, r0
 800e242:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e244:	1d3c      	adds	r4, r7, #4
 800e246:	1dbb      	adds	r3, r7, #6
 800e248:	881a      	ldrh	r2, [r3, #0]
 800e24a:	003b      	movs	r3, r7
 800e24c:	0019      	movs	r1, r3
 800e24e:	2069      	movs	r0, #105	@ 0x69
 800e250:	f001 fba0 	bl	800f994 <sensirion_i2c_write_data>
 800e254:	0003      	movs	r3, r0
 800e256:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e258:	1d3b      	adds	r3, r7, #4
 800e25a:	2200      	movs	r2, #0
 800e25c:	5e9b      	ldrsh	r3, [r3, r2]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d003      	beq.n	800e26a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800e262:	1d3b      	adds	r3, r7, #4
 800e264:	2200      	movs	r2, #0
 800e266:	5e9b      	ldrsh	r3, [r3, r2]
 800e268:	e004      	b.n	800e274 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e26a:	4b04      	ldr	r3, [pc, #16]	@ (800e27c <sen5x_start_measurement_without_pm+0x58>)
 800e26c:	0018      	movs	r0, r3
 800e26e:	f7ff fd9f 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e272:	2300      	movs	r3, #0
}
 800e274:	0018      	movs	r0, r3
 800e276:	46bd      	mov	sp, r7
 800e278:	b003      	add	sp, #12
 800e27a:	bd90      	pop	{r4, r7, pc}
 800e27c:	0000c350 	.word	0x0000c350

0800e280 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800e280:	b590      	push	{r4, r7, lr}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e286:	1dbb      	adds	r3, r7, #6
 800e288:	2200      	movs	r2, #0
 800e28a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800e28c:	1dbc      	adds	r4, r7, #6
 800e28e:	2382      	movs	r3, #130	@ 0x82
 800e290:	005a      	lsls	r2, r3, #1
 800e292:	1dbb      	adds	r3, r7, #6
 800e294:	8819      	ldrh	r1, [r3, #0]
 800e296:	003b      	movs	r3, r7
 800e298:	0018      	movs	r0, r3
 800e29a:	f001 faf7 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e29e:	0003      	movs	r3, r0
 800e2a0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e2a2:	1d3c      	adds	r4, r7, #4
 800e2a4:	1dbb      	adds	r3, r7, #6
 800e2a6:	881a      	ldrh	r2, [r3, #0]
 800e2a8:	003b      	movs	r3, r7
 800e2aa:	0019      	movs	r1, r3
 800e2ac:	2069      	movs	r0, #105	@ 0x69
 800e2ae:	f001 fb71 	bl	800f994 <sensirion_i2c_write_data>
 800e2b2:	0003      	movs	r3, r0
 800e2b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e2b6:	1d3b      	adds	r3, r7, #4
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	5e9b      	ldrsh	r3, [r3, r2]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <sen5x_stop_measurement+0x48>
        return error;
 800e2c0:	1d3b      	adds	r3, r7, #4
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	5e9b      	ldrsh	r3, [r3, r2]
 800e2c6:	e004      	b.n	800e2d2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e2c8:	4b04      	ldr	r3, [pc, #16]	@ (800e2dc <sen5x_stop_measurement+0x5c>)
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f7ff fd70 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	b003      	add	sp, #12
 800e2d8:	bd90      	pop	{r4, r7, pc}
 800e2da:	46c0      	nop			@ (mov r8, r8)
 800e2dc:	00030d40 	.word	0x00030d40

0800e2e0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800e2e8:	250e      	movs	r5, #14
 800e2ea:	197b      	adds	r3, r7, r5
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800e2f0:	197c      	adds	r4, r7, r5
 800e2f2:	4a22      	ldr	r2, [pc, #136]	@ (800e37c <sen5x_read_data_ready+0x9c>)
 800e2f4:	197b      	adds	r3, r7, r5
 800e2f6:	8819      	ldrh	r1, [r3, #0]
 800e2f8:	2308      	movs	r3, #8
 800e2fa:	18fb      	adds	r3, r7, r3
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f001 fac5 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e302:	0003      	movs	r3, r0
 800e304:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e306:	260c      	movs	r6, #12
 800e308:	19bc      	adds	r4, r7, r6
 800e30a:	197b      	adds	r3, r7, r5
 800e30c:	881a      	ldrh	r2, [r3, #0]
 800e30e:	2308      	movs	r3, #8
 800e310:	18fb      	adds	r3, r7, r3
 800e312:	0019      	movs	r1, r3
 800e314:	2069      	movs	r0, #105	@ 0x69
 800e316:	f001 fb3d 	bl	800f994 <sensirion_i2c_write_data>
 800e31a:	0003      	movs	r3, r0
 800e31c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e31e:	19bb      	adds	r3, r7, r6
 800e320:	2200      	movs	r2, #0
 800e322:	5e9b      	ldrsh	r3, [r3, r2]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d003      	beq.n	800e330 <sen5x_read_data_ready+0x50>
        return error;
 800e328:	19bb      	adds	r3, r7, r6
 800e32a:	2200      	movs	r2, #0
 800e32c:	5e9b      	ldrsh	r3, [r3, r2]
 800e32e:	e020      	b.n	800e372 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e330:	4b13      	ldr	r3, [pc, #76]	@ (800e380 <sen5x_read_data_ready+0xa0>)
 800e332:	0018      	movs	r0, r3
 800e334:	f7ff fd3c 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800e338:	250c      	movs	r5, #12
 800e33a:	197c      	adds	r4, r7, r5
 800e33c:	2308      	movs	r3, #8
 800e33e:	18fb      	adds	r3, r7, r3
 800e340:	2202      	movs	r2, #2
 800e342:	0019      	movs	r1, r3
 800e344:	2069      	movs	r0, #105	@ 0x69
 800e346:	f001 fb3d 	bl	800f9c4 <sensirion_i2c_read_data_inplace>
 800e34a:	0003      	movs	r3, r0
 800e34c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e34e:	197b      	adds	r3, r7, r5
 800e350:	2200      	movs	r2, #0
 800e352:	5e9b      	ldrsh	r3, [r3, r2]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d003      	beq.n	800e360 <sen5x_read_data_ready+0x80>
        return error;
 800e358:	197b      	adds	r3, r7, r5
 800e35a:	2200      	movs	r2, #0
 800e35c:	5e9b      	ldrsh	r3, [r3, r2]
 800e35e:	e008      	b.n	800e372 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800e360:	2308      	movs	r3, #8
 800e362:	18fb      	adds	r3, r7, r3
 800e364:	785b      	ldrb	r3, [r3, #1]
 800e366:	1e5a      	subs	r2, r3, #1
 800e368:	4193      	sbcs	r3, r2
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e370:	2300      	movs	r3, #0
}
 800e372:	0018      	movs	r0, r3
 800e374:	46bd      	mov	sp, r7
 800e376:	b005      	add	sp, #20
 800e378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e37a:	46c0      	nop			@ (mov r8, r8)
 800e37c:	00000202 	.word	0x00000202
 800e380:	00004e20 	.word	0x00004e20

0800e384 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800e384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e386:	b08d      	sub	sp, #52	@ 0x34
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800e392:	252e      	movs	r5, #46	@ 0x2e
 800e394:	197b      	adds	r3, r7, r5
 800e396:	2200      	movs	r2, #0
 800e398:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800e39a:	197c      	adds	r4, r7, r5
 800e39c:	23f1      	movs	r3, #241	@ 0xf1
 800e39e:	009a      	lsls	r2, r3, #2
 800e3a0:	197b      	adds	r3, r7, r5
 800e3a2:	8819      	ldrh	r1, [r3, #0]
 800e3a4:	2314      	movs	r3, #20
 800e3a6:	18fb      	adds	r3, r7, r3
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	f001 fa6f 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e3ae:	0003      	movs	r3, r0
 800e3b0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e3b2:	262c      	movs	r6, #44	@ 0x2c
 800e3b4:	19bc      	adds	r4, r7, r6
 800e3b6:	197b      	adds	r3, r7, r5
 800e3b8:	881a      	ldrh	r2, [r3, #0]
 800e3ba:	2314      	movs	r3, #20
 800e3bc:	18fb      	adds	r3, r7, r3
 800e3be:	0019      	movs	r1, r3
 800e3c0:	2069      	movs	r0, #105	@ 0x69
 800e3c2:	f001 fae7 	bl	800f994 <sensirion_i2c_write_data>
 800e3c6:	0003      	movs	r3, r0
 800e3c8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e3ca:	19bb      	adds	r3, r7, r6
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	5e9b      	ldrsh	r3, [r3, r2]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <sen5x_read_measured_values+0x58>
        return error;
 800e3d4:	19bb      	adds	r3, r7, r6
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	5e9b      	ldrsh	r3, [r3, r2]
 800e3da:	e060      	b.n	800e49e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e3dc:	4b32      	ldr	r3, [pc, #200]	@ (800e4a8 <sen5x_read_measured_values+0x124>)
 800e3de:	0018      	movs	r0, r3
 800e3e0:	f7ff fce6 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800e3e4:	252c      	movs	r5, #44	@ 0x2c
 800e3e6:	197c      	adds	r4, r7, r5
 800e3e8:	2314      	movs	r3, #20
 800e3ea:	18fb      	adds	r3, r7, r3
 800e3ec:	2210      	movs	r2, #16
 800e3ee:	0019      	movs	r1, r3
 800e3f0:	2069      	movs	r0, #105	@ 0x69
 800e3f2:	f001 fae7 	bl	800f9c4 <sensirion_i2c_read_data_inplace>
 800e3f6:	0003      	movs	r3, r0
 800e3f8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e3fa:	197b      	adds	r3, r7, r5
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	5e9b      	ldrsh	r3, [r3, r2]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d003      	beq.n	800e40c <sen5x_read_measured_values+0x88>
        return error;
 800e404:	197b      	adds	r3, r7, r5
 800e406:	2200      	movs	r2, #0
 800e408:	5e9b      	ldrsh	r3, [r3, r2]
 800e40a:	e048      	b.n	800e49e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800e40c:	2414      	movs	r4, #20
 800e40e:	193b      	adds	r3, r7, r4
 800e410:	0018      	movs	r0, r3
 800e412:	f000 fa79 	bl	800e908 <sensirion_common_bytes_to_uint16_t>
 800e416:	0003      	movs	r3, r0
 800e418:	001a      	movs	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800e41e:	193b      	adds	r3, r7, r4
 800e420:	3302      	adds	r3, #2
 800e422:	0018      	movs	r0, r3
 800e424:	f000 fa70 	bl	800e908 <sensirion_common_bytes_to_uint16_t>
 800e428:	0003      	movs	r3, r0
 800e42a:	001a      	movs	r2, r3
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800e430:	193b      	adds	r3, r7, r4
 800e432:	3304      	adds	r3, #4
 800e434:	0018      	movs	r0, r3
 800e436:	f000 fa67 	bl	800e908 <sensirion_common_bytes_to_uint16_t>
 800e43a:	0003      	movs	r3, r0
 800e43c:	001a      	movs	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800e442:	193b      	adds	r3, r7, r4
 800e444:	3306      	adds	r3, #6
 800e446:	0018      	movs	r0, r3
 800e448:	f000 fa5e 	bl	800e908 <sensirion_common_bytes_to_uint16_t>
 800e44c:	0003      	movs	r3, r0
 800e44e:	001a      	movs	r2, r3
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800e454:	193b      	adds	r3, r7, r4
 800e456:	3308      	adds	r3, #8
 800e458:	0018      	movs	r0, r3
 800e45a:	f000 fa81 	bl	800e960 <sensirion_common_bytes_to_int16_t>
 800e45e:	0003      	movs	r3, r0
 800e460:	001a      	movs	r2, r3
 800e462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e464:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800e466:	193b      	adds	r3, r7, r4
 800e468:	330a      	adds	r3, #10
 800e46a:	0018      	movs	r0, r3
 800e46c:	f000 fa78 	bl	800e960 <sensirion_common_bytes_to_int16_t>
 800e470:	0003      	movs	r3, r0
 800e472:	001a      	movs	r2, r3
 800e474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e476:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800e478:	193b      	adds	r3, r7, r4
 800e47a:	330c      	adds	r3, #12
 800e47c:	0018      	movs	r0, r3
 800e47e:	f000 fa6f 	bl	800e960 <sensirion_common_bytes_to_int16_t>
 800e482:	0003      	movs	r3, r0
 800e484:	001a      	movs	r2, r3
 800e486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e488:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800e48a:	193b      	adds	r3, r7, r4
 800e48c:	330e      	adds	r3, #14
 800e48e:	0018      	movs	r0, r3
 800e490:	f000 fa66 	bl	800e960 <sensirion_common_bytes_to_int16_t>
 800e494:	0003      	movs	r3, r0
 800e496:	001a      	movs	r2, r3
 800e498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e49a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	0018      	movs	r0, r3
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	b00d      	add	sp, #52	@ 0x34
 800e4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4a6:	46c0      	nop			@ (mov r8, r8)
 800e4a8:	00004e20 	.word	0x00004e20

0800e4ac <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800e4ac:	b590      	push	{r4, r7, lr}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e4b2:	1dbb      	adds	r3, r7, #6
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800e4b8:	1dbc      	adds	r4, r7, #6
 800e4ba:	4a12      	ldr	r2, [pc, #72]	@ (800e504 <sen5x_start_fan_cleaning+0x58>)
 800e4bc:	1dbb      	adds	r3, r7, #6
 800e4be:	8819      	ldrh	r1, [r3, #0]
 800e4c0:	003b      	movs	r3, r7
 800e4c2:	0018      	movs	r0, r3
 800e4c4:	f001 f9e2 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e4c8:	0003      	movs	r3, r0
 800e4ca:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e4cc:	1d3c      	adds	r4, r7, #4
 800e4ce:	1dbb      	adds	r3, r7, #6
 800e4d0:	881a      	ldrh	r2, [r3, #0]
 800e4d2:	003b      	movs	r3, r7
 800e4d4:	0019      	movs	r1, r3
 800e4d6:	2069      	movs	r0, #105	@ 0x69
 800e4d8:	f001 fa5c 	bl	800f994 <sensirion_i2c_write_data>
 800e4dc:	0003      	movs	r3, r0
 800e4de:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e4e0:	1d3b      	adds	r3, r7, #4
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d003      	beq.n	800e4f2 <sen5x_start_fan_cleaning+0x46>
        return error;
 800e4ea:	1d3b      	adds	r3, r7, #4
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	5e9b      	ldrsh	r3, [r3, r2]
 800e4f0:	e004      	b.n	800e4fc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800e4f2:	4b05      	ldr	r3, [pc, #20]	@ (800e508 <sen5x_start_fan_cleaning+0x5c>)
 800e4f4:	0018      	movs	r0, r3
 800e4f6:	f7ff fc5b 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	0018      	movs	r0, r3
 800e4fe:	46bd      	mov	sp, r7
 800e500:	b003      	add	sp, #12
 800e502:	bd90      	pop	{r4, r7, pc}
 800e504:	00005607 	.word	0x00005607
 800e508:	00004e20 	.word	0x00004e20

0800e50c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800e50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e50e:	b087      	sub	sp, #28
 800e510:	af00      	add	r7, sp, #0
 800e512:	0004      	movs	r4, r0
 800e514:	0008      	movs	r0, r1
 800e516:	0011      	movs	r1, r2
 800e518:	1dbb      	adds	r3, r7, #6
 800e51a:	1c22      	adds	r2, r4, #0
 800e51c:	801a      	strh	r2, [r3, #0]
 800e51e:	1d3b      	adds	r3, r7, #4
 800e520:	1c02      	adds	r2, r0, #0
 800e522:	801a      	strh	r2, [r3, #0]
 800e524:	1cbb      	adds	r3, r7, #2
 800e526:	1c0a      	adds	r2, r1, #0
 800e528:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800e52a:	2516      	movs	r5, #22
 800e52c:	197b      	adds	r3, r7, r5
 800e52e:	2200      	movs	r2, #0
 800e530:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800e532:	197c      	adds	r4, r7, r5
 800e534:	4a25      	ldr	r2, [pc, #148]	@ (800e5cc <sen5x_set_temperature_offset_parameters+0xc0>)
 800e536:	197b      	adds	r3, r7, r5
 800e538:	8819      	ldrh	r1, [r3, #0]
 800e53a:	2608      	movs	r6, #8
 800e53c:	19bb      	adds	r3, r7, r6
 800e53e:	0018      	movs	r0, r3
 800e540:	f001 f9a4 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e544:	0003      	movs	r3, r0
 800e546:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800e548:	197c      	adds	r4, r7, r5
 800e54a:	1dbb      	adds	r3, r7, #6
 800e54c:	2200      	movs	r2, #0
 800e54e:	5e9a      	ldrsh	r2, [r3, r2]
 800e550:	197b      	adds	r3, r7, r5
 800e552:	8819      	ldrh	r1, [r3, #0]
 800e554:	19bb      	adds	r3, r7, r6
 800e556:	0018      	movs	r0, r3
 800e558:	f001 fa03 	bl	800f962 <sensirion_i2c_add_int16_t_to_buffer>
 800e55c:	0003      	movs	r3, r0
 800e55e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800e560:	197c      	adds	r4, r7, r5
 800e562:	1d3b      	adds	r3, r7, #4
 800e564:	2200      	movs	r2, #0
 800e566:	5e9a      	ldrsh	r2, [r3, r2]
 800e568:	197b      	adds	r3, r7, r5
 800e56a:	8819      	ldrh	r1, [r3, #0]
 800e56c:	19bb      	adds	r3, r7, r6
 800e56e:	0018      	movs	r0, r3
 800e570:	f001 f9f7 	bl	800f962 <sensirion_i2c_add_int16_t_to_buffer>
 800e574:	0003      	movs	r3, r0
 800e576:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800e578:	197c      	adds	r4, r7, r5
 800e57a:	1cbb      	adds	r3, r7, #2
 800e57c:	881a      	ldrh	r2, [r3, #0]
 800e57e:	197b      	adds	r3, r7, r5
 800e580:	8819      	ldrh	r1, [r3, #0]
 800e582:	19bb      	adds	r3, r7, r6
 800e584:	0018      	movs	r0, r3
 800e586:	f001 f9ad 	bl	800f8e4 <sensirion_i2c_add_uint16_t_to_buffer>
 800e58a:	0003      	movs	r3, r0
 800e58c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e58e:	2214      	movs	r2, #20
 800e590:	18bc      	adds	r4, r7, r2
 800e592:	197b      	adds	r3, r7, r5
 800e594:	881a      	ldrh	r2, [r3, #0]
 800e596:	19bb      	adds	r3, r7, r6
 800e598:	0019      	movs	r1, r3
 800e59a:	2069      	movs	r0, #105	@ 0x69
 800e59c:	f001 f9fa 	bl	800f994 <sensirion_i2c_write_data>
 800e5a0:	0003      	movs	r3, r0
 800e5a2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e5a4:	2214      	movs	r2, #20
 800e5a6:	18bb      	adds	r3, r7, r2
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	5e5b      	ldrsh	r3, [r3, r1]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d003      	beq.n	800e5b8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800e5b0:	18bb      	adds	r3, r7, r2
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	5e9b      	ldrsh	r3, [r3, r2]
 800e5b6:	e004      	b.n	800e5c2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800e5b8:	4b05      	ldr	r3, [pc, #20]	@ (800e5d0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	f7ff fbf8 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b007      	add	sp, #28
 800e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	000060b2 	.word	0x000060b2
 800e5d0:	00004e20 	.word	0x00004e20

0800e5d4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800e5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5d6:	b091      	sub	sp, #68	@ 0x44
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	000a      	movs	r2, r1
 800e5de:	1cfb      	adds	r3, r7, #3
 800e5e0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800e5e2:	253e      	movs	r5, #62	@ 0x3e
 800e5e4:	197b      	adds	r3, r7, r5
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800e5ea:	197c      	adds	r4, r7, r5
 800e5ec:	4a22      	ldr	r2, [pc, #136]	@ (800e678 <sen5x_get_product_name+0xa4>)
 800e5ee:	197b      	adds	r3, r7, r5
 800e5f0:	8819      	ldrh	r1, [r3, #0]
 800e5f2:	230c      	movs	r3, #12
 800e5f4:	18fb      	adds	r3, r7, r3
 800e5f6:	0018      	movs	r0, r3
 800e5f8:	f001 f948 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e5fc:	0003      	movs	r3, r0
 800e5fe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e600:	263c      	movs	r6, #60	@ 0x3c
 800e602:	19bc      	adds	r4, r7, r6
 800e604:	197b      	adds	r3, r7, r5
 800e606:	881a      	ldrh	r2, [r3, #0]
 800e608:	230c      	movs	r3, #12
 800e60a:	18fb      	adds	r3, r7, r3
 800e60c:	0019      	movs	r1, r3
 800e60e:	2069      	movs	r0, #105	@ 0x69
 800e610:	f001 f9c0 	bl	800f994 <sensirion_i2c_write_data>
 800e614:	0003      	movs	r3, r0
 800e616:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e618:	19bb      	adds	r3, r7, r6
 800e61a:	2200      	movs	r2, #0
 800e61c:	5e9b      	ldrsh	r3, [r3, r2]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <sen5x_get_product_name+0x56>
        return error;
 800e622:	19bb      	adds	r3, r7, r6
 800e624:	2200      	movs	r2, #0
 800e626:	5e9b      	ldrsh	r3, [r3, r2]
 800e628:	e021      	b.n	800e66e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800e62a:	4b14      	ldr	r3, [pc, #80]	@ (800e67c <sen5x_get_product_name+0xa8>)
 800e62c:	0018      	movs	r0, r3
 800e62e:	f7ff fbbf 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800e632:	253c      	movs	r5, #60	@ 0x3c
 800e634:	197c      	adds	r4, r7, r5
 800e636:	230c      	movs	r3, #12
 800e638:	18fb      	adds	r3, r7, r3
 800e63a:	2220      	movs	r2, #32
 800e63c:	0019      	movs	r1, r3
 800e63e:	2069      	movs	r0, #105	@ 0x69
 800e640:	f001 f9c0 	bl	800f9c4 <sensirion_i2c_read_data_inplace>
 800e644:	0003      	movs	r3, r0
 800e646:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e648:	197b      	adds	r3, r7, r5
 800e64a:	2200      	movs	r2, #0
 800e64c:	5e9b      	ldrsh	r3, [r3, r2]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d003      	beq.n	800e65a <sen5x_get_product_name+0x86>
        return error;
 800e652:	197b      	adds	r3, r7, r5
 800e654:	2200      	movs	r2, #0
 800e656:	5e9b      	ldrsh	r3, [r3, r2]
 800e658:	e009      	b.n	800e66e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800e65a:	1cfb      	adds	r3, r7, #3
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	b29a      	uxth	r2, r3
 800e660:	6879      	ldr	r1, [r7, #4]
 800e662:	230c      	movs	r3, #12
 800e664:	18fb      	adds	r3, r7, r3
 800e666:	0018      	movs	r0, r3
 800e668:	f000 f988 	bl	800e97c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	0018      	movs	r0, r3
 800e670:	46bd      	mov	sp, r7
 800e672:	b011      	add	sp, #68	@ 0x44
 800e674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e676:	46c0      	nop			@ (mov r8, r8)
 800e678:	0000d014 	.word	0x0000d014
 800e67c:	0000c350 	.word	0x0000c350

0800e680 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800e680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e682:	b091      	sub	sp, #68	@ 0x44
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	000a      	movs	r2, r1
 800e68a:	1cfb      	adds	r3, r7, #3
 800e68c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800e68e:	253e      	movs	r5, #62	@ 0x3e
 800e690:	197b      	adds	r3, r7, r5
 800e692:	2200      	movs	r2, #0
 800e694:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800e696:	197c      	adds	r4, r7, r5
 800e698:	4a22      	ldr	r2, [pc, #136]	@ (800e724 <sen5x_get_serial_number+0xa4>)
 800e69a:	197b      	adds	r3, r7, r5
 800e69c:	8819      	ldrh	r1, [r3, #0]
 800e69e:	230c      	movs	r3, #12
 800e6a0:	18fb      	adds	r3, r7, r3
 800e6a2:	0018      	movs	r0, r3
 800e6a4:	f001 f8f2 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e6a8:	0003      	movs	r3, r0
 800e6aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e6ac:	263c      	movs	r6, #60	@ 0x3c
 800e6ae:	19bc      	adds	r4, r7, r6
 800e6b0:	197b      	adds	r3, r7, r5
 800e6b2:	881a      	ldrh	r2, [r3, #0]
 800e6b4:	230c      	movs	r3, #12
 800e6b6:	18fb      	adds	r3, r7, r3
 800e6b8:	0019      	movs	r1, r3
 800e6ba:	2069      	movs	r0, #105	@ 0x69
 800e6bc:	f001 f96a 	bl	800f994 <sensirion_i2c_write_data>
 800e6c0:	0003      	movs	r3, r0
 800e6c2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e6c4:	19bb      	adds	r3, r7, r6
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	5e9b      	ldrsh	r3, [r3, r2]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <sen5x_get_serial_number+0x56>
        return error;
 800e6ce:	19bb      	adds	r3, r7, r6
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	5e9b      	ldrsh	r3, [r3, r2]
 800e6d4:	e021      	b.n	800e71a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800e6d6:	4b14      	ldr	r3, [pc, #80]	@ (800e728 <sen5x_get_serial_number+0xa8>)
 800e6d8:	0018      	movs	r0, r3
 800e6da:	f7ff fb69 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800e6de:	253c      	movs	r5, #60	@ 0x3c
 800e6e0:	197c      	adds	r4, r7, r5
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	18fb      	adds	r3, r7, r3
 800e6e6:	2220      	movs	r2, #32
 800e6e8:	0019      	movs	r1, r3
 800e6ea:	2069      	movs	r0, #105	@ 0x69
 800e6ec:	f001 f96a 	bl	800f9c4 <sensirion_i2c_read_data_inplace>
 800e6f0:	0003      	movs	r3, r0
 800e6f2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e6f4:	197b      	adds	r3, r7, r5
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	5e9b      	ldrsh	r3, [r3, r2]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <sen5x_get_serial_number+0x86>
        return error;
 800e6fe:	197b      	adds	r3, r7, r5
 800e700:	2200      	movs	r2, #0
 800e702:	5e9b      	ldrsh	r3, [r3, r2]
 800e704:	e009      	b.n	800e71a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800e706:	1cfb      	adds	r3, r7, #3
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	230c      	movs	r3, #12
 800e710:	18fb      	adds	r3, r7, r3
 800e712:	0018      	movs	r0, r3
 800e714:	f000 f932 	bl	800e97c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	0018      	movs	r0, r3
 800e71c:	46bd      	mov	sp, r7
 800e71e:	b011      	add	sp, #68	@ 0x44
 800e720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e722:	46c0      	nop			@ (mov r8, r8)
 800e724:	0000d033 	.word	0x0000d033
 800e728:	0000c350 	.word	0x0000c350

0800e72c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	b089      	sub	sp, #36	@ 0x24
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800e73a:	251e      	movs	r5, #30
 800e73c:	197b      	adds	r3, r7, r5
 800e73e:	2200      	movs	r2, #0
 800e740:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800e742:	197c      	adds	r4, r7, r5
 800e744:	23d1      	movs	r3, #209	@ 0xd1
 800e746:	021a      	lsls	r2, r3, #8
 800e748:	197b      	adds	r3, r7, r5
 800e74a:	8819      	ldrh	r1, [r3, #0]
 800e74c:	2310      	movs	r3, #16
 800e74e:	18fb      	adds	r3, r7, r3
 800e750:	0018      	movs	r0, r3
 800e752:	f001 f89b 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e756:	0003      	movs	r3, r0
 800e758:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e75a:	261c      	movs	r6, #28
 800e75c:	19bc      	adds	r4, r7, r6
 800e75e:	197b      	adds	r3, r7, r5
 800e760:	881a      	ldrh	r2, [r3, #0]
 800e762:	2310      	movs	r3, #16
 800e764:	18fb      	adds	r3, r7, r3
 800e766:	0019      	movs	r1, r3
 800e768:	2069      	movs	r0, #105	@ 0x69
 800e76a:	f001 f913 	bl	800f994 <sensirion_i2c_write_data>
 800e76e:	0003      	movs	r3, r0
 800e770:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e772:	19bb      	adds	r3, r7, r6
 800e774:	2200      	movs	r2, #0
 800e776:	5e9b      	ldrsh	r3, [r3, r2]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d003      	beq.n	800e784 <sen5x_get_version+0x58>
        return error;
 800e77c:	19bb      	adds	r3, r7, r6
 800e77e:	2200      	movs	r2, #0
 800e780:	5e9b      	ldrsh	r3, [r3, r2]
 800e782:	e038      	b.n	800e7f6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e784:	4b1e      	ldr	r3, [pc, #120]	@ (800e800 <sen5x_get_version+0xd4>)
 800e786:	0018      	movs	r0, r3
 800e788:	f7ff fb12 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800e78c:	251c      	movs	r5, #28
 800e78e:	197c      	adds	r4, r7, r5
 800e790:	2310      	movs	r3, #16
 800e792:	18fb      	adds	r3, r7, r3
 800e794:	2208      	movs	r2, #8
 800e796:	0019      	movs	r1, r3
 800e798:	2069      	movs	r0, #105	@ 0x69
 800e79a:	f001 f913 	bl	800f9c4 <sensirion_i2c_read_data_inplace>
 800e79e:	0003      	movs	r3, r0
 800e7a0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e7a2:	197b      	adds	r3, r7, r5
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	5e9b      	ldrsh	r3, [r3, r2]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <sen5x_get_version+0x88>
        return error;
 800e7ac:	197b      	adds	r3, r7, r5
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7b2:	e020      	b.n	800e7f6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800e7b4:	2110      	movs	r1, #16
 800e7b6:	187b      	adds	r3, r7, r1
 800e7b8:	781a      	ldrb	r2, [r3, #0]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800e7be:	187b      	adds	r3, r7, r1
 800e7c0:	785a      	ldrb	r2, [r3, #1]
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800e7c6:	187b      	adds	r3, r7, r1
 800e7c8:	789b      	ldrb	r3, [r3, #2]
 800e7ca:	1e5a      	subs	r2, r3, #1
 800e7cc:	4193      	sbcs	r3, r2
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800e7d4:	187b      	adds	r3, r7, r1
 800e7d6:	78da      	ldrb	r2, [r3, #3]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800e7dc:	187b      	adds	r3, r7, r1
 800e7de:	791a      	ldrb	r2, [r3, #4]
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800e7e4:	187b      	adds	r3, r7, r1
 800e7e6:	795a      	ldrb	r2, [r3, #5]
 800e7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ea:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800e7ec:	187b      	adds	r3, r7, r1
 800e7ee:	799a      	ldrb	r2, [r3, #6]
 800e7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7f2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	0018      	movs	r0, r3
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	b009      	add	sp, #36	@ 0x24
 800e7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7fe:	46c0      	nop			@ (mov r8, r8)
 800e800:	00004e20 	.word	0x00004e20

0800e804 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800e804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e806:	b087      	sub	sp, #28
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800e80c:	2516      	movs	r5, #22
 800e80e:	197b      	adds	r3, r7, r5
 800e810:	2200      	movs	r2, #0
 800e812:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800e814:	197c      	adds	r4, r7, r5
 800e816:	4a22      	ldr	r2, [pc, #136]	@ (800e8a0 <sen5x_read_device_status+0x9c>)
 800e818:	197b      	adds	r3, r7, r5
 800e81a:	8819      	ldrh	r1, [r3, #0]
 800e81c:	230c      	movs	r3, #12
 800e81e:	18fb      	adds	r3, r7, r3
 800e820:	0018      	movs	r0, r3
 800e822:	f001 f833 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e826:	0003      	movs	r3, r0
 800e828:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e82a:	2614      	movs	r6, #20
 800e82c:	19bc      	adds	r4, r7, r6
 800e82e:	197b      	adds	r3, r7, r5
 800e830:	881a      	ldrh	r2, [r3, #0]
 800e832:	230c      	movs	r3, #12
 800e834:	18fb      	adds	r3, r7, r3
 800e836:	0019      	movs	r1, r3
 800e838:	2069      	movs	r0, #105	@ 0x69
 800e83a:	f001 f8ab 	bl	800f994 <sensirion_i2c_write_data>
 800e83e:	0003      	movs	r3, r0
 800e840:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e842:	19bb      	adds	r3, r7, r6
 800e844:	2200      	movs	r2, #0
 800e846:	5e9b      	ldrsh	r3, [r3, r2]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <sen5x_read_device_status+0x50>
        return error;
 800e84c:	19bb      	adds	r3, r7, r6
 800e84e:	2200      	movs	r2, #0
 800e850:	5e9b      	ldrsh	r3, [r3, r2]
 800e852:	e020      	b.n	800e896 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e854:	4b13      	ldr	r3, [pc, #76]	@ (800e8a4 <sen5x_read_device_status+0xa0>)
 800e856:	0018      	movs	r0, r3
 800e858:	f7ff faaa 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800e85c:	2514      	movs	r5, #20
 800e85e:	197c      	adds	r4, r7, r5
 800e860:	230c      	movs	r3, #12
 800e862:	18fb      	adds	r3, r7, r3
 800e864:	2204      	movs	r2, #4
 800e866:	0019      	movs	r1, r3
 800e868:	2069      	movs	r0, #105	@ 0x69
 800e86a:	f001 f8ab 	bl	800f9c4 <sensirion_i2c_read_data_inplace>
 800e86e:	0003      	movs	r3, r0
 800e870:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e872:	197b      	adds	r3, r7, r5
 800e874:	2200      	movs	r2, #0
 800e876:	5e9b      	ldrsh	r3, [r3, r2]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d003      	beq.n	800e884 <sen5x_read_device_status+0x80>
        return error;
 800e87c:	197b      	adds	r3, r7, r5
 800e87e:	2200      	movs	r2, #0
 800e880:	5e9b      	ldrsh	r3, [r3, r2]
 800e882:	e008      	b.n	800e896 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800e884:	230c      	movs	r3, #12
 800e886:	18fb      	adds	r3, r7, r3
 800e888:	0018      	movs	r0, r3
 800e88a:	f000 f850 	bl	800e92e <sensirion_common_bytes_to_uint32_t>
 800e88e:	0002      	movs	r2, r0
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800e894:	2300      	movs	r3, #0
}
 800e896:	0018      	movs	r0, r3
 800e898:	46bd      	mov	sp, r7
 800e89a:	b007      	add	sp, #28
 800e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89e:	46c0      	nop			@ (mov r8, r8)
 800e8a0:	0000d206 	.word	0x0000d206
 800e8a4:	00004e20 	.word	0x00004e20

0800e8a8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800e8a8:	b590      	push	{r4, r7, lr}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e8ae:	1dbb      	adds	r3, r7, #6
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800e8b4:	1dbc      	adds	r4, r7, #6
 800e8b6:	4a12      	ldr	r2, [pc, #72]	@ (800e900 <sen5x_device_reset+0x58>)
 800e8b8:	1dbb      	adds	r3, r7, #6
 800e8ba:	8819      	ldrh	r1, [r3, #0]
 800e8bc:	003b      	movs	r3, r7
 800e8be:	0018      	movs	r0, r3
 800e8c0:	f000 ffe4 	bl	800f88c <sensirion_i2c_add_command_to_buffer>
 800e8c4:	0003      	movs	r3, r0
 800e8c6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e8c8:	1d3c      	adds	r4, r7, #4
 800e8ca:	1dbb      	adds	r3, r7, #6
 800e8cc:	881a      	ldrh	r2, [r3, #0]
 800e8ce:	003b      	movs	r3, r7
 800e8d0:	0019      	movs	r1, r3
 800e8d2:	2069      	movs	r0, #105	@ 0x69
 800e8d4:	f001 f85e 	bl	800f994 <sensirion_i2c_write_data>
 800e8d8:	0003      	movs	r3, r0
 800e8da:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8dc:	1d3b      	adds	r3, r7, #4
 800e8de:	2200      	movs	r2, #0
 800e8e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <sen5x_device_reset+0x46>
        return error;
 800e8e6:	1d3b      	adds	r3, r7, #4
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e8ec:	e004      	b.n	800e8f8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e8ee:	4b05      	ldr	r3, [pc, #20]	@ (800e904 <sen5x_device_reset+0x5c>)
 800e8f0:	0018      	movs	r0, r3
 800e8f2:	f7ff fa5d 	bl	800ddb0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	0018      	movs	r0, r3
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	b003      	add	sp, #12
 800e8fe:	bd90      	pop	{r4, r7, pc}
 800e900:	0000d304 	.word	0x0000d304
 800e904:	00030d40 	.word	0x00030d40

0800e908 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	b21a      	sxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3301      	adds	r3, #1
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	b21b      	sxth	r3, r3
 800e920:	4313      	orrs	r3, r2
 800e922:	b21b      	sxth	r3, r3
 800e924:	b29b      	uxth	r3, r3
}
 800e926:	0018      	movs	r0, r3
 800e928:	46bd      	mov	sp, r7
 800e92a:	b002      	add	sp, #8
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800e92e:	b580      	push	{r7, lr}
 800e930:	b082      	sub	sp, #8
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	061a      	lsls	r2, r3, #24
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	3301      	adds	r3, #1
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	041b      	lsls	r3, r3, #16
 800e944:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	3302      	adds	r3, #2
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800e94e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	3203      	adds	r2, #3
 800e954:	7812      	ldrb	r2, [r2, #0]
 800e956:	4313      	orrs	r3, r2
}
 800e958:	0018      	movs	r0, r3
 800e95a:	46bd      	mov	sp, r7
 800e95c:	b002      	add	sp, #8
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	0018      	movs	r0, r3
 800e96c:	f7ff ffcc 	bl	800e908 <sensirion_common_bytes_to_uint16_t>
 800e970:	0003      	movs	r3, r0
 800e972:	b21b      	sxth	r3, r3
}
 800e974:	0018      	movs	r0, r3
 800e976:	46bd      	mov	sp, r7
 800e978:	b002      	add	sp, #8
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	1dbb      	adds	r3, r7, #6
 800e988:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800e98a:	2316      	movs	r3, #22
 800e98c:	18fb      	adds	r3, r7, r3
 800e98e:	2200      	movs	r2, #0
 800e990:	801a      	strh	r2, [r3, #0]
 800e992:	e00f      	b.n	800e9b4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800e994:	2016      	movs	r0, #22
 800e996:	183b      	adds	r3, r7, r0
 800e998:	881b      	ldrh	r3, [r3, #0]
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	18d2      	adds	r2, r2, r3
 800e99e:	183b      	adds	r3, r7, r0
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	68b9      	ldr	r1, [r7, #8]
 800e9a4:	18cb      	adds	r3, r1, r3
 800e9a6:	7812      	ldrb	r2, [r2, #0]
 800e9a8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800e9aa:	183b      	adds	r3, r7, r0
 800e9ac:	881a      	ldrh	r2, [r3, #0]
 800e9ae:	183b      	adds	r3, r7, r0
 800e9b0:	3201      	adds	r2, #1
 800e9b2:	801a      	strh	r2, [r3, #0]
 800e9b4:	2316      	movs	r3, #22
 800e9b6:	18fa      	adds	r2, r7, r3
 800e9b8:	1dbb      	adds	r3, r7, #6
 800e9ba:	8812      	ldrh	r2, [r2, #0]
 800e9bc:	881b      	ldrh	r3, [r3, #0]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d3e8      	bcc.n	800e994 <sensirion_common_copy_bytes+0x18>
    }
}
 800e9c2:	46c0      	nop			@ (mov r8, r8)
 800e9c4:	46c0      	nop			@ (mov r8, r8)
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	b006      	add	sp, #24
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d113      	bne.n	800ea12 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	22fe      	movs	r2, #254	@ 0xfe
 800e9ee:	0592      	lsls	r2, r2, #22
 800e9f0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	4a1a      	ldr	r2, [pc, #104]	@ (800ea60 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800e9f6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	4a1a      	ldr	r2, [pc, #104]	@ (800ea64 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800e9fc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	4a19      	ldr	r2, [pc, #100]	@ (800ea68 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800ea02:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4a19      	ldr	r2, [pc, #100]	@ (800ea6c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800ea08:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	4a18      	ldr	r2, [pc, #96]	@ (800ea70 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800ea0e:	61da      	str	r2, [r3, #28]
 800ea10:	e011      	b.n	800ea36 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	4a17      	ldr	r2, [pc, #92]	@ (800ea74 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800ea16:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	4a17      	ldr	r2, [pc, #92]	@ (800ea78 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800ea1c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	4a16      	ldr	r2, [pc, #88]	@ (800ea7c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800ea22:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4a16      	ldr	r2, [pc, #88]	@ (800ea80 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800ea28:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	4a15      	ldr	r2, [pc, #84]	@ (800ea84 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800ea2e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4a15      	ldr	r2, [pc, #84]	@ (800ea88 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800ea34:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	4a14      	ldr	r2, [pc, #80]	@ (800ea8c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800ea3a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	4a14      	ldr	r2, [pc, #80]	@ (800ea90 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800ea40:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	4a12      	ldr	r2, [pc, #72]	@ (800ea90 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800ea46:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	4a12      	ldr	r2, [pc, #72]	@ (800ea94 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800ea4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	0018      	movs	r0, r3
 800ea52:	f000 f831 	bl	800eab8 <GasIndexAlgorithm_reset>
}
 800ea56:	46c0      	nop			@ (mov r8, r8)
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	b004      	add	sp, #16
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	46c0      	nop			@ (mov r8, r8)
 800ea60:	00002710 	.word	0x00002710
 800ea64:	44340000 	.word	0x44340000
 800ea68:	46859800 	.word	0x46859800
 800ea6c:	46a05000 	.word	0x46a05000
 800ea70:	41f00000 	.word	0x41f00000
 800ea74:	42c80000 	.word	0x42c80000
 800ea78:	00004e20 	.word	0x00004e20
 800ea7c:	43340000 	.word	0x43340000
 800ea80:	4528c000 	.word	0x4528c000
 800ea84:	45a32000 	.word	0x45a32000
 800ea88:	43aa0000 	.word	0x43aa0000
 800ea8c:	43660000 	.word	0x43660000
 800ea90:	41400000 	.word	0x41400000
 800ea94:	42480000 	.word	0x42480000

0800ea98 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800eaa2:	22fe      	movs	r2, #254	@ 0xfe
 800eaa4:	0592      	lsls	r2, r2, #22
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	0018      	movs	r0, r3
 800eaac:	f7ff ff8e 	bl	800e9cc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800eab0:	46c0      	nop			@ (mov r8, r8)
 800eab2:	46bd      	mov	sp, r7
 800eab4:	b002      	add	sp, #8
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	0018      	movs	r0, r3
 800ead6:	f000 f805 	bl	800eae4 <GasIndexAlgorithm__init_instances>
}
 800eada:	46c0      	nop			@ (mov r8, r8)
 800eadc:	46bd      	mov	sp, r7
 800eade:	b002      	add	sp, #8
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800eae4:	b590      	push	{r4, r7, lr}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	0018      	movs	r0, r3
 800eaf0:	f000 f8e8 	bl	800ecc4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	0018      	movs	r0, r3
 800eaf8:	f000 f9a6 	bl	800ee48 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800eafc:	1c04      	adds	r4, r0, #0
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	0018      	movs	r0, r3
 800eb02:	f000 f9ab 	bl	800ee5c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800eb06:	1c02      	adds	r2, r0, #0
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	1c21      	adds	r1, r4, #0
 800eb0c:	0018      	movs	r0, r3
 800eb0e:	f000 fc3b 	bl	800f388 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d107      	bne.n	800eb2a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800eb1a:	23fe      	movs	r3, #254	@ 0xfe
 800eb1c:	059b      	lsls	r3, r3, #22
 800eb1e:	4a0a      	ldr	r2, [pc, #40]	@ (800eb48 <GasIndexAlgorithm__init_instances+0x64>)
 800eb20:	490a      	ldr	r1, [pc, #40]	@ (800eb4c <GasIndexAlgorithm__init_instances+0x68>)
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 fc86 	bl	800f434 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800eb28:	e005      	b.n	800eb36 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800eb2a:	4b09      	ldr	r3, [pc, #36]	@ (800eb50 <GasIndexAlgorithm__init_instances+0x6c>)
 800eb2c:	4a09      	ldr	r2, [pc, #36]	@ (800eb54 <GasIndexAlgorithm__init_instances+0x70>)
 800eb2e:	490a      	ldr	r1, [pc, #40]	@ (800eb58 <GasIndexAlgorithm__init_instances+0x74>)
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fc7f 	bl	800f434 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f000 fd35 	bl	800f5a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800eb3e:	46c0      	nop			@ (mov r8, r8)
 800eb40:	46bd      	mov	sp, r7
 800eb42:	b003      	add	sp, #12
 800eb44:	bd90      	pop	{r4, r7, pc}
 800eb46:	46c0      	nop			@ (mov r8, r8)
 800eb48:	bc257a78 	.word	0xbc257a78
 800eb4c:	44198000 	.word	0x44198000
 800eb50:	42c80000 	.word	0x42c80000
 800eb54:	bbd4fdf4 	.word	0xbbd4fdf4
 800eb58:	43550000 	.word	0x43550000

0800eb5c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800eb5c:	b590      	push	{r4, r7, lr}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb6c:	4952      	ldr	r1, [pc, #328]	@ (800ecb8 <GasIndexAlgorithm_process+0x15c>)
 800eb6e:	1c18      	adds	r0, r3, #0
 800eb70:	f7f1 fce8 	bl	8000544 <__aeabi_fcmple>
 800eb74:	1e03      	subs	r3, r0, #0
 800eb76:	d00c      	beq.n	800eb92 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	1c19      	adds	r1, r3, #0
 800eb82:	1c10      	adds	r0, r2, #0
 800eb84:	f7f1 fe9c 	bl	80008c0 <__aeabi_fadd>
 800eb88:	1c03      	adds	r3, r0, #0
 800eb8a:	1c1a      	adds	r2, r3, #0
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb90:	e080      	b.n	800ec94 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	dd25      	ble.n	800ebe4 <GasIndexAlgorithm_process+0x88>
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	4a48      	ldr	r2, [pc, #288]	@ (800ecbc <GasIndexAlgorithm_process+0x160>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	dc21      	bgt.n	800ebe4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	dc04      	bgt.n	800ebb4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	60bb      	str	r3, [r7, #8]
 800ebb2:	e00d      	b.n	800ebd0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	4a41      	ldr	r2, [pc, #260]	@ (800ecc0 <GasIndexAlgorithm_process+0x164>)
 800ebba:	4694      	mov	ip, r2
 800ebbc:	4463      	add	r3, ip
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	dd05      	ble.n	800ebd0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	4a3d      	ldr	r2, [pc, #244]	@ (800ecc0 <GasIndexAlgorithm_process+0x164>)
 800ebca:	4694      	mov	ip, r2
 800ebcc:	4463      	add	r3, ip
 800ebce:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	0018      	movs	r0, r3
 800ebda:	f7f2 fcf9 	bl	80015d0 <__aeabi_i2f>
 800ebde:	1c02      	adds	r2, r0, #0
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d005      	beq.n	800ebf8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	0018      	movs	r0, r3
 800ebf0:	f000 f945 	bl	800ee7e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800ebf4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800ebf6:	d014      	beq.n	800ec22 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	1c11      	adds	r1, r2, #0
 800ec00:	0018      	movs	r0, r3
 800ec02:	f000 fbd1 	bl	800f3a8 <GasIndexAlgorithm__mox_model__process>
 800ec06:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	1c11      	adds	r1, r2, #0
 800ec14:	0018      	movs	r0, r3
 800ec16:	f000 fc25 	bl	800f464 <GasIndexAlgorithm__sigmoid_scaled__process>
 800ec1a:	1c02      	adds	r2, r0, #0
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ec20:	e003      	b.n	800ec2a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	689a      	ldr	r2, [r3, #8]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	1c11      	adds	r1, r2, #0
 800ec32:	0018      	movs	r0, r3
 800ec34:	f000 fcec 	bl	800f610 <GasIndexAlgorithm__adaptive_lowpass__process>
 800ec38:	1c02      	adds	r2, r0, #0
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec42:	21fc      	movs	r1, #252	@ 0xfc
 800ec44:	0589      	lsls	r1, r1, #22
 800ec46:	1c18      	adds	r0, r3, #0
 800ec48:	f7f1 fc72 	bl	8000530 <__aeabi_fcmplt>
 800ec4c:	1e03      	subs	r3, r0, #0
 800ec4e:	d003      	beq.n	800ec58 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	22fc      	movs	r2, #252	@ 0xfc
 800ec54:	0592      	lsls	r2, r2, #22
 800ec56:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	1c18      	adds	r0, r3, #0
 800ec60:	f7f1 fc7a 	bl	8000558 <__aeabi_fcmpgt>
 800ec64:	1e03      	subs	r3, r0, #0
 800ec66:	d015      	beq.n	800ec94 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	1c11      	adds	r1, r2, #0
 800ec70:	0018      	movs	r0, r3
 800ec72:	f000 fa4f 	bl	800f114 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f000 f8e5 	bl	800ee48 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ec7e:	1c04      	adds	r4, r0, #0
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	0018      	movs	r0, r3
 800ec84:	f000 f8ea 	bl	800ee5c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ec88:	1c02      	adds	r2, r0, #0
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	1c21      	adds	r1, r4, #0
 800ec8e:	0018      	movs	r0, r3
 800ec90:	f000 fb7a 	bl	800f388 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec98:	21fc      	movs	r1, #252	@ 0xfc
 800ec9a:	0589      	lsls	r1, r1, #22
 800ec9c:	1c18      	adds	r0, r3, #0
 800ec9e:	f7f1 fe0f 	bl	80008c0 <__aeabi_fadd>
 800eca2:	1c03      	adds	r3, r0, #0
 800eca4:	1c18      	adds	r0, r3, #0
 800eca6:	f7f2 fc73 	bl	8001590 <__aeabi_f2iz>
 800ecaa:	0002      	movs	r2, r0
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	601a      	str	r2, [r3, #0]
    return;
 800ecb0:	46c0      	nop			@ (mov r8, r8)
}
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	b005      	add	sp, #20
 800ecb6:	bd90      	pop	{r4, r7, pc}
 800ecb8:	42340000 	.word	0x42340000
 800ecbc:	0000fde7 	.word	0x0000fde7
 800ecc0:	00007fff 	.word	0x00007fff

0800ecc4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ecc4:	b5b0      	push	{r4, r5, r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	223c      	movs	r2, #60	@ 0x3c
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	4952      	ldr	r1, [pc, #328]	@ (800ee38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ecee:	1c18      	adds	r0, r3, #0
 800ecf0:	f7f1 ff70 	bl	8000bd4 <__aeabi_fdiv>
 800ecf4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ecf6:	2188      	movs	r1, #136	@ 0x88
 800ecf8:	05c9      	lsls	r1, r1, #23
 800ecfa:	1c18      	adds	r0, r3, #0
 800ecfc:	f7f2 f950 	bl	8000fa0 <__aeabi_fmul>
 800ed00:	1c03      	adds	r3, r0, #0
 800ed02:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	494a      	ldr	r1, [pc, #296]	@ (800ee38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ed0e:	1c18      	adds	r0, r3, #0
 800ed10:	f7f1 ff60 	bl	8000bd4 <__aeabi_fdiv>
 800ed14:	1c03      	adds	r3, r0, #0
 800ed16:	1c19      	adds	r1, r3, #0
 800ed18:	1c20      	adds	r0, r4, #0
 800ed1a:	f7f1 fdd1 	bl	80008c0 <__aeabi_fadd>
 800ed1e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ed20:	1c19      	adds	r1, r3, #0
 800ed22:	1c28      	adds	r0, r5, #0
 800ed24:	f7f1 ff56 	bl	8000bd4 <__aeabi_fdiv>
 800ed28:	1c03      	adds	r3, r0, #0
 800ed2a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4940      	ldr	r1, [pc, #256]	@ (800ee38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ed36:	1c18      	adds	r0, r3, #0
 800ed38:	f7f1 ff4c 	bl	8000bd4 <__aeabi_fdiv>
 800ed3c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ed3e:	2185      	movs	r1, #133	@ 0x85
 800ed40:	05c9      	lsls	r1, r1, #23
 800ed42:	1c18      	adds	r0, r3, #0
 800ed44:	f7f2 f92c 	bl	8000fa0 <__aeabi_fmul>
 800ed48:	1c03      	adds	r3, r0, #0
 800ed4a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4938      	ldr	r1, [pc, #224]	@ (800ee38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ed56:	1c18      	adds	r0, r3, #0
 800ed58:	f7f1 ff3c 	bl	8000bd4 <__aeabi_fdiv>
 800ed5c:	1c03      	adds	r3, r0, #0
 800ed5e:	1c19      	adds	r1, r3, #0
 800ed60:	1c20      	adds	r0, r4, #0
 800ed62:	f7f1 fdad 	bl	80008c0 <__aeabi_fadd>
 800ed66:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ed68:	1c19      	adds	r1, r3, #0
 800ed6a:	1c28      	adds	r0, r5, #0
 800ed6c:	f7f1 ff32 	bl	8000bd4 <__aeabi_fdiv>
 800ed70:	1c03      	adds	r3, r0, #0
 800ed72:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d118      	bne.n	800edb2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ed84:	2188      	movs	r1, #136	@ 0x88
 800ed86:	05c9      	lsls	r1, r1, #23
 800ed88:	1c18      	adds	r0, r3, #0
 800ed8a:	f7f2 f909 	bl	8000fa0 <__aeabi_fmul>
 800ed8e:	1c03      	adds	r3, r0, #0
 800ed90:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800ed96:	4929      	ldr	r1, [pc, #164]	@ (800ee3c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ed98:	1c18      	adds	r0, r3, #0
 800ed9a:	f7f1 fd91 	bl	80008c0 <__aeabi_fadd>
 800ed9e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800eda0:	1c19      	adds	r1, r3, #0
 800eda2:	1c20      	adds	r0, r4, #0
 800eda4:	f7f1 ff16 	bl	8000bd4 <__aeabi_fdiv>
 800eda8:	1c03      	adds	r3, r0, #0
 800edaa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	655a      	str	r2, [r3, #84]	@ 0x54
 800edb0:	e017      	b.n	800ede2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800edb6:	2188      	movs	r1, #136	@ 0x88
 800edb8:	05c9      	lsls	r1, r1, #23
 800edba:	1c18      	adds	r0, r3, #0
 800edbc:	f7f2 f8f0 	bl	8000fa0 <__aeabi_fmul>
 800edc0:	1c03      	adds	r3, r0, #0
 800edc2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800edc8:	491d      	ldr	r1, [pc, #116]	@ (800ee40 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800edca:	1c18      	adds	r0, r3, #0
 800edcc:	f7f1 fd78 	bl	80008c0 <__aeabi_fadd>
 800edd0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800edd2:	1c19      	adds	r1, r3, #0
 800edd4:	1c20      	adds	r0, r4, #0
 800edd6:	f7f1 fefd 	bl	8000bd4 <__aeabi_fdiv>
 800edda:	1c03      	adds	r3, r0, #0
 800eddc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ede6:	2185      	movs	r1, #133	@ 0x85
 800ede8:	05c9      	lsls	r1, r1, #23
 800edea:	1c18      	adds	r0, r3, #0
 800edec:	f7f2 f8d8 	bl	8000fa0 <__aeabi_fmul>
 800edf0:	1c03      	adds	r3, r0, #0
 800edf2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	4912      	ldr	r1, [pc, #72]	@ (800ee44 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800edfa:	1c18      	adds	r0, r3, #0
 800edfc:	f7f1 fd60 	bl	80008c0 <__aeabi_fadd>
 800ee00:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ee02:	1c19      	adds	r1, r3, #0
 800ee04:	1c20      	adds	r0, r4, #0
 800ee06:	f7f1 fee5 	bl	8000bd4 <__aeabi_fdiv>
 800ee0a:	1c03      	adds	r3, r0, #0
 800ee0c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ee30:	46c0      	nop			@ (mov r8, r8)
 800ee32:	46bd      	mov	sp, r7
 800ee34:	b002      	add	sp, #8
 800ee36:	bdb0      	pop	{r4, r5, r7, pc}
 800ee38:	45610000 	.word	0x45610000
 800ee3c:	44960000 	.word	0x44960000
 800ee40:	41a00000 	.word	0x41a00000
 800ee44:	451c4000 	.word	0x451c4000

0800ee48 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ee54:	1c18      	adds	r0, r3, #0
 800ee56:	46bd      	mov	sp, r7
 800ee58:	b002      	add	sp, #8
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ee6c:	1c19      	adds	r1, r3, #0
 800ee6e:	1c10      	adds	r0, r2, #0
 800ee70:	f7f1 fd26 	bl	80008c0 <__aeabi_fadd>
 800ee74:	1c03      	adds	r3, r0, #0
}
 800ee76:	1c18      	adds	r0, r3, #0
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	b002      	add	sp, #8
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b082      	sub	sp, #8
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	223c      	movs	r2, #60	@ 0x3c
 800ee8a:	5c9b      	ldrb	r3, [r3, r2]
}
 800ee8c:	0018      	movs	r0, r3
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	b002      	add	sp, #8
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ee94:	b5b0      	push	{r4, r5, r7, lr}
 800ee96:	b08c      	sub	sp, #48	@ 0x30
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800eea0:	1c19      	adds	r1, r3, #0
 800eea2:	4895      	ldr	r0, [pc, #596]	@ (800f0f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800eea4:	f7f2 f9ba 	bl	800121c <__aeabi_fsub>
 800eea8:	1c03      	adds	r3, r0, #0
 800eeaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eeb0:	1c19      	adds	r1, r3, #0
 800eeb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eeb4:	f7f1 fb50 	bl	8000558 <__aeabi_fcmpgt>
 800eeb8:	1e03      	subs	r3, r0, #0
 800eeba:	d00b      	beq.n	800eed4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800eec4:	1c19      	adds	r1, r3, #0
 800eec6:	1c10      	adds	r0, r2, #0
 800eec8:	f7f1 fcfa 	bl	80008c0 <__aeabi_fadd>
 800eecc:	1c03      	adds	r3, r0, #0
 800eece:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eed8:	1c19      	adds	r1, r3, #0
 800eeda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eedc:	f7f1 fb3c 	bl	8000558 <__aeabi_fcmpgt>
 800eee0:	1e03      	subs	r3, r0, #0
 800eee2:	d00b      	beq.n	800eefc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800eeec:	1c19      	adds	r1, r3, #0
 800eeee:	1c10      	adds	r0, r2, #0
 800eef0:	f7f1 fce6 	bl	80008c0 <__aeabi_fadd>
 800eef4:	1c03      	adds	r3, r0, #0
 800eef6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6959      	ldr	r1, [r3, #20]
 800ef00:	4a7e      	ldr	r2, [pc, #504]	@ (800f0fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	0018      	movs	r0, r3
 800ef06:	f000 f9f1 	bl	800f2ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	1c11      	adds	r1, r2, #0
 800ef12:	0018      	movs	r0, r3
 800ef14:	f000 f9fa 	bl	800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ef18:	1c03      	adds	r3, r0, #0
 800ef1a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ef28:	1c19      	adds	r1, r3, #0
 800ef2a:	1c10      	adds	r0, r2, #0
 800ef2c:	f7f2 f976 	bl	800121c <__aeabi_fsub>
 800ef30:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ef32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef34:	1c18      	adds	r0, r3, #0
 800ef36:	f7f2 f833 	bl	8000fa0 <__aeabi_fmul>
 800ef3a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ef3c:	1c19      	adds	r1, r3, #0
 800ef3e:	1c20      	adds	r0, r4, #0
 800ef40:	f7f1 fcbe 	bl	80008c0 <__aeabi_fadd>
 800ef44:	1c03      	adds	r3, r0, #0
 800ef46:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ef50:	1c19      	adds	r1, r3, #0
 800ef52:	486b      	ldr	r0, [pc, #428]	@ (800f100 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ef54:	f7f2 f962 	bl	800121c <__aeabi_fsub>
 800ef58:	1c03      	adds	r3, r0, #0
 800ef5a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	1c11      	adds	r1, r2, #0
 800ef64:	0018      	movs	r0, r3
 800ef66:	f000 f9d1 	bl	800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ef6a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ef6c:	1c19      	adds	r1, r3, #0
 800ef6e:	1c28      	adds	r0, r5, #0
 800ef70:	f7f2 f816 	bl	8000fa0 <__aeabi_fmul>
 800ef74:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800ef76:	1c19      	adds	r1, r3, #0
 800ef78:	1c20      	adds	r0, r4, #0
 800ef7a:	f7f1 fca1 	bl	80008c0 <__aeabi_fadd>
 800ef7e:	1c03      	adds	r3, r0, #0
 800ef80:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ef82:	4a60      	ldr	r2, [pc, #384]	@ (800f104 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ef84:	6a39      	ldr	r1, [r7, #32]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	0018      	movs	r0, r3
 800ef8a:	f000 f9af 	bl	800f2ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	1c11      	adds	r1, r2, #0
 800ef96:	0018      	movs	r0, r3
 800ef98:	f000 f9b8 	bl	800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ef9c:	1c03      	adds	r3, r0, #0
 800ef9e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800efa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800efa2:	69f8      	ldr	r0, [r7, #28]
 800efa4:	f7f1 fffc 	bl	8000fa0 <__aeabi_fmul>
 800efa8:	1c03      	adds	r3, r0, #0
 800efaa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6999      	ldr	r1, [r3, #24]
 800efb4:	4a51      	ldr	r2, [pc, #324]	@ (800f0fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	0018      	movs	r0, r3
 800efba:	f000 f997 	bl	800f2ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	1c11      	adds	r1, r2, #0
 800efc6:	0018      	movs	r0, r3
 800efc8:	f000 f9a0 	bl	800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800efcc:	1c03      	adds	r3, r0, #0
 800efce:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800efdc:	1c19      	adds	r1, r3, #0
 800efde:	1c10      	adds	r0, r2, #0
 800efe0:	f7f2 f91c 	bl	800121c <__aeabi_fsub>
 800efe4:	1c03      	adds	r3, r0, #0
 800efe6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800efe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800efea:	69b8      	ldr	r0, [r7, #24]
 800efec:	f7f2 f916 	bl	800121c <__aeabi_fsub>
 800eff0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800eff2:	1c19      	adds	r1, r3, #0
 800eff4:	1c28      	adds	r0, r5, #0
 800eff6:	f7f1 ffd3 	bl	8000fa0 <__aeabi_fmul>
 800effa:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800effc:	1c19      	adds	r1, r3, #0
 800effe:	1c20      	adds	r0, r4, #0
 800f000:	f7f1 fc5e 	bl	80008c0 <__aeabi_fadd>
 800f004:	1c03      	adds	r3, r0, #0
 800f006:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f010:	1c19      	adds	r1, r3, #0
 800f012:	483b      	ldr	r0, [pc, #236]	@ (800f100 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f014:	f7f2 f902 	bl	800121c <__aeabi_fsub>
 800f018:	1c03      	adds	r3, r0, #0
 800f01a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	1c11      	adds	r1, r2, #0
 800f024:	0018      	movs	r0, r3
 800f026:	f000 f971 	bl	800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f02a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f02c:	1c19      	adds	r1, r3, #0
 800f02e:	1c28      	adds	r0, r5, #0
 800f030:	f7f1 ffb6 	bl	8000fa0 <__aeabi_fmul>
 800f034:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f036:	1c19      	adds	r1, r3, #0
 800f038:	1c20      	adds	r0, r4, #0
 800f03a:	f7f1 fc41 	bl	80008c0 <__aeabi_fadd>
 800f03e:	1c03      	adds	r3, r0, #0
 800f040:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f042:	4a30      	ldr	r2, [pc, #192]	@ (800f104 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f044:	6939      	ldr	r1, [r7, #16]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	0018      	movs	r0, r3
 800f04a:	f000 f94f 	bl	800f2ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	1c11      	adds	r1, r2, #0
 800f056:	0018      	movs	r0, r3
 800f058:	f000 f958 	bl	800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f05c:	1c03      	adds	r3, r0, #0
 800f05e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f060:	6979      	ldr	r1, [r7, #20]
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7f1 ff9c 	bl	8000fa0 <__aeabi_fmul>
 800f068:	1c03      	adds	r3, r0, #0
 800f06a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	4923      	ldr	r1, [pc, #140]	@ (800f108 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f07a:	1c18      	adds	r0, r3, #0
 800f07c:	f7f1 fdaa 	bl	8000bd4 <__aeabi_fdiv>
 800f080:	1c03      	adds	r3, r0, #0
 800f082:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f084:	69f9      	ldr	r1, [r7, #28]
 800f086:	20fe      	movs	r0, #254	@ 0xfe
 800f088:	0580      	lsls	r0, r0, #22
 800f08a:	f7f2 f8c7 	bl	800121c <__aeabi_fsub>
 800f08e:	1c03      	adds	r3, r0, #0
 800f090:	491e      	ldr	r1, [pc, #120]	@ (800f10c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f092:	1c18      	adds	r0, r3, #0
 800f094:	f7f1 ff84 	bl	8000fa0 <__aeabi_fmul>
 800f098:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f09a:	491d      	ldr	r1, [pc, #116]	@ (800f110 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f09c:	1c18      	adds	r0, r3, #0
 800f09e:	f7f2 f8bd 	bl	800121c <__aeabi_fsub>
 800f0a2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f0a4:	1c19      	adds	r1, r3, #0
 800f0a6:	1c28      	adds	r0, r5, #0
 800f0a8:	f7f1 ff7a 	bl	8000fa0 <__aeabi_fmul>
 800f0ac:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f0ae:	1c19      	adds	r1, r3, #0
 800f0b0:	1c20      	adds	r0, r4, #0
 800f0b2:	f7f1 fc05 	bl	80008c0 <__aeabi_fadd>
 800f0b6:	1c03      	adds	r3, r0, #0
 800f0b8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	1c18      	adds	r0, r3, #0
 800f0c6:	f7f1 fa33 	bl	8000530 <__aeabi_fcmplt>
 800f0ca:	1e03      	subs	r3, r0, #0
 800f0cc:	d002      	beq.n	800f0d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f0dc:	1c19      	adds	r1, r3, #0
 800f0de:	1c10      	adds	r0, r2, #0
 800f0e0:	f7f1 fa3a 	bl	8000558 <__aeabi_fcmpgt>
 800f0e4:	1e03      	subs	r3, r0, #0
 800f0e6:	d100      	bne.n	800f0ea <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f0e8:	e002      	b.n	800f0f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f0f0:	46c0      	nop			@ (mov r8, r8)
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	b00c      	add	sp, #48	@ 0x30
 800f0f6:	bdb0      	pop	{r4, r5, r7, pc}
 800f0f8:	46fffe00 	.word	0x46fffe00
 800f0fc:	3c23d70a 	.word	0x3c23d70a
 800f100:	43ff0000 	.word	0x43ff0000
 800f104:	3db851ec 	.word	0x3db851ec
 800f108:	42700000 	.word	0x42700000
 800f10c:	3fa66666 	.word	0x3fa66666
 800f110:	3e99999a 	.word	0x3e99999a

0800f114 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800f114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	223c      	movs	r2, #60	@ 0x3c
 800f122:	5c9b      	ldrb	r3, [r3, r2]
 800f124:	2201      	movs	r2, #1
 800f126:	4053      	eors	r3, r2
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00a      	beq.n	800f144 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	223c      	movs	r2, #60	@ 0x3c
 800f132:	2101      	movs	r1, #1
 800f134:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800f142:	e0c8      	b.n	800f2d6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f148:	4965      	ldr	r1, [pc, #404]	@ (800f2e0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800f14a:	1c18      	adds	r0, r3, #0
 800f14c:	f7f1 fa0e 	bl	800056c <__aeabi_fcmpge>
 800f150:	1e03      	subs	r3, r0, #0
 800f152:	d107      	bne.n	800f164 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f158:	4962      	ldr	r1, [pc, #392]	@ (800f2e4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800f15a:	1c18      	adds	r0, r3, #0
 800f15c:	f7f1 f9f2 	bl	8000544 <__aeabi_fcmple>
 800f160:	1e03      	subs	r3, r0, #0
 800f162:	d00e      	beq.n	800f182 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f16c:	1c19      	adds	r1, r3, #0
 800f16e:	1c10      	adds	r0, r2, #0
 800f170:	f7f1 fba6 	bl	80008c0 <__aeabi_fadd>
 800f174:	1c03      	adds	r3, r0, #0
 800f176:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f186:	1c19      	adds	r1, r3, #0
 800f188:	6838      	ldr	r0, [r7, #0]
 800f18a:	f7f2 f847 	bl	800121c <__aeabi_fsub>
 800f18e:	1c03      	adds	r3, r0, #0
 800f190:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	0018      	movs	r0, r3
 800f196:	f7ff fe7d 	bl	800ee94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f19e:	1c19      	adds	r1, r3, #0
 800f1a0:	6838      	ldr	r0, [r7, #0]
 800f1a2:	f7f2 f83b 	bl	800121c <__aeabi_fsub>
 800f1a6:	1c03      	adds	r3, r0, #0
 800f1a8:	2185      	movs	r1, #133	@ 0x85
 800f1aa:	05c9      	lsls	r1, r1, #23
 800f1ac:	1c18      	adds	r0, r3, #0
 800f1ae:	f7f1 fd11 	bl	8000bd4 <__aeabi_fdiv>
 800f1b2:	1c03      	adds	r3, r0, #0
 800f1b4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7f1 f9b9 	bl	8000530 <__aeabi_fcmplt>
 800f1be:	1e03      	subs	r3, r0, #0
 800f1c0:	d008      	beq.n	800f1d4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1c6:	68f9      	ldr	r1, [r7, #12]
 800f1c8:	1c18      	adds	r0, r3, #0
 800f1ca:	f7f2 f827 	bl	800121c <__aeabi_fsub>
 800f1ce:	1c03      	adds	r3, r0, #0
 800f1d0:	617b      	str	r3, [r7, #20]
 800f1d2:	e007      	b.n	800f1e4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1d8:	1c19      	adds	r1, r3, #0
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7f1 fb70 	bl	80008c0 <__aeabi_fadd>
 800f1e0:	1c03      	adds	r3, r0, #0
 800f1e2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800f1e4:	23fe      	movs	r3, #254	@ 0xfe
 800f1e6:	059b      	lsls	r3, r3, #22
 800f1e8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800f1ea:	493f      	ldr	r1, [pc, #252]	@ (800f2e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f1ec:	6978      	ldr	r0, [r7, #20]
 800f1ee:	f7f1 f9b3 	bl	8000558 <__aeabi_fcmpgt>
 800f1f2:	1e03      	subs	r3, r0, #0
 800f1f4:	d010      	beq.n	800f218 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800f1f6:	493c      	ldr	r1, [pc, #240]	@ (800f2e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f1f8:	6978      	ldr	r0, [r7, #20]
 800f1fa:	f7f1 fceb 	bl	8000bd4 <__aeabi_fdiv>
 800f1fe:	1c03      	adds	r3, r0, #0
 800f200:	1c1c      	adds	r4, r3, #0
 800f202:	4939      	ldr	r1, [pc, #228]	@ (800f2e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f204:	6978      	ldr	r0, [r7, #20]
 800f206:	f7f1 fce5 	bl	8000bd4 <__aeabi_fdiv>
 800f20a:	1c03      	adds	r3, r0, #0
 800f20c:	1c19      	adds	r1, r3, #0
 800f20e:	1c20      	adds	r0, r4, #0
 800f210:	f7f1 fec6 	bl	8000fa0 <__aeabi_fmul>
 800f214:	1c03      	adds	r3, r0, #0
 800f216:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800f21c:	1c19      	adds	r1, r3, #0
 800f21e:	2085      	movs	r0, #133	@ 0x85
 800f220:	05c0      	lsls	r0, r0, #23
 800f222:	f7f1 fffb 	bl	800121c <__aeabi_fsub>
 800f226:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800f228:	6939      	ldr	r1, [r7, #16]
 800f22a:	1c18      	adds	r0, r3, #0
 800f22c:	f7f1 feb8 	bl	8000fa0 <__aeabi_fmul>
 800f230:	1c03      	adds	r3, r0, #0
 800f232:	1c18      	adds	r0, r3, #0
 800f234:	f018 fcfa 	bl	8027c2c <sqrtf>
 800f238:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f242:	2185      	movs	r1, #133	@ 0x85
 800f244:	05c9      	lsls	r1, r1, #23
 800f246:	6938      	ldr	r0, [r7, #16]
 800f248:	f7f1 feaa 	bl	8000fa0 <__aeabi_fmul>
 800f24c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800f24e:	1c19      	adds	r1, r3, #0
 800f250:	1c28      	adds	r0, r5, #0
 800f252:	f7f1 fcbf 	bl	8000bd4 <__aeabi_fdiv>
 800f256:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f258:	1c19      	adds	r1, r3, #0
 800f25a:	1c20      	adds	r0, r4, #0
 800f25c:	f7f1 fea0 	bl	8000fa0 <__aeabi_fmul>
 800f260:	1c03      	adds	r3, r0, #0
 800f262:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f268:	68f9      	ldr	r1, [r7, #12]
 800f26a:	1c18      	adds	r0, r3, #0
 800f26c:	f7f1 fe98 	bl	8000fa0 <__aeabi_fmul>
 800f270:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800f272:	6939      	ldr	r1, [r7, #16]
 800f274:	1c18      	adds	r0, r3, #0
 800f276:	f7f1 fcad 	bl	8000bd4 <__aeabi_fdiv>
 800f27a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800f27c:	68f9      	ldr	r1, [r7, #12]
 800f27e:	1c18      	adds	r0, r3, #0
 800f280:	f7f1 fe8e 	bl	8000fa0 <__aeabi_fmul>
 800f284:	1c03      	adds	r3, r0, #0
             sqrtf(
 800f286:	1c19      	adds	r1, r3, #0
 800f288:	1c20      	adds	r0, r4, #0
 800f28a:	f7f1 fb19 	bl	80008c0 <__aeabi_fadd>
 800f28e:	1c03      	adds	r3, r0, #0
 800f290:	1c18      	adds	r0, r3, #0
 800f292:	f018 fccb 	bl	8027c2c <sqrtf>
 800f296:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f298:	1c19      	adds	r1, r3, #0
 800f29a:	1c30      	adds	r0, r6, #0
 800f29c:	f7f1 fe80 	bl	8000fa0 <__aeabi_fmul>
 800f2a0:	1c03      	adds	r3, r0, #0
 800f2a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2b0:	68f9      	ldr	r1, [r7, #12]
 800f2b2:	1c18      	adds	r0, r3, #0
 800f2b4:	f7f1 fe74 	bl	8000fa0 <__aeabi_fmul>
 800f2b8:	1c03      	adds	r3, r0, #0
 800f2ba:	2182      	movs	r1, #130	@ 0x82
 800f2bc:	05c9      	lsls	r1, r1, #23
 800f2be:	1c18      	adds	r0, r3, #0
 800f2c0:	f7f1 fc88 	bl	8000bd4 <__aeabi_fdiv>
 800f2c4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800f2c6:	1c19      	adds	r1, r3, #0
 800f2c8:	1c20      	adds	r0, r4, #0
 800f2ca:	f7f1 faf9 	bl	80008c0 <__aeabi_fadd>
 800f2ce:	1c03      	adds	r3, r0, #0
 800f2d0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f2d6:	46c0      	nop			@ (mov r8, r8)
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	b007      	add	sp, #28
 800f2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2de:	46c0      	nop			@ (mov r8, r8)
 800f2e0:	42c80000 	.word	0x42c80000
 800f2e4:	c2c80000 	.word	0xc2c80000
 800f2e8:	44b40000 	.word	0x44b40000

0800f2ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f304:	46c0      	nop			@ (mov r8, r8)
 800f306:	46bd      	mov	sp, r7
 800f308:	b004      	add	sp, #16
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800f30c:	b590      	push	{r4, r7, lr}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f31e:	1c19      	adds	r1, r3, #0
 800f320:	6838      	ldr	r0, [r7, #0]
 800f322:	f7f1 ff7b 	bl	800121c <__aeabi_fsub>
 800f326:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f328:	1c19      	adds	r1, r3, #0
 800f32a:	1c20      	adds	r0, r4, #0
 800f32c:	f7f1 fe38 	bl	8000fa0 <__aeabi_fmul>
 800f330:	1c03      	adds	r3, r0, #0
 800f332:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800f334:	4912      	ldr	r1, [pc, #72]	@ (800f380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7f1 f8fa 	bl	8000530 <__aeabi_fcmplt>
 800f33c:	1e03      	subs	r3, r0, #0
 800f33e:	d002      	beq.n	800f346 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800f340:	23fe      	movs	r3, #254	@ 0xfe
 800f342:	059b      	lsls	r3, r3, #22
 800f344:	e018      	b.n	800f378 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800f346:	490f      	ldr	r1, [pc, #60]	@ (800f384 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7f1 f905 	bl	8000558 <__aeabi_fcmpgt>
 800f34e:	1e03      	subs	r3, r0, #0
 800f350:	d001      	beq.n	800f356 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800f352:	2300      	movs	r3, #0
 800f354:	e010      	b.n	800f378 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	1c18      	adds	r0, r3, #0
 800f35a:	f018 fc3f 	bl	8027bdc <expf>
 800f35e:	1c03      	adds	r3, r0, #0
 800f360:	21fe      	movs	r1, #254	@ 0xfe
 800f362:	0589      	lsls	r1, r1, #22
 800f364:	1c18      	adds	r0, r3, #0
 800f366:	f7f1 faab 	bl	80008c0 <__aeabi_fadd>
 800f36a:	1c03      	adds	r3, r0, #0
 800f36c:	1c19      	adds	r1, r3, #0
 800f36e:	20fe      	movs	r0, #254	@ 0xfe
 800f370:	0580      	lsls	r0, r0, #22
 800f372:	f7f1 fc2f 	bl	8000bd4 <__aeabi_fdiv>
 800f376:	1c03      	adds	r3, r0, #0
    }
}
 800f378:	1c18      	adds	r0, r3, #0
 800f37a:	46bd      	mov	sp, r7
 800f37c:	b005      	add	sp, #20
 800f37e:	bd90      	pop	{r4, r7, pc}
 800f380:	c2480000 	.word	0xc2480000
 800f384:	42480000 	.word	0x42480000

0800f388 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f3a0:	46c0      	nop			@ (mov r8, r8)
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	b004      	add	sp, #16
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800f3a8:	b590      	push	{r4, r7, lr}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d114      	bne.n	800f3e4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f3be:	1c19      	adds	r1, r3, #0
 800f3c0:	6838      	ldr	r0, [r7, #0]
 800f3c2:	f7f1 ff2b 	bl	800121c <__aeabi_fsub>
 800f3c6:	1c03      	adds	r3, r0, #0
 800f3c8:	4918      	ldr	r1, [pc, #96]	@ (800f42c <GasIndexAlgorithm__mox_model__process+0x84>)
 800f3ca:	1c18      	adds	r0, r3, #0
 800f3cc:	f7f1 fc02 	bl	8000bd4 <__aeabi_fdiv>
 800f3d0:	1c03      	adds	r3, r0, #0
 800f3d2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800f3d8:	1c19      	adds	r1, r3, #0
 800f3da:	1c10      	adds	r0, r2, #0
 800f3dc:	f7f1 fde0 	bl	8000fa0 <__aeabi_fmul>
 800f3e0:	1c03      	adds	r3, r0, #0
 800f3e2:	e01f      	b.n	800f424 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f3e8:	1c19      	adds	r1, r3, #0
 800f3ea:	6838      	ldr	r0, [r7, #0]
 800f3ec:	f7f1 ff16 	bl	800121c <__aeabi_fsub>
 800f3f0:	1c03      	adds	r3, r0, #0
 800f3f2:	1c1a      	adds	r2, r3, #0
 800f3f4:	2380      	movs	r3, #128	@ 0x80
 800f3f6:	061b      	lsls	r3, r3, #24
 800f3f8:	4053      	eors	r3, r2
 800f3fa:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f400:	490b      	ldr	r1, [pc, #44]	@ (800f430 <GasIndexAlgorithm__mox_model__process+0x88>)
 800f402:	1c18      	adds	r0, r3, #0
 800f404:	f7f1 fa5c 	bl	80008c0 <__aeabi_fadd>
 800f408:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f40a:	1c19      	adds	r1, r3, #0
 800f40c:	1c20      	adds	r0, r4, #0
 800f40e:	f7f1 fbe1 	bl	8000bd4 <__aeabi_fdiv>
 800f412:	1c03      	adds	r3, r0, #0
 800f414:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800f41a:	1c19      	adds	r1, r3, #0
 800f41c:	1c10      	adds	r0, r2, #0
 800f41e:	f7f1 fdbf 	bl	8000fa0 <__aeabi_fmul>
 800f422:	1c03      	adds	r3, r0, #0
    }
}
 800f424:	1c18      	adds	r0, r3, #0
 800f426:	46bd      	mov	sp, r7
 800f428:	b003      	add	sp, #12
 800f42a:	bd90      	pop	{r4, r7, pc}
 800f42c:	44fa0000 	.word	0x44fa0000
 800f430:	435c0000 	.word	0x435c0000

0800f434 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2180      	movs	r1, #128	@ 0x80
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2184      	movs	r1, #132	@ 0x84
 800f44e:	68ba      	ldr	r2, [r7, #8]
 800f450:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2188      	movs	r1, #136	@ 0x88
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	505a      	str	r2, [r3, r1]
}
 800f45a:	46c0      	nop			@ (mov r8, r8)
 800f45c:	46bd      	mov	sp, r7
 800f45e:	b004      	add	sp, #16
 800f460:	bd80      	pop	{r7, pc}
	...

0800f464 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800f464:	b590      	push	{r4, r7, lr}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2280      	movs	r2, #128	@ 0x80
 800f472:	589c      	ldr	r4, [r3, r2]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2284      	movs	r2, #132	@ 0x84
 800f478:	589b      	ldr	r3, [r3, r2]
 800f47a:	1c19      	adds	r1, r3, #0
 800f47c:	6838      	ldr	r0, [r7, #0]
 800f47e:	f7f1 fecd 	bl	800121c <__aeabi_fsub>
 800f482:	1c03      	adds	r3, r0, #0
 800f484:	1c19      	adds	r1, r3, #0
 800f486:	1c20      	adds	r0, r4, #0
 800f488:	f7f1 fd8a 	bl	8000fa0 <__aeabi_fmul>
 800f48c:	1c03      	adds	r3, r0, #0
 800f48e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800f490:	4940      	ldr	r1, [pc, #256]	@ (800f594 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800f492:	68b8      	ldr	r0, [r7, #8]
 800f494:	f7f1 f84c 	bl	8000530 <__aeabi_fcmplt>
 800f498:	1e03      	subs	r3, r0, #0
 800f49a:	d001      	beq.n	800f4a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800f49c:	4b3e      	ldr	r3, [pc, #248]	@ (800f598 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f49e:	e075      	b.n	800f58c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800f4a0:	493e      	ldr	r1, [pc, #248]	@ (800f59c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800f4a2:	68b8      	ldr	r0, [r7, #8]
 800f4a4:	f7f1 f858 	bl	8000558 <__aeabi_fcmpgt>
 800f4a8:	1e03      	subs	r3, r0, #0
 800f4aa:	d001      	beq.n	800f4b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	e06d      	b.n	800f58c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	6838      	ldr	r0, [r7, #0]
 800f4b4:	f7f1 f85a 	bl	800056c <__aeabi_fcmpge>
 800f4b8:	1e03      	subs	r3, r0, #0
 800f4ba:	d047      	beq.n	800f54c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2288      	movs	r2, #136	@ 0x88
 800f4c0:	589b      	ldr	r3, [r3, r2]
 800f4c2:	21fe      	movs	r1, #254	@ 0xfe
 800f4c4:	0589      	lsls	r1, r1, #22
 800f4c6:	1c18      	adds	r0, r3, #0
 800f4c8:	f7f1 f82c 	bl	8000524 <__aeabi_fcmpeq>
 800f4cc:	1e03      	subs	r3, r0, #0
 800f4ce:	d00e      	beq.n	800f4ee <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	1c19      	adds	r1, r3, #0
 800f4d6:	20fe      	movs	r0, #254	@ 0xfe
 800f4d8:	0580      	lsls	r0, r0, #22
 800f4da:	f7f1 fe9f 	bl	800121c <__aeabi_fsub>
 800f4de:	1c03      	adds	r3, r0, #0
 800f4e0:	492f      	ldr	r1, [pc, #188]	@ (800f5a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800f4e2:	1c18      	adds	r0, r3, #0
 800f4e4:	f7f1 fd5c 	bl	8000fa0 <__aeabi_fmul>
 800f4e8:	1c03      	adds	r3, r0, #0
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	e012      	b.n	800f514 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	492c      	ldr	r1, [pc, #176]	@ (800f5a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800f4f4:	1c18      	adds	r0, r3, #0
 800f4f6:	f7f1 fd53 	bl	8000fa0 <__aeabi_fmul>
 800f4fa:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800f4fc:	1c19      	adds	r1, r3, #0
 800f4fe:	4826      	ldr	r0, [pc, #152]	@ (800f598 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f500:	f7f1 fe8c 	bl	800121c <__aeabi_fsub>
 800f504:	1c03      	adds	r3, r0, #0
 800f506:	2181      	movs	r1, #129	@ 0x81
 800f508:	05c9      	lsls	r1, r1, #23
 800f50a:	1c18      	adds	r0, r3, #0
 800f50c:	f7f1 fb62 	bl	8000bd4 <__aeabi_fdiv>
 800f510:	1c03      	adds	r3, r0, #0
 800f512:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800f514:	4920      	ldr	r1, [pc, #128]	@ (800f598 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f7f1 f9d2 	bl	80008c0 <__aeabi_fadd>
 800f51c:	1c03      	adds	r3, r0, #0
 800f51e:	1c1c      	adds	r4, r3, #0
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	1c18      	adds	r0, r3, #0
 800f524:	f018 fb5a 	bl	8027bdc <expf>
 800f528:	1c03      	adds	r3, r0, #0
 800f52a:	21fe      	movs	r1, #254	@ 0xfe
 800f52c:	0589      	lsls	r1, r1, #22
 800f52e:	1c18      	adds	r0, r3, #0
 800f530:	f7f1 f9c6 	bl	80008c0 <__aeabi_fadd>
 800f534:	1c03      	adds	r3, r0, #0
 800f536:	1c19      	adds	r1, r3, #0
 800f538:	1c20      	adds	r0, r4, #0
 800f53a:	f7f1 fb4b 	bl	8000bd4 <__aeabi_fdiv>
 800f53e:	1c03      	adds	r3, r0, #0
 800f540:	68f9      	ldr	r1, [r7, #12]
 800f542:	1c18      	adds	r0, r3, #0
 800f544:	f7f1 fe6a 	bl	800121c <__aeabi_fsub>
 800f548:	1c03      	adds	r3, r0, #0
 800f54a:	e01f      	b.n	800f58c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2188      	movs	r1, #136	@ 0x88
 800f554:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800f556:	1c19      	adds	r1, r3, #0
 800f558:	1c10      	adds	r0, r2, #0
 800f55a:	f7f1 fb3b 	bl	8000bd4 <__aeabi_fdiv>
 800f55e:	1c03      	adds	r3, r0, #0
 800f560:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	1c18      	adds	r0, r3, #0
 800f566:	f018 fb39 	bl	8027bdc <expf>
 800f56a:	1c03      	adds	r3, r0, #0
 800f56c:	21fe      	movs	r1, #254	@ 0xfe
 800f56e:	0589      	lsls	r1, r1, #22
 800f570:	1c18      	adds	r0, r3, #0
 800f572:	f7f1 f9a5 	bl	80008c0 <__aeabi_fadd>
 800f576:	1c03      	adds	r3, r0, #0
 800f578:	1c19      	adds	r1, r3, #0
 800f57a:	4807      	ldr	r0, [pc, #28]	@ (800f598 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f57c:	f7f1 fb2a 	bl	8000bd4 <__aeabi_fdiv>
 800f580:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800f582:	1c19      	adds	r1, r3, #0
 800f584:	1c20      	adds	r0, r4, #0
 800f586:	f7f1 fd0b 	bl	8000fa0 <__aeabi_fmul>
 800f58a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800f58c:	1c18      	adds	r0, r3, #0
 800f58e:	46bd      	mov	sp, r7
 800f590:	b005      	add	sp, #20
 800f592:	bd90      	pop	{r4, r7, pc}
 800f594:	c2480000 	.word	0xc2480000
 800f598:	43fa0000 	.word	0x43fa0000
 800f59c:	42480000 	.word	0x42480000
 800f5a0:	3f8041ab 	.word	0x3f8041ab
 800f5a4:	40a00000 	.word	0x40a00000

0800f5a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f5a8:	b590      	push	{r4, r7, lr}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	4913      	ldr	r1, [pc, #76]	@ (800f608 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800f5ba:	1c18      	adds	r0, r3, #0
 800f5bc:	f7f1 f980 	bl	80008c0 <__aeabi_fadd>
 800f5c0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800f5c2:	1c19      	adds	r1, r3, #0
 800f5c4:	1c20      	adds	r0, r4, #0
 800f5c6:	f7f1 fb05 	bl	8000bd4 <__aeabi_fdiv>
 800f5ca:	1c03      	adds	r3, r0, #0
 800f5cc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	228c      	movs	r2, #140	@ 0x8c
 800f5d2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	490b      	ldr	r1, [pc, #44]	@ (800f60c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800f5de:	1c18      	adds	r0, r3, #0
 800f5e0:	f7f1 f96e 	bl	80008c0 <__aeabi_fadd>
 800f5e4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800f5e6:	1c19      	adds	r1, r3, #0
 800f5e8:	1c20      	adds	r0, r4, #0
 800f5ea:	f7f1 faf3 	bl	8000bd4 <__aeabi_fdiv>
 800f5ee:	1c03      	adds	r3, r0, #0
 800f5f0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2290      	movs	r2, #144	@ 0x90
 800f5f6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2294      	movs	r2, #148	@ 0x94
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	5499      	strb	r1, [r3, r2]
}
 800f600:	46c0      	nop			@ (mov r8, r8)
 800f602:	46bd      	mov	sp, r7
 800f604:	b003      	add	sp, #12
 800f606:	bd90      	pop	{r4, r7, pc}
 800f608:	41a00000 	.word	0x41a00000
 800f60c:	43fa0000 	.word	0x43fa0000

0800f610 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800f610:	b590      	push	{r4, r7, lr}
 800f612:	b087      	sub	sp, #28
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2294      	movs	r2, #148	@ 0x94
 800f61e:	5c9b      	ldrb	r3, [r3, r2]
 800f620:	2201      	movs	r2, #1
 800f622:	4053      	eors	r3, r2
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00f      	beq.n	800f64a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2198      	movs	r1, #152	@ 0x98
 800f62e:	683a      	ldr	r2, [r7, #0]
 800f630:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	219c      	movs	r1, #156	@ 0x9c
 800f636:	683a      	ldr	r2, [r7, #0]
 800f638:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	21a0      	movs	r1, #160	@ 0xa0
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2294      	movs	r2, #148	@ 0x94
 800f646:	2101      	movs	r1, #1
 800f648:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	228c      	movs	r2, #140	@ 0x8c
 800f64e:	589b      	ldr	r3, [r3, r2]
 800f650:	1c19      	adds	r1, r3, #0
 800f652:	20fe      	movs	r0, #254	@ 0xfe
 800f654:	0580      	lsls	r0, r0, #22
 800f656:	f7f1 fde1 	bl	800121c <__aeabi_fsub>
 800f65a:	1c03      	adds	r3, r0, #0
 800f65c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2298      	movs	r2, #152	@ 0x98
 800f662:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800f664:	1c19      	adds	r1, r3, #0
 800f666:	f7f1 fc9b 	bl	8000fa0 <__aeabi_fmul>
 800f66a:	1c03      	adds	r3, r0, #0
 800f66c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	228c      	movs	r2, #140	@ 0x8c
 800f672:	589b      	ldr	r3, [r3, r2]
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	1c18      	adds	r0, r3, #0
 800f678:	f7f1 fc92 	bl	8000fa0 <__aeabi_fmul>
 800f67c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800f67e:	1c19      	adds	r1, r3, #0
 800f680:	1c20      	adds	r0, r4, #0
 800f682:	f7f1 f91d 	bl	80008c0 <__aeabi_fadd>
 800f686:	1c03      	adds	r3, r0, #0
 800f688:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2298      	movs	r2, #152	@ 0x98
 800f68e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2290      	movs	r2, #144	@ 0x90
 800f694:	589b      	ldr	r3, [r3, r2]
 800f696:	1c19      	adds	r1, r3, #0
 800f698:	20fe      	movs	r0, #254	@ 0xfe
 800f69a:	0580      	lsls	r0, r0, #22
 800f69c:	f7f1 fdbe 	bl	800121c <__aeabi_fsub>
 800f6a0:	1c03      	adds	r3, r0, #0
 800f6a2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	229c      	movs	r2, #156	@ 0x9c
 800f6a8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800f6aa:	1c19      	adds	r1, r3, #0
 800f6ac:	f7f1 fc78 	bl	8000fa0 <__aeabi_fmul>
 800f6b0:	1c03      	adds	r3, r0, #0
 800f6b2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2290      	movs	r2, #144	@ 0x90
 800f6b8:	589b      	ldr	r3, [r3, r2]
 800f6ba:	6839      	ldr	r1, [r7, #0]
 800f6bc:	1c18      	adds	r0, r3, #0
 800f6be:	f7f1 fc6f 	bl	8000fa0 <__aeabi_fmul>
 800f6c2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800f6c4:	1c19      	adds	r1, r3, #0
 800f6c6:	1c20      	adds	r0, r4, #0
 800f6c8:	f7f1 f8fa 	bl	80008c0 <__aeabi_fadd>
 800f6cc:	1c03      	adds	r3, r0, #0
 800f6ce:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	229c      	movs	r2, #156	@ 0x9c
 800f6d4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2298      	movs	r2, #152	@ 0x98
 800f6da:	589a      	ldr	r2, [r3, r2]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	219c      	movs	r1, #156	@ 0x9c
 800f6e0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800f6e2:	1c19      	adds	r1, r3, #0
 800f6e4:	1c10      	adds	r0, r2, #0
 800f6e6:	f7f1 fd99 	bl	800121c <__aeabi_fsub>
 800f6ea:	1c03      	adds	r3, r0, #0
 800f6ec:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	6978      	ldr	r0, [r7, #20]
 800f6f2:	f7f0 ff1d 	bl	8000530 <__aeabi_fcmplt>
 800f6f6:	1e03      	subs	r3, r0, #0
 800f6f8:	d004      	beq.n	800f704 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2280      	movs	r2, #128	@ 0x80
 800f6fe:	0612      	lsls	r2, r2, #24
 800f700:	4053      	eors	r3, r2
 800f702:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800f704:	4923      	ldr	r1, [pc, #140]	@ (800f794 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800f706:	6978      	ldr	r0, [r7, #20]
 800f708:	f7f1 fc4a 	bl	8000fa0 <__aeabi_fmul>
 800f70c:	1c03      	adds	r3, r0, #0
 800f70e:	1c18      	adds	r0, r3, #0
 800f710:	f018 fa64 	bl	8027bdc <expf>
 800f714:	1c03      	adds	r3, r0, #0
 800f716:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800f718:	491f      	ldr	r1, [pc, #124]	@ (800f798 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800f71a:	6938      	ldr	r0, [r7, #16]
 800f71c:	f7f1 fc40 	bl	8000fa0 <__aeabi_fmul>
 800f720:	1c03      	adds	r3, r0, #0
 800f722:	491e      	ldr	r1, [pc, #120]	@ (800f79c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800f724:	1c18      	adds	r0, r3, #0
 800f726:	f7f1 f8cb 	bl	80008c0 <__aeabi_fadd>
 800f72a:	1c03      	adds	r3, r0, #0
 800f72c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685c      	ldr	r4, [r3, #4]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	68f9      	ldr	r1, [r7, #12]
 800f738:	1c18      	adds	r0, r3, #0
 800f73a:	f7f1 f8c1 	bl	80008c0 <__aeabi_fadd>
 800f73e:	1c03      	adds	r3, r0, #0
 800f740:	1c19      	adds	r1, r3, #0
 800f742:	1c20      	adds	r0, r4, #0
 800f744:	f7f1 fa46 	bl	8000bd4 <__aeabi_fdiv>
 800f748:	1c03      	adds	r3, r0, #0
 800f74a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	20fe      	movs	r0, #254	@ 0xfe
 800f750:	0580      	lsls	r0, r0, #22
 800f752:	f7f1 fd63 	bl	800121c <__aeabi_fsub>
 800f756:	1c03      	adds	r3, r0, #0
 800f758:	1c18      	adds	r0, r3, #0
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	22a0      	movs	r2, #160	@ 0xa0
 800f75e:	589b      	ldr	r3, [r3, r2]
 800f760:	1c19      	adds	r1, r3, #0
 800f762:	f7f1 fc1d 	bl	8000fa0 <__aeabi_fmul>
 800f766:	1c03      	adds	r3, r0, #0
 800f768:	1c1c      	adds	r4, r3, #0
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	68b8      	ldr	r0, [r7, #8]
 800f76e:	f7f1 fc17 	bl	8000fa0 <__aeabi_fmul>
 800f772:	1c03      	adds	r3, r0, #0
 800f774:	1c19      	adds	r1, r3, #0
 800f776:	1c20      	adds	r0, r4, #0
 800f778:	f7f1 f8a2 	bl	80008c0 <__aeabi_fadd>
 800f77c:	1c03      	adds	r3, r0, #0
 800f77e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	22a0      	movs	r2, #160	@ 0xa0
 800f784:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	22a0      	movs	r2, #160	@ 0xa0
 800f78a:	589b      	ldr	r3, [r3, r2]
}
 800f78c:	1c18      	adds	r0, r3, #0
 800f78e:	46bd      	mov	sp, r7
 800f790:	b007      	add	sp, #28
 800f792:	bd90      	pop	{r4, r7, pc}
 800f794:	be4ccccd 	.word	0xbe4ccccd
 800f798:	43f00000 	.word	0x43f00000
 800f79c:	41a00000 	.word	0x41a00000

0800f7a0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	000a      	movs	r2, r1
 800f7aa:	1cbb      	adds	r3, r7, #2
 800f7ac:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800f7ae:	230d      	movs	r3, #13
 800f7b0:	18fb      	adds	r3, r7, r3
 800f7b2:	22ff      	movs	r2, #255	@ 0xff
 800f7b4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800f7b6:	230e      	movs	r3, #14
 800f7b8:	18fb      	adds	r3, r7, r3
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	801a      	strh	r2, [r3, #0]
 800f7be:	e037      	b.n	800f830 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800f7c0:	230e      	movs	r3, #14
 800f7c2:	18fb      	adds	r3, r7, r3
 800f7c4:	881b      	ldrh	r3, [r3, #0]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	18d3      	adds	r3, r2, r3
 800f7ca:	7819      	ldrb	r1, [r3, #0]
 800f7cc:	220d      	movs	r2, #13
 800f7ce:	18bb      	adds	r3, r7, r2
 800f7d0:	18ba      	adds	r2, r7, r2
 800f7d2:	7812      	ldrb	r2, [r2, #0]
 800f7d4:	404a      	eors	r2, r1
 800f7d6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800f7d8:	230c      	movs	r3, #12
 800f7da:	18fb      	adds	r3, r7, r3
 800f7dc:	2208      	movs	r2, #8
 800f7de:	701a      	strb	r2, [r3, #0]
 800f7e0:	e01b      	b.n	800f81a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800f7e2:	210d      	movs	r1, #13
 800f7e4:	187b      	adds	r3, r7, r1
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	b25b      	sxtb	r3, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	da09      	bge.n	800f802 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800f7ee:	187b      	adds	r3, r7, r1
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	b25b      	sxtb	r3, r3
 800f7f6:	2231      	movs	r2, #49	@ 0x31
 800f7f8:	4053      	eors	r3, r2
 800f7fa:	b25a      	sxtb	r2, r3
 800f7fc:	187b      	adds	r3, r7, r1
 800f7fe:	701a      	strb	r2, [r3, #0]
 800f800:	e005      	b.n	800f80e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800f802:	230d      	movs	r3, #13
 800f804:	18fa      	adds	r2, r7, r3
 800f806:	18fb      	adds	r3, r7, r3
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	18db      	adds	r3, r3, r3
 800f80c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800f80e:	220c      	movs	r2, #12
 800f810:	18bb      	adds	r3, r7, r2
 800f812:	18ba      	adds	r2, r7, r2
 800f814:	7812      	ldrb	r2, [r2, #0]
 800f816:	3a01      	subs	r2, #1
 800f818:	701a      	strb	r2, [r3, #0]
 800f81a:	230c      	movs	r3, #12
 800f81c:	18fb      	adds	r3, r7, r3
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1de      	bne.n	800f7e2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800f824:	220e      	movs	r2, #14
 800f826:	18bb      	adds	r3, r7, r2
 800f828:	18ba      	adds	r2, r7, r2
 800f82a:	8812      	ldrh	r2, [r2, #0]
 800f82c:	3201      	adds	r2, #1
 800f82e:	801a      	strh	r2, [r3, #0]
 800f830:	230e      	movs	r3, #14
 800f832:	18fa      	adds	r2, r7, r3
 800f834:	1cbb      	adds	r3, r7, #2
 800f836:	8812      	ldrh	r2, [r2, #0]
 800f838:	881b      	ldrh	r3, [r3, #0]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d3c0      	bcc.n	800f7c0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800f83e:	230d      	movs	r3, #13
 800f840:	18fb      	adds	r3, r7, r3
 800f842:	781b      	ldrb	r3, [r3, #0]
}
 800f844:	0018      	movs	r0, r3
 800f846:	46bd      	mov	sp, r7
 800f848:	b004      	add	sp, #16
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	0008      	movs	r0, r1
 800f856:	0011      	movs	r1, r2
 800f858:	1cbb      	adds	r3, r7, #2
 800f85a:	1c02      	adds	r2, r0, #0
 800f85c:	801a      	strh	r2, [r3, #0]
 800f85e:	1c7b      	adds	r3, r7, #1
 800f860:	1c0a      	adds	r2, r1, #0
 800f862:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800f864:	1cbb      	adds	r3, r7, #2
 800f866:	881a      	ldrh	r2, [r3, #0]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	0011      	movs	r1, r2
 800f86c:	0018      	movs	r0, r3
 800f86e:	f7ff ff97 	bl	800f7a0 <sensirion_i2c_generate_crc>
 800f872:	0003      	movs	r3, r0
 800f874:	001a      	movs	r2, r3
 800f876:	1c7b      	adds	r3, r7, #1
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d001      	beq.n	800f882 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e000      	b.n	800f884 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800f882:	2300      	movs	r3, #0
}
 800f884:	0018      	movs	r0, r3
 800f886:	46bd      	mov	sp, r7
 800f888:	b002      	add	sp, #8
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	0008      	movs	r0, r1
 800f896:	0011      	movs	r1, r2
 800f898:	1cbb      	adds	r3, r7, #2
 800f89a:	1c02      	adds	r2, r0, #0
 800f89c:	801a      	strh	r2, [r3, #0]
 800f89e:	003b      	movs	r3, r7
 800f8a0:	1c0a      	adds	r2, r1, #0
 800f8a2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800f8a4:	003b      	movs	r3, r7
 800f8a6:	881b      	ldrh	r3, [r3, #0]
 800f8a8:	0a1b      	lsrs	r3, r3, #8
 800f8aa:	b299      	uxth	r1, r3
 800f8ac:	1cbb      	adds	r3, r7, #2
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	1cba      	adds	r2, r7, #2
 800f8b2:	1c58      	adds	r0, r3, #1
 800f8b4:	8010      	strh	r0, [r2, #0]
 800f8b6:	001a      	movs	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	189b      	adds	r3, r3, r2
 800f8bc:	b2ca      	uxtb	r2, r1
 800f8be:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800f8c0:	1cbb      	adds	r3, r7, #2
 800f8c2:	881b      	ldrh	r3, [r3, #0]
 800f8c4:	1cba      	adds	r2, r7, #2
 800f8c6:	1c59      	adds	r1, r3, #1
 800f8c8:	8011      	strh	r1, [r2, #0]
 800f8ca:	001a      	movs	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	189b      	adds	r3, r3, r2
 800f8d0:	003a      	movs	r2, r7
 800f8d2:	8812      	ldrh	r2, [r2, #0]
 800f8d4:	b2d2      	uxtb	r2, r2
 800f8d6:	701a      	strb	r2, [r3, #0]
    return offset;
 800f8d8:	1cbb      	adds	r3, r7, #2
 800f8da:	881b      	ldrh	r3, [r3, #0]
}
 800f8dc:	0018      	movs	r0, r3
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	b002      	add	sp, #8
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800f8e4:	b590      	push	{r4, r7, lr}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	0008      	movs	r0, r1
 800f8ee:	0011      	movs	r1, r2
 800f8f0:	1cbb      	adds	r3, r7, #2
 800f8f2:	1c02      	adds	r2, r0, #0
 800f8f4:	801a      	strh	r2, [r3, #0]
 800f8f6:	003b      	movs	r3, r7
 800f8f8:	1c0a      	adds	r2, r1, #0
 800f8fa:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800f8fc:	003b      	movs	r3, r7
 800f8fe:	881b      	ldrh	r3, [r3, #0]
 800f900:	0a1b      	lsrs	r3, r3, #8
 800f902:	b299      	uxth	r1, r3
 800f904:	1cbb      	adds	r3, r7, #2
 800f906:	881b      	ldrh	r3, [r3, #0]
 800f908:	1cba      	adds	r2, r7, #2
 800f90a:	1c58      	adds	r0, r3, #1
 800f90c:	8010      	strh	r0, [r2, #0]
 800f90e:	001a      	movs	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	189b      	adds	r3, r3, r2
 800f914:	b2ca      	uxtb	r2, r1
 800f916:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800f918:	1cbb      	adds	r3, r7, #2
 800f91a:	881b      	ldrh	r3, [r3, #0]
 800f91c:	1cba      	adds	r2, r7, #2
 800f91e:	1c59      	adds	r1, r3, #1
 800f920:	8011      	strh	r1, [r2, #0]
 800f922:	001a      	movs	r2, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	189b      	adds	r3, r3, r2
 800f928:	003a      	movs	r2, r7
 800f92a:	8812      	ldrh	r2, [r2, #0]
 800f92c:	b2d2      	uxtb	r2, r2
 800f92e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800f930:	1cbb      	adds	r3, r7, #2
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	3b02      	subs	r3, #2
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800f93a:	1cbb      	adds	r3, r7, #2
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	18d4      	adds	r4, r2, r3
 800f942:	2102      	movs	r1, #2
 800f944:	f7ff ff2c 	bl	800f7a0 <sensirion_i2c_generate_crc>
 800f948:	0003      	movs	r3, r0
 800f94a:	7023      	strb	r3, [r4, #0]
    offset++;
 800f94c:	1cbb      	adds	r3, r7, #2
 800f94e:	881a      	ldrh	r2, [r3, #0]
 800f950:	1cbb      	adds	r3, r7, #2
 800f952:	3201      	adds	r2, #1
 800f954:	801a      	strh	r2, [r3, #0]

    return offset;
 800f956:	1cbb      	adds	r3, r7, #2
 800f958:	881b      	ldrh	r3, [r3, #0]
}
 800f95a:	0018      	movs	r0, r3
 800f95c:	46bd      	mov	sp, r7
 800f95e:	b003      	add	sp, #12
 800f960:	bd90      	pop	{r4, r7, pc}

0800f962 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800f962:	b580      	push	{r7, lr}
 800f964:	b082      	sub	sp, #8
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	0008      	movs	r0, r1
 800f96c:	0011      	movs	r1, r2
 800f96e:	1cbb      	adds	r3, r7, #2
 800f970:	1c02      	adds	r2, r0, #0
 800f972:	801a      	strh	r2, [r3, #0]
 800f974:	003b      	movs	r3, r7
 800f976:	1c0a      	adds	r2, r1, #0
 800f978:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800f97a:	003b      	movs	r3, r7
 800f97c:	881a      	ldrh	r2, [r3, #0]
 800f97e:	1cbb      	adds	r3, r7, #2
 800f980:	8819      	ldrh	r1, [r3, #0]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	0018      	movs	r0, r3
 800f986:	f7ff ffad 	bl	800f8e4 <sensirion_i2c_add_uint16_t_to_buffer>
 800f98a:	0003      	movs	r3, r0
}
 800f98c:	0018      	movs	r0, r3
 800f98e:	46bd      	mov	sp, r7
 800f990:	b002      	add	sp, #8
 800f992:	bd80      	pop	{r7, pc}

0800f994 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6039      	str	r1, [r7, #0]
 800f99c:	0011      	movs	r1, r2
 800f99e:	1dfb      	adds	r3, r7, #7
 800f9a0:	1c02      	adds	r2, r0, #0
 800f9a2:	701a      	strb	r2, [r3, #0]
 800f9a4:	1d3b      	adds	r3, r7, #4
 800f9a6:	1c0a      	adds	r2, r1, #0
 800f9a8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800f9aa:	1d3b      	adds	r3, r7, #4
 800f9ac:	881a      	ldrh	r2, [r3, #0]
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	1dfb      	adds	r3, r7, #7
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	0018      	movs	r0, r3
 800f9b6:	f7fe f9db 	bl	800dd70 <sensirion_i2c_hal_write>
 800f9ba:	0003      	movs	r3, r0
}
 800f9bc:	0018      	movs	r0, r3
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	b002      	add	sp, #8
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800f9c4:	b5b0      	push	{r4, r5, r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6039      	str	r1, [r7, #0]
 800f9cc:	0011      	movs	r1, r2
 800f9ce:	1dfb      	adds	r3, r7, #7
 800f9d0:	1c02      	adds	r2, r0, #0
 800f9d2:	701a      	strb	r2, [r3, #0]
 800f9d4:	1d3b      	adds	r3, r7, #4
 800f9d6:	1c0a      	adds	r2, r1, #0
 800f9d8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800f9da:	1d3b      	adds	r3, r7, #4
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	085b      	lsrs	r3, r3, #1
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	220a      	movs	r2, #10
 800f9e4:	18ba      	adds	r2, r7, r2
 800f9e6:	1c19      	adds	r1, r3, #0
 800f9e8:	1c0b      	adds	r3, r1, #0
 800f9ea:	18db      	adds	r3, r3, r3
 800f9ec:	185b      	adds	r3, r3, r1
 800f9ee:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800f9f0:	1d3b      	adds	r3, r7, #4
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	4013      	ands	r3, r2
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800f9fe:	2304      	movs	r3, #4
 800fa00:	e06b      	b.n	800fada <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800fa02:	230a      	movs	r3, #10
 800fa04:	18fb      	adds	r3, r7, r3
 800fa06:	881a      	ldrh	r2, [r3, #0]
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	1dfb      	adds	r3, r7, #7
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	0018      	movs	r0, r3
 800fa10:	f7fe f98e 	bl	800dd30 <sensirion_i2c_hal_read>
 800fa14:	0003      	movs	r3, r0
 800fa16:	001a      	movs	r2, r3
 800fa18:	2108      	movs	r1, #8
 800fa1a:	187b      	adds	r3, r7, r1
 800fa1c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800fa1e:	000a      	movs	r2, r1
 800fa20:	18bb      	adds	r3, r7, r2
 800fa22:	2100      	movs	r1, #0
 800fa24:	5e5b      	ldrsh	r3, [r3, r1]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d003      	beq.n	800fa32 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800fa2a:	18bb      	adds	r3, r7, r2
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	5e9b      	ldrsh	r3, [r3, r2]
 800fa30:	e053      	b.n	800fada <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800fa32:	230e      	movs	r3, #14
 800fa34:	18fb      	adds	r3, r7, r3
 800fa36:	2200      	movs	r2, #0
 800fa38:	801a      	strh	r2, [r3, #0]
 800fa3a:	230c      	movs	r3, #12
 800fa3c:	18fb      	adds	r3, r7, r3
 800fa3e:	2200      	movs	r2, #0
 800fa40:	801a      	strh	r2, [r3, #0]
 800fa42:	e041      	b.n	800fac8 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800fa44:	210e      	movs	r1, #14
 800fa46:	187b      	adds	r3, r7, r1
 800fa48:	881b      	ldrh	r3, [r3, #0]
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800fa4e:	187b      	adds	r3, r7, r1
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	3302      	adds	r3, #2
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	001a      	movs	r2, r3
 800fa5c:	2102      	movs	r1, #2
 800fa5e:	f7ff fef5 	bl	800f84c <sensirion_i2c_check_crc>
 800fa62:	0003      	movs	r3, r0
 800fa64:	001a      	movs	r2, r3
 800fa66:	2108      	movs	r1, #8
 800fa68:	187b      	adds	r3, r7, r1
 800fa6a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800fa6c:	000a      	movs	r2, r1
 800fa6e:	18bb      	adds	r3, r7, r2
 800fa70:	2100      	movs	r1, #0
 800fa72:	5e5b      	ldrsh	r3, [r3, r1]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d003      	beq.n	800fa80 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800fa78:	18bb      	adds	r3, r7, r2
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	5e9b      	ldrsh	r3, [r3, r2]
 800fa7e:	e02c      	b.n	800fada <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800fa80:	240e      	movs	r4, #14
 800fa82:	193b      	adds	r3, r7, r4
 800fa84:	881b      	ldrh	r3, [r3, #0]
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	18d2      	adds	r2, r2, r3
 800fa8a:	250c      	movs	r5, #12
 800fa8c:	197b      	adds	r3, r7, r5
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	1979      	adds	r1, r7, r5
 800fa92:	1c58      	adds	r0, r3, #1
 800fa94:	8008      	strh	r0, [r1, #0]
 800fa96:	0019      	movs	r1, r3
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	185b      	adds	r3, r3, r1
 800fa9c:	7812      	ldrb	r2, [r2, #0]
 800fa9e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800faa0:	193b      	adds	r3, r7, r4
 800faa2:	881b      	ldrh	r3, [r3, #0]
 800faa4:	3301      	adds	r3, #1
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	18d2      	adds	r2, r2, r3
 800faaa:	197b      	adds	r3, r7, r5
 800faac:	881b      	ldrh	r3, [r3, #0]
 800faae:	1979      	adds	r1, r7, r5
 800fab0:	1c58      	adds	r0, r3, #1
 800fab2:	8008      	strh	r0, [r1, #0]
 800fab4:	0019      	movs	r1, r3
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	185b      	adds	r3, r3, r1
 800faba:	7812      	ldrb	r2, [r2, #0]
 800fabc:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800fabe:	193b      	adds	r3, r7, r4
 800fac0:	193a      	adds	r2, r7, r4
 800fac2:	8812      	ldrh	r2, [r2, #0]
 800fac4:	3203      	adds	r2, #3
 800fac6:	801a      	strh	r2, [r3, #0]
 800fac8:	230e      	movs	r3, #14
 800faca:	18fa      	adds	r2, r7, r3
 800facc:	230a      	movs	r3, #10
 800face:	18fb      	adds	r3, r7, r3
 800fad0:	8812      	ldrh	r2, [r2, #0]
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d3b5      	bcc.n	800fa44 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	0018      	movs	r0, r3
 800fadc:	46bd      	mov	sp, r7
 800fade:	b004      	add	sp, #16
 800fae0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800fae4 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800fae4:	b590      	push	{r4, r7, lr}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6039      	str	r1, [r7, #0]
 800faec:	0011      	movs	r1, r2
 800faee:	1dfb      	adds	r3, r7, #7
 800faf0:	1c02      	adds	r2, r0, #0
 800faf2:	701a      	strb	r2, [r3, #0]
 800faf4:	1dbb      	adds	r3, r7, #6
 800faf6:	1c0a      	adds	r2, r1, #0
 800faf8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800fafa:	4b08      	ldr	r3, [pc, #32]	@ (800fb1c <ReadRegister+0x38>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d008      	beq.n	800fb14 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800fb02:	4b06      	ldr	r3, [pc, #24]	@ (800fb1c <ReadRegister+0x38>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	1dba      	adds	r2, r7, #6
 800fb08:	7814      	ldrb	r4, [r2, #0]
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	1dfa      	adds	r2, r7, #7
 800fb0e:	7810      	ldrb	r0, [r2, #0]
 800fb10:	0022      	movs	r2, r4
 800fb12:	4798      	blx	r3
  }
}
 800fb14:	46c0      	nop			@ (mov r8, r8)
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b003      	add	sp, #12
 800fb1a:	bd90      	pop	{r4, r7, pc}
 800fb1c:	20000f0c 	.word	0x20000f0c

0800fb20 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800fb20:	b590      	push	{r4, r7, lr}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6039      	str	r1, [r7, #0]
 800fb28:	0011      	movs	r1, r2
 800fb2a:	1dfb      	adds	r3, r7, #7
 800fb2c:	1c02      	adds	r2, r0, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	1dbb      	adds	r3, r7, #6
 800fb32:	1c0a      	adds	r2, r1, #0
 800fb34:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800fb36:	4b08      	ldr	r3, [pc, #32]	@ (800fb58 <WriteRegister+0x38>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d008      	beq.n	800fb50 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800fb3e:	4b06      	ldr	r3, [pc, #24]	@ (800fb58 <WriteRegister+0x38>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	1dba      	adds	r2, r7, #6
 800fb44:	7814      	ldrb	r4, [r2, #0]
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	1dfa      	adds	r2, r7, #7
 800fb4a:	7810      	ldrb	r0, [r2, #0]
 800fb4c:	0022      	movs	r2, r4
 800fb4e:	4798      	blx	r3
  }
}
 800fb50:	46c0      	nop			@ (mov r8, r8)
 800fb52:	46bd      	mov	sp, r7
 800fb54:	b003      	add	sp, #12
 800fb56:	bd90      	pop	{r4, r7, pc}
 800fb58:	20000f10 	.word	0x20000f10

0800fb5c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800fb64:	f003 fce2 	bl	801352c <HAL_GetTick>
 800fb68:	0002      	movs	r2, r0
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	18d2      	adds	r2, r2, r3
 800fb6e:	4b03      	ldr	r3, [pc, #12]	@ (800fb7c <setSGP40TimeStamp+0x20>)
 800fb70:	601a      	str	r2, [r3, #0]
}
 800fb72:	46c0      	nop			@ (mov r8, r8)
 800fb74:	46bd      	mov	sp, r7
 800fb76:	b002      	add	sp, #8
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	46c0      	nop			@ (mov r8, r8)
 800fb7c:	20000f20 	.word	0x20000f20

0800fb80 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800fb84:	4b02      	ldr	r3, [pc, #8]	@ (800fb90 <ResetSGP40samplecounter+0x10>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	701a      	strb	r2, [r3, #0]
}
 800fb8a:	46c0      	nop			@ (mov r8, r8)
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	20000f1e 	.word	0x20000f1e

0800fb94 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800fb9e:	4b07      	ldr	r3, [pc, #28]	@ (800fbbc <SGP_Init+0x28>)
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800fba4:	4b06      	ldr	r3, [pc, #24]	@ (800fbc0 <SGP_Init+0x2c>)
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800fbaa:	4b06      	ldr	r3, [pc, #24]	@ (800fbc4 <SGP_Init+0x30>)
 800fbac:	2100      	movs	r1, #0
 800fbae:	0018      	movs	r0, r3
 800fbb0:	f7fe ff72 	bl	800ea98 <GasIndexAlgorithm_init>
}
 800fbb4:	46c0      	nop			@ (mov r8, r8)
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	b002      	add	sp, #8
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	20000f0c 	.word	0x20000f0c
 800fbc0:	20000f10 	.word	0x20000f10
 800fbc4:	20000f28 	.word	0x20000f28

0800fbc8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800fbcc:	4b07      	ldr	r3, [pc, #28]	@ (800fbec <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d004      	beq.n	800fbde <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800fbd4:	4b06      	ldr	r3, [pc, #24]	@ (800fbf0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800fbd6:	22fe      	movs	r2, #254	@ 0xfe
 800fbd8:	0592      	lsls	r2, r2, #22
 800fbda:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 800fbdc:	e002      	b.n	800fbe4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800fbde:	4b04      	ldr	r3, [pc, #16]	@ (800fbf0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800fbe0:	4a04      	ldr	r2, [pc, #16]	@ (800fbf4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800fbe2:	605a      	str	r2, [r3, #4]
}
 800fbe4:	46c0      	nop			@ (mov r8, r8)
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	46c0      	nop			@ (mov r8, r8)
 800fbec:	20001e75 	.word	0x20001e75
 800fbf0:	20000f28 	.word	0x20000f28
 800fbf4:	44610000 	.word	0x44610000

0800fbf8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800fbfc:	4b13      	ldr	r3, [pc, #76]	@ (800fc4c <SGP_StartMeasurement+0x54>)
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00d      	beq.n	800fc20 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fc04:	4b12      	ldr	r3, [pc, #72]	@ (800fc50 <SGP_StartMeasurement+0x58>)
 800fc06:	2208      	movs	r2, #8
 800fc08:	0019      	movs	r1, r3
 800fc0a:	2059      	movs	r0, #89	@ 0x59
 800fc0c:	f7ff ff88 	bl	800fb20 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800fc10:	f003 fc8c 	bl	801352c <HAL_GetTick>
 800fc14:	0003      	movs	r3, r0
 800fc16:	331e      	adds	r3, #30
 800fc18:	001a      	movs	r2, r3
 800fc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800fc54 <SGP_StartMeasurement+0x5c>)
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	e00c      	b.n	800fc3a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fc20:	4b0d      	ldr	r3, [pc, #52]	@ (800fc58 <SGP_StartMeasurement+0x60>)
 800fc22:	2208      	movs	r2, #8
 800fc24:	0019      	movs	r1, r3
 800fc26:	2059      	movs	r0, #89	@ 0x59
 800fc28:	f7ff ff7a 	bl	800fb20 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800fc2c:	f003 fc7e 	bl	801352c <HAL_GetTick>
 800fc30:	0003      	movs	r3, r0
 800fc32:	33aa      	adds	r3, #170	@ 0xaa
 800fc34:	001a      	movs	r2, r3
 800fc36:	4b09      	ldr	r3, [pc, #36]	@ (800fc5c <SGP_StartMeasurement+0x64>)
 800fc38:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800fc3a:	4b09      	ldr	r3, [pc, #36]	@ (800fc60 <SGP_StartMeasurement+0x68>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800fc40:	4b08      	ldr	r3, [pc, #32]	@ (800fc64 <SGP_StartMeasurement+0x6c>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	701a      	strb	r2, [r3, #0]
}
 800fc46:	46c0      	nop			@ (mov r8, r8)
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	20000fd0 	.word	0x20000fd0
 800fc50:	200000b0 	.word	0x200000b0
 800fc54:	200000c4 	.word	0x200000c4
 800fc58:	200000a8 	.word	0x200000a8
 800fc5c:	200000bc 	.word	0x200000bc
 800fc60:	20000f24 	.word	0x20000f24
 800fc64:	20000f25 	.word	0x20000f25

0800fc68 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800fc6c:	4b04      	ldr	r3, [pc, #16]	@ (800fc80 <SGP_HeatedUp+0x18>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	0018      	movs	r0, r3
 800fc72:	f002 fecf 	bl	8012a14 <TimestampIsReached>
 800fc76:	0003      	movs	r3, r0
}
 800fc78:	0018      	movs	r0, r3
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	46c0      	nop			@ (mov r8, r8)
 800fc80:	200000bc 	.word	0x200000bc

0800fc84 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800fc84:	b580      	push	{r7, lr}
 800fc86:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800fc88:	4b04      	ldr	r3, [pc, #16]	@ (800fc9c <SGP_MeasurementReady+0x18>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	0018      	movs	r0, r3
 800fc8e:	f002 fec1 	bl	8012a14 <TimestampIsReached>
 800fc92:	0003      	movs	r3, r0
}
 800fc94:	0018      	movs	r0, r3
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	46c0      	nop			@ (mov r8, r8)
 800fc9c:	200000c4 	.word	0x200000c4

0800fca0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800fca0:	b580      	push	{r7, lr}
 800fca2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800fca4:	4b04      	ldr	r3, [pc, #16]	@ (800fcb8 <SGP_MeasurementDone+0x18>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	0018      	movs	r0, r3
 800fcaa:	f002 feb3 	bl	8012a14 <TimestampIsReached>
 800fcae:	0003      	movs	r3, r0
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	46c0      	nop			@ (mov r8, r8)
 800fcb8:	200000c0 	.word	0x200000c0

0800fcbc <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800fcc0:	4b04      	ldr	r3, [pc, #16]	@ (800fcd4 <SGP_TurnHeaterOff+0x18>)
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	0019      	movs	r1, r3
 800fcc6:	2059      	movs	r0, #89	@ 0x59
 800fcc8:	f7ff ff2a 	bl	800fb20 <WriteRegister>
}
 800fccc:	46c0      	nop			@ (mov r8, r8)
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	46c0      	nop			@ (mov r8, r8)
 800fcd4:	200000a0 	.word	0x200000a0

0800fcd8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800fcd8:	b590      	push	{r4, r7, lr}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af02      	add	r7, sp, #8
 800fcde:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800fce0:	f7ff ffc2 	bl	800fc68 <SGP_HeatedUp>
 800fce4:	1e03      	subs	r3, r0, #0
 800fce6:	d032      	beq.n	800fd4e <SGP_GetMeasurementValues+0x76>
 800fce8:	4b7f      	ldr	r3, [pc, #508]	@ (800fee8 <SGP_GetMeasurementValues+0x210>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2201      	movs	r2, #1
 800fcee:	4053      	eors	r3, r2
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d02b      	beq.n	800fd4e <SGP_GetMeasurementValues+0x76>
 800fcf6:	4b7d      	ldr	r3, [pc, #500]	@ (800feec <SGP_GetMeasurementValues+0x214>)
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	4053      	eors	r3, r2
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d024      	beq.n	800fd4e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800fd04:	4b78      	ldr	r3, [pc, #480]	@ (800fee8 <SGP_GetMeasurementValues+0x210>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800fd0a:	4b79      	ldr	r3, [pc, #484]	@ (800fef0 <SGP_GetMeasurementValues+0x218>)
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00d      	beq.n	800fd2e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fd12:	4b78      	ldr	r3, [pc, #480]	@ (800fef4 <SGP_GetMeasurementValues+0x21c>)
 800fd14:	2208      	movs	r2, #8
 800fd16:	0019      	movs	r1, r3
 800fd18:	2059      	movs	r0, #89	@ 0x59
 800fd1a:	f7ff ff01 	bl	800fb20 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800fd1e:	f003 fc05 	bl	801352c <HAL_GetTick>
 800fd22:	0003      	movs	r3, r0
 800fd24:	331e      	adds	r3, #30
 800fd26:	001a      	movs	r2, r3
 800fd28:	4b73      	ldr	r3, [pc, #460]	@ (800fef8 <SGP_GetMeasurementValues+0x220>)
 800fd2a:	601a      	str	r2, [r3, #0]
 800fd2c:	e00c      	b.n	800fd48 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fd2e:	4b73      	ldr	r3, [pc, #460]	@ (800fefc <SGP_GetMeasurementValues+0x224>)
 800fd30:	2208      	movs	r2, #8
 800fd32:	0019      	movs	r1, r3
 800fd34:	2059      	movs	r0, #89	@ 0x59
 800fd36:	f7ff fef3 	bl	800fb20 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800fd3a:	f003 fbf7 	bl	801352c <HAL_GetTick>
 800fd3e:	0003      	movs	r3, r0
 800fd40:	331e      	adds	r3, #30
 800fd42:	001a      	movs	r2, r3
 800fd44:	4b6c      	ldr	r3, [pc, #432]	@ (800fef8 <SGP_GetMeasurementValues+0x220>)
 800fd46:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800fd48:	4b68      	ldr	r3, [pc, #416]	@ (800feec <SGP_GetMeasurementValues+0x214>)
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800fd4e:	4b66      	ldr	r3, [pc, #408]	@ (800fee8 <SGP_GetMeasurementValues+0x210>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d100      	bne.n	800fd58 <SGP_GetMeasurementValues+0x80>
 800fd56:	e0ab      	b.n	800feb0 <SGP_GetMeasurementValues+0x1d8>
 800fd58:	f7ff ff94 	bl	800fc84 <SGP_MeasurementReady>
 800fd5c:	1e03      	subs	r3, r0, #0
 800fd5e:	d100      	bne.n	800fd62 <SGP_GetMeasurementValues+0x8a>
 800fd60:	e0a6      	b.n	800feb0 <SGP_GetMeasurementValues+0x1d8>
 800fd62:	4b67      	ldr	r3, [pc, #412]	@ (800ff00 <SGP_GetMeasurementValues+0x228>)
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	2201      	movs	r2, #1
 800fd68:	4053      	eors	r3, r2
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d100      	bne.n	800fd72 <SGP_GetMeasurementValues+0x9a>
 800fd70:	e09e      	b.n	800feb0 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800fd72:	4b63      	ldr	r3, [pc, #396]	@ (800ff00 <SGP_GetMeasurementValues+0x228>)
 800fd74:	2201      	movs	r2, #1
 800fd76:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800fd78:	4b62      	ldr	r3, [pc, #392]	@ (800ff04 <SGP_GetMeasurementValues+0x22c>)
 800fd7a:	2203      	movs	r2, #3
 800fd7c:	0019      	movs	r1, r3
 800fd7e:	2059      	movs	r0, #89	@ 0x59
 800fd80:	f7ff feb0 	bl	800fae4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800fd84:	4b5f      	ldr	r3, [pc, #380]	@ (800ff04 <SGP_GetMeasurementValues+0x22c>)
 800fd86:	2203      	movs	r2, #3
 800fd88:	2103      	movs	r1, #3
 800fd8a:	0018      	movs	r0, r3
 800fd8c:	f000 f918 	bl	800ffc0 <CheckCRC>
 800fd90:	0003      	movs	r3, r0
 800fd92:	001a      	movs	r2, r3
 800fd94:	2301      	movs	r3, #1
 800fd96:	4053      	eors	r3, r2
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d02a      	beq.n	800fdf4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800fd9e:	4a5a      	ldr	r2, [pc, #360]	@ (800ff08 <SGP_GetMeasurementValues+0x230>)
 800fda0:	4b5a      	ldr	r3, [pc, #360]	@ (800ff0c <SGP_GetMeasurementValues+0x234>)
 800fda2:	0019      	movs	r1, r3
 800fda4:	2001      	movs	r0, #1
 800fda6:	f002 fe8b 	bl	8012ac0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800fdaa:	4a59      	ldr	r2, [pc, #356]	@ (800ff10 <SGP_GetMeasurementValues+0x238>)
 800fdac:	4b59      	ldr	r3, [pc, #356]	@ (800ff14 <SGP_GetMeasurementValues+0x23c>)
 800fdae:	0019      	movs	r1, r3
 800fdb0:	2002      	movs	r0, #2
 800fdb2:	f002 fe85 	bl	8012ac0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800fdb6:	230f      	movs	r3, #15
 800fdb8:	18fb      	adds	r3, r7, r3
 800fdba:	2200      	movs	r2, #0
 800fdbc:	701a      	strb	r2, [r3, #0]
 800fdbe:	e012      	b.n	800fde6 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800fdc0:	240f      	movs	r4, #15
 800fdc2:	193b      	adds	r3, r7, r4
 800fdc4:	7818      	ldrb	r0, [r3, #0]
 800fdc6:	193b      	adds	r3, r7, r4
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	4a4e      	ldr	r2, [pc, #312]	@ (800ff04 <SGP_GetMeasurementValues+0x22c>)
 800fdcc:	5cd3      	ldrb	r3, [r2, r3]
 800fdce:	4a52      	ldr	r2, [pc, #328]	@ (800ff18 <SGP_GetMeasurementValues+0x240>)
 800fdd0:	4952      	ldr	r1, [pc, #328]	@ (800ff1c <SGP_GetMeasurementValues+0x244>)
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	0003      	movs	r3, r0
 800fdd6:	2003      	movs	r0, #3
 800fdd8:	f002 fe72 	bl	8012ac0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800fddc:	193b      	adds	r3, r7, r4
 800fdde:	781a      	ldrb	r2, [r3, #0]
 800fde0:	193b      	adds	r3, r7, r4
 800fde2:	3201      	adds	r2, #1
 800fde4:	701a      	strb	r2, [r3, #0]
 800fde6:	230f      	movs	r3, #15
 800fde8:	18fb      	adds	r3, r7, r3
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d9e7      	bls.n	800fdc0 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	e075      	b.n	800fee0 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800fdf4:	f003 fb9a 	bl	801352c <HAL_GetTick>
 800fdf8:	0003      	movs	r3, r0
 800fdfa:	22fa      	movs	r2, #250	@ 0xfa
 800fdfc:	0092      	lsls	r2, r2, #2
 800fdfe:	189a      	adds	r2, r3, r2
 800fe00:	4b47      	ldr	r3, [pc, #284]	@ (800ff20 <SGP_GetMeasurementValues+0x248>)
 800fe02:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800fe04:	f7ff ff5a 	bl	800fcbc <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800fe08:	4b46      	ldr	r3, [pc, #280]	@ (800ff24 <SGP_GetMeasurementValues+0x24c>)
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	b2da      	uxtb	r2, r3
 800fe10:	4b44      	ldr	r3, [pc, #272]	@ (800ff24 <SGP_GetMeasurementValues+0x24c>)
 800fe12:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800fe14:	4b43      	ldr	r3, [pc, #268]	@ (800ff24 <SGP_GetMeasurementValues+0x24c>)
 800fe16:	781a      	ldrb	r2, [r3, #0]
 800fe18:	4b43      	ldr	r3, [pc, #268]	@ (800ff28 <SGP_GetMeasurementValues+0x250>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d347      	bcc.n	800feb0 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800fe20:	4b38      	ldr	r3, [pc, #224]	@ (800ff04 <SGP_GetMeasurementValues+0x22c>)
 800fe22:	785b      	ldrb	r3, [r3, #1]
 800fe24:	021b      	lsls	r3, r3, #8
 800fe26:	b21a      	sxth	r2, r3
 800fe28:	4b36      	ldr	r3, [pc, #216]	@ (800ff04 <SGP_GetMeasurementValues+0x22c>)
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	b21b      	sxth	r3, r3
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	b21a      	sxth	r2, r3
 800fe32:	240c      	movs	r4, #12
 800fe34:	193b      	adds	r3, r7, r4
 800fe36:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800fe3c:	193b      	adds	r3, r7, r4
 800fe3e:	8819      	ldrh	r1, [r3, #0]
 800fe40:	2308      	movs	r3, #8
 800fe42:	18fa      	adds	r2, r7, r3
 800fe44:	4b39      	ldr	r3, [pc, #228]	@ (800ff2c <SGP_GetMeasurementValues+0x254>)
 800fe46:	0018      	movs	r0, r3
 800fe48:	f7fe fe88 	bl	800eb5c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800fe52:	4b37      	ldr	r3, [pc, #220]	@ (800ff30 <SGP_GetMeasurementValues+0x258>)
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	3301      	adds	r3, #1
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	4b35      	ldr	r3, [pc, #212]	@ (800ff30 <SGP_GetMeasurementValues+0x258>)
 800fe5c:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800fe5e:	4b34      	ldr	r3, [pc, #208]	@ (800ff30 <SGP_GetMeasurementValues+0x258>)
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d10d      	bne.n	800fe82 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800fe66:	193b      	adds	r3, r7, r4
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	4a32      	ldr	r2, [pc, #200]	@ (800ff34 <SGP_GetMeasurementValues+0x25c>)
 800fe6c:	492b      	ldr	r1, [pc, #172]	@ (800ff1c <SGP_GetMeasurementValues+0x244>)
 800fe6e:	2003      	movs	r0, #3
 800fe70:	f002 fe26 	bl	8012ac0 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	4a30      	ldr	r2, [pc, #192]	@ (800ff38 <SGP_GetMeasurementValues+0x260>)
 800fe78:	4928      	ldr	r1, [pc, #160]	@ (800ff1c <SGP_GetMeasurementValues+0x244>)
 800fe7a:	2003      	movs	r0, #3
 800fe7c:	f002 fe20 	bl	8012ac0 <CreateLine>
 800fe80:	e006      	b.n	800fe90 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800fe82:	4b2b      	ldr	r3, [pc, #172]	@ (800ff30 <SGP_GetMeasurementValues+0x258>)
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	2b0b      	cmp	r3, #11
 800fe88:	d102      	bne.n	800fe90 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800fe8a:	4b29      	ldr	r3, [pc, #164]	@ (800ff30 <SGP_GetMeasurementValues+0x258>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	0018      	movs	r0, r3
 800fe96:	f001 fdbb 	bl	8011a10 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800fe9a:	4b22      	ldr	r3, [pc, #136]	@ (800ff24 <SGP_GetMeasurementValues+0x24c>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800fea0:	4b13      	ldr	r3, [pc, #76]	@ (800fef0 <SGP_GetMeasurementValues+0x218>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800fea6:	4b11      	ldr	r3, [pc, #68]	@ (800feec <SGP_GetMeasurementValues+0x214>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	701a      	strb	r2, [r3, #0]
      return true;
 800feac:	2301      	movs	r3, #1
 800feae:	e017      	b.n	800fee0 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800feb0:	f7ff fef6 	bl	800fca0 <SGP_MeasurementDone>
 800feb4:	1e03      	subs	r3, r0, #0
 800feb6:	d012      	beq.n	800fede <SGP_GetMeasurementValues+0x206>
 800feb8:	4b0b      	ldr	r3, [pc, #44]	@ (800fee8 <SGP_GetMeasurementValues+0x210>)
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00e      	beq.n	800fede <SGP_GetMeasurementValues+0x206>
 800fec0:	4b0f      	ldr	r3, [pc, #60]	@ (800ff00 <SGP_GetMeasurementValues+0x228>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00a      	beq.n	800fede <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800fec8:	4a1c      	ldr	r2, [pc, #112]	@ (800ff3c <SGP_GetMeasurementValues+0x264>)
 800feca:	4b14      	ldr	r3, [pc, #80]	@ (800ff1c <SGP_GetMeasurementValues+0x244>)
 800fecc:	0019      	movs	r1, r3
 800fece:	2003      	movs	r0, #3
 800fed0:	f002 fdf6 	bl	8012ac0 <CreateLine>
    SGP_StartMeasurement();
 800fed4:	f7ff fe90 	bl	800fbf8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800fed8:	4b04      	ldr	r3, [pc, #16]	@ (800feec <SGP_GetMeasurementValues+0x214>)
 800feda:	2200      	movs	r2, #0
 800fedc:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	0018      	movs	r0, r3
 800fee2:	46bd      	mov	sp, r7
 800fee4:	b005      	add	sp, #20
 800fee6:	bd90      	pop	{r4, r7, pc}
 800fee8:	20000f24 	.word	0x20000f24
 800feec:	20000fd1 	.word	0x20000fd1
 800fef0:	20000fd0 	.word	0x20000fd0
 800fef4:	200000b0 	.word	0x200000b0
 800fef8:	200000c4 	.word	0x200000c4
 800fefc:	200000a8 	.word	0x200000a8
 800ff00:	20000f25 	.word	0x20000f25
 800ff04:	20000f14 	.word	0x20000f14
 800ff08:	0802c860 	.word	0x0802c860
 800ff0c:	0802c888 	.word	0x0802c888
 800ff10:	0802c88c 	.word	0x0802c88c
 800ff14:	0802c8ac 	.word	0x0802c8ac
 800ff18:	0802c8b0 	.word	0x0802c8b0
 800ff1c:	0802c8d0 	.word	0x0802c8d0
 800ff20:	200000c0 	.word	0x200000c0
 800ff24:	20000f1d 	.word	0x20000f1d
 800ff28:	200000ba 	.word	0x200000ba
 800ff2c:	20000f28 	.word	0x20000f28
 800ff30:	20000f1e 	.word	0x20000f1e
 800ff34:	0802c8d4 	.word	0x0802c8d4
 800ff38:	0802c8f0 	.word	0x0802c8f0
 800ff3c:	0802c90c 	.word	0x0802c90c

0800ff40 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800ff46:	4b1a      	ldr	r3, [pc, #104]	@ (800ffb0 <SGP_DeviceConnected+0x70>)
 800ff48:	2202      	movs	r2, #2
 800ff4a:	0019      	movs	r1, r3
 800ff4c:	2059      	movs	r0, #89	@ 0x59
 800ff4e:	f7ff fde7 	bl	800fb20 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800ff52:	2001      	movs	r0, #1
 800ff54:	f003 faf4 	bl	8013540 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800ff58:	4b16      	ldr	r3, [pc, #88]	@ (800ffb4 <SGP_DeviceConnected+0x74>)
 800ff5a:	2209      	movs	r2, #9
 800ff5c:	0019      	movs	r1, r3
 800ff5e:	2059      	movs	r0, #89	@ 0x59
 800ff60:	f7ff fdc0 	bl	800fae4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800ff64:	1dfb      	adds	r3, r7, #7
 800ff66:	2200      	movs	r2, #0
 800ff68:	701a      	strb	r2, [r3, #0]
 800ff6a:	e011      	b.n	800ff90 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800ff6c:	1dfb      	adds	r3, r7, #7
 800ff6e:	7818      	ldrb	r0, [r3, #0]
 800ff70:	1dfb      	adds	r3, r7, #7
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	4a0f      	ldr	r2, [pc, #60]	@ (800ffb4 <SGP_DeviceConnected+0x74>)
 800ff76:	5cd3      	ldrb	r3, [r2, r3]
 800ff78:	4a0f      	ldr	r2, [pc, #60]	@ (800ffb8 <SGP_DeviceConnected+0x78>)
 800ff7a:	4910      	ldr	r1, [pc, #64]	@ (800ffbc <SGP_DeviceConnected+0x7c>)
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	0003      	movs	r3, r0
 800ff80:	2002      	movs	r0, #2
 800ff82:	f002 fd9d 	bl	8012ac0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800ff86:	1dfb      	adds	r3, r7, #7
 800ff88:	781a      	ldrb	r2, [r3, #0]
 800ff8a:	1dfb      	adds	r3, r7, #7
 800ff8c:	3201      	adds	r2, #1
 800ff8e:	701a      	strb	r2, [r3, #0]
 800ff90:	1dfb      	adds	r3, r7, #7
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b08      	cmp	r3, #8
 800ff96:	d9e9      	bls.n	800ff6c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800ff98:	4b06      	ldr	r3, [pc, #24]	@ (800ffb4 <SGP_DeviceConnected+0x74>)
 800ff9a:	2203      	movs	r2, #3
 800ff9c:	2109      	movs	r1, #9
 800ff9e:	0018      	movs	r0, r3
 800ffa0:	f000 f80e 	bl	800ffc0 <CheckCRC>
 800ffa4:	0003      	movs	r3, r0
}
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	b002      	add	sp, #8
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	46c0      	nop			@ (mov r8, r8)
 800ffb0:	200000a4 	.word	0x200000a4
 800ffb4:	20000f14 	.word	0x20000f14
 800ffb8:	0802c92c 	.word	0x0802c92c
 800ffbc:	0802c8ac 	.word	0x0802c8ac

0800ffc0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800ffc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc2:	b08f      	sub	sp, #60	@ 0x3c
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6278      	str	r0, [r7, #36]	@ 0x24
 800ffc8:	0008      	movs	r0, r1
 800ffca:	0011      	movs	r1, r2
 800ffcc:	2323      	movs	r3, #35	@ 0x23
 800ffce:	18fb      	adds	r3, r7, r3
 800ffd0:	1c02      	adds	r2, r0, #0
 800ffd2:	701a      	strb	r2, [r3, #0]
 800ffd4:	2322      	movs	r3, #34	@ 0x22
 800ffd6:	18fb      	adds	r3, r7, r3
 800ffd8:	1c0a      	adds	r2, r1, #0
 800ffda:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ffdc:	2317      	movs	r3, #23
 800ffde:	2220      	movs	r2, #32
 800ffe0:	189b      	adds	r3, r3, r2
 800ffe2:	19db      	adds	r3, r3, r7
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	701a      	strb	r2, [r3, #0]
 800ffe8:	e09f      	b.n	801012a <CheckCRC+0x16a>
 800ffea:	466b      	mov	r3, sp
 800ffec:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800ffee:	2322      	movs	r3, #34	@ 0x22
 800fff0:	18fb      	adds	r3, r7, r3
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	001a      	movs	r2, r3
 800fff6:	3a01      	subs	r2, #1
 800fff8:	633a      	str	r2, [r7, #48]	@ 0x30
 800fffa:	60bb      	str	r3, [r7, #8]
 800fffc:	2200      	movs	r2, #0
 800fffe:	60fa      	str	r2, [r7, #12]
 8010000:	68b8      	ldr	r0, [r7, #8]
 8010002:	68f9      	ldr	r1, [r7, #12]
 8010004:	0002      	movs	r2, r0
 8010006:	0f52      	lsrs	r2, r2, #29
 8010008:	000c      	movs	r4, r1
 801000a:	00e4      	lsls	r4, r4, #3
 801000c:	61fc      	str	r4, [r7, #28]
 801000e:	69fc      	ldr	r4, [r7, #28]
 8010010:	4314      	orrs	r4, r2
 8010012:	61fc      	str	r4, [r7, #28]
 8010014:	0002      	movs	r2, r0
 8010016:	00d2      	lsls	r2, r2, #3
 8010018:	61ba      	str	r2, [r7, #24]
 801001a:	603b      	str	r3, [r7, #0]
 801001c:	2200      	movs	r2, #0
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	6838      	ldr	r0, [r7, #0]
 8010022:	6879      	ldr	r1, [r7, #4]
 8010024:	0002      	movs	r2, r0
 8010026:	0f52      	lsrs	r2, r2, #29
 8010028:	000c      	movs	r4, r1
 801002a:	00e4      	lsls	r4, r4, #3
 801002c:	617c      	str	r4, [r7, #20]
 801002e:	697c      	ldr	r4, [r7, #20]
 8010030:	4314      	orrs	r4, r2
 8010032:	617c      	str	r4, [r7, #20]
 8010034:	0002      	movs	r2, r0
 8010036:	00d2      	lsls	r2, r2, #3
 8010038:	613a      	str	r2, [r7, #16]
 801003a:	3307      	adds	r3, #7
 801003c:	08db      	lsrs	r3, r3, #3
 801003e:	00db      	lsls	r3, r3, #3
 8010040:	466a      	mov	r2, sp
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	469d      	mov	sp, r3
 8010046:	466b      	mov	r3, sp
 8010048:	3300      	adds	r3, #0
 801004a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 801004c:	2316      	movs	r3, #22
 801004e:	2220      	movs	r2, #32
 8010050:	189b      	adds	r3, r3, r2
 8010052:	19db      	adds	r3, r3, r7
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
 8010058:	e01e      	b.n	8010098 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801005a:	2317      	movs	r3, #23
 801005c:	2220      	movs	r2, #32
 801005e:	189b      	adds	r3, r3, r2
 8010060:	19db      	adds	r3, r3, r7
 8010062:	781a      	ldrb	r2, [r3, #0]
 8010064:	2116      	movs	r1, #22
 8010066:	2320      	movs	r3, #32
 8010068:	18cb      	adds	r3, r1, r3
 801006a:	19db      	adds	r3, r3, r7
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	18d3      	adds	r3, r2, r3
 8010070:	001a      	movs	r2, r3
 8010072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010074:	189a      	adds	r2, r3, r2
 8010076:	0008      	movs	r0, r1
 8010078:	2320      	movs	r3, #32
 801007a:	18cb      	adds	r3, r1, r3
 801007c:	19db      	adds	r3, r3, r7
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	7811      	ldrb	r1, [r2, #0]
 8010082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010084:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8010086:	2320      	movs	r3, #32
 8010088:	18c3      	adds	r3, r0, r3
 801008a:	19db      	adds	r3, r3, r7
 801008c:	781a      	ldrb	r2, [r3, #0]
 801008e:	2320      	movs	r3, #32
 8010090:	18c3      	adds	r3, r0, r3
 8010092:	19db      	adds	r3, r3, r7
 8010094:	3201      	adds	r2, #1
 8010096:	701a      	strb	r2, [r3, #0]
 8010098:	2316      	movs	r3, #22
 801009a:	2220      	movs	r2, #32
 801009c:	189b      	adds	r3, r3, r2
 801009e:	19da      	adds	r2, r3, r7
 80100a0:	2322      	movs	r3, #34	@ 0x22
 80100a2:	18fb      	adds	r3, r7, r3
 80100a4:	7812      	ldrb	r2, [r2, #0]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d3d6      	bcc.n	801005a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80100ac:	2417      	movs	r4, #23
 80100ae:	2320      	movs	r3, #32
 80100b0:	18e3      	adds	r3, r4, r3
 80100b2:	19db      	adds	r3, r3, r7
 80100b4:	781a      	ldrb	r2, [r3, #0]
 80100b6:	2322      	movs	r3, #34	@ 0x22
 80100b8:	18fb      	adds	r3, r7, r3
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	18d3      	adds	r3, r2, r3
 80100be:	3b01      	subs	r3, #1
 80100c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100c2:	18d2      	adds	r2, r2, r3
 80100c4:	250b      	movs	r5, #11
 80100c6:	2320      	movs	r3, #32
 80100c8:	18eb      	adds	r3, r5, r3
 80100ca:	19db      	adds	r3, r3, r7
 80100cc:	7812      	ldrb	r2, [r2, #0]
 80100ce:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80100d0:	2322      	movs	r3, #34	@ 0x22
 80100d2:	18fb      	adds	r3, r7, r3
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	3b01      	subs	r3, #1
 80100d8:	b2da      	uxtb	r2, r3
 80100da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100dc:	0011      	movs	r1, r2
 80100de:	0018      	movs	r0, r3
 80100e0:	f000 f838 	bl	8010154 <CalculateCRC>
 80100e4:	0003      	movs	r3, r0
 80100e6:	001a      	movs	r2, r3
 80100e8:	2320      	movs	r3, #32
 80100ea:	18eb      	adds	r3, r5, r3
 80100ec:	19db      	adds	r3, r3, r7
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d00c      	beq.n	801010e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80100f4:	2320      	movs	r3, #32
 80100f6:	18e3      	adds	r3, r4, r3
 80100f8:	19db      	adds	r3, r3, r7
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	3301      	adds	r3, #1
 80100fe:	4a13      	ldr	r2, [pc, #76]	@ (801014c <CheckCRC+0x18c>)
 8010100:	4913      	ldr	r1, [pc, #76]	@ (8010150 <CheckCRC+0x190>)
 8010102:	2001      	movs	r0, #1
 8010104:	f002 fcdc 	bl	8012ac0 <CreateLine>
      return false;
 8010108:	2300      	movs	r3, #0
 801010a:	46b5      	mov	sp, r6
 801010c:	e019      	b.n	8010142 <CheckCRC+0x182>
 801010e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010110:	2217      	movs	r2, #23
 8010112:	2320      	movs	r3, #32
 8010114:	18d3      	adds	r3, r2, r3
 8010116:	19db      	adds	r3, r3, r7
 8010118:	2120      	movs	r1, #32
 801011a:	1852      	adds	r2, r2, r1
 801011c:	19d1      	adds	r1, r2, r7
 801011e:	2222      	movs	r2, #34	@ 0x22
 8010120:	18ba      	adds	r2, r7, r2
 8010122:	7809      	ldrb	r1, [r1, #0]
 8010124:	7812      	ldrb	r2, [r2, #0]
 8010126:	188a      	adds	r2, r1, r2
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	2317      	movs	r3, #23
 801012c:	2220      	movs	r2, #32
 801012e:	189b      	adds	r3, r3, r2
 8010130:	19da      	adds	r2, r3, r7
 8010132:	2323      	movs	r3, #35	@ 0x23
 8010134:	18fb      	adds	r3, r7, r3
 8010136:	7812      	ldrb	r2, [r2, #0]
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	429a      	cmp	r2, r3
 801013c:	d200      	bcs.n	8010140 <CheckCRC+0x180>
 801013e:	e754      	b.n	800ffea <CheckCRC+0x2a>
    }
  }
  return true;
 8010140:	2301      	movs	r3, #1
}
 8010142:	0018      	movs	r0, r3
 8010144:	46bd      	mov	sp, r7
 8010146:	b00f      	add	sp, #60	@ 0x3c
 8010148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801014a:	46c0      	nop			@ (mov r8, r8)
 801014c:	0802c94c 	.word	0x0802c94c
 8010150:	0802c888 	.word	0x0802c888

08010154 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	000a      	movs	r2, r1
 801015e:	1cfb      	adds	r3, r7, #3
 8010160:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8010162:	230f      	movs	r3, #15
 8010164:	18fb      	adds	r3, r7, r3
 8010166:	22ff      	movs	r2, #255	@ 0xff
 8010168:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801016a:	230e      	movs	r3, #14
 801016c:	18fb      	adds	r3, r7, r3
 801016e:	2200      	movs	r2, #0
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	e037      	b.n	80101e4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010174:	230e      	movs	r3, #14
 8010176:	18fb      	adds	r3, r7, r3
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	18d3      	adds	r3, r2, r3
 801017e:	7819      	ldrb	r1, [r3, #0]
 8010180:	220f      	movs	r2, #15
 8010182:	18bb      	adds	r3, r7, r2
 8010184:	18ba      	adds	r2, r7, r2
 8010186:	7812      	ldrb	r2, [r2, #0]
 8010188:	404a      	eors	r2, r1
 801018a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 801018c:	230d      	movs	r3, #13
 801018e:	18fb      	adds	r3, r7, r3
 8010190:	2200      	movs	r2, #0
 8010192:	701a      	strb	r2, [r3, #0]
 8010194:	e01b      	b.n	80101ce <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8010196:	210f      	movs	r1, #15
 8010198:	187b      	adds	r3, r7, r1
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	b25b      	sxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	da09      	bge.n	80101b6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80101a2:	187b      	adds	r3, r7, r1
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	b25b      	sxtb	r3, r3
 80101aa:	2231      	movs	r2, #49	@ 0x31
 80101ac:	4053      	eors	r3, r2
 80101ae:	b25a      	sxtb	r2, r3
 80101b0:	187b      	adds	r3, r7, r1
 80101b2:	701a      	strb	r2, [r3, #0]
 80101b4:	e005      	b.n	80101c2 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80101b6:	230f      	movs	r3, #15
 80101b8:	18fa      	adds	r2, r7, r3
 80101ba:	18fb      	adds	r3, r7, r3
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	18db      	adds	r3, r3, r3
 80101c0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80101c2:	210d      	movs	r1, #13
 80101c4:	187b      	adds	r3, r7, r1
 80101c6:	781a      	ldrb	r2, [r3, #0]
 80101c8:	187b      	adds	r3, r7, r1
 80101ca:	3201      	adds	r2, #1
 80101cc:	701a      	strb	r2, [r3, #0]
 80101ce:	230d      	movs	r3, #13
 80101d0:	18fb      	adds	r3, r7, r3
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	2b07      	cmp	r3, #7
 80101d6:	d9de      	bls.n	8010196 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80101d8:	210e      	movs	r1, #14
 80101da:	187b      	adds	r3, r7, r1
 80101dc:	781a      	ldrb	r2, [r3, #0]
 80101de:	187b      	adds	r3, r7, r1
 80101e0:	3201      	adds	r2, #1
 80101e2:	701a      	strb	r2, [r3, #0]
 80101e4:	230e      	movs	r3, #14
 80101e6:	18fa      	adds	r2, r7, r3
 80101e8:	1cfb      	adds	r3, r7, #3
 80101ea:	7812      	ldrb	r2, [r2, #0]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d3c0      	bcc.n	8010174 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80101f2:	230f      	movs	r3, #15
 80101f4:	18fb      	adds	r3, r7, r3
 80101f6:	781b      	ldrb	r3, [r3, #0]
}
 80101f8:	0018      	movs	r0, r3
 80101fa:	46bd      	mov	sp, r7
 80101fc:	b004      	add	sp, #16
 80101fe:	bd80      	pop	{r7, pc}

08010200 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4936      	ldr	r1, [pc, #216]	@ (80102e8 <SGP_SetHT+0xe8>)
 8010210:	1c18      	adds	r0, r3, #0
 8010212:	f7f0 fb55 	bl	80008c0 <__aeabi_fadd>
 8010216:	1c03      	adds	r3, r0, #0
 8010218:	4934      	ldr	r1, [pc, #208]	@ (80102ec <SGP_SetHT+0xec>)
 801021a:	1c18      	adds	r0, r3, #0
 801021c:	f7f0 fcda 	bl	8000bd4 <__aeabi_fdiv>
 8010220:	1c03      	adds	r3, r0, #0
 8010222:	4933      	ldr	r1, [pc, #204]	@ (80102f0 <SGP_SetHT+0xf0>)
 8010224:	1c18      	adds	r0, r3, #0
 8010226:	f7f0 febb 	bl	8000fa0 <__aeabi_fmul>
 801022a:	1c03      	adds	r3, r0, #0
 801022c:	1c18      	adds	r0, r3, #0
 801022e:	f7f0 f9f5 	bl	800061c <__aeabi_f2uiz>
 8010232:	0003      	movs	r3, r0
 8010234:	b29a      	uxth	r2, r3
 8010236:	4b2f      	ldr	r3, [pc, #188]	@ (80102f4 <SGP_SetHT+0xf4>)
 8010238:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	492e      	ldr	r1, [pc, #184]	@ (80102f8 <SGP_SetHT+0xf8>)
 8010240:	1c18      	adds	r0, r3, #0
 8010242:	f7f0 fcc7 	bl	8000bd4 <__aeabi_fdiv>
 8010246:	1c03      	adds	r3, r0, #0
 8010248:	4929      	ldr	r1, [pc, #164]	@ (80102f0 <SGP_SetHT+0xf0>)
 801024a:	1c18      	adds	r0, r3, #0
 801024c:	f7f0 fea8 	bl	8000fa0 <__aeabi_fmul>
 8010250:	1c03      	adds	r3, r0, #0
 8010252:	1c18      	adds	r0, r3, #0
 8010254:	f7f0 f9e2 	bl	800061c <__aeabi_f2uiz>
 8010258:	0003      	movs	r3, r0
 801025a:	b29a      	uxth	r2, r3
 801025c:	4b27      	ldr	r3, [pc, #156]	@ (80102fc <SGP_SetHT+0xfc>)
 801025e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8010260:	4b26      	ldr	r3, [pc, #152]	@ (80102fc <SGP_SetHT+0xfc>)
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	0a1b      	lsrs	r3, r3, #8
 8010266:	b29b      	uxth	r3, r3
 8010268:	b2da      	uxtb	r2, r3
 801026a:	4b25      	ldr	r3, [pc, #148]	@ (8010300 <SGP_SetHT+0x100>)
 801026c:	709a      	strb	r2, [r3, #2]
 801026e:	4b24      	ldr	r3, [pc, #144]	@ (8010300 <SGP_SetHT+0x100>)
 8010270:	789a      	ldrb	r2, [r3, #2]
 8010272:	210c      	movs	r1, #12
 8010274:	187b      	adds	r3, r7, r1
 8010276:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8010278:	4b20      	ldr	r3, [pc, #128]	@ (80102fc <SGP_SetHT+0xfc>)
 801027a:	881b      	ldrh	r3, [r3, #0]
 801027c:	b2da      	uxtb	r2, r3
 801027e:	4b20      	ldr	r3, [pc, #128]	@ (8010300 <SGP_SetHT+0x100>)
 8010280:	70da      	strb	r2, [r3, #3]
 8010282:	4b1f      	ldr	r3, [pc, #124]	@ (8010300 <SGP_SetHT+0x100>)
 8010284:	78da      	ldrb	r2, [r3, #3]
 8010286:	187b      	adds	r3, r7, r1
 8010288:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 801028a:	187b      	adds	r3, r7, r1
 801028c:	2102      	movs	r1, #2
 801028e:	0018      	movs	r0, r3
 8010290:	f7ff ff60 	bl	8010154 <CalculateCRC>
 8010294:	0003      	movs	r3, r0
 8010296:	001a      	movs	r2, r3
 8010298:	4b19      	ldr	r3, [pc, #100]	@ (8010300 <SGP_SetHT+0x100>)
 801029a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 801029c:	4b15      	ldr	r3, [pc, #84]	@ (80102f4 <SGP_SetHT+0xf4>)
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	0a1b      	lsrs	r3, r3, #8
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	4b16      	ldr	r3, [pc, #88]	@ (8010300 <SGP_SetHT+0x100>)
 80102a8:	715a      	strb	r2, [r3, #5]
 80102aa:	4b15      	ldr	r3, [pc, #84]	@ (8010300 <SGP_SetHT+0x100>)
 80102ac:	795a      	ldrb	r2, [r3, #5]
 80102ae:	2108      	movs	r1, #8
 80102b0:	187b      	adds	r3, r7, r1
 80102b2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80102b4:	4b0f      	ldr	r3, [pc, #60]	@ (80102f4 <SGP_SetHT+0xf4>)
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	b2da      	uxtb	r2, r3
 80102ba:	4b11      	ldr	r3, [pc, #68]	@ (8010300 <SGP_SetHT+0x100>)
 80102bc:	719a      	strb	r2, [r3, #6]
 80102be:	4b10      	ldr	r3, [pc, #64]	@ (8010300 <SGP_SetHT+0x100>)
 80102c0:	799a      	ldrb	r2, [r3, #6]
 80102c2:	187b      	adds	r3, r7, r1
 80102c4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80102c6:	187b      	adds	r3, r7, r1
 80102c8:	2102      	movs	r1, #2
 80102ca:	0018      	movs	r0, r3
 80102cc:	f7ff ff42 	bl	8010154 <CalculateCRC>
 80102d0:	0003      	movs	r3, r0
 80102d2:	001a      	movs	r2, r3
 80102d4:	4b0a      	ldr	r3, [pc, #40]	@ (8010300 <SGP_SetHT+0x100>)
 80102d6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80102d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010304 <SGP_SetHT+0x104>)
 80102da:	2201      	movs	r2, #1
 80102dc:	701a      	strb	r2, [r3, #0]
}
 80102de:	46c0      	nop			@ (mov r8, r8)
 80102e0:	46bd      	mov	sp, r7
 80102e2:	b004      	add	sp, #16
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	46c0      	nop			@ (mov r8, r8)
 80102e8:	42340000 	.word	0x42340000
 80102ec:	432f0000 	.word	0x432f0000
 80102f0:	477fff00 	.word	0x477fff00
 80102f4:	20000fce 	.word	0x20000fce
 80102f8:	42c80000 	.word	0x42c80000
 80102fc:	20000fcc 	.word	0x20000fcc
 8010300:	200000b0 	.word	0x200000b0
 8010304:	20000fd0 	.word	0x20000fd0

08010308 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8010308:	b580      	push	{r7, lr}
 801030a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 801030c:	4a09      	ldr	r2, [pc, #36]	@ (8010334 <SGP_SoftReset+0x2c>)
 801030e:	4b0a      	ldr	r3, [pc, #40]	@ (8010338 <SGP_SoftReset+0x30>)
 8010310:	0019      	movs	r1, r3
 8010312:	2003      	movs	r0, #3
 8010314:	f002 fbd4 	bl	8012ac0 <CreateLine>
  SGP_TurnHeaterOff();
 8010318:	f7ff fcd0 	bl	800fcbc <SGP_TurnHeaterOff>
  HAL_Delay(10);
 801031c:	200a      	movs	r0, #10
 801031e:	f003 f90f 	bl	8013540 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010322:	4b06      	ldr	r3, [pc, #24]	@ (801033c <SGP_SoftReset+0x34>)
 8010324:	2202      	movs	r2, #2
 8010326:	0019      	movs	r1, r3
 8010328:	2059      	movs	r0, #89	@ 0x59
 801032a:	f7ff fbf9 	bl	800fb20 <WriteRegister>
}
 801032e:	46c0      	nop			@ (mov r8, r8)
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	0802c9f4 	.word	0x0802c9f4
 8010338:	0802c8d0 	.word	0x0802c8d0
 801033c:	200000b8 	.word	0x200000b8

08010340 <ResetVOCresult>:

void ResetVOCresult(void) {
 8010340:	b580      	push	{r7, lr}
 8010342:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8010344:	4b02      	ldr	r3, [pc, #8]	@ (8010350 <ResetVOCresult+0x10>)
 8010346:	2200      	movs	r2, #0
 8010348:	601a      	str	r2, [r3, #0]
}
 801034a:	46c0      	nop			@ (mov r8, r8)
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	20000fd4 	.word	0x20000fd4

08010354 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8010354:	b580      	push	{r7, lr}
 8010356:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8010358:	4b48      	ldr	r3, [pc, #288]	@ (801047c <SGP_Upkeep+0x128>)
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b07      	cmp	r3, #7
 801035e:	d900      	bls.n	8010362 <SGP_Upkeep+0xe>
 8010360:	e074      	b.n	801044c <SGP_Upkeep+0xf8>
 8010362:	009a      	lsls	r2, r3, #2
 8010364:	4b46      	ldr	r3, [pc, #280]	@ (8010480 <SGP_Upkeep+0x12c>)
 8010366:	18d3      	adds	r3, r2, r3
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 801036c:	4a45      	ldr	r2, [pc, #276]	@ (8010484 <SGP_Upkeep+0x130>)
 801036e:	4b46      	ldr	r3, [pc, #280]	@ (8010488 <SGP_Upkeep+0x134>)
 8010370:	0019      	movs	r1, r3
 8010372:	2003      	movs	r0, #3
 8010374:	f002 fba4 	bl	8012ac0 <CreateLine>
    break;
 8010378:	e07b      	b.n	8010472 <SGP_Upkeep+0x11e>

  case SGP_STATE_INIT:
    ResetVOCresult();
 801037a:	f7ff ffe1 	bl	8010340 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801037e:	4b3f      	ldr	r3, [pc, #252]	@ (801047c <SGP_Upkeep+0x128>)
 8010380:	2201      	movs	r2, #1
 8010382:	701a      	strb	r2, [r3, #0]
    break;
 8010384:	e075      	b.n	8010472 <SGP_Upkeep+0x11e>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8010386:	f7fc fc7b 	bl	800cc80 <getSensorLock>
 801038a:	1e03      	subs	r3, r0, #0
 801038c:	d000      	beq.n	8010390 <SGP_Upkeep+0x3c>
 801038e:	e069      	b.n	8010464 <SGP_Upkeep+0x110>
      break;
    }
    setSensorLock(SGP40);
 8010390:	2002      	movs	r0, #2
 8010392:	f7fc fc61 	bl	800cc58 <setSensorLock>
    SetMeasurementIndicator();
 8010396:	f001 f981 	bl	801169c <SetMeasurementIndicator>
    SGP_StartMeasurement();
 801039a:	f7ff fc2d 	bl	800fbf8 <SGP_StartMeasurement>
    setSensorLock(FREE);
 801039e:	2000      	movs	r0, #0
 80103a0:	f7fc fc5a 	bl	800cc58 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80103a4:	4b35      	ldr	r3, [pc, #212]	@ (801047c <SGP_Upkeep+0x128>)
 80103a6:	2202      	movs	r2, #2
 80103a8:	701a      	strb	r2, [r3, #0]
    break;
 80103aa:	e062      	b.n	8010472 <SGP_Upkeep+0x11e>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80103ac:	f7fc fc68 	bl	800cc80 <getSensorLock>
 80103b0:	1e03      	subs	r3, r0, #0
 80103b2:	d159      	bne.n	8010468 <SGP_Upkeep+0x114>
      break;
    }
    setSensorLock(SGP40);
 80103b4:	2002      	movs	r0, #2
 80103b6:	f7fc fc4f 	bl	800cc58 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80103ba:	4b34      	ldr	r3, [pc, #208]	@ (801048c <SGP_Upkeep+0x138>)
 80103bc:	0018      	movs	r0, r3
 80103be:	f7ff fc8b 	bl	800fcd8 <SGP_GetMeasurementValues>
 80103c2:	1e03      	subs	r3, r0, #0
 80103c4:	d002      	beq.n	80103cc <SGP_Upkeep+0x78>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80103c6:	4b2d      	ldr	r3, [pc, #180]	@ (801047c <SGP_Upkeep+0x128>)
 80103c8:	2203      	movs	r2, #3
 80103ca:	701a      	strb	r2, [r3, #0]
    }
    setSensorLock(FREE);
 80103cc:	2000      	movs	r0, #0
 80103ce:	f7fc fc43 	bl	800cc58 <setSensorLock>
    break;
 80103d2:	e04e      	b.n	8010472 <SGP_Upkeep+0x11e>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80103d4:	4b2d      	ldr	r3, [pc, #180]	@ (801048c <SGP_Upkeep+0x138>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	0018      	movs	r0, r3
 80103dc:	f7f4 f916 	bl	800460c <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80103e0:	4b26      	ldr	r3, [pc, #152]	@ (801047c <SGP_Upkeep+0x128>)
 80103e2:	2206      	movs	r2, #6
 80103e4:	701a      	strb	r2, [r3, #0]
    break;
 80103e6:	e044      	b.n	8010472 <SGP_Upkeep+0x11e>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80103e8:	4b24      	ldr	r3, [pc, #144]	@ (801047c <SGP_Upkeep+0x128>)
 80103ea:	2207      	movs	r2, #7
 80103ec:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 80103ee:	4b28      	ldr	r3, [pc, #160]	@ (8010490 <SGP_Upkeep+0x13c>)
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b03      	cmp	r3, #3
 80103f4:	d912      	bls.n	801041c <SGP_Upkeep+0xc8>
 80103f6:	4b27      	ldr	r3, [pc, #156]	@ (8010494 <SGP_Upkeep+0x140>)
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	2201      	movs	r2, #1
 80103fc:	4053      	eors	r3, r2
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00b      	beq.n	801041c <SGP_Upkeep+0xc8>
      // During startup take 12 samples
      if (sgpinitdone) {
 8010404:	4b24      	ldr	r3, [pc, #144]	@ (8010498 <SGP_Upkeep+0x144>)
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d004      	beq.n	8010416 <SGP_Upkeep+0xc2>
        SGP_SoftReset();
 801040c:	f7ff ff7c 	bl	8010308 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010410:	2000      	movs	r0, #0
 8010412:	f7fc f84f 	bl	800c4b4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8010416:	4b20      	ldr	r3, [pc, #128]	@ (8010498 <SGP_Upkeep+0x144>)
 8010418:	2201      	movs	r2, #1
 801041a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 801041c:	f003 f886 	bl	801352c <HAL_GetTick>
 8010420:	0003      	movs	r3, r0
 8010422:	22c8      	movs	r2, #200	@ 0xc8
 8010424:	0092      	lsls	r2, r2, #2
 8010426:	189a      	adds	r2, r3, r2
 8010428:	4b1c      	ldr	r3, [pc, #112]	@ (801049c <SGP_Upkeep+0x148>)
 801042a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 801042c:	f001 f94e 	bl	80116cc <ResetMeasurementIndicator>
  break;
 8010430:	e01f      	b.n	8010472 <SGP_Upkeep+0x11e>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8010432:	4b1a      	ldr	r3, [pc, #104]	@ (801049c <SGP_Upkeep+0x148>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	0018      	movs	r0, r3
 8010438:	f002 faec 	bl	8012a14 <TimestampIsReached>
 801043c:	1e03      	subs	r3, r0, #0
 801043e:	d015      	beq.n	801046c <SGP_Upkeep+0x118>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8010440:	f7ff fbc2 	bl	800fbc8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8010444:	4b0d      	ldr	r3, [pc, #52]	@ (801047c <SGP_Upkeep+0x128>)
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
    }
    break;
 801044a:	e00f      	b.n	801046c <SGP_Upkeep+0x118>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 801044c:	4b0b      	ldr	r3, [pc, #44]	@ (801047c <SGP_Upkeep+0x128>)
 801044e:	2200      	movs	r2, #0
 8010450:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8010452:	f7fc fc15 	bl	800cc80 <getSensorLock>
 8010456:	0003      	movs	r3, r0
 8010458:	2b02      	cmp	r3, #2
 801045a:	d109      	bne.n	8010470 <SGP_Upkeep+0x11c>
      setSensorLock(FREE);
 801045c:	2000      	movs	r0, #0
 801045e:	f7fc fbfb 	bl	800cc58 <setSensorLock>
    }
    break;
 8010462:	e005      	b.n	8010470 <SGP_Upkeep+0x11c>
      break;
 8010464:	46c0      	nop			@ (mov r8, r8)
 8010466:	e004      	b.n	8010472 <SGP_Upkeep+0x11e>
      break;
 8010468:	46c0      	nop			@ (mov r8, r8)
 801046a:	e002      	b.n	8010472 <SGP_Upkeep+0x11e>
    break;
 801046c:	46c0      	nop			@ (mov r8, r8)
 801046e:	e000      	b.n	8010472 <SGP_Upkeep+0x11e>
    break;
 8010470:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010472:	4b02      	ldr	r3, [pc, #8]	@ (801047c <SGP_Upkeep+0x128>)
 8010474:	781b      	ldrb	r3, [r3, #0]
}
 8010476:	0018      	movs	r0, r3
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	20000fd8 	.word	0x20000fd8
 8010480:	0802d23c 	.word	0x0802d23c
 8010484:	0802ca0c 	.word	0x0802ca0c
 8010488:	0802c8d0 	.word	0x0802c8d0
 801048c:	20000fd4 	.word	0x20000fd4
 8010490:	20000f1e 	.word	0x20000f1e
 8010494:	20001e75 	.word	0x20001e75
 8010498:	20000f08 	.word	0x20000f08
 801049c:	20000f20 	.word	0x20000f20

080104a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	0002      	movs	r2, r0
 80104a8:	1dfb      	adds	r3, r7, #7
 80104aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80104ac:	1dfb      	adds	r3, r7, #7
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80104b2:	d809      	bhi.n	80104c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80104b4:	1dfb      	adds	r3, r7, #7
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	001a      	movs	r2, r3
 80104ba:	231f      	movs	r3, #31
 80104bc:	401a      	ands	r2, r3
 80104be:	4b04      	ldr	r3, [pc, #16]	@ (80104d0 <__NVIC_EnableIRQ+0x30>)
 80104c0:	2101      	movs	r1, #1
 80104c2:	4091      	lsls	r1, r2
 80104c4:	000a      	movs	r2, r1
 80104c6:	601a      	str	r2, [r3, #0]
  }
}
 80104c8:	46c0      	nop			@ (mov r8, r8)
 80104ca:	46bd      	mov	sp, r7
 80104cc:	b002      	add	sp, #8
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	e000e100 	.word	0xe000e100

080104d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	0002      	movs	r2, r0
 80104dc:	1dfb      	adds	r3, r7, #7
 80104de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80104e0:	1dfb      	adds	r3, r7, #7
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80104e6:	d810      	bhi.n	801050a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80104e8:	1dfb      	adds	r3, r7, #7
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	001a      	movs	r2, r3
 80104ee:	231f      	movs	r3, #31
 80104f0:	4013      	ands	r3, r2
 80104f2:	4908      	ldr	r1, [pc, #32]	@ (8010514 <__NVIC_DisableIRQ+0x40>)
 80104f4:	2201      	movs	r2, #1
 80104f6:	409a      	lsls	r2, r3
 80104f8:	0013      	movs	r3, r2
 80104fa:	2280      	movs	r2, #128	@ 0x80
 80104fc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80104fe:	f3bf 8f4f 	dsb	sy
}
 8010502:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010504:	f3bf 8f6f 	isb	sy
}
 8010508:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 801050a:	46c0      	nop			@ (mov r8, r8)
 801050c:	46bd      	mov	sp, r7
 801050e:	b002      	add	sp, #8
 8010510:	bd80      	pop	{r7, pc}
 8010512:	46c0      	nop			@ (mov r8, r8)
 8010514:	e000e100 	.word	0xe000e100

08010518 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010518:	b5b0      	push	{r4, r5, r7, lr}
 801051a:	b088      	sub	sp, #32
 801051c:	af02      	add	r7, sp, #8
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	0008      	movs	r0, r1
 8010522:	0011      	movs	r1, r2
 8010524:	1cfb      	adds	r3, r7, #3
 8010526:	1c02      	adds	r2, r0, #0
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	1cbb      	adds	r3, r7, #2
 801052c:	1c0a      	adds	r2, r1, #0
 801052e:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010530:	4b5b      	ldr	r3, [pc, #364]	@ (80106a0 <getSoundData+0x188>)
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2201      	movs	r2, #1
 8010538:	4053      	eors	r3, r2
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d107      	bne.n	8010550 <getSoundData+0x38>
 8010540:	4b58      	ldr	r3, [pc, #352]	@ (80106a4 <getSoundData+0x18c>)
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2201      	movs	r2, #1
 8010548:	4053      	eors	r3, r2
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d001      	beq.n	8010554 <getSoundData+0x3c>
    {
        return false;
 8010550:	2300      	movs	r3, #0
 8010552:	e0a0      	b.n	8010696 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010554:	4b54      	ldr	r3, [pc, #336]	@ (80106a8 <getSoundData+0x190>)
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	d005      	beq.n	801056a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801055e:	4b53      	ldr	r3, [pc, #332]	@ (80106ac <getSoundData+0x194>)
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	b25b      	sxtb	r3, r3
 8010564:	0018      	movs	r0, r3
 8010566:	f7ff ffb5 	bl	80104d4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801056a:	f3bf 8f4f 	dsb	sy
}
 801056e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010570:	f3bf 8f6f 	isb	sy
}
 8010574:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010576:	1cfb      	adds	r3, r7, #3
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d04c      	beq.n	8010618 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 801057e:	4b4c      	ldr	r3, [pc, #304]	@ (80106b0 <getSoundData+0x198>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d11b      	bne.n	80105be <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010592:	2300      	movs	r3, #0
 8010594:	617b      	str	r3, [r7, #20]
 8010596:	e00e      	b.n	80105b6 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	18d3      	adds	r3, r2, r3
 801059e:	3302      	adds	r3, #2
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	18d3      	adds	r3, r2, r3
 80105aa:	3308      	adds	r3, #8
 80105ac:	2200      	movs	r2, #0
 80105ae:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	3301      	adds	r3, #1
 80105b4:	617b      	str	r3, [r7, #20]
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	2b05      	cmp	r3, #5
 80105ba:	d9ed      	bls.n	8010598 <getSoundData+0x80>
 80105bc:	e02c      	b.n	8010618 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	1c59      	adds	r1, r3, #1
 80105c4:	4b3b      	ldr	r3, [pc, #236]	@ (80106b4 <getSoundData+0x19c>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	4b3b      	ldr	r3, [pc, #236]	@ (80106b8 <getSoundData+0x1a0>)
 80105ca:	681c      	ldr	r4, [r3, #0]
 80105cc:	4b38      	ldr	r3, [pc, #224]	@ (80106b0 <getSoundData+0x198>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	0023      	movs	r3, r4
 80105d4:	f000 fde8 	bl	80111a8 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80105d8:	2300      	movs	r3, #0
 80105da:	613b      	str	r3, [r7, #16]
 80105dc:	e019      	b.n	8010612 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	18d3      	adds	r3, r2, r3
 80105e4:	1c98      	adds	r0, r3, #2
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	3308      	adds	r3, #8
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 80105ee:	4b33      	ldr	r3, [pc, #204]	@ (80106bc <getSoundData+0x1a4>)
 80105f0:	693a      	ldr	r2, [r7, #16]
 80105f2:	0092      	lsls	r2, r2, #2
 80105f4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 80105f6:	4b32      	ldr	r3, [pc, #200]	@ (80106c0 <getSoundData+0x1a8>)
 80105f8:	693a      	ldr	r2, [r7, #16]
 80105fa:	0092      	lsls	r2, r2, #2
 80105fc:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80105fe:	4b2c      	ldr	r3, [pc, #176]	@ (80106b0 <getSoundData+0x198>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	0013      	movs	r3, r2
 8010606:	0022      	movs	r2, r4
 8010608:	f000 fdce 	bl	80111a8 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	3301      	adds	r3, #1
 8010610:	613b      	str	r3, [r7, #16]
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	2b05      	cmp	r3, #5
 8010616:	d9e2      	bls.n	80105de <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010618:	1cbb      	adds	r3, r7, #2
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d028      	beq.n	8010672 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010620:	240e      	movs	r4, #14
 8010622:	193b      	adds	r3, r7, r4
 8010624:	2200      	movs	r2, #0
 8010626:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010628:	250d      	movs	r5, #13
 801062a:	197b      	adds	r3, r7, r5
 801062c:	2200      	movs	r2, #0
 801062e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010630:	4b24      	ldr	r3, [pc, #144]	@ (80106c4 <getSoundData+0x1ac>)
 8010632:	6818      	ldr	r0, [r3, #0]
 8010634:	4924      	ldr	r1, [pc, #144]	@ (80106c8 <getSoundData+0x1b0>)
 8010636:	197b      	adds	r3, r7, r5
 8010638:	193a      	adds	r2, r7, r4
 801063a:	f000 fe59 	bl	80112f0 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 801063e:	193b      	adds	r3, r7, r4
 8010640:	881a      	ldrh	r2, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	21ff      	movs	r1, #255	@ 0xff
 8010646:	4011      	ands	r1, r2
 8010648:	000c      	movs	r4, r1
 801064a:	7b99      	ldrb	r1, [r3, #14]
 801064c:	2000      	movs	r0, #0
 801064e:	4001      	ands	r1, r0
 8010650:	1c08      	adds	r0, r1, #0
 8010652:	1c21      	adds	r1, r4, #0
 8010654:	4301      	orrs	r1, r0
 8010656:	7399      	strb	r1, [r3, #14]
 8010658:	0a12      	lsrs	r2, r2, #8
 801065a:	b290      	uxth	r0, r2
 801065c:	7bda      	ldrb	r2, [r3, #15]
 801065e:	2100      	movs	r1, #0
 8010660:	400a      	ands	r2, r1
 8010662:	1c11      	adds	r1, r2, #0
 8010664:	1c02      	adds	r2, r0, #0
 8010666:	430a      	orrs	r2, r1
 8010668:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801066a:	197b      	adds	r3, r7, r5
 801066c:	781a      	ldrb	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010672:	f000 f86f 	bl	8010754 <micSettlingComplete>
 8010676:	0003      	movs	r3, r0
 8010678:	001a      	movs	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 801067e:	4b0a      	ldr	r3, [pc, #40]	@ (80106a8 <getSoundData+0x190>)
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d005      	beq.n	8010694 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010688:	4b08      	ldr	r3, [pc, #32]	@ (80106ac <getSoundData+0x194>)
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	b25b      	sxtb	r3, r3
 801068e:	0018      	movs	r0, r3
 8010690:	f7ff ff06 	bl	80104a0 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010694:	2301      	movs	r3, #1
}
 8010696:	0018      	movs	r0, r3
 8010698:	46bd      	mov	sp, r7
 801069a:	b006      	add	sp, #24
 801069c:	bdb0      	pop	{r4, r5, r7, pc}
 801069e:	46c0      	nop			@ (mov r8, r8)
 80106a0:	20000fda 	.word	0x20000fda
 80106a4:	20000fdd 	.word	0x20000fdd
 80106a8:	20000fdc 	.word	0x20000fdc
 80106ac:	20001a2c 	.word	0x20001a2c
 80106b0:	20001a68 	.word	0x20001a68
 80106b4:	20001a30 	.word	0x20001a30
 80106b8:	20001a34 	.word	0x20001a34
 80106bc:	20001a38 	.word	0x20001a38
 80106c0:	20001a50 	.word	0x20001a50
 80106c4:	20000fe4 	.word	0x20000fe4
 80106c8:	3b5c7333 	.word	0x3b5c7333

080106cc <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
 80106d8:	001a      	movs	r2, r3
 80106da:	1cfb      	adds	r3, r7, #3
 80106dc:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80106de:	4b09      	ldr	r3, [pc, #36]	@ (8010704 <soundInit+0x38>)
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80106e4:	4b08      	ldr	r3, [pc, #32]	@ (8010708 <soundInit+0x3c>)
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80106ea:	4b08      	ldr	r3, [pc, #32]	@ (801070c <soundInit+0x40>)
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 80106f0:	4b07      	ldr	r3, [pc, #28]	@ (8010710 <soundInit+0x44>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	569a      	ldrsb	r2, [r3, r2]
 80106f6:	4b06      	ldr	r3, [pc, #24]	@ (8010710 <soundInit+0x44>)
 80106f8:	701a      	strb	r2, [r3, #0]

    return true;
 80106fa:	2301      	movs	r3, #1
}
 80106fc:	0018      	movs	r0, r3
 80106fe:	46bd      	mov	sp, r7
 8010700:	b004      	add	sp, #16
 8010702:	bd80      	pop	{r7, pc}
 8010704:	20001a24 	.word	0x20001a24
 8010708:	20001a20 	.word	0x20001a20
 801070c:	20001a28 	.word	0x20001a28
 8010710:	20001a2c 	.word	0x20001a2c

08010714 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010718:	4b02      	ldr	r3, [pc, #8]	@ (8010724 <clearMaximumAmplitude+0x10>)
 801071a:	2200      	movs	r2, #0
 801071c:	601a      	str	r2, [r3, #0]
}
 801071e:	46c0      	nop			@ (mov r8, r8)
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	20000fe4 	.word	0x20000fe4

08010728 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 801072c:	4b08      	ldr	r3, [pc, #32]	@ (8010750 <startMicSettlingPeriod+0x28>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2200      	movs	r2, #0
 8010734:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8010736:	4b06      	ldr	r3, [pc, #24]	@ (8010750 <startMicSettlingPeriod+0x28>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	0018      	movs	r0, r3
 801073c:	f00a ff52 	bl	801b5e4 <HAL_TIM_Base_Start>
 8010740:	1e03      	subs	r3, r0, #0
 8010742:	d001      	beq.n	8010748 <startMicSettlingPeriod+0x20>
    {
        return false;
 8010744:	2300      	movs	r3, #0
 8010746:	e000      	b.n	801074a <startMicSettlingPeriod+0x22>
    }
    return true;
 8010748:	2301      	movs	r3, #1
}
 801074a:	0018      	movs	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	20001a20 	.word	0x20001a20

08010754 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 801075a:	4b0e      	ldr	r3, [pc, #56]	@ (8010794 <micSettlingComplete+0x40>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	2201      	movs	r2, #1
 8010764:	401a      	ands	r2, r3
 8010766:	1dfb      	adds	r3, r7, #7
 8010768:	3a01      	subs	r2, #1
 801076a:	4251      	negs	r1, r2
 801076c:	414a      	adcs	r2, r1
 801076e:	701a      	strb	r2, [r3, #0]
    if (complete)
 8010770:	1dfb      	adds	r3, r7, #7
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d007      	beq.n	8010788 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8010778:	4b06      	ldr	r3, [pc, #24]	@ (8010794 <micSettlingComplete+0x40>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	0018      	movs	r0, r3
 801077e:	f00a ff7b 	bl	801b678 <HAL_TIM_Base_Stop>
      DataReady = true;
 8010782:	4b05      	ldr	r3, [pc, #20]	@ (8010798 <micSettlingComplete+0x44>)
 8010784:	2201      	movs	r2, #1
 8010786:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8010788:	1dfb      	adds	r3, r7, #7
 801078a:	781b      	ldrb	r3, [r3, #0]
}
 801078c:	0018      	movs	r0, r3
 801078e:	46bd      	mov	sp, r7
 8010790:	b002      	add	sp, #8
 8010792:	bd80      	pop	{r7, pc}
 8010794:	20001a20 	.word	0x20001a20
 8010798:	20000fd9 	.word	0x20000fd9

0801079c <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	0002      	movs	r2, r0
 80107a4:	1dfb      	adds	r3, r7, #7
 80107a6:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80107a8:	4b29      	ldr	r3, [pc, #164]	@ (8010850 <enableMicrophone+0xb4>)
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	1dfa      	adds	r2, r7, #7
 80107b0:	7812      	ldrb	r2, [r2, #0]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d101      	bne.n	80107ba <enableMicrophone+0x1e>
    {
        return true;
 80107b6:	2301      	movs	r3, #1
 80107b8:	e045      	b.n	8010846 <enableMicrophone+0xaa>
    }
    if (bEnable)
 80107ba:	1dfb      	adds	r3, r7, #7
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d025      	beq.n	801080e <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80107c2:	f7ff ffb1 	bl	8010728 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80107c6:	4b23      	ldr	r3, [pc, #140]	@ (8010854 <enableMicrophone+0xb8>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2280      	movs	r2, #128	@ 0x80
 80107cc:	0092      	lsls	r2, r2, #2
 80107ce:	4922      	ldr	r1, [pc, #136]	@ (8010858 <enableMicrophone+0xbc>)
 80107d0:	0018      	movs	r0, r3
 80107d2:	f007 f971 	bl	8017ab8 <HAL_I2S_Receive_DMA>
 80107d6:	1e03      	subs	r3, r0, #0
 80107d8:	d001      	beq.n	80107de <enableMicrophone+0x42>
        {
            return false;
 80107da:	2300      	movs	r3, #0
 80107dc:	e033      	b.n	8010846 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80107de:	f7ff ff99 	bl	8010714 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 80107e2:	4b1e      	ldr	r3, [pc, #120]	@ (801085c <enableMicrophone+0xc0>)
 80107e4:	2200      	movs	r2, #0
 80107e6:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80107e8:	4b1d      	ldr	r3, [pc, #116]	@ (8010860 <enableMicrophone+0xc4>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	b25b      	sxtb	r3, r3
 80107ee:	0018      	movs	r0, r3
 80107f0:	f7ff fe56 	bl	80104a0 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 80107f4:	4b1b      	ldr	r3, [pc, #108]	@ (8010864 <enableMicrophone+0xc8>)
 80107f6:	2201      	movs	r2, #1
 80107f8:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 80107fa:	4b15      	ldr	r3, [pc, #84]	@ (8010850 <enableMicrophone+0xb4>)
 80107fc:	2201      	movs	r2, #1
 80107fe:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010800:	4b19      	ldr	r3, [pc, #100]	@ (8010868 <enableMicrophone+0xcc>)
 8010802:	2200      	movs	r2, #0
 8010804:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010806:	4b19      	ldr	r3, [pc, #100]	@ (801086c <enableMicrophone+0xd0>)
 8010808:	2200      	movs	r2, #0
 801080a:	701a      	strb	r2, [r3, #0]
 801080c:	e01a      	b.n	8010844 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801080e:	4b14      	ldr	r3, [pc, #80]	@ (8010860 <enableMicrophone+0xc4>)
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	b25b      	sxtb	r3, r3
 8010814:	0018      	movs	r0, r3
 8010816:	f7ff fe5d 	bl	80104d4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 801081a:	4b12      	ldr	r3, [pc, #72]	@ (8010864 <enableMicrophone+0xc8>)
 801081c:	2200      	movs	r2, #0
 801081e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010820:	4b11      	ldr	r3, [pc, #68]	@ (8010868 <enableMicrophone+0xcc>)
 8010822:	2200      	movs	r2, #0
 8010824:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010826:	4b11      	ldr	r3, [pc, #68]	@ (801086c <enableMicrophone+0xd0>)
 8010828:	2200      	movs	r2, #0
 801082a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 801082c:	4b09      	ldr	r3, [pc, #36]	@ (8010854 <enableMicrophone+0xb8>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	0018      	movs	r0, r3
 8010832:	f007 fa03 	bl	8017c3c <HAL_I2S_DMAStop>
 8010836:	1e03      	subs	r3, r0, #0
 8010838:	d001      	beq.n	801083e <enableMicrophone+0xa2>
        {
            return false;
 801083a:	2300      	movs	r3, #0
 801083c:	e003      	b.n	8010846 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 801083e:	4b04      	ldr	r3, [pc, #16]	@ (8010850 <enableMicrophone+0xb4>)
 8010840:	2200      	movs	r2, #0
 8010842:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8010844:	2301      	movs	r3, #1
}
 8010846:	0018      	movs	r0, r3
 8010848:	46bd      	mov	sp, r7
 801084a:	b002      	add	sp, #8
 801084c:	bd80      	pop	{r7, pc}
 801084e:	46c0      	nop			@ (mov r8, r8)
 8010850:	20000fda 	.word	0x20000fda
 8010854:	20001a24 	.word	0x20001a24
 8010858:	20001020 	.word	0x20001020
 801085c:	20000fe0 	.word	0x20000fe0
 8010860:	20001a2c 	.word	0x20001a2c
 8010864:	20000fdc 	.word	0x20000fdc
 8010868:	20000fdb 	.word	0x20000fdb
 801086c:	20000fdd 	.word	0x20000fdd

08010870 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8010874:	4b0c      	ldr	r3, [pc, #48]	@ (80108a8 <startSPLcalculation+0x38>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	b2db      	uxtb	r3, r3
 801087a:	2201      	movs	r2, #1
 801087c:	4053      	eors	r3, r2
 801087e:	b2db      	uxtb	r3, r3
 8010880:	2b00      	cmp	r3, #0
 8010882:	d001      	beq.n	8010888 <startSPLcalculation+0x18>
    {
        return false;
 8010884:	2300      	movs	r3, #0
 8010886:	e00c      	b.n	80108a2 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8010888:	4b08      	ldr	r3, [pc, #32]	@ (80108ac <startSPLcalculation+0x3c>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <startSPLcalculation+0x26>
    {
        return true;
 8010892:	2301      	movs	r3, #1
 8010894:	e005      	b.n	80108a2 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8010896:	f000 fb63 	bl	8010f60 <resetSPLstate>
    SPLcalcEnabled = true;
 801089a:	4b04      	ldr	r3, [pc, #16]	@ (80108ac <startSPLcalculation+0x3c>)
 801089c:	2201      	movs	r2, #1
 801089e:	701a      	strb	r2, [r3, #0]
    return true;
 80108a0:	2301      	movs	r3, #1
}
 80108a2:	0018      	movs	r0, r3
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	20000fda 	.word	0x20000fda
 80108ac:	20000fdb 	.word	0x20000fdb

080108b0 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80108b8:	4b05      	ldr	r3, [pc, #20]	@ (80108d0 <HAL_I2S_RxHalfCpltCallback+0x20>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d102      	bne.n	80108c8 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 80108c2:	2000      	movs	r0, #0
 80108c4:	f000 f81a 	bl	80108fc <processHalfDMAbuffer>
  }
}
 80108c8:	46c0      	nop			@ (mov r8, r8)
 80108ca:	46bd      	mov	sp, r7
 80108cc:	b002      	add	sp, #8
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	20001a24 	.word	0x20001a24

080108d4 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80108dc:	4b06      	ldr	r3, [pc, #24]	@ (80108f8 <HAL_I2S_RxCpltCallback+0x24>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d104      	bne.n	80108f0 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 80108e6:	2380      	movs	r3, #128	@ 0x80
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	0018      	movs	r0, r3
 80108ec:	f000 f806 	bl	80108fc <processHalfDMAbuffer>
  }
}
 80108f0:	46c0      	nop			@ (mov r8, r8)
 80108f2:	46bd      	mov	sp, r7
 80108f4:	b002      	add	sp, #8
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	20001a24 	.word	0x20001a24

080108fc <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	005a      	lsls	r2, r3, #1
 8010908:	4b15      	ldr	r3, [pc, #84]	@ (8010960 <processHalfDMAbuffer+0x64>)
 801090a:	18d3      	adds	r3, r2, r3
 801090c:	4a15      	ldr	r2, [pc, #84]	@ (8010964 <processHalfDMAbuffer+0x68>)
 801090e:	2180      	movs	r1, #128	@ 0x80
 8010910:	0089      	lsls	r1, r1, #2
 8010912:	0018      	movs	r0, r3
 8010914:	f000 fd35 	bl	8011382 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8010918:	4b13      	ldr	r3, [pc, #76]	@ (8010968 <processHalfDMAbuffer+0x6c>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	425a      	negs	r2, r3
 801091e:	4153      	adcs	r3, r2
 8010920:	b2da      	uxtb	r2, r3
 8010922:	4b11      	ldr	r3, [pc, #68]	@ (8010968 <processHalfDMAbuffer+0x6c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2109      	movs	r1, #9
 8010928:	4299      	cmp	r1, r3
 801092a:	419b      	sbcs	r3, r3
 801092c:	425b      	negs	r3, r3
 801092e:	b2db      	uxtb	r3, r3
 8010930:	480c      	ldr	r0, [pc, #48]	@ (8010964 <processHalfDMAbuffer+0x68>)
 8010932:	2180      	movs	r1, #128	@ 0x80
 8010934:	f000 fb46 	bl	8010fc4 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8010938:	4b0b      	ldr	r3, [pc, #44]	@ (8010968 <processHalfDMAbuffer+0x6c>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b09      	cmp	r3, #9
 801093e:	d804      	bhi.n	801094a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8010940:	4b09      	ldr	r3, [pc, #36]	@ (8010968 <processHalfDMAbuffer+0x6c>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	1c5a      	adds	r2, r3, #1
 8010946:	4b08      	ldr	r3, [pc, #32]	@ (8010968 <processHalfDMAbuffer+0x6c>)
 8010948:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 801094a:	4b08      	ldr	r3, [pc, #32]	@ (801096c <processHalfDMAbuffer+0x70>)
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b00      	cmp	r3, #0
 8010952:	d001      	beq.n	8010958 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8010954:	f000 f826 	bl	80109a4 <calculateSPLQ31>
    }
}
 8010958:	46c0      	nop			@ (mov r8, r8)
 801095a:	46bd      	mov	sp, r7
 801095c:	b002      	add	sp, #8
 801095e:	bd80      	pop	{r7, pc}
 8010960:	20001020 	.word	0x20001020
 8010964:	20001820 	.word	0x20001820
 8010968:	20000fe0 	.word	0x20000fe0
 801096c:	20000fdb 	.word	0x20000fdb

08010970 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010978:	4b07      	ldr	r3, [pc, #28]	@ (8010998 <HAL_I2S_ErrorCallback+0x28>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d106      	bne.n	8010990 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8010982:	4a06      	ldr	r2, [pc, #24]	@ (801099c <HAL_I2S_ErrorCallback+0x2c>)
 8010984:	239e      	movs	r3, #158	@ 0x9e
 8010986:	0059      	lsls	r1, r3, #1
 8010988:	4b05      	ldr	r3, [pc, #20]	@ (80109a0 <HAL_I2S_ErrorCallback+0x30>)
 801098a:	0018      	movs	r0, r3
 801098c:	f002 f950 	bl	8012c30 <errorHandler>
  }
}
 8010990:	46c0      	nop			@ (mov r8, r8)
 8010992:	46bd      	mov	sp, r7
 8010994:	b002      	add	sp, #8
 8010996:	bd80      	pop	{r7, pc}
 8010998:	20001a24 	.word	0x20001a24
 801099c:	0802ca34 	.word	0x0802ca34
 80109a0:	0802d32c 	.word	0x0802d32c

080109a4 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 80109a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109a6:	b0b3      	sub	sp, #204	@ 0xcc
 80109a8:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 80109aa:	4ae2      	ldr	r2, [pc, #904]	@ (8010d34 <calculateSPLQ31+0x390>)
 80109ac:	2338      	movs	r3, #56	@ 0x38
 80109ae:	2030      	movs	r0, #48	@ 0x30
 80109b0:	181b      	adds	r3, r3, r0
 80109b2:	19d9      	adds	r1, r3, r7
 80109b4:	2334      	movs	r3, #52	@ 0x34
 80109b6:	181b      	adds	r3, r3, r0
 80109b8:	19d8      	adds	r0, r3, r7
 80109ba:	2380      	movs	r3, #128	@ 0x80
 80109bc:	f000 fc36 	bl	801122c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 80109c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	da00      	bge.n	80109c8 <calculateSPLQ31+0x24>
 80109c6:	3301      	adds	r3, #1
 80109c8:	105b      	asrs	r3, r3, #1
 80109ca:	001a      	movs	r2, r3
 80109cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	da00      	bge.n	80109d4 <calculateSPLQ31+0x30>
 80109d2:	3301      	adds	r3, #1
 80109d4:	105b      	asrs	r3, r3, #1
 80109d6:	18d3      	adds	r3, r2, r3
 80109d8:	2188      	movs	r1, #136	@ 0x88
 80109da:	187a      	adds	r2, r7, r1
 80109dc:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 80109de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80109e0:	187b      	adds	r3, r7, r1
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	3304      	adds	r3, #4
 80109e8:	2284      	movs	r2, #132	@ 0x84
 80109ea:	18b9      	adds	r1, r7, r2
 80109ec:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 80109ee:	18bb      	adds	r3, r7, r2
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4ad1      	ldr	r2, [pc, #836]	@ (8010d38 <calculateSPLQ31+0x394>)
 80109f4:	0019      	movs	r1, r3
 80109f6:	0010      	movs	r0, r2
 80109f8:	f000 fc58 	bl	80112ac <getPo2factor>
 80109fc:	0003      	movs	r3, r0
 80109fe:	2280      	movs	r2, #128	@ 0x80
 8010a00:	18ba      	adds	r2, r7, r2
 8010a02:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8010a04:	2300      	movs	r3, #0
 8010a06:	2284      	movs	r2, #132	@ 0x84
 8010a08:	2130      	movs	r1, #48	@ 0x30
 8010a0a:	1852      	adds	r2, r2, r1
 8010a0c:	19d2      	adds	r2, r2, r7
 8010a0e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010a10:	2300      	movs	r3, #0
 8010a12:	2280      	movs	r2, #128	@ 0x80
 8010a14:	1852      	adds	r2, r2, r1
 8010a16:	19d2      	adds	r2, r2, r7
 8010a18:	6013      	str	r3, [r2, #0]
 8010a1a:	e032      	b.n	8010a82 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8010a1c:	4ac5      	ldr	r2, [pc, #788]	@ (8010d34 <calculateSPLQ31+0x390>)
 8010a1e:	2680      	movs	r6, #128	@ 0x80
 8010a20:	2330      	movs	r3, #48	@ 0x30
 8010a22:	18f1      	adds	r1, r6, r3
 8010a24:	19cb      	adds	r3, r1, r7
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	589a      	ldr	r2, [r3, r2]
 8010a2c:	2188      	movs	r1, #136	@ 0x88
 8010a2e:	1879      	adds	r1, r7, r1
 8010a30:	680b      	ldr	r3, [r1, #0]
 8010a32:	1ad2      	subs	r2, r2, r3
 8010a34:	2180      	movs	r1, #128	@ 0x80
 8010a36:	1879      	adds	r1, r7, r1
 8010a38:	680b      	ldr	r3, [r1, #0]
 8010a3a:	409a      	lsls	r2, r3
 8010a3c:	0011      	movs	r1, r2
 8010a3e:	4abf      	ldr	r2, [pc, #764]	@ (8010d3c <calculateSPLQ31+0x398>)
 8010a40:	2084      	movs	r0, #132	@ 0x84
 8010a42:	2330      	movs	r3, #48	@ 0x30
 8010a44:	18c3      	adds	r3, r0, r3
 8010a46:	19db      	adds	r3, r3, r7
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8010a4e:	2230      	movs	r2, #48	@ 0x30
 8010a50:	1883      	adds	r3, r0, r2
 8010a52:	19db      	adds	r3, r3, r7
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	3301      	adds	r3, #1
 8010a58:	49b8      	ldr	r1, [pc, #736]	@ (8010d3c <calculateSPLQ31+0x398>)
 8010a5a:	009a      	lsls	r2, r3, #2
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	5053      	str	r3, [r2, r1]
        count += 2;
 8010a60:	2230      	movs	r2, #48	@ 0x30
 8010a62:	1883      	adds	r3, r0, r2
 8010a64:	19db      	adds	r3, r3, r7
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	3302      	adds	r3, #2
 8010a6a:	0011      	movs	r1, r2
 8010a6c:	1882      	adds	r2, r0, r2
 8010a6e:	19d2      	adds	r2, r2, r7
 8010a70:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010a72:	000a      	movs	r2, r1
 8010a74:	18b3      	adds	r3, r6, r2
 8010a76:	19db      	adds	r3, r3, r7
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	18b2      	adds	r2, r6, r2
 8010a7e:	19d2      	adds	r2, r2, r7
 8010a80:	6013      	str	r3, [r2, #0]
 8010a82:	2380      	movs	r3, #128	@ 0x80
 8010a84:	2630      	movs	r6, #48	@ 0x30
 8010a86:	199b      	adds	r3, r3, r6
 8010a88:	19db      	adds	r3, r3, r7
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a8e:	d9c5      	bls.n	8010a1c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8010a90:	4bab      	ldr	r3, [pc, #684]	@ (8010d40 <calculateSPLQ31+0x39c>)
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	49a9      	ldr	r1, [pc, #676]	@ (8010d3c <calculateSPLQ31+0x398>)
 8010a96:	2301      	movs	r3, #1
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f011 fe69 	bl	8022770 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8010a9e:	4aa9      	ldr	r2, [pc, #676]	@ (8010d44 <calculateSPLQ31+0x3a0>)
 8010aa0:	2338      	movs	r3, #56	@ 0x38
 8010aa2:	199b      	adds	r3, r3, r6
 8010aa4:	19d9      	adds	r1, r3, r7
 8010aa6:	2334      	movs	r3, #52	@ 0x34
 8010aa8:	199b      	adds	r3, r3, r6
 8010aaa:	19d8      	adds	r0, r3, r7
 8010aac:	237e      	movs	r3, #126	@ 0x7e
 8010aae:	f000 fbbd 	bl	801122c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8010ab2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010ab4:	2380      	movs	r3, #128	@ 0x80
 8010ab6:	061b      	lsls	r3, r3, #24
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d101      	bne.n	8010ac0 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8010abc:	4b9e      	ldr	r3, [pc, #632]	@ (8010d38 <calculateSPLQ31+0x394>)
 8010abe:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8010ac0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010ac2:	2380      	movs	r3, #128	@ 0x80
 8010ac4:	061b      	lsls	r3, r3, #24
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d101      	bne.n	8010ace <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8010aca:	4b9b      	ldr	r3, [pc, #620]	@ (8010d38 <calculateSPLQ31+0x394>)
 8010acc:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8010ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ad0:	17da      	asrs	r2, r3, #31
 8010ad2:	189b      	adds	r3, r3, r2
 8010ad4:	4053      	eors	r3, r2
 8010ad6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8010ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010ada:	17da      	asrs	r2, r3, #31
 8010adc:	189b      	adds	r3, r3, r2
 8010ade:	4053      	eors	r3, r2
 8010ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8010ae2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	dd01      	ble.n	8010aee <calculateSPLQ31+0x14a>
    {
        max = min;
 8010aea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010aec:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8010aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010af0:	3304      	adds	r3, #4
 8010af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8010af4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010af6:	4a90      	ldr	r2, [pc, #576]	@ (8010d38 <calculateSPLQ31+0x394>)
 8010af8:	0019      	movs	r1, r3
 8010afa:	0010      	movs	r0, r2
 8010afc:	f000 fbd6 	bl	80112ac <getPo2factor>
 8010b00:	0003      	movs	r3, r0
 8010b02:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8010b04:	2302      	movs	r3, #2
 8010b06:	22ac      	movs	r2, #172	@ 0xac
 8010b08:	18ba      	adds	r2, r7, r2
 8010b0a:	6013      	str	r3, [r2, #0]
 8010b0c:	e012      	b.n	8010b34 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8010b0e:	4a8b      	ldr	r2, [pc, #556]	@ (8010d3c <calculateSPLQ31+0x398>)
 8010b10:	20ac      	movs	r0, #172	@ 0xac
 8010b12:	183b      	adds	r3, r7, r0
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	589a      	ldr	r2, [r3, r2]
 8010b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010b1c:	409a      	lsls	r2, r3
 8010b1e:	0011      	movs	r1, r2
 8010b20:	4a86      	ldr	r2, [pc, #536]	@ (8010d3c <calculateSPLQ31+0x398>)
 8010b22:	183b      	adds	r3, r7, r0
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8010b2a:	183b      	adds	r3, r7, r0
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	183a      	adds	r2, r7, r0
 8010b32:	6013      	str	r3, [r2, #0]
 8010b34:	23ac      	movs	r3, #172	@ 0xac
 8010b36:	18fb      	adds	r3, r7, r3
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b3c:	d9e7      	bls.n	8010b0e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8010b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8010d34 <calculateSPLQ31+0x390>)
 8010b40:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8010b42:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8010b44:	4b7d      	ldr	r3, [pc, #500]	@ (8010d3c <calculateSPLQ31+0x398>)
 8010b46:	2240      	movs	r2, #64	@ 0x40
 8010b48:	0018      	movs	r0, r3
 8010b4a:	f012 fbbb 	bl	80232c4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8010b4e:	2330      	movs	r3, #48	@ 0x30
 8010b50:	18fb      	adds	r3, r7, r3
 8010b52:	0018      	movs	r0, r3
 8010b54:	2330      	movs	r3, #48	@ 0x30
 8010b56:	001a      	movs	r2, r3
 8010b58:	2100      	movs	r1, #0
 8010b5a:	f014 f9f9 	bl	8024f50 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2300      	movs	r3, #0
 8010b62:	21a0      	movs	r1, #160	@ 0xa0
 8010b64:	1879      	adds	r1, r7, r1
 8010b66:	600a      	str	r2, [r1, #0]
 8010b68:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	229c      	movs	r2, #156	@ 0x9c
 8010b6e:	18ba      	adds	r2, r7, r2
 8010b70:	6013      	str	r3, [r2, #0]
 8010b72:	e05b      	b.n	8010c2c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8010b74:	269c      	movs	r6, #156	@ 0x9c
 8010b76:	19bb      	adds	r3, r7, r6
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	009a      	lsls	r2, r3, #2
 8010b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b7e:	189b      	adds	r3, r3, r2
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	613b      	str	r3, [r7, #16]
 8010b84:	17db      	asrs	r3, r3, #31
 8010b86:	617b      	str	r3, [r7, #20]
 8010b88:	4b6f      	ldr	r3, [pc, #444]	@ (8010d48 <calculateSPLQ31+0x3a4>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	19bb      	adds	r3, r7, r6
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	18d3      	adds	r3, r2, r3
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	60bb      	str	r3, [r7, #8]
 8010b98:	2300      	movs	r3, #0
 8010b9a:	60fb      	str	r3, [r7, #12]
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6938      	ldr	r0, [r7, #16]
 8010ba2:	6979      	ldr	r1, [r7, #20]
 8010ba4:	f7ef fd0c 	bl	80005c0 <__aeabi_lmul>
 8010ba8:	0002      	movs	r2, r0
 8010baa:	000b      	movs	r3, r1
 8010bac:	0010      	movs	r0, r2
 8010bae:	0019      	movs	r1, r3
 8010bb0:	23a0      	movs	r3, #160	@ 0xa0
 8010bb2:	18fa      	adds	r2, r7, r3
 8010bb4:	6853      	ldr	r3, [r2, #4]
 8010bb6:	6812      	ldr	r2, [r2, #0]
 8010bb8:	1812      	adds	r2, r2, r0
 8010bba:	414b      	adcs	r3, r1
 8010bbc:	21a0      	movs	r1, #160	@ 0xa0
 8010bbe:	1879      	adds	r1, r7, r1
 8010bc0:	600a      	str	r2, [r1, #0]
 8010bc2:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8010bc4:	4b61      	ldr	r3, [pc, #388]	@ (8010d4c <calculateSPLQ31+0x3a8>)
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	19bb      	adds	r3, r7, r6
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	18d3      	adds	r3, r2, r3
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b06      	cmp	r3, #6
 8010bd2:	d025      	beq.n	8010c20 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8010bd4:	4b5d      	ldr	r3, [pc, #372]	@ (8010d4c <calculateSPLQ31+0x3a8>)
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	19bb      	adds	r3, r7, r6
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	18d3      	adds	r3, r2, r3
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2230      	movs	r2, #48	@ 0x30
 8010be2:	18ba      	adds	r2, r7, r2
 8010be4:	00db      	lsls	r3, r3, #3
 8010be6:	18d3      	adds	r3, r2, r3
 8010be8:	6818      	ldr	r0, [r3, #0]
 8010bea:	6859      	ldr	r1, [r3, #4]
 8010bec:	19bb      	adds	r3, r7, r6
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	009a      	lsls	r2, r3, #2
 8010bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bf4:	189b      	adds	r3, r3, r2
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	603b      	str	r3, [r7, #0]
 8010bfa:	17db      	asrs	r3, r3, #31
 8010bfc:	607b      	str	r3, [r7, #4]
 8010bfe:	4b53      	ldr	r3, [pc, #332]	@ (8010d4c <calculateSPLQ31+0x3a8>)
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	19be      	adds	r6, r7, r6
 8010c04:	6833      	ldr	r3, [r6, #0]
 8010c06:	18d3      	adds	r3, r2, r3
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	001e      	movs	r6, r3
 8010c0c:	683a      	ldr	r2, [r7, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	1880      	adds	r0, r0, r2
 8010c12:	4159      	adcs	r1, r3
 8010c14:	2330      	movs	r3, #48	@ 0x30
 8010c16:	18fa      	adds	r2, r7, r3
 8010c18:	00f3      	lsls	r3, r6, #3
 8010c1a:	18d3      	adds	r3, r2, r3
 8010c1c:	6018      	str	r0, [r3, #0]
 8010c1e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8010c20:	229c      	movs	r2, #156	@ 0x9c
 8010c22:	18bb      	adds	r3, r7, r2
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	3301      	adds	r3, #1
 8010c28:	18ba      	adds	r2, r7, r2
 8010c2a:	6013      	str	r3, [r2, #0]
 8010c2c:	239c      	movs	r3, #156	@ 0x9c
 8010c2e:	18fb      	adds	r3, r7, r3
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2b3f      	cmp	r3, #63	@ 0x3f
 8010c34:	d99e      	bls.n	8010b74 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8010c36:	2380      	movs	r3, #128	@ 0x80
 8010c38:	18fb      	adds	r3, r7, r3
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	005b      	lsls	r3, r3, #1
 8010c3e:	001a      	movs	r2, r3
 8010c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c42:	005b      	lsls	r3, r3, #1
 8010c44:	18d3      	adds	r3, r2, r3
 8010c46:	3b22      	subs	r3, #34	@ 0x22
 8010c48:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8010c4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c4c:	17da      	asrs	r2, r3, #31
 8010c4e:	189b      	adds	r3, r3, r2
 8010c50:	4053      	eors	r3, r2
 8010c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8010c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	da62      	bge.n	8010d20 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8010c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c5c:	3b20      	subs	r3, #32
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	db05      	blt.n	8010c6e <calculateSPLQ31+0x2ca>
 8010c62:	22a0      	movs	r2, #160	@ 0xa0
 8010c64:	18ba      	adds	r2, r7, r2
 8010c66:	6812      	ldr	r2, [r2, #0]
 8010c68:	409a      	lsls	r2, r3
 8010c6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8010c6c:	e010      	b.n	8010c90 <calculateSPLQ31+0x2ec>
 8010c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c70:	2220      	movs	r2, #32
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	22a0      	movs	r2, #160	@ 0xa0
 8010c76:	18ba      	adds	r2, r7, r2
 8010c78:	6812      	ldr	r2, [r2, #0]
 8010c7a:	40da      	lsrs	r2, r3
 8010c7c:	0013      	movs	r3, r2
 8010c7e:	22a4      	movs	r2, #164	@ 0xa4
 8010c80:	18ba      	adds	r2, r7, r2
 8010c82:	6811      	ldr	r1, [r2, #0]
 8010c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c86:	4091      	lsls	r1, r2
 8010c88:	6279      	str	r1, [r7, #36]	@ 0x24
 8010c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c8c:	431a      	orrs	r2, r3
 8010c8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010c90:	21a0      	movs	r1, #160	@ 0xa0
 8010c92:	187b      	adds	r3, r7, r1
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c98:	409a      	lsls	r2, r3
 8010c9a:	623a      	str	r2, [r7, #32]
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8010ca0:	187a      	adds	r2, r7, r1
 8010ca2:	6013      	str	r3, [r2, #0]
 8010ca4:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	2298      	movs	r2, #152	@ 0x98
 8010caa:	18ba      	adds	r2, r7, r2
 8010cac:	6013      	str	r3, [r2, #0]
 8010cae:	e031      	b.n	8010d14 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8010cb0:	2330      	movs	r3, #48	@ 0x30
 8010cb2:	18fa      	adds	r2, r7, r3
 8010cb4:	2398      	movs	r3, #152	@ 0x98
 8010cb6:	18fb      	adds	r3, r7, r3
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	18d3      	adds	r3, r2, r3
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010cc4:	3920      	subs	r1, #32
 8010cc6:	2900      	cmp	r1, #0
 8010cc8:	db03      	blt.n	8010cd2 <calculateSPLQ31+0x32e>
 8010cca:	0010      	movs	r0, r2
 8010ccc:	4088      	lsls	r0, r1
 8010cce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010cd0:	e00c      	b.n	8010cec <calculateSPLQ31+0x348>
 8010cd2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010cd4:	2020      	movs	r0, #32
 8010cd6:	1a41      	subs	r1, r0, r1
 8010cd8:	0010      	movs	r0, r2
 8010cda:	40c8      	lsrs	r0, r1
 8010cdc:	0001      	movs	r1, r0
 8010cde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010ce0:	001c      	movs	r4, r3
 8010ce2:	4084      	lsls	r4, r0
 8010ce4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8010ce6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ce8:	4308      	orrs	r0, r1
 8010cea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010cec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010cee:	0013      	movs	r3, r2
 8010cf0:	408b      	lsls	r3, r1
 8010cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010cf4:	2330      	movs	r3, #48	@ 0x30
 8010cf6:	18fa      	adds	r2, r7, r3
 8010cf8:	2098      	movs	r0, #152	@ 0x98
 8010cfa:	183b      	adds	r3, r7, r0
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	18d3      	adds	r3, r2, r3
 8010d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d06:	6019      	str	r1, [r3, #0]
 8010d08:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010d0a:	183b      	adds	r3, r7, r0
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	183a      	adds	r2, r7, r0
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	2398      	movs	r3, #152	@ 0x98
 8010d16:	18fb      	adds	r3, r7, r3
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2b05      	cmp	r3, #5
 8010d1c:	d9c8      	bls.n	8010cb0 <calculateSPLQ31+0x30c>
 8010d1e:	e06b      	b.n	8010df8 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8010d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d22:	3b20      	subs	r3, #32
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	db13      	blt.n	8010d50 <calculateSPLQ31+0x3ac>
 8010d28:	22a4      	movs	r2, #164	@ 0xa4
 8010d2a:	18ba      	adds	r2, r7, r2
 8010d2c:	6812      	ldr	r2, [r2, #0]
 8010d2e:	40da      	lsrs	r2, r3
 8010d30:	61ba      	str	r2, [r7, #24]
 8010d32:	e01e      	b.n	8010d72 <calculateSPLQ31+0x3ce>
 8010d34:	20001820 	.word	0x20001820
 8010d38:	7fffffff 	.word	0x7fffffff
 8010d3c:	20001a6c 	.word	0x20001a6c
 8010d40:	200000c8 	.word	0x200000c8
 8010d44:	20001a74 	.word	0x20001a74
 8010d48:	200000cc 	.word	0x200000cc
 8010d4c:	200000d8 	.word	0x200000d8
 8010d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d52:	2220      	movs	r2, #32
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	22a4      	movs	r2, #164	@ 0xa4
 8010d58:	18ba      	adds	r2, r7, r2
 8010d5a:	6812      	ldr	r2, [r2, #0]
 8010d5c:	409a      	lsls	r2, r3
 8010d5e:	0013      	movs	r3, r2
 8010d60:	22a0      	movs	r2, #160	@ 0xa0
 8010d62:	18ba      	adds	r2, r7, r2
 8010d64:	6811      	ldr	r1, [r2, #0]
 8010d66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010d68:	40d1      	lsrs	r1, r2
 8010d6a:	61b9      	str	r1, [r7, #24]
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	431a      	orrs	r2, r3
 8010d70:	61ba      	str	r2, [r7, #24]
 8010d72:	23a4      	movs	r3, #164	@ 0xa4
 8010d74:	18fb      	adds	r3, r7, r3
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d7a:	40da      	lsrs	r2, r3
 8010d7c:	61fa      	str	r2, [r7, #28]
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	21a0      	movs	r1, #160	@ 0xa0
 8010d84:	1879      	adds	r1, r7, r1
 8010d86:	600a      	str	r2, [r1, #0]
 8010d88:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	2294      	movs	r2, #148	@ 0x94
 8010d8e:	18ba      	adds	r2, r7, r2
 8010d90:	6013      	str	r3, [r2, #0]
 8010d92:	e02c      	b.n	8010dee <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8010d94:	2330      	movs	r3, #48	@ 0x30
 8010d96:	18fa      	adds	r2, r7, r3
 8010d98:	2394      	movs	r3, #148	@ 0x94
 8010d9a:	18fb      	adds	r3, r7, r3
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	18d3      	adds	r3, r2, r3
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010da8:	3920      	subs	r1, #32
 8010daa:	2900      	cmp	r1, #0
 8010dac:	db03      	blt.n	8010db6 <calculateSPLQ31+0x412>
 8010dae:	0018      	movs	r0, r3
 8010db0:	40c8      	lsrs	r0, r1
 8010db2:	0004      	movs	r4, r0
 8010db4:	e00a      	b.n	8010dcc <calculateSPLQ31+0x428>
 8010db6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010db8:	2020      	movs	r0, #32
 8010dba:	1a41      	subs	r1, r0, r1
 8010dbc:	0018      	movs	r0, r3
 8010dbe:	4088      	lsls	r0, r1
 8010dc0:	0001      	movs	r1, r0
 8010dc2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010dc4:	0016      	movs	r6, r2
 8010dc6:	40c6      	lsrs	r6, r0
 8010dc8:	0034      	movs	r4, r6
 8010dca:	430c      	orrs	r4, r1
 8010dcc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010dce:	40cb      	lsrs	r3, r1
 8010dd0:	001d      	movs	r5, r3
 8010dd2:	2330      	movs	r3, #48	@ 0x30
 8010dd4:	18fa      	adds	r2, r7, r3
 8010dd6:	2194      	movs	r1, #148	@ 0x94
 8010dd8:	187b      	adds	r3, r7, r1
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	18d3      	adds	r3, r2, r3
 8010de0:	601c      	str	r4, [r3, #0]
 8010de2:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010de4:	187b      	adds	r3, r7, r1
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	3301      	adds	r3, #1
 8010dea:	187a      	adds	r2, r7, r1
 8010dec:	6013      	str	r3, [r2, #0]
 8010dee:	2394      	movs	r3, #148	@ 0x94
 8010df0:	18fb      	adds	r3, r7, r3
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b05      	cmp	r3, #5
 8010df6:	d9cd      	bls.n	8010d94 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8010df8:	230f      	movs	r3, #15
 8010dfa:	425d      	negs	r5, r3
 8010dfc:	2305      	movs	r3, #5
 8010dfe:	425e      	negs	r6, r3
 8010e00:	4b4a      	ldr	r3, [pc, #296]	@ (8010f2c <calculateSPLQ31+0x588>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	4b4a      	ldr	r3, [pc, #296]	@ (8010f30 <calculateSPLQ31+0x58c>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	21a0      	movs	r1, #160	@ 0xa0
 8010e0e:	1879      	adds	r1, r7, r1
 8010e10:	6808      	ldr	r0, [r1, #0]
 8010e12:	6849      	ldr	r1, [r1, #4]
 8010e14:	4c47      	ldr	r4, [pc, #284]	@ (8010f34 <calculateSPLQ31+0x590>)
 8010e16:	9403      	str	r4, [sp, #12]
 8010e18:	4c47      	ldr	r4, [pc, #284]	@ (8010f38 <calculateSPLQ31+0x594>)
 8010e1a:	9402      	str	r4, [sp, #8]
 8010e1c:	9301      	str	r3, [sp, #4]
 8010e1e:	9200      	str	r2, [sp, #0]
 8010e20:	0033      	movs	r3, r6
 8010e22:	002a      	movs	r2, r5
 8010e24:	f000 fa86 	bl	8011334 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010e28:	2300      	movs	r3, #0
 8010e2a:	2290      	movs	r2, #144	@ 0x90
 8010e2c:	18ba      	adds	r2, r7, r2
 8010e2e:	6013      	str	r3, [r2, #0]
 8010e30:	e026      	b.n	8010e80 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8010e32:	2330      	movs	r3, #48	@ 0x30
 8010e34:	18fa      	adds	r2, r7, r3
 8010e36:	2490      	movs	r4, #144	@ 0x90
 8010e38:	193b      	adds	r3, r7, r4
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	18d3      	adds	r3, r2, r3
 8010e40:	6818      	ldr	r0, [r3, #0]
 8010e42:	6859      	ldr	r1, [r3, #4]
 8010e44:	230f      	movs	r3, #15
 8010e46:	425d      	negs	r5, r3
 8010e48:	2305      	movs	r3, #5
 8010e4a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8010e4c:	193b      	adds	r3, r7, r4
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	009a      	lsls	r2, r3, #2
 8010e52:	4b3a      	ldr	r3, [pc, #232]	@ (8010f3c <calculateSPLQ31+0x598>)
 8010e54:	18d3      	adds	r3, r2, r3
 8010e56:	193a      	adds	r2, r7, r4
 8010e58:	6812      	ldr	r2, [r2, #0]
 8010e5a:	0094      	lsls	r4, r2, #2
 8010e5c:	4a38      	ldr	r2, [pc, #224]	@ (8010f40 <calculateSPLQ31+0x59c>)
 8010e5e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8010e60:	9203      	str	r2, [sp, #12]
 8010e62:	9302      	str	r3, [sp, #8]
 8010e64:	2300      	movs	r3, #0
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	2300      	movs	r3, #0
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	0033      	movs	r3, r6
 8010e6e:	002a      	movs	r2, r5
 8010e70:	f000 fa60 	bl	8011334 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010e74:	2490      	movs	r4, #144	@ 0x90
 8010e76:	193b      	adds	r3, r7, r4
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	193a      	adds	r2, r7, r4
 8010e7e:	6013      	str	r3, [r2, #0]
 8010e80:	2390      	movs	r3, #144	@ 0x90
 8010e82:	18fb      	adds	r3, r7, r3
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b05      	cmp	r3, #5
 8010e88:	d9d3      	bls.n	8010e32 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8010e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8010f38 <calculateSPLQ31+0x594>)
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8010f44 <calculateSPLQ31+0x5a0>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	18d2      	adds	r2, r2, r3
 8010e94:	4b2b      	ldr	r3, [pc, #172]	@ (8010f44 <calculateSPLQ31+0x5a0>)
 8010e96:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8010e98:	4b26      	ldr	r3, [pc, #152]	@ (8010f34 <calculateSPLQ31+0x590>)
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8010f48 <calculateSPLQ31+0x5a4>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	18d2      	adds	r2, r2, r3
 8010ea2:	4b29      	ldr	r3, [pc, #164]	@ (8010f48 <calculateSPLQ31+0x5a4>)
 8010ea4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	228c      	movs	r2, #140	@ 0x8c
 8010eaa:	18ba      	adds	r2, r7, r2
 8010eac:	6013      	str	r3, [r2, #0]
 8010eae:	e025      	b.n	8010efc <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8010eb0:	4b22      	ldr	r3, [pc, #136]	@ (8010f3c <calculateSPLQ31+0x598>)
 8010eb2:	208c      	movs	r0, #140	@ 0x8c
 8010eb4:	183a      	adds	r2, r7, r0
 8010eb6:	6812      	ldr	r2, [r2, #0]
 8010eb8:	0092      	lsls	r2, r2, #2
 8010eba:	58d2      	ldr	r2, [r2, r3]
 8010ebc:	4b23      	ldr	r3, [pc, #140]	@ (8010f4c <calculateSPLQ31+0x5a8>)
 8010ebe:	1839      	adds	r1, r7, r0
 8010ec0:	6809      	ldr	r1, [r1, #0]
 8010ec2:	0089      	lsls	r1, r1, #2
 8010ec4:	58cb      	ldr	r3, [r1, r3]
 8010ec6:	18d1      	adds	r1, r2, r3
 8010ec8:	4b20      	ldr	r3, [pc, #128]	@ (8010f4c <calculateSPLQ31+0x5a8>)
 8010eca:	183a      	adds	r2, r7, r0
 8010ecc:	6812      	ldr	r2, [r2, #0]
 8010ece:	0092      	lsls	r2, r2, #2
 8010ed0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 8010ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8010f40 <calculateSPLQ31+0x59c>)
 8010ed4:	183a      	adds	r2, r7, r0
 8010ed6:	6812      	ldr	r2, [r2, #0]
 8010ed8:	0092      	lsls	r2, r2, #2
 8010eda:	58d2      	ldr	r2, [r2, r3]
 8010edc:	4b1c      	ldr	r3, [pc, #112]	@ (8010f50 <calculateSPLQ31+0x5ac>)
 8010ede:	1839      	adds	r1, r7, r0
 8010ee0:	6809      	ldr	r1, [r1, #0]
 8010ee2:	0089      	lsls	r1, r1, #2
 8010ee4:	58cb      	ldr	r3, [r1, r3]
 8010ee6:	18d1      	adds	r1, r2, r3
 8010ee8:	4b19      	ldr	r3, [pc, #100]	@ (8010f50 <calculateSPLQ31+0x5ac>)
 8010eea:	183a      	adds	r2, r7, r0
 8010eec:	6812      	ldr	r2, [r2, #0]
 8010eee:	0092      	lsls	r2, r2, #2
 8010ef0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ef2:	183b      	adds	r3, r7, r0
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	183a      	adds	r2, r7, r0
 8010efa:	6013      	str	r3, [r2, #0]
 8010efc:	238c      	movs	r3, #140	@ 0x8c
 8010efe:	18fb      	adds	r3, r7, r3
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b05      	cmp	r3, #5
 8010f04:	d9d4      	bls.n	8010eb0 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8010f06:	4b13      	ldr	r3, [pc, #76]	@ (8010f54 <calculateSPLQ31+0x5b0>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	1c5a      	adds	r2, r3, #1
 8010f0c:	4b11      	ldr	r3, [pc, #68]	@ (8010f54 <calculateSPLQ31+0x5b0>)
 8010f0e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8010f10:	4b10      	ldr	r3, [pc, #64]	@ (8010f54 <calculateSPLQ31+0x5b0>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b0f      	cmp	r3, #15
 8010f16:	d905      	bls.n	8010f24 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8010f18:	4b0f      	ldr	r3, [pc, #60]	@ (8010f58 <calculateSPLQ31+0x5b4>)
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010f5c <calculateSPLQ31+0x5b8>)
 8010f20:	2200      	movs	r2, #0
 8010f22:	701a      	strb	r2, [r3, #0]
    }
}
 8010f24:	46c0      	nop			@ (mov r8, r8)
 8010f26:	46bd      	mov	sp, r7
 8010f28:	b02f      	add	sp, #188	@ 0xbc
 8010f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f2c:	200000d0 	.word	0x200000d0
 8010f30:	200000d4 	.word	0x200000d4
 8010f34:	20000fec 	.word	0x20000fec
 8010f38:	20000fe8 	.word	0x20000fe8
 8010f3c:	20000ff0 	.word	0x20000ff0
 8010f40:	20001008 	.word	0x20001008
 8010f44:	20001a30 	.word	0x20001a30
 8010f48:	20001a34 	.word	0x20001a34
 8010f4c:	20001a38 	.word	0x20001a38
 8010f50:	20001a50 	.word	0x20001a50
 8010f54:	20001a68 	.word	0x20001a68
 8010f58:	20000fdd 	.word	0x20000fdd
 8010f5c:	20000fdb 	.word	0x20000fdb

08010f60 <resetSPLstate>:

static void resetSPLstate(void)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8010f66:	4b11      	ldr	r3, [pc, #68]	@ (8010fac <resetSPLstate+0x4c>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8010f6c:	4b10      	ldr	r3, [pc, #64]	@ (8010fb0 <resetSPLstate+0x50>)
 8010f6e:	2200      	movs	r2, #0
 8010f70:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8010f72:	4b10      	ldr	r3, [pc, #64]	@ (8010fb4 <resetSPLstate+0x54>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010f78:	2300      	movs	r3, #0
 8010f7a:	607b      	str	r3, [r7, #4]
 8010f7c:	e00c      	b.n	8010f98 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8010f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8010fb8 <resetSPLstate+0x58>)
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	0092      	lsls	r2, r2, #2
 8010f84:	2100      	movs	r1, #0
 8010f86:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8010f88:	4b0c      	ldr	r3, [pc, #48]	@ (8010fbc <resetSPLstate+0x5c>)
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	0092      	lsls	r2, r2, #2
 8010f8e:	2100      	movs	r1, #0
 8010f90:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	3301      	adds	r3, #1
 8010f96:	607b      	str	r3, [r7, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b05      	cmp	r3, #5
 8010f9c:	d9ef      	bls.n	8010f7e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8010f9e:	4b08      	ldr	r3, [pc, #32]	@ (8010fc0 <resetSPLstate+0x60>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	701a      	strb	r2, [r3, #0]
}
 8010fa4:	46c0      	nop			@ (mov r8, r8)
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	b002      	add	sp, #8
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	20001a30 	.word	0x20001a30
 8010fb0:	20001a34 	.word	0x20001a34
 8010fb4:	20001a68 	.word	0x20001a68
 8010fb8:	20001a38 	.word	0x20001a38
 8010fbc:	20001a50 	.word	0x20001a50
 8010fc0:	20000fdd 	.word	0x20000fdd

08010fc4 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8010fc4:	b5b0      	push	{r4, r5, r7, lr}
 8010fc6:	b090      	sub	sp, #64	@ 0x40
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	0019      	movs	r1, r3
 8010fd0:	1dfb      	adds	r3, r7, #7
 8010fd2:	701a      	strb	r2, [r3, #0]
 8010fd4:	1dbb      	adds	r3, r7, #6
 8010fd6:	1c0a      	adds	r2, r1, #0
 8010fd8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8010fda:	1dfb      	adds	r3, r7, #7
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d005      	beq.n	8010fee <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 8010fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8010fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80110d4 <getFilteredMaxAmplitudeQ31+0x110>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8010ff6:	2305      	movs	r3, #5
 8010ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ffe:	e040      	b.n	8011082 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	18d3      	adds	r3, r2, r3
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100c:	409a      	lsls	r2, r3
 801100e:	0013      	movs	r3, r2
 8011010:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 8011012:	4b30      	ldr	r3, [pc, #192]	@ (80110d4 <getFilteredMaxAmplitudeQ31+0x110>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	425a      	negs	r2, r3
 8011018:	4b2e      	ldr	r3, [pc, #184]	@ (80110d4 <getFilteredMaxAmplitudeQ31+0x110>)
 801101a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 801101c:	2418      	movs	r4, #24
 801101e:	193a      	adds	r2, r7, r4
 8011020:	492c      	ldr	r1, [pc, #176]	@ (80110d4 <getFilteredMaxAmplitudeQ31+0x110>)
 8011022:	231c      	movs	r3, #28
 8011024:	18f8      	adds	r0, r7, r3
 8011026:	2301      	movs	r3, #1
 8011028:	f012 f9a4 	bl	8023374 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 801102c:	2514      	movs	r5, #20
 801102e:	197a      	adds	r2, r7, r5
 8011030:	1939      	adds	r1, r7, r4
 8011032:	4829      	ldr	r0, [pc, #164]	@ (80110d8 <getFilteredMaxAmplitudeQ31+0x114>)
 8011034:	2301      	movs	r3, #1
 8011036:	f012 f96b 	bl	8023310 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 801103a:	2410      	movs	r4, #16
 801103c:	193a      	adds	r2, r7, r4
 801103e:	4924      	ldr	r1, [pc, #144]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011040:	4826      	ldr	r0, [pc, #152]	@ (80110dc <getFilteredMaxAmplitudeQ31+0x118>)
 8011042:	2301      	movs	r3, #1
 8011044:	f012 f964 	bl	8023310 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8011048:	4a21      	ldr	r2, [pc, #132]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801104a:	1939      	adds	r1, r7, r4
 801104c:	1978      	adds	r0, r7, r5
 801104e:	2301      	movs	r3, #1
 8011050:	f012 f990 	bl	8023374 <arm_add_q31>

        lastData = fx;
 8011054:	69fa      	ldr	r2, [r7, #28]
 8011056:	4b1f      	ldr	r3, [pc, #124]	@ (80110d4 <getFilteredMaxAmplitudeQ31+0x110>)
 8011058:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 801105a:	4b1d      	ldr	r3, [pc, #116]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011060:	429a      	cmp	r2, r3
 8011062:	da03      	bge.n	801106c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8011064:	4b1a      	ldr	r3, [pc, #104]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801106a:	e007      	b.n	801107c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 801106c:	4b18      	ldr	r3, [pc, #96]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011072:	429a      	cmp	r2, r3
 8011074:	dd02      	ble.n	801107c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8011076:	4b16      	ldr	r3, [pc, #88]	@ (80110d0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 801107c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801107e:	3301      	adds	r3, #1
 8011080:	637b      	str	r3, [r7, #52]	@ 0x34
 8011082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	429a      	cmp	r2, r3
 8011088:	d3ba      	bcc.n	8011000 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 801108a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108c:	17da      	asrs	r2, r3, #31
 801108e:	189b      	adds	r3, r3, r2
 8011090:	4053      	eors	r3, r2
 8011092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8011094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011096:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8011098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801109a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801109c:	4293      	cmp	r3, r2
 801109e:	d200      	bcs.n	80110a2 <getFilteredMaxAmplitudeQ31+0xde>
 80110a0:	0013      	movs	r3, r2
 80110a2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80110a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110a8:	40da      	lsrs	r2, r3
 80110aa:	0013      	movs	r3, r2
 80110ac:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80110ae:	1dbb      	adds	r3, r7, #6
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d007      	beq.n	80110c6 <getFilteredMaxAmplitudeQ31+0x102>
 80110b6:	4b0a      	ldr	r3, [pc, #40]	@ (80110e0 <getFilteredMaxAmplitudeQ31+0x11c>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	6a3a      	ldr	r2, [r7, #32]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d902      	bls.n	80110c6 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80110c0:	4b07      	ldr	r3, [pc, #28]	@ (80110e0 <getFilteredMaxAmplitudeQ31+0x11c>)
 80110c2:	6a3a      	ldr	r2, [r7, #32]
 80110c4:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80110c6:	6a3b      	ldr	r3, [r7, #32]
}
 80110c8:	0018      	movs	r0, r3
 80110ca:	46bd      	mov	sp, r7
 80110cc:	b010      	add	sp, #64	@ 0x40
 80110ce:	bdb0      	pop	{r4, r5, r7, pc}
 80110d0:	20001e6c 	.word	0x20001e6c
 80110d4:	20001e70 	.word	0x20001e70
 80110d8:	0802d324 	.word	0x0802d324
 80110dc:	0802d328 	.word	0x0802d328
 80110e0:	20000fe4 	.word	0x20000fe4

080110e4 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80110f0:	4913      	ldr	r1, [pc, #76]	@ (8011140 <floatToIntAndFrac2dp+0x5c>)
 80110f2:	68f8      	ldr	r0, [r7, #12]
 80110f4:	f7ef ff54 	bl	8000fa0 <__aeabi_fmul>
 80110f8:	1c03      	adds	r3, r0, #0
 80110fa:	1c18      	adds	r0, r3, #0
 80110fc:	f016 fe3c 	bl	8027d78 <roundf>
 8011100:	1c03      	adds	r3, r0, #0
 8011102:	1c18      	adds	r0, r3, #0
 8011104:	f7ef fa8a 	bl	800061c <__aeabi_f2uiz>
 8011108:	0003      	movs	r3, r0
 801110a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	2164      	movs	r1, #100	@ 0x64
 8011110:	0018      	movs	r0, r3
 8011112:	f7ef f847 	bl	80001a4 <__udivsi3>
 8011116:	0003      	movs	r3, r0
 8011118:	001a      	movs	r2, r3
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	b2da      	uxtb	r2, r3
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	b2db      	uxtb	r3, r3
 8011128:	2164      	movs	r1, #100	@ 0x64
 801112a:	434b      	muls	r3, r1
 801112c:	b2db      	uxtb	r3, r3
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	b2da      	uxtb	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	701a      	strb	r2, [r3, #0]
}
 8011136:	46c0      	nop			@ (mov r8, r8)
 8011138:	46bd      	mov	sp, r7
 801113a:	b006      	add	sp, #24
 801113c:	bd80      	pop	{r7, pc}
 801113e:	46c0      	nop			@ (mov r8, r8)
 8011140:	42c80000 	.word	0x42c80000

08011144 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8011150:	4914      	ldr	r1, [pc, #80]	@ (80111a4 <floatToIntAndFrac1dp+0x60>)
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f7ef ff24 	bl	8000fa0 <__aeabi_fmul>
 8011158:	1c03      	adds	r3, r0, #0
 801115a:	1c18      	adds	r0, r3, #0
 801115c:	f016 fe0c 	bl	8027d78 <roundf>
 8011160:	1c03      	adds	r3, r0, #0
 8011162:	1c18      	adds	r0, r3, #0
 8011164:	f7ef fa5a 	bl	800061c <__aeabi_f2uiz>
 8011168:	0003      	movs	r3, r0
 801116a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	210a      	movs	r1, #10
 8011170:	0018      	movs	r0, r3
 8011172:	f7ef f817 	bl	80001a4 <__udivsi3>
 8011176:	0003      	movs	r3, r0
 8011178:	001a      	movs	r2, r3
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	b2da      	uxtb	r2, r3
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	b2db      	uxtb	r3, r3
 8011188:	1c19      	adds	r1, r3, #0
 801118a:	0089      	lsls	r1, r1, #2
 801118c:	18cb      	adds	r3, r1, r3
 801118e:	18db      	adds	r3, r3, r3
 8011190:	b2db      	uxtb	r3, r3
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	b2da      	uxtb	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	701a      	strb	r2, [r3, #0]
}
 801119a:	46c0      	nop			@ (mov r8, r8)
 801119c:	46bd      	mov	sp, r7
 801119e:	b006      	add	sp, #24
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	46c0      	nop			@ (mov r8, r8)
 80111a4:	41200000 	.word	0x41200000

080111a8 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80111a8:	b590      	push	{r4, r7, lr}
 80111aa:	b087      	sub	sp, #28
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7f0 fa0a 	bl	80015d0 <__aeabi_i2f>
 80111bc:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80111be:	6838      	ldr	r0, [r7, #0]
 80111c0:	f7f0 fa06 	bl	80015d0 <__aeabi_i2f>
 80111c4:	1c03      	adds	r3, r0, #0
 80111c6:	4918      	ldr	r1, [pc, #96]	@ (8011228 <sumToIntAverage+0x80>)
 80111c8:	1c18      	adds	r0, r3, #0
 80111ca:	f7ef fd03 	bl	8000bd4 <__aeabi_fdiv>
 80111ce:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80111d0:	1c19      	adds	r1, r3, #0
 80111d2:	1c20      	adds	r0, r4, #0
 80111d4:	f7ef fb74 	bl	80008c0 <__aeabi_fadd>
 80111d8:	1c03      	adds	r3, r0, #0
 80111da:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80111dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111de:	f7f0 fa43 	bl	8001668 <__aeabi_ui2f>
 80111e2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80111e4:	1c19      	adds	r1, r3, #0
 80111e6:	1c20      	adds	r0, r4, #0
 80111e8:	f7ef fcf4 	bl	8000bd4 <__aeabi_fdiv>
 80111ec:	1c03      	adds	r3, r0, #0
 80111ee:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80111f0:	2300      	movs	r3, #0
 80111f2:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80111f4:	68ba      	ldr	r2, [r7, #8]
 80111f6:	2310      	movs	r3, #16
 80111f8:	18f9      	adds	r1, r7, r3
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	1c18      	adds	r0, r3, #0
 80111fe:	f7ff ffa1 	bl	8011144 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	2bff      	cmp	r3, #255	@ 0xff
 8011206:	d906      	bls.n	8011216 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	22ff      	movs	r2, #255	@ 0xff
 801120c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	2209      	movs	r2, #9
 8011212:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8011214:	e003      	b.n	801121e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	b2da      	uxtb	r2, r3
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	701a      	strb	r2, [r3, #0]
}
 801121e:	46c0      	nop			@ (mov r8, r8)
 8011220:	46bd      	mov	sp, r7
 8011222:	b007      	add	sp, #28
 8011224:	bd90      	pop	{r4, r7, pc}
 8011226:	46c0      	nop			@ (mov r8, r8)
 8011228:	41200000 	.word	0x41200000

0801122c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2280      	movs	r2, #128	@ 0x80
 801123e:	0612      	lsls	r2, r2, #24
 8011240:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	4a18      	ldr	r2, [pc, #96]	@ (80112a8 <findMinMax+0x7c>)
 8011246:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011248:	2300      	movs	r3, #0
 801124a:	617b      	str	r3, [r7, #20]
 801124c:	e022      	b.n	8011294 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	18d3      	adds	r3, r2, r3
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	429a      	cmp	r2, r3
 801125e:	da06      	bge.n	801126e <findMinMax+0x42>
        {
            min[0] = array[i];
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	18d3      	adds	r3, r2, r3
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	18d3      	adds	r3, r2, r3
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	dd06      	ble.n	801128e <findMinMax+0x62>
        {
            max[0] = array[i];
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	18d3      	adds	r3, r2, r3
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	3301      	adds	r3, #1
 8011292:	617b      	str	r3, [r7, #20]
 8011294:	697a      	ldr	r2, [r7, #20]
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	d3d8      	bcc.n	801124e <findMinMax+0x22>
        }
    }
}
 801129c:	46c0      	nop			@ (mov r8, r8)
 801129e:	46c0      	nop			@ (mov r8, r8)
 80112a0:	46bd      	mov	sp, r7
 80112a2:	b006      	add	sp, #24
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	46c0      	nop			@ (mov r8, r8)
 80112a8:	7fffffff 	.word	0x7fffffff

080112ac <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80112b6:	2300      	movs	r3, #0
 80112b8:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d302      	bcc.n	80112c8 <getPo2factor+0x1c>
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d107      	bne.n	80112d8 <getPo2factor+0x2c>
    {
        return 0;
 80112c8:	2300      	movs	r3, #0
 80112ca:	e00d      	b.n	80112e8 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	085b      	lsrs	r3, r3, #1
 80112d0:	607b      	str	r3, [r7, #4]
        bitShift++;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d2f5      	bcs.n	80112cc <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	3b01      	subs	r3, #1
 80112e4:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80112e6:	68fb      	ldr	r3, [r7, #12]
}
 80112e8:	0018      	movs	r0, r3
 80112ea:	46bd      	mov	sp, r7
 80112ec:	b004      	add	sp, #16
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
 80112fc:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f7f0 f9b2 	bl	8001668 <__aeabi_ui2f>
 8011304:	1c03      	adds	r3, r0, #0
 8011306:	1c19      	adds	r1, r3, #0
 8011308:	68b8      	ldr	r0, [r7, #8]
 801130a:	f7ef fe49 	bl	8000fa0 <__aeabi_fmul>
 801130e:	1c03      	adds	r3, r0, #0
 8011310:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8011312:	2300      	movs	r3, #0
 8011314:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	2310      	movs	r3, #16
 801131a:	18f9      	adds	r1, r7, r3
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	1c18      	adds	r0, r3, #0
 8011320:	f7ff fee0 	bl	80110e4 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	b29a      	uxth	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	801a      	strh	r2, [r3, #0]
}
 801132c:	46c0      	nop			@ (mov r8, r8)
 801132e:	46bd      	mov	sp, r7
 8011330:	b006      	add	sp, #24
 8011332:	bd80      	pop	{r7, pc}

08011334 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	60b8      	str	r0, [r7, #8]
 801133c:	60f9      	str	r1, [r7, #12]
 801133e:	607a      	str	r2, [r7, #4]
 8011340:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8011342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011344:	6a3a      	ldr	r2, [r7, #32]
 8011346:	68b8      	ldr	r0, [r7, #8]
 8011348:	68f9      	ldr	r1, [r7, #12]
 801134a:	f7f9 ffb3 	bl	800b2b4 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	18d2      	adds	r2, r2, r3
 8011356:	69bb      	ldr	r3, [r7, #24]
 8011358:	18d2      	adds	r2, r2, r3
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	18d2      	adds	r2, r2, r3
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	18d2      	adds	r2, r2, r3
 801136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801136e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011370:	6a3b      	ldr	r3, [r7, #32]
 8011372:	0011      	movs	r1, r2
 8011374:	0018      	movs	r0, r3
 8011376:	f7fa f82d 	bl	800b3d4 <correctIntFracNumber>
}
 801137a:	46c0      	nop			@ (mov r8, r8)
 801137c:	46bd      	mov	sp, r7
 801137e:	b004      	add	sp, #16
 8011380:	bd80      	pop	{r7, pc}

08011382 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8011382:	b580      	push	{r7, lr}
 8011384:	b086      	sub	sp, #24
 8011386:	af00      	add	r7, sp, #0
 8011388:	60f8      	str	r0, [r7, #12]
 801138a:	60b9      	str	r1, [r7, #8]
 801138c:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801138e:	2300      	movs	r3, #0
 8011390:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011392:	2300      	movs	r3, #0
 8011394:	613b      	str	r3, [r7, #16]
 8011396:	e019      	b.n	80113cc <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	68fa      	ldr	r2, [r7, #12]
 801139e:	18d3      	adds	r3, r2, r3
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80113a4:	693a      	ldr	r2, [r7, #16]
 80113a6:	3201      	adds	r2, #1
 80113a8:	0052      	lsls	r2, r2, #1
 80113aa:	68f9      	ldr	r1, [r7, #12]
 80113ac:	188a      	adds	r2, r1, r2
 80113ae:	8812      	ldrh	r2, [r2, #0]
 80113b0:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80113b2:	0019      	movs	r1, r3
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	687a      	ldr	r2, [r7, #4]
 80113ba:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80113bc:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80113be:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	3301      	adds	r3, #1
 80113c4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	3304      	adds	r3, #4
 80113ca:	613b      	str	r3, [r7, #16]
 80113cc:	693a      	ldr	r2, [r7, #16]
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d3e1      	bcc.n	8011398 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80113d4:	46c0      	nop			@ (mov r8, r8)
 80113d6:	46c0      	nop			@ (mov r8, r8)
 80113d8:	46bd      	mov	sp, r7
 80113da:	b006      	add	sp, #24
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 80113e0:	b580      	push	{r7, lr}
 80113e2:	af00      	add	r7, sp, #0
  init = false;
 80113e4:	4b02      	ldr	r3, [pc, #8]	@ (80113f0 <InitDone+0x10>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	701a      	strb	r2, [r3, #0]
}
 80113ea:	46c0      	nop			@ (mov r8, r8)
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	200000dc 	.word	0x200000dc

080113f4 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 80113fa:	f7f7 fc8d 	bl	8008d18 <ReadBatteryVoltage>
 80113fe:	1c02      	adds	r2, r0, #0
 8011400:	4b25      	ldr	r3, [pc, #148]	@ (8011498 <batteryChargeCheck+0xa4>)
 8011402:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8011404:	4b24      	ldr	r3, [pc, #144]	@ (8011498 <batteryChargeCheck+0xa4>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4924      	ldr	r1, [pc, #144]	@ (801149c <batteryChargeCheck+0xa8>)
 801140a:	1c18      	adds	r0, r3, #0
 801140c:	f7ef f890 	bl	8000530 <__aeabi_fcmplt>
 8011410:	1e03      	subs	r3, r0, #0
 8011412:	d002      	beq.n	801141a <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8011414:	1dfb      	adds	r3, r7, #7
 8011416:	2200      	movs	r2, #0
 8011418:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 801141a:	4b1f      	ldr	r3, [pc, #124]	@ (8011498 <batteryChargeCheck+0xa4>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	491f      	ldr	r1, [pc, #124]	@ (801149c <batteryChargeCheck+0xa8>)
 8011420:	1c18      	adds	r0, r3, #0
 8011422:	f7ef f8a3 	bl	800056c <__aeabi_fcmpge>
 8011426:	1e03      	subs	r3, r0, #0
 8011428:	d00d      	beq.n	8011446 <batteryChargeCheck+0x52>
 801142a:	4b1b      	ldr	r3, [pc, #108]	@ (8011498 <batteryChargeCheck+0xa4>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	1c18      	adds	r0, r3, #0
 8011430:	f7f2 f818 	bl	8003464 <__aeabi_f2d>
 8011434:	4a1a      	ldr	r2, [pc, #104]	@ (80114a0 <batteryChargeCheck+0xac>)
 8011436:	4b1b      	ldr	r3, [pc, #108]	@ (80114a4 <batteryChargeCheck+0xb0>)
 8011438:	f7ef f840 	bl	80004bc <__aeabi_dcmplt>
 801143c:	1e03      	subs	r3, r0, #0
 801143e:	d002      	beq.n	8011446 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8011440:	1dfb      	adds	r3, r7, #7
 8011442:	2201      	movs	r2, #1
 8011444:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8011446:	4b14      	ldr	r3, [pc, #80]	@ (8011498 <batteryChargeCheck+0xa4>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	1c18      	adds	r0, r3, #0
 801144c:	f7f2 f80a 	bl	8003464 <__aeabi_f2d>
 8011450:	4a13      	ldr	r2, [pc, #76]	@ (80114a0 <batteryChargeCheck+0xac>)
 8011452:	4b14      	ldr	r3, [pc, #80]	@ (80114a4 <batteryChargeCheck+0xb0>)
 8011454:	f7ef f850 	bl	80004f8 <__aeabi_dcmpge>
 8011458:	1e03      	subs	r3, r0, #0
 801145a:	d00b      	beq.n	8011474 <batteryChargeCheck+0x80>
 801145c:	4b0e      	ldr	r3, [pc, #56]	@ (8011498 <batteryChargeCheck+0xa4>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2181      	movs	r1, #129	@ 0x81
 8011462:	05c9      	lsls	r1, r1, #23
 8011464:	1c18      	adds	r0, r3, #0
 8011466:	f7ef f863 	bl	8000530 <__aeabi_fcmplt>
 801146a:	1e03      	subs	r3, r0, #0
 801146c:	d002      	beq.n	8011474 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 801146e:	1dfb      	adds	r3, r7, #7
 8011470:	2202      	movs	r2, #2
 8011472:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011474:	4b08      	ldr	r3, [pc, #32]	@ (8011498 <batteryChargeCheck+0xa4>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	2181      	movs	r1, #129	@ 0x81
 801147a:	05c9      	lsls	r1, r1, #23
 801147c:	1c18      	adds	r0, r3, #0
 801147e:	f7ef f875 	bl	800056c <__aeabi_fcmpge>
 8011482:	1e03      	subs	r3, r0, #0
 8011484:	d002      	beq.n	801148c <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011486:	1dfb      	adds	r3, r7, #7
 8011488:	2203      	movs	r2, #3
 801148a:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 801148c:	1dfb      	adds	r3, r7, #7
 801148e:	781b      	ldrb	r3, [r3, #0]
}
 8011490:	0018      	movs	r0, r3
 8011492:	46bd      	mov	sp, r7
 8011494:	b002      	add	sp, #8
 8011496:	bd80      	pop	{r7, pc}
 8011498:	20001e84 	.word	0x20001e84
 801149c:	40600000 	.word	0x40600000
 80114a0:	9999999a 	.word	0x9999999a
 80114a4:	400d9999 	.word	0x400d9999

080114a8 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80114a8:	b5b0      	push	{r4, r5, r7, lr}
 80114aa:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80114ac:	f7f7 fc96 	bl	8008ddc <ReadSolarVoltage>
 80114b0:	0003      	movs	r3, r0
 80114b2:	001a      	movs	r2, r3
 80114b4:	4b1a      	ldr	r3, [pc, #104]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114b6:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 80114b8:	4b19      	ldr	r3, [pc, #100]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	4a19      	ldr	r2, [pc, #100]	@ (8011524 <Calculate_LED_ON+0x7c>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d802      	bhi.n	80114c8 <Calculate_LED_ON+0x20>
    solmV = 2900;
 80114c2:	4b17      	ldr	r3, [pc, #92]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114c4:	4a18      	ldr	r2, [pc, #96]	@ (8011528 <Calculate_LED_ON+0x80>)
 80114c6:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 80114c8:	4b15      	ldr	r3, [pc, #84]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114ca:	881b      	ldrh	r3, [r3, #0]
 80114cc:	4a17      	ldr	r2, [pc, #92]	@ (801152c <Calculate_LED_ON+0x84>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d902      	bls.n	80114d8 <Calculate_LED_ON+0x30>
    solmV = 4700;
 80114d2:	4b13      	ldr	r3, [pc, #76]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114d4:	4a15      	ldr	r2, [pc, #84]	@ (801152c <Calculate_LED_ON+0x84>)
 80114d6:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 80114d8:	4b11      	ldr	r3, [pc, #68]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	0018      	movs	r0, r3
 80114de:	f7f1 ff6f 	bl	80033c0 <__aeabi_i2d>
 80114e2:	0004      	movs	r4, r0
 80114e4:	000d      	movs	r5, r1
 80114e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011520 <Calculate_LED_ON+0x78>)
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	001a      	movs	r2, r3
 80114ec:	4b10      	ldr	r3, [pc, #64]	@ (8011530 <Calculate_LED_ON+0x88>)
 80114ee:	1a9b      	subs	r3, r3, r2
 80114f0:	0018      	movs	r0, r3
 80114f2:	f7f1 ff65 	bl	80033c0 <__aeabi_i2d>
 80114f6:	2200      	movs	r2, #0
 80114f8:	4b0e      	ldr	r3, [pc, #56]	@ (8011534 <Calculate_LED_ON+0x8c>)
 80114fa:	f7f1 f89f 	bl	800263c <__aeabi_dmul>
 80114fe:	0002      	movs	r2, r0
 8011500:	000b      	movs	r3, r1
 8011502:	0020      	movs	r0, r4
 8011504:	0029      	movs	r1, r5
 8011506:	f7f0 f8f1 	bl	80016ec <__aeabi_dadd>
 801150a:	0002      	movs	r2, r0
 801150c:	000b      	movs	r3, r1
 801150e:	0010      	movs	r0, r2
 8011510:	0019      	movs	r1, r3
 8011512:	f7ef f89b 	bl	800064c <__aeabi_d2uiz>
 8011516:	0003      	movs	r3, r0
 8011518:	b29b      	uxth	r3, r3
}
 801151a:	0018      	movs	r0, r3
 801151c:	46bd      	mov	sp, r7
 801151e:	bdb0      	pop	{r4, r5, r7, pc}
 8011520:	20001e88 	.word	0x20001e88
 8011524:	00000b53 	.word	0x00000b53
 8011528:	00000b54 	.word	0x00000b54
 801152c:	0000125c 	.word	0x0000125c
 8011530:	00000dee 	.word	0x00000dee
 8011534:	3ff80000 	.word	0x3ff80000

08011538 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011538:	b590      	push	{r4, r7, lr}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	0004      	movs	r4, r0
 8011540:	0008      	movs	r0, r1
 8011542:	0011      	movs	r1, r2
 8011544:	1dbb      	adds	r3, r7, #6
 8011546:	1c22      	adds	r2, r4, #0
 8011548:	801a      	strh	r2, [r3, #0]
 801154a:	1d3b      	adds	r3, r7, #4
 801154c:	1c02      	adds	r2, r0, #0
 801154e:	801a      	strh	r2, [r3, #0]
 8011550:	1cbb      	adds	r3, r7, #2
 8011552:	1c0a      	adds	r2, r1, #0
 8011554:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011556:	4b0f      	ldr	r3, [pc, #60]	@ (8011594 <SetStatusLED+0x5c>)
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d107      	bne.n	801156e <SetStatusLED+0x36>
 801155e:	4b0e      	ldr	r3, [pc, #56]	@ (8011598 <SetStatusLED+0x60>)
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d103      	bne.n	801156e <SetStatusLED+0x36>
 8011566:	4b0d      	ldr	r3, [pc, #52]	@ (801159c <SetStatusLED+0x64>)
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00e      	beq.n	801158c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 801156e:	2380      	movs	r3, #128	@ 0x80
 8011570:	05db      	lsls	r3, r3, #23
 8011572:	1dba      	adds	r2, r7, #6
 8011574:	8812      	ldrh	r2, [r2, #0]
 8011576:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011578:	2380      	movs	r3, #128	@ 0x80
 801157a:	05db      	lsls	r3, r3, #23
 801157c:	1d3a      	adds	r2, r7, #4
 801157e:	8812      	ldrh	r2, [r2, #0]
 8011580:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011582:	2380      	movs	r3, #128	@ 0x80
 8011584:	05db      	lsls	r3, r3, #23
 8011586:	1cba      	adds	r2, r7, #2
 8011588:	8812      	ldrh	r2, [r2, #0]
 801158a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801158c:	46c0      	nop			@ (mov r8, r8)
 801158e:	46bd      	mov	sp, r7
 8011590:	b003      	add	sp, #12
 8011592:	bd90      	pop	{r4, r7, pc}
 8011594:	20001e75 	.word	0x20001e75
 8011598:	200000dc 	.word	0x200000dc
 801159c:	20001e76 	.word	0x20001e76

080115a0 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80115a0:	b590      	push	{r4, r7, lr}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	0004      	movs	r4, r0
 80115a8:	0008      	movs	r0, r1
 80115aa:	0011      	movs	r1, r2
 80115ac:	1dfb      	adds	r3, r7, #7
 80115ae:	1c22      	adds	r2, r4, #0
 80115b0:	701a      	strb	r2, [r3, #0]
 80115b2:	1dbb      	adds	r3, r7, #6
 80115b4:	1c02      	adds	r2, r0, #0
 80115b6:	701a      	strb	r2, [r3, #0]
 80115b8:	1d7b      	adds	r3, r7, #5
 80115ba:	1c0a      	adds	r2, r1, #0
 80115bc:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 80115be:	4b19      	ldr	r3, [pc, #100]	@ (8011624 <SetDBLED+0x84>)
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d107      	bne.n	80115d6 <SetDBLED+0x36>
 80115c6:	4b18      	ldr	r3, [pc, #96]	@ (8011628 <SetDBLED+0x88>)
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d103      	bne.n	80115d6 <SetDBLED+0x36>
 80115ce:	4b17      	ldr	r3, [pc, #92]	@ (801162c <SetDBLED+0x8c>)
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d022      	beq.n	801161c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80115d6:	1dfb      	adds	r3, r7, #7
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	2201      	movs	r2, #1
 80115dc:	4053      	eors	r3, r2
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	001a      	movs	r2, r3
 80115e2:	4b13      	ldr	r3, [pc, #76]	@ (8011630 <SetDBLED+0x90>)
 80115e4:	2101      	movs	r1, #1
 80115e6:	0018      	movs	r0, r3
 80115e8:	f003 fa31 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 80115ec:	1dbb      	adds	r3, r7, #6
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	2201      	movs	r2, #1
 80115f2:	4053      	eors	r3, r2
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	001a      	movs	r2, r3
 80115f8:	2380      	movs	r3, #128	@ 0x80
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	480c      	ldr	r0, [pc, #48]	@ (8011630 <SetDBLED+0x90>)
 80115fe:	0019      	movs	r1, r3
 8011600:	f003 fa25 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011604:	1d7b      	adds	r3, r7, #5
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2201      	movs	r2, #1
 801160a:	4053      	eors	r3, r2
 801160c:	b2db      	uxtb	r3, r3
 801160e:	001a      	movs	r2, r3
 8011610:	2380      	movs	r3, #128	@ 0x80
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	4806      	ldr	r0, [pc, #24]	@ (8011630 <SetDBLED+0x90>)
 8011616:	0019      	movs	r1, r3
 8011618:	f003 fa19 	bl	8014a4e <HAL_GPIO_WritePin>
  }
}
 801161c:	46c0      	nop			@ (mov r8, r8)
 801161e:	46bd      	mov	sp, r7
 8011620:	b003      	add	sp, #12
 8011622:	bd90      	pop	{r4, r7, pc}
 8011624:	20001e75 	.word	0x20001e75
 8011628:	200000dc 	.word	0x200000dc
 801162c:	20001e76 	.word	0x20001e76
 8011630:	50000400 	.word	0x50000400

08011634 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011634:	b590      	push	{r4, r7, lr}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	0004      	movs	r4, r0
 801163c:	0008      	movs	r0, r1
 801163e:	0011      	movs	r1, r2
 8011640:	1dbb      	adds	r3, r7, #6
 8011642:	1c22      	adds	r2, r4, #0
 8011644:	801a      	strh	r2, [r3, #0]
 8011646:	1d3b      	adds	r3, r7, #4
 8011648:	1c02      	adds	r2, r0, #0
 801164a:	801a      	strh	r2, [r3, #0]
 801164c:	1cbb      	adds	r3, r7, #2
 801164e:	1c0a      	adds	r2, r1, #0
 8011650:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011652:	4b0e      	ldr	r3, [pc, #56]	@ (801168c <SetVocLED+0x58>)
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d107      	bne.n	801166a <SetVocLED+0x36>
 801165a:	4b0d      	ldr	r3, [pc, #52]	@ (8011690 <SetVocLED+0x5c>)
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d103      	bne.n	801166a <SetVocLED+0x36>
 8011662:	4b0c      	ldr	r3, [pc, #48]	@ (8011694 <SetVocLED+0x60>)
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d00b      	beq.n	8011682 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 801166a:	4b0b      	ldr	r3, [pc, #44]	@ (8011698 <SetVocLED+0x64>)
 801166c:	1dba      	adds	r2, r7, #6
 801166e:	8812      	ldrh	r2, [r2, #0]
 8011670:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011672:	4b09      	ldr	r3, [pc, #36]	@ (8011698 <SetVocLED+0x64>)
 8011674:	1d3a      	adds	r2, r7, #4
 8011676:	8812      	ldrh	r2, [r2, #0]
 8011678:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 801167a:	4b07      	ldr	r3, [pc, #28]	@ (8011698 <SetVocLED+0x64>)
 801167c:	1cba      	adds	r2, r7, #2
 801167e:	8812      	ldrh	r2, [r2, #0]
 8011680:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011682:	46c0      	nop			@ (mov r8, r8)
 8011684:	46bd      	mov	sp, r7
 8011686:	b003      	add	sp, #12
 8011688:	bd90      	pop	{r4, r7, pc}
 801168a:	46c0      	nop			@ (mov r8, r8)
 801168c:	20001e75 	.word	0x20001e75
 8011690:	200000dc 	.word	0x200000dc
 8011694:	20001e76 	.word	0x20001e76
 8011698:	40000400 	.word	0x40000400

0801169c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 801169c:	b580      	push	{r7, lr}
 801169e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80116a0:	4b08      	ldr	r3, [pc, #32]	@ (80116c4 <SetMeasurementIndicator+0x28>)
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d103      	bne.n	80116b0 <SetMeasurementIndicator+0x14>
 80116a8:	4b07      	ldr	r3, [pc, #28]	@ (80116c8 <SetMeasurementIndicator+0x2c>)
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d006      	beq.n	80116be <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 80116b0:	f7ff fefa 	bl	80114a8 <Calculate_LED_ON>
 80116b4:	0003      	movs	r3, r0
 80116b6:	001a      	movs	r2, r3
 80116b8:	2380      	movs	r3, #128	@ 0x80
 80116ba:	05db      	lsls	r3, r3, #23
 80116bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80116be:	46c0      	nop			@ (mov r8, r8)
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	20001e75 	.word	0x20001e75
 80116c8:	20001e76 	.word	0x20001e76

080116cc <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80116cc:	b580      	push	{r7, lr}
 80116ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80116d0:	4b07      	ldr	r3, [pc, #28]	@ (80116f0 <ResetMeasurementIndicator+0x24>)
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d103      	bne.n	80116e0 <ResetMeasurementIndicator+0x14>
 80116d8:	4b06      	ldr	r3, [pc, #24]	@ (80116f4 <ResetMeasurementIndicator+0x28>)
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d004      	beq.n	80116ea <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 80116e0:	2380      	movs	r3, #128	@ 0x80
 80116e2:	05db      	lsls	r3, r3, #23
 80116e4:	22fa      	movs	r2, #250	@ 0xfa
 80116e6:	0112      	lsls	r2, r2, #4
 80116e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80116ea:	46c0      	nop			@ (mov r8, r8)
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	20001e75 	.word	0x20001e75
 80116f4:	20001e76 	.word	0x20001e76

080116f8 <SetMICIndicator>:
void SetMICIndicator(){
 80116f8:	b580      	push	{r7, lr}
 80116fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80116fc:	4b19      	ldr	r3, [pc, #100]	@ (8011764 <SetMICIndicator+0x6c>)
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d103      	bne.n	801170c <SetMICIndicator+0x14>
 8011704:	4b18      	ldr	r3, [pc, #96]	@ (8011768 <SetMICIndicator+0x70>)
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d007      	beq.n	801171c <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 801170c:	f7ff fecc 	bl	80114a8 <Calculate_LED_ON>
 8011710:	0003      	movs	r3, r0
 8011712:	001a      	movs	r2, r3
 8011714:	2380      	movs	r3, #128	@ 0x80
 8011716:	05db      	lsls	r3, r3, #23
 8011718:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 801171a:	e01f      	b.n	801175c <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 801171c:	4b13      	ldr	r3, [pc, #76]	@ (801176c <SetMICIndicator+0x74>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	1c18      	adds	r0, r3, #0
 8011722:	f7f1 fe9f 	bl	8003464 <__aeabi_f2d>
 8011726:	4a12      	ldr	r2, [pc, #72]	@ (8011770 <SetMICIndicator+0x78>)
 8011728:	4b12      	ldr	r3, [pc, #72]	@ (8011774 <SetMICIndicator+0x7c>)
 801172a:	f7ee fedb 	bl	80004e4 <__aeabi_dcmpgt>
 801172e:	1e03      	subs	r3, r0, #0
 8011730:	d00a      	beq.n	8011748 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8011732:	f7ff feb9 	bl	80114a8 <Calculate_LED_ON>
 8011736:	0003      	movs	r3, r0
 8011738:	001a      	movs	r2, r3
 801173a:	2380      	movs	r3, #128	@ 0x80
 801173c:	05db      	lsls	r3, r3, #23
 801173e:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8011740:	4b0d      	ldr	r3, [pc, #52]	@ (8011778 <SetMICIndicator+0x80>)
 8011742:	2202      	movs	r2, #2
 8011744:	701a      	strb	r2, [r3, #0]
}
 8011746:	e009      	b.n	801175c <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8011748:	f7ff feae 	bl	80114a8 <Calculate_LED_ON>
 801174c:	0003      	movs	r3, r0
 801174e:	001a      	movs	r2, r3
 8011750:	2380      	movs	r3, #128	@ 0x80
 8011752:	05db      	lsls	r3, r3, #23
 8011754:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8011756:	4b08      	ldr	r3, [pc, #32]	@ (8011778 <SetMICIndicator+0x80>)
 8011758:	2201      	movs	r2, #1
 801175a:	701a      	strb	r2, [r3, #0]
}
 801175c:	46c0      	nop			@ (mov r8, r8)
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	46c0      	nop			@ (mov r8, r8)
 8011764:	20001e75 	.word	0x20001e75
 8011768:	20001e76 	.word	0x20001e76
 801176c:	20001e84 	.word	0x20001e84
 8011770:	9999999a 	.word	0x9999999a
 8011774:	400d9999 	.word	0x400d9999
 8011778:	20001e78 	.word	0x20001e78

0801177c <ResetMICIndicator>:
void ResetMICIndicator(){
 801177c:	b580      	push	{r7, lr}
 801177e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011780:	4b0f      	ldr	r3, [pc, #60]	@ (80117c0 <ResetMICIndicator+0x44>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d103      	bne.n	8011790 <ResetMICIndicator+0x14>
 8011788:	4b0e      	ldr	r3, [pc, #56]	@ (80117c4 <ResetMICIndicator+0x48>)
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d005      	beq.n	801179c <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8011790:	2380      	movs	r3, #128	@ 0x80
 8011792:	05db      	lsls	r3, r3, #23
 8011794:	22fa      	movs	r2, #250	@ 0xfa
 8011796:	0112      	lsls	r2, r2, #4
 8011798:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 801179a:	e00e      	b.n	80117ba <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 801179c:	4b0a      	ldr	r3, [pc, #40]	@ (80117c8 <ResetMICIndicator+0x4c>)
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	2b02      	cmp	r3, #2
 80117a2:	d105      	bne.n	80117b0 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 80117a4:	2380      	movs	r3, #128	@ 0x80
 80117a6:	05db      	lsls	r3, r3, #23
 80117a8:	22fa      	movs	r2, #250	@ 0xfa
 80117aa:	0112      	lsls	r2, r2, #4
 80117ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80117ae:	e004      	b.n	80117ba <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 80117b0:	2380      	movs	r3, #128	@ 0x80
 80117b2:	05db      	lsls	r3, r3, #23
 80117b4:	22fa      	movs	r2, #250	@ 0xfa
 80117b6:	0112      	lsls	r2, r2, #4
 80117b8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80117ba:	46c0      	nop			@ (mov r8, r8)
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	20001e75 	.word	0x20001e75
 80117c4:	20001e76 	.word	0x20001e76
 80117c8:	20001e78 	.word	0x20001e78

080117cc <SetESPIndicator>:
void SetESPIndicator(){
 80117cc:	b580      	push	{r7, lr}
 80117ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80117d0:	4b08      	ldr	r3, [pc, #32]	@ (80117f4 <SetESPIndicator+0x28>)
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d103      	bne.n	80117e0 <SetESPIndicator+0x14>
 80117d8:	4b07      	ldr	r3, [pc, #28]	@ (80117f8 <SetESPIndicator+0x2c>)
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d006      	beq.n	80117ee <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80117e0:	f7ff fe62 	bl	80114a8 <Calculate_LED_ON>
 80117e4:	0003      	movs	r3, r0
 80117e6:	001a      	movs	r2, r3
 80117e8:	2380      	movs	r3, #128	@ 0x80
 80117ea:	05db      	lsls	r3, r3, #23
 80117ec:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80117ee:	46c0      	nop			@ (mov r8, r8)
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	20001e75 	.word	0x20001e75
 80117f8:	20001e76 	.word	0x20001e76

080117fc <ResetESPIndicator>:
void ResetESPIndicator(){
 80117fc:	b580      	push	{r7, lr}
 80117fe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011800:	4b07      	ldr	r3, [pc, #28]	@ (8011820 <ResetESPIndicator+0x24>)
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d103      	bne.n	8011810 <ResetESPIndicator+0x14>
 8011808:	4b06      	ldr	r3, [pc, #24]	@ (8011824 <ResetESPIndicator+0x28>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d004      	beq.n	801181a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8011810:	2380      	movs	r3, #128	@ 0x80
 8011812:	05db      	lsls	r3, r3, #23
 8011814:	22fa      	movs	r2, #250	@ 0xfa
 8011816:	0112      	lsls	r2, r2, #4
 8011818:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801181a:	46c0      	nop			@ (mov r8, r8)
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20001e75 	.word	0x20001e75
 8011824:	20001e76 	.word	0x20001e76

08011828 <SetPMIndicator>:

void SetPMIndicator() {
 8011828:	b580      	push	{r7, lr}
 801182a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801182c:	4b0f      	ldr	r3, [pc, #60]	@ (801186c <SetPMIndicator+0x44>)
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d103      	bne.n	801183c <SetPMIndicator+0x14>
 8011834:	4b0e      	ldr	r3, [pc, #56]	@ (8011870 <SetPMIndicator+0x48>)
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d014      	beq.n	8011866 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 801183c:	f7ff fe34 	bl	80114a8 <Calculate_LED_ON>
 8011840:	0003      	movs	r3, r0
 8011842:	001a      	movs	r2, r3
 8011844:	2380      	movs	r3, #128	@ 0x80
 8011846:	05db      	lsls	r3, r3, #23
 8011848:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801184a:	f7ff fe2d 	bl	80114a8 <Calculate_LED_ON>
 801184e:	0003      	movs	r3, r0
 8011850:	001a      	movs	r2, r3
 8011852:	2380      	movs	r3, #128	@ 0x80
 8011854:	05db      	lsls	r3, r3, #23
 8011856:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011858:	f7ff fe26 	bl	80114a8 <Calculate_LED_ON>
 801185c:	0003      	movs	r3, r0
 801185e:	001a      	movs	r2, r3
 8011860:	2380      	movs	r3, #128	@ 0x80
 8011862:	05db      	lsls	r3, r3, #23
 8011864:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011866:	46c0      	nop			@ (mov r8, r8)
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	20001e75 	.word	0x20001e75
 8011870:	20001e76 	.word	0x20001e76

08011874 <ResetPMIndicator>:

void ResetPMIndicator() {
 8011874:	b580      	push	{r7, lr}
 8011876:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011878:	4b0c      	ldr	r3, [pc, #48]	@ (80118ac <ResetPMIndicator+0x38>)
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d103      	bne.n	8011888 <ResetPMIndicator+0x14>
 8011880:	4b0b      	ldr	r3, [pc, #44]	@ (80118b0 <ResetPMIndicator+0x3c>)
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00e      	beq.n	80118a6 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8011888:	2380      	movs	r3, #128	@ 0x80
 801188a:	05db      	lsls	r3, r3, #23
 801188c:	22fa      	movs	r2, #250	@ 0xfa
 801188e:	0112      	lsls	r2, r2, #4
 8011890:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8011892:	2380      	movs	r3, #128	@ 0x80
 8011894:	05db      	lsls	r3, r3, #23
 8011896:	22fa      	movs	r2, #250	@ 0xfa
 8011898:	0112      	lsls	r2, r2, #4
 801189a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 801189c:	2380      	movs	r3, #128	@ 0x80
 801189e:	05db      	lsls	r3, r3, #23
 80118a0:	22fa      	movs	r2, #250	@ 0xfa
 80118a2:	0112      	lsls	r2, r2, #4
 80118a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80118a6:	46c0      	nop			@ (mov r8, r8)
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	20001e75 	.word	0x20001e75
 80118b0:	20001e76 	.word	0x20001e76

080118b4 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 80118b4:	b580      	push	{r7, lr}
 80118b6:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 80118b8:	23fa      	movs	r3, #250	@ 0xfa
 80118ba:	011a      	lsls	r2, r3, #4
 80118bc:	23fa      	movs	r3, #250	@ 0xfa
 80118be:	0119      	lsls	r1, r3, #4
 80118c0:	23fa      	movs	r3, #250	@ 0xfa
 80118c2:	011b      	lsls	r3, r3, #4
 80118c4:	0018      	movs	r0, r3
 80118c6:	f7ff fe37 	bl	8011538 <SetStatusLED>
  SetDBLED(false,false,false);
 80118ca:	2200      	movs	r2, #0
 80118cc:	2100      	movs	r1, #0
 80118ce:	2000      	movs	r0, #0
 80118d0:	f7ff fe66 	bl	80115a0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 80118d4:	23fa      	movs	r3, #250	@ 0xfa
 80118d6:	011a      	lsls	r2, r3, #4
 80118d8:	23fa      	movs	r3, #250	@ 0xfa
 80118da:	0119      	lsls	r1, r3, #4
 80118dc:	23fa      	movs	r3, #250	@ 0xfa
 80118de:	011b      	lsls	r3, r3, #4
 80118e0:	0018      	movs	r0, r3
 80118e2:	f7ff fea7 	bl	8011634 <SetVocLED>
return;
 80118e6:	46c0      	nop			@ (mov r8, r8)
}
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <SetAllREDLED>:

void SetAllREDLED() {
 80118ec:	b580      	push	{r7, lr}
 80118ee:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 80118f0:	2380      	movs	r3, #128	@ 0x80
 80118f2:	05db      	lsls	r3, r3, #23
 80118f4:	4a19      	ldr	r2, [pc, #100]	@ (801195c <SetAllREDLED+0x70>)
 80118f6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 80118f8:	2380      	movs	r3, #128	@ 0x80
 80118fa:	05db      	lsls	r3, r3, #23
 80118fc:	22fa      	movs	r2, #250	@ 0xfa
 80118fe:	0112      	lsls	r2, r2, #4
 8011900:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8011902:	2380      	movs	r3, #128	@ 0x80
 8011904:	05db      	lsls	r3, r3, #23
 8011906:	22fa      	movs	r2, #250	@ 0xfa
 8011908:	0112      	lsls	r2, r2, #4
 801190a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 801190c:	4b14      	ldr	r3, [pc, #80]	@ (8011960 <SetAllREDLED+0x74>)
 801190e:	4a13      	ldr	r2, [pc, #76]	@ (801195c <SetAllREDLED+0x70>)
 8011910:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8011912:	4b13      	ldr	r3, [pc, #76]	@ (8011960 <SetAllREDLED+0x74>)
 8011914:	22fa      	movs	r2, #250	@ 0xfa
 8011916:	0112      	lsls	r2, r2, #4
 8011918:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 801191a:	4b11      	ldr	r3, [pc, #68]	@ (8011960 <SetAllREDLED+0x74>)
 801191c:	22fa      	movs	r2, #250	@ 0xfa
 801191e:	0112      	lsls	r2, r2, #4
 8011920:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8011922:	4b10      	ldr	r3, [pc, #64]	@ (8011964 <SetAllREDLED+0x78>)
 8011924:	2200      	movs	r2, #0
 8011926:	2101      	movs	r1, #1
 8011928:	0018      	movs	r0, r3
 801192a:	f003 f890 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 801192e:	2380      	movs	r3, #128	@ 0x80
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	480c      	ldr	r0, [pc, #48]	@ (8011964 <SetAllREDLED+0x78>)
 8011934:	2201      	movs	r2, #1
 8011936:	0019      	movs	r1, r3
 8011938:	f003 f889 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 801193c:	2380      	movs	r3, #128	@ 0x80
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	4808      	ldr	r0, [pc, #32]	@ (8011964 <SetAllREDLED+0x78>)
 8011942:	2201      	movs	r2, #1
 8011944:	0019      	movs	r1, r3
 8011946:	f003 f882 	bl	8014a4e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 801194a:	23fa      	movs	r3, #250	@ 0xfa
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	0018      	movs	r0, r3
 8011950:	f001 fdf6 	bl	8013540 <HAL_Delay>
}
 8011954:	46c0      	nop			@ (mov r8, r8)
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	46c0      	nop			@ (mov r8, r8)
 801195c:	00000bb8 	.word	0x00000bb8
 8011960:	40000400 	.word	0x40000400
 8011964:	50000400 	.word	0x50000400

08011968 <SetAllBlueLED>:

void SetAllBlueLED() {
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 801196e:	1dfb      	adds	r3, r7, #7
 8011970:	2200      	movs	r2, #0
 8011972:	701a      	strb	r2, [r3, #0]
 8011974:	e03d      	b.n	80119f2 <SetAllBlueLED+0x8a>
    TIM2 -> CCR1 = LED_OFF;
 8011976:	2380      	movs	r3, #128	@ 0x80
 8011978:	05db      	lsls	r3, r3, #23
 801197a:	22fa      	movs	r2, #250	@ 0xfa
 801197c:	0112      	lsls	r2, r2, #4
 801197e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011980:	2380      	movs	r3, #128	@ 0x80
 8011982:	05db      	lsls	r3, r3, #23
 8011984:	22fa      	movs	r2, #250	@ 0xfa
 8011986:	0112      	lsls	r2, r2, #4
 8011988:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 801198a:	2380      	movs	r3, #128	@ 0x80
 801198c:	05db      	lsls	r3, r3, #23
 801198e:	4a1d      	ldr	r2, [pc, #116]	@ (8011a04 <SetAllBlueLED+0x9c>)
 8011990:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8011992:	4b1d      	ldr	r3, [pc, #116]	@ (8011a08 <SetAllBlueLED+0xa0>)
 8011994:	22fa      	movs	r2, #250	@ 0xfa
 8011996:	0112      	lsls	r2, r2, #4
 8011998:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 801199a:	4b1b      	ldr	r3, [pc, #108]	@ (8011a08 <SetAllBlueLED+0xa0>)
 801199c:	22fa      	movs	r2, #250	@ 0xfa
 801199e:	0112      	lsls	r2, r2, #4
 80119a0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 80119a2:	4b19      	ldr	r3, [pc, #100]	@ (8011a08 <SetAllBlueLED+0xa0>)
 80119a4:	4a17      	ldr	r2, [pc, #92]	@ (8011a04 <SetAllBlueLED+0x9c>)
 80119a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 80119a8:	4b18      	ldr	r3, [pc, #96]	@ (8011a0c <SetAllBlueLED+0xa4>)
 80119aa:	2201      	movs	r2, #1
 80119ac:	2101      	movs	r1, #1
 80119ae:	0018      	movs	r0, r3
 80119b0:	f003 f84d 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 80119b4:	2380      	movs	r3, #128	@ 0x80
 80119b6:	005b      	lsls	r3, r3, #1
 80119b8:	4814      	ldr	r0, [pc, #80]	@ (8011a0c <SetAllBlueLED+0xa4>)
 80119ba:	2201      	movs	r2, #1
 80119bc:	0019      	movs	r1, r3
 80119be:	f003 f846 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 80119c2:	2380      	movs	r3, #128	@ 0x80
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	4811      	ldr	r0, [pc, #68]	@ (8011a0c <SetAllBlueLED+0xa4>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	0019      	movs	r1, r3
 80119cc:	f003 f83f 	bl	8014a4e <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80119d0:	23fa      	movs	r3, #250	@ 0xfa
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	0018      	movs	r0, r3
 80119d6:	f001 fdb3 	bl	8013540 <HAL_Delay>
    SetLEDsOff();
 80119da:	f7ff ff6b 	bl	80118b4 <SetLEDsOff>
    HAL_Delay(500);
 80119de:	23fa      	movs	r3, #250	@ 0xfa
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	0018      	movs	r0, r3
 80119e4:	f001 fdac 	bl	8013540 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 80119e8:	1dfb      	adds	r3, r7, #7
 80119ea:	781a      	ldrb	r2, [r3, #0]
 80119ec:	1dfb      	adds	r3, r7, #7
 80119ee:	3201      	adds	r2, #1
 80119f0:	701a      	strb	r2, [r3, #0]
 80119f2:	1dfb      	adds	r3, r7, #7
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	2b02      	cmp	r3, #2
 80119f8:	d9bd      	bls.n	8011976 <SetAllBlueLED+0xe>
  }
}
 80119fa:	46c0      	nop			@ (mov r8, r8)
 80119fc:	46c0      	nop			@ (mov r8, r8)
 80119fe:	46bd      	mov	sp, r7
 8011a00:	b002      	add	sp, #8
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	00000bb8 	.word	0x00000bb8
 8011a08:	40000400 	.word	0x40000400
 8011a0c:	50000400 	.word	0x50000400

08011a10 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8011a10:	b5b0      	push	{r4, r5, r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	0002      	movs	r2, r0
 8011a18:	1dbb      	adds	r3, r7, #6
 8011a1a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8011a1c:	1dbb      	adds	r3, r7, #6
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d05a      	beq.n	8011ada <SetVOCindicator+0xca>
 8011a24:	1dbb      	adds	r3, r7, #6
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	2b64      	cmp	r3, #100	@ 0x64
 8011a2a:	d856      	bhi.n	8011ada <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8011a2c:	1dbb      	adds	r3, r7, #6
 8011a2e:	881b      	ldrh	r3, [r3, #0]
 8011a30:	0018      	movs	r0, r3
 8011a32:	f7f1 fcc5 	bl	80033c0 <__aeabi_i2d>
 8011a36:	2200      	movs	r2, #0
 8011a38:	4b5f      	ldr	r3, [pc, #380]	@ (8011bb8 <SetVOCindicator+0x1a8>)
 8011a3a:	f7f0 f9bb 	bl	8001db4 <__aeabi_ddiv>
 8011a3e:	0002      	movs	r2, r0
 8011a40:	000b      	movs	r3, r1
 8011a42:	2000      	movs	r0, #0
 8011a44:	495d      	ldr	r1, [pc, #372]	@ (8011bbc <SetVOCindicator+0x1ac>)
 8011a46:	f7f1 f8c1 	bl	8002bcc <__aeabi_dsub>
 8011a4a:	0002      	movs	r2, r0
 8011a4c:	000b      	movs	r3, r1
 8011a4e:	0014      	movs	r4, r2
 8011a50:	001d      	movs	r5, r3
 8011a52:	4b5b      	ldr	r3, [pc, #364]	@ (8011bc0 <SetVOCindicator+0x1b0>)
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	0018      	movs	r0, r3
 8011a58:	f7f1 fcb2 	bl	80033c0 <__aeabi_i2d>
 8011a5c:	0002      	movs	r2, r0
 8011a5e:	000b      	movs	r3, r1
 8011a60:	0020      	movs	r0, r4
 8011a62:	0029      	movs	r1, r5
 8011a64:	f7f0 fdea 	bl	800263c <__aeabi_dmul>
 8011a68:	0002      	movs	r2, r0
 8011a6a:	000b      	movs	r3, r1
 8011a6c:	0010      	movs	r0, r2
 8011a6e:	0019      	movs	r1, r3
 8011a70:	f7ee fdec 	bl	800064c <__aeabi_d2uiz>
 8011a74:	0003      	movs	r3, r0
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	4b52      	ldr	r3, [pc, #328]	@ (8011bc4 <SetVOCindicator+0x1b4>)
 8011a7a:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8011a7c:	1dbb      	adds	r3, r7, #6
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	0018      	movs	r0, r3
 8011a82:	f7f1 fc9d 	bl	80033c0 <__aeabi_i2d>
 8011a86:	2200      	movs	r2, #0
 8011a88:	4b4b      	ldr	r3, [pc, #300]	@ (8011bb8 <SetVOCindicator+0x1a8>)
 8011a8a:	f7f0 f993 	bl	8001db4 <__aeabi_ddiv>
 8011a8e:	0002      	movs	r2, r0
 8011a90:	000b      	movs	r3, r1
 8011a92:	0014      	movs	r4, r2
 8011a94:	001d      	movs	r5, r3
 8011a96:	4b4a      	ldr	r3, [pc, #296]	@ (8011bc0 <SetVOCindicator+0x1b0>)
 8011a98:	881b      	ldrh	r3, [r3, #0]
 8011a9a:	0018      	movs	r0, r3
 8011a9c:	f7f1 fc90 	bl	80033c0 <__aeabi_i2d>
 8011aa0:	0002      	movs	r2, r0
 8011aa2:	000b      	movs	r3, r1
 8011aa4:	0020      	movs	r0, r4
 8011aa6:	0029      	movs	r1, r5
 8011aa8:	f7f0 fdc8 	bl	800263c <__aeabi_dmul>
 8011aac:	0002      	movs	r2, r0
 8011aae:	000b      	movs	r3, r1
 8011ab0:	0010      	movs	r0, r2
 8011ab2:	0019      	movs	r1, r3
 8011ab4:	f7ee fdca 	bl	800064c <__aeabi_d2uiz>
 8011ab8:	0003      	movs	r3, r0
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	4b42      	ldr	r3, [pc, #264]	@ (8011bc8 <SetVOCindicator+0x1b8>)
 8011abe:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8011ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8011bc0 <SetVOCindicator+0x1b0>)
 8011ac2:	881a      	ldrh	r2, [r3, #0]
 8011ac4:	4b41      	ldr	r3, [pc, #260]	@ (8011bcc <SetVOCindicator+0x1bc>)
 8011ac6:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8011ac8:	4b40      	ldr	r3, [pc, #256]	@ (8011bcc <SetVOCindicator+0x1bc>)
 8011aca:	8818      	ldrh	r0, [r3, #0]
 8011acc:	4b3d      	ldr	r3, [pc, #244]	@ (8011bc4 <SetVOCindicator+0x1b4>)
 8011ace:	8819      	ldrh	r1, [r3, #0]
 8011ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8011bc8 <SetVOCindicator+0x1b8>)
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	001a      	movs	r2, r3
 8011ad6:	f7ff fdad 	bl	8011634 <SetVocLED>
  }
  if(VOCi > 100){
 8011ada:	1dbb      	adds	r3, r7, #6
 8011adc:	881b      	ldrh	r3, [r3, #0]
 8011ade:	2b64      	cmp	r3, #100	@ 0x64
 8011ae0:	d966      	bls.n	8011bb0 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8011ae2:	1dbb      	adds	r3, r7, #6
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	0018      	movs	r0, r3
 8011ae8:	f7f1 fc6a 	bl	80033c0 <__aeabi_i2d>
 8011aec:	2200      	movs	r2, #0
 8011aee:	4b32      	ldr	r3, [pc, #200]	@ (8011bb8 <SetVOCindicator+0x1a8>)
 8011af0:	f7f1 f86c 	bl	8002bcc <__aeabi_dsub>
 8011af4:	0002      	movs	r2, r0
 8011af6:	000b      	movs	r3, r1
 8011af8:	0010      	movs	r0, r2
 8011afa:	0019      	movs	r1, r3
 8011afc:	2200      	movs	r2, #0
 8011afe:	4b34      	ldr	r3, [pc, #208]	@ (8011bd0 <SetVOCindicator+0x1c0>)
 8011b00:	f7f0 f958 	bl	8001db4 <__aeabi_ddiv>
 8011b04:	0002      	movs	r2, r0
 8011b06:	000b      	movs	r3, r1
 8011b08:	0014      	movs	r4, r2
 8011b0a:	001d      	movs	r5, r3
 8011b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8011bc0 <SetVOCindicator+0x1b0>)
 8011b0e:	881b      	ldrh	r3, [r3, #0]
 8011b10:	0018      	movs	r0, r3
 8011b12:	f7f1 fc55 	bl	80033c0 <__aeabi_i2d>
 8011b16:	0002      	movs	r2, r0
 8011b18:	000b      	movs	r3, r1
 8011b1a:	0020      	movs	r0, r4
 8011b1c:	0029      	movs	r1, r5
 8011b1e:	f7f0 fd8d 	bl	800263c <__aeabi_dmul>
 8011b22:	0002      	movs	r2, r0
 8011b24:	000b      	movs	r3, r1
 8011b26:	0010      	movs	r0, r2
 8011b28:	0019      	movs	r1, r3
 8011b2a:	f7ee fd8f 	bl	800064c <__aeabi_d2uiz>
 8011b2e:	0003      	movs	r3, r0
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	4b24      	ldr	r3, [pc, #144]	@ (8011bc4 <SetVOCindicator+0x1b4>)
 8011b34:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8011b36:	1dbb      	adds	r3, r7, #6
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	0018      	movs	r0, r3
 8011b3c:	f7f1 fc40 	bl	80033c0 <__aeabi_i2d>
 8011b40:	2200      	movs	r2, #0
 8011b42:	4b1d      	ldr	r3, [pc, #116]	@ (8011bb8 <SetVOCindicator+0x1a8>)
 8011b44:	f7f1 f842 	bl	8002bcc <__aeabi_dsub>
 8011b48:	0002      	movs	r2, r0
 8011b4a:	000b      	movs	r3, r1
 8011b4c:	0010      	movs	r0, r2
 8011b4e:	0019      	movs	r1, r3
 8011b50:	2200      	movs	r2, #0
 8011b52:	4b1f      	ldr	r3, [pc, #124]	@ (8011bd0 <SetVOCindicator+0x1c0>)
 8011b54:	f7f0 f92e 	bl	8001db4 <__aeabi_ddiv>
 8011b58:	0002      	movs	r2, r0
 8011b5a:	000b      	movs	r3, r1
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	4917      	ldr	r1, [pc, #92]	@ (8011bbc <SetVOCindicator+0x1ac>)
 8011b60:	f7f1 f834 	bl	8002bcc <__aeabi_dsub>
 8011b64:	0002      	movs	r2, r0
 8011b66:	000b      	movs	r3, r1
 8011b68:	0014      	movs	r4, r2
 8011b6a:	001d      	movs	r5, r3
 8011b6c:	4b14      	ldr	r3, [pc, #80]	@ (8011bc0 <SetVOCindicator+0x1b0>)
 8011b6e:	881b      	ldrh	r3, [r3, #0]
 8011b70:	0018      	movs	r0, r3
 8011b72:	f7f1 fc25 	bl	80033c0 <__aeabi_i2d>
 8011b76:	0002      	movs	r2, r0
 8011b78:	000b      	movs	r3, r1
 8011b7a:	0020      	movs	r0, r4
 8011b7c:	0029      	movs	r1, r5
 8011b7e:	f7f0 fd5d 	bl	800263c <__aeabi_dmul>
 8011b82:	0002      	movs	r2, r0
 8011b84:	000b      	movs	r3, r1
 8011b86:	0010      	movs	r0, r2
 8011b88:	0019      	movs	r1, r3
 8011b8a:	f7ee fd5f 	bl	800064c <__aeabi_d2uiz>
 8011b8e:	0003      	movs	r3, r0
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	4b0e      	ldr	r3, [pc, #56]	@ (8011bcc <SetVOCindicator+0x1bc>)
 8011b94:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8011b96:	4b0a      	ldr	r3, [pc, #40]	@ (8011bc0 <SetVOCindicator+0x1b0>)
 8011b98:	881a      	ldrh	r2, [r3, #0]
 8011b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8011bc8 <SetVOCindicator+0x1b8>)
 8011b9c:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8011b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8011bcc <SetVOCindicator+0x1bc>)
 8011ba0:	8818      	ldrh	r0, [r3, #0]
 8011ba2:	4b08      	ldr	r3, [pc, #32]	@ (8011bc4 <SetVOCindicator+0x1b4>)
 8011ba4:	8819      	ldrh	r1, [r3, #0]
 8011ba6:	4b08      	ldr	r3, [pc, #32]	@ (8011bc8 <SetVOCindicator+0x1b8>)
 8011ba8:	881b      	ldrh	r3, [r3, #0]
 8011baa:	001a      	movs	r2, r3
 8011bac:	f7ff fd42 	bl	8011634 <SetVocLED>
  }

}
 8011bb0:	46c0      	nop			@ (mov r8, r8)
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	b002      	add	sp, #8
 8011bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8011bb8:	40590000 	.word	0x40590000
 8011bbc:	3ff00000 	.word	0x3ff00000
 8011bc0:	200000de 	.word	0x200000de
 8011bc4:	20001e8a 	.word	0x20001e8a
 8011bc8:	20001e8c 	.word	0x20001e8c
 8011bcc:	20001e8e 	.word	0x20001e8e
 8011bd0:	40790000 	.word	0x40790000

08011bd4 <powerCheck>:

Battery_Status powerCheck(){
 8011bd4:	b590      	push	{r4, r7, lr}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8011bda:	f7f7 f953 	bl	8008e84 <Check_USB_PowerOn>
 8011bde:	0003      	movs	r3, r0
 8011be0:	001a      	movs	r2, r3
 8011be2:	2301      	movs	r3, #1
 8011be4:	4053      	eors	r3, r2
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d005      	beq.n	8011bf8 <powerCheck+0x24>
    status = batteryChargeCheck();
 8011bec:	1dfc      	adds	r4, r7, #7
 8011bee:	f7ff fc01 	bl	80113f4 <batteryChargeCheck>
 8011bf2:	0003      	movs	r3, r0
 8011bf4:	7023      	strb	r3, [r4, #0]
 8011bf6:	e002      	b.n	8011bfe <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8011bf8:	1dfb      	adds	r3, r7, #7
 8011bfa:	2204      	movs	r2, #4
 8011bfc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8011bfe:	1dfb      	adds	r3, r7, #7
 8011c00:	781b      	ldrb	r3, [r3, #0]
}
 8011c02:	0018      	movs	r0, r3
 8011c04:	46bd      	mov	sp, r7
 8011c06:	b003      	add	sp, #12
 8011c08:	bd90      	pop	{r4, r7, pc}
	...

08011c0c <powerDisplay>:

void powerDisplay(Battery_Status status){
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	0002      	movs	r2, r0
 8011c14:	1dfb      	adds	r3, r7, #7
 8011c16:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8011c18:	1dfb      	adds	r3, r7, #7
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	2b04      	cmp	r3, #4
 8011c1e:	d105      	bne.n	8011c2c <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 8011c20:	4a18      	ldr	r2, [pc, #96]	@ (8011c84 <powerDisplay+0x78>)
 8011c22:	4b19      	ldr	r3, [pc, #100]	@ (8011c88 <powerDisplay+0x7c>)
 8011c24:	0019      	movs	r1, r3
 8011c26:	2003      	movs	r0, #3
 8011c28:	f000 ff4a 	bl	8012ac0 <CreateLine>

  }
  if(status == BATTERY_FULL){
 8011c2c:	1dfb      	adds	r3, r7, #7
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	2b03      	cmp	r3, #3
 8011c32:	d105      	bne.n	8011c40 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8011c34:	4a15      	ldr	r2, [pc, #84]	@ (8011c8c <powerDisplay+0x80>)
 8011c36:	4b14      	ldr	r3, [pc, #80]	@ (8011c88 <powerDisplay+0x7c>)
 8011c38:	0019      	movs	r1, r3
 8011c3a:	2003      	movs	r0, #3
 8011c3c:	f000 ff40 	bl	8012ac0 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8011c40:	1dfb      	adds	r3, r7, #7
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d105      	bne.n	8011c54 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8011c48:	4a11      	ldr	r2, [pc, #68]	@ (8011c90 <powerDisplay+0x84>)
 8011c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8011c88 <powerDisplay+0x7c>)
 8011c4c:	0019      	movs	r1, r3
 8011c4e:	2003      	movs	r0, #3
 8011c50:	f000 ff36 	bl	8012ac0 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8011c54:	1dfb      	adds	r3, r7, #7
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d105      	bne.n	8011c68 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8011c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8011c94 <powerDisplay+0x88>)
 8011c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8011c88 <powerDisplay+0x7c>)
 8011c60:	0019      	movs	r1, r3
 8011c62:	2003      	movs	r0, #3
 8011c64:	f000 ff2c 	bl	8012ac0 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8011c68:	1dfb      	adds	r3, r7, #7
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d105      	bne.n	8011c7c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8011c70:	4a09      	ldr	r2, [pc, #36]	@ (8011c98 <powerDisplay+0x8c>)
 8011c72:	4b05      	ldr	r3, [pc, #20]	@ (8011c88 <powerDisplay+0x7c>)
 8011c74:	0019      	movs	r1, r3
 8011c76:	2003      	movs	r0, #3
 8011c78:	f000 ff22 	bl	8012ac0 <CreateLine>
  }
}
 8011c7c:	46c0      	nop			@ (mov r8, r8)
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	b002      	add	sp, #8
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	0802ca54 	.word	0x0802ca54
 8011c88:	0802ca78 	.word	0x0802ca78
 8011c8c:	0802ca7c 	.word	0x0802ca7c
 8011c90:	0802ca94 	.word	0x0802ca94
 8011c94:	0802cab4 	.word	0x0802cab4
 8011c98:	0802cacc 	.word	0x0802cacc

08011c9c <configCheck>:

void configCheck(){
 8011c9c:	b590      	push	{r4, r7, lr}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8011ca2:	f7f7 f8fe 	bl	8008ea2 <BootButton_Pressed>
 8011ca6:	1e03      	subs	r3, r0, #0
 8011ca8:	d007      	beq.n	8011cba <configCheck+0x1e>
 8011caa:	f7f7 f90b 	bl	8008ec4 <UserButton_Pressed>
 8011cae:	1e03      	subs	r3, r0, #0
 8011cb0:	d003      	beq.n	8011cba <configCheck+0x1e>
    configSet = true;
 8011cb2:	4bb5      	ldr	r3, [pc, #724]	@ (8011f88 <configCheck+0x2ec>)
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	701a      	strb	r2, [r3, #0]
 8011cb8:	e00a      	b.n	8011cd0 <configCheck+0x34>
  }
  else{
    configSet = false;
 8011cba:	4bb3      	ldr	r3, [pc, #716]	@ (8011f88 <configCheck+0x2ec>)
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8011cc0:	f001 fc34 	bl	801352c <HAL_GetTick>
 8011cc4:	0003      	movs	r3, r0
 8011cc6:	22fa      	movs	r2, #250	@ 0xfa
 8011cc8:	00d2      	lsls	r2, r2, #3
 8011cca:	189a      	adds	r2, r3, r2
 8011ccc:	4baf      	ldr	r3, [pc, #700]	@ (8011f8c <configCheck+0x2f0>)
 8011cce:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8011cd0:	4bad      	ldr	r3, [pc, #692]	@ (8011f88 <configCheck+0x2ec>)
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d00d      	beq.n	8011cf4 <configCheck+0x58>
 8011cd8:	4bac      	ldr	r3, [pc, #688]	@ (8011f8c <configCheck+0x2f0>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	0018      	movs	r0, r3
 8011cde:	f000 fe99 	bl	8012a14 <TimestampIsReached>
 8011ce2:	1e03      	subs	r3, r0, #0
 8011ce4:	d006      	beq.n	8011cf4 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8011ce6:	f7f2 fe7f 	bl	80049e8 <SetConfigMode>
    SetDBLED(true, true, true);
 8011cea:	2201      	movs	r2, #1
 8011cec:	2101      	movs	r1, #1
 8011cee:	2001      	movs	r0, #1
 8011cf0:	f7ff fc56 	bl	80115a0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8011cf4:	f7f7 f8d5 	bl	8008ea2 <BootButton_Pressed>
 8011cf8:	0003      	movs	r3, r0
 8011cfa:	001a      	movs	r2, r3
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	4053      	eors	r3, r2
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d05a      	beq.n	8011dbc <configCheck+0x120>
 8011d06:	f7f7 f8dd 	bl	8008ec4 <UserButton_Pressed>
 8011d0a:	1e03      	subs	r3, r0, #0
 8011d0c:	d056      	beq.n	8011dbc <configCheck+0x120>
 8011d0e:	4ba0      	ldr	r3, [pc, #640]	@ (8011f90 <configCheck+0x2f4>)
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	2201      	movs	r2, #1
 8011d14:	4053      	eors	r3, r2
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d04f      	beq.n	8011dbc <configCheck+0x120>
 8011d1c:	f7f2 fe84 	bl	8004a28 <GetReconfigMode>
 8011d20:	0003      	movs	r3, r0
 8011d22:	001a      	movs	r2, r3
 8011d24:	2301      	movs	r3, #1
 8011d26:	4053      	eors	r3, r2
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d046      	beq.n	8011dbc <configCheck+0x120>
    SetLEDsOff();
 8011d2e:	f7ff fdc1 	bl	80118b4 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8011d32:	4a98      	ldr	r2, [pc, #608]	@ (8011f94 <configCheck+0x2f8>)
 8011d34:	4997      	ldr	r1, [pc, #604]	@ (8011f94 <configCheck+0x2f8>)
 8011d36:	4b97      	ldr	r3, [pc, #604]	@ (8011f94 <configCheck+0x2f8>)
 8011d38:	0018      	movs	r0, r3
 8011d3a:	f7ff fc7b 	bl	8011634 <SetVocLED>
    HAL_Delay(1500);
 8011d3e:	4b96      	ldr	r3, [pc, #600]	@ (8011f98 <configCheck+0x2fc>)
 8011d40:	0018      	movs	r0, r3
 8011d42:	f001 fbfd 	bl	8013540 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8011d46:	23fa      	movs	r3, #250	@ 0xfa
 8011d48:	011a      	lsls	r2, r3, #4
 8011d4a:	23fa      	movs	r3, #250	@ 0xfa
 8011d4c:	0119      	lsls	r1, r3, #4
 8011d4e:	23fa      	movs	r3, #250	@ 0xfa
 8011d50:	011b      	lsls	r3, r3, #4
 8011d52:	0018      	movs	r0, r3
 8011d54:	f7ff fc6e 	bl	8011634 <SetVocLED>
    userToggle = !userToggle;
 8011d58:	4b90      	ldr	r3, [pc, #576]	@ (8011f9c <configCheck+0x300>)
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	1e5a      	subs	r2, r3, #1
 8011d5e:	4193      	sbcs	r3, r2
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	2201      	movs	r2, #1
 8011d64:	4053      	eors	r3, r2
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	1c1a      	adds	r2, r3, #0
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	4b8a      	ldr	r3, [pc, #552]	@ (8011f9c <configCheck+0x300>)
 8011d72:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8011d74:	4b89      	ldr	r3, [pc, #548]	@ (8011f9c <configCheck+0x300>)
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d002      	beq.n	8011d82 <configCheck+0xe6>
      EnabledConnectedDevices();
 8011d7c:	f7fa feee 	bl	800cb5c <EnabledConnectedDevices>
 8011d80:	e004      	b.n	8011d8c <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8011d82:	f001 fbd3 	bl	801352c <HAL_GetTick>
 8011d86:	0002      	movs	r2, r0
 8011d88:	4b85      	ldr	r3, [pc, #532]	@ (8011fa0 <configCheck+0x304>)
 8011d8a:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8011d8c:	4b83      	ldr	r3, [pc, #524]	@ (8011f9c <configCheck+0x300>)
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <configCheck+0xfc>
 8011d94:	4b83      	ldr	r3, [pc, #524]	@ (8011fa4 <configCheck+0x308>)
 8011d96:	e000      	b.n	8011d9a <configCheck+0xfe>
 8011d98:	4b83      	ldr	r3, [pc, #524]	@ (8011fa8 <configCheck+0x30c>)
 8011d9a:	4a84      	ldr	r2, [pc, #528]	@ (8011fac <configCheck+0x310>)
 8011d9c:	4984      	ldr	r1, [pc, #528]	@ (8011fb0 <configCheck+0x314>)
 8011d9e:	2003      	movs	r0, #3
 8011da0:	f000 fe8e 	bl	8012ac0 <CreateLine>
    userbuttonHeld = true;
 8011da4:	4b7a      	ldr	r3, [pc, #488]	@ (8011f90 <configCheck+0x2f4>)
 8011da6:	2201      	movs	r2, #1
 8011da8:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8011daa:	f001 fbbf 	bl	801352c <HAL_GetTick>
 8011dae:	0003      	movs	r3, r0
 8011db0:	22fa      	movs	r2, #250	@ 0xfa
 8011db2:	00d2      	lsls	r2, r2, #3
 8011db4:	189a      	adds	r2, r3, r2
 8011db6:	4b7f      	ldr	r3, [pc, #508]	@ (8011fb4 <configCheck+0x318>)
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	e002      	b.n	8011dc2 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8011dbc:	4b74      	ldr	r3, [pc, #464]	@ (8011f90 <configCheck+0x2f4>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8011dc2:	f7f7 f86e 	bl	8008ea2 <BootButton_Pressed>
 8011dc6:	0003      	movs	r3, r0
 8011dc8:	001a      	movs	r2, r3
 8011dca:	2301      	movs	r3, #1
 8011dcc:	4053      	eors	r3, r2
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d100      	bne.n	8011dd6 <configCheck+0x13a>
 8011dd4:	e0a4      	b.n	8011f20 <configCheck+0x284>
 8011dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8011f90 <configCheck+0x2f4>)
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d100      	bne.n	8011de0 <configCheck+0x144>
 8011dde:	e09f      	b.n	8011f20 <configCheck+0x284>
 8011de0:	4b74      	ldr	r3, [pc, #464]	@ (8011fb4 <configCheck+0x318>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	0018      	movs	r0, r3
 8011de6:	f000 fe15 	bl	8012a14 <TimestampIsReached>
 8011dea:	1e03      	subs	r3, r0, #0
 8011dec:	d100      	bne.n	8011df0 <configCheck+0x154>
 8011dee:	e097      	b.n	8011f20 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8011df0:	f7fa faf0 	bl	800c3d4 <GetPMSensorPresence>
 8011df4:	1e03      	subs	r3, r0, #0
 8011df6:	d100      	bne.n	8011dfa <configCheck+0x15e>
 8011df8:	e082      	b.n	8011f00 <configCheck+0x264>
 8011dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8011fb8 <configCheck+0x31c>)
 8011dfc:	791b      	ldrb	r3, [r3, #4]
 8011dfe:	2b34      	cmp	r3, #52	@ 0x34
 8011e00:	d004      	beq.n	8011e0c <configCheck+0x170>
 8011e02:	4b6d      	ldr	r3, [pc, #436]	@ (8011fb8 <configCheck+0x31c>)
 8011e04:	791b      	ldrb	r3, [r3, #4]
 8011e06:	2b35      	cmp	r3, #53	@ 0x35
 8011e08:	d000      	beq.n	8011e0c <configCheck+0x170>
 8011e0a:	e079      	b.n	8011f00 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8011e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8011fbc <configCheck+0x320>)
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	1e5a      	subs	r2, r3, #1
 8011e12:	4193      	sbcs	r3, r2
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	2201      	movs	r2, #1
 8011e18:	4053      	eors	r3, r2
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	1c1a      	adds	r2, r3, #0
 8011e1e:	2301      	movs	r3, #1
 8011e20:	4013      	ands	r3, r2
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	4b65      	ldr	r3, [pc, #404]	@ (8011fbc <configCheck+0x320>)
 8011e26:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8011e28:	4b64      	ldr	r3, [pc, #400]	@ (8011fbc <configCheck+0x320>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d005      	beq.n	8011e3c <configCheck+0x1a0>
 8011e30:	1dbc      	adds	r4, r7, #6
 8011e32:	f7ff fb39 	bl	80114a8 <Calculate_LED_ON>
 8011e36:	0003      	movs	r3, r0
 8011e38:	8023      	strh	r3, [r4, #0]
 8011e3a:	e003      	b.n	8011e44 <configCheck+0x1a8>
        else color = 4000;
 8011e3c:	1dbb      	adds	r3, r7, #6
 8011e3e:	22fa      	movs	r2, #250	@ 0xfa
 8011e40:	0112      	lsls	r2, r2, #4
 8011e42:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8011e44:	4b5d      	ldr	r3, [pc, #372]	@ (8011fbc <configCheck+0x320>)
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d001      	beq.n	8011e50 <configCheck+0x1b4>
 8011e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8011fc0 <configCheck+0x324>)
 8011e4e:	e000      	b.n	8011e52 <configCheck+0x1b6>
 8011e50:	4b5c      	ldr	r3, [pc, #368]	@ (8011fc4 <configCheck+0x328>)
 8011e52:	4a5d      	ldr	r2, [pc, #372]	@ (8011fc8 <configCheck+0x32c>)
 8011e54:	495d      	ldr	r1, [pc, #372]	@ (8011fcc <configCheck+0x330>)
 8011e56:	2002      	movs	r0, #2
 8011e58:	f000 fe32 	bl	8012ac0 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8011e5c:	1d7b      	adds	r3, r7, #5
 8011e5e:	2200      	movs	r2, #0
 8011e60:	701a      	strb	r2, [r3, #0]
 8011e62:	e028      	b.n	8011eb6 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8011e64:	f7ff fb20 	bl	80114a8 <Calculate_LED_ON>
 8011e68:	0003      	movs	r3, r0
 8011e6a:	001a      	movs	r2, r3
 8011e6c:	4b58      	ldr	r3, [pc, #352]	@ (8011fd0 <configCheck+0x334>)
 8011e6e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8011e70:	4b57      	ldr	r3, [pc, #348]	@ (8011fd0 <configCheck+0x334>)
 8011e72:	1dba      	adds	r2, r7, #6
 8011e74:	8812      	ldrh	r2, [r2, #0]
 8011e76:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8011e78:	4b55      	ldr	r3, [pc, #340]	@ (8011fd0 <configCheck+0x334>)
 8011e7a:	1dba      	adds	r2, r7, #6
 8011e7c:	8812      	ldrh	r2, [r2, #0]
 8011e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8011e80:	23c8      	movs	r3, #200	@ 0xc8
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	0018      	movs	r0, r3
 8011e86:	f001 fb5b 	bl	8013540 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8011e8a:	4b51      	ldr	r3, [pc, #324]	@ (8011fd0 <configCheck+0x334>)
 8011e8c:	22fa      	movs	r2, #250	@ 0xfa
 8011e8e:	0112      	lsls	r2, r2, #4
 8011e90:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8011e92:	4b4f      	ldr	r3, [pc, #316]	@ (8011fd0 <configCheck+0x334>)
 8011e94:	22fa      	movs	r2, #250	@ 0xfa
 8011e96:	0112      	lsls	r2, r2, #4
 8011e98:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8011e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8011fd0 <configCheck+0x334>)
 8011e9c:	22fa      	movs	r2, #250	@ 0xfa
 8011e9e:	0112      	lsls	r2, r2, #4
 8011ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8011ea2:	23c8      	movs	r3, #200	@ 0xc8
 8011ea4:	005b      	lsls	r3, r3, #1
 8011ea6:	0018      	movs	r0, r3
 8011ea8:	f001 fb4a 	bl	8013540 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8011eac:	1d7b      	adds	r3, r7, #5
 8011eae:	781a      	ldrb	r2, [r3, #0]
 8011eb0:	1d7b      	adds	r3, r7, #5
 8011eb2:	3201      	adds	r2, #1
 8011eb4:	701a      	strb	r2, [r3, #0]
 8011eb6:	1d7b      	adds	r3, r7, #5
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	d9d2      	bls.n	8011e64 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8011ebe:	4b37      	ldr	r3, [pc, #220]	@ (8011f9c <configCheck+0x300>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	1e5a      	subs	r2, r3, #1
 8011ec4:	4193      	sbcs	r3, r2
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	2201      	movs	r2, #1
 8011eca:	4053      	eors	r3, r2
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	1c1a      	adds	r2, r3, #0
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	4013      	ands	r3, r2
 8011ed4:	b2da      	uxtb	r2, r3
 8011ed6:	4b31      	ldr	r3, [pc, #196]	@ (8011f9c <configCheck+0x300>)
 8011ed8:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8011eda:	4b30      	ldr	r3, [pc, #192]	@ (8011f9c <configCheck+0x300>)
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d001      	beq.n	8011ee6 <configCheck+0x24a>
 8011ee2:	4b37      	ldr	r3, [pc, #220]	@ (8011fc0 <configCheck+0x324>)
 8011ee4:	e000      	b.n	8011ee8 <configCheck+0x24c>
 8011ee6:	4b37      	ldr	r3, [pc, #220]	@ (8011fc4 <configCheck+0x328>)
 8011ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8011fd4 <configCheck+0x338>)
 8011eea:	4938      	ldr	r1, [pc, #224]	@ (8011fcc <configCheck+0x330>)
 8011eec:	2002      	movs	r0, #2
 8011eee:	f000 fde7 	bl	8012ac0 <CreateLine>
      if (usbPluggedIn) {
 8011ef2:	4b39      	ldr	r3, [pc, #228]	@ (8011fd8 <configCheck+0x33c>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d009      	beq.n	8011f0e <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8011efa:	f7fb ffe7 	bl	800decc <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8011efe:	e006      	b.n	8011f0e <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8011f00:	4a36      	ldr	r2, [pc, #216]	@ (8011fdc <configCheck+0x340>)
 8011f02:	4b32      	ldr	r3, [pc, #200]	@ (8011fcc <configCheck+0x330>)
 8011f04:	0019      	movs	r1, r3
 8011f06:	2002      	movs	r0, #2
 8011f08:	f000 fdda 	bl	8012ac0 <CreateLine>
 8011f0c:	e000      	b.n	8011f10 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8011f0e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8011f10:	46c0      	nop			@ (mov r8, r8)
 8011f12:	f7f6 ffd7 	bl	8008ec4 <UserButton_Pressed>
 8011f16:	1e03      	subs	r3, r0, #0
 8011f18:	d1fb      	bne.n	8011f12 <configCheck+0x276>
    }
    userbuttonHeld = false;
 8011f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8011f90 <configCheck+0x2f4>)
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8011f20:	f7f6 ffbf 	bl	8008ea2 <BootButton_Pressed>
 8011f24:	0003      	movs	r3, r0
 8011f26:	001a      	movs	r2, r3
 8011f28:	2301      	movs	r3, #1
 8011f2a:	4053      	eors	r3, r2
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d00b      	beq.n	8011f4a <configCheck+0x2ae>
 8011f32:	f7f6 ffc7 	bl	8008ec4 <UserButton_Pressed>
 8011f36:	0003      	movs	r3, r0
 8011f38:	001a      	movs	r2, r3
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	4053      	eors	r3, r2
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <configCheck+0x2ae>
    userbuttonHeld = false;
 8011f44:	4b12      	ldr	r3, [pc, #72]	@ (8011f90 <configCheck+0x2f4>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8011f4a:	f7f6 ff9b 	bl	8008e84 <Check_USB_PowerOn>
 8011f4e:	1e03      	subs	r3, r0, #0
 8011f50:	d003      	beq.n	8011f5a <configCheck+0x2be>
    usbPluggedIn = true;
 8011f52:	4b21      	ldr	r3, [pc, #132]	@ (8011fd8 <configCheck+0x33c>)
 8011f54:	2201      	movs	r2, #1
 8011f56:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8011f58:	e012      	b.n	8011f80 <configCheck+0x2e4>
    if(!userToggle && !init){
 8011f5a:	4b10      	ldr	r3, [pc, #64]	@ (8011f9c <configCheck+0x300>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	4053      	eors	r3, r2
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d008      	beq.n	8011f7a <configCheck+0x2de>
 8011f68:	4b1d      	ldr	r3, [pc, #116]	@ (8011fe0 <configCheck+0x344>)
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	4053      	eors	r3, r2
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <configCheck+0x2de>
      SetLEDsOff();
 8011f76:	f7ff fc9d 	bl	80118b4 <SetLEDsOff>
    usbPluggedIn = false;
 8011f7a:	4b17      	ldr	r3, [pc, #92]	@ (8011fd8 <configCheck+0x33c>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	701a      	strb	r2, [r3, #0]
}
 8011f80:	46c0      	nop			@ (mov r8, r8)
 8011f82:	46bd      	mov	sp, r7
 8011f84:	b003      	add	sp, #12
 8011f86:	bd90      	pop	{r4, r7, pc}
 8011f88:	20001e74 	.word	0x20001e74
 8011f8c:	20001e7c 	.word	0x20001e7c
 8011f90:	20001e77 	.word	0x20001e77
 8011f94:	00000bb8 	.word	0x00000bb8
 8011f98:	000005dc 	.word	0x000005dc
 8011f9c:	20001e76 	.word	0x20001e76
 8011fa0:	20000e3c 	.word	0x20000e3c
 8011fa4:	0802caf0 	.word	0x0802caf0
 8011fa8:	0802caf4 	.word	0x0802caf4
 8011fac:	0802caf8 	.word	0x0802caf8
 8011fb0:	0802ca78 	.word	0x0802ca78
 8011fb4:	20001e80 	.word	0x20001e80
 8011fb8:	20000ee8 	.word	0x20000ee8
 8011fbc:	20000ee6 	.word	0x20000ee6
 8011fc0:	0802cb18 	.word	0x0802cb18
 8011fc4:	0802cb20 	.word	0x0802cb20
 8011fc8:	0802cb2c 	.word	0x0802cb2c
 8011fcc:	0802cb4c 	.word	0x0802cb4c
 8011fd0:	40000400 	.word	0x40000400
 8011fd4:	0802cb50 	.word	0x0802cb50
 8011fd8:	20001e75 	.word	0x20001e75
 8011fdc:	0802cb68 	.word	0x0802cb68
 8011fe0:	200000dc 	.word	0x200000dc

08011fe4 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8011fe4:	b590      	push	{r4, r7, lr}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8011fea:	1dfc      	adds	r4, r7, #7
 8011fec:	f7ff fdf2 	bl	8011bd4 <powerCheck>
 8011ff0:	0003      	movs	r3, r0
 8011ff2:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8011ff4:	1dfb      	adds	r3, r7, #7
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	0018      	movs	r0, r3
 8011ffa:	f7ff fe07 	bl	8011c0c <powerDisplay>
  return status;
 8011ffe:	1dfb      	adds	r3, r7, #7
 8012000:	781b      	ldrb	r3, [r3, #0]
}
 8012002:	0018      	movs	r0, r3
 8012004:	46bd      	mov	sp, r7
 8012006:	b003      	add	sp, #12
 8012008:	bd90      	pop	{r4, r7, pc}
	...

0801200c <setuserToggle>:

void setuserToggle(void) {
 801200c:	b580      	push	{r7, lr}
 801200e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8012010:	f7ff fde0 	bl	8011bd4 <powerCheck>
 8012014:	0003      	movs	r3, r0
 8012016:	2b04      	cmp	r3, #4
 8012018:	d004      	beq.n	8012024 <setuserToggle+0x18>
    userToggle = true;
 801201a:	4b04      	ldr	r3, [pc, #16]	@ (801202c <setuserToggle+0x20>)
 801201c:	2201      	movs	r2, #1
 801201e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8012020:	f7fa fd9c 	bl	800cb5c <EnabledConnectedDevices>
  }
}
 8012024:	46c0      	nop			@ (mov r8, r8)
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	46c0      	nop			@ (mov r8, r8)
 801202c:	20001e76 	.word	0x20001e76

08012030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012034:	4b07      	ldr	r3, [pc, #28]	@ (8012054 <HAL_MspInit+0x24>)
 8012036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012038:	4b06      	ldr	r3, [pc, #24]	@ (8012054 <HAL_MspInit+0x24>)
 801203a:	2101      	movs	r1, #1
 801203c:	430a      	orrs	r2, r1
 801203e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8012040:	4b04      	ldr	r3, [pc, #16]	@ (8012054 <HAL_MspInit+0x24>)
 8012042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012044:	4b03      	ldr	r3, [pc, #12]	@ (8012054 <HAL_MspInit+0x24>)
 8012046:	2180      	movs	r1, #128	@ 0x80
 8012048:	0549      	lsls	r1, r1, #21
 801204a:	430a      	orrs	r2, r1
 801204c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801204e:	46c0      	nop			@ (mov r8, r8)
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	40021000 	.word	0x40021000

08012058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801205c:	46c0      	nop			@ (mov r8, r8)
 801205e:	e7fd      	b.n	801205c <NMI_Handler+0x4>

08012060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012064:	46c0      	nop			@ (mov r8, r8)
 8012066:	e7fd      	b.n	8012064 <HardFault_Handler+0x4>

08012068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 801206c:	46c0      	nop			@ (mov r8, r8)
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012072:	b580      	push	{r7, lr}
 8012074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012076:	46c0      	nop			@ (mov r8, r8)
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012080:	f001 fa42 	bl	8013508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8012084:	46c0      	nop			@ (mov r8, r8)
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
	...

0801208c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012090:	4b03      	ldr	r3, [pc, #12]	@ (80120a0 <RTC_IRQHandler+0x14>)
 8012092:	0018      	movs	r0, r3
 8012094:	f009 fa00 	bl	801b498 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8012098:	46c0      	nop			@ (mov r8, r8)
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	46c0      	nop			@ (mov r8, r8)
 80120a0:	20000ec0 	.word	0x20000ec0

080120a4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 80120a8:	2380      	movs	r3, #128	@ 0x80
 80120aa:	021b      	lsls	r3, r3, #8
 80120ac:	0018      	movs	r0, r3
 80120ae:	f002 fceb 	bl	8014a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80120b2:	46c0      	nop			@ (mov r8, r8)
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80120bc:	4b05      	ldr	r3, [pc, #20]	@ (80120d4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80120be:	0018      	movs	r0, r3
 80120c0:	f002 f873 	bl	80141aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80120c4:	4b04      	ldr	r3, [pc, #16]	@ (80120d8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80120c6:	0018      	movs	r0, r3
 80120c8:	f002 f86f 	bl	80141aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80120cc:	46c0      	nop			@ (mov r8, r8)
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	46c0      	nop			@ (mov r8, r8)
 80120d4:	20000d58 	.word	0x20000d58
 80120d8:	20000d10 	.word	0x20000d10

080120dc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80120e0:	4b07      	ldr	r3, [pc, #28]	@ (8012100 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80120e2:	0018      	movs	r0, r3
 80120e4:	f002 f861 	bl	80141aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80120e8:	4b06      	ldr	r3, [pc, #24]	@ (8012104 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80120ea:	0018      	movs	r0, r3
 80120ec:	f002 f85d 	bl	80141aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80120f0:	4b05      	ldr	r3, [pc, #20]	@ (8012108 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80120f2:	0018      	movs	r0, r3
 80120f4:	f002 f859 	bl	80141aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80120f8:	46c0      	nop			@ (mov r8, r8)
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	46c0      	nop			@ (mov r8, r8)
 8012100:	20000ddc 	.word	0x20000ddc
 8012104:	2000217c 	.word	0x2000217c
 8012108:	200021c4 	.word	0x200021c4

0801210c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8012110:	4b03      	ldr	r3, [pc, #12]	@ (8012120 <USART4_5_IRQHandler+0x14>)
 8012112:	0018      	movs	r0, r3
 8012114:	f00a f8ba 	bl	801c28c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8012118:	46c0      	nop			@ (mov r8, r8)
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	46c0      	nop			@ (mov r8, r8)
 8012120:	200020c4 	.word	0x200020c4

08012124 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8012128:	4b09      	ldr	r3, [pc, #36]	@ (8012150 <I2C1_IRQHandler+0x2c>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	699a      	ldr	r2, [r3, #24]
 801212e:	23e0      	movs	r3, #224	@ 0xe0
 8012130:	00db      	lsls	r3, r3, #3
 8012132:	4013      	ands	r3, r2
 8012134:	d004      	beq.n	8012140 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8012136:	4b06      	ldr	r3, [pc, #24]	@ (8012150 <I2C1_IRQHandler+0x2c>)
 8012138:	0018      	movs	r0, r3
 801213a:	f003 fbc3 	bl	80158c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 801213e:	e003      	b.n	8012148 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8012140:	4b03      	ldr	r3, [pc, #12]	@ (8012150 <I2C1_IRQHandler+0x2c>)
 8012142:	0018      	movs	r0, r3
 8012144:	f003 fba4 	bl	8015890 <HAL_I2C_EV_IRQHandler>
}
 8012148:	46c0      	nop			@ (mov r8, r8)
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	46c0      	nop			@ (mov r8, r8)
 8012150:	20000c68 	.word	0x20000c68

08012154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012158:	4b03      	ldr	r3, [pc, #12]	@ (8012168 <USART1_IRQHandler+0x14>)
 801215a:	0018      	movs	r0, r3
 801215c:	f00a f896 	bl	801c28c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8012160:	46c0      	nop			@ (mov r8, r8)
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	46c0      	nop			@ (mov r8, r8)
 8012168:	2000200c 	.word	0x2000200c

0801216c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8012170:	4b03      	ldr	r3, [pc, #12]	@ (8012180 <USB_IRQHandler+0x14>)
 8012172:	0018      	movs	r0, r3
 8012174:	f005 ffe6 	bl	8018144 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8012178:	46c0      	nop			@ (mov r8, r8)
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}
 801217e:	46c0      	nop			@ (mov r8, r8)
 8012180:	20002fe0 	.word	0x20002fe0

08012184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	af00      	add	r7, sp, #0
  return 1;
 8012188:	2301      	movs	r3, #1
}
 801218a:	0018      	movs	r0, r3
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <_kill>:

int _kill(int pid, int sig)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801219a:	f012 ff7d 	bl	8025098 <__errno>
 801219e:	0003      	movs	r3, r0
 80121a0:	2216      	movs	r2, #22
 80121a2:	601a      	str	r2, [r3, #0]
  return -1;
 80121a4:	2301      	movs	r3, #1
 80121a6:	425b      	negs	r3, r3
}
 80121a8:	0018      	movs	r0, r3
 80121aa:	46bd      	mov	sp, r7
 80121ac:	b002      	add	sp, #8
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <_exit>:

void _exit (int status)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80121b8:	2301      	movs	r3, #1
 80121ba:	425a      	negs	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	0011      	movs	r1, r2
 80121c0:	0018      	movs	r0, r3
 80121c2:	f7ff ffe5 	bl	8012190 <_kill>
  while (1) {}    /* Make sure we hang here */
 80121c6:	46c0      	nop			@ (mov r8, r8)
 80121c8:	e7fd      	b.n	80121c6 <_exit+0x16>

080121ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80121ca:	b580      	push	{r7, lr}
 80121cc:	b086      	sub	sp, #24
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	60f8      	str	r0, [r7, #12]
 80121d2:	60b9      	str	r1, [r7, #8]
 80121d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121d6:	2300      	movs	r3, #0
 80121d8:	617b      	str	r3, [r7, #20]
 80121da:	e00a      	b.n	80121f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80121dc:	e000      	b.n	80121e0 <_read+0x16>
 80121de:	bf00      	nop
 80121e0:	0001      	movs	r1, r0
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	60ba      	str	r2, [r7, #8]
 80121e8:	b2ca      	uxtb	r2, r1
 80121ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	3301      	adds	r3, #1
 80121f0:	617b      	str	r3, [r7, #20]
 80121f2:	697a      	ldr	r2, [r7, #20]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	dbf0      	blt.n	80121dc <_read+0x12>
  }

  return len;
 80121fa:	687b      	ldr	r3, [r7, #4]
}
 80121fc:	0018      	movs	r0, r3
 80121fe:	46bd      	mov	sp, r7
 8012200:	b006      	add	sp, #24
 8012202:	bd80      	pop	{r7, pc}

08012204 <_close>:
  }
  return len;
}

int _close(int file)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801220c:	2301      	movs	r3, #1
 801220e:	425b      	negs	r3, r3
}
 8012210:	0018      	movs	r0, r3
 8012212:	46bd      	mov	sp, r7
 8012214:	b002      	add	sp, #8
 8012216:	bd80      	pop	{r7, pc}

08012218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	2280      	movs	r2, #128	@ 0x80
 8012226:	0192      	lsls	r2, r2, #6
 8012228:	605a      	str	r2, [r3, #4]
  return 0;
 801222a:	2300      	movs	r3, #0
}
 801222c:	0018      	movs	r0, r3
 801222e:	46bd      	mov	sp, r7
 8012230:	b002      	add	sp, #8
 8012232:	bd80      	pop	{r7, pc}

08012234 <_isatty>:

int _isatty(int file)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801223c:	2301      	movs	r3, #1
}
 801223e:	0018      	movs	r0, r3
 8012240:	46bd      	mov	sp, r7
 8012242:	b002      	add	sp, #8
 8012244:	bd80      	pop	{r7, pc}

08012246 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b084      	sub	sp, #16
 801224a:	af00      	add	r7, sp, #0
 801224c:	60f8      	str	r0, [r7, #12]
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012252:	2300      	movs	r3, #0
}
 8012254:	0018      	movs	r0, r3
 8012256:	46bd      	mov	sp, r7
 8012258:	b004      	add	sp, #16
 801225a:	bd80      	pop	{r7, pc}

0801225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b086      	sub	sp, #24
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012264:	4a14      	ldr	r2, [pc, #80]	@ (80122b8 <_sbrk+0x5c>)
 8012266:	4b15      	ldr	r3, [pc, #84]	@ (80122bc <_sbrk+0x60>)
 8012268:	1ad3      	subs	r3, r2, r3
 801226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012270:	4b13      	ldr	r3, [pc, #76]	@ (80122c0 <_sbrk+0x64>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d102      	bne.n	801227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012278:	4b11      	ldr	r3, [pc, #68]	@ (80122c0 <_sbrk+0x64>)
 801227a:	4a12      	ldr	r2, [pc, #72]	@ (80122c4 <_sbrk+0x68>)
 801227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801227e:	4b10      	ldr	r3, [pc, #64]	@ (80122c0 <_sbrk+0x64>)
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	18d3      	adds	r3, r2, r3
 8012286:	693a      	ldr	r2, [r7, #16]
 8012288:	429a      	cmp	r2, r3
 801228a:	d207      	bcs.n	801229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801228c:	f012 ff04 	bl	8025098 <__errno>
 8012290:	0003      	movs	r3, r0
 8012292:	220c      	movs	r2, #12
 8012294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012296:	2301      	movs	r3, #1
 8012298:	425b      	negs	r3, r3
 801229a:	e009      	b.n	80122b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801229c:	4b08      	ldr	r3, [pc, #32]	@ (80122c0 <_sbrk+0x64>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80122a2:	4b07      	ldr	r3, [pc, #28]	@ (80122c0 <_sbrk+0x64>)
 80122a4:	681a      	ldr	r2, [r3, #0]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	18d2      	adds	r2, r2, r3
 80122aa:	4b05      	ldr	r3, [pc, #20]	@ (80122c0 <_sbrk+0x64>)
 80122ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80122ae:	68fb      	ldr	r3, [r7, #12]
}
 80122b0:	0018      	movs	r0, r3
 80122b2:	46bd      	mov	sp, r7
 80122b4:	b006      	add	sp, #24
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20005000 	.word	0x20005000
 80122bc:	00000400 	.word	0x00000400
 80122c0:	20001e90 	.word	0x20001e90
 80122c4:	20003640 	.word	0x20003640

080122c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80122cc:	46c0      	nop			@ (mov r8, r8)
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
	...

080122d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b086      	sub	sp, #24
 80122d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80122da:	2310      	movs	r3, #16
 80122dc:	18fb      	adds	r3, r7, r3
 80122de:	0018      	movs	r0, r3
 80122e0:	2308      	movs	r3, #8
 80122e2:	001a      	movs	r2, r3
 80122e4:	2100      	movs	r1, #0
 80122e6:	f012 fe33 	bl	8024f50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80122ea:	003b      	movs	r3, r7
 80122ec:	0018      	movs	r0, r3
 80122ee:	2310      	movs	r3, #16
 80122f0:	001a      	movs	r2, r3
 80122f2:	2100      	movs	r1, #0
 80122f4:	f012 fe2c 	bl	8024f50 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80122f8:	4b2e      	ldr	r3, [pc, #184]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 80122fa:	2280      	movs	r2, #128	@ 0x80
 80122fc:	05d2      	lsls	r2, r2, #23
 80122fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012300:	4b2c      	ldr	r3, [pc, #176]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012302:	2200      	movs	r2, #0
 8012304:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012306:	4b2b      	ldr	r3, [pc, #172]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012308:	2200      	movs	r2, #0
 801230a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 801230c:	4b29      	ldr	r3, [pc, #164]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 801230e:	4a2a      	ldr	r2, [pc, #168]	@ (80123b8 <MX_TIM2_Init+0xe4>)
 8012310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012312:	4b28      	ldr	r3, [pc, #160]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012314:	2200      	movs	r2, #0
 8012316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012318:	4b26      	ldr	r3, [pc, #152]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 801231a:	2200      	movs	r2, #0
 801231c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801231e:	4b25      	ldr	r3, [pc, #148]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012320:	0018      	movs	r0, r3
 8012322:	f009 f9c7 	bl	801b6b4 <HAL_TIM_PWM_Init>
 8012326:	1e03      	subs	r3, r0, #0
 8012328:	d001      	beq.n	801232e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 801232a:	f7fa f801 	bl	800c330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801232e:	2110      	movs	r1, #16
 8012330:	187b      	adds	r3, r7, r1
 8012332:	2200      	movs	r2, #0
 8012334:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012336:	187b      	adds	r3, r7, r1
 8012338:	2200      	movs	r2, #0
 801233a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801233c:	187a      	adds	r2, r7, r1
 801233e:	4b1d      	ldr	r3, [pc, #116]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012340:	0011      	movs	r1, r2
 8012342:	0018      	movs	r0, r3
 8012344:	f009 fcd4 	bl	801bcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8012348:	1e03      	subs	r3, r0, #0
 801234a:	d001      	beq.n	8012350 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 801234c:	f7f9 fff0 	bl	800c330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012350:	003b      	movs	r3, r7
 8012352:	2260      	movs	r2, #96	@ 0x60
 8012354:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012356:	003b      	movs	r3, r7
 8012358:	2200      	movs	r2, #0
 801235a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801235c:	003b      	movs	r3, r7
 801235e:	2200      	movs	r2, #0
 8012360:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012362:	003b      	movs	r3, r7
 8012364:	2200      	movs	r2, #0
 8012366:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012368:	0039      	movs	r1, r7
 801236a:	4b12      	ldr	r3, [pc, #72]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 801236c:	2200      	movs	r2, #0
 801236e:	0018      	movs	r0, r3
 8012370:	f009 fa72 	bl	801b858 <HAL_TIM_PWM_ConfigChannel>
 8012374:	1e03      	subs	r3, r0, #0
 8012376:	d001      	beq.n	801237c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8012378:	f7f9 ffda 	bl	800c330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801237c:	0039      	movs	r1, r7
 801237e:	4b0d      	ldr	r3, [pc, #52]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012380:	2208      	movs	r2, #8
 8012382:	0018      	movs	r0, r3
 8012384:	f009 fa68 	bl	801b858 <HAL_TIM_PWM_ConfigChannel>
 8012388:	1e03      	subs	r3, r0, #0
 801238a:	d001      	beq.n	8012390 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 801238c:	f7f9 ffd0 	bl	800c330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012390:	0039      	movs	r1, r7
 8012392:	4b08      	ldr	r3, [pc, #32]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 8012394:	220c      	movs	r2, #12
 8012396:	0018      	movs	r0, r3
 8012398:	f009 fa5e 	bl	801b858 <HAL_TIM_PWM_ConfigChannel>
 801239c:	1e03      	subs	r3, r0, #0
 801239e:	d001      	beq.n	80123a4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80123a0:	f7f9 ffc6 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80123a4:	4b03      	ldr	r3, [pc, #12]	@ (80123b4 <MX_TIM2_Init+0xe0>)
 80123a6:	0018      	movs	r0, r3
 80123a8:	f000 f8fe 	bl	80125a8 <HAL_TIM_MspPostInit>

}
 80123ac:	46c0      	nop			@ (mov r8, r8)
 80123ae:	46bd      	mov	sp, r7
 80123b0:	b006      	add	sp, #24
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	20001e94 	.word	0x20001e94
 80123b8:	0000ffff 	.word	0x0000ffff

080123bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80123c2:	2310      	movs	r3, #16
 80123c4:	18fb      	adds	r3, r7, r3
 80123c6:	0018      	movs	r0, r3
 80123c8:	2308      	movs	r3, #8
 80123ca:	001a      	movs	r2, r3
 80123cc:	2100      	movs	r1, #0
 80123ce:	f012 fdbf 	bl	8024f50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80123d2:	003b      	movs	r3, r7
 80123d4:	0018      	movs	r0, r3
 80123d6:	2310      	movs	r3, #16
 80123d8:	001a      	movs	r2, r3
 80123da:	2100      	movs	r1, #0
 80123dc:	f012 fdb8 	bl	8024f50 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80123e0:	4b32      	ldr	r3, [pc, #200]	@ (80124ac <MX_TIM3_Init+0xf0>)
 80123e2:	4a33      	ldr	r2, [pc, #204]	@ (80124b0 <MX_TIM3_Init+0xf4>)
 80123e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80123e6:	4b31      	ldr	r3, [pc, #196]	@ (80124ac <MX_TIM3_Init+0xf0>)
 80123e8:	2200      	movs	r2, #0
 80123ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80123ec:	4b2f      	ldr	r3, [pc, #188]	@ (80124ac <MX_TIM3_Init+0xf0>)
 80123ee:	2200      	movs	r2, #0
 80123f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80123f2:	4b2e      	ldr	r3, [pc, #184]	@ (80124ac <MX_TIM3_Init+0xf0>)
 80123f4:	4a2f      	ldr	r2, [pc, #188]	@ (80124b4 <MX_TIM3_Init+0xf8>)
 80123f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80123f8:	4b2c      	ldr	r3, [pc, #176]	@ (80124ac <MX_TIM3_Init+0xf0>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80123fe:	4b2b      	ldr	r3, [pc, #172]	@ (80124ac <MX_TIM3_Init+0xf0>)
 8012400:	2200      	movs	r2, #0
 8012402:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8012404:	4b29      	ldr	r3, [pc, #164]	@ (80124ac <MX_TIM3_Init+0xf0>)
 8012406:	0018      	movs	r0, r3
 8012408:	f009 f954 	bl	801b6b4 <HAL_TIM_PWM_Init>
 801240c:	1e03      	subs	r3, r0, #0
 801240e:	d001      	beq.n	8012414 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012410:	f7f9 ff8e 	bl	800c330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012414:	2110      	movs	r1, #16
 8012416:	187b      	adds	r3, r7, r1
 8012418:	2200      	movs	r2, #0
 801241a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801241c:	187b      	adds	r3, r7, r1
 801241e:	2200      	movs	r2, #0
 8012420:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012422:	187a      	adds	r2, r7, r1
 8012424:	4b21      	ldr	r3, [pc, #132]	@ (80124ac <MX_TIM3_Init+0xf0>)
 8012426:	0011      	movs	r1, r2
 8012428:	0018      	movs	r0, r3
 801242a:	f009 fc61 	bl	801bcf0 <HAL_TIMEx_MasterConfigSynchronization>
 801242e:	1e03      	subs	r3, r0, #0
 8012430:	d001      	beq.n	8012436 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012432:	f7f9 ff7d 	bl	800c330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012436:	003b      	movs	r3, r7
 8012438:	2260      	movs	r2, #96	@ 0x60
 801243a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801243c:	003b      	movs	r3, r7
 801243e:	2200      	movs	r2, #0
 8012440:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012442:	003b      	movs	r3, r7
 8012444:	2200      	movs	r2, #0
 8012446:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012448:	003b      	movs	r3, r7
 801244a:	2200      	movs	r2, #0
 801244c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801244e:	0039      	movs	r1, r7
 8012450:	4b16      	ldr	r3, [pc, #88]	@ (80124ac <MX_TIM3_Init+0xf0>)
 8012452:	2200      	movs	r2, #0
 8012454:	0018      	movs	r0, r3
 8012456:	f009 f9ff 	bl	801b858 <HAL_TIM_PWM_ConfigChannel>
 801245a:	1e03      	subs	r3, r0, #0
 801245c:	d001      	beq.n	8012462 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 801245e:	f7f9 ff67 	bl	800c330 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012462:	4b12      	ldr	r3, [pc, #72]	@ (80124ac <MX_TIM3_Init+0xf0>)
 8012464:	2104      	movs	r1, #4
 8012466:	0018      	movs	r0, r3
 8012468:	f009 fca0 	bl	801bdac <HAL_TIMEx_RemapConfig>
 801246c:	1e03      	subs	r3, r0, #0
 801246e:	d001      	beq.n	8012474 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012470:	f7f9 ff5e 	bl	800c330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012474:	0039      	movs	r1, r7
 8012476:	4b0d      	ldr	r3, [pc, #52]	@ (80124ac <MX_TIM3_Init+0xf0>)
 8012478:	2204      	movs	r2, #4
 801247a:	0018      	movs	r0, r3
 801247c:	f009 f9ec 	bl	801b858 <HAL_TIM_PWM_ConfigChannel>
 8012480:	1e03      	subs	r3, r0, #0
 8012482:	d001      	beq.n	8012488 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012484:	f7f9 ff54 	bl	800c330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012488:	0039      	movs	r1, r7
 801248a:	4b08      	ldr	r3, [pc, #32]	@ (80124ac <MX_TIM3_Init+0xf0>)
 801248c:	2208      	movs	r2, #8
 801248e:	0018      	movs	r0, r3
 8012490:	f009 f9e2 	bl	801b858 <HAL_TIM_PWM_ConfigChannel>
 8012494:	1e03      	subs	r3, r0, #0
 8012496:	d001      	beq.n	801249c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012498:	f7f9 ff4a 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801249c:	4b03      	ldr	r3, [pc, #12]	@ (80124ac <MX_TIM3_Init+0xf0>)
 801249e:	0018      	movs	r0, r3
 80124a0:	f000 f882 	bl	80125a8 <HAL_TIM_MspPostInit>

}
 80124a4:	46c0      	nop			@ (mov r8, r8)
 80124a6:	46bd      	mov	sp, r7
 80124a8:	b006      	add	sp, #24
 80124aa:	bd80      	pop	{r7, pc}
 80124ac:	20001ed4 	.word	0x20001ed4
 80124b0:	40000400 	.word	0x40000400
 80124b4:	0000ffff 	.word	0x0000ffff

080124b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80124be:	003b      	movs	r3, r7
 80124c0:	0018      	movs	r0, r3
 80124c2:	2308      	movs	r3, #8
 80124c4:	001a      	movs	r2, r3
 80124c6:	2100      	movs	r1, #0
 80124c8:	f012 fd42 	bl	8024f50 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80124cc:	4b15      	ldr	r3, [pc, #84]	@ (8012524 <MX_TIM6_Init+0x6c>)
 80124ce:	4a16      	ldr	r2, [pc, #88]	@ (8012528 <MX_TIM6_Init+0x70>)
 80124d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80124d2:	4b14      	ldr	r3, [pc, #80]	@ (8012524 <MX_TIM6_Init+0x6c>)
 80124d4:	220a      	movs	r2, #10
 80124d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80124d8:	4b12      	ldr	r3, [pc, #72]	@ (8012524 <MX_TIM6_Init+0x6c>)
 80124da:	2200      	movs	r2, #0
 80124dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80124de:	4b11      	ldr	r3, [pc, #68]	@ (8012524 <MX_TIM6_Init+0x6c>)
 80124e0:	4a12      	ldr	r2, [pc, #72]	@ (801252c <MX_TIM6_Init+0x74>)
 80124e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80124e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012524 <MX_TIM6_Init+0x6c>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80124ea:	4b0e      	ldr	r3, [pc, #56]	@ (8012524 <MX_TIM6_Init+0x6c>)
 80124ec:	0018      	movs	r0, r3
 80124ee:	f009 f839 	bl	801b564 <HAL_TIM_Base_Init>
 80124f2:	1e03      	subs	r3, r0, #0
 80124f4:	d001      	beq.n	80124fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80124f6:	f7f9 ff1b 	bl	800c330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80124fa:	003b      	movs	r3, r7
 80124fc:	2200      	movs	r2, #0
 80124fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012500:	003b      	movs	r3, r7
 8012502:	2200      	movs	r2, #0
 8012504:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012506:	003a      	movs	r2, r7
 8012508:	4b06      	ldr	r3, [pc, #24]	@ (8012524 <MX_TIM6_Init+0x6c>)
 801250a:	0011      	movs	r1, r2
 801250c:	0018      	movs	r0, r3
 801250e:	f009 fbef 	bl	801bcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8012512:	1e03      	subs	r3, r0, #0
 8012514:	d001      	beq.n	801251a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012516:	f7f9 ff0b 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801251a:	46c0      	nop			@ (mov r8, r8)
 801251c:	46bd      	mov	sp, r7
 801251e:	b002      	add	sp, #8
 8012520:	bd80      	pop	{r7, pc}
 8012522:	46c0      	nop			@ (mov r8, r8)
 8012524:	20001f14 	.word	0x20001f14
 8012528:	40001000 	.word	0x40001000
 801252c:	0000ffff 	.word	0x0000ffff

08012530 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	2380      	movs	r3, #128	@ 0x80
 801253e:	05db      	lsls	r3, r3, #23
 8012540:	429a      	cmp	r2, r3
 8012542:	d106      	bne.n	8012552 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012544:	4b0a      	ldr	r3, [pc, #40]	@ (8012570 <HAL_TIM_PWM_MspInit+0x40>)
 8012546:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012548:	4b09      	ldr	r3, [pc, #36]	@ (8012570 <HAL_TIM_PWM_MspInit+0x40>)
 801254a:	2101      	movs	r1, #1
 801254c:	430a      	orrs	r2, r1
 801254e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012550:	e00a      	b.n	8012568 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a07      	ldr	r2, [pc, #28]	@ (8012574 <HAL_TIM_PWM_MspInit+0x44>)
 8012558:	4293      	cmp	r3, r2
 801255a:	d105      	bne.n	8012568 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801255c:	4b04      	ldr	r3, [pc, #16]	@ (8012570 <HAL_TIM_PWM_MspInit+0x40>)
 801255e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012560:	4b03      	ldr	r3, [pc, #12]	@ (8012570 <HAL_TIM_PWM_MspInit+0x40>)
 8012562:	2102      	movs	r1, #2
 8012564:	430a      	orrs	r2, r1
 8012566:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012568:	46c0      	nop			@ (mov r8, r8)
 801256a:	46bd      	mov	sp, r7
 801256c:	b002      	add	sp, #8
 801256e:	bd80      	pop	{r7, pc}
 8012570:	40021000 	.word	0x40021000
 8012574:	40000400 	.word	0x40000400

08012578 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	4a06      	ldr	r2, [pc, #24]	@ (80125a0 <HAL_TIM_Base_MspInit+0x28>)
 8012586:	4293      	cmp	r3, r2
 8012588:	d105      	bne.n	8012596 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801258a:	4b06      	ldr	r3, [pc, #24]	@ (80125a4 <HAL_TIM_Base_MspInit+0x2c>)
 801258c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801258e:	4b05      	ldr	r3, [pc, #20]	@ (80125a4 <HAL_TIM_Base_MspInit+0x2c>)
 8012590:	2110      	movs	r1, #16
 8012592:	430a      	orrs	r2, r1
 8012594:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012596:	46c0      	nop			@ (mov r8, r8)
 8012598:	46bd      	mov	sp, r7
 801259a:	b002      	add	sp, #8
 801259c:	bd80      	pop	{r7, pc}
 801259e:	46c0      	nop			@ (mov r8, r8)
 80125a0:	40001000 	.word	0x40001000
 80125a4:	40021000 	.word	0x40021000

080125a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80125a8:	b590      	push	{r4, r7, lr}
 80125aa:	b08b      	sub	sp, #44	@ 0x2c
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125b0:	2414      	movs	r4, #20
 80125b2:	193b      	adds	r3, r7, r4
 80125b4:	0018      	movs	r0, r3
 80125b6:	2314      	movs	r3, #20
 80125b8:	001a      	movs	r2, r3
 80125ba:	2100      	movs	r1, #0
 80125bc:	f012 fcc8 	bl	8024f50 <memset>
  if(timHandle->Instance==TIM2)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	2380      	movs	r3, #128	@ 0x80
 80125c6:	05db      	lsls	r3, r3, #23
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d123      	bne.n	8012614 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80125cc:	4b27      	ldr	r3, [pc, #156]	@ (801266c <HAL_TIM_MspPostInit+0xc4>)
 80125ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125d0:	4b26      	ldr	r3, [pc, #152]	@ (801266c <HAL_TIM_MspPostInit+0xc4>)
 80125d2:	2101      	movs	r1, #1
 80125d4:	430a      	orrs	r2, r1
 80125d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80125d8:	4b24      	ldr	r3, [pc, #144]	@ (801266c <HAL_TIM_MspPostInit+0xc4>)
 80125da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125dc:	2201      	movs	r2, #1
 80125de:	4013      	ands	r3, r2
 80125e0:	613b      	str	r3, [r7, #16]
 80125e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80125e4:	0021      	movs	r1, r4
 80125e6:	187b      	adds	r3, r7, r1
 80125e8:	220d      	movs	r2, #13
 80125ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125ec:	187b      	adds	r3, r7, r1
 80125ee:	2202      	movs	r2, #2
 80125f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125f2:	187b      	adds	r3, r7, r1
 80125f4:	2200      	movs	r2, #0
 80125f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80125f8:	187b      	adds	r3, r7, r1
 80125fa:	2200      	movs	r2, #0
 80125fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80125fe:	187b      	adds	r3, r7, r1
 8012600:	2202      	movs	r2, #2
 8012602:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012604:	187a      	adds	r2, r7, r1
 8012606:	23a0      	movs	r3, #160	@ 0xa0
 8012608:	05db      	lsls	r3, r3, #23
 801260a:	0011      	movs	r1, r2
 801260c:	0018      	movs	r0, r3
 801260e:	f002 f883 	bl	8014718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012612:	e027      	b.n	8012664 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4a15      	ldr	r2, [pc, #84]	@ (8012670 <HAL_TIM_MspPostInit+0xc8>)
 801261a:	4293      	cmp	r3, r2
 801261c:	d122      	bne.n	8012664 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801261e:	4b13      	ldr	r3, [pc, #76]	@ (801266c <HAL_TIM_MspPostInit+0xc4>)
 8012620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012622:	4b12      	ldr	r3, [pc, #72]	@ (801266c <HAL_TIM_MspPostInit+0xc4>)
 8012624:	2104      	movs	r1, #4
 8012626:	430a      	orrs	r2, r1
 8012628:	62da      	str	r2, [r3, #44]	@ 0x2c
 801262a:	4b10      	ldr	r3, [pc, #64]	@ (801266c <HAL_TIM_MspPostInit+0xc4>)
 801262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801262e:	2204      	movs	r2, #4
 8012630:	4013      	ands	r3, r2
 8012632:	60fb      	str	r3, [r7, #12]
 8012634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012636:	2114      	movs	r1, #20
 8012638:	187b      	adds	r3, r7, r1
 801263a:	22e0      	movs	r2, #224	@ 0xe0
 801263c:	0052      	lsls	r2, r2, #1
 801263e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012640:	187b      	adds	r3, r7, r1
 8012642:	2202      	movs	r2, #2
 8012644:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012646:	187b      	adds	r3, r7, r1
 8012648:	2200      	movs	r2, #0
 801264a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801264c:	187b      	adds	r3, r7, r1
 801264e:	2200      	movs	r2, #0
 8012650:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012652:	187b      	adds	r3, r7, r1
 8012654:	2202      	movs	r2, #2
 8012656:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012658:	187b      	adds	r3, r7, r1
 801265a:	4a06      	ldr	r2, [pc, #24]	@ (8012674 <HAL_TIM_MspPostInit+0xcc>)
 801265c:	0019      	movs	r1, r3
 801265e:	0010      	movs	r0, r2
 8012660:	f002 f85a 	bl	8014718 <HAL_GPIO_Init>
}
 8012664:	46c0      	nop			@ (mov r8, r8)
 8012666:	46bd      	mov	sp, r7
 8012668:	b00b      	add	sp, #44	@ 0x2c
 801266a:	bd90      	pop	{r4, r7, pc}
 801266c:	40021000 	.word	0x40021000
 8012670:	40000400 	.word	0x40000400
 8012674:	50000800 	.word	0x50000800

08012678 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 801267c:	4b17      	ldr	r3, [pc, #92]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 801267e:	4a18      	ldr	r2, [pc, #96]	@ (80126e0 <MX_LPUART1_UART_Init+0x68>)
 8012680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012682:	4b16      	ldr	r3, [pc, #88]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 8012684:	22e1      	movs	r2, #225	@ 0xe1
 8012686:	0252      	lsls	r2, r2, #9
 8012688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801268a:	4b14      	ldr	r3, [pc, #80]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 801268c:	2200      	movs	r2, #0
 801268e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012690:	4b12      	ldr	r3, [pc, #72]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 8012692:	2200      	movs	r2, #0
 8012694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012696:	4b11      	ldr	r3, [pc, #68]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 8012698:	2200      	movs	r2, #0
 801269a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801269c:	4b0f      	ldr	r3, [pc, #60]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 801269e:	220c      	movs	r2, #12
 80126a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80126a2:	4b0e      	ldr	r3, [pc, #56]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 80126a4:	2200      	movs	r2, #0
 80126a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80126a8:	4b0c      	ldr	r3, [pc, #48]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 80126aa:	2200      	movs	r2, #0
 80126ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80126ae:	4b0b      	ldr	r3, [pc, #44]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 80126b0:	2218      	movs	r2, #24
 80126b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80126b4:	4b09      	ldr	r3, [pc, #36]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 80126b6:	2280      	movs	r2, #128	@ 0x80
 80126b8:	0212      	lsls	r2, r2, #8
 80126ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80126bc:	4b07      	ldr	r3, [pc, #28]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 80126be:	2280      	movs	r2, #128	@ 0x80
 80126c0:	0152      	lsls	r2, r2, #5
 80126c2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80126c4:	4b05      	ldr	r3, [pc, #20]	@ (80126dc <MX_LPUART1_UART_Init+0x64>)
 80126c6:	0018      	movs	r0, r3
 80126c8:	f009 fb8e 	bl	801bde8 <HAL_UART_Init>
 80126cc:	1e03      	subs	r3, r0, #0
 80126ce:	d001      	beq.n	80126d4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80126d0:	f7f9 fe2e 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80126d4:	46c0      	nop			@ (mov r8, r8)
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	46c0      	nop			@ (mov r8, r8)
 80126dc:	20001f54 	.word	0x20001f54
 80126e0:	40004800 	.word	0x40004800

080126e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80126e8:	4b14      	ldr	r3, [pc, #80]	@ (801273c <MX_USART1_UART_Init+0x58>)
 80126ea:	4a15      	ldr	r2, [pc, #84]	@ (8012740 <MX_USART1_UART_Init+0x5c>)
 80126ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80126ee:	4b13      	ldr	r3, [pc, #76]	@ (801273c <MX_USART1_UART_Init+0x58>)
 80126f0:	22e1      	movs	r2, #225	@ 0xe1
 80126f2:	0252      	lsls	r2, r2, #9
 80126f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80126f6:	4b11      	ldr	r3, [pc, #68]	@ (801273c <MX_USART1_UART_Init+0x58>)
 80126f8:	2200      	movs	r2, #0
 80126fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80126fc:	4b0f      	ldr	r3, [pc, #60]	@ (801273c <MX_USART1_UART_Init+0x58>)
 80126fe:	2200      	movs	r2, #0
 8012700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012702:	4b0e      	ldr	r3, [pc, #56]	@ (801273c <MX_USART1_UART_Init+0x58>)
 8012704:	2200      	movs	r2, #0
 8012706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012708:	4b0c      	ldr	r3, [pc, #48]	@ (801273c <MX_USART1_UART_Init+0x58>)
 801270a:	220c      	movs	r2, #12
 801270c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801270e:	4b0b      	ldr	r3, [pc, #44]	@ (801273c <MX_USART1_UART_Init+0x58>)
 8012710:	2200      	movs	r2, #0
 8012712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012714:	4b09      	ldr	r3, [pc, #36]	@ (801273c <MX_USART1_UART_Init+0x58>)
 8012716:	2200      	movs	r2, #0
 8012718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801271a:	4b08      	ldr	r3, [pc, #32]	@ (801273c <MX_USART1_UART_Init+0x58>)
 801271c:	2200      	movs	r2, #0
 801271e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012720:	4b06      	ldr	r3, [pc, #24]	@ (801273c <MX_USART1_UART_Init+0x58>)
 8012722:	2200      	movs	r2, #0
 8012724:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012726:	4b05      	ldr	r3, [pc, #20]	@ (801273c <MX_USART1_UART_Init+0x58>)
 8012728:	0018      	movs	r0, r3
 801272a:	f009 fb5d 	bl	801bde8 <HAL_UART_Init>
 801272e:	1e03      	subs	r3, r0, #0
 8012730:	d001      	beq.n	8012736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8012732:	f7f9 fdfd 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8012736:	46c0      	nop			@ (mov r8, r8)
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	2000200c 	.word	0x2000200c
 8012740:	40013800 	.word	0x40013800

08012744 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8012748:	4b14      	ldr	r3, [pc, #80]	@ (801279c <MX_USART4_UART_Init+0x58>)
 801274a:	4a15      	ldr	r2, [pc, #84]	@ (80127a0 <MX_USART4_UART_Init+0x5c>)
 801274c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801274e:	4b13      	ldr	r3, [pc, #76]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012750:	22e1      	movs	r2, #225	@ 0xe1
 8012752:	0252      	lsls	r2, r2, #9
 8012754:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012756:	4b11      	ldr	r3, [pc, #68]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012758:	2200      	movs	r2, #0
 801275a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801275c:	4b0f      	ldr	r3, [pc, #60]	@ (801279c <MX_USART4_UART_Init+0x58>)
 801275e:	2200      	movs	r2, #0
 8012760:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012762:	4b0e      	ldr	r3, [pc, #56]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012764:	2200      	movs	r2, #0
 8012766:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8012768:	4b0c      	ldr	r3, [pc, #48]	@ (801279c <MX_USART4_UART_Init+0x58>)
 801276a:	220c      	movs	r2, #12
 801276c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801276e:	4b0b      	ldr	r3, [pc, #44]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012770:	2200      	movs	r2, #0
 8012772:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012774:	4b09      	ldr	r3, [pc, #36]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012776:	2200      	movs	r2, #0
 8012778:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801277a:	4b08      	ldr	r3, [pc, #32]	@ (801279c <MX_USART4_UART_Init+0x58>)
 801277c:	2200      	movs	r2, #0
 801277e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012780:	4b06      	ldr	r3, [pc, #24]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012782:	2200      	movs	r2, #0
 8012784:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8012786:	4b05      	ldr	r3, [pc, #20]	@ (801279c <MX_USART4_UART_Init+0x58>)
 8012788:	0018      	movs	r0, r3
 801278a:	f009 fb2d 	bl	801bde8 <HAL_UART_Init>
 801278e:	1e03      	subs	r3, r0, #0
 8012790:	d001      	beq.n	8012796 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8012792:	f7f9 fdcd 	bl	800c330 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8012796:	46c0      	nop			@ (mov r8, r8)
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	200020c4 	.word	0x200020c4
 80127a0:	40004c00 	.word	0x40004c00

080127a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80127a4:	b590      	push	{r4, r7, lr}
 80127a6:	b08d      	sub	sp, #52	@ 0x34
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80127ac:	241c      	movs	r4, #28
 80127ae:	193b      	adds	r3, r7, r4
 80127b0:	0018      	movs	r0, r3
 80127b2:	2314      	movs	r3, #20
 80127b4:	001a      	movs	r2, r3
 80127b6:	2100      	movs	r1, #0
 80127b8:	f012 fbca 	bl	8024f50 <memset>
  if(uartHandle->Instance==LPUART1)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a8b      	ldr	r2, [pc, #556]	@ (80129f0 <HAL_UART_MspInit+0x24c>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d129      	bne.n	801281a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80127c6:	4b8b      	ldr	r3, [pc, #556]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80127c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80127ca:	4b8a      	ldr	r3, [pc, #552]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80127cc:	2180      	movs	r1, #128	@ 0x80
 80127ce:	02c9      	lsls	r1, r1, #11
 80127d0:	430a      	orrs	r2, r1
 80127d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80127d4:	4b87      	ldr	r3, [pc, #540]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80127d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127d8:	4b86      	ldr	r3, [pc, #536]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80127da:	2104      	movs	r1, #4
 80127dc:	430a      	orrs	r2, r1
 80127de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80127e0:	4b84      	ldr	r3, [pc, #528]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80127e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127e4:	2204      	movs	r2, #4
 80127e6:	4013      	ands	r3, r2
 80127e8:	61bb      	str	r3, [r7, #24]
 80127ea:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80127ec:	0021      	movs	r1, r4
 80127ee:	187b      	adds	r3, r7, r1
 80127f0:	2203      	movs	r2, #3
 80127f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127f4:	187b      	adds	r3, r7, r1
 80127f6:	2202      	movs	r2, #2
 80127f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127fa:	187b      	adds	r3, r7, r1
 80127fc:	2200      	movs	r2, #0
 80127fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012800:	187b      	adds	r3, r7, r1
 8012802:	2203      	movs	r2, #3
 8012804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8012806:	187b      	adds	r3, r7, r1
 8012808:	2206      	movs	r2, #6
 801280a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801280c:	187b      	adds	r3, r7, r1
 801280e:	4a7a      	ldr	r2, [pc, #488]	@ (80129f8 <HAL_UART_MspInit+0x254>)
 8012810:	0019      	movs	r1, r3
 8012812:	0010      	movs	r0, r2
 8012814:	f001 ff80 	bl	8014718 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8012818:	e0e5      	b.n	80129e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4a77      	ldr	r2, [pc, #476]	@ (80129fc <HAL_UART_MspInit+0x258>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d133      	bne.n	801288c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012824:	4b73      	ldr	r3, [pc, #460]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 8012826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012828:	4b72      	ldr	r3, [pc, #456]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 801282a:	2180      	movs	r1, #128	@ 0x80
 801282c:	01c9      	lsls	r1, r1, #7
 801282e:	430a      	orrs	r2, r1
 8012830:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012832:	4b70      	ldr	r3, [pc, #448]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 8012834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012836:	4b6f      	ldr	r3, [pc, #444]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 8012838:	2101      	movs	r1, #1
 801283a:	430a      	orrs	r2, r1
 801283c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801283e:	4b6d      	ldr	r3, [pc, #436]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 8012840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012842:	2201      	movs	r2, #1
 8012844:	4013      	ands	r3, r2
 8012846:	617b      	str	r3, [r7, #20]
 8012848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801284a:	211c      	movs	r1, #28
 801284c:	187b      	adds	r3, r7, r1
 801284e:	22c0      	movs	r2, #192	@ 0xc0
 8012850:	00d2      	lsls	r2, r2, #3
 8012852:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012854:	187b      	adds	r3, r7, r1
 8012856:	2202      	movs	r2, #2
 8012858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801285a:	187b      	adds	r3, r7, r1
 801285c:	2200      	movs	r2, #0
 801285e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012860:	187b      	adds	r3, r7, r1
 8012862:	2203      	movs	r2, #3
 8012864:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8012866:	187b      	adds	r3, r7, r1
 8012868:	2204      	movs	r2, #4
 801286a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801286c:	187a      	adds	r2, r7, r1
 801286e:	23a0      	movs	r3, #160	@ 0xa0
 8012870:	05db      	lsls	r3, r3, #23
 8012872:	0011      	movs	r1, r2
 8012874:	0018      	movs	r0, r3
 8012876:	f001 ff4f 	bl	8014718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801287a:	2200      	movs	r2, #0
 801287c:	2100      	movs	r1, #0
 801287e:	201b      	movs	r0, #27
 8012880:	f001 faf8 	bl	8013e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012884:	201b      	movs	r0, #27
 8012886:	f001 fb0a 	bl	8013e9e <HAL_NVIC_EnableIRQ>
}
 801288a:	e0ac      	b.n	80129e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a5b      	ldr	r2, [pc, #364]	@ (8012a00 <HAL_UART_MspInit+0x25c>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d000      	beq.n	8012898 <HAL_UART_MspInit+0xf4>
 8012896:	e0a6      	b.n	80129e6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8012898:	4b56      	ldr	r3, [pc, #344]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 801289a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801289c:	4b55      	ldr	r3, [pc, #340]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 801289e:	2180      	movs	r1, #128	@ 0x80
 80128a0:	0309      	lsls	r1, r1, #12
 80128a2:	430a      	orrs	r2, r1
 80128a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128a6:	4b53      	ldr	r3, [pc, #332]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80128a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128aa:	4b52      	ldr	r3, [pc, #328]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80128ac:	2101      	movs	r1, #1
 80128ae:	430a      	orrs	r2, r1
 80128b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80128b2:	4b50      	ldr	r3, [pc, #320]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80128b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128b6:	2201      	movs	r2, #1
 80128b8:	4013      	ands	r3, r2
 80128ba:	613b      	str	r3, [r7, #16]
 80128bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80128be:	4b4d      	ldr	r3, [pc, #308]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80128c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128c2:	4b4c      	ldr	r3, [pc, #304]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80128c4:	2104      	movs	r1, #4
 80128c6:	430a      	orrs	r2, r1
 80128c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80128ca:	4b4a      	ldr	r3, [pc, #296]	@ (80129f4 <HAL_UART_MspInit+0x250>)
 80128cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ce:	2204      	movs	r2, #4
 80128d0:	4013      	ands	r3, r2
 80128d2:	60fb      	str	r3, [r7, #12]
 80128d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80128d6:	241c      	movs	r4, #28
 80128d8:	193b      	adds	r3, r7, r4
 80128da:	2202      	movs	r2, #2
 80128dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128de:	193b      	adds	r3, r7, r4
 80128e0:	2202      	movs	r2, #2
 80128e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128e4:	193b      	adds	r3, r7, r4
 80128e6:	2200      	movs	r2, #0
 80128e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128ea:	193b      	adds	r3, r7, r4
 80128ec:	2203      	movs	r2, #3
 80128ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80128f0:	193b      	adds	r3, r7, r4
 80128f2:	2206      	movs	r2, #6
 80128f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80128f6:	193a      	adds	r2, r7, r4
 80128f8:	23a0      	movs	r3, #160	@ 0xa0
 80128fa:	05db      	lsls	r3, r3, #23
 80128fc:	0011      	movs	r1, r2
 80128fe:	0018      	movs	r0, r3
 8012900:	f001 ff0a 	bl	8014718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012904:	0021      	movs	r1, r4
 8012906:	187b      	adds	r3, r7, r1
 8012908:	2280      	movs	r2, #128	@ 0x80
 801290a:	00d2      	lsls	r2, r2, #3
 801290c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801290e:	187b      	adds	r3, r7, r1
 8012910:	2202      	movs	r2, #2
 8012912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012914:	187b      	adds	r3, r7, r1
 8012916:	2200      	movs	r2, #0
 8012918:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801291a:	187b      	adds	r3, r7, r1
 801291c:	2203      	movs	r2, #3
 801291e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012920:	187b      	adds	r3, r7, r1
 8012922:	2206      	movs	r2, #6
 8012924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012926:	187b      	adds	r3, r7, r1
 8012928:	4a33      	ldr	r2, [pc, #204]	@ (80129f8 <HAL_UART_MspInit+0x254>)
 801292a:	0019      	movs	r1, r3
 801292c:	0010      	movs	r0, r2
 801292e:	f001 fef3 	bl	8014718 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8012932:	4b34      	ldr	r3, [pc, #208]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012934:	4a34      	ldr	r2, [pc, #208]	@ (8012a08 <HAL_UART_MspInit+0x264>)
 8012936:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8012938:	4b32      	ldr	r3, [pc, #200]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 801293a:	220c      	movs	r2, #12
 801293c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801293e:	4b31      	ldr	r3, [pc, #196]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012940:	2200      	movs	r2, #0
 8012942:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012944:	4b2f      	ldr	r3, [pc, #188]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012946:	2200      	movs	r2, #0
 8012948:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 801294a:	4b2e      	ldr	r3, [pc, #184]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 801294c:	2280      	movs	r2, #128	@ 0x80
 801294e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012950:	4b2c      	ldr	r3, [pc, #176]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012952:	2200      	movs	r2, #0
 8012954:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012956:	4b2b      	ldr	r3, [pc, #172]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012958:	2200      	movs	r2, #0
 801295a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 801295c:	4b29      	ldr	r3, [pc, #164]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 801295e:	2220      	movs	r2, #32
 8012960:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012962:	4b28      	ldr	r3, [pc, #160]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012964:	2200      	movs	r2, #0
 8012966:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8012968:	4b26      	ldr	r3, [pc, #152]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 801296a:	0018      	movs	r0, r3
 801296c:	f001 fab8 	bl	8013ee0 <HAL_DMA_Init>
 8012970:	1e03      	subs	r3, r0, #0
 8012972:	d001      	beq.n	8012978 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8012974:	f7f9 fcdc 	bl	800c330 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	4a22      	ldr	r2, [pc, #136]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 801297c:	675a      	str	r2, [r3, #116]	@ 0x74
 801297e:	4b21      	ldr	r3, [pc, #132]	@ (8012a04 <HAL_UART_MspInit+0x260>)
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8012984:	4b21      	ldr	r3, [pc, #132]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 8012986:	4a22      	ldr	r2, [pc, #136]	@ (8012a10 <HAL_UART_MspInit+0x26c>)
 8012988:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 801298a:	4b20      	ldr	r3, [pc, #128]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 801298c:	220c      	movs	r2, #12
 801298e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012990:	4b1e      	ldr	r3, [pc, #120]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 8012992:	2210      	movs	r2, #16
 8012994:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012996:	4b1d      	ldr	r3, [pc, #116]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 8012998:	2200      	movs	r2, #0
 801299a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 801299c:	4b1b      	ldr	r3, [pc, #108]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 801299e:	2280      	movs	r2, #128	@ 0x80
 80129a0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80129a2:	4b1a      	ldr	r3, [pc, #104]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129a4:	2200      	movs	r2, #0
 80129a6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80129a8:	4b18      	ldr	r3, [pc, #96]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80129ae:	4b17      	ldr	r3, [pc, #92]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129b0:	2200      	movs	r2, #0
 80129b2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80129b4:	4b15      	ldr	r3, [pc, #84]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129b6:	2200      	movs	r2, #0
 80129b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80129ba:	4b14      	ldr	r3, [pc, #80]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129bc:	0018      	movs	r0, r3
 80129be:	f001 fa8f 	bl	8013ee0 <HAL_DMA_Init>
 80129c2:	1e03      	subs	r3, r0, #0
 80129c4:	d001      	beq.n	80129ca <HAL_UART_MspInit+0x226>
      Error_Handler();
 80129c6:	f7f9 fcb3 	bl	800c330 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4a0f      	ldr	r2, [pc, #60]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80129d0:	4b0e      	ldr	r3, [pc, #56]	@ (8012a0c <HAL_UART_MspInit+0x268>)
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80129d6:	2200      	movs	r2, #0
 80129d8:	2100      	movs	r1, #0
 80129da:	200e      	movs	r0, #14
 80129dc:	f001 fa4a 	bl	8013e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80129e0:	200e      	movs	r0, #14
 80129e2:	f001 fa5c 	bl	8013e9e <HAL_NVIC_EnableIRQ>
}
 80129e6:	46c0      	nop			@ (mov r8, r8)
 80129e8:	46bd      	mov	sp, r7
 80129ea:	b00d      	add	sp, #52	@ 0x34
 80129ec:	bd90      	pop	{r4, r7, pc}
 80129ee:	46c0      	nop			@ (mov r8, r8)
 80129f0:	40004800 	.word	0x40004800
 80129f4:	40021000 	.word	0x40021000
 80129f8:	50000800 	.word	0x50000800
 80129fc:	40013800 	.word	0x40013800
 8012a00:	40004c00 	.word	0x40004c00
 8012a04:	2000217c 	.word	0x2000217c
 8012a08:	4002006c 	.word	0x4002006c
 8012a0c:	200021c4 	.word	0x200021c4
 8012a10:	40020080 	.word	0x40020080

08012a14 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8012a1c:	f000 fd86 	bl	801352c <HAL_GetTick>
 8012a20:	0003      	movs	r3, r0
 8012a22:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8012a24:	4b1c      	ldr	r3, [pc, #112]	@ (8012a98 <TimestampIsReached+0x84>)
 8012a26:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8012a28:	697a      	ldr	r2, [r7, #20]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d307      	bcc.n	8012a40 <TimestampIsReached+0x2c>
 8012a30:	697a      	ldr	r2, [r7, #20]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	1ad3      	subs	r3, r2, r3
 8012a36:	693a      	ldr	r2, [r7, #16]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d901      	bls.n	8012a40 <TimestampIsReached+0x2c>
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	e000      	b.n	8012a42 <TimestampIsReached+0x2e>
 8012a40:	2200      	movs	r2, #0
 8012a42:	230f      	movs	r3, #15
 8012a44:	18fb      	adds	r3, r7, r3
 8012a46:	701a      	strb	r2, [r3, #0]
 8012a48:	781a      	ldrb	r2, [r3, #0]
 8012a4a:	2101      	movs	r1, #1
 8012a4c:	400a      	ands	r2, r1
 8012a4e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8012a50:	697a      	ldr	r2, [r7, #20]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d207      	bcs.n	8012a68 <TimestampIsReached+0x54>
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d201      	bcs.n	8012a68 <TimestampIsReached+0x54>
 8012a64:	2201      	movs	r2, #1
 8012a66:	e000      	b.n	8012a6a <TimestampIsReached+0x56>
 8012a68:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8012a6a:	200e      	movs	r0, #14
 8012a6c:	183b      	adds	r3, r7, r0
 8012a6e:	701a      	strb	r2, [r3, #0]
 8012a70:	781a      	ldrb	r2, [r3, #0]
 8012a72:	2101      	movs	r1, #1
 8012a74:	400a      	ands	r2, r1
 8012a76:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8012a78:	230f      	movs	r3, #15
 8012a7a:	18fb      	adds	r3, r7, r3
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d103      	bne.n	8012a8a <TimestampIsReached+0x76>
 8012a82:	183b      	adds	r3, r7, r0
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d001      	beq.n	8012a8e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	e000      	b.n	8012a90 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	0018      	movs	r0, r3
 8012a92:	46bd      	mov	sp, r7
 8012a94:	b006      	add	sp, #24
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	7fffffff 	.word	0x7fffffff

08012a9c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8012aa4:	f000 fd42 	bl	801352c <HAL_GetTick>
 8012aa8:	0002      	movs	r2, r0
 8012aaa:	4904      	ldr	r1, [pc, #16]	@ (8012abc <AddTimestamp+0x20>)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	0018      	movs	r0, r3
 8012ab0:	f012 f8e8 	bl	8024c84 <siprintf>
}
 8012ab4:	46c0      	nop			@ (mov r8, r8)
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	b002      	add	sp, #8
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	0802cb9c 	.word	0x0802cb9c

08012ac0 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8012ac0:	b40c      	push	{r2, r3}
 8012ac2:	b5b0      	push	{r4, r5, r7, lr}
 8012ac4:	b0a4      	sub	sp, #144	@ 0x90
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	0002      	movs	r2, r0
 8012aca:	6039      	str	r1, [r7, #0]
 8012acc:	1dfb      	adds	r3, r7, #7
 8012ace:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8012ad0:	4b23      	ldr	r3, [pc, #140]	@ (8012b60 <CreateLine+0xa0>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	1dfa      	adds	r2, r7, #7
 8012ad6:	7812      	ldrb	r2, [r2, #0]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d839      	bhi.n	8012b50 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8012adc:	683a      	ldr	r2, [r7, #0]
 8012ade:	4921      	ldr	r1, [pc, #132]	@ (8012b64 <CreateLine+0xa4>)
 8012ae0:	240c      	movs	r4, #12
 8012ae2:	193b      	adds	r3, r7, r4
 8012ae4:	0018      	movs	r0, r3
 8012ae6:	f012 f8cd 	bl	8024c84 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8012aea:	4b1d      	ldr	r3, [pc, #116]	@ (8012b60 <CreateLine+0xa0>)
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d909      	bls.n	8012b06 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8012af2:	193b      	adds	r3, r7, r4
 8012af4:	0018      	movs	r0, r3
 8012af6:	f7ed fb39 	bl	800016c <strlen>
 8012afa:	0002      	movs	r2, r0
 8012afc:	193b      	adds	r3, r7, r4
 8012afe:	189b      	adds	r3, r3, r2
 8012b00:	0018      	movs	r0, r3
 8012b02:	f7ff ffcb 	bl	8012a9c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8012b06:	240c      	movs	r4, #12
 8012b08:	193b      	adds	r3, r7, r4
 8012b0a:	0018      	movs	r0, r3
 8012b0c:	f7ed fb2e 	bl	800016c <strlen>
 8012b10:	0003      	movs	r3, r0
 8012b12:	218c      	movs	r1, #140	@ 0x8c
 8012b14:	187a      	adds	r2, r7, r1
 8012b16:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8012b18:	239c      	movs	r3, #156	@ 0x9c
 8012b1a:	2508      	movs	r5, #8
 8012b1c:	195b      	adds	r3, r3, r5
 8012b1e:	19db      	adds	r3, r3, r7
 8012b20:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8012b22:	193a      	adds	r2, r7, r4
 8012b24:	187b      	adds	r3, r7, r1
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	18d0      	adds	r0, r2, r3
 8012b2a:	187b      	adds	r3, r7, r1
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2280      	movs	r2, #128	@ 0x80
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	0019      	movs	r1, r3
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	2298      	movs	r2, #152	@ 0x98
 8012b38:	1952      	adds	r2, r2, r5
 8012b3a:	19d2      	adds	r2, r2, r7
 8012b3c:	6812      	ldr	r2, [r2, #0]
 8012b3e:	f012 f939 	bl	8024db4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8012b42:	193a      	adds	r2, r7, r4
 8012b44:	4b08      	ldr	r3, [pc, #32]	@ (8012b68 <CreateLine+0xa8>)
 8012b46:	0011      	movs	r1, r2
 8012b48:	0018      	movs	r0, r3
 8012b4a:	f012 f82b 	bl	8024ba4 <iprintf>
 8012b4e:	e000      	b.n	8012b52 <CreateLine+0x92>
    return;
 8012b50:	46c0      	nop			@ (mov r8, r8)
}
 8012b52:	46bd      	mov	sp, r7
 8012b54:	b024      	add	sp, #144	@ 0x90
 8012b56:	bcb0      	pop	{r4, r5, r7}
 8012b58:	bc08      	pop	{r3}
 8012b5a:	b002      	add	sp, #8
 8012b5c:	4718      	bx	r3
 8012b5e:	46c0      	nop			@ (mov r8, r8)
 8012b60:	200000e4 	.word	0x200000e4
 8012b64:	0802cba8 	.word	0x0802cba8
 8012b68:	0802cbac 	.word	0x0802cbac

08012b6c <_write>:

int _write(int fd, void *buf, size_t count) {
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	68b9      	ldr	r1, [r7, #8]
 8012b7e:	4804      	ldr	r0, [pc, #16]	@ (8012b90 <_write+0x24>)
 8012b80:	2364      	movs	r3, #100	@ 0x64
 8012b82:	f009 f997 	bl	801beb4 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8012b86:	687b      	ldr	r3, [r7, #4]
}
 8012b88:	0018      	movs	r0, r3
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	b004      	add	sp, #16
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	2000200c 	.word	0x2000200c

08012b94 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	0002      	movs	r2, r0
 8012b9c:	1dfb      	adds	r3, r7, #7
 8012b9e:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8012ba0:	4b03      	ldr	r3, [pc, #12]	@ (8012bb0 <SetVerboseLevel+0x1c>)
 8012ba2:	1dfa      	adds	r2, r7, #7
 8012ba4:	7812      	ldrb	r2, [r2, #0]
 8012ba6:	701a      	strb	r2, [r3, #0]
}
 8012ba8:	46c0      	nop			@ (mov r8, r8)
 8012baa:	46bd      	mov	sp, r7
 8012bac:	b002      	add	sp, #8
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	200000e4 	.word	0x200000e4

08012bb4 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8012bb8:	4b02      	ldr	r3, [pc, #8]	@ (8012bc4 <GetVerboseLevel+0x10>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	0018      	movs	r0, r3
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	46c0      	nop			@ (mov r8, r8)
 8012bc4:	200000e4 	.word	0x200000e4

08012bc8 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8012bce:	4a0f      	ldr	r2, [pc, #60]	@ (8012c0c <BinaryReleaseInfo+0x44>)
 8012bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8012c10 <BinaryReleaseInfo+0x48>)
 8012bd2:	0019      	movs	r1, r3
 8012bd4:	2002      	movs	r0, #2
 8012bd6:	f7ff ff73 	bl	8012ac0 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8012bda:	480e      	ldr	r0, [pc, #56]	@ (8012c14 <BinaryReleaseInfo+0x4c>)
 8012bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8012c18 <BinaryReleaseInfo+0x50>)
 8012bde:	490c      	ldr	r1, [pc, #48]	@ (8012c10 <BinaryReleaseInfo+0x48>)
 8012be0:	4b0e      	ldr	r3, [pc, #56]	@ (8012c1c <BinaryReleaseInfo+0x54>)
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	0003      	movs	r3, r0
 8012be6:	2002      	movs	r0, #2
 8012be8:	f7ff ff6a 	bl	8012ac0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8012bec:	4b0c      	ldr	r3, [pc, #48]	@ (8012c20 <BinaryReleaseInfo+0x58>)
 8012bee:	4a0d      	ldr	r2, [pc, #52]	@ (8012c24 <BinaryReleaseInfo+0x5c>)
 8012bf0:	4907      	ldr	r1, [pc, #28]	@ (8012c10 <BinaryReleaseInfo+0x48>)
 8012bf2:	2002      	movs	r0, #2
 8012bf4:	f7ff ff64 	bl	8012ac0 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8012bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8012c28 <BinaryReleaseInfo+0x60>)
 8012bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8012c2c <BinaryReleaseInfo+0x64>)
 8012bfc:	4904      	ldr	r1, [pc, #16]	@ (8012c10 <BinaryReleaseInfo+0x48>)
 8012bfe:	2002      	movs	r0, #2
 8012c00:	f7ff ff5e 	bl	8012ac0 <CreateLine>
}
 8012c04:	46c0      	nop			@ (mov r8, r8)
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	46c0      	nop			@ (mov r8, r8)
 8012c0c:	0802cbb4 	.word	0x0802cbb4
 8012c10:	0802cbe0 	.word	0x0802cbe0
 8012c14:	0802cbe4 	.word	0x0802cbe4
 8012c18:	0802cbf0 	.word	0x0802cbf0
 8012c1c:	0802cc04 	.word	0x0802cc04
 8012c20:	0802cc10 	.word	0x0802cc10
 8012c24:	0802cc1c 	.word	0x0802cc1c
 8012c28:	0802cc24 	.word	0x0802cc24
 8012c2c:	0802cc2c 	.word	0x0802cc2c

08012c30 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	68f9      	ldr	r1, [r7, #12]
 8012c42:	4803      	ldr	r0, [pc, #12]	@ (8012c50 <errorHandler+0x20>)
 8012c44:	f011 ffae 	bl	8024ba4 <iprintf>
//    while (true)
//    {
//    }
}
 8012c48:	46c0      	nop			@ (mov r8, r8)
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	b004      	add	sp, #16
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	0802cc44 	.word	0x0802cc44

08012c54 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8012c54:	b590      	push	{r4, r7, lr}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6039      	str	r1, [r7, #0]
 8012c5c:	0011      	movs	r1, r2
 8012c5e:	1dfb      	adds	r3, r7, #7
 8012c60:	1c02      	adds	r2, r0, #0
 8012c62:	701a      	strb	r2, [r3, #0]
 8012c64:	1dbb      	adds	r3, r7, #6
 8012c66:	1c0a      	adds	r2, r1, #0
 8012c68:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8012c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8012c94 <ReadRegister+0x40>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00a      	beq.n	8012c88 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8012c72:	4b08      	ldr	r3, [pc, #32]	@ (8012c94 <ReadRegister+0x40>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	1dba      	adds	r2, r7, #6
 8012c78:	7814      	ldrb	r4, [r2, #0]
 8012c7a:	6839      	ldr	r1, [r7, #0]
 8012c7c:	1dfa      	adds	r2, r7, #7
 8012c7e:	7810      	ldrb	r0, [r2, #0]
 8012c80:	0022      	movs	r2, r4
 8012c82:	4798      	blx	r3
 8012c84:	0003      	movs	r3, r0
 8012c86:	e000      	b.n	8012c8a <ReadRegister+0x36>
	}
	return false;
 8012c88:	2300      	movs	r3, #0
}
 8012c8a:	0018      	movs	r0, r3
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	b003      	add	sp, #12
 8012c90:	bd90      	pop	{r4, r7, pc}
 8012c92:	46c0      	nop			@ (mov r8, r8)
 8012c94:	20002214 	.word	0x20002214

08012c98 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8012c98:	b590      	push	{r4, r7, lr}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6039      	str	r1, [r7, #0]
 8012ca0:	0011      	movs	r1, r2
 8012ca2:	1dfb      	adds	r3, r7, #7
 8012ca4:	1c02      	adds	r2, r0, #0
 8012ca6:	701a      	strb	r2, [r3, #0]
 8012ca8:	1dbb      	adds	r3, r7, #6
 8012caa:	1c0a      	adds	r2, r1, #0
 8012cac:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8012cae:	4b0a      	ldr	r3, [pc, #40]	@ (8012cd8 <WriteRegister+0x40>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00a      	beq.n	8012ccc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8012cb6:	4b08      	ldr	r3, [pc, #32]	@ (8012cd8 <WriteRegister+0x40>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	1dba      	adds	r2, r7, #6
 8012cbc:	7814      	ldrb	r4, [r2, #0]
 8012cbe:	6839      	ldr	r1, [r7, #0]
 8012cc0:	1dfa      	adds	r2, r7, #7
 8012cc2:	7810      	ldrb	r0, [r2, #0]
 8012cc4:	0022      	movs	r2, r4
 8012cc6:	4798      	blx	r3
 8012cc8:	0003      	movs	r3, r0
 8012cca:	e000      	b.n	8012cce <WriteRegister+0x36>
  }
  return false;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	0018      	movs	r0, r3
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	b003      	add	sp, #12
 8012cd4:	bd90      	pop	{r4, r7, pc}
 8012cd6:	46c0      	nop			@ (mov r8, r8)
 8012cd8:	20002218 	.word	0x20002218

08012cdc <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	000a      	movs	r2, r1
 8012ce6:	1cfb      	adds	r3, r7, #3
 8012ce8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8012cea:	230f      	movs	r3, #15
 8012cec:	18fb      	adds	r3, r7, r3
 8012cee:	22ff      	movs	r2, #255	@ 0xff
 8012cf0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8012cf2:	230e      	movs	r3, #14
 8012cf4:	18fb      	adds	r3, r7, r3
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	701a      	strb	r2, [r3, #0]
 8012cfa:	e037      	b.n	8012d6c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8012cfc:	230e      	movs	r3, #14
 8012cfe:	18fb      	adds	r3, r7, r3
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	18d3      	adds	r3, r2, r3
 8012d06:	7819      	ldrb	r1, [r3, #0]
 8012d08:	220f      	movs	r2, #15
 8012d0a:	18bb      	adds	r3, r7, r2
 8012d0c:	18ba      	adds	r2, r7, r2
 8012d0e:	7812      	ldrb	r2, [r2, #0]
 8012d10:	404a      	eors	r2, r1
 8012d12:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8012d14:	230d      	movs	r3, #13
 8012d16:	18fb      	adds	r3, r7, r3
 8012d18:	2200      	movs	r2, #0
 8012d1a:	701a      	strb	r2, [r3, #0]
 8012d1c:	e01b      	b.n	8012d56 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8012d1e:	210f      	movs	r1, #15
 8012d20:	187b      	adds	r3, r7, r1
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	b25b      	sxtb	r3, r3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	da09      	bge.n	8012d3e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8012d2a:	187b      	adds	r3, r7, r1
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	005b      	lsls	r3, r3, #1
 8012d30:	b25b      	sxtb	r3, r3
 8012d32:	2231      	movs	r2, #49	@ 0x31
 8012d34:	4053      	eors	r3, r2
 8012d36:	b25a      	sxtb	r2, r3
 8012d38:	187b      	adds	r3, r7, r1
 8012d3a:	701a      	strb	r2, [r3, #0]
 8012d3c:	e005      	b.n	8012d4a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8012d3e:	230f      	movs	r3, #15
 8012d40:	18fa      	adds	r2, r7, r3
 8012d42:	18fb      	adds	r3, r7, r3
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	18db      	adds	r3, r3, r3
 8012d48:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8012d4a:	210d      	movs	r1, #13
 8012d4c:	187b      	adds	r3, r7, r1
 8012d4e:	781a      	ldrb	r2, [r3, #0]
 8012d50:	187b      	adds	r3, r7, r1
 8012d52:	3201      	adds	r2, #1
 8012d54:	701a      	strb	r2, [r3, #0]
 8012d56:	230d      	movs	r3, #13
 8012d58:	18fb      	adds	r3, r7, r3
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	2b07      	cmp	r3, #7
 8012d5e:	d9de      	bls.n	8012d1e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8012d60:	210e      	movs	r1, #14
 8012d62:	187b      	adds	r3, r7, r1
 8012d64:	781a      	ldrb	r2, [r3, #0]
 8012d66:	187b      	adds	r3, r7, r1
 8012d68:	3201      	adds	r2, #1
 8012d6a:	701a      	strb	r2, [r3, #0]
 8012d6c:	230e      	movs	r3, #14
 8012d6e:	18fa      	adds	r2, r7, r3
 8012d70:	1cfb      	adds	r3, r7, #3
 8012d72:	7812      	ldrb	r2, [r2, #0]
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d3c0      	bcc.n	8012cfc <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8012d7a:	230f      	movs	r3, #15
 8012d7c:	18fb      	adds	r3, r7, r3
 8012d7e:	781b      	ldrb	r3, [r3, #0]
}
 8012d80:	0018      	movs	r0, r3
 8012d82:	46bd      	mov	sp, r7
 8012d84:	b004      	add	sp, #16
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8012d88:	b5b0      	push	{r4, r5, r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	1c18      	adds	r0, r3, #0
 8012d98:	f7f0 fb64 	bl	8003464 <__aeabi_f2d>
 8012d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8012e58 <HIDS_DewPointCalculation+0xd0>)
 8012d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8012e5c <HIDS_DewPointCalculation+0xd4>)
 8012da0:	f7ef fc4c 	bl	800263c <__aeabi_dmul>
 8012da4:	0002      	movs	r2, r0
 8012da6:	000b      	movs	r3, r1
 8012da8:	0014      	movs	r4, r2
 8012daa:	001d      	movs	r5, r3
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	1c18      	adds	r0, r3, #0
 8012db2:	f7f0 fb57 	bl	8003464 <__aeabi_f2d>
 8012db6:	4a2a      	ldr	r2, [pc, #168]	@ (8012e60 <HIDS_DewPointCalculation+0xd8>)
 8012db8:	4b2a      	ldr	r3, [pc, #168]	@ (8012e64 <HIDS_DewPointCalculation+0xdc>)
 8012dba:	f7ee fc97 	bl	80016ec <__aeabi_dadd>
 8012dbe:	0002      	movs	r2, r0
 8012dc0:	000b      	movs	r3, r1
 8012dc2:	0020      	movs	r0, r4
 8012dc4:	0029      	movs	r1, r5
 8012dc6:	f7ee fff5 	bl	8001db4 <__aeabi_ddiv>
 8012dca:	0002      	movs	r2, r0
 8012dcc:	000b      	movs	r3, r1
 8012dce:	0014      	movs	r4, r2
 8012dd0:	001d      	movs	r5, r3
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	1c18      	adds	r0, r3, #0
 8012dd8:	f7f0 fb44 	bl	8003464 <__aeabi_f2d>
 8012ddc:	2200      	movs	r2, #0
 8012dde:	4b22      	ldr	r3, [pc, #136]	@ (8012e68 <HIDS_DewPointCalculation+0xe0>)
 8012de0:	f7ee ffe8 	bl	8001db4 <__aeabi_ddiv>
 8012de4:	0002      	movs	r2, r0
 8012de6:	000b      	movs	r3, r1
 8012de8:	0010      	movs	r0, r2
 8012dea:	0019      	movs	r1, r3
 8012dec:	f014 fe52 	bl	8027a94 <log>
 8012df0:	0002      	movs	r2, r0
 8012df2:	000b      	movs	r3, r1
 8012df4:	0020      	movs	r0, r4
 8012df6:	0029      	movs	r1, r5
 8012df8:	f7ee fc78 	bl	80016ec <__aeabi_dadd>
 8012dfc:	0002      	movs	r2, r0
 8012dfe:	000b      	movs	r3, r1
 8012e00:	0010      	movs	r0, r2
 8012e02:	0019      	movs	r1, r3
 8012e04:	f7f0 fb76 	bl	80034f4 <__aeabi_d2f>
 8012e08:	1c03      	adds	r3, r0, #0
 8012e0a:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8012e0c:	68f8      	ldr	r0, [r7, #12]
 8012e0e:	f7f0 fb29 	bl	8003464 <__aeabi_f2d>
 8012e12:	4a13      	ldr	r2, [pc, #76]	@ (8012e60 <HIDS_DewPointCalculation+0xd8>)
 8012e14:	4b13      	ldr	r3, [pc, #76]	@ (8012e64 <HIDS_DewPointCalculation+0xdc>)
 8012e16:	f7ef fc11 	bl	800263c <__aeabi_dmul>
 8012e1a:	0002      	movs	r2, r0
 8012e1c:	000b      	movs	r3, r1
 8012e1e:	0014      	movs	r4, r2
 8012e20:	001d      	movs	r5, r3
 8012e22:	68f8      	ldr	r0, [r7, #12]
 8012e24:	f7f0 fb1e 	bl	8003464 <__aeabi_f2d>
 8012e28:	0002      	movs	r2, r0
 8012e2a:	000b      	movs	r3, r1
 8012e2c:	480a      	ldr	r0, [pc, #40]	@ (8012e58 <HIDS_DewPointCalculation+0xd0>)
 8012e2e:	490b      	ldr	r1, [pc, #44]	@ (8012e5c <HIDS_DewPointCalculation+0xd4>)
 8012e30:	f7ef fecc 	bl	8002bcc <__aeabi_dsub>
 8012e34:	0002      	movs	r2, r0
 8012e36:	000b      	movs	r3, r1
 8012e38:	0020      	movs	r0, r4
 8012e3a:	0029      	movs	r1, r5
 8012e3c:	f7ee ffba 	bl	8001db4 <__aeabi_ddiv>
 8012e40:	0002      	movs	r2, r0
 8012e42:	000b      	movs	r3, r1
 8012e44:	0010      	movs	r0, r2
 8012e46:	0019      	movs	r1, r3
 8012e48:	f7f0 fb54 	bl	80034f4 <__aeabi_d2f>
 8012e4c:	1c03      	adds	r3, r0, #0
}
 8012e4e:	1c18      	adds	r0, r3, #0
 8012e50:	46bd      	mov	sp, r7
 8012e52:	b004      	add	sp, #16
 8012e54:	bdb0      	pop	{r4, r5, r7, pc}
 8012e56:	46c0      	nop			@ (mov r8, r8)
 8012e58:	b851eb85 	.word	0xb851eb85
 8012e5c:	4031451e 	.word	0x4031451e
 8012e60:	66666666 	.word	0x66666666
 8012e64:	406db666 	.word	0x406db666
 8012e68:	40590000 	.word	0x40590000

08012e6c <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 8012e72:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea8 <HIDS_EnableHeater+0x3c>)
 8012e74:	781a      	ldrb	r2, [r3, #0]
 8012e76:	1dfb      	adds	r3, r7, #7
 8012e78:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8012e7a:	1dfb      	adds	r3, r7, #7
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	0019      	movs	r1, r3
 8012e80:	2044      	movs	r0, #68	@ 0x44
 8012e82:	f7ff ff09 	bl	8012c98 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8012e86:	1dfb      	adds	r3, r7, #7
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	4a08      	ldr	r2, [pc, #32]	@ (8012eac <HIDS_EnableHeater+0x40>)
 8012e8c:	4908      	ldr	r1, [pc, #32]	@ (8012eb0 <HIDS_EnableHeater+0x44>)
 8012e8e:	2002      	movs	r0, #2
 8012e90:	f7ff fe16 	bl	8012ac0 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8012e94:	f7f6 faf5 	bl	8009482 <getPosixTime>
 8012e98:	0002      	movs	r2, r0
 8012e9a:	4b06      	ldr	r3, [pc, #24]	@ (8012eb4 <HIDS_EnableHeater+0x48>)
 8012e9c:	601a      	str	r2, [r3, #0]
}
 8012e9e:	46c0      	nop			@ (mov r8, r8)
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	b002      	add	sp, #8
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	46c0      	nop			@ (mov r8, r8)
 8012ea8:	200000e5 	.word	0x200000e5
 8012eac:	0802cc6c 	.word	0x0802cc6c
 8012eb0:	0802cc8c 	.word	0x0802cc8c
 8012eb4:	2000222c 	.word	0x2000222c

08012eb8 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8012ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8012eec <HIDS_Init+0x34>)
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8012ec8:	4b09      	ldr	r3, [pc, #36]	@ (8012ef0 <HIDS_Init+0x38>)
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8012ece:	4b09      	ldr	r3, [pc, #36]	@ (8012ef4 <HIDS_Init+0x3c>)
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	0018      	movs	r0, r3
 8012ed4:	f000 f840 	bl	8012f58 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8012ed8:	4b07      	ldr	r3, [pc, #28]	@ (8012ef8 <HIDS_Init+0x40>)
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	0018      	movs	r0, r3
 8012ede:	f000 f82b 	bl	8012f38 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8012ee2:	46c0      	nop			@ (mov r8, r8)
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	b002      	add	sp, #8
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	46c0      	nop			@ (mov r8, r8)
 8012eec:	20002214 	.word	0x20002214
 8012ef0:	20002218 	.word	0x20002218
 8012ef4:	200000e6 	.word	0x200000e6
 8012ef8:	200000e5 	.word	0x200000e5

08012efc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8012efc:	b580      	push	{r7, lr}
 8012efe:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8012f00:	f000 fb14 	bl	801352c <HAL_GetTick>
 8012f04:	0002      	movs	r2, r0
 8012f06:	4b08      	ldr	r3, [pc, #32]	@ (8012f28 <HIDS_StartMeasurement+0x2c>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	18d2      	adds	r2, r2, r3
 8012f0c:	4b07      	ldr	r3, [pc, #28]	@ (8012f2c <HIDS_StartMeasurement+0x30>)
 8012f0e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8012f10:	4b07      	ldr	r3, [pc, #28]	@ (8012f30 <HIDS_StartMeasurement+0x34>)
 8012f12:	2201      	movs	r2, #1
 8012f14:	0019      	movs	r1, r3
 8012f16:	2044      	movs	r0, #68	@ 0x44
 8012f18:	f7ff febe 	bl	8012c98 <WriteRegister>
  MeasurementDone = false;
 8012f1c:	4b05      	ldr	r3, [pc, #20]	@ (8012f34 <HIDS_StartMeasurement+0x38>)
 8012f1e:	2200      	movs	r2, #0
 8012f20:	701a      	strb	r2, [r3, #0]
}
 8012f22:	46c0      	nop			@ (mov r8, r8)
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	200000ec 	.word	0x200000ec
 8012f2c:	200000e8 	.word	0x200000e8
 8012f30:	200000e6 	.word	0x200000e6
 8012f34:	20002230 	.word	0x20002230

08012f38 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	0002      	movs	r2, r0
 8012f40:	1dfb      	adds	r3, r7, #7
 8012f42:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8012f44:	4b03      	ldr	r3, [pc, #12]	@ (8012f54 <HIDS_SetHeaterMode+0x1c>)
 8012f46:	1dfa      	adds	r2, r7, #7
 8012f48:	7812      	ldrb	r2, [r2, #0]
 8012f4a:	701a      	strb	r2, [r3, #0]
}
 8012f4c:	46c0      	nop			@ (mov r8, r8)
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	b002      	add	sp, #8
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	200000e5 	.word	0x200000e5

08012f58 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	0002      	movs	r2, r0
 8012f60:	1dfb      	adds	r3, r7, #7
 8012f62:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8012f64:	4b03      	ldr	r3, [pc, #12]	@ (8012f74 <HIDS_SetMeasurementMode+0x1c>)
 8012f66:	1dfa      	adds	r2, r7, #7
 8012f68:	7812      	ldrb	r2, [r2, #0]
 8012f6a:	701a      	strb	r2, [r3, #0]
}
 8012f6c:	46c0      	nop			@ (mov r8, r8)
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	b002      	add	sp, #8
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	200000e6 	.word	0x200000e6

08012f78 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8012f80:	f000 fad4 	bl	801352c <HAL_GetTick>
 8012f84:	0002      	movs	r2, r0
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	18d2      	adds	r2, r2, r3
 8012f8a:	4b03      	ldr	r3, [pc, #12]	@ (8012f98 <setHIDSTimeStamp+0x20>)
 8012f8c:	601a      	str	r2, [r3, #0]
}
 8012f8e:	46c0      	nop			@ (mov r8, r8)
 8012f90:	46bd      	mov	sp, r7
 8012f92:	b002      	add	sp, #8
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	46c0      	nop			@ (mov r8, r8)
 8012f98:	20002234 	.word	0x20002234

08012f9c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8012f9c:	b590      	push	{r4, r7, lr}
 8012f9e:	b085      	sub	sp, #20
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	781a      	ldrb	r2, [r3, #0]
 8012fa8:	210c      	movs	r1, #12
 8012faa:	187b      	adds	r3, r7, r1
 8012fac:	701a      	strb	r2, [r3, #0]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	785a      	ldrb	r2, [r3, #1]
 8012fb2:	187b      	adds	r3, r7, r1
 8012fb4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8012fb6:	240f      	movs	r4, #15
 8012fb8:	193b      	adds	r3, r7, r4
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	7892      	ldrb	r2, [r2, #2]
 8012fbe:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8012fc0:	187b      	adds	r3, r7, r1
 8012fc2:	2102      	movs	r1, #2
 8012fc4:	0018      	movs	r0, r3
 8012fc6:	f7ff fe89 	bl	8012cdc <CalculateCRC>
 8012fca:	0003      	movs	r3, r0
 8012fcc:	001a      	movs	r2, r3
 8012fce:	193b      	adds	r3, r7, r4
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d007      	beq.n	8012fe6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8012fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8013040 <CheckCRC+0xa4>)
 8012fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8013044 <CheckCRC+0xa8>)
 8012fda:	0019      	movs	r1, r3
 8012fdc:	2001      	movs	r0, #1
 8012fde:	f7ff fd6f 	bl	8012ac0 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	e027      	b.n	8013036 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	78da      	ldrb	r2, [r3, #3]
 8012fea:	2108      	movs	r1, #8
 8012fec:	187b      	adds	r3, r7, r1
 8012fee:	701a      	strb	r2, [r3, #0]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	791a      	ldrb	r2, [r3, #4]
 8012ff4:	187b      	adds	r3, r7, r1
 8012ff6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8012ff8:	240e      	movs	r4, #14
 8012ffa:	193b      	adds	r3, r7, r4
 8012ffc:	687a      	ldr	r2, [r7, #4]
 8012ffe:	7952      	ldrb	r2, [r2, #5]
 8013000:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8013002:	187b      	adds	r3, r7, r1
 8013004:	2102      	movs	r1, #2
 8013006:	0018      	movs	r0, r3
 8013008:	f7ff fe68 	bl	8012cdc <CalculateCRC>
 801300c:	0003      	movs	r3, r0
 801300e:	001a      	movs	r2, r3
 8013010:	193b      	adds	r3, r7, r4
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	4293      	cmp	r3, r2
 8013016:	d00d      	beq.n	8013034 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8013018:	4a0b      	ldr	r2, [pc, #44]	@ (8013048 <CheckCRC+0xac>)
 801301a:	4b0a      	ldr	r3, [pc, #40]	@ (8013044 <CheckCRC+0xa8>)
 801301c:	0019      	movs	r1, r3
 801301e:	2001      	movs	r0, #1
 8013020:	f7ff fd4e 	bl	8012ac0 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8013024:	4a09      	ldr	r2, [pc, #36]	@ (801304c <CheckCRC+0xb0>)
 8013026:	4b0a      	ldr	r3, [pc, #40]	@ (8013050 <CheckCRC+0xb4>)
 8013028:	2185      	movs	r1, #133	@ 0x85
 801302a:	0018      	movs	r0, r3
 801302c:	f7ff fe00 	bl	8012c30 <errorHandler>
		return false;
 8013030:	2300      	movs	r3, #0
 8013032:	e000      	b.n	8013036 <CheckCRC+0x9a>
	}
	return true;
 8013034:	2301      	movs	r3, #1
}
 8013036:	0018      	movs	r0, r3
 8013038:	46bd      	mov	sp, r7
 801303a:	b005      	add	sp, #20
 801303c:	bd90      	pop	{r4, r7, pc}
 801303e:	46c0      	nop			@ (mov r8, r8)
 8013040:	0802cc90 	.word	0x0802cc90
 8013044:	0802ccb8 	.word	0x0802ccb8
 8013048:	0802ccbc 	.word	0x0802ccbc
 801304c:	0802cce8 	.word	0x0802cce8
 8013050:	0802d384 	.word	0x0802d384

08013054 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 801305a:	1dbb      	adds	r3, r7, #6
 801305c:	2289      	movs	r2, #137	@ 0x89
 801305e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8013060:	1dbb      	adds	r3, r7, #6
 8013062:	2201      	movs	r2, #1
 8013064:	0019      	movs	r1, r3
 8013066:	2044      	movs	r0, #68	@ 0x44
 8013068:	f7ff fe16 	bl	8012c98 <WriteRegister>
	HAL_Delay(30);
 801306c:	201e      	movs	r0, #30
 801306e:	f000 fa67 	bl	8013540 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8013072:	4b14      	ldr	r3, [pc, #80]	@ (80130c4 <HIDS_DeviceConnected+0x70>)
 8013074:	2206      	movs	r2, #6
 8013076:	0019      	movs	r1, r3
 8013078:	2044      	movs	r0, #68	@ 0x44
 801307a:	f7ff fdeb 	bl	8012c54 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801307e:	1dfb      	adds	r3, r7, #7
 8013080:	2200      	movs	r2, #0
 8013082:	701a      	strb	r2, [r3, #0]
 8013084:	e011      	b.n	80130aa <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8013086:	1dfb      	adds	r3, r7, #7
 8013088:	7818      	ldrb	r0, [r3, #0]
 801308a:	1dfb      	adds	r3, r7, #7
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	4a0d      	ldr	r2, [pc, #52]	@ (80130c4 <HIDS_DeviceConnected+0x70>)
 8013090:	5cd3      	ldrb	r3, [r2, r3]
 8013092:	4a0d      	ldr	r2, [pc, #52]	@ (80130c8 <HIDS_DeviceConnected+0x74>)
 8013094:	490d      	ldr	r1, [pc, #52]	@ (80130cc <HIDS_DeviceConnected+0x78>)
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	0003      	movs	r3, r0
 801309a:	2002      	movs	r0, #2
 801309c:	f7ff fd10 	bl	8012ac0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80130a0:	1dfb      	adds	r3, r7, #7
 80130a2:	781a      	ldrb	r2, [r3, #0]
 80130a4:	1dfb      	adds	r3, r7, #7
 80130a6:	3201      	adds	r2, #1
 80130a8:	701a      	strb	r2, [r3, #0]
 80130aa:	1dfb      	adds	r3, r7, #7
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b05      	cmp	r3, #5
 80130b0:	d9e9      	bls.n	8013086 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80130b2:	4b04      	ldr	r3, [pc, #16]	@ (80130c4 <HIDS_DeviceConnected+0x70>)
 80130b4:	0018      	movs	r0, r3
 80130b6:	f7ff ff71 	bl	8012f9c <CheckCRC>
 80130ba:	0003      	movs	r3, r0
}
 80130bc:	0018      	movs	r0, r3
 80130be:	46bd      	mov	sp, r7
 80130c0:	b002      	add	sp, #8
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	2000221c 	.word	0x2000221c
 80130c8:	0802cd00 	.word	0x0802cd00
 80130cc:	0802cc8c 	.word	0x0802cc8c

080130d0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80130d0:	b580      	push	{r7, lr}
 80130d2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80130d4:	4b04      	ldr	r3, [pc, #16]	@ (80130e8 <HIDS_MeasurementReady+0x18>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	0018      	movs	r0, r3
 80130da:	f7ff fc9b 	bl	8012a14 <TimestampIsReached>
 80130de:	0003      	movs	r3, r0
}
 80130e0:	0018      	movs	r0, r3
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	46c0      	nop			@ (mov r8, r8)
 80130e8:	200000e8 	.word	0x200000e8

080130ec <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b084      	sub	sp, #16
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 80130f6:	4b41      	ldr	r3, [pc, #260]	@ (80131fc <HIDS_GetMeasurementValues+0x110>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d001      	beq.n	8013102 <HIDS_GetMeasurementValues+0x16>
 80130fe:	2301      	movs	r3, #1
 8013100:	e077      	b.n	80131f2 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8013102:	f7ff ffe5 	bl	80130d0 <HIDS_MeasurementReady>
 8013106:	0003      	movs	r3, r0
 8013108:	001a      	movs	r2, r3
 801310a:	2301      	movs	r3, #1
 801310c:	4053      	eors	r3, r2
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d001      	beq.n	8013118 <HIDS_GetMeasurementValues+0x2c>
 8013114:	2300      	movs	r3, #0
 8013116:	e06c      	b.n	80131f2 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8013118:	4b39      	ldr	r3, [pc, #228]	@ (8013200 <HIDS_GetMeasurementValues+0x114>)
 801311a:	2206      	movs	r2, #6
 801311c:	0019      	movs	r1, r3
 801311e:	2044      	movs	r0, #68	@ 0x44
 8013120:	f7ff fd98 	bl	8012c54 <ReadRegister>
 8013124:	0003      	movs	r3, r0
 8013126:	001a      	movs	r2, r3
 8013128:	2301      	movs	r3, #1
 801312a:	4053      	eors	r3, r2
 801312c:	b2db      	uxtb	r3, r3
 801312e:	2b00      	cmp	r3, #0
 8013130:	d005      	beq.n	801313e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8013132:	4a34      	ldr	r2, [pc, #208]	@ (8013204 <HIDS_GetMeasurementValues+0x118>)
 8013134:	4b34      	ldr	r3, [pc, #208]	@ (8013208 <HIDS_GetMeasurementValues+0x11c>)
 8013136:	0019      	movs	r1, r3
 8013138:	2001      	movs	r0, #1
 801313a:	f7ff fcc1 	bl	8012ac0 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 801313e:	4b30      	ldr	r3, [pc, #192]	@ (8013200 <HIDS_GetMeasurementValues+0x114>)
 8013140:	0018      	movs	r0, r3
 8013142:	f7ff ff2b 	bl	8012f9c <CheckCRC>
 8013146:	0003      	movs	r3, r0
 8013148:	001a      	movs	r2, r3
 801314a:	2301      	movs	r3, #1
 801314c:	4053      	eors	r3, r2
 801314e:	b2db      	uxtb	r3, r3
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8013154:	2300      	movs	r3, #0
 8013156:	e04c      	b.n	80131f2 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8013158:	4b29      	ldr	r3, [pc, #164]	@ (8013200 <HIDS_GetMeasurementValues+0x114>)
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	021b      	lsls	r3, r3, #8
 801315e:	4a28      	ldr	r2, [pc, #160]	@ (8013200 <HIDS_GetMeasurementValues+0x114>)
 8013160:	7852      	ldrb	r2, [r2, #1]
 8013162:	4313      	orrs	r3, r2
 8013164:	22af      	movs	r2, #175	@ 0xaf
 8013166:	4353      	muls	r3, r2
 8013168:	0018      	movs	r0, r3
 801316a:	f7f0 f929 	bl	80033c0 <__aeabi_i2d>
 801316e:	2200      	movs	r2, #0
 8013170:	4b26      	ldr	r3, [pc, #152]	@ (801320c <HIDS_GetMeasurementValues+0x120>)
 8013172:	f7ee fe1f 	bl	8001db4 <__aeabi_ddiv>
 8013176:	0002      	movs	r2, r0
 8013178:	000b      	movs	r3, r1
 801317a:	0010      	movs	r0, r2
 801317c:	0019      	movs	r1, r3
 801317e:	f7f0 f9b9 	bl	80034f4 <__aeabi_d2f>
 8013182:	1c03      	adds	r3, r0, #0
 8013184:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8013186:	4922      	ldr	r1, [pc, #136]	@ (8013210 <HIDS_GetMeasurementValues+0x124>)
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f7ee f847 	bl	800121c <__aeabi_fsub>
 801318e:	1c03      	adds	r3, r0, #0
 8013190:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8013192:	4b1b      	ldr	r3, [pc, #108]	@ (8013200 <HIDS_GetMeasurementValues+0x114>)
 8013194:	78db      	ldrb	r3, [r3, #3]
 8013196:	021b      	lsls	r3, r3, #8
 8013198:	4a19      	ldr	r2, [pc, #100]	@ (8013200 <HIDS_GetMeasurementValues+0x114>)
 801319a:	7912      	ldrb	r2, [r2, #4]
 801319c:	431a      	orrs	r2, r3
 801319e:	0013      	movs	r3, r2
 80131a0:	015b      	lsls	r3, r3, #5
 80131a2:	1a9b      	subs	r3, r3, r2
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	189b      	adds	r3, r3, r2
 80131a8:	0018      	movs	r0, r3
 80131aa:	f7f0 f909 	bl	80033c0 <__aeabi_i2d>
 80131ae:	2200      	movs	r2, #0
 80131b0:	4b16      	ldr	r3, [pc, #88]	@ (801320c <HIDS_GetMeasurementValues+0x120>)
 80131b2:	f7ee fdff 	bl	8001db4 <__aeabi_ddiv>
 80131b6:	0002      	movs	r2, r0
 80131b8:	000b      	movs	r3, r1
 80131ba:	0010      	movs	r0, r2
 80131bc:	0019      	movs	r1, r3
 80131be:	f7f0 f999 	bl	80034f4 <__aeabi_d2f>
 80131c2:	1c03      	adds	r3, r0, #0
 80131c4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80131c6:	4913      	ldr	r1, [pc, #76]	@ (8013214 <HIDS_GetMeasurementValues+0x128>)
 80131c8:	68b8      	ldr	r0, [r7, #8]
 80131ca:	f7ee f827 	bl	800121c <__aeabi_fsub>
 80131ce:	1c03      	adds	r3, r0, #0
 80131d0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	0011      	movs	r1, r2
 80131e4:	0018      	movs	r0, r3
 80131e6:	f7fd f80b 	bl	8010200 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80131ea:	4b04      	ldr	r3, [pc, #16]	@ (80131fc <HIDS_GetMeasurementValues+0x110>)
 80131ec:	2201      	movs	r2, #1
 80131ee:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 80131f0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 80131f2:	0018      	movs	r0, r3
 80131f4:	46bd      	mov	sp, r7
 80131f6:	b004      	add	sp, #16
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	46c0      	nop			@ (mov r8, r8)
 80131fc:	20002230 	.word	0x20002230
 8013200:	20002224 	.word	0x20002224
 8013204:	0802cd20 	.word	0x0802cd20
 8013208:	0802ccb8 	.word	0x0802ccb8
 801320c:	40efffe0 	.word	0x40efffe0
 8013210:	42340000 	.word	0x42340000
 8013214:	40c00000 	.word	0x40c00000

08013218 <ResetHIDSresults>:

void ResetHIDSresults() {
 8013218:	b580      	push	{r7, lr}
 801321a:	af00      	add	r7, sp, #0
  humid = 0.0;
 801321c:	4b04      	ldr	r3, [pc, #16]	@ (8013230 <ResetHIDSresults+0x18>)
 801321e:	2200      	movs	r2, #0
 8013220:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8013222:	4b04      	ldr	r3, [pc, #16]	@ (8013234 <ResetHIDSresults+0x1c>)
 8013224:	2200      	movs	r2, #0
 8013226:	601a      	str	r2, [r3, #0]
}
 8013228:	46c0      	nop			@ (mov r8, r8)
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	46c0      	nop			@ (mov r8, r8)
 8013230:	2000220c 	.word	0x2000220c
 8013234:	20002210 	.word	0x20002210

08013238 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8013238:	b5b0      	push	{r4, r5, r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 801323e:	4b65      	ldr	r3, [pc, #404]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	2b06      	cmp	r3, #6
 8013244:	d900      	bls.n	8013248 <HIDS_Upkeep+0x10>
 8013246:	e0b4      	b.n	80133b2 <HIDS_Upkeep+0x17a>
 8013248:	009a      	lsls	r2, r3, #2
 801324a:	4b63      	ldr	r3, [pc, #396]	@ (80133d8 <HIDS_Upkeep+0x1a0>)
 801324c:	18d3      	adds	r3, r2, r3
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8013252:	4a62      	ldr	r2, [pc, #392]	@ (80133dc <HIDS_Upkeep+0x1a4>)
 8013254:	4b62      	ldr	r3, [pc, #392]	@ (80133e0 <HIDS_Upkeep+0x1a8>)
 8013256:	0019      	movs	r1, r3
 8013258:	2003      	movs	r0, #3
 801325a:	f7ff fc31 	bl	8012ac0 <CreateLine>
      break;
 801325e:	e0b3      	b.n	80133c8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8013260:	f7ff ffda 	bl	8013218 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8013264:	4b5b      	ldr	r3, [pc, #364]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 8013266:	2201      	movs	r2, #1
 8013268:	701a      	strb	r2, [r3, #0]
      break;
 801326a:	e0ad      	b.n	80133c8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 801326c:	f7f9 fd08 	bl	800cc80 <getSensorLock>
 8013270:	1e03      	subs	r3, r0, #0
 8013272:	d000      	beq.n	8013276 <HIDS_Upkeep+0x3e>
 8013274:	e0a1      	b.n	80133ba <HIDS_Upkeep+0x182>
        break;
      }
      setSensorLock(HIDS);
 8013276:	2001      	movs	r0, #1
 8013278:	f7f9 fcee 	bl	800cc58 <setSensorLock>
      SetMeasurementIndicator();
 801327c:	f7fe fa0e 	bl	801169c <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8013280:	f7ff fe3c 	bl	8012efc <HIDS_StartMeasurement>
      setSensorLock(FREE);
 8013284:	2000      	movs	r0, #0
 8013286:	f7f9 fce7 	bl	800cc58 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 801328a:	4b52      	ldr	r3, [pc, #328]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 801328c:	2202      	movs	r2, #2
 801328e:	701a      	strb	r2, [r3, #0]
      break;
 8013290:	e09a      	b.n	80133c8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8013292:	f7f9 fcf5 	bl	800cc80 <getSensorLock>
 8013296:	1e03      	subs	r3, r0, #0
 8013298:	d000      	beq.n	801329c <HIDS_Upkeep+0x64>
 801329a:	e090      	b.n	80133be <HIDS_Upkeep+0x186>
        break;
      }
      setSensorLock(HIDS);
 801329c:	2001      	movs	r0, #1
 801329e:	f7f9 fcdb 	bl	800cc58 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 80132a2:	4a50      	ldr	r2, [pc, #320]	@ (80133e4 <HIDS_Upkeep+0x1ac>)
 80132a4:	4b50      	ldr	r3, [pc, #320]	@ (80133e8 <HIDS_Upkeep+0x1b0>)
 80132a6:	0011      	movs	r1, r2
 80132a8:	0018      	movs	r0, r3
 80132aa:	f7ff ff1f 	bl	80130ec <HIDS_GetMeasurementValues>
 80132ae:	1e03      	subs	r3, r0, #0
 80132b0:	d002      	beq.n	80132b8 <HIDS_Upkeep+0x80>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 80132b2:	4b48      	ldr	r3, [pc, #288]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 80132b4:	2203      	movs	r2, #3
 80132b6:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 80132b8:	2000      	movs	r0, #0
 80132ba:	f7f9 fccd 	bl	800cc58 <setSensorLock>
      break;
 80132be:	e083      	b.n	80133c8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80132c0:	4b49      	ldr	r3, [pc, #292]	@ (80133e8 <HIDS_Upkeep+0x1b0>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	1c18      	adds	r0, r3, #0
 80132c6:	f7f0 f8cd 	bl	8003464 <__aeabi_f2d>
 80132ca:	0004      	movs	r4, r0
 80132cc:	000d      	movs	r5, r1
 80132ce:	4b45      	ldr	r3, [pc, #276]	@ (80133e4 <HIDS_Upkeep+0x1ac>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	1c18      	adds	r0, r3, #0
 80132d4:	f7f0 f8c6 	bl	8003464 <__aeabi_f2d>
 80132d8:	0002      	movs	r2, r0
 80132da:	000b      	movs	r3, r1
 80132dc:	4843      	ldr	r0, [pc, #268]	@ (80133ec <HIDS_Upkeep+0x1b4>)
 80132de:	4940      	ldr	r1, [pc, #256]	@ (80133e0 <HIDS_Upkeep+0x1a8>)
 80132e0:	9202      	str	r2, [sp, #8]
 80132e2:	9303      	str	r3, [sp, #12]
 80132e4:	9400      	str	r4, [sp, #0]
 80132e6:	9501      	str	r5, [sp, #4]
 80132e8:	0002      	movs	r2, r0
 80132ea:	2003      	movs	r0, #3
 80132ec:	f7ff fbe8 	bl	8012ac0 <CreateLine>
      setHIDS(temp, humid);
 80132f0:	4b3c      	ldr	r3, [pc, #240]	@ (80133e4 <HIDS_Upkeep+0x1ac>)
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	4b3c      	ldr	r3, [pc, #240]	@ (80133e8 <HIDS_Upkeep+0x1b0>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	1c19      	adds	r1, r3, #0
 80132fa:	1c10      	adds	r0, r2, #0
 80132fc:	f7f1 f974 	bl	80045e8 <setHIDS>
      ResetMeasurementIndicator();
 8013300:	f7fe f9e4 	bl	80116cc <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8013304:	4b37      	ldr	r3, [pc, #220]	@ (80133e4 <HIDS_Upkeep+0x1ac>)
 8013306:	681c      	ldr	r4, [r3, #0]
 8013308:	4a36      	ldr	r2, [pc, #216]	@ (80133e4 <HIDS_Upkeep+0x1ac>)
 801330a:	4b37      	ldr	r3, [pc, #220]	@ (80133e8 <HIDS_Upkeep+0x1b0>)
 801330c:	0011      	movs	r1, r2
 801330e:	0018      	movs	r0, r3
 8013310:	f7ff fd3a 	bl	8012d88 <HIDS_DewPointCalculation>
 8013314:	1c03      	adds	r3, r0, #0
 8013316:	1c19      	adds	r1, r3, #0
 8013318:	1c20      	adds	r0, r4, #0
 801331a:	f7ed ff7f 	bl	800121c <__aeabi_fsub>
 801331e:	1c03      	adds	r3, r0, #0
 8013320:	21fe      	movs	r1, #254	@ 0xfe
 8013322:	0589      	lsls	r1, r1, #22
 8013324:	1c18      	adds	r0, r3, #0
 8013326:	f7ed f903 	bl	8000530 <__aeabi_fcmplt>
 801332a:	1e03      	subs	r3, r0, #0
 801332c:	d020      	beq.n	8013370 <HIDS_Upkeep+0x138>
 801332e:	f7f6 f8a8 	bl	8009482 <getPosixTime>
 8013332:	0002      	movs	r2, r0
 8013334:	4b2e      	ldr	r3, [pc, #184]	@ (80133f0 <HIDS_Upkeep+0x1b8>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	1ad2      	subs	r2, r2, r3
 801333a:	23e1      	movs	r3, #225	@ 0xe1
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	429a      	cmp	r2, r3
 8013340:	d916      	bls.n	8013370 <HIDS_Upkeep+0x138>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8013342:	4a2c      	ldr	r2, [pc, #176]	@ (80133f4 <HIDS_Upkeep+0x1bc>)
 8013344:	4b2c      	ldr	r3, [pc, #176]	@ (80133f8 <HIDS_Upkeep+0x1c0>)
 8013346:	0019      	movs	r1, r3
 8013348:	2002      	movs	r0, #2
 801334a:	f7ff fbb9 	bl	8012ac0 <CreateLine>
        if (getSensorLock() != FREE) {
 801334e:	f7f9 fc97 	bl	800cc80 <getSensorLock>
 8013352:	1e03      	subs	r3, r0, #0
 8013354:	d135      	bne.n	80133c2 <HIDS_Upkeep+0x18a>
          break;
        }
        HIDS_EnableHeater();
 8013356:	f7ff fd89 	bl	8012e6c <HIDS_EnableHeater>
        setSensorLock(FREE);
 801335a:	2000      	movs	r0, #0
 801335c:	f7f9 fc7c 	bl	800cc58 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8013360:	f000 f8e4 	bl	801352c <HAL_GetTick>
 8013364:	0003      	movs	r3, r0
 8013366:	4a25      	ldr	r2, [pc, #148]	@ (80133fc <HIDS_Upkeep+0x1c4>)
 8013368:	189a      	adds	r2, r3, r2
 801336a:	4b25      	ldr	r3, [pc, #148]	@ (8013400 <HIDS_Upkeep+0x1c8>)
 801336c:	601a      	str	r2, [r3, #0]
 801336e:	e011      	b.n	8013394 <HIDS_Upkeep+0x15c>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8013370:	f000 f8dc 	bl	801352c <HAL_GetTick>
 8013374:	0004      	movs	r4, r0
 8013376:	f7f5 fd85 	bl	8008e84 <Check_USB_PowerOn>
 801337a:	1e03      	subs	r3, r0, #0
 801337c:	d103      	bne.n	8013386 <HIDS_Upkeep+0x14e>
 801337e:	4b21      	ldr	r3, [pc, #132]	@ (8013404 <HIDS_Upkeep+0x1cc>)
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d001      	beq.n	801338a <HIDS_Upkeep+0x152>
 8013386:	4b20      	ldr	r3, [pc, #128]	@ (8013408 <HIDS_Upkeep+0x1d0>)
 8013388:	e001      	b.n	801338e <HIDS_Upkeep+0x156>
 801338a:	23fa      	movs	r3, #250	@ 0xfa
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	191a      	adds	r2, r3, r4
 8013390:	4b1b      	ldr	r3, [pc, #108]	@ (8013400 <HIDS_Upkeep+0x1c8>)
 8013392:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8013394:	4b0f      	ldr	r3, [pc, #60]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 8013396:	2206      	movs	r2, #6
 8013398:	701a      	strb	r2, [r3, #0]
      break;
 801339a:	e015      	b.n	80133c8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 801339c:	4b18      	ldr	r3, [pc, #96]	@ (8013400 <HIDS_Upkeep+0x1c8>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	0018      	movs	r0, r3
 80133a2:	f7ff fb37 	bl	8012a14 <TimestampIsReached>
 80133a6:	1e03      	subs	r3, r0, #0
 80133a8:	d00d      	beq.n	80133c6 <HIDS_Upkeep+0x18e>
        HIDSState = HIDS_STATE_INIT;
 80133aa:	4b0a      	ldr	r3, [pc, #40]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 80133ac:	2200      	movs	r2, #0
 80133ae:	701a      	strb	r2, [r3, #0]
      }
      break;
 80133b0:	e009      	b.n	80133c6 <HIDS_Upkeep+0x18e>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80133b2:	4b08      	ldr	r3, [pc, #32]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 80133b4:	2200      	movs	r2, #0
 80133b6:	701a      	strb	r2, [r3, #0]
      break;
 80133b8:	e006      	b.n	80133c8 <HIDS_Upkeep+0x190>
        break;
 80133ba:	46c0      	nop			@ (mov r8, r8)
 80133bc:	e004      	b.n	80133c8 <HIDS_Upkeep+0x190>
        break;
 80133be:	46c0      	nop			@ (mov r8, r8)
 80133c0:	e002      	b.n	80133c8 <HIDS_Upkeep+0x190>
          break;
 80133c2:	46c0      	nop			@ (mov r8, r8)
 80133c4:	e000      	b.n	80133c8 <HIDS_Upkeep+0x190>
      break;
 80133c6:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80133c8:	4b02      	ldr	r3, [pc, #8]	@ (80133d4 <HIDS_Upkeep+0x19c>)
 80133ca:	781b      	ldrb	r3, [r3, #0]
}
 80133cc:	0018      	movs	r0, r3
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bdb0      	pop	{r4, r5, r7, pc}
 80133d2:	46c0      	nop			@ (mov r8, r8)
 80133d4:	20002238 	.word	0x20002238
 80133d8:	0802d368 	.word	0x0802d368
 80133dc:	0802cd54 	.word	0x0802cd54
 80133e0:	0802cd88 	.word	0x0802cd88
 80133e4:	20002210 	.word	0x20002210
 80133e8:	2000220c 	.word	0x2000220c
 80133ec:	0802cd8c 	.word	0x0802cd8c
 80133f0:	2000222c 	.word	0x2000222c
 80133f4:	0802cdc0 	.word	0x0802cdc0
 80133f8:	0802cc8c 	.word	0x0802cc8c
 80133fc:	00002ee0 	.word	0x00002ee0
 8013400:	20002234 	.word	0x20002234
 8013404:	20001e76 	.word	0x20001e76
 8013408:	00002710 	.word	0x00002710

0801340c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 801340c:	480d      	ldr	r0, [pc, #52]	@ (8013444 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801340e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013410:	f7fe ff5a 	bl	80122c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013414:	480c      	ldr	r0, [pc, #48]	@ (8013448 <LoopForever+0x6>)
  ldr r1, =_edata
 8013416:	490d      	ldr	r1, [pc, #52]	@ (801344c <LoopForever+0xa>)
  ldr r2, =_sidata
 8013418:	4a0d      	ldr	r2, [pc, #52]	@ (8013450 <LoopForever+0xe>)
  movs r3, #0
 801341a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801341c:	e002      	b.n	8013424 <LoopCopyDataInit>

0801341e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801341e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013422:	3304      	adds	r3, #4

08013424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013428:	d3f9      	bcc.n	801341e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801342a:	4a0a      	ldr	r2, [pc, #40]	@ (8013454 <LoopForever+0x12>)
  ldr r4, =_ebss
 801342c:	4c0a      	ldr	r4, [pc, #40]	@ (8013458 <LoopForever+0x16>)
  movs r3, #0
 801342e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013430:	e001      	b.n	8013436 <LoopFillZerobss>

08013432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013434:	3204      	adds	r2, #4

08013436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013438:	d3fb      	bcc.n	8013432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801343a:	f011 fe33 	bl	80250a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801343e:	f7f8 fc0f 	bl	800bc60 <main>

08013442 <LoopForever>:

LoopForever:
    b LoopForever
 8013442:	e7fe      	b.n	8013442 <LoopForever>
   ldr   r0, =_estack
 8013444:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801344c:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8013450:	0802dd38 	.word	0x0802dd38
  ldr r2, =_sbss
 8013454:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8013458:	20003640 	.word	0x20003640

0801345c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801345c:	e7fe      	b.n	801345c <ADC1_COMP_IRQHandler>
	...

08013460 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013466:	1dfb      	adds	r3, r7, #7
 8013468:	2200      	movs	r2, #0
 801346a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 801346c:	4b0b      	ldr	r3, [pc, #44]	@ (801349c <HAL_Init+0x3c>)
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	4b0a      	ldr	r3, [pc, #40]	@ (801349c <HAL_Init+0x3c>)
 8013472:	2140      	movs	r1, #64	@ 0x40
 8013474:	430a      	orrs	r2, r1
 8013476:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013478:	2003      	movs	r0, #3
 801347a:	f000 f811 	bl	80134a0 <HAL_InitTick>
 801347e:	1e03      	subs	r3, r0, #0
 8013480:	d003      	beq.n	801348a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013482:	1dfb      	adds	r3, r7, #7
 8013484:	2201      	movs	r2, #1
 8013486:	701a      	strb	r2, [r3, #0]
 8013488:	e001      	b.n	801348e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801348a:	f7fe fdd1 	bl	8012030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801348e:	1dfb      	adds	r3, r7, #7
 8013490:	781b      	ldrb	r3, [r3, #0]
}
 8013492:	0018      	movs	r0, r3
 8013494:	46bd      	mov	sp, r7
 8013496:	b002      	add	sp, #8
 8013498:	bd80      	pop	{r7, pc}
 801349a:	46c0      	nop			@ (mov r8, r8)
 801349c:	40022000 	.word	0x40022000

080134a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80134a0:	b590      	push	{r4, r7, lr}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80134a8:	4b14      	ldr	r3, [pc, #80]	@ (80134fc <HAL_InitTick+0x5c>)
 80134aa:	681c      	ldr	r4, [r3, #0]
 80134ac:	4b14      	ldr	r3, [pc, #80]	@ (8013500 <HAL_InitTick+0x60>)
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	0019      	movs	r1, r3
 80134b2:	23fa      	movs	r3, #250	@ 0xfa
 80134b4:	0098      	lsls	r0, r3, #2
 80134b6:	f7ec fe75 	bl	80001a4 <__udivsi3>
 80134ba:	0003      	movs	r3, r0
 80134bc:	0019      	movs	r1, r3
 80134be:	0020      	movs	r0, r4
 80134c0:	f7ec fe70 	bl	80001a4 <__udivsi3>
 80134c4:	0003      	movs	r3, r0
 80134c6:	0018      	movs	r0, r3
 80134c8:	f000 fcfd 	bl	8013ec6 <HAL_SYSTICK_Config>
 80134cc:	1e03      	subs	r3, r0, #0
 80134ce:	d001      	beq.n	80134d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80134d0:	2301      	movs	r3, #1
 80134d2:	e00f      	b.n	80134f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2b03      	cmp	r3, #3
 80134d8:	d80b      	bhi.n	80134f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80134da:	6879      	ldr	r1, [r7, #4]
 80134dc:	2301      	movs	r3, #1
 80134de:	425b      	negs	r3, r3
 80134e0:	2200      	movs	r2, #0
 80134e2:	0018      	movs	r0, r3
 80134e4:	f000 fcc6 	bl	8013e74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80134e8:	4b06      	ldr	r3, [pc, #24]	@ (8013504 <HAL_InitTick+0x64>)
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	e000      	b.n	80134f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80134f2:	2301      	movs	r3, #1
}
 80134f4:	0018      	movs	r0, r3
 80134f6:	46bd      	mov	sp, r7
 80134f8:	b003      	add	sp, #12
 80134fa:	bd90      	pop	{r4, r7, pc}
 80134fc:	200000e0 	.word	0x200000e0
 8013500:	200000f4 	.word	0x200000f4
 8013504:	200000f0 	.word	0x200000f0

08013508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801350c:	4b05      	ldr	r3, [pc, #20]	@ (8013524 <HAL_IncTick+0x1c>)
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	001a      	movs	r2, r3
 8013512:	4b05      	ldr	r3, [pc, #20]	@ (8013528 <HAL_IncTick+0x20>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	18d2      	adds	r2, r2, r3
 8013518:	4b03      	ldr	r3, [pc, #12]	@ (8013528 <HAL_IncTick+0x20>)
 801351a:	601a      	str	r2, [r3, #0]
}
 801351c:	46c0      	nop			@ (mov r8, r8)
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	46c0      	nop			@ (mov r8, r8)
 8013524:	200000f4 	.word	0x200000f4
 8013528:	2000223c 	.word	0x2000223c

0801352c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	af00      	add	r7, sp, #0
  return uwTick;
 8013530:	4b02      	ldr	r3, [pc, #8]	@ (801353c <HAL_GetTick+0x10>)
 8013532:	681b      	ldr	r3, [r3, #0]
}
 8013534:	0018      	movs	r0, r3
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	46c0      	nop			@ (mov r8, r8)
 801353c:	2000223c 	.word	0x2000223c

08013540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013548:	f7ff fff0 	bl	801352c <HAL_GetTick>
 801354c:	0003      	movs	r3, r0
 801354e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	3301      	adds	r3, #1
 8013558:	d005      	beq.n	8013566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801355a:	4b0a      	ldr	r3, [pc, #40]	@ (8013584 <HAL_Delay+0x44>)
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	001a      	movs	r2, r3
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	189b      	adds	r3, r3, r2
 8013564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013566:	46c0      	nop			@ (mov r8, r8)
 8013568:	f7ff ffe0 	bl	801352c <HAL_GetTick>
 801356c:	0002      	movs	r2, r0
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	68fa      	ldr	r2, [r7, #12]
 8013574:	429a      	cmp	r2, r3
 8013576:	d8f7      	bhi.n	8013568 <HAL_Delay+0x28>
  {
  }
}
 8013578:	46c0      	nop			@ (mov r8, r8)
 801357a:	46c0      	nop			@ (mov r8, r8)
 801357c:	46bd      	mov	sp, r7
 801357e:	b004      	add	sp, #16
 8013580:	bd80      	pop	{r7, pc}
 8013582:	46c0      	nop			@ (mov r8, r8)
 8013584:	200000f4 	.word	0x200000f4

08013588 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801358c:	4b04      	ldr	r3, [pc, #16]	@ (80135a0 <HAL_SuspendTick+0x18>)
 801358e:	681a      	ldr	r2, [r3, #0]
 8013590:	4b03      	ldr	r3, [pc, #12]	@ (80135a0 <HAL_SuspendTick+0x18>)
 8013592:	2102      	movs	r1, #2
 8013594:	438a      	bics	r2, r1
 8013596:	601a      	str	r2, [r3, #0]
}
 8013598:	46c0      	nop			@ (mov r8, r8)
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	46c0      	nop			@ (mov r8, r8)
 80135a0:	e000e010 	.word	0xe000e010

080135a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80135a8:	4b04      	ldr	r3, [pc, #16]	@ (80135bc <HAL_ResumeTick+0x18>)
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	4b03      	ldr	r3, [pc, #12]	@ (80135bc <HAL_ResumeTick+0x18>)
 80135ae:	2102      	movs	r1, #2
 80135b0:	430a      	orrs	r2, r1
 80135b2:	601a      	str	r2, [r3, #0]
}
 80135b4:	46c0      	nop			@ (mov r8, r8)
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	46c0      	nop			@ (mov r8, r8)
 80135bc:	e000e010 	.word	0xe000e010

080135c0 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80135c4:	4b02      	ldr	r3, [pc, #8]	@ (80135d0 <HAL_GetUIDw0+0x10>)
 80135c6:	681b      	ldr	r3, [r3, #0]
}
 80135c8:	0018      	movs	r0, r3
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	46c0      	nop			@ (mov r8, r8)
 80135d0:	1ff80050 	.word	0x1ff80050

080135d4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80135d8:	4b02      	ldr	r3, [pc, #8]	@ (80135e4 <HAL_GetUIDw1+0x10>)
 80135da:	681b      	ldr	r3, [r3, #0]
}
 80135dc:	0018      	movs	r0, r3
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	46c0      	nop			@ (mov r8, r8)
 80135e4:	1ff80054 	.word	0x1ff80054

080135e8 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80135ec:	4b02      	ldr	r3, [pc, #8]	@ (80135f8 <HAL_GetUIDw2+0x10>)
 80135ee:	681b      	ldr	r3, [r3, #0]
}
 80135f0:	0018      	movs	r0, r3
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	46c0      	nop			@ (mov r8, r8)
 80135f8:	1ff80064 	.word	0x1ff80064

080135fc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d101      	bne.n	801360e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 801360a:	2301      	movs	r3, #1
 801360c:	e159      	b.n	80138c2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013612:	2b00      	cmp	r3, #0
 8013614:	d10a      	bne.n	801362c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2200      	movs	r2, #0
 801361a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2250      	movs	r2, #80	@ 0x50
 8013620:	2100      	movs	r1, #0
 8013622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	0018      	movs	r0, r3
 8013628:	f7f6 fae4 	bl	8009bf4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013630:	2210      	movs	r2, #16
 8013632:	4013      	ands	r3, r2
 8013634:	2b10      	cmp	r3, #16
 8013636:	d005      	beq.n	8013644 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	2204      	movs	r2, #4
 8013640:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013642:	d00b      	beq.n	801365c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013648:	2210      	movs	r2, #16
 801364a:	431a      	orrs	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2250      	movs	r2, #80	@ 0x50
 8013654:	2100      	movs	r1, #0
 8013656:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013658:	2301      	movs	r3, #1
 801365a:	e132      	b.n	80138c2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013660:	4a9a      	ldr	r2, [pc, #616]	@ (80138cc <HAL_ADC_Init+0x2d0>)
 8013662:	4013      	ands	r3, r2
 8013664:	2202      	movs	r2, #2
 8013666:	431a      	orrs	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	2203      	movs	r2, #3
 8013674:	4013      	ands	r3, r2
 8013676:	2b01      	cmp	r3, #1
 8013678:	d108      	bne.n	801368c <HAL_ADC_Init+0x90>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2201      	movs	r2, #1
 8013682:	4013      	ands	r3, r2
 8013684:	2b01      	cmp	r3, #1
 8013686:	d101      	bne.n	801368c <HAL_ADC_Init+0x90>
 8013688:	2301      	movs	r3, #1
 801368a:	e000      	b.n	801368e <HAL_ADC_Init+0x92>
 801368c:	2300      	movs	r3, #0
 801368e:	2b00      	cmp	r3, #0
 8013690:	d149      	bne.n	8013726 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	685a      	ldr	r2, [r3, #4]
 8013696:	23c0      	movs	r3, #192	@ 0xc0
 8013698:	061b      	lsls	r3, r3, #24
 801369a:	429a      	cmp	r2, r3
 801369c:	d00b      	beq.n	80136b6 <HAL_ADC_Init+0xba>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	685a      	ldr	r2, [r3, #4]
 80136a2:	2380      	movs	r3, #128	@ 0x80
 80136a4:	05db      	lsls	r3, r3, #23
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d005      	beq.n	80136b6 <HAL_ADC_Init+0xba>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	685a      	ldr	r2, [r3, #4]
 80136ae:	2380      	movs	r3, #128	@ 0x80
 80136b0:	061b      	lsls	r3, r3, #24
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d111      	bne.n	80136da <HAL_ADC_Init+0xde>
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	691a      	ldr	r2, [r3, #16]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	0092      	lsls	r2, r2, #2
 80136c2:	0892      	lsrs	r2, r2, #2
 80136c4:	611a      	str	r2, [r3, #16]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	6919      	ldr	r1, [r3, #16]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	685a      	ldr	r2, [r3, #4]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	430a      	orrs	r2, r1
 80136d6:	611a      	str	r2, [r3, #16]
 80136d8:	e014      	b.n	8013704 <HAL_ADC_Init+0x108>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	691a      	ldr	r2, [r3, #16]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	0092      	lsls	r2, r2, #2
 80136e6:	0892      	lsrs	r2, r2, #2
 80136e8:	611a      	str	r2, [r3, #16]
 80136ea:	4b79      	ldr	r3, [pc, #484]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	4b78      	ldr	r3, [pc, #480]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 80136f0:	4978      	ldr	r1, [pc, #480]	@ (80138d4 <HAL_ADC_Init+0x2d8>)
 80136f2:	400a      	ands	r2, r1
 80136f4:	601a      	str	r2, [r3, #0]
 80136f6:	4b76      	ldr	r3, [pc, #472]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 80136f8:	6819      	ldr	r1, [r3, #0]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	685a      	ldr	r2, [r3, #4]
 80136fe:	4b74      	ldr	r3, [pc, #464]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 8013700:	430a      	orrs	r2, r1
 8013702:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	68da      	ldr	r2, [r3, #12]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2118      	movs	r1, #24
 8013710:	438a      	bics	r2, r1
 8013712:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	68d9      	ldr	r1, [r3, #12]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	689a      	ldr	r2, [r3, #8]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	430a      	orrs	r2, r1
 8013724:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8013726:	4b6a      	ldr	r3, [pc, #424]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	4b69      	ldr	r3, [pc, #420]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 801372c:	496a      	ldr	r1, [pc, #424]	@ (80138d8 <HAL_ADC_Init+0x2dc>)
 801372e:	400a      	ands	r2, r1
 8013730:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8013732:	4b67      	ldr	r3, [pc, #412]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 8013734:	6819      	ldr	r1, [r3, #0]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801373a:	065a      	lsls	r2, r3, #25
 801373c:	4b64      	ldr	r3, [pc, #400]	@ (80138d0 <HAL_ADC_Init+0x2d4>)
 801373e:	430a      	orrs	r2, r1
 8013740:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	689a      	ldr	r2, [r3, #8]
 8013748:	2380      	movs	r3, #128	@ 0x80
 801374a:	055b      	lsls	r3, r3, #21
 801374c:	4013      	ands	r3, r2
 801374e:	d108      	bne.n	8013762 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	689a      	ldr	r2, [r3, #8]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2180      	movs	r1, #128	@ 0x80
 801375c:	0549      	lsls	r1, r1, #21
 801375e:	430a      	orrs	r2, r1
 8013760:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	68da      	ldr	r2, [r3, #12]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	495b      	ldr	r1, [pc, #364]	@ (80138dc <HAL_ADC_Init+0x2e0>)
 801376e:	400a      	ands	r2, r1
 8013770:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	68d9      	ldr	r1, [r3, #12]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	691b      	ldr	r3, [r3, #16]
 8013780:	2b02      	cmp	r3, #2
 8013782:	d101      	bne.n	8013788 <HAL_ADC_Init+0x18c>
 8013784:	2304      	movs	r3, #4
 8013786:	e000      	b.n	801378a <HAL_ADC_Init+0x18e>
 8013788:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801378a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2020      	movs	r0, #32
 8013790:	5c1b      	ldrb	r3, [r3, r0]
 8013792:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013794:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	202c      	movs	r0, #44	@ 0x2c
 801379a:	5c1b      	ldrb	r3, [r3, r0]
 801379c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801379e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80137a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	699b      	ldr	r3, [r3, #24]
 80137aa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80137ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	69db      	ldr	r3, [r3, #28]
 80137b2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80137b4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	430a      	orrs	r2, r1
 80137bc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80137c2:	23c2      	movs	r3, #194	@ 0xc2
 80137c4:	33ff      	adds	r3, #255	@ 0xff
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d00b      	beq.n	80137e2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	68d9      	ldr	r1, [r3, #12]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80137d8:	431a      	orrs	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	430a      	orrs	r2, r1
 80137e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2221      	movs	r2, #33	@ 0x21
 80137e6:	5c9b      	ldrb	r3, [r3, r2]
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d11a      	bne.n	8013822 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2220      	movs	r2, #32
 80137f0:	5c9b      	ldrb	r3, [r3, r2]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d109      	bne.n	801380a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	68da      	ldr	r2, [r3, #12]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	2180      	movs	r1, #128	@ 0x80
 8013802:	0249      	lsls	r1, r1, #9
 8013804:	430a      	orrs	r2, r1
 8013806:	60da      	str	r2, [r3, #12]
 8013808:	e00b      	b.n	8013822 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801380e:	2220      	movs	r2, #32
 8013810:	431a      	orrs	r2, r3
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801381a:	2201      	movs	r2, #1
 801381c:	431a      	orrs	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013826:	2b01      	cmp	r3, #1
 8013828:	d11f      	bne.n	801386a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	691a      	ldr	r2, [r3, #16]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	492a      	ldr	r1, [pc, #168]	@ (80138e0 <HAL_ADC_Init+0x2e4>)
 8013836:	400a      	ands	r2, r1
 8013838:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	6919      	ldr	r1, [r3, #16]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013848:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 801384e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	430a      	orrs	r2, r1
 8013856:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	691a      	ldr	r2, [r3, #16]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2101      	movs	r1, #1
 8013864:	430a      	orrs	r2, r1
 8013866:	611a      	str	r2, [r3, #16]
 8013868:	e00e      	b.n	8013888 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	691b      	ldr	r3, [r3, #16]
 8013870:	2201      	movs	r2, #1
 8013872:	4013      	ands	r3, r2
 8013874:	2b01      	cmp	r3, #1
 8013876:	d107      	bne.n	8013888 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	691a      	ldr	r2, [r3, #16]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2101      	movs	r1, #1
 8013884:	438a      	bics	r2, r1
 8013886:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	695a      	ldr	r2, [r3, #20]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2107      	movs	r1, #7
 8013894:	438a      	bics	r2, r1
 8013896:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	6959      	ldr	r1, [r3, #20]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	430a      	orrs	r2, r1
 80138a8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2200      	movs	r2, #0
 80138ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138b4:	2203      	movs	r2, #3
 80138b6:	4393      	bics	r3, r2
 80138b8:	2201      	movs	r2, #1
 80138ba:	431a      	orrs	r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80138c0:	2300      	movs	r3, #0
}
 80138c2:	0018      	movs	r0, r3
 80138c4:	46bd      	mov	sp, r7
 80138c6:	b002      	add	sp, #8
 80138c8:	bd80      	pop	{r7, pc}
 80138ca:	46c0      	nop			@ (mov r8, r8)
 80138cc:	fffffefd 	.word	0xfffffefd
 80138d0:	40012708 	.word	0x40012708
 80138d4:	ffc3ffff 	.word	0xffc3ffff
 80138d8:	fdffffff 	.word	0xfdffffff
 80138dc:	fffe0219 	.word	0xfffe0219
 80138e0:	fffffc03 	.word	0xfffffc03

080138e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80138e4:	b590      	push	{r4, r7, lr}
 80138e6:	b085      	sub	sp, #20
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80138ec:	230f      	movs	r3, #15
 80138ee:	18fb      	adds	r3, r7, r3
 80138f0:	2200      	movs	r2, #0
 80138f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	2204      	movs	r2, #4
 80138fc:	4013      	ands	r3, r2
 80138fe:	d138      	bne.n	8013972 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2250      	movs	r2, #80	@ 0x50
 8013904:	5c9b      	ldrb	r3, [r3, r2]
 8013906:	2b01      	cmp	r3, #1
 8013908:	d101      	bne.n	801390e <HAL_ADC_Start+0x2a>
 801390a:	2302      	movs	r3, #2
 801390c:	e038      	b.n	8013980 <HAL_ADC_Start+0x9c>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2250      	movs	r2, #80	@ 0x50
 8013912:	2101      	movs	r1, #1
 8013914:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	69db      	ldr	r3, [r3, #28]
 801391a:	2b01      	cmp	r3, #1
 801391c:	d007      	beq.n	801392e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 801391e:	230f      	movs	r3, #15
 8013920:	18fc      	adds	r4, r7, r3
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	0018      	movs	r0, r3
 8013926:	f000 f95f 	bl	8013be8 <ADC_Enable>
 801392a:	0003      	movs	r3, r0
 801392c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801392e:	230f      	movs	r3, #15
 8013930:	18fb      	adds	r3, r7, r3
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d120      	bne.n	801397a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801393c:	4a12      	ldr	r2, [pc, #72]	@ (8013988 <HAL_ADC_Start+0xa4>)
 801393e:	4013      	ands	r3, r2
 8013940:	2280      	movs	r2, #128	@ 0x80
 8013942:	0052      	lsls	r2, r2, #1
 8013944:	431a      	orrs	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2200      	movs	r2, #0
 801394e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2250      	movs	r2, #80	@ 0x50
 8013954:	2100      	movs	r1, #0
 8013956:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	221c      	movs	r2, #28
 801395e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	689a      	ldr	r2, [r3, #8]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2104      	movs	r1, #4
 801396c:	430a      	orrs	r2, r1
 801396e:	609a      	str	r2, [r3, #8]
 8013970:	e003      	b.n	801397a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013972:	230f      	movs	r3, #15
 8013974:	18fb      	adds	r3, r7, r3
 8013976:	2202      	movs	r2, #2
 8013978:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 801397a:	230f      	movs	r3, #15
 801397c:	18fb      	adds	r3, r7, r3
 801397e:	781b      	ldrb	r3, [r3, #0]
}
 8013980:	0018      	movs	r0, r3
 8013982:	46bd      	mov	sp, r7
 8013984:	b005      	add	sp, #20
 8013986:	bd90      	pop	{r4, r7, pc}
 8013988:	fffff0fe 	.word	0xfffff0fe

0801398c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b084      	sub	sp, #16
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8013996:	2300      	movs	r3, #0
 8013998:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 801399a:	2300      	movs	r3, #0
 801399c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	695b      	ldr	r3, [r3, #20]
 80139a2:	2b08      	cmp	r3, #8
 80139a4:	d102      	bne.n	80139ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80139a6:	2308      	movs	r3, #8
 80139a8:	60fb      	str	r3, [r7, #12]
 80139aa:	e014      	b.n	80139d6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	2201      	movs	r2, #1
 80139b4:	4013      	ands	r3, r2
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d10b      	bne.n	80139d2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139be:	2220      	movs	r2, #32
 80139c0:	431a      	orrs	r2, r3
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2250      	movs	r2, #80	@ 0x50
 80139ca:	2100      	movs	r1, #0
 80139cc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80139ce:	2301      	movs	r3, #1
 80139d0:	e072      	b.n	8013ab8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80139d2:	230c      	movs	r3, #12
 80139d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80139d6:	f7ff fda9 	bl	801352c <HAL_GetTick>
 80139da:	0003      	movs	r3, r0
 80139dc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80139de:	e01f      	b.n	8013a20 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	3301      	adds	r3, #1
 80139e4:	d01c      	beq.n	8013a20 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d007      	beq.n	80139fc <HAL_ADC_PollForConversion+0x70>
 80139ec:	f7ff fd9e 	bl	801352c <HAL_GetTick>
 80139f0:	0002      	movs	r2, r0
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d211      	bcs.n	8013a20 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	68fa      	ldr	r2, [r7, #12]
 8013a04:	4013      	ands	r3, r2
 8013a06:	d10b      	bne.n	8013a20 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a0c:	2204      	movs	r2, #4
 8013a0e:	431a      	orrs	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2250      	movs	r2, #80	@ 0x50
 8013a18:	2100      	movs	r1, #0
 8013a1a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013a1c:	2303      	movs	r3, #3
 8013a1e:	e04b      	b.n	8013ab8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	68fa      	ldr	r2, [r7, #12]
 8013a28:	4013      	ands	r3, r2
 8013a2a:	d0d9      	beq.n	80139e0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a30:	2280      	movs	r2, #128	@ 0x80
 8013a32:	0092      	lsls	r2, r2, #2
 8013a34:	431a      	orrs	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	68da      	ldr	r2, [r3, #12]
 8013a40:	23c0      	movs	r3, #192	@ 0xc0
 8013a42:	011b      	lsls	r3, r3, #4
 8013a44:	4013      	ands	r3, r2
 8013a46:	d12e      	bne.n	8013aa6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2220      	movs	r2, #32
 8013a4c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d129      	bne.n	8013aa6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2208      	movs	r2, #8
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	2b08      	cmp	r3, #8
 8013a5e:	d122      	bne.n	8013aa6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	689b      	ldr	r3, [r3, #8]
 8013a66:	2204      	movs	r2, #4
 8013a68:	4013      	ands	r3, r2
 8013a6a:	d110      	bne.n	8013a8e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	685a      	ldr	r2, [r3, #4]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	210c      	movs	r1, #12
 8013a78:	438a      	bics	r2, r1
 8013a7a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a80:	4a0f      	ldr	r2, [pc, #60]	@ (8013ac0 <HAL_ADC_PollForConversion+0x134>)
 8013a82:	4013      	ands	r3, r2
 8013a84:	2201      	movs	r2, #1
 8013a86:	431a      	orrs	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8013a8c:	e00b      	b.n	8013aa6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a92:	2220      	movs	r2, #32
 8013a94:	431a      	orrs	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	431a      	orrs	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	699b      	ldr	r3, [r3, #24]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d103      	bne.n	8013ab6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	220c      	movs	r2, #12
 8013ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013ab6:	2300      	movs	r3, #0
}
 8013ab8:	0018      	movs	r0, r3
 8013aba:	46bd      	mov	sp, r7
 8013abc:	b004      	add	sp, #16
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	fffffefe 	.word	0xfffffefe

08013ac4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8013ad2:	0018      	movs	r0, r3
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	b002      	add	sp, #8
 8013ad8:	bd80      	pop	{r7, pc}
	...

08013adc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2250      	movs	r2, #80	@ 0x50
 8013aea:	5c9b      	ldrb	r3, [r3, r2]
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d101      	bne.n	8013af4 <HAL_ADC_ConfigChannel+0x18>
 8013af0:	2302      	movs	r3, #2
 8013af2:	e06c      	b.n	8013bce <HAL_ADC_ConfigChannel+0xf2>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2250      	movs	r2, #80	@ 0x50
 8013af8:	2101      	movs	r1, #1
 8013afa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	689b      	ldr	r3, [r3, #8]
 8013b02:	2204      	movs	r2, #4
 8013b04:	4013      	ands	r3, r2
 8013b06:	d00b      	beq.n	8013b20 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b0c:	2220      	movs	r2, #32
 8013b0e:	431a      	orrs	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2250      	movs	r2, #80	@ 0x50
 8013b18:	2100      	movs	r1, #0
 8013b1a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	e056      	b.n	8013bce <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	4a2c      	ldr	r2, [pc, #176]	@ (8013bd8 <HAL_ADC_ConfigChannel+0xfc>)
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d028      	beq.n	8013b7c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	035b      	lsls	r3, r3, #13
 8013b36:	0b5a      	lsrs	r2, r3, #13
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	430a      	orrs	r2, r1
 8013b3e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	681a      	ldr	r2, [r3, #0]
 8013b44:	2380      	movs	r3, #128	@ 0x80
 8013b46:	02db      	lsls	r3, r3, #11
 8013b48:	4013      	ands	r3, r2
 8013b4a:	d009      	beq.n	8013b60 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8013b4c:	4b23      	ldr	r3, [pc, #140]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	4b22      	ldr	r3, [pc, #136]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013b52:	2180      	movs	r1, #128	@ 0x80
 8013b54:	0409      	lsls	r1, r1, #16
 8013b56:	430a      	orrs	r2, r1
 8013b58:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8013b5a:	200a      	movs	r0, #10
 8013b5c:	f000 f8ac 	bl	8013cb8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	2380      	movs	r3, #128	@ 0x80
 8013b66:	029b      	lsls	r3, r3, #10
 8013b68:	4013      	ands	r3, r2
 8013b6a:	d02b      	beq.n	8013bc4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8013b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	4b1a      	ldr	r3, [pc, #104]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013b72:	2180      	movs	r1, #128	@ 0x80
 8013b74:	03c9      	lsls	r1, r1, #15
 8013b76:	430a      	orrs	r2, r1
 8013b78:	601a      	str	r2, [r3, #0]
 8013b7a:	e023      	b.n	8013bc4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	035b      	lsls	r3, r3, #13
 8013b88:	0b5b      	lsrs	r3, r3, #13
 8013b8a:	43d9      	mvns	r1, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	400a      	ands	r2, r1
 8013b92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	2380      	movs	r3, #128	@ 0x80
 8013b9a:	02db      	lsls	r3, r3, #11
 8013b9c:	4013      	ands	r3, r2
 8013b9e:	d005      	beq.n	8013bac <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8013ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013ba6:	490e      	ldr	r1, [pc, #56]	@ (8013be0 <HAL_ADC_ConfigChannel+0x104>)
 8013ba8:	400a      	ands	r2, r1
 8013baa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	2380      	movs	r3, #128	@ 0x80
 8013bb2:	029b      	lsls	r3, r3, #10
 8013bb4:	4013      	ands	r3, r2
 8013bb6:	d005      	beq.n	8013bc4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8013bb8:	4b08      	ldr	r3, [pc, #32]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	4b07      	ldr	r3, [pc, #28]	@ (8013bdc <HAL_ADC_ConfigChannel+0x100>)
 8013bbe:	4909      	ldr	r1, [pc, #36]	@ (8013be4 <HAL_ADC_ConfigChannel+0x108>)
 8013bc0:	400a      	ands	r2, r1
 8013bc2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2250      	movs	r2, #80	@ 0x50
 8013bc8:	2100      	movs	r1, #0
 8013bca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8013bcc:	2300      	movs	r3, #0
}
 8013bce:	0018      	movs	r0, r3
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	b002      	add	sp, #8
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	46c0      	nop			@ (mov r8, r8)
 8013bd8:	00001001 	.word	0x00001001
 8013bdc:	40012708 	.word	0x40012708
 8013be0:	ff7fffff 	.word	0xff7fffff
 8013be4:	ffbfffff 	.word	0xffbfffff

08013be8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b084      	sub	sp, #16
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	2203      	movs	r2, #3
 8013bfc:	4013      	ands	r3, r2
 8013bfe:	2b01      	cmp	r3, #1
 8013c00:	d108      	bne.n	8013c14 <ADC_Enable+0x2c>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2201      	movs	r2, #1
 8013c0a:	4013      	ands	r3, r2
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d101      	bne.n	8013c14 <ADC_Enable+0x2c>
 8013c10:	2301      	movs	r3, #1
 8013c12:	e000      	b.n	8013c16 <ADC_Enable+0x2e>
 8013c14:	2300      	movs	r3, #0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d146      	bne.n	8013ca8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	4a24      	ldr	r2, [pc, #144]	@ (8013cb4 <ADC_Enable+0xcc>)
 8013c22:	4013      	ands	r3, r2
 8013c24:	d00d      	beq.n	8013c42 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c2a:	2210      	movs	r2, #16
 8013c2c:	431a      	orrs	r2, r3
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c36:	2201      	movs	r2, #1
 8013c38:	431a      	orrs	r2, r3
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e033      	b.n	8013caa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	689a      	ldr	r2, [r3, #8]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2101      	movs	r1, #1
 8013c4e:	430a      	orrs	r2, r1
 8013c50:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8013c52:	2001      	movs	r0, #1
 8013c54:	f000 f830 	bl	8013cb8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8013c58:	f7ff fc68 	bl	801352c <HAL_GetTick>
 8013c5c:	0003      	movs	r3, r0
 8013c5e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013c60:	e01b      	b.n	8013c9a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013c62:	f7ff fc63 	bl	801352c <HAL_GetTick>
 8013c66:	0002      	movs	r2, r0
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	2b0a      	cmp	r3, #10
 8013c6e:	d914      	bls.n	8013c9a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	2201      	movs	r2, #1
 8013c78:	4013      	ands	r3, r2
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d00d      	beq.n	8013c9a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c82:	2210      	movs	r2, #16
 8013c84:	431a      	orrs	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c8e:	2201      	movs	r2, #1
 8013c90:	431a      	orrs	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8013c96:	2301      	movs	r3, #1
 8013c98:	e007      	b.n	8013caa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	4013      	ands	r3, r2
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d1dc      	bne.n	8013c62 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8013ca8:	2300      	movs	r3, #0
}
 8013caa:	0018      	movs	r0, r3
 8013cac:	46bd      	mov	sp, r7
 8013cae:	b004      	add	sp, #16
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	46c0      	nop			@ (mov r8, r8)
 8013cb4:	80000017 	.word	0x80000017

08013cb8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8013cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8013cf0 <ADC_DelayMicroSecond+0x38>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	490b      	ldr	r1, [pc, #44]	@ (8013cf4 <ADC_DelayMicroSecond+0x3c>)
 8013cc6:	0018      	movs	r0, r3
 8013cc8:	f7ec fa6c 	bl	80001a4 <__udivsi3>
 8013ccc:	0003      	movs	r3, r0
 8013cce:	001a      	movs	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4353      	muls	r3, r2
 8013cd4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8013cd6:	e002      	b.n	8013cde <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	3b01      	subs	r3, #1
 8013cdc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d1f9      	bne.n	8013cd8 <ADC_DelayMicroSecond+0x20>
  }
}
 8013ce4:	46c0      	nop			@ (mov r8, r8)
 8013ce6:	46c0      	nop			@ (mov r8, r8)
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	b004      	add	sp, #16
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	46c0      	nop			@ (mov r8, r8)
 8013cf0:	200000e0 	.word	0x200000e0
 8013cf4:	000f4240 	.word	0x000f4240

08013cf8 <__NVIC_EnableIRQ>:
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	0002      	movs	r2, r0
 8013d00:	1dfb      	adds	r3, r7, #7
 8013d02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013d04:	1dfb      	adds	r3, r7, #7
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	2b7f      	cmp	r3, #127	@ 0x7f
 8013d0a:	d809      	bhi.n	8013d20 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013d0c:	1dfb      	adds	r3, r7, #7
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	001a      	movs	r2, r3
 8013d12:	231f      	movs	r3, #31
 8013d14:	401a      	ands	r2, r3
 8013d16:	4b04      	ldr	r3, [pc, #16]	@ (8013d28 <__NVIC_EnableIRQ+0x30>)
 8013d18:	2101      	movs	r1, #1
 8013d1a:	4091      	lsls	r1, r2
 8013d1c:	000a      	movs	r2, r1
 8013d1e:	601a      	str	r2, [r3, #0]
}
 8013d20:	46c0      	nop			@ (mov r8, r8)
 8013d22:	46bd      	mov	sp, r7
 8013d24:	b002      	add	sp, #8
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	e000e100 	.word	0xe000e100

08013d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013d2c:	b590      	push	{r4, r7, lr}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	0002      	movs	r2, r0
 8013d34:	6039      	str	r1, [r7, #0]
 8013d36:	1dfb      	adds	r3, r7, #7
 8013d38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013d3a:	1dfb      	adds	r3, r7, #7
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013d40:	d828      	bhi.n	8013d94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013d42:	4a2f      	ldr	r2, [pc, #188]	@ (8013e00 <__NVIC_SetPriority+0xd4>)
 8013d44:	1dfb      	adds	r3, r7, #7
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	b25b      	sxtb	r3, r3
 8013d4a:	089b      	lsrs	r3, r3, #2
 8013d4c:	33c0      	adds	r3, #192	@ 0xc0
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	589b      	ldr	r3, [r3, r2]
 8013d52:	1dfa      	adds	r2, r7, #7
 8013d54:	7812      	ldrb	r2, [r2, #0]
 8013d56:	0011      	movs	r1, r2
 8013d58:	2203      	movs	r2, #3
 8013d5a:	400a      	ands	r2, r1
 8013d5c:	00d2      	lsls	r2, r2, #3
 8013d5e:	21ff      	movs	r1, #255	@ 0xff
 8013d60:	4091      	lsls	r1, r2
 8013d62:	000a      	movs	r2, r1
 8013d64:	43d2      	mvns	r2, r2
 8013d66:	401a      	ands	r2, r3
 8013d68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	019b      	lsls	r3, r3, #6
 8013d6e:	22ff      	movs	r2, #255	@ 0xff
 8013d70:	401a      	ands	r2, r3
 8013d72:	1dfb      	adds	r3, r7, #7
 8013d74:	781b      	ldrb	r3, [r3, #0]
 8013d76:	0018      	movs	r0, r3
 8013d78:	2303      	movs	r3, #3
 8013d7a:	4003      	ands	r3, r0
 8013d7c:	00db      	lsls	r3, r3, #3
 8013d7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013d80:	481f      	ldr	r0, [pc, #124]	@ (8013e00 <__NVIC_SetPriority+0xd4>)
 8013d82:	1dfb      	adds	r3, r7, #7
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	b25b      	sxtb	r3, r3
 8013d88:	089b      	lsrs	r3, r3, #2
 8013d8a:	430a      	orrs	r2, r1
 8013d8c:	33c0      	adds	r3, #192	@ 0xc0
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8013d92:	e031      	b.n	8013df8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013d94:	4a1b      	ldr	r2, [pc, #108]	@ (8013e04 <__NVIC_SetPriority+0xd8>)
 8013d96:	1dfb      	adds	r3, r7, #7
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	0019      	movs	r1, r3
 8013d9c:	230f      	movs	r3, #15
 8013d9e:	400b      	ands	r3, r1
 8013da0:	3b08      	subs	r3, #8
 8013da2:	089b      	lsrs	r3, r3, #2
 8013da4:	3306      	adds	r3, #6
 8013da6:	009b      	lsls	r3, r3, #2
 8013da8:	18d3      	adds	r3, r2, r3
 8013daa:	3304      	adds	r3, #4
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	1dfa      	adds	r2, r7, #7
 8013db0:	7812      	ldrb	r2, [r2, #0]
 8013db2:	0011      	movs	r1, r2
 8013db4:	2203      	movs	r2, #3
 8013db6:	400a      	ands	r2, r1
 8013db8:	00d2      	lsls	r2, r2, #3
 8013dba:	21ff      	movs	r1, #255	@ 0xff
 8013dbc:	4091      	lsls	r1, r2
 8013dbe:	000a      	movs	r2, r1
 8013dc0:	43d2      	mvns	r2, r2
 8013dc2:	401a      	ands	r2, r3
 8013dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8013dc6:	683b      	ldr	r3, [r7, #0]
 8013dc8:	019b      	lsls	r3, r3, #6
 8013dca:	22ff      	movs	r2, #255	@ 0xff
 8013dcc:	401a      	ands	r2, r3
 8013dce:	1dfb      	adds	r3, r7, #7
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	0018      	movs	r0, r3
 8013dd4:	2303      	movs	r3, #3
 8013dd6:	4003      	ands	r3, r0
 8013dd8:	00db      	lsls	r3, r3, #3
 8013dda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013ddc:	4809      	ldr	r0, [pc, #36]	@ (8013e04 <__NVIC_SetPriority+0xd8>)
 8013dde:	1dfb      	adds	r3, r7, #7
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	001c      	movs	r4, r3
 8013de4:	230f      	movs	r3, #15
 8013de6:	4023      	ands	r3, r4
 8013de8:	3b08      	subs	r3, #8
 8013dea:	089b      	lsrs	r3, r3, #2
 8013dec:	430a      	orrs	r2, r1
 8013dee:	3306      	adds	r3, #6
 8013df0:	009b      	lsls	r3, r3, #2
 8013df2:	18c3      	adds	r3, r0, r3
 8013df4:	3304      	adds	r3, #4
 8013df6:	601a      	str	r2, [r3, #0]
}
 8013df8:	46c0      	nop			@ (mov r8, r8)
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	b003      	add	sp, #12
 8013dfe:	bd90      	pop	{r4, r7, pc}
 8013e00:	e000e100 	.word	0xe000e100
 8013e04:	e000ed00 	.word	0xe000ed00

08013e08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013e0c:	f3bf 8f4f 	dsb	sy
}
 8013e10:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013e12:	4b04      	ldr	r3, [pc, #16]	@ (8013e24 <__NVIC_SystemReset+0x1c>)
 8013e14:	4a04      	ldr	r2, [pc, #16]	@ (8013e28 <__NVIC_SystemReset+0x20>)
 8013e16:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013e18:	f3bf 8f4f 	dsb	sy
}
 8013e1c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8013e1e:	46c0      	nop			@ (mov r8, r8)
 8013e20:	e7fd      	b.n	8013e1e <__NVIC_SystemReset+0x16>
 8013e22:	46c0      	nop			@ (mov r8, r8)
 8013e24:	e000ed00 	.word	0xe000ed00
 8013e28:	05fa0004 	.word	0x05fa0004

08013e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b082      	sub	sp, #8
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	1e5a      	subs	r2, r3, #1
 8013e38:	2380      	movs	r3, #128	@ 0x80
 8013e3a:	045b      	lsls	r3, r3, #17
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d301      	bcc.n	8013e44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013e40:	2301      	movs	r3, #1
 8013e42:	e010      	b.n	8013e66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013e44:	4b0a      	ldr	r3, [pc, #40]	@ (8013e70 <SysTick_Config+0x44>)
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	3a01      	subs	r2, #1
 8013e4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	425b      	negs	r3, r3
 8013e50:	2103      	movs	r1, #3
 8013e52:	0018      	movs	r0, r3
 8013e54:	f7ff ff6a 	bl	8013d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013e58:	4b05      	ldr	r3, [pc, #20]	@ (8013e70 <SysTick_Config+0x44>)
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013e5e:	4b04      	ldr	r3, [pc, #16]	@ (8013e70 <SysTick_Config+0x44>)
 8013e60:	2207      	movs	r2, #7
 8013e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	0018      	movs	r0, r3
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	b002      	add	sp, #8
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	46c0      	nop			@ (mov r8, r8)
 8013e70:	e000e010 	.word	0xe000e010

08013e74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60b9      	str	r1, [r7, #8]
 8013e7c:	607a      	str	r2, [r7, #4]
 8013e7e:	210f      	movs	r1, #15
 8013e80:	187b      	adds	r3, r7, r1
 8013e82:	1c02      	adds	r2, r0, #0
 8013e84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	187b      	adds	r3, r7, r1
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	b25b      	sxtb	r3, r3
 8013e8e:	0011      	movs	r1, r2
 8013e90:	0018      	movs	r0, r3
 8013e92:	f7ff ff4b 	bl	8013d2c <__NVIC_SetPriority>
}
 8013e96:	46c0      	nop			@ (mov r8, r8)
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	b004      	add	sp, #16
 8013e9c:	bd80      	pop	{r7, pc}

08013e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013e9e:	b580      	push	{r7, lr}
 8013ea0:	b082      	sub	sp, #8
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	0002      	movs	r2, r0
 8013ea6:	1dfb      	adds	r3, r7, #7
 8013ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013eaa:	1dfb      	adds	r3, r7, #7
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	b25b      	sxtb	r3, r3
 8013eb0:	0018      	movs	r0, r3
 8013eb2:	f7ff ff21 	bl	8013cf8 <__NVIC_EnableIRQ>
}
 8013eb6:	46c0      	nop			@ (mov r8, r8)
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	b002      	add	sp, #8
 8013ebc:	bd80      	pop	{r7, pc}

08013ebe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8013ebe:	b580      	push	{r7, lr}
 8013ec0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8013ec2:	f7ff ffa1 	bl	8013e08 <__NVIC_SystemReset>

08013ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8013ec6:	b580      	push	{r7, lr}
 8013ec8:	b082      	sub	sp, #8
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	0018      	movs	r0, r3
 8013ed2:	f7ff ffab 	bl	8013e2c <SysTick_Config>
 8013ed6:	0003      	movs	r3, r0
}
 8013ed8:	0018      	movs	r0, r3
 8013eda:	46bd      	mov	sp, r7
 8013edc:	b002      	add	sp, #8
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d101      	bne.n	8013ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e061      	b.n	8013fb6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4a32      	ldr	r2, [pc, #200]	@ (8013fc0 <HAL_DMA_Init+0xe0>)
 8013ef8:	4694      	mov	ip, r2
 8013efa:	4463      	add	r3, ip
 8013efc:	2114      	movs	r1, #20
 8013efe:	0018      	movs	r0, r3
 8013f00:	f7ec f950 	bl	80001a4 <__udivsi3>
 8013f04:	0003      	movs	r3, r0
 8013f06:	009a      	lsls	r2, r3, #2
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8013fc4 <HAL_DMA_Init+0xe4>)
 8013f10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2225      	movs	r2, #37	@ 0x25
 8013f16:	2102      	movs	r1, #2
 8013f18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	4a28      	ldr	r2, [pc, #160]	@ (8013fc8 <HAL_DMA_Init+0xe8>)
 8013f26:	4013      	ands	r3, r2
 8013f28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8013f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	691b      	ldr	r3, [r3, #16]
 8013f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	699b      	ldr	r3, [r3, #24]
 8013f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6a1b      	ldr	r3, [r3, #32]
 8013f50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	4313      	orrs	r3, r2
 8013f56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	689a      	ldr	r2, [r3, #8]
 8013f64:	2380      	movs	r3, #128	@ 0x80
 8013f66:	01db      	lsls	r3, r3, #7
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d018      	beq.n	8013f9e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8013f6c:	4b17      	ldr	r3, [pc, #92]	@ (8013fcc <HAL_DMA_Init+0xec>)
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f74:	211c      	movs	r1, #28
 8013f76:	400b      	ands	r3, r1
 8013f78:	210f      	movs	r1, #15
 8013f7a:	4099      	lsls	r1, r3
 8013f7c:	000b      	movs	r3, r1
 8013f7e:	43d9      	mvns	r1, r3
 8013f80:	4b12      	ldr	r3, [pc, #72]	@ (8013fcc <HAL_DMA_Init+0xec>)
 8013f82:	400a      	ands	r2, r1
 8013f84:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8013f86:	4b11      	ldr	r3, [pc, #68]	@ (8013fcc <HAL_DMA_Init+0xec>)
 8013f88:	6819      	ldr	r1, [r3, #0]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	685a      	ldr	r2, [r3, #4]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f92:	201c      	movs	r0, #28
 8013f94:	4003      	ands	r3, r0
 8013f96:	409a      	lsls	r2, r3
 8013f98:	4b0c      	ldr	r3, [pc, #48]	@ (8013fcc <HAL_DMA_Init+0xec>)
 8013f9a:	430a      	orrs	r2, r1
 8013f9c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2225      	movs	r2, #37	@ 0x25
 8013fa8:	2101      	movs	r1, #1
 8013faa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2224      	movs	r2, #36	@ 0x24
 8013fb0:	2100      	movs	r1, #0
 8013fb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013fb4:	2300      	movs	r3, #0
}
 8013fb6:	0018      	movs	r0, r3
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	b004      	add	sp, #16
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	46c0      	nop			@ (mov r8, r8)
 8013fc0:	bffdfff8 	.word	0xbffdfff8
 8013fc4:	40020000 	.word	0x40020000
 8013fc8:	ffff800f 	.word	0xffff800f
 8013fcc:	400200a8 	.word	0x400200a8

08013fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b086      	sub	sp, #24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	607a      	str	r2, [r7, #4]
 8013fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013fde:	2317      	movs	r3, #23
 8013fe0:	18fb      	adds	r3, r7, r3
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2224      	movs	r2, #36	@ 0x24
 8013fea:	5c9b      	ldrb	r3, [r3, r2]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d101      	bne.n	8013ff4 <HAL_DMA_Start_IT+0x24>
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	e04f      	b.n	8014094 <HAL_DMA_Start_IT+0xc4>
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2224      	movs	r2, #36	@ 0x24
 8013ff8:	2101      	movs	r1, #1
 8013ffa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2225      	movs	r2, #37	@ 0x25
 8014000:	5c9b      	ldrb	r3, [r3, r2]
 8014002:	b2db      	uxtb	r3, r3
 8014004:	2b01      	cmp	r3, #1
 8014006:	d13a      	bne.n	801407e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2225      	movs	r2, #37	@ 0x25
 801400c:	2102      	movs	r1, #2
 801400e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2200      	movs	r2, #0
 8014014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2101      	movs	r1, #1
 8014022:	438a      	bics	r2, r1
 8014024:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	68b9      	ldr	r1, [r7, #8]
 801402c:	68f8      	ldr	r0, [r7, #12]
 801402e:	f000 f976 	bl	801431e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014036:	2b00      	cmp	r3, #0
 8014038:	d008      	beq.n	801404c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	210e      	movs	r1, #14
 8014046:	430a      	orrs	r2, r1
 8014048:	601a      	str	r2, [r3, #0]
 801404a:	e00f      	b.n	801406c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2104      	movs	r1, #4
 8014058:	438a      	bics	r2, r1
 801405a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	210a      	movs	r1, #10
 8014068:	430a      	orrs	r2, r1
 801406a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2101      	movs	r1, #1
 8014078:	430a      	orrs	r2, r1
 801407a:	601a      	str	r2, [r3, #0]
 801407c:	e007      	b.n	801408e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2224      	movs	r2, #36	@ 0x24
 8014082:	2100      	movs	r1, #0
 8014084:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8014086:	2317      	movs	r3, #23
 8014088:	18fb      	adds	r3, r7, r3
 801408a:	2202      	movs	r2, #2
 801408c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 801408e:	2317      	movs	r3, #23
 8014090:	18fb      	adds	r3, r7, r3
 8014092:	781b      	ldrb	r3, [r3, #0]
}
 8014094:	0018      	movs	r0, r3
 8014096:	46bd      	mov	sp, r7
 8014098:	b006      	add	sp, #24
 801409a:	bd80      	pop	{r7, pc}

0801409c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80140a4:	230f      	movs	r3, #15
 80140a6:	18fb      	adds	r3, r7, r3
 80140a8:	2200      	movs	r2, #0
 80140aa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2225      	movs	r2, #37	@ 0x25
 80140b0:	5c9b      	ldrb	r3, [r3, r2]
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	2b02      	cmp	r3, #2
 80140b6:	d008      	beq.n	80140ca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2204      	movs	r2, #4
 80140bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2224      	movs	r2, #36	@ 0x24
 80140c2:	2100      	movs	r1, #0
 80140c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80140c6:	2301      	movs	r3, #1
 80140c8:	e024      	b.n	8014114 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	210e      	movs	r1, #14
 80140d6:	438a      	bics	r2, r1
 80140d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2101      	movs	r1, #1
 80140e6:	438a      	bics	r2, r1
 80140e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140ee:	221c      	movs	r2, #28
 80140f0:	401a      	ands	r2, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140f6:	2101      	movs	r1, #1
 80140f8:	4091      	lsls	r1, r2
 80140fa:	000a      	movs	r2, r1
 80140fc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2225      	movs	r2, #37	@ 0x25
 8014102:	2101      	movs	r1, #1
 8014104:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2224      	movs	r2, #36	@ 0x24
 801410a:	2100      	movs	r1, #0
 801410c:	5499      	strb	r1, [r3, r2]

    return status;
 801410e:	230f      	movs	r3, #15
 8014110:	18fb      	adds	r3, r7, r3
 8014112:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014114:	0018      	movs	r0, r3
 8014116:	46bd      	mov	sp, r7
 8014118:	b004      	add	sp, #16
 801411a:	bd80      	pop	{r7, pc}

0801411c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014124:	210f      	movs	r1, #15
 8014126:	187b      	adds	r3, r7, r1
 8014128:	2200      	movs	r2, #0
 801412a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2225      	movs	r2, #37	@ 0x25
 8014130:	5c9b      	ldrb	r3, [r3, r2]
 8014132:	b2db      	uxtb	r3, r3
 8014134:	2b02      	cmp	r3, #2
 8014136:	d006      	beq.n	8014146 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2204      	movs	r2, #4
 801413c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801413e:	187b      	adds	r3, r7, r1
 8014140:	2201      	movs	r2, #1
 8014142:	701a      	strb	r2, [r3, #0]
 8014144:	e02a      	b.n	801419c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	210e      	movs	r1, #14
 8014152:	438a      	bics	r2, r1
 8014154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	2101      	movs	r1, #1
 8014162:	438a      	bics	r2, r1
 8014164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801416a:	221c      	movs	r2, #28
 801416c:	401a      	ands	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014172:	2101      	movs	r1, #1
 8014174:	4091      	lsls	r1, r2
 8014176:	000a      	movs	r2, r1
 8014178:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2225      	movs	r2, #37	@ 0x25
 801417e:	2101      	movs	r1, #1
 8014180:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2224      	movs	r2, #36	@ 0x24
 8014186:	2100      	movs	r1, #0
 8014188:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801418e:	2b00      	cmp	r3, #0
 8014190:	d004      	beq.n	801419c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	0010      	movs	r0, r2
 801419a:	4798      	blx	r3
    }
  }
  return status;
 801419c:	230f      	movs	r3, #15
 801419e:	18fb      	adds	r3, r7, r3
 80141a0:	781b      	ldrb	r3, [r3, #0]
}
 80141a2:	0018      	movs	r0, r3
 80141a4:	46bd      	mov	sp, r7
 80141a6:	b004      	add	sp, #16
 80141a8:	bd80      	pop	{r7, pc}

080141aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80141aa:	b580      	push	{r7, lr}
 80141ac:	b084      	sub	sp, #16
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80141c6:	221c      	movs	r2, #28
 80141c8:	4013      	ands	r3, r2
 80141ca:	2204      	movs	r2, #4
 80141cc:	409a      	lsls	r2, r3
 80141ce:	0013      	movs	r3, r2
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	4013      	ands	r3, r2
 80141d4:	d026      	beq.n	8014224 <HAL_DMA_IRQHandler+0x7a>
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2204      	movs	r2, #4
 80141da:	4013      	ands	r3, r2
 80141dc:	d022      	beq.n	8014224 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2220      	movs	r2, #32
 80141e6:	4013      	ands	r3, r2
 80141e8:	d107      	bne.n	80141fa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2104      	movs	r1, #4
 80141f6:	438a      	bics	r2, r1
 80141f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80141fe:	221c      	movs	r2, #28
 8014200:	401a      	ands	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014206:	2104      	movs	r1, #4
 8014208:	4091      	lsls	r1, r2
 801420a:	000a      	movs	r2, r1
 801420c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014212:	2b00      	cmp	r3, #0
 8014214:	d100      	bne.n	8014218 <HAL_DMA_IRQHandler+0x6e>
 8014216:	e071      	b.n	80142fc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	0010      	movs	r0, r2
 8014220:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8014222:	e06b      	b.n	80142fc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014228:	221c      	movs	r2, #28
 801422a:	4013      	ands	r3, r2
 801422c:	2202      	movs	r2, #2
 801422e:	409a      	lsls	r2, r3
 8014230:	0013      	movs	r3, r2
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	4013      	ands	r3, r2
 8014236:	d02d      	beq.n	8014294 <HAL_DMA_IRQHandler+0xea>
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	2202      	movs	r2, #2
 801423c:	4013      	ands	r3, r2
 801423e:	d029      	beq.n	8014294 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2220      	movs	r2, #32
 8014248:	4013      	ands	r3, r2
 801424a:	d10b      	bne.n	8014264 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	681a      	ldr	r2, [r3, #0]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	210a      	movs	r1, #10
 8014258:	438a      	bics	r2, r1
 801425a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2225      	movs	r2, #37	@ 0x25
 8014260:	2101      	movs	r1, #1
 8014262:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014268:	221c      	movs	r2, #28
 801426a:	401a      	ands	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014270:	2102      	movs	r1, #2
 8014272:	4091      	lsls	r1, r2
 8014274:	000a      	movs	r2, r1
 8014276:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2224      	movs	r2, #36	@ 0x24
 801427c:	2100      	movs	r1, #0
 801427e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014284:	2b00      	cmp	r3, #0
 8014286:	d039      	beq.n	80142fc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801428c:	687a      	ldr	r2, [r7, #4]
 801428e:	0010      	movs	r0, r2
 8014290:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8014292:	e033      	b.n	80142fc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014298:	221c      	movs	r2, #28
 801429a:	4013      	ands	r3, r2
 801429c:	2208      	movs	r2, #8
 801429e:	409a      	lsls	r2, r3
 80142a0:	0013      	movs	r3, r2
 80142a2:	68fa      	ldr	r2, [r7, #12]
 80142a4:	4013      	ands	r3, r2
 80142a6:	d02a      	beq.n	80142fe <HAL_DMA_IRQHandler+0x154>
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2208      	movs	r2, #8
 80142ac:	4013      	ands	r3, r2
 80142ae:	d026      	beq.n	80142fe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	210e      	movs	r1, #14
 80142bc:	438a      	bics	r2, r1
 80142be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142c4:	221c      	movs	r2, #28
 80142c6:	401a      	ands	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142cc:	2101      	movs	r1, #1
 80142ce:	4091      	lsls	r1, r2
 80142d0:	000a      	movs	r2, r1
 80142d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2201      	movs	r2, #1
 80142d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2225      	movs	r2, #37	@ 0x25
 80142de:	2101      	movs	r1, #1
 80142e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2224      	movs	r2, #36	@ 0x24
 80142e6:	2100      	movs	r1, #0
 80142e8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d005      	beq.n	80142fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	0010      	movs	r0, r2
 80142fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80142fc:	46c0      	nop			@ (mov r8, r8)
 80142fe:	46c0      	nop			@ (mov r8, r8)
}
 8014300:	46bd      	mov	sp, r7
 8014302:	b004      	add	sp, #16
 8014304:	bd80      	pop	{r7, pc}

08014306 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8014306:	b580      	push	{r7, lr}
 8014308:	b082      	sub	sp, #8
 801430a:	af00      	add	r7, sp, #0
 801430c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2225      	movs	r2, #37	@ 0x25
 8014312:	5c9b      	ldrb	r3, [r3, r2]
 8014314:	b2db      	uxtb	r3, r3
}
 8014316:	0018      	movs	r0, r3
 8014318:	46bd      	mov	sp, r7
 801431a:	b002      	add	sp, #8
 801431c:	bd80      	pop	{r7, pc}

0801431e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801431e:	b580      	push	{r7, lr}
 8014320:	b084      	sub	sp, #16
 8014322:	af00      	add	r7, sp, #0
 8014324:	60f8      	str	r0, [r7, #12]
 8014326:	60b9      	str	r1, [r7, #8]
 8014328:	607a      	str	r2, [r7, #4]
 801432a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014330:	221c      	movs	r2, #28
 8014332:	401a      	ands	r2, r3
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014338:	2101      	movs	r1, #1
 801433a:	4091      	lsls	r1, r2
 801433c:	000a      	movs	r2, r1
 801433e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	683a      	ldr	r2, [r7, #0]
 8014346:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	689b      	ldr	r3, [r3, #8]
 801434c:	2b10      	cmp	r3, #16
 801434e:	d108      	bne.n	8014362 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	68ba      	ldr	r2, [r7, #8]
 801435e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8014360:	e007      	b.n	8014372 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	68ba      	ldr	r2, [r7, #8]
 8014368:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	60da      	str	r2, [r3, #12]
}
 8014372:	46c0      	nop			@ (mov r8, r8)
 8014374:	46bd      	mov	sp, r7
 8014376:	b004      	add	sp, #16
 8014378:	bd80      	pop	{r7, pc}
	...

0801437c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8014384:	f7ff f8d2 	bl	801352c <HAL_GetTick>
 8014388:	0003      	movs	r3, r0
 801438a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801438c:	e00f      	b.n	80143ae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	3301      	adds	r3, #1
 8014392:	d00c      	beq.n	80143ae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d007      	beq.n	80143aa <FLASH_WaitForLastOperation+0x2e>
 801439a:	f7ff f8c7 	bl	801352c <HAL_GetTick>
 801439e:	0002      	movs	r2, r0
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	1ad3      	subs	r3, r2, r3
 80143a4:	687a      	ldr	r2, [r7, #4]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d201      	bcs.n	80143ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80143aa:	2303      	movs	r3, #3
 80143ac:	e052      	b.n	8014454 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80143ae:	4b2b      	ldr	r3, [pc, #172]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 80143b0:	699b      	ldr	r3, [r3, #24]
 80143b2:	2201      	movs	r2, #1
 80143b4:	4013      	ands	r3, r2
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d0e9      	beq.n	801438e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80143ba:	4b28      	ldr	r3, [pc, #160]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 80143bc:	699b      	ldr	r3, [r3, #24]
 80143be:	2202      	movs	r2, #2
 80143c0:	4013      	ands	r3, r2
 80143c2:	2b02      	cmp	r3, #2
 80143c4:	d102      	bne.n	80143cc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80143c6:	4b25      	ldr	r3, [pc, #148]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 80143c8:	2202      	movs	r2, #2
 80143ca:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80143cc:	4b23      	ldr	r3, [pc, #140]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 80143ce:	699a      	ldr	r2, [r3, #24]
 80143d0:	2380      	movs	r3, #128	@ 0x80
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	401a      	ands	r2, r3
 80143d6:	2380      	movs	r3, #128	@ 0x80
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	429a      	cmp	r2, r3
 80143dc:	d035      	beq.n	801444a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80143de:	4b1f      	ldr	r3, [pc, #124]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 80143e0:	699a      	ldr	r2, [r3, #24]
 80143e2:	2380      	movs	r3, #128	@ 0x80
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80143e8:	2380      	movs	r3, #128	@ 0x80
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d02c      	beq.n	801444a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80143f0:	4b1a      	ldr	r3, [pc, #104]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 80143f2:	699a      	ldr	r2, [r3, #24]
 80143f4:	2380      	movs	r3, #128	@ 0x80
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80143fa:	2380      	movs	r3, #128	@ 0x80
 80143fc:	00db      	lsls	r3, r3, #3
 80143fe:	429a      	cmp	r2, r3
 8014400:	d023      	beq.n	801444a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014402:	4b16      	ldr	r3, [pc, #88]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 8014404:	699a      	ldr	r2, [r3, #24]
 8014406:	2380      	movs	r3, #128	@ 0x80
 8014408:	011b      	lsls	r3, r3, #4
 801440a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801440c:	2380      	movs	r3, #128	@ 0x80
 801440e:	011b      	lsls	r3, r3, #4
 8014410:	429a      	cmp	r2, r3
 8014412:	d01a      	beq.n	801444a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014414:	4b11      	ldr	r3, [pc, #68]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 8014416:	699a      	ldr	r2, [r3, #24]
 8014418:	2380      	movs	r3, #128	@ 0x80
 801441a:	019b      	lsls	r3, r3, #6
 801441c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801441e:	2380      	movs	r3, #128	@ 0x80
 8014420:	019b      	lsls	r3, r3, #6
 8014422:	429a      	cmp	r2, r3
 8014424:	d011      	beq.n	801444a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014426:	4b0d      	ldr	r3, [pc, #52]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 8014428:	699a      	ldr	r2, [r3, #24]
 801442a:	2380      	movs	r3, #128	@ 0x80
 801442c:	029b      	lsls	r3, r3, #10
 801442e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014430:	2380      	movs	r3, #128	@ 0x80
 8014432:	029b      	lsls	r3, r3, #10
 8014434:	429a      	cmp	r2, r3
 8014436:	d008      	beq.n	801444a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014438:	4b08      	ldr	r3, [pc, #32]	@ (801445c <FLASH_WaitForLastOperation+0xe0>)
 801443a:	699a      	ldr	r2, [r3, #24]
 801443c:	2380      	movs	r3, #128	@ 0x80
 801443e:	025b      	lsls	r3, r3, #9
 8014440:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014442:	2380      	movs	r3, #128	@ 0x80
 8014444:	025b      	lsls	r3, r3, #9
 8014446:	429a      	cmp	r2, r3
 8014448:	d103      	bne.n	8014452 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801444a:	f000 f809 	bl	8014460 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801444e:	2301      	movs	r3, #1
 8014450:	e000      	b.n	8014454 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014452:	2300      	movs	r3, #0
}
 8014454:	0018      	movs	r0, r3
 8014456:	46bd      	mov	sp, r7
 8014458:	b004      	add	sp, #16
 801445a:	bd80      	pop	{r7, pc}
 801445c:	40022000 	.word	0x40022000

08014460 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014466:	2300      	movs	r3, #0
 8014468:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801446a:	4b49      	ldr	r3, [pc, #292]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 801446c:	699a      	ldr	r2, [r3, #24]
 801446e:	2380      	movs	r3, #128	@ 0x80
 8014470:	005b      	lsls	r3, r3, #1
 8014472:	401a      	ands	r2, r3
 8014474:	2380      	movs	r3, #128	@ 0x80
 8014476:	005b      	lsls	r3, r3, #1
 8014478:	429a      	cmp	r2, r3
 801447a:	d10a      	bne.n	8014492 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801447c:	4b45      	ldr	r3, [pc, #276]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 801447e:	695b      	ldr	r3, [r3, #20]
 8014480:	2202      	movs	r2, #2
 8014482:	431a      	orrs	r2, r3
 8014484:	4b43      	ldr	r3, [pc, #268]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 8014486:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2280      	movs	r2, #128	@ 0x80
 801448c:	0052      	lsls	r2, r2, #1
 801448e:	4313      	orrs	r3, r2
 8014490:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014492:	4b3f      	ldr	r3, [pc, #252]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 8014494:	699a      	ldr	r2, [r3, #24]
 8014496:	2380      	movs	r3, #128	@ 0x80
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	401a      	ands	r2, r3
 801449c:	2380      	movs	r3, #128	@ 0x80
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d10a      	bne.n	80144ba <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80144a4:	4b3b      	ldr	r3, [pc, #236]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 80144a6:	695b      	ldr	r3, [r3, #20]
 80144a8:	2201      	movs	r2, #1
 80144aa:	431a      	orrs	r2, r3
 80144ac:	4b39      	ldr	r3, [pc, #228]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 80144ae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2280      	movs	r2, #128	@ 0x80
 80144b4:	0092      	lsls	r2, r2, #2
 80144b6:	4313      	orrs	r3, r2
 80144b8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80144ba:	4b35      	ldr	r3, [pc, #212]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 80144bc:	699a      	ldr	r2, [r3, #24]
 80144be:	2380      	movs	r3, #128	@ 0x80
 80144c0:	00db      	lsls	r3, r3, #3
 80144c2:	401a      	ands	r2, r3
 80144c4:	2380      	movs	r3, #128	@ 0x80
 80144c6:	00db      	lsls	r3, r3, #3
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d10a      	bne.n	80144e2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80144cc:	4b31      	ldr	r3, [pc, #196]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 80144ce:	695b      	ldr	r3, [r3, #20]
 80144d0:	2208      	movs	r2, #8
 80144d2:	431a      	orrs	r2, r3
 80144d4:	4b2f      	ldr	r3, [pc, #188]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 80144d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2280      	movs	r2, #128	@ 0x80
 80144dc:	00d2      	lsls	r2, r2, #3
 80144de:	4313      	orrs	r3, r2
 80144e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80144e2:	4b2b      	ldr	r3, [pc, #172]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 80144e4:	699a      	ldr	r2, [r3, #24]
 80144e6:	2380      	movs	r3, #128	@ 0x80
 80144e8:	011b      	lsls	r3, r3, #4
 80144ea:	401a      	ands	r2, r3
 80144ec:	2380      	movs	r3, #128	@ 0x80
 80144ee:	011b      	lsls	r3, r3, #4
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d10a      	bne.n	801450a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80144f4:	4b27      	ldr	r3, [pc, #156]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 80144f6:	695b      	ldr	r3, [r3, #20]
 80144f8:	2204      	movs	r2, #4
 80144fa:	431a      	orrs	r2, r3
 80144fc:	4b25      	ldr	r3, [pc, #148]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 80144fe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2280      	movs	r2, #128	@ 0x80
 8014504:	0112      	lsls	r2, r2, #4
 8014506:	4313      	orrs	r3, r2
 8014508:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801450a:	4b21      	ldr	r3, [pc, #132]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 801450c:	699a      	ldr	r2, [r3, #24]
 801450e:	2380      	movs	r3, #128	@ 0x80
 8014510:	019b      	lsls	r3, r3, #6
 8014512:	401a      	ands	r2, r3
 8014514:	2380      	movs	r3, #128	@ 0x80
 8014516:	019b      	lsls	r3, r3, #6
 8014518:	429a      	cmp	r2, r3
 801451a:	d10a      	bne.n	8014532 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801451c:	4b1d      	ldr	r3, [pc, #116]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 801451e:	695b      	ldr	r3, [r3, #20]
 8014520:	2210      	movs	r2, #16
 8014522:	431a      	orrs	r2, r3
 8014524:	4b1b      	ldr	r3, [pc, #108]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 8014526:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2280      	movs	r2, #128	@ 0x80
 801452c:	0192      	lsls	r2, r2, #6
 801452e:	4313      	orrs	r3, r2
 8014530:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014532:	4b17      	ldr	r3, [pc, #92]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 8014534:	699a      	ldr	r2, [r3, #24]
 8014536:	2380      	movs	r3, #128	@ 0x80
 8014538:	029b      	lsls	r3, r3, #10
 801453a:	401a      	ands	r2, r3
 801453c:	2380      	movs	r3, #128	@ 0x80
 801453e:	029b      	lsls	r3, r3, #10
 8014540:	429a      	cmp	r2, r3
 8014542:	d109      	bne.n	8014558 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014544:	4b13      	ldr	r3, [pc, #76]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 8014546:	695b      	ldr	r3, [r3, #20]
 8014548:	2220      	movs	r2, #32
 801454a:	431a      	orrs	r2, r3
 801454c:	4b11      	ldr	r3, [pc, #68]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 801454e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2220      	movs	r2, #32
 8014554:	4313      	orrs	r3, r2
 8014556:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014558:	4b0d      	ldr	r3, [pc, #52]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 801455a:	699a      	ldr	r2, [r3, #24]
 801455c:	2380      	movs	r3, #128	@ 0x80
 801455e:	025b      	lsls	r3, r3, #9
 8014560:	401a      	ands	r2, r3
 8014562:	2380      	movs	r3, #128	@ 0x80
 8014564:	025b      	lsls	r3, r3, #9
 8014566:	429a      	cmp	r2, r3
 8014568:	d10a      	bne.n	8014580 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801456a:	4b0a      	ldr	r3, [pc, #40]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 801456c:	695b      	ldr	r3, [r3, #20]
 801456e:	2240      	movs	r2, #64	@ 0x40
 8014570:	431a      	orrs	r2, r3
 8014572:	4b08      	ldr	r3, [pc, #32]	@ (8014594 <FLASH_SetErrorCode+0x134>)
 8014574:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2280      	movs	r2, #128	@ 0x80
 801457a:	0252      	lsls	r2, r2, #9
 801457c:	4313      	orrs	r3, r2
 801457e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014580:	4b03      	ldr	r3, [pc, #12]	@ (8014590 <FLASH_SetErrorCode+0x130>)
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	619a      	str	r2, [r3, #24]
}  
 8014586:	46c0      	nop			@ (mov r8, r8)
 8014588:	46bd      	mov	sp, r7
 801458a:	b002      	add	sp, #8
 801458c:	bd80      	pop	{r7, pc}
 801458e:	46c0      	nop			@ (mov r8, r8)
 8014590:	40022000 	.word	0x40022000
 8014594:	20002240 	.word	0x20002240

08014598 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801459e:	4b12      	ldr	r3, [pc, #72]	@ (80145e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	2201      	movs	r2, #1
 80145a4:	4013      	ands	r3, r2
 80145a6:	d019      	beq.n	80145dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80145a8:	f3ef 8310 	mrs	r3, PRIMASK
 80145ac:	607b      	str	r3, [r7, #4]
  return(result);
 80145ae:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80145b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80145b2:	b672      	cpsid	i
}
 80145b4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80145b6:	4b0c      	ldr	r3, [pc, #48]	@ (80145e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80145b8:	4a0c      	ldr	r2, [pc, #48]	@ (80145ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80145ba:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80145bc:	4b0a      	ldr	r3, [pc, #40]	@ (80145e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80145be:	4a0c      	ldr	r2, [pc, #48]	@ (80145f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80145c0:	60da      	str	r2, [r3, #12]
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	f383 8810 	msr	PRIMASK, r3
}
 80145cc:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80145ce:	4b06      	ldr	r3, [pc, #24]	@ (80145e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	2201      	movs	r2, #1
 80145d4:	4013      	ands	r3, r2
 80145d6:	d001      	beq.n	80145dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80145d8:	2301      	movs	r3, #1
 80145da:	e000      	b.n	80145de <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80145dc:	2300      	movs	r3, #0
}
 80145de:	0018      	movs	r0, r3
 80145e0:	46bd      	mov	sp, r7
 80145e2:	b004      	add	sp, #16
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	46c0      	nop			@ (mov r8, r8)
 80145e8:	40022000 	.word	0x40022000
 80145ec:	89abcdef 	.word	0x89abcdef
 80145f0:	02030405 	.word	0x02030405

080145f4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80145f8:	4b04      	ldr	r3, [pc, #16]	@ (801460c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80145fa:	685a      	ldr	r2, [r3, #4]
 80145fc:	4b03      	ldr	r3, [pc, #12]	@ (801460c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80145fe:	2101      	movs	r1, #1
 8014600:	430a      	orrs	r2, r1
 8014602:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	0018      	movs	r0, r3
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}
 801460c:	40022000 	.word	0x40022000

08014610 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8014610:	b5b0      	push	{r4, r5, r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014618:	250f      	movs	r5, #15
 801461a:	197b      	adds	r3, r7, r5
 801461c:	2200      	movs	r2, #0
 801461e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014620:	197c      	adds	r4, r7, r5
 8014622:	4b0f      	ldr	r3, [pc, #60]	@ (8014660 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014624:	0018      	movs	r0, r3
 8014626:	f7ff fea9 	bl	801437c <FLASH_WaitForLastOperation>
 801462a:	0003      	movs	r3, r0
 801462c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801462e:	0029      	movs	r1, r5
 8014630:	187b      	adds	r3, r7, r1
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d10c      	bne.n	8014652 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014638:	4b0a      	ldr	r3, [pc, #40]	@ (8014664 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801463a:	2200      	movs	r2, #0
 801463c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	2200      	movs	r2, #0
 8014642:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014644:	187c      	adds	r4, r7, r1
 8014646:	4b06      	ldr	r3, [pc, #24]	@ (8014660 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014648:	0018      	movs	r0, r3
 801464a:	f7ff fe97 	bl	801437c <FLASH_WaitForLastOperation>
 801464e:	0003      	movs	r3, r0
 8014650:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8014652:	230f      	movs	r3, #15
 8014654:	18fb      	adds	r3, r7, r3
 8014656:	781b      	ldrb	r3, [r3, #0]
}  
 8014658:	0018      	movs	r0, r3
 801465a:	46bd      	mov	sp, r7
 801465c:	b004      	add	sp, #16
 801465e:	bdb0      	pop	{r4, r5, r7, pc}
 8014660:	0000c350 	.word	0x0000c350
 8014664:	20002240 	.word	0x20002240

08014668 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014668:	b5b0      	push	{r4, r5, r7, lr}
 801466a:	b086      	sub	sp, #24
 801466c:	af00      	add	r7, sp, #0
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	60b9      	str	r1, [r7, #8]
 8014672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014674:	2317      	movs	r3, #23
 8014676:	18fb      	adds	r3, r7, r3
 8014678:	2201      	movs	r2, #1
 801467a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801467c:	4b24      	ldr	r3, [pc, #144]	@ (8014710 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801467e:	7c1b      	ldrb	r3, [r3, #16]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d101      	bne.n	8014688 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8014684:	2302      	movs	r3, #2
 8014686:	e03e      	b.n	8014706 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014688:	4b21      	ldr	r3, [pc, #132]	@ (8014710 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801468a:	2201      	movs	r2, #1
 801468c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801468e:	2517      	movs	r5, #23
 8014690:	197c      	adds	r4, r7, r5
 8014692:	4b20      	ldr	r3, [pc, #128]	@ (8014714 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014694:	0018      	movs	r0, r3
 8014696:	f7ff fe71 	bl	801437c <FLASH_WaitForLastOperation>
 801469a:	0003      	movs	r3, r0
 801469c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801469e:	197b      	adds	r3, r7, r5
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d129      	bne.n	80146fa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80146a6:	4b1a      	ldr	r3, [pc, #104]	@ (8014710 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80146a8:	2200      	movs	r2, #0
 80146aa:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	2b02      	cmp	r3, #2
 80146b0:	d103      	bne.n	80146ba <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	601a      	str	r2, [r3, #0]
 80146b8:	e013      	b.n	80146e2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d104      	bne.n	80146ca <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	b292      	uxth	r2, r2
 80146c6:	801a      	strh	r2, [r3, #0]
 80146c8:	e00b      	b.n	80146e2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d104      	bne.n	80146da <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	687a      	ldr	r2, [r7, #4]
 80146d4:	b2d2      	uxtb	r2, r2
 80146d6:	701a      	strb	r2, [r3, #0]
 80146d8:	e003      	b.n	80146e2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80146da:	2317      	movs	r3, #23
 80146dc:	18fb      	adds	r3, r7, r3
 80146de:	2201      	movs	r2, #1
 80146e0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80146e2:	2217      	movs	r2, #23
 80146e4:	18bb      	adds	r3, r7, r2
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d106      	bne.n	80146fa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80146ec:	18bc      	adds	r4, r7, r2
 80146ee:	4b09      	ldr	r3, [pc, #36]	@ (8014714 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80146f0:	0018      	movs	r0, r3
 80146f2:	f7ff fe43 	bl	801437c <FLASH_WaitForLastOperation>
 80146f6:	0003      	movs	r3, r0
 80146f8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80146fa:	4b05      	ldr	r3, [pc, #20]	@ (8014710 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80146fc:	2200      	movs	r2, #0
 80146fe:	741a      	strb	r2, [r3, #16]

  return status;
 8014700:	2317      	movs	r3, #23
 8014702:	18fb      	adds	r3, r7, r3
 8014704:	781b      	ldrb	r3, [r3, #0]
}
 8014706:	0018      	movs	r0, r3
 8014708:	46bd      	mov	sp, r7
 801470a:	b006      	add	sp, #24
 801470c:	bdb0      	pop	{r4, r5, r7, pc}
 801470e:	46c0      	nop			@ (mov r8, r8)
 8014710:	20002240 	.word	0x20002240
 8014714:	0000c350 	.word	0x0000c350

08014718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b086      	sub	sp, #24
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014722:	2300      	movs	r3, #0
 8014724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8014726:	2300      	movs	r3, #0
 8014728:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801472a:	2300      	movs	r3, #0
 801472c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801472e:	e155      	b.n	80149dc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	2101      	movs	r1, #1
 8014736:	697a      	ldr	r2, [r7, #20]
 8014738:	4091      	lsls	r1, r2
 801473a:	000a      	movs	r2, r1
 801473c:	4013      	ands	r3, r2
 801473e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d100      	bne.n	8014748 <HAL_GPIO_Init+0x30>
 8014746:	e146      	b.n	80149d6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	2203      	movs	r2, #3
 801474e:	4013      	ands	r3, r2
 8014750:	2b01      	cmp	r3, #1
 8014752:	d005      	beq.n	8014760 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	2203      	movs	r2, #3
 801475a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801475c:	2b02      	cmp	r3, #2
 801475e:	d130      	bne.n	80147c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	2203      	movs	r2, #3
 801476c:	409a      	lsls	r2, r3
 801476e:	0013      	movs	r3, r2
 8014770:	43da      	mvns	r2, r3
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	4013      	ands	r3, r2
 8014776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	68da      	ldr	r2, [r3, #12]
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	409a      	lsls	r2, r3
 8014782:	0013      	movs	r3, r2
 8014784:	693a      	ldr	r2, [r7, #16]
 8014786:	4313      	orrs	r3, r2
 8014788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	693a      	ldr	r2, [r7, #16]
 801478e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014796:	2201      	movs	r2, #1
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	409a      	lsls	r2, r3
 801479c:	0013      	movs	r3, r2
 801479e:	43da      	mvns	r2, r3
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	4013      	ands	r3, r2
 80147a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	091b      	lsrs	r3, r3, #4
 80147ac:	2201      	movs	r2, #1
 80147ae:	401a      	ands	r2, r3
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	409a      	lsls	r2, r3
 80147b4:	0013      	movs	r3, r2
 80147b6:	693a      	ldr	r2, [r7, #16]
 80147b8:	4313      	orrs	r3, r2
 80147ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	693a      	ldr	r2, [r7, #16]
 80147c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	2203      	movs	r2, #3
 80147c8:	4013      	ands	r3, r2
 80147ca:	2b03      	cmp	r3, #3
 80147cc:	d017      	beq.n	80147fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	68db      	ldr	r3, [r3, #12]
 80147d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	005b      	lsls	r3, r3, #1
 80147d8:	2203      	movs	r2, #3
 80147da:	409a      	lsls	r2, r3
 80147dc:	0013      	movs	r3, r2
 80147de:	43da      	mvns	r2, r3
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	4013      	ands	r3, r2
 80147e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	689a      	ldr	r2, [r3, #8]
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	005b      	lsls	r3, r3, #1
 80147ee:	409a      	lsls	r2, r3
 80147f0:	0013      	movs	r3, r2
 80147f2:	693a      	ldr	r2, [r7, #16]
 80147f4:	4313      	orrs	r3, r2
 80147f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	693a      	ldr	r2, [r7, #16]
 80147fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	2203      	movs	r2, #3
 8014804:	4013      	ands	r3, r2
 8014806:	2b02      	cmp	r3, #2
 8014808:	d123      	bne.n	8014852 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	08da      	lsrs	r2, r3, #3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	3208      	adds	r2, #8
 8014812:	0092      	lsls	r2, r2, #2
 8014814:	58d3      	ldr	r3, [r2, r3]
 8014816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	2207      	movs	r2, #7
 801481c:	4013      	ands	r3, r2
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	220f      	movs	r2, #15
 8014822:	409a      	lsls	r2, r3
 8014824:	0013      	movs	r3, r2
 8014826:	43da      	mvns	r2, r3
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	4013      	ands	r3, r2
 801482c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	691a      	ldr	r2, [r3, #16]
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	2107      	movs	r1, #7
 8014836:	400b      	ands	r3, r1
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	409a      	lsls	r2, r3
 801483c:	0013      	movs	r3, r2
 801483e:	693a      	ldr	r2, [r7, #16]
 8014840:	4313      	orrs	r3, r2
 8014842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	08da      	lsrs	r2, r3, #3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	3208      	adds	r2, #8
 801484c:	0092      	lsls	r2, r2, #2
 801484e:	6939      	ldr	r1, [r7, #16]
 8014850:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	005b      	lsls	r3, r3, #1
 801485c:	2203      	movs	r2, #3
 801485e:	409a      	lsls	r2, r3
 8014860:	0013      	movs	r3, r2
 8014862:	43da      	mvns	r2, r3
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	4013      	ands	r3, r2
 8014868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	2203      	movs	r2, #3
 8014870:	401a      	ands	r2, r3
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	409a      	lsls	r2, r3
 8014878:	0013      	movs	r3, r2
 801487a:	693a      	ldr	r2, [r7, #16]
 801487c:	4313      	orrs	r3, r2
 801487e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	693a      	ldr	r2, [r7, #16]
 8014884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	685a      	ldr	r2, [r3, #4]
 801488a:	23c0      	movs	r3, #192	@ 0xc0
 801488c:	029b      	lsls	r3, r3, #10
 801488e:	4013      	ands	r3, r2
 8014890:	d100      	bne.n	8014894 <HAL_GPIO_Init+0x17c>
 8014892:	e0a0      	b.n	80149d6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014894:	4b57      	ldr	r3, [pc, #348]	@ (80149f4 <HAL_GPIO_Init+0x2dc>)
 8014896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014898:	4b56      	ldr	r3, [pc, #344]	@ (80149f4 <HAL_GPIO_Init+0x2dc>)
 801489a:	2101      	movs	r1, #1
 801489c:	430a      	orrs	r2, r1
 801489e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80148a0:	4a55      	ldr	r2, [pc, #340]	@ (80149f8 <HAL_GPIO_Init+0x2e0>)
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	089b      	lsrs	r3, r3, #2
 80148a6:	3302      	adds	r3, #2
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	589b      	ldr	r3, [r3, r2]
 80148ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2203      	movs	r2, #3
 80148b2:	4013      	ands	r3, r2
 80148b4:	009b      	lsls	r3, r3, #2
 80148b6:	220f      	movs	r2, #15
 80148b8:	409a      	lsls	r2, r3
 80148ba:	0013      	movs	r3, r2
 80148bc:	43da      	mvns	r2, r3
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	4013      	ands	r3, r2
 80148c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	23a0      	movs	r3, #160	@ 0xa0
 80148c8:	05db      	lsls	r3, r3, #23
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d01f      	beq.n	801490e <HAL_GPIO_Init+0x1f6>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4a4a      	ldr	r2, [pc, #296]	@ (80149fc <HAL_GPIO_Init+0x2e4>)
 80148d2:	4293      	cmp	r3, r2
 80148d4:	d019      	beq.n	801490a <HAL_GPIO_Init+0x1f2>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	4a49      	ldr	r2, [pc, #292]	@ (8014a00 <HAL_GPIO_Init+0x2e8>)
 80148da:	4293      	cmp	r3, r2
 80148dc:	d013      	beq.n	8014906 <HAL_GPIO_Init+0x1ee>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	4a48      	ldr	r2, [pc, #288]	@ (8014a04 <HAL_GPIO_Init+0x2ec>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d00d      	beq.n	8014902 <HAL_GPIO_Init+0x1ea>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	4a47      	ldr	r2, [pc, #284]	@ (8014a08 <HAL_GPIO_Init+0x2f0>)
 80148ea:	4293      	cmp	r3, r2
 80148ec:	d007      	beq.n	80148fe <HAL_GPIO_Init+0x1e6>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4a46      	ldr	r2, [pc, #280]	@ (8014a0c <HAL_GPIO_Init+0x2f4>)
 80148f2:	4293      	cmp	r3, r2
 80148f4:	d101      	bne.n	80148fa <HAL_GPIO_Init+0x1e2>
 80148f6:	2305      	movs	r3, #5
 80148f8:	e00a      	b.n	8014910 <HAL_GPIO_Init+0x1f8>
 80148fa:	2306      	movs	r3, #6
 80148fc:	e008      	b.n	8014910 <HAL_GPIO_Init+0x1f8>
 80148fe:	2304      	movs	r3, #4
 8014900:	e006      	b.n	8014910 <HAL_GPIO_Init+0x1f8>
 8014902:	2303      	movs	r3, #3
 8014904:	e004      	b.n	8014910 <HAL_GPIO_Init+0x1f8>
 8014906:	2302      	movs	r3, #2
 8014908:	e002      	b.n	8014910 <HAL_GPIO_Init+0x1f8>
 801490a:	2301      	movs	r3, #1
 801490c:	e000      	b.n	8014910 <HAL_GPIO_Init+0x1f8>
 801490e:	2300      	movs	r3, #0
 8014910:	697a      	ldr	r2, [r7, #20]
 8014912:	2103      	movs	r1, #3
 8014914:	400a      	ands	r2, r1
 8014916:	0092      	lsls	r2, r2, #2
 8014918:	4093      	lsls	r3, r2
 801491a:	693a      	ldr	r2, [r7, #16]
 801491c:	4313      	orrs	r3, r2
 801491e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014920:	4935      	ldr	r1, [pc, #212]	@ (80149f8 <HAL_GPIO_Init+0x2e0>)
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	089b      	lsrs	r3, r3, #2
 8014926:	3302      	adds	r3, #2
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	693a      	ldr	r2, [r7, #16]
 801492c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801492e:	4b38      	ldr	r3, [pc, #224]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	43da      	mvns	r2, r3
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	4013      	ands	r3, r2
 801493c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	685a      	ldr	r2, [r3, #4]
 8014942:	2380      	movs	r3, #128	@ 0x80
 8014944:	035b      	lsls	r3, r3, #13
 8014946:	4013      	ands	r3, r2
 8014948:	d003      	beq.n	8014952 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801494a:	693a      	ldr	r2, [r7, #16]
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	4313      	orrs	r3, r2
 8014950:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8014952:	4b2f      	ldr	r3, [pc, #188]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 8014954:	693a      	ldr	r2, [r7, #16]
 8014956:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8014958:	4b2d      	ldr	r3, [pc, #180]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	43da      	mvns	r2, r3
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	4013      	ands	r3, r2
 8014966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	685a      	ldr	r2, [r3, #4]
 801496c:	2380      	movs	r3, #128	@ 0x80
 801496e:	039b      	lsls	r3, r3, #14
 8014970:	4013      	ands	r3, r2
 8014972:	d003      	beq.n	801497c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8014974:	693a      	ldr	r2, [r7, #16]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	4313      	orrs	r3, r2
 801497a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 801497c:	4b24      	ldr	r3, [pc, #144]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 801497e:	693a      	ldr	r2, [r7, #16]
 8014980:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8014982:	4b23      	ldr	r3, [pc, #140]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	43da      	mvns	r2, r3
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	4013      	ands	r3, r2
 8014990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	685a      	ldr	r2, [r3, #4]
 8014996:	2380      	movs	r3, #128	@ 0x80
 8014998:	029b      	lsls	r3, r3, #10
 801499a:	4013      	ands	r3, r2
 801499c:	d003      	beq.n	80149a6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801499e:	693a      	ldr	r2, [r7, #16]
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	4313      	orrs	r3, r2
 80149a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80149a6:	4b1a      	ldr	r3, [pc, #104]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 80149a8:	693a      	ldr	r2, [r7, #16]
 80149aa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80149ac:	4b18      	ldr	r3, [pc, #96]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	43da      	mvns	r2, r3
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	4013      	ands	r3, r2
 80149ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	685a      	ldr	r2, [r3, #4]
 80149c0:	2380      	movs	r3, #128	@ 0x80
 80149c2:	025b      	lsls	r3, r3, #9
 80149c4:	4013      	ands	r3, r2
 80149c6:	d003      	beq.n	80149d0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80149c8:	693a      	ldr	r2, [r7, #16]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	4313      	orrs	r3, r2
 80149ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80149d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014a10 <HAL_GPIO_Init+0x2f8>)
 80149d2:	693a      	ldr	r2, [r7, #16]
 80149d4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	3301      	adds	r3, #1
 80149da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	40da      	lsrs	r2, r3
 80149e4:	1e13      	subs	r3, r2, #0
 80149e6:	d000      	beq.n	80149ea <HAL_GPIO_Init+0x2d2>
 80149e8:	e6a2      	b.n	8014730 <HAL_GPIO_Init+0x18>
  }
}
 80149ea:	46c0      	nop			@ (mov r8, r8)
 80149ec:	46c0      	nop			@ (mov r8, r8)
 80149ee:	46bd      	mov	sp, r7
 80149f0:	b006      	add	sp, #24
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	40021000 	.word	0x40021000
 80149f8:	40010000 	.word	0x40010000
 80149fc:	50000400 	.word	0x50000400
 8014a00:	50000800 	.word	0x50000800
 8014a04:	50000c00 	.word	0x50000c00
 8014a08:	50001000 	.word	0x50001000
 8014a0c:	50001c00 	.word	0x50001c00
 8014a10:	40010400 	.word	0x40010400

08014a14 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	000a      	movs	r2, r1
 8014a1e:	1cbb      	adds	r3, r7, #2
 8014a20:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	691b      	ldr	r3, [r3, #16]
 8014a26:	1cba      	adds	r2, r7, #2
 8014a28:	8812      	ldrh	r2, [r2, #0]
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	d004      	beq.n	8014a38 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8014a2e:	230f      	movs	r3, #15
 8014a30:	18fb      	adds	r3, r7, r3
 8014a32:	2201      	movs	r2, #1
 8014a34:	701a      	strb	r2, [r3, #0]
 8014a36:	e003      	b.n	8014a40 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014a38:	230f      	movs	r3, #15
 8014a3a:	18fb      	adds	r3, r7, r3
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8014a40:	230f      	movs	r3, #15
 8014a42:	18fb      	adds	r3, r7, r3
 8014a44:	781b      	ldrb	r3, [r3, #0]
}
 8014a46:	0018      	movs	r0, r3
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	b004      	add	sp, #16
 8014a4c:	bd80      	pop	{r7, pc}

08014a4e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014a4e:	b580      	push	{r7, lr}
 8014a50:	b082      	sub	sp, #8
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	0008      	movs	r0, r1
 8014a58:	0011      	movs	r1, r2
 8014a5a:	1cbb      	adds	r3, r7, #2
 8014a5c:	1c02      	adds	r2, r0, #0
 8014a5e:	801a      	strh	r2, [r3, #0]
 8014a60:	1c7b      	adds	r3, r7, #1
 8014a62:	1c0a      	adds	r2, r1, #0
 8014a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014a66:	1c7b      	adds	r3, r7, #1
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d004      	beq.n	8014a78 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014a6e:	1cbb      	adds	r3, r7, #2
 8014a70:	881a      	ldrh	r2, [r3, #0]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8014a76:	e003      	b.n	8014a80 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8014a78:	1cbb      	adds	r3, r7, #2
 8014a7a:	881a      	ldrh	r2, [r3, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014a80:	46c0      	nop			@ (mov r8, r8)
 8014a82:	46bd      	mov	sp, r7
 8014a84:	b002      	add	sp, #8
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	0002      	movs	r2, r0
 8014a90:	1dbb      	adds	r3, r7, #6
 8014a92:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8014a94:	4b09      	ldr	r3, [pc, #36]	@ (8014abc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8014a96:	695b      	ldr	r3, [r3, #20]
 8014a98:	1dba      	adds	r2, r7, #6
 8014a9a:	8812      	ldrh	r2, [r2, #0]
 8014a9c:	4013      	ands	r3, r2
 8014a9e:	d008      	beq.n	8014ab2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8014aa0:	4b06      	ldr	r3, [pc, #24]	@ (8014abc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8014aa2:	1dba      	adds	r2, r7, #6
 8014aa4:	8812      	ldrh	r2, [r2, #0]
 8014aa6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014aa8:	1dbb      	adds	r3, r7, #6
 8014aaa:	881b      	ldrh	r3, [r3, #0]
 8014aac:	0018      	movs	r0, r3
 8014aae:	f7f7 fc21 	bl	800c2f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8014ab2:	46c0      	nop			@ (mov r8, r8)
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	b002      	add	sp, #8
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	46c0      	nop			@ (mov r8, r8)
 8014abc:	40010400 	.word	0x40010400

08014ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d101      	bne.n	8014ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014ace:	2301      	movs	r3, #1
 8014ad0:	e082      	b.n	8014bd8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2241      	movs	r2, #65	@ 0x41
 8014ad6:	5c9b      	ldrb	r3, [r3, r2]
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d107      	bne.n	8014aee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2240      	movs	r2, #64	@ 0x40
 8014ae2:	2100      	movs	r1, #0
 8014ae4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	0018      	movs	r0, r3
 8014aea:	f7f6 fedf 	bl	800b8ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2241      	movs	r2, #65	@ 0x41
 8014af2:	2124      	movs	r1, #36	@ 0x24
 8014af4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	2101      	movs	r1, #1
 8014b02:	438a      	bics	r2, r1
 8014b04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	685a      	ldr	r2, [r3, #4]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	4934      	ldr	r1, [pc, #208]	@ (8014be0 <HAL_I2C_Init+0x120>)
 8014b10:	400a      	ands	r2, r1
 8014b12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	689a      	ldr	r2, [r3, #8]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	4931      	ldr	r1, [pc, #196]	@ (8014be4 <HAL_I2C_Init+0x124>)
 8014b20:	400a      	ands	r2, r1
 8014b22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	68db      	ldr	r3, [r3, #12]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d108      	bne.n	8014b3e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	689a      	ldr	r2, [r3, #8]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	2180      	movs	r1, #128	@ 0x80
 8014b36:	0209      	lsls	r1, r1, #8
 8014b38:	430a      	orrs	r2, r1
 8014b3a:	609a      	str	r2, [r3, #8]
 8014b3c:	e007      	b.n	8014b4e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	689a      	ldr	r2, [r3, #8]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	2184      	movs	r1, #132	@ 0x84
 8014b48:	0209      	lsls	r1, r1, #8
 8014b4a:	430a      	orrs	r2, r1
 8014b4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	2b02      	cmp	r3, #2
 8014b54:	d104      	bne.n	8014b60 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	2280      	movs	r2, #128	@ 0x80
 8014b5c:	0112      	lsls	r2, r2, #4
 8014b5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	685a      	ldr	r2, [r3, #4]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	491f      	ldr	r1, [pc, #124]	@ (8014be8 <HAL_I2C_Init+0x128>)
 8014b6c:	430a      	orrs	r2, r1
 8014b6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	68da      	ldr	r2, [r3, #12]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	491a      	ldr	r1, [pc, #104]	@ (8014be4 <HAL_I2C_Init+0x124>)
 8014b7c:	400a      	ands	r2, r1
 8014b7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	691a      	ldr	r2, [r3, #16]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	695b      	ldr	r3, [r3, #20]
 8014b88:	431a      	orrs	r2, r3
 8014b8a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	699b      	ldr	r3, [r3, #24]
 8014b90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	430a      	orrs	r2, r1
 8014b98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	69d9      	ldr	r1, [r3, #28]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6a1a      	ldr	r2, [r3, #32]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	430a      	orrs	r2, r1
 8014ba8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	2101      	movs	r1, #1
 8014bb6:	430a      	orrs	r2, r1
 8014bb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2241      	movs	r2, #65	@ 0x41
 8014bc4:	2120      	movs	r1, #32
 8014bc6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2242      	movs	r2, #66	@ 0x42
 8014bd2:	2100      	movs	r1, #0
 8014bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	0018      	movs	r0, r3
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	b002      	add	sp, #8
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	f0ffffff 	.word	0xf0ffffff
 8014be4:	ffff7fff 	.word	0xffff7fff
 8014be8:	02008000 	.word	0x02008000

08014bec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014bec:	b590      	push	{r4, r7, lr}
 8014bee:	b089      	sub	sp, #36	@ 0x24
 8014bf0:	af02      	add	r7, sp, #8
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	0008      	movs	r0, r1
 8014bf6:	607a      	str	r2, [r7, #4]
 8014bf8:	0019      	movs	r1, r3
 8014bfa:	230a      	movs	r3, #10
 8014bfc:	18fb      	adds	r3, r7, r3
 8014bfe:	1c02      	adds	r2, r0, #0
 8014c00:	801a      	strh	r2, [r3, #0]
 8014c02:	2308      	movs	r3, #8
 8014c04:	18fb      	adds	r3, r7, r3
 8014c06:	1c0a      	adds	r2, r1, #0
 8014c08:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2241      	movs	r2, #65	@ 0x41
 8014c0e:	5c9b      	ldrb	r3, [r3, r2]
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	2b20      	cmp	r3, #32
 8014c14:	d000      	beq.n	8014c18 <HAL_I2C_Master_Transmit+0x2c>
 8014c16:	e0e7      	b.n	8014de8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	2240      	movs	r2, #64	@ 0x40
 8014c1c:	5c9b      	ldrb	r3, [r3, r2]
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d101      	bne.n	8014c26 <HAL_I2C_Master_Transmit+0x3a>
 8014c22:	2302      	movs	r3, #2
 8014c24:	e0e1      	b.n	8014dea <HAL_I2C_Master_Transmit+0x1fe>
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2240      	movs	r2, #64	@ 0x40
 8014c2a:	2101      	movs	r1, #1
 8014c2c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014c2e:	f7fe fc7d 	bl	801352c <HAL_GetTick>
 8014c32:	0003      	movs	r3, r0
 8014c34:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014c36:	2380      	movs	r3, #128	@ 0x80
 8014c38:	0219      	lsls	r1, r3, #8
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	9300      	str	r3, [sp, #0]
 8014c40:	2319      	movs	r3, #25
 8014c42:	2201      	movs	r2, #1
 8014c44:	f002 fa30 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 8014c48:	1e03      	subs	r3, r0, #0
 8014c4a:	d001      	beq.n	8014c50 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e0cc      	b.n	8014dea <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2241      	movs	r2, #65	@ 0x41
 8014c54:	2121      	movs	r1, #33	@ 0x21
 8014c56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2242      	movs	r2, #66	@ 0x42
 8014c5c:	2110      	movs	r1, #16
 8014c5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2200      	movs	r2, #0
 8014c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2208      	movs	r2, #8
 8014c70:	18ba      	adds	r2, r7, r2
 8014c72:	8812      	ldrh	r2, [r2, #0]
 8014c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	2bff      	cmp	r3, #255	@ 0xff
 8014c84:	d911      	bls.n	8014caa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	22ff      	movs	r2, #255	@ 0xff
 8014c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	2380      	movs	r3, #128	@ 0x80
 8014c94:	045c      	lsls	r4, r3, #17
 8014c96:	230a      	movs	r3, #10
 8014c98:	18fb      	adds	r3, r7, r3
 8014c9a:	8819      	ldrh	r1, [r3, #0]
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	4b55      	ldr	r3, [pc, #340]	@ (8014df4 <HAL_I2C_Master_Transmit+0x208>)
 8014ca0:	9300      	str	r3, [sp, #0]
 8014ca2:	0023      	movs	r3, r4
 8014ca4:	f002 fc52 	bl	801754c <I2C_TransferConfig>
 8014ca8:	e075      	b.n	8014d96 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	2380      	movs	r3, #128	@ 0x80
 8014cbc:	049c      	lsls	r4, r3, #18
 8014cbe:	230a      	movs	r3, #10
 8014cc0:	18fb      	adds	r3, r7, r3
 8014cc2:	8819      	ldrh	r1, [r3, #0]
 8014cc4:	68f8      	ldr	r0, [r7, #12]
 8014cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8014df4 <HAL_I2C_Master_Transmit+0x208>)
 8014cc8:	9300      	str	r3, [sp, #0]
 8014cca:	0023      	movs	r3, r4
 8014ccc:	f002 fc3e 	bl	801754c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8014cd0:	e061      	b.n	8014d96 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014cd2:	697a      	ldr	r2, [r7, #20]
 8014cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	0018      	movs	r0, r3
 8014cda:	f002 fa33 	bl	8017144 <I2C_WaitOnTXISFlagUntilTimeout>
 8014cde:	1e03      	subs	r3, r0, #0
 8014ce0:	d001      	beq.n	8014ce6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	e081      	b.n	8014dea <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cea:	781a      	ldrb	r2, [r3, #0]
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cf6:	1c5a      	adds	r2, r3, #1
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	3b01      	subs	r3, #1
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d0e:	3b01      	subs	r3, #1
 8014d10:	b29a      	uxth	r2, r3
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d03a      	beq.n	8014d96 <HAL_I2C_Master_Transmit+0x1aa>
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d136      	bne.n	8014d96 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d2a:	68f8      	ldr	r0, [r7, #12]
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	0013      	movs	r3, r2
 8014d32:	2200      	movs	r2, #0
 8014d34:	2180      	movs	r1, #128	@ 0x80
 8014d36:	f002 f9b7 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 8014d3a:	1e03      	subs	r3, r0, #0
 8014d3c:	d001      	beq.n	8014d42 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e053      	b.n	8014dea <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	2bff      	cmp	r3, #255	@ 0xff
 8014d4a:	d911      	bls.n	8014d70 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	22ff      	movs	r2, #255	@ 0xff
 8014d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d56:	b2da      	uxtb	r2, r3
 8014d58:	2380      	movs	r3, #128	@ 0x80
 8014d5a:	045c      	lsls	r4, r3, #17
 8014d5c:	230a      	movs	r3, #10
 8014d5e:	18fb      	adds	r3, r7, r3
 8014d60:	8819      	ldrh	r1, [r3, #0]
 8014d62:	68f8      	ldr	r0, [r7, #12]
 8014d64:	2300      	movs	r3, #0
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	0023      	movs	r3, r4
 8014d6a:	f002 fbef 	bl	801754c <I2C_TransferConfig>
 8014d6e:	e012      	b.n	8014d96 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d7e:	b2da      	uxtb	r2, r3
 8014d80:	2380      	movs	r3, #128	@ 0x80
 8014d82:	049c      	lsls	r4, r3, #18
 8014d84:	230a      	movs	r3, #10
 8014d86:	18fb      	adds	r3, r7, r3
 8014d88:	8819      	ldrh	r1, [r3, #0]
 8014d8a:	68f8      	ldr	r0, [r7, #12]
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	0023      	movs	r3, r4
 8014d92:	f002 fbdb 	bl	801754c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d198      	bne.n	8014cd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014da0:	697a      	ldr	r2, [r7, #20]
 8014da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	0018      	movs	r0, r3
 8014da8:	f002 fa12 	bl	80171d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014dac:	1e03      	subs	r3, r0, #0
 8014dae:	d001      	beq.n	8014db4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8014db0:	2301      	movs	r3, #1
 8014db2:	e01a      	b.n	8014dea <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2220      	movs	r2, #32
 8014dba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	685a      	ldr	r2, [r3, #4]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	490c      	ldr	r1, [pc, #48]	@ (8014df8 <HAL_I2C_Master_Transmit+0x20c>)
 8014dc8:	400a      	ands	r2, r1
 8014dca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2241      	movs	r2, #65	@ 0x41
 8014dd0:	2120      	movs	r1, #32
 8014dd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	2242      	movs	r2, #66	@ 0x42
 8014dd8:	2100      	movs	r1, #0
 8014dda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2240      	movs	r2, #64	@ 0x40
 8014de0:	2100      	movs	r1, #0
 8014de2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014de4:	2300      	movs	r3, #0
 8014de6:	e000      	b.n	8014dea <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8014de8:	2302      	movs	r3, #2
  }
}
 8014dea:	0018      	movs	r0, r3
 8014dec:	46bd      	mov	sp, r7
 8014dee:	b007      	add	sp, #28
 8014df0:	bd90      	pop	{r4, r7, pc}
 8014df2:	46c0      	nop			@ (mov r8, r8)
 8014df4:	80002000 	.word	0x80002000
 8014df8:	fe00e800 	.word	0xfe00e800

08014dfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8014dfc:	b590      	push	{r4, r7, lr}
 8014dfe:	b089      	sub	sp, #36	@ 0x24
 8014e00:	af02      	add	r7, sp, #8
 8014e02:	60f8      	str	r0, [r7, #12]
 8014e04:	0008      	movs	r0, r1
 8014e06:	607a      	str	r2, [r7, #4]
 8014e08:	0019      	movs	r1, r3
 8014e0a:	230a      	movs	r3, #10
 8014e0c:	18fb      	adds	r3, r7, r3
 8014e0e:	1c02      	adds	r2, r0, #0
 8014e10:	801a      	strh	r2, [r3, #0]
 8014e12:	2308      	movs	r3, #8
 8014e14:	18fb      	adds	r3, r7, r3
 8014e16:	1c0a      	adds	r2, r1, #0
 8014e18:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2241      	movs	r2, #65	@ 0x41
 8014e1e:	5c9b      	ldrb	r3, [r3, r2]
 8014e20:	b2db      	uxtb	r3, r3
 8014e22:	2b20      	cmp	r3, #32
 8014e24:	d000      	beq.n	8014e28 <HAL_I2C_Master_Receive+0x2c>
 8014e26:	e0e8      	b.n	8014ffa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2240      	movs	r2, #64	@ 0x40
 8014e2c:	5c9b      	ldrb	r3, [r3, r2]
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	d101      	bne.n	8014e36 <HAL_I2C_Master_Receive+0x3a>
 8014e32:	2302      	movs	r3, #2
 8014e34:	e0e2      	b.n	8014ffc <HAL_I2C_Master_Receive+0x200>
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2240      	movs	r2, #64	@ 0x40
 8014e3a:	2101      	movs	r1, #1
 8014e3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014e3e:	f7fe fb75 	bl	801352c <HAL_GetTick>
 8014e42:	0003      	movs	r3, r0
 8014e44:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014e46:	2380      	movs	r3, #128	@ 0x80
 8014e48:	0219      	lsls	r1, r3, #8
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	9300      	str	r3, [sp, #0]
 8014e50:	2319      	movs	r3, #25
 8014e52:	2201      	movs	r2, #1
 8014e54:	f002 f928 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 8014e58:	1e03      	subs	r3, r0, #0
 8014e5a:	d001      	beq.n	8014e60 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	e0cd      	b.n	8014ffc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2241      	movs	r2, #65	@ 0x41
 8014e64:	2122      	movs	r1, #34	@ 0x22
 8014e66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2242      	movs	r2, #66	@ 0x42
 8014e6c:	2110      	movs	r1, #16
 8014e6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2200      	movs	r2, #0
 8014e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	2208      	movs	r2, #8
 8014e80:	18ba      	adds	r2, r7, r2
 8014e82:	8812      	ldrh	r2, [r2, #0]
 8014e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	2bff      	cmp	r3, #255	@ 0xff
 8014e94:	d911      	bls.n	8014eba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	22ff      	movs	r2, #255	@ 0xff
 8014e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ea0:	b2da      	uxtb	r2, r3
 8014ea2:	2380      	movs	r3, #128	@ 0x80
 8014ea4:	045c      	lsls	r4, r3, #17
 8014ea6:	230a      	movs	r3, #10
 8014ea8:	18fb      	adds	r3, r7, r3
 8014eaa:	8819      	ldrh	r1, [r3, #0]
 8014eac:	68f8      	ldr	r0, [r7, #12]
 8014eae:	4b55      	ldr	r3, [pc, #340]	@ (8015004 <HAL_I2C_Master_Receive+0x208>)
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	0023      	movs	r3, r4
 8014eb4:	f002 fb4a 	bl	801754c <I2C_TransferConfig>
 8014eb8:	e076      	b.n	8014fa8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	2380      	movs	r3, #128	@ 0x80
 8014ecc:	049c      	lsls	r4, r3, #18
 8014ece:	230a      	movs	r3, #10
 8014ed0:	18fb      	adds	r3, r7, r3
 8014ed2:	8819      	ldrh	r1, [r3, #0]
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8015004 <HAL_I2C_Master_Receive+0x208>)
 8014ed8:	9300      	str	r3, [sp, #0]
 8014eda:	0023      	movs	r3, r4
 8014edc:	f002 fb36 	bl	801754c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8014ee0:	e062      	b.n	8014fa8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014ee2:	697a      	ldr	r2, [r7, #20]
 8014ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	0018      	movs	r0, r3
 8014eea:	f002 f9b5 	bl	8017258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014eee:	1e03      	subs	r3, r0, #0
 8014ef0:	d001      	beq.n	8014ef6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	e082      	b.n	8014ffc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f00:	b2d2      	uxtb	r2, r2
 8014f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f08:	1c5a      	adds	r2, r3, #1
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f12:	3b01      	subs	r3, #1
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	3b01      	subs	r3, #1
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d03a      	beq.n	8014fa8 <HAL_I2C_Master_Receive+0x1ac>
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d136      	bne.n	8014fa8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014f3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	0013      	movs	r3, r2
 8014f44:	2200      	movs	r2, #0
 8014f46:	2180      	movs	r1, #128	@ 0x80
 8014f48:	f002 f8ae 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 8014f4c:	1e03      	subs	r3, r0, #0
 8014f4e:	d001      	beq.n	8014f54 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8014f50:	2301      	movs	r3, #1
 8014f52:	e053      	b.n	8014ffc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	2bff      	cmp	r3, #255	@ 0xff
 8014f5c:	d911      	bls.n	8014f82 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	22ff      	movs	r2, #255	@ 0xff
 8014f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f68:	b2da      	uxtb	r2, r3
 8014f6a:	2380      	movs	r3, #128	@ 0x80
 8014f6c:	045c      	lsls	r4, r3, #17
 8014f6e:	230a      	movs	r3, #10
 8014f70:	18fb      	adds	r3, r7, r3
 8014f72:	8819      	ldrh	r1, [r3, #0]
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	2300      	movs	r3, #0
 8014f78:	9300      	str	r3, [sp, #0]
 8014f7a:	0023      	movs	r3, r4
 8014f7c:	f002 fae6 	bl	801754c <I2C_TransferConfig>
 8014f80:	e012      	b.n	8014fa8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	2380      	movs	r3, #128	@ 0x80
 8014f94:	049c      	lsls	r4, r3, #18
 8014f96:	230a      	movs	r3, #10
 8014f98:	18fb      	adds	r3, r7, r3
 8014f9a:	8819      	ldrh	r1, [r3, #0]
 8014f9c:	68f8      	ldr	r0, [r7, #12]
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	9300      	str	r3, [sp, #0]
 8014fa2:	0023      	movs	r3, r4
 8014fa4:	f002 fad2 	bl	801754c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014fac:	b29b      	uxth	r3, r3
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d197      	bne.n	8014ee2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014fb2:	697a      	ldr	r2, [r7, #20]
 8014fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	0018      	movs	r0, r3
 8014fba:	f002 f909 	bl	80171d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014fbe:	1e03      	subs	r3, r0, #0
 8014fc0:	d001      	beq.n	8014fc6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e01a      	b.n	8014ffc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2220      	movs	r2, #32
 8014fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	685a      	ldr	r2, [r3, #4]
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	490b      	ldr	r1, [pc, #44]	@ (8015008 <HAL_I2C_Master_Receive+0x20c>)
 8014fda:	400a      	ands	r2, r1
 8014fdc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	2241      	movs	r2, #65	@ 0x41
 8014fe2:	2120      	movs	r1, #32
 8014fe4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2242      	movs	r2, #66	@ 0x42
 8014fea:	2100      	movs	r1, #0
 8014fec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	2240      	movs	r2, #64	@ 0x40
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	e000      	b.n	8014ffc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8014ffa:	2302      	movs	r3, #2
  }
}
 8014ffc:	0018      	movs	r0, r3
 8014ffe:	46bd      	mov	sp, r7
 8015000:	b007      	add	sp, #28
 8015002:	bd90      	pop	{r4, r7, pc}
 8015004:	80002400 	.word	0x80002400
 8015008:	fe00e800 	.word	0xfe00e800

0801500c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801500c:	b5b0      	push	{r4, r5, r7, lr}
 801500e:	b088      	sub	sp, #32
 8015010:	af02      	add	r7, sp, #8
 8015012:	60f8      	str	r0, [r7, #12]
 8015014:	0008      	movs	r0, r1
 8015016:	607a      	str	r2, [r7, #4]
 8015018:	0019      	movs	r1, r3
 801501a:	230a      	movs	r3, #10
 801501c:	18fb      	adds	r3, r7, r3
 801501e:	1c02      	adds	r2, r0, #0
 8015020:	801a      	strh	r2, [r3, #0]
 8015022:	2308      	movs	r3, #8
 8015024:	18fb      	adds	r3, r7, r3
 8015026:	1c0a      	adds	r2, r1, #0
 8015028:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2241      	movs	r2, #65	@ 0x41
 801502e:	5c9b      	ldrb	r3, [r3, r2]
 8015030:	b2db      	uxtb	r3, r3
 8015032:	2b20      	cmp	r3, #32
 8015034:	d000      	beq.n	8015038 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8015036:	e0dd      	b.n	80151f4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	699a      	ldr	r2, [r3, #24]
 801503e:	2380      	movs	r3, #128	@ 0x80
 8015040:	021b      	lsls	r3, r3, #8
 8015042:	401a      	ands	r2, r3
 8015044:	2380      	movs	r3, #128	@ 0x80
 8015046:	021b      	lsls	r3, r3, #8
 8015048:	429a      	cmp	r2, r3
 801504a:	d101      	bne.n	8015050 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 801504c:	2302      	movs	r3, #2
 801504e:	e0d2      	b.n	80151f6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2240      	movs	r2, #64	@ 0x40
 8015054:	5c9b      	ldrb	r3, [r3, r2]
 8015056:	2b01      	cmp	r3, #1
 8015058:	d101      	bne.n	801505e <HAL_I2C_Master_Transmit_DMA+0x52>
 801505a:	2302      	movs	r3, #2
 801505c:	e0cb      	b.n	80151f6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2240      	movs	r2, #64	@ 0x40
 8015062:	2101      	movs	r1, #1
 8015064:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2241      	movs	r2, #65	@ 0x41
 801506a:	2121      	movs	r1, #33	@ 0x21
 801506c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2242      	movs	r2, #66	@ 0x42
 8015072:	2110      	movs	r1, #16
 8015074:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	2200      	movs	r2, #0
 801507a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	2208      	movs	r2, #8
 8015086:	18ba      	adds	r2, r7, r2
 8015088:	8812      	ldrh	r2, [r2, #0]
 801508a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	4a5c      	ldr	r2, [pc, #368]	@ (8015200 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8015090:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	4a5b      	ldr	r2, [pc, #364]	@ (8015204 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8015096:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801509c:	b29b      	uxth	r3, r3
 801509e:	2bff      	cmp	r3, #255	@ 0xff
 80150a0:	d906      	bls.n	80150b0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	22ff      	movs	r2, #255	@ 0xff
 80150a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80150a8:	2380      	movs	r3, #128	@ 0x80
 80150aa:	045b      	lsls	r3, r3, #17
 80150ac:	617b      	str	r3, [r7, #20]
 80150ae:	e007      	b.n	80150c0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80150ba:	2380      	movs	r3, #128	@ 0x80
 80150bc:	049b      	lsls	r3, r3, #18
 80150be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d100      	bne.n	80150ca <HAL_I2C_Master_Transmit_DMA+0xbe>
 80150c8:	e078      	b.n	80151bc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d023      	beq.n	801511a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150d6:	4a4c      	ldr	r2, [pc, #304]	@ (8015208 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80150d8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150de:	4a4b      	ldr	r2, [pc, #300]	@ (801520c <HAL_I2C_Master_Transmit_DMA+0x200>)
 80150e0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150e6:	2200      	movs	r2, #0
 80150e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150ee:	2200      	movs	r2, #0
 80150f0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80150f6:	6879      	ldr	r1, [r7, #4]
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	3328      	adds	r3, #40	@ 0x28
 80150fe:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015104:	2513      	movs	r5, #19
 8015106:	197c      	adds	r4, r7, r5
 8015108:	f7fe ff62 	bl	8013fd0 <HAL_DMA_Start_IT>
 801510c:	0003      	movs	r3, r0
 801510e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015110:	197b      	adds	r3, r7, r5
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d13d      	bne.n	8015194 <HAL_I2C_Master_Transmit_DMA+0x188>
 8015118:	e013      	b.n	8015142 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2241      	movs	r2, #65	@ 0x41
 801511e:	2120      	movs	r1, #32
 8015120:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2242      	movs	r2, #66	@ 0x42
 8015126:	2100      	movs	r1, #0
 8015128:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801512e:	2280      	movs	r2, #128	@ 0x80
 8015130:	431a      	orrs	r2, r3
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	2240      	movs	r2, #64	@ 0x40
 801513a:	2100      	movs	r1, #0
 801513c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801513e:	2301      	movs	r3, #1
 8015140:	e059      	b.n	80151f6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015146:	b2da      	uxtb	r2, r3
 8015148:	697c      	ldr	r4, [r7, #20]
 801514a:	230a      	movs	r3, #10
 801514c:	18fb      	adds	r3, r7, r3
 801514e:	8819      	ldrh	r1, [r3, #0]
 8015150:	68f8      	ldr	r0, [r7, #12]
 8015152:	4b2f      	ldr	r3, [pc, #188]	@ (8015210 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8015154:	9300      	str	r3, [sp, #0]
 8015156:	0023      	movs	r3, r4
 8015158:	f002 f9f8 	bl	801754c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015160:	b29a      	uxth	r2, r3
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015166:	1ad3      	subs	r3, r2, r3
 8015168:	b29a      	uxth	r2, r3
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	2240      	movs	r2, #64	@ 0x40
 8015172:	2100      	movs	r1, #0
 8015174:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2110      	movs	r1, #16
 801517a:	0018      	movs	r0, r3
 801517c:	f002 fa20 	bl	80175c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	2180      	movs	r1, #128	@ 0x80
 801518c:	01c9      	lsls	r1, r1, #7
 801518e:	430a      	orrs	r2, r1
 8015190:	601a      	str	r2, [r3, #0]
 8015192:	e02d      	b.n	80151f0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2241      	movs	r2, #65	@ 0x41
 8015198:	2120      	movs	r1, #32
 801519a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2242      	movs	r2, #66	@ 0x42
 80151a0:	2100      	movs	r1, #0
 80151a2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80151a8:	2210      	movs	r2, #16
 80151aa:	431a      	orrs	r2, r3
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2240      	movs	r2, #64	@ 0x40
 80151b4:	2100      	movs	r1, #0
 80151b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80151b8:	2301      	movs	r3, #1
 80151ba:	e01c      	b.n	80151f6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	4a15      	ldr	r2, [pc, #84]	@ (8015214 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80151c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80151c6:	b2da      	uxtb	r2, r3
 80151c8:	2380      	movs	r3, #128	@ 0x80
 80151ca:	049c      	lsls	r4, r3, #18
 80151cc:	230a      	movs	r3, #10
 80151ce:	18fb      	adds	r3, r7, r3
 80151d0:	8819      	ldrh	r1, [r3, #0]
 80151d2:	68f8      	ldr	r0, [r7, #12]
 80151d4:	4b0e      	ldr	r3, [pc, #56]	@ (8015210 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	0023      	movs	r3, r4
 80151da:	f002 f9b7 	bl	801754c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2240      	movs	r2, #64	@ 0x40
 80151e2:	2100      	movs	r1, #0
 80151e4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2101      	movs	r1, #1
 80151ea:	0018      	movs	r0, r3
 80151ec:	f002 f9e8 	bl	80175c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	e000      	b.n	80151f6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80151f4:	2302      	movs	r3, #2
  }
}
 80151f6:	0018      	movs	r0, r3
 80151f8:	46bd      	mov	sp, r7
 80151fa:	b006      	add	sp, #24
 80151fc:	bdb0      	pop	{r4, r5, r7, pc}
 80151fe:	46c0      	nop			@ (mov r8, r8)
 8015200:	ffff0000 	.word	0xffff0000
 8015204:	08015e7d 	.word	0x08015e7d
 8015208:	08016ef9 	.word	0x08016ef9
 801520c:	08017039 	.word	0x08017039
 8015210:	80002000 	.word	0x80002000
 8015214:	08015a29 	.word	0x08015a29

08015218 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8015218:	b5b0      	push	{r4, r5, r7, lr}
 801521a:	b088      	sub	sp, #32
 801521c:	af02      	add	r7, sp, #8
 801521e:	60f8      	str	r0, [r7, #12]
 8015220:	0008      	movs	r0, r1
 8015222:	607a      	str	r2, [r7, #4]
 8015224:	0019      	movs	r1, r3
 8015226:	230a      	movs	r3, #10
 8015228:	18fb      	adds	r3, r7, r3
 801522a:	1c02      	adds	r2, r0, #0
 801522c:	801a      	strh	r2, [r3, #0]
 801522e:	2308      	movs	r3, #8
 8015230:	18fb      	adds	r3, r7, r3
 8015232:	1c0a      	adds	r2, r1, #0
 8015234:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2241      	movs	r2, #65	@ 0x41
 801523a:	5c9b      	ldrb	r3, [r3, r2]
 801523c:	b2db      	uxtb	r3, r3
 801523e:	2b20      	cmp	r3, #32
 8015240:	d000      	beq.n	8015244 <HAL_I2C_Master_Receive_DMA+0x2c>
 8015242:	e0dd      	b.n	8015400 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	699a      	ldr	r2, [r3, #24]
 801524a:	2380      	movs	r3, #128	@ 0x80
 801524c:	021b      	lsls	r3, r3, #8
 801524e:	401a      	ands	r2, r3
 8015250:	2380      	movs	r3, #128	@ 0x80
 8015252:	021b      	lsls	r3, r3, #8
 8015254:	429a      	cmp	r2, r3
 8015256:	d101      	bne.n	801525c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8015258:	2302      	movs	r3, #2
 801525a:	e0d2      	b.n	8015402 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2240      	movs	r2, #64	@ 0x40
 8015260:	5c9b      	ldrb	r3, [r3, r2]
 8015262:	2b01      	cmp	r3, #1
 8015264:	d101      	bne.n	801526a <HAL_I2C_Master_Receive_DMA+0x52>
 8015266:	2302      	movs	r3, #2
 8015268:	e0cb      	b.n	8015402 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2240      	movs	r2, #64	@ 0x40
 801526e:	2101      	movs	r1, #1
 8015270:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2241      	movs	r2, #65	@ 0x41
 8015276:	2122      	movs	r1, #34	@ 0x22
 8015278:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2242      	movs	r2, #66	@ 0x42
 801527e:	2110      	movs	r1, #16
 8015280:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	2200      	movs	r2, #0
 8015286:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2208      	movs	r2, #8
 8015292:	18ba      	adds	r2, r7, r2
 8015294:	8812      	ldrh	r2, [r2, #0]
 8015296:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	4a5c      	ldr	r2, [pc, #368]	@ (801540c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 801529c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	4a5b      	ldr	r2, [pc, #364]	@ (8015410 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80152a2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	2bff      	cmp	r3, #255	@ 0xff
 80152ac:	d906      	bls.n	80152bc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	22ff      	movs	r2, #255	@ 0xff
 80152b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80152b4:	2380      	movs	r3, #128	@ 0x80
 80152b6:	045b      	lsls	r3, r3, #17
 80152b8:	617b      	str	r3, [r7, #20]
 80152ba:	e007      	b.n	80152cc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80152c6:	2380      	movs	r3, #128	@ 0x80
 80152c8:	049b      	lsls	r3, r3, #18
 80152ca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d100      	bne.n	80152d6 <HAL_I2C_Master_Receive_DMA+0xbe>
 80152d4:	e078      	b.n	80153c8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d023      	beq.n	8015326 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152e2:	4a4c      	ldr	r2, [pc, #304]	@ (8015414 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80152e4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152ea:	4a4b      	ldr	r2, [pc, #300]	@ (8015418 <HAL_I2C_Master_Receive_DMA+0x200>)
 80152ec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152f2:	2200      	movs	r2, #0
 80152f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152fa:	2200      	movs	r2, #0
 80152fc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	3324      	adds	r3, #36	@ 0x24
 8015308:	0019      	movs	r1, r3
 801530a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015310:	2513      	movs	r5, #19
 8015312:	197c      	adds	r4, r7, r5
 8015314:	f7fe fe5c 	bl	8013fd0 <HAL_DMA_Start_IT>
 8015318:	0003      	movs	r3, r0
 801531a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801531c:	197b      	adds	r3, r7, r5
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d13d      	bne.n	80153a0 <HAL_I2C_Master_Receive_DMA+0x188>
 8015324:	e013      	b.n	801534e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2241      	movs	r2, #65	@ 0x41
 801532a:	2120      	movs	r1, #32
 801532c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2242      	movs	r2, #66	@ 0x42
 8015332:	2100      	movs	r1, #0
 8015334:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801533a:	2280      	movs	r2, #128	@ 0x80
 801533c:	431a      	orrs	r2, r3
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2240      	movs	r2, #64	@ 0x40
 8015346:	2100      	movs	r1, #0
 8015348:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801534a:	2301      	movs	r3, #1
 801534c:	e059      	b.n	8015402 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015352:	b2da      	uxtb	r2, r3
 8015354:	697c      	ldr	r4, [r7, #20]
 8015356:	230a      	movs	r3, #10
 8015358:	18fb      	adds	r3, r7, r3
 801535a:	8819      	ldrh	r1, [r3, #0]
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	4b2f      	ldr	r3, [pc, #188]	@ (801541c <HAL_I2C_Master_Receive_DMA+0x204>)
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	0023      	movs	r3, r4
 8015364:	f002 f8f2 	bl	801754c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801536c:	b29a      	uxth	r2, r3
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015372:	1ad3      	subs	r3, r2, r3
 8015374:	b29a      	uxth	r2, r3
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	2240      	movs	r2, #64	@ 0x40
 801537e:	2100      	movs	r1, #0
 8015380:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	2110      	movs	r1, #16
 8015386:	0018      	movs	r0, r3
 8015388:	f002 f91a 	bl	80175c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	681a      	ldr	r2, [r3, #0]
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2180      	movs	r1, #128	@ 0x80
 8015398:	0209      	lsls	r1, r1, #8
 801539a:	430a      	orrs	r2, r1
 801539c:	601a      	str	r2, [r3, #0]
 801539e:	e02d      	b.n	80153fc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2241      	movs	r2, #65	@ 0x41
 80153a4:	2120      	movs	r1, #32
 80153a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2242      	movs	r2, #66	@ 0x42
 80153ac:	2100      	movs	r1, #0
 80153ae:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153b4:	2210      	movs	r2, #16
 80153b6:	431a      	orrs	r2, r3
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2240      	movs	r2, #64	@ 0x40
 80153c0:	2100      	movs	r1, #0
 80153c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80153c4:	2301      	movs	r3, #1
 80153c6:	e01c      	b.n	8015402 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	4a15      	ldr	r2, [pc, #84]	@ (8015420 <HAL_I2C_Master_Receive_DMA+0x208>)
 80153cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	2380      	movs	r3, #128	@ 0x80
 80153d6:	049c      	lsls	r4, r3, #18
 80153d8:	230a      	movs	r3, #10
 80153da:	18fb      	adds	r3, r7, r3
 80153dc:	8819      	ldrh	r1, [r3, #0]
 80153de:	68f8      	ldr	r0, [r7, #12]
 80153e0:	4b0e      	ldr	r3, [pc, #56]	@ (801541c <HAL_I2C_Master_Receive_DMA+0x204>)
 80153e2:	9300      	str	r3, [sp, #0]
 80153e4:	0023      	movs	r3, r4
 80153e6:	f002 f8b1 	bl	801754c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	2240      	movs	r2, #64	@ 0x40
 80153ee:	2100      	movs	r1, #0
 80153f0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	2101      	movs	r1, #1
 80153f6:	0018      	movs	r0, r3
 80153f8:	f002 f8e2 	bl	80175c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80153fc:	2300      	movs	r3, #0
 80153fe:	e000      	b.n	8015402 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015400:	2302      	movs	r3, #2
  }
}
 8015402:	0018      	movs	r0, r3
 8015404:	46bd      	mov	sp, r7
 8015406:	b006      	add	sp, #24
 8015408:	bdb0      	pop	{r4, r5, r7, pc}
 801540a:	46c0      	nop			@ (mov r8, r8)
 801540c:	ffff0000 	.word	0xffff0000
 8015410:	08015e7d 	.word	0x08015e7d
 8015414:	08016f99 	.word	0x08016f99
 8015418:	08017039 	.word	0x08017039
 801541c:	80002400 	.word	0x80002400
 8015420:	08015a29 	.word	0x08015a29

08015424 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015424:	b590      	push	{r4, r7, lr}
 8015426:	b089      	sub	sp, #36	@ 0x24
 8015428:	af02      	add	r7, sp, #8
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	000c      	movs	r4, r1
 801542e:	0010      	movs	r0, r2
 8015430:	0019      	movs	r1, r3
 8015432:	230a      	movs	r3, #10
 8015434:	18fb      	adds	r3, r7, r3
 8015436:	1c22      	adds	r2, r4, #0
 8015438:	801a      	strh	r2, [r3, #0]
 801543a:	2308      	movs	r3, #8
 801543c:	18fb      	adds	r3, r7, r3
 801543e:	1c02      	adds	r2, r0, #0
 8015440:	801a      	strh	r2, [r3, #0]
 8015442:	1dbb      	adds	r3, r7, #6
 8015444:	1c0a      	adds	r2, r1, #0
 8015446:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2241      	movs	r2, #65	@ 0x41
 801544c:	5c9b      	ldrb	r3, [r3, r2]
 801544e:	b2db      	uxtb	r3, r3
 8015450:	2b20      	cmp	r3, #32
 8015452:	d000      	beq.n	8015456 <HAL_I2C_Mem_Read+0x32>
 8015454:	e110      	b.n	8015678 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015458:	2b00      	cmp	r3, #0
 801545a:	d004      	beq.n	8015466 <HAL_I2C_Mem_Read+0x42>
 801545c:	232c      	movs	r3, #44	@ 0x2c
 801545e:	18fb      	adds	r3, r7, r3
 8015460:	881b      	ldrh	r3, [r3, #0]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d105      	bne.n	8015472 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	2280      	movs	r2, #128	@ 0x80
 801546a:	0092      	lsls	r2, r2, #2
 801546c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801546e:	2301      	movs	r3, #1
 8015470:	e103      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2240      	movs	r2, #64	@ 0x40
 8015476:	5c9b      	ldrb	r3, [r3, r2]
 8015478:	2b01      	cmp	r3, #1
 801547a:	d101      	bne.n	8015480 <HAL_I2C_Mem_Read+0x5c>
 801547c:	2302      	movs	r3, #2
 801547e:	e0fc      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2240      	movs	r2, #64	@ 0x40
 8015484:	2101      	movs	r1, #1
 8015486:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015488:	f7fe f850 	bl	801352c <HAL_GetTick>
 801548c:	0003      	movs	r3, r0
 801548e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015490:	2380      	movs	r3, #128	@ 0x80
 8015492:	0219      	lsls	r1, r3, #8
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	2319      	movs	r3, #25
 801549c:	2201      	movs	r2, #1
 801549e:	f001 fe03 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 80154a2:	1e03      	subs	r3, r0, #0
 80154a4:	d001      	beq.n	80154aa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80154a6:	2301      	movs	r3, #1
 80154a8:	e0e7      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2241      	movs	r2, #65	@ 0x41
 80154ae:	2122      	movs	r1, #34	@ 0x22
 80154b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2242      	movs	r2, #66	@ 0x42
 80154b6:	2140      	movs	r1, #64	@ 0x40
 80154b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2200      	movs	r2, #0
 80154be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	222c      	movs	r2, #44	@ 0x2c
 80154ca:	18ba      	adds	r2, r7, r2
 80154cc:	8812      	ldrh	r2, [r2, #0]
 80154ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2200      	movs	r2, #0
 80154d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80154d6:	1dbb      	adds	r3, r7, #6
 80154d8:	881c      	ldrh	r4, [r3, #0]
 80154da:	2308      	movs	r3, #8
 80154dc:	18fb      	adds	r3, r7, r3
 80154de:	881a      	ldrh	r2, [r3, #0]
 80154e0:	230a      	movs	r3, #10
 80154e2:	18fb      	adds	r3, r7, r3
 80154e4:	8819      	ldrh	r1, [r3, #0]
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	9301      	str	r3, [sp, #4]
 80154ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ee:	9300      	str	r3, [sp, #0]
 80154f0:	0023      	movs	r3, r4
 80154f2:	f000 ffc1 	bl	8016478 <I2C_RequestMemoryRead>
 80154f6:	1e03      	subs	r3, r0, #0
 80154f8:	d005      	beq.n	8015506 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	2240      	movs	r2, #64	@ 0x40
 80154fe:	2100      	movs	r1, #0
 8015500:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015502:	2301      	movs	r3, #1
 8015504:	e0b9      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801550a:	b29b      	uxth	r3, r3
 801550c:	2bff      	cmp	r3, #255	@ 0xff
 801550e:	d911      	bls.n	8015534 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	22ff      	movs	r2, #255	@ 0xff
 8015514:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801551a:	b2da      	uxtb	r2, r3
 801551c:	2380      	movs	r3, #128	@ 0x80
 801551e:	045c      	lsls	r4, r3, #17
 8015520:	230a      	movs	r3, #10
 8015522:	18fb      	adds	r3, r7, r3
 8015524:	8819      	ldrh	r1, [r3, #0]
 8015526:	68f8      	ldr	r0, [r7, #12]
 8015528:	4b56      	ldr	r3, [pc, #344]	@ (8015684 <HAL_I2C_Mem_Read+0x260>)
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	0023      	movs	r3, r4
 801552e:	f002 f80d 	bl	801754c <I2C_TransferConfig>
 8015532:	e012      	b.n	801555a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015538:	b29a      	uxth	r2, r3
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015542:	b2da      	uxtb	r2, r3
 8015544:	2380      	movs	r3, #128	@ 0x80
 8015546:	049c      	lsls	r4, r3, #18
 8015548:	230a      	movs	r3, #10
 801554a:	18fb      	adds	r3, r7, r3
 801554c:	8819      	ldrh	r1, [r3, #0]
 801554e:	68f8      	ldr	r0, [r7, #12]
 8015550:	4b4c      	ldr	r3, [pc, #304]	@ (8015684 <HAL_I2C_Mem_Read+0x260>)
 8015552:	9300      	str	r3, [sp, #0]
 8015554:	0023      	movs	r3, r4
 8015556:	f001 fff9 	bl	801754c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801555a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	0013      	movs	r3, r2
 8015564:	2200      	movs	r2, #0
 8015566:	2104      	movs	r1, #4
 8015568:	f001 fd9e 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 801556c:	1e03      	subs	r3, r0, #0
 801556e:	d001      	beq.n	8015574 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015570:	2301      	movs	r3, #1
 8015572:	e082      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801557e:	b2d2      	uxtb	r2, r2
 8015580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015586:	1c5a      	adds	r2, r3, #1
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015590:	3b01      	subs	r3, #1
 8015592:	b29a      	uxth	r2, r3
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801559c:	b29b      	uxth	r3, r3
 801559e:	3b01      	subs	r3, #1
 80155a0:	b29a      	uxth	r2, r3
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d03a      	beq.n	8015626 <HAL_I2C_Mem_Read+0x202>
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d136      	bne.n	8015626 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80155b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80155ba:	68f8      	ldr	r0, [r7, #12]
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	0013      	movs	r3, r2
 80155c2:	2200      	movs	r2, #0
 80155c4:	2180      	movs	r1, #128	@ 0x80
 80155c6:	f001 fd6f 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 80155ca:	1e03      	subs	r3, r0, #0
 80155cc:	d001      	beq.n	80155d2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80155ce:	2301      	movs	r3, #1
 80155d0:	e053      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	2bff      	cmp	r3, #255	@ 0xff
 80155da:	d911      	bls.n	8015600 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	22ff      	movs	r2, #255	@ 0xff
 80155e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155e6:	b2da      	uxtb	r2, r3
 80155e8:	2380      	movs	r3, #128	@ 0x80
 80155ea:	045c      	lsls	r4, r3, #17
 80155ec:	230a      	movs	r3, #10
 80155ee:	18fb      	adds	r3, r7, r3
 80155f0:	8819      	ldrh	r1, [r3, #0]
 80155f2:	68f8      	ldr	r0, [r7, #12]
 80155f4:	2300      	movs	r3, #0
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	0023      	movs	r3, r4
 80155fa:	f001 ffa7 	bl	801754c <I2C_TransferConfig>
 80155fe:	e012      	b.n	8015626 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015604:	b29a      	uxth	r2, r3
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801560e:	b2da      	uxtb	r2, r3
 8015610:	2380      	movs	r3, #128	@ 0x80
 8015612:	049c      	lsls	r4, r3, #18
 8015614:	230a      	movs	r3, #10
 8015616:	18fb      	adds	r3, r7, r3
 8015618:	8819      	ldrh	r1, [r3, #0]
 801561a:	68f8      	ldr	r0, [r7, #12]
 801561c:	2300      	movs	r3, #0
 801561e:	9300      	str	r3, [sp, #0]
 8015620:	0023      	movs	r3, r4
 8015622:	f001 ff93 	bl	801754c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801562a:	b29b      	uxth	r3, r3
 801562c:	2b00      	cmp	r3, #0
 801562e:	d194      	bne.n	801555a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015630:	697a      	ldr	r2, [r7, #20]
 8015632:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	0018      	movs	r0, r3
 8015638:	f001 fdca 	bl	80171d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801563c:	1e03      	subs	r3, r0, #0
 801563e:	d001      	beq.n	8015644 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8015640:	2301      	movs	r3, #1
 8015642:	e01a      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	2220      	movs	r2, #32
 801564a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	490c      	ldr	r1, [pc, #48]	@ (8015688 <HAL_I2C_Mem_Read+0x264>)
 8015658:	400a      	ands	r2, r1
 801565a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	2241      	movs	r2, #65	@ 0x41
 8015660:	2120      	movs	r1, #32
 8015662:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2242      	movs	r2, #66	@ 0x42
 8015668:	2100      	movs	r1, #0
 801566a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2240      	movs	r2, #64	@ 0x40
 8015670:	2100      	movs	r1, #0
 8015672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015674:	2300      	movs	r3, #0
 8015676:	e000      	b.n	801567a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015678:	2302      	movs	r3, #2
  }
}
 801567a:	0018      	movs	r0, r3
 801567c:	46bd      	mov	sp, r7
 801567e:	b007      	add	sp, #28
 8015680:	bd90      	pop	{r4, r7, pc}
 8015682:	46c0      	nop			@ (mov r8, r8)
 8015684:	80002400 	.word	0x80002400
 8015688:	fe00e800 	.word	0xfe00e800

0801568c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801568c:	b5b0      	push	{r4, r5, r7, lr}
 801568e:	b088      	sub	sp, #32
 8015690:	af02      	add	r7, sp, #8
 8015692:	60f8      	str	r0, [r7, #12]
 8015694:	000c      	movs	r4, r1
 8015696:	0010      	movs	r0, r2
 8015698:	0019      	movs	r1, r3
 801569a:	230a      	movs	r3, #10
 801569c:	18fb      	adds	r3, r7, r3
 801569e:	1c22      	adds	r2, r4, #0
 80156a0:	801a      	strh	r2, [r3, #0]
 80156a2:	2308      	movs	r3, #8
 80156a4:	18fb      	adds	r3, r7, r3
 80156a6:	1c02      	adds	r2, r0, #0
 80156a8:	801a      	strh	r2, [r3, #0]
 80156aa:	1dbb      	adds	r3, r7, #6
 80156ac:	1c0a      	adds	r2, r1, #0
 80156ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2241      	movs	r2, #65	@ 0x41
 80156b4:	5c9b      	ldrb	r3, [r3, r2]
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	2b20      	cmp	r3, #32
 80156ba:	d000      	beq.n	80156be <HAL_I2C_Mem_Write_DMA+0x32>
 80156bc:	e0d8      	b.n	8015870 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80156be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d004      	beq.n	80156ce <HAL_I2C_Mem_Write_DMA+0x42>
 80156c4:	232c      	movs	r3, #44	@ 0x2c
 80156c6:	18fb      	adds	r3, r7, r3
 80156c8:	881b      	ldrh	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d105      	bne.n	80156da <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2280      	movs	r2, #128	@ 0x80
 80156d2:	0092      	lsls	r2, r2, #2
 80156d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80156d6:	2301      	movs	r3, #1
 80156d8:	e0cb      	b.n	8015872 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	699a      	ldr	r2, [r3, #24]
 80156e0:	2380      	movs	r3, #128	@ 0x80
 80156e2:	021b      	lsls	r3, r3, #8
 80156e4:	401a      	ands	r2, r3
 80156e6:	2380      	movs	r3, #128	@ 0x80
 80156e8:	021b      	lsls	r3, r3, #8
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d101      	bne.n	80156f2 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80156ee:	2302      	movs	r3, #2
 80156f0:	e0bf      	b.n	8015872 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	2240      	movs	r2, #64	@ 0x40
 80156f6:	5c9b      	ldrb	r3, [r3, r2]
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d101      	bne.n	8015700 <HAL_I2C_Mem_Write_DMA+0x74>
 80156fc:	2302      	movs	r3, #2
 80156fe:	e0b8      	b.n	8015872 <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2240      	movs	r2, #64	@ 0x40
 8015704:	2101      	movs	r1, #1
 8015706:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	2241      	movs	r2, #65	@ 0x41
 801570c:	2121      	movs	r1, #33	@ 0x21
 801570e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	2242      	movs	r2, #66	@ 0x42
 8015714:	2140      	movs	r1, #64	@ 0x40
 8015716:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2200      	movs	r2, #0
 801571c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015722:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	222c      	movs	r2, #44	@ 0x2c
 8015728:	18ba      	adds	r2, r7, r2
 801572a:	8812      	ldrh	r2, [r2, #0]
 801572c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	4a52      	ldr	r2, [pc, #328]	@ (801587c <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8015732:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	4a52      	ldr	r2, [pc, #328]	@ (8015880 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8015738:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 801573a:	230a      	movs	r3, #10
 801573c:	18fb      	adds	r3, r7, r3
 801573e:	881a      	ldrh	r2, [r3, #0]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015748:	b29b      	uxth	r3, r3
 801574a:	2bff      	cmp	r3, #255	@ 0xff
 801574c:	d903      	bls.n	8015756 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	22ff      	movs	r2, #255	@ 0xff
 8015752:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015754:	e004      	b.n	8015760 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801575a:	b29a      	uxth	r2, r3
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015760:	1dbb      	adds	r3, r7, #6
 8015762:	881b      	ldrh	r3, [r3, #0]
 8015764:	2b01      	cmp	r3, #1
 8015766:	d10b      	bne.n	8015780 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015768:	2308      	movs	r3, #8
 801576a:	18fb      	adds	r3, r7, r3
 801576c:	881b      	ldrh	r3, [r3, #0]
 801576e:	b2da      	uxtb	r2, r3
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2201      	movs	r2, #1
 801577a:	4252      	negs	r2, r2
 801577c:	651a      	str	r2, [r3, #80]	@ 0x50
 801577e:	e00e      	b.n	801579e <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015780:	2108      	movs	r1, #8
 8015782:	187b      	adds	r3, r7, r1
 8015784:	881b      	ldrh	r3, [r3, #0]
 8015786:	0a1b      	lsrs	r3, r3, #8
 8015788:	b29b      	uxth	r3, r3
 801578a:	b2da      	uxtb	r2, r3
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8015792:	187b      	adds	r3, r7, r1
 8015794:	881b      	ldrh	r3, [r3, #0]
 8015796:	b2db      	uxtb	r3, r3
 8015798:	001a      	movs	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d023      	beq.n	80157ee <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157aa:	4a36      	ldr	r2, [pc, #216]	@ (8015884 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80157ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157b2:	4a35      	ldr	r2, [pc, #212]	@ (8015888 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80157b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157ba:	2200      	movs	r2, #0
 80157bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157c2:	2200      	movs	r2, #0
 80157c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80157ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	3328      	adds	r3, #40	@ 0x28
 80157d2:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80157d8:	2517      	movs	r5, #23
 80157da:	197c      	adds	r4, r7, r5
 80157dc:	f7fe fbf8 	bl	8013fd0 <HAL_DMA_Start_IT>
 80157e0:	0003      	movs	r3, r0
 80157e2:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80157e4:	197b      	adds	r3, r7, r5
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d12d      	bne.n	8015848 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80157ec:	e013      	b.n	8015816 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2241      	movs	r2, #65	@ 0x41
 80157f2:	2120      	movs	r1, #32
 80157f4:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	2242      	movs	r2, #66	@ 0x42
 80157fa:	2100      	movs	r1, #0
 80157fc:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015802:	2280      	movs	r2, #128	@ 0x80
 8015804:	431a      	orrs	r2, r3
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2240      	movs	r2, #64	@ 0x40
 801580e:	2100      	movs	r1, #0
 8015810:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	e02d      	b.n	8015872 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8015816:	1dbb      	adds	r3, r7, #6
 8015818:	881b      	ldrh	r3, [r3, #0]
 801581a:	b2da      	uxtb	r2, r3
 801581c:	2380      	movs	r3, #128	@ 0x80
 801581e:	045c      	lsls	r4, r3, #17
 8015820:	230a      	movs	r3, #10
 8015822:	18fb      	adds	r3, r7, r3
 8015824:	8819      	ldrh	r1, [r3, #0]
 8015826:	68f8      	ldr	r0, [r7, #12]
 8015828:	4b18      	ldr	r3, [pc, #96]	@ (801588c <HAL_I2C_Mem_Write_DMA+0x200>)
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	0023      	movs	r3, r4
 801582e:	f001 fe8d 	bl	801754c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2240      	movs	r2, #64	@ 0x40
 8015836:	2100      	movs	r1, #0
 8015838:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	2101      	movs	r1, #1
 801583e:	0018      	movs	r0, r3
 8015840:	f001 febe 	bl	80175c0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8015844:	2300      	movs	r3, #0
 8015846:	e014      	b.n	8015872 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2241      	movs	r2, #65	@ 0x41
 801584c:	2120      	movs	r1, #32
 801584e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	2242      	movs	r2, #66	@ 0x42
 8015854:	2100      	movs	r1, #0
 8015856:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801585c:	2210      	movs	r2, #16
 801585e:	431a      	orrs	r2, r3
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2240      	movs	r2, #64	@ 0x40
 8015868:	2100      	movs	r1, #0
 801586a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801586c:	2301      	movs	r3, #1
 801586e:	e000      	b.n	8015872 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8015870:	2302      	movs	r3, #2
  }
}
 8015872:	0018      	movs	r0, r3
 8015874:	46bd      	mov	sp, r7
 8015876:	b006      	add	sp, #24
 8015878:	bdb0      	pop	{r4, r5, r7, pc}
 801587a:	46c0      	nop			@ (mov r8, r8)
 801587c:	ffff0000 	.word	0xffff0000
 8015880:	08016075 	.word	0x08016075
 8015884:	08016ef9 	.word	0x08016ef9
 8015888:	08017039 	.word	0x08017039
 801588c:	80002000 	.word	0x80002000

08015890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	699b      	ldr	r3, [r3, #24]
 801589e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d005      	beq.n	80158bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158b4:	68ba      	ldr	r2, [r7, #8]
 80158b6:	68f9      	ldr	r1, [r7, #12]
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	4798      	blx	r3
  }
}
 80158bc:	46c0      	nop			@ (mov r8, r8)
 80158be:	46bd      	mov	sp, r7
 80158c0:	b004      	add	sp, #16
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b086      	sub	sp, #24
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	699b      	ldr	r3, [r3, #24]
 80158d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80158dc:	697a      	ldr	r2, [r7, #20]
 80158de:	2380      	movs	r3, #128	@ 0x80
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4013      	ands	r3, r2
 80158e4:	d00e      	beq.n	8015904 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	2280      	movs	r2, #128	@ 0x80
 80158ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80158ec:	d00a      	beq.n	8015904 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158f2:	2201      	movs	r2, #1
 80158f4:	431a      	orrs	r2, r3
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2280      	movs	r2, #128	@ 0x80
 8015900:	0052      	lsls	r2, r2, #1
 8015902:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015904:	697a      	ldr	r2, [r7, #20]
 8015906:	2380      	movs	r3, #128	@ 0x80
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	4013      	ands	r3, r2
 801590c:	d00e      	beq.n	801592c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	2280      	movs	r2, #128	@ 0x80
 8015912:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015914:	d00a      	beq.n	801592c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801591a:	2208      	movs	r2, #8
 801591c:	431a      	orrs	r2, r3
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2280      	movs	r2, #128	@ 0x80
 8015928:	00d2      	lsls	r2, r2, #3
 801592a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801592c:	697a      	ldr	r2, [r7, #20]
 801592e:	2380      	movs	r3, #128	@ 0x80
 8015930:	009b      	lsls	r3, r3, #2
 8015932:	4013      	ands	r3, r2
 8015934:	d00e      	beq.n	8015954 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	2280      	movs	r2, #128	@ 0x80
 801593a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801593c:	d00a      	beq.n	8015954 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015942:	2202      	movs	r2, #2
 8015944:	431a      	orrs	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	2280      	movs	r2, #128	@ 0x80
 8015950:	0092      	lsls	r2, r2, #2
 8015952:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015958:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	220b      	movs	r2, #11
 801595e:	4013      	ands	r3, r2
 8015960:	d005      	beq.n	801596e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8015962:	68fa      	ldr	r2, [r7, #12]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	0011      	movs	r1, r2
 8015968:	0018      	movs	r0, r3
 801596a:	f001 f977 	bl	8016c5c <I2C_ITError>
  }
}
 801596e:	46c0      	nop			@ (mov r8, r8)
 8015970:	46bd      	mov	sp, r7
 8015972:	b006      	add	sp, #24
 8015974:	bd80      	pop	{r7, pc}

08015976 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015976:	b580      	push	{r7, lr}
 8015978:	b082      	sub	sp, #8
 801597a:	af00      	add	r7, sp, #0
 801597c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801597e:	46c0      	nop			@ (mov r8, r8)
 8015980:	46bd      	mov	sp, r7
 8015982:	b002      	add	sp, #8
 8015984:	bd80      	pop	{r7, pc}

08015986 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b082      	sub	sp, #8
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801598e:	46c0      	nop			@ (mov r8, r8)
 8015990:	46bd      	mov	sp, r7
 8015992:	b002      	add	sp, #8
 8015994:	bd80      	pop	{r7, pc}

08015996 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015996:	b580      	push	{r7, lr}
 8015998:	b082      	sub	sp, #8
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801599e:	46c0      	nop			@ (mov r8, r8)
 80159a0:	46bd      	mov	sp, r7
 80159a2:	b002      	add	sp, #8
 80159a4:	bd80      	pop	{r7, pc}

080159a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b082      	sub	sp, #8
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80159ae:	46c0      	nop			@ (mov r8, r8)
 80159b0:	46bd      	mov	sp, r7
 80159b2:	b002      	add	sp, #8
 80159b4:	bd80      	pop	{r7, pc}

080159b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80159b6:	b580      	push	{r7, lr}
 80159b8:	b082      	sub	sp, #8
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
 80159be:	0008      	movs	r0, r1
 80159c0:	0011      	movs	r1, r2
 80159c2:	1cfb      	adds	r3, r7, #3
 80159c4:	1c02      	adds	r2, r0, #0
 80159c6:	701a      	strb	r2, [r3, #0]
 80159c8:	003b      	movs	r3, r7
 80159ca:	1c0a      	adds	r2, r1, #0
 80159cc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80159ce:	46c0      	nop			@ (mov r8, r8)
 80159d0:	46bd      	mov	sp, r7
 80159d2:	b002      	add	sp, #8
 80159d4:	bd80      	pop	{r7, pc}

080159d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80159d6:	b580      	push	{r7, lr}
 80159d8:	b082      	sub	sp, #8
 80159da:	af00      	add	r7, sp, #0
 80159dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80159de:	46c0      	nop			@ (mov r8, r8)
 80159e0:	46bd      	mov	sp, r7
 80159e2:	b002      	add	sp, #8
 80159e4:	bd80      	pop	{r7, pc}

080159e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80159e6:	b580      	push	{r7, lr}
 80159e8:	b082      	sub	sp, #8
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80159ee:	46c0      	nop			@ (mov r8, r8)
 80159f0:	46bd      	mov	sp, r7
 80159f2:	b002      	add	sp, #8
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b082      	sub	sp, #8
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80159fe:	46c0      	nop			@ (mov r8, r8)
 8015a00:	46bd      	mov	sp, r7
 8015a02:	b002      	add	sp, #8
 8015a04:	bd80      	pop	{r7, pc}

08015a06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015a06:	b580      	push	{r7, lr}
 8015a08:	b082      	sub	sp, #8
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8015a0e:	46c0      	nop			@ (mov r8, r8)
 8015a10:	46bd      	mov	sp, r7
 8015a12:	b002      	add	sp, #8
 8015a14:	bd80      	pop	{r7, pc}

08015a16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015a16:	b580      	push	{r7, lr}
 8015a18:	b082      	sub	sp, #8
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8015a1e:	46c0      	nop			@ (mov r8, r8)
 8015a20:	46bd      	mov	sp, r7
 8015a22:	b002      	add	sp, #8
 8015a24:	bd80      	pop	{r7, pc}
	...

08015a28 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8015a28:	b590      	push	{r4, r7, lr}
 8015a2a:	b089      	sub	sp, #36	@ 0x24
 8015a2c:	af02      	add	r7, sp, #8
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2240      	movs	r2, #64	@ 0x40
 8015a3c:	5c9b      	ldrb	r3, [r3, r2]
 8015a3e:	2b01      	cmp	r3, #1
 8015a40:	d101      	bne.n	8015a46 <I2C_Master_ISR_IT+0x1e>
 8015a42:	2302      	movs	r3, #2
 8015a44:	e113      	b.n	8015c6e <I2C_Master_ISR_IT+0x246>
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2240      	movs	r2, #64	@ 0x40
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	2210      	movs	r2, #16
 8015a52:	4013      	ands	r3, r2
 8015a54:	d012      	beq.n	8015a7c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	2210      	movs	r2, #16
 8015a5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015a5c:	d00e      	beq.n	8015a7c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	2210      	movs	r2, #16
 8015a64:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a6a:	2204      	movs	r2, #4
 8015a6c:	431a      	orrs	r2, r3
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	0018      	movs	r0, r3
 8015a76:	f001 fa1c 	bl	8016eb2 <I2C_Flush_TXDR>
 8015a7a:	e0e5      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	2204      	movs	r2, #4
 8015a80:	4013      	ands	r3, r2
 8015a82:	d021      	beq.n	8015ac8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2204      	movs	r2, #4
 8015a88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015a8a:	d01d      	beq.n	8015ac8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8015a8c:	697b      	ldr	r3, [r7, #20]
 8015a8e:	2204      	movs	r2, #4
 8015a90:	4393      	bics	r3, r2
 8015a92:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a9e:	b2d2      	uxtb	r2, r2
 8015aa0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015aa6:	1c5a      	adds	r2, r3, #1
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ab0:	3b01      	subs	r3, #1
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015abc:	b29b      	uxth	r3, r3
 8015abe:	3b01      	subs	r3, #1
 8015ac0:	b29a      	uxth	r2, r3
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015ac6:	e0bf      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	2202      	movs	r2, #2
 8015acc:	4013      	ands	r3, r2
 8015ace:	d01c      	beq.n	8015b0a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015ad6:	d018      	beq.n	8015b0a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015adc:	781a      	ldrb	r2, [r3, #0]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ae8:	1c5a      	adds	r2, r3, #1
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015af2:	3b01      	subs	r3, #1
 8015af4:	b29a      	uxth	r2, r3
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	3b01      	subs	r3, #1
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015b08:	e09e      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	2280      	movs	r2, #128	@ 0x80
 8015b0e:	4013      	ands	r3, r2
 8015b10:	d100      	bne.n	8015b14 <I2C_Master_ISR_IT+0xec>
 8015b12:	e069      	b.n	8015be8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2240      	movs	r2, #64	@ 0x40
 8015b18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8015b1a:	d065      	beq.n	8015be8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d04a      	beq.n	8015bbc <I2C_Master_ISR_IT+0x194>
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d146      	bne.n	8015bbc <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	b29a      	uxth	r2, r3
 8015b36:	2112      	movs	r1, #18
 8015b38:	187b      	adds	r3, r7, r1
 8015b3a:	0592      	lsls	r2, r2, #22
 8015b3c:	0d92      	lsrs	r2, r2, #22
 8015b3e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	2bff      	cmp	r3, #255	@ 0xff
 8015b48:	d910      	bls.n	8015b6c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	22ff      	movs	r2, #255	@ 0xff
 8015b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	2380      	movs	r3, #128	@ 0x80
 8015b58:	045c      	lsls	r4, r3, #17
 8015b5a:	187b      	adds	r3, r7, r1
 8015b5c:	8819      	ldrh	r1, [r3, #0]
 8015b5e:	68f8      	ldr	r0, [r7, #12]
 8015b60:	2300      	movs	r3, #0
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	0023      	movs	r3, r4
 8015b66:	f001 fcf1 	bl	801754c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b6a:	e03c      	b.n	8015be6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b70:	b29a      	uxth	r2, r3
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8015c78 <I2C_Master_ISR_IT+0x250>)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d00e      	beq.n	8015b9e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b84:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015b8a:	2312      	movs	r3, #18
 8015b8c:	18fb      	adds	r3, r7, r3
 8015b8e:	8819      	ldrh	r1, [r3, #0]
 8015b90:	68f8      	ldr	r0, [r7, #12]
 8015b92:	2300      	movs	r3, #0
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	0023      	movs	r3, r4
 8015b98:	f001 fcd8 	bl	801754c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b9c:	e023      	b.n	8015be6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ba2:	b2da      	uxtb	r2, r3
 8015ba4:	2380      	movs	r3, #128	@ 0x80
 8015ba6:	049c      	lsls	r4, r3, #18
 8015ba8:	2312      	movs	r3, #18
 8015baa:	18fb      	adds	r3, r7, r3
 8015bac:	8819      	ldrh	r1, [r3, #0]
 8015bae:	68f8      	ldr	r0, [r7, #12]
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	9300      	str	r3, [sp, #0]
 8015bb4:	0023      	movs	r3, r4
 8015bb6:	f001 fcc9 	bl	801754c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015bba:	e014      	b.n	8015be6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	685a      	ldr	r2, [r3, #4]
 8015bc2:	2380      	movs	r3, #128	@ 0x80
 8015bc4:	049b      	lsls	r3, r3, #18
 8015bc6:	401a      	ands	r2, r3
 8015bc8:	2380      	movs	r3, #128	@ 0x80
 8015bca:	049b      	lsls	r3, r3, #18
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d004      	beq.n	8015bda <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	0018      	movs	r0, r3
 8015bd4:	f000 fd56 	bl	8016684 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015bd8:	e036      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2140      	movs	r1, #64	@ 0x40
 8015bde:	0018      	movs	r0, r3
 8015be0:	f001 f83c 	bl	8016c5c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015be4:	e030      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
 8015be6:	e02f      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	2240      	movs	r2, #64	@ 0x40
 8015bec:	4013      	ands	r3, r2
 8015bee:	d02b      	beq.n	8015c48 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2240      	movs	r2, #64	@ 0x40
 8015bf4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8015bf6:	d027      	beq.n	8015c48 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d11d      	bne.n	8015c3e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	685a      	ldr	r2, [r3, #4]
 8015c08:	2380      	movs	r3, #128	@ 0x80
 8015c0a:	049b      	lsls	r3, r3, #18
 8015c0c:	401a      	ands	r2, r3
 8015c0e:	2380      	movs	r3, #128	@ 0x80
 8015c10:	049b      	lsls	r3, r3, #18
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d018      	beq.n	8015c48 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c1a:	4a17      	ldr	r2, [pc, #92]	@ (8015c78 <I2C_Master_ISR_IT+0x250>)
 8015c1c:	4293      	cmp	r3, r2
 8015c1e:	d109      	bne.n	8015c34 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	685a      	ldr	r2, [r3, #4]
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2180      	movs	r1, #128	@ 0x80
 8015c2c:	01c9      	lsls	r1, r1, #7
 8015c2e:	430a      	orrs	r2, r1
 8015c30:	605a      	str	r2, [r3, #4]
 8015c32:	e009      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	0018      	movs	r0, r3
 8015c38:	f000 fd24 	bl	8016684 <I2C_ITMasterSeqCplt>
 8015c3c:	e004      	b.n	8015c48 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2140      	movs	r1, #64	@ 0x40
 8015c42:	0018      	movs	r0, r3
 8015c44:	f001 f80a 	bl	8016c5c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	2220      	movs	r2, #32
 8015c4c:	4013      	ands	r3, r2
 8015c4e:	d009      	beq.n	8015c64 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2220      	movs	r2, #32
 8015c54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015c56:	d005      	beq.n	8015c64 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8015c58:	697a      	ldr	r2, [r7, #20]
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	0011      	movs	r1, r2
 8015c5e:	0018      	movs	r0, r3
 8015c60:	f000 fdb6 	bl	80167d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2240      	movs	r2, #64	@ 0x40
 8015c68:	2100      	movs	r1, #0
 8015c6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	0018      	movs	r0, r3
 8015c70:	46bd      	mov	sp, r7
 8015c72:	b007      	add	sp, #28
 8015c74:	bd90      	pop	{r4, r7, pc}
 8015c76:	46c0      	nop			@ (mov r8, r8)
 8015c78:	ffff0000 	.word	0xffff0000

08015c7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b086      	sub	sp, #24
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	2240      	movs	r2, #64	@ 0x40
 8015c96:	5c9b      	ldrb	r3, [r3, r2]
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d101      	bne.n	8015ca0 <I2C_Slave_ISR_IT+0x24>
 8015c9c:	2302      	movs	r3, #2
 8015c9e:	e0e6      	b.n	8015e6e <I2C_Slave_ISR_IT+0x1f2>
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2240      	movs	r2, #64	@ 0x40
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	2220      	movs	r2, #32
 8015cac:	4013      	ands	r3, r2
 8015cae:	d009      	beq.n	8015cc4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2220      	movs	r2, #32
 8015cb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015cb6:	d005      	beq.n	8015cc4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8015cb8:	693a      	ldr	r2, [r7, #16]
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	0011      	movs	r1, r2
 8015cbe:	0018      	movs	r0, r3
 8015cc0:	f000 fe54 	bl	801696c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	2210      	movs	r2, #16
 8015cc8:	4013      	ands	r3, r2
 8015cca:	d052      	beq.n	8015d72 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2210      	movs	r2, #16
 8015cd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015cd2:	d04e      	beq.n	8015d72 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d12d      	bne.n	8015d3a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	2241      	movs	r2, #65	@ 0x41
 8015ce2:	5c9b      	ldrb	r3, [r3, r2]
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b28      	cmp	r3, #40	@ 0x28
 8015ce8:	d10b      	bne.n	8015d02 <I2C_Slave_ISR_IT+0x86>
 8015cea:	697a      	ldr	r2, [r7, #20]
 8015cec:	2380      	movs	r3, #128	@ 0x80
 8015cee:	049b      	lsls	r3, r3, #18
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d106      	bne.n	8015d02 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015cf4:	693a      	ldr	r2, [r7, #16]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	0011      	movs	r1, r2
 8015cfa:	0018      	movs	r0, r3
 8015cfc:	f000 ff56 	bl	8016bac <I2C_ITListenCplt>
 8015d00:	e036      	b.n	8015d70 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	2241      	movs	r2, #65	@ 0x41
 8015d06:	5c9b      	ldrb	r3, [r3, r2]
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	2b29      	cmp	r3, #41	@ 0x29
 8015d0c:	d110      	bne.n	8015d30 <I2C_Slave_ISR_IT+0xb4>
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	4a59      	ldr	r2, [pc, #356]	@ (8015e78 <I2C_Slave_ISR_IT+0x1fc>)
 8015d12:	4293      	cmp	r3, r2
 8015d14:	d00c      	beq.n	8015d30 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	2210      	movs	r2, #16
 8015d1c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	0018      	movs	r0, r3
 8015d22:	f001 f8c6 	bl	8016eb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	0018      	movs	r0, r3
 8015d2a:	f000 fced 	bl	8016708 <I2C_ITSlaveSeqCplt>
 8015d2e:	e01f      	b.n	8015d70 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2210      	movs	r2, #16
 8015d36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8015d38:	e091      	b.n	8015e5e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	2210      	movs	r2, #16
 8015d40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d46:	2204      	movs	r2, #4
 8015d48:	431a      	orrs	r2, r3
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d005      	beq.n	8015d60 <I2C_Slave_ISR_IT+0xe4>
 8015d54:	697a      	ldr	r2, [r7, #20]
 8015d56:	2380      	movs	r3, #128	@ 0x80
 8015d58:	045b      	lsls	r3, r3, #17
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d000      	beq.n	8015d60 <I2C_Slave_ISR_IT+0xe4>
 8015d5e:	e07e      	b.n	8015e5e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	0011      	movs	r1, r2
 8015d68:	0018      	movs	r0, r3
 8015d6a:	f000 ff77 	bl	8016c5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8015d6e:	e076      	b.n	8015e5e <I2C_Slave_ISR_IT+0x1e2>
 8015d70:	e075      	b.n	8015e5e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	2204      	movs	r2, #4
 8015d76:	4013      	ands	r3, r2
 8015d78:	d02f      	beq.n	8015dda <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2204      	movs	r2, #4
 8015d7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015d80:	d02b      	beq.n	8015dda <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d86:	b29b      	uxth	r3, r3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d018      	beq.n	8015dbe <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d96:	b2d2      	uxtb	r2, r2
 8015d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d9e:	1c5a      	adds	r2, r3, #1
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015da8:	3b01      	subs	r3, #1
 8015daa:	b29a      	uxth	r2, r3
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	3b01      	subs	r3, #1
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d14c      	bne.n	8015e62 <I2C_Slave_ISR_IT+0x1e6>
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	4a2b      	ldr	r2, [pc, #172]	@ (8015e78 <I2C_Slave_ISR_IT+0x1fc>)
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d048      	beq.n	8015e62 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	0018      	movs	r0, r3
 8015dd4:	f000 fc98 	bl	8016708 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8015dd8:	e043      	b.n	8015e62 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	2208      	movs	r2, #8
 8015dde:	4013      	ands	r3, r2
 8015de0:	d00a      	beq.n	8015df8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2208      	movs	r2, #8
 8015de6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015de8:	d006      	beq.n	8015df8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8015dea:	693a      	ldr	r2, [r7, #16]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	0011      	movs	r1, r2
 8015df0:	0018      	movs	r0, r3
 8015df2:	f000 fba3 	bl	801653c <I2C_ITAddrCplt>
 8015df6:	e035      	b.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	2202      	movs	r2, #2
 8015dfc:	4013      	ands	r3, r2
 8015dfe:	d031      	beq.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2202      	movs	r2, #2
 8015e04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015e06:	d02d      	beq.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d018      	beq.n	8015e44 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e16:	781a      	ldrb	r2, [r3, #0]
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e22:	1c5a      	adds	r2, r3, #1
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	3b01      	subs	r3, #1
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e3a:	3b01      	subs	r3, #1
 8015e3c:	b29a      	uxth	r2, r3
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015e42:	e00f      	b.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8015e44:	697a      	ldr	r2, [r7, #20]
 8015e46:	2380      	movs	r3, #128	@ 0x80
 8015e48:	045b      	lsls	r3, r3, #17
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d002      	beq.n	8015e54 <I2C_Slave_ISR_IT+0x1d8>
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d107      	bne.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	0018      	movs	r0, r3
 8015e58:	f000 fc56 	bl	8016708 <I2C_ITSlaveSeqCplt>
 8015e5c:	e002      	b.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8015e5e:	46c0      	nop			@ (mov r8, r8)
 8015e60:	e000      	b.n	8015e64 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8015e62:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2240      	movs	r2, #64	@ 0x40
 8015e68:	2100      	movs	r1, #0
 8015e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e6c:	2300      	movs	r3, #0
}
 8015e6e:	0018      	movs	r0, r3
 8015e70:	46bd      	mov	sp, r7
 8015e72:	b006      	add	sp, #24
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	46c0      	nop			@ (mov r8, r8)
 8015e78:	ffff0000 	.word	0xffff0000

08015e7c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8015e7c:	b590      	push	{r4, r7, lr}
 8015e7e:	b089      	sub	sp, #36	@ 0x24
 8015e80:	af02      	add	r7, sp, #8
 8015e82:	60f8      	str	r0, [r7, #12]
 8015e84:	60b9      	str	r1, [r7, #8]
 8015e86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2240      	movs	r2, #64	@ 0x40
 8015e8c:	5c9b      	ldrb	r3, [r3, r2]
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d101      	bne.n	8015e96 <I2C_Master_ISR_DMA+0x1a>
 8015e92:	2302      	movs	r3, #2
 8015e94:	e0e7      	b.n	8016066 <I2C_Master_ISR_DMA+0x1ea>
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2240      	movs	r2, #64	@ 0x40
 8015e9a:	2101      	movs	r1, #1
 8015e9c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015e9e:	68bb      	ldr	r3, [r7, #8]
 8015ea0:	2210      	movs	r2, #16
 8015ea2:	4013      	ands	r3, r2
 8015ea4:	d017      	beq.n	8015ed6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2210      	movs	r2, #16
 8015eaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015eac:	d013      	beq.n	8015ed6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2210      	movs	r2, #16
 8015eb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015eba:	2204      	movs	r2, #4
 8015ebc:	431a      	orrs	r2, r3
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	2120      	movs	r1, #32
 8015ec6:	0018      	movs	r0, r3
 8015ec8:	f001 fb7a 	bl	80175c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	0018      	movs	r0, r3
 8015ed0:	f000 ffef 	bl	8016eb2 <I2C_Flush_TXDR>
 8015ed4:	e0c2      	b.n	801605c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	2280      	movs	r2, #128	@ 0x80
 8015eda:	4013      	ands	r3, r2
 8015edc:	d100      	bne.n	8015ee0 <I2C_Master_ISR_DMA+0x64>
 8015ede:	e07c      	b.n	8015fda <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2240      	movs	r2, #64	@ 0x40
 8015ee4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015ee6:	d100      	bne.n	8015eea <I2C_Master_ISR_DMA+0x6e>
 8015ee8:	e077      	b.n	8015fda <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	681a      	ldr	r2, [r3, #0]
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2140      	movs	r1, #64	@ 0x40
 8015ef6:	438a      	bics	r2, r1
 8015ef8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d055      	beq.n	8015fb0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	685b      	ldr	r3, [r3, #4]
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	2312      	movs	r3, #18
 8015f0e:	18fb      	adds	r3, r7, r3
 8015f10:	0592      	lsls	r2, r2, #22
 8015f12:	0d92      	lsrs	r2, r2, #22
 8015f14:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f1a:	b29b      	uxth	r3, r3
 8015f1c:	2bff      	cmp	r3, #255	@ 0xff
 8015f1e:	d906      	bls.n	8015f2e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	22ff      	movs	r2, #255	@ 0xff
 8015f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8015f26:	2380      	movs	r3, #128	@ 0x80
 8015f28:	045b      	lsls	r3, r3, #17
 8015f2a:	617b      	str	r3, [r7, #20]
 8015f2c:	e010      	b.n	8015f50 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8016070 <I2C_Master_ISR_DMA+0x1f4>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d003      	beq.n	8015f4a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f46:	617b      	str	r3, [r7, #20]
 8015f48:	e002      	b.n	8015f50 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8015f4a:	2380      	movs	r3, #128	@ 0x80
 8015f4c:	049b      	lsls	r3, r3, #18
 8015f4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f54:	b2da      	uxtb	r2, r3
 8015f56:	697c      	ldr	r4, [r7, #20]
 8015f58:	2312      	movs	r3, #18
 8015f5a:	18fb      	adds	r3, r7, r3
 8015f5c:	8819      	ldrh	r1, [r3, #0]
 8015f5e:	68f8      	ldr	r0, [r7, #12]
 8015f60:	2300      	movs	r3, #0
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	0023      	movs	r3, r4
 8015f66:	f001 faf1 	bl	801754c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f6e:	b29a      	uxth	r2, r3
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	b29a      	uxth	r2, r3
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2241      	movs	r2, #65	@ 0x41
 8015f80:	5c9b      	ldrb	r3, [r3, r2]
 8015f82:	b2db      	uxtb	r3, r3
 8015f84:	2b22      	cmp	r3, #34	@ 0x22
 8015f86:	d109      	bne.n	8015f9c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2180      	movs	r1, #128	@ 0x80
 8015f94:	0209      	lsls	r1, r1, #8
 8015f96:	430a      	orrs	r2, r1
 8015f98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015f9a:	e05f      	b.n	801605c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	681a      	ldr	r2, [r3, #0]
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2180      	movs	r1, #128	@ 0x80
 8015fa8:	01c9      	lsls	r1, r1, #7
 8015faa:	430a      	orrs	r2, r1
 8015fac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015fae:	e055      	b.n	801605c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	685a      	ldr	r2, [r3, #4]
 8015fb6:	2380      	movs	r3, #128	@ 0x80
 8015fb8:	049b      	lsls	r3, r3, #18
 8015fba:	401a      	ands	r2, r3
 8015fbc:	2380      	movs	r3, #128	@ 0x80
 8015fbe:	049b      	lsls	r3, r3, #18
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d004      	beq.n	8015fce <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	0018      	movs	r0, r3
 8015fc8:	f000 fb5c 	bl	8016684 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8015fcc:	e046      	b.n	801605c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2140      	movs	r1, #64	@ 0x40
 8015fd2:	0018      	movs	r0, r3
 8015fd4:	f000 fe42 	bl	8016c5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015fd8:	e040      	b.n	801605c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	2240      	movs	r2, #64	@ 0x40
 8015fde:	4013      	ands	r3, r2
 8015fe0:	d02c      	beq.n	801603c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2240      	movs	r2, #64	@ 0x40
 8015fe6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015fe8:	d028      	beq.n	801603c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d11d      	bne.n	8016030 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	685a      	ldr	r2, [r3, #4]
 8015ffa:	2380      	movs	r3, #128	@ 0x80
 8015ffc:	049b      	lsls	r3, r3, #18
 8015ffe:	401a      	ands	r2, r3
 8016000:	2380      	movs	r3, #128	@ 0x80
 8016002:	049b      	lsls	r3, r3, #18
 8016004:	429a      	cmp	r2, r3
 8016006:	d028      	beq.n	801605a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801600c:	4a18      	ldr	r2, [pc, #96]	@ (8016070 <I2C_Master_ISR_DMA+0x1f4>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d109      	bne.n	8016026 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	685a      	ldr	r2, [r3, #4]
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2180      	movs	r1, #128	@ 0x80
 801601e:	01c9      	lsls	r1, r1, #7
 8016020:	430a      	orrs	r2, r1
 8016022:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8016024:	e019      	b.n	801605a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	0018      	movs	r0, r3
 801602a:	f000 fb2b 	bl	8016684 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801602e:	e014      	b.n	801605a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	2140      	movs	r1, #64	@ 0x40
 8016034:	0018      	movs	r0, r3
 8016036:	f000 fe11 	bl	8016c5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801603a:	e00e      	b.n	801605a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	2220      	movs	r2, #32
 8016040:	4013      	ands	r3, r2
 8016042:	d00b      	beq.n	801605c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2220      	movs	r2, #32
 8016048:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801604a:	d007      	beq.n	801605c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801604c:	68ba      	ldr	r2, [r7, #8]
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	0011      	movs	r1, r2
 8016052:	0018      	movs	r0, r3
 8016054:	f000 fbbc 	bl	80167d0 <I2C_ITMasterCplt>
 8016058:	e000      	b.n	801605c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801605a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2240      	movs	r2, #64	@ 0x40
 8016060:	2100      	movs	r1, #0
 8016062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016064:	2300      	movs	r3, #0
}
 8016066:	0018      	movs	r0, r3
 8016068:	46bd      	mov	sp, r7
 801606a:	b007      	add	sp, #28
 801606c:	bd90      	pop	{r4, r7, pc}
 801606e:	46c0      	nop			@ (mov r8, r8)
 8016070:	ffff0000 	.word	0xffff0000

08016074 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8016074:	b590      	push	{r4, r7, lr}
 8016076:	b089      	sub	sp, #36	@ 0x24
 8016078:	af02      	add	r7, sp, #8
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8016080:	4b88      	ldr	r3, [pc, #544]	@ (80162a4 <I2C_Mem_ISR_DMA+0x230>)
 8016082:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2240      	movs	r2, #64	@ 0x40
 8016088:	5c9b      	ldrb	r3, [r3, r2]
 801608a:	2b01      	cmp	r3, #1
 801608c:	d101      	bne.n	8016092 <I2C_Mem_ISR_DMA+0x1e>
 801608e:	2302      	movs	r3, #2
 8016090:	e104      	b.n	801629c <I2C_Mem_ISR_DMA+0x228>
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	2240      	movs	r2, #64	@ 0x40
 8016096:	2101      	movs	r1, #1
 8016098:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	2210      	movs	r2, #16
 801609e:	4013      	ands	r3, r2
 80160a0:	d017      	beq.n	80160d2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2210      	movs	r2, #16
 80160a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80160a8:	d013      	beq.n	80160d2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	2210      	movs	r2, #16
 80160b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160b6:	2204      	movs	r2, #4
 80160b8:	431a      	orrs	r2, r3
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2120      	movs	r1, #32
 80160c2:	0018      	movs	r0, r3
 80160c4:	f001 fa7c 	bl	80175c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	0018      	movs	r0, r3
 80160cc:	f000 fef1 	bl	8016eb2 <I2C_Flush_TXDR>
 80160d0:	e0df      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	2202      	movs	r2, #2
 80160d6:	4013      	ands	r3, r2
 80160d8:	d00d      	beq.n	80160f6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2202      	movs	r2, #2
 80160de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80160e0:	d009      	beq.n	80160f6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	68fa      	ldr	r2, [r7, #12]
 80160e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80160ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2201      	movs	r2, #1
 80160f0:	4252      	negs	r2, r2
 80160f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80160f4:	e0cd      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	2280      	movs	r2, #128	@ 0x80
 80160fa:	4013      	ands	r3, r2
 80160fc:	d05e      	beq.n	80161bc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2240      	movs	r2, #64	@ 0x40
 8016102:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016104:	d05a      	beq.n	80161bc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2110      	movs	r1, #16
 801610a:	0018      	movs	r0, r3
 801610c:	f001 fa58 	bl	80175c0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016114:	b29b      	uxth	r3, r3
 8016116:	2b00      	cmp	r3, #0
 8016118:	d04a      	beq.n	80161b0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801611e:	b29b      	uxth	r3, r3
 8016120:	2bff      	cmp	r3, #255	@ 0xff
 8016122:	d910      	bls.n	8016146 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	22ff      	movs	r2, #255	@ 0xff
 8016128:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801612e:	b299      	uxth	r1, r3
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016134:	b2da      	uxtb	r2, r3
 8016136:	2380      	movs	r3, #128	@ 0x80
 8016138:	045b      	lsls	r3, r3, #17
 801613a:	68f8      	ldr	r0, [r7, #12]
 801613c:	2400      	movs	r4, #0
 801613e:	9400      	str	r4, [sp, #0]
 8016140:	f001 fa04 	bl	801754c <I2C_TransferConfig>
 8016144:	e011      	b.n	801616a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801614a:	b29a      	uxth	r2, r3
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016154:	b299      	uxth	r1, r3
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801615a:	b2da      	uxtb	r2, r3
 801615c:	2380      	movs	r3, #128	@ 0x80
 801615e:	049b      	lsls	r3, r3, #18
 8016160:	68f8      	ldr	r0, [r7, #12]
 8016162:	2400      	movs	r4, #0
 8016164:	9400      	str	r4, [sp, #0]
 8016166:	f001 f9f1 	bl	801754c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801616e:	b29a      	uxth	r2, r3
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016174:	1ad3      	subs	r3, r2, r3
 8016176:	b29a      	uxth	r2, r3
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2241      	movs	r2, #65	@ 0x41
 8016180:	5c9b      	ldrb	r3, [r3, r2]
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b22      	cmp	r3, #34	@ 0x22
 8016186:	d109      	bne.n	801619c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	681a      	ldr	r2, [r3, #0]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2180      	movs	r1, #128	@ 0x80
 8016194:	0209      	lsls	r1, r1, #8
 8016196:	430a      	orrs	r2, r1
 8016198:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801619a:	e07a      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	2180      	movs	r1, #128	@ 0x80
 80161a8:	01c9      	lsls	r1, r1, #7
 80161aa:	430a      	orrs	r2, r1
 80161ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80161ae:	e070      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	2140      	movs	r1, #64	@ 0x40
 80161b4:	0018      	movs	r0, r3
 80161b6:	f000 fd51 	bl	8016c5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80161ba:	e06a      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	2240      	movs	r2, #64	@ 0x40
 80161c0:	4013      	ands	r3, r2
 80161c2:	d058      	beq.n	8016276 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2240      	movs	r2, #64	@ 0x40
 80161c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80161ca:	d054      	beq.n	8016276 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2241      	movs	r2, #65	@ 0x41
 80161d0:	5c9b      	ldrb	r3, [r3, r2]
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	2b22      	cmp	r3, #34	@ 0x22
 80161d6:	d101      	bne.n	80161dc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80161d8:	4b33      	ldr	r3, [pc, #204]	@ (80162a8 <I2C_Mem_ISR_DMA+0x234>)
 80161da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	2bff      	cmp	r3, #255	@ 0xff
 80161e4:	d911      	bls.n	801620a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	22ff      	movs	r2, #255	@ 0xff
 80161ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161f0:	b299      	uxth	r1, r3
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161f6:	b2da      	uxtb	r2, r3
 80161f8:	2380      	movs	r3, #128	@ 0x80
 80161fa:	045c      	lsls	r4, r3, #17
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	0023      	movs	r3, r4
 8016204:	f001 f9a2 	bl	801754c <I2C_TransferConfig>
 8016208:	e012      	b.n	8016230 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801620e:	b29a      	uxth	r2, r3
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016218:	b299      	uxth	r1, r3
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801621e:	b2da      	uxtb	r2, r3
 8016220:	2380      	movs	r3, #128	@ 0x80
 8016222:	049c      	lsls	r4, r3, #18
 8016224:	68f8      	ldr	r0, [r7, #12]
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	9300      	str	r3, [sp, #0]
 801622a:	0023      	movs	r3, r4
 801622c:	f001 f98e 	bl	801754c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016234:	b29a      	uxth	r2, r3
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	b29a      	uxth	r2, r3
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	2241      	movs	r2, #65	@ 0x41
 8016246:	5c9b      	ldrb	r3, [r3, r2]
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b22      	cmp	r3, #34	@ 0x22
 801624c:	d109      	bne.n	8016262 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2180      	movs	r1, #128	@ 0x80
 801625a:	0209      	lsls	r1, r1, #8
 801625c:	430a      	orrs	r2, r1
 801625e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016260:	e017      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	681a      	ldr	r2, [r3, #0]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2180      	movs	r1, #128	@ 0x80
 801626e:	01c9      	lsls	r1, r1, #7
 8016270:	430a      	orrs	r2, r1
 8016272:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016274:	e00d      	b.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	2220      	movs	r2, #32
 801627a:	4013      	ands	r3, r2
 801627c:	d009      	beq.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2220      	movs	r2, #32
 8016282:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016284:	d005      	beq.n	8016292 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016286:	68ba      	ldr	r2, [r7, #8]
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	0011      	movs	r1, r2
 801628c:	0018      	movs	r0, r3
 801628e:	f000 fa9f 	bl	80167d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	2240      	movs	r2, #64	@ 0x40
 8016296:	2100      	movs	r1, #0
 8016298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801629a:	2300      	movs	r3, #0
}
 801629c:	0018      	movs	r0, r3
 801629e:	46bd      	mov	sp, r7
 80162a0:	b007      	add	sp, #28
 80162a2:	bd90      	pop	{r4, r7, pc}
 80162a4:	80002000 	.word	0x80002000
 80162a8:	80002400 	.word	0x80002400

080162ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b088      	sub	sp, #32
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80162be:	2300      	movs	r3, #0
 80162c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	2240      	movs	r2, #64	@ 0x40
 80162c6:	5c9b      	ldrb	r3, [r3, r2]
 80162c8:	2b01      	cmp	r3, #1
 80162ca:	d101      	bne.n	80162d0 <I2C_Slave_ISR_DMA+0x24>
 80162cc:	2302      	movs	r3, #2
 80162ce:	e0cd      	b.n	801646c <I2C_Slave_ISR_DMA+0x1c0>
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2240      	movs	r2, #64	@ 0x40
 80162d4:	2101      	movs	r1, #1
 80162d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	2220      	movs	r2, #32
 80162dc:	4013      	ands	r3, r2
 80162de:	d009      	beq.n	80162f4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2220      	movs	r2, #32
 80162e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80162e6:	d005      	beq.n	80162f4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80162e8:	68ba      	ldr	r2, [r7, #8]
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	0011      	movs	r1, r2
 80162ee:	0018      	movs	r0, r3
 80162f0:	f000 fb3c 	bl	801696c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80162f4:	68bb      	ldr	r3, [r7, #8]
 80162f6:	2210      	movs	r2, #16
 80162f8:	4013      	ands	r3, r2
 80162fa:	d100      	bne.n	80162fe <I2C_Slave_ISR_DMA+0x52>
 80162fc:	e0a3      	b.n	8016446 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	2210      	movs	r2, #16
 8016302:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016304:	d100      	bne.n	8016308 <I2C_Slave_ISR_DMA+0x5c>
 8016306:	e09e      	b.n	8016446 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	2380      	movs	r3, #128	@ 0x80
 801630c:	01db      	lsls	r3, r3, #7
 801630e:	4013      	ands	r3, r2
 8016310:	d105      	bne.n	801631e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	2380      	movs	r3, #128	@ 0x80
 8016316:	021b      	lsls	r3, r3, #8
 8016318:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801631a:	d100      	bne.n	801631e <I2C_Slave_ISR_DMA+0x72>
 801631c:	e08c      	b.n	8016438 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016322:	2b00      	cmp	r3, #0
 8016324:	d00c      	beq.n	8016340 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	2380      	movs	r3, #128	@ 0x80
 801632a:	021b      	lsls	r3, r3, #8
 801632c:	4013      	ands	r3, r2
 801632e:	d007      	beq.n	8016340 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d101      	bne.n	8016340 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 801633c:	2301      	movs	r3, #1
 801633e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016344:	2b00      	cmp	r3, #0
 8016346:	d00c      	beq.n	8016362 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	2380      	movs	r3, #128	@ 0x80
 801634c:	01db      	lsls	r3, r3, #7
 801634e:	4013      	ands	r3, r2
 8016350:	d007      	beq.n	8016362 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d101      	bne.n	8016362 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801635e:	2301      	movs	r3, #1
 8016360:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	2b01      	cmp	r3, #1
 8016366:	d12d      	bne.n	80163c4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	2241      	movs	r2, #65	@ 0x41
 801636c:	5c9b      	ldrb	r3, [r3, r2]
 801636e:	b2db      	uxtb	r3, r3
 8016370:	2b28      	cmp	r3, #40	@ 0x28
 8016372:	d10b      	bne.n	801638c <I2C_Slave_ISR_DMA+0xe0>
 8016374:	69ba      	ldr	r2, [r7, #24]
 8016376:	2380      	movs	r3, #128	@ 0x80
 8016378:	049b      	lsls	r3, r3, #18
 801637a:	429a      	cmp	r2, r3
 801637c:	d106      	bne.n	801638c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801637e:	68ba      	ldr	r2, [r7, #8]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	0011      	movs	r1, r2
 8016384:	0018      	movs	r0, r3
 8016386:	f000 fc11 	bl	8016bac <I2C_ITListenCplt>
 801638a:	e054      	b.n	8016436 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2241      	movs	r2, #65	@ 0x41
 8016390:	5c9b      	ldrb	r3, [r3, r2]
 8016392:	b2db      	uxtb	r3, r3
 8016394:	2b29      	cmp	r3, #41	@ 0x29
 8016396:	d110      	bne.n	80163ba <I2C_Slave_ISR_DMA+0x10e>
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	4a36      	ldr	r2, [pc, #216]	@ (8016474 <I2C_Slave_ISR_DMA+0x1c8>)
 801639c:	4293      	cmp	r3, r2
 801639e:	d00c      	beq.n	80163ba <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2210      	movs	r2, #16
 80163a6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	0018      	movs	r0, r3
 80163ac:	f000 fd81 	bl	8016eb2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	0018      	movs	r0, r3
 80163b4:	f000 f9a8 	bl	8016708 <I2C_ITSlaveSeqCplt>
 80163b8:	e03d      	b.n	8016436 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2210      	movs	r2, #16
 80163c0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80163c2:	e03e      	b.n	8016442 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2210      	movs	r2, #16
 80163ca:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163d0:	2204      	movs	r2, #4
 80163d2:	431a      	orrs	r2, r3
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80163d8:	2317      	movs	r3, #23
 80163da:	18fb      	adds	r3, r7, r3
 80163dc:	68fa      	ldr	r2, [r7, #12]
 80163de:	2141      	movs	r1, #65	@ 0x41
 80163e0:	5c52      	ldrb	r2, [r2, r1]
 80163e2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d004      	beq.n	80163f4 <I2C_Slave_ISR_DMA+0x148>
 80163ea:	69ba      	ldr	r2, [r7, #24]
 80163ec:	2380      	movs	r3, #128	@ 0x80
 80163ee:	045b      	lsls	r3, r3, #17
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d126      	bne.n	8016442 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80163f4:	2217      	movs	r2, #23
 80163f6:	18bb      	adds	r3, r7, r2
 80163f8:	781b      	ldrb	r3, [r3, #0]
 80163fa:	2b21      	cmp	r3, #33	@ 0x21
 80163fc:	d003      	beq.n	8016406 <I2C_Slave_ISR_DMA+0x15a>
 80163fe:	18bb      	adds	r3, r7, r2
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	2b29      	cmp	r3, #41	@ 0x29
 8016404:	d103      	bne.n	801640e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2221      	movs	r2, #33	@ 0x21
 801640a:	631a      	str	r2, [r3, #48]	@ 0x30
 801640c:	e00b      	b.n	8016426 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801640e:	2217      	movs	r2, #23
 8016410:	18bb      	adds	r3, r7, r2
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	2b22      	cmp	r3, #34	@ 0x22
 8016416:	d003      	beq.n	8016420 <I2C_Slave_ISR_DMA+0x174>
 8016418:	18bb      	adds	r3, r7, r2
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	2b2a      	cmp	r3, #42	@ 0x2a
 801641e:	d102      	bne.n	8016426 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2222      	movs	r2, #34	@ 0x22
 8016424:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	0011      	movs	r1, r2
 801642e:	0018      	movs	r0, r3
 8016430:	f000 fc14 	bl	8016c5c <I2C_ITError>
      if (treatdmanack == 1U)
 8016434:	e005      	b.n	8016442 <I2C_Slave_ISR_DMA+0x196>
 8016436:	e004      	b.n	8016442 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	2210      	movs	r2, #16
 801643e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016440:	e00f      	b.n	8016462 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8016442:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016444:	e00d      	b.n	8016462 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	2208      	movs	r2, #8
 801644a:	4013      	ands	r3, r2
 801644c:	d009      	beq.n	8016462 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2208      	movs	r2, #8
 8016452:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016454:	d005      	beq.n	8016462 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016456:	68ba      	ldr	r2, [r7, #8]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	0011      	movs	r1, r2
 801645c:	0018      	movs	r0, r3
 801645e:	f000 f86d 	bl	801653c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2240      	movs	r2, #64	@ 0x40
 8016466:	2100      	movs	r1, #0
 8016468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801646a:	2300      	movs	r3, #0
}
 801646c:	0018      	movs	r0, r3
 801646e:	46bd      	mov	sp, r7
 8016470:	b008      	add	sp, #32
 8016472:	bd80      	pop	{r7, pc}
 8016474:	ffff0000 	.word	0xffff0000

08016478 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016478:	b5b0      	push	{r4, r5, r7, lr}
 801647a:	b086      	sub	sp, #24
 801647c:	af02      	add	r7, sp, #8
 801647e:	60f8      	str	r0, [r7, #12]
 8016480:	000c      	movs	r4, r1
 8016482:	0010      	movs	r0, r2
 8016484:	0019      	movs	r1, r3
 8016486:	250a      	movs	r5, #10
 8016488:	197b      	adds	r3, r7, r5
 801648a:	1c22      	adds	r2, r4, #0
 801648c:	801a      	strh	r2, [r3, #0]
 801648e:	2308      	movs	r3, #8
 8016490:	18fb      	adds	r3, r7, r3
 8016492:	1c02      	adds	r2, r0, #0
 8016494:	801a      	strh	r2, [r3, #0]
 8016496:	1dbb      	adds	r3, r7, #6
 8016498:	1c0a      	adds	r2, r1, #0
 801649a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801649c:	1dbb      	adds	r3, r7, #6
 801649e:	881b      	ldrh	r3, [r3, #0]
 80164a0:	b2da      	uxtb	r2, r3
 80164a2:	197b      	adds	r3, r7, r5
 80164a4:	8819      	ldrh	r1, [r3, #0]
 80164a6:	68f8      	ldr	r0, [r7, #12]
 80164a8:	4b23      	ldr	r3, [pc, #140]	@ (8016538 <I2C_RequestMemoryRead+0xc0>)
 80164aa:	9300      	str	r3, [sp, #0]
 80164ac:	2300      	movs	r3, #0
 80164ae:	f001 f84d 	bl	801754c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80164b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164b4:	6a39      	ldr	r1, [r7, #32]
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	0018      	movs	r0, r3
 80164ba:	f000 fe43 	bl	8017144 <I2C_WaitOnTXISFlagUntilTimeout>
 80164be:	1e03      	subs	r3, r0, #0
 80164c0:	d001      	beq.n	80164c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80164c2:	2301      	movs	r3, #1
 80164c4:	e033      	b.n	801652e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80164c6:	1dbb      	adds	r3, r7, #6
 80164c8:	881b      	ldrh	r3, [r3, #0]
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d107      	bne.n	80164de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80164ce:	2308      	movs	r3, #8
 80164d0:	18fb      	adds	r3, r7, r3
 80164d2:	881b      	ldrh	r3, [r3, #0]
 80164d4:	b2da      	uxtb	r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	629a      	str	r2, [r3, #40]	@ 0x28
 80164dc:	e019      	b.n	8016512 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80164de:	2308      	movs	r3, #8
 80164e0:	18fb      	adds	r3, r7, r3
 80164e2:	881b      	ldrh	r3, [r3, #0]
 80164e4:	0a1b      	lsrs	r3, r3, #8
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	b2da      	uxtb	r2, r3
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80164f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164f2:	6a39      	ldr	r1, [r7, #32]
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	0018      	movs	r0, r3
 80164f8:	f000 fe24 	bl	8017144 <I2C_WaitOnTXISFlagUntilTimeout>
 80164fc:	1e03      	subs	r3, r0, #0
 80164fe:	d001      	beq.n	8016504 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016500:	2301      	movs	r3, #1
 8016502:	e014      	b.n	801652e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016504:	2308      	movs	r3, #8
 8016506:	18fb      	adds	r3, r7, r3
 8016508:	881b      	ldrh	r3, [r3, #0]
 801650a:	b2da      	uxtb	r2, r3
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8016512:	6a3a      	ldr	r2, [r7, #32]
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	0013      	movs	r3, r2
 801651c:	2200      	movs	r2, #0
 801651e:	2140      	movs	r1, #64	@ 0x40
 8016520:	f000 fdc2 	bl	80170a8 <I2C_WaitOnFlagUntilTimeout>
 8016524:	1e03      	subs	r3, r0, #0
 8016526:	d001      	beq.n	801652c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8016528:	2301      	movs	r3, #1
 801652a:	e000      	b.n	801652e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 801652c:	2300      	movs	r3, #0
}
 801652e:	0018      	movs	r0, r3
 8016530:	46bd      	mov	sp, r7
 8016532:	b004      	add	sp, #16
 8016534:	bdb0      	pop	{r4, r5, r7, pc}
 8016536:	46c0      	nop			@ (mov r8, r8)
 8016538:	80002000 	.word	0x80002000

0801653c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801653c:	b5b0      	push	{r4, r5, r7, lr}
 801653e:	b084      	sub	sp, #16
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2241      	movs	r2, #65	@ 0x41
 801654a:	5c9b      	ldrb	r3, [r3, r2]
 801654c:	b2db      	uxtb	r3, r3
 801654e:	001a      	movs	r2, r3
 8016550:	2328      	movs	r3, #40	@ 0x28
 8016552:	4013      	ands	r3, r2
 8016554:	2b28      	cmp	r3, #40	@ 0x28
 8016556:	d000      	beq.n	801655a <I2C_ITAddrCplt+0x1e>
 8016558:	e088      	b.n	801666c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	699b      	ldr	r3, [r3, #24]
 8016560:	0c1b      	lsrs	r3, r3, #16
 8016562:	b2da      	uxtb	r2, r3
 8016564:	250f      	movs	r5, #15
 8016566:	197b      	adds	r3, r7, r5
 8016568:	2101      	movs	r1, #1
 801656a:	400a      	ands	r2, r1
 801656c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	699b      	ldr	r3, [r3, #24]
 8016574:	0c1b      	lsrs	r3, r3, #16
 8016576:	b29a      	uxth	r2, r3
 8016578:	200c      	movs	r0, #12
 801657a:	183b      	adds	r3, r7, r0
 801657c:	21fe      	movs	r1, #254	@ 0xfe
 801657e:	400a      	ands	r2, r1
 8016580:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	689b      	ldr	r3, [r3, #8]
 8016588:	b29a      	uxth	r2, r3
 801658a:	240a      	movs	r4, #10
 801658c:	193b      	adds	r3, r7, r4
 801658e:	0592      	lsls	r2, r2, #22
 8016590:	0d92      	lsrs	r2, r2, #22
 8016592:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	b29a      	uxth	r2, r3
 801659c:	2308      	movs	r3, #8
 801659e:	18fb      	adds	r3, r7, r3
 80165a0:	21fe      	movs	r1, #254	@ 0xfe
 80165a2:	400a      	ands	r2, r1
 80165a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	68db      	ldr	r3, [r3, #12]
 80165aa:	2b02      	cmp	r3, #2
 80165ac:	d148      	bne.n	8016640 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80165ae:	0021      	movs	r1, r4
 80165b0:	187b      	adds	r3, r7, r1
 80165b2:	881b      	ldrh	r3, [r3, #0]
 80165b4:	09db      	lsrs	r3, r3, #7
 80165b6:	b29a      	uxth	r2, r3
 80165b8:	183b      	adds	r3, r7, r0
 80165ba:	881b      	ldrh	r3, [r3, #0]
 80165bc:	4053      	eors	r3, r2
 80165be:	b29b      	uxth	r3, r3
 80165c0:	001a      	movs	r2, r3
 80165c2:	2306      	movs	r3, #6
 80165c4:	4013      	ands	r3, r2
 80165c6:	d120      	bne.n	801660a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80165c8:	183b      	adds	r3, r7, r0
 80165ca:	187a      	adds	r2, r7, r1
 80165cc:	8812      	ldrh	r2, [r2, #0]
 80165ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80165d4:	1c5a      	adds	r2, r3, #1
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80165de:	2b02      	cmp	r3, #2
 80165e0:	d14c      	bne.n	801667c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2200      	movs	r2, #0
 80165e6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	2208      	movs	r2, #8
 80165ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2240      	movs	r2, #64	@ 0x40
 80165f4:	2100      	movs	r1, #0
 80165f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80165f8:	183b      	adds	r3, r7, r0
 80165fa:	881a      	ldrh	r2, [r3, #0]
 80165fc:	197b      	adds	r3, r7, r5
 80165fe:	7819      	ldrb	r1, [r3, #0]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	0018      	movs	r0, r3
 8016604:	f7ff f9d7 	bl	80159b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8016608:	e038      	b.n	801667c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801660a:	240c      	movs	r4, #12
 801660c:	193b      	adds	r3, r7, r4
 801660e:	2208      	movs	r2, #8
 8016610:	18ba      	adds	r2, r7, r2
 8016612:	8812      	ldrh	r2, [r2, #0]
 8016614:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016616:	2380      	movs	r3, #128	@ 0x80
 8016618:	021a      	lsls	r2, r3, #8
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	0011      	movs	r1, r2
 801661e:	0018      	movs	r0, r3
 8016620:	f001 f85c 	bl	80176dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2240      	movs	r2, #64	@ 0x40
 8016628:	2100      	movs	r1, #0
 801662a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801662c:	193b      	adds	r3, r7, r4
 801662e:	881a      	ldrh	r2, [r3, #0]
 8016630:	230f      	movs	r3, #15
 8016632:	18fb      	adds	r3, r7, r3
 8016634:	7819      	ldrb	r1, [r3, #0]
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	0018      	movs	r0, r3
 801663a:	f7ff f9bc 	bl	80159b6 <HAL_I2C_AddrCallback>
}
 801663e:	e01d      	b.n	801667c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016640:	2380      	movs	r3, #128	@ 0x80
 8016642:	021a      	lsls	r2, r3, #8
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	0011      	movs	r1, r2
 8016648:	0018      	movs	r0, r3
 801664a:	f001 f847 	bl	80176dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2240      	movs	r2, #64	@ 0x40
 8016652:	2100      	movs	r1, #0
 8016654:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016656:	230c      	movs	r3, #12
 8016658:	18fb      	adds	r3, r7, r3
 801665a:	881a      	ldrh	r2, [r3, #0]
 801665c:	230f      	movs	r3, #15
 801665e:	18fb      	adds	r3, r7, r3
 8016660:	7819      	ldrb	r1, [r3, #0]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	0018      	movs	r0, r3
 8016666:	f7ff f9a6 	bl	80159b6 <HAL_I2C_AddrCallback>
}
 801666a:	e007      	b.n	801667c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	2208      	movs	r2, #8
 8016672:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2240      	movs	r2, #64	@ 0x40
 8016678:	2100      	movs	r1, #0
 801667a:	5499      	strb	r1, [r3, r2]
}
 801667c:	46c0      	nop			@ (mov r8, r8)
 801667e:	46bd      	mov	sp, r7
 8016680:	b004      	add	sp, #16
 8016682:	bdb0      	pop	{r4, r5, r7, pc}

08016684 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2242      	movs	r2, #66	@ 0x42
 8016690:	2100      	movs	r1, #0
 8016692:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2241      	movs	r2, #65	@ 0x41
 8016698:	5c9b      	ldrb	r3, [r3, r2]
 801669a:	b2db      	uxtb	r3, r3
 801669c:	2b21      	cmp	r3, #33	@ 0x21
 801669e:	d117      	bne.n	80166d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2241      	movs	r2, #65	@ 0x41
 80166a4:	2120      	movs	r1, #32
 80166a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2211      	movs	r2, #17
 80166ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2200      	movs	r2, #0
 80166b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2101      	movs	r1, #1
 80166b8:	0018      	movs	r0, r3
 80166ba:	f001 f80f 	bl	80176dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	2240      	movs	r2, #64	@ 0x40
 80166c2:	2100      	movs	r1, #0
 80166c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	0018      	movs	r0, r3
 80166ca:	f7ff f954 	bl	8015976 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80166ce:	e016      	b.n	80166fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2241      	movs	r2, #65	@ 0x41
 80166d4:	2120      	movs	r1, #32
 80166d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2212      	movs	r2, #18
 80166dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2200      	movs	r2, #0
 80166e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2102      	movs	r1, #2
 80166e8:	0018      	movs	r0, r3
 80166ea:	f000 fff7 	bl	80176dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2240      	movs	r2, #64	@ 0x40
 80166f2:	2100      	movs	r1, #0
 80166f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	0018      	movs	r0, r3
 80166fa:	f7ff f944 	bl	8015986 <HAL_I2C_MasterRxCpltCallback>
}
 80166fe:	46c0      	nop			@ (mov r8, r8)
 8016700:	46bd      	mov	sp, r7
 8016702:	b002      	add	sp, #8
 8016704:	bd80      	pop	{r7, pc}
	...

08016708 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2242      	movs	r2, #66	@ 0x42
 801671c:	2100      	movs	r1, #0
 801671e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	2380      	movs	r3, #128	@ 0x80
 8016724:	01db      	lsls	r3, r3, #7
 8016726:	4013      	ands	r3, r2
 8016728:	d008      	beq.n	801673c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	4924      	ldr	r1, [pc, #144]	@ (80167c8 <I2C_ITSlaveSeqCplt+0xc0>)
 8016736:	400a      	ands	r2, r1
 8016738:	601a      	str	r2, [r3, #0]
 801673a:	e00c      	b.n	8016756 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801673c:	68fa      	ldr	r2, [r7, #12]
 801673e:	2380      	movs	r3, #128	@ 0x80
 8016740:	021b      	lsls	r3, r3, #8
 8016742:	4013      	ands	r3, r2
 8016744:	d007      	beq.n	8016756 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	491e      	ldr	r1, [pc, #120]	@ (80167cc <I2C_ITSlaveSeqCplt+0xc4>)
 8016752:	400a      	ands	r2, r1
 8016754:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2241      	movs	r2, #65	@ 0x41
 801675a:	5c9b      	ldrb	r3, [r3, r2]
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b29      	cmp	r3, #41	@ 0x29
 8016760:	d114      	bne.n	801678c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2241      	movs	r2, #65	@ 0x41
 8016766:	2128      	movs	r1, #40	@ 0x28
 8016768:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2221      	movs	r2, #33	@ 0x21
 801676e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2101      	movs	r1, #1
 8016774:	0018      	movs	r0, r3
 8016776:	f000 ffb1 	bl	80176dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2240      	movs	r2, #64	@ 0x40
 801677e:	2100      	movs	r1, #0
 8016780:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	0018      	movs	r0, r3
 8016786:	f7ff f906 	bl	8015996 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801678a:	e019      	b.n	80167c0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2241      	movs	r2, #65	@ 0x41
 8016790:	5c9b      	ldrb	r3, [r3, r2]
 8016792:	b2db      	uxtb	r3, r3
 8016794:	2b2a      	cmp	r3, #42	@ 0x2a
 8016796:	d113      	bne.n	80167c0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2241      	movs	r2, #65	@ 0x41
 801679c:	2128      	movs	r1, #40	@ 0x28
 801679e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2222      	movs	r2, #34	@ 0x22
 80167a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2102      	movs	r1, #2
 80167aa:	0018      	movs	r0, r3
 80167ac:	f000 ff96 	bl	80176dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2240      	movs	r2, #64	@ 0x40
 80167b4:	2100      	movs	r1, #0
 80167b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	0018      	movs	r0, r3
 80167bc:	f7ff f8f3 	bl	80159a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80167c0:	46c0      	nop			@ (mov r8, r8)
 80167c2:	46bd      	mov	sp, r7
 80167c4:	b004      	add	sp, #16
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	ffffbfff 	.word	0xffffbfff
 80167cc:	ffff7fff 	.word	0xffff7fff

080167d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b086      	sub	sp, #24
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2220      	movs	r2, #32
 80167e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2241      	movs	r2, #65	@ 0x41
 80167ea:	5c9b      	ldrb	r3, [r3, r2]
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	2b21      	cmp	r3, #33	@ 0x21
 80167f0:	d108      	bne.n	8016804 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2101      	movs	r1, #1
 80167f6:	0018      	movs	r0, r3
 80167f8:	f000 ff70 	bl	80176dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2211      	movs	r2, #17
 8016800:	631a      	str	r2, [r3, #48]	@ 0x30
 8016802:	e00d      	b.n	8016820 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2241      	movs	r2, #65	@ 0x41
 8016808:	5c9b      	ldrb	r3, [r3, r2]
 801680a:	b2db      	uxtb	r3, r3
 801680c:	2b22      	cmp	r3, #34	@ 0x22
 801680e:	d107      	bne.n	8016820 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2102      	movs	r1, #2
 8016814:	0018      	movs	r0, r3
 8016816:	f000 ff61 	bl	80176dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2212      	movs	r2, #18
 801681e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	685a      	ldr	r2, [r3, #4]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	494e      	ldr	r1, [pc, #312]	@ (8016964 <I2C_ITMasterCplt+0x194>)
 801682c:	400a      	ands	r2, r1
 801682e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2200      	movs	r2, #0
 8016834:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	4a4b      	ldr	r2, [pc, #300]	@ (8016968 <I2C_ITMasterCplt+0x198>)
 801683a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	2210      	movs	r2, #16
 8016840:	4013      	ands	r3, r2
 8016842:	d009      	beq.n	8016858 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	2210      	movs	r2, #16
 801684a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016850:	2204      	movs	r2, #4
 8016852:	431a      	orrs	r2, r3
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2241      	movs	r2, #65	@ 0x41
 801685c:	5c9b      	ldrb	r3, [r3, r2]
 801685e:	b2db      	uxtb	r3, r3
 8016860:	2b60      	cmp	r3, #96	@ 0x60
 8016862:	d109      	bne.n	8016878 <I2C_ITMasterCplt+0xa8>
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	2204      	movs	r2, #4
 8016868:	4013      	ands	r3, r2
 801686a:	d005      	beq.n	8016878 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016872:	b2db      	uxtb	r3, r3
 8016874:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8016876:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	0018      	movs	r0, r3
 801687c:	f000 fb19 	bl	8016eb2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016884:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2241      	movs	r2, #65	@ 0x41
 801688a:	5c9b      	ldrb	r3, [r3, r2]
 801688c:	b2db      	uxtb	r3, r3
 801688e:	2b60      	cmp	r3, #96	@ 0x60
 8016890:	d002      	beq.n	8016898 <I2C_ITMasterCplt+0xc8>
 8016892:	693b      	ldr	r3, [r7, #16]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d007      	beq.n	80168a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	0011      	movs	r1, r2
 80168a0:	0018      	movs	r0, r3
 80168a2:	f000 f9db 	bl	8016c5c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80168a6:	e058      	b.n	801695a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2241      	movs	r2, #65	@ 0x41
 80168ac:	5c9b      	ldrb	r3, [r3, r2]
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	2b21      	cmp	r3, #33	@ 0x21
 80168b2:	d126      	bne.n	8016902 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2241      	movs	r2, #65	@ 0x41
 80168b8:	2120      	movs	r1, #32
 80168ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2200      	movs	r2, #0
 80168c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2242      	movs	r2, #66	@ 0x42
 80168c6:	5c9b      	ldrb	r3, [r3, r2]
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	2b40      	cmp	r3, #64	@ 0x40
 80168cc:	d10c      	bne.n	80168e8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2242      	movs	r2, #66	@ 0x42
 80168d2:	2100      	movs	r1, #0
 80168d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	2240      	movs	r2, #64	@ 0x40
 80168da:	2100      	movs	r1, #0
 80168dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	0018      	movs	r0, r3
 80168e2:	f7ff f880 	bl	80159e6 <HAL_I2C_MemTxCpltCallback>
}
 80168e6:	e038      	b.n	801695a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2242      	movs	r2, #66	@ 0x42
 80168ec:	2100      	movs	r1, #0
 80168ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2240      	movs	r2, #64	@ 0x40
 80168f4:	2100      	movs	r1, #0
 80168f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	0018      	movs	r0, r3
 80168fc:	f7ff f83b 	bl	8015976 <HAL_I2C_MasterTxCpltCallback>
}
 8016900:	e02b      	b.n	801695a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2241      	movs	r2, #65	@ 0x41
 8016906:	5c9b      	ldrb	r3, [r3, r2]
 8016908:	b2db      	uxtb	r3, r3
 801690a:	2b22      	cmp	r3, #34	@ 0x22
 801690c:	d125      	bne.n	801695a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2241      	movs	r2, #65	@ 0x41
 8016912:	2120      	movs	r1, #32
 8016914:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	2200      	movs	r2, #0
 801691a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2242      	movs	r2, #66	@ 0x42
 8016920:	5c9b      	ldrb	r3, [r3, r2]
 8016922:	b2db      	uxtb	r3, r3
 8016924:	2b40      	cmp	r3, #64	@ 0x40
 8016926:	d10c      	bne.n	8016942 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2242      	movs	r2, #66	@ 0x42
 801692c:	2100      	movs	r1, #0
 801692e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2240      	movs	r2, #64	@ 0x40
 8016934:	2100      	movs	r1, #0
 8016936:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	0018      	movs	r0, r3
 801693c:	f7ff f85b 	bl	80159f6 <HAL_I2C_MemRxCpltCallback>
}
 8016940:	e00b      	b.n	801695a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2242      	movs	r2, #66	@ 0x42
 8016946:	2100      	movs	r1, #0
 8016948:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2240      	movs	r2, #64	@ 0x40
 801694e:	2100      	movs	r1, #0
 8016950:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	0018      	movs	r0, r3
 8016956:	f7ff f816 	bl	8015986 <HAL_I2C_MasterRxCpltCallback>
}
 801695a:	46c0      	nop			@ (mov r8, r8)
 801695c:	46bd      	mov	sp, r7
 801695e:	b006      	add	sp, #24
 8016960:	bd80      	pop	{r7, pc}
 8016962:	46c0      	nop			@ (mov r8, r8)
 8016964:	fe00e800 	.word	0xfe00e800
 8016968:	ffff0000 	.word	0xffff0000

0801696c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016982:	200f      	movs	r0, #15
 8016984:	183b      	adds	r3, r7, r0
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	2141      	movs	r1, #65	@ 0x41
 801698a:	5c52      	ldrb	r2, [r2, r1]
 801698c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	2220      	movs	r2, #32
 8016994:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016996:	183b      	adds	r3, r7, r0
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b21      	cmp	r3, #33	@ 0x21
 801699c:	d003      	beq.n	80169a6 <I2C_ITSlaveCplt+0x3a>
 801699e:	183b      	adds	r3, r7, r0
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	2b29      	cmp	r3, #41	@ 0x29
 80169a4:	d109      	bne.n	80169ba <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80169a6:	4a7b      	ldr	r2, [pc, #492]	@ (8016b94 <I2C_ITSlaveCplt+0x228>)
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	0011      	movs	r1, r2
 80169ac:	0018      	movs	r0, r3
 80169ae:	f000 fe95 	bl	80176dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2221      	movs	r2, #33	@ 0x21
 80169b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80169b8:	e011      	b.n	80169de <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80169ba:	220f      	movs	r2, #15
 80169bc:	18bb      	adds	r3, r7, r2
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	2b22      	cmp	r3, #34	@ 0x22
 80169c2:	d003      	beq.n	80169cc <I2C_ITSlaveCplt+0x60>
 80169c4:	18bb      	adds	r3, r7, r2
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80169ca:	d108      	bne.n	80169de <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80169cc:	4a72      	ldr	r2, [pc, #456]	@ (8016b98 <I2C_ITSlaveCplt+0x22c>)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	0011      	movs	r1, r2
 80169d2:	0018      	movs	r0, r3
 80169d4:	f000 fe82 	bl	80176dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2222      	movs	r2, #34	@ 0x22
 80169dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	685a      	ldr	r2, [r3, #4]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	2180      	movs	r1, #128	@ 0x80
 80169ea:	0209      	lsls	r1, r1, #8
 80169ec:	430a      	orrs	r2, r1
 80169ee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	685a      	ldr	r2, [r3, #4]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	4968      	ldr	r1, [pc, #416]	@ (8016b9c <I2C_ITSlaveCplt+0x230>)
 80169fc:	400a      	ands	r2, r1
 80169fe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	0018      	movs	r0, r3
 8016a04:	f000 fa55 	bl	8016eb2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016a08:	693a      	ldr	r2, [r7, #16]
 8016a0a:	2380      	movs	r3, #128	@ 0x80
 8016a0c:	01db      	lsls	r3, r3, #7
 8016a0e:	4013      	ands	r3, r2
 8016a10:	d013      	beq.n	8016a3a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4960      	ldr	r1, [pc, #384]	@ (8016ba0 <I2C_ITSlaveCplt+0x234>)
 8016a1e:	400a      	ands	r2, r1
 8016a20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d01f      	beq.n	8016a6a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	685b      	ldr	r3, [r3, #4]
 8016a32:	b29a      	uxth	r2, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016a38:	e017      	b.n	8016a6a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8016a3a:	693a      	ldr	r2, [r7, #16]
 8016a3c:	2380      	movs	r3, #128	@ 0x80
 8016a3e:	021b      	lsls	r3, r3, #8
 8016a40:	4013      	ands	r3, r2
 8016a42:	d012      	beq.n	8016a6a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	4955      	ldr	r1, [pc, #340]	@ (8016ba4 <I2C_ITSlaveCplt+0x238>)
 8016a50:	400a      	ands	r2, r1
 8016a52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d006      	beq.n	8016a6a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	b29a      	uxth	r2, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	2204      	movs	r2, #4
 8016a6e:	4013      	ands	r3, r2
 8016a70:	d020      	beq.n	8016ab4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	2204      	movs	r2, #4
 8016a76:	4393      	bics	r3, r2
 8016a78:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a84:	b2d2      	uxtb	r2, r2
 8016a86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a8c:	1c5a      	adds	r2, r3, #1
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d00c      	beq.n	8016ab4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a9e:	3b01      	subs	r3, #1
 8016aa0:	b29a      	uxth	r2, r3
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	3b01      	subs	r3, #1
 8016aae:	b29a      	uxth	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d005      	beq.n	8016aca <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ac2:	2204      	movs	r2, #4
 8016ac4:	431a      	orrs	r2, r3
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2242      	movs	r2, #66	@ 0x42
 8016ace:	2100      	movs	r1, #0
 8016ad0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d013      	beq.n	8016b08 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	0011      	movs	r1, r2
 8016ae8:	0018      	movs	r0, r3
 8016aea:	f000 f8b7 	bl	8016c5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2241      	movs	r2, #65	@ 0x41
 8016af2:	5c9b      	ldrb	r3, [r3, r2]
 8016af4:	b2db      	uxtb	r3, r3
 8016af6:	2b28      	cmp	r3, #40	@ 0x28
 8016af8:	d147      	bne.n	8016b8a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8016afa:	697a      	ldr	r2, [r7, #20]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	0011      	movs	r1, r2
 8016b00:	0018      	movs	r0, r3
 8016b02:	f000 f853 	bl	8016bac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016b06:	e040      	b.n	8016b8a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b0c:	4a26      	ldr	r2, [pc, #152]	@ (8016ba8 <I2C_ITSlaveCplt+0x23c>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d016      	beq.n	8016b40 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	0018      	movs	r0, r3
 8016b16:	f7ff fdf7 	bl	8016708 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4a22      	ldr	r2, [pc, #136]	@ (8016ba8 <I2C_ITSlaveCplt+0x23c>)
 8016b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2241      	movs	r2, #65	@ 0x41
 8016b24:	2120      	movs	r1, #32
 8016b26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2240      	movs	r2, #64	@ 0x40
 8016b32:	2100      	movs	r1, #0
 8016b34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	0018      	movs	r0, r3
 8016b3a:	f7fe ff4c 	bl	80159d6 <HAL_I2C_ListenCpltCallback>
}
 8016b3e:	e024      	b.n	8016b8a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2241      	movs	r2, #65	@ 0x41
 8016b44:	5c9b      	ldrb	r3, [r3, r2]
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	2b22      	cmp	r3, #34	@ 0x22
 8016b4a:	d10f      	bne.n	8016b6c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2241      	movs	r2, #65	@ 0x41
 8016b50:	2120      	movs	r1, #32
 8016b52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2200      	movs	r2, #0
 8016b58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2240      	movs	r2, #64	@ 0x40
 8016b5e:	2100      	movs	r1, #0
 8016b60:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	0018      	movs	r0, r3
 8016b66:	f7fe ff1e 	bl	80159a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8016b6a:	e00e      	b.n	8016b8a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2241      	movs	r2, #65	@ 0x41
 8016b70:	2120      	movs	r1, #32
 8016b72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2200      	movs	r2, #0
 8016b78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2240      	movs	r2, #64	@ 0x40
 8016b7e:	2100      	movs	r1, #0
 8016b80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	0018      	movs	r0, r3
 8016b86:	f7fe ff06 	bl	8015996 <HAL_I2C_SlaveTxCpltCallback>
}
 8016b8a:	46c0      	nop			@ (mov r8, r8)
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	b006      	add	sp, #24
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	46c0      	nop			@ (mov r8, r8)
 8016b94:	00008001 	.word	0x00008001
 8016b98:	00008002 	.word	0x00008002
 8016b9c:	fe00e800 	.word	0xfe00e800
 8016ba0:	ffffbfff 	.word	0xffffbfff
 8016ba4:	ffff7fff 	.word	0xffff7fff
 8016ba8:	ffff0000 	.word	0xffff0000

08016bac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	4a26      	ldr	r2, [pc, #152]	@ (8016c54 <I2C_ITListenCplt+0xa8>)
 8016bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	2241      	movs	r2, #65	@ 0x41
 8016bc6:	2120      	movs	r1, #32
 8016bc8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2242      	movs	r2, #66	@ 0x42
 8016bce:	2100      	movs	r1, #0
 8016bd0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	2204      	movs	r2, #4
 8016bdc:	4013      	ands	r3, r2
 8016bde:	d022      	beq.n	8016c26 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bea:	b2d2      	uxtb	r2, r2
 8016bec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bf2:	1c5a      	adds	r2, r3, #1
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d012      	beq.n	8016c26 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c04:	3b01      	subs	r3, #1
 8016c06:	b29a      	uxth	r2, r3
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c10:	b29b      	uxth	r3, r3
 8016c12:	3b01      	subs	r3, #1
 8016c14:	b29a      	uxth	r2, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c1e:	2204      	movs	r2, #4
 8016c20:	431a      	orrs	r2, r3
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016c26:	4a0c      	ldr	r2, [pc, #48]	@ (8016c58 <I2C_ITListenCplt+0xac>)
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	0011      	movs	r1, r2
 8016c2c:	0018      	movs	r0, r3
 8016c2e:	f000 fd55 	bl	80176dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2210      	movs	r2, #16
 8016c38:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2240      	movs	r2, #64	@ 0x40
 8016c3e:	2100      	movs	r1, #0
 8016c40:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	0018      	movs	r0, r3
 8016c46:	f7fe fec6 	bl	80159d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8016c4a:	46c0      	nop			@ (mov r8, r8)
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	b002      	add	sp, #8
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	46c0      	nop			@ (mov r8, r8)
 8016c54:	ffff0000 	.word	0xffff0000
 8016c58:	00008003 	.word	0x00008003

08016c5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b084      	sub	sp, #16
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016c66:	200f      	movs	r0, #15
 8016c68:	183b      	adds	r3, r7, r0
 8016c6a:	687a      	ldr	r2, [r7, #4]
 8016c6c:	2141      	movs	r1, #65	@ 0x41
 8016c6e:	5c52      	ldrb	r2, [r2, r1]
 8016c70:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2242      	movs	r2, #66	@ 0x42
 8016c76:	2100      	movs	r1, #0
 8016c78:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	4a72      	ldr	r2, [pc, #456]	@ (8016e48 <I2C_ITError+0x1ec>)
 8016c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2200      	movs	r2, #0
 8016c84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	431a      	orrs	r2, r3
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8016c92:	183b      	adds	r3, r7, r0
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	2b28      	cmp	r3, #40	@ 0x28
 8016c98:	d007      	beq.n	8016caa <I2C_ITError+0x4e>
 8016c9a:	183b      	adds	r3, r7, r0
 8016c9c:	781b      	ldrb	r3, [r3, #0]
 8016c9e:	2b29      	cmp	r3, #41	@ 0x29
 8016ca0:	d003      	beq.n	8016caa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8016ca2:	183b      	adds	r3, r7, r0
 8016ca4:	781b      	ldrb	r3, [r3, #0]
 8016ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ca8:	d10c      	bne.n	8016cc4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2103      	movs	r1, #3
 8016cae:	0018      	movs	r0, r3
 8016cb0:	f000 fd14 	bl	80176dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2241      	movs	r2, #65	@ 0x41
 8016cb8:	2128      	movs	r1, #40	@ 0x28
 8016cba:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	4a63      	ldr	r2, [pc, #396]	@ (8016e4c <I2C_ITError+0x1f0>)
 8016cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8016cc2:	e032      	b.n	8016d2a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016cc4:	4a62      	ldr	r2, [pc, #392]	@ (8016e50 <I2C_ITError+0x1f4>)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	0011      	movs	r1, r2
 8016cca:	0018      	movs	r0, r3
 8016ccc:	f000 fd06 	bl	80176dc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	0018      	movs	r0, r3
 8016cd4:	f000 f8ed 	bl	8016eb2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2241      	movs	r2, #65	@ 0x41
 8016cdc:	5c9b      	ldrb	r3, [r3, r2]
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	2b60      	cmp	r3, #96	@ 0x60
 8016ce2:	d01f      	beq.n	8016d24 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2241      	movs	r2, #65	@ 0x41
 8016ce8:	2120      	movs	r1, #32
 8016cea:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	699b      	ldr	r3, [r3, #24]
 8016cf2:	2220      	movs	r2, #32
 8016cf4:	4013      	ands	r3, r2
 8016cf6:	2b20      	cmp	r3, #32
 8016cf8:	d114      	bne.n	8016d24 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	699b      	ldr	r3, [r3, #24]
 8016d00:	2210      	movs	r2, #16
 8016d02:	4013      	ands	r3, r2
 8016d04:	2b10      	cmp	r3, #16
 8016d06:	d109      	bne.n	8016d1c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	2210      	movs	r2, #16
 8016d0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d14:	2204      	movs	r2, #4
 8016d16:	431a      	orrs	r2, r3
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2220      	movs	r2, #32
 8016d22:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d03b      	beq.n	8016db0 <I2C_ITError+0x154>
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	2b11      	cmp	r3, #17
 8016d3c:	d002      	beq.n	8016d44 <I2C_ITError+0xe8>
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	2b21      	cmp	r3, #33	@ 0x21
 8016d42:	d135      	bne.n	8016db0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	2380      	movs	r3, #128	@ 0x80
 8016d4c:	01db      	lsls	r3, r3, #7
 8016d4e:	401a      	ands	r2, r3
 8016d50:	2380      	movs	r3, #128	@ 0x80
 8016d52:	01db      	lsls	r3, r3, #7
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d107      	bne.n	8016d68 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	493c      	ldr	r1, [pc, #240]	@ (8016e54 <I2C_ITError+0x1f8>)
 8016d64:	400a      	ands	r2, r1
 8016d66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d6c:	0018      	movs	r0, r3
 8016d6e:	f7fd faca 	bl	8014306 <HAL_DMA_GetState>
 8016d72:	0003      	movs	r3, r0
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d016      	beq.n	8016da6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d7c:	4a36      	ldr	r2, [pc, #216]	@ (8016e58 <I2C_ITError+0x1fc>)
 8016d7e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2240      	movs	r2, #64	@ 0x40
 8016d84:	2100      	movs	r1, #0
 8016d86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d8c:	0018      	movs	r0, r3
 8016d8e:	f7fd f9c5 	bl	801411c <HAL_DMA_Abort_IT>
 8016d92:	1e03      	subs	r3, r0, #0
 8016d94:	d051      	beq.n	8016e3a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016da0:	0018      	movs	r0, r3
 8016da2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016da4:	e049      	b.n	8016e3a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	0018      	movs	r0, r3
 8016daa:	f000 f859 	bl	8016e60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016dae:	e044      	b.n	8016e3a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d03b      	beq.n	8016e30 <I2C_ITError+0x1d4>
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	2b12      	cmp	r3, #18
 8016dbc:	d002      	beq.n	8016dc4 <I2C_ITError+0x168>
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	2b22      	cmp	r3, #34	@ 0x22
 8016dc2:	d135      	bne.n	8016e30 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	681a      	ldr	r2, [r3, #0]
 8016dca:	2380      	movs	r3, #128	@ 0x80
 8016dcc:	021b      	lsls	r3, r3, #8
 8016dce:	401a      	ands	r2, r3
 8016dd0:	2380      	movs	r3, #128	@ 0x80
 8016dd2:	021b      	lsls	r3, r3, #8
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d107      	bne.n	8016de8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	491e      	ldr	r1, [pc, #120]	@ (8016e5c <I2C_ITError+0x200>)
 8016de4:	400a      	ands	r2, r1
 8016de6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dec:	0018      	movs	r0, r3
 8016dee:	f7fd fa8a 	bl	8014306 <HAL_DMA_GetState>
 8016df2:	0003      	movs	r3, r0
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	d016      	beq.n	8016e26 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dfc:	4a16      	ldr	r2, [pc, #88]	@ (8016e58 <I2C_ITError+0x1fc>)
 8016dfe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2240      	movs	r2, #64	@ 0x40
 8016e04:	2100      	movs	r1, #0
 8016e06:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e0c:	0018      	movs	r0, r3
 8016e0e:	f7fd f985 	bl	801411c <HAL_DMA_Abort_IT>
 8016e12:	1e03      	subs	r3, r0, #0
 8016e14:	d013      	beq.n	8016e3e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e20:	0018      	movs	r0, r3
 8016e22:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016e24:	e00b      	b.n	8016e3e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	0018      	movs	r0, r3
 8016e2a:	f000 f819 	bl	8016e60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016e2e:	e006      	b.n	8016e3e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	0018      	movs	r0, r3
 8016e34:	f000 f814 	bl	8016e60 <I2C_TreatErrorCallback>
  }
}
 8016e38:	e002      	b.n	8016e40 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016e3a:	46c0      	nop			@ (mov r8, r8)
 8016e3c:	e000      	b.n	8016e40 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016e3e:	46c0      	nop			@ (mov r8, r8)
}
 8016e40:	46c0      	nop			@ (mov r8, r8)
 8016e42:	46bd      	mov	sp, r7
 8016e44:	b004      	add	sp, #16
 8016e46:	bd80      	pop	{r7, pc}
 8016e48:	ffff0000 	.word	0xffff0000
 8016e4c:	08015c7d 	.word	0x08015c7d
 8016e50:	00008003 	.word	0x00008003
 8016e54:	ffffbfff 	.word	0xffffbfff
 8016e58:	0801706b 	.word	0x0801706b
 8016e5c:	ffff7fff 	.word	0xffff7fff

08016e60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b082      	sub	sp, #8
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2241      	movs	r2, #65	@ 0x41
 8016e6c:	5c9b      	ldrb	r3, [r3, r2]
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	2b60      	cmp	r3, #96	@ 0x60
 8016e72:	d10f      	bne.n	8016e94 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2241      	movs	r2, #65	@ 0x41
 8016e78:	2120      	movs	r1, #32
 8016e7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2200      	movs	r2, #0
 8016e80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	2240      	movs	r2, #64	@ 0x40
 8016e86:	2100      	movs	r1, #0
 8016e88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	0018      	movs	r0, r3
 8016e8e:	f7fe fdc2 	bl	8015a16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016e92:	e00a      	b.n	8016eaa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2200      	movs	r2, #0
 8016e98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2240      	movs	r2, #64	@ 0x40
 8016e9e:	2100      	movs	r1, #0
 8016ea0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	0018      	movs	r0, r3
 8016ea6:	f7fe fdae 	bl	8015a06 <HAL_I2C_ErrorCallback>
}
 8016eaa:	46c0      	nop			@ (mov r8, r8)
 8016eac:	46bd      	mov	sp, r7
 8016eae:	b002      	add	sp, #8
 8016eb0:	bd80      	pop	{r7, pc}

08016eb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016eb2:	b580      	push	{r7, lr}
 8016eb4:	b082      	sub	sp, #8
 8016eb6:	af00      	add	r7, sp, #0
 8016eb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	699b      	ldr	r3, [r3, #24]
 8016ec0:	2202      	movs	r2, #2
 8016ec2:	4013      	ands	r3, r2
 8016ec4:	2b02      	cmp	r3, #2
 8016ec6:	d103      	bne.n	8016ed0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	699b      	ldr	r3, [r3, #24]
 8016ed6:	2201      	movs	r2, #1
 8016ed8:	4013      	ands	r3, r2
 8016eda:	2b01      	cmp	r3, #1
 8016edc:	d007      	beq.n	8016eee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	699a      	ldr	r2, [r3, #24]
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	2101      	movs	r1, #1
 8016eea:	430a      	orrs	r2, r1
 8016eec:	619a      	str	r2, [r3, #24]
  }
}
 8016eee:	46c0      	nop			@ (mov r8, r8)
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	b002      	add	sp, #8
 8016ef4:	bd80      	pop	{r7, pc}
	...

08016ef8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f04:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	681a      	ldr	r2, [r3, #0]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	4920      	ldr	r1, [pc, #128]	@ (8016f94 <I2C_DMAMasterTransmitCplt+0x9c>)
 8016f12:	400a      	ands	r2, r1
 8016f14:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d105      	bne.n	8016f2c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	2120      	movs	r1, #32
 8016f24:	0018      	movs	r0, r3
 8016f26:	f000 fb4b 	bl	80175c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8016f2a:	e02e      	b.n	8016f8a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f30:	68fa      	ldr	r2, [r7, #12]
 8016f32:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016f34:	189a      	adds	r2, r3, r2
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f3e:	b29b      	uxth	r3, r3
 8016f40:	2bff      	cmp	r3, #255	@ 0xff
 8016f42:	d903      	bls.n	8016f4c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	22ff      	movs	r2, #255	@ 0xff
 8016f48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016f4a:	e004      	b.n	8016f56 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f50:	b29a      	uxth	r2, r3
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f5e:	0019      	movs	r1, r3
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	3328      	adds	r3, #40	@ 0x28
 8016f66:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016f6c:	f7fd f830 	bl	8013fd0 <HAL_DMA_Start_IT>
 8016f70:	1e03      	subs	r3, r0, #0
 8016f72:	d005      	beq.n	8016f80 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	2110      	movs	r1, #16
 8016f78:	0018      	movs	r0, r3
 8016f7a:	f7ff fe6f 	bl	8016c5c <I2C_ITError>
}
 8016f7e:	e004      	b.n	8016f8a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	2140      	movs	r1, #64	@ 0x40
 8016f84:	0018      	movs	r0, r3
 8016f86:	f000 fb1b 	bl	80175c0 <I2C_Enable_IRQ>
}
 8016f8a:	46c0      	nop			@ (mov r8, r8)
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	b004      	add	sp, #16
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	46c0      	nop			@ (mov r8, r8)
 8016f94:	ffffbfff 	.word	0xffffbfff

08016f98 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fa4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	681a      	ldr	r2, [r3, #0]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	4920      	ldr	r1, [pc, #128]	@ (8017034 <I2C_DMAMasterReceiveCplt+0x9c>)
 8016fb2:	400a      	ands	r2, r1
 8016fb4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d105      	bne.n	8016fcc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	2120      	movs	r1, #32
 8016fc4:	0018      	movs	r0, r3
 8016fc6:	f000 fafb 	bl	80175c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8016fca:	e02e      	b.n	801702a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fd0:	68fa      	ldr	r2, [r7, #12]
 8016fd2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016fd4:	189a      	adds	r2, r3, r2
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	2bff      	cmp	r3, #255	@ 0xff
 8016fe2:	d903      	bls.n	8016fec <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	22ff      	movs	r2, #255	@ 0xff
 8016fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016fea:	e004      	b.n	8016ff6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ff0:	b29a      	uxth	r2, r3
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	3324      	adds	r3, #36	@ 0x24
 8017000:	0019      	movs	r1, r3
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017006:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801700c:	f7fc ffe0 	bl	8013fd0 <HAL_DMA_Start_IT>
 8017010:	1e03      	subs	r3, r0, #0
 8017012:	d005      	beq.n	8017020 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2110      	movs	r1, #16
 8017018:	0018      	movs	r0, r3
 801701a:	f7ff fe1f 	bl	8016c5c <I2C_ITError>
}
 801701e:	e004      	b.n	801702a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2140      	movs	r1, #64	@ 0x40
 8017024:	0018      	movs	r0, r3
 8017026:	f000 facb 	bl	80175c0 <I2C_Enable_IRQ>
}
 801702a:	46c0      	nop			@ (mov r8, r8)
 801702c:	46bd      	mov	sp, r7
 801702e:	b004      	add	sp, #16
 8017030:	bd80      	pop	{r7, pc}
 8017032:	46c0      	nop			@ (mov r8, r8)
 8017034:	ffff7fff 	.word	0xffff7fff

08017038 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017044:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	685a      	ldr	r2, [r3, #4]
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	2180      	movs	r1, #128	@ 0x80
 8017052:	0209      	lsls	r1, r1, #8
 8017054:	430a      	orrs	r2, r1
 8017056:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2110      	movs	r1, #16
 801705c:	0018      	movs	r0, r3
 801705e:	f7ff fdfd 	bl	8016c5c <I2C_ITError>
}
 8017062:	46c0      	nop			@ (mov r8, r8)
 8017064:	46bd      	mov	sp, r7
 8017066:	b004      	add	sp, #16
 8017068:	bd80      	pop	{r7, pc}

0801706a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801706a:	b580      	push	{r7, lr}
 801706c:	b084      	sub	sp, #16
 801706e:	af00      	add	r7, sp, #0
 8017070:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017076:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801707c:	2b00      	cmp	r3, #0
 801707e:	d003      	beq.n	8017088 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017084:	2200      	movs	r2, #0
 8017086:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801708c:	2b00      	cmp	r3, #0
 801708e:	d003      	beq.n	8017098 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017094:	2200      	movs	r2, #0
 8017096:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	0018      	movs	r0, r3
 801709c:	f7ff fee0 	bl	8016e60 <I2C_TreatErrorCallback>
}
 80170a0:	46c0      	nop			@ (mov r8, r8)
 80170a2:	46bd      	mov	sp, r7
 80170a4:	b004      	add	sp, #16
 80170a6:	bd80      	pop	{r7, pc}

080170a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	603b      	str	r3, [r7, #0]
 80170b4:	1dfb      	adds	r3, r7, #7
 80170b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80170b8:	e030      	b.n	801711c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	3301      	adds	r3, #1
 80170be:	d02d      	beq.n	801711c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80170c0:	f7fc fa34 	bl	801352c <HAL_GetTick>
 80170c4:	0002      	movs	r2, r0
 80170c6:	69bb      	ldr	r3, [r7, #24]
 80170c8:	1ad3      	subs	r3, r2, r3
 80170ca:	683a      	ldr	r2, [r7, #0]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d302      	bcc.n	80170d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80170d0:	683b      	ldr	r3, [r7, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d122      	bne.n	801711c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	699b      	ldr	r3, [r3, #24]
 80170dc:	68ba      	ldr	r2, [r7, #8]
 80170de:	4013      	ands	r3, r2
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	1ad3      	subs	r3, r2, r3
 80170e4:	425a      	negs	r2, r3
 80170e6:	4153      	adcs	r3, r2
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	001a      	movs	r2, r3
 80170ec:	1dfb      	adds	r3, r7, #7
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d113      	bne.n	801711c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170f8:	2220      	movs	r2, #32
 80170fa:	431a      	orrs	r2, r3
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2241      	movs	r2, #65	@ 0x41
 8017104:	2120      	movs	r1, #32
 8017106:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	2242      	movs	r2, #66	@ 0x42
 801710c:	2100      	movs	r1, #0
 801710e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2240      	movs	r2, #64	@ 0x40
 8017114:	2100      	movs	r1, #0
 8017116:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8017118:	2301      	movs	r3, #1
 801711a:	e00f      	b.n	801713c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	699b      	ldr	r3, [r3, #24]
 8017122:	68ba      	ldr	r2, [r7, #8]
 8017124:	4013      	ands	r3, r2
 8017126:	68ba      	ldr	r2, [r7, #8]
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	425a      	negs	r2, r3
 801712c:	4153      	adcs	r3, r2
 801712e:	b2db      	uxtb	r3, r3
 8017130:	001a      	movs	r2, r3
 8017132:	1dfb      	adds	r3, r7, #7
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	429a      	cmp	r2, r3
 8017138:	d0bf      	beq.n	80170ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801713a:	2300      	movs	r3, #0
}
 801713c:	0018      	movs	r0, r3
 801713e:	46bd      	mov	sp, r7
 8017140:	b004      	add	sp, #16
 8017142:	bd80      	pop	{r7, pc}

08017144 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b084      	sub	sp, #16
 8017148:	af00      	add	r7, sp, #0
 801714a:	60f8      	str	r0, [r7, #12]
 801714c:	60b9      	str	r1, [r7, #8]
 801714e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017150:	e032      	b.n	80171b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	68b9      	ldr	r1, [r7, #8]
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	0018      	movs	r0, r3
 801715a:	f000 f8ff 	bl	801735c <I2C_IsErrorOccurred>
 801715e:	1e03      	subs	r3, r0, #0
 8017160:	d001      	beq.n	8017166 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017162:	2301      	movs	r3, #1
 8017164:	e030      	b.n	80171c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	3301      	adds	r3, #1
 801716a:	d025      	beq.n	80171b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801716c:	f7fc f9de 	bl	801352c <HAL_GetTick>
 8017170:	0002      	movs	r2, r0
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	1ad3      	subs	r3, r2, r3
 8017176:	68ba      	ldr	r2, [r7, #8]
 8017178:	429a      	cmp	r2, r3
 801717a:	d302      	bcc.n	8017182 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d11a      	bne.n	80171b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	699b      	ldr	r3, [r3, #24]
 8017188:	2202      	movs	r2, #2
 801718a:	4013      	ands	r3, r2
 801718c:	2b02      	cmp	r3, #2
 801718e:	d013      	beq.n	80171b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017194:	2220      	movs	r2, #32
 8017196:	431a      	orrs	r2, r3
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	2241      	movs	r2, #65	@ 0x41
 80171a0:	2120      	movs	r1, #32
 80171a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2242      	movs	r2, #66	@ 0x42
 80171a8:	2100      	movs	r1, #0
 80171aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	2240      	movs	r2, #64	@ 0x40
 80171b0:	2100      	movs	r1, #0
 80171b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80171b4:	2301      	movs	r3, #1
 80171b6:	e007      	b.n	80171c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	699b      	ldr	r3, [r3, #24]
 80171be:	2202      	movs	r2, #2
 80171c0:	4013      	ands	r3, r2
 80171c2:	2b02      	cmp	r3, #2
 80171c4:	d1c5      	bne.n	8017152 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80171c6:	2300      	movs	r3, #0
}
 80171c8:	0018      	movs	r0, r3
 80171ca:	46bd      	mov	sp, r7
 80171cc:	b004      	add	sp, #16
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b084      	sub	sp, #16
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80171dc:	e02f      	b.n	801723e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80171de:	687a      	ldr	r2, [r7, #4]
 80171e0:	68b9      	ldr	r1, [r7, #8]
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	0018      	movs	r0, r3
 80171e6:	f000 f8b9 	bl	801735c <I2C_IsErrorOccurred>
 80171ea:	1e03      	subs	r3, r0, #0
 80171ec:	d001      	beq.n	80171f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80171ee:	2301      	movs	r3, #1
 80171f0:	e02d      	b.n	801724e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80171f2:	f7fc f99b 	bl	801352c <HAL_GetTick>
 80171f6:	0002      	movs	r2, r0
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	1ad3      	subs	r3, r2, r3
 80171fc:	68ba      	ldr	r2, [r7, #8]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d302      	bcc.n	8017208 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d11a      	bne.n	801723e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	699b      	ldr	r3, [r3, #24]
 801720e:	2220      	movs	r2, #32
 8017210:	4013      	ands	r3, r2
 8017212:	2b20      	cmp	r3, #32
 8017214:	d013      	beq.n	801723e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801721a:	2220      	movs	r2, #32
 801721c:	431a      	orrs	r2, r3
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	2241      	movs	r2, #65	@ 0x41
 8017226:	2120      	movs	r1, #32
 8017228:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	2242      	movs	r2, #66	@ 0x42
 801722e:	2100      	movs	r1, #0
 8017230:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	2240      	movs	r2, #64	@ 0x40
 8017236:	2100      	movs	r1, #0
 8017238:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801723a:	2301      	movs	r3, #1
 801723c:	e007      	b.n	801724e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	699b      	ldr	r3, [r3, #24]
 8017244:	2220      	movs	r2, #32
 8017246:	4013      	ands	r3, r2
 8017248:	2b20      	cmp	r3, #32
 801724a:	d1c8      	bne.n	80171de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801724c:	2300      	movs	r3, #0
}
 801724e:	0018      	movs	r0, r3
 8017250:	46bd      	mov	sp, r7
 8017252:	b004      	add	sp, #16
 8017254:	bd80      	pop	{r7, pc}
	...

08017258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b084      	sub	sp, #16
 801725c:	af00      	add	r7, sp, #0
 801725e:	60f8      	str	r0, [r7, #12]
 8017260:	60b9      	str	r1, [r7, #8]
 8017262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017264:	e06b      	b.n	801733e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017266:	687a      	ldr	r2, [r7, #4]
 8017268:	68b9      	ldr	r1, [r7, #8]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	0018      	movs	r0, r3
 801726e:	f000 f875 	bl	801735c <I2C_IsErrorOccurred>
 8017272:	1e03      	subs	r3, r0, #0
 8017274:	d001      	beq.n	801727a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017276:	2301      	movs	r3, #1
 8017278:	e069      	b.n	801734e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	699b      	ldr	r3, [r3, #24]
 8017280:	2220      	movs	r2, #32
 8017282:	4013      	ands	r3, r2
 8017284:	2b20      	cmp	r3, #32
 8017286:	d138      	bne.n	80172fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	699b      	ldr	r3, [r3, #24]
 801728e:	2204      	movs	r2, #4
 8017290:	4013      	ands	r3, r2
 8017292:	2b04      	cmp	r3, #4
 8017294:	d105      	bne.n	80172a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801729a:	2b00      	cmp	r3, #0
 801729c:	d001      	beq.n	80172a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801729e:	2300      	movs	r3, #0
 80172a0:	e055      	b.n	801734e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	699b      	ldr	r3, [r3, #24]
 80172a8:	2210      	movs	r2, #16
 80172aa:	4013      	ands	r3, r2
 80172ac:	2b10      	cmp	r3, #16
 80172ae:	d107      	bne.n	80172c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	2210      	movs	r2, #16
 80172b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2204      	movs	r2, #4
 80172bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80172be:	e002      	b.n	80172c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	2200      	movs	r2, #0
 80172c4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	2220      	movs	r2, #32
 80172cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	685a      	ldr	r2, [r3, #4]
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	491f      	ldr	r1, [pc, #124]	@ (8017358 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80172da:	400a      	ands	r2, r1
 80172dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	2241      	movs	r2, #65	@ 0x41
 80172e2:	2120      	movs	r1, #32
 80172e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2242      	movs	r2, #66	@ 0x42
 80172ea:	2100      	movs	r1, #0
 80172ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	2240      	movs	r2, #64	@ 0x40
 80172f2:	2100      	movs	r1, #0
 80172f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80172f6:	2301      	movs	r3, #1
 80172f8:	e029      	b.n	801734e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80172fa:	f7fc f917 	bl	801352c <HAL_GetTick>
 80172fe:	0002      	movs	r2, r0
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	1ad3      	subs	r3, r2, r3
 8017304:	68ba      	ldr	r2, [r7, #8]
 8017306:	429a      	cmp	r2, r3
 8017308:	d302      	bcc.n	8017310 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d116      	bne.n	801733e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	699b      	ldr	r3, [r3, #24]
 8017316:	2204      	movs	r2, #4
 8017318:	4013      	ands	r3, r2
 801731a:	2b04      	cmp	r3, #4
 801731c:	d00f      	beq.n	801733e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017322:	2220      	movs	r2, #32
 8017324:	431a      	orrs	r2, r3
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	2241      	movs	r2, #65	@ 0x41
 801732e:	2120      	movs	r1, #32
 8017330:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	2240      	movs	r2, #64	@ 0x40
 8017336:	2100      	movs	r1, #0
 8017338:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801733a:	2301      	movs	r3, #1
 801733c:	e007      	b.n	801734e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	699b      	ldr	r3, [r3, #24]
 8017344:	2204      	movs	r2, #4
 8017346:	4013      	ands	r3, r2
 8017348:	2b04      	cmp	r3, #4
 801734a:	d18c      	bne.n	8017266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801734c:	2300      	movs	r3, #0
}
 801734e:	0018      	movs	r0, r3
 8017350:	46bd      	mov	sp, r7
 8017352:	b004      	add	sp, #16
 8017354:	bd80      	pop	{r7, pc}
 8017356:	46c0      	nop			@ (mov r8, r8)
 8017358:	fe00e800 	.word	0xfe00e800

0801735c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b08a      	sub	sp, #40	@ 0x28
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017368:	2327      	movs	r3, #39	@ 0x27
 801736a:	18fb      	adds	r3, r7, r3
 801736c:	2200      	movs	r2, #0
 801736e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	699b      	ldr	r3, [r3, #24]
 8017376:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017378:	2300      	movs	r3, #0
 801737a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017380:	69bb      	ldr	r3, [r7, #24]
 8017382:	2210      	movs	r2, #16
 8017384:	4013      	ands	r3, r2
 8017386:	d100      	bne.n	801738a <I2C_IsErrorOccurred+0x2e>
 8017388:	e079      	b.n	801747e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	2210      	movs	r2, #16
 8017390:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017392:	e057      	b.n	8017444 <I2C_IsErrorOccurred+0xe8>
 8017394:	2227      	movs	r2, #39	@ 0x27
 8017396:	18bb      	adds	r3, r7, r2
 8017398:	18ba      	adds	r2, r7, r2
 801739a:	7812      	ldrb	r2, [r2, #0]
 801739c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	3301      	adds	r3, #1
 80173a2:	d04f      	beq.n	8017444 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80173a4:	f7fc f8c2 	bl	801352c <HAL_GetTick>
 80173a8:	0002      	movs	r2, r0
 80173aa:	69fb      	ldr	r3, [r7, #28]
 80173ac:	1ad3      	subs	r3, r2, r3
 80173ae:	68ba      	ldr	r2, [r7, #8]
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d302      	bcc.n	80173ba <I2C_IsErrorOccurred+0x5e>
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d144      	bne.n	8017444 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	685a      	ldr	r2, [r3, #4]
 80173c0:	2380      	movs	r3, #128	@ 0x80
 80173c2:	01db      	lsls	r3, r3, #7
 80173c4:	4013      	ands	r3, r2
 80173c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80173c8:	2013      	movs	r0, #19
 80173ca:	183b      	adds	r3, r7, r0
 80173cc:	68fa      	ldr	r2, [r7, #12]
 80173ce:	2142      	movs	r1, #66	@ 0x42
 80173d0:	5c52      	ldrb	r2, [r2, r1]
 80173d2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	699a      	ldr	r2, [r3, #24]
 80173da:	2380      	movs	r3, #128	@ 0x80
 80173dc:	021b      	lsls	r3, r3, #8
 80173de:	401a      	ands	r2, r3
 80173e0:	2380      	movs	r3, #128	@ 0x80
 80173e2:	021b      	lsls	r3, r3, #8
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d126      	bne.n	8017436 <I2C_IsErrorOccurred+0xda>
 80173e8:	697a      	ldr	r2, [r7, #20]
 80173ea:	2380      	movs	r3, #128	@ 0x80
 80173ec:	01db      	lsls	r3, r3, #7
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d021      	beq.n	8017436 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80173f2:	183b      	adds	r3, r7, r0
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	2b20      	cmp	r3, #32
 80173f8:	d01d      	beq.n	8017436 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	685a      	ldr	r2, [r3, #4]
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	2180      	movs	r1, #128	@ 0x80
 8017406:	01c9      	lsls	r1, r1, #7
 8017408:	430a      	orrs	r2, r1
 801740a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801740c:	f7fc f88e 	bl	801352c <HAL_GetTick>
 8017410:	0003      	movs	r3, r0
 8017412:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017414:	e00f      	b.n	8017436 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017416:	f7fc f889 	bl	801352c <HAL_GetTick>
 801741a:	0002      	movs	r2, r0
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	1ad3      	subs	r3, r2, r3
 8017420:	2b19      	cmp	r3, #25
 8017422:	d908      	bls.n	8017436 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017424:	6a3b      	ldr	r3, [r7, #32]
 8017426:	2220      	movs	r2, #32
 8017428:	4313      	orrs	r3, r2
 801742a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801742c:	2327      	movs	r3, #39	@ 0x27
 801742e:	18fb      	adds	r3, r7, r3
 8017430:	2201      	movs	r2, #1
 8017432:	701a      	strb	r2, [r3, #0]

              break;
 8017434:	e006      	b.n	8017444 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	699b      	ldr	r3, [r3, #24]
 801743c:	2220      	movs	r2, #32
 801743e:	4013      	ands	r3, r2
 8017440:	2b20      	cmp	r3, #32
 8017442:	d1e8      	bne.n	8017416 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	699b      	ldr	r3, [r3, #24]
 801744a:	2220      	movs	r2, #32
 801744c:	4013      	ands	r3, r2
 801744e:	2b20      	cmp	r3, #32
 8017450:	d004      	beq.n	801745c <I2C_IsErrorOccurred+0x100>
 8017452:	2327      	movs	r3, #39	@ 0x27
 8017454:	18fb      	adds	r3, r7, r3
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d09b      	beq.n	8017394 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801745c:	2327      	movs	r3, #39	@ 0x27
 801745e:	18fb      	adds	r3, r7, r3
 8017460:	781b      	ldrb	r3, [r3, #0]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d103      	bne.n	801746e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	2220      	movs	r2, #32
 801746c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801746e:	6a3b      	ldr	r3, [r7, #32]
 8017470:	2204      	movs	r2, #4
 8017472:	4313      	orrs	r3, r2
 8017474:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017476:	2327      	movs	r3, #39	@ 0x27
 8017478:	18fb      	adds	r3, r7, r3
 801747a:	2201      	movs	r2, #1
 801747c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	699b      	ldr	r3, [r3, #24]
 8017484:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017486:	69ba      	ldr	r2, [r7, #24]
 8017488:	2380      	movs	r3, #128	@ 0x80
 801748a:	005b      	lsls	r3, r3, #1
 801748c:	4013      	ands	r3, r2
 801748e:	d00c      	beq.n	80174aa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017490:	6a3b      	ldr	r3, [r7, #32]
 8017492:	2201      	movs	r2, #1
 8017494:	4313      	orrs	r3, r2
 8017496:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	2280      	movs	r2, #128	@ 0x80
 801749e:	0052      	lsls	r2, r2, #1
 80174a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80174a2:	2327      	movs	r3, #39	@ 0x27
 80174a4:	18fb      	adds	r3, r7, r3
 80174a6:	2201      	movs	r2, #1
 80174a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80174aa:	69ba      	ldr	r2, [r7, #24]
 80174ac:	2380      	movs	r3, #128	@ 0x80
 80174ae:	00db      	lsls	r3, r3, #3
 80174b0:	4013      	ands	r3, r2
 80174b2:	d00c      	beq.n	80174ce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80174b4:	6a3b      	ldr	r3, [r7, #32]
 80174b6:	2208      	movs	r2, #8
 80174b8:	4313      	orrs	r3, r2
 80174ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2280      	movs	r2, #128	@ 0x80
 80174c2:	00d2      	lsls	r2, r2, #3
 80174c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80174c6:	2327      	movs	r3, #39	@ 0x27
 80174c8:	18fb      	adds	r3, r7, r3
 80174ca:	2201      	movs	r2, #1
 80174cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80174ce:	69ba      	ldr	r2, [r7, #24]
 80174d0:	2380      	movs	r3, #128	@ 0x80
 80174d2:	009b      	lsls	r3, r3, #2
 80174d4:	4013      	ands	r3, r2
 80174d6:	d00c      	beq.n	80174f2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80174d8:	6a3b      	ldr	r3, [r7, #32]
 80174da:	2202      	movs	r2, #2
 80174dc:	4313      	orrs	r3, r2
 80174de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	2280      	movs	r2, #128	@ 0x80
 80174e6:	0092      	lsls	r2, r2, #2
 80174e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80174ea:	2327      	movs	r3, #39	@ 0x27
 80174ec:	18fb      	adds	r3, r7, r3
 80174ee:	2201      	movs	r2, #1
 80174f0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80174f2:	2327      	movs	r3, #39	@ 0x27
 80174f4:	18fb      	adds	r3, r7, r3
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d01d      	beq.n	8017538 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	0018      	movs	r0, r3
 8017500:	f7ff fcd7 	bl	8016eb2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	685a      	ldr	r2, [r3, #4]
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	490e      	ldr	r1, [pc, #56]	@ (8017548 <I2C_IsErrorOccurred+0x1ec>)
 8017510:	400a      	ands	r2, r1
 8017512:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017518:	6a3b      	ldr	r3, [r7, #32]
 801751a:	431a      	orrs	r2, r3
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	2241      	movs	r2, #65	@ 0x41
 8017524:	2120      	movs	r1, #32
 8017526:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	2242      	movs	r2, #66	@ 0x42
 801752c:	2100      	movs	r1, #0
 801752e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	2240      	movs	r2, #64	@ 0x40
 8017534:	2100      	movs	r1, #0
 8017536:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8017538:	2327      	movs	r3, #39	@ 0x27
 801753a:	18fb      	adds	r3, r7, r3
 801753c:	781b      	ldrb	r3, [r3, #0]
}
 801753e:	0018      	movs	r0, r3
 8017540:	46bd      	mov	sp, r7
 8017542:	b00a      	add	sp, #40	@ 0x28
 8017544:	bd80      	pop	{r7, pc}
 8017546:	46c0      	nop			@ (mov r8, r8)
 8017548:	fe00e800 	.word	0xfe00e800

0801754c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801754c:	b590      	push	{r4, r7, lr}
 801754e:	b087      	sub	sp, #28
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	0008      	movs	r0, r1
 8017556:	0011      	movs	r1, r2
 8017558:	607b      	str	r3, [r7, #4]
 801755a:	240a      	movs	r4, #10
 801755c:	193b      	adds	r3, r7, r4
 801755e:	1c02      	adds	r2, r0, #0
 8017560:	801a      	strh	r2, [r3, #0]
 8017562:	2009      	movs	r0, #9
 8017564:	183b      	adds	r3, r7, r0
 8017566:	1c0a      	adds	r2, r1, #0
 8017568:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801756a:	193b      	adds	r3, r7, r4
 801756c:	881b      	ldrh	r3, [r3, #0]
 801756e:	059b      	lsls	r3, r3, #22
 8017570:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017572:	183b      	adds	r3, r7, r0
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	0419      	lsls	r1, r3, #16
 8017578:	23ff      	movs	r3, #255	@ 0xff
 801757a:	041b      	lsls	r3, r3, #16
 801757c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801757e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017586:	4313      	orrs	r3, r2
 8017588:	005b      	lsls	r3, r3, #1
 801758a:	085b      	lsrs	r3, r3, #1
 801758c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017596:	0d51      	lsrs	r1, r2, #21
 8017598:	2280      	movs	r2, #128	@ 0x80
 801759a:	00d2      	lsls	r2, r2, #3
 801759c:	400a      	ands	r2, r1
 801759e:	4907      	ldr	r1, [pc, #28]	@ (80175bc <I2C_TransferConfig+0x70>)
 80175a0:	430a      	orrs	r2, r1
 80175a2:	43d2      	mvns	r2, r2
 80175a4:	401a      	ands	r2, r3
 80175a6:	0011      	movs	r1, r2
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	697a      	ldr	r2, [r7, #20]
 80175ae:	430a      	orrs	r2, r1
 80175b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80175b2:	46c0      	nop			@ (mov r8, r8)
 80175b4:	46bd      	mov	sp, r7
 80175b6:	b007      	add	sp, #28
 80175b8:	bd90      	pop	{r4, r7, pc}
 80175ba:	46c0      	nop			@ (mov r8, r8)
 80175bc:	03ff63ff 	.word	0x03ff63ff

080175c0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b084      	sub	sp, #16
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	000a      	movs	r2, r1
 80175ca:	1cbb      	adds	r3, r7, #2
 80175cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80175ce:	2300      	movs	r3, #0
 80175d0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175d6:	4b3e      	ldr	r3, [pc, #248]	@ (80176d0 <I2C_Enable_IRQ+0x110>)
 80175d8:	429a      	cmp	r2, r3
 80175da:	d035      	beq.n	8017648 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80175e0:	4b3c      	ldr	r3, [pc, #240]	@ (80176d4 <I2C_Enable_IRQ+0x114>)
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d030      	beq.n	8017648 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80175ea:	4b3b      	ldr	r3, [pc, #236]	@ (80176d8 <I2C_Enable_IRQ+0x118>)
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d02b      	beq.n	8017648 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80175f0:	1cbb      	adds	r3, r7, #2
 80175f2:	2200      	movs	r2, #0
 80175f4:	5e9b      	ldrsh	r3, [r3, r2]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	da03      	bge.n	8017602 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	22b8      	movs	r2, #184	@ 0xb8
 80175fe:	4313      	orrs	r3, r2
 8017600:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017602:	1cbb      	adds	r3, r7, #2
 8017604:	881b      	ldrh	r3, [r3, #0]
 8017606:	2201      	movs	r2, #1
 8017608:	4013      	ands	r3, r2
 801760a:	d003      	beq.n	8017614 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	22f2      	movs	r2, #242	@ 0xf2
 8017610:	4313      	orrs	r3, r2
 8017612:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017614:	1cbb      	adds	r3, r7, #2
 8017616:	881b      	ldrh	r3, [r3, #0]
 8017618:	2202      	movs	r2, #2
 801761a:	4013      	ands	r3, r2
 801761c:	d003      	beq.n	8017626 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	22f4      	movs	r2, #244	@ 0xf4
 8017622:	4313      	orrs	r3, r2
 8017624:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017626:	1cbb      	adds	r3, r7, #2
 8017628:	881b      	ldrh	r3, [r3, #0]
 801762a:	2b10      	cmp	r3, #16
 801762c:	d103      	bne.n	8017636 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	2290      	movs	r2, #144	@ 0x90
 8017632:	4313      	orrs	r3, r2
 8017634:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017636:	1cbb      	adds	r3, r7, #2
 8017638:	881b      	ldrh	r3, [r3, #0]
 801763a:	2b20      	cmp	r3, #32
 801763c:	d13c      	bne.n	80176b8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	2220      	movs	r2, #32
 8017642:	4313      	orrs	r3, r2
 8017644:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017646:	e037      	b.n	80176b8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017648:	1cbb      	adds	r3, r7, #2
 801764a:	2200      	movs	r2, #0
 801764c:	5e9b      	ldrsh	r3, [r3, r2]
 801764e:	2b00      	cmp	r3, #0
 8017650:	da03      	bge.n	801765a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	22b8      	movs	r2, #184	@ 0xb8
 8017656:	4313      	orrs	r3, r2
 8017658:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801765a:	1cbb      	adds	r3, r7, #2
 801765c:	881b      	ldrh	r3, [r3, #0]
 801765e:	2201      	movs	r2, #1
 8017660:	4013      	ands	r3, r2
 8017662:	d003      	beq.n	801766c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	22f2      	movs	r2, #242	@ 0xf2
 8017668:	4313      	orrs	r3, r2
 801766a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801766c:	1cbb      	adds	r3, r7, #2
 801766e:	881b      	ldrh	r3, [r3, #0]
 8017670:	2202      	movs	r2, #2
 8017672:	4013      	ands	r3, r2
 8017674:	d003      	beq.n	801767e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	22f4      	movs	r2, #244	@ 0xf4
 801767a:	4313      	orrs	r3, r2
 801767c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801767e:	1cbb      	adds	r3, r7, #2
 8017680:	881b      	ldrh	r3, [r3, #0]
 8017682:	2b10      	cmp	r3, #16
 8017684:	d103      	bne.n	801768e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	2290      	movs	r2, #144	@ 0x90
 801768a:	4313      	orrs	r3, r2
 801768c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801768e:	1cbb      	adds	r3, r7, #2
 8017690:	881b      	ldrh	r3, [r3, #0]
 8017692:	2b20      	cmp	r3, #32
 8017694:	d103      	bne.n	801769e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	2260      	movs	r2, #96	@ 0x60
 801769a:	4313      	orrs	r3, r2
 801769c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80176a2:	4b0d      	ldr	r3, [pc, #52]	@ (80176d8 <I2C_Enable_IRQ+0x118>)
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d007      	beq.n	80176b8 <I2C_Enable_IRQ+0xf8>
 80176a8:	1cbb      	adds	r3, r7, #2
 80176aa:	881b      	ldrh	r3, [r3, #0]
 80176ac:	2b40      	cmp	r3, #64	@ 0x40
 80176ae:	d103      	bne.n	80176b8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	2240      	movs	r2, #64	@ 0x40
 80176b4:	4313      	orrs	r3, r2
 80176b6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	6819      	ldr	r1, [r3, #0]
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	68fa      	ldr	r2, [r7, #12]
 80176c4:	430a      	orrs	r2, r1
 80176c6:	601a      	str	r2, [r3, #0]
}
 80176c8:	46c0      	nop			@ (mov r8, r8)
 80176ca:	46bd      	mov	sp, r7
 80176cc:	b004      	add	sp, #16
 80176ce:	bd80      	pop	{r7, pc}
 80176d0:	08015e7d 	.word	0x08015e7d
 80176d4:	080162ad 	.word	0x080162ad
 80176d8:	08016075 	.word	0x08016075

080176dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b084      	sub	sp, #16
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	000a      	movs	r2, r1
 80176e6:	1cbb      	adds	r3, r7, #2
 80176e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80176ea:	2300      	movs	r3, #0
 80176ec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80176ee:	1cbb      	adds	r3, r7, #2
 80176f0:	881b      	ldrh	r3, [r3, #0]
 80176f2:	2201      	movs	r2, #1
 80176f4:	4013      	ands	r3, r2
 80176f6:	d010      	beq.n	801771a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2242      	movs	r2, #66	@ 0x42
 80176fc:	4313      	orrs	r3, r2
 80176fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2241      	movs	r2, #65	@ 0x41
 8017704:	5c9b      	ldrb	r3, [r3, r2]
 8017706:	b2db      	uxtb	r3, r3
 8017708:	001a      	movs	r2, r3
 801770a:	2328      	movs	r3, #40	@ 0x28
 801770c:	4013      	ands	r3, r2
 801770e:	2b28      	cmp	r3, #40	@ 0x28
 8017710:	d003      	beq.n	801771a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	22b0      	movs	r2, #176	@ 0xb0
 8017716:	4313      	orrs	r3, r2
 8017718:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801771a:	1cbb      	adds	r3, r7, #2
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	2202      	movs	r2, #2
 8017720:	4013      	ands	r3, r2
 8017722:	d010      	beq.n	8017746 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	2244      	movs	r2, #68	@ 0x44
 8017728:	4313      	orrs	r3, r2
 801772a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	2241      	movs	r2, #65	@ 0x41
 8017730:	5c9b      	ldrb	r3, [r3, r2]
 8017732:	b2db      	uxtb	r3, r3
 8017734:	001a      	movs	r2, r3
 8017736:	2328      	movs	r3, #40	@ 0x28
 8017738:	4013      	ands	r3, r2
 801773a:	2b28      	cmp	r3, #40	@ 0x28
 801773c:	d003      	beq.n	8017746 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	22b0      	movs	r2, #176	@ 0xb0
 8017742:	4313      	orrs	r3, r2
 8017744:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017746:	1cbb      	adds	r3, r7, #2
 8017748:	2200      	movs	r2, #0
 801774a:	5e9b      	ldrsh	r3, [r3, r2]
 801774c:	2b00      	cmp	r3, #0
 801774e:	da03      	bge.n	8017758 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	22b8      	movs	r2, #184	@ 0xb8
 8017754:	4313      	orrs	r3, r2
 8017756:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017758:	1cbb      	adds	r3, r7, #2
 801775a:	881b      	ldrh	r3, [r3, #0]
 801775c:	2b10      	cmp	r3, #16
 801775e:	d103      	bne.n	8017768 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	2290      	movs	r2, #144	@ 0x90
 8017764:	4313      	orrs	r3, r2
 8017766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017768:	1cbb      	adds	r3, r7, #2
 801776a:	881b      	ldrh	r3, [r3, #0]
 801776c:	2b20      	cmp	r3, #32
 801776e:	d103      	bne.n	8017778 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	2220      	movs	r2, #32
 8017774:	4313      	orrs	r3, r2
 8017776:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017778:	1cbb      	adds	r3, r7, #2
 801777a:	881b      	ldrh	r3, [r3, #0]
 801777c:	2b40      	cmp	r3, #64	@ 0x40
 801777e:	d103      	bne.n	8017788 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	2240      	movs	r2, #64	@ 0x40
 8017784:	4313      	orrs	r3, r2
 8017786:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	681a      	ldr	r2, [r3, #0]
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	43d9      	mvns	r1, r3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	400a      	ands	r2, r1
 8017798:	601a      	str	r2, [r3, #0]
}
 801779a:	46c0      	nop			@ (mov r8, r8)
 801779c:	46bd      	mov	sp, r7
 801779e:	b004      	add	sp, #16
 80177a0:	bd80      	pop	{r7, pc}
	...

080177a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	2241      	movs	r2, #65	@ 0x41
 80177b2:	5c9b      	ldrb	r3, [r3, r2]
 80177b4:	b2db      	uxtb	r3, r3
 80177b6:	2b20      	cmp	r3, #32
 80177b8:	d138      	bne.n	801782c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2240      	movs	r2, #64	@ 0x40
 80177be:	5c9b      	ldrb	r3, [r3, r2]
 80177c0:	2b01      	cmp	r3, #1
 80177c2:	d101      	bne.n	80177c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80177c4:	2302      	movs	r3, #2
 80177c6:	e032      	b.n	801782e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2240      	movs	r2, #64	@ 0x40
 80177cc:	2101      	movs	r1, #1
 80177ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2241      	movs	r2, #65	@ 0x41
 80177d4:	2124      	movs	r1, #36	@ 0x24
 80177d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	681a      	ldr	r2, [r3, #0]
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	2101      	movs	r1, #1
 80177e4:	438a      	bics	r2, r1
 80177e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4911      	ldr	r1, [pc, #68]	@ (8017838 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80177f4:	400a      	ands	r2, r1
 80177f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	6819      	ldr	r1, [r3, #0]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	683a      	ldr	r2, [r7, #0]
 8017804:	430a      	orrs	r2, r1
 8017806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	681a      	ldr	r2, [r3, #0]
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	2101      	movs	r1, #1
 8017814:	430a      	orrs	r2, r1
 8017816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	2241      	movs	r2, #65	@ 0x41
 801781c:	2120      	movs	r1, #32
 801781e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2240      	movs	r2, #64	@ 0x40
 8017824:	2100      	movs	r1, #0
 8017826:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017828:	2300      	movs	r3, #0
 801782a:	e000      	b.n	801782e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801782c:	2302      	movs	r3, #2
  }
}
 801782e:	0018      	movs	r0, r3
 8017830:	46bd      	mov	sp, r7
 8017832:	b002      	add	sp, #8
 8017834:	bd80      	pop	{r7, pc}
 8017836:	46c0      	nop			@ (mov r8, r8)
 8017838:	ffffefff 	.word	0xffffefff

0801783c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b084      	sub	sp, #16
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2241      	movs	r2, #65	@ 0x41
 801784a:	5c9b      	ldrb	r3, [r3, r2]
 801784c:	b2db      	uxtb	r3, r3
 801784e:	2b20      	cmp	r3, #32
 8017850:	d139      	bne.n	80178c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	2240      	movs	r2, #64	@ 0x40
 8017856:	5c9b      	ldrb	r3, [r3, r2]
 8017858:	2b01      	cmp	r3, #1
 801785a:	d101      	bne.n	8017860 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801785c:	2302      	movs	r3, #2
 801785e:	e033      	b.n	80178c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2240      	movs	r2, #64	@ 0x40
 8017864:	2101      	movs	r1, #1
 8017866:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2241      	movs	r2, #65	@ 0x41
 801786c:	2124      	movs	r1, #36	@ 0x24
 801786e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	681a      	ldr	r2, [r3, #0]
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	2101      	movs	r1, #1
 801787c:	438a      	bics	r2, r1
 801787e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	4a11      	ldr	r2, [pc, #68]	@ (80178d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801788c:	4013      	ands	r3, r2
 801788e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	021b      	lsls	r3, r3, #8
 8017894:	68fa      	ldr	r2, [r7, #12]
 8017896:	4313      	orrs	r3, r2
 8017898:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	68fa      	ldr	r2, [r7, #12]
 80178a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	681a      	ldr	r2, [r3, #0]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	2101      	movs	r1, #1
 80178ae:	430a      	orrs	r2, r1
 80178b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2241      	movs	r2, #65	@ 0x41
 80178b6:	2120      	movs	r1, #32
 80178b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2240      	movs	r2, #64	@ 0x40
 80178be:	2100      	movs	r1, #0
 80178c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80178c2:	2300      	movs	r3, #0
 80178c4:	e000      	b.n	80178c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80178c6:	2302      	movs	r3, #2
  }
}
 80178c8:	0018      	movs	r0, r3
 80178ca:	46bd      	mov	sp, r7
 80178cc:	b004      	add	sp, #16
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	fffff0ff 	.word	0xfffff0ff

080178d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b088      	sub	sp, #32
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d101      	bne.n	80178e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80178e2:	2301      	movs	r3, #1
 80178e4:	e0e1      	b.n	8017aaa <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2235      	movs	r2, #53	@ 0x35
 80178ea:	5c9b      	ldrb	r3, [r3, r2]
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d107      	bne.n	8017902 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	2234      	movs	r2, #52	@ 0x34
 80178f6:	2100      	movs	r1, #0
 80178f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	0018      	movs	r0, r3
 80178fe:	f7f4 f8d7 	bl	800bab0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	2235      	movs	r2, #53	@ 0x35
 8017906:	2102      	movs	r1, #2
 8017908:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	69da      	ldr	r2, [r3, #28]
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4967      	ldr	r1, [pc, #412]	@ (8017ab4 <HAL_I2S_Init+0x1e0>)
 8017916:	400a      	ands	r2, r1
 8017918:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2202      	movs	r2, #2
 8017920:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	695b      	ldr	r3, [r3, #20]
 8017926:	2b02      	cmp	r3, #2
 8017928:	d073      	beq.n	8017a12 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	68db      	ldr	r3, [r3, #12]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d102      	bne.n	8017938 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8017932:	2310      	movs	r3, #16
 8017934:	617b      	str	r3, [r7, #20]
 8017936:	e001      	b.n	801793c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8017938:	2320      	movs	r3, #32
 801793a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	689b      	ldr	r3, [r3, #8]
 8017940:	2b20      	cmp	r3, #32
 8017942:	d802      	bhi.n	801794a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	005b      	lsls	r3, r3, #1
 8017948:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801794a:	f002 fed3 	bl	801a6f4 <HAL_RCC_GetSysClockFreq>
 801794e:	0003      	movs	r3, r0
 8017950:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	691a      	ldr	r2, [r3, #16]
 8017956:	2380      	movs	r3, #128	@ 0x80
 8017958:	009b      	lsls	r3, r3, #2
 801795a:	429a      	cmp	r2, r3
 801795c:	d131      	bne.n	80179c2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	68db      	ldr	r3, [r3, #12]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d016      	beq.n	8017994 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	009b      	lsls	r3, r3, #2
 801796a:	0019      	movs	r1, r3
 801796c:	68f8      	ldr	r0, [r7, #12]
 801796e:	f7e8 fc19 	bl	80001a4 <__udivsi3>
 8017972:	0003      	movs	r3, r0
 8017974:	001a      	movs	r2, r3
 8017976:	0013      	movs	r3, r2
 8017978:	009b      	lsls	r3, r3, #2
 801797a:	189b      	adds	r3, r3, r2
 801797c:	005b      	lsls	r3, r3, #1
 801797e:	001a      	movs	r2, r3
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	695b      	ldr	r3, [r3, #20]
 8017984:	0019      	movs	r1, r3
 8017986:	0010      	movs	r0, r2
 8017988:	f7e8 fc0c 	bl	80001a4 <__udivsi3>
 801798c:	0003      	movs	r3, r0
 801798e:	3305      	adds	r3, #5
 8017990:	613b      	str	r3, [r7, #16]
 8017992:	e02a      	b.n	80179ea <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	00db      	lsls	r3, r3, #3
 8017998:	0019      	movs	r1, r3
 801799a:	68f8      	ldr	r0, [r7, #12]
 801799c:	f7e8 fc02 	bl	80001a4 <__udivsi3>
 80179a0:	0003      	movs	r3, r0
 80179a2:	001a      	movs	r2, r3
 80179a4:	0013      	movs	r3, r2
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	189b      	adds	r3, r3, r2
 80179aa:	005b      	lsls	r3, r3, #1
 80179ac:	001a      	movs	r2, r3
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	695b      	ldr	r3, [r3, #20]
 80179b2:	0019      	movs	r1, r3
 80179b4:	0010      	movs	r0, r2
 80179b6:	f7e8 fbf5 	bl	80001a4 <__udivsi3>
 80179ba:	0003      	movs	r3, r0
 80179bc:	3305      	adds	r3, #5
 80179be:	613b      	str	r3, [r7, #16]
 80179c0:	e013      	b.n	80179ea <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80179c2:	6979      	ldr	r1, [r7, #20]
 80179c4:	68f8      	ldr	r0, [r7, #12]
 80179c6:	f7e8 fbed 	bl	80001a4 <__udivsi3>
 80179ca:	0003      	movs	r3, r0
 80179cc:	001a      	movs	r2, r3
 80179ce:	0013      	movs	r3, r2
 80179d0:	009b      	lsls	r3, r3, #2
 80179d2:	189b      	adds	r3, r3, r2
 80179d4:	005b      	lsls	r3, r3, #1
 80179d6:	001a      	movs	r2, r3
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	695b      	ldr	r3, [r3, #20]
 80179dc:	0019      	movs	r1, r3
 80179de:	0010      	movs	r0, r2
 80179e0:	f7e8 fbe0 	bl	80001a4 <__udivsi3>
 80179e4:	0003      	movs	r3, r0
 80179e6:	3305      	adds	r3, #5
 80179e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80179ea:	693b      	ldr	r3, [r7, #16]
 80179ec:	210a      	movs	r1, #10
 80179ee:	0018      	movs	r0, r3
 80179f0:	f7e8 fbd8 	bl	80001a4 <__udivsi3>
 80179f4:	0003      	movs	r3, r0
 80179f6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80179f8:	693b      	ldr	r3, [r7, #16]
 80179fa:	2201      	movs	r2, #1
 80179fc:	4013      	ands	r3, r2
 80179fe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8017a00:	693a      	ldr	r2, [r7, #16]
 8017a02:	69bb      	ldr	r3, [r7, #24]
 8017a04:	1ad3      	subs	r3, r2, r3
 8017a06:	085b      	lsrs	r3, r3, #1
 8017a08:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8017a0a:	69bb      	ldr	r3, [r7, #24]
 8017a0c:	021b      	lsls	r3, r3, #8
 8017a0e:	61bb      	str	r3, [r7, #24]
 8017a10:	e003      	b.n	8017a1a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8017a12:	2302      	movs	r3, #2
 8017a14:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8017a16:	2300      	movs	r3, #0
 8017a18:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8017a1a:	69fb      	ldr	r3, [r7, #28]
 8017a1c:	2b01      	cmp	r3, #1
 8017a1e:	d902      	bls.n	8017a26 <HAL_I2S_Init+0x152>
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	2bff      	cmp	r3, #255	@ 0xff
 8017a24:	d907      	bls.n	8017a36 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a2a:	2210      	movs	r2, #16
 8017a2c:	431a      	orrs	r2, r3
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8017a32:	2301      	movs	r3, #1
 8017a34:	e039      	b.n	8017aaa <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	691a      	ldr	r2, [r3, #16]
 8017a3a:	69bb      	ldr	r3, [r7, #24]
 8017a3c:	431a      	orrs	r2, r3
 8017a3e:	0011      	movs	r1, r2
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	69fa      	ldr	r2, [r7, #28]
 8017a46:	430a      	orrs	r2, r1
 8017a48:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	69db      	ldr	r3, [r3, #28]
 8017a50:	4a18      	ldr	r2, [pc, #96]	@ (8017ab4 <HAL_I2S_Init+0x1e0>)
 8017a52:	401a      	ands	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	6859      	ldr	r1, [r3, #4]
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	689b      	ldr	r3, [r3, #8]
 8017a5c:	4319      	orrs	r1, r3
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	68db      	ldr	r3, [r3, #12]
 8017a62:	4319      	orrs	r1, r3
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	699b      	ldr	r3, [r3, #24]
 8017a68:	430b      	orrs	r3, r1
 8017a6a:	431a      	orrs	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2180      	movs	r1, #128	@ 0x80
 8017a72:	0109      	lsls	r1, r1, #4
 8017a74:	430a      	orrs	r2, r1
 8017a76:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	689b      	ldr	r3, [r3, #8]
 8017a7c:	2b30      	cmp	r3, #48	@ 0x30
 8017a7e:	d003      	beq.n	8017a88 <HAL_I2S_Init+0x1b4>
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	689b      	ldr	r3, [r3, #8]
 8017a84:	2bb0      	cmp	r3, #176	@ 0xb0
 8017a86:	d108      	bne.n	8017a9a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	69da      	ldr	r2, [r3, #28]
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	2180      	movs	r1, #128	@ 0x80
 8017a94:	0149      	lsls	r1, r1, #5
 8017a96:	430a      	orrs	r2, r1
 8017a98:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2235      	movs	r2, #53	@ 0x35
 8017aa4:	2101      	movs	r1, #1
 8017aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017aa8:	2300      	movs	r3, #0
}
 8017aaa:	0018      	movs	r0, r3
 8017aac:	46bd      	mov	sp, r7
 8017aae:	b008      	add	sp, #32
 8017ab0:	bd80      	pop	{r7, pc}
 8017ab2:	46c0      	nop			@ (mov r8, r8)
 8017ab4:	fffff040 	.word	0xfffff040

08017ab8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b086      	sub	sp, #24
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	1dbb      	adds	r3, r7, #6
 8017ac4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d003      	beq.n	8017ad4 <HAL_I2S_Receive_DMA+0x1c>
 8017acc:	1dbb      	adds	r3, r7, #6
 8017ace:	881b      	ldrh	r3, [r3, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d101      	bne.n	8017ad8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	e0a6      	b.n	8017c26 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2234      	movs	r2, #52	@ 0x34
 8017adc:	5c9b      	ldrb	r3, [r3, r2]
 8017ade:	b2db      	uxtb	r3, r3
 8017ae0:	2b01      	cmp	r3, #1
 8017ae2:	d101      	bne.n	8017ae8 <HAL_I2S_Receive_DMA+0x30>
 8017ae4:	2302      	movs	r3, #2
 8017ae6:	e09e      	b.n	8017c26 <HAL_I2S_Receive_DMA+0x16e>
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2234      	movs	r2, #52	@ 0x34
 8017aec:	2101      	movs	r1, #1
 8017aee:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	2235      	movs	r2, #53	@ 0x35
 8017af4:	5c9b      	ldrb	r3, [r3, r2]
 8017af6:	b2db      	uxtb	r3, r3
 8017af8:	2b01      	cmp	r3, #1
 8017afa:	d005      	beq.n	8017b08 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	2234      	movs	r2, #52	@ 0x34
 8017b00:	2100      	movs	r1, #0
 8017b02:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8017b04:	2302      	movs	r3, #2
 8017b06:	e08e      	b.n	8017c26 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	2235      	movs	r2, #53	@ 0x35
 8017b0c:	2104      	movs	r1, #4
 8017b0e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	2200      	movs	r2, #0
 8017b14:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	68ba      	ldr	r2, [r7, #8]
 8017b1a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	69db      	ldr	r3, [r3, #28]
 8017b22:	2207      	movs	r2, #7
 8017b24:	4013      	ands	r3, r2
 8017b26:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8017b28:	697b      	ldr	r3, [r7, #20]
 8017b2a:	2b03      	cmp	r3, #3
 8017b2c:	d002      	beq.n	8017b34 <HAL_I2S_Receive_DMA+0x7c>
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	2b05      	cmp	r3, #5
 8017b32:	d10c      	bne.n	8017b4e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8017b34:	1dbb      	adds	r3, r7, #6
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	18db      	adds	r3, r3, r3
 8017b3a:	b29a      	uxth	r2, r3
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8017b40:	1dbb      	adds	r3, r7, #6
 8017b42:	881b      	ldrh	r3, [r3, #0]
 8017b44:	18db      	adds	r3, r3, r3
 8017b46:	b29a      	uxth	r2, r3
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017b4c:	e007      	b.n	8017b5e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	1dba      	adds	r2, r7, #6
 8017b52:	8812      	ldrh	r2, [r2, #0]
 8017b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	1dba      	adds	r2, r7, #6
 8017b5a:	8812      	ldrh	r2, [r2, #0]
 8017b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b62:	4a33      	ldr	r2, [pc, #204]	@ (8017c30 <HAL_I2S_Receive_DMA+0x178>)
 8017b64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b6a:	4a32      	ldr	r2, [pc, #200]	@ (8017c34 <HAL_I2S_Receive_DMA+0x17c>)
 8017b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b72:	4a31      	ldr	r2, [pc, #196]	@ (8017c38 <HAL_I2S_Receive_DMA+0x180>)
 8017b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	69da      	ldr	r2, [r3, #28]
 8017b7c:	23c0      	movs	r3, #192	@ 0xc0
 8017b7e:	009b      	lsls	r3, r3, #2
 8017b80:	401a      	ands	r2, r3
 8017b82:	23c0      	movs	r3, #192	@ 0xc0
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d10a      	bne.n	8017ba0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	613b      	str	r3, [r7, #16]
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	68db      	ldr	r3, [r3, #12]
 8017b94:	613b      	str	r3, [r7, #16]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	689b      	ldr	r3, [r3, #8]
 8017b9c:	613b      	str	r3, [r7, #16]
 8017b9e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	330c      	adds	r3, #12
 8017baa:	0019      	movs	r1, r3
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bb0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017bb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8017bb8:	f7fc fa0a 	bl	8013fd0 <HAL_DMA_Start_IT>
 8017bbc:	1e03      	subs	r3, r0, #0
 8017bbe:	d00f      	beq.n	8017be0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bc4:	2208      	movs	r2, #8
 8017bc6:	431a      	orrs	r2, r3
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2235      	movs	r2, #53	@ 0x35
 8017bd0:	2101      	movs	r1, #1
 8017bd2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2234      	movs	r2, #52	@ 0x34
 8017bd8:	2100      	movs	r1, #0
 8017bda:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	e022      	b.n	8017c26 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	69da      	ldr	r2, [r3, #28]
 8017be6:	2380      	movs	r3, #128	@ 0x80
 8017be8:	00db      	lsls	r3, r3, #3
 8017bea:	4013      	ands	r3, r2
 8017bec:	d108      	bne.n	8017c00 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	69da      	ldr	r2, [r3, #28]
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2180      	movs	r1, #128	@ 0x80
 8017bfa:	00c9      	lsls	r1, r1, #3
 8017bfc:	430a      	orrs	r2, r1
 8017bfe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	685b      	ldr	r3, [r3, #4]
 8017c06:	2201      	movs	r2, #1
 8017c08:	4013      	ands	r3, r2
 8017c0a:	d107      	bne.n	8017c1c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	685a      	ldr	r2, [r3, #4]
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	2101      	movs	r1, #1
 8017c18:	430a      	orrs	r2, r1
 8017c1a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	2234      	movs	r2, #52	@ 0x34
 8017c20:	2100      	movs	r1, #0
 8017c22:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8017c24:	2300      	movs	r3, #0
}
 8017c26:	0018      	movs	r0, r3
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	b006      	add	sp, #24
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	46c0      	nop			@ (mov r8, r8)
 8017c30:	08017e19 	.word	0x08017e19
 8017c34:	08017dd5 	.word	0x08017dd5
 8017c38:	08017e37 	.word	0x08017e37

08017c3c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b086      	sub	sp, #24
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8017c44:	2317      	movs	r3, #23
 8017c46:	18fb      	adds	r3, r7, r3
 8017c48:	2200      	movs	r2, #0
 8017c4a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	685a      	ldr	r2, [r3, #4]
 8017c50:	2380      	movs	r3, #128	@ 0x80
 8017c52:	009b      	lsls	r3, r3, #2
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d003      	beq.n	8017c60 <HAL_I2S_DMAStop+0x24>
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	685b      	ldr	r3, [r3, #4]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d158      	bne.n	8017d12 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d010      	beq.n	8017c8a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c6c:	0018      	movs	r0, r3
 8017c6e:	f7fc fa15 	bl	801409c <HAL_DMA_Abort>
 8017c72:	1e03      	subs	r3, r0, #0
 8017c74:	d009      	beq.n	8017c8a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c7a:	2208      	movs	r2, #8
 8017c7c:	431a      	orrs	r2, r3
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8017c82:	2317      	movs	r3, #23
 8017c84:	18fb      	adds	r3, r7, r3
 8017c86:	2201      	movs	r2, #1
 8017c88:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8017c8a:	6878      	ldr	r0, [r7, #4]
 8017c8c:	2364      	movs	r3, #100	@ 0x64
 8017c8e:	2201      	movs	r2, #1
 8017c90:	2102      	movs	r1, #2
 8017c92:	f000 f8f7 	bl	8017e84 <I2S_WaitFlagStateUntilTimeout>
 8017c96:	1e03      	subs	r3, r0, #0
 8017c98:	d00d      	beq.n	8017cb6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c9e:	2201      	movs	r2, #1
 8017ca0:	431a      	orrs	r2, r3
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	2235      	movs	r2, #53	@ 0x35
 8017caa:	2101      	movs	r1, #1
 8017cac:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8017cae:	2317      	movs	r3, #23
 8017cb0:	18fb      	adds	r3, r7, r3
 8017cb2:	2201      	movs	r2, #1
 8017cb4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	2364      	movs	r3, #100	@ 0x64
 8017cba:	2200      	movs	r2, #0
 8017cbc:	2180      	movs	r1, #128	@ 0x80
 8017cbe:	f000 f8e1 	bl	8017e84 <I2S_WaitFlagStateUntilTimeout>
 8017cc2:	1e03      	subs	r3, r0, #0
 8017cc4:	d00d      	beq.n	8017ce2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017cca:	2201      	movs	r2, #1
 8017ccc:	431a      	orrs	r2, r3
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2235      	movs	r2, #53	@ 0x35
 8017cd6:	2101      	movs	r1, #1
 8017cd8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8017cda:	2317      	movs	r3, #23
 8017cdc:	18fb      	adds	r3, r7, r3
 8017cde:	2201      	movs	r2, #1
 8017ce0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	69da      	ldr	r2, [r3, #28]
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4938      	ldr	r1, [pc, #224]	@ (8017dd0 <HAL_I2S_DMAStop+0x194>)
 8017cee:	400a      	ands	r2, r1
 8017cf0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	613b      	str	r3, [r7, #16]
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	689b      	ldr	r3, [r3, #8]
 8017cfc:	613b      	str	r3, [r7, #16]
 8017cfe:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	685a      	ldr	r2, [r3, #4]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	2102      	movs	r1, #2
 8017d0c:	438a      	bics	r2, r1
 8017d0e:	605a      	str	r2, [r3, #4]
 8017d10:	e053      	b.n	8017dba <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	685a      	ldr	r2, [r3, #4]
 8017d16:	23c0      	movs	r3, #192	@ 0xc0
 8017d18:	009b      	lsls	r3, r3, #2
 8017d1a:	429a      	cmp	r2, r3
 8017d1c:	d005      	beq.n	8017d2a <HAL_I2S_DMAStop+0xee>
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	685a      	ldr	r2, [r3, #4]
 8017d22:	2380      	movs	r3, #128	@ 0x80
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	429a      	cmp	r2, r3
 8017d28:	d147      	bne.n	8017dba <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d010      	beq.n	8017d54 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d36:	0018      	movs	r0, r3
 8017d38:	f7fc f9b0 	bl	801409c <HAL_DMA_Abort>
 8017d3c:	1e03      	subs	r3, r0, #0
 8017d3e:	d009      	beq.n	8017d54 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d44:	2208      	movs	r2, #8
 8017d46:	431a      	orrs	r2, r3
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8017d4c:	2317      	movs	r3, #23
 8017d4e:	18fb      	adds	r3, r7, r3
 8017d50:	2201      	movs	r2, #1
 8017d52:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	69da      	ldr	r2, [r3, #28]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	491c      	ldr	r1, [pc, #112]	@ (8017dd0 <HAL_I2S_DMAStop+0x194>)
 8017d60:	400a      	ands	r2, r1
 8017d62:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8017d64:	2300      	movs	r3, #0
 8017d66:	60fb      	str	r3, [r7, #12]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	68db      	ldr	r3, [r3, #12]
 8017d6e:	60fb      	str	r3, [r7, #12]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	689b      	ldr	r3, [r3, #8]
 8017d76:	60fb      	str	r3, [r7, #12]
 8017d78:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	685a      	ldr	r2, [r3, #4]
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	2101      	movs	r1, #1
 8017d86:	438a      	bics	r2, r1
 8017d88:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	685a      	ldr	r2, [r3, #4]
 8017d8e:	2380      	movs	r3, #128	@ 0x80
 8017d90:	005b      	lsls	r3, r3, #1
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d10e      	bne.n	8017db4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d9a:	2240      	movs	r2, #64	@ 0x40
 8017d9c:	431a      	orrs	r2, r3
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	2235      	movs	r2, #53	@ 0x35
 8017da6:	2101      	movs	r1, #1
 8017da8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8017daa:	2317      	movs	r3, #23
 8017dac:	18fb      	adds	r3, r7, r3
 8017dae:	2201      	movs	r2, #1
 8017db0:	701a      	strb	r2, [r3, #0]
 8017db2:	e002      	b.n	8017dba <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2235      	movs	r2, #53	@ 0x35
 8017dbe:	2101      	movs	r1, #1
 8017dc0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8017dc2:	2317      	movs	r3, #23
 8017dc4:	18fb      	adds	r3, r7, r3
 8017dc6:	781b      	ldrb	r3, [r3, #0]
}
 8017dc8:	0018      	movs	r0, r3
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	b006      	add	sp, #24
 8017dce:	bd80      	pop	{r7, pc}
 8017dd0:	fffffbff 	.word	0xfffffbff

08017dd4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b084      	sub	sp, #16
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017de0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	69db      	ldr	r3, [r3, #28]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d10e      	bne.n	8017e08 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	685a      	ldr	r2, [r3, #4]
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2101      	movs	r1, #1
 8017df6:	438a      	bics	r2, r1
 8017df8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	2235      	movs	r2, #53	@ 0x35
 8017e04:	2101      	movs	r1, #1
 8017e06:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	0018      	movs	r0, r3
 8017e0c:	f7f8 fd62 	bl	80108d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017e10:	46c0      	nop			@ (mov r8, r8)
 8017e12:	46bd      	mov	sp, r7
 8017e14:	b004      	add	sp, #16
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	0018      	movs	r0, r3
 8017e2a:	f7f8 fd41 	bl	80108b0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017e2e:	46c0      	nop			@ (mov r8, r8)
 8017e30:	46bd      	mov	sp, r7
 8017e32:	b004      	add	sp, #16
 8017e34:	bd80      	pop	{r7, pc}

08017e36 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8017e36:	b580      	push	{r7, lr}
 8017e38:	b084      	sub	sp, #16
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e42:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	685a      	ldr	r2, [r3, #4]
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	2103      	movs	r1, #3
 8017e50:	438a      	bics	r2, r1
 8017e52:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	2200      	movs	r2, #0
 8017e58:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	2235      	movs	r2, #53	@ 0x35
 8017e64:	2101      	movs	r1, #1
 8017e66:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e6c:	2208      	movs	r2, #8
 8017e6e:	431a      	orrs	r2, r3
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	0018      	movs	r0, r3
 8017e78:	f7f8 fd7a 	bl	8010970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017e7c:	46c0      	nop			@ (mov r8, r8)
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	b004      	add	sp, #16
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b086      	sub	sp, #24
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	603b      	str	r3, [r7, #0]
 8017e90:	1dfb      	adds	r3, r7, #7
 8017e92:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8017e94:	f7fb fb4a 	bl	801352c <HAL_GetTick>
 8017e98:	0003      	movs	r3, r0
 8017e9a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8017e9c:	e017      	b.n	8017ece <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	3301      	adds	r3, #1
 8017ea2:	d014      	beq.n	8017ece <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8017ea4:	f7fb fb42 	bl	801352c <HAL_GetTick>
 8017ea8:	0002      	movs	r2, r0
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	1ad3      	subs	r3, r2, r3
 8017eae:	683a      	ldr	r2, [r7, #0]
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d902      	bls.n	8017eba <I2S_WaitFlagStateUntilTimeout+0x36>
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d109      	bne.n	8017ece <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	2235      	movs	r2, #53	@ 0x35
 8017ebe:	2101      	movs	r1, #1
 8017ec0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	2234      	movs	r2, #52	@ 0x34
 8017ec6:	2100      	movs	r1, #0
 8017ec8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8017eca:	2303      	movs	r3, #3
 8017ecc:	e00f      	b.n	8017eee <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	689b      	ldr	r3, [r3, #8]
 8017ed4:	68ba      	ldr	r2, [r7, #8]
 8017ed6:	4013      	ands	r3, r2
 8017ed8:	68ba      	ldr	r2, [r7, #8]
 8017eda:	1ad3      	subs	r3, r2, r3
 8017edc:	425a      	negs	r2, r3
 8017ede:	4153      	adcs	r3, r2
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	001a      	movs	r2, r3
 8017ee4:	1dfb      	adds	r3, r7, #7
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d1d8      	bne.n	8017e9e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8017eec:	2300      	movs	r3, #0
}
 8017eee:	0018      	movs	r0, r3
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	b006      	add	sp, #24
 8017ef4:	bd80      	pop	{r7, pc}
	...

08017ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017efa:	b08b      	sub	sp, #44	@ 0x2c
 8017efc:	af06      	add	r7, sp, #24
 8017efe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d101      	bne.n	8017f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017f06:	2301      	movs	r3, #1
 8017f08:	e0f0      	b.n	80180ec <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	4a79      	ldr	r2, [pc, #484]	@ (80180f4 <HAL_PCD_Init+0x1fc>)
 8017f0e:	5c9b      	ldrb	r3, [r3, r2]
 8017f10:	b2db      	uxtb	r3, r3
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d108      	bne.n	8017f28 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017f16:	687a      	ldr	r2, [r7, #4]
 8017f18:	23aa      	movs	r3, #170	@ 0xaa
 8017f1a:	009b      	lsls	r3, r3, #2
 8017f1c:	2100      	movs	r1, #0
 8017f1e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	0018      	movs	r0, r3
 8017f24:	f009 ff4a 	bl	8021dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	4a72      	ldr	r2, [pc, #456]	@ (80180f4 <HAL_PCD_Init+0x1fc>)
 8017f2c:	2103      	movs	r1, #3
 8017f2e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	0018      	movs	r0, r3
 8017f36:	f005 fefd 	bl	801dd34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017f3a:	230f      	movs	r3, #15
 8017f3c:	18fb      	adds	r3, r7, r3
 8017f3e:	2200      	movs	r2, #0
 8017f40:	701a      	strb	r2, [r3, #0]
 8017f42:	e049      	b.n	8017fd8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017f44:	200f      	movs	r0, #15
 8017f46:	183b      	adds	r3, r7, r0
 8017f48:	781b      	ldrb	r3, [r3, #0]
 8017f4a:	6879      	ldr	r1, [r7, #4]
 8017f4c:	1c5a      	adds	r2, r3, #1
 8017f4e:	0013      	movs	r3, r2
 8017f50:	009b      	lsls	r3, r3, #2
 8017f52:	189b      	adds	r3, r3, r2
 8017f54:	00db      	lsls	r3, r3, #3
 8017f56:	18cb      	adds	r3, r1, r3
 8017f58:	3301      	adds	r3, #1
 8017f5a:	2201      	movs	r2, #1
 8017f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017f5e:	183b      	adds	r3, r7, r0
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	6879      	ldr	r1, [r7, #4]
 8017f64:	1c5a      	adds	r2, r3, #1
 8017f66:	0013      	movs	r3, r2
 8017f68:	009b      	lsls	r3, r3, #2
 8017f6a:	189b      	adds	r3, r3, r2
 8017f6c:	00db      	lsls	r3, r3, #3
 8017f6e:	183a      	adds	r2, r7, r0
 8017f70:	7812      	ldrb	r2, [r2, #0]
 8017f72:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017f74:	183b      	adds	r3, r7, r0
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	6879      	ldr	r1, [r7, #4]
 8017f7a:	1c5a      	adds	r2, r3, #1
 8017f7c:	0013      	movs	r3, r2
 8017f7e:	009b      	lsls	r3, r3, #2
 8017f80:	189b      	adds	r3, r3, r2
 8017f82:	00db      	lsls	r3, r3, #3
 8017f84:	18cb      	adds	r3, r1, r3
 8017f86:	3303      	adds	r3, #3
 8017f88:	2200      	movs	r2, #0
 8017f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017f8c:	183b      	adds	r3, r7, r0
 8017f8e:	781a      	ldrb	r2, [r3, #0]
 8017f90:	6879      	ldr	r1, [r7, #4]
 8017f92:	0013      	movs	r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	189b      	adds	r3, r3, r2
 8017f98:	00db      	lsls	r3, r3, #3
 8017f9a:	18cb      	adds	r3, r1, r3
 8017f9c:	3338      	adds	r3, #56	@ 0x38
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017fa2:	183b      	adds	r3, r7, r0
 8017fa4:	781a      	ldrb	r2, [r3, #0]
 8017fa6:	6879      	ldr	r1, [r7, #4]
 8017fa8:	0013      	movs	r3, r2
 8017faa:	009b      	lsls	r3, r3, #2
 8017fac:	189b      	adds	r3, r3, r2
 8017fae:	00db      	lsls	r3, r3, #3
 8017fb0:	18cb      	adds	r3, r1, r3
 8017fb2:	333c      	adds	r3, #60	@ 0x3c
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017fb8:	183b      	adds	r3, r7, r0
 8017fba:	781a      	ldrb	r2, [r3, #0]
 8017fbc:	6879      	ldr	r1, [r7, #4]
 8017fbe:	0013      	movs	r3, r2
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	189b      	adds	r3, r3, r2
 8017fc4:	00db      	lsls	r3, r3, #3
 8017fc6:	18cb      	adds	r3, r1, r3
 8017fc8:	3340      	adds	r3, #64	@ 0x40
 8017fca:	2200      	movs	r2, #0
 8017fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017fce:	183b      	adds	r3, r7, r0
 8017fd0:	781a      	ldrb	r2, [r3, #0]
 8017fd2:	183b      	adds	r3, r7, r0
 8017fd4:	3201      	adds	r2, #1
 8017fd6:	701a      	strb	r2, [r3, #0]
 8017fd8:	210f      	movs	r1, #15
 8017fda:	187b      	adds	r3, r7, r1
 8017fdc:	781a      	ldrb	r2, [r3, #0]
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d3ae      	bcc.n	8017f44 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017fe6:	187b      	adds	r3, r7, r1
 8017fe8:	2200      	movs	r2, #0
 8017fea:	701a      	strb	r2, [r3, #0]
 8017fec:	e056      	b.n	801809c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017fee:	240f      	movs	r4, #15
 8017ff0:	193b      	adds	r3, r7, r4
 8017ff2:	781a      	ldrb	r2, [r3, #0]
 8017ff4:	6878      	ldr	r0, [r7, #4]
 8017ff6:	236a      	movs	r3, #106	@ 0x6a
 8017ff8:	33ff      	adds	r3, #255	@ 0xff
 8017ffa:	0019      	movs	r1, r3
 8017ffc:	0013      	movs	r3, r2
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	189b      	adds	r3, r3, r2
 8018002:	00db      	lsls	r3, r3, #3
 8018004:	18c3      	adds	r3, r0, r3
 8018006:	185b      	adds	r3, r3, r1
 8018008:	2200      	movs	r2, #0
 801800a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801800c:	193b      	adds	r3, r7, r4
 801800e:	781a      	ldrb	r2, [r3, #0]
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	23b4      	movs	r3, #180	@ 0xb4
 8018014:	0059      	lsls	r1, r3, #1
 8018016:	0013      	movs	r3, r2
 8018018:	009b      	lsls	r3, r3, #2
 801801a:	189b      	adds	r3, r3, r2
 801801c:	00db      	lsls	r3, r3, #3
 801801e:	18c3      	adds	r3, r0, r3
 8018020:	185b      	adds	r3, r3, r1
 8018022:	193a      	adds	r2, r7, r4
 8018024:	7812      	ldrb	r2, [r2, #0]
 8018026:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8018028:	193b      	adds	r3, r7, r4
 801802a:	781a      	ldrb	r2, [r3, #0]
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	236c      	movs	r3, #108	@ 0x6c
 8018030:	33ff      	adds	r3, #255	@ 0xff
 8018032:	0019      	movs	r1, r3
 8018034:	0013      	movs	r3, r2
 8018036:	009b      	lsls	r3, r3, #2
 8018038:	189b      	adds	r3, r3, r2
 801803a:	00db      	lsls	r3, r3, #3
 801803c:	18c3      	adds	r3, r0, r3
 801803e:	185b      	adds	r3, r3, r1
 8018040:	2200      	movs	r2, #0
 8018042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8018044:	193b      	adds	r3, r7, r4
 8018046:	781a      	ldrb	r2, [r3, #0]
 8018048:	6878      	ldr	r0, [r7, #4]
 801804a:	23bc      	movs	r3, #188	@ 0xbc
 801804c:	0059      	lsls	r1, r3, #1
 801804e:	0013      	movs	r3, r2
 8018050:	009b      	lsls	r3, r3, #2
 8018052:	189b      	adds	r3, r3, r2
 8018054:	00db      	lsls	r3, r3, #3
 8018056:	18c3      	adds	r3, r0, r3
 8018058:	185b      	adds	r3, r3, r1
 801805a:	2200      	movs	r2, #0
 801805c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801805e:	193b      	adds	r3, r7, r4
 8018060:	781a      	ldrb	r2, [r3, #0]
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	23be      	movs	r3, #190	@ 0xbe
 8018066:	0059      	lsls	r1, r3, #1
 8018068:	0013      	movs	r3, r2
 801806a:	009b      	lsls	r3, r3, #2
 801806c:	189b      	adds	r3, r3, r2
 801806e:	00db      	lsls	r3, r3, #3
 8018070:	18c3      	adds	r3, r0, r3
 8018072:	185b      	adds	r3, r3, r1
 8018074:	2200      	movs	r2, #0
 8018076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8018078:	193b      	adds	r3, r7, r4
 801807a:	781a      	ldrb	r2, [r3, #0]
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	23c0      	movs	r3, #192	@ 0xc0
 8018080:	0059      	lsls	r1, r3, #1
 8018082:	0013      	movs	r3, r2
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	189b      	adds	r3, r3, r2
 8018088:	00db      	lsls	r3, r3, #3
 801808a:	18c3      	adds	r3, r0, r3
 801808c:	185b      	adds	r3, r3, r1
 801808e:	2200      	movs	r2, #0
 8018090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018092:	193b      	adds	r3, r7, r4
 8018094:	781a      	ldrb	r2, [r3, #0]
 8018096:	193b      	adds	r3, r7, r4
 8018098:	3201      	adds	r2, #1
 801809a:	701a      	strb	r2, [r3, #0]
 801809c:	230f      	movs	r3, #15
 801809e:	18fb      	adds	r3, r7, r3
 80180a0:	781a      	ldrb	r2, [r3, #0]
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	429a      	cmp	r2, r3
 80180a8:	d3a1      	bcc.n	8017fee <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	6818      	ldr	r0, [r3, #0]
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	466a      	mov	r2, sp
 80180b2:	0011      	movs	r1, r2
 80180b4:	001a      	movs	r2, r3
 80180b6:	3210      	adds	r2, #16
 80180b8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80180ba:	c170      	stmia	r1!, {r4, r5, r6}
 80180bc:	ca30      	ldmia	r2!, {r4, r5}
 80180be:	c130      	stmia	r1!, {r4, r5}
 80180c0:	6859      	ldr	r1, [r3, #4]
 80180c2:	689a      	ldr	r2, [r3, #8]
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	f005 fe4f 	bl	801dd68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2224      	movs	r2, #36	@ 0x24
 80180ce:	2100      	movs	r1, #0
 80180d0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	4a07      	ldr	r2, [pc, #28]	@ (80180f4 <HAL_PCD_Init+0x1fc>)
 80180d6:	2101      	movs	r1, #1
 80180d8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	69db      	ldr	r3, [r3, #28]
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d103      	bne.n	80180ea <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	0018      	movs	r0, r3
 80180e6:	f001 fd23 	bl	8019b30 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80180ea:	2300      	movs	r3, #0
}
 80180ec:	0018      	movs	r0, r3
 80180ee:	46bd      	mov	sp, r7
 80180f0:	b005      	add	sp, #20
 80180f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180f4:	000002a9 	.word	0x000002a9

080180f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8018100:	687a      	ldr	r2, [r7, #4]
 8018102:	23aa      	movs	r3, #170	@ 0xaa
 8018104:	009b      	lsls	r3, r3, #2
 8018106:	5cd3      	ldrb	r3, [r2, r3]
 8018108:	2b01      	cmp	r3, #1
 801810a:	d101      	bne.n	8018110 <HAL_PCD_Start+0x18>
 801810c:	2302      	movs	r3, #2
 801810e:	e014      	b.n	801813a <HAL_PCD_Start+0x42>
 8018110:	687a      	ldr	r2, [r7, #4]
 8018112:	23aa      	movs	r3, #170	@ 0xaa
 8018114:	009b      	lsls	r3, r3, #2
 8018116:	2101      	movs	r1, #1
 8018118:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	0018      	movs	r0, r3
 8018120:	f005 fdf2 	bl	801dd08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	0018      	movs	r0, r3
 801812a:	f007 fdf5 	bl	801fd18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	23aa      	movs	r3, #170	@ 0xaa
 8018132:	009b      	lsls	r3, r3, #2
 8018134:	2100      	movs	r1, #0
 8018136:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018138:	2300      	movs	r3, #0
}
 801813a:	0018      	movs	r0, r3
 801813c:	46bd      	mov	sp, r7
 801813e:	b002      	add	sp, #8
 8018140:	bd80      	pop	{r7, pc}
	...

08018144 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b084      	sub	sp, #16
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	0018      	movs	r0, r3
 8018152:	f007 fdf7 	bl	801fd44 <USB_ReadInterrupts>
 8018156:	0003      	movs	r3, r0
 8018158:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801815a:	68fa      	ldr	r2, [r7, #12]
 801815c:	2380      	movs	r3, #128	@ 0x80
 801815e:	021b      	lsls	r3, r3, #8
 8018160:	4013      	ands	r3, r2
 8018162:	d004      	beq.n	801816e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	0018      	movs	r0, r3
 8018168:	f000 fb62 	bl	8018830 <PCD_EP_ISR_Handler>

    return;
 801816c:	e11d      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801816e:	68fa      	ldr	r2, [r7, #12]
 8018170:	2380      	movs	r3, #128	@ 0x80
 8018172:	00db      	lsls	r3, r3, #3
 8018174:	4013      	ands	r3, r2
 8018176:	d015      	beq.n	80181a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2244      	movs	r2, #68	@ 0x44
 801817e:	5a9b      	ldrh	r3, [r3, r2]
 8018180:	b29a      	uxth	r2, r3
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	498a      	ldr	r1, [pc, #552]	@ (80183b0 <HAL_PCD_IRQHandler+0x26c>)
 8018188:	400a      	ands	r2, r1
 801818a:	b291      	uxth	r1, r2
 801818c:	2244      	movs	r2, #68	@ 0x44
 801818e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	0018      	movs	r0, r3
 8018194:	f009 fe95 	bl	8021ec2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2100      	movs	r1, #0
 801819c:	0018      	movs	r0, r3
 801819e:	f000 f915 	bl	80183cc <HAL_PCD_SetAddress>

    return;
 80181a2:	e102      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80181a4:	68fa      	ldr	r2, [r7, #12]
 80181a6:	2380      	movs	r3, #128	@ 0x80
 80181a8:	01db      	lsls	r3, r3, #7
 80181aa:	4013      	ands	r3, r2
 80181ac:	d00c      	beq.n	80181c8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	2244      	movs	r2, #68	@ 0x44
 80181b4:	5a9b      	ldrh	r3, [r3, r2]
 80181b6:	b29a      	uxth	r2, r3
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	497d      	ldr	r1, [pc, #500]	@ (80183b4 <HAL_PCD_IRQHandler+0x270>)
 80181be:	400a      	ands	r2, r1
 80181c0:	b291      	uxth	r1, r2
 80181c2:	2244      	movs	r2, #68	@ 0x44
 80181c4:	5299      	strh	r1, [r3, r2]

    return;
 80181c6:	e0f0      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80181c8:	68fa      	ldr	r2, [r7, #12]
 80181ca:	2380      	movs	r3, #128	@ 0x80
 80181cc:	019b      	lsls	r3, r3, #6
 80181ce:	4013      	ands	r3, r2
 80181d0:	d00c      	beq.n	80181ec <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	2244      	movs	r2, #68	@ 0x44
 80181d8:	5a9b      	ldrh	r3, [r3, r2]
 80181da:	b29a      	uxth	r2, r3
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	4975      	ldr	r1, [pc, #468]	@ (80183b8 <HAL_PCD_IRQHandler+0x274>)
 80181e2:	400a      	ands	r2, r1
 80181e4:	b291      	uxth	r1, r2
 80181e6:	2244      	movs	r2, #68	@ 0x44
 80181e8:	5299      	strh	r1, [r3, r2]

    return;
 80181ea:	e0de      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80181ec:	68fa      	ldr	r2, [r7, #12]
 80181ee:	2380      	movs	r3, #128	@ 0x80
 80181f0:	015b      	lsls	r3, r3, #5
 80181f2:	4013      	ands	r3, r2
 80181f4:	d038      	beq.n	8018268 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	2240      	movs	r2, #64	@ 0x40
 80181fc:	5a9b      	ldrh	r3, [r3, r2]
 80181fe:	b29a      	uxth	r2, r3
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	2104      	movs	r1, #4
 8018206:	438a      	bics	r2, r1
 8018208:	b291      	uxth	r1, r2
 801820a:	2240      	movs	r2, #64	@ 0x40
 801820c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	2240      	movs	r2, #64	@ 0x40
 8018214:	5a9b      	ldrh	r3, [r3, r2]
 8018216:	b29a      	uxth	r2, r3
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	2108      	movs	r1, #8
 801821e:	438a      	bics	r2, r1
 8018220:	b291      	uxth	r1, r2
 8018222:	2240      	movs	r2, #64	@ 0x40
 8018224:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8018226:	687a      	ldr	r2, [r7, #4]
 8018228:	23b8      	movs	r3, #184	@ 0xb8
 801822a:	009b      	lsls	r3, r3, #2
 801822c:	5cd3      	ldrb	r3, [r2, r3]
 801822e:	2b01      	cmp	r3, #1
 8018230:	d109      	bne.n	8018246 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	23b8      	movs	r3, #184	@ 0xb8
 8018236:	009b      	lsls	r3, r3, #2
 8018238:	2100      	movs	r1, #0
 801823a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2100      	movs	r1, #0
 8018240:	0018      	movs	r0, r3
 8018242:	f001 fc9f 	bl	8019b84 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	0018      	movs	r0, r3
 801824a:	f009 fe7b 	bl	8021f44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2244      	movs	r2, #68	@ 0x44
 8018254:	5a9b      	ldrh	r3, [r3, r2]
 8018256:	b29a      	uxth	r2, r3
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4957      	ldr	r1, [pc, #348]	@ (80183bc <HAL_PCD_IRQHandler+0x278>)
 801825e:	400a      	ands	r2, r1
 8018260:	b291      	uxth	r1, r2
 8018262:	2244      	movs	r2, #68	@ 0x44
 8018264:	5299      	strh	r1, [r3, r2]

    return;
 8018266:	e0a0      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8018268:	68fa      	ldr	r2, [r7, #12]
 801826a:	2380      	movs	r3, #128	@ 0x80
 801826c:	011b      	lsls	r3, r3, #4
 801826e:	4013      	ands	r3, r2
 8018270:	d028      	beq.n	80182c4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	2240      	movs	r2, #64	@ 0x40
 8018278:	5a9b      	ldrh	r3, [r3, r2]
 801827a:	b29a      	uxth	r2, r3
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2108      	movs	r1, #8
 8018282:	430a      	orrs	r2, r1
 8018284:	b291      	uxth	r1, r2
 8018286:	2240      	movs	r2, #64	@ 0x40
 8018288:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	2244      	movs	r2, #68	@ 0x44
 8018290:	5a9b      	ldrh	r3, [r3, r2]
 8018292:	b29a      	uxth	r2, r3
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	4949      	ldr	r1, [pc, #292]	@ (80183c0 <HAL_PCD_IRQHandler+0x27c>)
 801829a:	400a      	ands	r2, r1
 801829c:	b291      	uxth	r1, r2
 801829e:	2244      	movs	r2, #68	@ 0x44
 80182a0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	2240      	movs	r2, #64	@ 0x40
 80182a8:	5a9b      	ldrh	r3, [r3, r2]
 80182aa:	b29a      	uxth	r2, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	2104      	movs	r1, #4
 80182b2:	430a      	orrs	r2, r1
 80182b4:	b291      	uxth	r1, r2
 80182b6:	2240      	movs	r2, #64	@ 0x40
 80182b8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	0018      	movs	r0, r3
 80182be:	f009 fe25 	bl	8021f0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80182c2:	e072      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	2280      	movs	r2, #128	@ 0x80
 80182c8:	4013      	ands	r3, r2
 80182ca:	d046      	beq.n	801835a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	2244      	movs	r2, #68	@ 0x44
 80182d2:	5a9b      	ldrh	r3, [r3, r2]
 80182d4:	b29a      	uxth	r2, r3
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2180      	movs	r1, #128	@ 0x80
 80182dc:	438a      	bics	r2, r1
 80182de:	b291      	uxth	r1, r2
 80182e0:	2244      	movs	r2, #68	@ 0x44
 80182e2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	23b8      	movs	r3, #184	@ 0xb8
 80182e8:	009b      	lsls	r3, r3, #2
 80182ea:	5cd3      	ldrb	r3, [r2, r3]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d12f      	bne.n	8018350 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	2240      	movs	r2, #64	@ 0x40
 80182f6:	5a9b      	ldrh	r3, [r3, r2]
 80182f8:	b29a      	uxth	r2, r3
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	2104      	movs	r1, #4
 8018300:	430a      	orrs	r2, r1
 8018302:	b291      	uxth	r1, r2
 8018304:	2240      	movs	r2, #64	@ 0x40
 8018306:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	2240      	movs	r2, #64	@ 0x40
 801830e:	5a9b      	ldrh	r3, [r3, r2]
 8018310:	b29a      	uxth	r2, r3
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	2108      	movs	r1, #8
 8018318:	430a      	orrs	r2, r1
 801831a:	b291      	uxth	r1, r2
 801831c:	2240      	movs	r2, #64	@ 0x40
 801831e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8018320:	687a      	ldr	r2, [r7, #4]
 8018322:	23b8      	movs	r3, #184	@ 0xb8
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	2101      	movs	r1, #1
 8018328:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	2254      	movs	r2, #84	@ 0x54
 8018330:	5a9b      	ldrh	r3, [r3, r2]
 8018332:	b29b      	uxth	r3, r3
 8018334:	089b      	lsrs	r3, r3, #2
 8018336:	223c      	movs	r2, #60	@ 0x3c
 8018338:	4013      	ands	r3, r2
 801833a:	0019      	movs	r1, r3
 801833c:	687a      	ldr	r2, [r7, #4]
 801833e:	23b9      	movs	r3, #185	@ 0xb9
 8018340:	009b      	lsls	r3, r3, #2
 8018342:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	2101      	movs	r1, #1
 8018348:	0018      	movs	r0, r3
 801834a:	f001 fc1b 	bl	8019b84 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801834e:	e02c      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	0018      	movs	r0, r3
 8018354:	f009 fdda 	bl	8021f0c <HAL_PCD_SuspendCallback>
    return;
 8018358:	e027      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801835a:	68fa      	ldr	r2, [r7, #12]
 801835c:	2380      	movs	r3, #128	@ 0x80
 801835e:	009b      	lsls	r3, r3, #2
 8018360:	4013      	ands	r3, r2
 8018362:	d010      	beq.n	8018386 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	2244      	movs	r2, #68	@ 0x44
 801836a:	5a9b      	ldrh	r3, [r3, r2]
 801836c:	b29a      	uxth	r2, r3
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4914      	ldr	r1, [pc, #80]	@ (80183c4 <HAL_PCD_IRQHandler+0x280>)
 8018374:	400a      	ands	r2, r1
 8018376:	b291      	uxth	r1, r2
 8018378:	2244      	movs	r2, #68	@ 0x44
 801837a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	0018      	movs	r0, r3
 8018380:	f009 fd90 	bl	8021ea4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018384:	e011      	b.n	80183aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8018386:	68fa      	ldr	r2, [r7, #12]
 8018388:	2380      	movs	r3, #128	@ 0x80
 801838a:	005b      	lsls	r3, r3, #1
 801838c:	4013      	ands	r3, r2
 801838e:	d00c      	beq.n	80183aa <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	2244      	movs	r2, #68	@ 0x44
 8018396:	5a9b      	ldrh	r3, [r3, r2]
 8018398:	b29a      	uxth	r2, r3
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	490a      	ldr	r1, [pc, #40]	@ (80183c8 <HAL_PCD_IRQHandler+0x284>)
 80183a0:	400a      	ands	r2, r1
 80183a2:	b291      	uxth	r1, r2
 80183a4:	2244      	movs	r2, #68	@ 0x44
 80183a6:	5299      	strh	r1, [r3, r2]

    return;
 80183a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80183aa:	46bd      	mov	sp, r7
 80183ac:	b004      	add	sp, #16
 80183ae:	bd80      	pop	{r7, pc}
 80183b0:	fffffbff 	.word	0xfffffbff
 80183b4:	ffffbfff 	.word	0xffffbfff
 80183b8:	ffffdfff 	.word	0xffffdfff
 80183bc:	ffffefff 	.word	0xffffefff
 80183c0:	fffff7ff 	.word	0xfffff7ff
 80183c4:	fffffdff 	.word	0xfffffdff
 80183c8:	fffffeff 	.word	0xfffffeff

080183cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	000a      	movs	r2, r1
 80183d6:	1cfb      	adds	r3, r7, #3
 80183d8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80183da:	687a      	ldr	r2, [r7, #4]
 80183dc:	23aa      	movs	r3, #170	@ 0xaa
 80183de:	009b      	lsls	r3, r3, #2
 80183e0:	5cd3      	ldrb	r3, [r2, r3]
 80183e2:	2b01      	cmp	r3, #1
 80183e4:	d101      	bne.n	80183ea <HAL_PCD_SetAddress+0x1e>
 80183e6:	2302      	movs	r3, #2
 80183e8:	e017      	b.n	801841a <HAL_PCD_SetAddress+0x4e>
 80183ea:	687a      	ldr	r2, [r7, #4]
 80183ec:	23aa      	movs	r3, #170	@ 0xaa
 80183ee:	009b      	lsls	r3, r3, #2
 80183f0:	2101      	movs	r1, #1
 80183f2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	1cfa      	adds	r2, r7, #3
 80183f8:	2124      	movs	r1, #36	@ 0x24
 80183fa:	7812      	ldrb	r2, [r2, #0]
 80183fc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681a      	ldr	r2, [r3, #0]
 8018402:	1cfb      	adds	r3, r7, #3
 8018404:	781b      	ldrb	r3, [r3, #0]
 8018406:	0019      	movs	r1, r3
 8018408:	0010      	movs	r0, r2
 801840a:	f007 fc71 	bl	801fcf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801840e:	687a      	ldr	r2, [r7, #4]
 8018410:	23aa      	movs	r3, #170	@ 0xaa
 8018412:	009b      	lsls	r3, r3, #2
 8018414:	2100      	movs	r1, #0
 8018416:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018418:	2300      	movs	r3, #0
}
 801841a:	0018      	movs	r0, r3
 801841c:	46bd      	mov	sp, r7
 801841e:	b002      	add	sp, #8
 8018420:	bd80      	pop	{r7, pc}

08018422 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018422:	b590      	push	{r4, r7, lr}
 8018424:	b085      	sub	sp, #20
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
 801842a:	000c      	movs	r4, r1
 801842c:	0010      	movs	r0, r2
 801842e:	0019      	movs	r1, r3
 8018430:	1cfb      	adds	r3, r7, #3
 8018432:	1c22      	adds	r2, r4, #0
 8018434:	701a      	strb	r2, [r3, #0]
 8018436:	003b      	movs	r3, r7
 8018438:	1c02      	adds	r2, r0, #0
 801843a:	801a      	strh	r2, [r3, #0]
 801843c:	1cbb      	adds	r3, r7, #2
 801843e:	1c0a      	adds	r2, r1, #0
 8018440:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018442:	230b      	movs	r3, #11
 8018444:	18fb      	adds	r3, r7, r3
 8018446:	2200      	movs	r2, #0
 8018448:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801844a:	1cfb      	adds	r3, r7, #3
 801844c:	781b      	ldrb	r3, [r3, #0]
 801844e:	b25b      	sxtb	r3, r3
 8018450:	2b00      	cmp	r3, #0
 8018452:	da0f      	bge.n	8018474 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018454:	1cfb      	adds	r3, r7, #3
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	2207      	movs	r2, #7
 801845a:	4013      	ands	r3, r2
 801845c:	1c5a      	adds	r2, r3, #1
 801845e:	0013      	movs	r3, r2
 8018460:	009b      	lsls	r3, r3, #2
 8018462:	189b      	adds	r3, r3, r2
 8018464:	00db      	lsls	r3, r3, #3
 8018466:	687a      	ldr	r2, [r7, #4]
 8018468:	18d3      	adds	r3, r2, r3
 801846a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	2201      	movs	r2, #1
 8018470:	705a      	strb	r2, [r3, #1]
 8018472:	e00f      	b.n	8018494 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018474:	1cfb      	adds	r3, r7, #3
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	2207      	movs	r2, #7
 801847a:	401a      	ands	r2, r3
 801847c:	0013      	movs	r3, r2
 801847e:	009b      	lsls	r3, r3, #2
 8018480:	189b      	adds	r3, r3, r2
 8018482:	00db      	lsls	r3, r3, #3
 8018484:	3369      	adds	r3, #105	@ 0x69
 8018486:	33ff      	adds	r3, #255	@ 0xff
 8018488:	687a      	ldr	r2, [r7, #4]
 801848a:	18d3      	adds	r3, r2, r3
 801848c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	2200      	movs	r2, #0
 8018492:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018494:	1cfb      	adds	r3, r7, #3
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	2207      	movs	r2, #7
 801849a:	4013      	ands	r3, r2
 801849c:	b2da      	uxtb	r2, r3
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80184a2:	003b      	movs	r3, r7
 80184a4:	881a      	ldrh	r2, [r3, #0]
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	1cba      	adds	r2, r7, #2
 80184ae:	7812      	ldrb	r2, [r2, #0]
 80184b0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80184b2:	1cbb      	adds	r3, r7, #2
 80184b4:	781b      	ldrb	r3, [r3, #0]
 80184b6:	2b02      	cmp	r3, #2
 80184b8:	d102      	bne.n	80184c0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	2200      	movs	r2, #0
 80184be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80184c0:	687a      	ldr	r2, [r7, #4]
 80184c2:	23aa      	movs	r3, #170	@ 0xaa
 80184c4:	009b      	lsls	r3, r3, #2
 80184c6:	5cd3      	ldrb	r3, [r2, r3]
 80184c8:	2b01      	cmp	r3, #1
 80184ca:	d101      	bne.n	80184d0 <HAL_PCD_EP_Open+0xae>
 80184cc:	2302      	movs	r3, #2
 80184ce:	e013      	b.n	80184f8 <HAL_PCD_EP_Open+0xd6>
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	23aa      	movs	r3, #170	@ 0xaa
 80184d4:	009b      	lsls	r3, r3, #2
 80184d6:	2101      	movs	r1, #1
 80184d8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	68fa      	ldr	r2, [r7, #12]
 80184e0:	0011      	movs	r1, r2
 80184e2:	0018      	movs	r0, r3
 80184e4:	f005 fc68 	bl	801ddb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	23aa      	movs	r3, #170	@ 0xaa
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	2100      	movs	r1, #0
 80184f0:	54d1      	strb	r1, [r2, r3]

  return ret;
 80184f2:	230b      	movs	r3, #11
 80184f4:	18fb      	adds	r3, r7, r3
 80184f6:	781b      	ldrb	r3, [r3, #0]
}
 80184f8:	0018      	movs	r0, r3
 80184fa:	46bd      	mov	sp, r7
 80184fc:	b005      	add	sp, #20
 80184fe:	bd90      	pop	{r4, r7, pc}

08018500 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b084      	sub	sp, #16
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	000a      	movs	r2, r1
 801850a:	1cfb      	adds	r3, r7, #3
 801850c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801850e:	1cfb      	adds	r3, r7, #3
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	b25b      	sxtb	r3, r3
 8018514:	2b00      	cmp	r3, #0
 8018516:	da0f      	bge.n	8018538 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018518:	1cfb      	adds	r3, r7, #3
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	2207      	movs	r2, #7
 801851e:	4013      	ands	r3, r2
 8018520:	1c5a      	adds	r2, r3, #1
 8018522:	0013      	movs	r3, r2
 8018524:	009b      	lsls	r3, r3, #2
 8018526:	189b      	adds	r3, r3, r2
 8018528:	00db      	lsls	r3, r3, #3
 801852a:	687a      	ldr	r2, [r7, #4]
 801852c:	18d3      	adds	r3, r2, r3
 801852e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	2201      	movs	r2, #1
 8018534:	705a      	strb	r2, [r3, #1]
 8018536:	e00f      	b.n	8018558 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018538:	1cfb      	adds	r3, r7, #3
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	2207      	movs	r2, #7
 801853e:	401a      	ands	r2, r3
 8018540:	0013      	movs	r3, r2
 8018542:	009b      	lsls	r3, r3, #2
 8018544:	189b      	adds	r3, r3, r2
 8018546:	00db      	lsls	r3, r3, #3
 8018548:	3369      	adds	r3, #105	@ 0x69
 801854a:	33ff      	adds	r3, #255	@ 0xff
 801854c:	687a      	ldr	r2, [r7, #4]
 801854e:	18d3      	adds	r3, r2, r3
 8018550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	2200      	movs	r2, #0
 8018556:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018558:	1cfb      	adds	r3, r7, #3
 801855a:	781b      	ldrb	r3, [r3, #0]
 801855c:	2207      	movs	r2, #7
 801855e:	4013      	ands	r3, r2
 8018560:	b2da      	uxtb	r2, r3
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018566:	687a      	ldr	r2, [r7, #4]
 8018568:	23aa      	movs	r3, #170	@ 0xaa
 801856a:	009b      	lsls	r3, r3, #2
 801856c:	5cd3      	ldrb	r3, [r2, r3]
 801856e:	2b01      	cmp	r3, #1
 8018570:	d101      	bne.n	8018576 <HAL_PCD_EP_Close+0x76>
 8018572:	2302      	movs	r3, #2
 8018574:	e011      	b.n	801859a <HAL_PCD_EP_Close+0x9a>
 8018576:	687a      	ldr	r2, [r7, #4]
 8018578:	23aa      	movs	r3, #170	@ 0xaa
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	2101      	movs	r1, #1
 801857e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	68fa      	ldr	r2, [r7, #12]
 8018586:	0011      	movs	r1, r2
 8018588:	0018      	movs	r0, r3
 801858a:	f005 ffb7 	bl	801e4fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801858e:	687a      	ldr	r2, [r7, #4]
 8018590:	23aa      	movs	r3, #170	@ 0xaa
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	2100      	movs	r1, #0
 8018596:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018598:	2300      	movs	r3, #0
}
 801859a:	0018      	movs	r0, r3
 801859c:	46bd      	mov	sp, r7
 801859e:	b004      	add	sp, #16
 80185a0:	bd80      	pop	{r7, pc}

080185a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80185a2:	b580      	push	{r7, lr}
 80185a4:	b086      	sub	sp, #24
 80185a6:	af00      	add	r7, sp, #0
 80185a8:	60f8      	str	r0, [r7, #12]
 80185aa:	607a      	str	r2, [r7, #4]
 80185ac:	603b      	str	r3, [r7, #0]
 80185ae:	200b      	movs	r0, #11
 80185b0:	183b      	adds	r3, r7, r0
 80185b2:	1c0a      	adds	r2, r1, #0
 80185b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80185b6:	0001      	movs	r1, r0
 80185b8:	187b      	adds	r3, r7, r1
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	2207      	movs	r2, #7
 80185be:	401a      	ands	r2, r3
 80185c0:	0013      	movs	r3, r2
 80185c2:	009b      	lsls	r3, r3, #2
 80185c4:	189b      	adds	r3, r3, r2
 80185c6:	00db      	lsls	r3, r3, #3
 80185c8:	3369      	adds	r3, #105	@ 0x69
 80185ca:	33ff      	adds	r3, #255	@ 0xff
 80185cc:	68fa      	ldr	r2, [r7, #12]
 80185ce:	18d3      	adds	r3, r2, r3
 80185d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	687a      	ldr	r2, [r7, #4]
 80185d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	683a      	ldr	r2, [r7, #0]
 80185dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	2200      	movs	r2, #0
 80185e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	2200      	movs	r2, #0
 80185e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80185ea:	187b      	adds	r3, r7, r1
 80185ec:	781b      	ldrb	r3, [r3, #0]
 80185ee:	2207      	movs	r2, #7
 80185f0:	4013      	ands	r3, r2
 80185f2:	b2da      	uxtb	r2, r3
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	697a      	ldr	r2, [r7, #20]
 80185fe:	0011      	movs	r1, r2
 8018600:	0018      	movs	r0, r3
 8018602:	f006 f93b 	bl	801e87c <USB_EPStartXfer>

  return HAL_OK;
 8018606:	2300      	movs	r3, #0
}
 8018608:	0018      	movs	r0, r3
 801860a:	46bd      	mov	sp, r7
 801860c:	b006      	add	sp, #24
 801860e:	bd80      	pop	{r7, pc}

08018610 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b082      	sub	sp, #8
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
 8018618:	000a      	movs	r2, r1
 801861a:	1cfb      	adds	r3, r7, #3
 801861c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801861e:	1cfb      	adds	r3, r7, #3
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	2207      	movs	r2, #7
 8018624:	401a      	ands	r2, r3
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	23c2      	movs	r3, #194	@ 0xc2
 801862a:	0059      	lsls	r1, r3, #1
 801862c:	0013      	movs	r3, r2
 801862e:	009b      	lsls	r3, r3, #2
 8018630:	189b      	adds	r3, r3, r2
 8018632:	00db      	lsls	r3, r3, #3
 8018634:	18c3      	adds	r3, r0, r3
 8018636:	185b      	adds	r3, r3, r1
 8018638:	681b      	ldr	r3, [r3, #0]
}
 801863a:	0018      	movs	r0, r3
 801863c:	46bd      	mov	sp, r7
 801863e:	b002      	add	sp, #8
 8018640:	bd80      	pop	{r7, pc}

08018642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018642:	b580      	push	{r7, lr}
 8018644:	b086      	sub	sp, #24
 8018646:	af00      	add	r7, sp, #0
 8018648:	60f8      	str	r0, [r7, #12]
 801864a:	607a      	str	r2, [r7, #4]
 801864c:	603b      	str	r3, [r7, #0]
 801864e:	200b      	movs	r0, #11
 8018650:	183b      	adds	r3, r7, r0
 8018652:	1c0a      	adds	r2, r1, #0
 8018654:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018656:	183b      	adds	r3, r7, r0
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	2207      	movs	r2, #7
 801865c:	4013      	ands	r3, r2
 801865e:	1c5a      	adds	r2, r3, #1
 8018660:	0013      	movs	r3, r2
 8018662:	009b      	lsls	r3, r3, #2
 8018664:	189b      	adds	r3, r3, r2
 8018666:	00db      	lsls	r3, r3, #3
 8018668:	68fa      	ldr	r2, [r7, #12]
 801866a:	18d3      	adds	r3, r2, r3
 801866c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801866e:	697b      	ldr	r3, [r7, #20]
 8018670:	687a      	ldr	r2, [r7, #4]
 8018672:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	683a      	ldr	r2, [r7, #0]
 8018678:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	2224      	movs	r2, #36	@ 0x24
 801867e:	2101      	movs	r1, #1
 8018680:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	683a      	ldr	r2, [r7, #0]
 8018686:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8018688:	697b      	ldr	r3, [r7, #20]
 801868a:	2200      	movs	r2, #0
 801868c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801868e:	697b      	ldr	r3, [r7, #20]
 8018690:	2201      	movs	r2, #1
 8018692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018694:	183b      	adds	r3, r7, r0
 8018696:	781b      	ldrb	r3, [r3, #0]
 8018698:	2207      	movs	r2, #7
 801869a:	4013      	ands	r3, r2
 801869c:	b2da      	uxtb	r2, r3
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	697a      	ldr	r2, [r7, #20]
 80186a8:	0011      	movs	r1, r2
 80186aa:	0018      	movs	r0, r3
 80186ac:	f006 f8e6 	bl	801e87c <USB_EPStartXfer>

  return HAL_OK;
 80186b0:	2300      	movs	r3, #0
}
 80186b2:	0018      	movs	r0, r3
 80186b4:	46bd      	mov	sp, r7
 80186b6:	b006      	add	sp, #24
 80186b8:	bd80      	pop	{r7, pc}

080186ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80186ba:	b580      	push	{r7, lr}
 80186bc:	b084      	sub	sp, #16
 80186be:	af00      	add	r7, sp, #0
 80186c0:	6078      	str	r0, [r7, #4]
 80186c2:	000a      	movs	r2, r1
 80186c4:	1cfb      	adds	r3, r7, #3
 80186c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80186c8:	1cfb      	adds	r3, r7, #3
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	2207      	movs	r2, #7
 80186ce:	401a      	ands	r2, r3
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	429a      	cmp	r2, r3
 80186d6:	d901      	bls.n	80186dc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80186d8:	2301      	movs	r3, #1
 80186da:	e046      	b.n	801876a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80186dc:	1cfb      	adds	r3, r7, #3
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	b25b      	sxtb	r3, r3
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	da0f      	bge.n	8018706 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80186e6:	1cfb      	adds	r3, r7, #3
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	2207      	movs	r2, #7
 80186ec:	4013      	ands	r3, r2
 80186ee:	1c5a      	adds	r2, r3, #1
 80186f0:	0013      	movs	r3, r2
 80186f2:	009b      	lsls	r3, r3, #2
 80186f4:	189b      	adds	r3, r3, r2
 80186f6:	00db      	lsls	r3, r3, #3
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	18d3      	adds	r3, r2, r3
 80186fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	2201      	movs	r2, #1
 8018702:	705a      	strb	r2, [r3, #1]
 8018704:	e00d      	b.n	8018722 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018706:	1cfb      	adds	r3, r7, #3
 8018708:	781a      	ldrb	r2, [r3, #0]
 801870a:	0013      	movs	r3, r2
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	189b      	adds	r3, r3, r2
 8018710:	00db      	lsls	r3, r3, #3
 8018712:	3369      	adds	r3, #105	@ 0x69
 8018714:	33ff      	adds	r3, #255	@ 0xff
 8018716:	687a      	ldr	r2, [r7, #4]
 8018718:	18d3      	adds	r3, r2, r3
 801871a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2200      	movs	r2, #0
 8018720:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2201      	movs	r2, #1
 8018726:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018728:	1cfb      	adds	r3, r7, #3
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	2207      	movs	r2, #7
 801872e:	4013      	ands	r3, r2
 8018730:	b2da      	uxtb	r2, r3
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	23aa      	movs	r3, #170	@ 0xaa
 801873a:	009b      	lsls	r3, r3, #2
 801873c:	5cd3      	ldrb	r3, [r2, r3]
 801873e:	2b01      	cmp	r3, #1
 8018740:	d101      	bne.n	8018746 <HAL_PCD_EP_SetStall+0x8c>
 8018742:	2302      	movs	r3, #2
 8018744:	e011      	b.n	801876a <HAL_PCD_EP_SetStall+0xb0>
 8018746:	687a      	ldr	r2, [r7, #4]
 8018748:	23aa      	movs	r3, #170	@ 0xaa
 801874a:	009b      	lsls	r3, r3, #2
 801874c:	2101      	movs	r1, #1
 801874e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	68fa      	ldr	r2, [r7, #12]
 8018756:	0011      	movs	r1, r2
 8018758:	0018      	movs	r0, r3
 801875a:	f007 f9c7 	bl	801faec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801875e:	687a      	ldr	r2, [r7, #4]
 8018760:	23aa      	movs	r3, #170	@ 0xaa
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	2100      	movs	r1, #0
 8018766:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018768:	2300      	movs	r3, #0
}
 801876a:	0018      	movs	r0, r3
 801876c:	46bd      	mov	sp, r7
 801876e:	b004      	add	sp, #16
 8018770:	bd80      	pop	{r7, pc}

08018772 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018772:	b580      	push	{r7, lr}
 8018774:	b084      	sub	sp, #16
 8018776:	af00      	add	r7, sp, #0
 8018778:	6078      	str	r0, [r7, #4]
 801877a:	000a      	movs	r2, r1
 801877c:	1cfb      	adds	r3, r7, #3
 801877e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018780:	1cfb      	adds	r3, r7, #3
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	220f      	movs	r2, #15
 8018786:	401a      	ands	r2, r3
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	429a      	cmp	r2, r3
 801878e:	d901      	bls.n	8018794 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8018790:	2301      	movs	r3, #1
 8018792:	e048      	b.n	8018826 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018794:	1cfb      	adds	r3, r7, #3
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	b25b      	sxtb	r3, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	da0f      	bge.n	80187be <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801879e:	1cfb      	adds	r3, r7, #3
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	2207      	movs	r2, #7
 80187a4:	4013      	ands	r3, r2
 80187a6:	1c5a      	adds	r2, r3, #1
 80187a8:	0013      	movs	r3, r2
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	189b      	adds	r3, r3, r2
 80187ae:	00db      	lsls	r3, r3, #3
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	18d3      	adds	r3, r2, r3
 80187b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	2201      	movs	r2, #1
 80187ba:	705a      	strb	r2, [r3, #1]
 80187bc:	e00f      	b.n	80187de <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80187be:	1cfb      	adds	r3, r7, #3
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	2207      	movs	r2, #7
 80187c4:	401a      	ands	r2, r3
 80187c6:	0013      	movs	r3, r2
 80187c8:	009b      	lsls	r3, r3, #2
 80187ca:	189b      	adds	r3, r3, r2
 80187cc:	00db      	lsls	r3, r3, #3
 80187ce:	3369      	adds	r3, #105	@ 0x69
 80187d0:	33ff      	adds	r3, #255	@ 0xff
 80187d2:	687a      	ldr	r2, [r7, #4]
 80187d4:	18d3      	adds	r3, r2, r3
 80187d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	2200      	movs	r2, #0
 80187dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	2200      	movs	r2, #0
 80187e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80187e4:	1cfb      	adds	r3, r7, #3
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	2207      	movs	r2, #7
 80187ea:	4013      	ands	r3, r2
 80187ec:	b2da      	uxtb	r2, r3
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80187f2:	687a      	ldr	r2, [r7, #4]
 80187f4:	23aa      	movs	r3, #170	@ 0xaa
 80187f6:	009b      	lsls	r3, r3, #2
 80187f8:	5cd3      	ldrb	r3, [r2, r3]
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	d101      	bne.n	8018802 <HAL_PCD_EP_ClrStall+0x90>
 80187fe:	2302      	movs	r3, #2
 8018800:	e011      	b.n	8018826 <HAL_PCD_EP_ClrStall+0xb4>
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	23aa      	movs	r3, #170	@ 0xaa
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	2101      	movs	r1, #1
 801880a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	68fa      	ldr	r2, [r7, #12]
 8018812:	0011      	movs	r1, r2
 8018814:	0018      	movs	r0, r3
 8018816:	f007 f9b9 	bl	801fb8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801881a:	687a      	ldr	r2, [r7, #4]
 801881c:	23aa      	movs	r3, #170	@ 0xaa
 801881e:	009b      	lsls	r3, r3, #2
 8018820:	2100      	movs	r1, #0
 8018822:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018824:	2300      	movs	r3, #0
}
 8018826:	0018      	movs	r0, r3
 8018828:	46bd      	mov	sp, r7
 801882a:	b004      	add	sp, #16
 801882c:	bd80      	pop	{r7, pc}
	...

08018830 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8018830:	b5b0      	push	{r4, r5, r7, lr}
 8018832:	b096      	sub	sp, #88	@ 0x58
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8018838:	f000 fbec 	bl	8019014 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	204e      	movs	r0, #78	@ 0x4e
 8018842:	183b      	adds	r3, r7, r0
 8018844:	2144      	movs	r1, #68	@ 0x44
 8018846:	5a52      	ldrh	r2, [r2, r1]
 8018848:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801884a:	183b      	adds	r3, r7, r0
 801884c:	881b      	ldrh	r3, [r3, #0]
 801884e:	b2da      	uxtb	r2, r3
 8018850:	244d      	movs	r4, #77	@ 0x4d
 8018852:	193b      	adds	r3, r7, r4
 8018854:	210f      	movs	r1, #15
 8018856:	400a      	ands	r2, r1
 8018858:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801885a:	193b      	adds	r3, r7, r4
 801885c:	781b      	ldrb	r3, [r3, #0]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d000      	beq.n	8018864 <PCD_EP_ISR_Handler+0x34>
 8018862:	e18f      	b.n	8018b84 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8018864:	183b      	adds	r3, r7, r0
 8018866:	881b      	ldrh	r3, [r3, #0]
 8018868:	2210      	movs	r2, #16
 801886a:	4013      	ands	r3, r2
 801886c:	d155      	bne.n	801891a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	881b      	ldrh	r3, [r3, #0]
 8018874:	b29a      	uxth	r2, r3
 8018876:	200e      	movs	r0, #14
 8018878:	183b      	adds	r3, r7, r0
 801887a:	49bb      	ldr	r1, [pc, #748]	@ (8018b68 <PCD_EP_ISR_Handler+0x338>)
 801887c:	400a      	ands	r2, r1
 801887e:	801a      	strh	r2, [r3, #0]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	183a      	adds	r2, r7, r0
 8018886:	8812      	ldrh	r2, [r2, #0]
 8018888:	49b8      	ldr	r1, [pc, #736]	@ (8018b6c <PCD_EP_ISR_Handler+0x33c>)
 801888a:	430a      	orrs	r2, r1
 801888c:	b292      	uxth	r2, r2
 801888e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	3328      	adds	r3, #40	@ 0x28
 8018894:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	2250      	movs	r2, #80	@ 0x50
 801889c:	5a9b      	ldrh	r3, [r3, r2]
 801889e:	b29b      	uxth	r3, r3
 80188a0:	001a      	movs	r2, r3
 80188a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	00db      	lsls	r3, r3, #3
 80188a8:	18d2      	adds	r2, r2, r3
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	18d3      	adds	r3, r2, r3
 80188b0:	4aaf      	ldr	r2, [pc, #700]	@ (8018b70 <PCD_EP_ISR_Handler+0x340>)
 80188b2:	4694      	mov	ip, r2
 80188b4:	4463      	add	r3, ip
 80188b6:	881b      	ldrh	r3, [r3, #0]
 80188b8:	059b      	lsls	r3, r3, #22
 80188ba:	0d9a      	lsrs	r2, r3, #22
 80188bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80188c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188c2:	695a      	ldr	r2, [r3, #20]
 80188c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188c6:	69db      	ldr	r3, [r3, #28]
 80188c8:	18d2      	adds	r2, r2, r3
 80188ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2100      	movs	r1, #0
 80188d2:	0018      	movs	r0, r3
 80188d4:	f009 fac8 	bl	8021e68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2224      	movs	r2, #36	@ 0x24
 80188dc:	5c9b      	ldrb	r3, [r3, r2]
 80188de:	b2db      	uxtb	r3, r3
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d101      	bne.n	80188e8 <PCD_EP_ISR_Handler+0xb8>
 80188e4:	f000 fb96 	bl	8019014 <PCD_EP_ISR_Handler+0x7e4>
 80188e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188ea:	699b      	ldr	r3, [r3, #24]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d001      	beq.n	80188f4 <PCD_EP_ISR_Handler+0xc4>
 80188f0:	f000 fb90 	bl	8019014 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2224      	movs	r2, #36	@ 0x24
 80188f8:	5c9b      	ldrb	r3, [r3, r2]
 80188fa:	b2db      	uxtb	r3, r3
 80188fc:	2280      	movs	r2, #128	@ 0x80
 80188fe:	4252      	negs	r2, r2
 8018900:	4313      	orrs	r3, r2
 8018902:	b2da      	uxtb	r2, r3
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	0011      	movs	r1, r2
 801890a:	224c      	movs	r2, #76	@ 0x4c
 801890c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	2224      	movs	r2, #36	@ 0x24
 8018912:	2100      	movs	r1, #0
 8018914:	5499      	strb	r1, [r3, r2]
 8018916:	f000 fb7d 	bl	8019014 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	3369      	adds	r3, #105	@ 0x69
 801891e:	33ff      	adds	r3, #255	@ 0xff
 8018920:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681a      	ldr	r2, [r3, #0]
 8018926:	214a      	movs	r1, #74	@ 0x4a
 8018928:	187b      	adds	r3, r7, r1
 801892a:	8812      	ldrh	r2, [r2, #0]
 801892c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801892e:	187b      	adds	r3, r7, r1
 8018930:	881a      	ldrh	r2, [r3, #0]
 8018932:	2380      	movs	r3, #128	@ 0x80
 8018934:	011b      	lsls	r3, r3, #4
 8018936:	4013      	ands	r3, r2
 8018938:	d037      	beq.n	80189aa <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	2250      	movs	r2, #80	@ 0x50
 8018940:	5a9b      	ldrh	r3, [r3, r2]
 8018942:	b29b      	uxth	r3, r3
 8018944:	001a      	movs	r2, r3
 8018946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	00db      	lsls	r3, r3, #3
 801894c:	18d2      	adds	r2, r2, r3
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	18d3      	adds	r3, r2, r3
 8018954:	4a87      	ldr	r2, [pc, #540]	@ (8018b74 <PCD_EP_ISR_Handler+0x344>)
 8018956:	4694      	mov	ip, r2
 8018958:	4463      	add	r3, ip
 801895a:	881b      	ldrh	r3, [r3, #0]
 801895c:	059b      	lsls	r3, r3, #22
 801895e:	0d9a      	lsrs	r2, r3, #22
 8018960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018962:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	6818      	ldr	r0, [r3, #0]
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	22ac      	movs	r2, #172	@ 0xac
 801896c:	0092      	lsls	r2, r2, #2
 801896e:	1899      	adds	r1, r3, r2
 8018970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018972:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8018974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018976:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8018978:	b29b      	uxth	r3, r3
 801897a:	f007 fa3a 	bl	801fdf2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	881b      	ldrh	r3, [r3, #0]
 8018984:	b29a      	uxth	r2, r3
 8018986:	2010      	movs	r0, #16
 8018988:	183b      	adds	r3, r7, r0
 801898a:	497b      	ldr	r1, [pc, #492]	@ (8018b78 <PCD_EP_ISR_Handler+0x348>)
 801898c:	400a      	ands	r2, r1
 801898e:	801a      	strh	r2, [r3, #0]
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	183a      	adds	r2, r7, r0
 8018996:	8812      	ldrh	r2, [r2, #0]
 8018998:	2180      	movs	r1, #128	@ 0x80
 801899a:	430a      	orrs	r2, r1
 801899c:	b292      	uxth	r2, r2
 801899e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	0018      	movs	r0, r3
 80189a4:	f009 fa2a 	bl	8021dfc <HAL_PCD_SetupStageCallback>
 80189a8:	e334      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80189aa:	234a      	movs	r3, #74	@ 0x4a
 80189ac:	18fb      	adds	r3, r7, r3
 80189ae:	2200      	movs	r2, #0
 80189b0:	5e9b      	ldrsh	r3, [r3, r2]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	db00      	blt.n	80189b8 <PCD_EP_ISR_Handler+0x188>
 80189b6:	e32d      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	881b      	ldrh	r3, [r3, #0]
 80189be:	b29a      	uxth	r2, r3
 80189c0:	201e      	movs	r0, #30
 80189c2:	183b      	adds	r3, r7, r0
 80189c4:	496c      	ldr	r1, [pc, #432]	@ (8018b78 <PCD_EP_ISR_Handler+0x348>)
 80189c6:	400a      	ands	r2, r1
 80189c8:	801a      	strh	r2, [r3, #0]
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	183a      	adds	r2, r7, r0
 80189d0:	8812      	ldrh	r2, [r2, #0]
 80189d2:	2180      	movs	r1, #128	@ 0x80
 80189d4:	430a      	orrs	r2, r1
 80189d6:	b292      	uxth	r2, r2
 80189d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2250      	movs	r2, #80	@ 0x50
 80189e0:	5a9b      	ldrh	r3, [r3, r2]
 80189e2:	b29b      	uxth	r3, r3
 80189e4:	001a      	movs	r2, r3
 80189e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	18d2      	adds	r2, r2, r3
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	18d3      	adds	r3, r2, r3
 80189f4:	4a5f      	ldr	r2, [pc, #380]	@ (8018b74 <PCD_EP_ISR_Handler+0x344>)
 80189f6:	4694      	mov	ip, r2
 80189f8:	4463      	add	r3, ip
 80189fa:	881b      	ldrh	r3, [r3, #0]
 80189fc:	059b      	lsls	r3, r3, #22
 80189fe:	0d9a      	lsrs	r2, r3, #22
 8018a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8018a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a06:	69db      	ldr	r3, [r3, #28]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d01a      	beq.n	8018a42 <PCD_EP_ISR_Handler+0x212>
 8018a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a0e:	695b      	ldr	r3, [r3, #20]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d016      	beq.n	8018a42 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6818      	ldr	r0, [r3, #0]
 8018a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a1a:	6959      	ldr	r1, [r3, #20]
 8018a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8018a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	f007 f9e4 	bl	801fdf2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8018a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a2c:	695a      	ldr	r2, [r3, #20]
 8018a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a30:	69db      	ldr	r3, [r3, #28]
 8018a32:	18d2      	adds	r2, r2, r3
 8018a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	2100      	movs	r1, #0
 8018a3c:	0018      	movs	r0, r3
 8018a3e:	f009 f9f2 	bl	8021e26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681a      	ldr	r2, [r3, #0]
 8018a46:	214a      	movs	r1, #74	@ 0x4a
 8018a48:	187b      	adds	r3, r7, r1
 8018a4a:	8812      	ldrh	r2, [r2, #0]
 8018a4c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8018a4e:	187b      	adds	r3, r7, r1
 8018a50:	881a      	ldrh	r2, [r3, #0]
 8018a52:	2380      	movs	r3, #128	@ 0x80
 8018a54:	011b      	lsls	r3, r3, #4
 8018a56:	4013      	ands	r3, r2
 8018a58:	d000      	beq.n	8018a5c <PCD_EP_ISR_Handler+0x22c>
 8018a5a:	e2db      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
 8018a5c:	187b      	adds	r3, r7, r1
 8018a5e:	881a      	ldrh	r2, [r3, #0]
 8018a60:	23c0      	movs	r3, #192	@ 0xc0
 8018a62:	019b      	lsls	r3, r3, #6
 8018a64:	401a      	ands	r2, r3
 8018a66:	23c0      	movs	r3, #192	@ 0xc0
 8018a68:	019b      	lsls	r3, r3, #6
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d100      	bne.n	8018a70 <PCD_EP_ISR_Handler+0x240>
 8018a6e:	e2d1      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	61bb      	str	r3, [r7, #24]
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	2250      	movs	r2, #80	@ 0x50
 8018a7c:	5a9b      	ldrh	r3, [r3, r2]
 8018a7e:	b29b      	uxth	r3, r3
 8018a80:	001a      	movs	r2, r3
 8018a82:	69bb      	ldr	r3, [r7, #24]
 8018a84:	189b      	adds	r3, r3, r2
 8018a86:	61bb      	str	r3, [r7, #24]
 8018a88:	69bb      	ldr	r3, [r7, #24]
 8018a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8018b74 <PCD_EP_ISR_Handler+0x344>)
 8018a8c:	4694      	mov	ip, r2
 8018a8e:	4463      	add	r3, ip
 8018a90:	617b      	str	r3, [r7, #20]
 8018a92:	697b      	ldr	r3, [r7, #20]
 8018a94:	881b      	ldrh	r3, [r3, #0]
 8018a96:	b29b      	uxth	r3, r3
 8018a98:	059b      	lsls	r3, r3, #22
 8018a9a:	0d9b      	lsrs	r3, r3, #22
 8018a9c:	b29a      	uxth	r2, r3
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	801a      	strh	r2, [r3, #0]
 8018aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018aa4:	691b      	ldr	r3, [r3, #16]
 8018aa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8018aa8:	d91a      	bls.n	8018ae0 <PCD_EP_ISR_Handler+0x2b0>
 8018aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018aac:	691b      	ldr	r3, [r3, #16]
 8018aae:	095b      	lsrs	r3, r3, #5
 8018ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8018ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ab4:	691b      	ldr	r3, [r3, #16]
 8018ab6:	221f      	movs	r2, #31
 8018ab8:	4013      	ands	r3, r2
 8018aba:	d102      	bne.n	8018ac2 <PCD_EP_ISR_Handler+0x292>
 8018abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018abe:	3b01      	subs	r3, #1
 8018ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	881b      	ldrh	r3, [r3, #0]
 8018ac6:	b29a      	uxth	r2, r3
 8018ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018aca:	b29b      	uxth	r3, r3
 8018acc:	029b      	lsls	r3, r3, #10
 8018ace:	b29b      	uxth	r3, r3
 8018ad0:	4313      	orrs	r3, r2
 8018ad2:	b29b      	uxth	r3, r3
 8018ad4:	4a25      	ldr	r2, [pc, #148]	@ (8018b6c <PCD_EP_ISR_Handler+0x33c>)
 8018ad6:	4313      	orrs	r3, r2
 8018ad8:	b29a      	uxth	r2, r3
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	801a      	strh	r2, [r3, #0]
 8018ade:	e023      	b.n	8018b28 <PCD_EP_ISR_Handler+0x2f8>
 8018ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ae2:	691b      	ldr	r3, [r3, #16]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d108      	bne.n	8018afa <PCD_EP_ISR_Handler+0x2ca>
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	881b      	ldrh	r3, [r3, #0]
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	4a1f      	ldr	r2, [pc, #124]	@ (8018b6c <PCD_EP_ISR_Handler+0x33c>)
 8018af0:	4313      	orrs	r3, r2
 8018af2:	b29a      	uxth	r2, r3
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	801a      	strh	r2, [r3, #0]
 8018af8:	e016      	b.n	8018b28 <PCD_EP_ISR_Handler+0x2f8>
 8018afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018afc:	691b      	ldr	r3, [r3, #16]
 8018afe:	085b      	lsrs	r3, r3, #1
 8018b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b04:	691b      	ldr	r3, [r3, #16]
 8018b06:	2201      	movs	r2, #1
 8018b08:	4013      	ands	r3, r2
 8018b0a:	d002      	beq.n	8018b12 <PCD_EP_ISR_Handler+0x2e2>
 8018b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018b0e:	3301      	adds	r3, #1
 8018b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	881b      	ldrh	r3, [r3, #0]
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018b1a:	b29b      	uxth	r3, r3
 8018b1c:	029b      	lsls	r3, r3, #10
 8018b1e:	b29b      	uxth	r3, r3
 8018b20:	4313      	orrs	r3, r2
 8018b22:	b29a      	uxth	r2, r3
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	881b      	ldrh	r3, [r3, #0]
 8018b2e:	b29a      	uxth	r2, r3
 8018b30:	2012      	movs	r0, #18
 8018b32:	183b      	adds	r3, r7, r0
 8018b34:	4911      	ldr	r1, [pc, #68]	@ (8018b7c <PCD_EP_ISR_Handler+0x34c>)
 8018b36:	400a      	ands	r2, r1
 8018b38:	801a      	strh	r2, [r3, #0]
 8018b3a:	183b      	adds	r3, r7, r0
 8018b3c:	183a      	adds	r2, r7, r0
 8018b3e:	8812      	ldrh	r2, [r2, #0]
 8018b40:	2180      	movs	r1, #128	@ 0x80
 8018b42:	0149      	lsls	r1, r1, #5
 8018b44:	404a      	eors	r2, r1
 8018b46:	801a      	strh	r2, [r3, #0]
 8018b48:	183b      	adds	r3, r7, r0
 8018b4a:	183a      	adds	r2, r7, r0
 8018b4c:	8812      	ldrh	r2, [r2, #0]
 8018b4e:	2180      	movs	r1, #128	@ 0x80
 8018b50:	0189      	lsls	r1, r1, #6
 8018b52:	404a      	eors	r2, r1
 8018b54:	801a      	strh	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	183a      	adds	r2, r7, r0
 8018b5c:	8812      	ldrh	r2, [r2, #0]
 8018b5e:	4908      	ldr	r1, [pc, #32]	@ (8018b80 <PCD_EP_ISR_Handler+0x350>)
 8018b60:	430a      	orrs	r2, r1
 8018b62:	b292      	uxth	r2, r2
 8018b64:	801a      	strh	r2, [r3, #0]
 8018b66:	e255      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
 8018b68:	ffff8f0f 	.word	0xffff8f0f
 8018b6c:	ffff8000 	.word	0xffff8000
 8018b70:	00000402 	.word	0x00000402
 8018b74:	00000406 	.word	0x00000406
 8018b78:	00000f8f 	.word	0x00000f8f
 8018b7c:	ffffbf8f 	.word	0xffffbf8f
 8018b80:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	001a      	movs	r2, r3
 8018b8a:	204d      	movs	r0, #77	@ 0x4d
 8018b8c:	183b      	adds	r3, r7, r0
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	009b      	lsls	r3, r3, #2
 8018b92:	18d2      	adds	r2, r2, r3
 8018b94:	214a      	movs	r1, #74	@ 0x4a
 8018b96:	187b      	adds	r3, r7, r1
 8018b98:	8812      	ldrh	r2, [r2, #0]
 8018b9a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8018b9c:	187b      	adds	r3, r7, r1
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	5e9b      	ldrsh	r3, [r3, r2]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	db00      	blt.n	8018ba8 <PCD_EP_ISR_Handler+0x378>
 8018ba6:	e0fa      	b.n	8018d9e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	001a      	movs	r2, r3
 8018bae:	183b      	adds	r3, r7, r0
 8018bb0:	781b      	ldrb	r3, [r3, #0]
 8018bb2:	009b      	lsls	r3, r3, #2
 8018bb4:	18d3      	adds	r3, r2, r3
 8018bb6:	881b      	ldrh	r3, [r3, #0]
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	2448      	movs	r4, #72	@ 0x48
 8018bbc:	193b      	adds	r3, r7, r4
 8018bbe:	49d1      	ldr	r1, [pc, #836]	@ (8018f04 <PCD_EP_ISR_Handler+0x6d4>)
 8018bc0:	400a      	ands	r2, r1
 8018bc2:	801a      	strh	r2, [r3, #0]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	001a      	movs	r2, r3
 8018bca:	183b      	adds	r3, r7, r0
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	18d3      	adds	r3, r2, r3
 8018bd2:	193a      	adds	r2, r7, r4
 8018bd4:	8812      	ldrh	r2, [r2, #0]
 8018bd6:	2180      	movs	r1, #128	@ 0x80
 8018bd8:	430a      	orrs	r2, r1
 8018bda:	b292      	uxth	r2, r2
 8018bdc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8018bde:	183b      	adds	r3, r7, r0
 8018be0:	781a      	ldrb	r2, [r3, #0]
 8018be2:	0013      	movs	r3, r2
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	189b      	adds	r3, r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	3369      	adds	r3, #105	@ 0x69
 8018bec:	33ff      	adds	r3, #255	@ 0xff
 8018bee:	687a      	ldr	r2, [r7, #4]
 8018bf0:	18d3      	adds	r3, r2, r3
 8018bf2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8018bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bf6:	7b1b      	ldrb	r3, [r3, #12]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d125      	bne.n	8018c48 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	2250      	movs	r2, #80	@ 0x50
 8018c02:	5a9b      	ldrh	r3, [r3, r2]
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	001a      	movs	r2, r3
 8018c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	00db      	lsls	r3, r3, #3
 8018c0e:	18d2      	adds	r2, r2, r3
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	18d3      	adds	r3, r2, r3
 8018c16:	4abc      	ldr	r2, [pc, #752]	@ (8018f08 <PCD_EP_ISR_Handler+0x6d8>)
 8018c18:	4694      	mov	ip, r2
 8018c1a:	4463      	add	r3, ip
 8018c1c:	881a      	ldrh	r2, [r3, #0]
 8018c1e:	2450      	movs	r4, #80	@ 0x50
 8018c20:	193b      	adds	r3, r7, r4
 8018c22:	0592      	lsls	r2, r2, #22
 8018c24:	0d92      	lsrs	r2, r2, #22
 8018c26:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8018c28:	193b      	adds	r3, r7, r4
 8018c2a:	881b      	ldrh	r3, [r3, #0]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d100      	bne.n	8018c32 <PCD_EP_ISR_Handler+0x402>
 8018c30:	e08d      	b.n	8018d4e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6818      	ldr	r0, [r3, #0]
 8018c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c38:	6959      	ldr	r1, [r3, #20]
 8018c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c3c:	88da      	ldrh	r2, [r3, #6]
 8018c3e:	193b      	adds	r3, r7, r4
 8018c40:	881b      	ldrh	r3, [r3, #0]
 8018c42:	f007 f8d6 	bl	801fdf2 <USB_ReadPMA>
 8018c46:	e082      	b.n	8018d4e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8018c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c4a:	78db      	ldrb	r3, [r3, #3]
 8018c4c:	2b02      	cmp	r3, #2
 8018c4e:	d10c      	bne.n	8018c6a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8018c50:	2350      	movs	r3, #80	@ 0x50
 8018c52:	18fc      	adds	r4, r7, r3
 8018c54:	234a      	movs	r3, #74	@ 0x4a
 8018c56:	18fb      	adds	r3, r7, r3
 8018c58:	881a      	ldrh	r2, [r3, #0]
 8018c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	0018      	movs	r0, r3
 8018c60:	f000 f9ec 	bl	801903c <HAL_PCD_EP_DB_Receive>
 8018c64:	0003      	movs	r3, r0
 8018c66:	8023      	strh	r3, [r4, #0]
 8018c68:	e071      	b.n	8018d4e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	001a      	movs	r2, r3
 8018c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c72:	781b      	ldrb	r3, [r3, #0]
 8018c74:	009b      	lsls	r3, r3, #2
 8018c76:	18d3      	adds	r3, r2, r3
 8018c78:	881b      	ldrh	r3, [r3, #0]
 8018c7a:	b29a      	uxth	r2, r3
 8018c7c:	2052      	movs	r0, #82	@ 0x52
 8018c7e:	183b      	adds	r3, r7, r0
 8018c80:	49a2      	ldr	r1, [pc, #648]	@ (8018f0c <PCD_EP_ISR_Handler+0x6dc>)
 8018c82:	400a      	ands	r2, r1
 8018c84:	801a      	strh	r2, [r3, #0]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	001a      	movs	r2, r3
 8018c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	009b      	lsls	r3, r3, #2
 8018c92:	18d3      	adds	r3, r2, r3
 8018c94:	183a      	adds	r2, r7, r0
 8018c96:	8812      	ldrh	r2, [r2, #0]
 8018c98:	499d      	ldr	r1, [pc, #628]	@ (8018f10 <PCD_EP_ISR_Handler+0x6e0>)
 8018c9a:	430a      	orrs	r2, r1
 8018c9c:	b292      	uxth	r2, r2
 8018c9e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	001a      	movs	r2, r3
 8018ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	009b      	lsls	r3, r3, #2
 8018cac:	18d3      	adds	r3, r2, r3
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	b29b      	uxth	r3, r3
 8018cb2:	001a      	movs	r2, r3
 8018cb4:	2380      	movs	r3, #128	@ 0x80
 8018cb6:	01db      	lsls	r3, r3, #7
 8018cb8:	4013      	ands	r3, r2
 8018cba:	d024      	beq.n	8018d06 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2250      	movs	r2, #80	@ 0x50
 8018cc2:	5a9b      	ldrh	r3, [r3, r2]
 8018cc4:	b29b      	uxth	r3, r3
 8018cc6:	001a      	movs	r2, r3
 8018cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	00db      	lsls	r3, r3, #3
 8018cce:	18d2      	adds	r2, r2, r3
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	18d3      	adds	r3, r2, r3
 8018cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8018f14 <PCD_EP_ISR_Handler+0x6e4>)
 8018cd8:	4694      	mov	ip, r2
 8018cda:	4463      	add	r3, ip
 8018cdc:	881a      	ldrh	r2, [r3, #0]
 8018cde:	2450      	movs	r4, #80	@ 0x50
 8018ce0:	193b      	adds	r3, r7, r4
 8018ce2:	0592      	lsls	r2, r2, #22
 8018ce4:	0d92      	lsrs	r2, r2, #22
 8018ce6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8018ce8:	193b      	adds	r3, r7, r4
 8018cea:	881b      	ldrh	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d02e      	beq.n	8018d4e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6818      	ldr	r0, [r3, #0]
 8018cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018cf6:	6959      	ldr	r1, [r3, #20]
 8018cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018cfa:	891a      	ldrh	r2, [r3, #8]
 8018cfc:	193b      	adds	r3, r7, r4
 8018cfe:	881b      	ldrh	r3, [r3, #0]
 8018d00:	f007 f877 	bl	801fdf2 <USB_ReadPMA>
 8018d04:	e023      	b.n	8018d4e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	2250      	movs	r2, #80	@ 0x50
 8018d0c:	5a9b      	ldrh	r3, [r3, r2]
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	001a      	movs	r2, r3
 8018d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	18d2      	adds	r2, r2, r3
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	18d3      	adds	r3, r2, r3
 8018d20:	4a79      	ldr	r2, [pc, #484]	@ (8018f08 <PCD_EP_ISR_Handler+0x6d8>)
 8018d22:	4694      	mov	ip, r2
 8018d24:	4463      	add	r3, ip
 8018d26:	881a      	ldrh	r2, [r3, #0]
 8018d28:	2450      	movs	r4, #80	@ 0x50
 8018d2a:	193b      	adds	r3, r7, r4
 8018d2c:	0592      	lsls	r2, r2, #22
 8018d2e:	0d92      	lsrs	r2, r2, #22
 8018d30:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8018d32:	193b      	adds	r3, r7, r4
 8018d34:	881b      	ldrh	r3, [r3, #0]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d009      	beq.n	8018d4e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6818      	ldr	r0, [r3, #0]
 8018d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d40:	6959      	ldr	r1, [r3, #20]
 8018d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d44:	895a      	ldrh	r2, [r3, #10]
 8018d46:	193b      	adds	r3, r7, r4
 8018d48:	881b      	ldrh	r3, [r3, #0]
 8018d4a:	f007 f852 	bl	801fdf2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8018d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d50:	69da      	ldr	r2, [r3, #28]
 8018d52:	2150      	movs	r1, #80	@ 0x50
 8018d54:	187b      	adds	r3, r7, r1
 8018d56:	881b      	ldrh	r3, [r3, #0]
 8018d58:	18d2      	adds	r2, r2, r3
 8018d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8018d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d60:	695a      	ldr	r2, [r3, #20]
 8018d62:	187b      	adds	r3, r7, r1
 8018d64:	881b      	ldrh	r3, [r3, #0]
 8018d66:	18d2      	adds	r2, r2, r3
 8018d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8018d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d6e:	699b      	ldr	r3, [r3, #24]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d005      	beq.n	8018d80 <PCD_EP_ISR_Handler+0x550>
 8018d74:	187b      	adds	r3, r7, r1
 8018d76:	881a      	ldrh	r2, [r3, #0]
 8018d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d7a:	691b      	ldr	r3, [r3, #16]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d207      	bcs.n	8018d90 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8018d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d82:	781a      	ldrb	r2, [r3, #0]
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	0011      	movs	r1, r2
 8018d88:	0018      	movs	r0, r3
 8018d8a:	f009 f84c 	bl	8021e26 <HAL_PCD_DataOutStageCallback>
 8018d8e:	e006      	b.n	8018d9e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018d96:	0011      	movs	r1, r2
 8018d98:	0018      	movs	r0, r3
 8018d9a:	f005 fd6f 	bl	801e87c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8018d9e:	244a      	movs	r4, #74	@ 0x4a
 8018da0:	193b      	adds	r3, r7, r4
 8018da2:	881b      	ldrh	r3, [r3, #0]
 8018da4:	2280      	movs	r2, #128	@ 0x80
 8018da6:	4013      	ands	r3, r2
 8018da8:	d100      	bne.n	8018dac <PCD_EP_ISR_Handler+0x57c>
 8018daa:	e133      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8018dac:	204d      	movs	r0, #77	@ 0x4d
 8018dae:	183b      	adds	r3, r7, r0
 8018db0:	781b      	ldrb	r3, [r3, #0]
 8018db2:	1c5a      	adds	r2, r3, #1
 8018db4:	0013      	movs	r3, r2
 8018db6:	009b      	lsls	r3, r3, #2
 8018db8:	189b      	adds	r3, r3, r2
 8018dba:	00db      	lsls	r3, r3, #3
 8018dbc:	687a      	ldr	r2, [r7, #4]
 8018dbe:	18d3      	adds	r3, r2, r3
 8018dc0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	001a      	movs	r2, r3
 8018dc8:	183b      	adds	r3, r7, r0
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	009b      	lsls	r3, r3, #2
 8018dce:	18d3      	adds	r3, r2, r3
 8018dd0:	881b      	ldrh	r3, [r3, #0]
 8018dd2:	b29a      	uxth	r2, r3
 8018dd4:	2542      	movs	r5, #66	@ 0x42
 8018dd6:	197b      	adds	r3, r7, r5
 8018dd8:	494f      	ldr	r1, [pc, #316]	@ (8018f18 <PCD_EP_ISR_Handler+0x6e8>)
 8018dda:	400a      	ands	r2, r1
 8018ddc:	801a      	strh	r2, [r3, #0]
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	001a      	movs	r2, r3
 8018de4:	183b      	adds	r3, r7, r0
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	009b      	lsls	r3, r3, #2
 8018dea:	18d3      	adds	r3, r2, r3
 8018dec:	197a      	adds	r2, r7, r5
 8018dee:	8812      	ldrh	r2, [r2, #0]
 8018df0:	494a      	ldr	r1, [pc, #296]	@ (8018f1c <PCD_EP_ISR_Handler+0x6ec>)
 8018df2:	430a      	orrs	r2, r1
 8018df4:	b292      	uxth	r2, r2
 8018df6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8018df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dfa:	78db      	ldrb	r3, [r3, #3]
 8018dfc:	2b01      	cmp	r3, #1
 8018dfe:	d000      	beq.n	8018e02 <PCD_EP_ISR_Handler+0x5d2>
 8018e00:	e0af      	b.n	8018f62 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8018e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e04:	2200      	movs	r2, #0
 8018e06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8018e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e0a:	7b1b      	ldrb	r3, [r3, #12]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d100      	bne.n	8018e12 <PCD_EP_ISR_Handler+0x5e2>
 8018e10:	e09f      	b.n	8018f52 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8018e12:	193b      	adds	r3, r7, r4
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	2240      	movs	r2, #64	@ 0x40
 8018e18:	4013      	ands	r3, r2
 8018e1a:	d046      	beq.n	8018eaa <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e1e:	785b      	ldrb	r3, [r3, #1]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d125      	bne.n	8018e70 <PCD_EP_ISR_Handler+0x640>
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2250      	movs	r2, #80	@ 0x50
 8018e30:	5a9b      	ldrh	r3, [r3, r2]
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	001a      	movs	r2, r3
 8018e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e38:	189b      	adds	r3, r3, r2
 8018e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	00da      	lsls	r2, r3, #3
 8018e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e44:	18d3      	adds	r3, r2, r3
 8018e46:	4a33      	ldr	r2, [pc, #204]	@ (8018f14 <PCD_EP_ISR_Handler+0x6e4>)
 8018e48:	4694      	mov	ip, r2
 8018e4a:	4463      	add	r3, ip
 8018e4c:	623b      	str	r3, [r7, #32]
 8018e4e:	6a3b      	ldr	r3, [r7, #32]
 8018e50:	881b      	ldrh	r3, [r3, #0]
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	059b      	lsls	r3, r3, #22
 8018e56:	0d9b      	lsrs	r3, r3, #22
 8018e58:	b29a      	uxth	r2, r3
 8018e5a:	6a3b      	ldr	r3, [r7, #32]
 8018e5c:	801a      	strh	r2, [r3, #0]
 8018e5e:	6a3b      	ldr	r3, [r7, #32]
 8018e60:	881b      	ldrh	r3, [r3, #0]
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	4a2d      	ldr	r2, [pc, #180]	@ (8018f1c <PCD_EP_ISR_Handler+0x6ec>)
 8018e66:	4313      	orrs	r3, r2
 8018e68:	b29a      	uxth	r2, r3
 8018e6a:	6a3b      	ldr	r3, [r7, #32]
 8018e6c:	801a      	strh	r2, [r3, #0]
 8018e6e:	e070      	b.n	8018f52 <PCD_EP_ISR_Handler+0x722>
 8018e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e72:	785b      	ldrb	r3, [r3, #1]
 8018e74:	2b01      	cmp	r3, #1
 8018e76:	d16c      	bne.n	8018f52 <PCD_EP_ISR_Handler+0x722>
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	2250      	movs	r2, #80	@ 0x50
 8018e84:	5a9b      	ldrh	r3, [r3, r2]
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	001a      	movs	r2, r3
 8018e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e8c:	189b      	adds	r3, r3, r2
 8018e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	00da      	lsls	r2, r3, #3
 8018e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e98:	18d3      	adds	r3, r2, r3
 8018e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8018f14 <PCD_EP_ISR_Handler+0x6e4>)
 8018e9c:	4694      	mov	ip, r2
 8018e9e:	4463      	add	r3, ip
 8018ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	801a      	strh	r2, [r3, #0]
 8018ea8:	e053      	b.n	8018f52 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018eb2:	785b      	ldrb	r3, [r3, #1]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d133      	bne.n	8018f20 <PCD_EP_ISR_Handler+0x6f0>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	2250      	movs	r2, #80	@ 0x50
 8018ec4:	5a9b      	ldrh	r3, [r3, r2]
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	001a      	movs	r2, r3
 8018eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ecc:	189b      	adds	r3, r3, r2
 8018ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	00da      	lsls	r2, r3, #3
 8018ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ed8:	18d3      	adds	r3, r2, r3
 8018eda:	4a0b      	ldr	r2, [pc, #44]	@ (8018f08 <PCD_EP_ISR_Handler+0x6d8>)
 8018edc:	4694      	mov	ip, r2
 8018ede:	4463      	add	r3, ip
 8018ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ee4:	881b      	ldrh	r3, [r3, #0]
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	059b      	lsls	r3, r3, #22
 8018eea:	0d9b      	lsrs	r3, r3, #22
 8018eec:	b29a      	uxth	r2, r3
 8018eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ef0:	801a      	strh	r2, [r3, #0]
 8018ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ef4:	881b      	ldrh	r3, [r3, #0]
 8018ef6:	b29b      	uxth	r3, r3
 8018ef8:	4a08      	ldr	r2, [pc, #32]	@ (8018f1c <PCD_EP_ISR_Handler+0x6ec>)
 8018efa:	4313      	orrs	r3, r2
 8018efc:	b29a      	uxth	r2, r3
 8018efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f00:	801a      	strh	r2, [r3, #0]
 8018f02:	e026      	b.n	8018f52 <PCD_EP_ISR_Handler+0x722>
 8018f04:	00000f8f 	.word	0x00000f8f
 8018f08:	00000406 	.word	0x00000406
 8018f0c:	ffff8f8f 	.word	0xffff8f8f
 8018f10:	ffff80c0 	.word	0xffff80c0
 8018f14:	00000402 	.word	0x00000402
 8018f18:	ffff8f0f 	.word	0xffff8f0f
 8018f1c:	ffff8000 	.word	0xffff8000
 8018f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f22:	785b      	ldrb	r3, [r3, #1]
 8018f24:	2b01      	cmp	r3, #1
 8018f26:	d114      	bne.n	8018f52 <PCD_EP_ISR_Handler+0x722>
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	2250      	movs	r2, #80	@ 0x50
 8018f2e:	5a9b      	ldrh	r3, [r3, r2]
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	001a      	movs	r2, r3
 8018f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f36:	189b      	adds	r3, r3, r2
 8018f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f3c:	781b      	ldrb	r3, [r3, #0]
 8018f3e:	00da      	lsls	r2, r3, #3
 8018f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f42:	18d3      	adds	r3, r2, r3
 8018f44:	4a3b      	ldr	r2, [pc, #236]	@ (8019034 <PCD_EP_ISR_Handler+0x804>)
 8018f46:	4694      	mov	ip, r2
 8018f48:	4463      	add	r3, ip
 8018f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f4e:	2200      	movs	r2, #0
 8018f50:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f54:	781a      	ldrb	r2, [r3, #0]
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	0011      	movs	r1, r2
 8018f5a:	0018      	movs	r0, r3
 8018f5c:	f008 ff84 	bl	8021e68 <HAL_PCD_DataInStageCallback>
 8018f60:	e058      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8018f62:	234a      	movs	r3, #74	@ 0x4a
 8018f64:	18fb      	adds	r3, r7, r3
 8018f66:	881a      	ldrh	r2, [r3, #0]
 8018f68:	2380      	movs	r3, #128	@ 0x80
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	4013      	ands	r3, r2
 8018f6e:	d149      	bne.n	8019004 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	2250      	movs	r2, #80	@ 0x50
 8018f76:	5a9b      	ldrh	r3, [r3, r2]
 8018f78:	b29b      	uxth	r3, r3
 8018f7a:	001a      	movs	r2, r3
 8018f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f7e:	781b      	ldrb	r3, [r3, #0]
 8018f80:	00db      	lsls	r3, r3, #3
 8018f82:	18d2      	adds	r2, r2, r3
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	18d3      	adds	r3, r2, r3
 8018f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8019038 <PCD_EP_ISR_Handler+0x808>)
 8018f8c:	4694      	mov	ip, r2
 8018f8e:	4463      	add	r3, ip
 8018f90:	881a      	ldrh	r2, [r3, #0]
 8018f92:	2140      	movs	r1, #64	@ 0x40
 8018f94:	187b      	adds	r3, r7, r1
 8018f96:	0592      	lsls	r2, r2, #22
 8018f98:	0d92      	lsrs	r2, r2, #22
 8018f9a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8018f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f9e:	699a      	ldr	r2, [r3, #24]
 8018fa0:	187b      	adds	r3, r7, r1
 8018fa2:	881b      	ldrh	r3, [r3, #0]
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d907      	bls.n	8018fb8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8018fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018faa:	699a      	ldr	r2, [r3, #24]
 8018fac:	187b      	adds	r3, r7, r1
 8018fae:	881b      	ldrh	r3, [r3, #0]
 8018fb0:	1ad2      	subs	r2, r2, r3
 8018fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fb4:	619a      	str	r2, [r3, #24]
 8018fb6:	e002      	b.n	8018fbe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8018fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fba:	2200      	movs	r2, #0
 8018fbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8018fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fc0:	699b      	ldr	r3, [r3, #24]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d107      	bne.n	8018fd6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fc8:	781a      	ldrb	r2, [r3, #0]
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	0011      	movs	r1, r2
 8018fce:	0018      	movs	r0, r3
 8018fd0:	f008 ff4a 	bl	8021e68 <HAL_PCD_DataInStageCallback>
 8018fd4:	e01e      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8018fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fd8:	695a      	ldr	r2, [r3, #20]
 8018fda:	2140      	movs	r1, #64	@ 0x40
 8018fdc:	187b      	adds	r3, r7, r1
 8018fde:	881b      	ldrh	r3, [r3, #0]
 8018fe0:	18d2      	adds	r2, r2, r3
 8018fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fe4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8018fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fe8:	69da      	ldr	r2, [r3, #28]
 8018fea:	187b      	adds	r3, r7, r1
 8018fec:	881b      	ldrh	r3, [r3, #0]
 8018fee:	18d2      	adds	r2, r2, r3
 8018ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ff2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018ffa:	0011      	movs	r1, r2
 8018ffc:	0018      	movs	r0, r3
 8018ffe:	f005 fc3d 	bl	801e87c <USB_EPStartXfer>
 8019002:	e007      	b.n	8019014 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8019004:	234a      	movs	r3, #74	@ 0x4a
 8019006:	18fb      	adds	r3, r7, r3
 8019008:	881a      	ldrh	r2, [r3, #0]
 801900a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	0018      	movs	r0, r3
 8019010:	f000 f930 	bl	8019274 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	2244      	movs	r2, #68	@ 0x44
 801901a:	5a9b      	ldrh	r3, [r3, r2]
 801901c:	b29b      	uxth	r3, r3
 801901e:	b21b      	sxth	r3, r3
 8019020:	2b00      	cmp	r3, #0
 8019022:	da01      	bge.n	8019028 <PCD_EP_ISR_Handler+0x7f8>
 8019024:	f7ff fc0a 	bl	801883c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8019028:	2300      	movs	r3, #0
}
 801902a:	0018      	movs	r0, r3
 801902c:	46bd      	mov	sp, r7
 801902e:	b016      	add	sp, #88	@ 0x58
 8019030:	bdb0      	pop	{r4, r5, r7, pc}
 8019032:	46c0      	nop			@ (mov r8, r8)
 8019034:	00000406 	.word	0x00000406
 8019038:	00000402 	.word	0x00000402

0801903c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801903c:	b590      	push	{r4, r7, lr}
 801903e:	b089      	sub	sp, #36	@ 0x24
 8019040:	af00      	add	r7, sp, #0
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	1dbb      	adds	r3, r7, #6
 8019048:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801904a:	1dbb      	adds	r3, r7, #6
 801904c:	881a      	ldrh	r2, [r3, #0]
 801904e:	2380      	movs	r3, #128	@ 0x80
 8019050:	01db      	lsls	r3, r3, #7
 8019052:	4013      	ands	r3, r2
 8019054:	d100      	bne.n	8019058 <HAL_PCD_EP_DB_Receive+0x1c>
 8019056:	e07d      	b.n	8019154 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	2250      	movs	r2, #80	@ 0x50
 801905e:	5a9b      	ldrh	r3, [r3, r2]
 8019060:	b29b      	uxth	r3, r3
 8019062:	001a      	movs	r2, r3
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	781b      	ldrb	r3, [r3, #0]
 8019068:	00db      	lsls	r3, r3, #3
 801906a:	18d2      	adds	r2, r2, r3
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	18d3      	adds	r3, r2, r3
 8019072:	4a7a      	ldr	r2, [pc, #488]	@ (801925c <HAL_PCD_EP_DB_Receive+0x220>)
 8019074:	4694      	mov	ip, r2
 8019076:	4463      	add	r3, ip
 8019078:	881a      	ldrh	r2, [r3, #0]
 801907a:	211a      	movs	r1, #26
 801907c:	187b      	adds	r3, r7, r1
 801907e:	0592      	lsls	r2, r2, #22
 8019080:	0d92      	lsrs	r2, r2, #22
 8019082:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	699a      	ldr	r2, [r3, #24]
 8019088:	187b      	adds	r3, r7, r1
 801908a:	881b      	ldrh	r3, [r3, #0]
 801908c:	429a      	cmp	r2, r3
 801908e:	d307      	bcc.n	80190a0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	699a      	ldr	r2, [r3, #24]
 8019094:	187b      	adds	r3, r7, r1
 8019096:	881b      	ldrh	r3, [r3, #0]
 8019098:	1ad2      	subs	r2, r2, r3
 801909a:	68bb      	ldr	r3, [r7, #8]
 801909c:	619a      	str	r2, [r3, #24]
 801909e:	e002      	b.n	80190a6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	2200      	movs	r2, #0
 80190a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	699b      	ldr	r3, [r3, #24]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d121      	bne.n	80190f2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	001a      	movs	r2, r3
 80190b4:	68bb      	ldr	r3, [r7, #8]
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	009b      	lsls	r3, r3, #2
 80190ba:	18d3      	adds	r3, r2, r3
 80190bc:	881b      	ldrh	r3, [r3, #0]
 80190be:	b29a      	uxth	r2, r3
 80190c0:	2018      	movs	r0, #24
 80190c2:	183b      	adds	r3, r7, r0
 80190c4:	4966      	ldr	r1, [pc, #408]	@ (8019260 <HAL_PCD_EP_DB_Receive+0x224>)
 80190c6:	400a      	ands	r2, r1
 80190c8:	801a      	strh	r2, [r3, #0]
 80190ca:	183b      	adds	r3, r7, r0
 80190cc:	183a      	adds	r2, r7, r0
 80190ce:	8812      	ldrh	r2, [r2, #0]
 80190d0:	2180      	movs	r1, #128	@ 0x80
 80190d2:	0189      	lsls	r1, r1, #6
 80190d4:	404a      	eors	r2, r1
 80190d6:	801a      	strh	r2, [r3, #0]
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	001a      	movs	r2, r3
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	781b      	ldrb	r3, [r3, #0]
 80190e2:	009b      	lsls	r3, r3, #2
 80190e4:	18d3      	adds	r3, r2, r3
 80190e6:	183a      	adds	r2, r7, r0
 80190e8:	8812      	ldrh	r2, [r2, #0]
 80190ea:	495e      	ldr	r1, [pc, #376]	@ (8019264 <HAL_PCD_EP_DB_Receive+0x228>)
 80190ec:	430a      	orrs	r2, r1
 80190ee:	b292      	uxth	r2, r2
 80190f0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80190f2:	1dbb      	adds	r3, r7, #6
 80190f4:	881b      	ldrh	r3, [r3, #0]
 80190f6:	2240      	movs	r2, #64	@ 0x40
 80190f8:	4013      	ands	r3, r2
 80190fa:	d01a      	beq.n	8019132 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	001a      	movs	r2, r3
 8019102:	68bb      	ldr	r3, [r7, #8]
 8019104:	781b      	ldrb	r3, [r3, #0]
 8019106:	009b      	lsls	r3, r3, #2
 8019108:	18d3      	adds	r3, r2, r3
 801910a:	881b      	ldrh	r3, [r3, #0]
 801910c:	b29a      	uxth	r2, r3
 801910e:	2016      	movs	r0, #22
 8019110:	183b      	adds	r3, r7, r0
 8019112:	4955      	ldr	r1, [pc, #340]	@ (8019268 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019114:	400a      	ands	r2, r1
 8019116:	801a      	strh	r2, [r3, #0]
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	001a      	movs	r2, r3
 801911e:	68bb      	ldr	r3, [r7, #8]
 8019120:	781b      	ldrb	r3, [r3, #0]
 8019122:	009b      	lsls	r3, r3, #2
 8019124:	18d3      	adds	r3, r2, r3
 8019126:	183a      	adds	r2, r7, r0
 8019128:	8812      	ldrh	r2, [r2, #0]
 801912a:	4950      	ldr	r1, [pc, #320]	@ (801926c <HAL_PCD_EP_DB_Receive+0x230>)
 801912c:	430a      	orrs	r2, r1
 801912e:	b292      	uxth	r2, r2
 8019130:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019132:	241a      	movs	r4, #26
 8019134:	193b      	adds	r3, r7, r4
 8019136:	881b      	ldrh	r3, [r3, #0]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d100      	bne.n	801913e <HAL_PCD_EP_DB_Receive+0x102>
 801913c:	e086      	b.n	801924c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	6818      	ldr	r0, [r3, #0]
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	6959      	ldr	r1, [r3, #20]
 8019146:	68bb      	ldr	r3, [r7, #8]
 8019148:	891a      	ldrh	r2, [r3, #8]
 801914a:	193b      	adds	r3, r7, r4
 801914c:	881b      	ldrh	r3, [r3, #0]
 801914e:	f006 fe50 	bl	801fdf2 <USB_ReadPMA>
 8019152:	e07b      	b.n	801924c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2250      	movs	r2, #80	@ 0x50
 801915a:	5a9b      	ldrh	r3, [r3, r2]
 801915c:	b29b      	uxth	r3, r3
 801915e:	001a      	movs	r2, r3
 8019160:	68bb      	ldr	r3, [r7, #8]
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	00db      	lsls	r3, r3, #3
 8019166:	18d2      	adds	r2, r2, r3
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	18d3      	adds	r3, r2, r3
 801916e:	4a40      	ldr	r2, [pc, #256]	@ (8019270 <HAL_PCD_EP_DB_Receive+0x234>)
 8019170:	4694      	mov	ip, r2
 8019172:	4463      	add	r3, ip
 8019174:	881a      	ldrh	r2, [r3, #0]
 8019176:	211a      	movs	r1, #26
 8019178:	187b      	adds	r3, r7, r1
 801917a:	0592      	lsls	r2, r2, #22
 801917c:	0d92      	lsrs	r2, r2, #22
 801917e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019180:	68bb      	ldr	r3, [r7, #8]
 8019182:	699a      	ldr	r2, [r3, #24]
 8019184:	187b      	adds	r3, r7, r1
 8019186:	881b      	ldrh	r3, [r3, #0]
 8019188:	429a      	cmp	r2, r3
 801918a:	d307      	bcc.n	801919c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801918c:	68bb      	ldr	r3, [r7, #8]
 801918e:	699a      	ldr	r2, [r3, #24]
 8019190:	187b      	adds	r3, r7, r1
 8019192:	881b      	ldrh	r3, [r3, #0]
 8019194:	1ad2      	subs	r2, r2, r3
 8019196:	68bb      	ldr	r3, [r7, #8]
 8019198:	619a      	str	r2, [r3, #24]
 801919a:	e002      	b.n	80191a2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801919c:	68bb      	ldr	r3, [r7, #8]
 801919e:	2200      	movs	r2, #0
 80191a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80191a2:	68bb      	ldr	r3, [r7, #8]
 80191a4:	699b      	ldr	r3, [r3, #24]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d121      	bne.n	80191ee <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	001a      	movs	r2, r3
 80191b0:	68bb      	ldr	r3, [r7, #8]
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	009b      	lsls	r3, r3, #2
 80191b6:	18d3      	adds	r3, r2, r3
 80191b8:	881b      	ldrh	r3, [r3, #0]
 80191ba:	b29a      	uxth	r2, r3
 80191bc:	201e      	movs	r0, #30
 80191be:	183b      	adds	r3, r7, r0
 80191c0:	4927      	ldr	r1, [pc, #156]	@ (8019260 <HAL_PCD_EP_DB_Receive+0x224>)
 80191c2:	400a      	ands	r2, r1
 80191c4:	801a      	strh	r2, [r3, #0]
 80191c6:	183b      	adds	r3, r7, r0
 80191c8:	183a      	adds	r2, r7, r0
 80191ca:	8812      	ldrh	r2, [r2, #0]
 80191cc:	2180      	movs	r1, #128	@ 0x80
 80191ce:	0189      	lsls	r1, r1, #6
 80191d0:	404a      	eors	r2, r1
 80191d2:	801a      	strh	r2, [r3, #0]
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	001a      	movs	r2, r3
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	781b      	ldrb	r3, [r3, #0]
 80191de:	009b      	lsls	r3, r3, #2
 80191e0:	18d3      	adds	r3, r2, r3
 80191e2:	183a      	adds	r2, r7, r0
 80191e4:	8812      	ldrh	r2, [r2, #0]
 80191e6:	491f      	ldr	r1, [pc, #124]	@ (8019264 <HAL_PCD_EP_DB_Receive+0x228>)
 80191e8:	430a      	orrs	r2, r1
 80191ea:	b292      	uxth	r2, r2
 80191ec:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80191ee:	1dbb      	adds	r3, r7, #6
 80191f0:	881b      	ldrh	r3, [r3, #0]
 80191f2:	2240      	movs	r2, #64	@ 0x40
 80191f4:	4013      	ands	r3, r2
 80191f6:	d11a      	bne.n	801922e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	001a      	movs	r2, r3
 80191fe:	68bb      	ldr	r3, [r7, #8]
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	009b      	lsls	r3, r3, #2
 8019204:	18d3      	adds	r3, r2, r3
 8019206:	881b      	ldrh	r3, [r3, #0]
 8019208:	b29a      	uxth	r2, r3
 801920a:	201c      	movs	r0, #28
 801920c:	183b      	adds	r3, r7, r0
 801920e:	4916      	ldr	r1, [pc, #88]	@ (8019268 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019210:	400a      	ands	r2, r1
 8019212:	801a      	strh	r2, [r3, #0]
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	001a      	movs	r2, r3
 801921a:	68bb      	ldr	r3, [r7, #8]
 801921c:	781b      	ldrb	r3, [r3, #0]
 801921e:	009b      	lsls	r3, r3, #2
 8019220:	18d3      	adds	r3, r2, r3
 8019222:	183a      	adds	r2, r7, r0
 8019224:	8812      	ldrh	r2, [r2, #0]
 8019226:	4911      	ldr	r1, [pc, #68]	@ (801926c <HAL_PCD_EP_DB_Receive+0x230>)
 8019228:	430a      	orrs	r2, r1
 801922a:	b292      	uxth	r2, r2
 801922c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801922e:	241a      	movs	r4, #26
 8019230:	193b      	adds	r3, r7, r4
 8019232:	881b      	ldrh	r3, [r3, #0]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d009      	beq.n	801924c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	6818      	ldr	r0, [r3, #0]
 801923c:	68bb      	ldr	r3, [r7, #8]
 801923e:	6959      	ldr	r1, [r3, #20]
 8019240:	68bb      	ldr	r3, [r7, #8]
 8019242:	895a      	ldrh	r2, [r3, #10]
 8019244:	193b      	adds	r3, r7, r4
 8019246:	881b      	ldrh	r3, [r3, #0]
 8019248:	f006 fdd3 	bl	801fdf2 <USB_ReadPMA>
    }
  }

  return count;
 801924c:	231a      	movs	r3, #26
 801924e:	18fb      	adds	r3, r7, r3
 8019250:	881b      	ldrh	r3, [r3, #0]
}
 8019252:	0018      	movs	r0, r3
 8019254:	46bd      	mov	sp, r7
 8019256:	b009      	add	sp, #36	@ 0x24
 8019258:	bd90      	pop	{r4, r7, pc}
 801925a:	46c0      	nop			@ (mov r8, r8)
 801925c:	00000402 	.word	0x00000402
 8019260:	ffffbf8f 	.word	0xffffbf8f
 8019264:	ffff8080 	.word	0xffff8080
 8019268:	ffff8f8f 	.word	0xffff8f8f
 801926c:	ffff80c0 	.word	0xffff80c0
 8019270:	00000406 	.word	0x00000406

08019274 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b0a4      	sub	sp, #144	@ 0x90
 8019278:	af00      	add	r7, sp, #0
 801927a:	60f8      	str	r0, [r7, #12]
 801927c:	60b9      	str	r1, [r7, #8]
 801927e:	1dbb      	adds	r3, r7, #6
 8019280:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019282:	1dbb      	adds	r3, r7, #6
 8019284:	881b      	ldrh	r3, [r3, #0]
 8019286:	2240      	movs	r2, #64	@ 0x40
 8019288:	4013      	ands	r3, r2
 801928a:	d100      	bne.n	801928e <HAL_PCD_EP_DB_Transmit+0x1a>
 801928c:	e1e4      	b.n	8019658 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	2250      	movs	r2, #80	@ 0x50
 8019294:	5a9b      	ldrh	r3, [r3, r2]
 8019296:	b29b      	uxth	r3, r3
 8019298:	001a      	movs	r2, r3
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	00db      	lsls	r3, r3, #3
 80192a0:	18d2      	adds	r2, r2, r3
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	18d3      	adds	r3, r2, r3
 80192a8:	4ad0      	ldr	r2, [pc, #832]	@ (80195ec <HAL_PCD_EP_DB_Transmit+0x378>)
 80192aa:	4694      	mov	ip, r2
 80192ac:	4463      	add	r3, ip
 80192ae:	881a      	ldrh	r2, [r3, #0]
 80192b0:	2186      	movs	r1, #134	@ 0x86
 80192b2:	187b      	adds	r3, r7, r1
 80192b4:	0592      	lsls	r2, r2, #22
 80192b6:	0d92      	lsrs	r2, r2, #22
 80192b8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80192ba:	68bb      	ldr	r3, [r7, #8]
 80192bc:	699a      	ldr	r2, [r3, #24]
 80192be:	187b      	adds	r3, r7, r1
 80192c0:	881b      	ldrh	r3, [r3, #0]
 80192c2:	429a      	cmp	r2, r3
 80192c4:	d907      	bls.n	80192d6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80192c6:	68bb      	ldr	r3, [r7, #8]
 80192c8:	699a      	ldr	r2, [r3, #24]
 80192ca:	187b      	adds	r3, r7, r1
 80192cc:	881b      	ldrh	r3, [r3, #0]
 80192ce:	1ad2      	subs	r2, r2, r3
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	619a      	str	r2, [r3, #24]
 80192d4:	e002      	b.n	80192dc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	2200      	movs	r2, #0
 80192da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	699b      	ldr	r3, [r3, #24]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d000      	beq.n	80192e6 <HAL_PCD_EP_DB_Transmit+0x72>
 80192e4:	e0b5      	b.n	8019452 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	785b      	ldrb	r3, [r3, #1]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d125      	bne.n	801933a <HAL_PCD_EP_DB_Transmit+0xc6>
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2250      	movs	r2, #80	@ 0x50
 80192fa:	5a9b      	ldrh	r3, [r3, r2]
 80192fc:	b29b      	uxth	r3, r3
 80192fe:	001a      	movs	r2, r3
 8019300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019302:	189b      	adds	r3, r3, r2
 8019304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019306:	68bb      	ldr	r3, [r7, #8]
 8019308:	781b      	ldrb	r3, [r3, #0]
 801930a:	00da      	lsls	r2, r3, #3
 801930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801930e:	18d3      	adds	r3, r2, r3
 8019310:	4ab6      	ldr	r2, [pc, #728]	@ (80195ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8019312:	4694      	mov	ip, r2
 8019314:	4463      	add	r3, ip
 8019316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801931a:	881b      	ldrh	r3, [r3, #0]
 801931c:	b29b      	uxth	r3, r3
 801931e:	059b      	lsls	r3, r3, #22
 8019320:	0d9b      	lsrs	r3, r3, #22
 8019322:	b29a      	uxth	r2, r3
 8019324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019326:	801a      	strh	r2, [r3, #0]
 8019328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801932a:	881b      	ldrh	r3, [r3, #0]
 801932c:	b29b      	uxth	r3, r3
 801932e:	4ab0      	ldr	r2, [pc, #704]	@ (80195f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019330:	4313      	orrs	r3, r2
 8019332:	b29a      	uxth	r2, r3
 8019334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019336:	801a      	strh	r2, [r3, #0]
 8019338:	e01b      	b.n	8019372 <HAL_PCD_EP_DB_Transmit+0xfe>
 801933a:	68bb      	ldr	r3, [r7, #8]
 801933c:	785b      	ldrb	r3, [r3, #1]
 801933e:	2b01      	cmp	r3, #1
 8019340:	d117      	bne.n	8019372 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	637b      	str	r3, [r7, #52]	@ 0x34
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	2250      	movs	r2, #80	@ 0x50
 801934e:	5a9b      	ldrh	r3, [r3, r2]
 8019350:	b29b      	uxth	r3, r3
 8019352:	001a      	movs	r2, r3
 8019354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019356:	189b      	adds	r3, r3, r2
 8019358:	637b      	str	r3, [r7, #52]	@ 0x34
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	00da      	lsls	r2, r3, #3
 8019360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019362:	18d3      	adds	r3, r2, r3
 8019364:	4aa1      	ldr	r2, [pc, #644]	@ (80195ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8019366:	4694      	mov	ip, r2
 8019368:	4463      	add	r3, ip
 801936a:	633b      	str	r3, [r7, #48]	@ 0x30
 801936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801936e:	2200      	movs	r2, #0
 8019370:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	627b      	str	r3, [r7, #36]	@ 0x24
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	785b      	ldrb	r3, [r3, #1]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d125      	bne.n	80193cc <HAL_PCD_EP_DB_Transmit+0x158>
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	61fb      	str	r3, [r7, #28]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	2250      	movs	r2, #80	@ 0x50
 801938c:	5a9b      	ldrh	r3, [r3, r2]
 801938e:	b29b      	uxth	r3, r3
 8019390:	001a      	movs	r2, r3
 8019392:	69fb      	ldr	r3, [r7, #28]
 8019394:	189b      	adds	r3, r3, r2
 8019396:	61fb      	str	r3, [r7, #28]
 8019398:	68bb      	ldr	r3, [r7, #8]
 801939a:	781b      	ldrb	r3, [r3, #0]
 801939c:	00da      	lsls	r2, r3, #3
 801939e:	69fb      	ldr	r3, [r7, #28]
 80193a0:	18d3      	adds	r3, r2, r3
 80193a2:	4a94      	ldr	r2, [pc, #592]	@ (80195f4 <HAL_PCD_EP_DB_Transmit+0x380>)
 80193a4:	4694      	mov	ip, r2
 80193a6:	4463      	add	r3, ip
 80193a8:	61bb      	str	r3, [r7, #24]
 80193aa:	69bb      	ldr	r3, [r7, #24]
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	059b      	lsls	r3, r3, #22
 80193b2:	0d9b      	lsrs	r3, r3, #22
 80193b4:	b29a      	uxth	r2, r3
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	801a      	strh	r2, [r3, #0]
 80193ba:	69bb      	ldr	r3, [r7, #24]
 80193bc:	881b      	ldrh	r3, [r3, #0]
 80193be:	b29b      	uxth	r3, r3
 80193c0:	4a8b      	ldr	r2, [pc, #556]	@ (80195f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80193c2:	4313      	orrs	r3, r2
 80193c4:	b29a      	uxth	r2, r3
 80193c6:	69bb      	ldr	r3, [r7, #24]
 80193c8:	801a      	strh	r2, [r3, #0]
 80193ca:	e018      	b.n	80193fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	785b      	ldrb	r3, [r3, #1]
 80193d0:	2b01      	cmp	r3, #1
 80193d2:	d114      	bne.n	80193fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	2250      	movs	r2, #80	@ 0x50
 80193da:	5a9b      	ldrh	r3, [r3, r2]
 80193dc:	b29b      	uxth	r3, r3
 80193de:	001a      	movs	r2, r3
 80193e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193e2:	189b      	adds	r3, r3, r2
 80193e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80193e6:	68bb      	ldr	r3, [r7, #8]
 80193e8:	781b      	ldrb	r3, [r3, #0]
 80193ea:	00da      	lsls	r2, r3, #3
 80193ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ee:	18d3      	adds	r3, r2, r3
 80193f0:	4a80      	ldr	r2, [pc, #512]	@ (80195f4 <HAL_PCD_EP_DB_Transmit+0x380>)
 80193f2:	4694      	mov	ip, r2
 80193f4:	4463      	add	r3, ip
 80193f6:	623b      	str	r3, [r7, #32]
 80193f8:	6a3b      	ldr	r3, [r7, #32]
 80193fa:	2200      	movs	r2, #0
 80193fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80193fe:	68bb      	ldr	r3, [r7, #8]
 8019400:	781a      	ldrb	r2, [r3, #0]
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	0011      	movs	r1, r2
 8019406:	0018      	movs	r0, r3
 8019408:	f008 fd2e 	bl	8021e68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801940c:	1dbb      	adds	r3, r7, #6
 801940e:	881a      	ldrh	r2, [r3, #0]
 8019410:	2380      	movs	r3, #128	@ 0x80
 8019412:	01db      	lsls	r3, r3, #7
 8019414:	4013      	ands	r3, r2
 8019416:	d100      	bne.n	801941a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019418:	e309      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	001a      	movs	r2, r3
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	009b      	lsls	r3, r3, #2
 8019426:	18d3      	adds	r3, r2, r3
 8019428:	881b      	ldrh	r3, [r3, #0]
 801942a:	b29a      	uxth	r2, r3
 801942c:	2016      	movs	r0, #22
 801942e:	183b      	adds	r3, r7, r0
 8019430:	4971      	ldr	r1, [pc, #452]	@ (80195f8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019432:	400a      	ands	r2, r1
 8019434:	801a      	strh	r2, [r3, #0]
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	001a      	movs	r2, r3
 801943c:	68bb      	ldr	r3, [r7, #8]
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	18d3      	adds	r3, r2, r3
 8019444:	183a      	adds	r2, r7, r0
 8019446:	8812      	ldrh	r2, [r2, #0]
 8019448:	496c      	ldr	r1, [pc, #432]	@ (80195fc <HAL_PCD_EP_DB_Transmit+0x388>)
 801944a:	430a      	orrs	r2, r1
 801944c:	b292      	uxth	r2, r2
 801944e:	801a      	strh	r2, [r3, #0]
 8019450:	e2ed      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019452:	1dbb      	adds	r3, r7, #6
 8019454:	881a      	ldrh	r2, [r3, #0]
 8019456:	2380      	movs	r3, #128	@ 0x80
 8019458:	01db      	lsls	r3, r3, #7
 801945a:	4013      	ands	r3, r2
 801945c:	d01a      	beq.n	8019494 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	001a      	movs	r2, r3
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	781b      	ldrb	r3, [r3, #0]
 8019468:	009b      	lsls	r3, r3, #2
 801946a:	18d3      	adds	r3, r2, r3
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	b29a      	uxth	r2, r3
 8019470:	208a      	movs	r0, #138	@ 0x8a
 8019472:	183b      	adds	r3, r7, r0
 8019474:	4960      	ldr	r1, [pc, #384]	@ (80195f8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019476:	400a      	ands	r2, r1
 8019478:	801a      	strh	r2, [r3, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	001a      	movs	r2, r3
 8019480:	68bb      	ldr	r3, [r7, #8]
 8019482:	781b      	ldrb	r3, [r3, #0]
 8019484:	009b      	lsls	r3, r3, #2
 8019486:	18d3      	adds	r3, r2, r3
 8019488:	183a      	adds	r2, r7, r0
 801948a:	8812      	ldrh	r2, [r2, #0]
 801948c:	495b      	ldr	r1, [pc, #364]	@ (80195fc <HAL_PCD_EP_DB_Transmit+0x388>)
 801948e:	430a      	orrs	r2, r1
 8019490:	b292      	uxth	r2, r2
 8019492:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	2224      	movs	r2, #36	@ 0x24
 8019498:	5c9b      	ldrb	r3, [r3, r2]
 801949a:	2b01      	cmp	r3, #1
 801949c:	d000      	beq.n	80194a0 <HAL_PCD_EP_DB_Transmit+0x22c>
 801949e:	e2c6      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	695a      	ldr	r2, [r3, #20]
 80194a4:	2186      	movs	r1, #134	@ 0x86
 80194a6:	187b      	adds	r3, r7, r1
 80194a8:	881b      	ldrh	r3, [r3, #0]
 80194aa:	18d2      	adds	r2, r2, r3
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80194b0:	68bb      	ldr	r3, [r7, #8]
 80194b2:	69da      	ldr	r2, [r3, #28]
 80194b4:	187b      	adds	r3, r7, r1
 80194b6:	881b      	ldrh	r3, [r3, #0]
 80194b8:	18d2      	adds	r2, r2, r3
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	6a1a      	ldr	r2, [r3, #32]
 80194c2:	68bb      	ldr	r3, [r7, #8]
 80194c4:	691b      	ldr	r3, [r3, #16]
 80194c6:	429a      	cmp	r2, r3
 80194c8:	d30c      	bcc.n	80194e4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	691b      	ldr	r3, [r3, #16]
 80194ce:	218c      	movs	r1, #140	@ 0x8c
 80194d0:	187a      	adds	r2, r7, r1
 80194d2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	6a1a      	ldr	r2, [r3, #32]
 80194d8:	187b      	adds	r3, r7, r1
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	1ad2      	subs	r2, r2, r3
 80194de:	68bb      	ldr	r3, [r7, #8]
 80194e0:	621a      	str	r2, [r3, #32]
 80194e2:	e01a      	b.n	801951a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	6a1b      	ldr	r3, [r3, #32]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d10a      	bne.n	8019502 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80194ec:	2386      	movs	r3, #134	@ 0x86
 80194ee:	18fb      	adds	r3, r7, r3
 80194f0:	881b      	ldrh	r3, [r3, #0]
 80194f2:	228c      	movs	r2, #140	@ 0x8c
 80194f4:	18ba      	adds	r2, r7, r2
 80194f6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	2224      	movs	r2, #36	@ 0x24
 80194fc:	2100      	movs	r1, #0
 80194fe:	5499      	strb	r1, [r3, r2]
 8019500:	e00b      	b.n	801951a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8019502:	68bb      	ldr	r3, [r7, #8]
 8019504:	2224      	movs	r2, #36	@ 0x24
 8019506:	2100      	movs	r1, #0
 8019508:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801950a:	68bb      	ldr	r3, [r7, #8]
 801950c:	6a1b      	ldr	r3, [r3, #32]
 801950e:	228c      	movs	r2, #140	@ 0x8c
 8019510:	18ba      	adds	r2, r7, r2
 8019512:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	2200      	movs	r2, #0
 8019518:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801951a:	68bb      	ldr	r3, [r7, #8]
 801951c:	785b      	ldrb	r3, [r3, #1]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d000      	beq.n	8019524 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8019522:	e06d      	b.n	8019600 <HAL_PCD_EP_DB_Transmit+0x38c>
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	2250      	movs	r2, #80	@ 0x50
 8019530:	5a9b      	ldrh	r3, [r3, r2]
 8019532:	b29b      	uxth	r3, r3
 8019534:	001a      	movs	r2, r3
 8019536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019538:	189b      	adds	r3, r3, r2
 801953a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801953c:	68bb      	ldr	r3, [r7, #8]
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	00da      	lsls	r2, r3, #3
 8019542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019544:	18d3      	adds	r3, r2, r3
 8019546:	4a29      	ldr	r2, [pc, #164]	@ (80195ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8019548:	4694      	mov	ip, r2
 801954a:	4463      	add	r3, ip
 801954c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019550:	881b      	ldrh	r3, [r3, #0]
 8019552:	b29b      	uxth	r3, r3
 8019554:	059b      	lsls	r3, r3, #22
 8019556:	0d9b      	lsrs	r3, r3, #22
 8019558:	b29a      	uxth	r2, r3
 801955a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801955c:	801a      	strh	r2, [r3, #0]
 801955e:	228c      	movs	r2, #140	@ 0x8c
 8019560:	18bb      	adds	r3, r7, r2
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	2b3e      	cmp	r3, #62	@ 0x3e
 8019566:	d91a      	bls.n	801959e <HAL_PCD_EP_DB_Transmit+0x32a>
 8019568:	18bb      	adds	r3, r7, r2
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	095b      	lsrs	r3, r3, #5
 801956e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019570:	18bb      	adds	r3, r7, r2
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	221f      	movs	r2, #31
 8019576:	4013      	ands	r3, r2
 8019578:	d102      	bne.n	8019580 <HAL_PCD_EP_DB_Transmit+0x30c>
 801957a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801957c:	3b01      	subs	r3, #1
 801957e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019582:	881b      	ldrh	r3, [r3, #0]
 8019584:	b29a      	uxth	r2, r3
 8019586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019588:	b29b      	uxth	r3, r3
 801958a:	029b      	lsls	r3, r3, #10
 801958c:	b29b      	uxth	r3, r3
 801958e:	4313      	orrs	r3, r2
 8019590:	b29b      	uxth	r3, r3
 8019592:	4a17      	ldr	r2, [pc, #92]	@ (80195f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019594:	4313      	orrs	r3, r2
 8019596:	b29a      	uxth	r2, r3
 8019598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801959a:	801a      	strh	r2, [r3, #0]
 801959c:	e04f      	b.n	801963e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801959e:	238c      	movs	r3, #140	@ 0x8c
 80195a0:	18fb      	adds	r3, r7, r3
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d108      	bne.n	80195ba <HAL_PCD_EP_DB_Transmit+0x346>
 80195a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195aa:	881b      	ldrh	r3, [r3, #0]
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	4a10      	ldr	r2, [pc, #64]	@ (80195f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80195b0:	4313      	orrs	r3, r2
 80195b2:	b29a      	uxth	r2, r3
 80195b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195b6:	801a      	strh	r2, [r3, #0]
 80195b8:	e041      	b.n	801963e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80195ba:	228c      	movs	r2, #140	@ 0x8c
 80195bc:	18bb      	adds	r3, r7, r2
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	085b      	lsrs	r3, r3, #1
 80195c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80195c4:	18bb      	adds	r3, r7, r2
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	2201      	movs	r2, #1
 80195ca:	4013      	ands	r3, r2
 80195cc:	d002      	beq.n	80195d4 <HAL_PCD_EP_DB_Transmit+0x360>
 80195ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80195d0:	3301      	adds	r3, #1
 80195d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80195d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195d6:	881b      	ldrh	r3, [r3, #0]
 80195d8:	b29a      	uxth	r2, r3
 80195da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80195dc:	b29b      	uxth	r3, r3
 80195de:	029b      	lsls	r3, r3, #10
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	4313      	orrs	r3, r2
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195e8:	801a      	strh	r2, [r3, #0]
 80195ea:	e028      	b.n	801963e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80195ec:	00000402 	.word	0x00000402
 80195f0:	ffff8000 	.word	0xffff8000
 80195f4:	00000406 	.word	0x00000406
 80195f8:	ffff8f8f 	.word	0xffff8f8f
 80195fc:	ffffc080 	.word	0xffffc080
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	785b      	ldrb	r3, [r3, #1]
 8019604:	2b01      	cmp	r3, #1
 8019606:	d11a      	bne.n	801963e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	647b      	str	r3, [r7, #68]	@ 0x44
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2250      	movs	r2, #80	@ 0x50
 8019614:	5a9b      	ldrh	r3, [r3, r2]
 8019616:	b29b      	uxth	r3, r3
 8019618:	001a      	movs	r2, r3
 801961a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801961c:	189b      	adds	r3, r3, r2
 801961e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019620:	68bb      	ldr	r3, [r7, #8]
 8019622:	781b      	ldrb	r3, [r3, #0]
 8019624:	00da      	lsls	r2, r3, #3
 8019626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019628:	18d3      	adds	r3, r2, r3
 801962a:	4adb      	ldr	r2, [pc, #876]	@ (8019998 <HAL_PCD_EP_DB_Transmit+0x724>)
 801962c:	4694      	mov	ip, r2
 801962e:	4463      	add	r3, ip
 8019630:	643b      	str	r3, [r7, #64]	@ 0x40
 8019632:	238c      	movs	r3, #140	@ 0x8c
 8019634:	18fb      	adds	r3, r7, r3
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	b29a      	uxth	r2, r3
 801963a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801963c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	6818      	ldr	r0, [r3, #0]
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	6959      	ldr	r1, [r3, #20]
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	891a      	ldrh	r2, [r3, #8]
 801964a:	238c      	movs	r3, #140	@ 0x8c
 801964c:	18fb      	adds	r3, r7, r3
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	b29b      	uxth	r3, r3
 8019652:	f006 fb85 	bl	801fd60 <USB_WritePMA>
 8019656:	e1ea      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2250      	movs	r2, #80	@ 0x50
 801965e:	5a9b      	ldrh	r3, [r3, r2]
 8019660:	b29b      	uxth	r3, r3
 8019662:	001a      	movs	r2, r3
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	781b      	ldrb	r3, [r3, #0]
 8019668:	00db      	lsls	r3, r3, #3
 801966a:	18d2      	adds	r2, r2, r3
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	18d3      	adds	r3, r2, r3
 8019672:	4aca      	ldr	r2, [pc, #808]	@ (801999c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019674:	4694      	mov	ip, r2
 8019676:	4463      	add	r3, ip
 8019678:	881a      	ldrh	r2, [r3, #0]
 801967a:	2186      	movs	r1, #134	@ 0x86
 801967c:	187b      	adds	r3, r7, r1
 801967e:	0592      	lsls	r2, r2, #22
 8019680:	0d92      	lsrs	r2, r2, #22
 8019682:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	699a      	ldr	r2, [r3, #24]
 8019688:	187b      	adds	r3, r7, r1
 801968a:	881b      	ldrh	r3, [r3, #0]
 801968c:	429a      	cmp	r2, r3
 801968e:	d307      	bcc.n	80196a0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	699a      	ldr	r2, [r3, #24]
 8019694:	187b      	adds	r3, r7, r1
 8019696:	881b      	ldrh	r3, [r3, #0]
 8019698:	1ad2      	subs	r2, r2, r3
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	619a      	str	r2, [r3, #24]
 801969e:	e002      	b.n	80196a6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	2200      	movs	r2, #0
 80196a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	699b      	ldr	r3, [r3, #24]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d000      	beq.n	80196b0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80196ae:	e0bb      	b.n	8019828 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	785b      	ldrb	r3, [r3, #1]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d125      	bne.n	8019704 <HAL_PCD_EP_DB_Transmit+0x490>
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	2250      	movs	r2, #80	@ 0x50
 80196c4:	5a9b      	ldrh	r3, [r3, r2]
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	001a      	movs	r2, r3
 80196ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80196cc:	189b      	adds	r3, r3, r2
 80196ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	781b      	ldrb	r3, [r3, #0]
 80196d4:	00da      	lsls	r2, r3, #3
 80196d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80196d8:	18d3      	adds	r3, r2, r3
 80196da:	4aaf      	ldr	r2, [pc, #700]	@ (8019998 <HAL_PCD_EP_DB_Transmit+0x724>)
 80196dc:	4694      	mov	ip, r2
 80196de:	4463      	add	r3, ip
 80196e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80196e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80196e4:	881b      	ldrh	r3, [r3, #0]
 80196e6:	b29b      	uxth	r3, r3
 80196e8:	059b      	lsls	r3, r3, #22
 80196ea:	0d9b      	lsrs	r3, r3, #22
 80196ec:	b29a      	uxth	r2, r3
 80196ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80196f0:	801a      	strh	r2, [r3, #0]
 80196f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80196f4:	881b      	ldrh	r3, [r3, #0]
 80196f6:	b29b      	uxth	r3, r3
 80196f8:	4aa9      	ldr	r2, [pc, #676]	@ (80199a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80196fa:	4313      	orrs	r3, r2
 80196fc:	b29a      	uxth	r2, r3
 80196fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019700:	801a      	strh	r2, [r3, #0]
 8019702:	e01b      	b.n	801973c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	785b      	ldrb	r3, [r3, #1]
 8019708:	2b01      	cmp	r3, #1
 801970a:	d117      	bne.n	801973c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	667b      	str	r3, [r7, #100]	@ 0x64
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	2250      	movs	r2, #80	@ 0x50
 8019718:	5a9b      	ldrh	r3, [r3, r2]
 801971a:	b29b      	uxth	r3, r3
 801971c:	001a      	movs	r2, r3
 801971e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019720:	189b      	adds	r3, r3, r2
 8019722:	667b      	str	r3, [r7, #100]	@ 0x64
 8019724:	68bb      	ldr	r3, [r7, #8]
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	00da      	lsls	r2, r3, #3
 801972a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801972c:	18d3      	adds	r3, r2, r3
 801972e:	4a9a      	ldr	r2, [pc, #616]	@ (8019998 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019730:	4694      	mov	ip, r2
 8019732:	4463      	add	r3, ip
 8019734:	663b      	str	r3, [r7, #96]	@ 0x60
 8019736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019738:	2200      	movs	r2, #0
 801973a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	677b      	str	r3, [r7, #116]	@ 0x74
 8019742:	68bb      	ldr	r3, [r7, #8]
 8019744:	785b      	ldrb	r3, [r3, #1]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d12b      	bne.n	80197a2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	2250      	movs	r2, #80	@ 0x50
 8019756:	5a9b      	ldrh	r3, [r3, r2]
 8019758:	b29b      	uxth	r3, r3
 801975a:	001a      	movs	r2, r3
 801975c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801975e:	189b      	adds	r3, r3, r2
 8019760:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019762:	68bb      	ldr	r3, [r7, #8]
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	00da      	lsls	r2, r3, #3
 8019768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801976a:	18d3      	adds	r3, r2, r3
 801976c:	4a8b      	ldr	r2, [pc, #556]	@ (801999c <HAL_PCD_EP_DB_Transmit+0x728>)
 801976e:	4694      	mov	ip, r2
 8019770:	4463      	add	r3, ip
 8019772:	2180      	movs	r1, #128	@ 0x80
 8019774:	187a      	adds	r2, r7, r1
 8019776:	6013      	str	r3, [r2, #0]
 8019778:	187b      	adds	r3, r7, r1
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	881b      	ldrh	r3, [r3, #0]
 801977e:	b29b      	uxth	r3, r3
 8019780:	059b      	lsls	r3, r3, #22
 8019782:	0d9b      	lsrs	r3, r3, #22
 8019784:	b29a      	uxth	r2, r3
 8019786:	187b      	adds	r3, r7, r1
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	801a      	strh	r2, [r3, #0]
 801978c:	187b      	adds	r3, r7, r1
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	881b      	ldrh	r3, [r3, #0]
 8019792:	b29b      	uxth	r3, r3
 8019794:	4a82      	ldr	r2, [pc, #520]	@ (80199a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019796:	4313      	orrs	r3, r2
 8019798:	b29a      	uxth	r2, r3
 801979a:	187b      	adds	r3, r7, r1
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	801a      	strh	r2, [r3, #0]
 80197a0:	e018      	b.n	80197d4 <HAL_PCD_EP_DB_Transmit+0x560>
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	785b      	ldrb	r3, [r3, #1]
 80197a6:	2b01      	cmp	r3, #1
 80197a8:	d114      	bne.n	80197d4 <HAL_PCD_EP_DB_Transmit+0x560>
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	2250      	movs	r2, #80	@ 0x50
 80197b0:	5a9b      	ldrh	r3, [r3, r2]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	001a      	movs	r2, r3
 80197b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80197b8:	189b      	adds	r3, r3, r2
 80197ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	781b      	ldrb	r3, [r3, #0]
 80197c0:	00da      	lsls	r2, r3, #3
 80197c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80197c4:	18d3      	adds	r3, r2, r3
 80197c6:	4a75      	ldr	r2, [pc, #468]	@ (801999c <HAL_PCD_EP_DB_Transmit+0x728>)
 80197c8:	4694      	mov	ip, r2
 80197ca:	4463      	add	r3, ip
 80197cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80197ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80197d0:	2200      	movs	r2, #0
 80197d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80197d4:	68bb      	ldr	r3, [r7, #8]
 80197d6:	781a      	ldrb	r2, [r3, #0]
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	0011      	movs	r1, r2
 80197dc:	0018      	movs	r0, r3
 80197de:	f008 fb43 	bl	8021e68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80197e2:	1dbb      	adds	r3, r7, #6
 80197e4:	881a      	ldrh	r2, [r3, #0]
 80197e6:	2380      	movs	r3, #128	@ 0x80
 80197e8:	01db      	lsls	r3, r3, #7
 80197ea:	4013      	ands	r3, r2
 80197ec:	d000      	beq.n	80197f0 <HAL_PCD_EP_DB_Transmit+0x57c>
 80197ee:	e11e      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	001a      	movs	r2, r3
 80197f6:	68bb      	ldr	r3, [r7, #8]
 80197f8:	781b      	ldrb	r3, [r3, #0]
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	18d3      	adds	r3, r2, r3
 80197fe:	881b      	ldrh	r3, [r3, #0]
 8019800:	b29a      	uxth	r2, r3
 8019802:	2088      	movs	r0, #136	@ 0x88
 8019804:	183b      	adds	r3, r7, r0
 8019806:	4967      	ldr	r1, [pc, #412]	@ (80199a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019808:	400a      	ands	r2, r1
 801980a:	801a      	strh	r2, [r3, #0]
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	001a      	movs	r2, r3
 8019812:	68bb      	ldr	r3, [r7, #8]
 8019814:	781b      	ldrb	r3, [r3, #0]
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	18d3      	adds	r3, r2, r3
 801981a:	183a      	adds	r2, r7, r0
 801981c:	8812      	ldrh	r2, [r2, #0]
 801981e:	4962      	ldr	r1, [pc, #392]	@ (80199a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019820:	430a      	orrs	r2, r1
 8019822:	b292      	uxth	r2, r2
 8019824:	801a      	strh	r2, [r3, #0]
 8019826:	e102      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019828:	1dbb      	adds	r3, r7, #6
 801982a:	881a      	ldrh	r2, [r3, #0]
 801982c:	2380      	movs	r3, #128	@ 0x80
 801982e:	01db      	lsls	r3, r3, #7
 8019830:	4013      	ands	r3, r2
 8019832:	d11a      	bne.n	801986a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	001a      	movs	r2, r3
 801983a:	68bb      	ldr	r3, [r7, #8]
 801983c:	781b      	ldrb	r3, [r3, #0]
 801983e:	009b      	lsls	r3, r3, #2
 8019840:	18d3      	adds	r3, r2, r3
 8019842:	881b      	ldrh	r3, [r3, #0]
 8019844:	b29a      	uxth	r2, r3
 8019846:	204e      	movs	r0, #78	@ 0x4e
 8019848:	183b      	adds	r3, r7, r0
 801984a:	4956      	ldr	r1, [pc, #344]	@ (80199a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801984c:	400a      	ands	r2, r1
 801984e:	801a      	strh	r2, [r3, #0]
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	001a      	movs	r2, r3
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	009b      	lsls	r3, r3, #2
 801985c:	18d3      	adds	r3, r2, r3
 801985e:	183a      	adds	r2, r7, r0
 8019860:	8812      	ldrh	r2, [r2, #0]
 8019862:	4951      	ldr	r1, [pc, #324]	@ (80199a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019864:	430a      	orrs	r2, r1
 8019866:	b292      	uxth	r2, r2
 8019868:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801986a:	68bb      	ldr	r3, [r7, #8]
 801986c:	2224      	movs	r2, #36	@ 0x24
 801986e:	5c9b      	ldrb	r3, [r3, r2]
 8019870:	2b01      	cmp	r3, #1
 8019872:	d000      	beq.n	8019876 <HAL_PCD_EP_DB_Transmit+0x602>
 8019874:	e0db      	b.n	8019a2e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	695a      	ldr	r2, [r3, #20]
 801987a:	2186      	movs	r1, #134	@ 0x86
 801987c:	187b      	adds	r3, r7, r1
 801987e:	881b      	ldrh	r3, [r3, #0]
 8019880:	18d2      	adds	r2, r2, r3
 8019882:	68bb      	ldr	r3, [r7, #8]
 8019884:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	69da      	ldr	r2, [r3, #28]
 801988a:	187b      	adds	r3, r7, r1
 801988c:	881b      	ldrh	r3, [r3, #0]
 801988e:	18d2      	adds	r2, r2, r3
 8019890:	68bb      	ldr	r3, [r7, #8]
 8019892:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019894:	68bb      	ldr	r3, [r7, #8]
 8019896:	6a1a      	ldr	r2, [r3, #32]
 8019898:	68bb      	ldr	r3, [r7, #8]
 801989a:	691b      	ldr	r3, [r3, #16]
 801989c:	429a      	cmp	r2, r3
 801989e:	d30c      	bcc.n	80198ba <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	691b      	ldr	r3, [r3, #16]
 80198a4:	218c      	movs	r1, #140	@ 0x8c
 80198a6:	187a      	adds	r2, r7, r1
 80198a8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80198aa:	68bb      	ldr	r3, [r7, #8]
 80198ac:	6a1a      	ldr	r2, [r3, #32]
 80198ae:	187b      	adds	r3, r7, r1
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	1ad2      	subs	r2, r2, r3
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	621a      	str	r2, [r3, #32]
 80198b8:	e01a      	b.n	80198f0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	6a1b      	ldr	r3, [r3, #32]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d10a      	bne.n	80198d8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80198c2:	2386      	movs	r3, #134	@ 0x86
 80198c4:	18fb      	adds	r3, r7, r3
 80198c6:	881b      	ldrh	r3, [r3, #0]
 80198c8:	228c      	movs	r2, #140	@ 0x8c
 80198ca:	18ba      	adds	r2, r7, r2
 80198cc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80198ce:	68bb      	ldr	r3, [r7, #8]
 80198d0:	2224      	movs	r2, #36	@ 0x24
 80198d2:	2100      	movs	r1, #0
 80198d4:	5499      	strb	r1, [r3, r2]
 80198d6:	e00b      	b.n	80198f0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	6a1b      	ldr	r3, [r3, #32]
 80198dc:	228c      	movs	r2, #140	@ 0x8c
 80198de:	18ba      	adds	r2, r7, r2
 80198e0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	2200      	movs	r2, #0
 80198e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	2224      	movs	r2, #36	@ 0x24
 80198ec:	2100      	movs	r1, #0
 80198ee:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80198f6:	68bb      	ldr	r3, [r7, #8]
 80198f8:	785b      	ldrb	r3, [r3, #1]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d000      	beq.n	8019900 <HAL_PCD_EP_DB_Transmit+0x68c>
 80198fe:	e06e      	b.n	80199de <HAL_PCD_EP_DB_Transmit+0x76a>
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	2250      	movs	r2, #80	@ 0x50
 801990c:	5a9b      	ldrh	r3, [r3, r2]
 801990e:	b29b      	uxth	r3, r3
 8019910:	001a      	movs	r2, r3
 8019912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019914:	189b      	adds	r3, r3, r2
 8019916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019918:	68bb      	ldr	r3, [r7, #8]
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	00da      	lsls	r2, r3, #3
 801991e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019920:	18d3      	adds	r3, r2, r3
 8019922:	4a1e      	ldr	r2, [pc, #120]	@ (801999c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019924:	4694      	mov	ip, r2
 8019926:	4463      	add	r3, ip
 8019928:	65bb      	str	r3, [r7, #88]	@ 0x58
 801992a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801992c:	881b      	ldrh	r3, [r3, #0]
 801992e:	b29b      	uxth	r3, r3
 8019930:	059b      	lsls	r3, r3, #22
 8019932:	0d9b      	lsrs	r3, r3, #22
 8019934:	b29a      	uxth	r2, r3
 8019936:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019938:	801a      	strh	r2, [r3, #0]
 801993a:	228c      	movs	r2, #140	@ 0x8c
 801993c:	18bb      	adds	r3, r7, r2
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	2b3e      	cmp	r3, #62	@ 0x3e
 8019942:	d91a      	bls.n	801997a <HAL_PCD_EP_DB_Transmit+0x706>
 8019944:	18bb      	adds	r3, r7, r2
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	095b      	lsrs	r3, r3, #5
 801994a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801994c:	18bb      	adds	r3, r7, r2
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	221f      	movs	r2, #31
 8019952:	4013      	ands	r3, r2
 8019954:	d102      	bne.n	801995c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8019956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019958:	3b01      	subs	r3, #1
 801995a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801995c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801995e:	881b      	ldrh	r3, [r3, #0]
 8019960:	b29a      	uxth	r2, r3
 8019962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019964:	b29b      	uxth	r3, r3
 8019966:	029b      	lsls	r3, r3, #10
 8019968:	b29b      	uxth	r3, r3
 801996a:	4313      	orrs	r3, r2
 801996c:	b29b      	uxth	r3, r3
 801996e:	4a0c      	ldr	r2, [pc, #48]	@ (80199a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019970:	4313      	orrs	r3, r2
 8019972:	b29a      	uxth	r2, r3
 8019974:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019976:	801a      	strh	r2, [r3, #0]
 8019978:	e04d      	b.n	8019a16 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801997a:	238c      	movs	r3, #140	@ 0x8c
 801997c:	18fb      	adds	r3, r7, r3
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d113      	bne.n	80199ac <HAL_PCD_EP_DB_Transmit+0x738>
 8019984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019986:	881b      	ldrh	r3, [r3, #0]
 8019988:	b29b      	uxth	r3, r3
 801998a:	4a05      	ldr	r2, [pc, #20]	@ (80199a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801998c:	4313      	orrs	r3, r2
 801998e:	b29a      	uxth	r2, r3
 8019990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019992:	801a      	strh	r2, [r3, #0]
 8019994:	e03f      	b.n	8019a16 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8019996:	46c0      	nop			@ (mov r8, r8)
 8019998:	00000402 	.word	0x00000402
 801999c:	00000406 	.word	0x00000406
 80199a0:	ffff8000 	.word	0xffff8000
 80199a4:	ffff8f8f 	.word	0xffff8f8f
 80199a8:	ffffc080 	.word	0xffffc080
 80199ac:	228c      	movs	r2, #140	@ 0x8c
 80199ae:	18bb      	adds	r3, r7, r2
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	085b      	lsrs	r3, r3, #1
 80199b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80199b6:	18bb      	adds	r3, r7, r2
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	2201      	movs	r2, #1
 80199bc:	4013      	ands	r3, r2
 80199be:	d002      	beq.n	80199c6 <HAL_PCD_EP_DB_Transmit+0x752>
 80199c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80199c2:	3301      	adds	r3, #1
 80199c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80199c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80199c8:	881b      	ldrh	r3, [r3, #0]
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	029b      	lsls	r3, r3, #10
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	4313      	orrs	r3, r2
 80199d6:	b29a      	uxth	r2, r3
 80199d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80199da:	801a      	strh	r2, [r3, #0]
 80199dc:	e01b      	b.n	8019a16 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80199de:	68bb      	ldr	r3, [r7, #8]
 80199e0:	785b      	ldrb	r3, [r3, #1]
 80199e2:	2b01      	cmp	r3, #1
 80199e4:	d117      	bne.n	8019a16 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	2250      	movs	r2, #80	@ 0x50
 80199ec:	5a9b      	ldrh	r3, [r3, r2]
 80199ee:	b29b      	uxth	r3, r3
 80199f0:	001a      	movs	r2, r3
 80199f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199f4:	189b      	adds	r3, r3, r2
 80199f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80199f8:	68bb      	ldr	r3, [r7, #8]
 80199fa:	781b      	ldrb	r3, [r3, #0]
 80199fc:	00da      	lsls	r2, r3, #3
 80199fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a00:	18d3      	adds	r3, r2, r3
 8019a02:	4a21      	ldr	r2, [pc, #132]	@ (8019a88 <HAL_PCD_EP_DB_Transmit+0x814>)
 8019a04:	4694      	mov	ip, r2
 8019a06:	4463      	add	r3, ip
 8019a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8019a0a:	238c      	movs	r3, #140	@ 0x8c
 8019a0c:	18fb      	adds	r3, r7, r3
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	b29a      	uxth	r2, r3
 8019a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	6818      	ldr	r0, [r3, #0]
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	6959      	ldr	r1, [r3, #20]
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	895a      	ldrh	r2, [r3, #10]
 8019a22:	238c      	movs	r3, #140	@ 0x8c
 8019a24:	18fb      	adds	r3, r7, r3
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	f006 f999 	bl	801fd60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	001a      	movs	r2, r3
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	009b      	lsls	r3, r3, #2
 8019a3a:	18d3      	adds	r3, r2, r3
 8019a3c:	881b      	ldrh	r3, [r3, #0]
 8019a3e:	b29a      	uxth	r2, r3
 8019a40:	2014      	movs	r0, #20
 8019a42:	183b      	adds	r3, r7, r0
 8019a44:	4911      	ldr	r1, [pc, #68]	@ (8019a8c <HAL_PCD_EP_DB_Transmit+0x818>)
 8019a46:	400a      	ands	r2, r1
 8019a48:	801a      	strh	r2, [r3, #0]
 8019a4a:	183b      	adds	r3, r7, r0
 8019a4c:	183a      	adds	r2, r7, r0
 8019a4e:	8812      	ldrh	r2, [r2, #0]
 8019a50:	2110      	movs	r1, #16
 8019a52:	404a      	eors	r2, r1
 8019a54:	801a      	strh	r2, [r3, #0]
 8019a56:	183b      	adds	r3, r7, r0
 8019a58:	183a      	adds	r2, r7, r0
 8019a5a:	8812      	ldrh	r2, [r2, #0]
 8019a5c:	2120      	movs	r1, #32
 8019a5e:	404a      	eors	r2, r1
 8019a60:	801a      	strh	r2, [r3, #0]
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	001a      	movs	r2, r3
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	781b      	ldrb	r3, [r3, #0]
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	18d3      	adds	r3, r2, r3
 8019a70:	183a      	adds	r2, r7, r0
 8019a72:	8812      	ldrh	r2, [r2, #0]
 8019a74:	4906      	ldr	r1, [pc, #24]	@ (8019a90 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8019a76:	430a      	orrs	r2, r1
 8019a78:	b292      	uxth	r2, r2
 8019a7a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8019a7c:	2300      	movs	r3, #0
}
 8019a7e:	0018      	movs	r0, r3
 8019a80:	46bd      	mov	sp, r7
 8019a82:	b024      	add	sp, #144	@ 0x90
 8019a84:	bd80      	pop	{r7, pc}
 8019a86:	46c0      	nop			@ (mov r8, r8)
 8019a88:	00000406 	.word	0x00000406
 8019a8c:	ffff8fbf 	.word	0xffff8fbf
 8019a90:	ffff8080 	.word	0xffff8080

08019a94 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8019a94:	b590      	push	{r4, r7, lr}
 8019a96:	b087      	sub	sp, #28
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	60f8      	str	r0, [r7, #12]
 8019a9c:	0008      	movs	r0, r1
 8019a9e:	0011      	movs	r1, r2
 8019aa0:	607b      	str	r3, [r7, #4]
 8019aa2:	240a      	movs	r4, #10
 8019aa4:	193b      	adds	r3, r7, r4
 8019aa6:	1c02      	adds	r2, r0, #0
 8019aa8:	801a      	strh	r2, [r3, #0]
 8019aaa:	2308      	movs	r3, #8
 8019aac:	18fb      	adds	r3, r7, r3
 8019aae:	1c0a      	adds	r2, r1, #0
 8019ab0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8019ab2:	0021      	movs	r1, r4
 8019ab4:	187b      	adds	r3, r7, r1
 8019ab6:	881b      	ldrh	r3, [r3, #0]
 8019ab8:	2280      	movs	r2, #128	@ 0x80
 8019aba:	4013      	ands	r3, r2
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d00c      	beq.n	8019adc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019ac2:	187b      	adds	r3, r7, r1
 8019ac4:	881b      	ldrh	r3, [r3, #0]
 8019ac6:	2207      	movs	r2, #7
 8019ac8:	4013      	ands	r3, r2
 8019aca:	1c5a      	adds	r2, r3, #1
 8019acc:	0013      	movs	r3, r2
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	189b      	adds	r3, r3, r2
 8019ad2:	00db      	lsls	r3, r3, #3
 8019ad4:	68fa      	ldr	r2, [r7, #12]
 8019ad6:	18d3      	adds	r3, r2, r3
 8019ad8:	617b      	str	r3, [r7, #20]
 8019ada:	e00b      	b.n	8019af4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019adc:	230a      	movs	r3, #10
 8019ade:	18fb      	adds	r3, r7, r3
 8019ae0:	881a      	ldrh	r2, [r3, #0]
 8019ae2:	0013      	movs	r3, r2
 8019ae4:	009b      	lsls	r3, r3, #2
 8019ae6:	189b      	adds	r3, r3, r2
 8019ae8:	00db      	lsls	r3, r3, #3
 8019aea:	3369      	adds	r3, #105	@ 0x69
 8019aec:	33ff      	adds	r3, #255	@ 0xff
 8019aee:	68fa      	ldr	r2, [r7, #12]
 8019af0:	18d3      	adds	r3, r2, r3
 8019af2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8019af4:	2308      	movs	r3, #8
 8019af6:	18fb      	adds	r3, r7, r3
 8019af8:	881b      	ldrh	r3, [r3, #0]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d107      	bne.n	8019b0e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8019afe:	697b      	ldr	r3, [r7, #20]
 8019b00:	2200      	movs	r2, #0
 8019b02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	b29a      	uxth	r2, r3
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	80da      	strh	r2, [r3, #6]
 8019b0c:	e00b      	b.n	8019b26 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8019b0e:	697b      	ldr	r3, [r7, #20]
 8019b10:	2201      	movs	r2, #1
 8019b12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	b29a      	uxth	r2, r3
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	0c1b      	lsrs	r3, r3, #16
 8019b20:	b29a      	uxth	r2, r3
 8019b22:	697b      	ldr	r3, [r7, #20]
 8019b24:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019b26:	2300      	movs	r3, #0
}
 8019b28:	0018      	movs	r0, r3
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	b007      	add	sp, #28
 8019b2e:	bd90      	pop	{r4, r7, pc}

08019b30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	23ba      	movs	r3, #186	@ 0xba
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	2101      	movs	r1, #1
 8019b46:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8019b48:	687a      	ldr	r2, [r7, #4]
 8019b4a:	23b8      	movs	r3, #184	@ 0xb8
 8019b4c:	009b      	lsls	r3, r3, #2
 8019b4e:	2100      	movs	r1, #0
 8019b50:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	2254      	movs	r2, #84	@ 0x54
 8019b56:	5a9b      	ldrh	r3, [r3, r2]
 8019b58:	b29b      	uxth	r3, r3
 8019b5a:	2201      	movs	r2, #1
 8019b5c:	4313      	orrs	r3, r2
 8019b5e:	b299      	uxth	r1, r3
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	2254      	movs	r2, #84	@ 0x54
 8019b64:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	2254      	movs	r2, #84	@ 0x54
 8019b6a:	5a9b      	ldrh	r3, [r3, r2]
 8019b6c:	b29b      	uxth	r3, r3
 8019b6e:	2202      	movs	r2, #2
 8019b70:	4313      	orrs	r3, r2
 8019b72:	b299      	uxth	r1, r3
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	2254      	movs	r2, #84	@ 0x54
 8019b78:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019b7a:	2300      	movs	r3, #0
}
 8019b7c:	0018      	movs	r0, r3
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	b004      	add	sp, #16
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b082      	sub	sp, #8
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	000a      	movs	r2, r1
 8019b8e:	1cfb      	adds	r3, r7, #3
 8019b90:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8019b92:	46c0      	nop			@ (mov r8, r8)
 8019b94:	46bd      	mov	sp, r7
 8019b96:	b002      	add	sp, #8
 8019b98:	bd80      	pop	{r7, pc}
	...

08019b9c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8019ba0:	4b04      	ldr	r3, [pc, #16]	@ (8019bb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8019ba2:	681a      	ldr	r2, [r3, #0]
 8019ba4:	4b03      	ldr	r3, [pc, #12]	@ (8019bb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8019ba6:	2180      	movs	r1, #128	@ 0x80
 8019ba8:	0049      	lsls	r1, r1, #1
 8019baa:	430a      	orrs	r2, r1
 8019bac:	601a      	str	r2, [r3, #0]
}
 8019bae:	46c0      	nop			@ (mov r8, r8)
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}
 8019bb4:	40007000 	.word	0x40007000

08019bb8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8019bbc:	4b04      	ldr	r3, [pc, #16]	@ (8019bd0 <HAL_PWR_DisableBkUpAccess+0x18>)
 8019bbe:	681a      	ldr	r2, [r3, #0]
 8019bc0:	4b03      	ldr	r3, [pc, #12]	@ (8019bd0 <HAL_PWR_DisableBkUpAccess+0x18>)
 8019bc2:	4904      	ldr	r1, [pc, #16]	@ (8019bd4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8019bc4:	400a      	ands	r2, r1
 8019bc6:	601a      	str	r2, [r3, #0]
}
 8019bc8:	46c0      	nop			@ (mov r8, r8)
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}
 8019bce:	46c0      	nop			@ (mov r8, r8)
 8019bd0:	40007000 	.word	0x40007000
 8019bd4:	fffffeff 	.word	0xfffffeff

08019bd8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b086      	sub	sp, #24
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	000a      	movs	r2, r1
 8019be2:	1cfb      	adds	r3, r7, #3
 8019be4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8019be6:	2300      	movs	r3, #0
 8019be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8019bea:	4b25      	ldr	r3, [pc, #148]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019bec:	681a      	ldr	r2, [r3, #0]
 8019bee:	2380      	movs	r3, #128	@ 0x80
 8019bf0:	009b      	lsls	r3, r3, #2
 8019bf2:	4013      	ands	r3, r2
 8019bf4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8019bf6:	4b23      	ldr	r3, [pc, #140]	@ (8019c84 <HAL_PWR_EnterSTOPMode+0xac>)
 8019bf8:	6a1b      	ldr	r3, [r3, #32]
 8019bfa:	2201      	movs	r2, #1
 8019bfc:	4013      	ands	r3, r2
 8019bfe:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8019c00:	693b      	ldr	r3, [r7, #16]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d008      	beq.n	8019c18 <HAL_PWR_EnterSTOPMode+0x40>
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d005      	beq.n	8019c18 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8019c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019c0e:	681a      	ldr	r2, [r3, #0]
 8019c10:	4b1b      	ldr	r3, [pc, #108]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019c12:	491d      	ldr	r1, [pc, #116]	@ (8019c88 <HAL_PWR_EnterSTOPMode+0xb0>)
 8019c14:	400a      	ands	r2, r1
 8019c16:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8019c18:	4b19      	ldr	r3, [pc, #100]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	2203      	movs	r2, #3
 8019c22:	4393      	bics	r3, r2
 8019c24:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8019c26:	697a      	ldr	r2, [r7, #20]
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	4313      	orrs	r3, r2
 8019c2c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8019c2e:	4b14      	ldr	r3, [pc, #80]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019c30:	697a      	ldr	r2, [r7, #20]
 8019c32:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019c34:	4b15      	ldr	r3, [pc, #84]	@ (8019c8c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019c36:	691a      	ldr	r2, [r3, #16]
 8019c38:	4b14      	ldr	r3, [pc, #80]	@ (8019c8c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019c3a:	2104      	movs	r1, #4
 8019c3c:	430a      	orrs	r2, r1
 8019c3e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8019c40:	1cfb      	adds	r3, r7, #3
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	2b01      	cmp	r3, #1
 8019c46:	d101      	bne.n	8019c4c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8019c48:	bf30      	wfi
 8019c4a:	e002      	b.n	8019c52 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8019c4c:	bf40      	sev
    __WFE();
 8019c4e:	bf20      	wfe
    __WFE();
 8019c50:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019c52:	4b0e      	ldr	r3, [pc, #56]	@ (8019c8c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019c54:	691a      	ldr	r2, [r3, #16]
 8019c56:	4b0d      	ldr	r3, [pc, #52]	@ (8019c8c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019c58:	2104      	movs	r1, #4
 8019c5a:	438a      	bics	r2, r1
 8019c5c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d009      	beq.n	8019c78 <HAL_PWR_EnterSTOPMode+0xa0>
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d006      	beq.n	8019c78 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8019c6a:	4b05      	ldr	r3, [pc, #20]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019c6c:	681a      	ldr	r2, [r3, #0]
 8019c6e:	4b04      	ldr	r3, [pc, #16]	@ (8019c80 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019c70:	2180      	movs	r1, #128	@ 0x80
 8019c72:	0089      	lsls	r1, r1, #2
 8019c74:	430a      	orrs	r2, r1
 8019c76:	601a      	str	r2, [r3, #0]
  }
}
 8019c78:	46c0      	nop			@ (mov r8, r8)
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	b006      	add	sp, #24
 8019c7e:	bd80      	pop	{r7, pc}
 8019c80:	40007000 	.word	0x40007000
 8019c84:	40010000 	.word	0x40010000
 8019c88:	fffffdff 	.word	0xfffffdff
 8019c8c:	e000ed00 	.word	0xe000ed00

08019c90 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8019c94:	4b07      	ldr	r3, [pc, #28]	@ (8019cb4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8019c96:	681a      	ldr	r2, [r3, #0]
 8019c98:	4b06      	ldr	r3, [pc, #24]	@ (8019cb4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8019c9a:	2102      	movs	r1, #2
 8019c9c:	430a      	orrs	r2, r1
 8019c9e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019ca0:	4b05      	ldr	r3, [pc, #20]	@ (8019cb8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8019ca2:	691a      	ldr	r2, [r3, #16]
 8019ca4:	4b04      	ldr	r3, [pc, #16]	@ (8019cb8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8019ca6:	2104      	movs	r1, #4
 8019ca8:	430a      	orrs	r2, r1
 8019caa:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8019cac:	bf30      	wfi
}
 8019cae:	46c0      	nop			@ (mov r8, r8)
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bd80      	pop	{r7, pc}
 8019cb4:	40007000 	.word	0x40007000
 8019cb8:	e000ed00 	.word	0xe000ed00

08019cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019cbc:	b5b0      	push	{r4, r5, r7, lr}
 8019cbe:	b08a      	sub	sp, #40	@ 0x28
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d102      	bne.n	8019cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8019cca:	2301      	movs	r3, #1
 8019ccc:	f000 fbbf 	bl	801a44e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019cd0:	4bc9      	ldr	r3, [pc, #804]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019cd2:	68db      	ldr	r3, [r3, #12]
 8019cd4:	220c      	movs	r2, #12
 8019cd6:	4013      	ands	r3, r2
 8019cd8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019cda:	4bc7      	ldr	r3, [pc, #796]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019cdc:	68da      	ldr	r2, [r3, #12]
 8019cde:	2380      	movs	r3, #128	@ 0x80
 8019ce0:	025b      	lsls	r3, r3, #9
 8019ce2:	4013      	ands	r3, r2
 8019ce4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2201      	movs	r2, #1
 8019cec:	4013      	ands	r3, r2
 8019cee:	d100      	bne.n	8019cf2 <HAL_RCC_OscConfig+0x36>
 8019cf0:	e07e      	b.n	8019df0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019cf2:	69fb      	ldr	r3, [r7, #28]
 8019cf4:	2b08      	cmp	r3, #8
 8019cf6:	d007      	beq.n	8019d08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8019cf8:	69fb      	ldr	r3, [r7, #28]
 8019cfa:	2b0c      	cmp	r3, #12
 8019cfc:	d112      	bne.n	8019d24 <HAL_RCC_OscConfig+0x68>
 8019cfe:	69ba      	ldr	r2, [r7, #24]
 8019d00:	2380      	movs	r3, #128	@ 0x80
 8019d02:	025b      	lsls	r3, r3, #9
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d10d      	bne.n	8019d24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019d08:	4bbb      	ldr	r3, [pc, #748]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d0a:	681a      	ldr	r2, [r3, #0]
 8019d0c:	2380      	movs	r3, #128	@ 0x80
 8019d0e:	029b      	lsls	r3, r3, #10
 8019d10:	4013      	ands	r3, r2
 8019d12:	d100      	bne.n	8019d16 <HAL_RCC_OscConfig+0x5a>
 8019d14:	e06b      	b.n	8019dee <HAL_RCC_OscConfig+0x132>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	685b      	ldr	r3, [r3, #4]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d167      	bne.n	8019dee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8019d1e:	2301      	movs	r3, #1
 8019d20:	f000 fb95 	bl	801a44e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	685a      	ldr	r2, [r3, #4]
 8019d28:	2380      	movs	r3, #128	@ 0x80
 8019d2a:	025b      	lsls	r3, r3, #9
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d107      	bne.n	8019d40 <HAL_RCC_OscConfig+0x84>
 8019d30:	4bb1      	ldr	r3, [pc, #708]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d32:	681a      	ldr	r2, [r3, #0]
 8019d34:	4bb0      	ldr	r3, [pc, #704]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d36:	2180      	movs	r1, #128	@ 0x80
 8019d38:	0249      	lsls	r1, r1, #9
 8019d3a:	430a      	orrs	r2, r1
 8019d3c:	601a      	str	r2, [r3, #0]
 8019d3e:	e027      	b.n	8019d90 <HAL_RCC_OscConfig+0xd4>
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	685a      	ldr	r2, [r3, #4]
 8019d44:	23a0      	movs	r3, #160	@ 0xa0
 8019d46:	02db      	lsls	r3, r3, #11
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	d10e      	bne.n	8019d6a <HAL_RCC_OscConfig+0xae>
 8019d4c:	4baa      	ldr	r3, [pc, #680]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d4e:	681a      	ldr	r2, [r3, #0]
 8019d50:	4ba9      	ldr	r3, [pc, #676]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d52:	2180      	movs	r1, #128	@ 0x80
 8019d54:	02c9      	lsls	r1, r1, #11
 8019d56:	430a      	orrs	r2, r1
 8019d58:	601a      	str	r2, [r3, #0]
 8019d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d5c:	681a      	ldr	r2, [r3, #0]
 8019d5e:	4ba6      	ldr	r3, [pc, #664]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d60:	2180      	movs	r1, #128	@ 0x80
 8019d62:	0249      	lsls	r1, r1, #9
 8019d64:	430a      	orrs	r2, r1
 8019d66:	601a      	str	r2, [r3, #0]
 8019d68:	e012      	b.n	8019d90 <HAL_RCC_OscConfig+0xd4>
 8019d6a:	4ba3      	ldr	r3, [pc, #652]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d6c:	681a      	ldr	r2, [r3, #0]
 8019d6e:	4ba2      	ldr	r3, [pc, #648]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d70:	49a2      	ldr	r1, [pc, #648]	@ (8019ffc <HAL_RCC_OscConfig+0x340>)
 8019d72:	400a      	ands	r2, r1
 8019d74:	601a      	str	r2, [r3, #0]
 8019d76:	4ba0      	ldr	r3, [pc, #640]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d78:	681a      	ldr	r2, [r3, #0]
 8019d7a:	2380      	movs	r3, #128	@ 0x80
 8019d7c:	025b      	lsls	r3, r3, #9
 8019d7e:	4013      	ands	r3, r2
 8019d80:	60fb      	str	r3, [r7, #12]
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	4b9c      	ldr	r3, [pc, #624]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d86:	681a      	ldr	r2, [r3, #0]
 8019d88:	4b9b      	ldr	r3, [pc, #620]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019d8a:	499d      	ldr	r1, [pc, #628]	@ (801a000 <HAL_RCC_OscConfig+0x344>)
 8019d8c:	400a      	ands	r2, r1
 8019d8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d015      	beq.n	8019dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019d98:	f7f9 fbc8 	bl	801352c <HAL_GetTick>
 8019d9c:	0003      	movs	r3, r0
 8019d9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019da0:	e009      	b.n	8019db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019da2:	f7f9 fbc3 	bl	801352c <HAL_GetTick>
 8019da6:	0002      	movs	r2, r0
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	1ad3      	subs	r3, r2, r3
 8019dac:	2b64      	cmp	r3, #100	@ 0x64
 8019dae:	d902      	bls.n	8019db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019db0:	2303      	movs	r3, #3
 8019db2:	f000 fb4c 	bl	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019db6:	4b90      	ldr	r3, [pc, #576]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019db8:	681a      	ldr	r2, [r3, #0]
 8019dba:	2380      	movs	r3, #128	@ 0x80
 8019dbc:	029b      	lsls	r3, r3, #10
 8019dbe:	4013      	ands	r3, r2
 8019dc0:	d0ef      	beq.n	8019da2 <HAL_RCC_OscConfig+0xe6>
 8019dc2:	e015      	b.n	8019df0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019dc4:	f7f9 fbb2 	bl	801352c <HAL_GetTick>
 8019dc8:	0003      	movs	r3, r0
 8019dca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8019dcc:	e008      	b.n	8019de0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019dce:	f7f9 fbad 	bl	801352c <HAL_GetTick>
 8019dd2:	0002      	movs	r2, r0
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	1ad3      	subs	r3, r2, r3
 8019dd8:	2b64      	cmp	r3, #100	@ 0x64
 8019dda:	d901      	bls.n	8019de0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8019ddc:	2303      	movs	r3, #3
 8019dde:	e336      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8019de0:	4b85      	ldr	r3, [pc, #532]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	2380      	movs	r3, #128	@ 0x80
 8019de6:	029b      	lsls	r3, r3, #10
 8019de8:	4013      	ands	r3, r2
 8019dea:	d1f0      	bne.n	8019dce <HAL_RCC_OscConfig+0x112>
 8019dec:	e000      	b.n	8019df0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019dee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2202      	movs	r2, #2
 8019df6:	4013      	ands	r3, r2
 8019df8:	d100      	bne.n	8019dfc <HAL_RCC_OscConfig+0x140>
 8019dfa:	e099      	b.n	8019f30 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	68db      	ldr	r3, [r3, #12]
 8019e00:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8019e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e04:	2220      	movs	r2, #32
 8019e06:	4013      	ands	r3, r2
 8019e08:	d009      	beq.n	8019e1e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8019e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e0c:	681a      	ldr	r2, [r3, #0]
 8019e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e10:	2120      	movs	r1, #32
 8019e12:	430a      	orrs	r2, r1
 8019e14:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8019e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e18:	2220      	movs	r2, #32
 8019e1a:	4393      	bics	r3, r2
 8019e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019e1e:	69fb      	ldr	r3, [r7, #28]
 8019e20:	2b04      	cmp	r3, #4
 8019e22:	d005      	beq.n	8019e30 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8019e24:	69fb      	ldr	r3, [r7, #28]
 8019e26:	2b0c      	cmp	r3, #12
 8019e28:	d13e      	bne.n	8019ea8 <HAL_RCC_OscConfig+0x1ec>
 8019e2a:	69bb      	ldr	r3, [r7, #24]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d13b      	bne.n	8019ea8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8019e30:	4b71      	ldr	r3, [pc, #452]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	2204      	movs	r2, #4
 8019e36:	4013      	ands	r3, r2
 8019e38:	d004      	beq.n	8019e44 <HAL_RCC_OscConfig+0x188>
 8019e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d101      	bne.n	8019e44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8019e40:	2301      	movs	r3, #1
 8019e42:	e304      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019e44:	4b6c      	ldr	r3, [pc, #432]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e46:	685b      	ldr	r3, [r3, #4]
 8019e48:	4a6e      	ldr	r2, [pc, #440]	@ (801a004 <HAL_RCC_OscConfig+0x348>)
 8019e4a:	4013      	ands	r3, r2
 8019e4c:	0019      	movs	r1, r3
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	691b      	ldr	r3, [r3, #16]
 8019e52:	021a      	lsls	r2, r3, #8
 8019e54:	4b68      	ldr	r3, [pc, #416]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e56:	430a      	orrs	r2, r1
 8019e58:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8019e5a:	4b67      	ldr	r3, [pc, #412]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2209      	movs	r2, #9
 8019e60:	4393      	bics	r3, r2
 8019e62:	0019      	movs	r1, r3
 8019e64:	4b64      	ldr	r3, [pc, #400]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e68:	430a      	orrs	r2, r1
 8019e6a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019e6c:	f000 fc42 	bl	801a6f4 <HAL_RCC_GetSysClockFreq>
 8019e70:	0001      	movs	r1, r0
 8019e72:	4b61      	ldr	r3, [pc, #388]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019e74:	68db      	ldr	r3, [r3, #12]
 8019e76:	091b      	lsrs	r3, r3, #4
 8019e78:	220f      	movs	r2, #15
 8019e7a:	4013      	ands	r3, r2
 8019e7c:	4a62      	ldr	r2, [pc, #392]	@ (801a008 <HAL_RCC_OscConfig+0x34c>)
 8019e7e:	5cd3      	ldrb	r3, [r2, r3]
 8019e80:	000a      	movs	r2, r1
 8019e82:	40da      	lsrs	r2, r3
 8019e84:	4b61      	ldr	r3, [pc, #388]	@ (801a00c <HAL_RCC_OscConfig+0x350>)
 8019e86:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8019e88:	4b61      	ldr	r3, [pc, #388]	@ (801a010 <HAL_RCC_OscConfig+0x354>)
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	2513      	movs	r5, #19
 8019e8e:	197c      	adds	r4, r7, r5
 8019e90:	0018      	movs	r0, r3
 8019e92:	f7f9 fb05 	bl	80134a0 <HAL_InitTick>
 8019e96:	0003      	movs	r3, r0
 8019e98:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8019e9a:	197b      	adds	r3, r7, r5
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d046      	beq.n	8019f30 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8019ea2:	197b      	adds	r3, r7, r5
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	e2d2      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8019ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d027      	beq.n	8019efe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8019eae:	4b52      	ldr	r3, [pc, #328]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	2209      	movs	r2, #9
 8019eb4:	4393      	bics	r3, r2
 8019eb6:	0019      	movs	r1, r3
 8019eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ebc:	430a      	orrs	r2, r1
 8019ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019ec0:	f7f9 fb34 	bl	801352c <HAL_GetTick>
 8019ec4:	0003      	movs	r3, r0
 8019ec6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019ec8:	e008      	b.n	8019edc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019eca:	f7f9 fb2f 	bl	801352c <HAL_GetTick>
 8019ece:	0002      	movs	r2, r0
 8019ed0:	697b      	ldr	r3, [r7, #20]
 8019ed2:	1ad3      	subs	r3, r2, r3
 8019ed4:	2b02      	cmp	r3, #2
 8019ed6:	d901      	bls.n	8019edc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8019ed8:	2303      	movs	r3, #3
 8019eda:	e2b8      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019edc:	4b46      	ldr	r3, [pc, #280]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	2204      	movs	r2, #4
 8019ee2:	4013      	ands	r3, r2
 8019ee4:	d0f1      	beq.n	8019eca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019ee6:	4b44      	ldr	r3, [pc, #272]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019ee8:	685b      	ldr	r3, [r3, #4]
 8019eea:	4a46      	ldr	r2, [pc, #280]	@ (801a004 <HAL_RCC_OscConfig+0x348>)
 8019eec:	4013      	ands	r3, r2
 8019eee:	0019      	movs	r1, r3
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	691b      	ldr	r3, [r3, #16]
 8019ef4:	021a      	lsls	r2, r3, #8
 8019ef6:	4b40      	ldr	r3, [pc, #256]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019ef8:	430a      	orrs	r2, r1
 8019efa:	605a      	str	r2, [r3, #4]
 8019efc:	e018      	b.n	8019f30 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019efe:	4b3e      	ldr	r3, [pc, #248]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f00:	681a      	ldr	r2, [r3, #0]
 8019f02:	4b3d      	ldr	r3, [pc, #244]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f04:	2101      	movs	r1, #1
 8019f06:	438a      	bics	r2, r1
 8019f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f0a:	f7f9 fb0f 	bl	801352c <HAL_GetTick>
 8019f0e:	0003      	movs	r3, r0
 8019f10:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8019f12:	e008      	b.n	8019f26 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019f14:	f7f9 fb0a 	bl	801352c <HAL_GetTick>
 8019f18:	0002      	movs	r2, r0
 8019f1a:	697b      	ldr	r3, [r7, #20]
 8019f1c:	1ad3      	subs	r3, r2, r3
 8019f1e:	2b02      	cmp	r3, #2
 8019f20:	d901      	bls.n	8019f26 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8019f22:	2303      	movs	r3, #3
 8019f24:	e293      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8019f26:	4b34      	ldr	r3, [pc, #208]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2204      	movs	r2, #4
 8019f2c:	4013      	ands	r3, r2
 8019f2e:	d1f1      	bne.n	8019f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	2210      	movs	r2, #16
 8019f36:	4013      	ands	r3, r2
 8019f38:	d100      	bne.n	8019f3c <HAL_RCC_OscConfig+0x280>
 8019f3a:	e0a2      	b.n	801a082 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8019f3c:	69fb      	ldr	r3, [r7, #28]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d140      	bne.n	8019fc4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8019f42:	4b2d      	ldr	r3, [pc, #180]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f44:	681a      	ldr	r2, [r3, #0]
 8019f46:	2380      	movs	r3, #128	@ 0x80
 8019f48:	009b      	lsls	r3, r3, #2
 8019f4a:	4013      	ands	r3, r2
 8019f4c:	d005      	beq.n	8019f5a <HAL_RCC_OscConfig+0x29e>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	69db      	ldr	r3, [r3, #28]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d101      	bne.n	8019f5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8019f56:	2301      	movs	r3, #1
 8019f58:	e279      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019f5a:	4b27      	ldr	r3, [pc, #156]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f5c:	685b      	ldr	r3, [r3, #4]
 8019f5e:	4a2d      	ldr	r2, [pc, #180]	@ (801a014 <HAL_RCC_OscConfig+0x358>)
 8019f60:	4013      	ands	r3, r2
 8019f62:	0019      	movs	r1, r3
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019f68:	4b23      	ldr	r3, [pc, #140]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f6a:	430a      	orrs	r2, r1
 8019f6c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019f6e:	4b22      	ldr	r3, [pc, #136]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f70:	685b      	ldr	r3, [r3, #4]
 8019f72:	021b      	lsls	r3, r3, #8
 8019f74:	0a19      	lsrs	r1, r3, #8
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	6a1b      	ldr	r3, [r3, #32]
 8019f7a:	061a      	lsls	r2, r3, #24
 8019f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f7e:	430a      	orrs	r2, r1
 8019f80:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f86:	0b5b      	lsrs	r3, r3, #13
 8019f88:	3301      	adds	r3, #1
 8019f8a:	2280      	movs	r2, #128	@ 0x80
 8019f8c:	0212      	lsls	r2, r2, #8
 8019f8e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8019f90:	4b19      	ldr	r3, [pc, #100]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019f92:	68db      	ldr	r3, [r3, #12]
 8019f94:	091b      	lsrs	r3, r3, #4
 8019f96:	210f      	movs	r1, #15
 8019f98:	400b      	ands	r3, r1
 8019f9a:	491b      	ldr	r1, [pc, #108]	@ (801a008 <HAL_RCC_OscConfig+0x34c>)
 8019f9c:	5ccb      	ldrb	r3, [r1, r3]
 8019f9e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8019fa0:	4b1a      	ldr	r3, [pc, #104]	@ (801a00c <HAL_RCC_OscConfig+0x350>)
 8019fa2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8019fa4:	4b1a      	ldr	r3, [pc, #104]	@ (801a010 <HAL_RCC_OscConfig+0x354>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	2513      	movs	r5, #19
 8019faa:	197c      	adds	r4, r7, r5
 8019fac:	0018      	movs	r0, r3
 8019fae:	f7f9 fa77 	bl	80134a0 <HAL_InitTick>
 8019fb2:	0003      	movs	r3, r0
 8019fb4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8019fb6:	197b      	adds	r3, r7, r5
 8019fb8:	781b      	ldrb	r3, [r3, #0]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d061      	beq.n	801a082 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8019fbe:	197b      	adds	r3, r7, r5
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	e244      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	69db      	ldr	r3, [r3, #28]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d040      	beq.n	801a04e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8019fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019fce:	681a      	ldr	r2, [r3, #0]
 8019fd0:	4b09      	ldr	r3, [pc, #36]	@ (8019ff8 <HAL_RCC_OscConfig+0x33c>)
 8019fd2:	2180      	movs	r1, #128	@ 0x80
 8019fd4:	0049      	lsls	r1, r1, #1
 8019fd6:	430a      	orrs	r2, r1
 8019fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019fda:	f7f9 faa7 	bl	801352c <HAL_GetTick>
 8019fde:	0003      	movs	r3, r0
 8019fe0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8019fe2:	e019      	b.n	801a018 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019fe4:	f7f9 faa2 	bl	801352c <HAL_GetTick>
 8019fe8:	0002      	movs	r2, r0
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	1ad3      	subs	r3, r2, r3
 8019fee:	2b02      	cmp	r3, #2
 8019ff0:	d912      	bls.n	801a018 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8019ff2:	2303      	movs	r3, #3
 8019ff4:	e22b      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
 8019ff6:	46c0      	nop			@ (mov r8, r8)
 8019ff8:	40021000 	.word	0x40021000
 8019ffc:	fffeffff 	.word	0xfffeffff
 801a000:	fffbffff 	.word	0xfffbffff
 801a004:	ffffe0ff 	.word	0xffffe0ff
 801a008:	0802d344 	.word	0x0802d344
 801a00c:	200000e0 	.word	0x200000e0
 801a010:	200000f0 	.word	0x200000f0
 801a014:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a018:	4bca      	ldr	r3, [pc, #808]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a01a:	681a      	ldr	r2, [r3, #0]
 801a01c:	2380      	movs	r3, #128	@ 0x80
 801a01e:	009b      	lsls	r3, r3, #2
 801a020:	4013      	ands	r3, r2
 801a022:	d0df      	beq.n	8019fe4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a024:	4bc7      	ldr	r3, [pc, #796]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	4ac7      	ldr	r2, [pc, #796]	@ (801a348 <HAL_RCC_OscConfig+0x68c>)
 801a02a:	4013      	ands	r3, r2
 801a02c:	0019      	movs	r1, r3
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a032:	4bc4      	ldr	r3, [pc, #784]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a034:	430a      	orrs	r2, r1
 801a036:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a038:	4bc2      	ldr	r3, [pc, #776]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a03a:	685b      	ldr	r3, [r3, #4]
 801a03c:	021b      	lsls	r3, r3, #8
 801a03e:	0a19      	lsrs	r1, r3, #8
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6a1b      	ldr	r3, [r3, #32]
 801a044:	061a      	lsls	r2, r3, #24
 801a046:	4bbf      	ldr	r3, [pc, #764]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a048:	430a      	orrs	r2, r1
 801a04a:	605a      	str	r2, [r3, #4]
 801a04c:	e019      	b.n	801a082 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a04e:	4bbd      	ldr	r3, [pc, #756]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a050:	681a      	ldr	r2, [r3, #0]
 801a052:	4bbc      	ldr	r3, [pc, #752]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a054:	49bd      	ldr	r1, [pc, #756]	@ (801a34c <HAL_RCC_OscConfig+0x690>)
 801a056:	400a      	ands	r2, r1
 801a058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a05a:	f7f9 fa67 	bl	801352c <HAL_GetTick>
 801a05e:	0003      	movs	r3, r0
 801a060:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a062:	e008      	b.n	801a076 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a064:	f7f9 fa62 	bl	801352c <HAL_GetTick>
 801a068:	0002      	movs	r2, r0
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	1ad3      	subs	r3, r2, r3
 801a06e:	2b02      	cmp	r3, #2
 801a070:	d901      	bls.n	801a076 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801a072:	2303      	movs	r3, #3
 801a074:	e1eb      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a076:	4bb3      	ldr	r3, [pc, #716]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a078:	681a      	ldr	r2, [r3, #0]
 801a07a:	2380      	movs	r3, #128	@ 0x80
 801a07c:	009b      	lsls	r3, r3, #2
 801a07e:	4013      	ands	r3, r2
 801a080:	d1f0      	bne.n	801a064 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	2208      	movs	r2, #8
 801a088:	4013      	ands	r3, r2
 801a08a:	d036      	beq.n	801a0fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	695b      	ldr	r3, [r3, #20]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d019      	beq.n	801a0c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a094:	4bab      	ldr	r3, [pc, #684]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a096:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a098:	4baa      	ldr	r3, [pc, #680]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a09a:	2101      	movs	r1, #1
 801a09c:	430a      	orrs	r2, r1
 801a09e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a0a0:	f7f9 fa44 	bl	801352c <HAL_GetTick>
 801a0a4:	0003      	movs	r3, r0
 801a0a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a0a8:	e008      	b.n	801a0bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a0aa:	f7f9 fa3f 	bl	801352c <HAL_GetTick>
 801a0ae:	0002      	movs	r2, r0
 801a0b0:	697b      	ldr	r3, [r7, #20]
 801a0b2:	1ad3      	subs	r3, r2, r3
 801a0b4:	2b02      	cmp	r3, #2
 801a0b6:	d901      	bls.n	801a0bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801a0b8:	2303      	movs	r3, #3
 801a0ba:	e1c8      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a0bc:	4ba1      	ldr	r3, [pc, #644]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a0be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0c0:	2202      	movs	r2, #2
 801a0c2:	4013      	ands	r3, r2
 801a0c4:	d0f1      	beq.n	801a0aa <HAL_RCC_OscConfig+0x3ee>
 801a0c6:	e018      	b.n	801a0fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a0c8:	4b9e      	ldr	r3, [pc, #632]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a0ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a0cc:	4b9d      	ldr	r3, [pc, #628]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a0ce:	2101      	movs	r1, #1
 801a0d0:	438a      	bics	r2, r1
 801a0d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a0d4:	f7f9 fa2a 	bl	801352c <HAL_GetTick>
 801a0d8:	0003      	movs	r3, r0
 801a0da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a0dc:	e008      	b.n	801a0f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a0de:	f7f9 fa25 	bl	801352c <HAL_GetTick>
 801a0e2:	0002      	movs	r2, r0
 801a0e4:	697b      	ldr	r3, [r7, #20]
 801a0e6:	1ad3      	subs	r3, r2, r3
 801a0e8:	2b02      	cmp	r3, #2
 801a0ea:	d901      	bls.n	801a0f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801a0ec:	2303      	movs	r3, #3
 801a0ee:	e1ae      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a0f0:	4b94      	ldr	r3, [pc, #592]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0f4:	2202      	movs	r2, #2
 801a0f6:	4013      	ands	r3, r2
 801a0f8:	d1f1      	bne.n	801a0de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2204      	movs	r2, #4
 801a100:	4013      	ands	r3, r2
 801a102:	d100      	bne.n	801a106 <HAL_RCC_OscConfig+0x44a>
 801a104:	e0ae      	b.n	801a264 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a106:	2023      	movs	r0, #35	@ 0x23
 801a108:	183b      	adds	r3, r7, r0
 801a10a:	2200      	movs	r2, #0
 801a10c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a10e:	4b8d      	ldr	r3, [pc, #564]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a112:	2380      	movs	r3, #128	@ 0x80
 801a114:	055b      	lsls	r3, r3, #21
 801a116:	4013      	ands	r3, r2
 801a118:	d109      	bne.n	801a12e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a11a:	4b8a      	ldr	r3, [pc, #552]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a11c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a11e:	4b89      	ldr	r3, [pc, #548]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a120:	2180      	movs	r1, #128	@ 0x80
 801a122:	0549      	lsls	r1, r1, #21
 801a124:	430a      	orrs	r2, r1
 801a126:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a128:	183b      	adds	r3, r7, r0
 801a12a:	2201      	movs	r2, #1
 801a12c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a12e:	4b88      	ldr	r3, [pc, #544]	@ (801a350 <HAL_RCC_OscConfig+0x694>)
 801a130:	681a      	ldr	r2, [r3, #0]
 801a132:	2380      	movs	r3, #128	@ 0x80
 801a134:	005b      	lsls	r3, r3, #1
 801a136:	4013      	ands	r3, r2
 801a138:	d11a      	bne.n	801a170 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a13a:	4b85      	ldr	r3, [pc, #532]	@ (801a350 <HAL_RCC_OscConfig+0x694>)
 801a13c:	681a      	ldr	r2, [r3, #0]
 801a13e:	4b84      	ldr	r3, [pc, #528]	@ (801a350 <HAL_RCC_OscConfig+0x694>)
 801a140:	2180      	movs	r1, #128	@ 0x80
 801a142:	0049      	lsls	r1, r1, #1
 801a144:	430a      	orrs	r2, r1
 801a146:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a148:	f7f9 f9f0 	bl	801352c <HAL_GetTick>
 801a14c:	0003      	movs	r3, r0
 801a14e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a150:	e008      	b.n	801a164 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a152:	f7f9 f9eb 	bl	801352c <HAL_GetTick>
 801a156:	0002      	movs	r2, r0
 801a158:	697b      	ldr	r3, [r7, #20]
 801a15a:	1ad3      	subs	r3, r2, r3
 801a15c:	2b64      	cmp	r3, #100	@ 0x64
 801a15e:	d901      	bls.n	801a164 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801a160:	2303      	movs	r3, #3
 801a162:	e174      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a164:	4b7a      	ldr	r3, [pc, #488]	@ (801a350 <HAL_RCC_OscConfig+0x694>)
 801a166:	681a      	ldr	r2, [r3, #0]
 801a168:	2380      	movs	r3, #128	@ 0x80
 801a16a:	005b      	lsls	r3, r3, #1
 801a16c:	4013      	ands	r3, r2
 801a16e:	d0f0      	beq.n	801a152 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	689a      	ldr	r2, [r3, #8]
 801a174:	2380      	movs	r3, #128	@ 0x80
 801a176:	005b      	lsls	r3, r3, #1
 801a178:	429a      	cmp	r2, r3
 801a17a:	d107      	bne.n	801a18c <HAL_RCC_OscConfig+0x4d0>
 801a17c:	4b71      	ldr	r3, [pc, #452]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a17e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a180:	4b70      	ldr	r3, [pc, #448]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a182:	2180      	movs	r1, #128	@ 0x80
 801a184:	0049      	lsls	r1, r1, #1
 801a186:	430a      	orrs	r2, r1
 801a188:	651a      	str	r2, [r3, #80]	@ 0x50
 801a18a:	e031      	b.n	801a1f0 <HAL_RCC_OscConfig+0x534>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	689b      	ldr	r3, [r3, #8]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d10c      	bne.n	801a1ae <HAL_RCC_OscConfig+0x4f2>
 801a194:	4b6b      	ldr	r3, [pc, #428]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a198:	4b6a      	ldr	r3, [pc, #424]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a19a:	496c      	ldr	r1, [pc, #432]	@ (801a34c <HAL_RCC_OscConfig+0x690>)
 801a19c:	400a      	ands	r2, r1
 801a19e:	651a      	str	r2, [r3, #80]	@ 0x50
 801a1a0:	4b68      	ldr	r3, [pc, #416]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a1a4:	4b67      	ldr	r3, [pc, #412]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1a6:	496b      	ldr	r1, [pc, #428]	@ (801a354 <HAL_RCC_OscConfig+0x698>)
 801a1a8:	400a      	ands	r2, r1
 801a1aa:	651a      	str	r2, [r3, #80]	@ 0x50
 801a1ac:	e020      	b.n	801a1f0 <HAL_RCC_OscConfig+0x534>
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	689a      	ldr	r2, [r3, #8]
 801a1b2:	23a0      	movs	r3, #160	@ 0xa0
 801a1b4:	00db      	lsls	r3, r3, #3
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d10e      	bne.n	801a1d8 <HAL_RCC_OscConfig+0x51c>
 801a1ba:	4b62      	ldr	r3, [pc, #392]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a1be:	4b61      	ldr	r3, [pc, #388]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1c0:	2180      	movs	r1, #128	@ 0x80
 801a1c2:	00c9      	lsls	r1, r1, #3
 801a1c4:	430a      	orrs	r2, r1
 801a1c6:	651a      	str	r2, [r3, #80]	@ 0x50
 801a1c8:	4b5e      	ldr	r3, [pc, #376]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a1cc:	4b5d      	ldr	r3, [pc, #372]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1ce:	2180      	movs	r1, #128	@ 0x80
 801a1d0:	0049      	lsls	r1, r1, #1
 801a1d2:	430a      	orrs	r2, r1
 801a1d4:	651a      	str	r2, [r3, #80]	@ 0x50
 801a1d6:	e00b      	b.n	801a1f0 <HAL_RCC_OscConfig+0x534>
 801a1d8:	4b5a      	ldr	r3, [pc, #360]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a1dc:	4b59      	ldr	r3, [pc, #356]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1de:	495b      	ldr	r1, [pc, #364]	@ (801a34c <HAL_RCC_OscConfig+0x690>)
 801a1e0:	400a      	ands	r2, r1
 801a1e2:	651a      	str	r2, [r3, #80]	@ 0x50
 801a1e4:	4b57      	ldr	r3, [pc, #348]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a1e8:	4b56      	ldr	r3, [pc, #344]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a1ea:	495a      	ldr	r1, [pc, #360]	@ (801a354 <HAL_RCC_OscConfig+0x698>)
 801a1ec:	400a      	ands	r2, r1
 801a1ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	689b      	ldr	r3, [r3, #8]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d015      	beq.n	801a224 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a1f8:	f7f9 f998 	bl	801352c <HAL_GetTick>
 801a1fc:	0003      	movs	r3, r0
 801a1fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a200:	e009      	b.n	801a216 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a202:	f7f9 f993 	bl	801352c <HAL_GetTick>
 801a206:	0002      	movs	r2, r0
 801a208:	697b      	ldr	r3, [r7, #20]
 801a20a:	1ad3      	subs	r3, r2, r3
 801a20c:	4a52      	ldr	r2, [pc, #328]	@ (801a358 <HAL_RCC_OscConfig+0x69c>)
 801a20e:	4293      	cmp	r3, r2
 801a210:	d901      	bls.n	801a216 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801a212:	2303      	movs	r3, #3
 801a214:	e11b      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a216:	4b4b      	ldr	r3, [pc, #300]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a21a:	2380      	movs	r3, #128	@ 0x80
 801a21c:	009b      	lsls	r3, r3, #2
 801a21e:	4013      	ands	r3, r2
 801a220:	d0ef      	beq.n	801a202 <HAL_RCC_OscConfig+0x546>
 801a222:	e014      	b.n	801a24e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a224:	f7f9 f982 	bl	801352c <HAL_GetTick>
 801a228:	0003      	movs	r3, r0
 801a22a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a22c:	e009      	b.n	801a242 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a22e:	f7f9 f97d 	bl	801352c <HAL_GetTick>
 801a232:	0002      	movs	r2, r0
 801a234:	697b      	ldr	r3, [r7, #20]
 801a236:	1ad3      	subs	r3, r2, r3
 801a238:	4a47      	ldr	r2, [pc, #284]	@ (801a358 <HAL_RCC_OscConfig+0x69c>)
 801a23a:	4293      	cmp	r3, r2
 801a23c:	d901      	bls.n	801a242 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801a23e:	2303      	movs	r3, #3
 801a240:	e105      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a242:	4b40      	ldr	r3, [pc, #256]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a246:	2380      	movs	r3, #128	@ 0x80
 801a248:	009b      	lsls	r3, r3, #2
 801a24a:	4013      	ands	r3, r2
 801a24c:	d1ef      	bne.n	801a22e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801a24e:	2323      	movs	r3, #35	@ 0x23
 801a250:	18fb      	adds	r3, r7, r3
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	2b01      	cmp	r3, #1
 801a256:	d105      	bne.n	801a264 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a258:	4b3a      	ldr	r3, [pc, #232]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a25a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a25c:	4b39      	ldr	r3, [pc, #228]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a25e:	493f      	ldr	r1, [pc, #252]	@ (801a35c <HAL_RCC_OscConfig+0x6a0>)
 801a260:	400a      	ands	r2, r1
 801a262:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2220      	movs	r2, #32
 801a26a:	4013      	ands	r3, r2
 801a26c:	d049      	beq.n	801a302 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	699b      	ldr	r3, [r3, #24]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d026      	beq.n	801a2c4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801a276:	4b33      	ldr	r3, [pc, #204]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a278:	689a      	ldr	r2, [r3, #8]
 801a27a:	4b32      	ldr	r3, [pc, #200]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a27c:	2101      	movs	r1, #1
 801a27e:	430a      	orrs	r2, r1
 801a280:	609a      	str	r2, [r3, #8]
 801a282:	4b30      	ldr	r3, [pc, #192]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a286:	4b2f      	ldr	r3, [pc, #188]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a288:	2101      	movs	r1, #1
 801a28a:	430a      	orrs	r2, r1
 801a28c:	635a      	str	r2, [r3, #52]	@ 0x34
 801a28e:	4b34      	ldr	r3, [pc, #208]	@ (801a360 <HAL_RCC_OscConfig+0x6a4>)
 801a290:	6a1a      	ldr	r2, [r3, #32]
 801a292:	4b33      	ldr	r3, [pc, #204]	@ (801a360 <HAL_RCC_OscConfig+0x6a4>)
 801a294:	2180      	movs	r1, #128	@ 0x80
 801a296:	0189      	lsls	r1, r1, #6
 801a298:	430a      	orrs	r2, r1
 801a29a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a29c:	f7f9 f946 	bl	801352c <HAL_GetTick>
 801a2a0:	0003      	movs	r3, r0
 801a2a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a2a4:	e008      	b.n	801a2b8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a2a6:	f7f9 f941 	bl	801352c <HAL_GetTick>
 801a2aa:	0002      	movs	r2, r0
 801a2ac:	697b      	ldr	r3, [r7, #20]
 801a2ae:	1ad3      	subs	r3, r2, r3
 801a2b0:	2b02      	cmp	r3, #2
 801a2b2:	d901      	bls.n	801a2b8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801a2b4:	2303      	movs	r3, #3
 801a2b6:	e0ca      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a2b8:	4b22      	ldr	r3, [pc, #136]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a2ba:	689b      	ldr	r3, [r3, #8]
 801a2bc:	2202      	movs	r2, #2
 801a2be:	4013      	ands	r3, r2
 801a2c0:	d0f1      	beq.n	801a2a6 <HAL_RCC_OscConfig+0x5ea>
 801a2c2:	e01e      	b.n	801a302 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801a2c4:	4b1f      	ldr	r3, [pc, #124]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a2c6:	689a      	ldr	r2, [r3, #8]
 801a2c8:	4b1e      	ldr	r3, [pc, #120]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a2ca:	2101      	movs	r1, #1
 801a2cc:	438a      	bics	r2, r1
 801a2ce:	609a      	str	r2, [r3, #8]
 801a2d0:	4b23      	ldr	r3, [pc, #140]	@ (801a360 <HAL_RCC_OscConfig+0x6a4>)
 801a2d2:	6a1a      	ldr	r2, [r3, #32]
 801a2d4:	4b22      	ldr	r3, [pc, #136]	@ (801a360 <HAL_RCC_OscConfig+0x6a4>)
 801a2d6:	4923      	ldr	r1, [pc, #140]	@ (801a364 <HAL_RCC_OscConfig+0x6a8>)
 801a2d8:	400a      	ands	r2, r1
 801a2da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a2dc:	f7f9 f926 	bl	801352c <HAL_GetTick>
 801a2e0:	0003      	movs	r3, r0
 801a2e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a2e4:	e008      	b.n	801a2f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a2e6:	f7f9 f921 	bl	801352c <HAL_GetTick>
 801a2ea:	0002      	movs	r2, r0
 801a2ec:	697b      	ldr	r3, [r7, #20]
 801a2ee:	1ad3      	subs	r3, r2, r3
 801a2f0:	2b02      	cmp	r3, #2
 801a2f2:	d901      	bls.n	801a2f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801a2f4:	2303      	movs	r3, #3
 801a2f6:	e0aa      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a2f8:	4b12      	ldr	r3, [pc, #72]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a2fa:	689b      	ldr	r3, [r3, #8]
 801a2fc:	2202      	movs	r2, #2
 801a2fe:	4013      	ands	r3, r2
 801a300:	d1f1      	bne.n	801a2e6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a306:	2b00      	cmp	r3, #0
 801a308:	d100      	bne.n	801a30c <HAL_RCC_OscConfig+0x650>
 801a30a:	e09f      	b.n	801a44c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a30c:	69fb      	ldr	r3, [r7, #28]
 801a30e:	2b0c      	cmp	r3, #12
 801a310:	d100      	bne.n	801a314 <HAL_RCC_OscConfig+0x658>
 801a312:	e078      	b.n	801a406 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a318:	2b02      	cmp	r3, #2
 801a31a:	d159      	bne.n	801a3d0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a31c:	4b09      	ldr	r3, [pc, #36]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a31e:	681a      	ldr	r2, [r3, #0]
 801a320:	4b08      	ldr	r3, [pc, #32]	@ (801a344 <HAL_RCC_OscConfig+0x688>)
 801a322:	4911      	ldr	r1, [pc, #68]	@ (801a368 <HAL_RCC_OscConfig+0x6ac>)
 801a324:	400a      	ands	r2, r1
 801a326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a328:	f7f9 f900 	bl	801352c <HAL_GetTick>
 801a32c:	0003      	movs	r3, r0
 801a32e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a330:	e01c      	b.n	801a36c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a332:	f7f9 f8fb 	bl	801352c <HAL_GetTick>
 801a336:	0002      	movs	r2, r0
 801a338:	697b      	ldr	r3, [r7, #20]
 801a33a:	1ad3      	subs	r3, r2, r3
 801a33c:	2b02      	cmp	r3, #2
 801a33e:	d915      	bls.n	801a36c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801a340:	2303      	movs	r3, #3
 801a342:	e084      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
 801a344:	40021000 	.word	0x40021000
 801a348:	ffff1fff 	.word	0xffff1fff
 801a34c:	fffffeff 	.word	0xfffffeff
 801a350:	40007000 	.word	0x40007000
 801a354:	fffffbff 	.word	0xfffffbff
 801a358:	00001388 	.word	0x00001388
 801a35c:	efffffff 	.word	0xefffffff
 801a360:	40010000 	.word	0x40010000
 801a364:	ffffdfff 	.word	0xffffdfff
 801a368:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a36c:	4b3a      	ldr	r3, [pc, #232]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a36e:	681a      	ldr	r2, [r3, #0]
 801a370:	2380      	movs	r3, #128	@ 0x80
 801a372:	049b      	lsls	r3, r3, #18
 801a374:	4013      	ands	r3, r2
 801a376:	d1dc      	bne.n	801a332 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801a378:	4b37      	ldr	r3, [pc, #220]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a37a:	68db      	ldr	r3, [r3, #12]
 801a37c:	4a37      	ldr	r2, [pc, #220]	@ (801a45c <HAL_RCC_OscConfig+0x7a0>)
 801a37e:	4013      	ands	r3, r2
 801a380:	0019      	movs	r1, r3
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a38a:	431a      	orrs	r2, r3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a390:	431a      	orrs	r2, r3
 801a392:	4b31      	ldr	r3, [pc, #196]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a394:	430a      	orrs	r2, r1
 801a396:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a398:	4b2f      	ldr	r3, [pc, #188]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a39a:	681a      	ldr	r2, [r3, #0]
 801a39c:	4b2e      	ldr	r3, [pc, #184]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a39e:	2180      	movs	r1, #128	@ 0x80
 801a3a0:	0449      	lsls	r1, r1, #17
 801a3a2:	430a      	orrs	r2, r1
 801a3a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a3a6:	f7f9 f8c1 	bl	801352c <HAL_GetTick>
 801a3aa:	0003      	movs	r3, r0
 801a3ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801a3ae:	e008      	b.n	801a3c2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a3b0:	f7f9 f8bc 	bl	801352c <HAL_GetTick>
 801a3b4:	0002      	movs	r2, r0
 801a3b6:	697b      	ldr	r3, [r7, #20]
 801a3b8:	1ad3      	subs	r3, r2, r3
 801a3ba:	2b02      	cmp	r3, #2
 801a3bc:	d901      	bls.n	801a3c2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801a3be:	2303      	movs	r3, #3
 801a3c0:	e045      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801a3c2:	4b25      	ldr	r3, [pc, #148]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a3c4:	681a      	ldr	r2, [r3, #0]
 801a3c6:	2380      	movs	r3, #128	@ 0x80
 801a3c8:	049b      	lsls	r3, r3, #18
 801a3ca:	4013      	ands	r3, r2
 801a3cc:	d0f0      	beq.n	801a3b0 <HAL_RCC_OscConfig+0x6f4>
 801a3ce:	e03d      	b.n	801a44c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a3d0:	4b21      	ldr	r3, [pc, #132]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a3d2:	681a      	ldr	r2, [r3, #0]
 801a3d4:	4b20      	ldr	r3, [pc, #128]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a3d6:	4922      	ldr	r1, [pc, #136]	@ (801a460 <HAL_RCC_OscConfig+0x7a4>)
 801a3d8:	400a      	ands	r2, r1
 801a3da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a3dc:	f7f9 f8a6 	bl	801352c <HAL_GetTick>
 801a3e0:	0003      	movs	r3, r0
 801a3e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a3e4:	e008      	b.n	801a3f8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a3e6:	f7f9 f8a1 	bl	801352c <HAL_GetTick>
 801a3ea:	0002      	movs	r2, r0
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	1ad3      	subs	r3, r2, r3
 801a3f0:	2b02      	cmp	r3, #2
 801a3f2:	d901      	bls.n	801a3f8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801a3f4:	2303      	movs	r3, #3
 801a3f6:	e02a      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a3f8:	4b17      	ldr	r3, [pc, #92]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a3fa:	681a      	ldr	r2, [r3, #0]
 801a3fc:	2380      	movs	r3, #128	@ 0x80
 801a3fe:	049b      	lsls	r3, r3, #18
 801a400:	4013      	ands	r3, r2
 801a402:	d1f0      	bne.n	801a3e6 <HAL_RCC_OscConfig+0x72a>
 801a404:	e022      	b.n	801a44c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a40a:	2b01      	cmp	r3, #1
 801a40c:	d101      	bne.n	801a412 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801a40e:	2301      	movs	r3, #1
 801a410:	e01d      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801a412:	4b11      	ldr	r3, [pc, #68]	@ (801a458 <HAL_RCC_OscConfig+0x79c>)
 801a414:	68db      	ldr	r3, [r3, #12]
 801a416:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a418:	69ba      	ldr	r2, [r7, #24]
 801a41a:	2380      	movs	r3, #128	@ 0x80
 801a41c:	025b      	lsls	r3, r3, #9
 801a41e:	401a      	ands	r2, r3
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a424:	429a      	cmp	r2, r3
 801a426:	d10f      	bne.n	801a448 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801a428:	69ba      	ldr	r2, [r7, #24]
 801a42a:	23f0      	movs	r3, #240	@ 0xf0
 801a42c:	039b      	lsls	r3, r3, #14
 801a42e:	401a      	ands	r2, r3
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a434:	429a      	cmp	r2, r3
 801a436:	d107      	bne.n	801a448 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801a438:	69ba      	ldr	r2, [r7, #24]
 801a43a:	23c0      	movs	r3, #192	@ 0xc0
 801a43c:	041b      	lsls	r3, r3, #16
 801a43e:	401a      	ands	r2, r3
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801a444:	429a      	cmp	r2, r3
 801a446:	d001      	beq.n	801a44c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801a448:	2301      	movs	r3, #1
 801a44a:	e000      	b.n	801a44e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801a44c:	2300      	movs	r3, #0
}
 801a44e:	0018      	movs	r0, r3
 801a450:	46bd      	mov	sp, r7
 801a452:	b00a      	add	sp, #40	@ 0x28
 801a454:	bdb0      	pop	{r4, r5, r7, pc}
 801a456:	46c0      	nop			@ (mov r8, r8)
 801a458:	40021000 	.word	0x40021000
 801a45c:	ff02ffff 	.word	0xff02ffff
 801a460:	feffffff 	.word	0xfeffffff

0801a464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a464:	b5b0      	push	{r4, r5, r7, lr}
 801a466:	b084      	sub	sp, #16
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
 801a46c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d101      	bne.n	801a478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a474:	2301      	movs	r3, #1
 801a476:	e128      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a478:	4b96      	ldr	r3, [pc, #600]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	2201      	movs	r2, #1
 801a47e:	4013      	ands	r3, r2
 801a480:	683a      	ldr	r2, [r7, #0]
 801a482:	429a      	cmp	r2, r3
 801a484:	d91e      	bls.n	801a4c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a486:	4b93      	ldr	r3, [pc, #588]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	2201      	movs	r2, #1
 801a48c:	4393      	bics	r3, r2
 801a48e:	0019      	movs	r1, r3
 801a490:	4b90      	ldr	r3, [pc, #576]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a492:	683a      	ldr	r2, [r7, #0]
 801a494:	430a      	orrs	r2, r1
 801a496:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801a498:	f7f9 f848 	bl	801352c <HAL_GetTick>
 801a49c:	0003      	movs	r3, r0
 801a49e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a4a0:	e009      	b.n	801a4b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a4a2:	f7f9 f843 	bl	801352c <HAL_GetTick>
 801a4a6:	0002      	movs	r2, r0
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	1ad3      	subs	r3, r2, r3
 801a4ac:	4a8a      	ldr	r2, [pc, #552]	@ (801a6d8 <HAL_RCC_ClockConfig+0x274>)
 801a4ae:	4293      	cmp	r3, r2
 801a4b0:	d901      	bls.n	801a4b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801a4b2:	2303      	movs	r3, #3
 801a4b4:	e109      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a4b6:	4b87      	ldr	r3, [pc, #540]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	4013      	ands	r3, r2
 801a4be:	683a      	ldr	r2, [r7, #0]
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	d1ee      	bne.n	801a4a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	2202      	movs	r2, #2
 801a4ca:	4013      	ands	r3, r2
 801a4cc:	d009      	beq.n	801a4e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a4ce:	4b83      	ldr	r3, [pc, #524]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a4d0:	68db      	ldr	r3, [r3, #12]
 801a4d2:	22f0      	movs	r2, #240	@ 0xf0
 801a4d4:	4393      	bics	r3, r2
 801a4d6:	0019      	movs	r1, r3
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	689a      	ldr	r2, [r3, #8]
 801a4dc:	4b7f      	ldr	r3, [pc, #508]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a4de:	430a      	orrs	r2, r1
 801a4e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	2201      	movs	r2, #1
 801a4e8:	4013      	ands	r3, r2
 801a4ea:	d100      	bne.n	801a4ee <HAL_RCC_ClockConfig+0x8a>
 801a4ec:	e089      	b.n	801a602 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	685b      	ldr	r3, [r3, #4]
 801a4f2:	2b02      	cmp	r3, #2
 801a4f4:	d107      	bne.n	801a506 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a4f6:	4b79      	ldr	r3, [pc, #484]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a4f8:	681a      	ldr	r2, [r3, #0]
 801a4fa:	2380      	movs	r3, #128	@ 0x80
 801a4fc:	029b      	lsls	r3, r3, #10
 801a4fe:	4013      	ands	r3, r2
 801a500:	d120      	bne.n	801a544 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a502:	2301      	movs	r3, #1
 801a504:	e0e1      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	2b03      	cmp	r3, #3
 801a50c:	d107      	bne.n	801a51e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a50e:	4b73      	ldr	r3, [pc, #460]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a510:	681a      	ldr	r2, [r3, #0]
 801a512:	2380      	movs	r3, #128	@ 0x80
 801a514:	049b      	lsls	r3, r3, #18
 801a516:	4013      	ands	r3, r2
 801a518:	d114      	bne.n	801a544 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a51a:	2301      	movs	r3, #1
 801a51c:	e0d5      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	685b      	ldr	r3, [r3, #4]
 801a522:	2b01      	cmp	r3, #1
 801a524:	d106      	bne.n	801a534 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a526:	4b6d      	ldr	r3, [pc, #436]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	2204      	movs	r2, #4
 801a52c:	4013      	ands	r3, r2
 801a52e:	d109      	bne.n	801a544 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a530:	2301      	movs	r3, #1
 801a532:	e0ca      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a534:	4b69      	ldr	r3, [pc, #420]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a536:	681a      	ldr	r2, [r3, #0]
 801a538:	2380      	movs	r3, #128	@ 0x80
 801a53a:	009b      	lsls	r3, r3, #2
 801a53c:	4013      	ands	r3, r2
 801a53e:	d101      	bne.n	801a544 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a540:	2301      	movs	r3, #1
 801a542:	e0c2      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a544:	4b65      	ldr	r3, [pc, #404]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a546:	68db      	ldr	r3, [r3, #12]
 801a548:	2203      	movs	r2, #3
 801a54a:	4393      	bics	r3, r2
 801a54c:	0019      	movs	r1, r3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	685a      	ldr	r2, [r3, #4]
 801a552:	4b62      	ldr	r3, [pc, #392]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a554:	430a      	orrs	r2, r1
 801a556:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a558:	f7f8 ffe8 	bl	801352c <HAL_GetTick>
 801a55c:	0003      	movs	r3, r0
 801a55e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	685b      	ldr	r3, [r3, #4]
 801a564:	2b02      	cmp	r3, #2
 801a566:	d111      	bne.n	801a58c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801a568:	e009      	b.n	801a57e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a56a:	f7f8 ffdf 	bl	801352c <HAL_GetTick>
 801a56e:	0002      	movs	r2, r0
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	1ad3      	subs	r3, r2, r3
 801a574:	4a58      	ldr	r2, [pc, #352]	@ (801a6d8 <HAL_RCC_ClockConfig+0x274>)
 801a576:	4293      	cmp	r3, r2
 801a578:	d901      	bls.n	801a57e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801a57a:	2303      	movs	r3, #3
 801a57c:	e0a5      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801a57e:	4b57      	ldr	r3, [pc, #348]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a580:	68db      	ldr	r3, [r3, #12]
 801a582:	220c      	movs	r2, #12
 801a584:	4013      	ands	r3, r2
 801a586:	2b08      	cmp	r3, #8
 801a588:	d1ef      	bne.n	801a56a <HAL_RCC_ClockConfig+0x106>
 801a58a:	e03a      	b.n	801a602 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	2b03      	cmp	r3, #3
 801a592:	d111      	bne.n	801a5b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a594:	e009      	b.n	801a5aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a596:	f7f8 ffc9 	bl	801352c <HAL_GetTick>
 801a59a:	0002      	movs	r2, r0
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	1ad3      	subs	r3, r2, r3
 801a5a0:	4a4d      	ldr	r2, [pc, #308]	@ (801a6d8 <HAL_RCC_ClockConfig+0x274>)
 801a5a2:	4293      	cmp	r3, r2
 801a5a4:	d901      	bls.n	801a5aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801a5a6:	2303      	movs	r3, #3
 801a5a8:	e08f      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a5aa:	4b4c      	ldr	r3, [pc, #304]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a5ac:	68db      	ldr	r3, [r3, #12]
 801a5ae:	220c      	movs	r2, #12
 801a5b0:	4013      	ands	r3, r2
 801a5b2:	2b0c      	cmp	r3, #12
 801a5b4:	d1ef      	bne.n	801a596 <HAL_RCC_ClockConfig+0x132>
 801a5b6:	e024      	b.n	801a602 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	685b      	ldr	r3, [r3, #4]
 801a5bc:	2b01      	cmp	r3, #1
 801a5be:	d11b      	bne.n	801a5f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801a5c0:	e009      	b.n	801a5d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a5c2:	f7f8 ffb3 	bl	801352c <HAL_GetTick>
 801a5c6:	0002      	movs	r2, r0
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	1ad3      	subs	r3, r2, r3
 801a5cc:	4a42      	ldr	r2, [pc, #264]	@ (801a6d8 <HAL_RCC_ClockConfig+0x274>)
 801a5ce:	4293      	cmp	r3, r2
 801a5d0:	d901      	bls.n	801a5d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801a5d2:	2303      	movs	r3, #3
 801a5d4:	e079      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801a5d6:	4b41      	ldr	r3, [pc, #260]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a5d8:	68db      	ldr	r3, [r3, #12]
 801a5da:	220c      	movs	r2, #12
 801a5dc:	4013      	ands	r3, r2
 801a5de:	2b04      	cmp	r3, #4
 801a5e0:	d1ef      	bne.n	801a5c2 <HAL_RCC_ClockConfig+0x15e>
 801a5e2:	e00e      	b.n	801a602 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a5e4:	f7f8 ffa2 	bl	801352c <HAL_GetTick>
 801a5e8:	0002      	movs	r2, r0
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	1ad3      	subs	r3, r2, r3
 801a5ee:	4a3a      	ldr	r2, [pc, #232]	@ (801a6d8 <HAL_RCC_ClockConfig+0x274>)
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d901      	bls.n	801a5f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801a5f4:	2303      	movs	r3, #3
 801a5f6:	e068      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801a5f8:	4b38      	ldr	r3, [pc, #224]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a5fa:	68db      	ldr	r3, [r3, #12]
 801a5fc:	220c      	movs	r2, #12
 801a5fe:	4013      	ands	r3, r2
 801a600:	d1f0      	bne.n	801a5e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a602:	4b34      	ldr	r3, [pc, #208]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	2201      	movs	r2, #1
 801a608:	4013      	ands	r3, r2
 801a60a:	683a      	ldr	r2, [r7, #0]
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d21e      	bcs.n	801a64e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a610:	4b30      	ldr	r3, [pc, #192]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2201      	movs	r2, #1
 801a616:	4393      	bics	r3, r2
 801a618:	0019      	movs	r1, r3
 801a61a:	4b2e      	ldr	r3, [pc, #184]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a61c:	683a      	ldr	r2, [r7, #0]
 801a61e:	430a      	orrs	r2, r1
 801a620:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801a622:	f7f8 ff83 	bl	801352c <HAL_GetTick>
 801a626:	0003      	movs	r3, r0
 801a628:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a62a:	e009      	b.n	801a640 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a62c:	f7f8 ff7e 	bl	801352c <HAL_GetTick>
 801a630:	0002      	movs	r2, r0
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	1ad3      	subs	r3, r2, r3
 801a636:	4a28      	ldr	r2, [pc, #160]	@ (801a6d8 <HAL_RCC_ClockConfig+0x274>)
 801a638:	4293      	cmp	r3, r2
 801a63a:	d901      	bls.n	801a640 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801a63c:	2303      	movs	r3, #3
 801a63e:	e044      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a640:	4b24      	ldr	r3, [pc, #144]	@ (801a6d4 <HAL_RCC_ClockConfig+0x270>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	2201      	movs	r2, #1
 801a646:	4013      	ands	r3, r2
 801a648:	683a      	ldr	r2, [r7, #0]
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d1ee      	bne.n	801a62c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	2204      	movs	r2, #4
 801a654:	4013      	ands	r3, r2
 801a656:	d009      	beq.n	801a66c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a658:	4b20      	ldr	r3, [pc, #128]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a65a:	68db      	ldr	r3, [r3, #12]
 801a65c:	4a20      	ldr	r2, [pc, #128]	@ (801a6e0 <HAL_RCC_ClockConfig+0x27c>)
 801a65e:	4013      	ands	r3, r2
 801a660:	0019      	movs	r1, r3
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	68da      	ldr	r2, [r3, #12]
 801a666:	4b1d      	ldr	r3, [pc, #116]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a668:	430a      	orrs	r2, r1
 801a66a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	2208      	movs	r2, #8
 801a672:	4013      	ands	r3, r2
 801a674:	d00a      	beq.n	801a68c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801a676:	4b19      	ldr	r3, [pc, #100]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a678:	68db      	ldr	r3, [r3, #12]
 801a67a:	4a1a      	ldr	r2, [pc, #104]	@ (801a6e4 <HAL_RCC_ClockConfig+0x280>)
 801a67c:	4013      	ands	r3, r2
 801a67e:	0019      	movs	r1, r3
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	691b      	ldr	r3, [r3, #16]
 801a684:	00da      	lsls	r2, r3, #3
 801a686:	4b15      	ldr	r3, [pc, #84]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a688:	430a      	orrs	r2, r1
 801a68a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a68c:	f000 f832 	bl	801a6f4 <HAL_RCC_GetSysClockFreq>
 801a690:	0001      	movs	r1, r0
 801a692:	4b12      	ldr	r3, [pc, #72]	@ (801a6dc <HAL_RCC_ClockConfig+0x278>)
 801a694:	68db      	ldr	r3, [r3, #12]
 801a696:	091b      	lsrs	r3, r3, #4
 801a698:	220f      	movs	r2, #15
 801a69a:	4013      	ands	r3, r2
 801a69c:	4a12      	ldr	r2, [pc, #72]	@ (801a6e8 <HAL_RCC_ClockConfig+0x284>)
 801a69e:	5cd3      	ldrb	r3, [r2, r3]
 801a6a0:	000a      	movs	r2, r1
 801a6a2:	40da      	lsrs	r2, r3
 801a6a4:	4b11      	ldr	r3, [pc, #68]	@ (801a6ec <HAL_RCC_ClockConfig+0x288>)
 801a6a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801a6a8:	4b11      	ldr	r3, [pc, #68]	@ (801a6f0 <HAL_RCC_ClockConfig+0x28c>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	250b      	movs	r5, #11
 801a6ae:	197c      	adds	r4, r7, r5
 801a6b0:	0018      	movs	r0, r3
 801a6b2:	f7f8 fef5 	bl	80134a0 <HAL_InitTick>
 801a6b6:	0003      	movs	r3, r0
 801a6b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801a6ba:	197b      	adds	r3, r7, r5
 801a6bc:	781b      	ldrb	r3, [r3, #0]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d002      	beq.n	801a6c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801a6c2:	197b      	adds	r3, r7, r5
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	e000      	b.n	801a6ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801a6c8:	2300      	movs	r3, #0
}
 801a6ca:	0018      	movs	r0, r3
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	b004      	add	sp, #16
 801a6d0:	bdb0      	pop	{r4, r5, r7, pc}
 801a6d2:	46c0      	nop			@ (mov r8, r8)
 801a6d4:	40022000 	.word	0x40022000
 801a6d8:	00001388 	.word	0x00001388
 801a6dc:	40021000 	.word	0x40021000
 801a6e0:	fffff8ff 	.word	0xfffff8ff
 801a6e4:	ffffc7ff 	.word	0xffffc7ff
 801a6e8:	0802d344 	.word	0x0802d344
 801a6ec:	200000e0 	.word	0x200000e0
 801a6f0:	200000f0 	.word	0x200000f0

0801a6f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a6f4:	b5b0      	push	{r4, r5, r7, lr}
 801a6f6:	b08e      	sub	sp, #56	@ 0x38
 801a6f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801a6fa:	4b4c      	ldr	r3, [pc, #304]	@ (801a82c <HAL_RCC_GetSysClockFreq+0x138>)
 801a6fc:	68db      	ldr	r3, [r3, #12]
 801a6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801a700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a702:	230c      	movs	r3, #12
 801a704:	4013      	ands	r3, r2
 801a706:	2b0c      	cmp	r3, #12
 801a708:	d014      	beq.n	801a734 <HAL_RCC_GetSysClockFreq+0x40>
 801a70a:	d900      	bls.n	801a70e <HAL_RCC_GetSysClockFreq+0x1a>
 801a70c:	e07b      	b.n	801a806 <HAL_RCC_GetSysClockFreq+0x112>
 801a70e:	2b04      	cmp	r3, #4
 801a710:	d002      	beq.n	801a718 <HAL_RCC_GetSysClockFreq+0x24>
 801a712:	2b08      	cmp	r3, #8
 801a714:	d00b      	beq.n	801a72e <HAL_RCC_GetSysClockFreq+0x3a>
 801a716:	e076      	b.n	801a806 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801a718:	4b44      	ldr	r3, [pc, #272]	@ (801a82c <HAL_RCC_GetSysClockFreq+0x138>)
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	2210      	movs	r2, #16
 801a71e:	4013      	ands	r3, r2
 801a720:	d002      	beq.n	801a728 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801a722:	4b43      	ldr	r3, [pc, #268]	@ (801a830 <HAL_RCC_GetSysClockFreq+0x13c>)
 801a724:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801a726:	e07c      	b.n	801a822 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801a728:	4b42      	ldr	r3, [pc, #264]	@ (801a834 <HAL_RCC_GetSysClockFreq+0x140>)
 801a72a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a72c:	e079      	b.n	801a822 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801a72e:	4b42      	ldr	r3, [pc, #264]	@ (801a838 <HAL_RCC_GetSysClockFreq+0x144>)
 801a730:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a732:	e076      	b.n	801a822 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801a734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a736:	0c9a      	lsrs	r2, r3, #18
 801a738:	230f      	movs	r3, #15
 801a73a:	401a      	ands	r2, r3
 801a73c:	4b3f      	ldr	r3, [pc, #252]	@ (801a83c <HAL_RCC_GetSysClockFreq+0x148>)
 801a73e:	5c9b      	ldrb	r3, [r3, r2]
 801a740:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a744:	0d9a      	lsrs	r2, r3, #22
 801a746:	2303      	movs	r3, #3
 801a748:	4013      	ands	r3, r2
 801a74a:	3301      	adds	r3, #1
 801a74c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a74e:	4b37      	ldr	r3, [pc, #220]	@ (801a82c <HAL_RCC_GetSysClockFreq+0x138>)
 801a750:	68da      	ldr	r2, [r3, #12]
 801a752:	2380      	movs	r3, #128	@ 0x80
 801a754:	025b      	lsls	r3, r3, #9
 801a756:	4013      	ands	r3, r2
 801a758:	d01a      	beq.n	801a790 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a75c:	61bb      	str	r3, [r7, #24]
 801a75e:	2300      	movs	r3, #0
 801a760:	61fb      	str	r3, [r7, #28]
 801a762:	4a35      	ldr	r2, [pc, #212]	@ (801a838 <HAL_RCC_GetSysClockFreq+0x144>)
 801a764:	2300      	movs	r3, #0
 801a766:	69b8      	ldr	r0, [r7, #24]
 801a768:	69f9      	ldr	r1, [r7, #28]
 801a76a:	f7e5 ff29 	bl	80005c0 <__aeabi_lmul>
 801a76e:	0002      	movs	r2, r0
 801a770:	000b      	movs	r3, r1
 801a772:	0010      	movs	r0, r2
 801a774:	0019      	movs	r1, r3
 801a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a778:	613b      	str	r3, [r7, #16]
 801a77a:	2300      	movs	r3, #0
 801a77c:	617b      	str	r3, [r7, #20]
 801a77e:	693a      	ldr	r2, [r7, #16]
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	f7e5 fefd 	bl	8000580 <__aeabi_uldivmod>
 801a786:	0002      	movs	r2, r0
 801a788:	000b      	movs	r3, r1
 801a78a:	0013      	movs	r3, r2
 801a78c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a78e:	e037      	b.n	801a800 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801a790:	4b26      	ldr	r3, [pc, #152]	@ (801a82c <HAL_RCC_GetSysClockFreq+0x138>)
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	2210      	movs	r2, #16
 801a796:	4013      	ands	r3, r2
 801a798:	d01a      	beq.n	801a7d0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801a79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a79c:	60bb      	str	r3, [r7, #8]
 801a79e:	2300      	movs	r3, #0
 801a7a0:	60fb      	str	r3, [r7, #12]
 801a7a2:	4a23      	ldr	r2, [pc, #140]	@ (801a830 <HAL_RCC_GetSysClockFreq+0x13c>)
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	68b8      	ldr	r0, [r7, #8]
 801a7a8:	68f9      	ldr	r1, [r7, #12]
 801a7aa:	f7e5 ff09 	bl	80005c0 <__aeabi_lmul>
 801a7ae:	0002      	movs	r2, r0
 801a7b0:	000b      	movs	r3, r1
 801a7b2:	0010      	movs	r0, r2
 801a7b4:	0019      	movs	r1, r3
 801a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7b8:	603b      	str	r3, [r7, #0]
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	607b      	str	r3, [r7, #4]
 801a7be:	683a      	ldr	r2, [r7, #0]
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	f7e5 fedd 	bl	8000580 <__aeabi_uldivmod>
 801a7c6:	0002      	movs	r2, r0
 801a7c8:	000b      	movs	r3, r1
 801a7ca:	0013      	movs	r3, r2
 801a7cc:	637b      	str	r3, [r7, #52]	@ 0x34
 801a7ce:	e017      	b.n	801a800 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d2:	0018      	movs	r0, r3
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	0019      	movs	r1, r3
 801a7d8:	4a16      	ldr	r2, [pc, #88]	@ (801a834 <HAL_RCC_GetSysClockFreq+0x140>)
 801a7da:	2300      	movs	r3, #0
 801a7dc:	f7e5 fef0 	bl	80005c0 <__aeabi_lmul>
 801a7e0:	0002      	movs	r2, r0
 801a7e2:	000b      	movs	r3, r1
 801a7e4:	0010      	movs	r0, r2
 801a7e6:	0019      	movs	r1, r3
 801a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ea:	001c      	movs	r4, r3
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	001d      	movs	r5, r3
 801a7f0:	0022      	movs	r2, r4
 801a7f2:	002b      	movs	r3, r5
 801a7f4:	f7e5 fec4 	bl	8000580 <__aeabi_uldivmod>
 801a7f8:	0002      	movs	r2, r0
 801a7fa:	000b      	movs	r3, r1
 801a7fc:	0013      	movs	r3, r2
 801a7fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801a800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a802:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a804:	e00d      	b.n	801a822 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801a806:	4b09      	ldr	r3, [pc, #36]	@ (801a82c <HAL_RCC_GetSysClockFreq+0x138>)
 801a808:	685b      	ldr	r3, [r3, #4]
 801a80a:	0b5b      	lsrs	r3, r3, #13
 801a80c:	2207      	movs	r2, #7
 801a80e:	4013      	ands	r3, r2
 801a810:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801a812:	6a3b      	ldr	r3, [r7, #32]
 801a814:	3301      	adds	r3, #1
 801a816:	2280      	movs	r2, #128	@ 0x80
 801a818:	0212      	lsls	r2, r2, #8
 801a81a:	409a      	lsls	r2, r3
 801a81c:	0013      	movs	r3, r2
 801a81e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a820:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801a824:	0018      	movs	r0, r3
 801a826:	46bd      	mov	sp, r7
 801a828:	b00e      	add	sp, #56	@ 0x38
 801a82a:	bdb0      	pop	{r4, r5, r7, pc}
 801a82c:	40021000 	.word	0x40021000
 801a830:	003d0900 	.word	0x003d0900
 801a834:	00f42400 	.word	0x00f42400
 801a838:	007a1200 	.word	0x007a1200
 801a83c:	0802d35c 	.word	0x0802d35c

0801a840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a844:	4b02      	ldr	r3, [pc, #8]	@ (801a850 <HAL_RCC_GetHCLKFreq+0x10>)
 801a846:	681b      	ldr	r3, [r3, #0]
}
 801a848:	0018      	movs	r0, r3
 801a84a:	46bd      	mov	sp, r7
 801a84c:	bd80      	pop	{r7, pc}
 801a84e:	46c0      	nop			@ (mov r8, r8)
 801a850:	200000e0 	.word	0x200000e0

0801a854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801a858:	f7ff fff2 	bl	801a840 <HAL_RCC_GetHCLKFreq>
 801a85c:	0001      	movs	r1, r0
 801a85e:	4b06      	ldr	r3, [pc, #24]	@ (801a878 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a860:	68db      	ldr	r3, [r3, #12]
 801a862:	0a1b      	lsrs	r3, r3, #8
 801a864:	2207      	movs	r2, #7
 801a866:	4013      	ands	r3, r2
 801a868:	4a04      	ldr	r2, [pc, #16]	@ (801a87c <HAL_RCC_GetPCLK1Freq+0x28>)
 801a86a:	5cd3      	ldrb	r3, [r2, r3]
 801a86c:	40d9      	lsrs	r1, r3
 801a86e:	000b      	movs	r3, r1
}
 801a870:	0018      	movs	r0, r3
 801a872:	46bd      	mov	sp, r7
 801a874:	bd80      	pop	{r7, pc}
 801a876:	46c0      	nop			@ (mov r8, r8)
 801a878:	40021000 	.word	0x40021000
 801a87c:	0802d354 	.word	0x0802d354

0801a880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801a884:	f7ff ffdc 	bl	801a840 <HAL_RCC_GetHCLKFreq>
 801a888:	0001      	movs	r1, r0
 801a88a:	4b06      	ldr	r3, [pc, #24]	@ (801a8a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a88c:	68db      	ldr	r3, [r3, #12]
 801a88e:	0adb      	lsrs	r3, r3, #11
 801a890:	2207      	movs	r2, #7
 801a892:	4013      	ands	r3, r2
 801a894:	4a04      	ldr	r2, [pc, #16]	@ (801a8a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801a896:	5cd3      	ldrb	r3, [r2, r3]
 801a898:	40d9      	lsrs	r1, r3
 801a89a:	000b      	movs	r3, r1
}
 801a89c:	0018      	movs	r0, r3
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	bd80      	pop	{r7, pc}
 801a8a2:	46c0      	nop			@ (mov r8, r8)
 801a8a4:	40021000 	.word	0x40021000
 801a8a8:	0802d354 	.word	0x0802d354

0801a8ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b086      	sub	sp, #24
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801a8b4:	2017      	movs	r0, #23
 801a8b6:	183b      	adds	r3, r7, r0
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	2220      	movs	r2, #32
 801a8c2:	4013      	ands	r3, r2
 801a8c4:	d100      	bne.n	801a8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801a8c6:	e0c7      	b.n	801aa58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a8c8:	4b9b      	ldr	r3, [pc, #620]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a8cc:	2380      	movs	r3, #128	@ 0x80
 801a8ce:	055b      	lsls	r3, r3, #21
 801a8d0:	4013      	ands	r3, r2
 801a8d2:	d109      	bne.n	801a8e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a8d4:	4b98      	ldr	r3, [pc, #608]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a8d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a8d8:	4b97      	ldr	r3, [pc, #604]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a8da:	2180      	movs	r1, #128	@ 0x80
 801a8dc:	0549      	lsls	r1, r1, #21
 801a8de:	430a      	orrs	r2, r1
 801a8e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a8e2:	183b      	adds	r3, r7, r0
 801a8e4:	2201      	movs	r2, #1
 801a8e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a8e8:	4b94      	ldr	r3, [pc, #592]	@ (801ab3c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a8ea:	681a      	ldr	r2, [r3, #0]
 801a8ec:	2380      	movs	r3, #128	@ 0x80
 801a8ee:	005b      	lsls	r3, r3, #1
 801a8f0:	4013      	ands	r3, r2
 801a8f2:	d11a      	bne.n	801a92a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a8f4:	4b91      	ldr	r3, [pc, #580]	@ (801ab3c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	4b90      	ldr	r3, [pc, #576]	@ (801ab3c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a8fa:	2180      	movs	r1, #128	@ 0x80
 801a8fc:	0049      	lsls	r1, r1, #1
 801a8fe:	430a      	orrs	r2, r1
 801a900:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a902:	f7f8 fe13 	bl	801352c <HAL_GetTick>
 801a906:	0003      	movs	r3, r0
 801a908:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a90a:	e008      	b.n	801a91e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a90c:	f7f8 fe0e 	bl	801352c <HAL_GetTick>
 801a910:	0002      	movs	r2, r0
 801a912:	693b      	ldr	r3, [r7, #16]
 801a914:	1ad3      	subs	r3, r2, r3
 801a916:	2b64      	cmp	r3, #100	@ 0x64
 801a918:	d901      	bls.n	801a91e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801a91a:	2303      	movs	r3, #3
 801a91c:	e107      	b.n	801ab2e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a91e:	4b87      	ldr	r3, [pc, #540]	@ (801ab3c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a920:	681a      	ldr	r2, [r3, #0]
 801a922:	2380      	movs	r3, #128	@ 0x80
 801a924:	005b      	lsls	r3, r3, #1
 801a926:	4013      	ands	r3, r2
 801a928:	d0f0      	beq.n	801a90c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801a92a:	4b83      	ldr	r3, [pc, #524]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a92c:	681a      	ldr	r2, [r3, #0]
 801a92e:	23c0      	movs	r3, #192	@ 0xc0
 801a930:	039b      	lsls	r3, r3, #14
 801a932:	4013      	ands	r3, r2
 801a934:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	685a      	ldr	r2, [r3, #4]
 801a93a:	23c0      	movs	r3, #192	@ 0xc0
 801a93c:	039b      	lsls	r3, r3, #14
 801a93e:	4013      	ands	r3, r2
 801a940:	68fa      	ldr	r2, [r7, #12]
 801a942:	429a      	cmp	r2, r3
 801a944:	d013      	beq.n	801a96e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	685a      	ldr	r2, [r3, #4]
 801a94a:	23c0      	movs	r3, #192	@ 0xc0
 801a94c:	029b      	lsls	r3, r3, #10
 801a94e:	401a      	ands	r2, r3
 801a950:	23c0      	movs	r3, #192	@ 0xc0
 801a952:	029b      	lsls	r3, r3, #10
 801a954:	429a      	cmp	r2, r3
 801a956:	d10a      	bne.n	801a96e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801a958:	4b77      	ldr	r3, [pc, #476]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a95a:	681a      	ldr	r2, [r3, #0]
 801a95c:	2380      	movs	r3, #128	@ 0x80
 801a95e:	029b      	lsls	r3, r3, #10
 801a960:	401a      	ands	r2, r3
 801a962:	2380      	movs	r3, #128	@ 0x80
 801a964:	029b      	lsls	r3, r3, #10
 801a966:	429a      	cmp	r2, r3
 801a968:	d101      	bne.n	801a96e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801a96a:	2301      	movs	r3, #1
 801a96c:	e0df      	b.n	801ab2e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801a96e:	4b72      	ldr	r3, [pc, #456]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a972:	23c0      	movs	r3, #192	@ 0xc0
 801a974:	029b      	lsls	r3, r3, #10
 801a976:	4013      	ands	r3, r2
 801a978:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d03b      	beq.n	801a9f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	685a      	ldr	r2, [r3, #4]
 801a984:	23c0      	movs	r3, #192	@ 0xc0
 801a986:	029b      	lsls	r3, r3, #10
 801a988:	4013      	ands	r3, r2
 801a98a:	68fa      	ldr	r2, [r7, #12]
 801a98c:	429a      	cmp	r2, r3
 801a98e:	d033      	beq.n	801a9f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	2220      	movs	r2, #32
 801a996:	4013      	ands	r3, r2
 801a998:	d02e      	beq.n	801a9f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801a99a:	4b67      	ldr	r3, [pc, #412]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a99c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a99e:	4a68      	ldr	r2, [pc, #416]	@ (801ab40 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801a9a0:	4013      	ands	r3, r2
 801a9a2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801a9a4:	4b64      	ldr	r3, [pc, #400]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a9a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a9a8:	4b63      	ldr	r3, [pc, #396]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a9aa:	2180      	movs	r1, #128	@ 0x80
 801a9ac:	0309      	lsls	r1, r1, #12
 801a9ae:	430a      	orrs	r2, r1
 801a9b0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801a9b2:	4b61      	ldr	r3, [pc, #388]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a9b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a9b6:	4b60      	ldr	r3, [pc, #384]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a9b8:	4962      	ldr	r1, [pc, #392]	@ (801ab44 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801a9ba:	400a      	ands	r2, r1
 801a9bc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801a9be:	4b5e      	ldr	r3, [pc, #376]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a9c0:	68fa      	ldr	r2, [r7, #12]
 801a9c2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801a9c4:	68fa      	ldr	r2, [r7, #12]
 801a9c6:	2380      	movs	r3, #128	@ 0x80
 801a9c8:	005b      	lsls	r3, r3, #1
 801a9ca:	4013      	ands	r3, r2
 801a9cc:	d014      	beq.n	801a9f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a9ce:	f7f8 fdad 	bl	801352c <HAL_GetTick>
 801a9d2:	0003      	movs	r3, r0
 801a9d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a9d6:	e009      	b.n	801a9ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a9d8:	f7f8 fda8 	bl	801352c <HAL_GetTick>
 801a9dc:	0002      	movs	r2, r0
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	1ad3      	subs	r3, r2, r3
 801a9e2:	4a59      	ldr	r2, [pc, #356]	@ (801ab48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801a9e4:	4293      	cmp	r3, r2
 801a9e6:	d901      	bls.n	801a9ec <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801a9e8:	2303      	movs	r3, #3
 801a9ea:	e0a0      	b.n	801ab2e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a9ec:	4b52      	ldr	r3, [pc, #328]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a9ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a9f0:	2380      	movs	r3, #128	@ 0x80
 801a9f2:	009b      	lsls	r3, r3, #2
 801a9f4:	4013      	ands	r3, r2
 801a9f6:	d0ef      	beq.n	801a9d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	2220      	movs	r2, #32
 801a9fe:	4013      	ands	r3, r2
 801aa00:	d01f      	beq.n	801aa42 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	685a      	ldr	r2, [r3, #4]
 801aa06:	23c0      	movs	r3, #192	@ 0xc0
 801aa08:	029b      	lsls	r3, r3, #10
 801aa0a:	401a      	ands	r2, r3
 801aa0c:	23c0      	movs	r3, #192	@ 0xc0
 801aa0e:	029b      	lsls	r3, r3, #10
 801aa10:	429a      	cmp	r2, r3
 801aa12:	d10c      	bne.n	801aa2e <HAL_RCCEx_PeriphCLKConfig+0x182>
 801aa14:	4b48      	ldr	r3, [pc, #288]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4a4c      	ldr	r2, [pc, #304]	@ (801ab4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801aa1a:	4013      	ands	r3, r2
 801aa1c:	0019      	movs	r1, r3
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	685a      	ldr	r2, [r3, #4]
 801aa22:	23c0      	movs	r3, #192	@ 0xc0
 801aa24:	039b      	lsls	r3, r3, #14
 801aa26:	401a      	ands	r2, r3
 801aa28:	4b43      	ldr	r3, [pc, #268]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa2a:	430a      	orrs	r2, r1
 801aa2c:	601a      	str	r2, [r3, #0]
 801aa2e:	4b42      	ldr	r3, [pc, #264]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	685a      	ldr	r2, [r3, #4]
 801aa36:	23c0      	movs	r3, #192	@ 0xc0
 801aa38:	029b      	lsls	r3, r3, #10
 801aa3a:	401a      	ands	r2, r3
 801aa3c:	4b3e      	ldr	r3, [pc, #248]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa3e:	430a      	orrs	r2, r1
 801aa40:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801aa42:	2317      	movs	r3, #23
 801aa44:	18fb      	adds	r3, r7, r3
 801aa46:	781b      	ldrb	r3, [r3, #0]
 801aa48:	2b01      	cmp	r3, #1
 801aa4a:	d105      	bne.n	801aa58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801aa4c:	4b3a      	ldr	r3, [pc, #232]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aa50:	4b39      	ldr	r3, [pc, #228]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa52:	493f      	ldr	r1, [pc, #252]	@ (801ab50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801aa54:	400a      	ands	r2, r1
 801aa56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	2201      	movs	r2, #1
 801aa5e:	4013      	ands	r3, r2
 801aa60:	d009      	beq.n	801aa76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801aa62:	4b35      	ldr	r3, [pc, #212]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa66:	2203      	movs	r2, #3
 801aa68:	4393      	bics	r3, r2
 801aa6a:	0019      	movs	r1, r3
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	689a      	ldr	r2, [r3, #8]
 801aa70:	4b31      	ldr	r3, [pc, #196]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa72:	430a      	orrs	r2, r1
 801aa74:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2202      	movs	r2, #2
 801aa7c:	4013      	ands	r3, r2
 801aa7e:	d009      	beq.n	801aa94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801aa80:	4b2d      	ldr	r3, [pc, #180]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa84:	220c      	movs	r2, #12
 801aa86:	4393      	bics	r3, r2
 801aa88:	0019      	movs	r1, r3
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	68da      	ldr	r2, [r3, #12]
 801aa8e:	4b2a      	ldr	r3, [pc, #168]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa90:	430a      	orrs	r2, r1
 801aa92:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	2204      	movs	r2, #4
 801aa9a:	4013      	ands	r3, r2
 801aa9c:	d009      	beq.n	801aab2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801aa9e:	4b26      	ldr	r3, [pc, #152]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aaa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aaa2:	4a2c      	ldr	r2, [pc, #176]	@ (801ab54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801aaa4:	4013      	ands	r3, r2
 801aaa6:	0019      	movs	r1, r3
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	691a      	ldr	r2, [r3, #16]
 801aaac:	4b22      	ldr	r3, [pc, #136]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aaae:	430a      	orrs	r2, r1
 801aab0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	2208      	movs	r2, #8
 801aab8:	4013      	ands	r3, r2
 801aaba:	d009      	beq.n	801aad0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801aabc:	4b1e      	ldr	r3, [pc, #120]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aabe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aac0:	4a25      	ldr	r2, [pc, #148]	@ (801ab58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801aac2:	4013      	ands	r3, r2
 801aac4:	0019      	movs	r1, r3
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	695a      	ldr	r2, [r3, #20]
 801aaca:	4b1b      	ldr	r3, [pc, #108]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aacc:	430a      	orrs	r2, r1
 801aace:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	681a      	ldr	r2, [r3, #0]
 801aad4:	2380      	movs	r3, #128	@ 0x80
 801aad6:	005b      	lsls	r3, r3, #1
 801aad8:	4013      	ands	r3, r2
 801aada:	d009      	beq.n	801aaf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801aadc:	4b16      	ldr	r3, [pc, #88]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aae0:	4a17      	ldr	r2, [pc, #92]	@ (801ab40 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801aae2:	4013      	ands	r3, r2
 801aae4:	0019      	movs	r1, r3
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	699a      	ldr	r2, [r3, #24]
 801aaea:	4b13      	ldr	r3, [pc, #76]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aaec:	430a      	orrs	r2, r1
 801aaee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	2240      	movs	r2, #64	@ 0x40
 801aaf6:	4013      	ands	r3, r2
 801aaf8:	d009      	beq.n	801ab0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801aafa:	4b0f      	ldr	r3, [pc, #60]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aafe:	4a17      	ldr	r2, [pc, #92]	@ (801ab5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801ab00:	4013      	ands	r3, r2
 801ab02:	0019      	movs	r1, r3
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	6a1a      	ldr	r2, [r3, #32]
 801ab08:	4b0b      	ldr	r3, [pc, #44]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab0a:	430a      	orrs	r2, r1
 801ab0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	2280      	movs	r2, #128	@ 0x80
 801ab14:	4013      	ands	r3, r2
 801ab16:	d009      	beq.n	801ab2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801ab18:	4b07      	ldr	r3, [pc, #28]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ab1c:	4a10      	ldr	r2, [pc, #64]	@ (801ab60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801ab1e:	4013      	ands	r3, r2
 801ab20:	0019      	movs	r1, r3
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	69da      	ldr	r2, [r3, #28]
 801ab26:	4b04      	ldr	r3, [pc, #16]	@ (801ab38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab28:	430a      	orrs	r2, r1
 801ab2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801ab2c:	2300      	movs	r3, #0
}
 801ab2e:	0018      	movs	r0, r3
 801ab30:	46bd      	mov	sp, r7
 801ab32:	b006      	add	sp, #24
 801ab34:	bd80      	pop	{r7, pc}
 801ab36:	46c0      	nop			@ (mov r8, r8)
 801ab38:	40021000 	.word	0x40021000
 801ab3c:	40007000 	.word	0x40007000
 801ab40:	fffcffff 	.word	0xfffcffff
 801ab44:	fff7ffff 	.word	0xfff7ffff
 801ab48:	00001388 	.word	0x00001388
 801ab4c:	ffcfffff 	.word	0xffcfffff
 801ab50:	efffffff 	.word	0xefffffff
 801ab54:	fffff3ff 	.word	0xfffff3ff
 801ab58:	ffffcfff 	.word	0xffffcfff
 801ab5c:	fbffffff 	.word	0xfbffffff
 801ab60:	fff3ffff 	.word	0xfff3ffff

0801ab64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801ab64:	b5b0      	push	{r4, r5, r7, lr}
 801ab66:	b084      	sub	sp, #16
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801ab6c:	230f      	movs	r3, #15
 801ab6e:	18fb      	adds	r3, r7, r3
 801ab70:	2201      	movs	r2, #1
 801ab72:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d101      	bne.n	801ab7e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801ab7a:	2301      	movs	r3, #1
 801ab7c:	e088      	b.n	801ac90 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	2221      	movs	r2, #33	@ 0x21
 801ab82:	5c9b      	ldrb	r3, [r3, r2]
 801ab84:	b2db      	uxtb	r3, r3
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d107      	bne.n	801ab9a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	2220      	movs	r2, #32
 801ab8e:	2100      	movs	r1, #0
 801ab90:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	0018      	movs	r0, r3
 801ab96:	f7f2 fc09 	bl	800d3ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2221      	movs	r2, #33	@ 0x21
 801ab9e:	2102      	movs	r1, #2
 801aba0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	68db      	ldr	r3, [r3, #12]
 801aba8:	2210      	movs	r2, #16
 801abaa:	4013      	ands	r3, r2
 801abac:	2b10      	cmp	r3, #16
 801abae:	d05f      	beq.n	801ac70 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	22ca      	movs	r2, #202	@ 0xca
 801abb6:	625a      	str	r2, [r3, #36]	@ 0x24
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	2253      	movs	r2, #83	@ 0x53
 801abbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801abc0:	250f      	movs	r5, #15
 801abc2:	197c      	adds	r4, r7, r5
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	0018      	movs	r0, r3
 801abc8:	f000 fa7c 	bl	801b0c4 <RTC_EnterInitMode>
 801abcc:	0003      	movs	r3, r0
 801abce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801abd0:	0028      	movs	r0, r5
 801abd2:	183b      	adds	r3, r7, r0
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d12c      	bne.n	801ac34 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	689a      	ldr	r2, [r3, #8]
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	492c      	ldr	r1, [pc, #176]	@ (801ac98 <HAL_RTC_Init+0x134>)
 801abe6:	400a      	ands	r2, r1
 801abe8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	6899      	ldr	r1, [r3, #8]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	685a      	ldr	r2, [r3, #4]
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	691b      	ldr	r3, [r3, #16]
 801abf8:	431a      	orrs	r2, r3
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	699b      	ldr	r3, [r3, #24]
 801abfe:	431a      	orrs	r2, r3
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	430a      	orrs	r2, r1
 801ac06:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	687a      	ldr	r2, [r7, #4]
 801ac0e:	68d2      	ldr	r2, [r2, #12]
 801ac10:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	6919      	ldr	r1, [r3, #16]
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	689b      	ldr	r3, [r3, #8]
 801ac1c:	041a      	lsls	r2, r3, #16
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	430a      	orrs	r2, r1
 801ac24:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801ac26:	183c      	adds	r4, r7, r0
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	0018      	movs	r0, r3
 801ac2c:	f000 fa8e 	bl	801b14c <RTC_ExitInitMode>
 801ac30:	0003      	movs	r3, r0
 801ac32:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801ac34:	230f      	movs	r3, #15
 801ac36:	18fb      	adds	r3, r7, r3
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d113      	bne.n	801ac66 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2103      	movs	r1, #3
 801ac4a:	438a      	bics	r2, r1
 801ac4c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	69da      	ldr	r2, [r3, #28]
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	695b      	ldr	r3, [r3, #20]
 801ac5c:	431a      	orrs	r2, r3
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	430a      	orrs	r2, r1
 801ac64:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	22ff      	movs	r2, #255	@ 0xff
 801ac6c:	625a      	str	r2, [r3, #36]	@ 0x24
 801ac6e:	e003      	b.n	801ac78 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801ac70:	230f      	movs	r3, #15
 801ac72:	18fb      	adds	r3, r7, r3
 801ac74:	2200      	movs	r2, #0
 801ac76:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801ac78:	230f      	movs	r3, #15
 801ac7a:	18fb      	adds	r3, r7, r3
 801ac7c:	781b      	ldrb	r3, [r3, #0]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d103      	bne.n	801ac8a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	2221      	movs	r2, #33	@ 0x21
 801ac86:	2101      	movs	r1, #1
 801ac88:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801ac8a:	230f      	movs	r3, #15
 801ac8c:	18fb      	adds	r3, r7, r3
 801ac8e:	781b      	ldrb	r3, [r3, #0]
}
 801ac90:	0018      	movs	r0, r3
 801ac92:	46bd      	mov	sp, r7
 801ac94:	b004      	add	sp, #16
 801ac96:	bdb0      	pop	{r4, r5, r7, pc}
 801ac98:	ff8fffbf 	.word	0xff8fffbf

0801ac9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801ac9c:	b5b0      	push	{r4, r5, r7, lr}
 801ac9e:	b086      	sub	sp, #24
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	60f8      	str	r0, [r7, #12]
 801aca4:	60b9      	str	r1, [r7, #8]
 801aca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801aca8:	2300      	movs	r3, #0
 801acaa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	2220      	movs	r2, #32
 801acb0:	5c9b      	ldrb	r3, [r3, r2]
 801acb2:	2b01      	cmp	r3, #1
 801acb4:	d101      	bne.n	801acba <HAL_RTC_SetTime+0x1e>
 801acb6:	2302      	movs	r3, #2
 801acb8:	e092      	b.n	801ade0 <HAL_RTC_SetTime+0x144>
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	2220      	movs	r2, #32
 801acbe:	2101      	movs	r1, #1
 801acc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	2221      	movs	r2, #33	@ 0x21
 801acc6:	2102      	movs	r1, #2
 801acc8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d125      	bne.n	801ad1c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	689b      	ldr	r3, [r3, #8]
 801acd6:	2240      	movs	r2, #64	@ 0x40
 801acd8:	4013      	ands	r3, r2
 801acda:	d102      	bne.n	801ace2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	2200      	movs	r2, #0
 801ace0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	781b      	ldrb	r3, [r3, #0]
 801ace6:	0018      	movs	r0, r3
 801ace8:	f000 fa5a 	bl	801b1a0 <RTC_ByteToBcd2>
 801acec:	0003      	movs	r3, r0
 801acee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	785b      	ldrb	r3, [r3, #1]
 801acf4:	0018      	movs	r0, r3
 801acf6:	f000 fa53 	bl	801b1a0 <RTC_ByteToBcd2>
 801acfa:	0003      	movs	r3, r0
 801acfc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801acfe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	789b      	ldrb	r3, [r3, #2]
 801ad04:	0018      	movs	r0, r3
 801ad06:	f000 fa4b 	bl	801b1a0 <RTC_ByteToBcd2>
 801ad0a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801ad0c:	0022      	movs	r2, r4
 801ad0e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	78db      	ldrb	r3, [r3, #3]
 801ad14:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801ad16:	4313      	orrs	r3, r2
 801ad18:	617b      	str	r3, [r7, #20]
 801ad1a:	e017      	b.n	801ad4c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	689b      	ldr	r3, [r3, #8]
 801ad22:	2240      	movs	r2, #64	@ 0x40
 801ad24:	4013      	ands	r3, r2
 801ad26:	d102      	bne.n	801ad2e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	781b      	ldrb	r3, [r3, #0]
 801ad32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	785b      	ldrb	r3, [r3, #1]
 801ad38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801ad3a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801ad3c:	68ba      	ldr	r2, [r7, #8]
 801ad3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801ad40:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801ad42:	68bb      	ldr	r3, [r7, #8]
 801ad44:	78db      	ldrb	r3, [r3, #3]
 801ad46:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801ad48:	4313      	orrs	r3, r2
 801ad4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	22ca      	movs	r2, #202	@ 0xca
 801ad52:	625a      	str	r2, [r3, #36]	@ 0x24
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	2253      	movs	r2, #83	@ 0x53
 801ad5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801ad5c:	2513      	movs	r5, #19
 801ad5e:	197c      	adds	r4, r7, r5
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	0018      	movs	r0, r3
 801ad64:	f000 f9ae 	bl	801b0c4 <RTC_EnterInitMode>
 801ad68:	0003      	movs	r3, r0
 801ad6a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801ad6c:	0028      	movs	r0, r5
 801ad6e:	183b      	adds	r3, r7, r0
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d120      	bne.n	801adb8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	697a      	ldr	r2, [r7, #20]
 801ad7c:	491a      	ldr	r1, [pc, #104]	@ (801ade8 <HAL_RTC_SetTime+0x14c>)
 801ad7e:	400a      	ands	r2, r1
 801ad80:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	689a      	ldr	r2, [r3, #8]
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	4917      	ldr	r1, [pc, #92]	@ (801adec <HAL_RTC_SetTime+0x150>)
 801ad8e:	400a      	ands	r2, r1
 801ad90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	6899      	ldr	r1, [r3, #8]
 801ad98:	68bb      	ldr	r3, [r7, #8]
 801ad9a:	68da      	ldr	r2, [r3, #12]
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	691b      	ldr	r3, [r3, #16]
 801ada0:	431a      	orrs	r2, r3
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	430a      	orrs	r2, r1
 801ada8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801adaa:	183c      	adds	r4, r7, r0
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	0018      	movs	r0, r3
 801adb0:	f000 f9cc 	bl	801b14c <RTC_ExitInitMode>
 801adb4:	0003      	movs	r3, r0
 801adb6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801adb8:	2313      	movs	r3, #19
 801adba:	18fb      	adds	r3, r7, r3
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d103      	bne.n	801adca <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	2221      	movs	r2, #33	@ 0x21
 801adc6:	2101      	movs	r1, #1
 801adc8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	22ff      	movs	r2, #255	@ 0xff
 801add0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	2220      	movs	r2, #32
 801add6:	2100      	movs	r1, #0
 801add8:	5499      	strb	r1, [r3, r2]

  return status;
 801adda:	2313      	movs	r3, #19
 801addc:	18fb      	adds	r3, r7, r3
 801adde:	781b      	ldrb	r3, [r3, #0]
}
 801ade0:	0018      	movs	r0, r3
 801ade2:	46bd      	mov	sp, r7
 801ade4:	b006      	add	sp, #24
 801ade6:	bdb0      	pop	{r4, r5, r7, pc}
 801ade8:	007f7f7f 	.word	0x007f7f7f
 801adec:	fffbffff 	.word	0xfffbffff

0801adf0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b086      	sub	sp, #24
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	60f8      	str	r0, [r7, #12]
 801adf8:	60b9      	str	r1, [r7, #8]
 801adfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801adfc:	2300      	movs	r3, #0
 801adfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae06:	68bb      	ldr	r3, [r7, #8]
 801ae08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	691b      	ldr	r3, [r3, #16]
 801ae10:	045b      	lsls	r3, r3, #17
 801ae12:	0c5a      	lsrs	r2, r3, #17
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	4a22      	ldr	r2, [pc, #136]	@ (801aea8 <HAL_RTC_GetTime+0xb8>)
 801ae20:	4013      	ands	r3, r2
 801ae22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801ae24:	697b      	ldr	r3, [r7, #20]
 801ae26:	0c1b      	lsrs	r3, r3, #16
 801ae28:	b2db      	uxtb	r3, r3
 801ae2a:	223f      	movs	r2, #63	@ 0x3f
 801ae2c:	4013      	ands	r3, r2
 801ae2e:	b2da      	uxtb	r2, r3
 801ae30:	68bb      	ldr	r3, [r7, #8]
 801ae32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801ae34:	697b      	ldr	r3, [r7, #20]
 801ae36:	0a1b      	lsrs	r3, r3, #8
 801ae38:	b2db      	uxtb	r3, r3
 801ae3a:	227f      	movs	r2, #127	@ 0x7f
 801ae3c:	4013      	ands	r3, r2
 801ae3e:	b2da      	uxtb	r2, r3
 801ae40:	68bb      	ldr	r3, [r7, #8]
 801ae42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801ae44:	697b      	ldr	r3, [r7, #20]
 801ae46:	b2db      	uxtb	r3, r3
 801ae48:	227f      	movs	r2, #127	@ 0x7f
 801ae4a:	4013      	ands	r3, r2
 801ae4c:	b2da      	uxtb	r2, r3
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801ae52:	697b      	ldr	r3, [r7, #20]
 801ae54:	0d9b      	lsrs	r3, r3, #22
 801ae56:	b2db      	uxtb	r3, r3
 801ae58:	2201      	movs	r2, #1
 801ae5a:	4013      	ands	r3, r2
 801ae5c:	b2da      	uxtb	r2, r3
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d11a      	bne.n	801ae9e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	0018      	movs	r0, r3
 801ae6e:	f000 f9b8 	bl	801b1e2 <RTC_Bcd2ToByte>
 801ae72:	0003      	movs	r3, r0
 801ae74:	001a      	movs	r2, r3
 801ae76:	68bb      	ldr	r3, [r7, #8]
 801ae78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801ae7a:	68bb      	ldr	r3, [r7, #8]
 801ae7c:	785b      	ldrb	r3, [r3, #1]
 801ae7e:	0018      	movs	r0, r3
 801ae80:	f000 f9af 	bl	801b1e2 <RTC_Bcd2ToByte>
 801ae84:	0003      	movs	r3, r0
 801ae86:	001a      	movs	r2, r3
 801ae88:	68bb      	ldr	r3, [r7, #8]
 801ae8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801ae8c:	68bb      	ldr	r3, [r7, #8]
 801ae8e:	789b      	ldrb	r3, [r3, #2]
 801ae90:	0018      	movs	r0, r3
 801ae92:	f000 f9a6 	bl	801b1e2 <RTC_Bcd2ToByte>
 801ae96:	0003      	movs	r3, r0
 801ae98:	001a      	movs	r2, r3
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801ae9e:	2300      	movs	r3, #0
}
 801aea0:	0018      	movs	r0, r3
 801aea2:	46bd      	mov	sp, r7
 801aea4:	b006      	add	sp, #24
 801aea6:	bd80      	pop	{r7, pc}
 801aea8:	007f7f7f 	.word	0x007f7f7f

0801aeac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801aeac:	b5b0      	push	{r4, r5, r7, lr}
 801aeae:	b086      	sub	sp, #24
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	60f8      	str	r0, [r7, #12]
 801aeb4:	60b9      	str	r1, [r7, #8]
 801aeb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801aeb8:	2300      	movs	r3, #0
 801aeba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2220      	movs	r2, #32
 801aec0:	5c9b      	ldrb	r3, [r3, r2]
 801aec2:	2b01      	cmp	r3, #1
 801aec4:	d101      	bne.n	801aeca <HAL_RTC_SetDate+0x1e>
 801aec6:	2302      	movs	r3, #2
 801aec8:	e07e      	b.n	801afc8 <HAL_RTC_SetDate+0x11c>
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	2220      	movs	r2, #32
 801aece:	2101      	movs	r1, #1
 801aed0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	2221      	movs	r2, #33	@ 0x21
 801aed6:	2102      	movs	r1, #2
 801aed8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d10e      	bne.n	801aefe <HAL_RTC_SetDate+0x52>
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	785b      	ldrb	r3, [r3, #1]
 801aee4:	001a      	movs	r2, r3
 801aee6:	2310      	movs	r3, #16
 801aee8:	4013      	ands	r3, r2
 801aeea:	d008      	beq.n	801aefe <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	785b      	ldrb	r3, [r3, #1]
 801aef0:	2210      	movs	r2, #16
 801aef2:	4393      	bics	r3, r2
 801aef4:	b2db      	uxtb	r3, r3
 801aef6:	330a      	adds	r3, #10
 801aef8:	b2da      	uxtb	r2, r3
 801aefa:	68bb      	ldr	r3, [r7, #8]
 801aefc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d11c      	bne.n	801af3e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801af04:	68bb      	ldr	r3, [r7, #8]
 801af06:	78db      	ldrb	r3, [r3, #3]
 801af08:	0018      	movs	r0, r3
 801af0a:	f000 f949 	bl	801b1a0 <RTC_ByteToBcd2>
 801af0e:	0003      	movs	r3, r0
 801af10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	785b      	ldrb	r3, [r3, #1]
 801af16:	0018      	movs	r0, r3
 801af18:	f000 f942 	bl	801b1a0 <RTC_ByteToBcd2>
 801af1c:	0003      	movs	r3, r0
 801af1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801af20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	789b      	ldrb	r3, [r3, #2]
 801af26:	0018      	movs	r0, r3
 801af28:	f000 f93a 	bl	801b1a0 <RTC_ByteToBcd2>
 801af2c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801af2e:	0022      	movs	r2, r4
 801af30:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	781b      	ldrb	r3, [r3, #0]
 801af36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801af38:	4313      	orrs	r3, r2
 801af3a:	617b      	str	r3, [r7, #20]
 801af3c:	e00e      	b.n	801af5c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	78db      	ldrb	r3, [r3, #3]
 801af42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	785b      	ldrb	r3, [r3, #1]
 801af48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801af4a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801af4c:	68ba      	ldr	r2, [r7, #8]
 801af4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801af50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801af58:	4313      	orrs	r3, r2
 801af5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	22ca      	movs	r2, #202	@ 0xca
 801af62:	625a      	str	r2, [r3, #36]	@ 0x24
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	2253      	movs	r2, #83	@ 0x53
 801af6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801af6c:	2513      	movs	r5, #19
 801af6e:	197c      	adds	r4, r7, r5
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	0018      	movs	r0, r3
 801af74:	f000 f8a6 	bl	801b0c4 <RTC_EnterInitMode>
 801af78:	0003      	movs	r3, r0
 801af7a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801af7c:	0028      	movs	r0, r5
 801af7e:	183b      	adds	r3, r7, r0
 801af80:	781b      	ldrb	r3, [r3, #0]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d10c      	bne.n	801afa0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	697a      	ldr	r2, [r7, #20]
 801af8c:	4910      	ldr	r1, [pc, #64]	@ (801afd0 <HAL_RTC_SetDate+0x124>)
 801af8e:	400a      	ands	r2, r1
 801af90:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801af92:	183c      	adds	r4, r7, r0
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	0018      	movs	r0, r3
 801af98:	f000 f8d8 	bl	801b14c <RTC_ExitInitMode>
 801af9c:	0003      	movs	r3, r0
 801af9e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801afa0:	2313      	movs	r3, #19
 801afa2:	18fb      	adds	r3, r7, r3
 801afa4:	781b      	ldrb	r3, [r3, #0]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d103      	bne.n	801afb2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	2221      	movs	r2, #33	@ 0x21
 801afae:	2101      	movs	r1, #1
 801afb0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	22ff      	movs	r2, #255	@ 0xff
 801afb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	2220      	movs	r2, #32
 801afbe:	2100      	movs	r1, #0
 801afc0:	5499      	strb	r1, [r3, r2]

  return status;
 801afc2:	2313      	movs	r3, #19
 801afc4:	18fb      	adds	r3, r7, r3
 801afc6:	781b      	ldrb	r3, [r3, #0]
}
 801afc8:	0018      	movs	r0, r3
 801afca:	46bd      	mov	sp, r7
 801afcc:	b006      	add	sp, #24
 801afce:	bdb0      	pop	{r4, r5, r7, pc}
 801afd0:	00ffff3f 	.word	0x00ffff3f

0801afd4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b086      	sub	sp, #24
 801afd8:	af00      	add	r7, sp, #0
 801afda:	60f8      	str	r0, [r7, #12]
 801afdc:	60b9      	str	r1, [r7, #8]
 801afde:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801afe0:	2300      	movs	r3, #0
 801afe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	685b      	ldr	r3, [r3, #4]
 801afea:	4a21      	ldr	r2, [pc, #132]	@ (801b070 <HAL_RTC_GetDate+0x9c>)
 801afec:	4013      	ands	r3, r2
 801afee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	0c1b      	lsrs	r3, r3, #16
 801aff4:	b2da      	uxtb	r2, r3
 801aff6:	68bb      	ldr	r3, [r7, #8]
 801aff8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	0a1b      	lsrs	r3, r3, #8
 801affe:	b2db      	uxtb	r3, r3
 801b000:	221f      	movs	r2, #31
 801b002:	4013      	ands	r3, r2
 801b004:	b2da      	uxtb	r2, r3
 801b006:	68bb      	ldr	r3, [r7, #8]
 801b008:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801b00a:	697b      	ldr	r3, [r7, #20]
 801b00c:	b2db      	uxtb	r3, r3
 801b00e:	223f      	movs	r2, #63	@ 0x3f
 801b010:	4013      	ands	r3, r2
 801b012:	b2da      	uxtb	r2, r3
 801b014:	68bb      	ldr	r3, [r7, #8]
 801b016:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801b018:	697b      	ldr	r3, [r7, #20]
 801b01a:	0b5b      	lsrs	r3, r3, #13
 801b01c:	b2db      	uxtb	r3, r3
 801b01e:	2207      	movs	r2, #7
 801b020:	4013      	ands	r3, r2
 801b022:	b2da      	uxtb	r2, r3
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d11a      	bne.n	801b064 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801b02e:	68bb      	ldr	r3, [r7, #8]
 801b030:	78db      	ldrb	r3, [r3, #3]
 801b032:	0018      	movs	r0, r3
 801b034:	f000 f8d5 	bl	801b1e2 <RTC_Bcd2ToByte>
 801b038:	0003      	movs	r3, r0
 801b03a:	001a      	movs	r2, r3
 801b03c:	68bb      	ldr	r3, [r7, #8]
 801b03e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801b040:	68bb      	ldr	r3, [r7, #8]
 801b042:	785b      	ldrb	r3, [r3, #1]
 801b044:	0018      	movs	r0, r3
 801b046:	f000 f8cc 	bl	801b1e2 <RTC_Bcd2ToByte>
 801b04a:	0003      	movs	r3, r0
 801b04c:	001a      	movs	r2, r3
 801b04e:	68bb      	ldr	r3, [r7, #8]
 801b050:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	789b      	ldrb	r3, [r3, #2]
 801b056:	0018      	movs	r0, r3
 801b058:	f000 f8c3 	bl	801b1e2 <RTC_Bcd2ToByte>
 801b05c:	0003      	movs	r3, r0
 801b05e:	001a      	movs	r2, r3
 801b060:	68bb      	ldr	r3, [r7, #8]
 801b062:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801b064:	2300      	movs	r3, #0
}
 801b066:	0018      	movs	r0, r3
 801b068:	46bd      	mov	sp, r7
 801b06a:	b006      	add	sp, #24
 801b06c:	bd80      	pop	{r7, pc}
 801b06e:	46c0      	nop			@ (mov r8, r8)
 801b070:	00ffff3f 	.word	0x00ffff3f

0801b074 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b084      	sub	sp, #16
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b07c:	2300      	movs	r3, #0
 801b07e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4a0e      	ldr	r2, [pc, #56]	@ (801b0c0 <HAL_RTC_WaitForSynchro+0x4c>)
 801b086:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b088:	f7f8 fa50 	bl	801352c <HAL_GetTick>
 801b08c:	0003      	movs	r3, r0
 801b08e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b090:	e00a      	b.n	801b0a8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b092:	f7f8 fa4b 	bl	801352c <HAL_GetTick>
 801b096:	0002      	movs	r2, r0
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	1ad2      	subs	r2, r2, r3
 801b09c:	23fa      	movs	r3, #250	@ 0xfa
 801b09e:	009b      	lsls	r3, r3, #2
 801b0a0:	429a      	cmp	r2, r3
 801b0a2:	d901      	bls.n	801b0a8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801b0a4:	2303      	movs	r3, #3
 801b0a6:	e006      	b.n	801b0b6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	68db      	ldr	r3, [r3, #12]
 801b0ae:	2220      	movs	r2, #32
 801b0b0:	4013      	ands	r3, r2
 801b0b2:	d0ee      	beq.n	801b092 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801b0b4:	2300      	movs	r3, #0
}
 801b0b6:	0018      	movs	r0, r3
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	b004      	add	sp, #16
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	46c0      	nop			@ (mov r8, r8)
 801b0c0:	0001ff5f 	.word	0x0001ff5f

0801b0c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b084      	sub	sp, #16
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801b0d0:	230f      	movs	r3, #15
 801b0d2:	18fb      	adds	r3, r7, r3
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	68db      	ldr	r3, [r3, #12]
 801b0de:	2240      	movs	r2, #64	@ 0x40
 801b0e0:	4013      	ands	r3, r2
 801b0e2:	d12c      	bne.n	801b13e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	68da      	ldr	r2, [r3, #12]
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	2180      	movs	r1, #128	@ 0x80
 801b0f0:	430a      	orrs	r2, r1
 801b0f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b0f4:	f7f8 fa1a 	bl	801352c <HAL_GetTick>
 801b0f8:	0003      	movs	r3, r0
 801b0fa:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b0fc:	e014      	b.n	801b128 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b0fe:	f7f8 fa15 	bl	801352c <HAL_GetTick>
 801b102:	0002      	movs	r2, r0
 801b104:	68bb      	ldr	r3, [r7, #8]
 801b106:	1ad2      	subs	r2, r2, r3
 801b108:	200f      	movs	r0, #15
 801b10a:	183b      	adds	r3, r7, r0
 801b10c:	1839      	adds	r1, r7, r0
 801b10e:	7809      	ldrb	r1, [r1, #0]
 801b110:	7019      	strb	r1, [r3, #0]
 801b112:	23fa      	movs	r3, #250	@ 0xfa
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	429a      	cmp	r2, r3
 801b118:	d906      	bls.n	801b128 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	2221      	movs	r2, #33	@ 0x21
 801b11e:	2104      	movs	r1, #4
 801b120:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801b122:	183b      	adds	r3, r7, r0
 801b124:	2201      	movs	r2, #1
 801b126:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	68db      	ldr	r3, [r3, #12]
 801b12e:	2240      	movs	r2, #64	@ 0x40
 801b130:	4013      	ands	r3, r2
 801b132:	d104      	bne.n	801b13e <RTC_EnterInitMode+0x7a>
 801b134:	230f      	movs	r3, #15
 801b136:	18fb      	adds	r3, r7, r3
 801b138:	781b      	ldrb	r3, [r3, #0]
 801b13a:	2b01      	cmp	r3, #1
 801b13c:	d1df      	bne.n	801b0fe <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801b13e:	230f      	movs	r3, #15
 801b140:	18fb      	adds	r3, r7, r3
 801b142:	781b      	ldrb	r3, [r3, #0]
}
 801b144:	0018      	movs	r0, r3
 801b146:	46bd      	mov	sp, r7
 801b148:	b004      	add	sp, #16
 801b14a:	bd80      	pop	{r7, pc}

0801b14c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801b14c:	b590      	push	{r4, r7, lr}
 801b14e:	b085      	sub	sp, #20
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b154:	240f      	movs	r4, #15
 801b156:	193b      	adds	r3, r7, r4
 801b158:	2200      	movs	r2, #0
 801b15a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	68da      	ldr	r2, [r3, #12]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	2180      	movs	r1, #128	@ 0x80
 801b168:	438a      	bics	r2, r1
 801b16a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	689b      	ldr	r3, [r3, #8]
 801b172:	2220      	movs	r2, #32
 801b174:	4013      	ands	r3, r2
 801b176:	d10c      	bne.n	801b192 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	0018      	movs	r0, r3
 801b17c:	f7ff ff7a 	bl	801b074 <HAL_RTC_WaitForSynchro>
 801b180:	1e03      	subs	r3, r0, #0
 801b182:	d006      	beq.n	801b192 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	2221      	movs	r2, #33	@ 0x21
 801b188:	2104      	movs	r1, #4
 801b18a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801b18c:	193b      	adds	r3, r7, r4
 801b18e:	2201      	movs	r2, #1
 801b190:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801b192:	230f      	movs	r3, #15
 801b194:	18fb      	adds	r3, r7, r3
 801b196:	781b      	ldrb	r3, [r3, #0]
}
 801b198:	0018      	movs	r0, r3
 801b19a:	46bd      	mov	sp, r7
 801b19c:	b005      	add	sp, #20
 801b19e:	bd90      	pop	{r4, r7, pc}

0801b1a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b084      	sub	sp, #16
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	0002      	movs	r2, r0
 801b1a8:	1dfb      	adds	r3, r7, #7
 801b1aa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801b1b0:	e007      	b.n	801b1c2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	3301      	adds	r3, #1
 801b1b6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801b1b8:	1dfb      	adds	r3, r7, #7
 801b1ba:	1dfa      	adds	r2, r7, #7
 801b1bc:	7812      	ldrb	r2, [r2, #0]
 801b1be:	3a0a      	subs	r2, #10
 801b1c0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801b1c2:	1dfb      	adds	r3, r7, #7
 801b1c4:	781b      	ldrb	r3, [r3, #0]
 801b1c6:	2b09      	cmp	r3, #9
 801b1c8:	d8f3      	bhi.n	801b1b2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	b2db      	uxtb	r3, r3
 801b1ce:	011b      	lsls	r3, r3, #4
 801b1d0:	b2da      	uxtb	r2, r3
 801b1d2:	1dfb      	adds	r3, r7, #7
 801b1d4:	781b      	ldrb	r3, [r3, #0]
 801b1d6:	4313      	orrs	r3, r2
 801b1d8:	b2db      	uxtb	r3, r3
}
 801b1da:	0018      	movs	r0, r3
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	b004      	add	sp, #16
 801b1e0:	bd80      	pop	{r7, pc}

0801b1e2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801b1e2:	b580      	push	{r7, lr}
 801b1e4:	b084      	sub	sp, #16
 801b1e6:	af00      	add	r7, sp, #0
 801b1e8:	0002      	movs	r2, r0
 801b1ea:	1dfb      	adds	r3, r7, #7
 801b1ec:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801b1f2:	1dfb      	adds	r3, r7, #7
 801b1f4:	781b      	ldrb	r3, [r3, #0]
 801b1f6:	091b      	lsrs	r3, r3, #4
 801b1f8:	b2db      	uxtb	r3, r3
 801b1fa:	001a      	movs	r2, r3
 801b1fc:	0013      	movs	r3, r2
 801b1fe:	009b      	lsls	r3, r3, #2
 801b200:	189b      	adds	r3, r3, r2
 801b202:	005b      	lsls	r3, r3, #1
 801b204:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	b2da      	uxtb	r2, r3
 801b20a:	1dfb      	adds	r3, r7, #7
 801b20c:	781b      	ldrb	r3, [r3, #0]
 801b20e:	210f      	movs	r1, #15
 801b210:	400b      	ands	r3, r1
 801b212:	b2db      	uxtb	r3, r3
 801b214:	18d3      	adds	r3, r2, r3
 801b216:	b2db      	uxtb	r3, r3
}
 801b218:	0018      	movs	r0, r3
 801b21a:	46bd      	mov	sp, r7
 801b21c:	b004      	add	sp, #16
 801b21e:	bd80      	pop	{r7, pc}

0801b220 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b086      	sub	sp, #24
 801b224:	af00      	add	r7, sp, #0
 801b226:	60f8      	str	r0, [r7, #12]
 801b228:	60b9      	str	r1, [r7, #8]
 801b22a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b22c:	4b64      	ldr	r3, [pc, #400]	@ (801b3c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	22fa      	movs	r2, #250	@ 0xfa
 801b232:	01d1      	lsls	r1, r2, #7
 801b234:	0018      	movs	r0, r3
 801b236:	f7e4 ffb5 	bl	80001a4 <__udivsi3>
 801b23a:	0003      	movs	r3, r0
 801b23c:	001a      	movs	r2, r3
 801b23e:	0013      	movs	r3, r2
 801b240:	015b      	lsls	r3, r3, #5
 801b242:	1a9b      	subs	r3, r3, r2
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	189b      	adds	r3, r3, r2
 801b248:	00db      	lsls	r3, r3, #3
 801b24a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2220      	movs	r2, #32
 801b250:	5c9b      	ldrb	r3, [r3, r2]
 801b252:	2b01      	cmp	r3, #1
 801b254:	d101      	bne.n	801b25a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801b256:	2302      	movs	r3, #2
 801b258:	e0ad      	b.n	801b3b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	2220      	movs	r2, #32
 801b25e:	2101      	movs	r1, #1
 801b260:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	2221      	movs	r2, #33	@ 0x21
 801b266:	2102      	movs	r1, #2
 801b268:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	22ca      	movs	r2, #202	@ 0xca
 801b270:	625a      	str	r2, [r3, #36]	@ 0x24
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	2253      	movs	r2, #83	@ 0x53
 801b278:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	689a      	ldr	r2, [r3, #8]
 801b280:	2380      	movs	r3, #128	@ 0x80
 801b282:	00db      	lsls	r3, r3, #3
 801b284:	4013      	ands	r3, r2
 801b286:	d019      	beq.n	801b2bc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801b288:	697b      	ldr	r3, [r7, #20]
 801b28a:	3b01      	subs	r3, #1
 801b28c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801b28e:	697b      	ldr	r3, [r7, #20]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d10d      	bne.n	801b2b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	22ff      	movs	r2, #255	@ 0xff
 801b29a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	2221      	movs	r2, #33	@ 0x21
 801b2a0:	2103      	movs	r1, #3
 801b2a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	2220      	movs	r2, #32
 801b2a8:	2100      	movs	r1, #0
 801b2aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801b2ac:	2303      	movs	r3, #3
 801b2ae:	e082      	b.n	801b3b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	68db      	ldr	r3, [r3, #12]
 801b2b6:	2204      	movs	r2, #4
 801b2b8:	4013      	ands	r3, r2
 801b2ba:	d1e5      	bne.n	801b288 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	689a      	ldr	r2, [r3, #8]
 801b2c2:	68fb      	ldr	r3, [r7, #12]
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	493f      	ldr	r1, [pc, #252]	@ (801b3c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801b2c8:	400a      	ands	r2, r1
 801b2ca:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	68db      	ldr	r3, [r3, #12]
 801b2d2:	22ff      	movs	r2, #255	@ 0xff
 801b2d4:	401a      	ands	r2, r3
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	493b      	ldr	r1, [pc, #236]	@ (801b3c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801b2dc:	430a      	orrs	r2, r1
 801b2de:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b2e0:	4b37      	ldr	r3, [pc, #220]	@ (801b3c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	22fa      	movs	r2, #250	@ 0xfa
 801b2e6:	01d1      	lsls	r1, r2, #7
 801b2e8:	0018      	movs	r0, r3
 801b2ea:	f7e4 ff5b 	bl	80001a4 <__udivsi3>
 801b2ee:	0003      	movs	r3, r0
 801b2f0:	001a      	movs	r2, r3
 801b2f2:	0013      	movs	r3, r2
 801b2f4:	015b      	lsls	r3, r3, #5
 801b2f6:	1a9b      	subs	r3, r3, r2
 801b2f8:	009b      	lsls	r3, r3, #2
 801b2fa:	189b      	adds	r3, r3, r2
 801b2fc:	00db      	lsls	r3, r3, #3
 801b2fe:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801b300:	697b      	ldr	r3, [r7, #20]
 801b302:	3b01      	subs	r3, #1
 801b304:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d10d      	bne.n	801b328 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	22ff      	movs	r2, #255	@ 0xff
 801b312:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	2221      	movs	r2, #33	@ 0x21
 801b318:	2103      	movs	r1, #3
 801b31a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	2220      	movs	r2, #32
 801b320:	2100      	movs	r1, #0
 801b322:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801b324:	2303      	movs	r3, #3
 801b326:	e046      	b.n	801b3b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	68db      	ldr	r3, [r3, #12]
 801b32e:	2204      	movs	r2, #4
 801b330:	4013      	ands	r3, r2
 801b332:	d0e5      	beq.n	801b300 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	689a      	ldr	r2, [r3, #8]
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	2107      	movs	r1, #7
 801b340:	438a      	bics	r2, r1
 801b342:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	6899      	ldr	r1, [r3, #8]
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	687a      	ldr	r2, [r7, #4]
 801b350:	430a      	orrs	r2, r1
 801b352:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	68ba      	ldr	r2, [r7, #8]
 801b35a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801b35c:	4b1b      	ldr	r3, [pc, #108]	@ (801b3cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b35e:	681a      	ldr	r2, [r3, #0]
 801b360:	4b1a      	ldr	r3, [pc, #104]	@ (801b3cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b362:	2180      	movs	r1, #128	@ 0x80
 801b364:	0349      	lsls	r1, r1, #13
 801b366:	430a      	orrs	r2, r1
 801b368:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801b36a:	4b18      	ldr	r3, [pc, #96]	@ (801b3cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b36c:	689a      	ldr	r2, [r3, #8]
 801b36e:	4b17      	ldr	r3, [pc, #92]	@ (801b3cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b370:	2180      	movs	r1, #128	@ 0x80
 801b372:	0349      	lsls	r1, r1, #13
 801b374:	430a      	orrs	r2, r1
 801b376:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	689a      	ldr	r2, [r3, #8]
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	2180      	movs	r1, #128	@ 0x80
 801b384:	01c9      	lsls	r1, r1, #7
 801b386:	430a      	orrs	r2, r1
 801b388:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	689a      	ldr	r2, [r3, #8]
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	2180      	movs	r1, #128	@ 0x80
 801b396:	00c9      	lsls	r1, r1, #3
 801b398:	430a      	orrs	r2, r1
 801b39a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	22ff      	movs	r2, #255	@ 0xff
 801b3a2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	2221      	movs	r2, #33	@ 0x21
 801b3a8:	2101      	movs	r1, #1
 801b3aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	2220      	movs	r2, #32
 801b3b0:	2100      	movs	r1, #0
 801b3b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b3b4:	2300      	movs	r3, #0
}
 801b3b6:	0018      	movs	r0, r3
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	b006      	add	sp, #24
 801b3bc:	bd80      	pop	{r7, pc}
 801b3be:	46c0      	nop			@ (mov r8, r8)
 801b3c0:	200000e0 	.word	0x200000e0
 801b3c4:	fffffbff 	.word	0xfffffbff
 801b3c8:	fffffb7f 	.word	0xfffffb7f
 801b3cc:	40010400 	.word	0x40010400

0801b3d0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b084      	sub	sp, #16
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b3d8:	2300      	movs	r3, #0
 801b3da:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	2220      	movs	r2, #32
 801b3e0:	5c9b      	ldrb	r3, [r3, r2]
 801b3e2:	2b01      	cmp	r3, #1
 801b3e4:	d101      	bne.n	801b3ea <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801b3e6:	2302      	movs	r3, #2
 801b3e8:	e04e      	b.n	801b488 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	2220      	movs	r2, #32
 801b3ee:	2101      	movs	r1, #1
 801b3f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	2221      	movs	r2, #33	@ 0x21
 801b3f6:	2102      	movs	r1, #2
 801b3f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	22ca      	movs	r2, #202	@ 0xca
 801b400:	625a      	str	r2, [r3, #36]	@ 0x24
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	2253      	movs	r2, #83	@ 0x53
 801b408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	689a      	ldr	r2, [r3, #8]
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	491e      	ldr	r1, [pc, #120]	@ (801b490 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801b416:	400a      	ands	r2, r1
 801b418:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	689a      	ldr	r2, [r3, #8]
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	491b      	ldr	r1, [pc, #108]	@ (801b494 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801b426:	400a      	ands	r2, r1
 801b428:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b42a:	f7f8 f87f 	bl	801352c <HAL_GetTick>
 801b42e:	0003      	movs	r3, r0
 801b430:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801b432:	e016      	b.n	801b462 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b434:	f7f8 f87a 	bl	801352c <HAL_GetTick>
 801b438:	0002      	movs	r2, r0
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	1ad2      	subs	r2, r2, r3
 801b43e:	23fa      	movs	r3, #250	@ 0xfa
 801b440:	009b      	lsls	r3, r3, #2
 801b442:	429a      	cmp	r2, r3
 801b444:	d90d      	bls.n	801b462 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	22ff      	movs	r2, #255	@ 0xff
 801b44c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2221      	movs	r2, #33	@ 0x21
 801b452:	2103      	movs	r1, #3
 801b454:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	2220      	movs	r2, #32
 801b45a:	2100      	movs	r1, #0
 801b45c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801b45e:	2303      	movs	r3, #3
 801b460:	e012      	b.n	801b488 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	68db      	ldr	r3, [r3, #12]
 801b468:	2204      	movs	r2, #4
 801b46a:	4013      	ands	r3, r2
 801b46c:	d0e2      	beq.n	801b434 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	22ff      	movs	r2, #255	@ 0xff
 801b474:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	2221      	movs	r2, #33	@ 0x21
 801b47a:	2101      	movs	r1, #1
 801b47c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	2220      	movs	r2, #32
 801b482:	2100      	movs	r1, #0
 801b484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b486:	2300      	movs	r3, #0
}
 801b488:	0018      	movs	r0, r3
 801b48a:	46bd      	mov	sp, r7
 801b48c:	b004      	add	sp, #16
 801b48e:	bd80      	pop	{r7, pc}
 801b490:	fffffbff 	.word	0xfffffbff
 801b494:	ffffbfff 	.word	0xffffbfff

0801b498 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b082      	sub	sp, #8
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801b4a0:	4b13      	ldr	r3, [pc, #76]	@ (801b4f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801b4a2:	2280      	movs	r2, #128	@ 0x80
 801b4a4:	0352      	lsls	r2, r2, #13
 801b4a6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	689a      	ldr	r2, [r3, #8]
 801b4ae:	2380      	movs	r3, #128	@ 0x80
 801b4b0:	01db      	lsls	r3, r3, #7
 801b4b2:	4013      	ands	r3, r2
 801b4b4:	d014      	beq.n	801b4e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	68da      	ldr	r2, [r3, #12]
 801b4bc:	2380      	movs	r3, #128	@ 0x80
 801b4be:	00db      	lsls	r3, r3, #3
 801b4c0:	4013      	ands	r3, r2
 801b4c2:	d00d      	beq.n	801b4e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	68db      	ldr	r3, [r3, #12]
 801b4ca:	22ff      	movs	r2, #255	@ 0xff
 801b4cc:	401a      	ands	r2, r3
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	4908      	ldr	r1, [pc, #32]	@ (801b4f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801b4d4:	430a      	orrs	r2, r1
 801b4d6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	0018      	movs	r0, r3
 801b4dc:	f000 f80c 	bl	801b4f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	2221      	movs	r2, #33	@ 0x21
 801b4e4:	2101      	movs	r1, #1
 801b4e6:	5499      	strb	r1, [r3, r2]
}
 801b4e8:	46c0      	nop			@ (mov r8, r8)
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	b002      	add	sp, #8
 801b4ee:	bd80      	pop	{r7, pc}
 801b4f0:	40010400 	.word	0x40010400
 801b4f4:	fffffb7f 	.word	0xfffffb7f

0801b4f8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b082      	sub	sp, #8
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801b500:	46c0      	nop			@ (mov r8, r8)
 801b502:	46bd      	mov	sp, r7
 801b504:	b002      	add	sp, #8
 801b506:	bd80      	pop	{r7, pc}

0801b508 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b086      	sub	sp, #24
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	60f8      	str	r0, [r7, #12]
 801b510:	60b9      	str	r1, [r7, #8]
 801b512:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801b514:	2300      	movs	r3, #0
 801b516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	3350      	adds	r3, #80	@ 0x50
 801b51e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801b520:	68bb      	ldr	r3, [r7, #8]
 801b522:	009b      	lsls	r3, r3, #2
 801b524:	697a      	ldr	r2, [r7, #20]
 801b526:	18d3      	adds	r3, r2, r3
 801b528:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801b52a:	697b      	ldr	r3, [r7, #20]
 801b52c:	687a      	ldr	r2, [r7, #4]
 801b52e:	601a      	str	r2, [r3, #0]
}
 801b530:	46c0      	nop			@ (mov r8, r8)
 801b532:	46bd      	mov	sp, r7
 801b534:	b006      	add	sp, #24
 801b536:	bd80      	pop	{r7, pc}

0801b538 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b084      	sub	sp, #16
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
 801b540:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801b542:	2300      	movs	r3, #0
 801b544:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	3350      	adds	r3, #80	@ 0x50
 801b54c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801b54e:	683b      	ldr	r3, [r7, #0]
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	68fa      	ldr	r2, [r7, #12]
 801b554:	18d3      	adds	r3, r2, r3
 801b556:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	681b      	ldr	r3, [r3, #0]
}
 801b55c:	0018      	movs	r0, r3
 801b55e:	46bd      	mov	sp, r7
 801b560:	b004      	add	sp, #16
 801b562:	bd80      	pop	{r7, pc}

0801b564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b082      	sub	sp, #8
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d101      	bne.n	801b576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801b572:	2301      	movs	r3, #1
 801b574:	e032      	b.n	801b5dc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2239      	movs	r2, #57	@ 0x39
 801b57a:	5c9b      	ldrb	r3, [r3, r2]
 801b57c:	b2db      	uxtb	r3, r3
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d107      	bne.n	801b592 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	2238      	movs	r2, #56	@ 0x38
 801b586:	2100      	movs	r1, #0
 801b588:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	0018      	movs	r0, r3
 801b58e:	f7f6 fff3 	bl	8012578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	2239      	movs	r2, #57	@ 0x39
 801b596:	2102      	movs	r1, #2
 801b598:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681a      	ldr	r2, [r3, #0]
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	3304      	adds	r3, #4
 801b5a2:	0019      	movs	r1, r3
 801b5a4:	0010      	movs	r0, r2
 801b5a6:	f000 fa1d 	bl	801b9e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	223e      	movs	r2, #62	@ 0x3e
 801b5ae:	2101      	movs	r1, #1
 801b5b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	223a      	movs	r2, #58	@ 0x3a
 801b5b6:	2101      	movs	r1, #1
 801b5b8:	5499      	strb	r1, [r3, r2]
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	223b      	movs	r2, #59	@ 0x3b
 801b5be:	2101      	movs	r1, #1
 801b5c0:	5499      	strb	r1, [r3, r2]
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	223c      	movs	r2, #60	@ 0x3c
 801b5c6:	2101      	movs	r1, #1
 801b5c8:	5499      	strb	r1, [r3, r2]
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	223d      	movs	r2, #61	@ 0x3d
 801b5ce:	2101      	movs	r1, #1
 801b5d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	2239      	movs	r2, #57	@ 0x39
 801b5d6:	2101      	movs	r1, #1
 801b5d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b5da:	2300      	movs	r3, #0
}
 801b5dc:	0018      	movs	r0, r3
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	b002      	add	sp, #8
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	2239      	movs	r2, #57	@ 0x39
 801b5f0:	5c9b      	ldrb	r3, [r3, r2]
 801b5f2:	b2db      	uxtb	r3, r3
 801b5f4:	2b01      	cmp	r3, #1
 801b5f6:	d001      	beq.n	801b5fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801b5f8:	2301      	movs	r3, #1
 801b5fa:	e033      	b.n	801b664 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	2239      	movs	r2, #57	@ 0x39
 801b600:	2102      	movs	r1, #2
 801b602:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	681a      	ldr	r2, [r3, #0]
 801b608:	2380      	movs	r3, #128	@ 0x80
 801b60a:	05db      	lsls	r3, r3, #23
 801b60c:	429a      	cmp	r2, r3
 801b60e:	d00e      	beq.n	801b62e <HAL_TIM_Base_Start+0x4a>
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	4a15      	ldr	r2, [pc, #84]	@ (801b66c <HAL_TIM_Base_Start+0x88>)
 801b616:	4293      	cmp	r3, r2
 801b618:	d009      	beq.n	801b62e <HAL_TIM_Base_Start+0x4a>
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	4a14      	ldr	r2, [pc, #80]	@ (801b670 <HAL_TIM_Base_Start+0x8c>)
 801b620:	4293      	cmp	r3, r2
 801b622:	d004      	beq.n	801b62e <HAL_TIM_Base_Start+0x4a>
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	4a12      	ldr	r2, [pc, #72]	@ (801b674 <HAL_TIM_Base_Start+0x90>)
 801b62a:	4293      	cmp	r3, r2
 801b62c:	d111      	bne.n	801b652 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	689b      	ldr	r3, [r3, #8]
 801b634:	2207      	movs	r2, #7
 801b636:	4013      	ands	r3, r2
 801b638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	2b06      	cmp	r3, #6
 801b63e:	d010      	beq.n	801b662 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	2101      	movs	r1, #1
 801b64c:	430a      	orrs	r2, r1
 801b64e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b650:	e007      	b.n	801b662 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	681a      	ldr	r2, [r3, #0]
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	2101      	movs	r1, #1
 801b65e:	430a      	orrs	r2, r1
 801b660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b662:	2300      	movs	r3, #0
}
 801b664:	0018      	movs	r0, r3
 801b666:	46bd      	mov	sp, r7
 801b668:	b004      	add	sp, #16
 801b66a:	bd80      	pop	{r7, pc}
 801b66c:	40000400 	.word	0x40000400
 801b670:	40010800 	.word	0x40010800
 801b674:	40011400 	.word	0x40011400

0801b678 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b082      	sub	sp, #8
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	6a1b      	ldr	r3, [r3, #32]
 801b686:	4a0a      	ldr	r2, [pc, #40]	@ (801b6b0 <HAL_TIM_Base_Stop+0x38>)
 801b688:	4013      	ands	r3, r2
 801b68a:	d107      	bne.n	801b69c <HAL_TIM_Base_Stop+0x24>
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	681a      	ldr	r2, [r3, #0]
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	2101      	movs	r1, #1
 801b698:	438a      	bics	r2, r1
 801b69a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	2239      	movs	r2, #57	@ 0x39
 801b6a0:	2101      	movs	r1, #1
 801b6a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801b6a4:	2300      	movs	r3, #0
}
 801b6a6:	0018      	movs	r0, r3
 801b6a8:	46bd      	mov	sp, r7
 801b6aa:	b002      	add	sp, #8
 801b6ac:	bd80      	pop	{r7, pc}
 801b6ae:	46c0      	nop			@ (mov r8, r8)
 801b6b0:	00001111 	.word	0x00001111

0801b6b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b082      	sub	sp, #8
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d101      	bne.n	801b6c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	e032      	b.n	801b72c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	2239      	movs	r2, #57	@ 0x39
 801b6ca:	5c9b      	ldrb	r3, [r3, r2]
 801b6cc:	b2db      	uxtb	r3, r3
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d107      	bne.n	801b6e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	2238      	movs	r2, #56	@ 0x38
 801b6d6:	2100      	movs	r1, #0
 801b6d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	0018      	movs	r0, r3
 801b6de:	f7f6 ff27 	bl	8012530 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	2239      	movs	r2, #57	@ 0x39
 801b6e6:	2102      	movs	r1, #2
 801b6e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	681a      	ldr	r2, [r3, #0]
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	3304      	adds	r3, #4
 801b6f2:	0019      	movs	r1, r3
 801b6f4:	0010      	movs	r0, r2
 801b6f6:	f000 f975 	bl	801b9e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	223e      	movs	r2, #62	@ 0x3e
 801b6fe:	2101      	movs	r1, #1
 801b700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	223a      	movs	r2, #58	@ 0x3a
 801b706:	2101      	movs	r1, #1
 801b708:	5499      	strb	r1, [r3, r2]
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	223b      	movs	r2, #59	@ 0x3b
 801b70e:	2101      	movs	r1, #1
 801b710:	5499      	strb	r1, [r3, r2]
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	223c      	movs	r2, #60	@ 0x3c
 801b716:	2101      	movs	r1, #1
 801b718:	5499      	strb	r1, [r3, r2]
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	223d      	movs	r2, #61	@ 0x3d
 801b71e:	2101      	movs	r1, #1
 801b720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	2239      	movs	r2, #57	@ 0x39
 801b726:	2101      	movs	r1, #1
 801b728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b72a:	2300      	movs	r3, #0
}
 801b72c:	0018      	movs	r0, r3
 801b72e:	46bd      	mov	sp, r7
 801b730:	b002      	add	sp, #8
 801b732:	bd80      	pop	{r7, pc}

0801b734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b734:	b580      	push	{r7, lr}
 801b736:	b084      	sub	sp, #16
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
 801b73c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d108      	bne.n	801b756 <HAL_TIM_PWM_Start+0x22>
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	223a      	movs	r2, #58	@ 0x3a
 801b748:	5c9b      	ldrb	r3, [r3, r2]
 801b74a:	b2db      	uxtb	r3, r3
 801b74c:	3b01      	subs	r3, #1
 801b74e:	1e5a      	subs	r2, r3, #1
 801b750:	4193      	sbcs	r3, r2
 801b752:	b2db      	uxtb	r3, r3
 801b754:	e01f      	b.n	801b796 <HAL_TIM_PWM_Start+0x62>
 801b756:	683b      	ldr	r3, [r7, #0]
 801b758:	2b04      	cmp	r3, #4
 801b75a:	d108      	bne.n	801b76e <HAL_TIM_PWM_Start+0x3a>
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	223b      	movs	r2, #59	@ 0x3b
 801b760:	5c9b      	ldrb	r3, [r3, r2]
 801b762:	b2db      	uxtb	r3, r3
 801b764:	3b01      	subs	r3, #1
 801b766:	1e5a      	subs	r2, r3, #1
 801b768:	4193      	sbcs	r3, r2
 801b76a:	b2db      	uxtb	r3, r3
 801b76c:	e013      	b.n	801b796 <HAL_TIM_PWM_Start+0x62>
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	2b08      	cmp	r3, #8
 801b772:	d108      	bne.n	801b786 <HAL_TIM_PWM_Start+0x52>
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	223c      	movs	r2, #60	@ 0x3c
 801b778:	5c9b      	ldrb	r3, [r3, r2]
 801b77a:	b2db      	uxtb	r3, r3
 801b77c:	3b01      	subs	r3, #1
 801b77e:	1e5a      	subs	r2, r3, #1
 801b780:	4193      	sbcs	r3, r2
 801b782:	b2db      	uxtb	r3, r3
 801b784:	e007      	b.n	801b796 <HAL_TIM_PWM_Start+0x62>
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	223d      	movs	r2, #61	@ 0x3d
 801b78a:	5c9b      	ldrb	r3, [r3, r2]
 801b78c:	b2db      	uxtb	r3, r3
 801b78e:	3b01      	subs	r3, #1
 801b790:	1e5a      	subs	r2, r3, #1
 801b792:	4193      	sbcs	r3, r2
 801b794:	b2db      	uxtb	r3, r3
 801b796:	2b00      	cmp	r3, #0
 801b798:	d001      	beq.n	801b79e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801b79a:	2301      	movs	r3, #1
 801b79c:	e052      	b.n	801b844 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801b79e:	683b      	ldr	r3, [r7, #0]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d104      	bne.n	801b7ae <HAL_TIM_PWM_Start+0x7a>
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	223a      	movs	r2, #58	@ 0x3a
 801b7a8:	2102      	movs	r1, #2
 801b7aa:	5499      	strb	r1, [r3, r2]
 801b7ac:	e013      	b.n	801b7d6 <HAL_TIM_PWM_Start+0xa2>
 801b7ae:	683b      	ldr	r3, [r7, #0]
 801b7b0:	2b04      	cmp	r3, #4
 801b7b2:	d104      	bne.n	801b7be <HAL_TIM_PWM_Start+0x8a>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	223b      	movs	r2, #59	@ 0x3b
 801b7b8:	2102      	movs	r1, #2
 801b7ba:	5499      	strb	r1, [r3, r2]
 801b7bc:	e00b      	b.n	801b7d6 <HAL_TIM_PWM_Start+0xa2>
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	2b08      	cmp	r3, #8
 801b7c2:	d104      	bne.n	801b7ce <HAL_TIM_PWM_Start+0x9a>
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	223c      	movs	r2, #60	@ 0x3c
 801b7c8:	2102      	movs	r1, #2
 801b7ca:	5499      	strb	r1, [r3, r2]
 801b7cc:	e003      	b.n	801b7d6 <HAL_TIM_PWM_Start+0xa2>
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	223d      	movs	r2, #61	@ 0x3d
 801b7d2:	2102      	movs	r1, #2
 801b7d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	6839      	ldr	r1, [r7, #0]
 801b7dc:	2201      	movs	r2, #1
 801b7de:	0018      	movs	r0, r3
 801b7e0:	f000 fa62 	bl	801bca8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681a      	ldr	r2, [r3, #0]
 801b7e8:	2380      	movs	r3, #128	@ 0x80
 801b7ea:	05db      	lsls	r3, r3, #23
 801b7ec:	429a      	cmp	r2, r3
 801b7ee:	d00e      	beq.n	801b80e <HAL_TIM_PWM_Start+0xda>
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	4a15      	ldr	r2, [pc, #84]	@ (801b84c <HAL_TIM_PWM_Start+0x118>)
 801b7f6:	4293      	cmp	r3, r2
 801b7f8:	d009      	beq.n	801b80e <HAL_TIM_PWM_Start+0xda>
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	4a14      	ldr	r2, [pc, #80]	@ (801b850 <HAL_TIM_PWM_Start+0x11c>)
 801b800:	4293      	cmp	r3, r2
 801b802:	d004      	beq.n	801b80e <HAL_TIM_PWM_Start+0xda>
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	4a12      	ldr	r2, [pc, #72]	@ (801b854 <HAL_TIM_PWM_Start+0x120>)
 801b80a:	4293      	cmp	r3, r2
 801b80c:	d111      	bne.n	801b832 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	689b      	ldr	r3, [r3, #8]
 801b814:	2207      	movs	r2, #7
 801b816:	4013      	ands	r3, r2
 801b818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	2b06      	cmp	r3, #6
 801b81e:	d010      	beq.n	801b842 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	681a      	ldr	r2, [r3, #0]
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	2101      	movs	r1, #1
 801b82c:	430a      	orrs	r2, r1
 801b82e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b830:	e007      	b.n	801b842 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	681a      	ldr	r2, [r3, #0]
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	2101      	movs	r1, #1
 801b83e:	430a      	orrs	r2, r1
 801b840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b842:	2300      	movs	r3, #0
}
 801b844:	0018      	movs	r0, r3
 801b846:	46bd      	mov	sp, r7
 801b848:	b004      	add	sp, #16
 801b84a:	bd80      	pop	{r7, pc}
 801b84c:	40000400 	.word	0x40000400
 801b850:	40010800 	.word	0x40010800
 801b854:	40011400 	.word	0x40011400

0801b858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b086      	sub	sp, #24
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	60f8      	str	r0, [r7, #12]
 801b860:	60b9      	str	r1, [r7, #8]
 801b862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b864:	2317      	movs	r3, #23
 801b866:	18fb      	adds	r3, r7, r3
 801b868:	2200      	movs	r2, #0
 801b86a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	2238      	movs	r2, #56	@ 0x38
 801b870:	5c9b      	ldrb	r3, [r3, r2]
 801b872:	2b01      	cmp	r3, #1
 801b874:	d101      	bne.n	801b87a <HAL_TIM_PWM_ConfigChannel+0x22>
 801b876:	2302      	movs	r3, #2
 801b878:	e0ad      	b.n	801b9d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	2238      	movs	r2, #56	@ 0x38
 801b87e:	2101      	movs	r1, #1
 801b880:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2b0c      	cmp	r3, #12
 801b886:	d100      	bne.n	801b88a <HAL_TIM_PWM_ConfigChannel+0x32>
 801b888:	e076      	b.n	801b978 <HAL_TIM_PWM_ConfigChannel+0x120>
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	2b0c      	cmp	r3, #12
 801b88e:	d900      	bls.n	801b892 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801b890:	e095      	b.n	801b9be <HAL_TIM_PWM_ConfigChannel+0x166>
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	2b08      	cmp	r3, #8
 801b896:	d04e      	beq.n	801b936 <HAL_TIM_PWM_ConfigChannel+0xde>
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2b08      	cmp	r3, #8
 801b89c:	d900      	bls.n	801b8a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 801b89e:	e08e      	b.n	801b9be <HAL_TIM_PWM_ConfigChannel+0x166>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d003      	beq.n	801b8ae <HAL_TIM_PWM_ConfigChannel+0x56>
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	2b04      	cmp	r3, #4
 801b8aa:	d021      	beq.n	801b8f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 801b8ac:	e087      	b.n	801b9be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	68ba      	ldr	r2, [r7, #8]
 801b8b4:	0011      	movs	r1, r2
 801b8b6:	0018      	movs	r0, r3
 801b8b8:	f000 f8f2 	bl	801baa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	699a      	ldr	r2, [r3, #24]
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	2108      	movs	r1, #8
 801b8c8:	430a      	orrs	r2, r1
 801b8ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	699a      	ldr	r2, [r3, #24]
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	2104      	movs	r1, #4
 801b8d8:	438a      	bics	r2, r1
 801b8da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	6999      	ldr	r1, [r3, #24]
 801b8e2:	68bb      	ldr	r3, [r7, #8]
 801b8e4:	68da      	ldr	r2, [r3, #12]
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	430a      	orrs	r2, r1
 801b8ec:	619a      	str	r2, [r3, #24]
      break;
 801b8ee:	e06b      	b.n	801b9c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	68ba      	ldr	r2, [r7, #8]
 801b8f6:	0011      	movs	r1, r2
 801b8f8:	0018      	movs	r0, r3
 801b8fa:	f000 f90d 	bl	801bb18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	699a      	ldr	r2, [r3, #24]
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	2180      	movs	r1, #128	@ 0x80
 801b90a:	0109      	lsls	r1, r1, #4
 801b90c:	430a      	orrs	r2, r1
 801b90e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	699a      	ldr	r2, [r3, #24]
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	4931      	ldr	r1, [pc, #196]	@ (801b9e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801b91c:	400a      	ands	r2, r1
 801b91e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	6999      	ldr	r1, [r3, #24]
 801b926:	68bb      	ldr	r3, [r7, #8]
 801b928:	68db      	ldr	r3, [r3, #12]
 801b92a:	021a      	lsls	r2, r3, #8
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	430a      	orrs	r2, r1
 801b932:	619a      	str	r2, [r3, #24]
      break;
 801b934:	e048      	b.n	801b9c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	68ba      	ldr	r2, [r7, #8]
 801b93c:	0011      	movs	r1, r2
 801b93e:	0018      	movs	r0, r3
 801b940:	f000 f92c 	bl	801bb9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	69da      	ldr	r2, [r3, #28]
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	2108      	movs	r1, #8
 801b950:	430a      	orrs	r2, r1
 801b952:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	69da      	ldr	r2, [r3, #28]
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	2104      	movs	r1, #4
 801b960:	438a      	bics	r2, r1
 801b962:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	69d9      	ldr	r1, [r3, #28]
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	68da      	ldr	r2, [r3, #12]
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	430a      	orrs	r2, r1
 801b974:	61da      	str	r2, [r3, #28]
      break;
 801b976:	e027      	b.n	801b9c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	68ba      	ldr	r2, [r7, #8]
 801b97e:	0011      	movs	r1, r2
 801b980:	0018      	movs	r0, r3
 801b982:	f000 f94b 	bl	801bc1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	69da      	ldr	r2, [r3, #28]
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	2180      	movs	r1, #128	@ 0x80
 801b992:	0109      	lsls	r1, r1, #4
 801b994:	430a      	orrs	r2, r1
 801b996:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	69da      	ldr	r2, [r3, #28]
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	490f      	ldr	r1, [pc, #60]	@ (801b9e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801b9a4:	400a      	ands	r2, r1
 801b9a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	69d9      	ldr	r1, [r3, #28]
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	68db      	ldr	r3, [r3, #12]
 801b9b2:	021a      	lsls	r2, r3, #8
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	430a      	orrs	r2, r1
 801b9ba:	61da      	str	r2, [r3, #28]
      break;
 801b9bc:	e004      	b.n	801b9c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801b9be:	2317      	movs	r3, #23
 801b9c0:	18fb      	adds	r3, r7, r3
 801b9c2:	2201      	movs	r2, #1
 801b9c4:	701a      	strb	r2, [r3, #0]
      break;
 801b9c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	2238      	movs	r2, #56	@ 0x38
 801b9cc:	2100      	movs	r1, #0
 801b9ce:	5499      	strb	r1, [r3, r2]

  return status;
 801b9d0:	2317      	movs	r3, #23
 801b9d2:	18fb      	adds	r3, r7, r3
 801b9d4:	781b      	ldrb	r3, [r3, #0]
}
 801b9d6:	0018      	movs	r0, r3
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	b006      	add	sp, #24
 801b9dc:	bd80      	pop	{r7, pc}
 801b9de:	46c0      	nop			@ (mov r8, r8)
 801b9e0:	fffffbff 	.word	0xfffffbff

0801b9e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	b084      	sub	sp, #16
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
 801b9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b9f4:	687a      	ldr	r2, [r7, #4]
 801b9f6:	2380      	movs	r3, #128	@ 0x80
 801b9f8:	05db      	lsls	r3, r3, #23
 801b9fa:	429a      	cmp	r2, r3
 801b9fc:	d00b      	beq.n	801ba16 <TIM_Base_SetConfig+0x32>
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	4a23      	ldr	r2, [pc, #140]	@ (801ba90 <TIM_Base_SetConfig+0xac>)
 801ba02:	4293      	cmp	r3, r2
 801ba04:	d007      	beq.n	801ba16 <TIM_Base_SetConfig+0x32>
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	4a22      	ldr	r2, [pc, #136]	@ (801ba94 <TIM_Base_SetConfig+0xb0>)
 801ba0a:	4293      	cmp	r3, r2
 801ba0c:	d003      	beq.n	801ba16 <TIM_Base_SetConfig+0x32>
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	4a21      	ldr	r2, [pc, #132]	@ (801ba98 <TIM_Base_SetConfig+0xb4>)
 801ba12:	4293      	cmp	r3, r2
 801ba14:	d108      	bne.n	801ba28 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	2270      	movs	r2, #112	@ 0x70
 801ba1a:	4393      	bics	r3, r2
 801ba1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ba1e:	683b      	ldr	r3, [r7, #0]
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	68fa      	ldr	r2, [r7, #12]
 801ba24:	4313      	orrs	r3, r2
 801ba26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801ba28:	687a      	ldr	r2, [r7, #4]
 801ba2a:	2380      	movs	r3, #128	@ 0x80
 801ba2c:	05db      	lsls	r3, r3, #23
 801ba2e:	429a      	cmp	r2, r3
 801ba30:	d00b      	beq.n	801ba4a <TIM_Base_SetConfig+0x66>
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	4a16      	ldr	r2, [pc, #88]	@ (801ba90 <TIM_Base_SetConfig+0xac>)
 801ba36:	4293      	cmp	r3, r2
 801ba38:	d007      	beq.n	801ba4a <TIM_Base_SetConfig+0x66>
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	4a15      	ldr	r2, [pc, #84]	@ (801ba94 <TIM_Base_SetConfig+0xb0>)
 801ba3e:	4293      	cmp	r3, r2
 801ba40:	d003      	beq.n	801ba4a <TIM_Base_SetConfig+0x66>
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	4a14      	ldr	r2, [pc, #80]	@ (801ba98 <TIM_Base_SetConfig+0xb4>)
 801ba46:	4293      	cmp	r3, r2
 801ba48:	d108      	bne.n	801ba5c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	4a13      	ldr	r2, [pc, #76]	@ (801ba9c <TIM_Base_SetConfig+0xb8>)
 801ba4e:	4013      	ands	r3, r2
 801ba50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801ba52:	683b      	ldr	r3, [r7, #0]
 801ba54:	68db      	ldr	r3, [r3, #12]
 801ba56:	68fa      	ldr	r2, [r7, #12]
 801ba58:	4313      	orrs	r3, r2
 801ba5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	2280      	movs	r2, #128	@ 0x80
 801ba60:	4393      	bics	r3, r2
 801ba62:	001a      	movs	r2, r3
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	691b      	ldr	r3, [r3, #16]
 801ba68:	4313      	orrs	r3, r2
 801ba6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	68fa      	ldr	r2, [r7, #12]
 801ba70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801ba72:	683b      	ldr	r3, [r7, #0]
 801ba74:	689a      	ldr	r2, [r3, #8]
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801ba7a:	683b      	ldr	r3, [r7, #0]
 801ba7c:	681a      	ldr	r2, [r3, #0]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	2201      	movs	r2, #1
 801ba86:	615a      	str	r2, [r3, #20]
}
 801ba88:	46c0      	nop			@ (mov r8, r8)
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	b004      	add	sp, #16
 801ba8e:	bd80      	pop	{r7, pc}
 801ba90:	40000400 	.word	0x40000400
 801ba94:	40010800 	.word	0x40010800
 801ba98:	40011400 	.word	0x40011400
 801ba9c:	fffffcff 	.word	0xfffffcff

0801baa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b086      	sub	sp, #24
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
 801baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	6a1b      	ldr	r3, [r3, #32]
 801baae:	2201      	movs	r2, #1
 801bab0:	4393      	bics	r3, r2
 801bab2:	001a      	movs	r2, r3
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	6a1b      	ldr	r3, [r3, #32]
 801babc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	685b      	ldr	r3, [r3, #4]
 801bac2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	699b      	ldr	r3, [r3, #24]
 801bac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	2270      	movs	r2, #112	@ 0x70
 801bace:	4393      	bics	r3, r2
 801bad0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	2203      	movs	r2, #3
 801bad6:	4393      	bics	r3, r2
 801bad8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801bada:	683b      	ldr	r3, [r7, #0]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	68fa      	ldr	r2, [r7, #12]
 801bae0:	4313      	orrs	r3, r2
 801bae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	2202      	movs	r2, #2
 801bae8:	4393      	bics	r3, r2
 801baea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801baec:	683b      	ldr	r3, [r7, #0]
 801baee:	689b      	ldr	r3, [r3, #8]
 801baf0:	697a      	ldr	r2, [r7, #20]
 801baf2:	4313      	orrs	r3, r2
 801baf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	693a      	ldr	r2, [r7, #16]
 801bafa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	68fa      	ldr	r2, [r7, #12]
 801bb00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801bb02:	683b      	ldr	r3, [r7, #0]
 801bb04:	685a      	ldr	r2, [r3, #4]
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	697a      	ldr	r2, [r7, #20]
 801bb0e:	621a      	str	r2, [r3, #32]
}
 801bb10:	46c0      	nop			@ (mov r8, r8)
 801bb12:	46bd      	mov	sp, r7
 801bb14:	b006      	add	sp, #24
 801bb16:	bd80      	pop	{r7, pc}

0801bb18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b086      	sub	sp, #24
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
 801bb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	6a1b      	ldr	r3, [r3, #32]
 801bb26:	2210      	movs	r2, #16
 801bb28:	4393      	bics	r3, r2
 801bb2a:	001a      	movs	r2, r3
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	6a1b      	ldr	r3, [r3, #32]
 801bb34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	685b      	ldr	r3, [r3, #4]
 801bb3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	699b      	ldr	r3, [r3, #24]
 801bb40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801bb42:	68fb      	ldr	r3, [r7, #12]
 801bb44:	4a13      	ldr	r2, [pc, #76]	@ (801bb94 <TIM_OC2_SetConfig+0x7c>)
 801bb46:	4013      	ands	r3, r2
 801bb48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	4a12      	ldr	r2, [pc, #72]	@ (801bb98 <TIM_OC2_SetConfig+0x80>)
 801bb4e:	4013      	ands	r3, r2
 801bb50:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	021b      	lsls	r3, r3, #8
 801bb58:	68fa      	ldr	r2, [r7, #12]
 801bb5a:	4313      	orrs	r3, r2
 801bb5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801bb5e:	697b      	ldr	r3, [r7, #20]
 801bb60:	2220      	movs	r2, #32
 801bb62:	4393      	bics	r3, r2
 801bb64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	689b      	ldr	r3, [r3, #8]
 801bb6a:	011b      	lsls	r3, r3, #4
 801bb6c:	697a      	ldr	r2, [r7, #20]
 801bb6e:	4313      	orrs	r3, r2
 801bb70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	693a      	ldr	r2, [r7, #16]
 801bb76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	68fa      	ldr	r2, [r7, #12]
 801bb7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	685a      	ldr	r2, [r3, #4]
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	697a      	ldr	r2, [r7, #20]
 801bb8a:	621a      	str	r2, [r3, #32]
}
 801bb8c:	46c0      	nop			@ (mov r8, r8)
 801bb8e:	46bd      	mov	sp, r7
 801bb90:	b006      	add	sp, #24
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	ffff8fff 	.word	0xffff8fff
 801bb98:	fffffcff 	.word	0xfffffcff

0801bb9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b086      	sub	sp, #24
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
 801bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	6a1b      	ldr	r3, [r3, #32]
 801bbaa:	4a1a      	ldr	r2, [pc, #104]	@ (801bc14 <TIM_OC3_SetConfig+0x78>)
 801bbac:	401a      	ands	r2, r3
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6a1b      	ldr	r3, [r3, #32]
 801bbb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	685b      	ldr	r3, [r3, #4]
 801bbbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	69db      	ldr	r3, [r3, #28]
 801bbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	2270      	movs	r2, #112	@ 0x70
 801bbc8:	4393      	bics	r3, r2
 801bbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	2203      	movs	r2, #3
 801bbd0:	4393      	bics	r3, r2
 801bbd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801bbd4:	683b      	ldr	r3, [r7, #0]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	68fa      	ldr	r2, [r7, #12]
 801bbda:	4313      	orrs	r3, r2
 801bbdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	4a0d      	ldr	r2, [pc, #52]	@ (801bc18 <TIM_OC3_SetConfig+0x7c>)
 801bbe2:	4013      	ands	r3, r2
 801bbe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	689b      	ldr	r3, [r3, #8]
 801bbea:	021b      	lsls	r3, r3, #8
 801bbec:	697a      	ldr	r2, [r7, #20]
 801bbee:	4313      	orrs	r3, r2
 801bbf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	693a      	ldr	r2, [r7, #16]
 801bbf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	68fa      	ldr	r2, [r7, #12]
 801bbfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	685a      	ldr	r2, [r3, #4]
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	697a      	ldr	r2, [r7, #20]
 801bc0a:	621a      	str	r2, [r3, #32]
}
 801bc0c:	46c0      	nop			@ (mov r8, r8)
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	b006      	add	sp, #24
 801bc12:	bd80      	pop	{r7, pc}
 801bc14:	fffffeff 	.word	0xfffffeff
 801bc18:	fffffdff 	.word	0xfffffdff

0801bc1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b086      	sub	sp, #24
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
 801bc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	6a1b      	ldr	r3, [r3, #32]
 801bc2a:	4a1b      	ldr	r2, [pc, #108]	@ (801bc98 <TIM_OC4_SetConfig+0x7c>)
 801bc2c:	401a      	ands	r2, r3
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	6a1b      	ldr	r3, [r3, #32]
 801bc36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	685b      	ldr	r3, [r3, #4]
 801bc3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	69db      	ldr	r3, [r3, #28]
 801bc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	4a15      	ldr	r2, [pc, #84]	@ (801bc9c <TIM_OC4_SetConfig+0x80>)
 801bc48:	4013      	ands	r3, r2
 801bc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	4a14      	ldr	r2, [pc, #80]	@ (801bca0 <TIM_OC4_SetConfig+0x84>)
 801bc50:	4013      	ands	r3, r2
 801bc52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bc54:	683b      	ldr	r3, [r7, #0]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	021b      	lsls	r3, r3, #8
 801bc5a:	68fa      	ldr	r2, [r7, #12]
 801bc5c:	4313      	orrs	r3, r2
 801bc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	4a10      	ldr	r2, [pc, #64]	@ (801bca4 <TIM_OC4_SetConfig+0x88>)
 801bc64:	4013      	ands	r3, r2
 801bc66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	689b      	ldr	r3, [r3, #8]
 801bc6c:	031b      	lsls	r3, r3, #12
 801bc6e:	697a      	ldr	r2, [r7, #20]
 801bc70:	4313      	orrs	r3, r2
 801bc72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	693a      	ldr	r2, [r7, #16]
 801bc78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	68fa      	ldr	r2, [r7, #12]
 801bc7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	685a      	ldr	r2, [r3, #4]
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	697a      	ldr	r2, [r7, #20]
 801bc8c:	621a      	str	r2, [r3, #32]
}
 801bc8e:	46c0      	nop			@ (mov r8, r8)
 801bc90:	46bd      	mov	sp, r7
 801bc92:	b006      	add	sp, #24
 801bc94:	bd80      	pop	{r7, pc}
 801bc96:	46c0      	nop			@ (mov r8, r8)
 801bc98:	ffffefff 	.word	0xffffefff
 801bc9c:	ffff8fff 	.word	0xffff8fff
 801bca0:	fffffcff 	.word	0xfffffcff
 801bca4:	ffffdfff 	.word	0xffffdfff

0801bca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b086      	sub	sp, #24
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	60f8      	str	r0, [r7, #12]
 801bcb0:	60b9      	str	r1, [r7, #8]
 801bcb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801bcb4:	68bb      	ldr	r3, [r7, #8]
 801bcb6:	221f      	movs	r2, #31
 801bcb8:	4013      	ands	r3, r2
 801bcba:	2201      	movs	r2, #1
 801bcbc:	409a      	lsls	r2, r3
 801bcbe:	0013      	movs	r3, r2
 801bcc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	6a1b      	ldr	r3, [r3, #32]
 801bcc6:	697a      	ldr	r2, [r7, #20]
 801bcc8:	43d2      	mvns	r2, r2
 801bcca:	401a      	ands	r2, r3
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	6a1a      	ldr	r2, [r3, #32]
 801bcd4:	68bb      	ldr	r3, [r7, #8]
 801bcd6:	211f      	movs	r1, #31
 801bcd8:	400b      	ands	r3, r1
 801bcda:	6879      	ldr	r1, [r7, #4]
 801bcdc:	4099      	lsls	r1, r3
 801bcde:	000b      	movs	r3, r1
 801bce0:	431a      	orrs	r2, r3
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	621a      	str	r2, [r3, #32]
}
 801bce6:	46c0      	nop			@ (mov r8, r8)
 801bce8:	46bd      	mov	sp, r7
 801bcea:	b006      	add	sp, #24
 801bcec:	bd80      	pop	{r7, pc}
	...

0801bcf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b084      	sub	sp, #16
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	6078      	str	r0, [r7, #4]
 801bcf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	2238      	movs	r2, #56	@ 0x38
 801bcfe:	5c9b      	ldrb	r3, [r3, r2]
 801bd00:	2b01      	cmp	r3, #1
 801bd02:	d101      	bne.n	801bd08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801bd04:	2302      	movs	r3, #2
 801bd06:	e047      	b.n	801bd98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	2238      	movs	r2, #56	@ 0x38
 801bd0c:	2101      	movs	r1, #1
 801bd0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	2239      	movs	r2, #57	@ 0x39
 801bd14:	2102      	movs	r1, #2
 801bd16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	685b      	ldr	r3, [r3, #4]
 801bd1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	689b      	ldr	r3, [r3, #8]
 801bd26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	2270      	movs	r2, #112	@ 0x70
 801bd2c:	4393      	bics	r3, r2
 801bd2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	68fa      	ldr	r2, [r7, #12]
 801bd36:	4313      	orrs	r3, r2
 801bd38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	68fa      	ldr	r2, [r7, #12]
 801bd40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	681a      	ldr	r2, [r3, #0]
 801bd46:	2380      	movs	r3, #128	@ 0x80
 801bd48:	05db      	lsls	r3, r3, #23
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d00e      	beq.n	801bd6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	4a13      	ldr	r2, [pc, #76]	@ (801bda0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801bd54:	4293      	cmp	r3, r2
 801bd56:	d009      	beq.n	801bd6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	4a11      	ldr	r2, [pc, #68]	@ (801bda4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801bd5e:	4293      	cmp	r3, r2
 801bd60:	d004      	beq.n	801bd6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	4a10      	ldr	r2, [pc, #64]	@ (801bda8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801bd68:	4293      	cmp	r3, r2
 801bd6a:	d10c      	bne.n	801bd86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	2280      	movs	r2, #128	@ 0x80
 801bd70:	4393      	bics	r3, r2
 801bd72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	685b      	ldr	r3, [r3, #4]
 801bd78:	68ba      	ldr	r2, [r7, #8]
 801bd7a:	4313      	orrs	r3, r2
 801bd7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	68ba      	ldr	r2, [r7, #8]
 801bd84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	2239      	movs	r2, #57	@ 0x39
 801bd8a:	2101      	movs	r1, #1
 801bd8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	2238      	movs	r2, #56	@ 0x38
 801bd92:	2100      	movs	r1, #0
 801bd94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bd96:	2300      	movs	r3, #0
}
 801bd98:	0018      	movs	r0, r3
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	b004      	add	sp, #16
 801bd9e:	bd80      	pop	{r7, pc}
 801bda0:	40000400 	.word	0x40000400
 801bda4:	40010800 	.word	0x40010800
 801bda8:	40011400 	.word	0x40011400

0801bdac <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b082      	sub	sp, #8
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
 801bdb4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	2238      	movs	r2, #56	@ 0x38
 801bdba:	5c9b      	ldrb	r3, [r3, r2]
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	d101      	bne.n	801bdc4 <HAL_TIMEx_RemapConfig+0x18>
 801bdc0:	2302      	movs	r3, #2
 801bdc2:	e00c      	b.n	801bdde <HAL_TIMEx_RemapConfig+0x32>
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	2238      	movs	r2, #56	@ 0x38
 801bdc8:	2101      	movs	r1, #1
 801bdca:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	683a      	ldr	r2, [r7, #0]
 801bdd2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	2238      	movs	r2, #56	@ 0x38
 801bdd8:	2100      	movs	r1, #0
 801bdda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bddc:	2300      	movs	r3, #0
}
 801bdde:	0018      	movs	r0, r3
 801bde0:	46bd      	mov	sp, r7
 801bde2:	b002      	add	sp, #8
 801bde4:	bd80      	pop	{r7, pc}
	...

0801bde8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b082      	sub	sp, #8
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d101      	bne.n	801bdfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bdf6:	2301      	movs	r3, #1
 801bdf8:	e053      	b.n	801bea2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d116      	bne.n	801be30 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	2278      	movs	r2, #120	@ 0x78
 801be06:	2100      	movs	r1, #0
 801be08:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	0018      	movs	r0, r3
 801be0e:	f000 fd65 	bl	801c8dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	22b0      	movs	r2, #176	@ 0xb0
 801be16:	589b      	ldr	r3, [r3, r2]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d103      	bne.n	801be24 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	21b0      	movs	r1, #176	@ 0xb0
 801be20:	4a22      	ldr	r2, [pc, #136]	@ (801beac <HAL_UART_Init+0xc4>)
 801be22:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	22b0      	movs	r2, #176	@ 0xb0
 801be28:	589b      	ldr	r3, [r3, r2]
 801be2a:	687a      	ldr	r2, [r7, #4]
 801be2c:	0010      	movs	r0, r2
 801be2e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	2224      	movs	r2, #36	@ 0x24
 801be34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	681a      	ldr	r2, [r3, #0]
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	2101      	movs	r1, #1
 801be42:	438a      	bics	r2, r1
 801be44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	0018      	movs	r0, r3
 801be4a:	f000 fd8b 	bl	801c964 <UART_SetConfig>
 801be4e:	0003      	movs	r3, r0
 801be50:	2b01      	cmp	r3, #1
 801be52:	d101      	bne.n	801be58 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801be54:	2301      	movs	r3, #1
 801be56:	e024      	b.n	801bea2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d003      	beq.n	801be68 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	0018      	movs	r0, r3
 801be64:	f001 f81c 	bl	801cea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	685a      	ldr	r2, [r3, #4]
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	490f      	ldr	r1, [pc, #60]	@ (801beb0 <HAL_UART_Init+0xc8>)
 801be74:	400a      	ands	r2, r1
 801be76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	689a      	ldr	r2, [r3, #8]
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	212a      	movs	r1, #42	@ 0x2a
 801be84:	438a      	bics	r2, r1
 801be86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	681a      	ldr	r2, [r3, #0]
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	2101      	movs	r1, #1
 801be94:	430a      	orrs	r2, r1
 801be96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	0018      	movs	r0, r3
 801be9c:	f001 f8b4 	bl	801d008 <UART_CheckIdleState>
 801bea0:	0003      	movs	r3, r0
}
 801bea2:	0018      	movs	r0, r3
 801bea4:	46bd      	mov	sp, r7
 801bea6:	b002      	add	sp, #8
 801bea8:	bd80      	pop	{r7, pc}
 801beaa:	46c0      	nop			@ (mov r8, r8)
 801beac:	080127a5 	.word	0x080127a5
 801beb0:	ffffb7ff 	.word	0xffffb7ff

0801beb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b08a      	sub	sp, #40	@ 0x28
 801beb8:	af02      	add	r7, sp, #8
 801beba:	60f8      	str	r0, [r7, #12]
 801bebc:	60b9      	str	r1, [r7, #8]
 801bebe:	603b      	str	r3, [r7, #0]
 801bec0:	1dbb      	adds	r3, r7, #6
 801bec2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bec8:	2b20      	cmp	r3, #32
 801beca:	d000      	beq.n	801bece <HAL_UART_Transmit+0x1a>
 801becc:	e08c      	b.n	801bfe8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d003      	beq.n	801bedc <HAL_UART_Transmit+0x28>
 801bed4:	1dbb      	adds	r3, r7, #6
 801bed6:	881b      	ldrh	r3, [r3, #0]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d101      	bne.n	801bee0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801bedc:	2301      	movs	r3, #1
 801bede:	e084      	b.n	801bfea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	689a      	ldr	r2, [r3, #8]
 801bee4:	2380      	movs	r3, #128	@ 0x80
 801bee6:	015b      	lsls	r3, r3, #5
 801bee8:	429a      	cmp	r2, r3
 801beea:	d109      	bne.n	801bf00 <HAL_UART_Transmit+0x4c>
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	691b      	ldr	r3, [r3, #16]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d105      	bne.n	801bf00 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801bef4:	68bb      	ldr	r3, [r7, #8]
 801bef6:	2201      	movs	r2, #1
 801bef8:	4013      	ands	r3, r2
 801befa:	d001      	beq.n	801bf00 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801befc:	2301      	movs	r3, #1
 801befe:	e074      	b.n	801bfea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	2284      	movs	r2, #132	@ 0x84
 801bf04:	2100      	movs	r1, #0
 801bf06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	2221      	movs	r2, #33	@ 0x21
 801bf0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bf0e:	f7f7 fb0d 	bl	801352c <HAL_GetTick>
 801bf12:	0003      	movs	r3, r0
 801bf14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	1dba      	adds	r2, r7, #6
 801bf1a:	2150      	movs	r1, #80	@ 0x50
 801bf1c:	8812      	ldrh	r2, [r2, #0]
 801bf1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	1dba      	adds	r2, r7, #6
 801bf24:	2152      	movs	r1, #82	@ 0x52
 801bf26:	8812      	ldrh	r2, [r2, #0]
 801bf28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	689a      	ldr	r2, [r3, #8]
 801bf2e:	2380      	movs	r3, #128	@ 0x80
 801bf30:	015b      	lsls	r3, r3, #5
 801bf32:	429a      	cmp	r2, r3
 801bf34:	d108      	bne.n	801bf48 <HAL_UART_Transmit+0x94>
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	691b      	ldr	r3, [r3, #16]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d104      	bne.n	801bf48 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801bf3e:	2300      	movs	r3, #0
 801bf40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bf42:	68bb      	ldr	r3, [r7, #8]
 801bf44:	61bb      	str	r3, [r7, #24]
 801bf46:	e003      	b.n	801bf50 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801bf48:	68bb      	ldr	r3, [r7, #8]
 801bf4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801bf50:	e02f      	b.n	801bfb2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bf52:	697a      	ldr	r2, [r7, #20]
 801bf54:	68f8      	ldr	r0, [r7, #12]
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	9300      	str	r3, [sp, #0]
 801bf5a:	0013      	movs	r3, r2
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	2180      	movs	r1, #128	@ 0x80
 801bf60:	f001 f8fa 	bl	801d158 <UART_WaitOnFlagUntilTimeout>
 801bf64:	1e03      	subs	r3, r0, #0
 801bf66:	d004      	beq.n	801bf72 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	2220      	movs	r2, #32
 801bf6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801bf6e:	2303      	movs	r3, #3
 801bf70:	e03b      	b.n	801bfea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801bf72:	69fb      	ldr	r3, [r7, #28]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d10b      	bne.n	801bf90 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bf78:	69bb      	ldr	r3, [r7, #24]
 801bf7a:	881b      	ldrh	r3, [r3, #0]
 801bf7c:	001a      	movs	r2, r3
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	05d2      	lsls	r2, r2, #23
 801bf84:	0dd2      	lsrs	r2, r2, #23
 801bf86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801bf88:	69bb      	ldr	r3, [r7, #24]
 801bf8a:	3302      	adds	r3, #2
 801bf8c:	61bb      	str	r3, [r7, #24]
 801bf8e:	e007      	b.n	801bfa0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801bf90:	69fb      	ldr	r3, [r7, #28]
 801bf92:	781a      	ldrb	r2, [r3, #0]
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801bf9a:	69fb      	ldr	r3, [r7, #28]
 801bf9c:	3301      	adds	r3, #1
 801bf9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	2252      	movs	r2, #82	@ 0x52
 801bfa4:	5a9b      	ldrh	r3, [r3, r2]
 801bfa6:	b29b      	uxth	r3, r3
 801bfa8:	3b01      	subs	r3, #1
 801bfaa:	b299      	uxth	r1, r3
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	2252      	movs	r2, #82	@ 0x52
 801bfb0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	2252      	movs	r2, #82	@ 0x52
 801bfb6:	5a9b      	ldrh	r3, [r3, r2]
 801bfb8:	b29b      	uxth	r3, r3
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d1c9      	bne.n	801bf52 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bfbe:	697a      	ldr	r2, [r7, #20]
 801bfc0:	68f8      	ldr	r0, [r7, #12]
 801bfc2:	683b      	ldr	r3, [r7, #0]
 801bfc4:	9300      	str	r3, [sp, #0]
 801bfc6:	0013      	movs	r3, r2
 801bfc8:	2200      	movs	r2, #0
 801bfca:	2140      	movs	r1, #64	@ 0x40
 801bfcc:	f001 f8c4 	bl	801d158 <UART_WaitOnFlagUntilTimeout>
 801bfd0:	1e03      	subs	r3, r0, #0
 801bfd2:	d004      	beq.n	801bfde <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	2220      	movs	r2, #32
 801bfd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801bfda:	2303      	movs	r3, #3
 801bfdc:	e005      	b.n	801bfea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	2220      	movs	r2, #32
 801bfe2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	e000      	b.n	801bfea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801bfe8:	2302      	movs	r3, #2
  }
}
 801bfea:	0018      	movs	r0, r3
 801bfec:	46bd      	mov	sp, r7
 801bfee:	b008      	add	sp, #32
 801bff0:	bd80      	pop	{r7, pc}
	...

0801bff4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b088      	sub	sp, #32
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	1dbb      	adds	r3, r7, #6
 801c000:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	2280      	movs	r2, #128	@ 0x80
 801c006:	589b      	ldr	r3, [r3, r2]
 801c008:	2b20      	cmp	r3, #32
 801c00a:	d14a      	bne.n	801c0a2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d003      	beq.n	801c01a <HAL_UART_Receive_IT+0x26>
 801c012:	1dbb      	adds	r3, r7, #6
 801c014:	881b      	ldrh	r3, [r3, #0]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d101      	bne.n	801c01e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801c01a:	2301      	movs	r3, #1
 801c01c:	e042      	b.n	801c0a4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	689a      	ldr	r2, [r3, #8]
 801c022:	2380      	movs	r3, #128	@ 0x80
 801c024:	015b      	lsls	r3, r3, #5
 801c026:	429a      	cmp	r2, r3
 801c028:	d109      	bne.n	801c03e <HAL_UART_Receive_IT+0x4a>
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	691b      	ldr	r3, [r3, #16]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d105      	bne.n	801c03e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c032:	68bb      	ldr	r3, [r7, #8]
 801c034:	2201      	movs	r2, #1
 801c036:	4013      	ands	r3, r2
 801c038:	d001      	beq.n	801c03e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801c03a:	2301      	movs	r3, #1
 801c03c:	e032      	b.n	801c0a4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	2200      	movs	r2, #0
 801c042:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	4a18      	ldr	r2, [pc, #96]	@ (801c0ac <HAL_UART_Receive_IT+0xb8>)
 801c04a:	4293      	cmp	r3, r2
 801c04c:	d020      	beq.n	801c090 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	685a      	ldr	r2, [r3, #4]
 801c054:	2380      	movs	r3, #128	@ 0x80
 801c056:	041b      	lsls	r3, r3, #16
 801c058:	4013      	ands	r3, r2
 801c05a:	d019      	beq.n	801c090 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c05c:	f3ef 8310 	mrs	r3, PRIMASK
 801c060:	613b      	str	r3, [r7, #16]
  return(result);
 801c062:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c064:	61fb      	str	r3, [r7, #28]
 801c066:	2301      	movs	r3, #1
 801c068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c06a:	697b      	ldr	r3, [r7, #20]
 801c06c:	f383 8810 	msr	PRIMASK, r3
}
 801c070:	46c0      	nop			@ (mov r8, r8)
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	681a      	ldr	r2, [r3, #0]
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	2180      	movs	r1, #128	@ 0x80
 801c07e:	04c9      	lsls	r1, r1, #19
 801c080:	430a      	orrs	r2, r1
 801c082:	601a      	str	r2, [r3, #0]
 801c084:	69fb      	ldr	r3, [r7, #28]
 801c086:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c088:	69bb      	ldr	r3, [r7, #24]
 801c08a:	f383 8810 	msr	PRIMASK, r3
}
 801c08e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c090:	1dbb      	adds	r3, r7, #6
 801c092:	881a      	ldrh	r2, [r3, #0]
 801c094:	68b9      	ldr	r1, [r7, #8]
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	0018      	movs	r0, r3
 801c09a:	f001 f8c7 	bl	801d22c <UART_Start_Receive_IT>
 801c09e:	0003      	movs	r3, r0
 801c0a0:	e000      	b.n	801c0a4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c0a2:	2302      	movs	r3, #2
  }
}
 801c0a4:	0018      	movs	r0, r3
 801c0a6:	46bd      	mov	sp, r7
 801c0a8:	b008      	add	sp, #32
 801c0aa:	bd80      	pop	{r7, pc}
 801c0ac:	40004800 	.word	0x40004800

0801c0b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b088      	sub	sp, #32
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	60f8      	str	r0, [r7, #12]
 801c0b8:	60b9      	str	r1, [r7, #8]
 801c0ba:	1dbb      	adds	r3, r7, #6
 801c0bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c0c2:	2b20      	cmp	r3, #32
 801c0c4:	d000      	beq.n	801c0c8 <HAL_UART_Transmit_DMA+0x18>
 801c0c6:	e077      	b.n	801c1b8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801c0c8:	68bb      	ldr	r3, [r7, #8]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d003      	beq.n	801c0d6 <HAL_UART_Transmit_DMA+0x26>
 801c0ce:	1dbb      	adds	r3, r7, #6
 801c0d0:	881b      	ldrh	r3, [r3, #0]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d101      	bne.n	801c0da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	e06f      	b.n	801c1ba <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	689a      	ldr	r2, [r3, #8]
 801c0de:	2380      	movs	r3, #128	@ 0x80
 801c0e0:	015b      	lsls	r3, r3, #5
 801c0e2:	429a      	cmp	r2, r3
 801c0e4:	d109      	bne.n	801c0fa <HAL_UART_Transmit_DMA+0x4a>
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	691b      	ldr	r3, [r3, #16]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d105      	bne.n	801c0fa <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	2201      	movs	r2, #1
 801c0f2:	4013      	ands	r3, r2
 801c0f4:	d001      	beq.n	801c0fa <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c0f6:	2301      	movs	r3, #1
 801c0f8:	e05f      	b.n	801c1ba <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	68ba      	ldr	r2, [r7, #8]
 801c0fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	1dba      	adds	r2, r7, #6
 801c104:	2150      	movs	r1, #80	@ 0x50
 801c106:	8812      	ldrh	r2, [r2, #0]
 801c108:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	1dba      	adds	r2, r7, #6
 801c10e:	2152      	movs	r1, #82	@ 0x52
 801c110:	8812      	ldrh	r2, [r2, #0]
 801c112:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	2284      	movs	r2, #132	@ 0x84
 801c118:	2100      	movs	r1, #0
 801c11a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	2221      	movs	r2, #33	@ 0x21
 801c120:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c126:	2b00      	cmp	r3, #0
 801c128:	d027      	beq.n	801c17a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c12e:	4a25      	ldr	r2, [pc, #148]	@ (801c1c4 <HAL_UART_Transmit_DMA+0x114>)
 801c130:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c136:	4a24      	ldr	r2, [pc, #144]	@ (801c1c8 <HAL_UART_Transmit_DMA+0x118>)
 801c138:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c13e:	4a23      	ldr	r2, [pc, #140]	@ (801c1cc <HAL_UART_Transmit_DMA+0x11c>)
 801c140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c146:	2200      	movs	r2, #0
 801c148:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c152:	0019      	movs	r1, r3
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	3328      	adds	r3, #40	@ 0x28
 801c15a:	001a      	movs	r2, r3
 801c15c:	1dbb      	adds	r3, r7, #6
 801c15e:	881b      	ldrh	r3, [r3, #0]
 801c160:	f7f7 ff36 	bl	8013fd0 <HAL_DMA_Start_IT>
 801c164:	1e03      	subs	r3, r0, #0
 801c166:	d008      	beq.n	801c17a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	2284      	movs	r2, #132	@ 0x84
 801c16c:	2110      	movs	r1, #16
 801c16e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	2220      	movs	r2, #32
 801c174:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801c176:	2301      	movs	r3, #1
 801c178:	e01f      	b.n	801c1ba <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	2240      	movs	r2, #64	@ 0x40
 801c180:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c182:	f3ef 8310 	mrs	r3, PRIMASK
 801c186:	613b      	str	r3, [r7, #16]
  return(result);
 801c188:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c18a:	61fb      	str	r3, [r7, #28]
 801c18c:	2301      	movs	r3, #1
 801c18e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c190:	697b      	ldr	r3, [r7, #20]
 801c192:	f383 8810 	msr	PRIMASK, r3
}
 801c196:	46c0      	nop			@ (mov r8, r8)
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	689a      	ldr	r2, [r3, #8]
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	2180      	movs	r1, #128	@ 0x80
 801c1a4:	430a      	orrs	r2, r1
 801c1a6:	609a      	str	r2, [r3, #8]
 801c1a8:	69fb      	ldr	r3, [r7, #28]
 801c1aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1ac:	69bb      	ldr	r3, [r7, #24]
 801c1ae:	f383 8810 	msr	PRIMASK, r3
}
 801c1b2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	e000      	b.n	801c1ba <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801c1b8:	2302      	movs	r3, #2
  }
}
 801c1ba:	0018      	movs	r0, r3
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	b008      	add	sp, #32
 801c1c0:	bd80      	pop	{r7, pc}
 801c1c2:	46c0      	nop			@ (mov r8, r8)
 801c1c4:	0801d611 	.word	0x0801d611
 801c1c8:	0801d6ad 	.word	0x0801d6ad
 801c1cc:	0801d84d 	.word	0x0801d84d

0801c1d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b088      	sub	sp, #32
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	60f8      	str	r0, [r7, #12]
 801c1d8:	60b9      	str	r1, [r7, #8]
 801c1da:	1dbb      	adds	r3, r7, #6
 801c1dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	2280      	movs	r2, #128	@ 0x80
 801c1e2:	589b      	ldr	r3, [r3, r2]
 801c1e4:	2b20      	cmp	r3, #32
 801c1e6:	d14a      	bne.n	801c27e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d003      	beq.n	801c1f6 <HAL_UART_Receive_DMA+0x26>
 801c1ee:	1dbb      	adds	r3, r7, #6
 801c1f0:	881b      	ldrh	r3, [r3, #0]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d101      	bne.n	801c1fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801c1f6:	2301      	movs	r3, #1
 801c1f8:	e042      	b.n	801c280 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	689a      	ldr	r2, [r3, #8]
 801c1fe:	2380      	movs	r3, #128	@ 0x80
 801c200:	015b      	lsls	r3, r3, #5
 801c202:	429a      	cmp	r2, r3
 801c204:	d109      	bne.n	801c21a <HAL_UART_Receive_DMA+0x4a>
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	691b      	ldr	r3, [r3, #16]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d105      	bne.n	801c21a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	2201      	movs	r2, #1
 801c212:	4013      	ands	r3, r2
 801c214:	d001      	beq.n	801c21a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c216:	2301      	movs	r3, #1
 801c218:	e032      	b.n	801c280 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2200      	movs	r2, #0
 801c21e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	4a18      	ldr	r2, [pc, #96]	@ (801c288 <HAL_UART_Receive_DMA+0xb8>)
 801c226:	4293      	cmp	r3, r2
 801c228:	d020      	beq.n	801c26c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	685a      	ldr	r2, [r3, #4]
 801c230:	2380      	movs	r3, #128	@ 0x80
 801c232:	041b      	lsls	r3, r3, #16
 801c234:	4013      	ands	r3, r2
 801c236:	d019      	beq.n	801c26c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c238:	f3ef 8310 	mrs	r3, PRIMASK
 801c23c:	613b      	str	r3, [r7, #16]
  return(result);
 801c23e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c240:	61fb      	str	r3, [r7, #28]
 801c242:	2301      	movs	r3, #1
 801c244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c246:	697b      	ldr	r3, [r7, #20]
 801c248:	f383 8810 	msr	PRIMASK, r3
}
 801c24c:	46c0      	nop			@ (mov r8, r8)
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	681a      	ldr	r2, [r3, #0]
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	2180      	movs	r1, #128	@ 0x80
 801c25a:	04c9      	lsls	r1, r1, #19
 801c25c:	430a      	orrs	r2, r1
 801c25e:	601a      	str	r2, [r3, #0]
 801c260:	69fb      	ldr	r3, [r7, #28]
 801c262:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c264:	69bb      	ldr	r3, [r7, #24]
 801c266:	f383 8810 	msr	PRIMASK, r3
}
 801c26a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801c26c:	1dbb      	adds	r3, r7, #6
 801c26e:	881a      	ldrh	r2, [r3, #0]
 801c270:	68b9      	ldr	r1, [r7, #8]
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	0018      	movs	r0, r3
 801c276:	f001 f8a3 	bl	801d3c0 <UART_Start_Receive_DMA>
 801c27a:	0003      	movs	r3, r0
 801c27c:	e000      	b.n	801c280 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c27e:	2302      	movs	r3, #2
  }
}
 801c280:	0018      	movs	r0, r3
 801c282:	46bd      	mov	sp, r7
 801c284:	b008      	add	sp, #32
 801c286:	bd80      	pop	{r7, pc}
 801c288:	40004800 	.word	0x40004800

0801c28c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c28c:	b590      	push	{r4, r7, lr}
 801c28e:	b0ab      	sub	sp, #172	@ 0xac
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	69db      	ldr	r3, [r3, #28]
 801c29a:	22a4      	movs	r2, #164	@ 0xa4
 801c29c:	18b9      	adds	r1, r7, r2
 801c29e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	20a0      	movs	r0, #160	@ 0xa0
 801c2a8:	1839      	adds	r1, r7, r0
 801c2aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	689b      	ldr	r3, [r3, #8]
 801c2b2:	219c      	movs	r1, #156	@ 0x9c
 801c2b4:	1879      	adds	r1, r7, r1
 801c2b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c2b8:	0011      	movs	r1, r2
 801c2ba:	18bb      	adds	r3, r7, r2
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	4a9c      	ldr	r2, [pc, #624]	@ (801c530 <HAL_UART_IRQHandler+0x2a4>)
 801c2c0:	4013      	ands	r3, r2
 801c2c2:	2298      	movs	r2, #152	@ 0x98
 801c2c4:	18bc      	adds	r4, r7, r2
 801c2c6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801c2c8:	18bb      	adds	r3, r7, r2
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d114      	bne.n	801c2fa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801c2d0:	187b      	adds	r3, r7, r1
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	2220      	movs	r2, #32
 801c2d6:	4013      	ands	r3, r2
 801c2d8:	d00f      	beq.n	801c2fa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801c2da:	183b      	adds	r3, r7, r0
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	2220      	movs	r2, #32
 801c2e0:	4013      	ands	r3, r2
 801c2e2:	d00a      	beq.n	801c2fa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d100      	bne.n	801c2ee <HAL_UART_IRQHandler+0x62>
 801c2ec:	e2aa      	b.n	801c844 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c2f2:	687a      	ldr	r2, [r7, #4]
 801c2f4:	0010      	movs	r0, r2
 801c2f6:	4798      	blx	r3
      }
      return;
 801c2f8:	e2a4      	b.n	801c844 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c2fa:	2398      	movs	r3, #152	@ 0x98
 801c2fc:	18fb      	adds	r3, r7, r3
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d100      	bne.n	801c306 <HAL_UART_IRQHandler+0x7a>
 801c304:	e11a      	b.n	801c53c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801c306:	239c      	movs	r3, #156	@ 0x9c
 801c308:	18fb      	adds	r3, r7, r3
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	2201      	movs	r2, #1
 801c30e:	4013      	ands	r3, r2
 801c310:	d106      	bne.n	801c320 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801c312:	23a0      	movs	r3, #160	@ 0xa0
 801c314:	18fb      	adds	r3, r7, r3
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	4a86      	ldr	r2, [pc, #536]	@ (801c534 <HAL_UART_IRQHandler+0x2a8>)
 801c31a:	4013      	ands	r3, r2
 801c31c:	d100      	bne.n	801c320 <HAL_UART_IRQHandler+0x94>
 801c31e:	e10d      	b.n	801c53c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801c320:	23a4      	movs	r3, #164	@ 0xa4
 801c322:	18fb      	adds	r3, r7, r3
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	2201      	movs	r2, #1
 801c328:	4013      	ands	r3, r2
 801c32a:	d012      	beq.n	801c352 <HAL_UART_IRQHandler+0xc6>
 801c32c:	23a0      	movs	r3, #160	@ 0xa0
 801c32e:	18fb      	adds	r3, r7, r3
 801c330:	681a      	ldr	r2, [r3, #0]
 801c332:	2380      	movs	r3, #128	@ 0x80
 801c334:	005b      	lsls	r3, r3, #1
 801c336:	4013      	ands	r3, r2
 801c338:	d00b      	beq.n	801c352 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	2201      	movs	r2, #1
 801c340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	2284      	movs	r2, #132	@ 0x84
 801c346:	589b      	ldr	r3, [r3, r2]
 801c348:	2201      	movs	r2, #1
 801c34a:	431a      	orrs	r2, r3
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	2184      	movs	r1, #132	@ 0x84
 801c350:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c352:	23a4      	movs	r3, #164	@ 0xa4
 801c354:	18fb      	adds	r3, r7, r3
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2202      	movs	r2, #2
 801c35a:	4013      	ands	r3, r2
 801c35c:	d011      	beq.n	801c382 <HAL_UART_IRQHandler+0xf6>
 801c35e:	239c      	movs	r3, #156	@ 0x9c
 801c360:	18fb      	adds	r3, r7, r3
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	2201      	movs	r2, #1
 801c366:	4013      	ands	r3, r2
 801c368:	d00b      	beq.n	801c382 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	2202      	movs	r2, #2
 801c370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	2284      	movs	r2, #132	@ 0x84
 801c376:	589b      	ldr	r3, [r3, r2]
 801c378:	2204      	movs	r2, #4
 801c37a:	431a      	orrs	r2, r3
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	2184      	movs	r1, #132	@ 0x84
 801c380:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c382:	23a4      	movs	r3, #164	@ 0xa4
 801c384:	18fb      	adds	r3, r7, r3
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	2204      	movs	r2, #4
 801c38a:	4013      	ands	r3, r2
 801c38c:	d011      	beq.n	801c3b2 <HAL_UART_IRQHandler+0x126>
 801c38e:	239c      	movs	r3, #156	@ 0x9c
 801c390:	18fb      	adds	r3, r7, r3
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	2201      	movs	r2, #1
 801c396:	4013      	ands	r3, r2
 801c398:	d00b      	beq.n	801c3b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	2204      	movs	r2, #4
 801c3a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	2284      	movs	r2, #132	@ 0x84
 801c3a6:	589b      	ldr	r3, [r3, r2]
 801c3a8:	2202      	movs	r2, #2
 801c3aa:	431a      	orrs	r2, r3
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	2184      	movs	r1, #132	@ 0x84
 801c3b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801c3b2:	23a4      	movs	r3, #164	@ 0xa4
 801c3b4:	18fb      	adds	r3, r7, r3
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	2208      	movs	r2, #8
 801c3ba:	4013      	ands	r3, r2
 801c3bc:	d017      	beq.n	801c3ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801c3be:	23a0      	movs	r3, #160	@ 0xa0
 801c3c0:	18fb      	adds	r3, r7, r3
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	2220      	movs	r2, #32
 801c3c6:	4013      	ands	r3, r2
 801c3c8:	d105      	bne.n	801c3d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801c3ca:	239c      	movs	r3, #156	@ 0x9c
 801c3cc:	18fb      	adds	r3, r7, r3
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	2201      	movs	r2, #1
 801c3d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801c3d4:	d00b      	beq.n	801c3ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	2208      	movs	r2, #8
 801c3dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	2284      	movs	r2, #132	@ 0x84
 801c3e2:	589b      	ldr	r3, [r3, r2]
 801c3e4:	2208      	movs	r2, #8
 801c3e6:	431a      	orrs	r2, r3
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	2184      	movs	r1, #132	@ 0x84
 801c3ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801c3ee:	23a4      	movs	r3, #164	@ 0xa4
 801c3f0:	18fb      	adds	r3, r7, r3
 801c3f2:	681a      	ldr	r2, [r3, #0]
 801c3f4:	2380      	movs	r3, #128	@ 0x80
 801c3f6:	011b      	lsls	r3, r3, #4
 801c3f8:	4013      	ands	r3, r2
 801c3fa:	d013      	beq.n	801c424 <HAL_UART_IRQHandler+0x198>
 801c3fc:	23a0      	movs	r3, #160	@ 0xa0
 801c3fe:	18fb      	adds	r3, r7, r3
 801c400:	681a      	ldr	r2, [r3, #0]
 801c402:	2380      	movs	r3, #128	@ 0x80
 801c404:	04db      	lsls	r3, r3, #19
 801c406:	4013      	ands	r3, r2
 801c408:	d00c      	beq.n	801c424 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	2280      	movs	r2, #128	@ 0x80
 801c410:	0112      	lsls	r2, r2, #4
 801c412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	2284      	movs	r2, #132	@ 0x84
 801c418:	589b      	ldr	r3, [r3, r2]
 801c41a:	2220      	movs	r2, #32
 801c41c:	431a      	orrs	r2, r3
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	2184      	movs	r1, #132	@ 0x84
 801c422:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	2284      	movs	r2, #132	@ 0x84
 801c428:	589b      	ldr	r3, [r3, r2]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d100      	bne.n	801c430 <HAL_UART_IRQHandler+0x1a4>
 801c42e:	e20b      	b.n	801c848 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801c430:	23a4      	movs	r3, #164	@ 0xa4
 801c432:	18fb      	adds	r3, r7, r3
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	2220      	movs	r2, #32
 801c438:	4013      	ands	r3, r2
 801c43a:	d00e      	beq.n	801c45a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801c43c:	23a0      	movs	r3, #160	@ 0xa0
 801c43e:	18fb      	adds	r3, r7, r3
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	2220      	movs	r2, #32
 801c444:	4013      	ands	r3, r2
 801c446:	d008      	beq.n	801c45a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d004      	beq.n	801c45a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c454:	687a      	ldr	r2, [r7, #4]
 801c456:	0010      	movs	r0, r2
 801c458:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2284      	movs	r2, #132	@ 0x84
 801c45e:	589b      	ldr	r3, [r3, r2]
 801c460:	2194      	movs	r1, #148	@ 0x94
 801c462:	187a      	adds	r2, r7, r1
 801c464:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	689b      	ldr	r3, [r3, #8]
 801c46c:	2240      	movs	r2, #64	@ 0x40
 801c46e:	4013      	ands	r3, r2
 801c470:	2b40      	cmp	r3, #64	@ 0x40
 801c472:	d004      	beq.n	801c47e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c474:	187b      	adds	r3, r7, r1
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	2228      	movs	r2, #40	@ 0x28
 801c47a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c47c:	d04b      	beq.n	801c516 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	0018      	movs	r0, r3
 801c482:	f001 f861 	bl	801d548 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	689b      	ldr	r3, [r3, #8]
 801c48c:	2240      	movs	r2, #64	@ 0x40
 801c48e:	4013      	ands	r3, r2
 801c490:	2b40      	cmp	r3, #64	@ 0x40
 801c492:	d139      	bne.n	801c508 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c494:	f3ef 8310 	mrs	r3, PRIMASK
 801c498:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801c49a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c49c:	2090      	movs	r0, #144	@ 0x90
 801c49e:	183a      	adds	r2, r7, r0
 801c4a0:	6013      	str	r3, [r2, #0]
 801c4a2:	2301      	movs	r3, #1
 801c4a4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c4a8:	f383 8810 	msr	PRIMASK, r3
}
 801c4ac:	46c0      	nop			@ (mov r8, r8)
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	689a      	ldr	r2, [r3, #8]
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	2140      	movs	r1, #64	@ 0x40
 801c4ba:	438a      	bics	r2, r1
 801c4bc:	609a      	str	r2, [r3, #8]
 801c4be:	183b      	adds	r3, r7, r0
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c4c6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ca:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d012      	beq.n	801c4fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4d8:	4a17      	ldr	r2, [pc, #92]	@ (801c538 <HAL_UART_IRQHandler+0x2ac>)
 801c4da:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4e0:	0018      	movs	r0, r3
 801c4e2:	f7f7 fe1b 	bl	801411c <HAL_DMA_Abort_IT>
 801c4e6:	1e03      	subs	r3, r0, #0
 801c4e8:	d020      	beq.n	801c52c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4f4:	0018      	movs	r0, r3
 801c4f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c4f8:	e018      	b.n	801c52c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2298      	movs	r2, #152	@ 0x98
 801c4fe:	589b      	ldr	r3, [r3, r2]
 801c500:	687a      	ldr	r2, [r7, #4]
 801c502:	0010      	movs	r0, r2
 801c504:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c506:	e011      	b.n	801c52c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	2298      	movs	r2, #152	@ 0x98
 801c50c:	589b      	ldr	r3, [r3, r2]
 801c50e:	687a      	ldr	r2, [r7, #4]
 801c510:	0010      	movs	r0, r2
 801c512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c514:	e00a      	b.n	801c52c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	2298      	movs	r2, #152	@ 0x98
 801c51a:	589b      	ldr	r3, [r3, r2]
 801c51c:	687a      	ldr	r2, [r7, #4]
 801c51e:	0010      	movs	r0, r2
 801c520:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	2284      	movs	r2, #132	@ 0x84
 801c526:	2100      	movs	r1, #0
 801c528:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801c52a:	e18d      	b.n	801c848 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c52c:	46c0      	nop			@ (mov r8, r8)
    return;
 801c52e:	e18b      	b.n	801c848 <HAL_UART_IRQHandler+0x5bc>
 801c530:	0000080f 	.word	0x0000080f
 801c534:	04000120 	.word	0x04000120
 801c538:	0801d8d5 	.word	0x0801d8d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c540:	2b01      	cmp	r3, #1
 801c542:	d000      	beq.n	801c546 <HAL_UART_IRQHandler+0x2ba>
 801c544:	e13d      	b.n	801c7c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c546:	23a4      	movs	r3, #164	@ 0xa4
 801c548:	18fb      	adds	r3, r7, r3
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	2210      	movs	r2, #16
 801c54e:	4013      	ands	r3, r2
 801c550:	d100      	bne.n	801c554 <HAL_UART_IRQHandler+0x2c8>
 801c552:	e136      	b.n	801c7c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c554:	23a0      	movs	r3, #160	@ 0xa0
 801c556:	18fb      	adds	r3, r7, r3
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	2210      	movs	r2, #16
 801c55c:	4013      	ands	r3, r2
 801c55e:	d100      	bne.n	801c562 <HAL_UART_IRQHandler+0x2d6>
 801c560:	e12f      	b.n	801c7c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	2210      	movs	r2, #16
 801c568:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	689b      	ldr	r3, [r3, #8]
 801c570:	2240      	movs	r2, #64	@ 0x40
 801c572:	4013      	ands	r3, r2
 801c574:	2b40      	cmp	r3, #64	@ 0x40
 801c576:	d000      	beq.n	801c57a <HAL_UART_IRQHandler+0x2ee>
 801c578:	e0a2      	b.n	801c6c0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	685a      	ldr	r2, [r3, #4]
 801c582:	217e      	movs	r1, #126	@ 0x7e
 801c584:	187b      	adds	r3, r7, r1
 801c586:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801c588:	187b      	adds	r3, r7, r1
 801c58a:	881b      	ldrh	r3, [r3, #0]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d100      	bne.n	801c592 <HAL_UART_IRQHandler+0x306>
 801c590:	e15c      	b.n	801c84c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	2258      	movs	r2, #88	@ 0x58
 801c596:	5a9b      	ldrh	r3, [r3, r2]
 801c598:	187a      	adds	r2, r7, r1
 801c59a:	8812      	ldrh	r2, [r2, #0]
 801c59c:	429a      	cmp	r2, r3
 801c59e:	d300      	bcc.n	801c5a2 <HAL_UART_IRQHandler+0x316>
 801c5a0:	e154      	b.n	801c84c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	187a      	adds	r2, r7, r1
 801c5a6:	215a      	movs	r1, #90	@ 0x5a
 801c5a8:	8812      	ldrh	r2, [r2, #0]
 801c5aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	2220      	movs	r2, #32
 801c5b6:	4013      	ands	r3, r2
 801c5b8:	d16f      	bne.n	801c69a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c5be:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c5c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 801c5c4:	2301      	movs	r3, #1
 801c5c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5ca:	f383 8810 	msr	PRIMASK, r3
}
 801c5ce:	46c0      	nop			@ (mov r8, r8)
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	681a      	ldr	r2, [r3, #0]
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	49a0      	ldr	r1, [pc, #640]	@ (801c85c <HAL_UART_IRQHandler+0x5d0>)
 801c5dc:	400a      	ands	r2, r1
 801c5de:	601a      	str	r2, [r3, #0]
 801c5e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5e6:	f383 8810 	msr	PRIMASK, r3
}
 801c5ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5ec:	f3ef 8310 	mrs	r3, PRIMASK
 801c5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801c5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5f4:	677b      	str	r3, [r7, #116]	@ 0x74
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c5fc:	f383 8810 	msr	PRIMASK, r3
}
 801c600:	46c0      	nop			@ (mov r8, r8)
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	689a      	ldr	r2, [r3, #8]
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	2101      	movs	r1, #1
 801c60e:	438a      	bics	r2, r1
 801c610:	609a      	str	r2, [r3, #8]
 801c612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c614:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c618:	f383 8810 	msr	PRIMASK, r3
}
 801c61c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c61e:	f3ef 8310 	mrs	r3, PRIMASK
 801c622:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801c624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c626:	673b      	str	r3, [r7, #112]	@ 0x70
 801c628:	2301      	movs	r3, #1
 801c62a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c62e:	f383 8810 	msr	PRIMASK, r3
}
 801c632:	46c0      	nop			@ (mov r8, r8)
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	689a      	ldr	r2, [r3, #8]
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	2140      	movs	r1, #64	@ 0x40
 801c640:	438a      	bics	r2, r1
 801c642:	609a      	str	r2, [r3, #8]
 801c644:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c646:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c64a:	f383 8810 	msr	PRIMASK, r3
}
 801c64e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	2280      	movs	r2, #128	@ 0x80
 801c654:	2120      	movs	r1, #32
 801c656:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	2200      	movs	r2, #0
 801c65c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c65e:	f3ef 8310 	mrs	r3, PRIMASK
 801c662:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801c664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c668:	2301      	movs	r3, #1
 801c66a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c66c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c66e:	f383 8810 	msr	PRIMASK, r3
}
 801c672:	46c0      	nop			@ (mov r8, r8)
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	681a      	ldr	r2, [r3, #0]
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	2110      	movs	r1, #16
 801c680:	438a      	bics	r2, r1
 801c682:	601a      	str	r2, [r3, #0]
 801c684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c68a:	f383 8810 	msr	PRIMASK, r3
}
 801c68e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c694:	0018      	movs	r0, r3
 801c696:	f7f7 fd01 	bl	801409c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2202      	movs	r2, #2
 801c69e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	22ac      	movs	r2, #172	@ 0xac
 801c6a4:	589b      	ldr	r3, [r3, r2]
 801c6a6:	687a      	ldr	r2, [r7, #4]
 801c6a8:	2158      	movs	r1, #88	@ 0x58
 801c6aa:	5a51      	ldrh	r1, [r2, r1]
 801c6ac:	687a      	ldr	r2, [r7, #4]
 801c6ae:	205a      	movs	r0, #90	@ 0x5a
 801c6b0:	5a12      	ldrh	r2, [r2, r0]
 801c6b2:	b292      	uxth	r2, r2
 801c6b4:	1a8a      	subs	r2, r1, r2
 801c6b6:	b291      	uxth	r1, r2
 801c6b8:	687a      	ldr	r2, [r7, #4]
 801c6ba:	0010      	movs	r0, r2
 801c6bc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c6be:	e0c5      	b.n	801c84c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	2258      	movs	r2, #88	@ 0x58
 801c6c4:	5a99      	ldrh	r1, [r3, r2]
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	225a      	movs	r2, #90	@ 0x5a
 801c6ca:	5a9b      	ldrh	r3, [r3, r2]
 801c6cc:	b29a      	uxth	r2, r3
 801c6ce:	208e      	movs	r0, #142	@ 0x8e
 801c6d0:	183b      	adds	r3, r7, r0
 801c6d2:	1a8a      	subs	r2, r1, r2
 801c6d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	225a      	movs	r2, #90	@ 0x5a
 801c6da:	5a9b      	ldrh	r3, [r3, r2]
 801c6dc:	b29b      	uxth	r3, r3
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d100      	bne.n	801c6e4 <HAL_UART_IRQHandler+0x458>
 801c6e2:	e0b5      	b.n	801c850 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801c6e4:	183b      	adds	r3, r7, r0
 801c6e6:	881b      	ldrh	r3, [r3, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d100      	bne.n	801c6ee <HAL_UART_IRQHandler+0x462>
 801c6ec:	e0b0      	b.n	801c850 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6ee:	f3ef 8310 	mrs	r3, PRIMASK
 801c6f2:	60fb      	str	r3, [r7, #12]
  return(result);
 801c6f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c6f6:	2488      	movs	r4, #136	@ 0x88
 801c6f8:	193a      	adds	r2, r7, r4
 801c6fa:	6013      	str	r3, [r2, #0]
 801c6fc:	2301      	movs	r3, #1
 801c6fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c700:	693b      	ldr	r3, [r7, #16]
 801c702:	f383 8810 	msr	PRIMASK, r3
}
 801c706:	46c0      	nop			@ (mov r8, r8)
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	4953      	ldr	r1, [pc, #332]	@ (801c860 <HAL_UART_IRQHandler+0x5d4>)
 801c714:	400a      	ands	r2, r1
 801c716:	601a      	str	r2, [r3, #0]
 801c718:	193b      	adds	r3, r7, r4
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	f383 8810 	msr	PRIMASK, r3
}
 801c724:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c726:	f3ef 8310 	mrs	r3, PRIMASK
 801c72a:	61bb      	str	r3, [r7, #24]
  return(result);
 801c72c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c72e:	2484      	movs	r4, #132	@ 0x84
 801c730:	193a      	adds	r2, r7, r4
 801c732:	6013      	str	r3, [r2, #0]
 801c734:	2301      	movs	r3, #1
 801c736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c738:	69fb      	ldr	r3, [r7, #28]
 801c73a:	f383 8810 	msr	PRIMASK, r3
}
 801c73e:	46c0      	nop			@ (mov r8, r8)
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	689a      	ldr	r2, [r3, #8]
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	2101      	movs	r1, #1
 801c74c:	438a      	bics	r2, r1
 801c74e:	609a      	str	r2, [r3, #8]
 801c750:	193b      	adds	r3, r7, r4
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c756:	6a3b      	ldr	r3, [r7, #32]
 801c758:	f383 8810 	msr	PRIMASK, r3
}
 801c75c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	2280      	movs	r2, #128	@ 0x80
 801c762:	2120      	movs	r1, #32
 801c764:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	2200      	movs	r2, #0
 801c76a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	2200      	movs	r2, #0
 801c770:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c772:	f3ef 8310 	mrs	r3, PRIMASK
 801c776:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c77a:	2480      	movs	r4, #128	@ 0x80
 801c77c:	193a      	adds	r2, r7, r4
 801c77e:	6013      	str	r3, [r2, #0]
 801c780:	2301      	movs	r3, #1
 801c782:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c786:	f383 8810 	msr	PRIMASK, r3
}
 801c78a:	46c0      	nop			@ (mov r8, r8)
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	681a      	ldr	r2, [r3, #0]
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	2110      	movs	r1, #16
 801c798:	438a      	bics	r2, r1
 801c79a:	601a      	str	r2, [r3, #0]
 801c79c:	193b      	adds	r3, r7, r4
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7a4:	f383 8810 	msr	PRIMASK, r3
}
 801c7a8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	2202      	movs	r2, #2
 801c7ae:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	22ac      	movs	r2, #172	@ 0xac
 801c7b4:	589b      	ldr	r3, [r3, r2]
 801c7b6:	183a      	adds	r2, r7, r0
 801c7b8:	8811      	ldrh	r1, [r2, #0]
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	0010      	movs	r0, r2
 801c7be:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c7c0:	e046      	b.n	801c850 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801c7c2:	23a4      	movs	r3, #164	@ 0xa4
 801c7c4:	18fb      	adds	r3, r7, r3
 801c7c6:	681a      	ldr	r2, [r3, #0]
 801c7c8:	2380      	movs	r3, #128	@ 0x80
 801c7ca:	035b      	lsls	r3, r3, #13
 801c7cc:	4013      	ands	r3, r2
 801c7ce:	d012      	beq.n	801c7f6 <HAL_UART_IRQHandler+0x56a>
 801c7d0:	239c      	movs	r3, #156	@ 0x9c
 801c7d2:	18fb      	adds	r3, r7, r3
 801c7d4:	681a      	ldr	r2, [r3, #0]
 801c7d6:	2380      	movs	r3, #128	@ 0x80
 801c7d8:	03db      	lsls	r3, r3, #15
 801c7da:	4013      	ands	r3, r2
 801c7dc:	d00b      	beq.n	801c7f6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	2280      	movs	r2, #128	@ 0x80
 801c7e4:	0352      	lsls	r2, r2, #13
 801c7e6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	22a8      	movs	r2, #168	@ 0xa8
 801c7ec:	589b      	ldr	r3, [r3, r2]
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	0010      	movs	r0, r2
 801c7f2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c7f4:	e02f      	b.n	801c856 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801c7f6:	23a4      	movs	r3, #164	@ 0xa4
 801c7f8:	18fb      	adds	r3, r7, r3
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	2280      	movs	r2, #128	@ 0x80
 801c7fe:	4013      	ands	r3, r2
 801c800:	d00f      	beq.n	801c822 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801c802:	23a0      	movs	r3, #160	@ 0xa0
 801c804:	18fb      	adds	r3, r7, r3
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	2280      	movs	r2, #128	@ 0x80
 801c80a:	4013      	ands	r3, r2
 801c80c:	d009      	beq.n	801c822 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c812:	2b00      	cmp	r3, #0
 801c814:	d01e      	beq.n	801c854 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c81a:	687a      	ldr	r2, [r7, #4]
 801c81c:	0010      	movs	r0, r2
 801c81e:	4798      	blx	r3
    }
    return;
 801c820:	e018      	b.n	801c854 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801c822:	23a4      	movs	r3, #164	@ 0xa4
 801c824:	18fb      	adds	r3, r7, r3
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	2240      	movs	r2, #64	@ 0x40
 801c82a:	4013      	ands	r3, r2
 801c82c:	d013      	beq.n	801c856 <HAL_UART_IRQHandler+0x5ca>
 801c82e:	23a0      	movs	r3, #160	@ 0xa0
 801c830:	18fb      	adds	r3, r7, r3
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	2240      	movs	r2, #64	@ 0x40
 801c836:	4013      	ands	r3, r2
 801c838:	d00d      	beq.n	801c856 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	0018      	movs	r0, r3
 801c83e:	f001 f862 	bl	801d906 <UART_EndTransmit_IT>
    return;
 801c842:	e008      	b.n	801c856 <HAL_UART_IRQHandler+0x5ca>
      return;
 801c844:	46c0      	nop			@ (mov r8, r8)
 801c846:	e006      	b.n	801c856 <HAL_UART_IRQHandler+0x5ca>
    return;
 801c848:	46c0      	nop			@ (mov r8, r8)
 801c84a:	e004      	b.n	801c856 <HAL_UART_IRQHandler+0x5ca>
      return;
 801c84c:	46c0      	nop			@ (mov r8, r8)
 801c84e:	e002      	b.n	801c856 <HAL_UART_IRQHandler+0x5ca>
      return;
 801c850:	46c0      	nop			@ (mov r8, r8)
 801c852:	e000      	b.n	801c856 <HAL_UART_IRQHandler+0x5ca>
    return;
 801c854:	46c0      	nop			@ (mov r8, r8)
  }

}
 801c856:	46bd      	mov	sp, r7
 801c858:	b02b      	add	sp, #172	@ 0xac
 801c85a:	bd90      	pop	{r4, r7, pc}
 801c85c:	fffffeff 	.word	0xfffffeff
 801c860:	fffffedf 	.word	0xfffffedf

0801c864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b082      	sub	sp, #8
 801c868:	af00      	add	r7, sp, #0
 801c86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801c86c:	46c0      	nop			@ (mov r8, r8)
 801c86e:	46bd      	mov	sp, r7
 801c870:	b002      	add	sp, #8
 801c872:	bd80      	pop	{r7, pc}

0801c874 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b082      	sub	sp, #8
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801c87c:	46c0      	nop			@ (mov r8, r8)
 801c87e:	46bd      	mov	sp, r7
 801c880:	b002      	add	sp, #8
 801c882:	bd80      	pop	{r7, pc}

0801c884 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c884:	b580      	push	{r7, lr}
 801c886:	b082      	sub	sp, #8
 801c888:	af00      	add	r7, sp, #0
 801c88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801c88c:	46c0      	nop			@ (mov r8, r8)
 801c88e:	46bd      	mov	sp, r7
 801c890:	b002      	add	sp, #8
 801c892:	bd80      	pop	{r7, pc}

0801c894 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b082      	sub	sp, #8
 801c898:	af00      	add	r7, sp, #0
 801c89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801c89c:	46c0      	nop			@ (mov r8, r8)
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	b002      	add	sp, #8
 801c8a2:	bd80      	pop	{r7, pc}

0801c8a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b082      	sub	sp, #8
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801c8ac:	46c0      	nop			@ (mov r8, r8)
 801c8ae:	46bd      	mov	sp, r7
 801c8b0:	b002      	add	sp, #8
 801c8b2:	bd80      	pop	{r7, pc}

0801c8b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b082      	sub	sp, #8
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801c8bc:	46c0      	nop			@ (mov r8, r8)
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	b002      	add	sp, #8
 801c8c2:	bd80      	pop	{r7, pc}

0801c8c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b082      	sub	sp, #8
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
 801c8cc:	000a      	movs	r2, r1
 801c8ce:	1cbb      	adds	r3, r7, #2
 801c8d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801c8d2:	46c0      	nop			@ (mov r8, r8)
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	b002      	add	sp, #8
 801c8d8:	bd80      	pop	{r7, pc}
	...

0801c8dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801c8dc:	b580      	push	{r7, lr}
 801c8de:	b082      	sub	sp, #8
 801c8e0:	af00      	add	r7, sp, #0
 801c8e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	2188      	movs	r1, #136	@ 0x88
 801c8e8:	4a14      	ldr	r2, [pc, #80]	@ (801c93c <UART_InitCallbacksToDefault+0x60>)
 801c8ea:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	218c      	movs	r1, #140	@ 0x8c
 801c8f0:	4a13      	ldr	r2, [pc, #76]	@ (801c940 <UART_InitCallbacksToDefault+0x64>)
 801c8f2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	2190      	movs	r1, #144	@ 0x90
 801c8f8:	4a12      	ldr	r2, [pc, #72]	@ (801c944 <UART_InitCallbacksToDefault+0x68>)
 801c8fa:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	2194      	movs	r1, #148	@ 0x94
 801c900:	4a11      	ldr	r2, [pc, #68]	@ (801c948 <UART_InitCallbacksToDefault+0x6c>)
 801c902:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	2198      	movs	r1, #152	@ 0x98
 801c908:	4a10      	ldr	r2, [pc, #64]	@ (801c94c <UART_InitCallbacksToDefault+0x70>)
 801c90a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	219c      	movs	r1, #156	@ 0x9c
 801c910:	4a0f      	ldr	r2, [pc, #60]	@ (801c950 <UART_InitCallbacksToDefault+0x74>)
 801c912:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	21a0      	movs	r1, #160	@ 0xa0
 801c918:	4a0e      	ldr	r2, [pc, #56]	@ (801c954 <UART_InitCallbacksToDefault+0x78>)
 801c91a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	21a4      	movs	r1, #164	@ 0xa4
 801c920:	4a0d      	ldr	r2, [pc, #52]	@ (801c958 <UART_InitCallbacksToDefault+0x7c>)
 801c922:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	21a8      	movs	r1, #168	@ 0xa8
 801c928:	4a0c      	ldr	r2, [pc, #48]	@ (801c95c <UART_InitCallbacksToDefault+0x80>)
 801c92a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	21ac      	movs	r1, #172	@ 0xac
 801c930:	4a0b      	ldr	r2, [pc, #44]	@ (801c960 <UART_InitCallbacksToDefault+0x84>)
 801c932:	505a      	str	r2, [r3, r1]

}
 801c934:	46c0      	nop			@ (mov r8, r8)
 801c936:	46bd      	mov	sp, r7
 801c938:	b002      	add	sp, #8
 801c93a:	bd80      	pop	{r7, pc}
 801c93c:	0801c875 	.word	0x0801c875
 801c940:	0801c865 	.word	0x0801c865
 801c944:	0801c885 	.word	0x0801c885
 801c948:	0800c2c5 	.word	0x0800c2c5
 801c94c:	08004cbd 	.word	0x08004cbd
 801c950:	0801c895 	.word	0x0801c895
 801c954:	0801c8a5 	.word	0x0801c8a5
 801c958:	0801c8b5 	.word	0x0801c8b5
 801c95c:	0801dcf9 	.word	0x0801dcf9
 801c960:	0801c8c5 	.word	0x0801c8c5

0801c964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c964:	b5b0      	push	{r4, r5, r7, lr}
 801c966:	b08e      	sub	sp, #56	@ 0x38
 801c968:	af00      	add	r7, sp, #0
 801c96a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801c96c:	231a      	movs	r3, #26
 801c96e:	2218      	movs	r2, #24
 801c970:	189b      	adds	r3, r3, r2
 801c972:	19db      	adds	r3, r3, r7
 801c974:	2200      	movs	r2, #0
 801c976:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801c978:	69fb      	ldr	r3, [r7, #28]
 801c97a:	689a      	ldr	r2, [r3, #8]
 801c97c:	69fb      	ldr	r3, [r7, #28]
 801c97e:	691b      	ldr	r3, [r3, #16]
 801c980:	431a      	orrs	r2, r3
 801c982:	69fb      	ldr	r3, [r7, #28]
 801c984:	695b      	ldr	r3, [r3, #20]
 801c986:	431a      	orrs	r2, r3
 801c988:	69fb      	ldr	r3, [r7, #28]
 801c98a:	69db      	ldr	r3, [r3, #28]
 801c98c:	4313      	orrs	r3, r2
 801c98e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801c990:	69fb      	ldr	r3, [r7, #28]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	4ac3      	ldr	r2, [pc, #780]	@ (801cca4 <UART_SetConfig+0x340>)
 801c998:	4013      	ands	r3, r2
 801c99a:	0019      	movs	r1, r3
 801c99c:	69fb      	ldr	r3, [r7, #28]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c9a2:	430a      	orrs	r2, r1
 801c9a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c9a6:	69fb      	ldr	r3, [r7, #28]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	685b      	ldr	r3, [r3, #4]
 801c9ac:	4abe      	ldr	r2, [pc, #760]	@ (801cca8 <UART_SetConfig+0x344>)
 801c9ae:	4013      	ands	r3, r2
 801c9b0:	0019      	movs	r1, r3
 801c9b2:	69fb      	ldr	r3, [r7, #28]
 801c9b4:	68da      	ldr	r2, [r3, #12]
 801c9b6:	69fb      	ldr	r3, [r7, #28]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	430a      	orrs	r2, r1
 801c9bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801c9be:	69fb      	ldr	r3, [r7, #28]
 801c9c0:	699b      	ldr	r3, [r3, #24]
 801c9c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801c9c4:	69fb      	ldr	r3, [r7, #28]
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	4ab8      	ldr	r2, [pc, #736]	@ (801ccac <UART_SetConfig+0x348>)
 801c9ca:	4293      	cmp	r3, r2
 801c9cc:	d004      	beq.n	801c9d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801c9ce:	69fb      	ldr	r3, [r7, #28]
 801c9d0:	6a1b      	ldr	r3, [r3, #32]
 801c9d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c9d4:	4313      	orrs	r3, r2
 801c9d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801c9d8:	69fb      	ldr	r3, [r7, #28]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	689b      	ldr	r3, [r3, #8]
 801c9de:	4ab4      	ldr	r2, [pc, #720]	@ (801ccb0 <UART_SetConfig+0x34c>)
 801c9e0:	4013      	ands	r3, r2
 801c9e2:	0019      	movs	r1, r3
 801c9e4:	69fb      	ldr	r3, [r7, #28]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c9ea:	430a      	orrs	r2, r1
 801c9ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c9ee:	69fb      	ldr	r3, [r7, #28]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	4ab0      	ldr	r2, [pc, #704]	@ (801ccb4 <UART_SetConfig+0x350>)
 801c9f4:	4293      	cmp	r3, r2
 801c9f6:	d131      	bne.n	801ca5c <UART_SetConfig+0xf8>
 801c9f8:	4baf      	ldr	r3, [pc, #700]	@ (801ccb8 <UART_SetConfig+0x354>)
 801c9fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c9fc:	2203      	movs	r2, #3
 801c9fe:	4013      	ands	r3, r2
 801ca00:	2b03      	cmp	r3, #3
 801ca02:	d01d      	beq.n	801ca40 <UART_SetConfig+0xdc>
 801ca04:	d823      	bhi.n	801ca4e <UART_SetConfig+0xea>
 801ca06:	2b02      	cmp	r3, #2
 801ca08:	d00c      	beq.n	801ca24 <UART_SetConfig+0xc0>
 801ca0a:	d820      	bhi.n	801ca4e <UART_SetConfig+0xea>
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d002      	beq.n	801ca16 <UART_SetConfig+0xb2>
 801ca10:	2b01      	cmp	r3, #1
 801ca12:	d00e      	beq.n	801ca32 <UART_SetConfig+0xce>
 801ca14:	e01b      	b.n	801ca4e <UART_SetConfig+0xea>
 801ca16:	231b      	movs	r3, #27
 801ca18:	2218      	movs	r2, #24
 801ca1a:	189b      	adds	r3, r3, r2
 801ca1c:	19db      	adds	r3, r3, r7
 801ca1e:	2201      	movs	r2, #1
 801ca20:	701a      	strb	r2, [r3, #0]
 801ca22:	e0b4      	b.n	801cb8e <UART_SetConfig+0x22a>
 801ca24:	231b      	movs	r3, #27
 801ca26:	2218      	movs	r2, #24
 801ca28:	189b      	adds	r3, r3, r2
 801ca2a:	19db      	adds	r3, r3, r7
 801ca2c:	2202      	movs	r2, #2
 801ca2e:	701a      	strb	r2, [r3, #0]
 801ca30:	e0ad      	b.n	801cb8e <UART_SetConfig+0x22a>
 801ca32:	231b      	movs	r3, #27
 801ca34:	2218      	movs	r2, #24
 801ca36:	189b      	adds	r3, r3, r2
 801ca38:	19db      	adds	r3, r3, r7
 801ca3a:	2204      	movs	r2, #4
 801ca3c:	701a      	strb	r2, [r3, #0]
 801ca3e:	e0a6      	b.n	801cb8e <UART_SetConfig+0x22a>
 801ca40:	231b      	movs	r3, #27
 801ca42:	2218      	movs	r2, #24
 801ca44:	189b      	adds	r3, r3, r2
 801ca46:	19db      	adds	r3, r3, r7
 801ca48:	2208      	movs	r2, #8
 801ca4a:	701a      	strb	r2, [r3, #0]
 801ca4c:	e09f      	b.n	801cb8e <UART_SetConfig+0x22a>
 801ca4e:	231b      	movs	r3, #27
 801ca50:	2218      	movs	r2, #24
 801ca52:	189b      	adds	r3, r3, r2
 801ca54:	19db      	adds	r3, r3, r7
 801ca56:	2210      	movs	r2, #16
 801ca58:	701a      	strb	r2, [r3, #0]
 801ca5a:	e098      	b.n	801cb8e <UART_SetConfig+0x22a>
 801ca5c:	69fb      	ldr	r3, [r7, #28]
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	4a96      	ldr	r2, [pc, #600]	@ (801ccbc <UART_SetConfig+0x358>)
 801ca62:	4293      	cmp	r3, r2
 801ca64:	d131      	bne.n	801caca <UART_SetConfig+0x166>
 801ca66:	4b94      	ldr	r3, [pc, #592]	@ (801ccb8 <UART_SetConfig+0x354>)
 801ca68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ca6a:	220c      	movs	r2, #12
 801ca6c:	4013      	ands	r3, r2
 801ca6e:	2b0c      	cmp	r3, #12
 801ca70:	d01d      	beq.n	801caae <UART_SetConfig+0x14a>
 801ca72:	d823      	bhi.n	801cabc <UART_SetConfig+0x158>
 801ca74:	2b08      	cmp	r3, #8
 801ca76:	d00c      	beq.n	801ca92 <UART_SetConfig+0x12e>
 801ca78:	d820      	bhi.n	801cabc <UART_SetConfig+0x158>
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d002      	beq.n	801ca84 <UART_SetConfig+0x120>
 801ca7e:	2b04      	cmp	r3, #4
 801ca80:	d00e      	beq.n	801caa0 <UART_SetConfig+0x13c>
 801ca82:	e01b      	b.n	801cabc <UART_SetConfig+0x158>
 801ca84:	231b      	movs	r3, #27
 801ca86:	2218      	movs	r2, #24
 801ca88:	189b      	adds	r3, r3, r2
 801ca8a:	19db      	adds	r3, r3, r7
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	701a      	strb	r2, [r3, #0]
 801ca90:	e07d      	b.n	801cb8e <UART_SetConfig+0x22a>
 801ca92:	231b      	movs	r3, #27
 801ca94:	2218      	movs	r2, #24
 801ca96:	189b      	adds	r3, r3, r2
 801ca98:	19db      	adds	r3, r3, r7
 801ca9a:	2202      	movs	r2, #2
 801ca9c:	701a      	strb	r2, [r3, #0]
 801ca9e:	e076      	b.n	801cb8e <UART_SetConfig+0x22a>
 801caa0:	231b      	movs	r3, #27
 801caa2:	2218      	movs	r2, #24
 801caa4:	189b      	adds	r3, r3, r2
 801caa6:	19db      	adds	r3, r3, r7
 801caa8:	2204      	movs	r2, #4
 801caaa:	701a      	strb	r2, [r3, #0]
 801caac:	e06f      	b.n	801cb8e <UART_SetConfig+0x22a>
 801caae:	231b      	movs	r3, #27
 801cab0:	2218      	movs	r2, #24
 801cab2:	189b      	adds	r3, r3, r2
 801cab4:	19db      	adds	r3, r3, r7
 801cab6:	2208      	movs	r2, #8
 801cab8:	701a      	strb	r2, [r3, #0]
 801caba:	e068      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cabc:	231b      	movs	r3, #27
 801cabe:	2218      	movs	r2, #24
 801cac0:	189b      	adds	r3, r3, r2
 801cac2:	19db      	adds	r3, r3, r7
 801cac4:	2210      	movs	r2, #16
 801cac6:	701a      	strb	r2, [r3, #0]
 801cac8:	e061      	b.n	801cb8e <UART_SetConfig+0x22a>
 801caca:	69fb      	ldr	r3, [r7, #28]
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	4a7c      	ldr	r2, [pc, #496]	@ (801ccc0 <UART_SetConfig+0x35c>)
 801cad0:	4293      	cmp	r3, r2
 801cad2:	d106      	bne.n	801cae2 <UART_SetConfig+0x17e>
 801cad4:	231b      	movs	r3, #27
 801cad6:	2218      	movs	r2, #24
 801cad8:	189b      	adds	r3, r3, r2
 801cada:	19db      	adds	r3, r3, r7
 801cadc:	2200      	movs	r2, #0
 801cade:	701a      	strb	r2, [r3, #0]
 801cae0:	e055      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cae2:	69fb      	ldr	r3, [r7, #28]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	4a77      	ldr	r2, [pc, #476]	@ (801ccc4 <UART_SetConfig+0x360>)
 801cae8:	4293      	cmp	r3, r2
 801caea:	d106      	bne.n	801cafa <UART_SetConfig+0x196>
 801caec:	231b      	movs	r3, #27
 801caee:	2218      	movs	r2, #24
 801caf0:	189b      	adds	r3, r3, r2
 801caf2:	19db      	adds	r3, r3, r7
 801caf4:	2200      	movs	r2, #0
 801caf6:	701a      	strb	r2, [r3, #0]
 801caf8:	e049      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cafa:	69fb      	ldr	r3, [r7, #28]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	4a6b      	ldr	r2, [pc, #428]	@ (801ccac <UART_SetConfig+0x348>)
 801cb00:	4293      	cmp	r3, r2
 801cb02:	d13e      	bne.n	801cb82 <UART_SetConfig+0x21e>
 801cb04:	4b6c      	ldr	r3, [pc, #432]	@ (801ccb8 <UART_SetConfig+0x354>)
 801cb06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801cb08:	23c0      	movs	r3, #192	@ 0xc0
 801cb0a:	011b      	lsls	r3, r3, #4
 801cb0c:	4013      	ands	r3, r2
 801cb0e:	22c0      	movs	r2, #192	@ 0xc0
 801cb10:	0112      	lsls	r2, r2, #4
 801cb12:	4293      	cmp	r3, r2
 801cb14:	d027      	beq.n	801cb66 <UART_SetConfig+0x202>
 801cb16:	22c0      	movs	r2, #192	@ 0xc0
 801cb18:	0112      	lsls	r2, r2, #4
 801cb1a:	4293      	cmp	r3, r2
 801cb1c:	d82a      	bhi.n	801cb74 <UART_SetConfig+0x210>
 801cb1e:	2280      	movs	r2, #128	@ 0x80
 801cb20:	0112      	lsls	r2, r2, #4
 801cb22:	4293      	cmp	r3, r2
 801cb24:	d011      	beq.n	801cb4a <UART_SetConfig+0x1e6>
 801cb26:	2280      	movs	r2, #128	@ 0x80
 801cb28:	0112      	lsls	r2, r2, #4
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	d822      	bhi.n	801cb74 <UART_SetConfig+0x210>
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d004      	beq.n	801cb3c <UART_SetConfig+0x1d8>
 801cb32:	2280      	movs	r2, #128	@ 0x80
 801cb34:	00d2      	lsls	r2, r2, #3
 801cb36:	4293      	cmp	r3, r2
 801cb38:	d00e      	beq.n	801cb58 <UART_SetConfig+0x1f4>
 801cb3a:	e01b      	b.n	801cb74 <UART_SetConfig+0x210>
 801cb3c:	231b      	movs	r3, #27
 801cb3e:	2218      	movs	r2, #24
 801cb40:	189b      	adds	r3, r3, r2
 801cb42:	19db      	adds	r3, r3, r7
 801cb44:	2200      	movs	r2, #0
 801cb46:	701a      	strb	r2, [r3, #0]
 801cb48:	e021      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cb4a:	231b      	movs	r3, #27
 801cb4c:	2218      	movs	r2, #24
 801cb4e:	189b      	adds	r3, r3, r2
 801cb50:	19db      	adds	r3, r3, r7
 801cb52:	2202      	movs	r2, #2
 801cb54:	701a      	strb	r2, [r3, #0]
 801cb56:	e01a      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cb58:	231b      	movs	r3, #27
 801cb5a:	2218      	movs	r2, #24
 801cb5c:	189b      	adds	r3, r3, r2
 801cb5e:	19db      	adds	r3, r3, r7
 801cb60:	2204      	movs	r2, #4
 801cb62:	701a      	strb	r2, [r3, #0]
 801cb64:	e013      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cb66:	231b      	movs	r3, #27
 801cb68:	2218      	movs	r2, #24
 801cb6a:	189b      	adds	r3, r3, r2
 801cb6c:	19db      	adds	r3, r3, r7
 801cb6e:	2208      	movs	r2, #8
 801cb70:	701a      	strb	r2, [r3, #0]
 801cb72:	e00c      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cb74:	231b      	movs	r3, #27
 801cb76:	2218      	movs	r2, #24
 801cb78:	189b      	adds	r3, r3, r2
 801cb7a:	19db      	adds	r3, r3, r7
 801cb7c:	2210      	movs	r2, #16
 801cb7e:	701a      	strb	r2, [r3, #0]
 801cb80:	e005      	b.n	801cb8e <UART_SetConfig+0x22a>
 801cb82:	231b      	movs	r3, #27
 801cb84:	2218      	movs	r2, #24
 801cb86:	189b      	adds	r3, r3, r2
 801cb88:	19db      	adds	r3, r3, r7
 801cb8a:	2210      	movs	r2, #16
 801cb8c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801cb8e:	69fb      	ldr	r3, [r7, #28]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	4a46      	ldr	r2, [pc, #280]	@ (801ccac <UART_SetConfig+0x348>)
 801cb94:	4293      	cmp	r3, r2
 801cb96:	d000      	beq.n	801cb9a <UART_SetConfig+0x236>
 801cb98:	e09a      	b.n	801ccd0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801cb9a:	231b      	movs	r3, #27
 801cb9c:	2218      	movs	r2, #24
 801cb9e:	189b      	adds	r3, r3, r2
 801cba0:	19db      	adds	r3, r3, r7
 801cba2:	781b      	ldrb	r3, [r3, #0]
 801cba4:	2b08      	cmp	r3, #8
 801cba6:	d01d      	beq.n	801cbe4 <UART_SetConfig+0x280>
 801cba8:	dc20      	bgt.n	801cbec <UART_SetConfig+0x288>
 801cbaa:	2b04      	cmp	r3, #4
 801cbac:	d015      	beq.n	801cbda <UART_SetConfig+0x276>
 801cbae:	dc1d      	bgt.n	801cbec <UART_SetConfig+0x288>
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d002      	beq.n	801cbba <UART_SetConfig+0x256>
 801cbb4:	2b02      	cmp	r3, #2
 801cbb6:	d005      	beq.n	801cbc4 <UART_SetConfig+0x260>
 801cbb8:	e018      	b.n	801cbec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801cbba:	f7fd fe4b 	bl	801a854 <HAL_RCC_GetPCLK1Freq>
 801cbbe:	0003      	movs	r3, r0
 801cbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cbc2:	e01c      	b.n	801cbfe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cbc4:	4b3c      	ldr	r3, [pc, #240]	@ (801ccb8 <UART_SetConfig+0x354>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	2210      	movs	r2, #16
 801cbca:	4013      	ands	r3, r2
 801cbcc:	d002      	beq.n	801cbd4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801cbce:	4b3e      	ldr	r3, [pc, #248]	@ (801ccc8 <UART_SetConfig+0x364>)
 801cbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801cbd2:	e014      	b.n	801cbfe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801cbd4:	4b3d      	ldr	r3, [pc, #244]	@ (801cccc <UART_SetConfig+0x368>)
 801cbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cbd8:	e011      	b.n	801cbfe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cbda:	f7fd fd8b 	bl	801a6f4 <HAL_RCC_GetSysClockFreq>
 801cbde:	0003      	movs	r3, r0
 801cbe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cbe2:	e00c      	b.n	801cbfe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cbe4:	2380      	movs	r3, #128	@ 0x80
 801cbe6:	021b      	lsls	r3, r3, #8
 801cbe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cbea:	e008      	b.n	801cbfe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801cbec:	2300      	movs	r3, #0
 801cbee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801cbf0:	231a      	movs	r3, #26
 801cbf2:	2218      	movs	r2, #24
 801cbf4:	189b      	adds	r3, r3, r2
 801cbf6:	19db      	adds	r3, r3, r7
 801cbf8:	2201      	movs	r2, #1
 801cbfa:	701a      	strb	r2, [r3, #0]
        break;
 801cbfc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d100      	bne.n	801cc06 <UART_SetConfig+0x2a2>
 801cc04:	e133      	b.n	801ce6e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801cc06:	69fb      	ldr	r3, [r7, #28]
 801cc08:	685a      	ldr	r2, [r3, #4]
 801cc0a:	0013      	movs	r3, r2
 801cc0c:	005b      	lsls	r3, r3, #1
 801cc0e:	189b      	adds	r3, r3, r2
 801cc10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d305      	bcc.n	801cc22 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801cc16:	69fb      	ldr	r3, [r7, #28]
 801cc18:	685b      	ldr	r3, [r3, #4]
 801cc1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801cc1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cc1e:	429a      	cmp	r2, r3
 801cc20:	d906      	bls.n	801cc30 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801cc22:	231a      	movs	r3, #26
 801cc24:	2218      	movs	r2, #24
 801cc26:	189b      	adds	r3, r3, r2
 801cc28:	19db      	adds	r3, r3, r7
 801cc2a:	2201      	movs	r2, #1
 801cc2c:	701a      	strb	r2, [r3, #0]
 801cc2e:	e11e      	b.n	801ce6e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc32:	613b      	str	r3, [r7, #16]
 801cc34:	2300      	movs	r3, #0
 801cc36:	617b      	str	r3, [r7, #20]
 801cc38:	6939      	ldr	r1, [r7, #16]
 801cc3a:	697a      	ldr	r2, [r7, #20]
 801cc3c:	000b      	movs	r3, r1
 801cc3e:	0e1b      	lsrs	r3, r3, #24
 801cc40:	0010      	movs	r0, r2
 801cc42:	0205      	lsls	r5, r0, #8
 801cc44:	431d      	orrs	r5, r3
 801cc46:	000b      	movs	r3, r1
 801cc48:	021c      	lsls	r4, r3, #8
 801cc4a:	69fb      	ldr	r3, [r7, #28]
 801cc4c:	685b      	ldr	r3, [r3, #4]
 801cc4e:	085b      	lsrs	r3, r3, #1
 801cc50:	60bb      	str	r3, [r7, #8]
 801cc52:	2300      	movs	r3, #0
 801cc54:	60fb      	str	r3, [r7, #12]
 801cc56:	68b8      	ldr	r0, [r7, #8]
 801cc58:	68f9      	ldr	r1, [r7, #12]
 801cc5a:	1900      	adds	r0, r0, r4
 801cc5c:	4169      	adcs	r1, r5
 801cc5e:	69fb      	ldr	r3, [r7, #28]
 801cc60:	685b      	ldr	r3, [r3, #4]
 801cc62:	603b      	str	r3, [r7, #0]
 801cc64:	2300      	movs	r3, #0
 801cc66:	607b      	str	r3, [r7, #4]
 801cc68:	683a      	ldr	r2, [r7, #0]
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	f7e3 fc88 	bl	8000580 <__aeabi_uldivmod>
 801cc70:	0002      	movs	r2, r0
 801cc72:	000b      	movs	r3, r1
 801cc74:	0013      	movs	r3, r2
 801cc76:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801cc78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cc7a:	23c0      	movs	r3, #192	@ 0xc0
 801cc7c:	009b      	lsls	r3, r3, #2
 801cc7e:	429a      	cmp	r2, r3
 801cc80:	d309      	bcc.n	801cc96 <UART_SetConfig+0x332>
 801cc82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cc84:	2380      	movs	r3, #128	@ 0x80
 801cc86:	035b      	lsls	r3, r3, #13
 801cc88:	429a      	cmp	r2, r3
 801cc8a:	d204      	bcs.n	801cc96 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801cc8c:	69fb      	ldr	r3, [r7, #28]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cc92:	60da      	str	r2, [r3, #12]
 801cc94:	e0eb      	b.n	801ce6e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801cc96:	231a      	movs	r3, #26
 801cc98:	2218      	movs	r2, #24
 801cc9a:	189b      	adds	r3, r3, r2
 801cc9c:	19db      	adds	r3, r3, r7
 801cc9e:	2201      	movs	r2, #1
 801cca0:	701a      	strb	r2, [r3, #0]
 801cca2:	e0e4      	b.n	801ce6e <UART_SetConfig+0x50a>
 801cca4:	efff69f3 	.word	0xefff69f3
 801cca8:	ffffcfff 	.word	0xffffcfff
 801ccac:	40004800 	.word	0x40004800
 801ccb0:	fffff4ff 	.word	0xfffff4ff
 801ccb4:	40013800 	.word	0x40013800
 801ccb8:	40021000 	.word	0x40021000
 801ccbc:	40004400 	.word	0x40004400
 801ccc0:	40004c00 	.word	0x40004c00
 801ccc4:	40005000 	.word	0x40005000
 801ccc8:	003d0900 	.word	0x003d0900
 801cccc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ccd0:	69fb      	ldr	r3, [r7, #28]
 801ccd2:	69da      	ldr	r2, [r3, #28]
 801ccd4:	2380      	movs	r3, #128	@ 0x80
 801ccd6:	021b      	lsls	r3, r3, #8
 801ccd8:	429a      	cmp	r2, r3
 801ccda:	d000      	beq.n	801ccde <UART_SetConfig+0x37a>
 801ccdc:	e070      	b.n	801cdc0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801ccde:	231b      	movs	r3, #27
 801cce0:	2218      	movs	r2, #24
 801cce2:	189b      	adds	r3, r3, r2
 801cce4:	19db      	adds	r3, r3, r7
 801cce6:	781b      	ldrb	r3, [r3, #0]
 801cce8:	2b08      	cmp	r3, #8
 801ccea:	d822      	bhi.n	801cd32 <UART_SetConfig+0x3ce>
 801ccec:	009a      	lsls	r2, r3, #2
 801ccee:	4b67      	ldr	r3, [pc, #412]	@ (801ce8c <UART_SetConfig+0x528>)
 801ccf0:	18d3      	adds	r3, r2, r3
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ccf6:	f7fd fdad 	bl	801a854 <HAL_RCC_GetPCLK1Freq>
 801ccfa:	0003      	movs	r3, r0
 801ccfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ccfe:	e021      	b.n	801cd44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cd00:	f7fd fdbe 	bl	801a880 <HAL_RCC_GetPCLK2Freq>
 801cd04:	0003      	movs	r3, r0
 801cd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd08:	e01c      	b.n	801cd44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cd0a:	4b61      	ldr	r3, [pc, #388]	@ (801ce90 <UART_SetConfig+0x52c>)
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	2210      	movs	r2, #16
 801cd10:	4013      	ands	r3, r2
 801cd12:	d002      	beq.n	801cd1a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801cd14:	4b5f      	ldr	r3, [pc, #380]	@ (801ce94 <UART_SetConfig+0x530>)
 801cd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801cd18:	e014      	b.n	801cd44 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801cd1a:	4b5f      	ldr	r3, [pc, #380]	@ (801ce98 <UART_SetConfig+0x534>)
 801cd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd1e:	e011      	b.n	801cd44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cd20:	f7fd fce8 	bl	801a6f4 <HAL_RCC_GetSysClockFreq>
 801cd24:	0003      	movs	r3, r0
 801cd26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd28:	e00c      	b.n	801cd44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cd2a:	2380      	movs	r3, #128	@ 0x80
 801cd2c:	021b      	lsls	r3, r3, #8
 801cd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd30:	e008      	b.n	801cd44 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801cd32:	2300      	movs	r3, #0
 801cd34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801cd36:	231a      	movs	r3, #26
 801cd38:	2218      	movs	r2, #24
 801cd3a:	189b      	adds	r3, r3, r2
 801cd3c:	19db      	adds	r3, r3, r7
 801cd3e:	2201      	movs	r2, #1
 801cd40:	701a      	strb	r2, [r3, #0]
        break;
 801cd42:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801cd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d100      	bne.n	801cd4c <UART_SetConfig+0x3e8>
 801cd4a:	e090      	b.n	801ce6e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801cd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd4e:	005a      	lsls	r2, r3, #1
 801cd50:	69fb      	ldr	r3, [r7, #28]
 801cd52:	685b      	ldr	r3, [r3, #4]
 801cd54:	085b      	lsrs	r3, r3, #1
 801cd56:	18d2      	adds	r2, r2, r3
 801cd58:	69fb      	ldr	r3, [r7, #28]
 801cd5a:	685b      	ldr	r3, [r3, #4]
 801cd5c:	0019      	movs	r1, r3
 801cd5e:	0010      	movs	r0, r2
 801cd60:	f7e3 fa20 	bl	80001a4 <__udivsi3>
 801cd64:	0003      	movs	r3, r0
 801cd66:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd6a:	2b0f      	cmp	r3, #15
 801cd6c:	d921      	bls.n	801cdb2 <UART_SetConfig+0x44e>
 801cd6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cd70:	2380      	movs	r3, #128	@ 0x80
 801cd72:	025b      	lsls	r3, r3, #9
 801cd74:	429a      	cmp	r2, r3
 801cd76:	d21c      	bcs.n	801cdb2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801cd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd7a:	b29a      	uxth	r2, r3
 801cd7c:	200e      	movs	r0, #14
 801cd7e:	2418      	movs	r4, #24
 801cd80:	1903      	adds	r3, r0, r4
 801cd82:	19db      	adds	r3, r3, r7
 801cd84:	210f      	movs	r1, #15
 801cd86:	438a      	bics	r2, r1
 801cd88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd8c:	085b      	lsrs	r3, r3, #1
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	2207      	movs	r2, #7
 801cd92:	4013      	ands	r3, r2
 801cd94:	b299      	uxth	r1, r3
 801cd96:	1903      	adds	r3, r0, r4
 801cd98:	19db      	adds	r3, r3, r7
 801cd9a:	1902      	adds	r2, r0, r4
 801cd9c:	19d2      	adds	r2, r2, r7
 801cd9e:	8812      	ldrh	r2, [r2, #0]
 801cda0:	430a      	orrs	r2, r1
 801cda2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801cda4:	69fb      	ldr	r3, [r7, #28]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	1902      	adds	r2, r0, r4
 801cdaa:	19d2      	adds	r2, r2, r7
 801cdac:	8812      	ldrh	r2, [r2, #0]
 801cdae:	60da      	str	r2, [r3, #12]
 801cdb0:	e05d      	b.n	801ce6e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801cdb2:	231a      	movs	r3, #26
 801cdb4:	2218      	movs	r2, #24
 801cdb6:	189b      	adds	r3, r3, r2
 801cdb8:	19db      	adds	r3, r3, r7
 801cdba:	2201      	movs	r2, #1
 801cdbc:	701a      	strb	r2, [r3, #0]
 801cdbe:	e056      	b.n	801ce6e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801cdc0:	231b      	movs	r3, #27
 801cdc2:	2218      	movs	r2, #24
 801cdc4:	189b      	adds	r3, r3, r2
 801cdc6:	19db      	adds	r3, r3, r7
 801cdc8:	781b      	ldrb	r3, [r3, #0]
 801cdca:	2b08      	cmp	r3, #8
 801cdcc:	d822      	bhi.n	801ce14 <UART_SetConfig+0x4b0>
 801cdce:	009a      	lsls	r2, r3, #2
 801cdd0:	4b32      	ldr	r3, [pc, #200]	@ (801ce9c <UART_SetConfig+0x538>)
 801cdd2:	18d3      	adds	r3, r2, r3
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801cdd8:	f7fd fd3c 	bl	801a854 <HAL_RCC_GetPCLK1Freq>
 801cddc:	0003      	movs	r3, r0
 801cdde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cde0:	e021      	b.n	801ce26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cde2:	f7fd fd4d 	bl	801a880 <HAL_RCC_GetPCLK2Freq>
 801cde6:	0003      	movs	r3, r0
 801cde8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cdea:	e01c      	b.n	801ce26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cdec:	4b28      	ldr	r3, [pc, #160]	@ (801ce90 <UART_SetConfig+0x52c>)
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	2210      	movs	r2, #16
 801cdf2:	4013      	ands	r3, r2
 801cdf4:	d002      	beq.n	801cdfc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801cdf6:	4b27      	ldr	r3, [pc, #156]	@ (801ce94 <UART_SetConfig+0x530>)
 801cdf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801cdfa:	e014      	b.n	801ce26 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801cdfc:	4b26      	ldr	r3, [pc, #152]	@ (801ce98 <UART_SetConfig+0x534>)
 801cdfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ce00:	e011      	b.n	801ce26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ce02:	f7fd fc77 	bl	801a6f4 <HAL_RCC_GetSysClockFreq>
 801ce06:	0003      	movs	r3, r0
 801ce08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ce0a:	e00c      	b.n	801ce26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ce0c:	2380      	movs	r3, #128	@ 0x80
 801ce0e:	021b      	lsls	r3, r3, #8
 801ce10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ce12:	e008      	b.n	801ce26 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801ce14:	2300      	movs	r3, #0
 801ce16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801ce18:	231a      	movs	r3, #26
 801ce1a:	2218      	movs	r2, #24
 801ce1c:	189b      	adds	r3, r3, r2
 801ce1e:	19db      	adds	r3, r3, r7
 801ce20:	2201      	movs	r2, #1
 801ce22:	701a      	strb	r2, [r3, #0]
        break;
 801ce24:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d020      	beq.n	801ce6e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	685b      	ldr	r3, [r3, #4]
 801ce30:	085a      	lsrs	r2, r3, #1
 801ce32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce34:	18d2      	adds	r2, r2, r3
 801ce36:	69fb      	ldr	r3, [r7, #28]
 801ce38:	685b      	ldr	r3, [r3, #4]
 801ce3a:	0019      	movs	r1, r3
 801ce3c:	0010      	movs	r0, r2
 801ce3e:	f7e3 f9b1 	bl	80001a4 <__udivsi3>
 801ce42:	0003      	movs	r3, r0
 801ce44:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ce46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce48:	2b0f      	cmp	r3, #15
 801ce4a:	d90a      	bls.n	801ce62 <UART_SetConfig+0x4fe>
 801ce4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce4e:	2380      	movs	r3, #128	@ 0x80
 801ce50:	025b      	lsls	r3, r3, #9
 801ce52:	429a      	cmp	r2, r3
 801ce54:	d205      	bcs.n	801ce62 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ce56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce58:	b29a      	uxth	r2, r3
 801ce5a:	69fb      	ldr	r3, [r7, #28]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	60da      	str	r2, [r3, #12]
 801ce60:	e005      	b.n	801ce6e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801ce62:	231a      	movs	r3, #26
 801ce64:	2218      	movs	r2, #24
 801ce66:	189b      	adds	r3, r3, r2
 801ce68:	19db      	adds	r3, r3, r7
 801ce6a:	2201      	movs	r2, #1
 801ce6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ce6e:	69fb      	ldr	r3, [r7, #28]
 801ce70:	2200      	movs	r2, #0
 801ce72:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801ce74:	69fb      	ldr	r3, [r7, #28]
 801ce76:	2200      	movs	r2, #0
 801ce78:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801ce7a:	231a      	movs	r3, #26
 801ce7c:	2218      	movs	r2, #24
 801ce7e:	189b      	adds	r3, r3, r2
 801ce80:	19db      	adds	r3, r3, r7
 801ce82:	781b      	ldrb	r3, [r3, #0]
}
 801ce84:	0018      	movs	r0, r3
 801ce86:	46bd      	mov	sp, r7
 801ce88:	b00e      	add	sp, #56	@ 0x38
 801ce8a:	bdb0      	pop	{r4, r5, r7, pc}
 801ce8c:	0802d390 	.word	0x0802d390
 801ce90:	40021000 	.word	0x40021000
 801ce94:	003d0900 	.word	0x003d0900
 801ce98:	00f42400 	.word	0x00f42400
 801ce9c:	0802d3b4 	.word	0x0802d3b4

0801cea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b082      	sub	sp, #8
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ceac:	2201      	movs	r2, #1
 801ceae:	4013      	ands	r3, r2
 801ceb0:	d00b      	beq.n	801ceca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	685b      	ldr	r3, [r3, #4]
 801ceb8:	4a4a      	ldr	r2, [pc, #296]	@ (801cfe4 <UART_AdvFeatureConfig+0x144>)
 801ceba:	4013      	ands	r3, r2
 801cebc:	0019      	movs	r1, r3
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	430a      	orrs	r2, r1
 801cec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cece:	2202      	movs	r2, #2
 801ced0:	4013      	ands	r3, r2
 801ced2:	d00b      	beq.n	801ceec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	4a43      	ldr	r2, [pc, #268]	@ (801cfe8 <UART_AdvFeatureConfig+0x148>)
 801cedc:	4013      	ands	r3, r2
 801cede:	0019      	movs	r1, r3
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	430a      	orrs	r2, r1
 801ceea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cef0:	2204      	movs	r2, #4
 801cef2:	4013      	ands	r3, r2
 801cef4:	d00b      	beq.n	801cf0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	685b      	ldr	r3, [r3, #4]
 801cefc:	4a3b      	ldr	r2, [pc, #236]	@ (801cfec <UART_AdvFeatureConfig+0x14c>)
 801cefe:	4013      	ands	r3, r2
 801cf00:	0019      	movs	r1, r3
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	430a      	orrs	r2, r1
 801cf0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf12:	2208      	movs	r2, #8
 801cf14:	4013      	ands	r3, r2
 801cf16:	d00b      	beq.n	801cf30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	685b      	ldr	r3, [r3, #4]
 801cf1e:	4a34      	ldr	r2, [pc, #208]	@ (801cff0 <UART_AdvFeatureConfig+0x150>)
 801cf20:	4013      	ands	r3, r2
 801cf22:	0019      	movs	r1, r3
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	430a      	orrs	r2, r1
 801cf2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf34:	2210      	movs	r2, #16
 801cf36:	4013      	ands	r3, r2
 801cf38:	d00b      	beq.n	801cf52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	689b      	ldr	r3, [r3, #8]
 801cf40:	4a2c      	ldr	r2, [pc, #176]	@ (801cff4 <UART_AdvFeatureConfig+0x154>)
 801cf42:	4013      	ands	r3, r2
 801cf44:	0019      	movs	r1, r3
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	430a      	orrs	r2, r1
 801cf50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf56:	2220      	movs	r2, #32
 801cf58:	4013      	ands	r3, r2
 801cf5a:	d00b      	beq.n	801cf74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	689b      	ldr	r3, [r3, #8]
 801cf62:	4a25      	ldr	r2, [pc, #148]	@ (801cff8 <UART_AdvFeatureConfig+0x158>)
 801cf64:	4013      	ands	r3, r2
 801cf66:	0019      	movs	r1, r3
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	430a      	orrs	r2, r1
 801cf72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf78:	2240      	movs	r2, #64	@ 0x40
 801cf7a:	4013      	ands	r3, r2
 801cf7c:	d01d      	beq.n	801cfba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	685b      	ldr	r3, [r3, #4]
 801cf84:	4a1d      	ldr	r2, [pc, #116]	@ (801cffc <UART_AdvFeatureConfig+0x15c>)
 801cf86:	4013      	ands	r3, r2
 801cf88:	0019      	movs	r1, r3
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	430a      	orrs	r2, r1
 801cf94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cf9a:	2380      	movs	r3, #128	@ 0x80
 801cf9c:	035b      	lsls	r3, r3, #13
 801cf9e:	429a      	cmp	r2, r3
 801cfa0:	d10b      	bne.n	801cfba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	685b      	ldr	r3, [r3, #4]
 801cfa8:	4a15      	ldr	r2, [pc, #84]	@ (801d000 <UART_AdvFeatureConfig+0x160>)
 801cfaa:	4013      	ands	r3, r2
 801cfac:	0019      	movs	r1, r3
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	430a      	orrs	r2, r1
 801cfb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cfbe:	2280      	movs	r2, #128	@ 0x80
 801cfc0:	4013      	ands	r3, r2
 801cfc2:	d00b      	beq.n	801cfdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	685b      	ldr	r3, [r3, #4]
 801cfca:	4a0e      	ldr	r2, [pc, #56]	@ (801d004 <UART_AdvFeatureConfig+0x164>)
 801cfcc:	4013      	ands	r3, r2
 801cfce:	0019      	movs	r1, r3
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	430a      	orrs	r2, r1
 801cfda:	605a      	str	r2, [r3, #4]
  }
}
 801cfdc:	46c0      	nop			@ (mov r8, r8)
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	b002      	add	sp, #8
 801cfe2:	bd80      	pop	{r7, pc}
 801cfe4:	fffdffff 	.word	0xfffdffff
 801cfe8:	fffeffff 	.word	0xfffeffff
 801cfec:	fffbffff 	.word	0xfffbffff
 801cff0:	ffff7fff 	.word	0xffff7fff
 801cff4:	ffffefff 	.word	0xffffefff
 801cff8:	ffffdfff 	.word	0xffffdfff
 801cffc:	ffefffff 	.word	0xffefffff
 801d000:	ff9fffff 	.word	0xff9fffff
 801d004:	fff7ffff 	.word	0xfff7ffff

0801d008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b092      	sub	sp, #72	@ 0x48
 801d00c:	af02      	add	r7, sp, #8
 801d00e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	2284      	movs	r2, #132	@ 0x84
 801d014:	2100      	movs	r1, #0
 801d016:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d018:	f7f6 fa88 	bl	801352c <HAL_GetTick>
 801d01c:	0003      	movs	r3, r0
 801d01e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	2208      	movs	r2, #8
 801d028:	4013      	ands	r3, r2
 801d02a:	2b08      	cmp	r3, #8
 801d02c:	d12c      	bne.n	801d088 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d030:	2280      	movs	r2, #128	@ 0x80
 801d032:	0391      	lsls	r1, r2, #14
 801d034:	6878      	ldr	r0, [r7, #4]
 801d036:	4a46      	ldr	r2, [pc, #280]	@ (801d150 <UART_CheckIdleState+0x148>)
 801d038:	9200      	str	r2, [sp, #0]
 801d03a:	2200      	movs	r2, #0
 801d03c:	f000 f88c 	bl	801d158 <UART_WaitOnFlagUntilTimeout>
 801d040:	1e03      	subs	r3, r0, #0
 801d042:	d021      	beq.n	801d088 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d044:	f3ef 8310 	mrs	r3, PRIMASK
 801d048:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801d04c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d04e:	2301      	movs	r3, #1
 801d050:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d054:	f383 8810 	msr	PRIMASK, r3
}
 801d058:	46c0      	nop			@ (mov r8, r8)
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	681a      	ldr	r2, [r3, #0]
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	2180      	movs	r1, #128	@ 0x80
 801d066:	438a      	bics	r2, r1
 801d068:	601a      	str	r2, [r3, #0]
 801d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d070:	f383 8810 	msr	PRIMASK, r3
}
 801d074:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	2220      	movs	r2, #32
 801d07a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	2278      	movs	r2, #120	@ 0x78
 801d080:	2100      	movs	r1, #0
 801d082:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d084:	2303      	movs	r3, #3
 801d086:	e05f      	b.n	801d148 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	2204      	movs	r2, #4
 801d090:	4013      	ands	r3, r2
 801d092:	2b04      	cmp	r3, #4
 801d094:	d146      	bne.n	801d124 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d098:	2280      	movs	r2, #128	@ 0x80
 801d09a:	03d1      	lsls	r1, r2, #15
 801d09c:	6878      	ldr	r0, [r7, #4]
 801d09e:	4a2c      	ldr	r2, [pc, #176]	@ (801d150 <UART_CheckIdleState+0x148>)
 801d0a0:	9200      	str	r2, [sp, #0]
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	f000 f858 	bl	801d158 <UART_WaitOnFlagUntilTimeout>
 801d0a8:	1e03      	subs	r3, r0, #0
 801d0aa:	d03b      	beq.n	801d124 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0ac:	f3ef 8310 	mrs	r3, PRIMASK
 801d0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d0b4:	637b      	str	r3, [r7, #52]	@ 0x34
 801d0b6:	2301      	movs	r3, #1
 801d0b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0ba:	693b      	ldr	r3, [r7, #16]
 801d0bc:	f383 8810 	msr	PRIMASK, r3
}
 801d0c0:	46c0      	nop			@ (mov r8, r8)
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	681a      	ldr	r2, [r3, #0]
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	4921      	ldr	r1, [pc, #132]	@ (801d154 <UART_CheckIdleState+0x14c>)
 801d0ce:	400a      	ands	r2, r1
 801d0d0:	601a      	str	r2, [r3, #0]
 801d0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d0d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0d6:	697b      	ldr	r3, [r7, #20]
 801d0d8:	f383 8810 	msr	PRIMASK, r3
}
 801d0dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0de:	f3ef 8310 	mrs	r3, PRIMASK
 801d0e2:	61bb      	str	r3, [r7, #24]
  return(result);
 801d0e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d0e6:	633b      	str	r3, [r7, #48]	@ 0x30
 801d0e8:	2301      	movs	r3, #1
 801d0ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0ec:	69fb      	ldr	r3, [r7, #28]
 801d0ee:	f383 8810 	msr	PRIMASK, r3
}
 801d0f2:	46c0      	nop			@ (mov r8, r8)
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	689a      	ldr	r2, [r3, #8]
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	2101      	movs	r1, #1
 801d100:	438a      	bics	r2, r1
 801d102:	609a      	str	r2, [r3, #8]
 801d104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d106:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d108:	6a3b      	ldr	r3, [r7, #32]
 801d10a:	f383 8810 	msr	PRIMASK, r3
}
 801d10e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	2280      	movs	r2, #128	@ 0x80
 801d114:	2120      	movs	r1, #32
 801d116:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	2278      	movs	r2, #120	@ 0x78
 801d11c:	2100      	movs	r1, #0
 801d11e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d120:	2303      	movs	r3, #3
 801d122:	e011      	b.n	801d148 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	2220      	movs	r2, #32
 801d128:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	2280      	movs	r2, #128	@ 0x80
 801d12e:	2120      	movs	r1, #32
 801d130:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	2200      	movs	r2, #0
 801d136:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	2200      	movs	r2, #0
 801d13c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	2278      	movs	r2, #120	@ 0x78
 801d142:	2100      	movs	r1, #0
 801d144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d146:	2300      	movs	r3, #0
}
 801d148:	0018      	movs	r0, r3
 801d14a:	46bd      	mov	sp, r7
 801d14c:	b010      	add	sp, #64	@ 0x40
 801d14e:	bd80      	pop	{r7, pc}
 801d150:	01ffffff 	.word	0x01ffffff
 801d154:	fffffedf 	.word	0xfffffedf

0801d158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	b084      	sub	sp, #16
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	60f8      	str	r0, [r7, #12]
 801d160:	60b9      	str	r1, [r7, #8]
 801d162:	603b      	str	r3, [r7, #0]
 801d164:	1dfb      	adds	r3, r7, #7
 801d166:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d168:	e04b      	b.n	801d202 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d16a:	69bb      	ldr	r3, [r7, #24]
 801d16c:	3301      	adds	r3, #1
 801d16e:	d048      	beq.n	801d202 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d170:	f7f6 f9dc 	bl	801352c <HAL_GetTick>
 801d174:	0002      	movs	r2, r0
 801d176:	683b      	ldr	r3, [r7, #0]
 801d178:	1ad3      	subs	r3, r2, r3
 801d17a:	69ba      	ldr	r2, [r7, #24]
 801d17c:	429a      	cmp	r2, r3
 801d17e:	d302      	bcc.n	801d186 <UART_WaitOnFlagUntilTimeout+0x2e>
 801d180:	69bb      	ldr	r3, [r7, #24]
 801d182:	2b00      	cmp	r3, #0
 801d184:	d101      	bne.n	801d18a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801d186:	2303      	movs	r3, #3
 801d188:	e04b      	b.n	801d222 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	2204      	movs	r2, #4
 801d192:	4013      	ands	r3, r2
 801d194:	d035      	beq.n	801d202 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	69db      	ldr	r3, [r3, #28]
 801d19c:	2208      	movs	r2, #8
 801d19e:	4013      	ands	r3, r2
 801d1a0:	2b08      	cmp	r3, #8
 801d1a2:	d111      	bne.n	801d1c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	2208      	movs	r2, #8
 801d1aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	0018      	movs	r0, r3
 801d1b0:	f000 f9ca 	bl	801d548 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	2284      	movs	r2, #132	@ 0x84
 801d1b8:	2108      	movs	r1, #8
 801d1ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	2278      	movs	r2, #120	@ 0x78
 801d1c0:	2100      	movs	r1, #0
 801d1c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	e02c      	b.n	801d222 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	69da      	ldr	r2, [r3, #28]
 801d1ce:	2380      	movs	r3, #128	@ 0x80
 801d1d0:	011b      	lsls	r3, r3, #4
 801d1d2:	401a      	ands	r2, r3
 801d1d4:	2380      	movs	r3, #128	@ 0x80
 801d1d6:	011b      	lsls	r3, r3, #4
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	d112      	bne.n	801d202 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	2280      	movs	r2, #128	@ 0x80
 801d1e2:	0112      	lsls	r2, r2, #4
 801d1e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	0018      	movs	r0, r3
 801d1ea:	f000 f9ad 	bl	801d548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	2284      	movs	r2, #132	@ 0x84
 801d1f2:	2120      	movs	r1, #32
 801d1f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	2278      	movs	r2, #120	@ 0x78
 801d1fa:	2100      	movs	r1, #0
 801d1fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d1fe:	2303      	movs	r3, #3
 801d200:	e00f      	b.n	801d222 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	69db      	ldr	r3, [r3, #28]
 801d208:	68ba      	ldr	r2, [r7, #8]
 801d20a:	4013      	ands	r3, r2
 801d20c:	68ba      	ldr	r2, [r7, #8]
 801d20e:	1ad3      	subs	r3, r2, r3
 801d210:	425a      	negs	r2, r3
 801d212:	4153      	adcs	r3, r2
 801d214:	b2db      	uxtb	r3, r3
 801d216:	001a      	movs	r2, r3
 801d218:	1dfb      	adds	r3, r7, #7
 801d21a:	781b      	ldrb	r3, [r3, #0]
 801d21c:	429a      	cmp	r2, r3
 801d21e:	d0a4      	beq.n	801d16a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801d220:	2300      	movs	r3, #0
}
 801d222:	0018      	movs	r0, r3
 801d224:	46bd      	mov	sp, r7
 801d226:	b004      	add	sp, #16
 801d228:	bd80      	pop	{r7, pc}
	...

0801d22c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b090      	sub	sp, #64	@ 0x40
 801d230:	af00      	add	r7, sp, #0
 801d232:	60f8      	str	r0, [r7, #12]
 801d234:	60b9      	str	r1, [r7, #8]
 801d236:	1dbb      	adds	r3, r7, #6
 801d238:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	68ba      	ldr	r2, [r7, #8]
 801d23e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	1dba      	adds	r2, r7, #6
 801d244:	2158      	movs	r1, #88	@ 0x58
 801d246:	8812      	ldrh	r2, [r2, #0]
 801d248:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	1dba      	adds	r2, r7, #6
 801d24e:	215a      	movs	r1, #90	@ 0x5a
 801d250:	8812      	ldrh	r2, [r2, #0]
 801d252:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	2200      	movs	r2, #0
 801d258:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	689a      	ldr	r2, [r3, #8]
 801d25e:	2380      	movs	r3, #128	@ 0x80
 801d260:	015b      	lsls	r3, r3, #5
 801d262:	429a      	cmp	r2, r3
 801d264:	d10d      	bne.n	801d282 <UART_Start_Receive_IT+0x56>
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	691b      	ldr	r3, [r3, #16]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d104      	bne.n	801d278 <UART_Start_Receive_IT+0x4c>
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	225c      	movs	r2, #92	@ 0x5c
 801d272:	4950      	ldr	r1, [pc, #320]	@ (801d3b4 <UART_Start_Receive_IT+0x188>)
 801d274:	5299      	strh	r1, [r3, r2]
 801d276:	e02e      	b.n	801d2d6 <UART_Start_Receive_IT+0xaa>
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	225c      	movs	r2, #92	@ 0x5c
 801d27c:	21ff      	movs	r1, #255	@ 0xff
 801d27e:	5299      	strh	r1, [r3, r2]
 801d280:	e029      	b.n	801d2d6 <UART_Start_Receive_IT+0xaa>
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	689b      	ldr	r3, [r3, #8]
 801d286:	2b00      	cmp	r3, #0
 801d288:	d10d      	bne.n	801d2a6 <UART_Start_Receive_IT+0x7a>
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	691b      	ldr	r3, [r3, #16]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d104      	bne.n	801d29c <UART_Start_Receive_IT+0x70>
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	225c      	movs	r2, #92	@ 0x5c
 801d296:	21ff      	movs	r1, #255	@ 0xff
 801d298:	5299      	strh	r1, [r3, r2]
 801d29a:	e01c      	b.n	801d2d6 <UART_Start_Receive_IT+0xaa>
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	225c      	movs	r2, #92	@ 0x5c
 801d2a0:	217f      	movs	r1, #127	@ 0x7f
 801d2a2:	5299      	strh	r1, [r3, r2]
 801d2a4:	e017      	b.n	801d2d6 <UART_Start_Receive_IT+0xaa>
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	689a      	ldr	r2, [r3, #8]
 801d2aa:	2380      	movs	r3, #128	@ 0x80
 801d2ac:	055b      	lsls	r3, r3, #21
 801d2ae:	429a      	cmp	r2, r3
 801d2b0:	d10d      	bne.n	801d2ce <UART_Start_Receive_IT+0xa2>
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	691b      	ldr	r3, [r3, #16]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d104      	bne.n	801d2c4 <UART_Start_Receive_IT+0x98>
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	225c      	movs	r2, #92	@ 0x5c
 801d2be:	217f      	movs	r1, #127	@ 0x7f
 801d2c0:	5299      	strh	r1, [r3, r2]
 801d2c2:	e008      	b.n	801d2d6 <UART_Start_Receive_IT+0xaa>
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	225c      	movs	r2, #92	@ 0x5c
 801d2c8:	213f      	movs	r1, #63	@ 0x3f
 801d2ca:	5299      	strh	r1, [r3, r2]
 801d2cc:	e003      	b.n	801d2d6 <UART_Start_Receive_IT+0xaa>
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	225c      	movs	r2, #92	@ 0x5c
 801d2d2:	2100      	movs	r1, #0
 801d2d4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	2284      	movs	r2, #132	@ 0x84
 801d2da:	2100      	movs	r1, #0
 801d2dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	2280      	movs	r2, #128	@ 0x80
 801d2e2:	2122      	movs	r1, #34	@ 0x22
 801d2e4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2e6:	f3ef 8310 	mrs	r3, PRIMASK
 801d2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d2f0:	2301      	movs	r3, #1
 801d2f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2f6:	f383 8810 	msr	PRIMASK, r3
}
 801d2fa:	46c0      	nop			@ (mov r8, r8)
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	689a      	ldr	r2, [r3, #8]
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	2101      	movs	r1, #1
 801d308:	430a      	orrs	r2, r1
 801d30a:	609a      	str	r2, [r3, #8]
 801d30c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d30e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d312:	f383 8810 	msr	PRIMASK, r3
}
 801d316:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	689a      	ldr	r2, [r3, #8]
 801d31c:	2380      	movs	r3, #128	@ 0x80
 801d31e:	015b      	lsls	r3, r3, #5
 801d320:	429a      	cmp	r2, r3
 801d322:	d107      	bne.n	801d334 <UART_Start_Receive_IT+0x108>
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	691b      	ldr	r3, [r3, #16]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d103      	bne.n	801d334 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	4a22      	ldr	r2, [pc, #136]	@ (801d3b8 <UART_Start_Receive_IT+0x18c>)
 801d330:	669a      	str	r2, [r3, #104]	@ 0x68
 801d332:	e002      	b.n	801d33a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	4a21      	ldr	r2, [pc, #132]	@ (801d3bc <UART_Start_Receive_IT+0x190>)
 801d338:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	691b      	ldr	r3, [r3, #16]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d019      	beq.n	801d376 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d342:	f3ef 8310 	mrs	r3, PRIMASK
 801d346:	61fb      	str	r3, [r7, #28]
  return(result);
 801d348:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801d34a:	637b      	str	r3, [r7, #52]	@ 0x34
 801d34c:	2301      	movs	r3, #1
 801d34e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d350:	6a3b      	ldr	r3, [r7, #32]
 801d352:	f383 8810 	msr	PRIMASK, r3
}
 801d356:	46c0      	nop			@ (mov r8, r8)
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	681a      	ldr	r2, [r3, #0]
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	2190      	movs	r1, #144	@ 0x90
 801d364:	0049      	lsls	r1, r1, #1
 801d366:	430a      	orrs	r2, r1
 801d368:	601a      	str	r2, [r3, #0]
 801d36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d36c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d370:	f383 8810 	msr	PRIMASK, r3
}
 801d374:	e018      	b.n	801d3a8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d376:	f3ef 8310 	mrs	r3, PRIMASK
 801d37a:	613b      	str	r3, [r7, #16]
  return(result);
 801d37c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801d37e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d380:	2301      	movs	r3, #1
 801d382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d384:	697b      	ldr	r3, [r7, #20]
 801d386:	f383 8810 	msr	PRIMASK, r3
}
 801d38a:	46c0      	nop			@ (mov r8, r8)
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	681a      	ldr	r2, [r3, #0]
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	2120      	movs	r1, #32
 801d398:	430a      	orrs	r2, r1
 801d39a:	601a      	str	r2, [r3, #0]
 801d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d39e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3a0:	69bb      	ldr	r3, [r7, #24]
 801d3a2:	f383 8810 	msr	PRIMASK, r3
}
 801d3a6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801d3a8:	2300      	movs	r3, #0
}
 801d3aa:	0018      	movs	r0, r3
 801d3ac:	46bd      	mov	sp, r7
 801d3ae:	b010      	add	sp, #64	@ 0x40
 801d3b0:	bd80      	pop	{r7, pc}
 801d3b2:	46c0      	nop			@ (mov r8, r8)
 801d3b4:	000001ff 	.word	0x000001ff
 801d3b8:	0801db2d 	.word	0x0801db2d
 801d3bc:	0801d961 	.word	0x0801d961

0801d3c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b090      	sub	sp, #64	@ 0x40
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	60f8      	str	r0, [r7, #12]
 801d3c8:	60b9      	str	r1, [r7, #8]
 801d3ca:	1dbb      	adds	r3, r7, #6
 801d3cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	68ba      	ldr	r2, [r7, #8]
 801d3d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	1dba      	adds	r2, r7, #6
 801d3d8:	2158      	movs	r1, #88	@ 0x58
 801d3da:	8812      	ldrh	r2, [r2, #0]
 801d3dc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	2284      	movs	r2, #132	@ 0x84
 801d3e2:	2100      	movs	r1, #0
 801d3e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	2280      	movs	r2, #128	@ 0x80
 801d3ea:	2122      	movs	r1, #34	@ 0x22
 801d3ec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d028      	beq.n	801d448 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3fa:	4a3e      	ldr	r2, [pc, #248]	@ (801d4f4 <UART_Start_Receive_DMA+0x134>)
 801d3fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d402:	4a3d      	ldr	r2, [pc, #244]	@ (801d4f8 <UART_Start_Receive_DMA+0x138>)
 801d404:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d40a:	4a3c      	ldr	r2, [pc, #240]	@ (801d4fc <UART_Start_Receive_DMA+0x13c>)
 801d40c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d412:	2200      	movs	r2, #0
 801d414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	3324      	adds	r3, #36	@ 0x24
 801d420:	0019      	movs	r1, r3
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d426:	001a      	movs	r2, r3
 801d428:	1dbb      	adds	r3, r7, #6
 801d42a:	881b      	ldrh	r3, [r3, #0]
 801d42c:	f7f6 fdd0 	bl	8013fd0 <HAL_DMA_Start_IT>
 801d430:	1e03      	subs	r3, r0, #0
 801d432:	d009      	beq.n	801d448 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	2284      	movs	r2, #132	@ 0x84
 801d438:	2110      	movs	r1, #16
 801d43a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	2280      	movs	r2, #128	@ 0x80
 801d440:	2120      	movs	r1, #32
 801d442:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801d444:	2301      	movs	r3, #1
 801d446:	e050      	b.n	801d4ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	691b      	ldr	r3, [r3, #16]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d019      	beq.n	801d484 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d450:	f3ef 8310 	mrs	r3, PRIMASK
 801d454:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801d456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d45a:	2301      	movs	r3, #1
 801d45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d460:	f383 8810 	msr	PRIMASK, r3
}
 801d464:	46c0      	nop			@ (mov r8, r8)
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	681a      	ldr	r2, [r3, #0]
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	2180      	movs	r1, #128	@ 0x80
 801d472:	0049      	lsls	r1, r1, #1
 801d474:	430a      	orrs	r2, r1
 801d476:	601a      	str	r2, [r3, #0]
 801d478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d47a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d47e:	f383 8810 	msr	PRIMASK, r3
}
 801d482:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d484:	f3ef 8310 	mrs	r3, PRIMASK
 801d488:	613b      	str	r3, [r7, #16]
  return(result);
 801d48a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d48c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d48e:	2301      	movs	r3, #1
 801d490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d492:	697b      	ldr	r3, [r7, #20]
 801d494:	f383 8810 	msr	PRIMASK, r3
}
 801d498:	46c0      	nop			@ (mov r8, r8)
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	689a      	ldr	r2, [r3, #8]
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	2101      	movs	r1, #1
 801d4a6:	430a      	orrs	r2, r1
 801d4a8:	609a      	str	r2, [r3, #8]
 801d4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d4ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4ae:	69bb      	ldr	r3, [r7, #24]
 801d4b0:	f383 8810 	msr	PRIMASK, r3
}
 801d4b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d4b6:	f3ef 8310 	mrs	r3, PRIMASK
 801d4ba:	61fb      	str	r3, [r7, #28]
  return(result);
 801d4bc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d4be:	637b      	str	r3, [r7, #52]	@ 0x34
 801d4c0:	2301      	movs	r3, #1
 801d4c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4c4:	6a3b      	ldr	r3, [r7, #32]
 801d4c6:	f383 8810 	msr	PRIMASK, r3
}
 801d4ca:	46c0      	nop			@ (mov r8, r8)
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	689a      	ldr	r2, [r3, #8]
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	2140      	movs	r1, #64	@ 0x40
 801d4d8:	430a      	orrs	r2, r1
 801d4da:	609a      	str	r2, [r3, #8]
 801d4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4e2:	f383 8810 	msr	PRIMASK, r3
}
 801d4e6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801d4e8:	2300      	movs	r3, #0
}
 801d4ea:	0018      	movs	r0, r3
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	b010      	add	sp, #64	@ 0x40
 801d4f0:	bd80      	pop	{r7, pc}
 801d4f2:	46c0      	nop			@ (mov r8, r8)
 801d4f4:	0801d6d1 	.word	0x0801d6d1
 801d4f8:	0801d805 	.word	0x0801d805
 801d4fc:	0801d84d 	.word	0x0801d84d

0801d500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801d500:	b580      	push	{r7, lr}
 801d502:	b086      	sub	sp, #24
 801d504:	af00      	add	r7, sp, #0
 801d506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d508:	f3ef 8310 	mrs	r3, PRIMASK
 801d50c:	60bb      	str	r3, [r7, #8]
  return(result);
 801d50e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801d510:	617b      	str	r3, [r7, #20]
 801d512:	2301      	movs	r3, #1
 801d514:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	f383 8810 	msr	PRIMASK, r3
}
 801d51c:	46c0      	nop			@ (mov r8, r8)
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	681a      	ldr	r2, [r3, #0]
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	21c0      	movs	r1, #192	@ 0xc0
 801d52a:	438a      	bics	r2, r1
 801d52c:	601a      	str	r2, [r3, #0]
 801d52e:	697b      	ldr	r3, [r7, #20]
 801d530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d532:	693b      	ldr	r3, [r7, #16]
 801d534:	f383 8810 	msr	PRIMASK, r3
}
 801d538:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	2220      	movs	r2, #32
 801d53e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801d540:	46c0      	nop			@ (mov r8, r8)
 801d542:	46bd      	mov	sp, r7
 801d544:	b006      	add	sp, #24
 801d546:	bd80      	pop	{r7, pc}

0801d548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b08e      	sub	sp, #56	@ 0x38
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d550:	f3ef 8310 	mrs	r3, PRIMASK
 801d554:	617b      	str	r3, [r7, #20]
  return(result);
 801d556:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d558:	637b      	str	r3, [r7, #52]	@ 0x34
 801d55a:	2301      	movs	r3, #1
 801d55c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d55e:	69bb      	ldr	r3, [r7, #24]
 801d560:	f383 8810 	msr	PRIMASK, r3
}
 801d564:	46c0      	nop			@ (mov r8, r8)
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	681a      	ldr	r2, [r3, #0]
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	4926      	ldr	r1, [pc, #152]	@ (801d60c <UART_EndRxTransfer+0xc4>)
 801d572:	400a      	ands	r2, r1
 801d574:	601a      	str	r2, [r3, #0]
 801d576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d57a:	69fb      	ldr	r3, [r7, #28]
 801d57c:	f383 8810 	msr	PRIMASK, r3
}
 801d580:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d582:	f3ef 8310 	mrs	r3, PRIMASK
 801d586:	623b      	str	r3, [r7, #32]
  return(result);
 801d588:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d58a:	633b      	str	r3, [r7, #48]	@ 0x30
 801d58c:	2301      	movs	r3, #1
 801d58e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d592:	f383 8810 	msr	PRIMASK, r3
}
 801d596:	46c0      	nop			@ (mov r8, r8)
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	689a      	ldr	r2, [r3, #8]
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	2101      	movs	r1, #1
 801d5a4:	438a      	bics	r2, r1
 801d5a6:	609a      	str	r2, [r3, #8]
 801d5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5ae:	f383 8810 	msr	PRIMASK, r3
}
 801d5b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d5b8:	2b01      	cmp	r3, #1
 801d5ba:	d118      	bne.n	801d5ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5bc:	f3ef 8310 	mrs	r3, PRIMASK
 801d5c0:	60bb      	str	r3, [r7, #8]
  return(result);
 801d5c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	f383 8810 	msr	PRIMASK, r3
}
 801d5d0:	46c0      	nop			@ (mov r8, r8)
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	681a      	ldr	r2, [r3, #0]
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	2110      	movs	r1, #16
 801d5de:	438a      	bics	r2, r1
 801d5e0:	601a      	str	r2, [r3, #0]
 801d5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5e6:	693b      	ldr	r3, [r7, #16]
 801d5e8:	f383 8810 	msr	PRIMASK, r3
}
 801d5ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	2280      	movs	r2, #128	@ 0x80
 801d5f2:	2120      	movs	r1, #32
 801d5f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	2200      	movs	r2, #0
 801d600:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801d602:	46c0      	nop			@ (mov r8, r8)
 801d604:	46bd      	mov	sp, r7
 801d606:	b00e      	add	sp, #56	@ 0x38
 801d608:	bd80      	pop	{r7, pc}
 801d60a:	46c0      	nop			@ (mov r8, r8)
 801d60c:	fffffedf 	.word	0xfffffedf

0801d610 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801d610:	b580      	push	{r7, lr}
 801d612:	b08c      	sub	sp, #48	@ 0x30
 801d614:	af00      	add	r7, sp, #0
 801d616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d61c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	2220      	movs	r2, #32
 801d626:	4013      	ands	r3, r2
 801d628:	d135      	bne.n	801d696 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801d62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d62c:	2252      	movs	r2, #82	@ 0x52
 801d62e:	2100      	movs	r1, #0
 801d630:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d632:	f3ef 8310 	mrs	r3, PRIMASK
 801d636:	60fb      	str	r3, [r7, #12]
  return(result);
 801d638:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d63a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d63c:	2301      	movs	r3, #1
 801d63e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d640:	693b      	ldr	r3, [r7, #16]
 801d642:	f383 8810 	msr	PRIMASK, r3
}
 801d646:	46c0      	nop			@ (mov r8, r8)
 801d648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	689a      	ldr	r2, [r3, #8]
 801d64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	2180      	movs	r1, #128	@ 0x80
 801d654:	438a      	bics	r2, r1
 801d656:	609a      	str	r2, [r3, #8]
 801d658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d65a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d65c:	697b      	ldr	r3, [r7, #20]
 801d65e:	f383 8810 	msr	PRIMASK, r3
}
 801d662:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d664:	f3ef 8310 	mrs	r3, PRIMASK
 801d668:	61bb      	str	r3, [r7, #24]
  return(result);
 801d66a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d66c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d66e:	2301      	movs	r3, #1
 801d670:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d672:	69fb      	ldr	r3, [r7, #28]
 801d674:	f383 8810 	msr	PRIMASK, r3
}
 801d678:	46c0      	nop			@ (mov r8, r8)
 801d67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	681a      	ldr	r2, [r3, #0]
 801d680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	2140      	movs	r1, #64	@ 0x40
 801d686:	430a      	orrs	r2, r1
 801d688:	601a      	str	r2, [r3, #0]
 801d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d68c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d68e:	6a3b      	ldr	r3, [r7, #32]
 801d690:	f383 8810 	msr	PRIMASK, r3
}
 801d694:	e006      	b.n	801d6a4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801d696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d698:	228c      	movs	r2, #140	@ 0x8c
 801d69a:	589b      	ldr	r3, [r3, r2]
 801d69c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d69e:	0010      	movs	r0, r2
 801d6a0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d6a2:	46c0      	nop			@ (mov r8, r8)
 801d6a4:	46c0      	nop			@ (mov r8, r8)
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	b00c      	add	sp, #48	@ 0x30
 801d6aa:	bd80      	pop	{r7, pc}

0801d6ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b084      	sub	sp, #16
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	2288      	movs	r2, #136	@ 0x88
 801d6be:	589b      	ldr	r3, [r3, r2]
 801d6c0:	68fa      	ldr	r2, [r7, #12]
 801d6c2:	0010      	movs	r0, r2
 801d6c4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d6c6:	46c0      	nop			@ (mov r8, r8)
 801d6c8:	46bd      	mov	sp, r7
 801d6ca:	b004      	add	sp, #16
 801d6cc:	bd80      	pop	{r7, pc}
	...

0801d6d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b094      	sub	sp, #80	@ 0x50
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	2220      	movs	r2, #32
 801d6e6:	4013      	ands	r3, r2
 801d6e8:	d16f      	bne.n	801d7ca <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801d6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d6ec:	225a      	movs	r2, #90	@ 0x5a
 801d6ee:	2100      	movs	r1, #0
 801d6f0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6f2:	f3ef 8310 	mrs	r3, PRIMASK
 801d6f6:	61bb      	str	r3, [r7, #24]
  return(result);
 801d6f8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d6fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d700:	69fb      	ldr	r3, [r7, #28]
 801d702:	f383 8810 	msr	PRIMASK, r3
}
 801d706:	46c0      	nop			@ (mov r8, r8)
 801d708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	681a      	ldr	r2, [r3, #0]
 801d70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	493b      	ldr	r1, [pc, #236]	@ (801d800 <UART_DMAReceiveCplt+0x130>)
 801d714:	400a      	ands	r2, r1
 801d716:	601a      	str	r2, [r3, #0]
 801d718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d71a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d71c:	6a3b      	ldr	r3, [r7, #32]
 801d71e:	f383 8810 	msr	PRIMASK, r3
}
 801d722:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d724:	f3ef 8310 	mrs	r3, PRIMASK
 801d728:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d72c:	647b      	str	r3, [r7, #68]	@ 0x44
 801d72e:	2301      	movs	r3, #1
 801d730:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d734:	f383 8810 	msr	PRIMASK, r3
}
 801d738:	46c0      	nop			@ (mov r8, r8)
 801d73a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	689a      	ldr	r2, [r3, #8]
 801d740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	2101      	movs	r1, #1
 801d746:	438a      	bics	r2, r1
 801d748:	609a      	str	r2, [r3, #8]
 801d74a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d74c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d750:	f383 8810 	msr	PRIMASK, r3
}
 801d754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d756:	f3ef 8310 	mrs	r3, PRIMASK
 801d75a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801d75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d75e:	643b      	str	r3, [r7, #64]	@ 0x40
 801d760:	2301      	movs	r3, #1
 801d762:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d766:	f383 8810 	msr	PRIMASK, r3
}
 801d76a:	46c0      	nop			@ (mov r8, r8)
 801d76c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	689a      	ldr	r2, [r3, #8]
 801d772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	2140      	movs	r1, #64	@ 0x40
 801d778:	438a      	bics	r2, r1
 801d77a:	609a      	str	r2, [r3, #8]
 801d77c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d77e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d782:	f383 8810 	msr	PRIMASK, r3
}
 801d786:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801d788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d78a:	2280      	movs	r2, #128	@ 0x80
 801d78c:	2120      	movs	r1, #32
 801d78e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d794:	2b01      	cmp	r3, #1
 801d796:	d118      	bne.n	801d7ca <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d798:	f3ef 8310 	mrs	r3, PRIMASK
 801d79c:	60fb      	str	r3, [r7, #12]
  return(result);
 801d79e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7a6:	693b      	ldr	r3, [r7, #16]
 801d7a8:	f383 8810 	msr	PRIMASK, r3
}
 801d7ac:	46c0      	nop			@ (mov r8, r8)
 801d7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	681a      	ldr	r2, [r3, #0]
 801d7b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	2110      	movs	r1, #16
 801d7ba:	438a      	bics	r2, r1
 801d7bc:	601a      	str	r2, [r3, #0]
 801d7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7c2:	697b      	ldr	r3, [r7, #20]
 801d7c4:	f383 8810 	msr	PRIMASK, r3
}
 801d7c8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d7ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7cc:	2200      	movs	r2, #0
 801d7ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d7d4:	2b01      	cmp	r3, #1
 801d7d6:	d109      	bne.n	801d7ec <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801d7d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7da:	22ac      	movs	r2, #172	@ 0xac
 801d7dc:	589b      	ldr	r3, [r3, r2]
 801d7de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d7e0:	2158      	movs	r1, #88	@ 0x58
 801d7e2:	5a51      	ldrh	r1, [r2, r1]
 801d7e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d7e6:	0010      	movs	r0, r2
 801d7e8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d7ea:	e005      	b.n	801d7f8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801d7ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7ee:	2294      	movs	r2, #148	@ 0x94
 801d7f0:	589b      	ldr	r3, [r3, r2]
 801d7f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d7f4:	0010      	movs	r0, r2
 801d7f6:	4798      	blx	r3
}
 801d7f8:	46c0      	nop			@ (mov r8, r8)
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	b014      	add	sp, #80	@ 0x50
 801d7fe:	bd80      	pop	{r7, pc}
 801d800:	fffffeff 	.word	0xfffffeff

0801d804 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b084      	sub	sp, #16
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d810:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	2201      	movs	r2, #1
 801d816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d81c:	2b01      	cmp	r3, #1
 801d81e:	d10b      	bne.n	801d838 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	22ac      	movs	r2, #172	@ 0xac
 801d824:	589b      	ldr	r3, [r3, r2]
 801d826:	68fa      	ldr	r2, [r7, #12]
 801d828:	2158      	movs	r1, #88	@ 0x58
 801d82a:	5a52      	ldrh	r2, [r2, r1]
 801d82c:	0852      	lsrs	r2, r2, #1
 801d82e:	b291      	uxth	r1, r2
 801d830:	68fa      	ldr	r2, [r7, #12]
 801d832:	0010      	movs	r0, r2
 801d834:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d836:	e005      	b.n	801d844 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	2290      	movs	r2, #144	@ 0x90
 801d83c:	589b      	ldr	r3, [r3, r2]
 801d83e:	68fa      	ldr	r2, [r7, #12]
 801d840:	0010      	movs	r0, r2
 801d842:	4798      	blx	r3
}
 801d844:	46c0      	nop			@ (mov r8, r8)
 801d846:	46bd      	mov	sp, r7
 801d848:	b004      	add	sp, #16
 801d84a:	bd80      	pop	{r7, pc}

0801d84c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b086      	sub	sp, #24
 801d850:	af00      	add	r7, sp, #0
 801d852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d858:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801d85a:	697b      	ldr	r3, [r7, #20]
 801d85c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d85e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801d860:	697b      	ldr	r3, [r7, #20]
 801d862:	2280      	movs	r2, #128	@ 0x80
 801d864:	589b      	ldr	r3, [r3, r2]
 801d866:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801d868:	697b      	ldr	r3, [r7, #20]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	689b      	ldr	r3, [r3, #8]
 801d86e:	2280      	movs	r2, #128	@ 0x80
 801d870:	4013      	ands	r3, r2
 801d872:	2b80      	cmp	r3, #128	@ 0x80
 801d874:	d10a      	bne.n	801d88c <UART_DMAError+0x40>
 801d876:	693b      	ldr	r3, [r7, #16]
 801d878:	2b21      	cmp	r3, #33	@ 0x21
 801d87a:	d107      	bne.n	801d88c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801d87c:	697b      	ldr	r3, [r7, #20]
 801d87e:	2252      	movs	r2, #82	@ 0x52
 801d880:	2100      	movs	r1, #0
 801d882:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801d884:	697b      	ldr	r3, [r7, #20]
 801d886:	0018      	movs	r0, r3
 801d888:	f7ff fe3a 	bl	801d500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801d88c:	697b      	ldr	r3, [r7, #20]
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	689b      	ldr	r3, [r3, #8]
 801d892:	2240      	movs	r2, #64	@ 0x40
 801d894:	4013      	ands	r3, r2
 801d896:	2b40      	cmp	r3, #64	@ 0x40
 801d898:	d10a      	bne.n	801d8b0 <UART_DMAError+0x64>
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	2b22      	cmp	r3, #34	@ 0x22
 801d89e:	d107      	bne.n	801d8b0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801d8a0:	697b      	ldr	r3, [r7, #20]
 801d8a2:	225a      	movs	r2, #90	@ 0x5a
 801d8a4:	2100      	movs	r1, #0
 801d8a6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801d8a8:	697b      	ldr	r3, [r7, #20]
 801d8aa:	0018      	movs	r0, r3
 801d8ac:	f7ff fe4c 	bl	801d548 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801d8b0:	697b      	ldr	r3, [r7, #20]
 801d8b2:	2284      	movs	r2, #132	@ 0x84
 801d8b4:	589b      	ldr	r3, [r3, r2]
 801d8b6:	2210      	movs	r2, #16
 801d8b8:	431a      	orrs	r2, r3
 801d8ba:	697b      	ldr	r3, [r7, #20]
 801d8bc:	2184      	movs	r1, #132	@ 0x84
 801d8be:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801d8c0:	697b      	ldr	r3, [r7, #20]
 801d8c2:	2298      	movs	r2, #152	@ 0x98
 801d8c4:	589b      	ldr	r3, [r3, r2]
 801d8c6:	697a      	ldr	r2, [r7, #20]
 801d8c8:	0010      	movs	r0, r2
 801d8ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d8cc:	46c0      	nop			@ (mov r8, r8)
 801d8ce:	46bd      	mov	sp, r7
 801d8d0:	b006      	add	sp, #24
 801d8d2:	bd80      	pop	{r7, pc}

0801d8d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b084      	sub	sp, #16
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d8e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	225a      	movs	r2, #90	@ 0x5a
 801d8e6:	2100      	movs	r1, #0
 801d8e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	2252      	movs	r2, #82	@ 0x52
 801d8ee:	2100      	movs	r1, #0
 801d8f0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	2298      	movs	r2, #152	@ 0x98
 801d8f6:	589b      	ldr	r3, [r3, r2]
 801d8f8:	68fa      	ldr	r2, [r7, #12]
 801d8fa:	0010      	movs	r0, r2
 801d8fc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d8fe:	46c0      	nop			@ (mov r8, r8)
 801d900:	46bd      	mov	sp, r7
 801d902:	b004      	add	sp, #16
 801d904:	bd80      	pop	{r7, pc}

0801d906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801d906:	b580      	push	{r7, lr}
 801d908:	b086      	sub	sp, #24
 801d90a:	af00      	add	r7, sp, #0
 801d90c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d90e:	f3ef 8310 	mrs	r3, PRIMASK
 801d912:	60bb      	str	r3, [r7, #8]
  return(result);
 801d914:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d916:	617b      	str	r3, [r7, #20]
 801d918:	2301      	movs	r3, #1
 801d91a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	f383 8810 	msr	PRIMASK, r3
}
 801d922:	46c0      	nop			@ (mov r8, r8)
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	681a      	ldr	r2, [r3, #0]
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	2140      	movs	r1, #64	@ 0x40
 801d930:	438a      	bics	r2, r1
 801d932:	601a      	str	r2, [r3, #0]
 801d934:	697b      	ldr	r3, [r7, #20]
 801d936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d938:	693b      	ldr	r3, [r7, #16]
 801d93a:	f383 8810 	msr	PRIMASK, r3
}
 801d93e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2220      	movs	r2, #32
 801d944:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	2200      	movs	r2, #0
 801d94a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	228c      	movs	r2, #140	@ 0x8c
 801d950:	589b      	ldr	r3, [r3, r2]
 801d952:	687a      	ldr	r2, [r7, #4]
 801d954:	0010      	movs	r0, r2
 801d956:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d958:	46c0      	nop			@ (mov r8, r8)
 801d95a:	46bd      	mov	sp, r7
 801d95c:	b006      	add	sp, #24
 801d95e:	bd80      	pop	{r7, pc}

0801d960 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801d960:	b580      	push	{r7, lr}
 801d962:	b094      	sub	sp, #80	@ 0x50
 801d964:	af00      	add	r7, sp, #0
 801d966:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801d968:	204e      	movs	r0, #78	@ 0x4e
 801d96a:	183b      	adds	r3, r7, r0
 801d96c:	687a      	ldr	r2, [r7, #4]
 801d96e:	215c      	movs	r1, #92	@ 0x5c
 801d970:	5a52      	ldrh	r2, [r2, r1]
 801d972:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	2280      	movs	r2, #128	@ 0x80
 801d978:	589b      	ldr	r3, [r3, r2]
 801d97a:	2b22      	cmp	r3, #34	@ 0x22
 801d97c:	d000      	beq.n	801d980 <UART_RxISR_8BIT+0x20>
 801d97e:	e0c2      	b.n	801db06 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d986:	214c      	movs	r1, #76	@ 0x4c
 801d988:	187b      	adds	r3, r7, r1
 801d98a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d98c:	187b      	adds	r3, r7, r1
 801d98e:	881b      	ldrh	r3, [r3, #0]
 801d990:	b2da      	uxtb	r2, r3
 801d992:	183b      	adds	r3, r7, r0
 801d994:	881b      	ldrh	r3, [r3, #0]
 801d996:	b2d9      	uxtb	r1, r3
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d99c:	400a      	ands	r2, r1
 801d99e:	b2d2      	uxtb	r2, r2
 801d9a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d9a6:	1c5a      	adds	r2, r3, #1
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	225a      	movs	r2, #90	@ 0x5a
 801d9b0:	5a9b      	ldrh	r3, [r3, r2]
 801d9b2:	b29b      	uxth	r3, r3
 801d9b4:	3b01      	subs	r3, #1
 801d9b6:	b299      	uxth	r1, r3
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	225a      	movs	r2, #90	@ 0x5a
 801d9bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	225a      	movs	r2, #90	@ 0x5a
 801d9c2:	5a9b      	ldrh	r3, [r3, r2]
 801d9c4:	b29b      	uxth	r3, r3
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d000      	beq.n	801d9cc <UART_RxISR_8BIT+0x6c>
 801d9ca:	e0a4      	b.n	801db16 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9cc:	f3ef 8310 	mrs	r3, PRIMASK
 801d9d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d9d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d9d6:	2301      	movs	r3, #1
 801d9d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9dc:	f383 8810 	msr	PRIMASK, r3
}
 801d9e0:	46c0      	nop			@ (mov r8, r8)
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	681a      	ldr	r2, [r3, #0]
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	494c      	ldr	r1, [pc, #304]	@ (801db20 <UART_RxISR_8BIT+0x1c0>)
 801d9ee:	400a      	ands	r2, r1
 801d9f0:	601a      	str	r2, [r3, #0]
 801d9f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9f8:	f383 8810 	msr	PRIMASK, r3
}
 801d9fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9fe:	f3ef 8310 	mrs	r3, PRIMASK
 801da02:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801da04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801da06:	647b      	str	r3, [r7, #68]	@ 0x44
 801da08:	2301      	movs	r3, #1
 801da0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da0e:	f383 8810 	msr	PRIMASK, r3
}
 801da12:	46c0      	nop			@ (mov r8, r8)
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	689a      	ldr	r2, [r3, #8]
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	2101      	movs	r1, #1
 801da20:	438a      	bics	r2, r1
 801da22:	609a      	str	r2, [r3, #8]
 801da24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da26:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da2a:	f383 8810 	msr	PRIMASK, r3
}
 801da2e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	2280      	movs	r2, #128	@ 0x80
 801da34:	2120      	movs	r1, #32
 801da36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	2200      	movs	r2, #0
 801da3c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	2200      	movs	r2, #0
 801da42:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	4a36      	ldr	r2, [pc, #216]	@ (801db24 <UART_RxISR_8BIT+0x1c4>)
 801da4a:	4293      	cmp	r3, r2
 801da4c:	d01f      	beq.n	801da8e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	685a      	ldr	r2, [r3, #4]
 801da54:	2380      	movs	r3, #128	@ 0x80
 801da56:	041b      	lsls	r3, r3, #16
 801da58:	4013      	ands	r3, r2
 801da5a:	d018      	beq.n	801da8e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da5c:	f3ef 8310 	mrs	r3, PRIMASK
 801da60:	61bb      	str	r3, [r7, #24]
  return(result);
 801da62:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801da64:	643b      	str	r3, [r7, #64]	@ 0x40
 801da66:	2301      	movs	r3, #1
 801da68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da6a:	69fb      	ldr	r3, [r7, #28]
 801da6c:	f383 8810 	msr	PRIMASK, r3
}
 801da70:	46c0      	nop			@ (mov r8, r8)
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	681a      	ldr	r2, [r3, #0]
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	492a      	ldr	r1, [pc, #168]	@ (801db28 <UART_RxISR_8BIT+0x1c8>)
 801da7e:	400a      	ands	r2, r1
 801da80:	601a      	str	r2, [r3, #0]
 801da82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801da84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da86:	6a3b      	ldr	r3, [r7, #32]
 801da88:	f383 8810 	msr	PRIMASK, r3
}
 801da8c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801da92:	2b01      	cmp	r3, #1
 801da94:	d130      	bne.n	801daf8 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	2200      	movs	r2, #0
 801da9a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da9c:	f3ef 8310 	mrs	r3, PRIMASK
 801daa0:	60fb      	str	r3, [r7, #12]
  return(result);
 801daa2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801daa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801daa6:	2301      	movs	r3, #1
 801daa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daaa:	693b      	ldr	r3, [r7, #16]
 801daac:	f383 8810 	msr	PRIMASK, r3
}
 801dab0:	46c0      	nop			@ (mov r8, r8)
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	681a      	ldr	r2, [r3, #0]
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	2110      	movs	r1, #16
 801dabe:	438a      	bics	r2, r1
 801dac0:	601a      	str	r2, [r3, #0]
 801dac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dac6:	697b      	ldr	r3, [r7, #20]
 801dac8:	f383 8810 	msr	PRIMASK, r3
}
 801dacc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	69db      	ldr	r3, [r3, #28]
 801dad4:	2210      	movs	r2, #16
 801dad6:	4013      	ands	r3, r2
 801dad8:	2b10      	cmp	r3, #16
 801dada:	d103      	bne.n	801dae4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	2210      	movs	r2, #16
 801dae2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	22ac      	movs	r2, #172	@ 0xac
 801dae8:	589b      	ldr	r3, [r3, r2]
 801daea:	687a      	ldr	r2, [r7, #4]
 801daec:	2158      	movs	r1, #88	@ 0x58
 801daee:	5a51      	ldrh	r1, [r2, r1]
 801daf0:	687a      	ldr	r2, [r7, #4]
 801daf2:	0010      	movs	r0, r2
 801daf4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801daf6:	e00e      	b.n	801db16 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	2294      	movs	r2, #148	@ 0x94
 801dafc:	589b      	ldr	r3, [r3, r2]
 801dafe:	687a      	ldr	r2, [r7, #4]
 801db00:	0010      	movs	r0, r2
 801db02:	4798      	blx	r3
}
 801db04:	e007      	b.n	801db16 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	699a      	ldr	r2, [r3, #24]
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	2108      	movs	r1, #8
 801db12:	430a      	orrs	r2, r1
 801db14:	619a      	str	r2, [r3, #24]
}
 801db16:	46c0      	nop			@ (mov r8, r8)
 801db18:	46bd      	mov	sp, r7
 801db1a:	b014      	add	sp, #80	@ 0x50
 801db1c:	bd80      	pop	{r7, pc}
 801db1e:	46c0      	nop			@ (mov r8, r8)
 801db20:	fffffedf 	.word	0xfffffedf
 801db24:	40004800 	.word	0x40004800
 801db28:	fbffffff 	.word	0xfbffffff

0801db2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801db2c:	b580      	push	{r7, lr}
 801db2e:	b094      	sub	sp, #80	@ 0x50
 801db30:	af00      	add	r7, sp, #0
 801db32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801db34:	204e      	movs	r0, #78	@ 0x4e
 801db36:	183b      	adds	r3, r7, r0
 801db38:	687a      	ldr	r2, [r7, #4]
 801db3a:	215c      	movs	r1, #92	@ 0x5c
 801db3c:	5a52      	ldrh	r2, [r2, r1]
 801db3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	2280      	movs	r2, #128	@ 0x80
 801db44:	589b      	ldr	r3, [r3, r2]
 801db46:	2b22      	cmp	r3, #34	@ 0x22
 801db48:	d000      	beq.n	801db4c <UART_RxISR_16BIT+0x20>
 801db4a:	e0c2      	b.n	801dcd2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801db52:	214c      	movs	r1, #76	@ 0x4c
 801db54:	187b      	adds	r3, r7, r1
 801db56:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801db5e:	187b      	adds	r3, r7, r1
 801db60:	183a      	adds	r2, r7, r0
 801db62:	881b      	ldrh	r3, [r3, #0]
 801db64:	8812      	ldrh	r2, [r2, #0]
 801db66:	4013      	ands	r3, r2
 801db68:	b29a      	uxth	r2, r3
 801db6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801db6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db72:	1c9a      	adds	r2, r3, #2
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	225a      	movs	r2, #90	@ 0x5a
 801db7c:	5a9b      	ldrh	r3, [r3, r2]
 801db7e:	b29b      	uxth	r3, r3
 801db80:	3b01      	subs	r3, #1
 801db82:	b299      	uxth	r1, r3
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	225a      	movs	r2, #90	@ 0x5a
 801db88:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	225a      	movs	r2, #90	@ 0x5a
 801db8e:	5a9b      	ldrh	r3, [r3, r2]
 801db90:	b29b      	uxth	r3, r3
 801db92:	2b00      	cmp	r3, #0
 801db94:	d000      	beq.n	801db98 <UART_RxISR_16BIT+0x6c>
 801db96:	e0a4      	b.n	801dce2 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db98:	f3ef 8310 	mrs	r3, PRIMASK
 801db9c:	623b      	str	r3, [r7, #32]
  return(result);
 801db9e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dba0:	647b      	str	r3, [r7, #68]	@ 0x44
 801dba2:	2301      	movs	r3, #1
 801dba4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dba8:	f383 8810 	msr	PRIMASK, r3
}
 801dbac:	46c0      	nop			@ (mov r8, r8)
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	681a      	ldr	r2, [r3, #0]
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	494c      	ldr	r1, [pc, #304]	@ (801dcec <UART_RxISR_16BIT+0x1c0>)
 801dbba:	400a      	ands	r2, r1
 801dbbc:	601a      	str	r2, [r3, #0]
 801dbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbc4:	f383 8810 	msr	PRIMASK, r3
}
 801dbc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbca:	f3ef 8310 	mrs	r3, PRIMASK
 801dbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801dbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dbd2:	643b      	str	r3, [r7, #64]	@ 0x40
 801dbd4:	2301      	movs	r3, #1
 801dbd6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbda:	f383 8810 	msr	PRIMASK, r3
}
 801dbde:	46c0      	nop			@ (mov r8, r8)
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	689a      	ldr	r2, [r3, #8]
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	2101      	movs	r1, #1
 801dbec:	438a      	bics	r2, r1
 801dbee:	609a      	str	r2, [r3, #8]
 801dbf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dbf2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dbf6:	f383 8810 	msr	PRIMASK, r3
}
 801dbfa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	2280      	movs	r2, #128	@ 0x80
 801dc00:	2120      	movs	r1, #32
 801dc02:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	2200      	movs	r2, #0
 801dc08:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	4a36      	ldr	r2, [pc, #216]	@ (801dcf0 <UART_RxISR_16BIT+0x1c4>)
 801dc16:	4293      	cmp	r3, r2
 801dc18:	d01f      	beq.n	801dc5a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	685a      	ldr	r2, [r3, #4]
 801dc20:	2380      	movs	r3, #128	@ 0x80
 801dc22:	041b      	lsls	r3, r3, #16
 801dc24:	4013      	ands	r3, r2
 801dc26:	d018      	beq.n	801dc5a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc28:	f3ef 8310 	mrs	r3, PRIMASK
 801dc2c:	617b      	str	r3, [r7, #20]
  return(result);
 801dc2e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801dc30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dc32:	2301      	movs	r3, #1
 801dc34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc36:	69bb      	ldr	r3, [r7, #24]
 801dc38:	f383 8810 	msr	PRIMASK, r3
}
 801dc3c:	46c0      	nop			@ (mov r8, r8)
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	681a      	ldr	r2, [r3, #0]
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	492a      	ldr	r1, [pc, #168]	@ (801dcf4 <UART_RxISR_16BIT+0x1c8>)
 801dc4a:	400a      	ands	r2, r1
 801dc4c:	601a      	str	r2, [r3, #0]
 801dc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc52:	69fb      	ldr	r3, [r7, #28]
 801dc54:	f383 8810 	msr	PRIMASK, r3
}
 801dc58:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc5e:	2b01      	cmp	r3, #1
 801dc60:	d130      	bne.n	801dcc4 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	2200      	movs	r2, #0
 801dc66:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc68:	f3ef 8310 	mrs	r3, PRIMASK
 801dc6c:	60bb      	str	r3, [r7, #8]
  return(result);
 801dc6e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc70:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dc72:	2301      	movs	r3, #1
 801dc74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	f383 8810 	msr	PRIMASK, r3
}
 801dc7c:	46c0      	nop			@ (mov r8, r8)
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	681a      	ldr	r2, [r3, #0]
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	2110      	movs	r1, #16
 801dc8a:	438a      	bics	r2, r1
 801dc8c:	601a      	str	r2, [r3, #0]
 801dc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dc90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc92:	693b      	ldr	r3, [r7, #16]
 801dc94:	f383 8810 	msr	PRIMASK, r3
}
 801dc98:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	69db      	ldr	r3, [r3, #28]
 801dca0:	2210      	movs	r2, #16
 801dca2:	4013      	ands	r3, r2
 801dca4:	2b10      	cmp	r3, #16
 801dca6:	d103      	bne.n	801dcb0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	2210      	movs	r2, #16
 801dcae:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	22ac      	movs	r2, #172	@ 0xac
 801dcb4:	589b      	ldr	r3, [r3, r2]
 801dcb6:	687a      	ldr	r2, [r7, #4]
 801dcb8:	2158      	movs	r1, #88	@ 0x58
 801dcba:	5a51      	ldrh	r1, [r2, r1]
 801dcbc:	687a      	ldr	r2, [r7, #4]
 801dcbe:	0010      	movs	r0, r2
 801dcc0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801dcc2:	e00e      	b.n	801dce2 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	2294      	movs	r2, #148	@ 0x94
 801dcc8:	589b      	ldr	r3, [r3, r2]
 801dcca:	687a      	ldr	r2, [r7, #4]
 801dccc:	0010      	movs	r0, r2
 801dcce:	4798      	blx	r3
}
 801dcd0:	e007      	b.n	801dce2 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	699a      	ldr	r2, [r3, #24]
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	2108      	movs	r1, #8
 801dcde:	430a      	orrs	r2, r1
 801dce0:	619a      	str	r2, [r3, #24]
}
 801dce2:	46c0      	nop			@ (mov r8, r8)
 801dce4:	46bd      	mov	sp, r7
 801dce6:	b014      	add	sp, #80	@ 0x50
 801dce8:	bd80      	pop	{r7, pc}
 801dcea:	46c0      	nop			@ (mov r8, r8)
 801dcec:	fffffedf 	.word	0xfffffedf
 801dcf0:	40004800 	.word	0x40004800
 801dcf4:	fbffffff 	.word	0xfbffffff

0801dcf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b082      	sub	sp, #8
 801dcfc:	af00      	add	r7, sp, #0
 801dcfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801dd00:	46c0      	nop			@ (mov r8, r8)
 801dd02:	46bd      	mov	sp, r7
 801dd04:	b002      	add	sp, #8
 801dd06:	bd80      	pop	{r7, pc}

0801dd08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801dd08:	b580      	push	{r7, lr}
 801dd0a:	b084      	sub	sp, #16
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	2244      	movs	r2, #68	@ 0x44
 801dd14:	2100      	movs	r1, #0
 801dd16:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801dd18:	4b05      	ldr	r3, [pc, #20]	@ (801dd30 <USB_EnableGlobalInt+0x28>)
 801dd1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	b299      	uxth	r1, r3
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	2240      	movs	r2, #64	@ 0x40
 801dd24:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801dd26:	2300      	movs	r3, #0
}
 801dd28:	0018      	movs	r0, r3
 801dd2a:	46bd      	mov	sp, r7
 801dd2c:	b004      	add	sp, #16
 801dd2e:	bd80      	pop	{r7, pc}
 801dd30:	0000bf80 	.word	0x0000bf80

0801dd34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801dd34:	b580      	push	{r7, lr}
 801dd36:	b084      	sub	sp, #16
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801dd3c:	4b09      	ldr	r3, [pc, #36]	@ (801dd64 <USB_DisableGlobalInt+0x30>)
 801dd3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	2240      	movs	r2, #64	@ 0x40
 801dd44:	5a9b      	ldrh	r3, [r3, r2]
 801dd46:	b29b      	uxth	r3, r3
 801dd48:	68fa      	ldr	r2, [r7, #12]
 801dd4a:	b292      	uxth	r2, r2
 801dd4c:	43d2      	mvns	r2, r2
 801dd4e:	b292      	uxth	r2, r2
 801dd50:	4013      	ands	r3, r2
 801dd52:	b299      	uxth	r1, r3
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	2240      	movs	r2, #64	@ 0x40
 801dd58:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801dd5a:	2300      	movs	r3, #0
}
 801dd5c:	0018      	movs	r0, r3
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	b004      	add	sp, #16
 801dd62:	bd80      	pop	{r7, pc}
 801dd64:	0000bf80 	.word	0x0000bf80

0801dd68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801dd68:	b084      	sub	sp, #16
 801dd6a:	b590      	push	{r4, r7, lr}
 801dd6c:	b083      	sub	sp, #12
 801dd6e:	af00      	add	r7, sp, #0
 801dd70:	6078      	str	r0, [r7, #4]
 801dd72:	2004      	movs	r0, #4
 801dd74:	2410      	movs	r4, #16
 801dd76:	1900      	adds	r0, r0, r4
 801dd78:	2408      	movs	r4, #8
 801dd7a:	46a4      	mov	ip, r4
 801dd7c:	44bc      	add	ip, r7
 801dd7e:	4460      	add	r0, ip
 801dd80:	6001      	str	r1, [r0, #0]
 801dd82:	6042      	str	r2, [r0, #4]
 801dd84:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	2240      	movs	r2, #64	@ 0x40
 801dd8a:	2101      	movs	r1, #1
 801dd8c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	2240      	movs	r2, #64	@ 0x40
 801dd92:	2100      	movs	r1, #0
 801dd94:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	2244      	movs	r2, #68	@ 0x44
 801dd9a:	2100      	movs	r1, #0
 801dd9c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	2250      	movs	r2, #80	@ 0x50
 801dda2:	2100      	movs	r1, #0
 801dda4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801dda6:	2300      	movs	r3, #0
}
 801dda8:	0018      	movs	r0, r3
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	b003      	add	sp, #12
 801ddae:	bc90      	pop	{r4, r7}
 801ddb0:	bc08      	pop	{r3}
 801ddb2:	b004      	add	sp, #16
 801ddb4:	4718      	bx	r3
	...

0801ddb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ddb8:	b580      	push	{r7, lr}
 801ddba:	b09c      	sub	sp, #112	@ 0x70
 801ddbc:	af00      	add	r7, sp, #0
 801ddbe:	6078      	str	r0, [r7, #4]
 801ddc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801ddc2:	236f      	movs	r3, #111	@ 0x6f
 801ddc4:	18fb      	adds	r3, r7, r3
 801ddc6:	2200      	movs	r2, #0
 801ddc8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801ddca:	687a      	ldr	r2, [r7, #4]
 801ddcc:	683b      	ldr	r3, [r7, #0]
 801ddce:	781b      	ldrb	r3, [r3, #0]
 801ddd0:	009b      	lsls	r3, r3, #2
 801ddd2:	18d3      	adds	r3, r2, r3
 801ddd4:	881b      	ldrh	r3, [r3, #0]
 801ddd6:	b29a      	uxth	r2, r3
 801ddd8:	236c      	movs	r3, #108	@ 0x6c
 801ddda:	18fb      	adds	r3, r7, r3
 801dddc:	49a3      	ldr	r1, [pc, #652]	@ (801e06c <USB_ActivateEndpoint+0x2b4>)
 801ddde:	400a      	ands	r2, r1
 801dde0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801dde2:	683b      	ldr	r3, [r7, #0]
 801dde4:	78db      	ldrb	r3, [r3, #3]
 801dde6:	2b03      	cmp	r3, #3
 801dde8:	d017      	beq.n	801de1a <USB_ActivateEndpoint+0x62>
 801ddea:	dc28      	bgt.n	801de3e <USB_ActivateEndpoint+0x86>
 801ddec:	2b02      	cmp	r3, #2
 801ddee:	d00e      	beq.n	801de0e <USB_ActivateEndpoint+0x56>
 801ddf0:	dc25      	bgt.n	801de3e <USB_ActivateEndpoint+0x86>
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d002      	beq.n	801ddfc <USB_ActivateEndpoint+0x44>
 801ddf6:	2b01      	cmp	r3, #1
 801ddf8:	d018      	beq.n	801de2c <USB_ActivateEndpoint+0x74>
 801ddfa:	e020      	b.n	801de3e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801ddfc:	226c      	movs	r2, #108	@ 0x6c
 801ddfe:	18bb      	adds	r3, r7, r2
 801de00:	18ba      	adds	r2, r7, r2
 801de02:	8812      	ldrh	r2, [r2, #0]
 801de04:	2180      	movs	r1, #128	@ 0x80
 801de06:	0089      	lsls	r1, r1, #2
 801de08:	430a      	orrs	r2, r1
 801de0a:	801a      	strh	r2, [r3, #0]
      break;
 801de0c:	e01c      	b.n	801de48 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801de0e:	226c      	movs	r2, #108	@ 0x6c
 801de10:	18bb      	adds	r3, r7, r2
 801de12:	18ba      	adds	r2, r7, r2
 801de14:	8812      	ldrh	r2, [r2, #0]
 801de16:	801a      	strh	r2, [r3, #0]
      break;
 801de18:	e016      	b.n	801de48 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801de1a:	226c      	movs	r2, #108	@ 0x6c
 801de1c:	18bb      	adds	r3, r7, r2
 801de1e:	18ba      	adds	r2, r7, r2
 801de20:	8812      	ldrh	r2, [r2, #0]
 801de22:	21c0      	movs	r1, #192	@ 0xc0
 801de24:	00c9      	lsls	r1, r1, #3
 801de26:	430a      	orrs	r2, r1
 801de28:	801a      	strh	r2, [r3, #0]
      break;
 801de2a:	e00d      	b.n	801de48 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801de2c:	226c      	movs	r2, #108	@ 0x6c
 801de2e:	18bb      	adds	r3, r7, r2
 801de30:	18ba      	adds	r2, r7, r2
 801de32:	8812      	ldrh	r2, [r2, #0]
 801de34:	2180      	movs	r1, #128	@ 0x80
 801de36:	00c9      	lsls	r1, r1, #3
 801de38:	430a      	orrs	r2, r1
 801de3a:	801a      	strh	r2, [r3, #0]
      break;
 801de3c:	e004      	b.n	801de48 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801de3e:	236f      	movs	r3, #111	@ 0x6f
 801de40:	18fb      	adds	r3, r7, r3
 801de42:	2201      	movs	r2, #1
 801de44:	701a      	strb	r2, [r3, #0]
      break;
 801de46:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801de48:	687a      	ldr	r2, [r7, #4]
 801de4a:	683b      	ldr	r3, [r7, #0]
 801de4c:	781b      	ldrb	r3, [r3, #0]
 801de4e:	009b      	lsls	r3, r3, #2
 801de50:	18d3      	adds	r3, r2, r3
 801de52:	226c      	movs	r2, #108	@ 0x6c
 801de54:	18ba      	adds	r2, r7, r2
 801de56:	8812      	ldrh	r2, [r2, #0]
 801de58:	4985      	ldr	r1, [pc, #532]	@ (801e070 <USB_ActivateEndpoint+0x2b8>)
 801de5a:	430a      	orrs	r2, r1
 801de5c:	b292      	uxth	r2, r2
 801de5e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801de60:	687a      	ldr	r2, [r7, #4]
 801de62:	683b      	ldr	r3, [r7, #0]
 801de64:	781b      	ldrb	r3, [r3, #0]
 801de66:	009b      	lsls	r3, r3, #2
 801de68:	18d3      	adds	r3, r2, r3
 801de6a:	881b      	ldrh	r3, [r3, #0]
 801de6c:	b29b      	uxth	r3, r3
 801de6e:	b21b      	sxth	r3, r3
 801de70:	4a80      	ldr	r2, [pc, #512]	@ (801e074 <USB_ActivateEndpoint+0x2bc>)
 801de72:	4013      	ands	r3, r2
 801de74:	b21a      	sxth	r2, r3
 801de76:	683b      	ldr	r3, [r7, #0]
 801de78:	781b      	ldrb	r3, [r3, #0]
 801de7a:	b21b      	sxth	r3, r3
 801de7c:	4313      	orrs	r3, r2
 801de7e:	b21a      	sxth	r2, r3
 801de80:	2166      	movs	r1, #102	@ 0x66
 801de82:	187b      	adds	r3, r7, r1
 801de84:	801a      	strh	r2, [r3, #0]
 801de86:	687a      	ldr	r2, [r7, #4]
 801de88:	683b      	ldr	r3, [r7, #0]
 801de8a:	781b      	ldrb	r3, [r3, #0]
 801de8c:	009b      	lsls	r3, r3, #2
 801de8e:	18d3      	adds	r3, r2, r3
 801de90:	187a      	adds	r2, r7, r1
 801de92:	8812      	ldrh	r2, [r2, #0]
 801de94:	4976      	ldr	r1, [pc, #472]	@ (801e070 <USB_ActivateEndpoint+0x2b8>)
 801de96:	430a      	orrs	r2, r1
 801de98:	b292      	uxth	r2, r2
 801de9a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801de9c:	683b      	ldr	r3, [r7, #0]
 801de9e:	7b1b      	ldrb	r3, [r3, #12]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d000      	beq.n	801dea6 <USB_ActivateEndpoint+0xee>
 801dea4:	e178      	b.n	801e198 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801dea6:	683b      	ldr	r3, [r7, #0]
 801dea8:	785b      	ldrb	r3, [r3, #1]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d100      	bne.n	801deb0 <USB_ActivateEndpoint+0xf8>
 801deae:	e07a      	b.n	801dfa6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	61bb      	str	r3, [r7, #24]
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	2250      	movs	r2, #80	@ 0x50
 801deb8:	5a9b      	ldrh	r3, [r3, r2]
 801deba:	b29b      	uxth	r3, r3
 801debc:	001a      	movs	r2, r3
 801debe:	69bb      	ldr	r3, [r7, #24]
 801dec0:	189b      	adds	r3, r3, r2
 801dec2:	61bb      	str	r3, [r7, #24]
 801dec4:	683b      	ldr	r3, [r7, #0]
 801dec6:	781b      	ldrb	r3, [r3, #0]
 801dec8:	00da      	lsls	r2, r3, #3
 801deca:	69bb      	ldr	r3, [r7, #24]
 801decc:	18d3      	adds	r3, r2, r3
 801dece:	2280      	movs	r2, #128	@ 0x80
 801ded0:	00d2      	lsls	r2, r2, #3
 801ded2:	4694      	mov	ip, r2
 801ded4:	4463      	add	r3, ip
 801ded6:	617b      	str	r3, [r7, #20]
 801ded8:	683b      	ldr	r3, [r7, #0]
 801deda:	88db      	ldrh	r3, [r3, #6]
 801dedc:	085b      	lsrs	r3, r3, #1
 801dede:	b29b      	uxth	r3, r3
 801dee0:	18db      	adds	r3, r3, r3
 801dee2:	b29a      	uxth	r2, r3
 801dee4:	697b      	ldr	r3, [r7, #20]
 801dee6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dee8:	687a      	ldr	r2, [r7, #4]
 801deea:	683b      	ldr	r3, [r7, #0]
 801deec:	781b      	ldrb	r3, [r3, #0]
 801deee:	009b      	lsls	r3, r3, #2
 801def0:	18d2      	adds	r2, r2, r3
 801def2:	2112      	movs	r1, #18
 801def4:	187b      	adds	r3, r7, r1
 801def6:	8812      	ldrh	r2, [r2, #0]
 801def8:	801a      	strh	r2, [r3, #0]
 801defa:	187b      	adds	r3, r7, r1
 801defc:	881b      	ldrh	r3, [r3, #0]
 801defe:	2240      	movs	r2, #64	@ 0x40
 801df00:	4013      	ands	r3, r2
 801df02:	d016      	beq.n	801df32 <USB_ActivateEndpoint+0x17a>
 801df04:	687a      	ldr	r2, [r7, #4]
 801df06:	683b      	ldr	r3, [r7, #0]
 801df08:	781b      	ldrb	r3, [r3, #0]
 801df0a:	009b      	lsls	r3, r3, #2
 801df0c:	18d3      	adds	r3, r2, r3
 801df0e:	881b      	ldrh	r3, [r3, #0]
 801df10:	b29a      	uxth	r2, r3
 801df12:	2010      	movs	r0, #16
 801df14:	183b      	adds	r3, r7, r0
 801df16:	4957      	ldr	r1, [pc, #348]	@ (801e074 <USB_ActivateEndpoint+0x2bc>)
 801df18:	400a      	ands	r2, r1
 801df1a:	801a      	strh	r2, [r3, #0]
 801df1c:	687a      	ldr	r2, [r7, #4]
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	781b      	ldrb	r3, [r3, #0]
 801df22:	009b      	lsls	r3, r3, #2
 801df24:	18d3      	adds	r3, r2, r3
 801df26:	183a      	adds	r2, r7, r0
 801df28:	8812      	ldrh	r2, [r2, #0]
 801df2a:	4953      	ldr	r1, [pc, #332]	@ (801e078 <USB_ActivateEndpoint+0x2c0>)
 801df2c:	430a      	orrs	r2, r1
 801df2e:	b292      	uxth	r2, r2
 801df30:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801df32:	683b      	ldr	r3, [r7, #0]
 801df34:	78db      	ldrb	r3, [r3, #3]
 801df36:	2b01      	cmp	r3, #1
 801df38:	d01d      	beq.n	801df76 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801df3a:	687a      	ldr	r2, [r7, #4]
 801df3c:	683b      	ldr	r3, [r7, #0]
 801df3e:	781b      	ldrb	r3, [r3, #0]
 801df40:	009b      	lsls	r3, r3, #2
 801df42:	18d3      	adds	r3, r2, r3
 801df44:	881b      	ldrh	r3, [r3, #0]
 801df46:	b29a      	uxth	r2, r3
 801df48:	200c      	movs	r0, #12
 801df4a:	183b      	adds	r3, r7, r0
 801df4c:	494b      	ldr	r1, [pc, #300]	@ (801e07c <USB_ActivateEndpoint+0x2c4>)
 801df4e:	400a      	ands	r2, r1
 801df50:	801a      	strh	r2, [r3, #0]
 801df52:	183b      	adds	r3, r7, r0
 801df54:	183a      	adds	r2, r7, r0
 801df56:	8812      	ldrh	r2, [r2, #0]
 801df58:	2120      	movs	r1, #32
 801df5a:	404a      	eors	r2, r1
 801df5c:	801a      	strh	r2, [r3, #0]
 801df5e:	687a      	ldr	r2, [r7, #4]
 801df60:	683b      	ldr	r3, [r7, #0]
 801df62:	781b      	ldrb	r3, [r3, #0]
 801df64:	009b      	lsls	r3, r3, #2
 801df66:	18d3      	adds	r3, r2, r3
 801df68:	183a      	adds	r2, r7, r0
 801df6a:	8812      	ldrh	r2, [r2, #0]
 801df6c:	4940      	ldr	r1, [pc, #256]	@ (801e070 <USB_ActivateEndpoint+0x2b8>)
 801df6e:	430a      	orrs	r2, r1
 801df70:	b292      	uxth	r2, r2
 801df72:	801a      	strh	r2, [r3, #0]
 801df74:	e2b4      	b.n	801e4e0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801df76:	687a      	ldr	r2, [r7, #4]
 801df78:	683b      	ldr	r3, [r7, #0]
 801df7a:	781b      	ldrb	r3, [r3, #0]
 801df7c:	009b      	lsls	r3, r3, #2
 801df7e:	18d3      	adds	r3, r2, r3
 801df80:	881b      	ldrh	r3, [r3, #0]
 801df82:	b29a      	uxth	r2, r3
 801df84:	200e      	movs	r0, #14
 801df86:	183b      	adds	r3, r7, r0
 801df88:	493c      	ldr	r1, [pc, #240]	@ (801e07c <USB_ActivateEndpoint+0x2c4>)
 801df8a:	400a      	ands	r2, r1
 801df8c:	801a      	strh	r2, [r3, #0]
 801df8e:	687a      	ldr	r2, [r7, #4]
 801df90:	683b      	ldr	r3, [r7, #0]
 801df92:	781b      	ldrb	r3, [r3, #0]
 801df94:	009b      	lsls	r3, r3, #2
 801df96:	18d3      	adds	r3, r2, r3
 801df98:	183a      	adds	r2, r7, r0
 801df9a:	8812      	ldrh	r2, [r2, #0]
 801df9c:	4934      	ldr	r1, [pc, #208]	@ (801e070 <USB_ActivateEndpoint+0x2b8>)
 801df9e:	430a      	orrs	r2, r1
 801dfa0:	b292      	uxth	r2, r2
 801dfa2:	801a      	strh	r2, [r3, #0]
 801dfa4:	e29c      	b.n	801e4e0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	633b      	str	r3, [r7, #48]	@ 0x30
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	2250      	movs	r2, #80	@ 0x50
 801dfae:	5a9b      	ldrh	r3, [r3, r2]
 801dfb0:	b29b      	uxth	r3, r3
 801dfb2:	001a      	movs	r2, r3
 801dfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfb6:	189b      	adds	r3, r3, r2
 801dfb8:	633b      	str	r3, [r7, #48]	@ 0x30
 801dfba:	683b      	ldr	r3, [r7, #0]
 801dfbc:	781b      	ldrb	r3, [r3, #0]
 801dfbe:	00da      	lsls	r2, r3, #3
 801dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfc2:	18d3      	adds	r3, r2, r3
 801dfc4:	4a2e      	ldr	r2, [pc, #184]	@ (801e080 <USB_ActivateEndpoint+0x2c8>)
 801dfc6:	4694      	mov	ip, r2
 801dfc8:	4463      	add	r3, ip
 801dfca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dfcc:	683b      	ldr	r3, [r7, #0]
 801dfce:	88db      	ldrh	r3, [r3, #6]
 801dfd0:	085b      	lsrs	r3, r3, #1
 801dfd2:	b29b      	uxth	r3, r3
 801dfd4:	18db      	adds	r3, r3, r3
 801dfd6:	b29a      	uxth	r2, r3
 801dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfda:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2250      	movs	r2, #80	@ 0x50
 801dfe4:	5a9b      	ldrh	r3, [r3, r2]
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	001a      	movs	r2, r3
 801dfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfec:	189b      	adds	r3, r3, r2
 801dfee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dff0:	683b      	ldr	r3, [r7, #0]
 801dff2:	781b      	ldrb	r3, [r3, #0]
 801dff4:	00da      	lsls	r2, r3, #3
 801dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dff8:	18d3      	adds	r3, r2, r3
 801dffa:	4a22      	ldr	r2, [pc, #136]	@ (801e084 <USB_ActivateEndpoint+0x2cc>)
 801dffc:	4694      	mov	ip, r2
 801dffe:	4463      	add	r3, ip
 801e000:	627b      	str	r3, [r7, #36]	@ 0x24
 801e002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e004:	881b      	ldrh	r3, [r3, #0]
 801e006:	b29b      	uxth	r3, r3
 801e008:	059b      	lsls	r3, r3, #22
 801e00a:	0d9b      	lsrs	r3, r3, #22
 801e00c:	b29a      	uxth	r2, r3
 801e00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e010:	801a      	strh	r2, [r3, #0]
 801e012:	683b      	ldr	r3, [r7, #0]
 801e014:	691b      	ldr	r3, [r3, #16]
 801e016:	2b3e      	cmp	r3, #62	@ 0x3e
 801e018:	d91a      	bls.n	801e050 <USB_ActivateEndpoint+0x298>
 801e01a:	683b      	ldr	r3, [r7, #0]
 801e01c:	691b      	ldr	r3, [r3, #16]
 801e01e:	095b      	lsrs	r3, r3, #5
 801e020:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e022:	683b      	ldr	r3, [r7, #0]
 801e024:	691b      	ldr	r3, [r3, #16]
 801e026:	221f      	movs	r2, #31
 801e028:	4013      	ands	r3, r2
 801e02a:	d102      	bne.n	801e032 <USB_ActivateEndpoint+0x27a>
 801e02c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e02e:	3b01      	subs	r3, #1
 801e030:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e034:	881b      	ldrh	r3, [r3, #0]
 801e036:	b29a      	uxth	r2, r3
 801e038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e03a:	b29b      	uxth	r3, r3
 801e03c:	029b      	lsls	r3, r3, #10
 801e03e:	b29b      	uxth	r3, r3
 801e040:	4313      	orrs	r3, r2
 801e042:	b29b      	uxth	r3, r3
 801e044:	4a10      	ldr	r2, [pc, #64]	@ (801e088 <USB_ActivateEndpoint+0x2d0>)
 801e046:	4313      	orrs	r3, r2
 801e048:	b29a      	uxth	r2, r3
 801e04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e04c:	801a      	strh	r2, [r3, #0]
 801e04e:	e034      	b.n	801e0ba <USB_ActivateEndpoint+0x302>
 801e050:	683b      	ldr	r3, [r7, #0]
 801e052:	691b      	ldr	r3, [r3, #16]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d119      	bne.n	801e08c <USB_ActivateEndpoint+0x2d4>
 801e058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e05a:	881b      	ldrh	r3, [r3, #0]
 801e05c:	b29b      	uxth	r3, r3
 801e05e:	4a0a      	ldr	r2, [pc, #40]	@ (801e088 <USB_ActivateEndpoint+0x2d0>)
 801e060:	4313      	orrs	r3, r2
 801e062:	b29a      	uxth	r2, r3
 801e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e066:	801a      	strh	r2, [r3, #0]
 801e068:	e027      	b.n	801e0ba <USB_ActivateEndpoint+0x302>
 801e06a:	46c0      	nop			@ (mov r8, r8)
 801e06c:	ffff898f 	.word	0xffff898f
 801e070:	ffff8080 	.word	0xffff8080
 801e074:	ffff8f8f 	.word	0xffff8f8f
 801e078:	ffff80c0 	.word	0xffff80c0
 801e07c:	ffff8fbf 	.word	0xffff8fbf
 801e080:	00000404 	.word	0x00000404
 801e084:	00000406 	.word	0x00000406
 801e088:	ffff8000 	.word	0xffff8000
 801e08c:	683b      	ldr	r3, [r7, #0]
 801e08e:	691b      	ldr	r3, [r3, #16]
 801e090:	085b      	lsrs	r3, r3, #1
 801e092:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	691b      	ldr	r3, [r3, #16]
 801e098:	2201      	movs	r2, #1
 801e09a:	4013      	ands	r3, r2
 801e09c:	d002      	beq.n	801e0a4 <USB_ActivateEndpoint+0x2ec>
 801e09e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0a6:	881b      	ldrh	r3, [r3, #0]
 801e0a8:	b29a      	uxth	r2, r3
 801e0aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e0ac:	b29b      	uxth	r3, r3
 801e0ae:	029b      	lsls	r3, r3, #10
 801e0b0:	b29b      	uxth	r3, r3
 801e0b2:	4313      	orrs	r3, r2
 801e0b4:	b29a      	uxth	r2, r3
 801e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e0ba:	687a      	ldr	r2, [r7, #4]
 801e0bc:	683b      	ldr	r3, [r7, #0]
 801e0be:	781b      	ldrb	r3, [r3, #0]
 801e0c0:	009b      	lsls	r3, r3, #2
 801e0c2:	18d2      	adds	r2, r2, r3
 801e0c4:	2122      	movs	r1, #34	@ 0x22
 801e0c6:	187b      	adds	r3, r7, r1
 801e0c8:	8812      	ldrh	r2, [r2, #0]
 801e0ca:	801a      	strh	r2, [r3, #0]
 801e0cc:	187b      	adds	r3, r7, r1
 801e0ce:	881a      	ldrh	r2, [r3, #0]
 801e0d0:	2380      	movs	r3, #128	@ 0x80
 801e0d2:	01db      	lsls	r3, r3, #7
 801e0d4:	4013      	ands	r3, r2
 801e0d6:	d016      	beq.n	801e106 <USB_ActivateEndpoint+0x34e>
 801e0d8:	687a      	ldr	r2, [r7, #4]
 801e0da:	683b      	ldr	r3, [r7, #0]
 801e0dc:	781b      	ldrb	r3, [r3, #0]
 801e0de:	009b      	lsls	r3, r3, #2
 801e0e0:	18d3      	adds	r3, r2, r3
 801e0e2:	881b      	ldrh	r3, [r3, #0]
 801e0e4:	b29a      	uxth	r2, r3
 801e0e6:	2020      	movs	r0, #32
 801e0e8:	183b      	adds	r3, r7, r0
 801e0ea:	49dd      	ldr	r1, [pc, #884]	@ (801e460 <USB_ActivateEndpoint+0x6a8>)
 801e0ec:	400a      	ands	r2, r1
 801e0ee:	801a      	strh	r2, [r3, #0]
 801e0f0:	687a      	ldr	r2, [r7, #4]
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	781b      	ldrb	r3, [r3, #0]
 801e0f6:	009b      	lsls	r3, r3, #2
 801e0f8:	18d3      	adds	r3, r2, r3
 801e0fa:	183a      	adds	r2, r7, r0
 801e0fc:	8812      	ldrh	r2, [r2, #0]
 801e0fe:	49d9      	ldr	r1, [pc, #868]	@ (801e464 <USB_ActivateEndpoint+0x6ac>)
 801e100:	430a      	orrs	r2, r1
 801e102:	b292      	uxth	r2, r2
 801e104:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801e106:	683b      	ldr	r3, [r7, #0]
 801e108:	781b      	ldrb	r3, [r3, #0]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d125      	bne.n	801e15a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e10e:	687a      	ldr	r2, [r7, #4]
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	781b      	ldrb	r3, [r3, #0]
 801e114:	009b      	lsls	r3, r3, #2
 801e116:	18d3      	adds	r3, r2, r3
 801e118:	881b      	ldrh	r3, [r3, #0]
 801e11a:	b29a      	uxth	r2, r3
 801e11c:	201c      	movs	r0, #28
 801e11e:	183b      	adds	r3, r7, r0
 801e120:	49d1      	ldr	r1, [pc, #836]	@ (801e468 <USB_ActivateEndpoint+0x6b0>)
 801e122:	400a      	ands	r2, r1
 801e124:	801a      	strh	r2, [r3, #0]
 801e126:	183b      	adds	r3, r7, r0
 801e128:	183a      	adds	r2, r7, r0
 801e12a:	8812      	ldrh	r2, [r2, #0]
 801e12c:	2180      	movs	r1, #128	@ 0x80
 801e12e:	0149      	lsls	r1, r1, #5
 801e130:	404a      	eors	r2, r1
 801e132:	801a      	strh	r2, [r3, #0]
 801e134:	183b      	adds	r3, r7, r0
 801e136:	183a      	adds	r2, r7, r0
 801e138:	8812      	ldrh	r2, [r2, #0]
 801e13a:	2180      	movs	r1, #128	@ 0x80
 801e13c:	0189      	lsls	r1, r1, #6
 801e13e:	404a      	eors	r2, r1
 801e140:	801a      	strh	r2, [r3, #0]
 801e142:	687a      	ldr	r2, [r7, #4]
 801e144:	683b      	ldr	r3, [r7, #0]
 801e146:	781b      	ldrb	r3, [r3, #0]
 801e148:	009b      	lsls	r3, r3, #2
 801e14a:	18d3      	adds	r3, r2, r3
 801e14c:	183a      	adds	r2, r7, r0
 801e14e:	8812      	ldrh	r2, [r2, #0]
 801e150:	49c6      	ldr	r1, [pc, #792]	@ (801e46c <USB_ActivateEndpoint+0x6b4>)
 801e152:	430a      	orrs	r2, r1
 801e154:	b292      	uxth	r2, r2
 801e156:	801a      	strh	r2, [r3, #0]
 801e158:	e1c2      	b.n	801e4e0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801e15a:	687a      	ldr	r2, [r7, #4]
 801e15c:	683b      	ldr	r3, [r7, #0]
 801e15e:	781b      	ldrb	r3, [r3, #0]
 801e160:	009b      	lsls	r3, r3, #2
 801e162:	18d3      	adds	r3, r2, r3
 801e164:	881b      	ldrh	r3, [r3, #0]
 801e166:	b29a      	uxth	r2, r3
 801e168:	201e      	movs	r0, #30
 801e16a:	183b      	adds	r3, r7, r0
 801e16c:	49be      	ldr	r1, [pc, #760]	@ (801e468 <USB_ActivateEndpoint+0x6b0>)
 801e16e:	400a      	ands	r2, r1
 801e170:	801a      	strh	r2, [r3, #0]
 801e172:	183b      	adds	r3, r7, r0
 801e174:	183a      	adds	r2, r7, r0
 801e176:	8812      	ldrh	r2, [r2, #0]
 801e178:	2180      	movs	r1, #128	@ 0x80
 801e17a:	0189      	lsls	r1, r1, #6
 801e17c:	404a      	eors	r2, r1
 801e17e:	801a      	strh	r2, [r3, #0]
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	683b      	ldr	r3, [r7, #0]
 801e184:	781b      	ldrb	r3, [r3, #0]
 801e186:	009b      	lsls	r3, r3, #2
 801e188:	18d3      	adds	r3, r2, r3
 801e18a:	183a      	adds	r2, r7, r0
 801e18c:	8812      	ldrh	r2, [r2, #0]
 801e18e:	49b7      	ldr	r1, [pc, #732]	@ (801e46c <USB_ActivateEndpoint+0x6b4>)
 801e190:	430a      	orrs	r2, r1
 801e192:	b292      	uxth	r2, r2
 801e194:	801a      	strh	r2, [r3, #0]
 801e196:	e1a3      	b.n	801e4e0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801e198:	683b      	ldr	r3, [r7, #0]
 801e19a:	78db      	ldrb	r3, [r3, #3]
 801e19c:	2b02      	cmp	r3, #2
 801e19e:	d117      	bne.n	801e1d0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e1a0:	687a      	ldr	r2, [r7, #4]
 801e1a2:	683b      	ldr	r3, [r7, #0]
 801e1a4:	781b      	ldrb	r3, [r3, #0]
 801e1a6:	009b      	lsls	r3, r3, #2
 801e1a8:	18d3      	adds	r3, r2, r3
 801e1aa:	881b      	ldrh	r3, [r3, #0]
 801e1ac:	b29a      	uxth	r2, r3
 801e1ae:	2062      	movs	r0, #98	@ 0x62
 801e1b0:	183b      	adds	r3, r7, r0
 801e1b2:	49ab      	ldr	r1, [pc, #684]	@ (801e460 <USB_ActivateEndpoint+0x6a8>)
 801e1b4:	400a      	ands	r2, r1
 801e1b6:	801a      	strh	r2, [r3, #0]
 801e1b8:	687a      	ldr	r2, [r7, #4]
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	781b      	ldrb	r3, [r3, #0]
 801e1be:	009b      	lsls	r3, r3, #2
 801e1c0:	18d3      	adds	r3, r2, r3
 801e1c2:	183a      	adds	r2, r7, r0
 801e1c4:	8812      	ldrh	r2, [r2, #0]
 801e1c6:	49aa      	ldr	r1, [pc, #680]	@ (801e470 <USB_ActivateEndpoint+0x6b8>)
 801e1c8:	430a      	orrs	r2, r1
 801e1ca:	b292      	uxth	r2, r2
 801e1cc:	801a      	strh	r2, [r3, #0]
 801e1ce:	e016      	b.n	801e1fe <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801e1d0:	687a      	ldr	r2, [r7, #4]
 801e1d2:	683b      	ldr	r3, [r7, #0]
 801e1d4:	781b      	ldrb	r3, [r3, #0]
 801e1d6:	009b      	lsls	r3, r3, #2
 801e1d8:	18d3      	adds	r3, r2, r3
 801e1da:	881b      	ldrh	r3, [r3, #0]
 801e1dc:	b29a      	uxth	r2, r3
 801e1de:	2064      	movs	r0, #100	@ 0x64
 801e1e0:	183b      	adds	r3, r7, r0
 801e1e2:	49a4      	ldr	r1, [pc, #656]	@ (801e474 <USB_ActivateEndpoint+0x6bc>)
 801e1e4:	400a      	ands	r2, r1
 801e1e6:	801a      	strh	r2, [r3, #0]
 801e1e8:	687a      	ldr	r2, [r7, #4]
 801e1ea:	683b      	ldr	r3, [r7, #0]
 801e1ec:	781b      	ldrb	r3, [r3, #0]
 801e1ee:	009b      	lsls	r3, r3, #2
 801e1f0:	18d3      	adds	r3, r2, r3
 801e1f2:	183a      	adds	r2, r7, r0
 801e1f4:	8812      	ldrh	r2, [r2, #0]
 801e1f6:	499d      	ldr	r1, [pc, #628]	@ (801e46c <USB_ActivateEndpoint+0x6b4>)
 801e1f8:	430a      	orrs	r2, r1
 801e1fa:	b292      	uxth	r2, r2
 801e1fc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	2250      	movs	r2, #80	@ 0x50
 801e206:	5a9b      	ldrh	r3, [r3, r2]
 801e208:	b29b      	uxth	r3, r3
 801e20a:	001a      	movs	r2, r3
 801e20c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e20e:	189b      	adds	r3, r3, r2
 801e210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e212:	683b      	ldr	r3, [r7, #0]
 801e214:	781b      	ldrb	r3, [r3, #0]
 801e216:	00da      	lsls	r2, r3, #3
 801e218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e21a:	18d3      	adds	r3, r2, r3
 801e21c:	2280      	movs	r2, #128	@ 0x80
 801e21e:	00d2      	lsls	r2, r2, #3
 801e220:	4694      	mov	ip, r2
 801e222:	4463      	add	r3, ip
 801e224:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	891b      	ldrh	r3, [r3, #8]
 801e22a:	085b      	lsrs	r3, r3, #1
 801e22c:	b29b      	uxth	r3, r3
 801e22e:	18db      	adds	r3, r3, r3
 801e230:	b29a      	uxth	r2, r3
 801e232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e234:	801a      	strh	r2, [r3, #0]
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	657b      	str	r3, [r7, #84]	@ 0x54
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	2250      	movs	r2, #80	@ 0x50
 801e23e:	5a9b      	ldrh	r3, [r3, r2]
 801e240:	b29b      	uxth	r3, r3
 801e242:	001a      	movs	r2, r3
 801e244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e246:	189b      	adds	r3, r3, r2
 801e248:	657b      	str	r3, [r7, #84]	@ 0x54
 801e24a:	683b      	ldr	r3, [r7, #0]
 801e24c:	781b      	ldrb	r3, [r3, #0]
 801e24e:	00da      	lsls	r2, r3, #3
 801e250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e252:	18d3      	adds	r3, r2, r3
 801e254:	4a88      	ldr	r2, [pc, #544]	@ (801e478 <USB_ActivateEndpoint+0x6c0>)
 801e256:	4694      	mov	ip, r2
 801e258:	4463      	add	r3, ip
 801e25a:	653b      	str	r3, [r7, #80]	@ 0x50
 801e25c:	683b      	ldr	r3, [r7, #0]
 801e25e:	895b      	ldrh	r3, [r3, #10]
 801e260:	085b      	lsrs	r3, r3, #1
 801e262:	b29b      	uxth	r3, r3
 801e264:	18db      	adds	r3, r3, r3
 801e266:	b29a      	uxth	r2, r3
 801e268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e26a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	785b      	ldrb	r3, [r3, #1]
 801e270:	2b00      	cmp	r3, #0
 801e272:	d000      	beq.n	801e276 <USB_ActivateEndpoint+0x4be>
 801e274:	e087      	b.n	801e386 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e276:	687a      	ldr	r2, [r7, #4]
 801e278:	683b      	ldr	r3, [r7, #0]
 801e27a:	781b      	ldrb	r3, [r3, #0]
 801e27c:	009b      	lsls	r3, r3, #2
 801e27e:	18d2      	adds	r2, r2, r3
 801e280:	2140      	movs	r1, #64	@ 0x40
 801e282:	187b      	adds	r3, r7, r1
 801e284:	8812      	ldrh	r2, [r2, #0]
 801e286:	801a      	strh	r2, [r3, #0]
 801e288:	187b      	adds	r3, r7, r1
 801e28a:	881a      	ldrh	r2, [r3, #0]
 801e28c:	2380      	movs	r3, #128	@ 0x80
 801e28e:	01db      	lsls	r3, r3, #7
 801e290:	4013      	ands	r3, r2
 801e292:	d016      	beq.n	801e2c2 <USB_ActivateEndpoint+0x50a>
 801e294:	687a      	ldr	r2, [r7, #4]
 801e296:	683b      	ldr	r3, [r7, #0]
 801e298:	781b      	ldrb	r3, [r3, #0]
 801e29a:	009b      	lsls	r3, r3, #2
 801e29c:	18d3      	adds	r3, r2, r3
 801e29e:	881b      	ldrh	r3, [r3, #0]
 801e2a0:	b29a      	uxth	r2, r3
 801e2a2:	203e      	movs	r0, #62	@ 0x3e
 801e2a4:	183b      	adds	r3, r7, r0
 801e2a6:	496e      	ldr	r1, [pc, #440]	@ (801e460 <USB_ActivateEndpoint+0x6a8>)
 801e2a8:	400a      	ands	r2, r1
 801e2aa:	801a      	strh	r2, [r3, #0]
 801e2ac:	687a      	ldr	r2, [r7, #4]
 801e2ae:	683b      	ldr	r3, [r7, #0]
 801e2b0:	781b      	ldrb	r3, [r3, #0]
 801e2b2:	009b      	lsls	r3, r3, #2
 801e2b4:	18d3      	adds	r3, r2, r3
 801e2b6:	183a      	adds	r2, r7, r0
 801e2b8:	8812      	ldrh	r2, [r2, #0]
 801e2ba:	496a      	ldr	r1, [pc, #424]	@ (801e464 <USB_ActivateEndpoint+0x6ac>)
 801e2bc:	430a      	orrs	r2, r1
 801e2be:	b292      	uxth	r2, r2
 801e2c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e2c2:	687a      	ldr	r2, [r7, #4]
 801e2c4:	683b      	ldr	r3, [r7, #0]
 801e2c6:	781b      	ldrb	r3, [r3, #0]
 801e2c8:	009b      	lsls	r3, r3, #2
 801e2ca:	18d2      	adds	r2, r2, r3
 801e2cc:	213c      	movs	r1, #60	@ 0x3c
 801e2ce:	187b      	adds	r3, r7, r1
 801e2d0:	8812      	ldrh	r2, [r2, #0]
 801e2d2:	801a      	strh	r2, [r3, #0]
 801e2d4:	187b      	adds	r3, r7, r1
 801e2d6:	881b      	ldrh	r3, [r3, #0]
 801e2d8:	2240      	movs	r2, #64	@ 0x40
 801e2da:	4013      	ands	r3, r2
 801e2dc:	d016      	beq.n	801e30c <USB_ActivateEndpoint+0x554>
 801e2de:	687a      	ldr	r2, [r7, #4]
 801e2e0:	683b      	ldr	r3, [r7, #0]
 801e2e2:	781b      	ldrb	r3, [r3, #0]
 801e2e4:	009b      	lsls	r3, r3, #2
 801e2e6:	18d3      	adds	r3, r2, r3
 801e2e8:	881b      	ldrh	r3, [r3, #0]
 801e2ea:	b29a      	uxth	r2, r3
 801e2ec:	203a      	movs	r0, #58	@ 0x3a
 801e2ee:	183b      	adds	r3, r7, r0
 801e2f0:	495b      	ldr	r1, [pc, #364]	@ (801e460 <USB_ActivateEndpoint+0x6a8>)
 801e2f2:	400a      	ands	r2, r1
 801e2f4:	801a      	strh	r2, [r3, #0]
 801e2f6:	687a      	ldr	r2, [r7, #4]
 801e2f8:	683b      	ldr	r3, [r7, #0]
 801e2fa:	781b      	ldrb	r3, [r3, #0]
 801e2fc:	009b      	lsls	r3, r3, #2
 801e2fe:	18d3      	adds	r3, r2, r3
 801e300:	183a      	adds	r2, r7, r0
 801e302:	8812      	ldrh	r2, [r2, #0]
 801e304:	495d      	ldr	r1, [pc, #372]	@ (801e47c <USB_ActivateEndpoint+0x6c4>)
 801e306:	430a      	orrs	r2, r1
 801e308:	b292      	uxth	r2, r2
 801e30a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e30c:	687a      	ldr	r2, [r7, #4]
 801e30e:	683b      	ldr	r3, [r7, #0]
 801e310:	781b      	ldrb	r3, [r3, #0]
 801e312:	009b      	lsls	r3, r3, #2
 801e314:	18d3      	adds	r3, r2, r3
 801e316:	881b      	ldrh	r3, [r3, #0]
 801e318:	b29a      	uxth	r2, r3
 801e31a:	2038      	movs	r0, #56	@ 0x38
 801e31c:	183b      	adds	r3, r7, r0
 801e31e:	4952      	ldr	r1, [pc, #328]	@ (801e468 <USB_ActivateEndpoint+0x6b0>)
 801e320:	400a      	ands	r2, r1
 801e322:	801a      	strh	r2, [r3, #0]
 801e324:	183b      	adds	r3, r7, r0
 801e326:	183a      	adds	r2, r7, r0
 801e328:	8812      	ldrh	r2, [r2, #0]
 801e32a:	2180      	movs	r1, #128	@ 0x80
 801e32c:	0149      	lsls	r1, r1, #5
 801e32e:	404a      	eors	r2, r1
 801e330:	801a      	strh	r2, [r3, #0]
 801e332:	183b      	adds	r3, r7, r0
 801e334:	183a      	adds	r2, r7, r0
 801e336:	8812      	ldrh	r2, [r2, #0]
 801e338:	2180      	movs	r1, #128	@ 0x80
 801e33a:	0189      	lsls	r1, r1, #6
 801e33c:	404a      	eors	r2, r1
 801e33e:	801a      	strh	r2, [r3, #0]
 801e340:	687a      	ldr	r2, [r7, #4]
 801e342:	683b      	ldr	r3, [r7, #0]
 801e344:	781b      	ldrb	r3, [r3, #0]
 801e346:	009b      	lsls	r3, r3, #2
 801e348:	18d3      	adds	r3, r2, r3
 801e34a:	183a      	adds	r2, r7, r0
 801e34c:	8812      	ldrh	r2, [r2, #0]
 801e34e:	4947      	ldr	r1, [pc, #284]	@ (801e46c <USB_ActivateEndpoint+0x6b4>)
 801e350:	430a      	orrs	r2, r1
 801e352:	b292      	uxth	r2, r2
 801e354:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e356:	687a      	ldr	r2, [r7, #4]
 801e358:	683b      	ldr	r3, [r7, #0]
 801e35a:	781b      	ldrb	r3, [r3, #0]
 801e35c:	009b      	lsls	r3, r3, #2
 801e35e:	18d3      	adds	r3, r2, r3
 801e360:	881b      	ldrh	r3, [r3, #0]
 801e362:	b29a      	uxth	r2, r3
 801e364:	2036      	movs	r0, #54	@ 0x36
 801e366:	183b      	adds	r3, r7, r0
 801e368:	4945      	ldr	r1, [pc, #276]	@ (801e480 <USB_ActivateEndpoint+0x6c8>)
 801e36a:	400a      	ands	r2, r1
 801e36c:	801a      	strh	r2, [r3, #0]
 801e36e:	687a      	ldr	r2, [r7, #4]
 801e370:	683b      	ldr	r3, [r7, #0]
 801e372:	781b      	ldrb	r3, [r3, #0]
 801e374:	009b      	lsls	r3, r3, #2
 801e376:	18d3      	adds	r3, r2, r3
 801e378:	183a      	adds	r2, r7, r0
 801e37a:	8812      	ldrh	r2, [r2, #0]
 801e37c:	493b      	ldr	r1, [pc, #236]	@ (801e46c <USB_ActivateEndpoint+0x6b4>)
 801e37e:	430a      	orrs	r2, r1
 801e380:	b292      	uxth	r2, r2
 801e382:	801a      	strh	r2, [r3, #0]
 801e384:	e0ac      	b.n	801e4e0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e386:	687a      	ldr	r2, [r7, #4]
 801e388:	683b      	ldr	r3, [r7, #0]
 801e38a:	781b      	ldrb	r3, [r3, #0]
 801e38c:	009b      	lsls	r3, r3, #2
 801e38e:	18d2      	adds	r2, r2, r3
 801e390:	214e      	movs	r1, #78	@ 0x4e
 801e392:	187b      	adds	r3, r7, r1
 801e394:	8812      	ldrh	r2, [r2, #0]
 801e396:	801a      	strh	r2, [r3, #0]
 801e398:	187b      	adds	r3, r7, r1
 801e39a:	881a      	ldrh	r2, [r3, #0]
 801e39c:	2380      	movs	r3, #128	@ 0x80
 801e39e:	01db      	lsls	r3, r3, #7
 801e3a0:	4013      	ands	r3, r2
 801e3a2:	d016      	beq.n	801e3d2 <USB_ActivateEndpoint+0x61a>
 801e3a4:	687a      	ldr	r2, [r7, #4]
 801e3a6:	683b      	ldr	r3, [r7, #0]
 801e3a8:	781b      	ldrb	r3, [r3, #0]
 801e3aa:	009b      	lsls	r3, r3, #2
 801e3ac:	18d3      	adds	r3, r2, r3
 801e3ae:	881b      	ldrh	r3, [r3, #0]
 801e3b0:	b29a      	uxth	r2, r3
 801e3b2:	204c      	movs	r0, #76	@ 0x4c
 801e3b4:	183b      	adds	r3, r7, r0
 801e3b6:	492a      	ldr	r1, [pc, #168]	@ (801e460 <USB_ActivateEndpoint+0x6a8>)
 801e3b8:	400a      	ands	r2, r1
 801e3ba:	801a      	strh	r2, [r3, #0]
 801e3bc:	687a      	ldr	r2, [r7, #4]
 801e3be:	683b      	ldr	r3, [r7, #0]
 801e3c0:	781b      	ldrb	r3, [r3, #0]
 801e3c2:	009b      	lsls	r3, r3, #2
 801e3c4:	18d3      	adds	r3, r2, r3
 801e3c6:	183a      	adds	r2, r7, r0
 801e3c8:	8812      	ldrh	r2, [r2, #0]
 801e3ca:	4926      	ldr	r1, [pc, #152]	@ (801e464 <USB_ActivateEndpoint+0x6ac>)
 801e3cc:	430a      	orrs	r2, r1
 801e3ce:	b292      	uxth	r2, r2
 801e3d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e3d2:	687a      	ldr	r2, [r7, #4]
 801e3d4:	683b      	ldr	r3, [r7, #0]
 801e3d6:	781b      	ldrb	r3, [r3, #0]
 801e3d8:	009b      	lsls	r3, r3, #2
 801e3da:	18d2      	adds	r2, r2, r3
 801e3dc:	214a      	movs	r1, #74	@ 0x4a
 801e3de:	187b      	adds	r3, r7, r1
 801e3e0:	8812      	ldrh	r2, [r2, #0]
 801e3e2:	801a      	strh	r2, [r3, #0]
 801e3e4:	187b      	adds	r3, r7, r1
 801e3e6:	881b      	ldrh	r3, [r3, #0]
 801e3e8:	2240      	movs	r2, #64	@ 0x40
 801e3ea:	4013      	ands	r3, r2
 801e3ec:	d016      	beq.n	801e41c <USB_ActivateEndpoint+0x664>
 801e3ee:	687a      	ldr	r2, [r7, #4]
 801e3f0:	683b      	ldr	r3, [r7, #0]
 801e3f2:	781b      	ldrb	r3, [r3, #0]
 801e3f4:	009b      	lsls	r3, r3, #2
 801e3f6:	18d3      	adds	r3, r2, r3
 801e3f8:	881b      	ldrh	r3, [r3, #0]
 801e3fa:	b29a      	uxth	r2, r3
 801e3fc:	2048      	movs	r0, #72	@ 0x48
 801e3fe:	183b      	adds	r3, r7, r0
 801e400:	4917      	ldr	r1, [pc, #92]	@ (801e460 <USB_ActivateEndpoint+0x6a8>)
 801e402:	400a      	ands	r2, r1
 801e404:	801a      	strh	r2, [r3, #0]
 801e406:	687a      	ldr	r2, [r7, #4]
 801e408:	683b      	ldr	r3, [r7, #0]
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	009b      	lsls	r3, r3, #2
 801e40e:	18d3      	adds	r3, r2, r3
 801e410:	183a      	adds	r2, r7, r0
 801e412:	8812      	ldrh	r2, [r2, #0]
 801e414:	4919      	ldr	r1, [pc, #100]	@ (801e47c <USB_ActivateEndpoint+0x6c4>)
 801e416:	430a      	orrs	r2, r1
 801e418:	b292      	uxth	r2, r2
 801e41a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e41c:	683b      	ldr	r3, [r7, #0]
 801e41e:	78db      	ldrb	r3, [r3, #3]
 801e420:	2b01      	cmp	r3, #1
 801e422:	d02f      	beq.n	801e484 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e424:	687a      	ldr	r2, [r7, #4]
 801e426:	683b      	ldr	r3, [r7, #0]
 801e428:	781b      	ldrb	r3, [r3, #0]
 801e42a:	009b      	lsls	r3, r3, #2
 801e42c:	18d3      	adds	r3, r2, r3
 801e42e:	881b      	ldrh	r3, [r3, #0]
 801e430:	b29a      	uxth	r2, r3
 801e432:	2044      	movs	r0, #68	@ 0x44
 801e434:	183b      	adds	r3, r7, r0
 801e436:	4912      	ldr	r1, [pc, #72]	@ (801e480 <USB_ActivateEndpoint+0x6c8>)
 801e438:	400a      	ands	r2, r1
 801e43a:	801a      	strh	r2, [r3, #0]
 801e43c:	183b      	adds	r3, r7, r0
 801e43e:	183a      	adds	r2, r7, r0
 801e440:	8812      	ldrh	r2, [r2, #0]
 801e442:	2120      	movs	r1, #32
 801e444:	404a      	eors	r2, r1
 801e446:	801a      	strh	r2, [r3, #0]
 801e448:	687a      	ldr	r2, [r7, #4]
 801e44a:	683b      	ldr	r3, [r7, #0]
 801e44c:	781b      	ldrb	r3, [r3, #0]
 801e44e:	009b      	lsls	r3, r3, #2
 801e450:	18d3      	adds	r3, r2, r3
 801e452:	183a      	adds	r2, r7, r0
 801e454:	8812      	ldrh	r2, [r2, #0]
 801e456:	4905      	ldr	r1, [pc, #20]	@ (801e46c <USB_ActivateEndpoint+0x6b4>)
 801e458:	430a      	orrs	r2, r1
 801e45a:	b292      	uxth	r2, r2
 801e45c:	801a      	strh	r2, [r3, #0]
 801e45e:	e028      	b.n	801e4b2 <USB_ActivateEndpoint+0x6fa>
 801e460:	ffff8f8f 	.word	0xffff8f8f
 801e464:	ffffc080 	.word	0xffffc080
 801e468:	ffffbf8f 	.word	0xffffbf8f
 801e46c:	ffff8080 	.word	0xffff8080
 801e470:	ffff8180 	.word	0xffff8180
 801e474:	ffff8e8f 	.word	0xffff8e8f
 801e478:	00000404 	.word	0x00000404
 801e47c:	ffff80c0 	.word	0xffff80c0
 801e480:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e484:	687a      	ldr	r2, [r7, #4]
 801e486:	683b      	ldr	r3, [r7, #0]
 801e488:	781b      	ldrb	r3, [r3, #0]
 801e48a:	009b      	lsls	r3, r3, #2
 801e48c:	18d3      	adds	r3, r2, r3
 801e48e:	881b      	ldrh	r3, [r3, #0]
 801e490:	b29a      	uxth	r2, r3
 801e492:	2046      	movs	r0, #70	@ 0x46
 801e494:	183b      	adds	r3, r7, r0
 801e496:	4916      	ldr	r1, [pc, #88]	@ (801e4f0 <USB_ActivateEndpoint+0x738>)
 801e498:	400a      	ands	r2, r1
 801e49a:	801a      	strh	r2, [r3, #0]
 801e49c:	687a      	ldr	r2, [r7, #4]
 801e49e:	683b      	ldr	r3, [r7, #0]
 801e4a0:	781b      	ldrb	r3, [r3, #0]
 801e4a2:	009b      	lsls	r3, r3, #2
 801e4a4:	18d3      	adds	r3, r2, r3
 801e4a6:	183a      	adds	r2, r7, r0
 801e4a8:	8812      	ldrh	r2, [r2, #0]
 801e4aa:	4912      	ldr	r1, [pc, #72]	@ (801e4f4 <USB_ActivateEndpoint+0x73c>)
 801e4ac:	430a      	orrs	r2, r1
 801e4ae:	b292      	uxth	r2, r2
 801e4b0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e4b2:	687a      	ldr	r2, [r7, #4]
 801e4b4:	683b      	ldr	r3, [r7, #0]
 801e4b6:	781b      	ldrb	r3, [r3, #0]
 801e4b8:	009b      	lsls	r3, r3, #2
 801e4ba:	18d3      	adds	r3, r2, r3
 801e4bc:	881b      	ldrh	r3, [r3, #0]
 801e4be:	b29a      	uxth	r2, r3
 801e4c0:	2042      	movs	r0, #66	@ 0x42
 801e4c2:	183b      	adds	r3, r7, r0
 801e4c4:	490c      	ldr	r1, [pc, #48]	@ (801e4f8 <USB_ActivateEndpoint+0x740>)
 801e4c6:	400a      	ands	r2, r1
 801e4c8:	801a      	strh	r2, [r3, #0]
 801e4ca:	687a      	ldr	r2, [r7, #4]
 801e4cc:	683b      	ldr	r3, [r7, #0]
 801e4ce:	781b      	ldrb	r3, [r3, #0]
 801e4d0:	009b      	lsls	r3, r3, #2
 801e4d2:	18d3      	adds	r3, r2, r3
 801e4d4:	183a      	adds	r2, r7, r0
 801e4d6:	8812      	ldrh	r2, [r2, #0]
 801e4d8:	4906      	ldr	r1, [pc, #24]	@ (801e4f4 <USB_ActivateEndpoint+0x73c>)
 801e4da:	430a      	orrs	r2, r1
 801e4dc:	b292      	uxth	r2, r2
 801e4de:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801e4e0:	236f      	movs	r3, #111	@ 0x6f
 801e4e2:	18fb      	adds	r3, r7, r3
 801e4e4:	781b      	ldrb	r3, [r3, #0]
}
 801e4e6:	0018      	movs	r0, r3
 801e4e8:	46bd      	mov	sp, r7
 801e4ea:	b01c      	add	sp, #112	@ 0x70
 801e4ec:	bd80      	pop	{r7, pc}
 801e4ee:	46c0      	nop			@ (mov r8, r8)
 801e4f0:	ffff8fbf 	.word	0xffff8fbf
 801e4f4:	ffff8080 	.word	0xffff8080
 801e4f8:	ffffbf8f 	.word	0xffffbf8f

0801e4fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b08c      	sub	sp, #48	@ 0x30
 801e500:	af00      	add	r7, sp, #0
 801e502:	6078      	str	r0, [r7, #4]
 801e504:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801e506:	683b      	ldr	r3, [r7, #0]
 801e508:	7b1b      	ldrb	r3, [r3, #12]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d000      	beq.n	801e510 <USB_DeactivateEndpoint+0x14>
 801e50e:	e07e      	b.n	801e60e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801e510:	683b      	ldr	r3, [r7, #0]
 801e512:	785b      	ldrb	r3, [r3, #1]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d03c      	beq.n	801e592 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e518:	687a      	ldr	r2, [r7, #4]
 801e51a:	683b      	ldr	r3, [r7, #0]
 801e51c:	781b      	ldrb	r3, [r3, #0]
 801e51e:	009b      	lsls	r3, r3, #2
 801e520:	18d2      	adds	r2, r2, r3
 801e522:	210c      	movs	r1, #12
 801e524:	187b      	adds	r3, r7, r1
 801e526:	8812      	ldrh	r2, [r2, #0]
 801e528:	801a      	strh	r2, [r3, #0]
 801e52a:	187b      	adds	r3, r7, r1
 801e52c:	881b      	ldrh	r3, [r3, #0]
 801e52e:	2240      	movs	r2, #64	@ 0x40
 801e530:	4013      	ands	r3, r2
 801e532:	d016      	beq.n	801e562 <USB_DeactivateEndpoint+0x66>
 801e534:	687a      	ldr	r2, [r7, #4]
 801e536:	683b      	ldr	r3, [r7, #0]
 801e538:	781b      	ldrb	r3, [r3, #0]
 801e53a:	009b      	lsls	r3, r3, #2
 801e53c:	18d3      	adds	r3, r2, r3
 801e53e:	881b      	ldrh	r3, [r3, #0]
 801e540:	b29a      	uxth	r2, r3
 801e542:	200a      	movs	r0, #10
 801e544:	183b      	adds	r3, r7, r0
 801e546:	49c7      	ldr	r1, [pc, #796]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e548:	400a      	ands	r2, r1
 801e54a:	801a      	strh	r2, [r3, #0]
 801e54c:	687a      	ldr	r2, [r7, #4]
 801e54e:	683b      	ldr	r3, [r7, #0]
 801e550:	781b      	ldrb	r3, [r3, #0]
 801e552:	009b      	lsls	r3, r3, #2
 801e554:	18d3      	adds	r3, r2, r3
 801e556:	183a      	adds	r2, r7, r0
 801e558:	8812      	ldrh	r2, [r2, #0]
 801e55a:	49c3      	ldr	r1, [pc, #780]	@ (801e868 <USB_DeactivateEndpoint+0x36c>)
 801e55c:	430a      	orrs	r2, r1
 801e55e:	b292      	uxth	r2, r2
 801e560:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e562:	687a      	ldr	r2, [r7, #4]
 801e564:	683b      	ldr	r3, [r7, #0]
 801e566:	781b      	ldrb	r3, [r3, #0]
 801e568:	009b      	lsls	r3, r3, #2
 801e56a:	18d3      	adds	r3, r2, r3
 801e56c:	881b      	ldrh	r3, [r3, #0]
 801e56e:	b29a      	uxth	r2, r3
 801e570:	2008      	movs	r0, #8
 801e572:	183b      	adds	r3, r7, r0
 801e574:	49bd      	ldr	r1, [pc, #756]	@ (801e86c <USB_DeactivateEndpoint+0x370>)
 801e576:	400a      	ands	r2, r1
 801e578:	801a      	strh	r2, [r3, #0]
 801e57a:	687a      	ldr	r2, [r7, #4]
 801e57c:	683b      	ldr	r3, [r7, #0]
 801e57e:	781b      	ldrb	r3, [r3, #0]
 801e580:	009b      	lsls	r3, r3, #2
 801e582:	18d3      	adds	r3, r2, r3
 801e584:	183a      	adds	r2, r7, r0
 801e586:	8812      	ldrh	r2, [r2, #0]
 801e588:	49b9      	ldr	r1, [pc, #740]	@ (801e870 <USB_DeactivateEndpoint+0x374>)
 801e58a:	430a      	orrs	r2, r1
 801e58c:	b292      	uxth	r2, r2
 801e58e:	801a      	strh	r2, [r3, #0]
 801e590:	e163      	b.n	801e85a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e592:	687a      	ldr	r2, [r7, #4]
 801e594:	683b      	ldr	r3, [r7, #0]
 801e596:	781b      	ldrb	r3, [r3, #0]
 801e598:	009b      	lsls	r3, r3, #2
 801e59a:	18d2      	adds	r2, r2, r3
 801e59c:	2112      	movs	r1, #18
 801e59e:	187b      	adds	r3, r7, r1
 801e5a0:	8812      	ldrh	r2, [r2, #0]
 801e5a2:	801a      	strh	r2, [r3, #0]
 801e5a4:	187b      	adds	r3, r7, r1
 801e5a6:	881a      	ldrh	r2, [r3, #0]
 801e5a8:	2380      	movs	r3, #128	@ 0x80
 801e5aa:	01db      	lsls	r3, r3, #7
 801e5ac:	4013      	ands	r3, r2
 801e5ae:	d016      	beq.n	801e5de <USB_DeactivateEndpoint+0xe2>
 801e5b0:	687a      	ldr	r2, [r7, #4]
 801e5b2:	683b      	ldr	r3, [r7, #0]
 801e5b4:	781b      	ldrb	r3, [r3, #0]
 801e5b6:	009b      	lsls	r3, r3, #2
 801e5b8:	18d3      	adds	r3, r2, r3
 801e5ba:	881b      	ldrh	r3, [r3, #0]
 801e5bc:	b29a      	uxth	r2, r3
 801e5be:	2010      	movs	r0, #16
 801e5c0:	183b      	adds	r3, r7, r0
 801e5c2:	49a8      	ldr	r1, [pc, #672]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e5c4:	400a      	ands	r2, r1
 801e5c6:	801a      	strh	r2, [r3, #0]
 801e5c8:	687a      	ldr	r2, [r7, #4]
 801e5ca:	683b      	ldr	r3, [r7, #0]
 801e5cc:	781b      	ldrb	r3, [r3, #0]
 801e5ce:	009b      	lsls	r3, r3, #2
 801e5d0:	18d3      	adds	r3, r2, r3
 801e5d2:	183a      	adds	r2, r7, r0
 801e5d4:	8812      	ldrh	r2, [r2, #0]
 801e5d6:	49a7      	ldr	r1, [pc, #668]	@ (801e874 <USB_DeactivateEndpoint+0x378>)
 801e5d8:	430a      	orrs	r2, r1
 801e5da:	b292      	uxth	r2, r2
 801e5dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e5de:	687a      	ldr	r2, [r7, #4]
 801e5e0:	683b      	ldr	r3, [r7, #0]
 801e5e2:	781b      	ldrb	r3, [r3, #0]
 801e5e4:	009b      	lsls	r3, r3, #2
 801e5e6:	18d3      	adds	r3, r2, r3
 801e5e8:	881b      	ldrh	r3, [r3, #0]
 801e5ea:	b29a      	uxth	r2, r3
 801e5ec:	200e      	movs	r0, #14
 801e5ee:	183b      	adds	r3, r7, r0
 801e5f0:	49a1      	ldr	r1, [pc, #644]	@ (801e878 <USB_DeactivateEndpoint+0x37c>)
 801e5f2:	400a      	ands	r2, r1
 801e5f4:	801a      	strh	r2, [r3, #0]
 801e5f6:	687a      	ldr	r2, [r7, #4]
 801e5f8:	683b      	ldr	r3, [r7, #0]
 801e5fa:	781b      	ldrb	r3, [r3, #0]
 801e5fc:	009b      	lsls	r3, r3, #2
 801e5fe:	18d3      	adds	r3, r2, r3
 801e600:	183a      	adds	r2, r7, r0
 801e602:	8812      	ldrh	r2, [r2, #0]
 801e604:	499a      	ldr	r1, [pc, #616]	@ (801e870 <USB_DeactivateEndpoint+0x374>)
 801e606:	430a      	orrs	r2, r1
 801e608:	b292      	uxth	r2, r2
 801e60a:	801a      	strh	r2, [r3, #0]
 801e60c:	e125      	b.n	801e85a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801e60e:	683b      	ldr	r3, [r7, #0]
 801e610:	785b      	ldrb	r3, [r3, #1]
 801e612:	2b00      	cmp	r3, #0
 801e614:	d000      	beq.n	801e618 <USB_DeactivateEndpoint+0x11c>
 801e616:	e090      	b.n	801e73a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e618:	687a      	ldr	r2, [r7, #4]
 801e61a:	683b      	ldr	r3, [r7, #0]
 801e61c:	781b      	ldrb	r3, [r3, #0]
 801e61e:	009b      	lsls	r3, r3, #2
 801e620:	18d2      	adds	r2, r2, r3
 801e622:	2120      	movs	r1, #32
 801e624:	187b      	adds	r3, r7, r1
 801e626:	8812      	ldrh	r2, [r2, #0]
 801e628:	801a      	strh	r2, [r3, #0]
 801e62a:	187b      	adds	r3, r7, r1
 801e62c:	881a      	ldrh	r2, [r3, #0]
 801e62e:	2380      	movs	r3, #128	@ 0x80
 801e630:	01db      	lsls	r3, r3, #7
 801e632:	4013      	ands	r3, r2
 801e634:	d016      	beq.n	801e664 <USB_DeactivateEndpoint+0x168>
 801e636:	687a      	ldr	r2, [r7, #4]
 801e638:	683b      	ldr	r3, [r7, #0]
 801e63a:	781b      	ldrb	r3, [r3, #0]
 801e63c:	009b      	lsls	r3, r3, #2
 801e63e:	18d3      	adds	r3, r2, r3
 801e640:	881b      	ldrh	r3, [r3, #0]
 801e642:	b29a      	uxth	r2, r3
 801e644:	201e      	movs	r0, #30
 801e646:	183b      	adds	r3, r7, r0
 801e648:	4986      	ldr	r1, [pc, #536]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e64a:	400a      	ands	r2, r1
 801e64c:	801a      	strh	r2, [r3, #0]
 801e64e:	687a      	ldr	r2, [r7, #4]
 801e650:	683b      	ldr	r3, [r7, #0]
 801e652:	781b      	ldrb	r3, [r3, #0]
 801e654:	009b      	lsls	r3, r3, #2
 801e656:	18d3      	adds	r3, r2, r3
 801e658:	183a      	adds	r2, r7, r0
 801e65a:	8812      	ldrh	r2, [r2, #0]
 801e65c:	4985      	ldr	r1, [pc, #532]	@ (801e874 <USB_DeactivateEndpoint+0x378>)
 801e65e:	430a      	orrs	r2, r1
 801e660:	b292      	uxth	r2, r2
 801e662:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e664:	687a      	ldr	r2, [r7, #4]
 801e666:	683b      	ldr	r3, [r7, #0]
 801e668:	781b      	ldrb	r3, [r3, #0]
 801e66a:	009b      	lsls	r3, r3, #2
 801e66c:	18d2      	adds	r2, r2, r3
 801e66e:	211c      	movs	r1, #28
 801e670:	187b      	adds	r3, r7, r1
 801e672:	8812      	ldrh	r2, [r2, #0]
 801e674:	801a      	strh	r2, [r3, #0]
 801e676:	187b      	adds	r3, r7, r1
 801e678:	881b      	ldrh	r3, [r3, #0]
 801e67a:	2240      	movs	r2, #64	@ 0x40
 801e67c:	4013      	ands	r3, r2
 801e67e:	d016      	beq.n	801e6ae <USB_DeactivateEndpoint+0x1b2>
 801e680:	687a      	ldr	r2, [r7, #4]
 801e682:	683b      	ldr	r3, [r7, #0]
 801e684:	781b      	ldrb	r3, [r3, #0]
 801e686:	009b      	lsls	r3, r3, #2
 801e688:	18d3      	adds	r3, r2, r3
 801e68a:	881b      	ldrh	r3, [r3, #0]
 801e68c:	b29a      	uxth	r2, r3
 801e68e:	201a      	movs	r0, #26
 801e690:	183b      	adds	r3, r7, r0
 801e692:	4974      	ldr	r1, [pc, #464]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e694:	400a      	ands	r2, r1
 801e696:	801a      	strh	r2, [r3, #0]
 801e698:	687a      	ldr	r2, [r7, #4]
 801e69a:	683b      	ldr	r3, [r7, #0]
 801e69c:	781b      	ldrb	r3, [r3, #0]
 801e69e:	009b      	lsls	r3, r3, #2
 801e6a0:	18d3      	adds	r3, r2, r3
 801e6a2:	183a      	adds	r2, r7, r0
 801e6a4:	8812      	ldrh	r2, [r2, #0]
 801e6a6:	4970      	ldr	r1, [pc, #448]	@ (801e868 <USB_DeactivateEndpoint+0x36c>)
 801e6a8:	430a      	orrs	r2, r1
 801e6aa:	b292      	uxth	r2, r2
 801e6ac:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801e6ae:	687a      	ldr	r2, [r7, #4]
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	781b      	ldrb	r3, [r3, #0]
 801e6b4:	009b      	lsls	r3, r3, #2
 801e6b6:	18d3      	adds	r3, r2, r3
 801e6b8:	881b      	ldrh	r3, [r3, #0]
 801e6ba:	b29a      	uxth	r2, r3
 801e6bc:	2018      	movs	r0, #24
 801e6be:	183b      	adds	r3, r7, r0
 801e6c0:	4968      	ldr	r1, [pc, #416]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e6c2:	400a      	ands	r2, r1
 801e6c4:	801a      	strh	r2, [r3, #0]
 801e6c6:	687a      	ldr	r2, [r7, #4]
 801e6c8:	683b      	ldr	r3, [r7, #0]
 801e6ca:	781b      	ldrb	r3, [r3, #0]
 801e6cc:	009b      	lsls	r3, r3, #2
 801e6ce:	18d3      	adds	r3, r2, r3
 801e6d0:	183a      	adds	r2, r7, r0
 801e6d2:	8812      	ldrh	r2, [r2, #0]
 801e6d4:	4964      	ldr	r1, [pc, #400]	@ (801e868 <USB_DeactivateEndpoint+0x36c>)
 801e6d6:	430a      	orrs	r2, r1
 801e6d8:	b292      	uxth	r2, r2
 801e6da:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e6dc:	687a      	ldr	r2, [r7, #4]
 801e6de:	683b      	ldr	r3, [r7, #0]
 801e6e0:	781b      	ldrb	r3, [r3, #0]
 801e6e2:	009b      	lsls	r3, r3, #2
 801e6e4:	18d3      	adds	r3, r2, r3
 801e6e6:	881b      	ldrh	r3, [r3, #0]
 801e6e8:	b29a      	uxth	r2, r3
 801e6ea:	2016      	movs	r0, #22
 801e6ec:	183b      	adds	r3, r7, r0
 801e6ee:	4962      	ldr	r1, [pc, #392]	@ (801e878 <USB_DeactivateEndpoint+0x37c>)
 801e6f0:	400a      	ands	r2, r1
 801e6f2:	801a      	strh	r2, [r3, #0]
 801e6f4:	687a      	ldr	r2, [r7, #4]
 801e6f6:	683b      	ldr	r3, [r7, #0]
 801e6f8:	781b      	ldrb	r3, [r3, #0]
 801e6fa:	009b      	lsls	r3, r3, #2
 801e6fc:	18d3      	adds	r3, r2, r3
 801e6fe:	183a      	adds	r2, r7, r0
 801e700:	8812      	ldrh	r2, [r2, #0]
 801e702:	495b      	ldr	r1, [pc, #364]	@ (801e870 <USB_DeactivateEndpoint+0x374>)
 801e704:	430a      	orrs	r2, r1
 801e706:	b292      	uxth	r2, r2
 801e708:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e70a:	687a      	ldr	r2, [r7, #4]
 801e70c:	683b      	ldr	r3, [r7, #0]
 801e70e:	781b      	ldrb	r3, [r3, #0]
 801e710:	009b      	lsls	r3, r3, #2
 801e712:	18d3      	adds	r3, r2, r3
 801e714:	881b      	ldrh	r3, [r3, #0]
 801e716:	b29a      	uxth	r2, r3
 801e718:	2014      	movs	r0, #20
 801e71a:	183b      	adds	r3, r7, r0
 801e71c:	4953      	ldr	r1, [pc, #332]	@ (801e86c <USB_DeactivateEndpoint+0x370>)
 801e71e:	400a      	ands	r2, r1
 801e720:	801a      	strh	r2, [r3, #0]
 801e722:	687a      	ldr	r2, [r7, #4]
 801e724:	683b      	ldr	r3, [r7, #0]
 801e726:	781b      	ldrb	r3, [r3, #0]
 801e728:	009b      	lsls	r3, r3, #2
 801e72a:	18d3      	adds	r3, r2, r3
 801e72c:	183a      	adds	r2, r7, r0
 801e72e:	8812      	ldrh	r2, [r2, #0]
 801e730:	494f      	ldr	r1, [pc, #316]	@ (801e870 <USB_DeactivateEndpoint+0x374>)
 801e732:	430a      	orrs	r2, r1
 801e734:	b292      	uxth	r2, r2
 801e736:	801a      	strh	r2, [r3, #0]
 801e738:	e08f      	b.n	801e85a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e73a:	687a      	ldr	r2, [r7, #4]
 801e73c:	683b      	ldr	r3, [r7, #0]
 801e73e:	781b      	ldrb	r3, [r3, #0]
 801e740:	009b      	lsls	r3, r3, #2
 801e742:	18d2      	adds	r2, r2, r3
 801e744:	212e      	movs	r1, #46	@ 0x2e
 801e746:	187b      	adds	r3, r7, r1
 801e748:	8812      	ldrh	r2, [r2, #0]
 801e74a:	801a      	strh	r2, [r3, #0]
 801e74c:	187b      	adds	r3, r7, r1
 801e74e:	881a      	ldrh	r2, [r3, #0]
 801e750:	2380      	movs	r3, #128	@ 0x80
 801e752:	01db      	lsls	r3, r3, #7
 801e754:	4013      	ands	r3, r2
 801e756:	d016      	beq.n	801e786 <USB_DeactivateEndpoint+0x28a>
 801e758:	687a      	ldr	r2, [r7, #4]
 801e75a:	683b      	ldr	r3, [r7, #0]
 801e75c:	781b      	ldrb	r3, [r3, #0]
 801e75e:	009b      	lsls	r3, r3, #2
 801e760:	18d3      	adds	r3, r2, r3
 801e762:	881b      	ldrh	r3, [r3, #0]
 801e764:	b29a      	uxth	r2, r3
 801e766:	202c      	movs	r0, #44	@ 0x2c
 801e768:	183b      	adds	r3, r7, r0
 801e76a:	493e      	ldr	r1, [pc, #248]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e76c:	400a      	ands	r2, r1
 801e76e:	801a      	strh	r2, [r3, #0]
 801e770:	687a      	ldr	r2, [r7, #4]
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	781b      	ldrb	r3, [r3, #0]
 801e776:	009b      	lsls	r3, r3, #2
 801e778:	18d3      	adds	r3, r2, r3
 801e77a:	183a      	adds	r2, r7, r0
 801e77c:	8812      	ldrh	r2, [r2, #0]
 801e77e:	493d      	ldr	r1, [pc, #244]	@ (801e874 <USB_DeactivateEndpoint+0x378>)
 801e780:	430a      	orrs	r2, r1
 801e782:	b292      	uxth	r2, r2
 801e784:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e786:	687a      	ldr	r2, [r7, #4]
 801e788:	683b      	ldr	r3, [r7, #0]
 801e78a:	781b      	ldrb	r3, [r3, #0]
 801e78c:	009b      	lsls	r3, r3, #2
 801e78e:	18d2      	adds	r2, r2, r3
 801e790:	212a      	movs	r1, #42	@ 0x2a
 801e792:	187b      	adds	r3, r7, r1
 801e794:	8812      	ldrh	r2, [r2, #0]
 801e796:	801a      	strh	r2, [r3, #0]
 801e798:	187b      	adds	r3, r7, r1
 801e79a:	881b      	ldrh	r3, [r3, #0]
 801e79c:	2240      	movs	r2, #64	@ 0x40
 801e79e:	4013      	ands	r3, r2
 801e7a0:	d016      	beq.n	801e7d0 <USB_DeactivateEndpoint+0x2d4>
 801e7a2:	687a      	ldr	r2, [r7, #4]
 801e7a4:	683b      	ldr	r3, [r7, #0]
 801e7a6:	781b      	ldrb	r3, [r3, #0]
 801e7a8:	009b      	lsls	r3, r3, #2
 801e7aa:	18d3      	adds	r3, r2, r3
 801e7ac:	881b      	ldrh	r3, [r3, #0]
 801e7ae:	b29a      	uxth	r2, r3
 801e7b0:	2028      	movs	r0, #40	@ 0x28
 801e7b2:	183b      	adds	r3, r7, r0
 801e7b4:	492b      	ldr	r1, [pc, #172]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e7b6:	400a      	ands	r2, r1
 801e7b8:	801a      	strh	r2, [r3, #0]
 801e7ba:	687a      	ldr	r2, [r7, #4]
 801e7bc:	683b      	ldr	r3, [r7, #0]
 801e7be:	781b      	ldrb	r3, [r3, #0]
 801e7c0:	009b      	lsls	r3, r3, #2
 801e7c2:	18d3      	adds	r3, r2, r3
 801e7c4:	183a      	adds	r2, r7, r0
 801e7c6:	8812      	ldrh	r2, [r2, #0]
 801e7c8:	4927      	ldr	r1, [pc, #156]	@ (801e868 <USB_DeactivateEndpoint+0x36c>)
 801e7ca:	430a      	orrs	r2, r1
 801e7cc:	b292      	uxth	r2, r2
 801e7ce:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801e7d0:	687a      	ldr	r2, [r7, #4]
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	781b      	ldrb	r3, [r3, #0]
 801e7d6:	009b      	lsls	r3, r3, #2
 801e7d8:	18d3      	adds	r3, r2, r3
 801e7da:	881b      	ldrh	r3, [r3, #0]
 801e7dc:	b29a      	uxth	r2, r3
 801e7de:	2026      	movs	r0, #38	@ 0x26
 801e7e0:	183b      	adds	r3, r7, r0
 801e7e2:	4920      	ldr	r1, [pc, #128]	@ (801e864 <USB_DeactivateEndpoint+0x368>)
 801e7e4:	400a      	ands	r2, r1
 801e7e6:	801a      	strh	r2, [r3, #0]
 801e7e8:	687a      	ldr	r2, [r7, #4]
 801e7ea:	683b      	ldr	r3, [r7, #0]
 801e7ec:	781b      	ldrb	r3, [r3, #0]
 801e7ee:	009b      	lsls	r3, r3, #2
 801e7f0:	18d3      	adds	r3, r2, r3
 801e7f2:	183a      	adds	r2, r7, r0
 801e7f4:	8812      	ldrh	r2, [r2, #0]
 801e7f6:	491f      	ldr	r1, [pc, #124]	@ (801e874 <USB_DeactivateEndpoint+0x378>)
 801e7f8:	430a      	orrs	r2, r1
 801e7fa:	b292      	uxth	r2, r2
 801e7fc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e7fe:	687a      	ldr	r2, [r7, #4]
 801e800:	683b      	ldr	r3, [r7, #0]
 801e802:	781b      	ldrb	r3, [r3, #0]
 801e804:	009b      	lsls	r3, r3, #2
 801e806:	18d3      	adds	r3, r2, r3
 801e808:	881b      	ldrh	r3, [r3, #0]
 801e80a:	b29a      	uxth	r2, r3
 801e80c:	2024      	movs	r0, #36	@ 0x24
 801e80e:	183b      	adds	r3, r7, r0
 801e810:	4916      	ldr	r1, [pc, #88]	@ (801e86c <USB_DeactivateEndpoint+0x370>)
 801e812:	400a      	ands	r2, r1
 801e814:	801a      	strh	r2, [r3, #0]
 801e816:	687a      	ldr	r2, [r7, #4]
 801e818:	683b      	ldr	r3, [r7, #0]
 801e81a:	781b      	ldrb	r3, [r3, #0]
 801e81c:	009b      	lsls	r3, r3, #2
 801e81e:	18d3      	adds	r3, r2, r3
 801e820:	183a      	adds	r2, r7, r0
 801e822:	8812      	ldrh	r2, [r2, #0]
 801e824:	4912      	ldr	r1, [pc, #72]	@ (801e870 <USB_DeactivateEndpoint+0x374>)
 801e826:	430a      	orrs	r2, r1
 801e828:	b292      	uxth	r2, r2
 801e82a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e82c:	687a      	ldr	r2, [r7, #4]
 801e82e:	683b      	ldr	r3, [r7, #0]
 801e830:	781b      	ldrb	r3, [r3, #0]
 801e832:	009b      	lsls	r3, r3, #2
 801e834:	18d3      	adds	r3, r2, r3
 801e836:	881b      	ldrh	r3, [r3, #0]
 801e838:	b29a      	uxth	r2, r3
 801e83a:	2022      	movs	r0, #34	@ 0x22
 801e83c:	183b      	adds	r3, r7, r0
 801e83e:	490e      	ldr	r1, [pc, #56]	@ (801e878 <USB_DeactivateEndpoint+0x37c>)
 801e840:	400a      	ands	r2, r1
 801e842:	801a      	strh	r2, [r3, #0]
 801e844:	687a      	ldr	r2, [r7, #4]
 801e846:	683b      	ldr	r3, [r7, #0]
 801e848:	781b      	ldrb	r3, [r3, #0]
 801e84a:	009b      	lsls	r3, r3, #2
 801e84c:	18d3      	adds	r3, r2, r3
 801e84e:	183a      	adds	r2, r7, r0
 801e850:	8812      	ldrh	r2, [r2, #0]
 801e852:	4907      	ldr	r1, [pc, #28]	@ (801e870 <USB_DeactivateEndpoint+0x374>)
 801e854:	430a      	orrs	r2, r1
 801e856:	b292      	uxth	r2, r2
 801e858:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801e85a:	2300      	movs	r3, #0
}
 801e85c:	0018      	movs	r0, r3
 801e85e:	46bd      	mov	sp, r7
 801e860:	b00c      	add	sp, #48	@ 0x30
 801e862:	bd80      	pop	{r7, pc}
 801e864:	ffff8f8f 	.word	0xffff8f8f
 801e868:	ffff80c0 	.word	0xffff80c0
 801e86c:	ffff8fbf 	.word	0xffff8fbf
 801e870:	ffff8080 	.word	0xffff8080
 801e874:	ffffc080 	.word	0xffffc080
 801e878:	ffffbf8f 	.word	0xffffbf8f

0801e87c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e87c:	b590      	push	{r4, r7, lr}
 801e87e:	b0c3      	sub	sp, #268	@ 0x10c
 801e880:	af00      	add	r7, sp, #0
 801e882:	6078      	str	r0, [r7, #4]
 801e884:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e886:	683b      	ldr	r3, [r7, #0]
 801e888:	785b      	ldrb	r3, [r3, #1]
 801e88a:	2b01      	cmp	r3, #1
 801e88c:	d001      	beq.n	801e892 <USB_EPStartXfer+0x16>
 801e88e:	f000 fd2d 	bl	801f2ec <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801e892:	683b      	ldr	r3, [r7, #0]
 801e894:	699a      	ldr	r2, [r3, #24]
 801e896:	683b      	ldr	r3, [r7, #0]
 801e898:	691b      	ldr	r3, [r3, #16]
 801e89a:	429a      	cmp	r2, r3
 801e89c:	d905      	bls.n	801e8aa <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801e89e:	683b      	ldr	r3, [r7, #0]
 801e8a0:	691b      	ldr	r3, [r3, #16]
 801e8a2:	1d7a      	adds	r2, r7, #5
 801e8a4:	32ff      	adds	r2, #255	@ 0xff
 801e8a6:	6013      	str	r3, [r2, #0]
 801e8a8:	e004      	b.n	801e8b4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801e8aa:	683b      	ldr	r3, [r7, #0]
 801e8ac:	699b      	ldr	r3, [r3, #24]
 801e8ae:	1d7a      	adds	r2, r7, #5
 801e8b0:	32ff      	adds	r2, #255	@ 0xff
 801e8b2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801e8b4:	683b      	ldr	r3, [r7, #0]
 801e8b6:	7b1b      	ldrb	r3, [r3, #12]
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d125      	bne.n	801e908 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801e8bc:	683b      	ldr	r3, [r7, #0]
 801e8be:	6959      	ldr	r1, [r3, #20]
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	88da      	ldrh	r2, [r3, #6]
 801e8c4:	1d7b      	adds	r3, r7, #5
 801e8c6:	33ff      	adds	r3, #255	@ 0xff
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	b29b      	uxth	r3, r3
 801e8cc:	6878      	ldr	r0, [r7, #4]
 801e8ce:	f001 fa47 	bl	801fd60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	613b      	str	r3, [r7, #16]
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	2250      	movs	r2, #80	@ 0x50
 801e8da:	5a9b      	ldrh	r3, [r3, r2]
 801e8dc:	b29b      	uxth	r3, r3
 801e8de:	001a      	movs	r2, r3
 801e8e0:	693b      	ldr	r3, [r7, #16]
 801e8e2:	189b      	adds	r3, r3, r2
 801e8e4:	613b      	str	r3, [r7, #16]
 801e8e6:	683b      	ldr	r3, [r7, #0]
 801e8e8:	781b      	ldrb	r3, [r3, #0]
 801e8ea:	00da      	lsls	r2, r3, #3
 801e8ec:	693b      	ldr	r3, [r7, #16]
 801e8ee:	18d3      	adds	r3, r2, r3
 801e8f0:	4ad7      	ldr	r2, [pc, #860]	@ (801ec50 <USB_EPStartXfer+0x3d4>)
 801e8f2:	4694      	mov	ip, r2
 801e8f4:	4463      	add	r3, ip
 801e8f6:	60fb      	str	r3, [r7, #12]
 801e8f8:	1d7b      	adds	r3, r7, #5
 801e8fa:	33ff      	adds	r3, #255	@ 0xff
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	b29a      	uxth	r2, r3
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	801a      	strh	r2, [r3, #0]
 801e904:	f000 fccd 	bl	801f2a2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801e908:	683b      	ldr	r3, [r7, #0]
 801e90a:	78db      	ldrb	r3, [r3, #3]
 801e90c:	2b02      	cmp	r3, #2
 801e90e:	d000      	beq.n	801e912 <USB_EPStartXfer+0x96>
 801e910:	e362      	b.n	801efd8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801e912:	683b      	ldr	r3, [r7, #0]
 801e914:	6a1a      	ldr	r2, [r3, #32]
 801e916:	683b      	ldr	r3, [r7, #0]
 801e918:	691b      	ldr	r3, [r3, #16]
 801e91a:	429a      	cmp	r2, r3
 801e91c:	d800      	bhi.n	801e920 <USB_EPStartXfer+0xa4>
 801e91e:	e309      	b.n	801ef34 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e920:	687a      	ldr	r2, [r7, #4]
 801e922:	683b      	ldr	r3, [r7, #0]
 801e924:	781b      	ldrb	r3, [r3, #0]
 801e926:	009b      	lsls	r3, r3, #2
 801e928:	18d3      	adds	r3, r2, r3
 801e92a:	881b      	ldrh	r3, [r3, #0]
 801e92c:	b29a      	uxth	r2, r3
 801e92e:	2056      	movs	r0, #86	@ 0x56
 801e930:	183b      	adds	r3, r7, r0
 801e932:	49c8      	ldr	r1, [pc, #800]	@ (801ec54 <USB_EPStartXfer+0x3d8>)
 801e934:	400a      	ands	r2, r1
 801e936:	801a      	strh	r2, [r3, #0]
 801e938:	687a      	ldr	r2, [r7, #4]
 801e93a:	683b      	ldr	r3, [r7, #0]
 801e93c:	781b      	ldrb	r3, [r3, #0]
 801e93e:	009b      	lsls	r3, r3, #2
 801e940:	18d3      	adds	r3, r2, r3
 801e942:	183a      	adds	r2, r7, r0
 801e944:	8812      	ldrh	r2, [r2, #0]
 801e946:	49c4      	ldr	r1, [pc, #784]	@ (801ec58 <USB_EPStartXfer+0x3dc>)
 801e948:	430a      	orrs	r2, r1
 801e94a:	b292      	uxth	r2, r2
 801e94c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	6a1a      	ldr	r2, [r3, #32]
 801e952:	1d7b      	adds	r3, r7, #5
 801e954:	33ff      	adds	r3, #255	@ 0xff
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	1ad2      	subs	r2, r2, r3
 801e95a:	683b      	ldr	r3, [r7, #0]
 801e95c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801e95e:	687a      	ldr	r2, [r7, #4]
 801e960:	683b      	ldr	r3, [r7, #0]
 801e962:	781b      	ldrb	r3, [r3, #0]
 801e964:	009b      	lsls	r3, r3, #2
 801e966:	18d3      	adds	r3, r2, r3
 801e968:	881b      	ldrh	r3, [r3, #0]
 801e96a:	b29b      	uxth	r3, r3
 801e96c:	001a      	movs	r2, r3
 801e96e:	2340      	movs	r3, #64	@ 0x40
 801e970:	4013      	ands	r3, r2
 801e972:	d100      	bne.n	801e976 <USB_EPStartXfer+0xfa>
 801e974:	e176      	b.n	801ec64 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	633b      	str	r3, [r7, #48]	@ 0x30
 801e97a:	683b      	ldr	r3, [r7, #0]
 801e97c:	785b      	ldrb	r3, [r3, #1]
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d000      	beq.n	801e984 <USB_EPStartXfer+0x108>
 801e982:	e074      	b.n	801ea6e <USB_EPStartXfer+0x1f2>
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	2250      	movs	r2, #80	@ 0x50
 801e98c:	5a9b      	ldrh	r3, [r3, r2]
 801e98e:	b29b      	uxth	r3, r3
 801e990:	001a      	movs	r2, r3
 801e992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e994:	189b      	adds	r3, r3, r2
 801e996:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e998:	683b      	ldr	r3, [r7, #0]
 801e99a:	781b      	ldrb	r3, [r3, #0]
 801e99c:	00da      	lsls	r2, r3, #3
 801e99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9a0:	18d3      	adds	r3, r2, r3
 801e9a2:	4aae      	ldr	r2, [pc, #696]	@ (801ec5c <USB_EPStartXfer+0x3e0>)
 801e9a4:	4694      	mov	ip, r2
 801e9a6:	4463      	add	r3, ip
 801e9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9ac:	881b      	ldrh	r3, [r3, #0]
 801e9ae:	b29b      	uxth	r3, r3
 801e9b0:	059b      	lsls	r3, r3, #22
 801e9b2:	0d9b      	lsrs	r3, r3, #22
 801e9b4:	b29a      	uxth	r2, r3
 801e9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9b8:	801a      	strh	r2, [r3, #0]
 801e9ba:	1d7b      	adds	r3, r7, #5
 801e9bc:	33ff      	adds	r3, #255	@ 0xff
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	2b3e      	cmp	r3, #62	@ 0x3e
 801e9c2:	d924      	bls.n	801ea0e <USB_EPStartXfer+0x192>
 801e9c4:	1d7b      	adds	r3, r7, #5
 801e9c6:	33ff      	adds	r3, #255	@ 0xff
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	095b      	lsrs	r3, r3, #5
 801e9cc:	1c7a      	adds	r2, r7, #1
 801e9ce:	32ff      	adds	r2, #255	@ 0xff
 801e9d0:	6013      	str	r3, [r2, #0]
 801e9d2:	1d7b      	adds	r3, r7, #5
 801e9d4:	33ff      	adds	r3, #255	@ 0xff
 801e9d6:	681b      	ldr	r3, [r3, #0]
 801e9d8:	221f      	movs	r2, #31
 801e9da:	4013      	ands	r3, r2
 801e9dc:	d106      	bne.n	801e9ec <USB_EPStartXfer+0x170>
 801e9de:	1c7b      	adds	r3, r7, #1
 801e9e0:	33ff      	adds	r3, #255	@ 0xff
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	3b01      	subs	r3, #1
 801e9e6:	1c7a      	adds	r2, r7, #1
 801e9e8:	32ff      	adds	r2, #255	@ 0xff
 801e9ea:	6013      	str	r3, [r2, #0]
 801e9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9ee:	881b      	ldrh	r3, [r3, #0]
 801e9f0:	b29a      	uxth	r2, r3
 801e9f2:	1c7b      	adds	r3, r7, #1
 801e9f4:	33ff      	adds	r3, #255	@ 0xff
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	b29b      	uxth	r3, r3
 801e9fa:	029b      	lsls	r3, r3, #10
 801e9fc:	b29b      	uxth	r3, r3
 801e9fe:	4313      	orrs	r3, r2
 801ea00:	b29b      	uxth	r3, r3
 801ea02:	4a97      	ldr	r2, [pc, #604]	@ (801ec60 <USB_EPStartXfer+0x3e4>)
 801ea04:	4313      	orrs	r3, r2
 801ea06:	b29a      	uxth	r2, r3
 801ea08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea0a:	801a      	strh	r2, [r3, #0]
 801ea0c:	e04a      	b.n	801eaa4 <USB_EPStartXfer+0x228>
 801ea0e:	1d7b      	adds	r3, r7, #5
 801ea10:	33ff      	adds	r3, #255	@ 0xff
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d108      	bne.n	801ea2a <USB_EPStartXfer+0x1ae>
 801ea18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea1a:	881b      	ldrh	r3, [r3, #0]
 801ea1c:	b29b      	uxth	r3, r3
 801ea1e:	4a90      	ldr	r2, [pc, #576]	@ (801ec60 <USB_EPStartXfer+0x3e4>)
 801ea20:	4313      	orrs	r3, r2
 801ea22:	b29a      	uxth	r2, r3
 801ea24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea26:	801a      	strh	r2, [r3, #0]
 801ea28:	e03c      	b.n	801eaa4 <USB_EPStartXfer+0x228>
 801ea2a:	1d7b      	adds	r3, r7, #5
 801ea2c:	33ff      	adds	r3, #255	@ 0xff
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	085b      	lsrs	r3, r3, #1
 801ea32:	1c7a      	adds	r2, r7, #1
 801ea34:	32ff      	adds	r2, #255	@ 0xff
 801ea36:	6013      	str	r3, [r2, #0]
 801ea38:	1d7b      	adds	r3, r7, #5
 801ea3a:	33ff      	adds	r3, #255	@ 0xff
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	2201      	movs	r2, #1
 801ea40:	4013      	ands	r3, r2
 801ea42:	d006      	beq.n	801ea52 <USB_EPStartXfer+0x1d6>
 801ea44:	1c7b      	adds	r3, r7, #1
 801ea46:	33ff      	adds	r3, #255	@ 0xff
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	3301      	adds	r3, #1
 801ea4c:	1c7a      	adds	r2, r7, #1
 801ea4e:	32ff      	adds	r2, #255	@ 0xff
 801ea50:	6013      	str	r3, [r2, #0]
 801ea52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea54:	881b      	ldrh	r3, [r3, #0]
 801ea56:	b29a      	uxth	r2, r3
 801ea58:	1c7b      	adds	r3, r7, #1
 801ea5a:	33ff      	adds	r3, #255	@ 0xff
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	b29b      	uxth	r3, r3
 801ea60:	029b      	lsls	r3, r3, #10
 801ea62:	b29b      	uxth	r3, r3
 801ea64:	4313      	orrs	r3, r2
 801ea66:	b29a      	uxth	r2, r3
 801ea68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea6a:	801a      	strh	r2, [r3, #0]
 801ea6c:	e01a      	b.n	801eaa4 <USB_EPStartXfer+0x228>
 801ea6e:	683b      	ldr	r3, [r7, #0]
 801ea70:	785b      	ldrb	r3, [r3, #1]
 801ea72:	2b01      	cmp	r3, #1
 801ea74:	d116      	bne.n	801eaa4 <USB_EPStartXfer+0x228>
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	2250      	movs	r2, #80	@ 0x50
 801ea7a:	5a9b      	ldrh	r3, [r3, r2]
 801ea7c:	b29b      	uxth	r3, r3
 801ea7e:	001a      	movs	r2, r3
 801ea80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea82:	189b      	adds	r3, r3, r2
 801ea84:	633b      	str	r3, [r7, #48]	@ 0x30
 801ea86:	683b      	ldr	r3, [r7, #0]
 801ea88:	781b      	ldrb	r3, [r3, #0]
 801ea8a:	00da      	lsls	r2, r3, #3
 801ea8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea8e:	18d3      	adds	r3, r2, r3
 801ea90:	4a72      	ldr	r2, [pc, #456]	@ (801ec5c <USB_EPStartXfer+0x3e0>)
 801ea92:	4694      	mov	ip, r2
 801ea94:	4463      	add	r3, ip
 801ea96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ea98:	1d7b      	adds	r3, r7, #5
 801ea9a:	33ff      	adds	r3, #255	@ 0xff
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	b29a      	uxth	r2, r3
 801eaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eaa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801eaa4:	2076      	movs	r0, #118	@ 0x76
 801eaa6:	183b      	adds	r3, r7, r0
 801eaa8:	683a      	ldr	r2, [r7, #0]
 801eaaa:	8952      	ldrh	r2, [r2, #10]
 801eaac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801eaae:	683b      	ldr	r3, [r7, #0]
 801eab0:	6959      	ldr	r1, [r3, #20]
 801eab2:	1d7b      	adds	r3, r7, #5
 801eab4:	33ff      	adds	r3, #255	@ 0xff
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	b29c      	uxth	r4, r3
 801eaba:	183b      	adds	r3, r7, r0
 801eabc:	881a      	ldrh	r2, [r3, #0]
 801eabe:	6878      	ldr	r0, [r7, #4]
 801eac0:	0023      	movs	r3, r4
 801eac2:	f001 f94d 	bl	801fd60 <USB_WritePMA>
            ep->xfer_buff += len;
 801eac6:	683b      	ldr	r3, [r7, #0]
 801eac8:	695a      	ldr	r2, [r3, #20]
 801eaca:	1d7b      	adds	r3, r7, #5
 801eacc:	33ff      	adds	r3, #255	@ 0xff
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	18d2      	adds	r2, r2, r3
 801ead2:	683b      	ldr	r3, [r7, #0]
 801ead4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801ead6:	683b      	ldr	r3, [r7, #0]
 801ead8:	6a1a      	ldr	r2, [r3, #32]
 801eada:	683b      	ldr	r3, [r7, #0]
 801eadc:	691b      	ldr	r3, [r3, #16]
 801eade:	429a      	cmp	r2, r3
 801eae0:	d908      	bls.n	801eaf4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801eae2:	683b      	ldr	r3, [r7, #0]
 801eae4:	6a1a      	ldr	r2, [r3, #32]
 801eae6:	1d7b      	adds	r3, r7, #5
 801eae8:	33ff      	adds	r3, #255	@ 0xff
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	1ad2      	subs	r2, r2, r3
 801eaee:	683b      	ldr	r3, [r7, #0]
 801eaf0:	621a      	str	r2, [r3, #32]
 801eaf2:	e007      	b.n	801eb04 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	6a1b      	ldr	r3, [r3, #32]
 801eaf8:	1d7a      	adds	r2, r7, #5
 801eafa:	32ff      	adds	r2, #255	@ 0xff
 801eafc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801eafe:	683b      	ldr	r3, [r7, #0]
 801eb00:	2200      	movs	r2, #0
 801eb02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801eb04:	683b      	ldr	r3, [r7, #0]
 801eb06:	785b      	ldrb	r3, [r3, #1]
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d000      	beq.n	801eb0e <USB_EPStartXfer+0x292>
 801eb0c:	e070      	b.n	801ebf0 <USB_EPStartXfer+0x374>
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	61bb      	str	r3, [r7, #24]
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	2250      	movs	r2, #80	@ 0x50
 801eb16:	5a9b      	ldrh	r3, [r3, r2]
 801eb18:	b29b      	uxth	r3, r3
 801eb1a:	001a      	movs	r2, r3
 801eb1c:	69bb      	ldr	r3, [r7, #24]
 801eb1e:	189b      	adds	r3, r3, r2
 801eb20:	61bb      	str	r3, [r7, #24]
 801eb22:	683b      	ldr	r3, [r7, #0]
 801eb24:	781b      	ldrb	r3, [r3, #0]
 801eb26:	00da      	lsls	r2, r3, #3
 801eb28:	69bb      	ldr	r3, [r7, #24]
 801eb2a:	18d3      	adds	r3, r2, r3
 801eb2c:	4a48      	ldr	r2, [pc, #288]	@ (801ec50 <USB_EPStartXfer+0x3d4>)
 801eb2e:	4694      	mov	ip, r2
 801eb30:	4463      	add	r3, ip
 801eb32:	617b      	str	r3, [r7, #20]
 801eb34:	697b      	ldr	r3, [r7, #20]
 801eb36:	881b      	ldrh	r3, [r3, #0]
 801eb38:	b29b      	uxth	r3, r3
 801eb3a:	059b      	lsls	r3, r3, #22
 801eb3c:	0d9b      	lsrs	r3, r3, #22
 801eb3e:	b29a      	uxth	r2, r3
 801eb40:	697b      	ldr	r3, [r7, #20]
 801eb42:	801a      	strh	r2, [r3, #0]
 801eb44:	1d7b      	adds	r3, r7, #5
 801eb46:	33ff      	adds	r3, #255	@ 0xff
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	2b3e      	cmp	r3, #62	@ 0x3e
 801eb4c:	d922      	bls.n	801eb94 <USB_EPStartXfer+0x318>
 801eb4e:	1d7b      	adds	r3, r7, #5
 801eb50:	33ff      	adds	r3, #255	@ 0xff
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	095b      	lsrs	r3, r3, #5
 801eb56:	21fc      	movs	r1, #252	@ 0xfc
 801eb58:	187a      	adds	r2, r7, r1
 801eb5a:	6013      	str	r3, [r2, #0]
 801eb5c:	1d7b      	adds	r3, r7, #5
 801eb5e:	33ff      	adds	r3, #255	@ 0xff
 801eb60:	681b      	ldr	r3, [r3, #0]
 801eb62:	221f      	movs	r2, #31
 801eb64:	4013      	ands	r3, r2
 801eb66:	d104      	bne.n	801eb72 <USB_EPStartXfer+0x2f6>
 801eb68:	187b      	adds	r3, r7, r1
 801eb6a:	681b      	ldr	r3, [r3, #0]
 801eb6c:	3b01      	subs	r3, #1
 801eb6e:	187a      	adds	r2, r7, r1
 801eb70:	6013      	str	r3, [r2, #0]
 801eb72:	697b      	ldr	r3, [r7, #20]
 801eb74:	881b      	ldrh	r3, [r3, #0]
 801eb76:	b29a      	uxth	r2, r3
 801eb78:	23fc      	movs	r3, #252	@ 0xfc
 801eb7a:	18fb      	adds	r3, r7, r3
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	b29b      	uxth	r3, r3
 801eb80:	029b      	lsls	r3, r3, #10
 801eb82:	b29b      	uxth	r3, r3
 801eb84:	4313      	orrs	r3, r2
 801eb86:	b29b      	uxth	r3, r3
 801eb88:	4a35      	ldr	r2, [pc, #212]	@ (801ec60 <USB_EPStartXfer+0x3e4>)
 801eb8a:	4313      	orrs	r3, r2
 801eb8c:	b29a      	uxth	r2, r3
 801eb8e:	697b      	ldr	r3, [r7, #20]
 801eb90:	801a      	strh	r2, [r3, #0]
 801eb92:	e04a      	b.n	801ec2a <USB_EPStartXfer+0x3ae>
 801eb94:	1d7b      	adds	r3, r7, #5
 801eb96:	33ff      	adds	r3, #255	@ 0xff
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d108      	bne.n	801ebb0 <USB_EPStartXfer+0x334>
 801eb9e:	697b      	ldr	r3, [r7, #20]
 801eba0:	881b      	ldrh	r3, [r3, #0]
 801eba2:	b29b      	uxth	r3, r3
 801eba4:	4a2e      	ldr	r2, [pc, #184]	@ (801ec60 <USB_EPStartXfer+0x3e4>)
 801eba6:	4313      	orrs	r3, r2
 801eba8:	b29a      	uxth	r2, r3
 801ebaa:	697b      	ldr	r3, [r7, #20]
 801ebac:	801a      	strh	r2, [r3, #0]
 801ebae:	e03c      	b.n	801ec2a <USB_EPStartXfer+0x3ae>
 801ebb0:	1d7b      	adds	r3, r7, #5
 801ebb2:	33ff      	adds	r3, #255	@ 0xff
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	085b      	lsrs	r3, r3, #1
 801ebb8:	21fc      	movs	r1, #252	@ 0xfc
 801ebba:	187a      	adds	r2, r7, r1
 801ebbc:	6013      	str	r3, [r2, #0]
 801ebbe:	1d7b      	adds	r3, r7, #5
 801ebc0:	33ff      	adds	r3, #255	@ 0xff
 801ebc2:	681b      	ldr	r3, [r3, #0]
 801ebc4:	2201      	movs	r2, #1
 801ebc6:	4013      	ands	r3, r2
 801ebc8:	d004      	beq.n	801ebd4 <USB_EPStartXfer+0x358>
 801ebca:	187b      	adds	r3, r7, r1
 801ebcc:	681b      	ldr	r3, [r3, #0]
 801ebce:	3301      	adds	r3, #1
 801ebd0:	187a      	adds	r2, r7, r1
 801ebd2:	6013      	str	r3, [r2, #0]
 801ebd4:	697b      	ldr	r3, [r7, #20]
 801ebd6:	881b      	ldrh	r3, [r3, #0]
 801ebd8:	b29a      	uxth	r2, r3
 801ebda:	23fc      	movs	r3, #252	@ 0xfc
 801ebdc:	18fb      	adds	r3, r7, r3
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	b29b      	uxth	r3, r3
 801ebe2:	029b      	lsls	r3, r3, #10
 801ebe4:	b29b      	uxth	r3, r3
 801ebe6:	4313      	orrs	r3, r2
 801ebe8:	b29a      	uxth	r2, r3
 801ebea:	697b      	ldr	r3, [r7, #20]
 801ebec:	801a      	strh	r2, [r3, #0]
 801ebee:	e01c      	b.n	801ec2a <USB_EPStartXfer+0x3ae>
 801ebf0:	683b      	ldr	r3, [r7, #0]
 801ebf2:	785b      	ldrb	r3, [r3, #1]
 801ebf4:	2b01      	cmp	r3, #1
 801ebf6:	d118      	bne.n	801ec2a <USB_EPStartXfer+0x3ae>
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	623b      	str	r3, [r7, #32]
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	2250      	movs	r2, #80	@ 0x50
 801ec00:	5a9b      	ldrh	r3, [r3, r2]
 801ec02:	b29b      	uxth	r3, r3
 801ec04:	001a      	movs	r2, r3
 801ec06:	6a3b      	ldr	r3, [r7, #32]
 801ec08:	189b      	adds	r3, r3, r2
 801ec0a:	623b      	str	r3, [r7, #32]
 801ec0c:	683b      	ldr	r3, [r7, #0]
 801ec0e:	781b      	ldrb	r3, [r3, #0]
 801ec10:	00da      	lsls	r2, r3, #3
 801ec12:	6a3b      	ldr	r3, [r7, #32]
 801ec14:	18d3      	adds	r3, r2, r3
 801ec16:	4a0e      	ldr	r2, [pc, #56]	@ (801ec50 <USB_EPStartXfer+0x3d4>)
 801ec18:	4694      	mov	ip, r2
 801ec1a:	4463      	add	r3, ip
 801ec1c:	61fb      	str	r3, [r7, #28]
 801ec1e:	1d7b      	adds	r3, r7, #5
 801ec20:	33ff      	adds	r3, #255	@ 0xff
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	b29a      	uxth	r2, r3
 801ec26:	69fb      	ldr	r3, [r7, #28]
 801ec28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801ec2a:	2076      	movs	r0, #118	@ 0x76
 801ec2c:	183b      	adds	r3, r7, r0
 801ec2e:	683a      	ldr	r2, [r7, #0]
 801ec30:	8912      	ldrh	r2, [r2, #8]
 801ec32:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ec34:	683b      	ldr	r3, [r7, #0]
 801ec36:	6959      	ldr	r1, [r3, #20]
 801ec38:	1d7b      	adds	r3, r7, #5
 801ec3a:	33ff      	adds	r3, #255	@ 0xff
 801ec3c:	681b      	ldr	r3, [r3, #0]
 801ec3e:	b29c      	uxth	r4, r3
 801ec40:	183b      	adds	r3, r7, r0
 801ec42:	881a      	ldrh	r2, [r3, #0]
 801ec44:	6878      	ldr	r0, [r7, #4]
 801ec46:	0023      	movs	r3, r4
 801ec48:	f001 f88a 	bl	801fd60 <USB_WritePMA>
 801ec4c:	e329      	b.n	801f2a2 <USB_EPStartXfer+0xa26>
 801ec4e:	46c0      	nop			@ (mov r8, r8)
 801ec50:	00000402 	.word	0x00000402
 801ec54:	ffff8f8f 	.word	0xffff8f8f
 801ec58:	ffff8180 	.word	0xffff8180
 801ec5c:	00000406 	.word	0x00000406
 801ec60:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801ec64:	683b      	ldr	r3, [r7, #0]
 801ec66:	785b      	ldrb	r3, [r3, #1]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d000      	beq.n	801ec6e <USB_EPStartXfer+0x3f2>
 801ec6c:	e070      	b.n	801ed50 <USB_EPStartXfer+0x4d4>
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	2250      	movs	r2, #80	@ 0x50
 801ec76:	5a9b      	ldrh	r3, [r3, r2]
 801ec78:	b29b      	uxth	r3, r3
 801ec7a:	001a      	movs	r2, r3
 801ec7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec7e:	189b      	adds	r3, r3, r2
 801ec80:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ec82:	683b      	ldr	r3, [r7, #0]
 801ec84:	781b      	ldrb	r3, [r3, #0]
 801ec86:	00da      	lsls	r2, r3, #3
 801ec88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec8a:	18d3      	adds	r3, r2, r3
 801ec8c:	4acd      	ldr	r2, [pc, #820]	@ (801efc4 <USB_EPStartXfer+0x748>)
 801ec8e:	4694      	mov	ip, r2
 801ec90:	4463      	add	r3, ip
 801ec92:	647b      	str	r3, [r7, #68]	@ 0x44
 801ec94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ec96:	881b      	ldrh	r3, [r3, #0]
 801ec98:	b29b      	uxth	r3, r3
 801ec9a:	059b      	lsls	r3, r3, #22
 801ec9c:	0d9b      	lsrs	r3, r3, #22
 801ec9e:	b29a      	uxth	r2, r3
 801eca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eca2:	801a      	strh	r2, [r3, #0]
 801eca4:	1d7b      	adds	r3, r7, #5
 801eca6:	33ff      	adds	r3, #255	@ 0xff
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	2b3e      	cmp	r3, #62	@ 0x3e
 801ecac:	d922      	bls.n	801ecf4 <USB_EPStartXfer+0x478>
 801ecae:	1d7b      	adds	r3, r7, #5
 801ecb0:	33ff      	adds	r3, #255	@ 0xff
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	095b      	lsrs	r3, r3, #5
 801ecb6:	21f8      	movs	r1, #248	@ 0xf8
 801ecb8:	187a      	adds	r2, r7, r1
 801ecba:	6013      	str	r3, [r2, #0]
 801ecbc:	1d7b      	adds	r3, r7, #5
 801ecbe:	33ff      	adds	r3, #255	@ 0xff
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	221f      	movs	r2, #31
 801ecc4:	4013      	ands	r3, r2
 801ecc6:	d104      	bne.n	801ecd2 <USB_EPStartXfer+0x456>
 801ecc8:	187b      	adds	r3, r7, r1
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	3b01      	subs	r3, #1
 801ecce:	187a      	adds	r2, r7, r1
 801ecd0:	6013      	str	r3, [r2, #0]
 801ecd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ecd4:	881b      	ldrh	r3, [r3, #0]
 801ecd6:	b29a      	uxth	r2, r3
 801ecd8:	23f8      	movs	r3, #248	@ 0xf8
 801ecda:	18fb      	adds	r3, r7, r3
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	b29b      	uxth	r3, r3
 801ece0:	029b      	lsls	r3, r3, #10
 801ece2:	b29b      	uxth	r3, r3
 801ece4:	4313      	orrs	r3, r2
 801ece6:	b29b      	uxth	r3, r3
 801ece8:	4ab7      	ldr	r2, [pc, #732]	@ (801efc8 <USB_EPStartXfer+0x74c>)
 801ecea:	4313      	orrs	r3, r2
 801ecec:	b29a      	uxth	r2, r3
 801ecee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ecf0:	801a      	strh	r2, [r3, #0]
 801ecf2:	e04a      	b.n	801ed8a <USB_EPStartXfer+0x50e>
 801ecf4:	1d7b      	adds	r3, r7, #5
 801ecf6:	33ff      	adds	r3, #255	@ 0xff
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d108      	bne.n	801ed10 <USB_EPStartXfer+0x494>
 801ecfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed00:	881b      	ldrh	r3, [r3, #0]
 801ed02:	b29b      	uxth	r3, r3
 801ed04:	4ab0      	ldr	r2, [pc, #704]	@ (801efc8 <USB_EPStartXfer+0x74c>)
 801ed06:	4313      	orrs	r3, r2
 801ed08:	b29a      	uxth	r2, r3
 801ed0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed0c:	801a      	strh	r2, [r3, #0]
 801ed0e:	e03c      	b.n	801ed8a <USB_EPStartXfer+0x50e>
 801ed10:	1d7b      	adds	r3, r7, #5
 801ed12:	33ff      	adds	r3, #255	@ 0xff
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	085b      	lsrs	r3, r3, #1
 801ed18:	21f8      	movs	r1, #248	@ 0xf8
 801ed1a:	187a      	adds	r2, r7, r1
 801ed1c:	6013      	str	r3, [r2, #0]
 801ed1e:	1d7b      	adds	r3, r7, #5
 801ed20:	33ff      	adds	r3, #255	@ 0xff
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	2201      	movs	r2, #1
 801ed26:	4013      	ands	r3, r2
 801ed28:	d004      	beq.n	801ed34 <USB_EPStartXfer+0x4b8>
 801ed2a:	187b      	adds	r3, r7, r1
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	3301      	adds	r3, #1
 801ed30:	187a      	adds	r2, r7, r1
 801ed32:	6013      	str	r3, [r2, #0]
 801ed34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed36:	881b      	ldrh	r3, [r3, #0]
 801ed38:	b29a      	uxth	r2, r3
 801ed3a:	23f8      	movs	r3, #248	@ 0xf8
 801ed3c:	18fb      	adds	r3, r7, r3
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	b29b      	uxth	r3, r3
 801ed42:	029b      	lsls	r3, r3, #10
 801ed44:	b29b      	uxth	r3, r3
 801ed46:	4313      	orrs	r3, r2
 801ed48:	b29a      	uxth	r2, r3
 801ed4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed4c:	801a      	strh	r2, [r3, #0]
 801ed4e:	e01c      	b.n	801ed8a <USB_EPStartXfer+0x50e>
 801ed50:	683b      	ldr	r3, [r7, #0]
 801ed52:	785b      	ldrb	r3, [r3, #1]
 801ed54:	2b01      	cmp	r3, #1
 801ed56:	d118      	bne.n	801ed8a <USB_EPStartXfer+0x50e>
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	2250      	movs	r2, #80	@ 0x50
 801ed60:	5a9b      	ldrh	r3, [r3, r2]
 801ed62:	b29b      	uxth	r3, r3
 801ed64:	001a      	movs	r2, r3
 801ed66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed68:	189b      	adds	r3, r3, r2
 801ed6a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ed6c:	683b      	ldr	r3, [r7, #0]
 801ed6e:	781b      	ldrb	r3, [r3, #0]
 801ed70:	00da      	lsls	r2, r3, #3
 801ed72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed74:	18d3      	adds	r3, r2, r3
 801ed76:	4a93      	ldr	r2, [pc, #588]	@ (801efc4 <USB_EPStartXfer+0x748>)
 801ed78:	4694      	mov	ip, r2
 801ed7a:	4463      	add	r3, ip
 801ed7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ed7e:	1d7b      	adds	r3, r7, #5
 801ed80:	33ff      	adds	r3, #255	@ 0xff
 801ed82:	681b      	ldr	r3, [r3, #0]
 801ed84:	b29a      	uxth	r2, r3
 801ed86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801ed8a:	2076      	movs	r0, #118	@ 0x76
 801ed8c:	183b      	adds	r3, r7, r0
 801ed8e:	683a      	ldr	r2, [r7, #0]
 801ed90:	8912      	ldrh	r2, [r2, #8]
 801ed92:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ed94:	683b      	ldr	r3, [r7, #0]
 801ed96:	6959      	ldr	r1, [r3, #20]
 801ed98:	1d7b      	adds	r3, r7, #5
 801ed9a:	33ff      	adds	r3, #255	@ 0xff
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	b29c      	uxth	r4, r3
 801eda0:	183b      	adds	r3, r7, r0
 801eda2:	881a      	ldrh	r2, [r3, #0]
 801eda4:	6878      	ldr	r0, [r7, #4]
 801eda6:	0023      	movs	r3, r4
 801eda8:	f000 ffda 	bl	801fd60 <USB_WritePMA>
            ep->xfer_buff += len;
 801edac:	683b      	ldr	r3, [r7, #0]
 801edae:	695a      	ldr	r2, [r3, #20]
 801edb0:	1d7b      	adds	r3, r7, #5
 801edb2:	33ff      	adds	r3, #255	@ 0xff
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	18d2      	adds	r2, r2, r3
 801edb8:	683b      	ldr	r3, [r7, #0]
 801edba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801edbc:	683b      	ldr	r3, [r7, #0]
 801edbe:	6a1a      	ldr	r2, [r3, #32]
 801edc0:	683b      	ldr	r3, [r7, #0]
 801edc2:	691b      	ldr	r3, [r3, #16]
 801edc4:	429a      	cmp	r2, r3
 801edc6:	d908      	bls.n	801edda <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801edc8:	683b      	ldr	r3, [r7, #0]
 801edca:	6a1a      	ldr	r2, [r3, #32]
 801edcc:	1d7b      	adds	r3, r7, #5
 801edce:	33ff      	adds	r3, #255	@ 0xff
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	1ad2      	subs	r2, r2, r3
 801edd4:	683b      	ldr	r3, [r7, #0]
 801edd6:	621a      	str	r2, [r3, #32]
 801edd8:	e007      	b.n	801edea <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801edda:	683b      	ldr	r3, [r7, #0]
 801eddc:	6a1b      	ldr	r3, [r3, #32]
 801edde:	1d7a      	adds	r2, r7, #5
 801ede0:	32ff      	adds	r2, #255	@ 0xff
 801ede2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801ede4:	683b      	ldr	r3, [r7, #0]
 801ede6:	2200      	movs	r2, #0
 801ede8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	643b      	str	r3, [r7, #64]	@ 0x40
 801edee:	683b      	ldr	r3, [r7, #0]
 801edf0:	785b      	ldrb	r3, [r3, #1]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d000      	beq.n	801edf8 <USB_EPStartXfer+0x57c>
 801edf6:	e070      	b.n	801eeda <USB_EPStartXfer+0x65e>
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	2250      	movs	r2, #80	@ 0x50
 801ee00:	5a9b      	ldrh	r3, [r3, r2]
 801ee02:	b29b      	uxth	r3, r3
 801ee04:	001a      	movs	r2, r3
 801ee06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ee08:	189b      	adds	r3, r3, r2
 801ee0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ee0c:	683b      	ldr	r3, [r7, #0]
 801ee0e:	781b      	ldrb	r3, [r3, #0]
 801ee10:	00da      	lsls	r2, r3, #3
 801ee12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ee14:	18d3      	adds	r3, r2, r3
 801ee16:	4a6d      	ldr	r2, [pc, #436]	@ (801efcc <USB_EPStartXfer+0x750>)
 801ee18:	4694      	mov	ip, r2
 801ee1a:	4463      	add	r3, ip
 801ee1c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ee1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee20:	881b      	ldrh	r3, [r3, #0]
 801ee22:	b29b      	uxth	r3, r3
 801ee24:	059b      	lsls	r3, r3, #22
 801ee26:	0d9b      	lsrs	r3, r3, #22
 801ee28:	b29a      	uxth	r2, r3
 801ee2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee2c:	801a      	strh	r2, [r3, #0]
 801ee2e:	1d7b      	adds	r3, r7, #5
 801ee30:	33ff      	adds	r3, #255	@ 0xff
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	2b3e      	cmp	r3, #62	@ 0x3e
 801ee36:	d922      	bls.n	801ee7e <USB_EPStartXfer+0x602>
 801ee38:	1d7b      	adds	r3, r7, #5
 801ee3a:	33ff      	adds	r3, #255	@ 0xff
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	095b      	lsrs	r3, r3, #5
 801ee40:	21f4      	movs	r1, #244	@ 0xf4
 801ee42:	187a      	adds	r2, r7, r1
 801ee44:	6013      	str	r3, [r2, #0]
 801ee46:	1d7b      	adds	r3, r7, #5
 801ee48:	33ff      	adds	r3, #255	@ 0xff
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	221f      	movs	r2, #31
 801ee4e:	4013      	ands	r3, r2
 801ee50:	d104      	bne.n	801ee5c <USB_EPStartXfer+0x5e0>
 801ee52:	187b      	adds	r3, r7, r1
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	3b01      	subs	r3, #1
 801ee58:	187a      	adds	r2, r7, r1
 801ee5a:	6013      	str	r3, [r2, #0]
 801ee5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee5e:	881b      	ldrh	r3, [r3, #0]
 801ee60:	b29a      	uxth	r2, r3
 801ee62:	23f4      	movs	r3, #244	@ 0xf4
 801ee64:	18fb      	adds	r3, r7, r3
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	b29b      	uxth	r3, r3
 801ee6a:	029b      	lsls	r3, r3, #10
 801ee6c:	b29b      	uxth	r3, r3
 801ee6e:	4313      	orrs	r3, r2
 801ee70:	b29b      	uxth	r3, r3
 801ee72:	4a55      	ldr	r2, [pc, #340]	@ (801efc8 <USB_EPStartXfer+0x74c>)
 801ee74:	4313      	orrs	r3, r2
 801ee76:	b29a      	uxth	r2, r3
 801ee78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee7a:	801a      	strh	r2, [r3, #0]
 801ee7c:	e048      	b.n	801ef10 <USB_EPStartXfer+0x694>
 801ee7e:	1d7b      	adds	r3, r7, #5
 801ee80:	33ff      	adds	r3, #255	@ 0xff
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d108      	bne.n	801ee9a <USB_EPStartXfer+0x61e>
 801ee88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee8a:	881b      	ldrh	r3, [r3, #0]
 801ee8c:	b29b      	uxth	r3, r3
 801ee8e:	4a4e      	ldr	r2, [pc, #312]	@ (801efc8 <USB_EPStartXfer+0x74c>)
 801ee90:	4313      	orrs	r3, r2
 801ee92:	b29a      	uxth	r2, r3
 801ee94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee96:	801a      	strh	r2, [r3, #0]
 801ee98:	e03a      	b.n	801ef10 <USB_EPStartXfer+0x694>
 801ee9a:	1d7b      	adds	r3, r7, #5
 801ee9c:	33ff      	adds	r3, #255	@ 0xff
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	085b      	lsrs	r3, r3, #1
 801eea2:	21f4      	movs	r1, #244	@ 0xf4
 801eea4:	187a      	adds	r2, r7, r1
 801eea6:	6013      	str	r3, [r2, #0]
 801eea8:	1d7b      	adds	r3, r7, #5
 801eeaa:	33ff      	adds	r3, #255	@ 0xff
 801eeac:	681b      	ldr	r3, [r3, #0]
 801eeae:	2201      	movs	r2, #1
 801eeb0:	4013      	ands	r3, r2
 801eeb2:	d004      	beq.n	801eebe <USB_EPStartXfer+0x642>
 801eeb4:	187b      	adds	r3, r7, r1
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	3301      	adds	r3, #1
 801eeba:	187a      	adds	r2, r7, r1
 801eebc:	6013      	str	r3, [r2, #0]
 801eebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eec0:	881b      	ldrh	r3, [r3, #0]
 801eec2:	b29a      	uxth	r2, r3
 801eec4:	23f4      	movs	r3, #244	@ 0xf4
 801eec6:	18fb      	adds	r3, r7, r3
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	b29b      	uxth	r3, r3
 801eecc:	029b      	lsls	r3, r3, #10
 801eece:	b29b      	uxth	r3, r3
 801eed0:	4313      	orrs	r3, r2
 801eed2:	b29a      	uxth	r2, r3
 801eed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eed6:	801a      	strh	r2, [r3, #0]
 801eed8:	e01a      	b.n	801ef10 <USB_EPStartXfer+0x694>
 801eeda:	683b      	ldr	r3, [r7, #0]
 801eedc:	785b      	ldrb	r3, [r3, #1]
 801eede:	2b01      	cmp	r3, #1
 801eee0:	d116      	bne.n	801ef10 <USB_EPStartXfer+0x694>
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	2250      	movs	r2, #80	@ 0x50
 801eee6:	5a9b      	ldrh	r3, [r3, r2]
 801eee8:	b29b      	uxth	r3, r3
 801eeea:	001a      	movs	r2, r3
 801eeec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eeee:	189b      	adds	r3, r3, r2
 801eef0:	643b      	str	r3, [r7, #64]	@ 0x40
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	781b      	ldrb	r3, [r3, #0]
 801eef6:	00da      	lsls	r2, r3, #3
 801eef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eefa:	18d3      	adds	r3, r2, r3
 801eefc:	4a33      	ldr	r2, [pc, #204]	@ (801efcc <USB_EPStartXfer+0x750>)
 801eefe:	4694      	mov	ip, r2
 801ef00:	4463      	add	r3, ip
 801ef02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ef04:	1d7b      	adds	r3, r7, #5
 801ef06:	33ff      	adds	r3, #255	@ 0xff
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	b29a      	uxth	r2, r3
 801ef0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ef0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801ef10:	2076      	movs	r0, #118	@ 0x76
 801ef12:	183b      	adds	r3, r7, r0
 801ef14:	683a      	ldr	r2, [r7, #0]
 801ef16:	8952      	ldrh	r2, [r2, #10]
 801ef18:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ef1a:	683b      	ldr	r3, [r7, #0]
 801ef1c:	6959      	ldr	r1, [r3, #20]
 801ef1e:	1d7b      	adds	r3, r7, #5
 801ef20:	33ff      	adds	r3, #255	@ 0xff
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	b29c      	uxth	r4, r3
 801ef26:	183b      	adds	r3, r7, r0
 801ef28:	881a      	ldrh	r2, [r3, #0]
 801ef2a:	6878      	ldr	r0, [r7, #4]
 801ef2c:	0023      	movs	r3, r4
 801ef2e:	f000 ff17 	bl	801fd60 <USB_WritePMA>
 801ef32:	e1b6      	b.n	801f2a2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801ef34:	683b      	ldr	r3, [r7, #0]
 801ef36:	6a1b      	ldr	r3, [r3, #32]
 801ef38:	1d7a      	adds	r2, r7, #5
 801ef3a:	32ff      	adds	r2, #255	@ 0xff
 801ef3c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801ef3e:	687a      	ldr	r2, [r7, #4]
 801ef40:	683b      	ldr	r3, [r7, #0]
 801ef42:	781b      	ldrb	r3, [r3, #0]
 801ef44:	009b      	lsls	r3, r3, #2
 801ef46:	18d3      	adds	r3, r2, r3
 801ef48:	881b      	ldrh	r3, [r3, #0]
 801ef4a:	b29a      	uxth	r2, r3
 801ef4c:	2062      	movs	r0, #98	@ 0x62
 801ef4e:	183b      	adds	r3, r7, r0
 801ef50:	491f      	ldr	r1, [pc, #124]	@ (801efd0 <USB_EPStartXfer+0x754>)
 801ef52:	400a      	ands	r2, r1
 801ef54:	801a      	strh	r2, [r3, #0]
 801ef56:	687a      	ldr	r2, [r7, #4]
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	781b      	ldrb	r3, [r3, #0]
 801ef5c:	009b      	lsls	r3, r3, #2
 801ef5e:	18d3      	adds	r3, r2, r3
 801ef60:	183a      	adds	r2, r7, r0
 801ef62:	8812      	ldrh	r2, [r2, #0]
 801ef64:	491b      	ldr	r1, [pc, #108]	@ (801efd4 <USB_EPStartXfer+0x758>)
 801ef66:	430a      	orrs	r2, r1
 801ef68:	b292      	uxth	r2, r2
 801ef6a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	2250      	movs	r2, #80	@ 0x50
 801ef74:	5a9b      	ldrh	r3, [r3, r2]
 801ef76:	b29b      	uxth	r3, r3
 801ef78:	001a      	movs	r2, r3
 801ef7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ef7c:	189b      	adds	r3, r3, r2
 801ef7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ef80:	683b      	ldr	r3, [r7, #0]
 801ef82:	781b      	ldrb	r3, [r3, #0]
 801ef84:	00da      	lsls	r2, r3, #3
 801ef86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ef88:	18d3      	adds	r3, r2, r3
 801ef8a:	4a0e      	ldr	r2, [pc, #56]	@ (801efc4 <USB_EPStartXfer+0x748>)
 801ef8c:	4694      	mov	ip, r2
 801ef8e:	4463      	add	r3, ip
 801ef90:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ef92:	1d7b      	adds	r3, r7, #5
 801ef94:	33ff      	adds	r3, #255	@ 0xff
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	b29a      	uxth	r2, r3
 801ef9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ef9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801ef9e:	2076      	movs	r0, #118	@ 0x76
 801efa0:	183b      	adds	r3, r7, r0
 801efa2:	683a      	ldr	r2, [r7, #0]
 801efa4:	8912      	ldrh	r2, [r2, #8]
 801efa6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801efa8:	683b      	ldr	r3, [r7, #0]
 801efaa:	6959      	ldr	r1, [r3, #20]
 801efac:	1d7b      	adds	r3, r7, #5
 801efae:	33ff      	adds	r3, #255	@ 0xff
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	b29c      	uxth	r4, r3
 801efb4:	183b      	adds	r3, r7, r0
 801efb6:	881a      	ldrh	r2, [r3, #0]
 801efb8:	6878      	ldr	r0, [r7, #4]
 801efba:	0023      	movs	r3, r4
 801efbc:	f000 fed0 	bl	801fd60 <USB_WritePMA>
 801efc0:	e16f      	b.n	801f2a2 <USB_EPStartXfer+0xa26>
 801efc2:	46c0      	nop			@ (mov r8, r8)
 801efc4:	00000402 	.word	0x00000402
 801efc8:	ffff8000 	.word	0xffff8000
 801efcc:	00000406 	.word	0x00000406
 801efd0:	ffff8e8f 	.word	0xffff8e8f
 801efd4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801efd8:	683b      	ldr	r3, [r7, #0]
 801efda:	6a1a      	ldr	r2, [r3, #32]
 801efdc:	1d7b      	adds	r3, r7, #5
 801efde:	33ff      	adds	r3, #255	@ 0xff
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	1ad2      	subs	r2, r2, r3
 801efe4:	683b      	ldr	r3, [r7, #0]
 801efe6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801efe8:	687a      	ldr	r2, [r7, #4]
 801efea:	683b      	ldr	r3, [r7, #0]
 801efec:	781b      	ldrb	r3, [r3, #0]
 801efee:	009b      	lsls	r3, r3, #2
 801eff0:	18d3      	adds	r3, r2, r3
 801eff2:	881b      	ldrh	r3, [r3, #0]
 801eff4:	b29b      	uxth	r3, r3
 801eff6:	001a      	movs	r2, r3
 801eff8:	2340      	movs	r3, #64	@ 0x40
 801effa:	4013      	ands	r3, r2
 801effc:	d100      	bne.n	801f000 <USB_EPStartXfer+0x784>
 801effe:	e0a4      	b.n	801f14a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	673b      	str	r3, [r7, #112]	@ 0x70
 801f004:	683b      	ldr	r3, [r7, #0]
 801f006:	785b      	ldrb	r3, [r3, #1]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d000      	beq.n	801f00e <USB_EPStartXfer+0x792>
 801f00c:	e070      	b.n	801f0f0 <USB_EPStartXfer+0x874>
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	2250      	movs	r2, #80	@ 0x50
 801f016:	5a9b      	ldrh	r3, [r3, r2]
 801f018:	b29b      	uxth	r3, r3
 801f01a:	001a      	movs	r2, r3
 801f01c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f01e:	189b      	adds	r3, r3, r2
 801f020:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f022:	683b      	ldr	r3, [r7, #0]
 801f024:	781b      	ldrb	r3, [r3, #0]
 801f026:	00da      	lsls	r2, r3, #3
 801f028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f02a:	18d3      	adds	r3, r2, r3
 801f02c:	4abc      	ldr	r2, [pc, #752]	@ (801f320 <USB_EPStartXfer+0xaa4>)
 801f02e:	4694      	mov	ip, r2
 801f030:	4463      	add	r3, ip
 801f032:	667b      	str	r3, [r7, #100]	@ 0x64
 801f034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f036:	881b      	ldrh	r3, [r3, #0]
 801f038:	b29b      	uxth	r3, r3
 801f03a:	059b      	lsls	r3, r3, #22
 801f03c:	0d9b      	lsrs	r3, r3, #22
 801f03e:	b29a      	uxth	r2, r3
 801f040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f042:	801a      	strh	r2, [r3, #0]
 801f044:	1d7b      	adds	r3, r7, #5
 801f046:	33ff      	adds	r3, #255	@ 0xff
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f04c:	d922      	bls.n	801f094 <USB_EPStartXfer+0x818>
 801f04e:	1d7b      	adds	r3, r7, #5
 801f050:	33ff      	adds	r3, #255	@ 0xff
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	095b      	lsrs	r3, r3, #5
 801f056:	21f0      	movs	r1, #240	@ 0xf0
 801f058:	187a      	adds	r2, r7, r1
 801f05a:	6013      	str	r3, [r2, #0]
 801f05c:	1d7b      	adds	r3, r7, #5
 801f05e:	33ff      	adds	r3, #255	@ 0xff
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	221f      	movs	r2, #31
 801f064:	4013      	ands	r3, r2
 801f066:	d104      	bne.n	801f072 <USB_EPStartXfer+0x7f6>
 801f068:	187b      	adds	r3, r7, r1
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	3b01      	subs	r3, #1
 801f06e:	187a      	adds	r2, r7, r1
 801f070:	6013      	str	r3, [r2, #0]
 801f072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f074:	881b      	ldrh	r3, [r3, #0]
 801f076:	b29a      	uxth	r2, r3
 801f078:	23f0      	movs	r3, #240	@ 0xf0
 801f07a:	18fb      	adds	r3, r7, r3
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	b29b      	uxth	r3, r3
 801f080:	029b      	lsls	r3, r3, #10
 801f082:	b29b      	uxth	r3, r3
 801f084:	4313      	orrs	r3, r2
 801f086:	b29b      	uxth	r3, r3
 801f088:	4aa6      	ldr	r2, [pc, #664]	@ (801f324 <USB_EPStartXfer+0xaa8>)
 801f08a:	4313      	orrs	r3, r2
 801f08c:	b29a      	uxth	r2, r3
 801f08e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f090:	801a      	strh	r2, [r3, #0]
 801f092:	e048      	b.n	801f126 <USB_EPStartXfer+0x8aa>
 801f094:	1d7b      	adds	r3, r7, #5
 801f096:	33ff      	adds	r3, #255	@ 0xff
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d108      	bne.n	801f0b0 <USB_EPStartXfer+0x834>
 801f09e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f0a0:	881b      	ldrh	r3, [r3, #0]
 801f0a2:	b29b      	uxth	r3, r3
 801f0a4:	4a9f      	ldr	r2, [pc, #636]	@ (801f324 <USB_EPStartXfer+0xaa8>)
 801f0a6:	4313      	orrs	r3, r2
 801f0a8:	b29a      	uxth	r2, r3
 801f0aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f0ac:	801a      	strh	r2, [r3, #0]
 801f0ae:	e03a      	b.n	801f126 <USB_EPStartXfer+0x8aa>
 801f0b0:	1d7b      	adds	r3, r7, #5
 801f0b2:	33ff      	adds	r3, #255	@ 0xff
 801f0b4:	681b      	ldr	r3, [r3, #0]
 801f0b6:	085b      	lsrs	r3, r3, #1
 801f0b8:	21f0      	movs	r1, #240	@ 0xf0
 801f0ba:	187a      	adds	r2, r7, r1
 801f0bc:	6013      	str	r3, [r2, #0]
 801f0be:	1d7b      	adds	r3, r7, #5
 801f0c0:	33ff      	adds	r3, #255	@ 0xff
 801f0c2:	681b      	ldr	r3, [r3, #0]
 801f0c4:	2201      	movs	r2, #1
 801f0c6:	4013      	ands	r3, r2
 801f0c8:	d004      	beq.n	801f0d4 <USB_EPStartXfer+0x858>
 801f0ca:	187b      	adds	r3, r7, r1
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	3301      	adds	r3, #1
 801f0d0:	187a      	adds	r2, r7, r1
 801f0d2:	6013      	str	r3, [r2, #0]
 801f0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f0d6:	881b      	ldrh	r3, [r3, #0]
 801f0d8:	b29a      	uxth	r2, r3
 801f0da:	23f0      	movs	r3, #240	@ 0xf0
 801f0dc:	18fb      	adds	r3, r7, r3
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	b29b      	uxth	r3, r3
 801f0e2:	029b      	lsls	r3, r3, #10
 801f0e4:	b29b      	uxth	r3, r3
 801f0e6:	4313      	orrs	r3, r2
 801f0e8:	b29a      	uxth	r2, r3
 801f0ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f0ec:	801a      	strh	r2, [r3, #0]
 801f0ee:	e01a      	b.n	801f126 <USB_EPStartXfer+0x8aa>
 801f0f0:	683b      	ldr	r3, [r7, #0]
 801f0f2:	785b      	ldrb	r3, [r3, #1]
 801f0f4:	2b01      	cmp	r3, #1
 801f0f6:	d116      	bne.n	801f126 <USB_EPStartXfer+0x8aa>
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	2250      	movs	r2, #80	@ 0x50
 801f0fc:	5a9b      	ldrh	r3, [r3, r2]
 801f0fe:	b29b      	uxth	r3, r3
 801f100:	001a      	movs	r2, r3
 801f102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f104:	189b      	adds	r3, r3, r2
 801f106:	673b      	str	r3, [r7, #112]	@ 0x70
 801f108:	683b      	ldr	r3, [r7, #0]
 801f10a:	781b      	ldrb	r3, [r3, #0]
 801f10c:	00da      	lsls	r2, r3, #3
 801f10e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f110:	18d3      	adds	r3, r2, r3
 801f112:	4a83      	ldr	r2, [pc, #524]	@ (801f320 <USB_EPStartXfer+0xaa4>)
 801f114:	4694      	mov	ip, r2
 801f116:	4463      	add	r3, ip
 801f118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f11a:	1d7b      	adds	r3, r7, #5
 801f11c:	33ff      	adds	r3, #255	@ 0xff
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	b29a      	uxth	r2, r3
 801f122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f124:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801f126:	2076      	movs	r0, #118	@ 0x76
 801f128:	183b      	adds	r3, r7, r0
 801f12a:	683a      	ldr	r2, [r7, #0]
 801f12c:	8952      	ldrh	r2, [r2, #10]
 801f12e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f130:	683b      	ldr	r3, [r7, #0]
 801f132:	6959      	ldr	r1, [r3, #20]
 801f134:	1d7b      	adds	r3, r7, #5
 801f136:	33ff      	adds	r3, #255	@ 0xff
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	b29c      	uxth	r4, r3
 801f13c:	183b      	adds	r3, r7, r0
 801f13e:	881a      	ldrh	r2, [r3, #0]
 801f140:	6878      	ldr	r0, [r7, #4]
 801f142:	0023      	movs	r3, r4
 801f144:	f000 fe0c 	bl	801fd60 <USB_WritePMA>
 801f148:	e0ab      	b.n	801f2a2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f14a:	683b      	ldr	r3, [r7, #0]
 801f14c:	785b      	ldrb	r3, [r3, #1]
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d000      	beq.n	801f154 <USB_EPStartXfer+0x8d8>
 801f152:	e070      	b.n	801f236 <USB_EPStartXfer+0x9ba>
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	2250      	movs	r2, #80	@ 0x50
 801f15c:	5a9b      	ldrh	r3, [r3, r2]
 801f15e:	b29b      	uxth	r3, r3
 801f160:	001a      	movs	r2, r3
 801f162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f164:	189b      	adds	r3, r3, r2
 801f166:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	781b      	ldrb	r3, [r3, #0]
 801f16c:	00da      	lsls	r2, r3, #3
 801f16e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f170:	18d3      	adds	r3, r2, r3
 801f172:	4a6d      	ldr	r2, [pc, #436]	@ (801f328 <USB_EPStartXfer+0xaac>)
 801f174:	4694      	mov	ip, r2
 801f176:	4463      	add	r3, ip
 801f178:	67bb      	str	r3, [r7, #120]	@ 0x78
 801f17a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f17c:	881b      	ldrh	r3, [r3, #0]
 801f17e:	b29b      	uxth	r3, r3
 801f180:	059b      	lsls	r3, r3, #22
 801f182:	0d9b      	lsrs	r3, r3, #22
 801f184:	b29a      	uxth	r2, r3
 801f186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f188:	801a      	strh	r2, [r3, #0]
 801f18a:	1d7b      	adds	r3, r7, #5
 801f18c:	33ff      	adds	r3, #255	@ 0xff
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	2b3e      	cmp	r3, #62	@ 0x3e
 801f192:	d922      	bls.n	801f1da <USB_EPStartXfer+0x95e>
 801f194:	1d7b      	adds	r3, r7, #5
 801f196:	33ff      	adds	r3, #255	@ 0xff
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	095b      	lsrs	r3, r3, #5
 801f19c:	21ec      	movs	r1, #236	@ 0xec
 801f19e:	187a      	adds	r2, r7, r1
 801f1a0:	6013      	str	r3, [r2, #0]
 801f1a2:	1d7b      	adds	r3, r7, #5
 801f1a4:	33ff      	adds	r3, #255	@ 0xff
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	221f      	movs	r2, #31
 801f1aa:	4013      	ands	r3, r2
 801f1ac:	d104      	bne.n	801f1b8 <USB_EPStartXfer+0x93c>
 801f1ae:	187b      	adds	r3, r7, r1
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	3b01      	subs	r3, #1
 801f1b4:	187a      	adds	r2, r7, r1
 801f1b6:	6013      	str	r3, [r2, #0]
 801f1b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f1ba:	881b      	ldrh	r3, [r3, #0]
 801f1bc:	b29a      	uxth	r2, r3
 801f1be:	23ec      	movs	r3, #236	@ 0xec
 801f1c0:	18fb      	adds	r3, r7, r3
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	b29b      	uxth	r3, r3
 801f1c6:	029b      	lsls	r3, r3, #10
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	4313      	orrs	r3, r2
 801f1cc:	b29b      	uxth	r3, r3
 801f1ce:	4a55      	ldr	r2, [pc, #340]	@ (801f324 <USB_EPStartXfer+0xaa8>)
 801f1d0:	4313      	orrs	r3, r2
 801f1d2:	b29a      	uxth	r2, r3
 801f1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f1d6:	801a      	strh	r2, [r3, #0]
 801f1d8:	e052      	b.n	801f280 <USB_EPStartXfer+0xa04>
 801f1da:	1d7b      	adds	r3, r7, #5
 801f1dc:	33ff      	adds	r3, #255	@ 0xff
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d108      	bne.n	801f1f6 <USB_EPStartXfer+0x97a>
 801f1e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f1e6:	881b      	ldrh	r3, [r3, #0]
 801f1e8:	b29b      	uxth	r3, r3
 801f1ea:	4a4e      	ldr	r2, [pc, #312]	@ (801f324 <USB_EPStartXfer+0xaa8>)
 801f1ec:	4313      	orrs	r3, r2
 801f1ee:	b29a      	uxth	r2, r3
 801f1f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f1f2:	801a      	strh	r2, [r3, #0]
 801f1f4:	e044      	b.n	801f280 <USB_EPStartXfer+0xa04>
 801f1f6:	1d7b      	adds	r3, r7, #5
 801f1f8:	33ff      	adds	r3, #255	@ 0xff
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	085b      	lsrs	r3, r3, #1
 801f1fe:	21ec      	movs	r1, #236	@ 0xec
 801f200:	187a      	adds	r2, r7, r1
 801f202:	6013      	str	r3, [r2, #0]
 801f204:	1d7b      	adds	r3, r7, #5
 801f206:	33ff      	adds	r3, #255	@ 0xff
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	2201      	movs	r2, #1
 801f20c:	4013      	ands	r3, r2
 801f20e:	d004      	beq.n	801f21a <USB_EPStartXfer+0x99e>
 801f210:	187b      	adds	r3, r7, r1
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	3301      	adds	r3, #1
 801f216:	187a      	adds	r2, r7, r1
 801f218:	6013      	str	r3, [r2, #0]
 801f21a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f21c:	881b      	ldrh	r3, [r3, #0]
 801f21e:	b29a      	uxth	r2, r3
 801f220:	23ec      	movs	r3, #236	@ 0xec
 801f222:	18fb      	adds	r3, r7, r3
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	b29b      	uxth	r3, r3
 801f228:	029b      	lsls	r3, r3, #10
 801f22a:	b29b      	uxth	r3, r3
 801f22c:	4313      	orrs	r3, r2
 801f22e:	b29a      	uxth	r2, r3
 801f230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f232:	801a      	strh	r2, [r3, #0]
 801f234:	e024      	b.n	801f280 <USB_EPStartXfer+0xa04>
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	785b      	ldrb	r3, [r3, #1]
 801f23a:	2b01      	cmp	r3, #1
 801f23c:	d120      	bne.n	801f280 <USB_EPStartXfer+0xa04>
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	2184      	movs	r1, #132	@ 0x84
 801f242:	187a      	adds	r2, r7, r1
 801f244:	6013      	str	r3, [r2, #0]
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	2250      	movs	r2, #80	@ 0x50
 801f24a:	5a9b      	ldrh	r3, [r3, r2]
 801f24c:	b29b      	uxth	r3, r3
 801f24e:	001a      	movs	r2, r3
 801f250:	187b      	adds	r3, r7, r1
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	189b      	adds	r3, r3, r2
 801f256:	187a      	adds	r2, r7, r1
 801f258:	6013      	str	r3, [r2, #0]
 801f25a:	683b      	ldr	r3, [r7, #0]
 801f25c:	781b      	ldrb	r3, [r3, #0]
 801f25e:	00da      	lsls	r2, r3, #3
 801f260:	187b      	adds	r3, r7, r1
 801f262:	681b      	ldr	r3, [r3, #0]
 801f264:	18d3      	adds	r3, r2, r3
 801f266:	4a30      	ldr	r2, [pc, #192]	@ (801f328 <USB_EPStartXfer+0xaac>)
 801f268:	4694      	mov	ip, r2
 801f26a:	4463      	add	r3, ip
 801f26c:	2180      	movs	r1, #128	@ 0x80
 801f26e:	187a      	adds	r2, r7, r1
 801f270:	6013      	str	r3, [r2, #0]
 801f272:	1d7b      	adds	r3, r7, #5
 801f274:	33ff      	adds	r3, #255	@ 0xff
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	b29a      	uxth	r2, r3
 801f27a:	187b      	adds	r3, r7, r1
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f280:	2076      	movs	r0, #118	@ 0x76
 801f282:	183b      	adds	r3, r7, r0
 801f284:	683a      	ldr	r2, [r7, #0]
 801f286:	8912      	ldrh	r2, [r2, #8]
 801f288:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f28a:	683b      	ldr	r3, [r7, #0]
 801f28c:	6959      	ldr	r1, [r3, #20]
 801f28e:	1d7b      	adds	r3, r7, #5
 801f290:	33ff      	adds	r3, #255	@ 0xff
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	b29c      	uxth	r4, r3
 801f296:	183b      	adds	r3, r7, r0
 801f298:	881a      	ldrh	r2, [r3, #0]
 801f29a:	6878      	ldr	r0, [r7, #4]
 801f29c:	0023      	movs	r3, r4
 801f29e:	f000 fd5f 	bl	801fd60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801f2a2:	687a      	ldr	r2, [r7, #4]
 801f2a4:	683b      	ldr	r3, [r7, #0]
 801f2a6:	781b      	ldrb	r3, [r3, #0]
 801f2a8:	009b      	lsls	r3, r3, #2
 801f2aa:	18d3      	adds	r3, r2, r3
 801f2ac:	881b      	ldrh	r3, [r3, #0]
 801f2ae:	b29a      	uxth	r2, r3
 801f2b0:	200a      	movs	r0, #10
 801f2b2:	183b      	adds	r3, r7, r0
 801f2b4:	491d      	ldr	r1, [pc, #116]	@ (801f32c <USB_EPStartXfer+0xab0>)
 801f2b6:	400a      	ands	r2, r1
 801f2b8:	801a      	strh	r2, [r3, #0]
 801f2ba:	183b      	adds	r3, r7, r0
 801f2bc:	183a      	adds	r2, r7, r0
 801f2be:	8812      	ldrh	r2, [r2, #0]
 801f2c0:	2110      	movs	r1, #16
 801f2c2:	404a      	eors	r2, r1
 801f2c4:	801a      	strh	r2, [r3, #0]
 801f2c6:	183b      	adds	r3, r7, r0
 801f2c8:	183a      	adds	r2, r7, r0
 801f2ca:	8812      	ldrh	r2, [r2, #0]
 801f2cc:	2120      	movs	r1, #32
 801f2ce:	404a      	eors	r2, r1
 801f2d0:	801a      	strh	r2, [r3, #0]
 801f2d2:	687a      	ldr	r2, [r7, #4]
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	781b      	ldrb	r3, [r3, #0]
 801f2d8:	009b      	lsls	r3, r3, #2
 801f2da:	18d3      	adds	r3, r2, r3
 801f2dc:	183a      	adds	r2, r7, r0
 801f2de:	8812      	ldrh	r2, [r2, #0]
 801f2e0:	4913      	ldr	r1, [pc, #76]	@ (801f330 <USB_EPStartXfer+0xab4>)
 801f2e2:	430a      	orrs	r2, r1
 801f2e4:	b292      	uxth	r2, r2
 801f2e6:	801a      	strh	r2, [r3, #0]
 801f2e8:	f000 fbf4 	bl	801fad4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801f2ec:	683b      	ldr	r3, [r7, #0]
 801f2ee:	7b1b      	ldrb	r3, [r3, #12]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d000      	beq.n	801f2f6 <USB_EPStartXfer+0xa7a>
 801f2f4:	e0a9      	b.n	801f44a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801f2f6:	683b      	ldr	r3, [r7, #0]
 801f2f8:	699a      	ldr	r2, [r3, #24]
 801f2fa:	683b      	ldr	r3, [r7, #0]
 801f2fc:	691b      	ldr	r3, [r3, #16]
 801f2fe:	429a      	cmp	r2, r3
 801f300:	d918      	bls.n	801f334 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801f302:	683b      	ldr	r3, [r7, #0]
 801f304:	691b      	ldr	r3, [r3, #16]
 801f306:	1d7a      	adds	r2, r7, #5
 801f308:	32ff      	adds	r2, #255	@ 0xff
 801f30a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801f30c:	683b      	ldr	r3, [r7, #0]
 801f30e:	699a      	ldr	r2, [r3, #24]
 801f310:	1d7b      	adds	r3, r7, #5
 801f312:	33ff      	adds	r3, #255	@ 0xff
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	1ad2      	subs	r2, r2, r3
 801f318:	683b      	ldr	r3, [r7, #0]
 801f31a:	619a      	str	r2, [r3, #24]
 801f31c:	e012      	b.n	801f344 <USB_EPStartXfer+0xac8>
 801f31e:	46c0      	nop			@ (mov r8, r8)
 801f320:	00000406 	.word	0x00000406
 801f324:	ffff8000 	.word	0xffff8000
 801f328:	00000402 	.word	0x00000402
 801f32c:	ffff8fbf 	.word	0xffff8fbf
 801f330:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801f334:	683b      	ldr	r3, [r7, #0]
 801f336:	699b      	ldr	r3, [r3, #24]
 801f338:	1d7a      	adds	r2, r7, #5
 801f33a:	32ff      	adds	r2, #255	@ 0xff
 801f33c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801f33e:	683b      	ldr	r3, [r7, #0]
 801f340:	2200      	movs	r2, #0
 801f342:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	2190      	movs	r1, #144	@ 0x90
 801f348:	187a      	adds	r2, r7, r1
 801f34a:	6013      	str	r3, [r2, #0]
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	2250      	movs	r2, #80	@ 0x50
 801f350:	5a9b      	ldrh	r3, [r3, r2]
 801f352:	b29b      	uxth	r3, r3
 801f354:	001a      	movs	r2, r3
 801f356:	187b      	adds	r3, r7, r1
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	189b      	adds	r3, r3, r2
 801f35c:	187a      	adds	r2, r7, r1
 801f35e:	6013      	str	r3, [r2, #0]
 801f360:	683b      	ldr	r3, [r7, #0]
 801f362:	781b      	ldrb	r3, [r3, #0]
 801f364:	00da      	lsls	r2, r3, #3
 801f366:	187b      	adds	r3, r7, r1
 801f368:	681b      	ldr	r3, [r3, #0]
 801f36a:	18d3      	adds	r3, r2, r3
 801f36c:	4acf      	ldr	r2, [pc, #828]	@ (801f6ac <USB_EPStartXfer+0xe30>)
 801f36e:	4694      	mov	ip, r2
 801f370:	4463      	add	r3, ip
 801f372:	218c      	movs	r1, #140	@ 0x8c
 801f374:	187a      	adds	r2, r7, r1
 801f376:	6013      	str	r3, [r2, #0]
 801f378:	187b      	adds	r3, r7, r1
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	881b      	ldrh	r3, [r3, #0]
 801f37e:	b29b      	uxth	r3, r3
 801f380:	059b      	lsls	r3, r3, #22
 801f382:	0d9b      	lsrs	r3, r3, #22
 801f384:	b29a      	uxth	r2, r3
 801f386:	187b      	adds	r3, r7, r1
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	801a      	strh	r2, [r3, #0]
 801f38c:	1d7b      	adds	r3, r7, #5
 801f38e:	33ff      	adds	r3, #255	@ 0xff
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	2b3e      	cmp	r3, #62	@ 0x3e
 801f394:	d925      	bls.n	801f3e2 <USB_EPStartXfer+0xb66>
 801f396:	1d7b      	adds	r3, r7, #5
 801f398:	33ff      	adds	r3, #255	@ 0xff
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	095b      	lsrs	r3, r3, #5
 801f39e:	21e8      	movs	r1, #232	@ 0xe8
 801f3a0:	187a      	adds	r2, r7, r1
 801f3a2:	6013      	str	r3, [r2, #0]
 801f3a4:	1d7b      	adds	r3, r7, #5
 801f3a6:	33ff      	adds	r3, #255	@ 0xff
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	221f      	movs	r2, #31
 801f3ac:	4013      	ands	r3, r2
 801f3ae:	d104      	bne.n	801f3ba <USB_EPStartXfer+0xb3e>
 801f3b0:	187b      	adds	r3, r7, r1
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	3b01      	subs	r3, #1
 801f3b6:	187a      	adds	r2, r7, r1
 801f3b8:	6013      	str	r3, [r2, #0]
 801f3ba:	218c      	movs	r1, #140	@ 0x8c
 801f3bc:	187b      	adds	r3, r7, r1
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	881b      	ldrh	r3, [r3, #0]
 801f3c2:	b29a      	uxth	r2, r3
 801f3c4:	23e8      	movs	r3, #232	@ 0xe8
 801f3c6:	18fb      	adds	r3, r7, r3
 801f3c8:	681b      	ldr	r3, [r3, #0]
 801f3ca:	b29b      	uxth	r3, r3
 801f3cc:	029b      	lsls	r3, r3, #10
 801f3ce:	b29b      	uxth	r3, r3
 801f3d0:	4313      	orrs	r3, r2
 801f3d2:	b29b      	uxth	r3, r3
 801f3d4:	4ab6      	ldr	r2, [pc, #728]	@ (801f6b0 <USB_EPStartXfer+0xe34>)
 801f3d6:	4313      	orrs	r3, r2
 801f3d8:	b29a      	uxth	r2, r3
 801f3da:	187b      	adds	r3, r7, r1
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	801a      	strh	r2, [r3, #0]
 801f3e0:	e353      	b.n	801fa8a <USB_EPStartXfer+0x120e>
 801f3e2:	1d7b      	adds	r3, r7, #5
 801f3e4:	33ff      	adds	r3, #255	@ 0xff
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d10b      	bne.n	801f404 <USB_EPStartXfer+0xb88>
 801f3ec:	218c      	movs	r1, #140	@ 0x8c
 801f3ee:	187b      	adds	r3, r7, r1
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	881b      	ldrh	r3, [r3, #0]
 801f3f4:	b29b      	uxth	r3, r3
 801f3f6:	4aae      	ldr	r2, [pc, #696]	@ (801f6b0 <USB_EPStartXfer+0xe34>)
 801f3f8:	4313      	orrs	r3, r2
 801f3fa:	b29a      	uxth	r2, r3
 801f3fc:	187b      	adds	r3, r7, r1
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	801a      	strh	r2, [r3, #0]
 801f402:	e342      	b.n	801fa8a <USB_EPStartXfer+0x120e>
 801f404:	1d7b      	adds	r3, r7, #5
 801f406:	33ff      	adds	r3, #255	@ 0xff
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	085b      	lsrs	r3, r3, #1
 801f40c:	21e8      	movs	r1, #232	@ 0xe8
 801f40e:	187a      	adds	r2, r7, r1
 801f410:	6013      	str	r3, [r2, #0]
 801f412:	1d7b      	adds	r3, r7, #5
 801f414:	33ff      	adds	r3, #255	@ 0xff
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	2201      	movs	r2, #1
 801f41a:	4013      	ands	r3, r2
 801f41c:	d004      	beq.n	801f428 <USB_EPStartXfer+0xbac>
 801f41e:	187b      	adds	r3, r7, r1
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	3301      	adds	r3, #1
 801f424:	187a      	adds	r2, r7, r1
 801f426:	6013      	str	r3, [r2, #0]
 801f428:	218c      	movs	r1, #140	@ 0x8c
 801f42a:	187b      	adds	r3, r7, r1
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	881b      	ldrh	r3, [r3, #0]
 801f430:	b29a      	uxth	r2, r3
 801f432:	23e8      	movs	r3, #232	@ 0xe8
 801f434:	18fb      	adds	r3, r7, r3
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	b29b      	uxth	r3, r3
 801f43a:	029b      	lsls	r3, r3, #10
 801f43c:	b29b      	uxth	r3, r3
 801f43e:	4313      	orrs	r3, r2
 801f440:	b29a      	uxth	r2, r3
 801f442:	187b      	adds	r3, r7, r1
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	801a      	strh	r2, [r3, #0]
 801f448:	e31f      	b.n	801fa8a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	78db      	ldrb	r3, [r3, #3]
 801f44e:	2b02      	cmp	r3, #2
 801f450:	d000      	beq.n	801f454 <USB_EPStartXfer+0xbd8>
 801f452:	e191      	b.n	801f778 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	785b      	ldrb	r3, [r3, #1]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d000      	beq.n	801f45e <USB_EPStartXfer+0xbe2>
 801f45c:	e07c      	b.n	801f558 <USB_EPStartXfer+0xcdc>
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	21ac      	movs	r1, #172	@ 0xac
 801f462:	187a      	adds	r2, r7, r1
 801f464:	6013      	str	r3, [r2, #0]
 801f466:	687b      	ldr	r3, [r7, #4]
 801f468:	2250      	movs	r2, #80	@ 0x50
 801f46a:	5a9b      	ldrh	r3, [r3, r2]
 801f46c:	b29b      	uxth	r3, r3
 801f46e:	001a      	movs	r2, r3
 801f470:	187b      	adds	r3, r7, r1
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	189b      	adds	r3, r3, r2
 801f476:	187a      	adds	r2, r7, r1
 801f478:	6013      	str	r3, [r2, #0]
 801f47a:	683b      	ldr	r3, [r7, #0]
 801f47c:	781b      	ldrb	r3, [r3, #0]
 801f47e:	00da      	lsls	r2, r3, #3
 801f480:	187b      	adds	r3, r7, r1
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	18d3      	adds	r3, r2, r3
 801f486:	4a8b      	ldr	r2, [pc, #556]	@ (801f6b4 <USB_EPStartXfer+0xe38>)
 801f488:	4694      	mov	ip, r2
 801f48a:	4463      	add	r3, ip
 801f48c:	21a8      	movs	r1, #168	@ 0xa8
 801f48e:	187a      	adds	r2, r7, r1
 801f490:	6013      	str	r3, [r2, #0]
 801f492:	187b      	adds	r3, r7, r1
 801f494:	681b      	ldr	r3, [r3, #0]
 801f496:	881b      	ldrh	r3, [r3, #0]
 801f498:	b29b      	uxth	r3, r3
 801f49a:	059b      	lsls	r3, r3, #22
 801f49c:	0d9b      	lsrs	r3, r3, #22
 801f49e:	b29a      	uxth	r2, r3
 801f4a0:	187b      	adds	r3, r7, r1
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	801a      	strh	r2, [r3, #0]
 801f4a6:	683b      	ldr	r3, [r7, #0]
 801f4a8:	691b      	ldr	r3, [r3, #16]
 801f4aa:	2b3e      	cmp	r3, #62	@ 0x3e
 801f4ac:	d923      	bls.n	801f4f6 <USB_EPStartXfer+0xc7a>
 801f4ae:	683b      	ldr	r3, [r7, #0]
 801f4b0:	691b      	ldr	r3, [r3, #16]
 801f4b2:	095b      	lsrs	r3, r3, #5
 801f4b4:	21e4      	movs	r1, #228	@ 0xe4
 801f4b6:	187a      	adds	r2, r7, r1
 801f4b8:	6013      	str	r3, [r2, #0]
 801f4ba:	683b      	ldr	r3, [r7, #0]
 801f4bc:	691b      	ldr	r3, [r3, #16]
 801f4be:	221f      	movs	r2, #31
 801f4c0:	4013      	ands	r3, r2
 801f4c2:	d104      	bne.n	801f4ce <USB_EPStartXfer+0xc52>
 801f4c4:	187b      	adds	r3, r7, r1
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	3b01      	subs	r3, #1
 801f4ca:	187a      	adds	r2, r7, r1
 801f4cc:	6013      	str	r3, [r2, #0]
 801f4ce:	21a8      	movs	r1, #168	@ 0xa8
 801f4d0:	187b      	adds	r3, r7, r1
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	881b      	ldrh	r3, [r3, #0]
 801f4d6:	b29a      	uxth	r2, r3
 801f4d8:	23e4      	movs	r3, #228	@ 0xe4
 801f4da:	18fb      	adds	r3, r7, r3
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	b29b      	uxth	r3, r3
 801f4e0:	029b      	lsls	r3, r3, #10
 801f4e2:	b29b      	uxth	r3, r3
 801f4e4:	4313      	orrs	r3, r2
 801f4e6:	b29b      	uxth	r3, r3
 801f4e8:	4a71      	ldr	r2, [pc, #452]	@ (801f6b0 <USB_EPStartXfer+0xe34>)
 801f4ea:	4313      	orrs	r3, r2
 801f4ec:	b29a      	uxth	r2, r3
 801f4ee:	187b      	adds	r3, r7, r1
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	801a      	strh	r2, [r3, #0]
 801f4f4:	e054      	b.n	801f5a0 <USB_EPStartXfer+0xd24>
 801f4f6:	683b      	ldr	r3, [r7, #0]
 801f4f8:	691b      	ldr	r3, [r3, #16]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d10b      	bne.n	801f516 <USB_EPStartXfer+0xc9a>
 801f4fe:	21a8      	movs	r1, #168	@ 0xa8
 801f500:	187b      	adds	r3, r7, r1
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	881b      	ldrh	r3, [r3, #0]
 801f506:	b29b      	uxth	r3, r3
 801f508:	4a69      	ldr	r2, [pc, #420]	@ (801f6b0 <USB_EPStartXfer+0xe34>)
 801f50a:	4313      	orrs	r3, r2
 801f50c:	b29a      	uxth	r2, r3
 801f50e:	187b      	adds	r3, r7, r1
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	801a      	strh	r2, [r3, #0]
 801f514:	e044      	b.n	801f5a0 <USB_EPStartXfer+0xd24>
 801f516:	683b      	ldr	r3, [r7, #0]
 801f518:	691b      	ldr	r3, [r3, #16]
 801f51a:	085b      	lsrs	r3, r3, #1
 801f51c:	21e4      	movs	r1, #228	@ 0xe4
 801f51e:	187a      	adds	r2, r7, r1
 801f520:	6013      	str	r3, [r2, #0]
 801f522:	683b      	ldr	r3, [r7, #0]
 801f524:	691b      	ldr	r3, [r3, #16]
 801f526:	2201      	movs	r2, #1
 801f528:	4013      	ands	r3, r2
 801f52a:	d004      	beq.n	801f536 <USB_EPStartXfer+0xcba>
 801f52c:	187b      	adds	r3, r7, r1
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	3301      	adds	r3, #1
 801f532:	187a      	adds	r2, r7, r1
 801f534:	6013      	str	r3, [r2, #0]
 801f536:	21a8      	movs	r1, #168	@ 0xa8
 801f538:	187b      	adds	r3, r7, r1
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	881b      	ldrh	r3, [r3, #0]
 801f53e:	b29a      	uxth	r2, r3
 801f540:	23e4      	movs	r3, #228	@ 0xe4
 801f542:	18fb      	adds	r3, r7, r3
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	b29b      	uxth	r3, r3
 801f548:	029b      	lsls	r3, r3, #10
 801f54a:	b29b      	uxth	r3, r3
 801f54c:	4313      	orrs	r3, r2
 801f54e:	b29a      	uxth	r2, r3
 801f550:	187b      	adds	r3, r7, r1
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	801a      	strh	r2, [r3, #0]
 801f556:	e023      	b.n	801f5a0 <USB_EPStartXfer+0xd24>
 801f558:	683b      	ldr	r3, [r7, #0]
 801f55a:	785b      	ldrb	r3, [r3, #1]
 801f55c:	2b01      	cmp	r3, #1
 801f55e:	d11f      	bne.n	801f5a0 <USB_EPStartXfer+0xd24>
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	21b4      	movs	r1, #180	@ 0xb4
 801f564:	187a      	adds	r2, r7, r1
 801f566:	6013      	str	r3, [r2, #0]
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	2250      	movs	r2, #80	@ 0x50
 801f56c:	5a9b      	ldrh	r3, [r3, r2]
 801f56e:	b29b      	uxth	r3, r3
 801f570:	001a      	movs	r2, r3
 801f572:	187b      	adds	r3, r7, r1
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	189b      	adds	r3, r3, r2
 801f578:	187a      	adds	r2, r7, r1
 801f57a:	6013      	str	r3, [r2, #0]
 801f57c:	683b      	ldr	r3, [r7, #0]
 801f57e:	781b      	ldrb	r3, [r3, #0]
 801f580:	00da      	lsls	r2, r3, #3
 801f582:	187b      	adds	r3, r7, r1
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	18d3      	adds	r3, r2, r3
 801f588:	4a4a      	ldr	r2, [pc, #296]	@ (801f6b4 <USB_EPStartXfer+0xe38>)
 801f58a:	4694      	mov	ip, r2
 801f58c:	4463      	add	r3, ip
 801f58e:	21b0      	movs	r1, #176	@ 0xb0
 801f590:	187a      	adds	r2, r7, r1
 801f592:	6013      	str	r3, [r2, #0]
 801f594:	683b      	ldr	r3, [r7, #0]
 801f596:	691b      	ldr	r3, [r3, #16]
 801f598:	b29a      	uxth	r2, r3
 801f59a:	187b      	adds	r3, r7, r1
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	801a      	strh	r2, [r3, #0]
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	22a4      	movs	r2, #164	@ 0xa4
 801f5a4:	18ba      	adds	r2, r7, r2
 801f5a6:	6013      	str	r3, [r2, #0]
 801f5a8:	683b      	ldr	r3, [r7, #0]
 801f5aa:	785b      	ldrb	r3, [r3, #1]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d000      	beq.n	801f5b2 <USB_EPStartXfer+0xd36>
 801f5b0:	e082      	b.n	801f6b8 <USB_EPStartXfer+0xe3c>
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	219c      	movs	r1, #156	@ 0x9c
 801f5b6:	187a      	adds	r2, r7, r1
 801f5b8:	6013      	str	r3, [r2, #0]
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	2250      	movs	r2, #80	@ 0x50
 801f5be:	5a9b      	ldrh	r3, [r3, r2]
 801f5c0:	b29b      	uxth	r3, r3
 801f5c2:	001a      	movs	r2, r3
 801f5c4:	187b      	adds	r3, r7, r1
 801f5c6:	681b      	ldr	r3, [r3, #0]
 801f5c8:	189b      	adds	r3, r3, r2
 801f5ca:	187a      	adds	r2, r7, r1
 801f5cc:	6013      	str	r3, [r2, #0]
 801f5ce:	683b      	ldr	r3, [r7, #0]
 801f5d0:	781b      	ldrb	r3, [r3, #0]
 801f5d2:	00da      	lsls	r2, r3, #3
 801f5d4:	187b      	adds	r3, r7, r1
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	18d3      	adds	r3, r2, r3
 801f5da:	4a34      	ldr	r2, [pc, #208]	@ (801f6ac <USB_EPStartXfer+0xe30>)
 801f5dc:	4694      	mov	ip, r2
 801f5de:	4463      	add	r3, ip
 801f5e0:	2198      	movs	r1, #152	@ 0x98
 801f5e2:	187a      	adds	r2, r7, r1
 801f5e4:	6013      	str	r3, [r2, #0]
 801f5e6:	187b      	adds	r3, r7, r1
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	881b      	ldrh	r3, [r3, #0]
 801f5ec:	b29b      	uxth	r3, r3
 801f5ee:	059b      	lsls	r3, r3, #22
 801f5f0:	0d9b      	lsrs	r3, r3, #22
 801f5f2:	b29a      	uxth	r2, r3
 801f5f4:	187b      	adds	r3, r7, r1
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	801a      	strh	r2, [r3, #0]
 801f5fa:	683b      	ldr	r3, [r7, #0]
 801f5fc:	691b      	ldr	r3, [r3, #16]
 801f5fe:	2b3e      	cmp	r3, #62	@ 0x3e
 801f600:	d923      	bls.n	801f64a <USB_EPStartXfer+0xdce>
 801f602:	683b      	ldr	r3, [r7, #0]
 801f604:	691b      	ldr	r3, [r3, #16]
 801f606:	095b      	lsrs	r3, r3, #5
 801f608:	21e0      	movs	r1, #224	@ 0xe0
 801f60a:	187a      	adds	r2, r7, r1
 801f60c:	6013      	str	r3, [r2, #0]
 801f60e:	683b      	ldr	r3, [r7, #0]
 801f610:	691b      	ldr	r3, [r3, #16]
 801f612:	221f      	movs	r2, #31
 801f614:	4013      	ands	r3, r2
 801f616:	d104      	bne.n	801f622 <USB_EPStartXfer+0xda6>
 801f618:	187b      	adds	r3, r7, r1
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	3b01      	subs	r3, #1
 801f61e:	187a      	adds	r2, r7, r1
 801f620:	6013      	str	r3, [r2, #0]
 801f622:	2198      	movs	r1, #152	@ 0x98
 801f624:	187b      	adds	r3, r7, r1
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	881b      	ldrh	r3, [r3, #0]
 801f62a:	b29a      	uxth	r2, r3
 801f62c:	23e0      	movs	r3, #224	@ 0xe0
 801f62e:	18fb      	adds	r3, r7, r3
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	b29b      	uxth	r3, r3
 801f634:	029b      	lsls	r3, r3, #10
 801f636:	b29b      	uxth	r3, r3
 801f638:	4313      	orrs	r3, r2
 801f63a:	b29b      	uxth	r3, r3
 801f63c:	4a1c      	ldr	r2, [pc, #112]	@ (801f6b0 <USB_EPStartXfer+0xe34>)
 801f63e:	4313      	orrs	r3, r2
 801f640:	b29a      	uxth	r2, r3
 801f642:	187b      	adds	r3, r7, r1
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	801a      	strh	r2, [r3, #0]
 801f648:	e057      	b.n	801f6fa <USB_EPStartXfer+0xe7e>
 801f64a:	683b      	ldr	r3, [r7, #0]
 801f64c:	691b      	ldr	r3, [r3, #16]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d10b      	bne.n	801f66a <USB_EPStartXfer+0xdee>
 801f652:	2198      	movs	r1, #152	@ 0x98
 801f654:	187b      	adds	r3, r7, r1
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	881b      	ldrh	r3, [r3, #0]
 801f65a:	b29b      	uxth	r3, r3
 801f65c:	4a14      	ldr	r2, [pc, #80]	@ (801f6b0 <USB_EPStartXfer+0xe34>)
 801f65e:	4313      	orrs	r3, r2
 801f660:	b29a      	uxth	r2, r3
 801f662:	187b      	adds	r3, r7, r1
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	801a      	strh	r2, [r3, #0]
 801f668:	e047      	b.n	801f6fa <USB_EPStartXfer+0xe7e>
 801f66a:	683b      	ldr	r3, [r7, #0]
 801f66c:	691b      	ldr	r3, [r3, #16]
 801f66e:	085b      	lsrs	r3, r3, #1
 801f670:	21e0      	movs	r1, #224	@ 0xe0
 801f672:	187a      	adds	r2, r7, r1
 801f674:	6013      	str	r3, [r2, #0]
 801f676:	683b      	ldr	r3, [r7, #0]
 801f678:	691b      	ldr	r3, [r3, #16]
 801f67a:	2201      	movs	r2, #1
 801f67c:	4013      	ands	r3, r2
 801f67e:	d004      	beq.n	801f68a <USB_EPStartXfer+0xe0e>
 801f680:	187b      	adds	r3, r7, r1
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	3301      	adds	r3, #1
 801f686:	187a      	adds	r2, r7, r1
 801f688:	6013      	str	r3, [r2, #0]
 801f68a:	2198      	movs	r1, #152	@ 0x98
 801f68c:	187b      	adds	r3, r7, r1
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	881b      	ldrh	r3, [r3, #0]
 801f692:	b29a      	uxth	r2, r3
 801f694:	23e0      	movs	r3, #224	@ 0xe0
 801f696:	18fb      	adds	r3, r7, r3
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	b29b      	uxth	r3, r3
 801f69c:	029b      	lsls	r3, r3, #10
 801f69e:	b29b      	uxth	r3, r3
 801f6a0:	4313      	orrs	r3, r2
 801f6a2:	b29a      	uxth	r2, r3
 801f6a4:	187b      	adds	r3, r7, r1
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	801a      	strh	r2, [r3, #0]
 801f6aa:	e026      	b.n	801f6fa <USB_EPStartXfer+0xe7e>
 801f6ac:	00000406 	.word	0x00000406
 801f6b0:	ffff8000 	.word	0xffff8000
 801f6b4:	00000402 	.word	0x00000402
 801f6b8:	683b      	ldr	r3, [r7, #0]
 801f6ba:	785b      	ldrb	r3, [r3, #1]
 801f6bc:	2b01      	cmp	r3, #1
 801f6be:	d11c      	bne.n	801f6fa <USB_EPStartXfer+0xe7e>
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	2250      	movs	r2, #80	@ 0x50
 801f6c4:	5a9b      	ldrh	r3, [r3, r2]
 801f6c6:	b29b      	uxth	r3, r3
 801f6c8:	001a      	movs	r2, r3
 801f6ca:	21a4      	movs	r1, #164	@ 0xa4
 801f6cc:	187b      	adds	r3, r7, r1
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	189b      	adds	r3, r3, r2
 801f6d2:	187a      	adds	r2, r7, r1
 801f6d4:	6013      	str	r3, [r2, #0]
 801f6d6:	683b      	ldr	r3, [r7, #0]
 801f6d8:	781b      	ldrb	r3, [r3, #0]
 801f6da:	00da      	lsls	r2, r3, #3
 801f6dc:	187b      	adds	r3, r7, r1
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	18d3      	adds	r3, r2, r3
 801f6e2:	4ad2      	ldr	r2, [pc, #840]	@ (801fa2c <USB_EPStartXfer+0x11b0>)
 801f6e4:	4694      	mov	ip, r2
 801f6e6:	4463      	add	r3, ip
 801f6e8:	21a0      	movs	r1, #160	@ 0xa0
 801f6ea:	187a      	adds	r2, r7, r1
 801f6ec:	6013      	str	r3, [r2, #0]
 801f6ee:	683b      	ldr	r3, [r7, #0]
 801f6f0:	691b      	ldr	r3, [r3, #16]
 801f6f2:	b29a      	uxth	r2, r3
 801f6f4:	187b      	adds	r3, r7, r1
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801f6fa:	683b      	ldr	r3, [r7, #0]
 801f6fc:	69db      	ldr	r3, [r3, #28]
 801f6fe:	2b00      	cmp	r3, #0
 801f700:	d100      	bne.n	801f704 <USB_EPStartXfer+0xe88>
 801f702:	e1c2      	b.n	801fa8a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801f704:	687a      	ldr	r2, [r7, #4]
 801f706:	683b      	ldr	r3, [r7, #0]
 801f708:	781b      	ldrb	r3, [r3, #0]
 801f70a:	009b      	lsls	r3, r3, #2
 801f70c:	18d2      	adds	r2, r2, r3
 801f70e:	2196      	movs	r1, #150	@ 0x96
 801f710:	187b      	adds	r3, r7, r1
 801f712:	8812      	ldrh	r2, [r2, #0]
 801f714:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801f716:	187b      	adds	r3, r7, r1
 801f718:	881a      	ldrh	r2, [r3, #0]
 801f71a:	2380      	movs	r3, #128	@ 0x80
 801f71c:	01db      	lsls	r3, r3, #7
 801f71e:	4013      	ands	r3, r2
 801f720:	d004      	beq.n	801f72c <USB_EPStartXfer+0xeb0>
 801f722:	187b      	adds	r3, r7, r1
 801f724:	881b      	ldrh	r3, [r3, #0]
 801f726:	2240      	movs	r2, #64	@ 0x40
 801f728:	4013      	ands	r3, r2
 801f72a:	d10d      	bne.n	801f748 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801f72c:	2196      	movs	r1, #150	@ 0x96
 801f72e:	187b      	adds	r3, r7, r1
 801f730:	881a      	ldrh	r2, [r3, #0]
 801f732:	2380      	movs	r3, #128	@ 0x80
 801f734:	01db      	lsls	r3, r3, #7
 801f736:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801f738:	d000      	beq.n	801f73c <USB_EPStartXfer+0xec0>
 801f73a:	e1a6      	b.n	801fa8a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801f73c:	187b      	adds	r3, r7, r1
 801f73e:	881b      	ldrh	r3, [r3, #0]
 801f740:	2240      	movs	r2, #64	@ 0x40
 801f742:	4013      	ands	r3, r2
 801f744:	d000      	beq.n	801f748 <USB_EPStartXfer+0xecc>
 801f746:	e1a0      	b.n	801fa8a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801f748:	687a      	ldr	r2, [r7, #4]
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	781b      	ldrb	r3, [r3, #0]
 801f74e:	009b      	lsls	r3, r3, #2
 801f750:	18d3      	adds	r3, r2, r3
 801f752:	881b      	ldrh	r3, [r3, #0]
 801f754:	b29a      	uxth	r2, r3
 801f756:	2094      	movs	r0, #148	@ 0x94
 801f758:	183b      	adds	r3, r7, r0
 801f75a:	49b5      	ldr	r1, [pc, #724]	@ (801fa30 <USB_EPStartXfer+0x11b4>)
 801f75c:	400a      	ands	r2, r1
 801f75e:	801a      	strh	r2, [r3, #0]
 801f760:	687a      	ldr	r2, [r7, #4]
 801f762:	683b      	ldr	r3, [r7, #0]
 801f764:	781b      	ldrb	r3, [r3, #0]
 801f766:	009b      	lsls	r3, r3, #2
 801f768:	18d3      	adds	r3, r2, r3
 801f76a:	183a      	adds	r2, r7, r0
 801f76c:	8812      	ldrh	r2, [r2, #0]
 801f76e:	49b1      	ldr	r1, [pc, #708]	@ (801fa34 <USB_EPStartXfer+0x11b8>)
 801f770:	430a      	orrs	r2, r1
 801f772:	b292      	uxth	r2, r2
 801f774:	801a      	strh	r2, [r3, #0]
 801f776:	e188      	b.n	801fa8a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	78db      	ldrb	r3, [r3, #3]
 801f77c:	2b01      	cmp	r3, #1
 801f77e:	d000      	beq.n	801f782 <USB_EPStartXfer+0xf06>
 801f780:	e181      	b.n	801fa86 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801f782:	683b      	ldr	r3, [r7, #0]
 801f784:	699a      	ldr	r2, [r3, #24]
 801f786:	683b      	ldr	r3, [r7, #0]
 801f788:	691b      	ldr	r3, [r3, #16]
 801f78a:	429a      	cmp	r2, r3
 801f78c:	d90d      	bls.n	801f7aa <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801f78e:	683b      	ldr	r3, [r7, #0]
 801f790:	691b      	ldr	r3, [r3, #16]
 801f792:	1d7a      	adds	r2, r7, #5
 801f794:	32ff      	adds	r2, #255	@ 0xff
 801f796:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801f798:	683b      	ldr	r3, [r7, #0]
 801f79a:	699a      	ldr	r2, [r3, #24]
 801f79c:	1d7b      	adds	r3, r7, #5
 801f79e:	33ff      	adds	r3, #255	@ 0xff
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	1ad2      	subs	r2, r2, r3
 801f7a4:	683b      	ldr	r3, [r7, #0]
 801f7a6:	619a      	str	r2, [r3, #24]
 801f7a8:	e007      	b.n	801f7ba <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801f7aa:	683b      	ldr	r3, [r7, #0]
 801f7ac:	699b      	ldr	r3, [r3, #24]
 801f7ae:	1d7a      	adds	r2, r7, #5
 801f7b0:	32ff      	adds	r2, #255	@ 0xff
 801f7b2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801f7b4:	683b      	ldr	r3, [r7, #0]
 801f7b6:	2200      	movs	r2, #0
 801f7b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801f7ba:	683b      	ldr	r3, [r7, #0]
 801f7bc:	785b      	ldrb	r3, [r3, #1]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d000      	beq.n	801f7c4 <USB_EPStartXfer+0xf48>
 801f7c2:	e082      	b.n	801f8ca <USB_EPStartXfer+0x104e>
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	21cc      	movs	r1, #204	@ 0xcc
 801f7c8:	187a      	adds	r2, r7, r1
 801f7ca:	6013      	str	r3, [r2, #0]
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	2250      	movs	r2, #80	@ 0x50
 801f7d0:	5a9b      	ldrh	r3, [r3, r2]
 801f7d2:	b29b      	uxth	r3, r3
 801f7d4:	001a      	movs	r2, r3
 801f7d6:	187b      	adds	r3, r7, r1
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	189b      	adds	r3, r3, r2
 801f7dc:	187a      	adds	r2, r7, r1
 801f7de:	6013      	str	r3, [r2, #0]
 801f7e0:	683b      	ldr	r3, [r7, #0]
 801f7e2:	781b      	ldrb	r3, [r3, #0]
 801f7e4:	00da      	lsls	r2, r3, #3
 801f7e6:	187b      	adds	r3, r7, r1
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	18d3      	adds	r3, r2, r3
 801f7ec:	4a92      	ldr	r2, [pc, #584]	@ (801fa38 <USB_EPStartXfer+0x11bc>)
 801f7ee:	4694      	mov	ip, r2
 801f7f0:	4463      	add	r3, ip
 801f7f2:	21c8      	movs	r1, #200	@ 0xc8
 801f7f4:	187a      	adds	r2, r7, r1
 801f7f6:	6013      	str	r3, [r2, #0]
 801f7f8:	187b      	adds	r3, r7, r1
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	881b      	ldrh	r3, [r3, #0]
 801f7fe:	b29b      	uxth	r3, r3
 801f800:	059b      	lsls	r3, r3, #22
 801f802:	0d9b      	lsrs	r3, r3, #22
 801f804:	b29a      	uxth	r2, r3
 801f806:	187b      	adds	r3, r7, r1
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	801a      	strh	r2, [r3, #0]
 801f80c:	1d7b      	adds	r3, r7, #5
 801f80e:	33ff      	adds	r3, #255	@ 0xff
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	2b3e      	cmp	r3, #62	@ 0x3e
 801f814:	d925      	bls.n	801f862 <USB_EPStartXfer+0xfe6>
 801f816:	1d7b      	adds	r3, r7, #5
 801f818:	33ff      	adds	r3, #255	@ 0xff
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	095b      	lsrs	r3, r3, #5
 801f81e:	21dc      	movs	r1, #220	@ 0xdc
 801f820:	187a      	adds	r2, r7, r1
 801f822:	6013      	str	r3, [r2, #0]
 801f824:	1d7b      	adds	r3, r7, #5
 801f826:	33ff      	adds	r3, #255	@ 0xff
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	221f      	movs	r2, #31
 801f82c:	4013      	ands	r3, r2
 801f82e:	d104      	bne.n	801f83a <USB_EPStartXfer+0xfbe>
 801f830:	187b      	adds	r3, r7, r1
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	3b01      	subs	r3, #1
 801f836:	187a      	adds	r2, r7, r1
 801f838:	6013      	str	r3, [r2, #0]
 801f83a:	21c8      	movs	r1, #200	@ 0xc8
 801f83c:	187b      	adds	r3, r7, r1
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	881b      	ldrh	r3, [r3, #0]
 801f842:	b29a      	uxth	r2, r3
 801f844:	23dc      	movs	r3, #220	@ 0xdc
 801f846:	18fb      	adds	r3, r7, r3
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	b29b      	uxth	r3, r3
 801f84c:	029b      	lsls	r3, r3, #10
 801f84e:	b29b      	uxth	r3, r3
 801f850:	4313      	orrs	r3, r2
 801f852:	b29b      	uxth	r3, r3
 801f854:	4a79      	ldr	r2, [pc, #484]	@ (801fa3c <USB_EPStartXfer+0x11c0>)
 801f856:	4313      	orrs	r3, r2
 801f858:	b29a      	uxth	r2, r3
 801f85a:	187b      	adds	r3, r7, r1
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	801a      	strh	r2, [r3, #0]
 801f860:	e058      	b.n	801f914 <USB_EPStartXfer+0x1098>
 801f862:	1d7b      	adds	r3, r7, #5
 801f864:	33ff      	adds	r3, #255	@ 0xff
 801f866:	681b      	ldr	r3, [r3, #0]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d10b      	bne.n	801f884 <USB_EPStartXfer+0x1008>
 801f86c:	21c8      	movs	r1, #200	@ 0xc8
 801f86e:	187b      	adds	r3, r7, r1
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	881b      	ldrh	r3, [r3, #0]
 801f874:	b29b      	uxth	r3, r3
 801f876:	4a71      	ldr	r2, [pc, #452]	@ (801fa3c <USB_EPStartXfer+0x11c0>)
 801f878:	4313      	orrs	r3, r2
 801f87a:	b29a      	uxth	r2, r3
 801f87c:	187b      	adds	r3, r7, r1
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	801a      	strh	r2, [r3, #0]
 801f882:	e047      	b.n	801f914 <USB_EPStartXfer+0x1098>
 801f884:	1d7b      	adds	r3, r7, #5
 801f886:	33ff      	adds	r3, #255	@ 0xff
 801f888:	681b      	ldr	r3, [r3, #0]
 801f88a:	085b      	lsrs	r3, r3, #1
 801f88c:	21dc      	movs	r1, #220	@ 0xdc
 801f88e:	187a      	adds	r2, r7, r1
 801f890:	6013      	str	r3, [r2, #0]
 801f892:	1d7b      	adds	r3, r7, #5
 801f894:	33ff      	adds	r3, #255	@ 0xff
 801f896:	681b      	ldr	r3, [r3, #0]
 801f898:	2201      	movs	r2, #1
 801f89a:	4013      	ands	r3, r2
 801f89c:	d004      	beq.n	801f8a8 <USB_EPStartXfer+0x102c>
 801f89e:	187b      	adds	r3, r7, r1
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	3301      	adds	r3, #1
 801f8a4:	187a      	adds	r2, r7, r1
 801f8a6:	6013      	str	r3, [r2, #0]
 801f8a8:	21c8      	movs	r1, #200	@ 0xc8
 801f8aa:	187b      	adds	r3, r7, r1
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	881b      	ldrh	r3, [r3, #0]
 801f8b0:	b29a      	uxth	r2, r3
 801f8b2:	23dc      	movs	r3, #220	@ 0xdc
 801f8b4:	18fb      	adds	r3, r7, r3
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	b29b      	uxth	r3, r3
 801f8ba:	029b      	lsls	r3, r3, #10
 801f8bc:	b29b      	uxth	r3, r3
 801f8be:	4313      	orrs	r3, r2
 801f8c0:	b29a      	uxth	r2, r3
 801f8c2:	187b      	adds	r3, r7, r1
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	801a      	strh	r2, [r3, #0]
 801f8c8:	e024      	b.n	801f914 <USB_EPStartXfer+0x1098>
 801f8ca:	683b      	ldr	r3, [r7, #0]
 801f8cc:	785b      	ldrb	r3, [r3, #1]
 801f8ce:	2b01      	cmp	r3, #1
 801f8d0:	d120      	bne.n	801f914 <USB_EPStartXfer+0x1098>
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	21d4      	movs	r1, #212	@ 0xd4
 801f8d6:	187a      	adds	r2, r7, r1
 801f8d8:	6013      	str	r3, [r2, #0]
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	2250      	movs	r2, #80	@ 0x50
 801f8de:	5a9b      	ldrh	r3, [r3, r2]
 801f8e0:	b29b      	uxth	r3, r3
 801f8e2:	001a      	movs	r2, r3
 801f8e4:	187b      	adds	r3, r7, r1
 801f8e6:	681b      	ldr	r3, [r3, #0]
 801f8e8:	189b      	adds	r3, r3, r2
 801f8ea:	187a      	adds	r2, r7, r1
 801f8ec:	6013      	str	r3, [r2, #0]
 801f8ee:	683b      	ldr	r3, [r7, #0]
 801f8f0:	781b      	ldrb	r3, [r3, #0]
 801f8f2:	00da      	lsls	r2, r3, #3
 801f8f4:	187b      	adds	r3, r7, r1
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	18d3      	adds	r3, r2, r3
 801f8fa:	4a4f      	ldr	r2, [pc, #316]	@ (801fa38 <USB_EPStartXfer+0x11bc>)
 801f8fc:	4694      	mov	ip, r2
 801f8fe:	4463      	add	r3, ip
 801f900:	21d0      	movs	r1, #208	@ 0xd0
 801f902:	187a      	adds	r2, r7, r1
 801f904:	6013      	str	r3, [r2, #0]
 801f906:	1d7b      	adds	r3, r7, #5
 801f908:	33ff      	adds	r3, #255	@ 0xff
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	b29a      	uxth	r2, r3
 801f90e:	187b      	adds	r3, r7, r1
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	801a      	strh	r2, [r3, #0]
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	22c4      	movs	r2, #196	@ 0xc4
 801f918:	18ba      	adds	r2, r7, r2
 801f91a:	6013      	str	r3, [r2, #0]
 801f91c:	683b      	ldr	r3, [r7, #0]
 801f91e:	785b      	ldrb	r3, [r3, #1]
 801f920:	2b00      	cmp	r3, #0
 801f922:	d000      	beq.n	801f926 <USB_EPStartXfer+0x10aa>
 801f924:	e08c      	b.n	801fa40 <USB_EPStartXfer+0x11c4>
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	21bc      	movs	r1, #188	@ 0xbc
 801f92a:	187a      	adds	r2, r7, r1
 801f92c:	6013      	str	r3, [r2, #0]
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	2250      	movs	r2, #80	@ 0x50
 801f932:	5a9b      	ldrh	r3, [r3, r2]
 801f934:	b29b      	uxth	r3, r3
 801f936:	001a      	movs	r2, r3
 801f938:	187b      	adds	r3, r7, r1
 801f93a:	681b      	ldr	r3, [r3, #0]
 801f93c:	189b      	adds	r3, r3, r2
 801f93e:	187a      	adds	r2, r7, r1
 801f940:	6013      	str	r3, [r2, #0]
 801f942:	683b      	ldr	r3, [r7, #0]
 801f944:	781b      	ldrb	r3, [r3, #0]
 801f946:	00da      	lsls	r2, r3, #3
 801f948:	187b      	adds	r3, r7, r1
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	18d3      	adds	r3, r2, r3
 801f94e:	4a37      	ldr	r2, [pc, #220]	@ (801fa2c <USB_EPStartXfer+0x11b0>)
 801f950:	4694      	mov	ip, r2
 801f952:	4463      	add	r3, ip
 801f954:	21b8      	movs	r1, #184	@ 0xb8
 801f956:	187a      	adds	r2, r7, r1
 801f958:	6013      	str	r3, [r2, #0]
 801f95a:	187b      	adds	r3, r7, r1
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	881b      	ldrh	r3, [r3, #0]
 801f960:	b29b      	uxth	r3, r3
 801f962:	059b      	lsls	r3, r3, #22
 801f964:	0d9b      	lsrs	r3, r3, #22
 801f966:	b29a      	uxth	r2, r3
 801f968:	187b      	adds	r3, r7, r1
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	801a      	strh	r2, [r3, #0]
 801f96e:	1d7b      	adds	r3, r7, #5
 801f970:	33ff      	adds	r3, #255	@ 0xff
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	2b3e      	cmp	r3, #62	@ 0x3e
 801f976:	d925      	bls.n	801f9c4 <USB_EPStartXfer+0x1148>
 801f978:	1d7b      	adds	r3, r7, #5
 801f97a:	33ff      	adds	r3, #255	@ 0xff
 801f97c:	681b      	ldr	r3, [r3, #0]
 801f97e:	095b      	lsrs	r3, r3, #5
 801f980:	21d8      	movs	r1, #216	@ 0xd8
 801f982:	187a      	adds	r2, r7, r1
 801f984:	6013      	str	r3, [r2, #0]
 801f986:	1d7b      	adds	r3, r7, #5
 801f988:	33ff      	adds	r3, #255	@ 0xff
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	221f      	movs	r2, #31
 801f98e:	4013      	ands	r3, r2
 801f990:	d104      	bne.n	801f99c <USB_EPStartXfer+0x1120>
 801f992:	187b      	adds	r3, r7, r1
 801f994:	681b      	ldr	r3, [r3, #0]
 801f996:	3b01      	subs	r3, #1
 801f998:	187a      	adds	r2, r7, r1
 801f99a:	6013      	str	r3, [r2, #0]
 801f99c:	21b8      	movs	r1, #184	@ 0xb8
 801f99e:	187b      	adds	r3, r7, r1
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	881b      	ldrh	r3, [r3, #0]
 801f9a4:	b29a      	uxth	r2, r3
 801f9a6:	23d8      	movs	r3, #216	@ 0xd8
 801f9a8:	18fb      	adds	r3, r7, r3
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	b29b      	uxth	r3, r3
 801f9ae:	029b      	lsls	r3, r3, #10
 801f9b0:	b29b      	uxth	r3, r3
 801f9b2:	4313      	orrs	r3, r2
 801f9b4:	b29b      	uxth	r3, r3
 801f9b6:	4a21      	ldr	r2, [pc, #132]	@ (801fa3c <USB_EPStartXfer+0x11c0>)
 801f9b8:	4313      	orrs	r3, r2
 801f9ba:	b29a      	uxth	r2, r3
 801f9bc:	187b      	adds	r3, r7, r1
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	801a      	strh	r2, [r3, #0]
 801f9c2:	e062      	b.n	801fa8a <USB_EPStartXfer+0x120e>
 801f9c4:	1d7b      	adds	r3, r7, #5
 801f9c6:	33ff      	adds	r3, #255	@ 0xff
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d10b      	bne.n	801f9e6 <USB_EPStartXfer+0x116a>
 801f9ce:	21b8      	movs	r1, #184	@ 0xb8
 801f9d0:	187b      	adds	r3, r7, r1
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	881b      	ldrh	r3, [r3, #0]
 801f9d6:	b29b      	uxth	r3, r3
 801f9d8:	4a18      	ldr	r2, [pc, #96]	@ (801fa3c <USB_EPStartXfer+0x11c0>)
 801f9da:	4313      	orrs	r3, r2
 801f9dc:	b29a      	uxth	r2, r3
 801f9de:	187b      	adds	r3, r7, r1
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	801a      	strh	r2, [r3, #0]
 801f9e4:	e051      	b.n	801fa8a <USB_EPStartXfer+0x120e>
 801f9e6:	1d7b      	adds	r3, r7, #5
 801f9e8:	33ff      	adds	r3, #255	@ 0xff
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	085b      	lsrs	r3, r3, #1
 801f9ee:	21d8      	movs	r1, #216	@ 0xd8
 801f9f0:	187a      	adds	r2, r7, r1
 801f9f2:	6013      	str	r3, [r2, #0]
 801f9f4:	1d7b      	adds	r3, r7, #5
 801f9f6:	33ff      	adds	r3, #255	@ 0xff
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	2201      	movs	r2, #1
 801f9fc:	4013      	ands	r3, r2
 801f9fe:	d004      	beq.n	801fa0a <USB_EPStartXfer+0x118e>
 801fa00:	187b      	adds	r3, r7, r1
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	3301      	adds	r3, #1
 801fa06:	187a      	adds	r2, r7, r1
 801fa08:	6013      	str	r3, [r2, #0]
 801fa0a:	21b8      	movs	r1, #184	@ 0xb8
 801fa0c:	187b      	adds	r3, r7, r1
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	881b      	ldrh	r3, [r3, #0]
 801fa12:	b29a      	uxth	r2, r3
 801fa14:	23d8      	movs	r3, #216	@ 0xd8
 801fa16:	18fb      	adds	r3, r7, r3
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	b29b      	uxth	r3, r3
 801fa1c:	029b      	lsls	r3, r3, #10
 801fa1e:	b29b      	uxth	r3, r3
 801fa20:	4313      	orrs	r3, r2
 801fa22:	b29a      	uxth	r2, r3
 801fa24:	187b      	adds	r3, r7, r1
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	801a      	strh	r2, [r3, #0]
 801fa2a:	e02e      	b.n	801fa8a <USB_EPStartXfer+0x120e>
 801fa2c:	00000406 	.word	0x00000406
 801fa30:	ffff8f8f 	.word	0xffff8f8f
 801fa34:	ffff80c0 	.word	0xffff80c0
 801fa38:	00000402 	.word	0x00000402
 801fa3c:	ffff8000 	.word	0xffff8000
 801fa40:	683b      	ldr	r3, [r7, #0]
 801fa42:	785b      	ldrb	r3, [r3, #1]
 801fa44:	2b01      	cmp	r3, #1
 801fa46:	d120      	bne.n	801fa8a <USB_EPStartXfer+0x120e>
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	2250      	movs	r2, #80	@ 0x50
 801fa4c:	5a9b      	ldrh	r3, [r3, r2]
 801fa4e:	b29b      	uxth	r3, r3
 801fa50:	001a      	movs	r2, r3
 801fa52:	21c4      	movs	r1, #196	@ 0xc4
 801fa54:	187b      	adds	r3, r7, r1
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	189b      	adds	r3, r3, r2
 801fa5a:	187a      	adds	r2, r7, r1
 801fa5c:	6013      	str	r3, [r2, #0]
 801fa5e:	683b      	ldr	r3, [r7, #0]
 801fa60:	781b      	ldrb	r3, [r3, #0]
 801fa62:	00da      	lsls	r2, r3, #3
 801fa64:	187b      	adds	r3, r7, r1
 801fa66:	681b      	ldr	r3, [r3, #0]
 801fa68:	18d3      	adds	r3, r2, r3
 801fa6a:	4a1d      	ldr	r2, [pc, #116]	@ (801fae0 <USB_EPStartXfer+0x1264>)
 801fa6c:	4694      	mov	ip, r2
 801fa6e:	4463      	add	r3, ip
 801fa70:	21c0      	movs	r1, #192	@ 0xc0
 801fa72:	187a      	adds	r2, r7, r1
 801fa74:	6013      	str	r3, [r2, #0]
 801fa76:	1d7b      	adds	r3, r7, #5
 801fa78:	33ff      	adds	r3, #255	@ 0xff
 801fa7a:	681b      	ldr	r3, [r3, #0]
 801fa7c:	b29a      	uxth	r2, r3
 801fa7e:	187b      	adds	r3, r7, r1
 801fa80:	681b      	ldr	r3, [r3, #0]
 801fa82:	801a      	strh	r2, [r3, #0]
 801fa84:	e001      	b.n	801fa8a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801fa86:	2301      	movs	r3, #1
 801fa88:	e025      	b.n	801fad6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fa8a:	687a      	ldr	r2, [r7, #4]
 801fa8c:	683b      	ldr	r3, [r7, #0]
 801fa8e:	781b      	ldrb	r3, [r3, #0]
 801fa90:	009b      	lsls	r3, r3, #2
 801fa92:	18d3      	adds	r3, r2, r3
 801fa94:	881b      	ldrh	r3, [r3, #0]
 801fa96:	b29a      	uxth	r2, r3
 801fa98:	208a      	movs	r0, #138	@ 0x8a
 801fa9a:	183b      	adds	r3, r7, r0
 801fa9c:	4911      	ldr	r1, [pc, #68]	@ (801fae4 <USB_EPStartXfer+0x1268>)
 801fa9e:	400a      	ands	r2, r1
 801faa0:	801a      	strh	r2, [r3, #0]
 801faa2:	183b      	adds	r3, r7, r0
 801faa4:	183a      	adds	r2, r7, r0
 801faa6:	8812      	ldrh	r2, [r2, #0]
 801faa8:	2180      	movs	r1, #128	@ 0x80
 801faaa:	0149      	lsls	r1, r1, #5
 801faac:	404a      	eors	r2, r1
 801faae:	801a      	strh	r2, [r3, #0]
 801fab0:	183b      	adds	r3, r7, r0
 801fab2:	183a      	adds	r2, r7, r0
 801fab4:	8812      	ldrh	r2, [r2, #0]
 801fab6:	2180      	movs	r1, #128	@ 0x80
 801fab8:	0189      	lsls	r1, r1, #6
 801faba:	404a      	eors	r2, r1
 801fabc:	801a      	strh	r2, [r3, #0]
 801fabe:	687a      	ldr	r2, [r7, #4]
 801fac0:	683b      	ldr	r3, [r7, #0]
 801fac2:	781b      	ldrb	r3, [r3, #0]
 801fac4:	009b      	lsls	r3, r3, #2
 801fac6:	18d3      	adds	r3, r2, r3
 801fac8:	183a      	adds	r2, r7, r0
 801faca:	8812      	ldrh	r2, [r2, #0]
 801facc:	4906      	ldr	r1, [pc, #24]	@ (801fae8 <USB_EPStartXfer+0x126c>)
 801face:	430a      	orrs	r2, r1
 801fad0:	b292      	uxth	r2, r2
 801fad2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801fad4:	2300      	movs	r3, #0
}
 801fad6:	0018      	movs	r0, r3
 801fad8:	46bd      	mov	sp, r7
 801fada:	b043      	add	sp, #268	@ 0x10c
 801fadc:	bd90      	pop	{r4, r7, pc}
 801fade:	46c0      	nop			@ (mov r8, r8)
 801fae0:	00000406 	.word	0x00000406
 801fae4:	ffffbf8f 	.word	0xffffbf8f
 801fae8:	ffff8080 	.word	0xffff8080

0801faec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801faec:	b580      	push	{r7, lr}
 801faee:	b084      	sub	sp, #16
 801faf0:	af00      	add	r7, sp, #0
 801faf2:	6078      	str	r0, [r7, #4]
 801faf4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801faf6:	683b      	ldr	r3, [r7, #0]
 801faf8:	785b      	ldrb	r3, [r3, #1]
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d01d      	beq.n	801fb3a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801fafe:	687a      	ldr	r2, [r7, #4]
 801fb00:	683b      	ldr	r3, [r7, #0]
 801fb02:	781b      	ldrb	r3, [r3, #0]
 801fb04:	009b      	lsls	r3, r3, #2
 801fb06:	18d3      	adds	r3, r2, r3
 801fb08:	881b      	ldrh	r3, [r3, #0]
 801fb0a:	b29a      	uxth	r2, r3
 801fb0c:	200c      	movs	r0, #12
 801fb0e:	183b      	adds	r3, r7, r0
 801fb10:	491b      	ldr	r1, [pc, #108]	@ (801fb80 <USB_EPSetStall+0x94>)
 801fb12:	400a      	ands	r2, r1
 801fb14:	801a      	strh	r2, [r3, #0]
 801fb16:	183b      	adds	r3, r7, r0
 801fb18:	183a      	adds	r2, r7, r0
 801fb1a:	8812      	ldrh	r2, [r2, #0]
 801fb1c:	2110      	movs	r1, #16
 801fb1e:	404a      	eors	r2, r1
 801fb20:	801a      	strh	r2, [r3, #0]
 801fb22:	687a      	ldr	r2, [r7, #4]
 801fb24:	683b      	ldr	r3, [r7, #0]
 801fb26:	781b      	ldrb	r3, [r3, #0]
 801fb28:	009b      	lsls	r3, r3, #2
 801fb2a:	18d3      	adds	r3, r2, r3
 801fb2c:	183a      	adds	r2, r7, r0
 801fb2e:	8812      	ldrh	r2, [r2, #0]
 801fb30:	4914      	ldr	r1, [pc, #80]	@ (801fb84 <USB_EPSetStall+0x98>)
 801fb32:	430a      	orrs	r2, r1
 801fb34:	b292      	uxth	r2, r2
 801fb36:	801a      	strh	r2, [r3, #0]
 801fb38:	e01d      	b.n	801fb76 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801fb3a:	687a      	ldr	r2, [r7, #4]
 801fb3c:	683b      	ldr	r3, [r7, #0]
 801fb3e:	781b      	ldrb	r3, [r3, #0]
 801fb40:	009b      	lsls	r3, r3, #2
 801fb42:	18d3      	adds	r3, r2, r3
 801fb44:	881b      	ldrh	r3, [r3, #0]
 801fb46:	b29a      	uxth	r2, r3
 801fb48:	200e      	movs	r0, #14
 801fb4a:	183b      	adds	r3, r7, r0
 801fb4c:	490e      	ldr	r1, [pc, #56]	@ (801fb88 <USB_EPSetStall+0x9c>)
 801fb4e:	400a      	ands	r2, r1
 801fb50:	801a      	strh	r2, [r3, #0]
 801fb52:	183b      	adds	r3, r7, r0
 801fb54:	183a      	adds	r2, r7, r0
 801fb56:	8812      	ldrh	r2, [r2, #0]
 801fb58:	2180      	movs	r1, #128	@ 0x80
 801fb5a:	0149      	lsls	r1, r1, #5
 801fb5c:	404a      	eors	r2, r1
 801fb5e:	801a      	strh	r2, [r3, #0]
 801fb60:	687a      	ldr	r2, [r7, #4]
 801fb62:	683b      	ldr	r3, [r7, #0]
 801fb64:	781b      	ldrb	r3, [r3, #0]
 801fb66:	009b      	lsls	r3, r3, #2
 801fb68:	18d3      	adds	r3, r2, r3
 801fb6a:	183a      	adds	r2, r7, r0
 801fb6c:	8812      	ldrh	r2, [r2, #0]
 801fb6e:	4905      	ldr	r1, [pc, #20]	@ (801fb84 <USB_EPSetStall+0x98>)
 801fb70:	430a      	orrs	r2, r1
 801fb72:	b292      	uxth	r2, r2
 801fb74:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801fb76:	2300      	movs	r3, #0
}
 801fb78:	0018      	movs	r0, r3
 801fb7a:	46bd      	mov	sp, r7
 801fb7c:	b004      	add	sp, #16
 801fb7e:	bd80      	pop	{r7, pc}
 801fb80:	ffff8fbf 	.word	0xffff8fbf
 801fb84:	ffff8080 	.word	0xffff8080
 801fb88:	ffffbf8f 	.word	0xffffbf8f

0801fb8c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fb8c:	b580      	push	{r7, lr}
 801fb8e:	b086      	sub	sp, #24
 801fb90:	af00      	add	r7, sp, #0
 801fb92:	6078      	str	r0, [r7, #4]
 801fb94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fb96:	683b      	ldr	r3, [r7, #0]
 801fb98:	7b1b      	ldrb	r3, [r3, #12]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d000      	beq.n	801fba0 <USB_EPClearStall+0x14>
 801fb9e:	e095      	b.n	801fccc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	785b      	ldrb	r3, [r3, #1]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d046      	beq.n	801fc36 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fba8:	687a      	ldr	r2, [r7, #4]
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	781b      	ldrb	r3, [r3, #0]
 801fbae:	009b      	lsls	r3, r3, #2
 801fbb0:	18d2      	adds	r2, r2, r3
 801fbb2:	2110      	movs	r1, #16
 801fbb4:	187b      	adds	r3, r7, r1
 801fbb6:	8812      	ldrh	r2, [r2, #0]
 801fbb8:	801a      	strh	r2, [r3, #0]
 801fbba:	187b      	adds	r3, r7, r1
 801fbbc:	881b      	ldrh	r3, [r3, #0]
 801fbbe:	2240      	movs	r2, #64	@ 0x40
 801fbc0:	4013      	ands	r3, r2
 801fbc2:	d016      	beq.n	801fbf2 <USB_EPClearStall+0x66>
 801fbc4:	687a      	ldr	r2, [r7, #4]
 801fbc6:	683b      	ldr	r3, [r7, #0]
 801fbc8:	781b      	ldrb	r3, [r3, #0]
 801fbca:	009b      	lsls	r3, r3, #2
 801fbcc:	18d3      	adds	r3, r2, r3
 801fbce:	881b      	ldrh	r3, [r3, #0]
 801fbd0:	b29a      	uxth	r2, r3
 801fbd2:	200e      	movs	r0, #14
 801fbd4:	183b      	adds	r3, r7, r0
 801fbd6:	4940      	ldr	r1, [pc, #256]	@ (801fcd8 <USB_EPClearStall+0x14c>)
 801fbd8:	400a      	ands	r2, r1
 801fbda:	801a      	strh	r2, [r3, #0]
 801fbdc:	687a      	ldr	r2, [r7, #4]
 801fbde:	683b      	ldr	r3, [r7, #0]
 801fbe0:	781b      	ldrb	r3, [r3, #0]
 801fbe2:	009b      	lsls	r3, r3, #2
 801fbe4:	18d3      	adds	r3, r2, r3
 801fbe6:	183a      	adds	r2, r7, r0
 801fbe8:	8812      	ldrh	r2, [r2, #0]
 801fbea:	493c      	ldr	r1, [pc, #240]	@ (801fcdc <USB_EPClearStall+0x150>)
 801fbec:	430a      	orrs	r2, r1
 801fbee:	b292      	uxth	r2, r2
 801fbf0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fbf2:	683b      	ldr	r3, [r7, #0]
 801fbf4:	78db      	ldrb	r3, [r3, #3]
 801fbf6:	2b01      	cmp	r3, #1
 801fbf8:	d068      	beq.n	801fccc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fbfa:	687a      	ldr	r2, [r7, #4]
 801fbfc:	683b      	ldr	r3, [r7, #0]
 801fbfe:	781b      	ldrb	r3, [r3, #0]
 801fc00:	009b      	lsls	r3, r3, #2
 801fc02:	18d3      	adds	r3, r2, r3
 801fc04:	881b      	ldrh	r3, [r3, #0]
 801fc06:	b29a      	uxth	r2, r3
 801fc08:	200c      	movs	r0, #12
 801fc0a:	183b      	adds	r3, r7, r0
 801fc0c:	4934      	ldr	r1, [pc, #208]	@ (801fce0 <USB_EPClearStall+0x154>)
 801fc0e:	400a      	ands	r2, r1
 801fc10:	801a      	strh	r2, [r3, #0]
 801fc12:	183b      	adds	r3, r7, r0
 801fc14:	183a      	adds	r2, r7, r0
 801fc16:	8812      	ldrh	r2, [r2, #0]
 801fc18:	2120      	movs	r1, #32
 801fc1a:	404a      	eors	r2, r1
 801fc1c:	801a      	strh	r2, [r3, #0]
 801fc1e:	687a      	ldr	r2, [r7, #4]
 801fc20:	683b      	ldr	r3, [r7, #0]
 801fc22:	781b      	ldrb	r3, [r3, #0]
 801fc24:	009b      	lsls	r3, r3, #2
 801fc26:	18d3      	adds	r3, r2, r3
 801fc28:	183a      	adds	r2, r7, r0
 801fc2a:	8812      	ldrh	r2, [r2, #0]
 801fc2c:	492d      	ldr	r1, [pc, #180]	@ (801fce4 <USB_EPClearStall+0x158>)
 801fc2e:	430a      	orrs	r2, r1
 801fc30:	b292      	uxth	r2, r2
 801fc32:	801a      	strh	r2, [r3, #0]
 801fc34:	e04a      	b.n	801fccc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fc36:	687a      	ldr	r2, [r7, #4]
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	781b      	ldrb	r3, [r3, #0]
 801fc3c:	009b      	lsls	r3, r3, #2
 801fc3e:	18d2      	adds	r2, r2, r3
 801fc40:	2116      	movs	r1, #22
 801fc42:	187b      	adds	r3, r7, r1
 801fc44:	8812      	ldrh	r2, [r2, #0]
 801fc46:	801a      	strh	r2, [r3, #0]
 801fc48:	187b      	adds	r3, r7, r1
 801fc4a:	881a      	ldrh	r2, [r3, #0]
 801fc4c:	2380      	movs	r3, #128	@ 0x80
 801fc4e:	01db      	lsls	r3, r3, #7
 801fc50:	4013      	ands	r3, r2
 801fc52:	d016      	beq.n	801fc82 <USB_EPClearStall+0xf6>
 801fc54:	687a      	ldr	r2, [r7, #4]
 801fc56:	683b      	ldr	r3, [r7, #0]
 801fc58:	781b      	ldrb	r3, [r3, #0]
 801fc5a:	009b      	lsls	r3, r3, #2
 801fc5c:	18d3      	adds	r3, r2, r3
 801fc5e:	881b      	ldrh	r3, [r3, #0]
 801fc60:	b29a      	uxth	r2, r3
 801fc62:	2014      	movs	r0, #20
 801fc64:	183b      	adds	r3, r7, r0
 801fc66:	491c      	ldr	r1, [pc, #112]	@ (801fcd8 <USB_EPClearStall+0x14c>)
 801fc68:	400a      	ands	r2, r1
 801fc6a:	801a      	strh	r2, [r3, #0]
 801fc6c:	687a      	ldr	r2, [r7, #4]
 801fc6e:	683b      	ldr	r3, [r7, #0]
 801fc70:	781b      	ldrb	r3, [r3, #0]
 801fc72:	009b      	lsls	r3, r3, #2
 801fc74:	18d3      	adds	r3, r2, r3
 801fc76:	183a      	adds	r2, r7, r0
 801fc78:	8812      	ldrh	r2, [r2, #0]
 801fc7a:	491b      	ldr	r1, [pc, #108]	@ (801fce8 <USB_EPClearStall+0x15c>)
 801fc7c:	430a      	orrs	r2, r1
 801fc7e:	b292      	uxth	r2, r2
 801fc80:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fc82:	687a      	ldr	r2, [r7, #4]
 801fc84:	683b      	ldr	r3, [r7, #0]
 801fc86:	781b      	ldrb	r3, [r3, #0]
 801fc88:	009b      	lsls	r3, r3, #2
 801fc8a:	18d3      	adds	r3, r2, r3
 801fc8c:	881b      	ldrh	r3, [r3, #0]
 801fc8e:	b29a      	uxth	r2, r3
 801fc90:	2012      	movs	r0, #18
 801fc92:	183b      	adds	r3, r7, r0
 801fc94:	4915      	ldr	r1, [pc, #84]	@ (801fcec <USB_EPClearStall+0x160>)
 801fc96:	400a      	ands	r2, r1
 801fc98:	801a      	strh	r2, [r3, #0]
 801fc9a:	183b      	adds	r3, r7, r0
 801fc9c:	183a      	adds	r2, r7, r0
 801fc9e:	8812      	ldrh	r2, [r2, #0]
 801fca0:	2180      	movs	r1, #128	@ 0x80
 801fca2:	0149      	lsls	r1, r1, #5
 801fca4:	404a      	eors	r2, r1
 801fca6:	801a      	strh	r2, [r3, #0]
 801fca8:	183b      	adds	r3, r7, r0
 801fcaa:	183a      	adds	r2, r7, r0
 801fcac:	8812      	ldrh	r2, [r2, #0]
 801fcae:	2180      	movs	r1, #128	@ 0x80
 801fcb0:	0189      	lsls	r1, r1, #6
 801fcb2:	404a      	eors	r2, r1
 801fcb4:	801a      	strh	r2, [r3, #0]
 801fcb6:	687a      	ldr	r2, [r7, #4]
 801fcb8:	683b      	ldr	r3, [r7, #0]
 801fcba:	781b      	ldrb	r3, [r3, #0]
 801fcbc:	009b      	lsls	r3, r3, #2
 801fcbe:	18d3      	adds	r3, r2, r3
 801fcc0:	183a      	adds	r2, r7, r0
 801fcc2:	8812      	ldrh	r2, [r2, #0]
 801fcc4:	4907      	ldr	r1, [pc, #28]	@ (801fce4 <USB_EPClearStall+0x158>)
 801fcc6:	430a      	orrs	r2, r1
 801fcc8:	b292      	uxth	r2, r2
 801fcca:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801fccc:	2300      	movs	r3, #0
}
 801fcce:	0018      	movs	r0, r3
 801fcd0:	46bd      	mov	sp, r7
 801fcd2:	b006      	add	sp, #24
 801fcd4:	bd80      	pop	{r7, pc}
 801fcd6:	46c0      	nop			@ (mov r8, r8)
 801fcd8:	ffff8f8f 	.word	0xffff8f8f
 801fcdc:	ffff80c0 	.word	0xffff80c0
 801fce0:	ffff8fbf 	.word	0xffff8fbf
 801fce4:	ffff8080 	.word	0xffff8080
 801fce8:	ffffc080 	.word	0xffffc080
 801fcec:	ffffbf8f 	.word	0xffffbf8f

0801fcf0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801fcf0:	b580      	push	{r7, lr}
 801fcf2:	b082      	sub	sp, #8
 801fcf4:	af00      	add	r7, sp, #0
 801fcf6:	6078      	str	r0, [r7, #4]
 801fcf8:	000a      	movs	r2, r1
 801fcfa:	1cfb      	adds	r3, r7, #3
 801fcfc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801fcfe:	1cfb      	adds	r3, r7, #3
 801fd00:	781b      	ldrb	r3, [r3, #0]
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d103      	bne.n	801fd0e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	224c      	movs	r2, #76	@ 0x4c
 801fd0a:	2180      	movs	r1, #128	@ 0x80
 801fd0c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801fd0e:	2300      	movs	r3, #0
}
 801fd10:	0018      	movs	r0, r3
 801fd12:	46bd      	mov	sp, r7
 801fd14:	b002      	add	sp, #8
 801fd16:	bd80      	pop	{r7, pc}

0801fd18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801fd18:	b580      	push	{r7, lr}
 801fd1a:	b082      	sub	sp, #8
 801fd1c:	af00      	add	r7, sp, #0
 801fd1e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	2258      	movs	r2, #88	@ 0x58
 801fd24:	5a9b      	ldrh	r3, [r3, r2]
 801fd26:	b29b      	uxth	r3, r3
 801fd28:	4a05      	ldr	r2, [pc, #20]	@ (801fd40 <USB_DevConnect+0x28>)
 801fd2a:	4313      	orrs	r3, r2
 801fd2c:	b299      	uxth	r1, r3
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	2258      	movs	r2, #88	@ 0x58
 801fd32:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801fd34:	2300      	movs	r3, #0
}
 801fd36:	0018      	movs	r0, r3
 801fd38:	46bd      	mov	sp, r7
 801fd3a:	b002      	add	sp, #8
 801fd3c:	bd80      	pop	{r7, pc}
 801fd3e:	46c0      	nop			@ (mov r8, r8)
 801fd40:	ffff8000 	.word	0xffff8000

0801fd44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801fd44:	b580      	push	{r7, lr}
 801fd46:	b084      	sub	sp, #16
 801fd48:	af00      	add	r7, sp, #0
 801fd4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	2244      	movs	r2, #68	@ 0x44
 801fd50:	5a9b      	ldrh	r3, [r3, r2]
 801fd52:	b29b      	uxth	r3, r3
 801fd54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801fd56:	68fb      	ldr	r3, [r7, #12]
}
 801fd58:	0018      	movs	r0, r3
 801fd5a:	46bd      	mov	sp, r7
 801fd5c:	b004      	add	sp, #16
 801fd5e:	bd80      	pop	{r7, pc}

0801fd60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801fd60:	b580      	push	{r7, lr}
 801fd62:	b08a      	sub	sp, #40	@ 0x28
 801fd64:	af00      	add	r7, sp, #0
 801fd66:	60f8      	str	r0, [r7, #12]
 801fd68:	60b9      	str	r1, [r7, #8]
 801fd6a:	0019      	movs	r1, r3
 801fd6c:	1dbb      	adds	r3, r7, #6
 801fd6e:	801a      	strh	r2, [r3, #0]
 801fd70:	1d3b      	adds	r3, r7, #4
 801fd72:	1c0a      	adds	r2, r1, #0
 801fd74:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801fd76:	1d3b      	adds	r3, r7, #4
 801fd78:	881b      	ldrh	r3, [r3, #0]
 801fd7a:	3301      	adds	r3, #1
 801fd7c:	085b      	lsrs	r3, r3, #1
 801fd7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801fd80:	68fb      	ldr	r3, [r7, #12]
 801fd82:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801fd84:	68bb      	ldr	r3, [r7, #8]
 801fd86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801fd88:	1dbb      	adds	r3, r7, #6
 801fd8a:	881a      	ldrh	r2, [r3, #0]
 801fd8c:	697b      	ldr	r3, [r7, #20]
 801fd8e:	18d3      	adds	r3, r2, r3
 801fd90:	2280      	movs	r2, #128	@ 0x80
 801fd92:	00d2      	lsls	r2, r2, #3
 801fd94:	4694      	mov	ip, r2
 801fd96:	4463      	add	r3, ip
 801fd98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801fd9a:	69bb      	ldr	r3, [r7, #24]
 801fd9c:	627b      	str	r3, [r7, #36]	@ 0x24
 801fd9e:	e020      	b.n	801fde2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801fda0:	69fb      	ldr	r3, [r7, #28]
 801fda2:	781a      	ldrb	r2, [r3, #0]
 801fda4:	2112      	movs	r1, #18
 801fda6:	187b      	adds	r3, r7, r1
 801fda8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801fdaa:	69fb      	ldr	r3, [r7, #28]
 801fdac:	3301      	adds	r3, #1
 801fdae:	781b      	ldrb	r3, [r3, #0]
 801fdb0:	021b      	lsls	r3, r3, #8
 801fdb2:	b21a      	sxth	r2, r3
 801fdb4:	187b      	adds	r3, r7, r1
 801fdb6:	2000      	movs	r0, #0
 801fdb8:	5e1b      	ldrsh	r3, [r3, r0]
 801fdba:	4313      	orrs	r3, r2
 801fdbc:	b21a      	sxth	r2, r3
 801fdbe:	187b      	adds	r3, r7, r1
 801fdc0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801fdc2:	6a3b      	ldr	r3, [r7, #32]
 801fdc4:	187a      	adds	r2, r7, r1
 801fdc6:	8812      	ldrh	r2, [r2, #0]
 801fdc8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801fdca:	6a3b      	ldr	r3, [r7, #32]
 801fdcc:	3302      	adds	r3, #2
 801fdce:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801fdd0:	69fb      	ldr	r3, [r7, #28]
 801fdd2:	3301      	adds	r3, #1
 801fdd4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801fdd6:	69fb      	ldr	r3, [r7, #28]
 801fdd8:	3301      	adds	r3, #1
 801fdda:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801fddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdde:	3b01      	subs	r3, #1
 801fde0:	627b      	str	r3, [r7, #36]	@ 0x24
 801fde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d1db      	bne.n	801fda0 <USB_WritePMA+0x40>
  }
}
 801fde8:	46c0      	nop			@ (mov r8, r8)
 801fdea:	46c0      	nop			@ (mov r8, r8)
 801fdec:	46bd      	mov	sp, r7
 801fdee:	b00a      	add	sp, #40	@ 0x28
 801fdf0:	bd80      	pop	{r7, pc}

0801fdf2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801fdf2:	b580      	push	{r7, lr}
 801fdf4:	b08a      	sub	sp, #40	@ 0x28
 801fdf6:	af00      	add	r7, sp, #0
 801fdf8:	60f8      	str	r0, [r7, #12]
 801fdfa:	60b9      	str	r1, [r7, #8]
 801fdfc:	0019      	movs	r1, r3
 801fdfe:	1dbb      	adds	r3, r7, #6
 801fe00:	801a      	strh	r2, [r3, #0]
 801fe02:	1d3b      	adds	r3, r7, #4
 801fe04:	1c0a      	adds	r2, r1, #0
 801fe06:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801fe08:	1d3b      	adds	r3, r7, #4
 801fe0a:	881b      	ldrh	r3, [r3, #0]
 801fe0c:	085b      	lsrs	r3, r3, #1
 801fe0e:	b29b      	uxth	r3, r3
 801fe10:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801fe16:	68bb      	ldr	r3, [r7, #8]
 801fe18:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801fe1a:	1dbb      	adds	r3, r7, #6
 801fe1c:	881a      	ldrh	r2, [r3, #0]
 801fe1e:	697b      	ldr	r3, [r7, #20]
 801fe20:	18d3      	adds	r3, r2, r3
 801fe22:	2280      	movs	r2, #128	@ 0x80
 801fe24:	00d2      	lsls	r2, r2, #3
 801fe26:	4694      	mov	ip, r2
 801fe28:	4463      	add	r3, ip
 801fe2a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801fe2c:	69bb      	ldr	r3, [r7, #24]
 801fe2e:	627b      	str	r3, [r7, #36]	@ 0x24
 801fe30:	e018      	b.n	801fe64 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801fe32:	6a3b      	ldr	r3, [r7, #32]
 801fe34:	881b      	ldrh	r3, [r3, #0]
 801fe36:	b29b      	uxth	r3, r3
 801fe38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801fe3a:	6a3b      	ldr	r3, [r7, #32]
 801fe3c:	3302      	adds	r3, #2
 801fe3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801fe40:	693b      	ldr	r3, [r7, #16]
 801fe42:	b2da      	uxtb	r2, r3
 801fe44:	69fb      	ldr	r3, [r7, #28]
 801fe46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801fe48:	69fb      	ldr	r3, [r7, #28]
 801fe4a:	3301      	adds	r3, #1
 801fe4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801fe4e:	693b      	ldr	r3, [r7, #16]
 801fe50:	0a1b      	lsrs	r3, r3, #8
 801fe52:	b2da      	uxtb	r2, r3
 801fe54:	69fb      	ldr	r3, [r7, #28]
 801fe56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801fe58:	69fb      	ldr	r3, [r7, #28]
 801fe5a:	3301      	adds	r3, #1
 801fe5c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801fe5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe60:	3b01      	subs	r3, #1
 801fe62:	627b      	str	r3, [r7, #36]	@ 0x24
 801fe64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	d1e3      	bne.n	801fe32 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801fe6a:	1d3b      	adds	r3, r7, #4
 801fe6c:	881b      	ldrh	r3, [r3, #0]
 801fe6e:	2201      	movs	r2, #1
 801fe70:	4013      	ands	r3, r2
 801fe72:	b29b      	uxth	r3, r3
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d007      	beq.n	801fe88 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801fe78:	6a3b      	ldr	r3, [r7, #32]
 801fe7a:	881b      	ldrh	r3, [r3, #0]
 801fe7c:	b29b      	uxth	r3, r3
 801fe7e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801fe80:	693b      	ldr	r3, [r7, #16]
 801fe82:	b2da      	uxtb	r2, r3
 801fe84:	69fb      	ldr	r3, [r7, #28]
 801fe86:	701a      	strb	r2, [r3, #0]
  }
}
 801fe88:	46c0      	nop			@ (mov r8, r8)
 801fe8a:	46bd      	mov	sp, r7
 801fe8c:	b00a      	add	sp, #40	@ 0x28
 801fe8e:	bd80      	pop	{r7, pc}

0801fe90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801fe90:	b580      	push	{r7, lr}
 801fe92:	b084      	sub	sp, #16
 801fe94:	af00      	add	r7, sp, #0
 801fe96:	6078      	str	r0, [r7, #4]
 801fe98:	000a      	movs	r2, r1
 801fe9a:	1cfb      	adds	r3, r7, #3
 801fe9c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801fe9e:	230f      	movs	r3, #15
 801fea0:	18fb      	adds	r3, r7, r3
 801fea2:	2200      	movs	r2, #0
 801fea4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	7c1b      	ldrb	r3, [r3, #16]
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d116      	bne.n	801fedc <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801feae:	2380      	movs	r3, #128	@ 0x80
 801feb0:	009b      	lsls	r3, r3, #2
 801feb2:	6878      	ldr	r0, [r7, #4]
 801feb4:	2202      	movs	r2, #2
 801feb6:	2181      	movs	r1, #129	@ 0x81
 801feb8:	f002 f8eb 	bl	8022092 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	2201      	movs	r2, #1
 801fec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801fec2:	2380      	movs	r3, #128	@ 0x80
 801fec4:	009b      	lsls	r3, r3, #2
 801fec6:	6878      	ldr	r0, [r7, #4]
 801fec8:	2202      	movs	r2, #2
 801feca:	2101      	movs	r1, #1
 801fecc:	f002 f8e1 	bl	8022092 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801fed0:	687a      	ldr	r2, [r7, #4]
 801fed2:	23b6      	movs	r3, #182	@ 0xb6
 801fed4:	005b      	lsls	r3, r3, #1
 801fed6:	2101      	movs	r1, #1
 801fed8:	50d1      	str	r1, [r2, r3]
 801feda:	e013      	b.n	801ff04 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801fedc:	6878      	ldr	r0, [r7, #4]
 801fede:	2340      	movs	r3, #64	@ 0x40
 801fee0:	2202      	movs	r2, #2
 801fee2:	2181      	movs	r1, #129	@ 0x81
 801fee4:	f002 f8d5 	bl	8022092 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	2201      	movs	r2, #1
 801feec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801feee:	6878      	ldr	r0, [r7, #4]
 801fef0:	2340      	movs	r3, #64	@ 0x40
 801fef2:	2202      	movs	r2, #2
 801fef4:	2101      	movs	r1, #1
 801fef6:	f002 f8cc 	bl	8022092 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801fefa:	687a      	ldr	r2, [r7, #4]
 801fefc:	23b6      	movs	r3, #182	@ 0xb6
 801fefe:	005b      	lsls	r3, r3, #1
 801ff00:	2101      	movs	r1, #1
 801ff02:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801ff04:	6878      	ldr	r0, [r7, #4]
 801ff06:	2308      	movs	r3, #8
 801ff08:	2203      	movs	r2, #3
 801ff0a:	2182      	movs	r1, #130	@ 0x82
 801ff0c:	f002 f8c1 	bl	8022092 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	2201      	movs	r2, #1
 801ff14:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801ff16:	2387      	movs	r3, #135	@ 0x87
 801ff18:	009b      	lsls	r3, r3, #2
 801ff1a:	0018      	movs	r0, r3
 801ff1c:	f002 fa52 	bl	80223c4 <USBD_static_malloc>
 801ff20:	0001      	movs	r1, r0
 801ff22:	687a      	ldr	r2, [r7, #4]
 801ff24:	23ae      	movs	r3, #174	@ 0xae
 801ff26:	009b      	lsls	r3, r3, #2
 801ff28:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801ff2a:	687a      	ldr	r2, [r7, #4]
 801ff2c:	23ae      	movs	r3, #174	@ 0xae
 801ff2e:	009b      	lsls	r3, r3, #2
 801ff30:	58d3      	ldr	r3, [r2, r3]
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d104      	bne.n	801ff40 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801ff36:	230f      	movs	r3, #15
 801ff38:	18fb      	adds	r3, r7, r3
 801ff3a:	2201      	movs	r2, #1
 801ff3c:	701a      	strb	r2, [r3, #0]
 801ff3e:	e02c      	b.n	801ff9a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ff40:	687a      	ldr	r2, [r7, #4]
 801ff42:	23ae      	movs	r3, #174	@ 0xae
 801ff44:	009b      	lsls	r3, r3, #2
 801ff46:	58d3      	ldr	r3, [r2, r3]
 801ff48:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801ff4a:	687a      	ldr	r2, [r7, #4]
 801ff4c:	23af      	movs	r3, #175	@ 0xaf
 801ff4e:	009b      	lsls	r3, r3, #2
 801ff50:	58d3      	ldr	r3, [r2, r3]
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801ff56:	68ba      	ldr	r2, [r7, #8]
 801ff58:	2385      	movs	r3, #133	@ 0x85
 801ff5a:	009b      	lsls	r3, r3, #2
 801ff5c:	2100      	movs	r1, #0
 801ff5e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801ff60:	68ba      	ldr	r2, [r7, #8]
 801ff62:	2386      	movs	r3, #134	@ 0x86
 801ff64:	009b      	lsls	r3, r3, #2
 801ff66:	2100      	movs	r1, #0
 801ff68:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	7c1b      	ldrb	r3, [r3, #16]
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	d10a      	bne.n	801ff88 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801ff72:	68ba      	ldr	r2, [r7, #8]
 801ff74:	2381      	movs	r3, #129	@ 0x81
 801ff76:	009b      	lsls	r3, r3, #2
 801ff78:	58d2      	ldr	r2, [r2, r3]
 801ff7a:	2380      	movs	r3, #128	@ 0x80
 801ff7c:	009b      	lsls	r3, r3, #2
 801ff7e:	6878      	ldr	r0, [r7, #4]
 801ff80:	2101      	movs	r1, #1
 801ff82:	f002 f9d1 	bl	8022328 <USBD_LL_PrepareReceive>
 801ff86:	e008      	b.n	801ff9a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801ff88:	68ba      	ldr	r2, [r7, #8]
 801ff8a:	2381      	movs	r3, #129	@ 0x81
 801ff8c:	009b      	lsls	r3, r3, #2
 801ff8e:	58d2      	ldr	r2, [r2, r3]
 801ff90:	6878      	ldr	r0, [r7, #4]
 801ff92:	2340      	movs	r3, #64	@ 0x40
 801ff94:	2101      	movs	r1, #1
 801ff96:	f002 f9c7 	bl	8022328 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801ff9a:	230f      	movs	r3, #15
 801ff9c:	18fb      	adds	r3, r7, r3
 801ff9e:	781b      	ldrb	r3, [r3, #0]
}
 801ffa0:	0018      	movs	r0, r3
 801ffa2:	46bd      	mov	sp, r7
 801ffa4:	b004      	add	sp, #16
 801ffa6:	bd80      	pop	{r7, pc}

0801ffa8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ffa8:	b580      	push	{r7, lr}
 801ffaa:	b084      	sub	sp, #16
 801ffac:	af00      	add	r7, sp, #0
 801ffae:	6078      	str	r0, [r7, #4]
 801ffb0:	000a      	movs	r2, r1
 801ffb2:	1cfb      	adds	r3, r7, #3
 801ffb4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801ffb6:	230f      	movs	r3, #15
 801ffb8:	18fb      	adds	r3, r7, r3
 801ffba:	2200      	movs	r2, #0
 801ffbc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	2181      	movs	r1, #129	@ 0x81
 801ffc2:	0018      	movs	r0, r3
 801ffc4:	f002 f89c 	bl	8022100 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	2200      	movs	r2, #0
 801ffcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	2101      	movs	r1, #1
 801ffd2:	0018      	movs	r0, r3
 801ffd4:	f002 f894 	bl	8022100 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801ffd8:	687a      	ldr	r2, [r7, #4]
 801ffda:	23b6      	movs	r3, #182	@ 0xb6
 801ffdc:	005b      	lsls	r3, r3, #1
 801ffde:	2100      	movs	r1, #0
 801ffe0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	2182      	movs	r1, #130	@ 0x82
 801ffe6:	0018      	movs	r0, r3
 801ffe8:	f002 f88a 	bl	8022100 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	2200      	movs	r2, #0
 801fff0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801fff2:	687a      	ldr	r2, [r7, #4]
 801fff4:	23ae      	movs	r3, #174	@ 0xae
 801fff6:	009b      	lsls	r3, r3, #2
 801fff8:	58d3      	ldr	r3, [r2, r3]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d011      	beq.n	8020022 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801fffe:	687a      	ldr	r2, [r7, #4]
 8020000:	23af      	movs	r3, #175	@ 0xaf
 8020002:	009b      	lsls	r3, r3, #2
 8020004:	58d3      	ldr	r3, [r2, r3]
 8020006:	685b      	ldr	r3, [r3, #4]
 8020008:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 802000a:	687a      	ldr	r2, [r7, #4]
 802000c:	23ae      	movs	r3, #174	@ 0xae
 802000e:	009b      	lsls	r3, r3, #2
 8020010:	58d3      	ldr	r3, [r2, r3]
 8020012:	0018      	movs	r0, r3
 8020014:	f002 f9e2 	bl	80223dc <USBD_static_free>
    pdev->pClassData = NULL;
 8020018:	687a      	ldr	r2, [r7, #4]
 802001a:	23ae      	movs	r3, #174	@ 0xae
 802001c:	009b      	lsls	r3, r3, #2
 802001e:	2100      	movs	r1, #0
 8020020:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8020022:	230f      	movs	r3, #15
 8020024:	18fb      	adds	r3, r7, r3
 8020026:	781b      	ldrb	r3, [r3, #0]
}
 8020028:	0018      	movs	r0, r3
 802002a:	46bd      	mov	sp, r7
 802002c:	b004      	add	sp, #16
 802002e:	bd80      	pop	{r7, pc}

08020030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020030:	b580      	push	{r7, lr}
 8020032:	b086      	sub	sp, #24
 8020034:	af00      	add	r7, sp, #0
 8020036:	6078      	str	r0, [r7, #4]
 8020038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802003a:	687a      	ldr	r2, [r7, #4]
 802003c:	23ae      	movs	r3, #174	@ 0xae
 802003e:	009b      	lsls	r3, r3, #2
 8020040:	58d3      	ldr	r3, [r2, r3]
 8020042:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8020044:	230f      	movs	r3, #15
 8020046:	18fb      	adds	r3, r7, r3
 8020048:	2200      	movs	r2, #0
 802004a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 802004c:	230c      	movs	r3, #12
 802004e:	18fb      	adds	r3, r7, r3
 8020050:	2200      	movs	r2, #0
 8020052:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8020054:	2317      	movs	r3, #23
 8020056:	18fb      	adds	r3, r7, r3
 8020058:	2200      	movs	r2, #0
 802005a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802005c:	683b      	ldr	r3, [r7, #0]
 802005e:	781b      	ldrb	r3, [r3, #0]
 8020060:	001a      	movs	r2, r3
 8020062:	2360      	movs	r3, #96	@ 0x60
 8020064:	4013      	ands	r3, r2
 8020066:	d03d      	beq.n	80200e4 <USBD_CDC_Setup+0xb4>
 8020068:	2b20      	cmp	r3, #32
 802006a:	d000      	beq.n	802006e <USBD_CDC_Setup+0x3e>
 802006c:	e094      	b.n	8020198 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 802006e:	683b      	ldr	r3, [r7, #0]
 8020070:	88db      	ldrh	r3, [r3, #6]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d02b      	beq.n	80200ce <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8020076:	683b      	ldr	r3, [r7, #0]
 8020078:	781b      	ldrb	r3, [r3, #0]
 802007a:	b25b      	sxtb	r3, r3
 802007c:	2b00      	cmp	r3, #0
 802007e:	da12      	bge.n	80200a6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020080:	687a      	ldr	r2, [r7, #4]
 8020082:	23af      	movs	r3, #175	@ 0xaf
 8020084:	009b      	lsls	r3, r3, #2
 8020086:	58d3      	ldr	r3, [r2, r3]
 8020088:	689b      	ldr	r3, [r3, #8]
 802008a:	683a      	ldr	r2, [r7, #0]
 802008c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 802008e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020090:	683a      	ldr	r2, [r7, #0]
 8020092:	88d2      	ldrh	r2, [r2, #6]
 8020094:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020096:	6939      	ldr	r1, [r7, #16]
 8020098:	683b      	ldr	r3, [r7, #0]
 802009a:	88da      	ldrh	r2, [r3, #6]
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	0018      	movs	r0, r3
 80200a0:	f001 fbaf 	bl	8021802 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80200a4:	e083      	b.n	80201ae <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	7859      	ldrb	r1, [r3, #1]
 80200aa:	693a      	ldr	r2, [r7, #16]
 80200ac:	2380      	movs	r3, #128	@ 0x80
 80200ae:	009b      	lsls	r3, r3, #2
 80200b0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80200b2:	683b      	ldr	r3, [r7, #0]
 80200b4:	88db      	ldrh	r3, [r3, #6]
 80200b6:	b2d9      	uxtb	r1, r3
 80200b8:	693b      	ldr	r3, [r7, #16]
 80200ba:	4a40      	ldr	r2, [pc, #256]	@ (80201bc <USBD_CDC_Setup+0x18c>)
 80200bc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80200be:	6939      	ldr	r1, [r7, #16]
 80200c0:	683b      	ldr	r3, [r7, #0]
 80200c2:	88da      	ldrh	r2, [r3, #6]
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	0018      	movs	r0, r3
 80200c8:	f001 fbce 	bl	8021868 <USBD_CtlPrepareRx>
      break;
 80200cc:	e06f      	b.n	80201ae <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80200ce:	687a      	ldr	r2, [r7, #4]
 80200d0:	23af      	movs	r3, #175	@ 0xaf
 80200d2:	009b      	lsls	r3, r3, #2
 80200d4:	58d3      	ldr	r3, [r2, r3]
 80200d6:	689b      	ldr	r3, [r3, #8]
 80200d8:	683a      	ldr	r2, [r7, #0]
 80200da:	7850      	ldrb	r0, [r2, #1]
 80200dc:	6839      	ldr	r1, [r7, #0]
 80200de:	2200      	movs	r2, #0
 80200e0:	4798      	blx	r3
      break;
 80200e2:	e064      	b.n	80201ae <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80200e4:	683b      	ldr	r3, [r7, #0]
 80200e6:	785b      	ldrb	r3, [r3, #1]
 80200e8:	2b0b      	cmp	r3, #11
 80200ea:	d037      	beq.n	802015c <USBD_CDC_Setup+0x12c>
 80200ec:	dc47      	bgt.n	802017e <USBD_CDC_Setup+0x14e>
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d002      	beq.n	80200f8 <USBD_CDC_Setup+0xc8>
 80200f2:	2b0a      	cmp	r3, #10
 80200f4:	d019      	beq.n	802012a <USBD_CDC_Setup+0xfa>
 80200f6:	e042      	b.n	802017e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80200f8:	687a      	ldr	r2, [r7, #4]
 80200fa:	23a7      	movs	r3, #167	@ 0xa7
 80200fc:	009b      	lsls	r3, r3, #2
 80200fe:	5cd3      	ldrb	r3, [r2, r3]
 8020100:	2b03      	cmp	r3, #3
 8020102:	d107      	bne.n	8020114 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8020104:	230c      	movs	r3, #12
 8020106:	18f9      	adds	r1, r7, r3
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	2202      	movs	r2, #2
 802010c:	0018      	movs	r0, r3
 802010e:	f001 fb78 	bl	8021802 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020112:	e040      	b.n	8020196 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020114:	683a      	ldr	r2, [r7, #0]
 8020116:	687b      	ldr	r3, [r7, #4]
 8020118:	0011      	movs	r1, r2
 802011a:	0018      	movs	r0, r3
 802011c:	f001 faf3 	bl	8021706 <USBD_CtlError>
            ret = USBD_FAIL;
 8020120:	2317      	movs	r3, #23
 8020122:	18fb      	adds	r3, r7, r3
 8020124:	2202      	movs	r2, #2
 8020126:	701a      	strb	r2, [r3, #0]
          break;
 8020128:	e035      	b.n	8020196 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802012a:	687a      	ldr	r2, [r7, #4]
 802012c:	23a7      	movs	r3, #167	@ 0xa7
 802012e:	009b      	lsls	r3, r3, #2
 8020130:	5cd3      	ldrb	r3, [r2, r3]
 8020132:	2b03      	cmp	r3, #3
 8020134:	d107      	bne.n	8020146 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8020136:	230f      	movs	r3, #15
 8020138:	18f9      	adds	r1, r7, r3
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	2201      	movs	r2, #1
 802013e:	0018      	movs	r0, r3
 8020140:	f001 fb5f 	bl	8021802 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020144:	e027      	b.n	8020196 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020146:	683a      	ldr	r2, [r7, #0]
 8020148:	687b      	ldr	r3, [r7, #4]
 802014a:	0011      	movs	r1, r2
 802014c:	0018      	movs	r0, r3
 802014e:	f001 fada 	bl	8021706 <USBD_CtlError>
            ret = USBD_FAIL;
 8020152:	2317      	movs	r3, #23
 8020154:	18fb      	adds	r3, r7, r3
 8020156:	2202      	movs	r2, #2
 8020158:	701a      	strb	r2, [r3, #0]
          break;
 802015a:	e01c      	b.n	8020196 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802015c:	687a      	ldr	r2, [r7, #4]
 802015e:	23a7      	movs	r3, #167	@ 0xa7
 8020160:	009b      	lsls	r3, r3, #2
 8020162:	5cd3      	ldrb	r3, [r2, r3]
 8020164:	2b03      	cmp	r3, #3
 8020166:	d015      	beq.n	8020194 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8020168:	683a      	ldr	r2, [r7, #0]
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	0011      	movs	r1, r2
 802016e:	0018      	movs	r0, r3
 8020170:	f001 fac9 	bl	8021706 <USBD_CtlError>
            ret = USBD_FAIL;
 8020174:	2317      	movs	r3, #23
 8020176:	18fb      	adds	r3, r7, r3
 8020178:	2202      	movs	r2, #2
 802017a:	701a      	strb	r2, [r3, #0]
          }
          break;
 802017c:	e00a      	b.n	8020194 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 802017e:	683a      	ldr	r2, [r7, #0]
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	0011      	movs	r1, r2
 8020184:	0018      	movs	r0, r3
 8020186:	f001 fabe 	bl	8021706 <USBD_CtlError>
          ret = USBD_FAIL;
 802018a:	2317      	movs	r3, #23
 802018c:	18fb      	adds	r3, r7, r3
 802018e:	2202      	movs	r2, #2
 8020190:	701a      	strb	r2, [r3, #0]
          break;
 8020192:	e000      	b.n	8020196 <USBD_CDC_Setup+0x166>
          break;
 8020194:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020196:	e00a      	b.n	80201ae <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8020198:	683a      	ldr	r2, [r7, #0]
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	0011      	movs	r1, r2
 802019e:	0018      	movs	r0, r3
 80201a0:	f001 fab1 	bl	8021706 <USBD_CtlError>
      ret = USBD_FAIL;
 80201a4:	2317      	movs	r3, #23
 80201a6:	18fb      	adds	r3, r7, r3
 80201a8:	2202      	movs	r2, #2
 80201aa:	701a      	strb	r2, [r3, #0]
      break;
 80201ac:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80201ae:	2317      	movs	r3, #23
 80201b0:	18fb      	adds	r3, r7, r3
 80201b2:	781b      	ldrb	r3, [r3, #0]
}
 80201b4:	0018      	movs	r0, r3
 80201b6:	46bd      	mov	sp, r7
 80201b8:	b006      	add	sp, #24
 80201ba:	bd80      	pop	{r7, pc}
 80201bc:	00000201 	.word	0x00000201

080201c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80201c0:	b580      	push	{r7, lr}
 80201c2:	b084      	sub	sp, #16
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	6078      	str	r0, [r7, #4]
 80201c8:	000a      	movs	r2, r1
 80201ca:	1cfb      	adds	r3, r7, #3
 80201cc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80201ce:	687a      	ldr	r2, [r7, #4]
 80201d0:	23ae      	movs	r3, #174	@ 0xae
 80201d2:	009b      	lsls	r3, r3, #2
 80201d4:	58d3      	ldr	r3, [r2, r3]
 80201d6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80201d8:	687a      	ldr	r2, [r7, #4]
 80201da:	23b0      	movs	r3, #176	@ 0xb0
 80201dc:	009b      	lsls	r3, r3, #2
 80201de:	58d3      	ldr	r3, [r2, r3]
 80201e0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80201e2:	687a      	ldr	r2, [r7, #4]
 80201e4:	23ae      	movs	r3, #174	@ 0xae
 80201e6:	009b      	lsls	r3, r3, #2
 80201e8:	58d3      	ldr	r3, [r2, r3]
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	d03e      	beq.n	802026c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80201ee:	1cfb      	adds	r3, r7, #3
 80201f0:	781a      	ldrb	r2, [r3, #0]
 80201f2:	6879      	ldr	r1, [r7, #4]
 80201f4:	0013      	movs	r3, r2
 80201f6:	009b      	lsls	r3, r3, #2
 80201f8:	189b      	adds	r3, r3, r2
 80201fa:	009b      	lsls	r3, r3, #2
 80201fc:	18cb      	adds	r3, r1, r3
 80201fe:	331c      	adds	r3, #28
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	2b00      	cmp	r3, #0
 8020204:	d02b      	beq.n	802025e <USBD_CDC_DataIn+0x9e>
 8020206:	1cfb      	adds	r3, r7, #3
 8020208:	781a      	ldrb	r2, [r3, #0]
 802020a:	6879      	ldr	r1, [r7, #4]
 802020c:	0013      	movs	r3, r2
 802020e:	009b      	lsls	r3, r3, #2
 8020210:	189b      	adds	r3, r3, r2
 8020212:	009b      	lsls	r3, r3, #2
 8020214:	18cb      	adds	r3, r1, r3
 8020216:	331c      	adds	r3, #28
 8020218:	6818      	ldr	r0, [r3, #0]
 802021a:	1cfb      	adds	r3, r7, #3
 802021c:	781a      	ldrb	r2, [r3, #0]
 802021e:	68b9      	ldr	r1, [r7, #8]
 8020220:	0013      	movs	r3, r2
 8020222:	009b      	lsls	r3, r3, #2
 8020224:	189b      	adds	r3, r3, r2
 8020226:	00db      	lsls	r3, r3, #3
 8020228:	18cb      	adds	r3, r1, r3
 802022a:	3338      	adds	r3, #56	@ 0x38
 802022c:	681b      	ldr	r3, [r3, #0]
 802022e:	0019      	movs	r1, r3
 8020230:	f7e0 f83e 	bl	80002b0 <__aeabi_uidivmod>
 8020234:	1e0b      	subs	r3, r1, #0
 8020236:	d112      	bne.n	802025e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8020238:	1cfb      	adds	r3, r7, #3
 802023a:	781a      	ldrb	r2, [r3, #0]
 802023c:	6879      	ldr	r1, [r7, #4]
 802023e:	0013      	movs	r3, r2
 8020240:	009b      	lsls	r3, r3, #2
 8020242:	189b      	adds	r3, r3, r2
 8020244:	009b      	lsls	r3, r3, #2
 8020246:	18cb      	adds	r3, r1, r3
 8020248:	331c      	adds	r3, #28
 802024a:	2200      	movs	r2, #0
 802024c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802024e:	1cfb      	adds	r3, r7, #3
 8020250:	7819      	ldrb	r1, [r3, #0]
 8020252:	6878      	ldr	r0, [r7, #4]
 8020254:	2300      	movs	r3, #0
 8020256:	2200      	movs	r2, #0
 8020258:	f002 f82f 	bl	80222ba <USBD_LL_Transmit>
 802025c:	e004      	b.n	8020268 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 802025e:	68fa      	ldr	r2, [r7, #12]
 8020260:	2385      	movs	r3, #133	@ 0x85
 8020262:	009b      	lsls	r3, r3, #2
 8020264:	2100      	movs	r1, #0
 8020266:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8020268:	2300      	movs	r3, #0
 802026a:	e000      	b.n	802026e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 802026c:	2302      	movs	r3, #2
  }
}
 802026e:	0018      	movs	r0, r3
 8020270:	46bd      	mov	sp, r7
 8020272:	b004      	add	sp, #16
 8020274:	bd80      	pop	{r7, pc}

08020276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020276:	b580      	push	{r7, lr}
 8020278:	b084      	sub	sp, #16
 802027a:	af00      	add	r7, sp, #0
 802027c:	6078      	str	r0, [r7, #4]
 802027e:	000a      	movs	r2, r1
 8020280:	1cfb      	adds	r3, r7, #3
 8020282:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020284:	687a      	ldr	r2, [r7, #4]
 8020286:	23ae      	movs	r3, #174	@ 0xae
 8020288:	009b      	lsls	r3, r3, #2
 802028a:	58d3      	ldr	r3, [r2, r3]
 802028c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802028e:	1cfb      	adds	r3, r7, #3
 8020290:	781a      	ldrb	r2, [r3, #0]
 8020292:	687b      	ldr	r3, [r7, #4]
 8020294:	0011      	movs	r1, r2
 8020296:	0018      	movs	r0, r3
 8020298:	f002 f87d 	bl	8022396 <USBD_LL_GetRxDataSize>
 802029c:	0001      	movs	r1, r0
 802029e:	68fa      	ldr	r2, [r7, #12]
 80202a0:	2383      	movs	r3, #131	@ 0x83
 80202a2:	009b      	lsls	r3, r3, #2
 80202a4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80202a6:	687a      	ldr	r2, [r7, #4]
 80202a8:	23ae      	movs	r3, #174	@ 0xae
 80202aa:	009b      	lsls	r3, r3, #2
 80202ac:	58d3      	ldr	r3, [r2, r3]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d011      	beq.n	80202d6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80202b2:	687a      	ldr	r2, [r7, #4]
 80202b4:	23af      	movs	r3, #175	@ 0xaf
 80202b6:	009b      	lsls	r3, r3, #2
 80202b8:	58d3      	ldr	r3, [r2, r3]
 80202ba:	68da      	ldr	r2, [r3, #12]
 80202bc:	68f9      	ldr	r1, [r7, #12]
 80202be:	2381      	movs	r3, #129	@ 0x81
 80202c0:	009b      	lsls	r3, r3, #2
 80202c2:	58c8      	ldr	r0, [r1, r3]
 80202c4:	68fb      	ldr	r3, [r7, #12]
 80202c6:	2183      	movs	r1, #131	@ 0x83
 80202c8:	0089      	lsls	r1, r1, #2
 80202ca:	468c      	mov	ip, r1
 80202cc:	4463      	add	r3, ip
 80202ce:	0019      	movs	r1, r3
 80202d0:	4790      	blx	r2

    return USBD_OK;
 80202d2:	2300      	movs	r3, #0
 80202d4:	e000      	b.n	80202d8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80202d6:	2302      	movs	r3, #2
  }
}
 80202d8:	0018      	movs	r0, r3
 80202da:	46bd      	mov	sp, r7
 80202dc:	b004      	add	sp, #16
 80202de:	bd80      	pop	{r7, pc}

080202e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80202e0:	b590      	push	{r4, r7, lr}
 80202e2:	b085      	sub	sp, #20
 80202e4:	af00      	add	r7, sp, #0
 80202e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80202e8:	687a      	ldr	r2, [r7, #4]
 80202ea:	23ae      	movs	r3, #174	@ 0xae
 80202ec:	009b      	lsls	r3, r3, #2
 80202ee:	58d3      	ldr	r3, [r2, r3]
 80202f0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80202f2:	687a      	ldr	r2, [r7, #4]
 80202f4:	23af      	movs	r3, #175	@ 0xaf
 80202f6:	009b      	lsls	r3, r3, #2
 80202f8:	58d3      	ldr	r3, [r2, r3]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d018      	beq.n	8020330 <USBD_CDC_EP0_RxReady+0x50>
 80202fe:	68fa      	ldr	r2, [r7, #12]
 8020300:	2380      	movs	r3, #128	@ 0x80
 8020302:	009b      	lsls	r3, r3, #2
 8020304:	5cd3      	ldrb	r3, [r2, r3]
 8020306:	2bff      	cmp	r3, #255	@ 0xff
 8020308:	d012      	beq.n	8020330 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802030a:	687a      	ldr	r2, [r7, #4]
 802030c:	23af      	movs	r3, #175	@ 0xaf
 802030e:	009b      	lsls	r3, r3, #2
 8020310:	58d3      	ldr	r3, [r2, r3]
 8020312:	689b      	ldr	r3, [r3, #8]
 8020314:	68f9      	ldr	r1, [r7, #12]
 8020316:	2280      	movs	r2, #128	@ 0x80
 8020318:	0092      	lsls	r2, r2, #2
 802031a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 802031c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 802031e:	68fa      	ldr	r2, [r7, #12]
 8020320:	4c06      	ldr	r4, [pc, #24]	@ (802033c <USBD_CDC_EP0_RxReady+0x5c>)
 8020322:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020324:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020326:	68fa      	ldr	r2, [r7, #12]
 8020328:	2380      	movs	r3, #128	@ 0x80
 802032a:	009b      	lsls	r3, r3, #2
 802032c:	21ff      	movs	r1, #255	@ 0xff
 802032e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8020330:	2300      	movs	r3, #0
}
 8020332:	0018      	movs	r0, r3
 8020334:	46bd      	mov	sp, r7
 8020336:	b005      	add	sp, #20
 8020338:	bd90      	pop	{r4, r7, pc}
 802033a:	46c0      	nop			@ (mov r8, r8)
 802033c:	00000201 	.word	0x00000201

08020340 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020340:	b580      	push	{r7, lr}
 8020342:	b082      	sub	sp, #8
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	2243      	movs	r2, #67	@ 0x43
 802034c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 802034e:	4b02      	ldr	r3, [pc, #8]	@ (8020358 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8020350:	0018      	movs	r0, r3
 8020352:	46bd      	mov	sp, r7
 8020354:	b002      	add	sp, #8
 8020356:	bd80      	pop	{r7, pc}
 8020358:	20000180 	.word	0x20000180

0802035c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802035c:	b580      	push	{r7, lr}
 802035e:	b082      	sub	sp, #8
 8020360:	af00      	add	r7, sp, #0
 8020362:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8020364:	687b      	ldr	r3, [r7, #4]
 8020366:	2243      	movs	r2, #67	@ 0x43
 8020368:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 802036a:	4b02      	ldr	r3, [pc, #8]	@ (8020374 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 802036c:	0018      	movs	r0, r3
 802036e:	46bd      	mov	sp, r7
 8020370:	b002      	add	sp, #8
 8020372:	bd80      	pop	{r7, pc}
 8020374:	2000013c 	.word	0x2000013c

08020378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020378:	b580      	push	{r7, lr}
 802037a:	b082      	sub	sp, #8
 802037c:	af00      	add	r7, sp, #0
 802037e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	2243      	movs	r2, #67	@ 0x43
 8020384:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8020386:	4b02      	ldr	r3, [pc, #8]	@ (8020390 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020388:	0018      	movs	r0, r3
 802038a:	46bd      	mov	sp, r7
 802038c:	b002      	add	sp, #8
 802038e:	bd80      	pop	{r7, pc}
 8020390:	200001c4 	.word	0x200001c4

08020394 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020394:	b580      	push	{r7, lr}
 8020396:	b082      	sub	sp, #8
 8020398:	af00      	add	r7, sp, #0
 802039a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	220a      	movs	r2, #10
 80203a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80203a2:	4b02      	ldr	r3, [pc, #8]	@ (80203ac <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80203a4:	0018      	movs	r0, r3
 80203a6:	46bd      	mov	sp, r7
 80203a8:	b002      	add	sp, #8
 80203aa:	bd80      	pop	{r7, pc}
 80203ac:	200000f8 	.word	0x200000f8

080203b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80203b0:	b580      	push	{r7, lr}
 80203b2:	b084      	sub	sp, #16
 80203b4:	af00      	add	r7, sp, #0
 80203b6:	6078      	str	r0, [r7, #4]
 80203b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80203ba:	200f      	movs	r0, #15
 80203bc:	183b      	adds	r3, r7, r0
 80203be:	2202      	movs	r2, #2
 80203c0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80203c2:	683b      	ldr	r3, [r7, #0]
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	d007      	beq.n	80203d8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80203c8:	687a      	ldr	r2, [r7, #4]
 80203ca:	23af      	movs	r3, #175	@ 0xaf
 80203cc:	009b      	lsls	r3, r3, #2
 80203ce:	6839      	ldr	r1, [r7, #0]
 80203d0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80203d2:	183b      	adds	r3, r7, r0
 80203d4:	2200      	movs	r2, #0
 80203d6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80203d8:	230f      	movs	r3, #15
 80203da:	18fb      	adds	r3, r7, r3
 80203dc:	781b      	ldrb	r3, [r3, #0]
}
 80203de:	0018      	movs	r0, r3
 80203e0:	46bd      	mov	sp, r7
 80203e2:	b004      	add	sp, #16
 80203e4:	bd80      	pop	{r7, pc}

080203e6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80203e6:	b580      	push	{r7, lr}
 80203e8:	b086      	sub	sp, #24
 80203ea:	af00      	add	r7, sp, #0
 80203ec:	60f8      	str	r0, [r7, #12]
 80203ee:	60b9      	str	r1, [r7, #8]
 80203f0:	1dbb      	adds	r3, r7, #6
 80203f2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80203f4:	68fa      	ldr	r2, [r7, #12]
 80203f6:	23ae      	movs	r3, #174	@ 0xae
 80203f8:	009b      	lsls	r3, r3, #2
 80203fa:	58d3      	ldr	r3, [r2, r3]
 80203fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80203fe:	697a      	ldr	r2, [r7, #20]
 8020400:	2382      	movs	r3, #130	@ 0x82
 8020402:	009b      	lsls	r3, r3, #2
 8020404:	68b9      	ldr	r1, [r7, #8]
 8020406:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020408:	1dbb      	adds	r3, r7, #6
 802040a:	8819      	ldrh	r1, [r3, #0]
 802040c:	697a      	ldr	r2, [r7, #20]
 802040e:	2384      	movs	r3, #132	@ 0x84
 8020410:	009b      	lsls	r3, r3, #2
 8020412:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020414:	2300      	movs	r3, #0
}
 8020416:	0018      	movs	r0, r3
 8020418:	46bd      	mov	sp, r7
 802041a:	b006      	add	sp, #24
 802041c:	bd80      	pop	{r7, pc}

0802041e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 802041e:	b580      	push	{r7, lr}
 8020420:	b084      	sub	sp, #16
 8020422:	af00      	add	r7, sp, #0
 8020424:	6078      	str	r0, [r7, #4]
 8020426:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020428:	687a      	ldr	r2, [r7, #4]
 802042a:	23ae      	movs	r3, #174	@ 0xae
 802042c:	009b      	lsls	r3, r3, #2
 802042e:	58d3      	ldr	r3, [r2, r3]
 8020430:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020432:	68fa      	ldr	r2, [r7, #12]
 8020434:	2381      	movs	r3, #129	@ 0x81
 8020436:	009b      	lsls	r3, r3, #2
 8020438:	6839      	ldr	r1, [r7, #0]
 802043a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 802043c:	2300      	movs	r3, #0
}
 802043e:	0018      	movs	r0, r3
 8020440:	46bd      	mov	sp, r7
 8020442:	b004      	add	sp, #16
 8020444:	bd80      	pop	{r7, pc}

08020446 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020446:	b580      	push	{r7, lr}
 8020448:	b084      	sub	sp, #16
 802044a:	af00      	add	r7, sp, #0
 802044c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802044e:	687a      	ldr	r2, [r7, #4]
 8020450:	23ae      	movs	r3, #174	@ 0xae
 8020452:	009b      	lsls	r3, r3, #2
 8020454:	58d3      	ldr	r3, [r2, r3]
 8020456:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020458:	687a      	ldr	r2, [r7, #4]
 802045a:	23ae      	movs	r3, #174	@ 0xae
 802045c:	009b      	lsls	r3, r3, #2
 802045e:	58d3      	ldr	r3, [r2, r3]
 8020460:	2b00      	cmp	r3, #0
 8020462:	d022      	beq.n	80204aa <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020464:	68fa      	ldr	r2, [r7, #12]
 8020466:	2385      	movs	r3, #133	@ 0x85
 8020468:	009b      	lsls	r3, r3, #2
 802046a:	58d3      	ldr	r3, [r2, r3]
 802046c:	2b00      	cmp	r3, #0
 802046e:	d11a      	bne.n	80204a6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020470:	68fa      	ldr	r2, [r7, #12]
 8020472:	2385      	movs	r3, #133	@ 0x85
 8020474:	009b      	lsls	r3, r3, #2
 8020476:	2101      	movs	r1, #1
 8020478:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 802047a:	68fa      	ldr	r2, [r7, #12]
 802047c:	2384      	movs	r3, #132	@ 0x84
 802047e:	009b      	lsls	r3, r3, #2
 8020480:	58d2      	ldr	r2, [r2, r3]
 8020482:	687b      	ldr	r3, [r7, #4]
 8020484:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020486:	68fa      	ldr	r2, [r7, #12]
 8020488:	2382      	movs	r3, #130	@ 0x82
 802048a:	009b      	lsls	r3, r3, #2
 802048c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 802048e:	68fa      	ldr	r2, [r7, #12]
 8020490:	2384      	movs	r3, #132	@ 0x84
 8020492:	009b      	lsls	r3, r3, #2
 8020494:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020496:	b29b      	uxth	r3, r3
 8020498:	6878      	ldr	r0, [r7, #4]
 802049a:	000a      	movs	r2, r1
 802049c:	2181      	movs	r1, #129	@ 0x81
 802049e:	f001 ff0c 	bl	80222ba <USBD_LL_Transmit>

      return USBD_OK;
 80204a2:	2300      	movs	r3, #0
 80204a4:	e002      	b.n	80204ac <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80204a6:	2301      	movs	r3, #1
 80204a8:	e000      	b.n	80204ac <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80204aa:	2302      	movs	r3, #2
  }
}
 80204ac:	0018      	movs	r0, r3
 80204ae:	46bd      	mov	sp, r7
 80204b0:	b004      	add	sp, #16
 80204b2:	bd80      	pop	{r7, pc}

080204b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80204b4:	b580      	push	{r7, lr}
 80204b6:	b084      	sub	sp, #16
 80204b8:	af00      	add	r7, sp, #0
 80204ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80204bc:	687a      	ldr	r2, [r7, #4]
 80204be:	23ae      	movs	r3, #174	@ 0xae
 80204c0:	009b      	lsls	r3, r3, #2
 80204c2:	58d3      	ldr	r3, [r2, r3]
 80204c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80204c6:	687a      	ldr	r2, [r7, #4]
 80204c8:	23ae      	movs	r3, #174	@ 0xae
 80204ca:	009b      	lsls	r3, r3, #2
 80204cc:	58d3      	ldr	r3, [r2, r3]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d019      	beq.n	8020506 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	7c1b      	ldrb	r3, [r3, #16]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d10a      	bne.n	80204f0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80204da:	68fa      	ldr	r2, [r7, #12]
 80204dc:	2381      	movs	r3, #129	@ 0x81
 80204de:	009b      	lsls	r3, r3, #2
 80204e0:	58d2      	ldr	r2, [r2, r3]
 80204e2:	2380      	movs	r3, #128	@ 0x80
 80204e4:	009b      	lsls	r3, r3, #2
 80204e6:	6878      	ldr	r0, [r7, #4]
 80204e8:	2101      	movs	r1, #1
 80204ea:	f001 ff1d 	bl	8022328 <USBD_LL_PrepareReceive>
 80204ee:	e008      	b.n	8020502 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80204f0:	68fa      	ldr	r2, [r7, #12]
 80204f2:	2381      	movs	r3, #129	@ 0x81
 80204f4:	009b      	lsls	r3, r3, #2
 80204f6:	58d2      	ldr	r2, [r2, r3]
 80204f8:	6878      	ldr	r0, [r7, #4]
 80204fa:	2340      	movs	r3, #64	@ 0x40
 80204fc:	2101      	movs	r1, #1
 80204fe:	f001 ff13 	bl	8022328 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8020502:	2300      	movs	r3, #0
 8020504:	e000      	b.n	8020508 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8020506:	2302      	movs	r3, #2
  }
}
 8020508:	0018      	movs	r0, r3
 802050a:	46bd      	mov	sp, r7
 802050c:	b004      	add	sp, #16
 802050e:	bd80      	pop	{r7, pc}

08020510 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020510:	b580      	push	{r7, lr}
 8020512:	b084      	sub	sp, #16
 8020514:	af00      	add	r7, sp, #0
 8020516:	60f8      	str	r0, [r7, #12]
 8020518:	60b9      	str	r1, [r7, #8]
 802051a:	1dfb      	adds	r3, r7, #7
 802051c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802051e:	68fb      	ldr	r3, [r7, #12]
 8020520:	2b00      	cmp	r3, #0
 8020522:	d101      	bne.n	8020528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020524:	2302      	movs	r3, #2
 8020526:	e020      	b.n	802056a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8020528:	68fa      	ldr	r2, [r7, #12]
 802052a:	23ad      	movs	r3, #173	@ 0xad
 802052c:	009b      	lsls	r3, r3, #2
 802052e:	58d3      	ldr	r3, [r2, r3]
 8020530:	2b00      	cmp	r3, #0
 8020532:	d004      	beq.n	802053e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8020534:	68fa      	ldr	r2, [r7, #12]
 8020536:	23ad      	movs	r3, #173	@ 0xad
 8020538:	009b      	lsls	r3, r3, #2
 802053a:	2100      	movs	r1, #0
 802053c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802053e:	68bb      	ldr	r3, [r7, #8]
 8020540:	2b00      	cmp	r3, #0
 8020542:	d004      	beq.n	802054e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020544:	68fa      	ldr	r2, [r7, #12]
 8020546:	23ac      	movs	r3, #172	@ 0xac
 8020548:	009b      	lsls	r3, r3, #2
 802054a:	68b9      	ldr	r1, [r7, #8]
 802054c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802054e:	68fa      	ldr	r2, [r7, #12]
 8020550:	23a7      	movs	r3, #167	@ 0xa7
 8020552:	009b      	lsls	r3, r3, #2
 8020554:	2101      	movs	r1, #1
 8020556:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	1dfa      	adds	r2, r7, #7
 802055c:	7812      	ldrb	r2, [r2, #0]
 802055e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8020560:	68fb      	ldr	r3, [r7, #12]
 8020562:	0018      	movs	r0, r3
 8020564:	f001 fd0c 	bl	8021f80 <USBD_LL_Init>

  return USBD_OK;
 8020568:	2300      	movs	r3, #0
}
 802056a:	0018      	movs	r0, r3
 802056c:	46bd      	mov	sp, r7
 802056e:	b004      	add	sp, #16
 8020570:	bd80      	pop	{r7, pc}

08020572 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020572:	b580      	push	{r7, lr}
 8020574:	b084      	sub	sp, #16
 8020576:	af00      	add	r7, sp, #0
 8020578:	6078      	str	r0, [r7, #4]
 802057a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 802057c:	200f      	movs	r0, #15
 802057e:	183b      	adds	r3, r7, r0
 8020580:	2200      	movs	r2, #0
 8020582:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8020584:	683b      	ldr	r3, [r7, #0]
 8020586:	2b00      	cmp	r3, #0
 8020588:	d008      	beq.n	802059c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 802058a:	687a      	ldr	r2, [r7, #4]
 802058c:	23ad      	movs	r3, #173	@ 0xad
 802058e:	009b      	lsls	r3, r3, #2
 8020590:	6839      	ldr	r1, [r7, #0]
 8020592:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8020594:	183b      	adds	r3, r7, r0
 8020596:	2200      	movs	r2, #0
 8020598:	701a      	strb	r2, [r3, #0]
 802059a:	e003      	b.n	80205a4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 802059c:	230f      	movs	r3, #15
 802059e:	18fb      	adds	r3, r7, r3
 80205a0:	2202      	movs	r2, #2
 80205a2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80205a4:	230f      	movs	r3, #15
 80205a6:	18fb      	adds	r3, r7, r3
 80205a8:	781b      	ldrb	r3, [r3, #0]
}
 80205aa:	0018      	movs	r0, r3
 80205ac:	46bd      	mov	sp, r7
 80205ae:	b004      	add	sp, #16
 80205b0:	bd80      	pop	{r7, pc}

080205b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80205b2:	b580      	push	{r7, lr}
 80205b4:	b082      	sub	sp, #8
 80205b6:	af00      	add	r7, sp, #0
 80205b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	0018      	movs	r0, r3
 80205be:	f001 fd43 	bl	8022048 <USBD_LL_Start>

  return USBD_OK;
 80205c2:	2300      	movs	r3, #0
}
 80205c4:	0018      	movs	r0, r3
 80205c6:	46bd      	mov	sp, r7
 80205c8:	b002      	add	sp, #8
 80205ca:	bd80      	pop	{r7, pc}

080205cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80205cc:	b580      	push	{r7, lr}
 80205ce:	b082      	sub	sp, #8
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80205d4:	2300      	movs	r3, #0
}
 80205d6:	0018      	movs	r0, r3
 80205d8:	46bd      	mov	sp, r7
 80205da:	b002      	add	sp, #8
 80205dc:	bd80      	pop	{r7, pc}

080205de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80205de:	b590      	push	{r4, r7, lr}
 80205e0:	b085      	sub	sp, #20
 80205e2:	af00      	add	r7, sp, #0
 80205e4:	6078      	str	r0, [r7, #4]
 80205e6:	000a      	movs	r2, r1
 80205e8:	1cfb      	adds	r3, r7, #3
 80205ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80205ec:	240f      	movs	r4, #15
 80205ee:	193b      	adds	r3, r7, r4
 80205f0:	2202      	movs	r2, #2
 80205f2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80205f4:	687a      	ldr	r2, [r7, #4]
 80205f6:	23ad      	movs	r3, #173	@ 0xad
 80205f8:	009b      	lsls	r3, r3, #2
 80205fa:	58d3      	ldr	r3, [r2, r3]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d00e      	beq.n	802061e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020600:	687a      	ldr	r2, [r7, #4]
 8020602:	23ad      	movs	r3, #173	@ 0xad
 8020604:	009b      	lsls	r3, r3, #2
 8020606:	58d3      	ldr	r3, [r2, r3]
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	1cfa      	adds	r2, r7, #3
 802060c:	7811      	ldrb	r1, [r2, #0]
 802060e:	687a      	ldr	r2, [r7, #4]
 8020610:	0010      	movs	r0, r2
 8020612:	4798      	blx	r3
 8020614:	1e03      	subs	r3, r0, #0
 8020616:	d102      	bne.n	802061e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8020618:	193b      	adds	r3, r7, r4
 802061a:	2200      	movs	r2, #0
 802061c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 802061e:	230f      	movs	r3, #15
 8020620:	18fb      	adds	r3, r7, r3
 8020622:	781b      	ldrb	r3, [r3, #0]
}
 8020624:	0018      	movs	r0, r3
 8020626:	46bd      	mov	sp, r7
 8020628:	b005      	add	sp, #20
 802062a:	bd90      	pop	{r4, r7, pc}

0802062c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 802062c:	b580      	push	{r7, lr}
 802062e:	b082      	sub	sp, #8
 8020630:	af00      	add	r7, sp, #0
 8020632:	6078      	str	r0, [r7, #4]
 8020634:	000a      	movs	r2, r1
 8020636:	1cfb      	adds	r3, r7, #3
 8020638:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 802063a:	687a      	ldr	r2, [r7, #4]
 802063c:	23ad      	movs	r3, #173	@ 0xad
 802063e:	009b      	lsls	r3, r3, #2
 8020640:	58d3      	ldr	r3, [r2, r3]
 8020642:	685b      	ldr	r3, [r3, #4]
 8020644:	1cfa      	adds	r2, r7, #3
 8020646:	7811      	ldrb	r1, [r2, #0]
 8020648:	687a      	ldr	r2, [r7, #4]
 802064a:	0010      	movs	r0, r2
 802064c:	4798      	blx	r3

  return USBD_OK;
 802064e:	2300      	movs	r3, #0
}
 8020650:	0018      	movs	r0, r3
 8020652:	46bd      	mov	sp, r7
 8020654:	b002      	add	sp, #8
 8020656:	bd80      	pop	{r7, pc}

08020658 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	b082      	sub	sp, #8
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]
 8020660:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	22aa      	movs	r2, #170	@ 0xaa
 8020666:	0092      	lsls	r2, r2, #2
 8020668:	4694      	mov	ip, r2
 802066a:	4463      	add	r3, ip
 802066c:	683a      	ldr	r2, [r7, #0]
 802066e:	0011      	movs	r1, r2
 8020670:	0018      	movs	r0, r3
 8020672:	f001 f810 	bl	8021696 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020676:	687a      	ldr	r2, [r7, #4]
 8020678:	23a5      	movs	r3, #165	@ 0xa5
 802067a:	009b      	lsls	r3, r3, #2
 802067c:	2101      	movs	r1, #1
 802067e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	4a23      	ldr	r2, [pc, #140]	@ (8020710 <USBD_LL_SetupStage+0xb8>)
 8020684:	5a9b      	ldrh	r3, [r3, r2]
 8020686:	0019      	movs	r1, r3
 8020688:	687a      	ldr	r2, [r7, #4]
 802068a:	23a6      	movs	r3, #166	@ 0xa6
 802068c:	009b      	lsls	r3, r3, #2
 802068e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8020690:	687a      	ldr	r2, [r7, #4]
 8020692:	23aa      	movs	r3, #170	@ 0xaa
 8020694:	009b      	lsls	r3, r3, #2
 8020696:	5cd3      	ldrb	r3, [r2, r3]
 8020698:	001a      	movs	r2, r3
 802069a:	231f      	movs	r3, #31
 802069c:	4013      	ands	r3, r2
 802069e:	2b02      	cmp	r3, #2
 80206a0:	d019      	beq.n	80206d6 <USBD_LL_SetupStage+0x7e>
 80206a2:	d822      	bhi.n	80206ea <USBD_LL_SetupStage+0x92>
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d002      	beq.n	80206ae <USBD_LL_SetupStage+0x56>
 80206a8:	2b01      	cmp	r3, #1
 80206aa:	d00a      	beq.n	80206c2 <USBD_LL_SetupStage+0x6a>
 80206ac:	e01d      	b.n	80206ea <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	22aa      	movs	r2, #170	@ 0xaa
 80206b2:	0092      	lsls	r2, r2, #2
 80206b4:	189a      	adds	r2, r3, r2
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	0011      	movs	r1, r2
 80206ba:	0018      	movs	r0, r3
 80206bc:	f000 fa10 	bl	8020ae0 <USBD_StdDevReq>
      break;
 80206c0:	e020      	b.n	8020704 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80206c2:	687b      	ldr	r3, [r7, #4]
 80206c4:	22aa      	movs	r2, #170	@ 0xaa
 80206c6:	0092      	lsls	r2, r2, #2
 80206c8:	189a      	adds	r2, r3, r2
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	0011      	movs	r1, r2
 80206ce:	0018      	movs	r0, r3
 80206d0:	f000 fa78 	bl	8020bc4 <USBD_StdItfReq>
      break;
 80206d4:	e016      	b.n	8020704 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	22aa      	movs	r2, #170	@ 0xaa
 80206da:	0092      	lsls	r2, r2, #2
 80206dc:	189a      	adds	r2, r3, r2
 80206de:	687b      	ldr	r3, [r7, #4]
 80206e0:	0011      	movs	r1, r2
 80206e2:	0018      	movs	r0, r3
 80206e4:	f000 fac5 	bl	8020c72 <USBD_StdEPReq>
      break;
 80206e8:	e00c      	b.n	8020704 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80206ea:	687a      	ldr	r2, [r7, #4]
 80206ec:	23aa      	movs	r3, #170	@ 0xaa
 80206ee:	009b      	lsls	r3, r3, #2
 80206f0:	5cd3      	ldrb	r3, [r2, r3]
 80206f2:	227f      	movs	r2, #127	@ 0x7f
 80206f4:	4393      	bics	r3, r2
 80206f6:	b2da      	uxtb	r2, r3
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	0011      	movs	r1, r2
 80206fc:	0018      	movs	r0, r3
 80206fe:	f001 fd2a 	bl	8022156 <USBD_LL_StallEP>
      break;
 8020702:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020704:	2300      	movs	r3, #0
}
 8020706:	0018      	movs	r0, r3
 8020708:	46bd      	mov	sp, r7
 802070a:	b002      	add	sp, #8
 802070c:	bd80      	pop	{r7, pc}
 802070e:	46c0      	nop			@ (mov r8, r8)
 8020710:	000002ae 	.word	0x000002ae

08020714 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020714:	b580      	push	{r7, lr}
 8020716:	b086      	sub	sp, #24
 8020718:	af00      	add	r7, sp, #0
 802071a:	60f8      	str	r0, [r7, #12]
 802071c:	607a      	str	r2, [r7, #4]
 802071e:	200b      	movs	r0, #11
 8020720:	183b      	adds	r3, r7, r0
 8020722:	1c0a      	adds	r2, r1, #0
 8020724:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020726:	183b      	adds	r3, r7, r0
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	2b00      	cmp	r3, #0
 802072c:	d154      	bne.n	80207d8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	3355      	adds	r3, #85	@ 0x55
 8020732:	33ff      	adds	r3, #255	@ 0xff
 8020734:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020736:	68fa      	ldr	r2, [r7, #12]
 8020738:	23a5      	movs	r3, #165	@ 0xa5
 802073a:	009b      	lsls	r3, r3, #2
 802073c:	58d3      	ldr	r3, [r2, r3]
 802073e:	2b03      	cmp	r3, #3
 8020740:	d139      	bne.n	80207b6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8020742:	697b      	ldr	r3, [r7, #20]
 8020744:	68da      	ldr	r2, [r3, #12]
 8020746:	697b      	ldr	r3, [r7, #20]
 8020748:	691b      	ldr	r3, [r3, #16]
 802074a:	429a      	cmp	r2, r3
 802074c:	d919      	bls.n	8020782 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 802074e:	697b      	ldr	r3, [r7, #20]
 8020750:	68da      	ldr	r2, [r3, #12]
 8020752:	697b      	ldr	r3, [r7, #20]
 8020754:	691b      	ldr	r3, [r3, #16]
 8020756:	1ad2      	subs	r2, r2, r3
 8020758:	697b      	ldr	r3, [r7, #20]
 802075a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 802075c:	697b      	ldr	r3, [r7, #20]
 802075e:	68da      	ldr	r2, [r3, #12]
 8020760:	697b      	ldr	r3, [r7, #20]
 8020762:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020764:	429a      	cmp	r2, r3
 8020766:	d203      	bcs.n	8020770 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020768:	697b      	ldr	r3, [r7, #20]
 802076a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 802076c:	b29b      	uxth	r3, r3
 802076e:	e002      	b.n	8020776 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020770:	697b      	ldr	r3, [r7, #20]
 8020772:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020774:	b29b      	uxth	r3, r3
 8020776:	6879      	ldr	r1, [r7, #4]
 8020778:	68f8      	ldr	r0, [r7, #12]
 802077a:	001a      	movs	r2, r3
 802077c:	f001 f898 	bl	80218b0 <USBD_CtlContinueRx>
 8020780:	e045      	b.n	802080e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020782:	68fa      	ldr	r2, [r7, #12]
 8020784:	23ad      	movs	r3, #173	@ 0xad
 8020786:	009b      	lsls	r3, r3, #2
 8020788:	58d3      	ldr	r3, [r2, r3]
 802078a:	691b      	ldr	r3, [r3, #16]
 802078c:	2b00      	cmp	r3, #0
 802078e:	d00d      	beq.n	80207ac <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020790:	68fa      	ldr	r2, [r7, #12]
 8020792:	23a7      	movs	r3, #167	@ 0xa7
 8020794:	009b      	lsls	r3, r3, #2
 8020796:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020798:	2b03      	cmp	r3, #3
 802079a:	d107      	bne.n	80207ac <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 802079c:	68fa      	ldr	r2, [r7, #12]
 802079e:	23ad      	movs	r3, #173	@ 0xad
 80207a0:	009b      	lsls	r3, r3, #2
 80207a2:	58d3      	ldr	r3, [r2, r3]
 80207a4:	691b      	ldr	r3, [r3, #16]
 80207a6:	68fa      	ldr	r2, [r7, #12]
 80207a8:	0010      	movs	r0, r2
 80207aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80207ac:	68fb      	ldr	r3, [r7, #12]
 80207ae:	0018      	movs	r0, r3
 80207b0:	f001 f891 	bl	80218d6 <USBD_CtlSendStatus>
 80207b4:	e02b      	b.n	802080e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80207b6:	68fa      	ldr	r2, [r7, #12]
 80207b8:	23a5      	movs	r3, #165	@ 0xa5
 80207ba:	009b      	lsls	r3, r3, #2
 80207bc:	58d3      	ldr	r3, [r2, r3]
 80207be:	2b05      	cmp	r3, #5
 80207c0:	d125      	bne.n	802080e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80207c2:	68fa      	ldr	r2, [r7, #12]
 80207c4:	23a5      	movs	r3, #165	@ 0xa5
 80207c6:	009b      	lsls	r3, r3, #2
 80207c8:	2100      	movs	r1, #0
 80207ca:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80207cc:	68fb      	ldr	r3, [r7, #12]
 80207ce:	2100      	movs	r1, #0
 80207d0:	0018      	movs	r0, r3
 80207d2:	f001 fcc0 	bl	8022156 <USBD_LL_StallEP>
 80207d6:	e01a      	b.n	802080e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80207d8:	68fa      	ldr	r2, [r7, #12]
 80207da:	23ad      	movs	r3, #173	@ 0xad
 80207dc:	009b      	lsls	r3, r3, #2
 80207de:	58d3      	ldr	r3, [r2, r3]
 80207e0:	699b      	ldr	r3, [r3, #24]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d011      	beq.n	802080a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80207e6:	68fa      	ldr	r2, [r7, #12]
 80207e8:	23a7      	movs	r3, #167	@ 0xa7
 80207ea:	009b      	lsls	r3, r3, #2
 80207ec:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80207ee:	2b03      	cmp	r3, #3
 80207f0:	d10b      	bne.n	802080a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80207f2:	68fa      	ldr	r2, [r7, #12]
 80207f4:	23ad      	movs	r3, #173	@ 0xad
 80207f6:	009b      	lsls	r3, r3, #2
 80207f8:	58d3      	ldr	r3, [r2, r3]
 80207fa:	699b      	ldr	r3, [r3, #24]
 80207fc:	220b      	movs	r2, #11
 80207fe:	18ba      	adds	r2, r7, r2
 8020800:	7811      	ldrb	r1, [r2, #0]
 8020802:	68fa      	ldr	r2, [r7, #12]
 8020804:	0010      	movs	r0, r2
 8020806:	4798      	blx	r3
 8020808:	e001      	b.n	802080e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802080a:	2302      	movs	r3, #2
 802080c:	e000      	b.n	8020810 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 802080e:	2300      	movs	r3, #0
}
 8020810:	0018      	movs	r0, r3
 8020812:	46bd      	mov	sp, r7
 8020814:	b006      	add	sp, #24
 8020816:	bd80      	pop	{r7, pc}

08020818 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020818:	b580      	push	{r7, lr}
 802081a:	b086      	sub	sp, #24
 802081c:	af00      	add	r7, sp, #0
 802081e:	60f8      	str	r0, [r7, #12]
 8020820:	607a      	str	r2, [r7, #4]
 8020822:	200b      	movs	r0, #11
 8020824:	183b      	adds	r3, r7, r0
 8020826:	1c0a      	adds	r2, r1, #0
 8020828:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802082a:	183b      	adds	r3, r7, r0
 802082c:	781b      	ldrb	r3, [r3, #0]
 802082e:	2b00      	cmp	r3, #0
 8020830:	d000      	beq.n	8020834 <USBD_LL_DataInStage+0x1c>
 8020832:	e08e      	b.n	8020952 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8020834:	68fb      	ldr	r3, [r7, #12]
 8020836:	3314      	adds	r3, #20
 8020838:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802083a:	68fa      	ldr	r2, [r7, #12]
 802083c:	23a5      	movs	r3, #165	@ 0xa5
 802083e:	009b      	lsls	r3, r3, #2
 8020840:	58d3      	ldr	r3, [r2, r3]
 8020842:	2b02      	cmp	r3, #2
 8020844:	d164      	bne.n	8020910 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8020846:	697b      	ldr	r3, [r7, #20]
 8020848:	68da      	ldr	r2, [r3, #12]
 802084a:	697b      	ldr	r3, [r7, #20]
 802084c:	691b      	ldr	r3, [r3, #16]
 802084e:	429a      	cmp	r2, r3
 8020850:	d915      	bls.n	802087e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8020852:	697b      	ldr	r3, [r7, #20]
 8020854:	68da      	ldr	r2, [r3, #12]
 8020856:	697b      	ldr	r3, [r7, #20]
 8020858:	691b      	ldr	r3, [r3, #16]
 802085a:	1ad2      	subs	r2, r2, r3
 802085c:	697b      	ldr	r3, [r7, #20]
 802085e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8020860:	697b      	ldr	r3, [r7, #20]
 8020862:	68db      	ldr	r3, [r3, #12]
 8020864:	b29a      	uxth	r2, r3
 8020866:	6879      	ldr	r1, [r7, #4]
 8020868:	68fb      	ldr	r3, [r7, #12]
 802086a:	0018      	movs	r0, r3
 802086c:	f000 ffe9 	bl	8021842 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020870:	68f8      	ldr	r0, [r7, #12]
 8020872:	2300      	movs	r3, #0
 8020874:	2200      	movs	r2, #0
 8020876:	2100      	movs	r1, #0
 8020878:	f001 fd56 	bl	8022328 <USBD_LL_PrepareReceive>
 802087c:	e059      	b.n	8020932 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802087e:	697b      	ldr	r3, [r7, #20]
 8020880:	689a      	ldr	r2, [r3, #8]
 8020882:	697b      	ldr	r3, [r7, #20]
 8020884:	691b      	ldr	r3, [r3, #16]
 8020886:	0019      	movs	r1, r3
 8020888:	0010      	movs	r0, r2
 802088a:	f7df fd11 	bl	80002b0 <__aeabi_uidivmod>
 802088e:	1e0b      	subs	r3, r1, #0
 8020890:	d11f      	bne.n	80208d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8020892:	697b      	ldr	r3, [r7, #20]
 8020894:	689a      	ldr	r2, [r3, #8]
 8020896:	697b      	ldr	r3, [r7, #20]
 8020898:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802089a:	429a      	cmp	r2, r3
 802089c:	d319      	bcc.n	80208d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 802089e:	697b      	ldr	r3, [r7, #20]
 80208a0:	689a      	ldr	r2, [r3, #8]
 80208a2:	68f9      	ldr	r1, [r7, #12]
 80208a4:	23a6      	movs	r3, #166	@ 0xa6
 80208a6:	009b      	lsls	r3, r3, #2
 80208a8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80208aa:	429a      	cmp	r2, r3
 80208ac:	d211      	bcs.n	80208d2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80208ae:	68fb      	ldr	r3, [r7, #12]
 80208b0:	2200      	movs	r2, #0
 80208b2:	2100      	movs	r1, #0
 80208b4:	0018      	movs	r0, r3
 80208b6:	f000 ffc4 	bl	8021842 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80208ba:	68fa      	ldr	r2, [r7, #12]
 80208bc:	23a6      	movs	r3, #166	@ 0xa6
 80208be:	009b      	lsls	r3, r3, #2
 80208c0:	2100      	movs	r1, #0
 80208c2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80208c4:	68f8      	ldr	r0, [r7, #12]
 80208c6:	2300      	movs	r3, #0
 80208c8:	2200      	movs	r2, #0
 80208ca:	2100      	movs	r1, #0
 80208cc:	f001 fd2c 	bl	8022328 <USBD_LL_PrepareReceive>
 80208d0:	e02f      	b.n	8020932 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80208d2:	68fa      	ldr	r2, [r7, #12]
 80208d4:	23ad      	movs	r3, #173	@ 0xad
 80208d6:	009b      	lsls	r3, r3, #2
 80208d8:	58d3      	ldr	r3, [r2, r3]
 80208da:	68db      	ldr	r3, [r3, #12]
 80208dc:	2b00      	cmp	r3, #0
 80208de:	d00d      	beq.n	80208fc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80208e0:	68fa      	ldr	r2, [r7, #12]
 80208e2:	23a7      	movs	r3, #167	@ 0xa7
 80208e4:	009b      	lsls	r3, r3, #2
 80208e6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80208e8:	2b03      	cmp	r3, #3
 80208ea:	d107      	bne.n	80208fc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80208ec:	68fa      	ldr	r2, [r7, #12]
 80208ee:	23ad      	movs	r3, #173	@ 0xad
 80208f0:	009b      	lsls	r3, r3, #2
 80208f2:	58d3      	ldr	r3, [r2, r3]
 80208f4:	68db      	ldr	r3, [r3, #12]
 80208f6:	68fa      	ldr	r2, [r7, #12]
 80208f8:	0010      	movs	r0, r2
 80208fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80208fc:	68fb      	ldr	r3, [r7, #12]
 80208fe:	2180      	movs	r1, #128	@ 0x80
 8020900:	0018      	movs	r0, r3
 8020902:	f001 fc28 	bl	8022156 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	0018      	movs	r0, r3
 802090a:	f000 fff8 	bl	80218fe <USBD_CtlReceiveStatus>
 802090e:	e010      	b.n	8020932 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020910:	68fa      	ldr	r2, [r7, #12]
 8020912:	23a5      	movs	r3, #165	@ 0xa5
 8020914:	009b      	lsls	r3, r3, #2
 8020916:	58d3      	ldr	r3, [r2, r3]
 8020918:	2b04      	cmp	r3, #4
 802091a:	d005      	beq.n	8020928 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 802091c:	68fa      	ldr	r2, [r7, #12]
 802091e:	23a5      	movs	r3, #165	@ 0xa5
 8020920:	009b      	lsls	r3, r3, #2
 8020922:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020924:	2b00      	cmp	r3, #0
 8020926:	d104      	bne.n	8020932 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8020928:	68fb      	ldr	r3, [r7, #12]
 802092a:	2180      	movs	r1, #128	@ 0x80
 802092c:	0018      	movs	r0, r3
 802092e:	f001 fc12 	bl	8022156 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8020932:	68fa      	ldr	r2, [r7, #12]
 8020934:	23a8      	movs	r3, #168	@ 0xa8
 8020936:	009b      	lsls	r3, r3, #2
 8020938:	5cd3      	ldrb	r3, [r2, r3]
 802093a:	2b01      	cmp	r3, #1
 802093c:	d124      	bne.n	8020988 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802093e:	68fb      	ldr	r3, [r7, #12]
 8020940:	0018      	movs	r0, r3
 8020942:	f7ff fe43 	bl	80205cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8020946:	68fa      	ldr	r2, [r7, #12]
 8020948:	23a8      	movs	r3, #168	@ 0xa8
 802094a:	009b      	lsls	r3, r3, #2
 802094c:	2100      	movs	r1, #0
 802094e:	54d1      	strb	r1, [r2, r3]
 8020950:	e01a      	b.n	8020988 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8020952:	68fa      	ldr	r2, [r7, #12]
 8020954:	23ad      	movs	r3, #173	@ 0xad
 8020956:	009b      	lsls	r3, r3, #2
 8020958:	58d3      	ldr	r3, [r2, r3]
 802095a:	695b      	ldr	r3, [r3, #20]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d011      	beq.n	8020984 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020960:	68fa      	ldr	r2, [r7, #12]
 8020962:	23a7      	movs	r3, #167	@ 0xa7
 8020964:	009b      	lsls	r3, r3, #2
 8020966:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8020968:	2b03      	cmp	r3, #3
 802096a:	d10b      	bne.n	8020984 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 802096c:	68fa      	ldr	r2, [r7, #12]
 802096e:	23ad      	movs	r3, #173	@ 0xad
 8020970:	009b      	lsls	r3, r3, #2
 8020972:	58d3      	ldr	r3, [r2, r3]
 8020974:	695b      	ldr	r3, [r3, #20]
 8020976:	220b      	movs	r2, #11
 8020978:	18ba      	adds	r2, r7, r2
 802097a:	7811      	ldrb	r1, [r2, #0]
 802097c:	68fa      	ldr	r2, [r7, #12]
 802097e:	0010      	movs	r0, r2
 8020980:	4798      	blx	r3
 8020982:	e001      	b.n	8020988 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020984:	2302      	movs	r3, #2
 8020986:	e000      	b.n	802098a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8020988:	2300      	movs	r3, #0
}
 802098a:	0018      	movs	r0, r3
 802098c:	46bd      	mov	sp, r7
 802098e:	b006      	add	sp, #24
 8020990:	bd80      	pop	{r7, pc}

08020992 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8020992:	b580      	push	{r7, lr}
 8020994:	b082      	sub	sp, #8
 8020996:	af00      	add	r7, sp, #0
 8020998:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802099a:	6878      	ldr	r0, [r7, #4]
 802099c:	2340      	movs	r3, #64	@ 0x40
 802099e:	2200      	movs	r2, #0
 80209a0:	2100      	movs	r1, #0
 80209a2:	f001 fb76 	bl	8022092 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80209a6:	687a      	ldr	r2, [r7, #4]
 80209a8:	23ac      	movs	r3, #172	@ 0xac
 80209aa:	005b      	lsls	r3, r3, #1
 80209ac:	2101      	movs	r1, #1
 80209ae:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80209b0:	687a      	ldr	r2, [r7, #4]
 80209b2:	23b2      	movs	r3, #178	@ 0xb2
 80209b4:	005b      	lsls	r3, r3, #1
 80209b6:	2140      	movs	r1, #64	@ 0x40
 80209b8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80209ba:	6878      	ldr	r0, [r7, #4]
 80209bc:	2340      	movs	r3, #64	@ 0x40
 80209be:	2200      	movs	r2, #0
 80209c0:	2180      	movs	r1, #128	@ 0x80
 80209c2:	f001 fb66 	bl	8022092 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	2201      	movs	r2, #1
 80209ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	2240      	movs	r2, #64	@ 0x40
 80209d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80209d2:	687a      	ldr	r2, [r7, #4]
 80209d4:	23a7      	movs	r3, #167	@ 0xa7
 80209d6:	009b      	lsls	r3, r3, #2
 80209d8:	2101      	movs	r1, #1
 80209da:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80209dc:	687a      	ldr	r2, [r7, #4]
 80209de:	23a5      	movs	r3, #165	@ 0xa5
 80209e0:	009b      	lsls	r3, r3, #2
 80209e2:	2100      	movs	r1, #0
 80209e4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	2200      	movs	r2, #0
 80209ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80209ec:	687a      	ldr	r2, [r7, #4]
 80209ee:	23a9      	movs	r3, #169	@ 0xa9
 80209f0:	009b      	lsls	r3, r3, #2
 80209f2:	2100      	movs	r1, #0
 80209f4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80209f6:	687a      	ldr	r2, [r7, #4]
 80209f8:	23ae      	movs	r3, #174	@ 0xae
 80209fa:	009b      	lsls	r3, r3, #2
 80209fc:	58d3      	ldr	r3, [r2, r3]
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d00a      	beq.n	8020a18 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8020a02:	687a      	ldr	r2, [r7, #4]
 8020a04:	23ad      	movs	r3, #173	@ 0xad
 8020a06:	009b      	lsls	r3, r3, #2
 8020a08:	58d3      	ldr	r3, [r2, r3]
 8020a0a:	685a      	ldr	r2, [r3, #4]
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	685b      	ldr	r3, [r3, #4]
 8020a10:	b2d9      	uxtb	r1, r3
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	0018      	movs	r0, r3
 8020a16:	4790      	blx	r2
  }

  return USBD_OK;
 8020a18:	2300      	movs	r3, #0
}
 8020a1a:	0018      	movs	r0, r3
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	b002      	add	sp, #8
 8020a20:	bd80      	pop	{r7, pc}

08020a22 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8020a22:	b580      	push	{r7, lr}
 8020a24:	b082      	sub	sp, #8
 8020a26:	af00      	add	r7, sp, #0
 8020a28:	6078      	str	r0, [r7, #4]
 8020a2a:	000a      	movs	r2, r1
 8020a2c:	1cfb      	adds	r3, r7, #3
 8020a2e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	1cfa      	adds	r2, r7, #3
 8020a34:	7812      	ldrb	r2, [r2, #0]
 8020a36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8020a38:	2300      	movs	r3, #0
}
 8020a3a:	0018      	movs	r0, r3
 8020a3c:	46bd      	mov	sp, r7
 8020a3e:	b002      	add	sp, #8
 8020a40:	bd80      	pop	{r7, pc}
	...

08020a44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b082      	sub	sp, #8
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8020a4c:	687a      	ldr	r2, [r7, #4]
 8020a4e:	23a7      	movs	r3, #167	@ 0xa7
 8020a50:	009b      	lsls	r3, r3, #2
 8020a52:	5cd1      	ldrb	r1, [r2, r3]
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	4a06      	ldr	r2, [pc, #24]	@ (8020a70 <USBD_LL_Suspend+0x2c>)
 8020a58:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8020a5a:	687a      	ldr	r2, [r7, #4]
 8020a5c:	23a7      	movs	r3, #167	@ 0xa7
 8020a5e:	009b      	lsls	r3, r3, #2
 8020a60:	2104      	movs	r1, #4
 8020a62:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8020a64:	2300      	movs	r3, #0
}
 8020a66:	0018      	movs	r0, r3
 8020a68:	46bd      	mov	sp, r7
 8020a6a:	b002      	add	sp, #8
 8020a6c:	bd80      	pop	{r7, pc}
 8020a6e:	46c0      	nop			@ (mov r8, r8)
 8020a70:	0000029d 	.word	0x0000029d

08020a74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8020a74:	b580      	push	{r7, lr}
 8020a76:	b082      	sub	sp, #8
 8020a78:	af00      	add	r7, sp, #0
 8020a7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8020a7c:	687a      	ldr	r2, [r7, #4]
 8020a7e:	23a7      	movs	r3, #167	@ 0xa7
 8020a80:	009b      	lsls	r3, r3, #2
 8020a82:	5cd3      	ldrb	r3, [r2, r3]
 8020a84:	2b04      	cmp	r3, #4
 8020a86:	d106      	bne.n	8020a96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	4a05      	ldr	r2, [pc, #20]	@ (8020aa0 <USBD_LL_Resume+0x2c>)
 8020a8c:	5c99      	ldrb	r1, [r3, r2]
 8020a8e:	687a      	ldr	r2, [r7, #4]
 8020a90:	23a7      	movs	r3, #167	@ 0xa7
 8020a92:	009b      	lsls	r3, r3, #2
 8020a94:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8020a96:	2300      	movs	r3, #0
}
 8020a98:	0018      	movs	r0, r3
 8020a9a:	46bd      	mov	sp, r7
 8020a9c:	b002      	add	sp, #8
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	0000029d 	.word	0x0000029d

08020aa4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8020aa4:	b580      	push	{r7, lr}
 8020aa6:	b082      	sub	sp, #8
 8020aa8:	af00      	add	r7, sp, #0
 8020aaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020aac:	687a      	ldr	r2, [r7, #4]
 8020aae:	23a7      	movs	r3, #167	@ 0xa7
 8020ab0:	009b      	lsls	r3, r3, #2
 8020ab2:	5cd3      	ldrb	r3, [r2, r3]
 8020ab4:	2b03      	cmp	r3, #3
 8020ab6:	d10e      	bne.n	8020ad6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8020ab8:	687a      	ldr	r2, [r7, #4]
 8020aba:	23ad      	movs	r3, #173	@ 0xad
 8020abc:	009b      	lsls	r3, r3, #2
 8020abe:	58d3      	ldr	r3, [r2, r3]
 8020ac0:	69db      	ldr	r3, [r3, #28]
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d007      	beq.n	8020ad6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8020ac6:	687a      	ldr	r2, [r7, #4]
 8020ac8:	23ad      	movs	r3, #173	@ 0xad
 8020aca:	009b      	lsls	r3, r3, #2
 8020acc:	58d3      	ldr	r3, [r2, r3]
 8020ace:	69db      	ldr	r3, [r3, #28]
 8020ad0:	687a      	ldr	r2, [r7, #4]
 8020ad2:	0010      	movs	r0, r2
 8020ad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8020ad6:	2300      	movs	r3, #0
}
 8020ad8:	0018      	movs	r0, r3
 8020ada:	46bd      	mov	sp, r7
 8020adc:	b002      	add	sp, #8
 8020ade:	bd80      	pop	{r7, pc}

08020ae0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8020ae0:	b580      	push	{r7, lr}
 8020ae2:	b084      	sub	sp, #16
 8020ae4:	af00      	add	r7, sp, #0
 8020ae6:	6078      	str	r0, [r7, #4]
 8020ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8020aea:	230f      	movs	r3, #15
 8020aec:	18fb      	adds	r3, r7, r3
 8020aee:	2200      	movs	r2, #0
 8020af0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020af2:	683b      	ldr	r3, [r7, #0]
 8020af4:	781b      	ldrb	r3, [r3, #0]
 8020af6:	001a      	movs	r2, r3
 8020af8:	2360      	movs	r3, #96	@ 0x60
 8020afa:	4013      	ands	r3, r2
 8020afc:	2b40      	cmp	r3, #64	@ 0x40
 8020afe:	d004      	beq.n	8020b0a <USBD_StdDevReq+0x2a>
 8020b00:	d84f      	bhi.n	8020ba2 <USBD_StdDevReq+0xc2>
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d00b      	beq.n	8020b1e <USBD_StdDevReq+0x3e>
 8020b06:	2b20      	cmp	r3, #32
 8020b08:	d14b      	bne.n	8020ba2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8020b0a:	687a      	ldr	r2, [r7, #4]
 8020b0c:	23ad      	movs	r3, #173	@ 0xad
 8020b0e:	009b      	lsls	r3, r3, #2
 8020b10:	58d3      	ldr	r3, [r2, r3]
 8020b12:	689b      	ldr	r3, [r3, #8]
 8020b14:	6839      	ldr	r1, [r7, #0]
 8020b16:	687a      	ldr	r2, [r7, #4]
 8020b18:	0010      	movs	r0, r2
 8020b1a:	4798      	blx	r3
      break;
 8020b1c:	e048      	b.n	8020bb0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8020b1e:	683b      	ldr	r3, [r7, #0]
 8020b20:	785b      	ldrb	r3, [r3, #1]
 8020b22:	2b09      	cmp	r3, #9
 8020b24:	d835      	bhi.n	8020b92 <USBD_StdDevReq+0xb2>
 8020b26:	009a      	lsls	r2, r3, #2
 8020b28:	4b25      	ldr	r3, [pc, #148]	@ (8020bc0 <USBD_StdDevReq+0xe0>)
 8020b2a:	18d3      	adds	r3, r2, r3
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8020b30:	683a      	ldr	r2, [r7, #0]
 8020b32:	687b      	ldr	r3, [r7, #4]
 8020b34:	0011      	movs	r1, r2
 8020b36:	0018      	movs	r0, r3
 8020b38:	f000 fa52 	bl	8020fe0 <USBD_GetDescriptor>
          break;
 8020b3c:	e030      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8020b3e:	683a      	ldr	r2, [r7, #0]
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	0011      	movs	r1, r2
 8020b44:	0018      	movs	r0, r3
 8020b46:	f000 fbfd 	bl	8021344 <USBD_SetAddress>
          break;
 8020b4a:	e029      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8020b4c:	683a      	ldr	r2, [r7, #0]
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	0011      	movs	r1, r2
 8020b52:	0018      	movs	r0, r3
 8020b54:	f000 fc4a 	bl	80213ec <USBD_SetConfig>
          break;
 8020b58:	e022      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8020b5a:	683a      	ldr	r2, [r7, #0]
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	0011      	movs	r1, r2
 8020b60:	0018      	movs	r0, r3
 8020b62:	f000 fce7 	bl	8021534 <USBD_GetConfig>
          break;
 8020b66:	e01b      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8020b68:	683a      	ldr	r2, [r7, #0]
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	0011      	movs	r1, r2
 8020b6e:	0018      	movs	r0, r3
 8020b70:	f000 fd1b 	bl	80215aa <USBD_GetStatus>
          break;
 8020b74:	e014      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8020b76:	683a      	ldr	r2, [r7, #0]
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	0011      	movs	r1, r2
 8020b7c:	0018      	movs	r0, r3
 8020b7e:	f000 fd4e 	bl	802161e <USBD_SetFeature>
          break;
 8020b82:	e00d      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8020b84:	683a      	ldr	r2, [r7, #0]
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	0011      	movs	r1, r2
 8020b8a:	0018      	movs	r0, r3
 8020b8c:	f000 fd5d 	bl	802164a <USBD_ClrFeature>
          break;
 8020b90:	e006      	b.n	8020ba0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8020b92:	683a      	ldr	r2, [r7, #0]
 8020b94:	687b      	ldr	r3, [r7, #4]
 8020b96:	0011      	movs	r1, r2
 8020b98:	0018      	movs	r0, r3
 8020b9a:	f000 fdb4 	bl	8021706 <USBD_CtlError>
          break;
 8020b9e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020ba0:	e006      	b.n	8020bb0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8020ba2:	683a      	ldr	r2, [r7, #0]
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	0011      	movs	r1, r2
 8020ba8:	0018      	movs	r0, r3
 8020baa:	f000 fdac 	bl	8021706 <USBD_CtlError>
      break;
 8020bae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020bb0:	230f      	movs	r3, #15
 8020bb2:	18fb      	adds	r3, r7, r3
 8020bb4:	781b      	ldrb	r3, [r3, #0]
}
 8020bb6:	0018      	movs	r0, r3
 8020bb8:	46bd      	mov	sp, r7
 8020bba:	b004      	add	sp, #16
 8020bbc:	bd80      	pop	{r7, pc}
 8020bbe:	46c0      	nop			@ (mov r8, r8)
 8020bc0:	0802d3d8 	.word	0x0802d3d8

08020bc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8020bc4:	b5b0      	push	{r4, r5, r7, lr}
 8020bc6:	b084      	sub	sp, #16
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]
 8020bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8020bce:	230f      	movs	r3, #15
 8020bd0:	18fb      	adds	r3, r7, r3
 8020bd2:	2200      	movs	r2, #0
 8020bd4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	781b      	ldrb	r3, [r3, #0]
 8020bda:	001a      	movs	r2, r3
 8020bdc:	2360      	movs	r3, #96	@ 0x60
 8020bde:	4013      	ands	r3, r2
 8020be0:	2b40      	cmp	r3, #64	@ 0x40
 8020be2:	d004      	beq.n	8020bee <USBD_StdItfReq+0x2a>
 8020be4:	d839      	bhi.n	8020c5a <USBD_StdItfReq+0x96>
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d001      	beq.n	8020bee <USBD_StdItfReq+0x2a>
 8020bea:	2b20      	cmp	r3, #32
 8020bec:	d135      	bne.n	8020c5a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8020bee:	687a      	ldr	r2, [r7, #4]
 8020bf0:	23a7      	movs	r3, #167	@ 0xa7
 8020bf2:	009b      	lsls	r3, r3, #2
 8020bf4:	5cd3      	ldrb	r3, [r2, r3]
 8020bf6:	3b01      	subs	r3, #1
 8020bf8:	2b02      	cmp	r3, #2
 8020bfa:	d825      	bhi.n	8020c48 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8020bfc:	683b      	ldr	r3, [r7, #0]
 8020bfe:	889b      	ldrh	r3, [r3, #4]
 8020c00:	b2db      	uxtb	r3, r3
 8020c02:	2b01      	cmp	r3, #1
 8020c04:	d819      	bhi.n	8020c3a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020c06:	687a      	ldr	r2, [r7, #4]
 8020c08:	23ad      	movs	r3, #173	@ 0xad
 8020c0a:	009b      	lsls	r3, r3, #2
 8020c0c:	58d3      	ldr	r3, [r2, r3]
 8020c0e:	689b      	ldr	r3, [r3, #8]
 8020c10:	250f      	movs	r5, #15
 8020c12:	197c      	adds	r4, r7, r5
 8020c14:	6839      	ldr	r1, [r7, #0]
 8020c16:	687a      	ldr	r2, [r7, #4]
 8020c18:	0010      	movs	r0, r2
 8020c1a:	4798      	blx	r3
 8020c1c:	0003      	movs	r3, r0
 8020c1e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8020c20:	683b      	ldr	r3, [r7, #0]
 8020c22:	88db      	ldrh	r3, [r3, #6]
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d116      	bne.n	8020c56 <USBD_StdItfReq+0x92>
 8020c28:	197b      	adds	r3, r7, r5
 8020c2a:	781b      	ldrb	r3, [r3, #0]
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d112      	bne.n	8020c56 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	0018      	movs	r0, r3
 8020c34:	f000 fe4f 	bl	80218d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8020c38:	e00d      	b.n	8020c56 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8020c3a:	683a      	ldr	r2, [r7, #0]
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	0011      	movs	r1, r2
 8020c40:	0018      	movs	r0, r3
 8020c42:	f000 fd60 	bl	8021706 <USBD_CtlError>
          break;
 8020c46:	e006      	b.n	8020c56 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8020c48:	683a      	ldr	r2, [r7, #0]
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	0011      	movs	r1, r2
 8020c4e:	0018      	movs	r0, r3
 8020c50:	f000 fd59 	bl	8021706 <USBD_CtlError>
          break;
 8020c54:	e000      	b.n	8020c58 <USBD_StdItfReq+0x94>
          break;
 8020c56:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020c58:	e006      	b.n	8020c68 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8020c5a:	683a      	ldr	r2, [r7, #0]
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	0011      	movs	r1, r2
 8020c60:	0018      	movs	r0, r3
 8020c62:	f000 fd50 	bl	8021706 <USBD_CtlError>
      break;
 8020c66:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020c68:	2300      	movs	r3, #0
}
 8020c6a:	0018      	movs	r0, r3
 8020c6c:	46bd      	mov	sp, r7
 8020c6e:	b004      	add	sp, #16
 8020c70:	bdb0      	pop	{r4, r5, r7, pc}

08020c72 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8020c72:	b5b0      	push	{r4, r5, r7, lr}
 8020c74:	b084      	sub	sp, #16
 8020c76:	af00      	add	r7, sp, #0
 8020c78:	6078      	str	r0, [r7, #4]
 8020c7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8020c7c:	230f      	movs	r3, #15
 8020c7e:	18fb      	adds	r3, r7, r3
 8020c80:	2200      	movs	r2, #0
 8020c82:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8020c84:	683b      	ldr	r3, [r7, #0]
 8020c86:	889a      	ldrh	r2, [r3, #4]
 8020c88:	230e      	movs	r3, #14
 8020c8a:	18fb      	adds	r3, r7, r3
 8020c8c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020c8e:	683b      	ldr	r3, [r7, #0]
 8020c90:	781b      	ldrb	r3, [r3, #0]
 8020c92:	001a      	movs	r2, r3
 8020c94:	2360      	movs	r3, #96	@ 0x60
 8020c96:	4013      	ands	r3, r2
 8020c98:	2b40      	cmp	r3, #64	@ 0x40
 8020c9a:	d006      	beq.n	8020caa <USBD_StdEPReq+0x38>
 8020c9c:	d900      	bls.n	8020ca0 <USBD_StdEPReq+0x2e>
 8020c9e:	e190      	b.n	8020fc2 <USBD_StdEPReq+0x350>
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d00c      	beq.n	8020cbe <USBD_StdEPReq+0x4c>
 8020ca4:	2b20      	cmp	r3, #32
 8020ca6:	d000      	beq.n	8020caa <USBD_StdEPReq+0x38>
 8020ca8:	e18b      	b.n	8020fc2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8020caa:	687a      	ldr	r2, [r7, #4]
 8020cac:	23ad      	movs	r3, #173	@ 0xad
 8020cae:	009b      	lsls	r3, r3, #2
 8020cb0:	58d3      	ldr	r3, [r2, r3]
 8020cb2:	689b      	ldr	r3, [r3, #8]
 8020cb4:	6839      	ldr	r1, [r7, #0]
 8020cb6:	687a      	ldr	r2, [r7, #4]
 8020cb8:	0010      	movs	r0, r2
 8020cba:	4798      	blx	r3
      break;
 8020cbc:	e188      	b.n	8020fd0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8020cbe:	683b      	ldr	r3, [r7, #0]
 8020cc0:	781b      	ldrb	r3, [r3, #0]
 8020cc2:	001a      	movs	r2, r3
 8020cc4:	2360      	movs	r3, #96	@ 0x60
 8020cc6:	4013      	ands	r3, r2
 8020cc8:	2b20      	cmp	r3, #32
 8020cca:	d10f      	bne.n	8020cec <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020ccc:	687a      	ldr	r2, [r7, #4]
 8020cce:	23ad      	movs	r3, #173	@ 0xad
 8020cd0:	009b      	lsls	r3, r3, #2
 8020cd2:	58d3      	ldr	r3, [r2, r3]
 8020cd4:	689b      	ldr	r3, [r3, #8]
 8020cd6:	250f      	movs	r5, #15
 8020cd8:	197c      	adds	r4, r7, r5
 8020cda:	6839      	ldr	r1, [r7, #0]
 8020cdc:	687a      	ldr	r2, [r7, #4]
 8020cde:	0010      	movs	r0, r2
 8020ce0:	4798      	blx	r3
 8020ce2:	0003      	movs	r3, r0
 8020ce4:	7023      	strb	r3, [r4, #0]

        return ret;
 8020ce6:	197b      	adds	r3, r7, r5
 8020ce8:	781b      	ldrb	r3, [r3, #0]
 8020cea:	e174      	b.n	8020fd6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8020cec:	683b      	ldr	r3, [r7, #0]
 8020cee:	785b      	ldrb	r3, [r3, #1]
 8020cf0:	2b03      	cmp	r3, #3
 8020cf2:	d007      	beq.n	8020d04 <USBD_StdEPReq+0x92>
 8020cf4:	dd00      	ble.n	8020cf8 <USBD_StdEPReq+0x86>
 8020cf6:	e15c      	b.n	8020fb2 <USBD_StdEPReq+0x340>
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d100      	bne.n	8020cfe <USBD_StdEPReq+0x8c>
 8020cfc:	e092      	b.n	8020e24 <USBD_StdEPReq+0x1b2>
 8020cfe:	2b01      	cmp	r3, #1
 8020d00:	d04b      	beq.n	8020d9a <USBD_StdEPReq+0x128>
 8020d02:	e156      	b.n	8020fb2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8020d04:	687a      	ldr	r2, [r7, #4]
 8020d06:	23a7      	movs	r3, #167	@ 0xa7
 8020d08:	009b      	lsls	r3, r3, #2
 8020d0a:	5cd3      	ldrb	r3, [r2, r3]
 8020d0c:	2b02      	cmp	r3, #2
 8020d0e:	d002      	beq.n	8020d16 <USBD_StdEPReq+0xa4>
 8020d10:	2b03      	cmp	r3, #3
 8020d12:	d01d      	beq.n	8020d50 <USBD_StdEPReq+0xde>
 8020d14:	e039      	b.n	8020d8a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020d16:	220e      	movs	r2, #14
 8020d18:	18bb      	adds	r3, r7, r2
 8020d1a:	781b      	ldrb	r3, [r3, #0]
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d010      	beq.n	8020d42 <USBD_StdEPReq+0xd0>
 8020d20:	18bb      	adds	r3, r7, r2
 8020d22:	781b      	ldrb	r3, [r3, #0]
 8020d24:	2b80      	cmp	r3, #128	@ 0x80
 8020d26:	d00c      	beq.n	8020d42 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8020d28:	18bb      	adds	r3, r7, r2
 8020d2a:	781a      	ldrb	r2, [r3, #0]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	0011      	movs	r1, r2
 8020d30:	0018      	movs	r0, r3
 8020d32:	f001 fa10 	bl	8022156 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	2180      	movs	r1, #128	@ 0x80
 8020d3a:	0018      	movs	r0, r3
 8020d3c:	f001 fa0b 	bl	8022156 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8020d40:	e02a      	b.n	8020d98 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8020d42:	683a      	ldr	r2, [r7, #0]
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	0011      	movs	r1, r2
 8020d48:	0018      	movs	r0, r3
 8020d4a:	f000 fcdc 	bl	8021706 <USBD_CtlError>
              break;
 8020d4e:	e023      	b.n	8020d98 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020d50:	683b      	ldr	r3, [r7, #0]
 8020d52:	885b      	ldrh	r3, [r3, #2]
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d113      	bne.n	8020d80 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8020d58:	220e      	movs	r2, #14
 8020d5a:	18bb      	adds	r3, r7, r2
 8020d5c:	781b      	ldrb	r3, [r3, #0]
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d00e      	beq.n	8020d80 <USBD_StdEPReq+0x10e>
 8020d62:	18bb      	adds	r3, r7, r2
 8020d64:	781b      	ldrb	r3, [r3, #0]
 8020d66:	2b80      	cmp	r3, #128	@ 0x80
 8020d68:	d00a      	beq.n	8020d80 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8020d6a:	683b      	ldr	r3, [r7, #0]
 8020d6c:	88db      	ldrh	r3, [r3, #6]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d106      	bne.n	8020d80 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8020d72:	18bb      	adds	r3, r7, r2
 8020d74:	781a      	ldrb	r2, [r3, #0]
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	0011      	movs	r1, r2
 8020d7a:	0018      	movs	r0, r3
 8020d7c:	f001 f9eb 	bl	8022156 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8020d80:	687b      	ldr	r3, [r7, #4]
 8020d82:	0018      	movs	r0, r3
 8020d84:	f000 fda7 	bl	80218d6 <USBD_CtlSendStatus>

              break;
 8020d88:	e006      	b.n	8020d98 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8020d8a:	683a      	ldr	r2, [r7, #0]
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	0011      	movs	r1, r2
 8020d90:	0018      	movs	r0, r3
 8020d92:	f000 fcb8 	bl	8021706 <USBD_CtlError>
              break;
 8020d96:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020d98:	e112      	b.n	8020fc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8020d9a:	687a      	ldr	r2, [r7, #4]
 8020d9c:	23a7      	movs	r3, #167	@ 0xa7
 8020d9e:	009b      	lsls	r3, r3, #2
 8020da0:	5cd3      	ldrb	r3, [r2, r3]
 8020da2:	2b02      	cmp	r3, #2
 8020da4:	d002      	beq.n	8020dac <USBD_StdEPReq+0x13a>
 8020da6:	2b03      	cmp	r3, #3
 8020da8:	d01d      	beq.n	8020de6 <USBD_StdEPReq+0x174>
 8020daa:	e032      	b.n	8020e12 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020dac:	220e      	movs	r2, #14
 8020dae:	18bb      	adds	r3, r7, r2
 8020db0:	781b      	ldrb	r3, [r3, #0]
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	d010      	beq.n	8020dd8 <USBD_StdEPReq+0x166>
 8020db6:	18bb      	adds	r3, r7, r2
 8020db8:	781b      	ldrb	r3, [r3, #0]
 8020dba:	2b80      	cmp	r3, #128	@ 0x80
 8020dbc:	d00c      	beq.n	8020dd8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8020dbe:	18bb      	adds	r3, r7, r2
 8020dc0:	781a      	ldrb	r2, [r3, #0]
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	0011      	movs	r1, r2
 8020dc6:	0018      	movs	r0, r3
 8020dc8:	f001 f9c5 	bl	8022156 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	2180      	movs	r1, #128	@ 0x80
 8020dd0:	0018      	movs	r0, r3
 8020dd2:	f001 f9c0 	bl	8022156 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8020dd6:	e024      	b.n	8020e22 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8020dd8:	683a      	ldr	r2, [r7, #0]
 8020dda:	687b      	ldr	r3, [r7, #4]
 8020ddc:	0011      	movs	r1, r2
 8020dde:	0018      	movs	r0, r3
 8020de0:	f000 fc91 	bl	8021706 <USBD_CtlError>
              break;
 8020de4:	e01d      	b.n	8020e22 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020de6:	683b      	ldr	r3, [r7, #0]
 8020de8:	885b      	ldrh	r3, [r3, #2]
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	d118      	bne.n	8020e20 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8020dee:	210e      	movs	r1, #14
 8020df0:	187b      	adds	r3, r7, r1
 8020df2:	781b      	ldrb	r3, [r3, #0]
 8020df4:	227f      	movs	r2, #127	@ 0x7f
 8020df6:	4013      	ands	r3, r2
 8020df8:	d006      	beq.n	8020e08 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8020dfa:	187b      	adds	r3, r7, r1
 8020dfc:	781a      	ldrb	r2, [r3, #0]
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	0011      	movs	r1, r2
 8020e02:	0018      	movs	r0, r3
 8020e04:	f001 f9d2 	bl	80221ac <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	0018      	movs	r0, r3
 8020e0c:	f000 fd63 	bl	80218d6 <USBD_CtlSendStatus>
              }
              break;
 8020e10:	e006      	b.n	8020e20 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8020e12:	683a      	ldr	r2, [r7, #0]
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	0011      	movs	r1, r2
 8020e18:	0018      	movs	r0, r3
 8020e1a:	f000 fc74 	bl	8021706 <USBD_CtlError>
              break;
 8020e1e:	e000      	b.n	8020e22 <USBD_StdEPReq+0x1b0>
              break;
 8020e20:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020e22:	e0cd      	b.n	8020fc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8020e24:	687a      	ldr	r2, [r7, #4]
 8020e26:	23a7      	movs	r3, #167	@ 0xa7
 8020e28:	009b      	lsls	r3, r3, #2
 8020e2a:	5cd3      	ldrb	r3, [r2, r3]
 8020e2c:	2b02      	cmp	r3, #2
 8020e2e:	d002      	beq.n	8020e36 <USBD_StdEPReq+0x1c4>
 8020e30:	2b03      	cmp	r3, #3
 8020e32:	d03c      	beq.n	8020eae <USBD_StdEPReq+0x23c>
 8020e34:	e0b5      	b.n	8020fa2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020e36:	220e      	movs	r2, #14
 8020e38:	18bb      	adds	r3, r7, r2
 8020e3a:	781b      	ldrb	r3, [r3, #0]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	d00a      	beq.n	8020e56 <USBD_StdEPReq+0x1e4>
 8020e40:	18bb      	adds	r3, r7, r2
 8020e42:	781b      	ldrb	r3, [r3, #0]
 8020e44:	2b80      	cmp	r3, #128	@ 0x80
 8020e46:	d006      	beq.n	8020e56 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8020e48:	683a      	ldr	r2, [r7, #0]
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	0011      	movs	r1, r2
 8020e4e:	0018      	movs	r0, r3
 8020e50:	f000 fc59 	bl	8021706 <USBD_CtlError>
                break;
 8020e54:	e0ac      	b.n	8020fb0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020e56:	220e      	movs	r2, #14
 8020e58:	18bb      	adds	r3, r7, r2
 8020e5a:	781b      	ldrb	r3, [r3, #0]
 8020e5c:	b25b      	sxtb	r3, r3
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	da0c      	bge.n	8020e7c <USBD_StdEPReq+0x20a>
 8020e62:	18bb      	adds	r3, r7, r2
 8020e64:	781b      	ldrb	r3, [r3, #0]
 8020e66:	227f      	movs	r2, #127	@ 0x7f
 8020e68:	401a      	ands	r2, r3
 8020e6a:	0013      	movs	r3, r2
 8020e6c:	009b      	lsls	r3, r3, #2
 8020e6e:	189b      	adds	r3, r3, r2
 8020e70:	009b      	lsls	r3, r3, #2
 8020e72:	3310      	adds	r3, #16
 8020e74:	687a      	ldr	r2, [r7, #4]
 8020e76:	18d3      	adds	r3, r2, r3
 8020e78:	3304      	adds	r3, #4
 8020e7a:	e00d      	b.n	8020e98 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8020e7c:	230e      	movs	r3, #14
 8020e7e:	18fb      	adds	r3, r7, r3
 8020e80:	781b      	ldrb	r3, [r3, #0]
 8020e82:	227f      	movs	r2, #127	@ 0x7f
 8020e84:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020e86:	0013      	movs	r3, r2
 8020e88:	009b      	lsls	r3, r3, #2
 8020e8a:	189b      	adds	r3, r3, r2
 8020e8c:	009b      	lsls	r3, r3, #2
 8020e8e:	3351      	adds	r3, #81	@ 0x51
 8020e90:	33ff      	adds	r3, #255	@ 0xff
 8020e92:	687a      	ldr	r2, [r7, #4]
 8020e94:	18d3      	adds	r3, r2, r3
 8020e96:	3304      	adds	r3, #4
 8020e98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8020e9a:	68bb      	ldr	r3, [r7, #8]
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8020ea0:	68b9      	ldr	r1, [r7, #8]
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	2202      	movs	r2, #2
 8020ea6:	0018      	movs	r0, r3
 8020ea8:	f000 fcab 	bl	8021802 <USBD_CtlSendData>
              break;
 8020eac:	e080      	b.n	8020fb0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8020eae:	220e      	movs	r2, #14
 8020eb0:	18bb      	adds	r3, r7, r2
 8020eb2:	781b      	ldrb	r3, [r3, #0]
 8020eb4:	b25b      	sxtb	r3, r3
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	da14      	bge.n	8020ee4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8020eba:	18bb      	adds	r3, r7, r2
 8020ebc:	781b      	ldrb	r3, [r3, #0]
 8020ebe:	220f      	movs	r2, #15
 8020ec0:	401a      	ands	r2, r3
 8020ec2:	6879      	ldr	r1, [r7, #4]
 8020ec4:	0013      	movs	r3, r2
 8020ec6:	009b      	lsls	r3, r3, #2
 8020ec8:	189b      	adds	r3, r3, r2
 8020eca:	009b      	lsls	r3, r3, #2
 8020ecc:	18cb      	adds	r3, r1, r3
 8020ece:	3318      	adds	r3, #24
 8020ed0:	681b      	ldr	r3, [r3, #0]
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d11e      	bne.n	8020f14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8020ed6:	683a      	ldr	r2, [r7, #0]
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	0011      	movs	r1, r2
 8020edc:	0018      	movs	r0, r3
 8020ede:	f000 fc12 	bl	8021706 <USBD_CtlError>
                  break;
 8020ee2:	e065      	b.n	8020fb0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8020ee4:	230e      	movs	r3, #14
 8020ee6:	18fb      	adds	r3, r7, r3
 8020ee8:	781b      	ldrb	r3, [r3, #0]
 8020eea:	220f      	movs	r2, #15
 8020eec:	401a      	ands	r2, r3
 8020eee:	6878      	ldr	r0, [r7, #4]
 8020ef0:	23ac      	movs	r3, #172	@ 0xac
 8020ef2:	0059      	lsls	r1, r3, #1
 8020ef4:	0013      	movs	r3, r2
 8020ef6:	009b      	lsls	r3, r3, #2
 8020ef8:	189b      	adds	r3, r3, r2
 8020efa:	009b      	lsls	r3, r3, #2
 8020efc:	18c3      	adds	r3, r0, r3
 8020efe:	185b      	adds	r3, r3, r1
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d106      	bne.n	8020f14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8020f06:	683a      	ldr	r2, [r7, #0]
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	0011      	movs	r1, r2
 8020f0c:	0018      	movs	r0, r3
 8020f0e:	f000 fbfa 	bl	8021706 <USBD_CtlError>
                  break;
 8020f12:	e04d      	b.n	8020fb0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020f14:	220e      	movs	r2, #14
 8020f16:	18bb      	adds	r3, r7, r2
 8020f18:	781b      	ldrb	r3, [r3, #0]
 8020f1a:	b25b      	sxtb	r3, r3
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	da0c      	bge.n	8020f3a <USBD_StdEPReq+0x2c8>
 8020f20:	18bb      	adds	r3, r7, r2
 8020f22:	781b      	ldrb	r3, [r3, #0]
 8020f24:	227f      	movs	r2, #127	@ 0x7f
 8020f26:	401a      	ands	r2, r3
 8020f28:	0013      	movs	r3, r2
 8020f2a:	009b      	lsls	r3, r3, #2
 8020f2c:	189b      	adds	r3, r3, r2
 8020f2e:	009b      	lsls	r3, r3, #2
 8020f30:	3310      	adds	r3, #16
 8020f32:	687a      	ldr	r2, [r7, #4]
 8020f34:	18d3      	adds	r3, r2, r3
 8020f36:	3304      	adds	r3, #4
 8020f38:	e00d      	b.n	8020f56 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8020f3a:	230e      	movs	r3, #14
 8020f3c:	18fb      	adds	r3, r7, r3
 8020f3e:	781b      	ldrb	r3, [r3, #0]
 8020f40:	227f      	movs	r2, #127	@ 0x7f
 8020f42:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020f44:	0013      	movs	r3, r2
 8020f46:	009b      	lsls	r3, r3, #2
 8020f48:	189b      	adds	r3, r3, r2
 8020f4a:	009b      	lsls	r3, r3, #2
 8020f4c:	3351      	adds	r3, #81	@ 0x51
 8020f4e:	33ff      	adds	r3, #255	@ 0xff
 8020f50:	687a      	ldr	r2, [r7, #4]
 8020f52:	18d3      	adds	r3, r2, r3
 8020f54:	3304      	adds	r3, #4
 8020f56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8020f58:	220e      	movs	r2, #14
 8020f5a:	18bb      	adds	r3, r7, r2
 8020f5c:	781b      	ldrb	r3, [r3, #0]
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	d003      	beq.n	8020f6a <USBD_StdEPReq+0x2f8>
 8020f62:	18bb      	adds	r3, r7, r2
 8020f64:	781b      	ldrb	r3, [r3, #0]
 8020f66:	2b80      	cmp	r3, #128	@ 0x80
 8020f68:	d103      	bne.n	8020f72 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8020f6a:	68bb      	ldr	r3, [r7, #8]
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	601a      	str	r2, [r3, #0]
 8020f70:	e010      	b.n	8020f94 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8020f72:	230e      	movs	r3, #14
 8020f74:	18fb      	adds	r3, r7, r3
 8020f76:	781a      	ldrb	r2, [r3, #0]
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	0011      	movs	r1, r2
 8020f7c:	0018      	movs	r0, r3
 8020f7e:	f001 f940 	bl	8022202 <USBD_LL_IsStallEP>
 8020f82:	1e03      	subs	r3, r0, #0
 8020f84:	d003      	beq.n	8020f8e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8020f86:	68bb      	ldr	r3, [r7, #8]
 8020f88:	2201      	movs	r2, #1
 8020f8a:	601a      	str	r2, [r3, #0]
 8020f8c:	e002      	b.n	8020f94 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8020f8e:	68bb      	ldr	r3, [r7, #8]
 8020f90:	2200      	movs	r2, #0
 8020f92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8020f94:	68b9      	ldr	r1, [r7, #8]
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	2202      	movs	r2, #2
 8020f9a:	0018      	movs	r0, r3
 8020f9c:	f000 fc31 	bl	8021802 <USBD_CtlSendData>
              break;
 8020fa0:	e006      	b.n	8020fb0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8020fa2:	683a      	ldr	r2, [r7, #0]
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	0011      	movs	r1, r2
 8020fa8:	0018      	movs	r0, r3
 8020faa:	f000 fbac 	bl	8021706 <USBD_CtlError>
              break;
 8020fae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020fb0:	e006      	b.n	8020fc0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8020fb2:	683a      	ldr	r2, [r7, #0]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	0011      	movs	r1, r2
 8020fb8:	0018      	movs	r0, r3
 8020fba:	f000 fba4 	bl	8021706 <USBD_CtlError>
          break;
 8020fbe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020fc0:	e006      	b.n	8020fd0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8020fc2:	683a      	ldr	r2, [r7, #0]
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	0011      	movs	r1, r2
 8020fc8:	0018      	movs	r0, r3
 8020fca:	f000 fb9c 	bl	8021706 <USBD_CtlError>
      break;
 8020fce:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020fd0:	230f      	movs	r3, #15
 8020fd2:	18fb      	adds	r3, r7, r3
 8020fd4:	781b      	ldrb	r3, [r3, #0]
}
 8020fd6:	0018      	movs	r0, r3
 8020fd8:	46bd      	mov	sp, r7
 8020fda:	b004      	add	sp, #16
 8020fdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08020fe0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020fe0:	b580      	push	{r7, lr}
 8020fe2:	b084      	sub	sp, #16
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	6078      	str	r0, [r7, #4]
 8020fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020fea:	2308      	movs	r3, #8
 8020fec:	18fb      	adds	r3, r7, r3
 8020fee:	2200      	movs	r2, #0
 8020ff0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8020ff6:	230b      	movs	r3, #11
 8020ff8:	18fb      	adds	r3, r7, r3
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8020ffe:	683b      	ldr	r3, [r7, #0]
 8021000:	885b      	ldrh	r3, [r3, #2]
 8021002:	0a1b      	lsrs	r3, r3, #8
 8021004:	b29b      	uxth	r3, r3
 8021006:	2b07      	cmp	r3, #7
 8021008:	d900      	bls.n	802100c <USBD_GetDescriptor+0x2c>
 802100a:	e159      	b.n	80212c0 <USBD_GetDescriptor+0x2e0>
 802100c:	009a      	lsls	r2, r3, #2
 802100e:	4bcb      	ldr	r3, [pc, #812]	@ (802133c <USBD_GetDescriptor+0x35c>)
 8021010:	18d3      	adds	r3, r2, r3
 8021012:	681b      	ldr	r3, [r3, #0]
 8021014:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021016:	687a      	ldr	r2, [r7, #4]
 8021018:	23ac      	movs	r3, #172	@ 0xac
 802101a:	009b      	lsls	r3, r3, #2
 802101c:	58d3      	ldr	r3, [r2, r3]
 802101e:	681b      	ldr	r3, [r3, #0]
 8021020:	687a      	ldr	r2, [r7, #4]
 8021022:	7c12      	ldrb	r2, [r2, #16]
 8021024:	2108      	movs	r1, #8
 8021026:	1879      	adds	r1, r7, r1
 8021028:	0010      	movs	r0, r2
 802102a:	4798      	blx	r3
 802102c:	0003      	movs	r3, r0
 802102e:	60fb      	str	r3, [r7, #12]
      break;
 8021030:	e153      	b.n	80212da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	7c1b      	ldrb	r3, [r3, #16]
 8021036:	2b00      	cmp	r3, #0
 8021038:	d10f      	bne.n	802105a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802103a:	687a      	ldr	r2, [r7, #4]
 802103c:	23ad      	movs	r3, #173	@ 0xad
 802103e:	009b      	lsls	r3, r3, #2
 8021040:	58d3      	ldr	r3, [r2, r3]
 8021042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021044:	2208      	movs	r2, #8
 8021046:	18ba      	adds	r2, r7, r2
 8021048:	0010      	movs	r0, r2
 802104a:	4798      	blx	r3
 802104c:	0003      	movs	r3, r0
 802104e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	3301      	adds	r3, #1
 8021054:	2202      	movs	r2, #2
 8021056:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021058:	e13f      	b.n	80212da <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802105a:	687a      	ldr	r2, [r7, #4]
 802105c:	23ad      	movs	r3, #173	@ 0xad
 802105e:	009b      	lsls	r3, r3, #2
 8021060:	58d3      	ldr	r3, [r2, r3]
 8021062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021064:	2208      	movs	r2, #8
 8021066:	18ba      	adds	r2, r7, r2
 8021068:	0010      	movs	r0, r2
 802106a:	4798      	blx	r3
 802106c:	0003      	movs	r3, r0
 802106e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021070:	68fb      	ldr	r3, [r7, #12]
 8021072:	3301      	adds	r3, #1
 8021074:	2202      	movs	r2, #2
 8021076:	701a      	strb	r2, [r3, #0]
      break;
 8021078:	e12f      	b.n	80212da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802107a:	683b      	ldr	r3, [r7, #0]
 802107c:	885b      	ldrh	r3, [r3, #2]
 802107e:	b2db      	uxtb	r3, r3
 8021080:	2b05      	cmp	r3, #5
 8021082:	d900      	bls.n	8021086 <USBD_GetDescriptor+0xa6>
 8021084:	e0d0      	b.n	8021228 <USBD_GetDescriptor+0x248>
 8021086:	009a      	lsls	r2, r3, #2
 8021088:	4bad      	ldr	r3, [pc, #692]	@ (8021340 <USBD_GetDescriptor+0x360>)
 802108a:	18d3      	adds	r3, r2, r3
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021090:	687a      	ldr	r2, [r7, #4]
 8021092:	23ac      	movs	r3, #172	@ 0xac
 8021094:	009b      	lsls	r3, r3, #2
 8021096:	58d3      	ldr	r3, [r2, r3]
 8021098:	685b      	ldr	r3, [r3, #4]
 802109a:	2b00      	cmp	r3, #0
 802109c:	d00d      	beq.n	80210ba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802109e:	687a      	ldr	r2, [r7, #4]
 80210a0:	23ac      	movs	r3, #172	@ 0xac
 80210a2:	009b      	lsls	r3, r3, #2
 80210a4:	58d3      	ldr	r3, [r2, r3]
 80210a6:	685b      	ldr	r3, [r3, #4]
 80210a8:	687a      	ldr	r2, [r7, #4]
 80210aa:	7c12      	ldrb	r2, [r2, #16]
 80210ac:	2108      	movs	r1, #8
 80210ae:	1879      	adds	r1, r7, r1
 80210b0:	0010      	movs	r0, r2
 80210b2:	4798      	blx	r3
 80210b4:	0003      	movs	r3, r0
 80210b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80210b8:	e0c3      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80210ba:	683a      	ldr	r2, [r7, #0]
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	0011      	movs	r1, r2
 80210c0:	0018      	movs	r0, r3
 80210c2:	f000 fb20 	bl	8021706 <USBD_CtlError>
            err++;
 80210c6:	210b      	movs	r1, #11
 80210c8:	187b      	adds	r3, r7, r1
 80210ca:	781a      	ldrb	r2, [r3, #0]
 80210cc:	187b      	adds	r3, r7, r1
 80210ce:	3201      	adds	r2, #1
 80210d0:	701a      	strb	r2, [r3, #0]
          break;
 80210d2:	e0b6      	b.n	8021242 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80210d4:	687a      	ldr	r2, [r7, #4]
 80210d6:	23ac      	movs	r3, #172	@ 0xac
 80210d8:	009b      	lsls	r3, r3, #2
 80210da:	58d3      	ldr	r3, [r2, r3]
 80210dc:	689b      	ldr	r3, [r3, #8]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d00d      	beq.n	80210fe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80210e2:	687a      	ldr	r2, [r7, #4]
 80210e4:	23ac      	movs	r3, #172	@ 0xac
 80210e6:	009b      	lsls	r3, r3, #2
 80210e8:	58d3      	ldr	r3, [r2, r3]
 80210ea:	689b      	ldr	r3, [r3, #8]
 80210ec:	687a      	ldr	r2, [r7, #4]
 80210ee:	7c12      	ldrb	r2, [r2, #16]
 80210f0:	2108      	movs	r1, #8
 80210f2:	1879      	adds	r1, r7, r1
 80210f4:	0010      	movs	r0, r2
 80210f6:	4798      	blx	r3
 80210f8:	0003      	movs	r3, r0
 80210fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80210fc:	e0a1      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80210fe:	683a      	ldr	r2, [r7, #0]
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	0011      	movs	r1, r2
 8021104:	0018      	movs	r0, r3
 8021106:	f000 fafe 	bl	8021706 <USBD_CtlError>
            err++;
 802110a:	210b      	movs	r1, #11
 802110c:	187b      	adds	r3, r7, r1
 802110e:	781a      	ldrb	r2, [r3, #0]
 8021110:	187b      	adds	r3, r7, r1
 8021112:	3201      	adds	r2, #1
 8021114:	701a      	strb	r2, [r3, #0]
          break;
 8021116:	e094      	b.n	8021242 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021118:	687a      	ldr	r2, [r7, #4]
 802111a:	23ac      	movs	r3, #172	@ 0xac
 802111c:	009b      	lsls	r3, r3, #2
 802111e:	58d3      	ldr	r3, [r2, r3]
 8021120:	68db      	ldr	r3, [r3, #12]
 8021122:	2b00      	cmp	r3, #0
 8021124:	d00d      	beq.n	8021142 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021126:	687a      	ldr	r2, [r7, #4]
 8021128:	23ac      	movs	r3, #172	@ 0xac
 802112a:	009b      	lsls	r3, r3, #2
 802112c:	58d3      	ldr	r3, [r2, r3]
 802112e:	68db      	ldr	r3, [r3, #12]
 8021130:	687a      	ldr	r2, [r7, #4]
 8021132:	7c12      	ldrb	r2, [r2, #16]
 8021134:	2108      	movs	r1, #8
 8021136:	1879      	adds	r1, r7, r1
 8021138:	0010      	movs	r0, r2
 802113a:	4798      	blx	r3
 802113c:	0003      	movs	r3, r0
 802113e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021140:	e07f      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021142:	683a      	ldr	r2, [r7, #0]
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	0011      	movs	r1, r2
 8021148:	0018      	movs	r0, r3
 802114a:	f000 fadc 	bl	8021706 <USBD_CtlError>
            err++;
 802114e:	210b      	movs	r1, #11
 8021150:	187b      	adds	r3, r7, r1
 8021152:	781a      	ldrb	r2, [r3, #0]
 8021154:	187b      	adds	r3, r7, r1
 8021156:	3201      	adds	r2, #1
 8021158:	701a      	strb	r2, [r3, #0]
          break;
 802115a:	e072      	b.n	8021242 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802115c:	687a      	ldr	r2, [r7, #4]
 802115e:	23ac      	movs	r3, #172	@ 0xac
 8021160:	009b      	lsls	r3, r3, #2
 8021162:	58d3      	ldr	r3, [r2, r3]
 8021164:	691b      	ldr	r3, [r3, #16]
 8021166:	2b00      	cmp	r3, #0
 8021168:	d00d      	beq.n	8021186 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802116a:	687a      	ldr	r2, [r7, #4]
 802116c:	23ac      	movs	r3, #172	@ 0xac
 802116e:	009b      	lsls	r3, r3, #2
 8021170:	58d3      	ldr	r3, [r2, r3]
 8021172:	691b      	ldr	r3, [r3, #16]
 8021174:	687a      	ldr	r2, [r7, #4]
 8021176:	7c12      	ldrb	r2, [r2, #16]
 8021178:	2108      	movs	r1, #8
 802117a:	1879      	adds	r1, r7, r1
 802117c:	0010      	movs	r0, r2
 802117e:	4798      	blx	r3
 8021180:	0003      	movs	r3, r0
 8021182:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021184:	e05d      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021186:	683a      	ldr	r2, [r7, #0]
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	0011      	movs	r1, r2
 802118c:	0018      	movs	r0, r3
 802118e:	f000 faba 	bl	8021706 <USBD_CtlError>
            err++;
 8021192:	210b      	movs	r1, #11
 8021194:	187b      	adds	r3, r7, r1
 8021196:	781a      	ldrb	r2, [r3, #0]
 8021198:	187b      	adds	r3, r7, r1
 802119a:	3201      	adds	r2, #1
 802119c:	701a      	strb	r2, [r3, #0]
          break;
 802119e:	e050      	b.n	8021242 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80211a0:	687a      	ldr	r2, [r7, #4]
 80211a2:	23ac      	movs	r3, #172	@ 0xac
 80211a4:	009b      	lsls	r3, r3, #2
 80211a6:	58d3      	ldr	r3, [r2, r3]
 80211a8:	695b      	ldr	r3, [r3, #20]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d00d      	beq.n	80211ca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80211ae:	687a      	ldr	r2, [r7, #4]
 80211b0:	23ac      	movs	r3, #172	@ 0xac
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	58d3      	ldr	r3, [r2, r3]
 80211b6:	695b      	ldr	r3, [r3, #20]
 80211b8:	687a      	ldr	r2, [r7, #4]
 80211ba:	7c12      	ldrb	r2, [r2, #16]
 80211bc:	2108      	movs	r1, #8
 80211be:	1879      	adds	r1, r7, r1
 80211c0:	0010      	movs	r0, r2
 80211c2:	4798      	blx	r3
 80211c4:	0003      	movs	r3, r0
 80211c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80211c8:	e03b      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80211ca:	683a      	ldr	r2, [r7, #0]
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	0011      	movs	r1, r2
 80211d0:	0018      	movs	r0, r3
 80211d2:	f000 fa98 	bl	8021706 <USBD_CtlError>
            err++;
 80211d6:	210b      	movs	r1, #11
 80211d8:	187b      	adds	r3, r7, r1
 80211da:	781a      	ldrb	r2, [r3, #0]
 80211dc:	187b      	adds	r3, r7, r1
 80211de:	3201      	adds	r2, #1
 80211e0:	701a      	strb	r2, [r3, #0]
          break;
 80211e2:	e02e      	b.n	8021242 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80211e4:	687a      	ldr	r2, [r7, #4]
 80211e6:	23ac      	movs	r3, #172	@ 0xac
 80211e8:	009b      	lsls	r3, r3, #2
 80211ea:	58d3      	ldr	r3, [r2, r3]
 80211ec:	699b      	ldr	r3, [r3, #24]
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d00d      	beq.n	802120e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80211f2:	687a      	ldr	r2, [r7, #4]
 80211f4:	23ac      	movs	r3, #172	@ 0xac
 80211f6:	009b      	lsls	r3, r3, #2
 80211f8:	58d3      	ldr	r3, [r2, r3]
 80211fa:	699b      	ldr	r3, [r3, #24]
 80211fc:	687a      	ldr	r2, [r7, #4]
 80211fe:	7c12      	ldrb	r2, [r2, #16]
 8021200:	2108      	movs	r1, #8
 8021202:	1879      	adds	r1, r7, r1
 8021204:	0010      	movs	r0, r2
 8021206:	4798      	blx	r3
 8021208:	0003      	movs	r3, r0
 802120a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802120c:	e019      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802120e:	683a      	ldr	r2, [r7, #0]
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	0011      	movs	r1, r2
 8021214:	0018      	movs	r0, r3
 8021216:	f000 fa76 	bl	8021706 <USBD_CtlError>
            err++;
 802121a:	210b      	movs	r1, #11
 802121c:	187b      	adds	r3, r7, r1
 802121e:	781a      	ldrb	r2, [r3, #0]
 8021220:	187b      	adds	r3, r7, r1
 8021222:	3201      	adds	r2, #1
 8021224:	701a      	strb	r2, [r3, #0]
          break;
 8021226:	e00c      	b.n	8021242 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8021228:	683a      	ldr	r2, [r7, #0]
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	0011      	movs	r1, r2
 802122e:	0018      	movs	r0, r3
 8021230:	f000 fa69 	bl	8021706 <USBD_CtlError>
          err++;
 8021234:	210b      	movs	r1, #11
 8021236:	187b      	adds	r3, r7, r1
 8021238:	781a      	ldrb	r2, [r3, #0]
 802123a:	187b      	adds	r3, r7, r1
 802123c:	3201      	adds	r2, #1
 802123e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8021240:	e04b      	b.n	80212da <USBD_GetDescriptor+0x2fa>
 8021242:	e04a      	b.n	80212da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	7c1b      	ldrb	r3, [r3, #16]
 8021248:	2b00      	cmp	r3, #0
 802124a:	d10b      	bne.n	8021264 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 802124c:	687a      	ldr	r2, [r7, #4]
 802124e:	23ad      	movs	r3, #173	@ 0xad
 8021250:	009b      	lsls	r3, r3, #2
 8021252:	58d3      	ldr	r3, [r2, r3]
 8021254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021256:	2208      	movs	r2, #8
 8021258:	18ba      	adds	r2, r7, r2
 802125a:	0010      	movs	r0, r2
 802125c:	4798      	blx	r3
 802125e:	0003      	movs	r3, r0
 8021260:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021262:	e03a      	b.n	80212da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021264:	683a      	ldr	r2, [r7, #0]
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	0011      	movs	r1, r2
 802126a:	0018      	movs	r0, r3
 802126c:	f000 fa4b 	bl	8021706 <USBD_CtlError>
        err++;
 8021270:	210b      	movs	r1, #11
 8021272:	187b      	adds	r3, r7, r1
 8021274:	781a      	ldrb	r2, [r3, #0]
 8021276:	187b      	adds	r3, r7, r1
 8021278:	3201      	adds	r2, #1
 802127a:	701a      	strb	r2, [r3, #0]
      break;
 802127c:	e02d      	b.n	80212da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	7c1b      	ldrb	r3, [r3, #16]
 8021282:	2b00      	cmp	r3, #0
 8021284:	d10f      	bne.n	80212a6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021286:	687a      	ldr	r2, [r7, #4]
 8021288:	23ad      	movs	r3, #173	@ 0xad
 802128a:	009b      	lsls	r3, r3, #2
 802128c:	58d3      	ldr	r3, [r2, r3]
 802128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021290:	2208      	movs	r2, #8
 8021292:	18ba      	adds	r2, r7, r2
 8021294:	0010      	movs	r0, r2
 8021296:	4798      	blx	r3
 8021298:	0003      	movs	r3, r0
 802129a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	3301      	adds	r3, #1
 80212a0:	2207      	movs	r2, #7
 80212a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80212a4:	e019      	b.n	80212da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80212a6:	683a      	ldr	r2, [r7, #0]
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	0011      	movs	r1, r2
 80212ac:	0018      	movs	r0, r3
 80212ae:	f000 fa2a 	bl	8021706 <USBD_CtlError>
        err++;
 80212b2:	210b      	movs	r1, #11
 80212b4:	187b      	adds	r3, r7, r1
 80212b6:	781a      	ldrb	r2, [r3, #0]
 80212b8:	187b      	adds	r3, r7, r1
 80212ba:	3201      	adds	r2, #1
 80212bc:	701a      	strb	r2, [r3, #0]
      break;
 80212be:	e00c      	b.n	80212da <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80212c0:	683a      	ldr	r2, [r7, #0]
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	0011      	movs	r1, r2
 80212c6:	0018      	movs	r0, r3
 80212c8:	f000 fa1d 	bl	8021706 <USBD_CtlError>
      err++;
 80212cc:	210b      	movs	r1, #11
 80212ce:	187b      	adds	r3, r7, r1
 80212d0:	781a      	ldrb	r2, [r3, #0]
 80212d2:	187b      	adds	r3, r7, r1
 80212d4:	3201      	adds	r2, #1
 80212d6:	701a      	strb	r2, [r3, #0]
      break;
 80212d8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80212da:	230b      	movs	r3, #11
 80212dc:	18fb      	adds	r3, r7, r3
 80212de:	781b      	ldrb	r3, [r3, #0]
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d127      	bne.n	8021334 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80212e4:	2108      	movs	r1, #8
 80212e6:	187b      	adds	r3, r7, r1
 80212e8:	881b      	ldrh	r3, [r3, #0]
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d019      	beq.n	8021322 <USBD_GetDescriptor+0x342>
 80212ee:	683b      	ldr	r3, [r7, #0]
 80212f0:	88db      	ldrh	r3, [r3, #6]
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d015      	beq.n	8021322 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80212f6:	683b      	ldr	r3, [r7, #0]
 80212f8:	88da      	ldrh	r2, [r3, #6]
 80212fa:	187b      	adds	r3, r7, r1
 80212fc:	881b      	ldrh	r3, [r3, #0]
 80212fe:	1c18      	adds	r0, r3, #0
 8021300:	1c11      	adds	r1, r2, #0
 8021302:	b28a      	uxth	r2, r1
 8021304:	b283      	uxth	r3, r0
 8021306:	429a      	cmp	r2, r3
 8021308:	d900      	bls.n	802130c <USBD_GetDescriptor+0x32c>
 802130a:	1c01      	adds	r1, r0, #0
 802130c:	b28a      	uxth	r2, r1
 802130e:	2108      	movs	r1, #8
 8021310:	187b      	adds	r3, r7, r1
 8021312:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021314:	187b      	adds	r3, r7, r1
 8021316:	881a      	ldrh	r2, [r3, #0]
 8021318:	68f9      	ldr	r1, [r7, #12]
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	0018      	movs	r0, r3
 802131e:	f000 fa70 	bl	8021802 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8021322:	683b      	ldr	r3, [r7, #0]
 8021324:	88db      	ldrh	r3, [r3, #6]
 8021326:	2b00      	cmp	r3, #0
 8021328:	d105      	bne.n	8021336 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 802132a:	687b      	ldr	r3, [r7, #4]
 802132c:	0018      	movs	r0, r3
 802132e:	f000 fad2 	bl	80218d6 <USBD_CtlSendStatus>
 8021332:	e000      	b.n	8021336 <USBD_GetDescriptor+0x356>
    return;
 8021334:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021336:	46bd      	mov	sp, r7
 8021338:	b004      	add	sp, #16
 802133a:	bd80      	pop	{r7, pc}
 802133c:	0802d400 	.word	0x0802d400
 8021340:	0802d420 	.word	0x0802d420

08021344 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021344:	b590      	push	{r4, r7, lr}
 8021346:	b085      	sub	sp, #20
 8021348:	af00      	add	r7, sp, #0
 802134a:	6078      	str	r0, [r7, #4]
 802134c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802134e:	683b      	ldr	r3, [r7, #0]
 8021350:	889b      	ldrh	r3, [r3, #4]
 8021352:	2b00      	cmp	r3, #0
 8021354:	d13d      	bne.n	80213d2 <USBD_SetAddress+0x8e>
 8021356:	683b      	ldr	r3, [r7, #0]
 8021358:	88db      	ldrh	r3, [r3, #6]
 802135a:	2b00      	cmp	r3, #0
 802135c:	d139      	bne.n	80213d2 <USBD_SetAddress+0x8e>
 802135e:	683b      	ldr	r3, [r7, #0]
 8021360:	885b      	ldrh	r3, [r3, #2]
 8021362:	2b7f      	cmp	r3, #127	@ 0x7f
 8021364:	d835      	bhi.n	80213d2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021366:	683b      	ldr	r3, [r7, #0]
 8021368:	885b      	ldrh	r3, [r3, #2]
 802136a:	b2da      	uxtb	r2, r3
 802136c:	230f      	movs	r3, #15
 802136e:	18fb      	adds	r3, r7, r3
 8021370:	217f      	movs	r1, #127	@ 0x7f
 8021372:	400a      	ands	r2, r1
 8021374:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021376:	687a      	ldr	r2, [r7, #4]
 8021378:	23a7      	movs	r3, #167	@ 0xa7
 802137a:	009b      	lsls	r3, r3, #2
 802137c:	5cd3      	ldrb	r3, [r2, r3]
 802137e:	2b03      	cmp	r3, #3
 8021380:	d106      	bne.n	8021390 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8021382:	683a      	ldr	r2, [r7, #0]
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	0011      	movs	r1, r2
 8021388:	0018      	movs	r0, r3
 802138a:	f000 f9bc 	bl	8021706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802138e:	e027      	b.n	80213e0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	240f      	movs	r4, #15
 8021394:	193a      	adds	r2, r7, r4
 8021396:	4914      	ldr	r1, [pc, #80]	@ (80213e8 <USBD_SetAddress+0xa4>)
 8021398:	7812      	ldrb	r2, [r2, #0]
 802139a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 802139c:	193b      	adds	r3, r7, r4
 802139e:	781a      	ldrb	r2, [r3, #0]
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	0011      	movs	r1, r2
 80213a4:	0018      	movs	r0, r3
 80213a6:	f000 ff5d 	bl	8022264 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	0018      	movs	r0, r3
 80213ae:	f000 fa92 	bl	80218d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80213b2:	193b      	adds	r3, r7, r4
 80213b4:	781b      	ldrb	r3, [r3, #0]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d005      	beq.n	80213c6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80213ba:	687a      	ldr	r2, [r7, #4]
 80213bc:	23a7      	movs	r3, #167	@ 0xa7
 80213be:	009b      	lsls	r3, r3, #2
 80213c0:	2102      	movs	r1, #2
 80213c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80213c4:	e00c      	b.n	80213e0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80213c6:	687a      	ldr	r2, [r7, #4]
 80213c8:	23a7      	movs	r3, #167	@ 0xa7
 80213ca:	009b      	lsls	r3, r3, #2
 80213cc:	2101      	movs	r1, #1
 80213ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80213d0:	e006      	b.n	80213e0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80213d2:	683a      	ldr	r2, [r7, #0]
 80213d4:	687b      	ldr	r3, [r7, #4]
 80213d6:	0011      	movs	r1, r2
 80213d8:	0018      	movs	r0, r3
 80213da:	f000 f994 	bl	8021706 <USBD_CtlError>
  }
}
 80213de:	46c0      	nop			@ (mov r8, r8)
 80213e0:	46c0      	nop			@ (mov r8, r8)
 80213e2:	46bd      	mov	sp, r7
 80213e4:	b005      	add	sp, #20
 80213e6:	bd90      	pop	{r4, r7, pc}
 80213e8:	0000029e 	.word	0x0000029e

080213ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80213ec:	b580      	push	{r7, lr}
 80213ee:	b082      	sub	sp, #8
 80213f0:	af00      	add	r7, sp, #0
 80213f2:	6078      	str	r0, [r7, #4]
 80213f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80213f6:	683b      	ldr	r3, [r7, #0]
 80213f8:	885b      	ldrh	r3, [r3, #2]
 80213fa:	b2da      	uxtb	r2, r3
 80213fc:	4b4c      	ldr	r3, [pc, #304]	@ (8021530 <USBD_SetConfig+0x144>)
 80213fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021400:	4b4b      	ldr	r3, [pc, #300]	@ (8021530 <USBD_SetConfig+0x144>)
 8021402:	781b      	ldrb	r3, [r3, #0]
 8021404:	2b01      	cmp	r3, #1
 8021406:	d906      	bls.n	8021416 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021408:	683a      	ldr	r2, [r7, #0]
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	0011      	movs	r1, r2
 802140e:	0018      	movs	r0, r3
 8021410:	f000 f979 	bl	8021706 <USBD_CtlError>
 8021414:	e088      	b.n	8021528 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021416:	687a      	ldr	r2, [r7, #4]
 8021418:	23a7      	movs	r3, #167	@ 0xa7
 802141a:	009b      	lsls	r3, r3, #2
 802141c:	5cd3      	ldrb	r3, [r2, r3]
 802141e:	2b02      	cmp	r3, #2
 8021420:	d002      	beq.n	8021428 <USBD_SetConfig+0x3c>
 8021422:	2b03      	cmp	r3, #3
 8021424:	d029      	beq.n	802147a <USBD_SetConfig+0x8e>
 8021426:	e071      	b.n	802150c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021428:	4b41      	ldr	r3, [pc, #260]	@ (8021530 <USBD_SetConfig+0x144>)
 802142a:	781b      	ldrb	r3, [r3, #0]
 802142c:	2b00      	cmp	r3, #0
 802142e:	d01f      	beq.n	8021470 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021430:	4b3f      	ldr	r3, [pc, #252]	@ (8021530 <USBD_SetConfig+0x144>)
 8021432:	781b      	ldrb	r3, [r3, #0]
 8021434:	001a      	movs	r2, r3
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802143a:	687a      	ldr	r2, [r7, #4]
 802143c:	23a7      	movs	r3, #167	@ 0xa7
 802143e:	009b      	lsls	r3, r3, #2
 8021440:	2103      	movs	r1, #3
 8021442:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021444:	4b3a      	ldr	r3, [pc, #232]	@ (8021530 <USBD_SetConfig+0x144>)
 8021446:	781a      	ldrb	r2, [r3, #0]
 8021448:	687b      	ldr	r3, [r7, #4]
 802144a:	0011      	movs	r1, r2
 802144c:	0018      	movs	r0, r3
 802144e:	f7ff f8c6 	bl	80205de <USBD_SetClassConfig>
 8021452:	0003      	movs	r3, r0
 8021454:	2b02      	cmp	r3, #2
 8021456:	d106      	bne.n	8021466 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021458:	683a      	ldr	r2, [r7, #0]
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	0011      	movs	r1, r2
 802145e:	0018      	movs	r0, r3
 8021460:	f000 f951 	bl	8021706 <USBD_CtlError>
            return;
 8021464:	e060      	b.n	8021528 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	0018      	movs	r0, r3
 802146a:	f000 fa34 	bl	80218d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 802146e:	e05b      	b.n	8021528 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	0018      	movs	r0, r3
 8021474:	f000 fa2f 	bl	80218d6 <USBD_CtlSendStatus>
        break;
 8021478:	e056      	b.n	8021528 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 802147a:	4b2d      	ldr	r3, [pc, #180]	@ (8021530 <USBD_SetConfig+0x144>)
 802147c:	781b      	ldrb	r3, [r3, #0]
 802147e:	2b00      	cmp	r3, #0
 8021480:	d115      	bne.n	80214ae <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021482:	687a      	ldr	r2, [r7, #4]
 8021484:	23a7      	movs	r3, #167	@ 0xa7
 8021486:	009b      	lsls	r3, r3, #2
 8021488:	2102      	movs	r1, #2
 802148a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 802148c:	4b28      	ldr	r3, [pc, #160]	@ (8021530 <USBD_SetConfig+0x144>)
 802148e:	781b      	ldrb	r3, [r3, #0]
 8021490:	001a      	movs	r2, r3
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8021496:	4b26      	ldr	r3, [pc, #152]	@ (8021530 <USBD_SetConfig+0x144>)
 8021498:	781a      	ldrb	r2, [r3, #0]
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	0011      	movs	r1, r2
 802149e:	0018      	movs	r0, r3
 80214a0:	f7ff f8c4 	bl	802062c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	0018      	movs	r0, r3
 80214a8:	f000 fa15 	bl	80218d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80214ac:	e03c      	b.n	8021528 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80214ae:	4b20      	ldr	r3, [pc, #128]	@ (8021530 <USBD_SetConfig+0x144>)
 80214b0:	781b      	ldrb	r3, [r3, #0]
 80214b2:	001a      	movs	r2, r3
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	685b      	ldr	r3, [r3, #4]
 80214b8:	429a      	cmp	r2, r3
 80214ba:	d022      	beq.n	8021502 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	685b      	ldr	r3, [r3, #4]
 80214c0:	b2da      	uxtb	r2, r3
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	0011      	movs	r1, r2
 80214c6:	0018      	movs	r0, r3
 80214c8:	f7ff f8b0 	bl	802062c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80214cc:	4b18      	ldr	r3, [pc, #96]	@ (8021530 <USBD_SetConfig+0x144>)
 80214ce:	781b      	ldrb	r3, [r3, #0]
 80214d0:	001a      	movs	r2, r3
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80214d6:	4b16      	ldr	r3, [pc, #88]	@ (8021530 <USBD_SetConfig+0x144>)
 80214d8:	781a      	ldrb	r2, [r3, #0]
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	0011      	movs	r1, r2
 80214de:	0018      	movs	r0, r3
 80214e0:	f7ff f87d 	bl	80205de <USBD_SetClassConfig>
 80214e4:	0003      	movs	r3, r0
 80214e6:	2b02      	cmp	r3, #2
 80214e8:	d106      	bne.n	80214f8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80214ea:	683a      	ldr	r2, [r7, #0]
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	0011      	movs	r1, r2
 80214f0:	0018      	movs	r0, r3
 80214f2:	f000 f908 	bl	8021706 <USBD_CtlError>
            return;
 80214f6:	e017      	b.n	8021528 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	0018      	movs	r0, r3
 80214fc:	f000 f9eb 	bl	80218d6 <USBD_CtlSendStatus>
        break;
 8021500:	e012      	b.n	8021528 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	0018      	movs	r0, r3
 8021506:	f000 f9e6 	bl	80218d6 <USBD_CtlSendStatus>
        break;
 802150a:	e00d      	b.n	8021528 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 802150c:	683a      	ldr	r2, [r7, #0]
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	0011      	movs	r1, r2
 8021512:	0018      	movs	r0, r3
 8021514:	f000 f8f7 	bl	8021706 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8021518:	4b05      	ldr	r3, [pc, #20]	@ (8021530 <USBD_SetConfig+0x144>)
 802151a:	781a      	ldrb	r2, [r3, #0]
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	0011      	movs	r1, r2
 8021520:	0018      	movs	r0, r3
 8021522:	f7ff f883 	bl	802062c <USBD_ClrClassConfig>
        break;
 8021526:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021528:	46bd      	mov	sp, r7
 802152a:	b002      	add	sp, #8
 802152c:	bd80      	pop	{r7, pc}
 802152e:	46c0      	nop			@ (mov r8, r8)
 8021530:	20002258 	.word	0x20002258

08021534 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021534:	b580      	push	{r7, lr}
 8021536:	b082      	sub	sp, #8
 8021538:	af00      	add	r7, sp, #0
 802153a:	6078      	str	r0, [r7, #4]
 802153c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802153e:	683b      	ldr	r3, [r7, #0]
 8021540:	88db      	ldrh	r3, [r3, #6]
 8021542:	2b01      	cmp	r3, #1
 8021544:	d006      	beq.n	8021554 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8021546:	683a      	ldr	r2, [r7, #0]
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	0011      	movs	r1, r2
 802154c:	0018      	movs	r0, r3
 802154e:	f000 f8da 	bl	8021706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021552:	e026      	b.n	80215a2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8021554:	687a      	ldr	r2, [r7, #4]
 8021556:	23a7      	movs	r3, #167	@ 0xa7
 8021558:	009b      	lsls	r3, r3, #2
 802155a:	5cd3      	ldrb	r3, [r2, r3]
 802155c:	2b02      	cmp	r3, #2
 802155e:	dc02      	bgt.n	8021566 <USBD_GetConfig+0x32>
 8021560:	2b00      	cmp	r3, #0
 8021562:	dc03      	bgt.n	802156c <USBD_GetConfig+0x38>
 8021564:	e016      	b.n	8021594 <USBD_GetConfig+0x60>
 8021566:	2b03      	cmp	r3, #3
 8021568:	d00c      	beq.n	8021584 <USBD_GetConfig+0x50>
 802156a:	e013      	b.n	8021594 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	2200      	movs	r2, #0
 8021570:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	3308      	adds	r3, #8
 8021576:	0019      	movs	r1, r3
 8021578:	687b      	ldr	r3, [r7, #4]
 802157a:	2201      	movs	r2, #1
 802157c:	0018      	movs	r0, r3
 802157e:	f000 f940 	bl	8021802 <USBD_CtlSendData>
        break;
 8021582:	e00e      	b.n	80215a2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	1d19      	adds	r1, r3, #4
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	2201      	movs	r2, #1
 802158c:	0018      	movs	r0, r3
 802158e:	f000 f938 	bl	8021802 <USBD_CtlSendData>
        break;
 8021592:	e006      	b.n	80215a2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8021594:	683a      	ldr	r2, [r7, #0]
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	0011      	movs	r1, r2
 802159a:	0018      	movs	r0, r3
 802159c:	f000 f8b3 	bl	8021706 <USBD_CtlError>
        break;
 80215a0:	46c0      	nop			@ (mov r8, r8)
}
 80215a2:	46c0      	nop			@ (mov r8, r8)
 80215a4:	46bd      	mov	sp, r7
 80215a6:	b002      	add	sp, #8
 80215a8:	bd80      	pop	{r7, pc}

080215aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80215aa:	b580      	push	{r7, lr}
 80215ac:	b082      	sub	sp, #8
 80215ae:	af00      	add	r7, sp, #0
 80215b0:	6078      	str	r0, [r7, #4]
 80215b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80215b4:	687a      	ldr	r2, [r7, #4]
 80215b6:	23a7      	movs	r3, #167	@ 0xa7
 80215b8:	009b      	lsls	r3, r3, #2
 80215ba:	5cd3      	ldrb	r3, [r2, r3]
 80215bc:	3b01      	subs	r3, #1
 80215be:	2b02      	cmp	r3, #2
 80215c0:	d822      	bhi.n	8021608 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80215c2:	683b      	ldr	r3, [r7, #0]
 80215c4:	88db      	ldrh	r3, [r3, #6]
 80215c6:	2b02      	cmp	r3, #2
 80215c8:	d006      	beq.n	80215d8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80215ca:	683a      	ldr	r2, [r7, #0]
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	0011      	movs	r1, r2
 80215d0:	0018      	movs	r0, r3
 80215d2:	f000 f898 	bl	8021706 <USBD_CtlError>
        break;
 80215d6:	e01e      	b.n	8021616 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	2201      	movs	r2, #1
 80215dc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80215de:	687a      	ldr	r2, [r7, #4]
 80215e0:	23a9      	movs	r3, #169	@ 0xa9
 80215e2:	009b      	lsls	r3, r3, #2
 80215e4:	58d3      	ldr	r3, [r2, r3]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d005      	beq.n	80215f6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	68db      	ldr	r3, [r3, #12]
 80215ee:	2202      	movs	r2, #2
 80215f0:	431a      	orrs	r2, r3
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	330c      	adds	r3, #12
 80215fa:	0019      	movs	r1, r3
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	2202      	movs	r2, #2
 8021600:	0018      	movs	r0, r3
 8021602:	f000 f8fe 	bl	8021802 <USBD_CtlSendData>
      break;
 8021606:	e006      	b.n	8021616 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8021608:	683a      	ldr	r2, [r7, #0]
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	0011      	movs	r1, r2
 802160e:	0018      	movs	r0, r3
 8021610:	f000 f879 	bl	8021706 <USBD_CtlError>
      break;
 8021614:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021616:	46c0      	nop			@ (mov r8, r8)
 8021618:	46bd      	mov	sp, r7
 802161a:	b002      	add	sp, #8
 802161c:	bd80      	pop	{r7, pc}

0802161e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802161e:	b580      	push	{r7, lr}
 8021620:	b082      	sub	sp, #8
 8021622:	af00      	add	r7, sp, #0
 8021624:	6078      	str	r0, [r7, #4]
 8021626:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021628:	683b      	ldr	r3, [r7, #0]
 802162a:	885b      	ldrh	r3, [r3, #2]
 802162c:	2b01      	cmp	r3, #1
 802162e:	d108      	bne.n	8021642 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8021630:	687a      	ldr	r2, [r7, #4]
 8021632:	23a9      	movs	r3, #169	@ 0xa9
 8021634:	009b      	lsls	r3, r3, #2
 8021636:	2101      	movs	r1, #1
 8021638:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	0018      	movs	r0, r3
 802163e:	f000 f94a 	bl	80218d6 <USBD_CtlSendStatus>
  }
}
 8021642:	46c0      	nop			@ (mov r8, r8)
 8021644:	46bd      	mov	sp, r7
 8021646:	b002      	add	sp, #8
 8021648:	bd80      	pop	{r7, pc}

0802164a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802164a:	b580      	push	{r7, lr}
 802164c:	b082      	sub	sp, #8
 802164e:	af00      	add	r7, sp, #0
 8021650:	6078      	str	r0, [r7, #4]
 8021652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021654:	687a      	ldr	r2, [r7, #4]
 8021656:	23a7      	movs	r3, #167	@ 0xa7
 8021658:	009b      	lsls	r3, r3, #2
 802165a:	5cd3      	ldrb	r3, [r2, r3]
 802165c:	3b01      	subs	r3, #1
 802165e:	2b02      	cmp	r3, #2
 8021660:	d80d      	bhi.n	802167e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021662:	683b      	ldr	r3, [r7, #0]
 8021664:	885b      	ldrh	r3, [r3, #2]
 8021666:	2b01      	cmp	r3, #1
 8021668:	d110      	bne.n	802168c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 802166a:	687a      	ldr	r2, [r7, #4]
 802166c:	23a9      	movs	r3, #169	@ 0xa9
 802166e:	009b      	lsls	r3, r3, #2
 8021670:	2100      	movs	r1, #0
 8021672:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	0018      	movs	r0, r3
 8021678:	f000 f92d 	bl	80218d6 <USBD_CtlSendStatus>
      }
      break;
 802167c:	e006      	b.n	802168c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 802167e:	683a      	ldr	r2, [r7, #0]
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	0011      	movs	r1, r2
 8021684:	0018      	movs	r0, r3
 8021686:	f000 f83e 	bl	8021706 <USBD_CtlError>
      break;
 802168a:	e000      	b.n	802168e <USBD_ClrFeature+0x44>
      break;
 802168c:	46c0      	nop			@ (mov r8, r8)
  }
}
 802168e:	46c0      	nop			@ (mov r8, r8)
 8021690:	46bd      	mov	sp, r7
 8021692:	b002      	add	sp, #8
 8021694:	bd80      	pop	{r7, pc}

08021696 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021696:	b580      	push	{r7, lr}
 8021698:	b082      	sub	sp, #8
 802169a:	af00      	add	r7, sp, #0
 802169c:	6078      	str	r0, [r7, #4]
 802169e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80216a0:	683b      	ldr	r3, [r7, #0]
 80216a2:	781a      	ldrb	r2, [r3, #0]
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80216a8:	683b      	ldr	r3, [r7, #0]
 80216aa:	785a      	ldrb	r2, [r3, #1]
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80216b0:	683b      	ldr	r3, [r7, #0]
 80216b2:	3302      	adds	r3, #2
 80216b4:	781b      	ldrb	r3, [r3, #0]
 80216b6:	001a      	movs	r2, r3
 80216b8:	683b      	ldr	r3, [r7, #0]
 80216ba:	3303      	adds	r3, #3
 80216bc:	781b      	ldrb	r3, [r3, #0]
 80216be:	021b      	lsls	r3, r3, #8
 80216c0:	b29b      	uxth	r3, r3
 80216c2:	18d3      	adds	r3, r2, r3
 80216c4:	b29a      	uxth	r2, r3
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80216ca:	683b      	ldr	r3, [r7, #0]
 80216cc:	3304      	adds	r3, #4
 80216ce:	781b      	ldrb	r3, [r3, #0]
 80216d0:	001a      	movs	r2, r3
 80216d2:	683b      	ldr	r3, [r7, #0]
 80216d4:	3305      	adds	r3, #5
 80216d6:	781b      	ldrb	r3, [r3, #0]
 80216d8:	021b      	lsls	r3, r3, #8
 80216da:	b29b      	uxth	r3, r3
 80216dc:	18d3      	adds	r3, r2, r3
 80216de:	b29a      	uxth	r2, r3
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80216e4:	683b      	ldr	r3, [r7, #0]
 80216e6:	3306      	adds	r3, #6
 80216e8:	781b      	ldrb	r3, [r3, #0]
 80216ea:	001a      	movs	r2, r3
 80216ec:	683b      	ldr	r3, [r7, #0]
 80216ee:	3307      	adds	r3, #7
 80216f0:	781b      	ldrb	r3, [r3, #0]
 80216f2:	021b      	lsls	r3, r3, #8
 80216f4:	b29b      	uxth	r3, r3
 80216f6:	18d3      	adds	r3, r2, r3
 80216f8:	b29a      	uxth	r2, r3
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	80da      	strh	r2, [r3, #6]

}
 80216fe:	46c0      	nop			@ (mov r8, r8)
 8021700:	46bd      	mov	sp, r7
 8021702:	b002      	add	sp, #8
 8021704:	bd80      	pop	{r7, pc}

08021706 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8021706:	b580      	push	{r7, lr}
 8021708:	b082      	sub	sp, #8
 802170a:	af00      	add	r7, sp, #0
 802170c:	6078      	str	r0, [r7, #4]
 802170e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	2180      	movs	r1, #128	@ 0x80
 8021714:	0018      	movs	r0, r3
 8021716:	f000 fd1e 	bl	8022156 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	2100      	movs	r1, #0
 802171e:	0018      	movs	r0, r3
 8021720:	f000 fd19 	bl	8022156 <USBD_LL_StallEP>
}
 8021724:	46c0      	nop			@ (mov r8, r8)
 8021726:	46bd      	mov	sp, r7
 8021728:	b002      	add	sp, #8
 802172a:	bd80      	pop	{r7, pc}

0802172c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802172c:	b590      	push	{r4, r7, lr}
 802172e:	b087      	sub	sp, #28
 8021730:	af00      	add	r7, sp, #0
 8021732:	60f8      	str	r0, [r7, #12]
 8021734:	60b9      	str	r1, [r7, #8]
 8021736:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021738:	2417      	movs	r4, #23
 802173a:	193b      	adds	r3, r7, r4
 802173c:	2200      	movs	r2, #0
 802173e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	2b00      	cmp	r3, #0
 8021744:	d03c      	beq.n	80217c0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8021746:	68fb      	ldr	r3, [r7, #12]
 8021748:	0018      	movs	r0, r3
 802174a:	f000 f83d 	bl	80217c8 <USBD_GetLen>
 802174e:	0003      	movs	r3, r0
 8021750:	3301      	adds	r3, #1
 8021752:	b29b      	uxth	r3, r3
 8021754:	18db      	adds	r3, r3, r3
 8021756:	b29a      	uxth	r2, r3
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 802175c:	193b      	adds	r3, r7, r4
 802175e:	781b      	ldrb	r3, [r3, #0]
 8021760:	193a      	adds	r2, r7, r4
 8021762:	1c59      	adds	r1, r3, #1
 8021764:	7011      	strb	r1, [r2, #0]
 8021766:	001a      	movs	r2, r3
 8021768:	68bb      	ldr	r3, [r7, #8]
 802176a:	189b      	adds	r3, r3, r2
 802176c:	687a      	ldr	r2, [r7, #4]
 802176e:	7812      	ldrb	r2, [r2, #0]
 8021770:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8021772:	193b      	adds	r3, r7, r4
 8021774:	781b      	ldrb	r3, [r3, #0]
 8021776:	193a      	adds	r2, r7, r4
 8021778:	1c59      	adds	r1, r3, #1
 802177a:	7011      	strb	r1, [r2, #0]
 802177c:	001a      	movs	r2, r3
 802177e:	68bb      	ldr	r3, [r7, #8]
 8021780:	189b      	adds	r3, r3, r2
 8021782:	2203      	movs	r2, #3
 8021784:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8021786:	e017      	b.n	80217b8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8021788:	68fb      	ldr	r3, [r7, #12]
 802178a:	1c5a      	adds	r2, r3, #1
 802178c:	60fa      	str	r2, [r7, #12]
 802178e:	2417      	movs	r4, #23
 8021790:	193a      	adds	r2, r7, r4
 8021792:	7812      	ldrb	r2, [r2, #0]
 8021794:	1939      	adds	r1, r7, r4
 8021796:	1c50      	adds	r0, r2, #1
 8021798:	7008      	strb	r0, [r1, #0]
 802179a:	0011      	movs	r1, r2
 802179c:	68ba      	ldr	r2, [r7, #8]
 802179e:	1852      	adds	r2, r2, r1
 80217a0:	781b      	ldrb	r3, [r3, #0]
 80217a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80217a4:	193b      	adds	r3, r7, r4
 80217a6:	781b      	ldrb	r3, [r3, #0]
 80217a8:	193a      	adds	r2, r7, r4
 80217aa:	1c59      	adds	r1, r3, #1
 80217ac:	7011      	strb	r1, [r2, #0]
 80217ae:	001a      	movs	r2, r3
 80217b0:	68bb      	ldr	r3, [r7, #8]
 80217b2:	189b      	adds	r3, r3, r2
 80217b4:	2200      	movs	r2, #0
 80217b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	781b      	ldrb	r3, [r3, #0]
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d1e3      	bne.n	8021788 <USBD_GetString+0x5c>
    }
  }
}
 80217c0:	46c0      	nop			@ (mov r8, r8)
 80217c2:	46bd      	mov	sp, r7
 80217c4:	b007      	add	sp, #28
 80217c6:	bd90      	pop	{r4, r7, pc}

080217c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b084      	sub	sp, #16
 80217cc:	af00      	add	r7, sp, #0
 80217ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80217d0:	230f      	movs	r3, #15
 80217d2:	18fb      	adds	r3, r7, r3
 80217d4:	2200      	movs	r2, #0
 80217d6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80217d8:	e008      	b.n	80217ec <USBD_GetLen+0x24>
  {
    len++;
 80217da:	210f      	movs	r1, #15
 80217dc:	187b      	adds	r3, r7, r1
 80217de:	781a      	ldrb	r2, [r3, #0]
 80217e0:	187b      	adds	r3, r7, r1
 80217e2:	3201      	adds	r2, #1
 80217e4:	701a      	strb	r2, [r3, #0]
    buf++;
 80217e6:	687b      	ldr	r3, [r7, #4]
 80217e8:	3301      	adds	r3, #1
 80217ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	781b      	ldrb	r3, [r3, #0]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d1f2      	bne.n	80217da <USBD_GetLen+0x12>
  }

  return len;
 80217f4:	230f      	movs	r3, #15
 80217f6:	18fb      	adds	r3, r7, r3
 80217f8:	781b      	ldrb	r3, [r3, #0]
}
 80217fa:	0018      	movs	r0, r3
 80217fc:	46bd      	mov	sp, r7
 80217fe:	b004      	add	sp, #16
 8021800:	bd80      	pop	{r7, pc}

08021802 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8021802:	b580      	push	{r7, lr}
 8021804:	b084      	sub	sp, #16
 8021806:	af00      	add	r7, sp, #0
 8021808:	60f8      	str	r0, [r7, #12]
 802180a:	60b9      	str	r1, [r7, #8]
 802180c:	1dbb      	adds	r3, r7, #6
 802180e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021810:	68fa      	ldr	r2, [r7, #12]
 8021812:	23a5      	movs	r3, #165	@ 0xa5
 8021814:	009b      	lsls	r3, r3, #2
 8021816:	2102      	movs	r1, #2
 8021818:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 802181a:	1dbb      	adds	r3, r7, #6
 802181c:	881a      	ldrh	r2, [r3, #0]
 802181e:	68fb      	ldr	r3, [r7, #12]
 8021820:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8021822:	1dbb      	adds	r3, r7, #6
 8021824:	881a      	ldrh	r2, [r3, #0]
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802182a:	1dbb      	adds	r3, r7, #6
 802182c:	881b      	ldrh	r3, [r3, #0]
 802182e:	68ba      	ldr	r2, [r7, #8]
 8021830:	68f8      	ldr	r0, [r7, #12]
 8021832:	2100      	movs	r1, #0
 8021834:	f000 fd41 	bl	80222ba <USBD_LL_Transmit>

  return USBD_OK;
 8021838:	2300      	movs	r3, #0
}
 802183a:	0018      	movs	r0, r3
 802183c:	46bd      	mov	sp, r7
 802183e:	b004      	add	sp, #16
 8021840:	bd80      	pop	{r7, pc}

08021842 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8021842:	b580      	push	{r7, lr}
 8021844:	b084      	sub	sp, #16
 8021846:	af00      	add	r7, sp, #0
 8021848:	60f8      	str	r0, [r7, #12]
 802184a:	60b9      	str	r1, [r7, #8]
 802184c:	1dbb      	adds	r3, r7, #6
 802184e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021850:	1dbb      	adds	r3, r7, #6
 8021852:	881b      	ldrh	r3, [r3, #0]
 8021854:	68ba      	ldr	r2, [r7, #8]
 8021856:	68f8      	ldr	r0, [r7, #12]
 8021858:	2100      	movs	r1, #0
 802185a:	f000 fd2e 	bl	80222ba <USBD_LL_Transmit>

  return USBD_OK;
 802185e:	2300      	movs	r3, #0
}
 8021860:	0018      	movs	r0, r3
 8021862:	46bd      	mov	sp, r7
 8021864:	b004      	add	sp, #16
 8021866:	bd80      	pop	{r7, pc}

08021868 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8021868:	b580      	push	{r7, lr}
 802186a:	b084      	sub	sp, #16
 802186c:	af00      	add	r7, sp, #0
 802186e:	60f8      	str	r0, [r7, #12]
 8021870:	60b9      	str	r1, [r7, #8]
 8021872:	1dbb      	adds	r3, r7, #6
 8021874:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021876:	68fa      	ldr	r2, [r7, #12]
 8021878:	23a5      	movs	r3, #165	@ 0xa5
 802187a:	009b      	lsls	r3, r3, #2
 802187c:	2103      	movs	r1, #3
 802187e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8021880:	1dbb      	adds	r3, r7, #6
 8021882:	8819      	ldrh	r1, [r3, #0]
 8021884:	68fa      	ldr	r2, [r7, #12]
 8021886:	23ae      	movs	r3, #174	@ 0xae
 8021888:	005b      	lsls	r3, r3, #1
 802188a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 802188c:	1dbb      	adds	r3, r7, #6
 802188e:	8819      	ldrh	r1, [r3, #0]
 8021890:	68fa      	ldr	r2, [r7, #12]
 8021892:	23b0      	movs	r3, #176	@ 0xb0
 8021894:	005b      	lsls	r3, r3, #1
 8021896:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021898:	1dbb      	adds	r3, r7, #6
 802189a:	881b      	ldrh	r3, [r3, #0]
 802189c:	68ba      	ldr	r2, [r7, #8]
 802189e:	68f8      	ldr	r0, [r7, #12]
 80218a0:	2100      	movs	r1, #0
 80218a2:	f000 fd41 	bl	8022328 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80218a6:	2300      	movs	r3, #0
}
 80218a8:	0018      	movs	r0, r3
 80218aa:	46bd      	mov	sp, r7
 80218ac:	b004      	add	sp, #16
 80218ae:	bd80      	pop	{r7, pc}

080218b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b084      	sub	sp, #16
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	60f8      	str	r0, [r7, #12]
 80218b8:	60b9      	str	r1, [r7, #8]
 80218ba:	1dbb      	adds	r3, r7, #6
 80218bc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80218be:	1dbb      	adds	r3, r7, #6
 80218c0:	881b      	ldrh	r3, [r3, #0]
 80218c2:	68ba      	ldr	r2, [r7, #8]
 80218c4:	68f8      	ldr	r0, [r7, #12]
 80218c6:	2100      	movs	r1, #0
 80218c8:	f000 fd2e 	bl	8022328 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80218cc:	2300      	movs	r3, #0
}
 80218ce:	0018      	movs	r0, r3
 80218d0:	46bd      	mov	sp, r7
 80218d2:	b004      	add	sp, #16
 80218d4:	bd80      	pop	{r7, pc}

080218d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80218d6:	b580      	push	{r7, lr}
 80218d8:	b082      	sub	sp, #8
 80218da:	af00      	add	r7, sp, #0
 80218dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80218de:	687a      	ldr	r2, [r7, #4]
 80218e0:	23a5      	movs	r3, #165	@ 0xa5
 80218e2:	009b      	lsls	r3, r3, #2
 80218e4:	2104      	movs	r1, #4
 80218e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80218e8:	6878      	ldr	r0, [r7, #4]
 80218ea:	2300      	movs	r3, #0
 80218ec:	2200      	movs	r2, #0
 80218ee:	2100      	movs	r1, #0
 80218f0:	f000 fce3 	bl	80222ba <USBD_LL_Transmit>

  return USBD_OK;
 80218f4:	2300      	movs	r3, #0
}
 80218f6:	0018      	movs	r0, r3
 80218f8:	46bd      	mov	sp, r7
 80218fa:	b002      	add	sp, #8
 80218fc:	bd80      	pop	{r7, pc}

080218fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80218fe:	b580      	push	{r7, lr}
 8021900:	b082      	sub	sp, #8
 8021902:	af00      	add	r7, sp, #0
 8021904:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8021906:	687a      	ldr	r2, [r7, #4]
 8021908:	23a5      	movs	r3, #165	@ 0xa5
 802190a:	009b      	lsls	r3, r3, #2
 802190c:	2105      	movs	r1, #5
 802190e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021910:	6878      	ldr	r0, [r7, #4]
 8021912:	2300      	movs	r3, #0
 8021914:	2200      	movs	r2, #0
 8021916:	2100      	movs	r1, #0
 8021918:	f000 fd06 	bl	8022328 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802191c:	2300      	movs	r3, #0
}
 802191e:	0018      	movs	r0, r3
 8021920:	46bd      	mov	sp, r7
 8021922:	b002      	add	sp, #8
 8021924:	bd80      	pop	{r7, pc}
	...

08021928 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021928:	b580      	push	{r7, lr}
 802192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802192c:	4914      	ldr	r1, [pc, #80]	@ (8021980 <MX_USB_DEVICE_Init+0x58>)
 802192e:	4b15      	ldr	r3, [pc, #84]	@ (8021984 <MX_USB_DEVICE_Init+0x5c>)
 8021930:	2200      	movs	r2, #0
 8021932:	0018      	movs	r0, r3
 8021934:	f7fe fdec 	bl	8020510 <USBD_Init>
 8021938:	1e03      	subs	r3, r0, #0
 802193a:	d001      	beq.n	8021940 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802193c:	f7ea fcf8 	bl	800c330 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021940:	4a11      	ldr	r2, [pc, #68]	@ (8021988 <MX_USB_DEVICE_Init+0x60>)
 8021942:	4b10      	ldr	r3, [pc, #64]	@ (8021984 <MX_USB_DEVICE_Init+0x5c>)
 8021944:	0011      	movs	r1, r2
 8021946:	0018      	movs	r0, r3
 8021948:	f7fe fe13 	bl	8020572 <USBD_RegisterClass>
 802194c:	1e03      	subs	r3, r0, #0
 802194e:	d001      	beq.n	8021954 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8021950:	f7ea fcee 	bl	800c330 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021954:	4a0d      	ldr	r2, [pc, #52]	@ (802198c <MX_USB_DEVICE_Init+0x64>)
 8021956:	4b0b      	ldr	r3, [pc, #44]	@ (8021984 <MX_USB_DEVICE_Init+0x5c>)
 8021958:	0011      	movs	r1, r2
 802195a:	0018      	movs	r0, r3
 802195c:	f7fe fd28 	bl	80203b0 <USBD_CDC_RegisterInterface>
 8021960:	1e03      	subs	r3, r0, #0
 8021962:	d001      	beq.n	8021968 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8021964:	f7ea fce4 	bl	800c330 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021968:	4b06      	ldr	r3, [pc, #24]	@ (8021984 <MX_USB_DEVICE_Init+0x5c>)
 802196a:	0018      	movs	r0, r3
 802196c:	f7fe fe21 	bl	80205b2 <USBD_Start>
 8021970:	1e03      	subs	r3, r0, #0
 8021972:	d001      	beq.n	8021978 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8021974:	f7ea fcdc 	bl	800c330 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021978:	46c0      	nop			@ (mov r8, r8)
 802197a:	46bd      	mov	sp, r7
 802197c:	bd80      	pop	{r7, pc}
 802197e:	46c0      	nop			@ (mov r8, r8)
 8021980:	20000218 	.word	0x20000218
 8021984:	2000225c 	.word	0x2000225c
 8021988:	20000104 	.word	0x20000104
 802198c:	20000208 	.word	0x20000208

08021990 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8021990:	b580      	push	{r7, lr}
 8021992:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021994:	4907      	ldr	r1, [pc, #28]	@ (80219b4 <CDC_Init_FS+0x24>)
 8021996:	4b08      	ldr	r3, [pc, #32]	@ (80219b8 <CDC_Init_FS+0x28>)
 8021998:	2200      	movs	r2, #0
 802199a:	0018      	movs	r0, r3
 802199c:	f7fe fd23 	bl	80203e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80219a0:	4a06      	ldr	r2, [pc, #24]	@ (80219bc <CDC_Init_FS+0x2c>)
 80219a2:	4b05      	ldr	r3, [pc, #20]	@ (80219b8 <CDC_Init_FS+0x28>)
 80219a4:	0011      	movs	r1, r2
 80219a6:	0018      	movs	r0, r3
 80219a8:	f7fe fd39 	bl	802041e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80219ac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80219ae:	0018      	movs	r0, r3
 80219b0:	46bd      	mov	sp, r7
 80219b2:	bd80      	pop	{r7, pc}
 80219b4:	200029e0 	.word	0x200029e0
 80219b8:	2000225c 	.word	0x2000225c
 80219bc:	200025e0 	.word	0x200025e0

080219c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80219c0:	b580      	push	{r7, lr}
 80219c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80219c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80219c6:	0018      	movs	r0, r3
 80219c8:	46bd      	mov	sp, r7
 80219ca:	bd80      	pop	{r7, pc}

080219cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80219cc:	b580      	push	{r7, lr}
 80219ce:	b082      	sub	sp, #8
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	6039      	str	r1, [r7, #0]
 80219d4:	0011      	movs	r1, r2
 80219d6:	1dfb      	adds	r3, r7, #7
 80219d8:	1c02      	adds	r2, r0, #0
 80219da:	701a      	strb	r2, [r3, #0]
 80219dc:	1d3b      	adds	r3, r7, #4
 80219de:	1c0a      	adds	r2, r1, #0
 80219e0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80219e2:	1dfb      	adds	r3, r7, #7
 80219e4:	781b      	ldrb	r3, [r3, #0]
 80219e6:	2b23      	cmp	r3, #35	@ 0x23
 80219e8:	d804      	bhi.n	80219f4 <CDC_Control_FS+0x28>
 80219ea:	009a      	lsls	r2, r3, #2
 80219ec:	4b04      	ldr	r3, [pc, #16]	@ (8021a00 <CDC_Control_FS+0x34>)
 80219ee:	18d3      	adds	r3, r2, r3
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80219f4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80219f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80219f8:	0018      	movs	r0, r3
 80219fa:	46bd      	mov	sp, r7
 80219fc:	b002      	add	sp, #8
 80219fe:	bd80      	pop	{r7, pc}
 8021a00:	0802d438 	.word	0x0802d438

08021a04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8021a04:	b580      	push	{r7, lr}
 8021a06:	b082      	sub	sp, #8
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	6078      	str	r0, [r7, #4]
 8021a0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8021a0e:	4b12      	ldr	r3, [pc, #72]	@ (8021a58 <CDC_Receive_FS+0x54>)
 8021a10:	781b      	ldrb	r3, [r3, #0]
 8021a12:	2b00      	cmp	r3, #0
 8021a14:	d013      	beq.n	8021a3e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8021a16:	683b      	ldr	r3, [r7, #0]
 8021a18:	681b      	ldr	r3, [r3, #0]
 8021a1a:	b29a      	uxth	r2, r3
 8021a1c:	2301      	movs	r3, #1
 8021a1e:	425b      	negs	r3, r3
 8021a20:	6879      	ldr	r1, [r7, #4]
 8021a22:	480e      	ldr	r0, [pc, #56]	@ (8021a5c <CDC_Receive_FS+0x58>)
 8021a24:	f7fa fa46 	bl	801beb4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021a28:	687a      	ldr	r2, [r7, #4]
 8021a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8021a60 <CDC_Receive_FS+0x5c>)
 8021a2c:	0011      	movs	r1, r2
 8021a2e:	0018      	movs	r0, r3
 8021a30:	f7fe fcf5 	bl	802041e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021a34:	4b0a      	ldr	r3, [pc, #40]	@ (8021a60 <CDC_Receive_FS+0x5c>)
 8021a36:	0018      	movs	r0, r3
 8021a38:	f7fe fd3c 	bl	80204b4 <USBD_CDC_ReceivePacket>
 8021a3c:	e006      	b.n	8021a4c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8021a3e:	683b      	ldr	r3, [r7, #0]
 8021a40:	681a      	ldr	r2, [r3, #0]
 8021a42:	4b08      	ldr	r3, [pc, #32]	@ (8021a64 <CDC_Receive_FS+0x60>)
 8021a44:	681b      	ldr	r3, [r3, #0]
 8021a46:	18d2      	adds	r2, r2, r3
 8021a48:	4b06      	ldr	r3, [pc, #24]	@ (8021a64 <CDC_Receive_FS+0x60>)
 8021a4a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8021a4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8021a4e:	0018      	movs	r0, r3
 8021a50:	46bd      	mov	sp, r7
 8021a52:	b002      	add	sp, #8
 8021a54:	bd80      	pop	{r7, pc}
 8021a56:	46c0      	nop			@ (mov r8, r8)
 8021a58:	20002520 	.word	0x20002520
 8021a5c:	20002524 	.word	0x20002524
 8021a60:	2000225c 	.word	0x2000225c
 8021a64:	200025dc 	.word	0x200025dc

08021a68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8021a68:	b5b0      	push	{r4, r5, r7, lr}
 8021a6a:	b084      	sub	sp, #16
 8021a6c:	af00      	add	r7, sp, #0
 8021a6e:	6078      	str	r0, [r7, #4]
 8021a70:	000a      	movs	r2, r1
 8021a72:	1cbb      	adds	r3, r7, #2
 8021a74:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8021a76:	230f      	movs	r3, #15
 8021a78:	18fb      	adds	r3, r7, r3
 8021a7a:	2200      	movs	r2, #0
 8021a7c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8021a7e:	4a11      	ldr	r2, [pc, #68]	@ (8021ac4 <CDC_Transmit_FS+0x5c>)
 8021a80:	23ae      	movs	r3, #174	@ 0xae
 8021a82:	009b      	lsls	r3, r3, #2
 8021a84:	58d3      	ldr	r3, [r2, r3]
 8021a86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8021a88:	68ba      	ldr	r2, [r7, #8]
 8021a8a:	2385      	movs	r3, #133	@ 0x85
 8021a8c:	009b      	lsls	r3, r3, #2
 8021a8e:	58d3      	ldr	r3, [r2, r3]
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	d001      	beq.n	8021a98 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8021a94:	2301      	movs	r3, #1
 8021a96:	e010      	b.n	8021aba <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8021a98:	1cbb      	adds	r3, r7, #2
 8021a9a:	881a      	ldrh	r2, [r3, #0]
 8021a9c:	6879      	ldr	r1, [r7, #4]
 8021a9e:	4b09      	ldr	r3, [pc, #36]	@ (8021ac4 <CDC_Transmit_FS+0x5c>)
 8021aa0:	0018      	movs	r0, r3
 8021aa2:	f7fe fca0 	bl	80203e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8021aa6:	250f      	movs	r5, #15
 8021aa8:	197c      	adds	r4, r7, r5
 8021aaa:	4b06      	ldr	r3, [pc, #24]	@ (8021ac4 <CDC_Transmit_FS+0x5c>)
 8021aac:	0018      	movs	r0, r3
 8021aae:	f7fe fcca 	bl	8020446 <USBD_CDC_TransmitPacket>
 8021ab2:	0003      	movs	r3, r0
 8021ab4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8021ab6:	197b      	adds	r3, r7, r5
 8021ab8:	781b      	ldrb	r3, [r3, #0]
}
 8021aba:	0018      	movs	r0, r3
 8021abc:	46bd      	mov	sp, r7
 8021abe:	b004      	add	sp, #16
 8021ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8021ac2:	46c0      	nop			@ (mov r8, r8)
 8021ac4:	2000225c 	.word	0x2000225c

08021ac8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8021ac8:	b580      	push	{r7, lr}
 8021aca:	af00      	add	r7, sp, #0
  ESPProg = true;
 8021acc:	4b02      	ldr	r3, [pc, #8]	@ (8021ad8 <EnableESPProg+0x10>)
 8021ace:	2201      	movs	r2, #1
 8021ad0:	701a      	strb	r2, [r3, #0]
}
 8021ad2:	46c0      	nop			@ (mov r8, r8)
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	bd80      	pop	{r7, pc}
 8021ad8:	20002520 	.word	0x20002520

08021adc <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8021ae0:	4b01      	ldr	r3, [pc, #4]	@ (8021ae8 <GetUsbRxPointer+0xc>)
}
 8021ae2:	0018      	movs	r0, r3
 8021ae4:	46bd      	mov	sp, r7
 8021ae6:	bd80      	pop	{r7, pc}
 8021ae8:	200025e0 	.word	0x200025e0

08021aec <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8021aec:	b580      	push	{r7, lr}
 8021aee:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8021af0:	4b07      	ldr	r3, [pc, #28]	@ (8021b10 <ResetUsbRxDataSize+0x24>)
 8021af2:	2200      	movs	r2, #0
 8021af4:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8021af6:	4a07      	ldr	r2, [pc, #28]	@ (8021b14 <ResetUsbRxDataSize+0x28>)
 8021af8:	4b07      	ldr	r3, [pc, #28]	@ (8021b18 <ResetUsbRxDataSize+0x2c>)
 8021afa:	0011      	movs	r1, r2
 8021afc:	0018      	movs	r0, r3
 8021afe:	f7fe fc8e 	bl	802041e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021b02:	4b05      	ldr	r3, [pc, #20]	@ (8021b18 <ResetUsbRxDataSize+0x2c>)
 8021b04:	0018      	movs	r0, r3
 8021b06:	f7fe fcd5 	bl	80204b4 <USBD_CDC_ReceivePacket>
}
 8021b0a:	46c0      	nop			@ (mov r8, r8)
 8021b0c:	46bd      	mov	sp, r7
 8021b0e:	bd80      	pop	{r7, pc}
 8021b10:	200025dc 	.word	0x200025dc
 8021b14:	200025e0 	.word	0x200025e0
 8021b18:	2000225c 	.word	0x2000225c

08021b1c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8021b20:	4b02      	ldr	r3, [pc, #8]	@ (8021b2c <GetUsbRxDataSize+0x10>)
 8021b22:	681b      	ldr	r3, [r3, #0]
}
 8021b24:	0018      	movs	r0, r3
 8021b26:	46bd      	mov	sp, r7
 8021b28:	bd80      	pop	{r7, pc}
 8021b2a:	46c0      	nop			@ (mov r8, r8)
 8021b2c:	200025dc 	.word	0x200025dc

08021b30 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8021b30:	b580      	push	{r7, lr}
 8021b32:	b082      	sub	sp, #8
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8021b38:	687a      	ldr	r2, [r7, #4]
 8021b3a:	4b07      	ldr	r3, [pc, #28]	@ (8021b58 <GetUsbRxNextChunk+0x28>)
 8021b3c:	18d2      	adds	r2, r2, r3
 8021b3e:	4b07      	ldr	r3, [pc, #28]	@ (8021b5c <GetUsbRxNextChunk+0x2c>)
 8021b40:	0011      	movs	r1, r2
 8021b42:	0018      	movs	r0, r3
 8021b44:	f7fe fc6b 	bl	802041e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021b48:	4b04      	ldr	r3, [pc, #16]	@ (8021b5c <GetUsbRxNextChunk+0x2c>)
 8021b4a:	0018      	movs	r0, r3
 8021b4c:	f7fe fcb2 	bl	80204b4 <USBD_CDC_ReceivePacket>
}
 8021b50:	46c0      	nop			@ (mov r8, r8)
 8021b52:	46bd      	mov	sp, r7
 8021b54:	b002      	add	sp, #8
 8021b56:	bd80      	pop	{r7, pc}
 8021b58:	200025e0 	.word	0x200025e0
 8021b5c:	2000225c 	.word	0x2000225c

08021b60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021b60:	b580      	push	{r7, lr}
 8021b62:	b082      	sub	sp, #8
 8021b64:	af00      	add	r7, sp, #0
 8021b66:	0002      	movs	r2, r0
 8021b68:	6039      	str	r1, [r7, #0]
 8021b6a:	1dfb      	adds	r3, r7, #7
 8021b6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8021b6e:	683b      	ldr	r3, [r7, #0]
 8021b70:	2212      	movs	r2, #18
 8021b72:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8021b74:	4b02      	ldr	r3, [pc, #8]	@ (8021b80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8021b76:	0018      	movs	r0, r3
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	b002      	add	sp, #8
 8021b7c:	bd80      	pop	{r7, pc}
 8021b7e:	46c0      	nop			@ (mov r8, r8)
 8021b80:	20000234 	.word	0x20000234

08021b84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021b84:	b580      	push	{r7, lr}
 8021b86:	b082      	sub	sp, #8
 8021b88:	af00      	add	r7, sp, #0
 8021b8a:	0002      	movs	r2, r0
 8021b8c:	6039      	str	r1, [r7, #0]
 8021b8e:	1dfb      	adds	r3, r7, #7
 8021b90:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021b92:	683b      	ldr	r3, [r7, #0]
 8021b94:	2204      	movs	r2, #4
 8021b96:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8021b98:	4b02      	ldr	r3, [pc, #8]	@ (8021ba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8021b9a:	0018      	movs	r0, r3
 8021b9c:	46bd      	mov	sp, r7
 8021b9e:	b002      	add	sp, #8
 8021ba0:	bd80      	pop	{r7, pc}
 8021ba2:	46c0      	nop			@ (mov r8, r8)
 8021ba4:	20000248 	.word	0x20000248

08021ba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021ba8:	b580      	push	{r7, lr}
 8021baa:	b082      	sub	sp, #8
 8021bac:	af00      	add	r7, sp, #0
 8021bae:	0002      	movs	r2, r0
 8021bb0:	6039      	str	r1, [r7, #0]
 8021bb2:	1dfb      	adds	r3, r7, #7
 8021bb4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8021bb6:	1dfb      	adds	r3, r7, #7
 8021bb8:	781b      	ldrb	r3, [r3, #0]
 8021bba:	2b00      	cmp	r3, #0
 8021bbc:	d106      	bne.n	8021bcc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021bbe:	683a      	ldr	r2, [r7, #0]
 8021bc0:	4908      	ldr	r1, [pc, #32]	@ (8021be4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8021bc2:	4b09      	ldr	r3, [pc, #36]	@ (8021be8 <USBD_FS_ProductStrDescriptor+0x40>)
 8021bc4:	0018      	movs	r0, r3
 8021bc6:	f7ff fdb1 	bl	802172c <USBD_GetString>
 8021bca:	e005      	b.n	8021bd8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021bcc:	683a      	ldr	r2, [r7, #0]
 8021bce:	4905      	ldr	r1, [pc, #20]	@ (8021be4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8021bd0:	4b05      	ldr	r3, [pc, #20]	@ (8021be8 <USBD_FS_ProductStrDescriptor+0x40>)
 8021bd2:	0018      	movs	r0, r3
 8021bd4:	f7ff fdaa 	bl	802172c <USBD_GetString>
  }
  return USBD_StrDesc;
 8021bd8:	4b02      	ldr	r3, [pc, #8]	@ (8021be4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8021bda:	0018      	movs	r0, r3
 8021bdc:	46bd      	mov	sp, r7
 8021bde:	b002      	add	sp, #8
 8021be0:	bd80      	pop	{r7, pc}
 8021be2:	46c0      	nop			@ (mov r8, r8)
 8021be4:	20002de0 	.word	0x20002de0
 8021be8:	0802cdfc 	.word	0x0802cdfc

08021bec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021bec:	b580      	push	{r7, lr}
 8021bee:	b082      	sub	sp, #8
 8021bf0:	af00      	add	r7, sp, #0
 8021bf2:	0002      	movs	r2, r0
 8021bf4:	6039      	str	r1, [r7, #0]
 8021bf6:	1dfb      	adds	r3, r7, #7
 8021bf8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021bfa:	683a      	ldr	r2, [r7, #0]
 8021bfc:	4904      	ldr	r1, [pc, #16]	@ (8021c10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8021bfe:	4b05      	ldr	r3, [pc, #20]	@ (8021c14 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8021c00:	0018      	movs	r0, r3
 8021c02:	f7ff fd93 	bl	802172c <USBD_GetString>
  return USBD_StrDesc;
 8021c06:	4b02      	ldr	r3, [pc, #8]	@ (8021c10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8021c08:	0018      	movs	r0, r3
 8021c0a:	46bd      	mov	sp, r7
 8021c0c:	b002      	add	sp, #8
 8021c0e:	bd80      	pop	{r7, pc}
 8021c10:	20002de0 	.word	0x20002de0
 8021c14:	0802ce14 	.word	0x0802ce14

08021c18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	b082      	sub	sp, #8
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	0002      	movs	r2, r0
 8021c20:	6039      	str	r1, [r7, #0]
 8021c22:	1dfb      	adds	r3, r7, #7
 8021c24:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8021c26:	683b      	ldr	r3, [r7, #0]
 8021c28:	221a      	movs	r2, #26
 8021c2a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8021c2c:	f000 f84c 	bl	8021cc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8021c30:	4b02      	ldr	r3, [pc, #8]	@ (8021c3c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8021c32:	0018      	movs	r0, r3
 8021c34:	46bd      	mov	sp, r7
 8021c36:	b002      	add	sp, #8
 8021c38:	bd80      	pop	{r7, pc}
 8021c3a:	46c0      	nop			@ (mov r8, r8)
 8021c3c:	2000024c 	.word	0x2000024c

08021c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021c40:	b580      	push	{r7, lr}
 8021c42:	b082      	sub	sp, #8
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	0002      	movs	r2, r0
 8021c48:	6039      	str	r1, [r7, #0]
 8021c4a:	1dfb      	adds	r3, r7, #7
 8021c4c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8021c4e:	1dfb      	adds	r3, r7, #7
 8021c50:	781b      	ldrb	r3, [r3, #0]
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d106      	bne.n	8021c64 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021c56:	683a      	ldr	r2, [r7, #0]
 8021c58:	4908      	ldr	r1, [pc, #32]	@ (8021c7c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8021c5a:	4b09      	ldr	r3, [pc, #36]	@ (8021c80 <USBD_FS_ConfigStrDescriptor+0x40>)
 8021c5c:	0018      	movs	r0, r3
 8021c5e:	f7ff fd65 	bl	802172c <USBD_GetString>
 8021c62:	e005      	b.n	8021c70 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021c64:	683a      	ldr	r2, [r7, #0]
 8021c66:	4905      	ldr	r1, [pc, #20]	@ (8021c7c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8021c68:	4b05      	ldr	r3, [pc, #20]	@ (8021c80 <USBD_FS_ConfigStrDescriptor+0x40>)
 8021c6a:	0018      	movs	r0, r3
 8021c6c:	f7ff fd5e 	bl	802172c <USBD_GetString>
  }
  return USBD_StrDesc;
 8021c70:	4b02      	ldr	r3, [pc, #8]	@ (8021c7c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8021c72:	0018      	movs	r0, r3
 8021c74:	46bd      	mov	sp, r7
 8021c76:	b002      	add	sp, #8
 8021c78:	bd80      	pop	{r7, pc}
 8021c7a:	46c0      	nop			@ (mov r8, r8)
 8021c7c:	20002de0 	.word	0x20002de0
 8021c80:	0802ce28 	.word	0x0802ce28

08021c84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021c84:	b580      	push	{r7, lr}
 8021c86:	b082      	sub	sp, #8
 8021c88:	af00      	add	r7, sp, #0
 8021c8a:	0002      	movs	r2, r0
 8021c8c:	6039      	str	r1, [r7, #0]
 8021c8e:	1dfb      	adds	r3, r7, #7
 8021c90:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8021c92:	1dfb      	adds	r3, r7, #7
 8021c94:	781b      	ldrb	r3, [r3, #0]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d106      	bne.n	8021ca8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021c9a:	683a      	ldr	r2, [r7, #0]
 8021c9c:	4908      	ldr	r1, [pc, #32]	@ (8021cc0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8021c9e:	4b09      	ldr	r3, [pc, #36]	@ (8021cc4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8021ca0:	0018      	movs	r0, r3
 8021ca2:	f7ff fd43 	bl	802172c <USBD_GetString>
 8021ca6:	e005      	b.n	8021cb4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021ca8:	683a      	ldr	r2, [r7, #0]
 8021caa:	4905      	ldr	r1, [pc, #20]	@ (8021cc0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8021cac:	4b05      	ldr	r3, [pc, #20]	@ (8021cc4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8021cae:	0018      	movs	r0, r3
 8021cb0:	f7ff fd3c 	bl	802172c <USBD_GetString>
  }
  return USBD_StrDesc;
 8021cb4:	4b02      	ldr	r3, [pc, #8]	@ (8021cc0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8021cb6:	0018      	movs	r0, r3
 8021cb8:	46bd      	mov	sp, r7
 8021cba:	b002      	add	sp, #8
 8021cbc:	bd80      	pop	{r7, pc}
 8021cbe:	46c0      	nop			@ (mov r8, r8)
 8021cc0:	20002de0 	.word	0x20002de0
 8021cc4:	0802ce34 	.word	0x0802ce34

08021cc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8021cc8:	b580      	push	{r7, lr}
 8021cca:	b084      	sub	sp, #16
 8021ccc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021cce:	4b10      	ldr	r3, [pc, #64]	@ (8021d10 <Get_SerialNum+0x48>)
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8021d14 <Get_SerialNum+0x4c>)
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8021cda:	4b0f      	ldr	r3, [pc, #60]	@ (8021d18 <Get_SerialNum+0x50>)
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8021ce0:	68fa      	ldr	r2, [r7, #12]
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	18d3      	adds	r3, r2, r3
 8021ce6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8021ce8:	68fb      	ldr	r3, [r7, #12]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d00b      	beq.n	8021d06 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8021cee:	490b      	ldr	r1, [pc, #44]	@ (8021d1c <Get_SerialNum+0x54>)
 8021cf0:	68fb      	ldr	r3, [r7, #12]
 8021cf2:	2208      	movs	r2, #8
 8021cf4:	0018      	movs	r0, r3
 8021cf6:	f000 f815 	bl	8021d24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8021cfa:	4909      	ldr	r1, [pc, #36]	@ (8021d20 <Get_SerialNum+0x58>)
 8021cfc:	68bb      	ldr	r3, [r7, #8]
 8021cfe:	2204      	movs	r2, #4
 8021d00:	0018      	movs	r0, r3
 8021d02:	f000 f80f 	bl	8021d24 <IntToUnicode>
  }
}
 8021d06:	46c0      	nop			@ (mov r8, r8)
 8021d08:	46bd      	mov	sp, r7
 8021d0a:	b004      	add	sp, #16
 8021d0c:	bd80      	pop	{r7, pc}
 8021d0e:	46c0      	nop			@ (mov r8, r8)
 8021d10:	1ff80050 	.word	0x1ff80050
 8021d14:	1ff80054 	.word	0x1ff80054
 8021d18:	1ff80058 	.word	0x1ff80058
 8021d1c:	2000024e 	.word	0x2000024e
 8021d20:	2000025e 	.word	0x2000025e

08021d24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8021d24:	b580      	push	{r7, lr}
 8021d26:	b086      	sub	sp, #24
 8021d28:	af00      	add	r7, sp, #0
 8021d2a:	60f8      	str	r0, [r7, #12]
 8021d2c:	60b9      	str	r1, [r7, #8]
 8021d2e:	1dfb      	adds	r3, r7, #7
 8021d30:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8021d32:	2117      	movs	r1, #23
 8021d34:	187b      	adds	r3, r7, r1
 8021d36:	2200      	movs	r2, #0
 8021d38:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8021d3a:	187b      	adds	r3, r7, r1
 8021d3c:	2200      	movs	r2, #0
 8021d3e:	701a      	strb	r2, [r3, #0]
 8021d40:	e02f      	b.n	8021da2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	0f1b      	lsrs	r3, r3, #28
 8021d46:	2b09      	cmp	r3, #9
 8021d48:	d80d      	bhi.n	8021d66 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8021d4a:	68fb      	ldr	r3, [r7, #12]
 8021d4c:	0f1b      	lsrs	r3, r3, #28
 8021d4e:	b2da      	uxtb	r2, r3
 8021d50:	2317      	movs	r3, #23
 8021d52:	18fb      	adds	r3, r7, r3
 8021d54:	781b      	ldrb	r3, [r3, #0]
 8021d56:	005b      	lsls	r3, r3, #1
 8021d58:	0019      	movs	r1, r3
 8021d5a:	68bb      	ldr	r3, [r7, #8]
 8021d5c:	185b      	adds	r3, r3, r1
 8021d5e:	3230      	adds	r2, #48	@ 0x30
 8021d60:	b2d2      	uxtb	r2, r2
 8021d62:	701a      	strb	r2, [r3, #0]
 8021d64:	e00c      	b.n	8021d80 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021d66:	68fb      	ldr	r3, [r7, #12]
 8021d68:	0f1b      	lsrs	r3, r3, #28
 8021d6a:	b2da      	uxtb	r2, r3
 8021d6c:	2317      	movs	r3, #23
 8021d6e:	18fb      	adds	r3, r7, r3
 8021d70:	781b      	ldrb	r3, [r3, #0]
 8021d72:	005b      	lsls	r3, r3, #1
 8021d74:	0019      	movs	r1, r3
 8021d76:	68bb      	ldr	r3, [r7, #8]
 8021d78:	185b      	adds	r3, r3, r1
 8021d7a:	3237      	adds	r2, #55	@ 0x37
 8021d7c:	b2d2      	uxtb	r2, r2
 8021d7e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	011b      	lsls	r3, r3, #4
 8021d84:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8021d86:	2117      	movs	r1, #23
 8021d88:	187b      	adds	r3, r7, r1
 8021d8a:	781b      	ldrb	r3, [r3, #0]
 8021d8c:	005b      	lsls	r3, r3, #1
 8021d8e:	3301      	adds	r3, #1
 8021d90:	68ba      	ldr	r2, [r7, #8]
 8021d92:	18d3      	adds	r3, r2, r3
 8021d94:	2200      	movs	r2, #0
 8021d96:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8021d98:	187b      	adds	r3, r7, r1
 8021d9a:	781a      	ldrb	r2, [r3, #0]
 8021d9c:	187b      	adds	r3, r7, r1
 8021d9e:	3201      	adds	r2, #1
 8021da0:	701a      	strb	r2, [r3, #0]
 8021da2:	2317      	movs	r3, #23
 8021da4:	18fa      	adds	r2, r7, r3
 8021da6:	1dfb      	adds	r3, r7, #7
 8021da8:	7812      	ldrb	r2, [r2, #0]
 8021daa:	781b      	ldrb	r3, [r3, #0]
 8021dac:	429a      	cmp	r2, r3
 8021dae:	d3c8      	bcc.n	8021d42 <IntToUnicode+0x1e>
  }
}
 8021db0:	46c0      	nop			@ (mov r8, r8)
 8021db2:	46c0      	nop			@ (mov r8, r8)
 8021db4:	46bd      	mov	sp, r7
 8021db6:	b006      	add	sp, #24
 8021db8:	bd80      	pop	{r7, pc}
	...

08021dbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8021dbc:	b580      	push	{r7, lr}
 8021dbe:	b082      	sub	sp, #8
 8021dc0:	af00      	add	r7, sp, #0
 8021dc2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	681b      	ldr	r3, [r3, #0]
 8021dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8021df4 <HAL_PCD_MspInit+0x38>)
 8021dca:	4293      	cmp	r3, r2
 8021dcc:	d10e      	bne.n	8021dec <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8021dce:	4b0a      	ldr	r3, [pc, #40]	@ (8021df8 <HAL_PCD_MspInit+0x3c>)
 8021dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021dd2:	4b09      	ldr	r3, [pc, #36]	@ (8021df8 <HAL_PCD_MspInit+0x3c>)
 8021dd4:	2180      	movs	r1, #128	@ 0x80
 8021dd6:	0409      	lsls	r1, r1, #16
 8021dd8:	430a      	orrs	r2, r1
 8021dda:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8021ddc:	2200      	movs	r2, #0
 8021dde:	2100      	movs	r1, #0
 8021de0:	201f      	movs	r0, #31
 8021de2:	f7f2 f847 	bl	8013e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8021de6:	201f      	movs	r0, #31
 8021de8:	f7f2 f859 	bl	8013e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8021dec:	46c0      	nop			@ (mov r8, r8)
 8021dee:	46bd      	mov	sp, r7
 8021df0:	b002      	add	sp, #8
 8021df2:	bd80      	pop	{r7, pc}
 8021df4:	40005c00 	.word	0x40005c00
 8021df8:	40021000 	.word	0x40021000

08021dfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021dfc:	b580      	push	{r7, lr}
 8021dfe:	b082      	sub	sp, #8
 8021e00:	af00      	add	r7, sp, #0
 8021e02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021e04:	687a      	ldr	r2, [r7, #4]
 8021e06:	23bc      	movs	r3, #188	@ 0xbc
 8021e08:	009b      	lsls	r3, r3, #2
 8021e0a:	58d2      	ldr	r2, [r2, r3]
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	21ac      	movs	r1, #172	@ 0xac
 8021e10:	0089      	lsls	r1, r1, #2
 8021e12:	468c      	mov	ip, r1
 8021e14:	4463      	add	r3, ip
 8021e16:	0019      	movs	r1, r3
 8021e18:	0010      	movs	r0, r2
 8021e1a:	f7fe fc1d 	bl	8020658 <USBD_LL_SetupStage>
}
 8021e1e:	46c0      	nop			@ (mov r8, r8)
 8021e20:	46bd      	mov	sp, r7
 8021e22:	b002      	add	sp, #8
 8021e24:	bd80      	pop	{r7, pc}

08021e26 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021e26:	b590      	push	{r4, r7, lr}
 8021e28:	b083      	sub	sp, #12
 8021e2a:	af00      	add	r7, sp, #0
 8021e2c:	6078      	str	r0, [r7, #4]
 8021e2e:	000a      	movs	r2, r1
 8021e30:	1cfb      	adds	r3, r7, #3
 8021e32:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021e34:	687a      	ldr	r2, [r7, #4]
 8021e36:	23bc      	movs	r3, #188	@ 0xbc
 8021e38:	009b      	lsls	r3, r3, #2
 8021e3a:	58d4      	ldr	r4, [r2, r3]
 8021e3c:	1cfb      	adds	r3, r7, #3
 8021e3e:	781a      	ldrb	r2, [r3, #0]
 8021e40:	6878      	ldr	r0, [r7, #4]
 8021e42:	23be      	movs	r3, #190	@ 0xbe
 8021e44:	0059      	lsls	r1, r3, #1
 8021e46:	0013      	movs	r3, r2
 8021e48:	009b      	lsls	r3, r3, #2
 8021e4a:	189b      	adds	r3, r3, r2
 8021e4c:	00db      	lsls	r3, r3, #3
 8021e4e:	18c3      	adds	r3, r0, r3
 8021e50:	185b      	adds	r3, r3, r1
 8021e52:	681a      	ldr	r2, [r3, #0]
 8021e54:	1cfb      	adds	r3, r7, #3
 8021e56:	781b      	ldrb	r3, [r3, #0]
 8021e58:	0019      	movs	r1, r3
 8021e5a:	0020      	movs	r0, r4
 8021e5c:	f7fe fc5a 	bl	8020714 <USBD_LL_DataOutStage>
}
 8021e60:	46c0      	nop			@ (mov r8, r8)
 8021e62:	46bd      	mov	sp, r7
 8021e64:	b003      	add	sp, #12
 8021e66:	bd90      	pop	{r4, r7, pc}

08021e68 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021e68:	b580      	push	{r7, lr}
 8021e6a:	b082      	sub	sp, #8
 8021e6c:	af00      	add	r7, sp, #0
 8021e6e:	6078      	str	r0, [r7, #4]
 8021e70:	000a      	movs	r2, r1
 8021e72:	1cfb      	adds	r3, r7, #3
 8021e74:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8021e76:	687a      	ldr	r2, [r7, #4]
 8021e78:	23bc      	movs	r3, #188	@ 0xbc
 8021e7a:	009b      	lsls	r3, r3, #2
 8021e7c:	58d0      	ldr	r0, [r2, r3]
 8021e7e:	1cfb      	adds	r3, r7, #3
 8021e80:	781a      	ldrb	r2, [r3, #0]
 8021e82:	6879      	ldr	r1, [r7, #4]
 8021e84:	0013      	movs	r3, r2
 8021e86:	009b      	lsls	r3, r3, #2
 8021e88:	189b      	adds	r3, r3, r2
 8021e8a:	00db      	lsls	r3, r3, #3
 8021e8c:	18cb      	adds	r3, r1, r3
 8021e8e:	333c      	adds	r3, #60	@ 0x3c
 8021e90:	681a      	ldr	r2, [r3, #0]
 8021e92:	1cfb      	adds	r3, r7, #3
 8021e94:	781b      	ldrb	r3, [r3, #0]
 8021e96:	0019      	movs	r1, r3
 8021e98:	f7fe fcbe 	bl	8020818 <USBD_LL_DataInStage>
}
 8021e9c:	46c0      	nop			@ (mov r8, r8)
 8021e9e:	46bd      	mov	sp, r7
 8021ea0:	b002      	add	sp, #8
 8021ea2:	bd80      	pop	{r7, pc}

08021ea4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b082      	sub	sp, #8
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8021eac:	687a      	ldr	r2, [r7, #4]
 8021eae:	23bc      	movs	r3, #188	@ 0xbc
 8021eb0:	009b      	lsls	r3, r3, #2
 8021eb2:	58d3      	ldr	r3, [r2, r3]
 8021eb4:	0018      	movs	r0, r3
 8021eb6:	f7fe fdf5 	bl	8020aa4 <USBD_LL_SOF>
}
 8021eba:	46c0      	nop			@ (mov r8, r8)
 8021ebc:	46bd      	mov	sp, r7
 8021ebe:	b002      	add	sp, #8
 8021ec0:	bd80      	pop	{r7, pc}

08021ec2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021ec2:	b580      	push	{r7, lr}
 8021ec4:	b084      	sub	sp, #16
 8021ec6:	af00      	add	r7, sp, #0
 8021ec8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8021eca:	230f      	movs	r3, #15
 8021ecc:	18fb      	adds	r3, r7, r3
 8021ece:	2201      	movs	r2, #1
 8021ed0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	689b      	ldr	r3, [r3, #8]
 8021ed6:	2b02      	cmp	r3, #2
 8021ed8:	d001      	beq.n	8021ede <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8021eda:	f7ea fa29 	bl	800c330 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021ede:	687a      	ldr	r2, [r7, #4]
 8021ee0:	23bc      	movs	r3, #188	@ 0xbc
 8021ee2:	009b      	lsls	r3, r3, #2
 8021ee4:	58d2      	ldr	r2, [r2, r3]
 8021ee6:	230f      	movs	r3, #15
 8021ee8:	18fb      	adds	r3, r7, r3
 8021eea:	781b      	ldrb	r3, [r3, #0]
 8021eec:	0019      	movs	r1, r3
 8021eee:	0010      	movs	r0, r2
 8021ef0:	f7fe fd97 	bl	8020a22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021ef4:	687a      	ldr	r2, [r7, #4]
 8021ef6:	23bc      	movs	r3, #188	@ 0xbc
 8021ef8:	009b      	lsls	r3, r3, #2
 8021efa:	58d3      	ldr	r3, [r2, r3]
 8021efc:	0018      	movs	r0, r3
 8021efe:	f7fe fd48 	bl	8020992 <USBD_LL_Reset>
}
 8021f02:	46c0      	nop			@ (mov r8, r8)
 8021f04:	46bd      	mov	sp, r7
 8021f06:	b004      	add	sp, #16
 8021f08:	bd80      	pop	{r7, pc}
	...

08021f0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021f0c:	b580      	push	{r7, lr}
 8021f0e:	b082      	sub	sp, #8
 8021f10:	af00      	add	r7, sp, #0
 8021f12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021f14:	687a      	ldr	r2, [r7, #4]
 8021f16:	23bc      	movs	r3, #188	@ 0xbc
 8021f18:	009b      	lsls	r3, r3, #2
 8021f1a:	58d3      	ldr	r3, [r2, r3]
 8021f1c:	0018      	movs	r0, r3
 8021f1e:	f7fe fd91 	bl	8020a44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	699b      	ldr	r3, [r3, #24]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d005      	beq.n	8021f36 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021f2a:	4b05      	ldr	r3, [pc, #20]	@ (8021f40 <HAL_PCD_SuspendCallback+0x34>)
 8021f2c:	691a      	ldr	r2, [r3, #16]
 8021f2e:	4b04      	ldr	r3, [pc, #16]	@ (8021f40 <HAL_PCD_SuspendCallback+0x34>)
 8021f30:	2106      	movs	r1, #6
 8021f32:	430a      	orrs	r2, r1
 8021f34:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8021f36:	46c0      	nop			@ (mov r8, r8)
 8021f38:	46bd      	mov	sp, r7
 8021f3a:	b002      	add	sp, #8
 8021f3c:	bd80      	pop	{r7, pc}
 8021f3e:	46c0      	nop			@ (mov r8, r8)
 8021f40:	e000ed00 	.word	0xe000ed00

08021f44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021f44:	b580      	push	{r7, lr}
 8021f46:	b082      	sub	sp, #8
 8021f48:	af00      	add	r7, sp, #0
 8021f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	699b      	ldr	r3, [r3, #24]
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d007      	beq.n	8021f64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021f54:	4b09      	ldr	r3, [pc, #36]	@ (8021f7c <HAL_PCD_ResumeCallback+0x38>)
 8021f56:	691a      	ldr	r2, [r3, #16]
 8021f58:	4b08      	ldr	r3, [pc, #32]	@ (8021f7c <HAL_PCD_ResumeCallback+0x38>)
 8021f5a:	2106      	movs	r1, #6
 8021f5c:	438a      	bics	r2, r1
 8021f5e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8021f60:	f000 fa44 	bl	80223ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8021f64:	687a      	ldr	r2, [r7, #4]
 8021f66:	23bc      	movs	r3, #188	@ 0xbc
 8021f68:	009b      	lsls	r3, r3, #2
 8021f6a:	58d3      	ldr	r3, [r2, r3]
 8021f6c:	0018      	movs	r0, r3
 8021f6e:	f7fe fd81 	bl	8020a74 <USBD_LL_Resume>
}
 8021f72:	46c0      	nop			@ (mov r8, r8)
 8021f74:	46bd      	mov	sp, r7
 8021f76:	b002      	add	sp, #8
 8021f78:	bd80      	pop	{r7, pc}
 8021f7a:	46c0      	nop			@ (mov r8, r8)
 8021f7c:	e000ed00 	.word	0xe000ed00

08021f80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8021f80:	b580      	push	{r7, lr}
 8021f82:	b082      	sub	sp, #8
 8021f84:	af00      	add	r7, sp, #0
 8021f86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8021f88:	4a2d      	ldr	r2, [pc, #180]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021f8a:	23bc      	movs	r3, #188	@ 0xbc
 8021f8c:	009b      	lsls	r3, r3, #2
 8021f8e:	6879      	ldr	r1, [r7, #4]
 8021f90:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8021f92:	687a      	ldr	r2, [r7, #4]
 8021f94:	23b0      	movs	r3, #176	@ 0xb0
 8021f96:	009b      	lsls	r3, r3, #2
 8021f98:	4929      	ldr	r1, [pc, #164]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021f9a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8021f9c:	4b28      	ldr	r3, [pc, #160]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021f9e:	4a29      	ldr	r2, [pc, #164]	@ (8022044 <USBD_LL_Init+0xc4>)
 8021fa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8021fa2:	4b27      	ldr	r3, [pc, #156]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021fa4:	2208      	movs	r2, #8
 8021fa6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8021fa8:	4b25      	ldr	r3, [pc, #148]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021faa:	2202      	movs	r2, #2
 8021fac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021fae:	4b24      	ldr	r3, [pc, #144]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021fb0:	2202      	movs	r2, #2
 8021fb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8021fb4:	4b22      	ldr	r3, [pc, #136]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021fb6:	2200      	movs	r2, #0
 8021fb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8021fba:	4b21      	ldr	r3, [pc, #132]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021fbc:	2200      	movs	r2, #0
 8021fbe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8021fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021fc2:	2200      	movs	r2, #0
 8021fc4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8021fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8022040 <USBD_LL_Init+0xc0>)
 8021fc8:	0018      	movs	r0, r3
 8021fca:	f7f5 ff95 	bl	8017ef8 <HAL_PCD_Init>
 8021fce:	1e03      	subs	r3, r0, #0
 8021fd0:	d001      	beq.n	8021fd6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8021fd2:	f7ea f9ad 	bl	800c330 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8021fd6:	687a      	ldr	r2, [r7, #4]
 8021fd8:	23b0      	movs	r3, #176	@ 0xb0
 8021fda:	009b      	lsls	r3, r3, #2
 8021fdc:	58d0      	ldr	r0, [r2, r3]
 8021fde:	2318      	movs	r3, #24
 8021fe0:	2200      	movs	r2, #0
 8021fe2:	2100      	movs	r1, #0
 8021fe4:	f7f7 fd56 	bl	8019a94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8021fe8:	687a      	ldr	r2, [r7, #4]
 8021fea:	23b0      	movs	r3, #176	@ 0xb0
 8021fec:	009b      	lsls	r3, r3, #2
 8021fee:	58d0      	ldr	r0, [r2, r3]
 8021ff0:	2358      	movs	r3, #88	@ 0x58
 8021ff2:	2200      	movs	r2, #0
 8021ff4:	2180      	movs	r1, #128	@ 0x80
 8021ff6:	f7f7 fd4d 	bl	8019a94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8021ffa:	687a      	ldr	r2, [r7, #4]
 8021ffc:	23b0      	movs	r3, #176	@ 0xb0
 8021ffe:	009b      	lsls	r3, r3, #2
 8022000:	58d0      	ldr	r0, [r2, r3]
 8022002:	23c0      	movs	r3, #192	@ 0xc0
 8022004:	2200      	movs	r2, #0
 8022006:	2181      	movs	r1, #129	@ 0x81
 8022008:	f7f7 fd44 	bl	8019a94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802200c:	687a      	ldr	r2, [r7, #4]
 802200e:	23b0      	movs	r3, #176	@ 0xb0
 8022010:	009b      	lsls	r3, r3, #2
 8022012:	58d0      	ldr	r0, [r2, r3]
 8022014:	2388      	movs	r3, #136	@ 0x88
 8022016:	005b      	lsls	r3, r3, #1
 8022018:	2200      	movs	r2, #0
 802201a:	2101      	movs	r1, #1
 802201c:	f7f7 fd3a 	bl	8019a94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8022020:	687a      	ldr	r2, [r7, #4]
 8022022:	23b0      	movs	r3, #176	@ 0xb0
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	58d0      	ldr	r0, [r2, r3]
 8022028:	2380      	movs	r3, #128	@ 0x80
 802202a:	005b      	lsls	r3, r3, #1
 802202c:	2200      	movs	r2, #0
 802202e:	2182      	movs	r1, #130	@ 0x82
 8022030:	f7f7 fd30 	bl	8019a94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8022034:	2300      	movs	r3, #0
}
 8022036:	0018      	movs	r0, r3
 8022038:	46bd      	mov	sp, r7
 802203a:	b002      	add	sp, #8
 802203c:	bd80      	pop	{r7, pc}
 802203e:	46c0      	nop			@ (mov r8, r8)
 8022040:	20002fe0 	.word	0x20002fe0
 8022044:	40005c00 	.word	0x40005c00

08022048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022048:	b5f0      	push	{r4, r5, r6, r7, lr}
 802204a:	b085      	sub	sp, #20
 802204c:	af00      	add	r7, sp, #0
 802204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022050:	210f      	movs	r1, #15
 8022052:	187b      	adds	r3, r7, r1
 8022054:	2200      	movs	r2, #0
 8022056:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022058:	260e      	movs	r6, #14
 802205a:	19bb      	adds	r3, r7, r6
 802205c:	2200      	movs	r2, #0
 802205e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022060:	687a      	ldr	r2, [r7, #4]
 8022062:	23b0      	movs	r3, #176	@ 0xb0
 8022064:	009b      	lsls	r3, r3, #2
 8022066:	58d3      	ldr	r3, [r2, r3]
 8022068:	000d      	movs	r5, r1
 802206a:	187c      	adds	r4, r7, r1
 802206c:	0018      	movs	r0, r3
 802206e:	f7f6 f843 	bl	80180f8 <HAL_PCD_Start>
 8022072:	0003      	movs	r3, r0
 8022074:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022076:	19bc      	adds	r4, r7, r6
 8022078:	197b      	adds	r3, r7, r5
 802207a:	781b      	ldrb	r3, [r3, #0]
 802207c:	0018      	movs	r0, r3
 802207e:	f000 f9bc 	bl	80223fa <USBD_Get_USB_Status>
 8022082:	0003      	movs	r3, r0
 8022084:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022086:	19bb      	adds	r3, r7, r6
 8022088:	781b      	ldrb	r3, [r3, #0]
}
 802208a:	0018      	movs	r0, r3
 802208c:	46bd      	mov	sp, r7
 802208e:	b005      	add	sp, #20
 8022090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022092 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022094:	b085      	sub	sp, #20
 8022096:	af00      	add	r7, sp, #0
 8022098:	6078      	str	r0, [r7, #4]
 802209a:	000c      	movs	r4, r1
 802209c:	0010      	movs	r0, r2
 802209e:	0019      	movs	r1, r3
 80220a0:	1cfb      	adds	r3, r7, #3
 80220a2:	1c22      	adds	r2, r4, #0
 80220a4:	701a      	strb	r2, [r3, #0]
 80220a6:	1cbb      	adds	r3, r7, #2
 80220a8:	1c02      	adds	r2, r0, #0
 80220aa:	701a      	strb	r2, [r3, #0]
 80220ac:	003b      	movs	r3, r7
 80220ae:	1c0a      	adds	r2, r1, #0
 80220b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80220b2:	260f      	movs	r6, #15
 80220b4:	19bb      	adds	r3, r7, r6
 80220b6:	2200      	movs	r2, #0
 80220b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80220ba:	250e      	movs	r5, #14
 80220bc:	197b      	adds	r3, r7, r5
 80220be:	2200      	movs	r2, #0
 80220c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80220c2:	687a      	ldr	r2, [r7, #4]
 80220c4:	23b0      	movs	r3, #176	@ 0xb0
 80220c6:	009b      	lsls	r3, r3, #2
 80220c8:	58d0      	ldr	r0, [r2, r3]
 80220ca:	19bc      	adds	r4, r7, r6
 80220cc:	1cbb      	adds	r3, r7, #2
 80220ce:	781d      	ldrb	r5, [r3, #0]
 80220d0:	003b      	movs	r3, r7
 80220d2:	881a      	ldrh	r2, [r3, #0]
 80220d4:	1cfb      	adds	r3, r7, #3
 80220d6:	7819      	ldrb	r1, [r3, #0]
 80220d8:	002b      	movs	r3, r5
 80220da:	f7f6 f9a2 	bl	8018422 <HAL_PCD_EP_Open>
 80220de:	0003      	movs	r3, r0
 80220e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80220e2:	250e      	movs	r5, #14
 80220e4:	197c      	adds	r4, r7, r5
 80220e6:	19bb      	adds	r3, r7, r6
 80220e8:	781b      	ldrb	r3, [r3, #0]
 80220ea:	0018      	movs	r0, r3
 80220ec:	f000 f985 	bl	80223fa <USBD_Get_USB_Status>
 80220f0:	0003      	movs	r3, r0
 80220f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80220f4:	197b      	adds	r3, r7, r5
 80220f6:	781b      	ldrb	r3, [r3, #0]
}
 80220f8:	0018      	movs	r0, r3
 80220fa:	46bd      	mov	sp, r7
 80220fc:	b005      	add	sp, #20
 80220fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022100 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022102:	b085      	sub	sp, #20
 8022104:	af00      	add	r7, sp, #0
 8022106:	6078      	str	r0, [r7, #4]
 8022108:	000a      	movs	r2, r1
 802210a:	1cfb      	adds	r3, r7, #3
 802210c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802210e:	210f      	movs	r1, #15
 8022110:	187b      	adds	r3, r7, r1
 8022112:	2200      	movs	r2, #0
 8022114:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022116:	260e      	movs	r6, #14
 8022118:	19bb      	adds	r3, r7, r6
 802211a:	2200      	movs	r2, #0
 802211c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802211e:	687a      	ldr	r2, [r7, #4]
 8022120:	23b0      	movs	r3, #176	@ 0xb0
 8022122:	009b      	lsls	r3, r3, #2
 8022124:	58d2      	ldr	r2, [r2, r3]
 8022126:	000d      	movs	r5, r1
 8022128:	187c      	adds	r4, r7, r1
 802212a:	1cfb      	adds	r3, r7, #3
 802212c:	781b      	ldrb	r3, [r3, #0]
 802212e:	0019      	movs	r1, r3
 8022130:	0010      	movs	r0, r2
 8022132:	f7f6 f9e5 	bl	8018500 <HAL_PCD_EP_Close>
 8022136:	0003      	movs	r3, r0
 8022138:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802213a:	19bc      	adds	r4, r7, r6
 802213c:	197b      	adds	r3, r7, r5
 802213e:	781b      	ldrb	r3, [r3, #0]
 8022140:	0018      	movs	r0, r3
 8022142:	f000 f95a 	bl	80223fa <USBD_Get_USB_Status>
 8022146:	0003      	movs	r3, r0
 8022148:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802214a:	19bb      	adds	r3, r7, r6
 802214c:	781b      	ldrb	r3, [r3, #0]
}
 802214e:	0018      	movs	r0, r3
 8022150:	46bd      	mov	sp, r7
 8022152:	b005      	add	sp, #20
 8022154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022156 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022158:	b085      	sub	sp, #20
 802215a:	af00      	add	r7, sp, #0
 802215c:	6078      	str	r0, [r7, #4]
 802215e:	000a      	movs	r2, r1
 8022160:	1cfb      	adds	r3, r7, #3
 8022162:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022164:	210f      	movs	r1, #15
 8022166:	187b      	adds	r3, r7, r1
 8022168:	2200      	movs	r2, #0
 802216a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802216c:	260e      	movs	r6, #14
 802216e:	19bb      	adds	r3, r7, r6
 8022170:	2200      	movs	r2, #0
 8022172:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022174:	687a      	ldr	r2, [r7, #4]
 8022176:	23b0      	movs	r3, #176	@ 0xb0
 8022178:	009b      	lsls	r3, r3, #2
 802217a:	58d2      	ldr	r2, [r2, r3]
 802217c:	000d      	movs	r5, r1
 802217e:	187c      	adds	r4, r7, r1
 8022180:	1cfb      	adds	r3, r7, #3
 8022182:	781b      	ldrb	r3, [r3, #0]
 8022184:	0019      	movs	r1, r3
 8022186:	0010      	movs	r0, r2
 8022188:	f7f6 fa97 	bl	80186ba <HAL_PCD_EP_SetStall>
 802218c:	0003      	movs	r3, r0
 802218e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022190:	19bc      	adds	r4, r7, r6
 8022192:	197b      	adds	r3, r7, r5
 8022194:	781b      	ldrb	r3, [r3, #0]
 8022196:	0018      	movs	r0, r3
 8022198:	f000 f92f 	bl	80223fa <USBD_Get_USB_Status>
 802219c:	0003      	movs	r3, r0
 802219e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80221a0:	19bb      	adds	r3, r7, r6
 80221a2:	781b      	ldrb	r3, [r3, #0]
}
 80221a4:	0018      	movs	r0, r3
 80221a6:	46bd      	mov	sp, r7
 80221a8:	b005      	add	sp, #20
 80221aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080221ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80221ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221ae:	b085      	sub	sp, #20
 80221b0:	af00      	add	r7, sp, #0
 80221b2:	6078      	str	r0, [r7, #4]
 80221b4:	000a      	movs	r2, r1
 80221b6:	1cfb      	adds	r3, r7, #3
 80221b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80221ba:	210f      	movs	r1, #15
 80221bc:	187b      	adds	r3, r7, r1
 80221be:	2200      	movs	r2, #0
 80221c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80221c2:	260e      	movs	r6, #14
 80221c4:	19bb      	adds	r3, r7, r6
 80221c6:	2200      	movs	r2, #0
 80221c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80221ca:	687a      	ldr	r2, [r7, #4]
 80221cc:	23b0      	movs	r3, #176	@ 0xb0
 80221ce:	009b      	lsls	r3, r3, #2
 80221d0:	58d2      	ldr	r2, [r2, r3]
 80221d2:	000d      	movs	r5, r1
 80221d4:	187c      	adds	r4, r7, r1
 80221d6:	1cfb      	adds	r3, r7, #3
 80221d8:	781b      	ldrb	r3, [r3, #0]
 80221da:	0019      	movs	r1, r3
 80221dc:	0010      	movs	r0, r2
 80221de:	f7f6 fac8 	bl	8018772 <HAL_PCD_EP_ClrStall>
 80221e2:	0003      	movs	r3, r0
 80221e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80221e6:	19bc      	adds	r4, r7, r6
 80221e8:	197b      	adds	r3, r7, r5
 80221ea:	781b      	ldrb	r3, [r3, #0]
 80221ec:	0018      	movs	r0, r3
 80221ee:	f000 f904 	bl	80223fa <USBD_Get_USB_Status>
 80221f2:	0003      	movs	r3, r0
 80221f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80221f6:	19bb      	adds	r3, r7, r6
 80221f8:	781b      	ldrb	r3, [r3, #0]
}
 80221fa:	0018      	movs	r0, r3
 80221fc:	46bd      	mov	sp, r7
 80221fe:	b005      	add	sp, #20
 8022200:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022202 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022202:	b580      	push	{r7, lr}
 8022204:	b084      	sub	sp, #16
 8022206:	af00      	add	r7, sp, #0
 8022208:	6078      	str	r0, [r7, #4]
 802220a:	000a      	movs	r2, r1
 802220c:	1cfb      	adds	r3, r7, #3
 802220e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022210:	687a      	ldr	r2, [r7, #4]
 8022212:	23b0      	movs	r3, #176	@ 0xb0
 8022214:	009b      	lsls	r3, r3, #2
 8022216:	58d3      	ldr	r3, [r2, r3]
 8022218:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802221a:	1cfb      	adds	r3, r7, #3
 802221c:	781b      	ldrb	r3, [r3, #0]
 802221e:	b25b      	sxtb	r3, r3
 8022220:	2b00      	cmp	r3, #0
 8022222:	da0d      	bge.n	8022240 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022224:	1cfb      	adds	r3, r7, #3
 8022226:	781b      	ldrb	r3, [r3, #0]
 8022228:	227f      	movs	r2, #127	@ 0x7f
 802222a:	4013      	ands	r3, r2
 802222c:	68f9      	ldr	r1, [r7, #12]
 802222e:	1c5a      	adds	r2, r3, #1
 8022230:	0013      	movs	r3, r2
 8022232:	009b      	lsls	r3, r3, #2
 8022234:	189b      	adds	r3, r3, r2
 8022236:	00db      	lsls	r3, r3, #3
 8022238:	18cb      	adds	r3, r1, r3
 802223a:	3302      	adds	r3, #2
 802223c:	781b      	ldrb	r3, [r3, #0]
 802223e:	e00d      	b.n	802225c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022240:	1cfb      	adds	r3, r7, #3
 8022242:	781b      	ldrb	r3, [r3, #0]
 8022244:	227f      	movs	r2, #127	@ 0x7f
 8022246:	401a      	ands	r2, r3
 8022248:	68f8      	ldr	r0, [r7, #12]
 802224a:	23b5      	movs	r3, #181	@ 0xb5
 802224c:	0059      	lsls	r1, r3, #1
 802224e:	0013      	movs	r3, r2
 8022250:	009b      	lsls	r3, r3, #2
 8022252:	189b      	adds	r3, r3, r2
 8022254:	00db      	lsls	r3, r3, #3
 8022256:	18c3      	adds	r3, r0, r3
 8022258:	185b      	adds	r3, r3, r1
 802225a:	781b      	ldrb	r3, [r3, #0]
  }
}
 802225c:	0018      	movs	r0, r3
 802225e:	46bd      	mov	sp, r7
 8022260:	b004      	add	sp, #16
 8022262:	bd80      	pop	{r7, pc}

08022264 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022266:	b085      	sub	sp, #20
 8022268:	af00      	add	r7, sp, #0
 802226a:	6078      	str	r0, [r7, #4]
 802226c:	000a      	movs	r2, r1
 802226e:	1cfb      	adds	r3, r7, #3
 8022270:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022272:	210f      	movs	r1, #15
 8022274:	187b      	adds	r3, r7, r1
 8022276:	2200      	movs	r2, #0
 8022278:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802227a:	260e      	movs	r6, #14
 802227c:	19bb      	adds	r3, r7, r6
 802227e:	2200      	movs	r2, #0
 8022280:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022282:	687a      	ldr	r2, [r7, #4]
 8022284:	23b0      	movs	r3, #176	@ 0xb0
 8022286:	009b      	lsls	r3, r3, #2
 8022288:	58d2      	ldr	r2, [r2, r3]
 802228a:	000d      	movs	r5, r1
 802228c:	187c      	adds	r4, r7, r1
 802228e:	1cfb      	adds	r3, r7, #3
 8022290:	781b      	ldrb	r3, [r3, #0]
 8022292:	0019      	movs	r1, r3
 8022294:	0010      	movs	r0, r2
 8022296:	f7f6 f899 	bl	80183cc <HAL_PCD_SetAddress>
 802229a:	0003      	movs	r3, r0
 802229c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802229e:	19bc      	adds	r4, r7, r6
 80222a0:	197b      	adds	r3, r7, r5
 80222a2:	781b      	ldrb	r3, [r3, #0]
 80222a4:	0018      	movs	r0, r3
 80222a6:	f000 f8a8 	bl	80223fa <USBD_Get_USB_Status>
 80222aa:	0003      	movs	r3, r0
 80222ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80222ae:	19bb      	adds	r3, r7, r6
 80222b0:	781b      	ldrb	r3, [r3, #0]
}
 80222b2:	0018      	movs	r0, r3
 80222b4:	46bd      	mov	sp, r7
 80222b6:	b005      	add	sp, #20
 80222b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080222ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80222ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222bc:	b087      	sub	sp, #28
 80222be:	af00      	add	r7, sp, #0
 80222c0:	60f8      	str	r0, [r7, #12]
 80222c2:	0008      	movs	r0, r1
 80222c4:	607a      	str	r2, [r7, #4]
 80222c6:	0019      	movs	r1, r3
 80222c8:	230b      	movs	r3, #11
 80222ca:	18fb      	adds	r3, r7, r3
 80222cc:	1c02      	adds	r2, r0, #0
 80222ce:	701a      	strb	r2, [r3, #0]
 80222d0:	2408      	movs	r4, #8
 80222d2:	193b      	adds	r3, r7, r4
 80222d4:	1c0a      	adds	r2, r1, #0
 80222d6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80222d8:	2117      	movs	r1, #23
 80222da:	187b      	adds	r3, r7, r1
 80222dc:	2200      	movs	r2, #0
 80222de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80222e0:	2516      	movs	r5, #22
 80222e2:	197b      	adds	r3, r7, r5
 80222e4:	2200      	movs	r2, #0
 80222e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80222e8:	68fa      	ldr	r2, [r7, #12]
 80222ea:	23b0      	movs	r3, #176	@ 0xb0
 80222ec:	009b      	lsls	r3, r3, #2
 80222ee:	58d0      	ldr	r0, [r2, r3]
 80222f0:	193b      	adds	r3, r7, r4
 80222f2:	881d      	ldrh	r5, [r3, #0]
 80222f4:	000e      	movs	r6, r1
 80222f6:	187c      	adds	r4, r7, r1
 80222f8:	687a      	ldr	r2, [r7, #4]
 80222fa:	230b      	movs	r3, #11
 80222fc:	18fb      	adds	r3, r7, r3
 80222fe:	7819      	ldrb	r1, [r3, #0]
 8022300:	002b      	movs	r3, r5
 8022302:	f7f6 f99e 	bl	8018642 <HAL_PCD_EP_Transmit>
 8022306:	0003      	movs	r3, r0
 8022308:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802230a:	2516      	movs	r5, #22
 802230c:	197c      	adds	r4, r7, r5
 802230e:	19bb      	adds	r3, r7, r6
 8022310:	781b      	ldrb	r3, [r3, #0]
 8022312:	0018      	movs	r0, r3
 8022314:	f000 f871 	bl	80223fa <USBD_Get_USB_Status>
 8022318:	0003      	movs	r3, r0
 802231a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802231c:	197b      	adds	r3, r7, r5
 802231e:	781b      	ldrb	r3, [r3, #0]
}
 8022320:	0018      	movs	r0, r3
 8022322:	46bd      	mov	sp, r7
 8022324:	b007      	add	sp, #28
 8022326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022328 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022328:	b5f0      	push	{r4, r5, r6, r7, lr}
 802232a:	b087      	sub	sp, #28
 802232c:	af00      	add	r7, sp, #0
 802232e:	60f8      	str	r0, [r7, #12]
 8022330:	0008      	movs	r0, r1
 8022332:	607a      	str	r2, [r7, #4]
 8022334:	0019      	movs	r1, r3
 8022336:	230b      	movs	r3, #11
 8022338:	18fb      	adds	r3, r7, r3
 802233a:	1c02      	adds	r2, r0, #0
 802233c:	701a      	strb	r2, [r3, #0]
 802233e:	2408      	movs	r4, #8
 8022340:	193b      	adds	r3, r7, r4
 8022342:	1c0a      	adds	r2, r1, #0
 8022344:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022346:	2117      	movs	r1, #23
 8022348:	187b      	adds	r3, r7, r1
 802234a:	2200      	movs	r2, #0
 802234c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802234e:	2516      	movs	r5, #22
 8022350:	197b      	adds	r3, r7, r5
 8022352:	2200      	movs	r2, #0
 8022354:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022356:	68fa      	ldr	r2, [r7, #12]
 8022358:	23b0      	movs	r3, #176	@ 0xb0
 802235a:	009b      	lsls	r3, r3, #2
 802235c:	58d0      	ldr	r0, [r2, r3]
 802235e:	193b      	adds	r3, r7, r4
 8022360:	881d      	ldrh	r5, [r3, #0]
 8022362:	000e      	movs	r6, r1
 8022364:	187c      	adds	r4, r7, r1
 8022366:	687a      	ldr	r2, [r7, #4]
 8022368:	230b      	movs	r3, #11
 802236a:	18fb      	adds	r3, r7, r3
 802236c:	7819      	ldrb	r1, [r3, #0]
 802236e:	002b      	movs	r3, r5
 8022370:	f7f6 f917 	bl	80185a2 <HAL_PCD_EP_Receive>
 8022374:	0003      	movs	r3, r0
 8022376:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022378:	2516      	movs	r5, #22
 802237a:	197c      	adds	r4, r7, r5
 802237c:	19bb      	adds	r3, r7, r6
 802237e:	781b      	ldrb	r3, [r3, #0]
 8022380:	0018      	movs	r0, r3
 8022382:	f000 f83a 	bl	80223fa <USBD_Get_USB_Status>
 8022386:	0003      	movs	r3, r0
 8022388:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802238a:	197b      	adds	r3, r7, r5
 802238c:	781b      	ldrb	r3, [r3, #0]
}
 802238e:	0018      	movs	r0, r3
 8022390:	46bd      	mov	sp, r7
 8022392:	b007      	add	sp, #28
 8022394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022396 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022396:	b580      	push	{r7, lr}
 8022398:	b082      	sub	sp, #8
 802239a:	af00      	add	r7, sp, #0
 802239c:	6078      	str	r0, [r7, #4]
 802239e:	000a      	movs	r2, r1
 80223a0:	1cfb      	adds	r3, r7, #3
 80223a2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80223a4:	687a      	ldr	r2, [r7, #4]
 80223a6:	23b0      	movs	r3, #176	@ 0xb0
 80223a8:	009b      	lsls	r3, r3, #2
 80223aa:	58d2      	ldr	r2, [r2, r3]
 80223ac:	1cfb      	adds	r3, r7, #3
 80223ae:	781b      	ldrb	r3, [r3, #0]
 80223b0:	0019      	movs	r1, r3
 80223b2:	0010      	movs	r0, r2
 80223b4:	f7f6 f92c 	bl	8018610 <HAL_PCD_EP_GetRxCount>
 80223b8:	0003      	movs	r3, r0
}
 80223ba:	0018      	movs	r0, r3
 80223bc:	46bd      	mov	sp, r7
 80223be:	b002      	add	sp, #8
 80223c0:	bd80      	pop	{r7, pc}
	...

080223c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80223c4:	b580      	push	{r7, lr}
 80223c6:	b082      	sub	sp, #8
 80223c8:	af00      	add	r7, sp, #0
 80223ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80223cc:	4b02      	ldr	r3, [pc, #8]	@ (80223d8 <USBD_static_malloc+0x14>)
}
 80223ce:	0018      	movs	r0, r3
 80223d0:	46bd      	mov	sp, r7
 80223d2:	b002      	add	sp, #8
 80223d4:	bd80      	pop	{r7, pc}
 80223d6:	46c0      	nop			@ (mov r8, r8)
 80223d8:	200032d4 	.word	0x200032d4

080223dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80223dc:	b580      	push	{r7, lr}
 80223de:	b082      	sub	sp, #8
 80223e0:	af00      	add	r7, sp, #0
 80223e2:	6078      	str	r0, [r7, #4]

}
 80223e4:	46c0      	nop			@ (mov r8, r8)
 80223e6:	46bd      	mov	sp, r7
 80223e8:	b002      	add	sp, #8
 80223ea:	bd80      	pop	{r7, pc}

080223ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80223ec:	b580      	push	{r7, lr}
 80223ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80223f0:	f7e9 fe4e 	bl	800c090 <SystemClock_Config>
}
 80223f4:	46c0      	nop			@ (mov r8, r8)
 80223f6:	46bd      	mov	sp, r7
 80223f8:	bd80      	pop	{r7, pc}

080223fa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80223fa:	b580      	push	{r7, lr}
 80223fc:	b084      	sub	sp, #16
 80223fe:	af00      	add	r7, sp, #0
 8022400:	0002      	movs	r2, r0
 8022402:	1dfb      	adds	r3, r7, #7
 8022404:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022406:	230f      	movs	r3, #15
 8022408:	18fb      	adds	r3, r7, r3
 802240a:	2200      	movs	r2, #0
 802240c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 802240e:	1dfb      	adds	r3, r7, #7
 8022410:	781b      	ldrb	r3, [r3, #0]
 8022412:	2b03      	cmp	r3, #3
 8022414:	d017      	beq.n	8022446 <USBD_Get_USB_Status+0x4c>
 8022416:	dc1b      	bgt.n	8022450 <USBD_Get_USB_Status+0x56>
 8022418:	2b02      	cmp	r3, #2
 802241a:	d00f      	beq.n	802243c <USBD_Get_USB_Status+0x42>
 802241c:	dc18      	bgt.n	8022450 <USBD_Get_USB_Status+0x56>
 802241e:	2b00      	cmp	r3, #0
 8022420:	d002      	beq.n	8022428 <USBD_Get_USB_Status+0x2e>
 8022422:	2b01      	cmp	r3, #1
 8022424:	d005      	beq.n	8022432 <USBD_Get_USB_Status+0x38>
 8022426:	e013      	b.n	8022450 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022428:	230f      	movs	r3, #15
 802242a:	18fb      	adds	r3, r7, r3
 802242c:	2200      	movs	r2, #0
 802242e:	701a      	strb	r2, [r3, #0]
    break;
 8022430:	e013      	b.n	802245a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022432:	230f      	movs	r3, #15
 8022434:	18fb      	adds	r3, r7, r3
 8022436:	2202      	movs	r2, #2
 8022438:	701a      	strb	r2, [r3, #0]
    break;
 802243a:	e00e      	b.n	802245a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802243c:	230f      	movs	r3, #15
 802243e:	18fb      	adds	r3, r7, r3
 8022440:	2201      	movs	r2, #1
 8022442:	701a      	strb	r2, [r3, #0]
    break;
 8022444:	e009      	b.n	802245a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022446:	230f      	movs	r3, #15
 8022448:	18fb      	adds	r3, r7, r3
 802244a:	2202      	movs	r2, #2
 802244c:	701a      	strb	r2, [r3, #0]
    break;
 802244e:	e004      	b.n	802245a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8022450:	230f      	movs	r3, #15
 8022452:	18fb      	adds	r3, r7, r3
 8022454:	2202      	movs	r2, #2
 8022456:	701a      	strb	r2, [r3, #0]
    break;
 8022458:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 802245a:	230f      	movs	r3, #15
 802245c:	18fb      	adds	r3, r7, r3
 802245e:	781b      	ldrb	r3, [r3, #0]
}
 8022460:	0018      	movs	r0, r3
 8022462:	46bd      	mov	sp, r7
 8022464:	b004      	add	sp, #16
 8022466:	bd80      	pop	{r7, pc}

08022468 <arm_cfft_radix4by2_q31>:
 8022468:	b5f0      	push	{r4, r5, r6, r7, lr}
 802246a:	465f      	mov	r7, fp
 802246c:	4656      	mov	r6, sl
 802246e:	464d      	mov	r5, r9
 8022470:	4644      	mov	r4, r8
 8022472:	000b      	movs	r3, r1
 8022474:	b4f0      	push	{r4, r5, r6, r7}
 8022476:	085b      	lsrs	r3, r3, #1
 8022478:	b08f      	sub	sp, #60	@ 0x3c
 802247a:	910a      	str	r1, [sp, #40]	@ 0x28
 802247c:	0007      	movs	r7, r0
 802247e:	9009      	str	r0, [sp, #36]	@ 0x24
 8022480:	0011      	movs	r1, r2
 8022482:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022484:	930c      	str	r3, [sp, #48]	@ 0x30
 8022486:	2b00      	cmp	r3, #0
 8022488:	d100      	bne.n	802248c <arm_cfft_radix4by2_q31+0x24>
 802248a:	e0a0      	b.n	80225ce <arm_cfft_radix4by2_q31+0x166>
 802248c:	0002      	movs	r2, r0
 802248e:	00db      	lsls	r3, r3, #3
 8022490:	3204      	adds	r2, #4
 8022492:	4691      	mov	r9, r2
 8022494:	4698      	mov	r8, r3
 8022496:	000a      	movs	r2, r1
 8022498:	464e      	mov	r6, r9
 802249a:	4442      	add	r2, r8
 802249c:	4699      	mov	r9, r3
 802249e:	4688      	mov	r8, r1
 80224a0:	9208      	str	r2, [sp, #32]
 80224a2:	900d      	str	r0, [sp, #52]	@ 0x34
 80224a4:	4643      	mov	r3, r8
 80224a6:	681b      	ldr	r3, [r3, #0]
 80224a8:	469b      	mov	fp, r3
 80224aa:	4643      	mov	r3, r8
 80224ac:	685b      	ldr	r3, [r3, #4]
 80224ae:	469a      	mov	sl, r3
 80224b0:	683b      	ldr	r3, [r7, #0]
 80224b2:	109c      	asrs	r4, r3, #2
 80224b4:	464b      	mov	r3, r9
 80224b6:	58fb      	ldr	r3, [r7, r3]
 80224b8:	109a      	asrs	r2, r3, #2
 80224ba:	18a3      	adds	r3, r4, r2
 80224bc:	603b      	str	r3, [r7, #0]
 80224be:	6833      	ldr	r3, [r6, #0]
 80224c0:	1aa4      	subs	r4, r4, r2
 80224c2:	109d      	asrs	r5, r3, #2
 80224c4:	464b      	mov	r3, r9
 80224c6:	58f3      	ldr	r3, [r6, r3]
 80224c8:	17e2      	asrs	r2, r4, #31
 80224ca:	109b      	asrs	r3, r3, #2
 80224cc:	18e9      	adds	r1, r5, r3
 80224ce:	6031      	str	r1, [r6, #0]
 80224d0:	0011      	movs	r1, r2
 80224d2:	465a      	mov	r2, fp
 80224d4:	17d2      	asrs	r2, r2, #31
 80224d6:	0010      	movs	r0, r2
 80224d8:	4652      	mov	r2, sl
 80224da:	1aed      	subs	r5, r5, r3
 80224dc:	17eb      	asrs	r3, r5, #31
 80224de:	17d2      	asrs	r2, r2, #31
 80224e0:	9307      	str	r3, [sp, #28]
 80224e2:	9204      	str	r2, [sp, #16]
 80224e4:	0003      	movs	r3, r0
 80224e6:	465a      	mov	r2, fp
 80224e8:	9006      	str	r0, [sp, #24]
 80224ea:	0020      	movs	r0, r4
 80224ec:	9105      	str	r1, [sp, #20]
 80224ee:	f7de f867 	bl	80005c0 <__aeabi_lmul>
 80224f2:	2280      	movs	r2, #128	@ 0x80
 80224f4:	2300      	movs	r3, #0
 80224f6:	0612      	lsls	r2, r2, #24
 80224f8:	1880      	adds	r0, r0, r2
 80224fa:	4159      	adcs	r1, r3
 80224fc:	2300      	movs	r3, #0
 80224fe:	9101      	str	r1, [sp, #4]
 8022500:	9300      	str	r3, [sp, #0]
 8022502:	4652      	mov	r2, sl
 8022504:	9b04      	ldr	r3, [sp, #16]
 8022506:	0028      	movs	r0, r5
 8022508:	17e9      	asrs	r1, r5, #31
 802250a:	f7de f859 	bl	80005c0 <__aeabi_lmul>
 802250e:	9a00      	ldr	r2, [sp, #0]
 8022510:	9b01      	ldr	r3, [sp, #4]
 8022512:	1880      	adds	r0, r0, r2
 8022514:	4159      	adcs	r1, r3
 8022516:	2280      	movs	r2, #128	@ 0x80
 8022518:	2300      	movs	r3, #0
 802251a:	0612      	lsls	r2, r2, #24
 802251c:	1880      	adds	r0, r0, r2
 802251e:	4159      	adcs	r1, r3
 8022520:	464a      	mov	r2, r9
 8022522:	004b      	lsls	r3, r1, #1
 8022524:	50bb      	str	r3, [r7, r2]
 8022526:	4658      	mov	r0, fp
 8022528:	002a      	movs	r2, r5
 802252a:	9b07      	ldr	r3, [sp, #28]
 802252c:	9906      	ldr	r1, [sp, #24]
 802252e:	f7de f847 	bl	80005c0 <__aeabi_lmul>
 8022532:	2280      	movs	r2, #128	@ 0x80
 8022534:	2300      	movs	r3, #0
 8022536:	0612      	lsls	r2, r2, #24
 8022538:	1880      	adds	r0, r0, r2
 802253a:	4159      	adcs	r1, r3
 802253c:	2000      	movs	r0, #0
 802253e:	9103      	str	r1, [sp, #12]
 8022540:	9002      	str	r0, [sp, #8]
 8022542:	4652      	mov	r2, sl
 8022544:	9b04      	ldr	r3, [sp, #16]
 8022546:	0020      	movs	r0, r4
 8022548:	9905      	ldr	r1, [sp, #20]
 802254a:	f7de f839 	bl	80005c0 <__aeabi_lmul>
 802254e:	9a02      	ldr	r2, [sp, #8]
 8022550:	9b03      	ldr	r3, [sp, #12]
 8022552:	1a12      	subs	r2, r2, r0
 8022554:	418b      	sbcs	r3, r1
 8022556:	2080      	movs	r0, #128	@ 0x80
 8022558:	2100      	movs	r1, #0
 802255a:	0600      	lsls	r0, r0, #24
 802255c:	1812      	adds	r2, r2, r0
 802255e:	414b      	adcs	r3, r1
 8022560:	464a      	mov	r2, r9
 8022562:	005b      	lsls	r3, r3, #1
 8022564:	50b3      	str	r3, [r6, r2]
 8022566:	2308      	movs	r3, #8
 8022568:	469c      	mov	ip, r3
 802256a:	9b08      	ldr	r3, [sp, #32]
 802256c:	44e0      	add	r8, ip
 802256e:	3708      	adds	r7, #8
 8022570:	3608      	adds	r6, #8
 8022572:	4598      	cmp	r8, r3
 8022574:	d196      	bne.n	80224a4 <arm_cfft_radix4by2_q31+0x3c>
 8022576:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022578:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802257a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802257c:	2302      	movs	r3, #2
 802257e:	003a      	movs	r2, r7
 8022580:	0029      	movs	r1, r5
 8022582:	0020      	movs	r0, r4
 8022584:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022586:	f000 f957 	bl	8022838 <arm_radix4_butterfly_q31>
 802258a:	46a4      	mov	ip, r4
 802258c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802258e:	2302      	movs	r3, #2
 8022590:	0088      	lsls	r0, r1, #2
 8022592:	4460      	add	r0, ip
 8022594:	003a      	movs	r2, r7
 8022596:	0029      	movs	r1, r5
 8022598:	f000 f94e 	bl	8022838 <arm_radix4_butterfly_q31>
 802259c:	46a4      	mov	ip, r4
 802259e:	0128      	lsls	r0, r5, #4
 80225a0:	4460      	add	r0, ip
 80225a2:	6833      	ldr	r3, [r6, #0]
 80225a4:	005b      	lsls	r3, r3, #1
 80225a6:	6033      	str	r3, [r6, #0]
 80225a8:	6873      	ldr	r3, [r6, #4]
 80225aa:	005b      	lsls	r3, r3, #1
 80225ac:	6073      	str	r3, [r6, #4]
 80225ae:	68b3      	ldr	r3, [r6, #8]
 80225b0:	005b      	lsls	r3, r3, #1
 80225b2:	60b3      	str	r3, [r6, #8]
 80225b4:	68f3      	ldr	r3, [r6, #12]
 80225b6:	005b      	lsls	r3, r3, #1
 80225b8:	60f3      	str	r3, [r6, #12]
 80225ba:	3610      	adds	r6, #16
 80225bc:	42b0      	cmp	r0, r6
 80225be:	d1f0      	bne.n	80225a2 <arm_cfft_radix4by2_q31+0x13a>
 80225c0:	b00f      	add	sp, #60	@ 0x3c
 80225c2:	bc3c      	pop	{r2, r3, r4, r5}
 80225c4:	4690      	mov	r8, r2
 80225c6:	4699      	mov	r9, r3
 80225c8:	46a2      	mov	sl, r4
 80225ca:	46ab      	mov	fp, r5
 80225cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225ce:	2302      	movs	r3, #2
 80225d0:	2100      	movs	r1, #0
 80225d2:	0015      	movs	r5, r2
 80225d4:	f000 f930 	bl	8022838 <arm_radix4_butterfly_q31>
 80225d8:	46bc      	mov	ip, r7
 80225da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80225dc:	002a      	movs	r2, r5
 80225de:	0098      	lsls	r0, r3, #2
 80225e0:	4460      	add	r0, ip
 80225e2:	2302      	movs	r3, #2
 80225e4:	2100      	movs	r1, #0
 80225e6:	f000 f927 	bl	8022838 <arm_radix4_butterfly_q31>
 80225ea:	e7e9      	b.n	80225c0 <arm_cfft_radix4by2_q31+0x158>

080225ec <arm_cfft_radix4by2_inverse_q31>:
 80225ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225ee:	465f      	mov	r7, fp
 80225f0:	4656      	mov	r6, sl
 80225f2:	464d      	mov	r5, r9
 80225f4:	4644      	mov	r4, r8
 80225f6:	000b      	movs	r3, r1
 80225f8:	b4f0      	push	{r4, r5, r6, r7}
 80225fa:	085b      	lsrs	r3, r3, #1
 80225fc:	b08f      	sub	sp, #60	@ 0x3c
 80225fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8022600:	0007      	movs	r7, r0
 8022602:	9009      	str	r0, [sp, #36]	@ 0x24
 8022604:	0011      	movs	r1, r2
 8022606:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022608:	930c      	str	r3, [sp, #48]	@ 0x30
 802260a:	2b00      	cmp	r3, #0
 802260c:	d100      	bne.n	8022610 <arm_cfft_radix4by2_inverse_q31+0x24>
 802260e:	e0a0      	b.n	8022752 <arm_cfft_radix4by2_inverse_q31+0x166>
 8022610:	0002      	movs	r2, r0
 8022612:	00db      	lsls	r3, r3, #3
 8022614:	3204      	adds	r2, #4
 8022616:	4691      	mov	r9, r2
 8022618:	4698      	mov	r8, r3
 802261a:	000a      	movs	r2, r1
 802261c:	464e      	mov	r6, r9
 802261e:	4442      	add	r2, r8
 8022620:	4699      	mov	r9, r3
 8022622:	4688      	mov	r8, r1
 8022624:	9208      	str	r2, [sp, #32]
 8022626:	900d      	str	r0, [sp, #52]	@ 0x34
 8022628:	4643      	mov	r3, r8
 802262a:	681b      	ldr	r3, [r3, #0]
 802262c:	469b      	mov	fp, r3
 802262e:	4643      	mov	r3, r8
 8022630:	685b      	ldr	r3, [r3, #4]
 8022632:	469a      	mov	sl, r3
 8022634:	683b      	ldr	r3, [r7, #0]
 8022636:	109c      	asrs	r4, r3, #2
 8022638:	464b      	mov	r3, r9
 802263a:	58fb      	ldr	r3, [r7, r3]
 802263c:	109a      	asrs	r2, r3, #2
 802263e:	18a3      	adds	r3, r4, r2
 8022640:	603b      	str	r3, [r7, #0]
 8022642:	6833      	ldr	r3, [r6, #0]
 8022644:	1aa4      	subs	r4, r4, r2
 8022646:	109d      	asrs	r5, r3, #2
 8022648:	464b      	mov	r3, r9
 802264a:	58f3      	ldr	r3, [r6, r3]
 802264c:	17e2      	asrs	r2, r4, #31
 802264e:	109b      	asrs	r3, r3, #2
 8022650:	18e9      	adds	r1, r5, r3
 8022652:	6031      	str	r1, [r6, #0]
 8022654:	0011      	movs	r1, r2
 8022656:	465a      	mov	r2, fp
 8022658:	17d2      	asrs	r2, r2, #31
 802265a:	0010      	movs	r0, r2
 802265c:	4652      	mov	r2, sl
 802265e:	1aed      	subs	r5, r5, r3
 8022660:	17eb      	asrs	r3, r5, #31
 8022662:	17d2      	asrs	r2, r2, #31
 8022664:	9307      	str	r3, [sp, #28]
 8022666:	9204      	str	r2, [sp, #16]
 8022668:	0003      	movs	r3, r0
 802266a:	465a      	mov	r2, fp
 802266c:	9006      	str	r0, [sp, #24]
 802266e:	0020      	movs	r0, r4
 8022670:	9105      	str	r1, [sp, #20]
 8022672:	f7dd ffa5 	bl	80005c0 <__aeabi_lmul>
 8022676:	2280      	movs	r2, #128	@ 0x80
 8022678:	2300      	movs	r3, #0
 802267a:	0612      	lsls	r2, r2, #24
 802267c:	1880      	adds	r0, r0, r2
 802267e:	4159      	adcs	r1, r3
 8022680:	2300      	movs	r3, #0
 8022682:	9101      	str	r1, [sp, #4]
 8022684:	9300      	str	r3, [sp, #0]
 8022686:	4652      	mov	r2, sl
 8022688:	9b04      	ldr	r3, [sp, #16]
 802268a:	0028      	movs	r0, r5
 802268c:	17e9      	asrs	r1, r5, #31
 802268e:	f7dd ff97 	bl	80005c0 <__aeabi_lmul>
 8022692:	9a00      	ldr	r2, [sp, #0]
 8022694:	9b01      	ldr	r3, [sp, #4]
 8022696:	1a12      	subs	r2, r2, r0
 8022698:	418b      	sbcs	r3, r1
 802269a:	2080      	movs	r0, #128	@ 0x80
 802269c:	2100      	movs	r1, #0
 802269e:	0600      	lsls	r0, r0, #24
 80226a0:	1812      	adds	r2, r2, r0
 80226a2:	414b      	adcs	r3, r1
 80226a4:	464a      	mov	r2, r9
 80226a6:	005b      	lsls	r3, r3, #1
 80226a8:	50bb      	str	r3, [r7, r2]
 80226aa:	4658      	mov	r0, fp
 80226ac:	002a      	movs	r2, r5
 80226ae:	9b07      	ldr	r3, [sp, #28]
 80226b0:	9906      	ldr	r1, [sp, #24]
 80226b2:	f7dd ff85 	bl	80005c0 <__aeabi_lmul>
 80226b6:	2280      	movs	r2, #128	@ 0x80
 80226b8:	2300      	movs	r3, #0
 80226ba:	0612      	lsls	r2, r2, #24
 80226bc:	1880      	adds	r0, r0, r2
 80226be:	4159      	adcs	r1, r3
 80226c0:	2000      	movs	r0, #0
 80226c2:	9103      	str	r1, [sp, #12]
 80226c4:	9002      	str	r0, [sp, #8]
 80226c6:	4652      	mov	r2, sl
 80226c8:	9b04      	ldr	r3, [sp, #16]
 80226ca:	0020      	movs	r0, r4
 80226cc:	9905      	ldr	r1, [sp, #20]
 80226ce:	f7dd ff77 	bl	80005c0 <__aeabi_lmul>
 80226d2:	9b02      	ldr	r3, [sp, #8]
 80226d4:	9c03      	ldr	r4, [sp, #12]
 80226d6:	18c0      	adds	r0, r0, r3
 80226d8:	4161      	adcs	r1, r4
 80226da:	2380      	movs	r3, #128	@ 0x80
 80226dc:	2400      	movs	r4, #0
 80226de:	061b      	lsls	r3, r3, #24
 80226e0:	18c0      	adds	r0, r0, r3
 80226e2:	4161      	adcs	r1, r4
 80226e4:	464a      	mov	r2, r9
 80226e6:	004b      	lsls	r3, r1, #1
 80226e8:	50b3      	str	r3, [r6, r2]
 80226ea:	2308      	movs	r3, #8
 80226ec:	469c      	mov	ip, r3
 80226ee:	9b08      	ldr	r3, [sp, #32]
 80226f0:	44e0      	add	r8, ip
 80226f2:	3708      	adds	r7, #8
 80226f4:	3608      	adds	r6, #8
 80226f6:	4598      	cmp	r8, r3
 80226f8:	d196      	bne.n	8022628 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80226fa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80226fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80226fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022700:	2302      	movs	r3, #2
 8022702:	003a      	movs	r2, r7
 8022704:	0029      	movs	r1, r5
 8022706:	0020      	movs	r0, r4
 8022708:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802270a:	f000 fb3b 	bl	8022d84 <arm_radix4_butterfly_inverse_q31>
 802270e:	46a4      	mov	ip, r4
 8022710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022712:	2302      	movs	r3, #2
 8022714:	0088      	lsls	r0, r1, #2
 8022716:	4460      	add	r0, ip
 8022718:	003a      	movs	r2, r7
 802271a:	0029      	movs	r1, r5
 802271c:	f000 fb32 	bl	8022d84 <arm_radix4_butterfly_inverse_q31>
 8022720:	46a4      	mov	ip, r4
 8022722:	0128      	lsls	r0, r5, #4
 8022724:	4460      	add	r0, ip
 8022726:	6833      	ldr	r3, [r6, #0]
 8022728:	005b      	lsls	r3, r3, #1
 802272a:	6033      	str	r3, [r6, #0]
 802272c:	6873      	ldr	r3, [r6, #4]
 802272e:	005b      	lsls	r3, r3, #1
 8022730:	6073      	str	r3, [r6, #4]
 8022732:	68b3      	ldr	r3, [r6, #8]
 8022734:	005b      	lsls	r3, r3, #1
 8022736:	60b3      	str	r3, [r6, #8]
 8022738:	68f3      	ldr	r3, [r6, #12]
 802273a:	005b      	lsls	r3, r3, #1
 802273c:	60f3      	str	r3, [r6, #12]
 802273e:	3610      	adds	r6, #16
 8022740:	42b0      	cmp	r0, r6
 8022742:	d1f0      	bne.n	8022726 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8022744:	b00f      	add	sp, #60	@ 0x3c
 8022746:	bc3c      	pop	{r2, r3, r4, r5}
 8022748:	4690      	mov	r8, r2
 802274a:	4699      	mov	r9, r3
 802274c:	46a2      	mov	sl, r4
 802274e:	46ab      	mov	fp, r5
 8022750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022752:	2302      	movs	r3, #2
 8022754:	2100      	movs	r1, #0
 8022756:	0015      	movs	r5, r2
 8022758:	f000 fb14 	bl	8022d84 <arm_radix4_butterfly_inverse_q31>
 802275c:	46bc      	mov	ip, r7
 802275e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022760:	002a      	movs	r2, r5
 8022762:	0098      	lsls	r0, r3, #2
 8022764:	4460      	add	r0, ip
 8022766:	2302      	movs	r3, #2
 8022768:	2100      	movs	r1, #0
 802276a:	f000 fb0b 	bl	8022d84 <arm_radix4_butterfly_inverse_q31>
 802276e:	e7e9      	b.n	8022744 <arm_cfft_radix4by2_inverse_q31+0x158>

08022770 <arm_cfft_q31>:
 8022770:	b570      	push	{r4, r5, r6, lr}
 8022772:	001e      	movs	r6, r3
 8022774:	2380      	movs	r3, #128	@ 0x80
 8022776:	000d      	movs	r5, r1
 8022778:	0004      	movs	r4, r0
 802277a:	8801      	ldrh	r1, [r0, #0]
 802277c:	005b      	lsls	r3, r3, #1
 802277e:	2a01      	cmp	r2, #1
 8022780:	d028      	beq.n	80227d4 <arm_cfft_q31+0x64>
 8022782:	4299      	cmp	r1, r3
 8022784:	d020      	beq.n	80227c8 <arm_cfft_q31+0x58>
 8022786:	d812      	bhi.n	80227ae <arm_cfft_q31+0x3e>
 8022788:	2920      	cmp	r1, #32
 802278a:	d004      	beq.n	8022796 <arm_cfft_q31+0x26>
 802278c:	d949      	bls.n	8022822 <arm_cfft_q31+0xb2>
 802278e:	2940      	cmp	r1, #64	@ 0x40
 8022790:	d01a      	beq.n	80227c8 <arm_cfft_q31+0x58>
 8022792:	2980      	cmp	r1, #128	@ 0x80
 8022794:	d103      	bne.n	802279e <arm_cfft_q31+0x2e>
 8022796:	6862      	ldr	r2, [r4, #4]
 8022798:	0028      	movs	r0, r5
 802279a:	f7ff fe65 	bl	8022468 <arm_cfft_radix4by2_q31>
 802279e:	2e00      	cmp	r6, #0
 80227a0:	d004      	beq.n	80227ac <arm_cfft_q31+0x3c>
 80227a2:	68a2      	ldr	r2, [r4, #8]
 80227a4:	89a1      	ldrh	r1, [r4, #12]
 80227a6:	0028      	movs	r0, r5
 80227a8:	f7dd fcae 	bl	8000108 <arm_bitreversal_32>
 80227ac:	bd70      	pop	{r4, r5, r6, pc}
 80227ae:	2380      	movs	r3, #128	@ 0x80
 80227b0:	00db      	lsls	r3, r3, #3
 80227b2:	4299      	cmp	r1, r3
 80227b4:	d008      	beq.n	80227c8 <arm_cfft_q31+0x58>
 80227b6:	d92f      	bls.n	8022818 <arm_cfft_q31+0xa8>
 80227b8:	2380      	movs	r3, #128	@ 0x80
 80227ba:	011b      	lsls	r3, r3, #4
 80227bc:	4299      	cmp	r1, r3
 80227be:	d0ea      	beq.n	8022796 <arm_cfft_q31+0x26>
 80227c0:	2380      	movs	r3, #128	@ 0x80
 80227c2:	015b      	lsls	r3, r3, #5
 80227c4:	4299      	cmp	r1, r3
 80227c6:	d1ea      	bne.n	802279e <arm_cfft_q31+0x2e>
 80227c8:	2301      	movs	r3, #1
 80227ca:	6862      	ldr	r2, [r4, #4]
 80227cc:	0028      	movs	r0, r5
 80227ce:	f000 f833 	bl	8022838 <arm_radix4_butterfly_q31>
 80227d2:	e7e4      	b.n	802279e <arm_cfft_q31+0x2e>
 80227d4:	4299      	cmp	r1, r3
 80227d6:	d019      	beq.n	802280c <arm_cfft_q31+0x9c>
 80227d8:	d80b      	bhi.n	80227f2 <arm_cfft_q31+0x82>
 80227da:	2920      	cmp	r1, #32
 80227dc:	d004      	beq.n	80227e8 <arm_cfft_q31+0x78>
 80227de:	d928      	bls.n	8022832 <arm_cfft_q31+0xc2>
 80227e0:	2940      	cmp	r1, #64	@ 0x40
 80227e2:	d013      	beq.n	802280c <arm_cfft_q31+0x9c>
 80227e4:	2980      	cmp	r1, #128	@ 0x80
 80227e6:	d1da      	bne.n	802279e <arm_cfft_q31+0x2e>
 80227e8:	6862      	ldr	r2, [r4, #4]
 80227ea:	0028      	movs	r0, r5
 80227ec:	f7ff fefe 	bl	80225ec <arm_cfft_radix4by2_inverse_q31>
 80227f0:	e7d5      	b.n	802279e <arm_cfft_q31+0x2e>
 80227f2:	2380      	movs	r3, #128	@ 0x80
 80227f4:	00db      	lsls	r3, r3, #3
 80227f6:	4299      	cmp	r1, r3
 80227f8:	d008      	beq.n	802280c <arm_cfft_q31+0x9c>
 80227fa:	d915      	bls.n	8022828 <arm_cfft_q31+0xb8>
 80227fc:	2380      	movs	r3, #128	@ 0x80
 80227fe:	011b      	lsls	r3, r3, #4
 8022800:	4299      	cmp	r1, r3
 8022802:	d0f1      	beq.n	80227e8 <arm_cfft_q31+0x78>
 8022804:	2380      	movs	r3, #128	@ 0x80
 8022806:	015b      	lsls	r3, r3, #5
 8022808:	4299      	cmp	r1, r3
 802280a:	d1c8      	bne.n	802279e <arm_cfft_q31+0x2e>
 802280c:	2301      	movs	r3, #1
 802280e:	6862      	ldr	r2, [r4, #4]
 8022810:	0028      	movs	r0, r5
 8022812:	f000 fab7 	bl	8022d84 <arm_radix4_butterfly_inverse_q31>
 8022816:	e7c2      	b.n	802279e <arm_cfft_q31+0x2e>
 8022818:	2380      	movs	r3, #128	@ 0x80
 802281a:	009b      	lsls	r3, r3, #2
 802281c:	4299      	cmp	r1, r3
 802281e:	d0ba      	beq.n	8022796 <arm_cfft_q31+0x26>
 8022820:	e7bd      	b.n	802279e <arm_cfft_q31+0x2e>
 8022822:	2910      	cmp	r1, #16
 8022824:	d1bb      	bne.n	802279e <arm_cfft_q31+0x2e>
 8022826:	e7cf      	b.n	80227c8 <arm_cfft_q31+0x58>
 8022828:	2380      	movs	r3, #128	@ 0x80
 802282a:	009b      	lsls	r3, r3, #2
 802282c:	4299      	cmp	r1, r3
 802282e:	d0db      	beq.n	80227e8 <arm_cfft_q31+0x78>
 8022830:	e7b5      	b.n	802279e <arm_cfft_q31+0x2e>
 8022832:	2910      	cmp	r1, #16
 8022834:	d1b3      	bne.n	802279e <arm_cfft_q31+0x2e>
 8022836:	e7e9      	b.n	802280c <arm_cfft_q31+0x9c>

08022838 <arm_radix4_butterfly_q31>:
 8022838:	b5f0      	push	{r4, r5, r6, r7, lr}
 802283a:	464d      	mov	r5, r9
 802283c:	4644      	mov	r4, r8
 802283e:	465f      	mov	r7, fp
 8022840:	4656      	mov	r6, sl
 8022842:	469c      	mov	ip, r3
 8022844:	b4f0      	push	{r4, r5, r6, r7}
 8022846:	b0a7      	sub	sp, #156	@ 0x9c
 8022848:	9114      	str	r1, [sp, #80]	@ 0x50
 802284a:	0889      	lsrs	r1, r1, #2
 802284c:	9310      	str	r3, [sp, #64]	@ 0x40
 802284e:	00cb      	lsls	r3, r1, #3
 8022850:	0015      	movs	r5, r2
 8022852:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022854:	18c2      	adds	r2, r0, r3
 8022856:	000c      	movs	r4, r1
 8022858:	469a      	mov	sl, r3
 802285a:	9124      	str	r1, [sp, #144]	@ 0x90
 802285c:	18d1      	adds	r1, r2, r3
 802285e:	4663      	mov	r3, ip
 8022860:	468b      	mov	fp, r1
 8022862:	0119      	lsls	r1, r3, #4
 8022864:	910d      	str	r1, [sp, #52]	@ 0x34
 8022866:	00d9      	lsls	r1, r3, #3
 8022868:	005b      	lsls	r3, r3, #1
 802286a:	4463      	add	r3, ip
 802286c:	910e      	str	r1, [sp, #56]	@ 0x38
 802286e:	00d9      	lsls	r1, r3, #3
 8022870:	465b      	mov	r3, fp
 8022872:	44da      	add	sl, fp
 8022874:	4690      	mov	r8, r2
 8022876:	4683      	mov	fp, r0
 8022878:	4699      	mov	r9, r3
 802287a:	9022      	str	r0, [sp, #136]	@ 0x88
 802287c:	9025      	str	r0, [sp, #148]	@ 0x94
 802287e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022880:	9502      	str	r5, [sp, #8]
 8022882:	9500      	str	r5, [sp, #0]
 8022884:	9501      	str	r5, [sp, #4]
 8022886:	9407      	str	r4, [sp, #28]
 8022888:	465b      	mov	r3, fp
 802288a:	681b      	ldr	r3, [r3, #0]
 802288c:	4642      	mov	r2, r8
 802288e:	111c      	asrs	r4, r3, #4
 8022890:	464b      	mov	r3, r9
 8022892:	4658      	mov	r0, fp
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	6812      	ldr	r2, [r2, #0]
 8022898:	111b      	asrs	r3, r3, #4
 802289a:	18e7      	adds	r7, r4, r3
 802289c:	1ae3      	subs	r3, r4, r3
 802289e:	1114      	asrs	r4, r2, #4
 80228a0:	4652      	mov	r2, sl
 80228a2:	6840      	ldr	r0, [r0, #4]
 80228a4:	6812      	ldr	r2, [r2, #0]
 80228a6:	1105      	asrs	r5, r0, #4
 80228a8:	4648      	mov	r0, r9
 80228aa:	9303      	str	r3, [sp, #12]
 80228ac:	1113      	asrs	r3, r2, #4
 80228ae:	18e2      	adds	r2, r4, r3
 80228b0:	465c      	mov	r4, fp
 80228b2:	6840      	ldr	r0, [r0, #4]
 80228b4:	1103      	asrs	r3, r0, #4
 80228b6:	18ee      	adds	r6, r5, r3
 80228b8:	1ae8      	subs	r0, r5, r3
 80228ba:	18bb      	adds	r3, r7, r2
 80228bc:	6023      	str	r3, [r4, #0]
 80228be:	4644      	mov	r4, r8
 80228c0:	6864      	ldr	r4, [r4, #4]
 80228c2:	9004      	str	r0, [sp, #16]
 80228c4:	1125      	asrs	r5, r4, #4
 80228c6:	4654      	mov	r4, sl
 80228c8:	6864      	ldr	r4, [r4, #4]
 80228ca:	1123      	asrs	r3, r4, #4
 80228cc:	465c      	mov	r4, fp
 80228ce:	18eb      	adds	r3, r5, r3
 80228d0:	18f1      	adds	r1, r6, r3
 80228d2:	6061      	str	r1, [r4, #4]
 80228d4:	4655      	mov	r5, sl
 80228d6:	4644      	mov	r4, r8
 80228d8:	686d      	ldr	r5, [r5, #4]
 80228da:	6864      	ldr	r4, [r4, #4]
 80228dc:	1129      	asrs	r1, r5, #4
 80228de:	1124      	asrs	r4, r4, #4
 80228e0:	1a64      	subs	r4, r4, r1
 80228e2:	4641      	mov	r1, r8
 80228e4:	6809      	ldr	r1, [r1, #0]
 80228e6:	9405      	str	r4, [sp, #20]
 80228e8:	1108      	asrs	r0, r1, #4
 80228ea:	4651      	mov	r1, sl
 80228ec:	6809      	ldr	r1, [r1, #0]
 80228ee:	1abc      	subs	r4, r7, r2
 80228f0:	1109      	asrs	r1, r1, #4
 80228f2:	1a41      	subs	r1, r0, r1
 80228f4:	17e2      	asrs	r2, r4, #31
 80228f6:	9106      	str	r1, [sp, #24]
 80228f8:	0011      	movs	r1, r2
 80228fa:	9a01      	ldr	r2, [sp, #4]
 80228fc:	9108      	str	r1, [sp, #32]
 80228fe:	6817      	ldr	r7, [r2, #0]
 8022900:	17fd      	asrs	r5, r7, #31
 8022902:	0028      	movs	r0, r5
 8022904:	1af5      	subs	r5, r6, r3
 8022906:	17ee      	asrs	r6, r5, #31
 8022908:	960a      	str	r6, [sp, #40]	@ 0x28
 802290a:	6856      	ldr	r6, [r2, #4]
 802290c:	9009      	str	r0, [sp, #36]	@ 0x24
 802290e:	17f3      	asrs	r3, r6, #31
 8022910:	003a      	movs	r2, r7
 8022912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022914:	0003      	movs	r3, r0
 8022916:	0020      	movs	r0, r4
 8022918:	f7dd fe52 	bl	80005c0 <__aeabi_lmul>
 802291c:	0032      	movs	r2, r6
 802291e:	17f3      	asrs	r3, r6, #31
 8022920:	910c      	str	r1, [sp, #48]	@ 0x30
 8022922:	0028      	movs	r0, r5
 8022924:	17e9      	asrs	r1, r5, #31
 8022926:	f7dd fe4b 	bl	80005c0 <__aeabi_lmul>
 802292a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802292c:	002a      	movs	r2, r5
 802292e:	4684      	mov	ip, r0
 8022930:	4640      	mov	r0, r8
 8022932:	4461      	add	r1, ip
 8022934:	0049      	lsls	r1, r1, #1
 8022936:	6001      	str	r1, [r0, #0]
 8022938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802293a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802293c:	0038      	movs	r0, r7
 802293e:	f7dd fe3f 	bl	80005c0 <__aeabi_lmul>
 8022942:	0032      	movs	r2, r6
 8022944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022946:	000d      	movs	r5, r1
 8022948:	0020      	movs	r0, r4
 802294a:	9908      	ldr	r1, [sp, #32]
 802294c:	f7dd fe38 	bl	80005c0 <__aeabi_lmul>
 8022950:	4646      	mov	r6, r8
 8022952:	1a6d      	subs	r5, r5, r1
 8022954:	006d      	lsls	r5, r5, #1
 8022956:	6075      	str	r5, [r6, #4]
 8022958:	9903      	ldr	r1, [sp, #12]
 802295a:	9d05      	ldr	r5, [sp, #20]
 802295c:	000c      	movs	r4, r1
 802295e:	46ac      	mov	ip, r5
 8022960:	4464      	add	r4, ip
 8022962:	17e6      	asrs	r6, r4, #31
 8022964:	0031      	movs	r1, r6
 8022966:	9b00      	ldr	r3, [sp, #0]
 8022968:	9804      	ldr	r0, [sp, #16]
 802296a:	681e      	ldr	r6, [r3, #0]
 802296c:	17f7      	asrs	r7, r6, #31
 802296e:	9709      	str	r7, [sp, #36]	@ 0x24
 8022970:	9f06      	ldr	r7, [sp, #24]
 8022972:	0032      	movs	r2, r6
 8022974:	1bc7      	subs	r7, r0, r7
 8022976:	17fd      	asrs	r5, r7, #31
 8022978:	950a      	str	r5, [sp, #40]	@ 0x28
 802297a:	685d      	ldr	r5, [r3, #4]
 802297c:	17f3      	asrs	r3, r6, #31
 802297e:	17e8      	asrs	r0, r5, #31
 8022980:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022982:	0020      	movs	r0, r4
 8022984:	9108      	str	r1, [sp, #32]
 8022986:	f7dd fe1b 	bl	80005c0 <__aeabi_lmul>
 802298a:	002a      	movs	r2, r5
 802298c:	17eb      	asrs	r3, r5, #31
 802298e:	910c      	str	r1, [sp, #48]	@ 0x30
 8022990:	0038      	movs	r0, r7
 8022992:	17f9      	asrs	r1, r7, #31
 8022994:	f7dd fe14 	bl	80005c0 <__aeabi_lmul>
 8022998:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802299a:	003a      	movs	r2, r7
 802299c:	4684      	mov	ip, r0
 802299e:	4648      	mov	r0, r9
 80229a0:	4461      	add	r1, ip
 80229a2:	0049      	lsls	r1, r1, #1
 80229a4:	6001      	str	r1, [r0, #0]
 80229a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80229a8:	0030      	movs	r0, r6
 80229aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80229ac:	f7dd fe08 	bl	80005c0 <__aeabi_lmul>
 80229b0:	002a      	movs	r2, r5
 80229b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80229b4:	000e      	movs	r6, r1
 80229b6:	0020      	movs	r0, r4
 80229b8:	9908      	ldr	r1, [sp, #32]
 80229ba:	f7dd fe01 	bl	80005c0 <__aeabi_lmul>
 80229be:	464c      	mov	r4, r9
 80229c0:	9d05      	ldr	r5, [sp, #20]
 80229c2:	1a76      	subs	r6, r6, r1
 80229c4:	9903      	ldr	r1, [sp, #12]
 80229c6:	0076      	lsls	r6, r6, #1
 80229c8:	6066      	str	r6, [r4, #4]
 80229ca:	1b4c      	subs	r4, r1, r5
 80229cc:	9e06      	ldr	r6, [sp, #24]
 80229ce:	17e1      	asrs	r1, r4, #31
 80229d0:	9103      	str	r1, [sp, #12]
 80229d2:	9902      	ldr	r1, [sp, #8]
 80229d4:	46b4      	mov	ip, r6
 80229d6:	680f      	ldr	r7, [r1, #0]
 80229d8:	9804      	ldr	r0, [sp, #16]
 80229da:	17fd      	asrs	r5, r7, #31
 80229dc:	002b      	movs	r3, r5
 80229de:	684e      	ldr	r6, [r1, #4]
 80229e0:	4460      	add	r0, ip
 80229e2:	0005      	movs	r5, r0
 80229e4:	17c0      	asrs	r0, r0, #31
 80229e6:	9005      	str	r0, [sp, #20]
 80229e8:	17f0      	asrs	r0, r6, #31
 80229ea:	9006      	str	r0, [sp, #24]
 80229ec:	003a      	movs	r2, r7
 80229ee:	0020      	movs	r0, r4
 80229f0:	17e1      	asrs	r1, r4, #31
 80229f2:	9304      	str	r3, [sp, #16]
 80229f4:	f7dd fde4 	bl	80005c0 <__aeabi_lmul>
 80229f8:	0032      	movs	r2, r6
 80229fa:	9108      	str	r1, [sp, #32]
 80229fc:	17f3      	asrs	r3, r6, #31
 80229fe:	0028      	movs	r0, r5
 8022a00:	17e9      	asrs	r1, r5, #31
 8022a02:	f7dd fddd 	bl	80005c0 <__aeabi_lmul>
 8022a06:	9808      	ldr	r0, [sp, #32]
 8022a08:	002a      	movs	r2, r5
 8022a0a:	4684      	mov	ip, r0
 8022a0c:	4650      	mov	r0, sl
 8022a0e:	4461      	add	r1, ip
 8022a10:	0049      	lsls	r1, r1, #1
 8022a12:	6001      	str	r1, [r0, #0]
 8022a14:	9b05      	ldr	r3, [sp, #20]
 8022a16:	9904      	ldr	r1, [sp, #16]
 8022a18:	0038      	movs	r0, r7
 8022a1a:	f7dd fdd1 	bl	80005c0 <__aeabi_lmul>
 8022a1e:	0020      	movs	r0, r4
 8022a20:	2408      	movs	r4, #8
 8022a22:	000d      	movs	r5, r1
 8022a24:	0032      	movs	r2, r6
 8022a26:	9b06      	ldr	r3, [sp, #24]
 8022a28:	9903      	ldr	r1, [sp, #12]
 8022a2a:	f7dd fdc9 	bl	80005c0 <__aeabi_lmul>
 8022a2e:	46a4      	mov	ip, r4
 8022a30:	4650      	mov	r0, sl
 8022a32:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022a34:	44e3      	add	fp, ip
 8022a36:	44e0      	add	r8, ip
 8022a38:	44e1      	add	r9, ip
 8022a3a:	44e2      	add	sl, ip
 8022a3c:	46a4      	mov	ip, r4
 8022a3e:	1a6d      	subs	r5, r5, r1
 8022a40:	006d      	lsls	r5, r5, #1
 8022a42:	9a01      	ldr	r2, [sp, #4]
 8022a44:	6045      	str	r5, [r0, #4]
 8022a46:	9807      	ldr	r0, [sp, #28]
 8022a48:	4462      	add	r2, ip
 8022a4a:	3801      	subs	r0, #1
 8022a4c:	9201      	str	r2, [sp, #4]
 8022a4e:	9007      	str	r0, [sp, #28]
 8022a50:	9b00      	ldr	r3, [sp, #0]
 8022a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022a54:	9902      	ldr	r1, [sp, #8]
 8022a56:	4694      	mov	ip, r2
 8022a58:	4463      	add	r3, ip
 8022a5a:	9300      	str	r3, [sp, #0]
 8022a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022a5e:	469c      	mov	ip, r3
 8022a60:	4461      	add	r1, ip
 8022a62:	9102      	str	r1, [sp, #8]
 8022a64:	2800      	cmp	r0, #0
 8022a66:	d000      	beq.n	8022a6a <arm_radix4_butterfly_q31+0x232>
 8022a68:	e70e      	b.n	8022888 <arm_radix4_butterfly_q31+0x50>
 8022a6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a6c:	009b      	lsls	r3, r3, #2
 8022a6e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022a70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022a72:	9320      	str	r3, [sp, #128]	@ 0x80
 8022a74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022a76:	2b04      	cmp	r3, #4
 8022a78:	d800      	bhi.n	8022a7c <arm_radix4_butterfly_q31+0x244>
 8022a7a:	e180      	b.n	8022d7e <arm_radix4_butterfly_q31+0x546>
 8022a7c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022a7e:	0893      	lsrs	r3, r2, #2
 8022a80:	1e59      	subs	r1, r3, #1
 8022a82:	9321      	str	r3, [sp, #132]	@ 0x84
 8022a84:	00db      	lsls	r3, r3, #3
 8022a86:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022a88:	00d3      	lsls	r3, r2, #3
 8022a8a:	9300      	str	r3, [sp, #0]
 8022a8c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022a8e:	911a      	str	r1, [sp, #104]	@ 0x68
 8022a90:	00da      	lsls	r2, r3, #3
 8022a92:	921e      	str	r2, [sp, #120]	@ 0x78
 8022a94:	011a      	lsls	r2, r3, #4
 8022a96:	921d      	str	r2, [sp, #116]	@ 0x74
 8022a98:	001a      	movs	r2, r3
 8022a9a:	4694      	mov	ip, r2
 8022a9c:	005b      	lsls	r3, r3, #1
 8022a9e:	4463      	add	r3, ip
 8022aa0:	00db      	lsls	r3, r3, #3
 8022aa2:	931c      	str	r3, [sp, #112]	@ 0x70
 8022aa4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022aa6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022aa8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022aaa:	9318      	str	r3, [sp, #96]	@ 0x60
 8022aac:	9319      	str	r3, [sp, #100]	@ 0x64
 8022aae:	9316      	str	r3, [sp, #88]	@ 0x58
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	9315      	str	r3, [sp, #84]	@ 0x54
 8022ab4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022ab6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022ab8:	681a      	ldr	r2, [r3, #0]
 8022aba:	685b      	ldr	r3, [r3, #4]
 8022abc:	9205      	str	r2, [sp, #20]
 8022abe:	9306      	str	r3, [sp, #24]
 8022ac0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ac2:	468c      	mov	ip, r1
 8022ac4:	681a      	ldr	r2, [r3, #0]
 8022ac6:	685b      	ldr	r3, [r3, #4]
 8022ac8:	9207      	str	r2, [sp, #28]
 8022aca:	9308      	str	r3, [sp, #32]
 8022acc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ace:	681a      	ldr	r2, [r3, #0]
 8022ad0:	685b      	ldr	r3, [r3, #4]
 8022ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8022ad4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ad8:	0013      	movs	r3, r2
 8022ada:	4463      	add	r3, ip
 8022adc:	4698      	mov	r8, r3
 8022ade:	0013      	movs	r3, r2
 8022ae0:	4442      	add	r2, r8
 8022ae2:	4691      	mov	r9, r2
 8022ae4:	001a      	movs	r2, r3
 8022ae6:	444a      	add	r2, r9
 8022ae8:	4692      	mov	sl, r2
 8022aea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022aec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022aee:	4293      	cmp	r3, r2
 8022af0:	d800      	bhi.n	8022af4 <arm_radix4_butterfly_q31+0x2bc>
 8022af2:	e0dd      	b.n	8022cb0 <arm_radix4_butterfly_q31+0x478>
 8022af4:	4694      	mov	ip, r2
 8022af6:	468b      	mov	fp, r1
 8022af8:	4644      	mov	r4, r8
 8022afa:	4655      	mov	r5, sl
 8022afc:	9b07      	ldr	r3, [sp, #28]
 8022afe:	17db      	asrs	r3, r3, #31
 8022b00:	930c      	str	r3, [sp, #48]	@ 0x30
 8022b02:	9b08      	ldr	r3, [sp, #32]
 8022b04:	17db      	asrs	r3, r3, #31
 8022b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8022b08:	9b05      	ldr	r3, [sp, #20]
 8022b0a:	17db      	asrs	r3, r3, #31
 8022b0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022b0e:	9b06      	ldr	r3, [sp, #24]
 8022b10:	17db      	asrs	r3, r3, #31
 8022b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b16:	17db      	asrs	r3, r3, #31
 8022b18:	9310      	str	r3, [sp, #64]	@ 0x40
 8022b1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b1c:	17db      	asrs	r3, r3, #31
 8022b1e:	9311      	str	r3, [sp, #68]	@ 0x44
 8022b20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022b22:	4463      	add	r3, ip
 8022b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022b26:	465b      	mov	r3, fp
 8022b28:	4659      	mov	r1, fp
 8022b2a:	681a      	ldr	r2, [r3, #0]
 8022b2c:	464b      	mov	r3, r9
 8022b2e:	684f      	ldr	r7, [r1, #4]
 8022b30:	4649      	mov	r1, r9
 8022b32:	681b      	ldr	r3, [r3, #0]
 8022b34:	18d6      	adds	r6, r2, r3
 8022b36:	1ad3      	subs	r3, r2, r3
 8022b38:	9301      	str	r3, [sp, #4]
 8022b3a:	684b      	ldr	r3, [r1, #4]
 8022b3c:	18f8      	adds	r0, r7, r3
 8022b3e:	1af9      	subs	r1, r7, r3
 8022b40:	6827      	ldr	r7, [r4, #0]
 8022b42:	9102      	str	r1, [sp, #8]
 8022b44:	003a      	movs	r2, r7
 8022b46:	682f      	ldr	r7, [r5, #0]
 8022b48:	46bc      	mov	ip, r7
 8022b4a:	465f      	mov	r7, fp
 8022b4c:	4462      	add	r2, ip
 8022b4e:	18b3      	adds	r3, r6, r2
 8022b50:	109b      	asrs	r3, r3, #2
 8022b52:	603b      	str	r3, [r7, #0]
 8022b54:	6867      	ldr	r7, [r4, #4]
 8022b56:	1ab6      	subs	r6, r6, r2
 8022b58:	46b8      	mov	r8, r7
 8022b5a:	686f      	ldr	r7, [r5, #4]
 8022b5c:	17f2      	asrs	r2, r6, #31
 8022b5e:	46bc      	mov	ip, r7
 8022b60:	44e0      	add	r8, ip
 8022b62:	4643      	mov	r3, r8
 8022b64:	465f      	mov	r7, fp
 8022b66:	18c1      	adds	r1, r0, r3
 8022b68:	1089      	asrs	r1, r1, #2
 8022b6a:	6079      	str	r1, [r7, #4]
 8022b6c:	9900      	ldr	r1, [sp, #0]
 8022b6e:	4690      	mov	r8, r2
 8022b70:	468c      	mov	ip, r1
 8022b72:	6867      	ldr	r7, [r4, #4]
 8022b74:	6869      	ldr	r1, [r5, #4]
 8022b76:	44e3      	add	fp, ip
 8022b78:	1a7f      	subs	r7, r7, r1
 8022b7a:	9703      	str	r7, [sp, #12]
 8022b7c:	6829      	ldr	r1, [r5, #0]
 8022b7e:	6827      	ldr	r7, [r4, #0]
 8022b80:	1a7f      	subs	r7, r7, r1
 8022b82:	9704      	str	r7, [sp, #16]
 8022b84:	1ac7      	subs	r7, r0, r3
 8022b86:	17fa      	asrs	r2, r7, #31
 8022b88:	4692      	mov	sl, r2
 8022b8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022b8c:	9a07      	ldr	r2, [sp, #28]
 8022b8e:	0030      	movs	r0, r6
 8022b90:	4641      	mov	r1, r8
 8022b92:	f7dd fd15 	bl	80005c0 <__aeabi_lmul>
 8022b96:	9a08      	ldr	r2, [sp, #32]
 8022b98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022b9a:	9112      	str	r1, [sp, #72]	@ 0x48
 8022b9c:	0038      	movs	r0, r7
 8022b9e:	4651      	mov	r1, sl
 8022ba0:	f7dd fd0e 	bl	80005c0 <__aeabi_lmul>
 8022ba4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022ba6:	9a07      	ldr	r2, [sp, #28]
 8022ba8:	4684      	mov	ip, r0
 8022baa:	4461      	add	r1, ip
 8022bac:	1049      	asrs	r1, r1, #1
 8022bae:	6021      	str	r1, [r4, #0]
 8022bb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022bb2:	0038      	movs	r0, r7
 8022bb4:	4651      	mov	r1, sl
 8022bb6:	f7dd fd03 	bl	80005c0 <__aeabi_lmul>
 8022bba:	9a08      	ldr	r2, [sp, #32]
 8022bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022bbe:	000f      	movs	r7, r1
 8022bc0:	0030      	movs	r0, r6
 8022bc2:	4641      	mov	r1, r8
 8022bc4:	f7dd fcfc 	bl	80005c0 <__aeabi_lmul>
 8022bc8:	9b00      	ldr	r3, [sp, #0]
 8022bca:	9a01      	ldr	r2, [sp, #4]
 8022bcc:	469c      	mov	ip, r3
 8022bce:	9803      	ldr	r0, [sp, #12]
 8022bd0:	1a7f      	subs	r7, r7, r1
 8022bd2:	107f      	asrs	r7, r7, #1
 8022bd4:	6067      	str	r7, [r4, #4]
 8022bd6:	0016      	movs	r6, r2
 8022bd8:	4464      	add	r4, ip
 8022bda:	4684      	mov	ip, r0
 8022bdc:	4466      	add	r6, ip
 8022bde:	17f2      	asrs	r2, r6, #31
 8022be0:	4690      	mov	r8, r2
 8022be2:	9902      	ldr	r1, [sp, #8]
 8022be4:	9f04      	ldr	r7, [sp, #16]
 8022be6:	0030      	movs	r0, r6
 8022be8:	1bcf      	subs	r7, r1, r7
 8022bea:	17fa      	asrs	r2, r7, #31
 8022bec:	4692      	mov	sl, r2
 8022bee:	4641      	mov	r1, r8
 8022bf0:	9a05      	ldr	r2, [sp, #20]
 8022bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022bf4:	f7dd fce4 	bl	80005c0 <__aeabi_lmul>
 8022bf8:	9a06      	ldr	r2, [sp, #24]
 8022bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022bfc:	9112      	str	r1, [sp, #72]	@ 0x48
 8022bfe:	0038      	movs	r0, r7
 8022c00:	4651      	mov	r1, sl
 8022c02:	f7dd fcdd 	bl	80005c0 <__aeabi_lmul>
 8022c06:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022c08:	9a05      	ldr	r2, [sp, #20]
 8022c0a:	4684      	mov	ip, r0
 8022c0c:	4648      	mov	r0, r9
 8022c0e:	4461      	add	r1, ip
 8022c10:	1049      	asrs	r1, r1, #1
 8022c12:	6001      	str	r1, [r0, #0]
 8022c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022c16:	0038      	movs	r0, r7
 8022c18:	4651      	mov	r1, sl
 8022c1a:	f7dd fcd1 	bl	80005c0 <__aeabi_lmul>
 8022c1e:	9a06      	ldr	r2, [sp, #24]
 8022c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022c22:	000f      	movs	r7, r1
 8022c24:	0030      	movs	r0, r6
 8022c26:	4641      	mov	r1, r8
 8022c28:	f7dd fcca 	bl	80005c0 <__aeabi_lmul>
 8022c2c:	464e      	mov	r6, r9
 8022c2e:	9a00      	ldr	r2, [sp, #0]
 8022c30:	9b01      	ldr	r3, [sp, #4]
 8022c32:	4694      	mov	ip, r2
 8022c34:	9803      	ldr	r0, [sp, #12]
 8022c36:	1a7f      	subs	r7, r7, r1
 8022c38:	107f      	asrs	r7, r7, #1
 8022c3a:	6077      	str	r7, [r6, #4]
 8022c3c:	1a1e      	subs	r6, r3, r0
 8022c3e:	9b04      	ldr	r3, [sp, #16]
 8022c40:	44e1      	add	r9, ip
 8022c42:	469c      	mov	ip, r3
 8022c44:	17f0      	asrs	r0, r6, #31
 8022c46:	4680      	mov	r8, r0
 8022c48:	9902      	ldr	r1, [sp, #8]
 8022c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022c4c:	4461      	add	r1, ip
 8022c4e:	17cb      	asrs	r3, r1, #31
 8022c50:	000f      	movs	r7, r1
 8022c52:	469a      	mov	sl, r3
 8022c54:	0030      	movs	r0, r6
 8022c56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022c58:	4641      	mov	r1, r8
 8022c5a:	f7dd fcb1 	bl	80005c0 <__aeabi_lmul>
 8022c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022c60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022c62:	9101      	str	r1, [sp, #4]
 8022c64:	0038      	movs	r0, r7
 8022c66:	4651      	mov	r1, sl
 8022c68:	f7dd fcaa 	bl	80005c0 <__aeabi_lmul>
 8022c6c:	9801      	ldr	r0, [sp, #4]
 8022c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022c70:	4684      	mov	ip, r0
 8022c72:	4461      	add	r1, ip
 8022c74:	1049      	asrs	r1, r1, #1
 8022c76:	6029      	str	r1, [r5, #0]
 8022c78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022c7a:	0038      	movs	r0, r7
 8022c7c:	4651      	mov	r1, sl
 8022c7e:	f7dd fc9f 	bl	80005c0 <__aeabi_lmul>
 8022c82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022c84:	000f      	movs	r7, r1
 8022c86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022c88:	0030      	movs	r0, r6
 8022c8a:	4641      	mov	r1, r8
 8022c8c:	f7dd fc98 	bl	80005c0 <__aeabi_lmul>
 8022c90:	1a7f      	subs	r7, r7, r1
 8022c92:	107f      	asrs	r7, r7, #1
 8022c94:	606f      	str	r7, [r5, #4]
 8022c96:	9a00      	ldr	r2, [sp, #0]
 8022c98:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022c9a:	4694      	mov	ip, r2
 8022c9c:	4465      	add	r5, ip
 8022c9e:	468c      	mov	ip, r1
 8022ca0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022ca2:	0013      	movs	r3, r2
 8022ca4:	4462      	add	r2, ip
 8022ca6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022ca8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022caa:	429a      	cmp	r2, r3
 8022cac:	d900      	bls.n	8022cb0 <arm_radix4_butterfly_q31+0x478>
 8022cae:	e73a      	b.n	8022b26 <arm_radix4_butterfly_q31+0x2ee>
 8022cb0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022cb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022cb4:	468c      	mov	ip, r1
 8022cb6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8022cb8:	4462      	add	r2, ip
 8022cba:	468c      	mov	ip, r1
 8022cbc:	9216      	str	r2, [sp, #88]	@ 0x58
 8022cbe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022cc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022cc2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022cc4:	4462      	add	r2, ip
 8022cc6:	468c      	mov	ip, r1
 8022cc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8022cca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022ccc:	3301      	adds	r3, #1
 8022cce:	4462      	add	r2, ip
 8022cd0:	9218      	str	r2, [sp, #96]	@ 0x60
 8022cd2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8022cd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8022cd6:	3208      	adds	r2, #8
 8022cd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022cda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022cdc:	4293      	cmp	r3, r2
 8022cde:	d800      	bhi.n	8022ce2 <arm_radix4_butterfly_q31+0x4aa>
 8022ce0:	e6e8      	b.n	8022ab4 <arm_radix4_butterfly_q31+0x27c>
 8022ce2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022ce4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022ce6:	009b      	lsls	r3, r3, #2
 8022ce8:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022cea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022cec:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022cee:	089b      	lsrs	r3, r3, #2
 8022cf0:	9320      	str	r3, [sp, #128]	@ 0x80
 8022cf2:	2b04      	cmp	r3, #4
 8022cf4:	d900      	bls.n	8022cf8 <arm_radix4_butterfly_q31+0x4c0>
 8022cf6:	e6c1      	b.n	8022a7c <arm_radix4_butterfly_q31+0x244>
 8022cf8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022cfa:	469a      	mov	sl, r3
 8022cfc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022cfe:	691c      	ldr	r4, [r3, #16]
 8022d00:	685a      	ldr	r2, [r3, #4]
 8022d02:	46a1      	mov	r9, r4
 8022d04:	4690      	mov	r8, r2
 8022d06:	6819      	ldr	r1, [r3, #0]
 8022d08:	689a      	ldr	r2, [r3, #8]
 8022d0a:	699f      	ldr	r7, [r3, #24]
 8022d0c:	188d      	adds	r5, r1, r2
 8022d0e:	444d      	add	r5, r9
 8022d10:	19ed      	adds	r5, r5, r7
 8022d12:	69de      	ldr	r6, [r3, #28]
 8022d14:	601d      	str	r5, [r3, #0]
 8022d16:	4645      	mov	r5, r8
 8022d18:	46b4      	mov	ip, r6
 8022d1a:	68d8      	ldr	r0, [r3, #12]
 8022d1c:	695c      	ldr	r4, [r3, #20]
 8022d1e:	182d      	adds	r5, r5, r0
 8022d20:	192d      	adds	r5, r5, r4
 8022d22:	4465      	add	r5, ip
 8022d24:	605d      	str	r5, [r3, #4]
 8022d26:	1a8d      	subs	r5, r1, r2
 8022d28:	444d      	add	r5, r9
 8022d2a:	1bed      	subs	r5, r5, r7
 8022d2c:	609d      	str	r5, [r3, #8]
 8022d2e:	4645      	mov	r5, r8
 8022d30:	1a2d      	subs	r5, r5, r0
 8022d32:	192d      	adds	r5, r5, r4
 8022d34:	1bad      	subs	r5, r5, r6
 8022d36:	464e      	mov	r6, r9
 8022d38:	60dd      	str	r5, [r3, #12]
 8022d3a:	180d      	adds	r5, r1, r0
 8022d3c:	1bad      	subs	r5, r5, r6
 8022d3e:	4666      	mov	r6, ip
 8022d40:	1bad      	subs	r5, r5, r6
 8022d42:	611d      	str	r5, [r3, #16]
 8022d44:	4645      	mov	r5, r8
 8022d46:	1aad      	subs	r5, r5, r2
 8022d48:	4442      	add	r2, r8
 8022d4a:	1b12      	subs	r2, r2, r4
 8022d4c:	1bd2      	subs	r2, r2, r7
 8022d4e:	1a08      	subs	r0, r1, r0
 8022d50:	61da      	str	r2, [r3, #28]
 8022d52:	4649      	mov	r1, r9
 8022d54:	2201      	movs	r2, #1
 8022d56:	1a41      	subs	r1, r0, r1
 8022d58:	4252      	negs	r2, r2
 8022d5a:	4461      	add	r1, ip
 8022d5c:	4694      	mov	ip, r2
 8022d5e:	44e2      	add	sl, ip
 8022d60:	4652      	mov	r2, sl
 8022d62:	1b2d      	subs	r5, r5, r4
 8022d64:	19ed      	adds	r5, r5, r7
 8022d66:	615d      	str	r5, [r3, #20]
 8022d68:	6199      	str	r1, [r3, #24]
 8022d6a:	3320      	adds	r3, #32
 8022d6c:	2a00      	cmp	r2, #0
 8022d6e:	d1c6      	bne.n	8022cfe <arm_radix4_butterfly_q31+0x4c6>
 8022d70:	b027      	add	sp, #156	@ 0x9c
 8022d72:	bc3c      	pop	{r2, r3, r4, r5}
 8022d74:	4690      	mov	r8, r2
 8022d76:	4699      	mov	r9, r3
 8022d78:	46a2      	mov	sl, r4
 8022d7a:	46ab      	mov	fp, r5
 8022d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d7e:	469a      	mov	sl, r3
 8022d80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022d82:	e7bc      	b.n	8022cfe <arm_radix4_butterfly_q31+0x4c6>

08022d84 <arm_radix4_butterfly_inverse_q31>:
 8022d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d86:	464d      	mov	r5, r9
 8022d88:	4644      	mov	r4, r8
 8022d8a:	465f      	mov	r7, fp
 8022d8c:	4656      	mov	r6, sl
 8022d8e:	b4f0      	push	{r4, r5, r6, r7}
 8022d90:	b0a7      	sub	sp, #156	@ 0x9c
 8022d92:	469c      	mov	ip, r3
 8022d94:	9114      	str	r1, [sp, #80]	@ 0x50
 8022d96:	0889      	lsrs	r1, r1, #2
 8022d98:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d9a:	00cb      	lsls	r3, r1, #3
 8022d9c:	0015      	movs	r5, r2
 8022d9e:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022da0:	18c2      	adds	r2, r0, r3
 8022da2:	000c      	movs	r4, r1
 8022da4:	9124      	str	r1, [sp, #144]	@ 0x90
 8022da6:	18d1      	adds	r1, r2, r3
 8022da8:	468b      	mov	fp, r1
 8022daa:	469a      	mov	sl, r3
 8022dac:	4663      	mov	r3, ip
 8022dae:	44da      	add	sl, fp
 8022db0:	46d0      	mov	r8, sl
 8022db2:	4681      	mov	r9, r0
 8022db4:	4692      	mov	sl, r2
 8022db6:	0119      	lsls	r1, r3, #4
 8022db8:	910d      	str	r1, [sp, #52]	@ 0x34
 8022dba:	00d9      	lsls	r1, r3, #3
 8022dbc:	005b      	lsls	r3, r3, #1
 8022dbe:	4463      	add	r3, ip
 8022dc0:	910e      	str	r1, [sp, #56]	@ 0x38
 8022dc2:	00d9      	lsls	r1, r3, #3
 8022dc4:	9022      	str	r0, [sp, #136]	@ 0x88
 8022dc6:	9025      	str	r0, [sp, #148]	@ 0x94
 8022dc8:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022dca:	9502      	str	r5, [sp, #8]
 8022dcc:	9500      	str	r5, [sp, #0]
 8022dce:	9501      	str	r5, [sp, #4]
 8022dd0:	9409      	str	r4, [sp, #36]	@ 0x24
 8022dd2:	464b      	mov	r3, r9
 8022dd4:	681b      	ldr	r3, [r3, #0]
 8022dd6:	4652      	mov	r2, sl
 8022dd8:	111c      	asrs	r4, r3, #4
 8022dda:	465b      	mov	r3, fp
 8022ddc:	4648      	mov	r0, r9
 8022dde:	681b      	ldr	r3, [r3, #0]
 8022de0:	6812      	ldr	r2, [r2, #0]
 8022de2:	6840      	ldr	r0, [r0, #4]
 8022de4:	111b      	asrs	r3, r3, #4
 8022de6:	18e7      	adds	r7, r4, r3
 8022de8:	1ae3      	subs	r3, r4, r3
 8022dea:	1114      	asrs	r4, r2, #4
 8022dec:	4642      	mov	r2, r8
 8022dee:	1105      	asrs	r5, r0, #4
 8022df0:	4658      	mov	r0, fp
 8022df2:	6812      	ldr	r2, [r2, #0]
 8022df4:	6840      	ldr	r0, [r0, #4]
 8022df6:	9303      	str	r3, [sp, #12]
 8022df8:	1113      	asrs	r3, r2, #4
 8022dfa:	18e2      	adds	r2, r4, r3
 8022dfc:	1103      	asrs	r3, r0, #4
 8022dfe:	18ee      	adds	r6, r5, r3
 8022e00:	1ae8      	subs	r0, r5, r3
 8022e02:	464d      	mov	r5, r9
 8022e04:	18bb      	adds	r3, r7, r2
 8022e06:	602b      	str	r3, [r5, #0]
 8022e08:	4641      	mov	r1, r8
 8022e0a:	4655      	mov	r5, sl
 8022e0c:	6849      	ldr	r1, [r1, #4]
 8022e0e:	686d      	ldr	r5, [r5, #4]
 8022e10:	110b      	asrs	r3, r1, #4
 8022e12:	112d      	asrs	r5, r5, #4
 8022e14:	18eb      	adds	r3, r5, r3
 8022e16:	464d      	mov	r5, r9
 8022e18:	18f1      	adds	r1, r6, r3
 8022e1a:	6069      	str	r1, [r5, #4]
 8022e1c:	4655      	mov	r5, sl
 8022e1e:	686d      	ldr	r5, [r5, #4]
 8022e20:	9004      	str	r0, [sp, #16]
 8022e22:	112c      	asrs	r4, r5, #4
 8022e24:	4645      	mov	r5, r8
 8022e26:	686d      	ldr	r5, [r5, #4]
 8022e28:	1129      	asrs	r1, r5, #4
 8022e2a:	1a65      	subs	r5, r4, r1
 8022e2c:	4651      	mov	r1, sl
 8022e2e:	6809      	ldr	r1, [r1, #0]
 8022e30:	1abc      	subs	r4, r7, r2
 8022e32:	1108      	asrs	r0, r1, #4
 8022e34:	4641      	mov	r1, r8
 8022e36:	17e2      	asrs	r2, r4, #31
 8022e38:	6809      	ldr	r1, [r1, #0]
 8022e3a:	9207      	str	r2, [sp, #28]
 8022e3c:	9a01      	ldr	r2, [sp, #4]
 8022e3e:	1109      	asrs	r1, r1, #4
 8022e40:	6817      	ldr	r7, [r2, #0]
 8022e42:	1a41      	subs	r1, r0, r1
 8022e44:	9106      	str	r1, [sp, #24]
 8022e46:	0039      	movs	r1, r7
 8022e48:	17ff      	asrs	r7, r7, #31
 8022e4a:	0038      	movs	r0, r7
 8022e4c:	9505      	str	r5, [sp, #20]
 8022e4e:	1af5      	subs	r5, r6, r3
 8022e50:	17ef      	asrs	r7, r5, #31
 8022e52:	970b      	str	r7, [sp, #44]	@ 0x2c
 8022e54:	6857      	ldr	r7, [r2, #4]
 8022e56:	0003      	movs	r3, r0
 8022e58:	17fe      	asrs	r6, r7, #31
 8022e5a:	000a      	movs	r2, r1
 8022e5c:	9108      	str	r1, [sp, #32]
 8022e5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8022e60:	17e1      	asrs	r1, r4, #31
 8022e62:	0020      	movs	r0, r4
 8022e64:	960c      	str	r6, [sp, #48]	@ 0x30
 8022e66:	f7dd fbab 	bl	80005c0 <__aeabi_lmul>
 8022e6a:	003a      	movs	r2, r7
 8022e6c:	17fb      	asrs	r3, r7, #31
 8022e6e:	000e      	movs	r6, r1
 8022e70:	0028      	movs	r0, r5
 8022e72:	17e9      	asrs	r1, r5, #31
 8022e74:	f7dd fba4 	bl	80005c0 <__aeabi_lmul>
 8022e78:	4653      	mov	r3, sl
 8022e7a:	1a76      	subs	r6, r6, r1
 8022e7c:	0076      	lsls	r6, r6, #1
 8022e7e:	601e      	str	r6, [r3, #0]
 8022e80:	002a      	movs	r2, r5
 8022e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e84:	9808      	ldr	r0, [sp, #32]
 8022e86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022e88:	f7dd fb9a 	bl	80005c0 <__aeabi_lmul>
 8022e8c:	003a      	movs	r2, r7
 8022e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022e90:	000d      	movs	r5, r1
 8022e92:	0020      	movs	r0, r4
 8022e94:	9907      	ldr	r1, [sp, #28]
 8022e96:	f7dd fb93 	bl	80005c0 <__aeabi_lmul>
 8022e9a:	4657      	mov	r7, sl
 8022e9c:	186d      	adds	r5, r5, r1
 8022e9e:	006d      	lsls	r5, r5, #1
 8022ea0:	607d      	str	r5, [r7, #4]
 8022ea2:	9b03      	ldr	r3, [sp, #12]
 8022ea4:	9e06      	ldr	r6, [sp, #24]
 8022ea6:	9d05      	ldr	r5, [sp, #20]
 8022ea8:	46b4      	mov	ip, r6
 8022eaa:	1b5d      	subs	r5, r3, r5
 8022eac:	9b00      	ldr	r3, [sp, #0]
 8022eae:	17ef      	asrs	r7, r5, #31
 8022eb0:	0039      	movs	r1, r7
 8022eb2:	681f      	ldr	r7, [r3, #0]
 8022eb4:	17fc      	asrs	r4, r7, #31
 8022eb6:	0020      	movs	r0, r4
 8022eb8:	9c04      	ldr	r4, [sp, #16]
 8022eba:	4464      	add	r4, ip
 8022ebc:	17e6      	asrs	r6, r4, #31
 8022ebe:	9407      	str	r4, [sp, #28]
 8022ec0:	9608      	str	r6, [sp, #32]
 8022ec2:	685e      	ldr	r6, [r3, #4]
 8022ec4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022ec6:	17f2      	asrs	r2, r6, #31
 8022ec8:	0003      	movs	r3, r0
 8022eca:	920c      	str	r2, [sp, #48]	@ 0x30
 8022ecc:	0028      	movs	r0, r5
 8022ece:	003a      	movs	r2, r7
 8022ed0:	910a      	str	r1, [sp, #40]	@ 0x28
 8022ed2:	f7dd fb75 	bl	80005c0 <__aeabi_lmul>
 8022ed6:	0032      	movs	r2, r6
 8022ed8:	17f3      	asrs	r3, r6, #31
 8022eda:	9807      	ldr	r0, [sp, #28]
 8022edc:	000c      	movs	r4, r1
 8022ede:	9908      	ldr	r1, [sp, #32]
 8022ee0:	f7dd fb6e 	bl	80005c0 <__aeabi_lmul>
 8022ee4:	4658      	mov	r0, fp
 8022ee6:	1a64      	subs	r4, r4, r1
 8022ee8:	0064      	lsls	r4, r4, #1
 8022eea:	9a07      	ldr	r2, [sp, #28]
 8022eec:	6004      	str	r4, [r0, #0]
 8022eee:	9b08      	ldr	r3, [sp, #32]
 8022ef0:	0038      	movs	r0, r7
 8022ef2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022ef4:	f7dd fb64 	bl	80005c0 <__aeabi_lmul>
 8022ef8:	0032      	movs	r2, r6
 8022efa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022efc:	000c      	movs	r4, r1
 8022efe:	0028      	movs	r0, r5
 8022f00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022f02:	f7dd fb5d 	bl	80005c0 <__aeabi_lmul>
 8022f06:	9d05      	ldr	r5, [sp, #20]
 8022f08:	465f      	mov	r7, fp
 8022f0a:	46ac      	mov	ip, r5
 8022f0c:	1864      	adds	r4, r4, r1
 8022f0e:	9903      	ldr	r1, [sp, #12]
 8022f10:	0064      	lsls	r4, r4, #1
 8022f12:	4461      	add	r1, ip
 8022f14:	607c      	str	r4, [r7, #4]
 8022f16:	000c      	movs	r4, r1
 8022f18:	17c9      	asrs	r1, r1, #31
 8022f1a:	9105      	str	r1, [sp, #20]
 8022f1c:	9902      	ldr	r1, [sp, #8]
 8022f1e:	9804      	ldr	r0, [sp, #16]
 8022f20:	680d      	ldr	r5, [r1, #0]
 8022f22:	9e06      	ldr	r6, [sp, #24]
 8022f24:	002b      	movs	r3, r5
 8022f26:	17ed      	asrs	r5, r5, #31
 8022f28:	684f      	ldr	r7, [r1, #4]
 8022f2a:	9503      	str	r5, [sp, #12]
 8022f2c:	1b85      	subs	r5, r0, r6
 8022f2e:	17e8      	asrs	r0, r5, #31
 8022f30:	001a      	movs	r2, r3
 8022f32:	9006      	str	r0, [sp, #24]
 8022f34:	17fe      	asrs	r6, r7, #31
 8022f36:	9304      	str	r3, [sp, #16]
 8022f38:	0020      	movs	r0, r4
 8022f3a:	9b03      	ldr	r3, [sp, #12]
 8022f3c:	17e1      	asrs	r1, r4, #31
 8022f3e:	9607      	str	r6, [sp, #28]
 8022f40:	f7dd fb3e 	bl	80005c0 <__aeabi_lmul>
 8022f44:	003a      	movs	r2, r7
 8022f46:	000e      	movs	r6, r1
 8022f48:	17fb      	asrs	r3, r7, #31
 8022f4a:	0028      	movs	r0, r5
 8022f4c:	17e9      	asrs	r1, r5, #31
 8022f4e:	f7dd fb37 	bl	80005c0 <__aeabi_lmul>
 8022f52:	4640      	mov	r0, r8
 8022f54:	1a76      	subs	r6, r6, r1
 8022f56:	0076      	lsls	r6, r6, #1
 8022f58:	002a      	movs	r2, r5
 8022f5a:	9b06      	ldr	r3, [sp, #24]
 8022f5c:	6006      	str	r6, [r0, #0]
 8022f5e:	9903      	ldr	r1, [sp, #12]
 8022f60:	9804      	ldr	r0, [sp, #16]
 8022f62:	f7dd fb2d 	bl	80005c0 <__aeabi_lmul>
 8022f66:	0020      	movs	r0, r4
 8022f68:	2408      	movs	r4, #8
 8022f6a:	9b07      	ldr	r3, [sp, #28]
 8022f6c:	000d      	movs	r5, r1
 8022f6e:	003a      	movs	r2, r7
 8022f70:	9905      	ldr	r1, [sp, #20]
 8022f72:	f7dd fb25 	bl	80005c0 <__aeabi_lmul>
 8022f76:	4640      	mov	r0, r8
 8022f78:	46a4      	mov	ip, r4
 8022f7a:	186d      	adds	r5, r5, r1
 8022f7c:	006d      	lsls	r5, r5, #1
 8022f7e:	6045      	str	r5, [r0, #4]
 8022f80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f82:	44e1      	add	r9, ip
 8022f84:	3801      	subs	r0, #1
 8022f86:	9009      	str	r0, [sp, #36]	@ 0x24
 8022f88:	9a01      	ldr	r2, [sp, #4]
 8022f8a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022f8c:	44e2      	add	sl, ip
 8022f8e:	44e3      	add	fp, ip
 8022f90:	44e0      	add	r8, ip
 8022f92:	46a4      	mov	ip, r4
 8022f94:	4462      	add	r2, ip
 8022f96:	9201      	str	r2, [sp, #4]
 8022f98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f9a:	9b00      	ldr	r3, [sp, #0]
 8022f9c:	4694      	mov	ip, r2
 8022f9e:	4463      	add	r3, ip
 8022fa0:	9300      	str	r3, [sp, #0]
 8022fa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022fa4:	9902      	ldr	r1, [sp, #8]
 8022fa6:	469c      	mov	ip, r3
 8022fa8:	4461      	add	r1, ip
 8022faa:	9102      	str	r1, [sp, #8]
 8022fac:	2800      	cmp	r0, #0
 8022fae:	d000      	beq.n	8022fb2 <arm_radix4_butterfly_inverse_q31+0x22e>
 8022fb0:	e70f      	b.n	8022dd2 <arm_radix4_butterfly_inverse_q31+0x4e>
 8022fb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022fb4:	009b      	lsls	r3, r3, #2
 8022fb6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022fb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022fba:	9320      	str	r3, [sp, #128]	@ 0x80
 8022fbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022fbe:	2b04      	cmp	r3, #4
 8022fc0:	d800      	bhi.n	8022fc4 <arm_radix4_butterfly_inverse_q31+0x240>
 8022fc2:	e17c      	b.n	80232be <arm_radix4_butterfly_inverse_q31+0x53a>
 8022fc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022fc6:	0893      	lsrs	r3, r2, #2
 8022fc8:	1e59      	subs	r1, r3, #1
 8022fca:	9321      	str	r3, [sp, #132]	@ 0x84
 8022fcc:	00db      	lsls	r3, r3, #3
 8022fce:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022fd0:	00d3      	lsls	r3, r2, #3
 8022fd2:	9300      	str	r3, [sp, #0]
 8022fd4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022fd6:	911a      	str	r1, [sp, #104]	@ 0x68
 8022fd8:	00da      	lsls	r2, r3, #3
 8022fda:	921e      	str	r2, [sp, #120]	@ 0x78
 8022fdc:	011a      	lsls	r2, r3, #4
 8022fde:	921d      	str	r2, [sp, #116]	@ 0x74
 8022fe0:	001a      	movs	r2, r3
 8022fe2:	4694      	mov	ip, r2
 8022fe4:	005b      	lsls	r3, r3, #1
 8022fe6:	4463      	add	r3, ip
 8022fe8:	00db      	lsls	r3, r3, #3
 8022fea:	931c      	str	r3, [sp, #112]	@ 0x70
 8022fec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fee:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022ff0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022ff2:	9318      	str	r3, [sp, #96]	@ 0x60
 8022ff4:	9319      	str	r3, [sp, #100]	@ 0x64
 8022ff6:	9316      	str	r3, [sp, #88]	@ 0x58
 8022ff8:	2300      	movs	r3, #0
 8022ffa:	9315      	str	r3, [sp, #84]	@ 0x54
 8022ffc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022ffe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023000:	681a      	ldr	r2, [r3, #0]
 8023002:	685b      	ldr	r3, [r3, #4]
 8023004:	9205      	str	r2, [sp, #20]
 8023006:	9306      	str	r3, [sp, #24]
 8023008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802300a:	468c      	mov	ip, r1
 802300c:	681a      	ldr	r2, [r3, #0]
 802300e:	685b      	ldr	r3, [r3, #4]
 8023010:	9207      	str	r2, [sp, #28]
 8023012:	9308      	str	r3, [sp, #32]
 8023014:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023016:	681a      	ldr	r2, [r3, #0]
 8023018:	685b      	ldr	r3, [r3, #4]
 802301a:	9209      	str	r2, [sp, #36]	@ 0x24
 802301c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802301e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023020:	0013      	movs	r3, r2
 8023022:	4463      	add	r3, ip
 8023024:	4698      	mov	r8, r3
 8023026:	0013      	movs	r3, r2
 8023028:	4442      	add	r2, r8
 802302a:	4691      	mov	r9, r2
 802302c:	001a      	movs	r2, r3
 802302e:	444a      	add	r2, r9
 8023030:	4692      	mov	sl, r2
 8023032:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023034:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023036:	4293      	cmp	r3, r2
 8023038:	d800      	bhi.n	802303c <arm_radix4_butterfly_inverse_q31+0x2b8>
 802303a:	e0d9      	b.n	80231f0 <arm_radix4_butterfly_inverse_q31+0x46c>
 802303c:	4694      	mov	ip, r2
 802303e:	4644      	mov	r4, r8
 8023040:	4655      	mov	r5, sl
 8023042:	4688      	mov	r8, r1
 8023044:	9b07      	ldr	r3, [sp, #28]
 8023046:	17db      	asrs	r3, r3, #31
 8023048:	930c      	str	r3, [sp, #48]	@ 0x30
 802304a:	9b08      	ldr	r3, [sp, #32]
 802304c:	17db      	asrs	r3, r3, #31
 802304e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023050:	9b05      	ldr	r3, [sp, #20]
 8023052:	17db      	asrs	r3, r3, #31
 8023054:	930e      	str	r3, [sp, #56]	@ 0x38
 8023056:	9b06      	ldr	r3, [sp, #24]
 8023058:	17db      	asrs	r3, r3, #31
 802305a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802305c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802305e:	17db      	asrs	r3, r3, #31
 8023060:	9310      	str	r3, [sp, #64]	@ 0x40
 8023062:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023064:	17db      	asrs	r3, r3, #31
 8023066:	9311      	str	r3, [sp, #68]	@ 0x44
 8023068:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802306a:	4463      	add	r3, ip
 802306c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802306e:	4643      	mov	r3, r8
 8023070:	4641      	mov	r1, r8
 8023072:	681a      	ldr	r2, [r3, #0]
 8023074:	464b      	mov	r3, r9
 8023076:	684f      	ldr	r7, [r1, #4]
 8023078:	4649      	mov	r1, r9
 802307a:	681b      	ldr	r3, [r3, #0]
 802307c:	18d6      	adds	r6, r2, r3
 802307e:	1ad3      	subs	r3, r2, r3
 8023080:	9301      	str	r3, [sp, #4]
 8023082:	684b      	ldr	r3, [r1, #4]
 8023084:	1af9      	subs	r1, r7, r3
 8023086:	9102      	str	r1, [sp, #8]
 8023088:	6829      	ldr	r1, [r5, #0]
 802308a:	18f8      	adds	r0, r7, r3
 802308c:	468c      	mov	ip, r1
 802308e:	6827      	ldr	r7, [r4, #0]
 8023090:	4467      	add	r7, ip
 8023092:	003a      	movs	r2, r7
 8023094:	19f3      	adds	r3, r6, r7
 8023096:	4647      	mov	r7, r8
 8023098:	109b      	asrs	r3, r3, #2
 802309a:	603b      	str	r3, [r7, #0]
 802309c:	6869      	ldr	r1, [r5, #4]
 802309e:	6867      	ldr	r7, [r4, #4]
 80230a0:	468c      	mov	ip, r1
 80230a2:	4467      	add	r7, ip
 80230a4:	003b      	movs	r3, r7
 80230a6:	19c1      	adds	r1, r0, r7
 80230a8:	4647      	mov	r7, r8
 80230aa:	1ab6      	subs	r6, r6, r2
 80230ac:	1089      	asrs	r1, r1, #2
 80230ae:	6079      	str	r1, [r7, #4]
 80230b0:	17f2      	asrs	r2, r6, #31
 80230b2:	9900      	ldr	r1, [sp, #0]
 80230b4:	4692      	mov	sl, r2
 80230b6:	468c      	mov	ip, r1
 80230b8:	6867      	ldr	r7, [r4, #4]
 80230ba:	6869      	ldr	r1, [r5, #4]
 80230bc:	44e0      	add	r8, ip
 80230be:	1a7f      	subs	r7, r7, r1
 80230c0:	9703      	str	r7, [sp, #12]
 80230c2:	6821      	ldr	r1, [r4, #0]
 80230c4:	682f      	ldr	r7, [r5, #0]
 80230c6:	1bc9      	subs	r1, r1, r7
 80230c8:	1ac7      	subs	r7, r0, r3
 80230ca:	17fa      	asrs	r2, r7, #31
 80230cc:	4693      	mov	fp, r2
 80230ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230d0:	9a07      	ldr	r2, [sp, #28]
 80230d2:	9104      	str	r1, [sp, #16]
 80230d4:	0030      	movs	r0, r6
 80230d6:	4651      	mov	r1, sl
 80230d8:	f7dd fa72 	bl	80005c0 <__aeabi_lmul>
 80230dc:	9a08      	ldr	r2, [sp, #32]
 80230de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80230e0:	9112      	str	r1, [sp, #72]	@ 0x48
 80230e2:	0038      	movs	r0, r7
 80230e4:	4659      	mov	r1, fp
 80230e6:	f7dd fa6b 	bl	80005c0 <__aeabi_lmul>
 80230ea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80230ec:	9a07      	ldr	r2, [sp, #28]
 80230ee:	1a41      	subs	r1, r0, r1
 80230f0:	1049      	asrs	r1, r1, #1
 80230f2:	6021      	str	r1, [r4, #0]
 80230f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230f6:	0038      	movs	r0, r7
 80230f8:	4659      	mov	r1, fp
 80230fa:	f7dd fa61 	bl	80005c0 <__aeabi_lmul>
 80230fe:	9a08      	ldr	r2, [sp, #32]
 8023100:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023102:	000f      	movs	r7, r1
 8023104:	0030      	movs	r0, r6
 8023106:	4651      	mov	r1, sl
 8023108:	f7dd fa5a 	bl	80005c0 <__aeabi_lmul>
 802310c:	9b00      	ldr	r3, [sp, #0]
 802310e:	187f      	adds	r7, r7, r1
 8023110:	469c      	mov	ip, r3
 8023112:	107f      	asrs	r7, r7, #1
 8023114:	6067      	str	r7, [r4, #4]
 8023116:	9a01      	ldr	r2, [sp, #4]
 8023118:	9f03      	ldr	r7, [sp, #12]
 802311a:	9802      	ldr	r0, [sp, #8]
 802311c:	1bd7      	subs	r7, r2, r7
 802311e:	17fe      	asrs	r6, r7, #31
 8023120:	0031      	movs	r1, r6
 8023122:	9e04      	ldr	r6, [sp, #16]
 8023124:	4682      	mov	sl, r0
 8023126:	4464      	add	r4, ip
 8023128:	46b4      	mov	ip, r6
 802312a:	44e2      	add	sl, ip
 802312c:	4652      	mov	r2, sl
 802312e:	17d2      	asrs	r2, r2, #31
 8023130:	4693      	mov	fp, r2
 8023132:	0038      	movs	r0, r7
 8023134:	9a05      	ldr	r2, [sp, #20]
 8023136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023138:	9112      	str	r1, [sp, #72]	@ 0x48
 802313a:	f7dd fa41 	bl	80005c0 <__aeabi_lmul>
 802313e:	9a06      	ldr	r2, [sp, #24]
 8023140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023142:	000e      	movs	r6, r1
 8023144:	4650      	mov	r0, sl
 8023146:	4659      	mov	r1, fp
 8023148:	f7dd fa3a 	bl	80005c0 <__aeabi_lmul>
 802314c:	4648      	mov	r0, r9
 802314e:	1a76      	subs	r6, r6, r1
 8023150:	1076      	asrs	r6, r6, #1
 8023152:	6006      	str	r6, [r0, #0]
 8023154:	9a05      	ldr	r2, [sp, #20]
 8023156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023158:	4650      	mov	r0, sl
 802315a:	4659      	mov	r1, fp
 802315c:	f7dd fa30 	bl	80005c0 <__aeabi_lmul>
 8023160:	9a06      	ldr	r2, [sp, #24]
 8023162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023164:	000e      	movs	r6, r1
 8023166:	0038      	movs	r0, r7
 8023168:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802316a:	f7dd fa29 	bl	80005c0 <__aeabi_lmul>
 802316e:	9a00      	ldr	r2, [sp, #0]
 8023170:	9f03      	ldr	r7, [sp, #12]
 8023172:	4694      	mov	ip, r2
 8023174:	1876      	adds	r6, r6, r1
 8023176:	4649      	mov	r1, r9
 8023178:	44e1      	add	r9, ip
 802317a:	46bc      	mov	ip, r7
 802317c:	9b01      	ldr	r3, [sp, #4]
 802317e:	1076      	asrs	r6, r6, #1
 8023180:	4463      	add	r3, ip
 8023182:	17df      	asrs	r7, r3, #31
 8023184:	604e      	str	r6, [r1, #4]
 8023186:	46ba      	mov	sl, r7
 8023188:	001e      	movs	r6, r3
 802318a:	9802      	ldr	r0, [sp, #8]
 802318c:	9b04      	ldr	r3, [sp, #16]
 802318e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023190:	1ac7      	subs	r7, r0, r3
 8023192:	17fb      	asrs	r3, r7, #31
 8023194:	469b      	mov	fp, r3
 8023196:	0030      	movs	r0, r6
 8023198:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802319a:	4651      	mov	r1, sl
 802319c:	f7dd fa10 	bl	80005c0 <__aeabi_lmul>
 80231a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80231a4:	9101      	str	r1, [sp, #4]
 80231a6:	0038      	movs	r0, r7
 80231a8:	4659      	mov	r1, fp
 80231aa:	f7dd fa09 	bl	80005c0 <__aeabi_lmul>
 80231ae:	9801      	ldr	r0, [sp, #4]
 80231b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80231b2:	1a41      	subs	r1, r0, r1
 80231b4:	1049      	asrs	r1, r1, #1
 80231b6:	6029      	str	r1, [r5, #0]
 80231b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80231ba:	0038      	movs	r0, r7
 80231bc:	4659      	mov	r1, fp
 80231be:	f7dd f9ff 	bl	80005c0 <__aeabi_lmul>
 80231c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80231c4:	000f      	movs	r7, r1
 80231c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231c8:	0030      	movs	r0, r6
 80231ca:	4651      	mov	r1, sl
 80231cc:	f7dd f9f8 	bl	80005c0 <__aeabi_lmul>
 80231d0:	187f      	adds	r7, r7, r1
 80231d2:	107f      	asrs	r7, r7, #1
 80231d4:	606f      	str	r7, [r5, #4]
 80231d6:	9a00      	ldr	r2, [sp, #0]
 80231d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80231da:	4694      	mov	ip, r2
 80231dc:	4465      	add	r5, ip
 80231de:	468c      	mov	ip, r1
 80231e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80231e2:	0013      	movs	r3, r2
 80231e4:	4462      	add	r2, ip
 80231e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80231e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80231ea:	429a      	cmp	r2, r3
 80231ec:	d900      	bls.n	80231f0 <arm_radix4_butterfly_inverse_q31+0x46c>
 80231ee:	e73e      	b.n	802306e <arm_radix4_butterfly_inverse_q31+0x2ea>
 80231f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80231f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80231f4:	468c      	mov	ip, r1
 80231f6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80231f8:	4462      	add	r2, ip
 80231fa:	468c      	mov	ip, r1
 80231fc:	9216      	str	r2, [sp, #88]	@ 0x58
 80231fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023200:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023202:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023204:	4462      	add	r2, ip
 8023206:	468c      	mov	ip, r1
 8023208:	9219      	str	r2, [sp, #100]	@ 0x64
 802320a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802320c:	3301      	adds	r3, #1
 802320e:	4462      	add	r2, ip
 8023210:	9218      	str	r2, [sp, #96]	@ 0x60
 8023212:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023214:	9315      	str	r3, [sp, #84]	@ 0x54
 8023216:	3208      	adds	r2, #8
 8023218:	9217      	str	r2, [sp, #92]	@ 0x5c
 802321a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802321c:	4293      	cmp	r3, r2
 802321e:	d800      	bhi.n	8023222 <arm_radix4_butterfly_inverse_q31+0x49e>
 8023220:	e6ec      	b.n	8022ffc <arm_radix4_butterfly_inverse_q31+0x278>
 8023222:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023224:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023226:	009b      	lsls	r3, r3, #2
 8023228:	931f      	str	r3, [sp, #124]	@ 0x7c
 802322a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802322c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802322e:	089b      	lsrs	r3, r3, #2
 8023230:	9320      	str	r3, [sp, #128]	@ 0x80
 8023232:	2b04      	cmp	r3, #4
 8023234:	d900      	bls.n	8023238 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8023236:	e6c5      	b.n	8022fc4 <arm_radix4_butterfly_inverse_q31+0x240>
 8023238:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802323a:	469a      	mov	sl, r3
 802323c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802323e:	681a      	ldr	r2, [r3, #0]
 8023240:	6918      	ldr	r0, [r3, #16]
 8023242:	4691      	mov	r9, r2
 8023244:	464c      	mov	r4, r9
 8023246:	4680      	mov	r8, r0
 8023248:	69de      	ldr	r6, [r3, #28]
 802324a:	689d      	ldr	r5, [r3, #8]
 802324c:	46b4      	mov	ip, r6
 802324e:	6998      	ldr	r0, [r3, #24]
 8023250:	1964      	adds	r4, r4, r5
 8023252:	6859      	ldr	r1, [r3, #4]
 8023254:	68da      	ldr	r2, [r3, #12]
 8023256:	4444      	add	r4, r8
 8023258:	695f      	ldr	r7, [r3, #20]
 802325a:	1824      	adds	r4, r4, r0
 802325c:	601c      	str	r4, [r3, #0]
 802325e:	188c      	adds	r4, r1, r2
 8023260:	19e4      	adds	r4, r4, r7
 8023262:	4464      	add	r4, ip
 8023264:	605c      	str	r4, [r3, #4]
 8023266:	464c      	mov	r4, r9
 8023268:	1b64      	subs	r4, r4, r5
 802326a:	4444      	add	r4, r8
 802326c:	1a24      	subs	r4, r4, r0
 802326e:	609c      	str	r4, [r3, #8]
 8023270:	1a8c      	subs	r4, r1, r2
 8023272:	19e4      	adds	r4, r4, r7
 8023274:	1ba4      	subs	r4, r4, r6
 8023276:	60dc      	str	r4, [r3, #12]
 8023278:	464c      	mov	r4, r9
 802327a:	4646      	mov	r6, r8
 802327c:	1aa4      	subs	r4, r4, r2
 802327e:	1ba4      	subs	r4, r4, r6
 8023280:	4464      	add	r4, ip
 8023282:	611c      	str	r4, [r3, #16]
 8023284:	194c      	adds	r4, r1, r5
 8023286:	1be4      	subs	r4, r4, r7
 8023288:	1a24      	subs	r4, r4, r0
 802328a:	615c      	str	r4, [r3, #20]
 802328c:	4644      	mov	r4, r8
 802328e:	4666      	mov	r6, ip
 8023290:	444a      	add	r2, r9
 8023292:	1b12      	subs	r2, r2, r4
 8023294:	1b92      	subs	r2, r2, r6
 8023296:	619a      	str	r2, [r3, #24]
 8023298:	1b4a      	subs	r2, r1, r5
 802329a:	1bd1      	subs	r1, r2, r7
 802329c:	2201      	movs	r2, #1
 802329e:	4252      	negs	r2, r2
 80232a0:	4694      	mov	ip, r2
 80232a2:	44e2      	add	sl, ip
 80232a4:	4652      	mov	r2, sl
 80232a6:	1809      	adds	r1, r1, r0
 80232a8:	61d9      	str	r1, [r3, #28]
 80232aa:	3320      	adds	r3, #32
 80232ac:	2a00      	cmp	r2, #0
 80232ae:	d1c6      	bne.n	802323e <arm_radix4_butterfly_inverse_q31+0x4ba>
 80232b0:	b027      	add	sp, #156	@ 0x9c
 80232b2:	bc3c      	pop	{r2, r3, r4, r5}
 80232b4:	4690      	mov	r8, r2
 80232b6:	4699      	mov	r9, r3
 80232b8:	46a2      	mov	sl, r4
 80232ba:	46ab      	mov	fp, r5
 80232bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232be:	469a      	mov	sl, r3
 80232c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80232c2:	e7bc      	b.n	802323e <arm_radix4_butterfly_inverse_q31+0x4ba>

080232c4 <arm_cmplx_mag_squared_q31>:
 80232c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232c6:	464f      	mov	r7, r9
 80232c8:	4646      	mov	r6, r8
 80232ca:	0004      	movs	r4, r0
 80232cc:	b4c0      	push	{r6, r7}
 80232ce:	0016      	movs	r6, r2
 80232d0:	000f      	movs	r7, r1
 80232d2:	2a00      	cmp	r2, #0
 80232d4:	d018      	beq.n	8023308 <arm_cmplx_mag_squared_q31+0x44>
 80232d6:	6823      	ldr	r3, [r4, #0]
 80232d8:	6822      	ldr	r2, [r4, #0]
 80232da:	17d9      	asrs	r1, r3, #31
 80232dc:	6863      	ldr	r3, [r4, #4]
 80232de:	0010      	movs	r0, r2
 80232e0:	4698      	mov	r8, r3
 80232e2:	17db      	asrs	r3, r3, #31
 80232e4:	4699      	mov	r9, r3
 80232e6:	000b      	movs	r3, r1
 80232e8:	f7dd f96a 	bl	80005c0 <__aeabi_lmul>
 80232ec:	4642      	mov	r2, r8
 80232ee:	104d      	asrs	r5, r1, #1
 80232f0:	464b      	mov	r3, r9
 80232f2:	4640      	mov	r0, r8
 80232f4:	4649      	mov	r1, r9
 80232f6:	f7dd f963 	bl	80005c0 <__aeabi_lmul>
 80232fa:	1049      	asrs	r1, r1, #1
 80232fc:	1869      	adds	r1, r5, r1
 80232fe:	3e01      	subs	r6, #1
 8023300:	c702      	stmia	r7!, {r1}
 8023302:	3408      	adds	r4, #8
 8023304:	2e00      	cmp	r6, #0
 8023306:	d1e6      	bne.n	80232d6 <arm_cmplx_mag_squared_q31+0x12>
 8023308:	bc0c      	pop	{r2, r3}
 802330a:	4690      	mov	r8, r2
 802330c:	4699      	mov	r9, r3
 802330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023310 <arm_mult_q31>:
 8023310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023312:	4646      	mov	r6, r8
 8023314:	464f      	mov	r7, r9
 8023316:	4690      	mov	r8, r2
 8023318:	b4c0      	push	{r6, r7}
 802331a:	001d      	movs	r5, r3
 802331c:	0006      	movs	r6, r0
 802331e:	000f      	movs	r7, r1
 8023320:	2400      	movs	r4, #0
 8023322:	2b00      	cmp	r3, #0
 8023324:	d020      	beq.n	8023368 <arm_mult_q31+0x58>
 8023326:	4b12      	ldr	r3, [pc, #72]	@ (8023370 <arm_mult_q31+0x60>)
 8023328:	4699      	mov	r9, r3
 802332a:	e007      	b.n	802333c <arm_mult_q31+0x2c>
 802332c:	464b      	mov	r3, r9
 802332e:	4059      	eors	r1, r3
 8023330:	4643      	mov	r3, r8
 8023332:	3d01      	subs	r5, #1
 8023334:	5119      	str	r1, [r3, r4]
 8023336:	3404      	adds	r4, #4
 8023338:	2d00      	cmp	r5, #0
 802333a:	d015      	beq.n	8023368 <arm_mult_q31+0x58>
 802333c:	5933      	ldr	r3, [r6, r4]
 802333e:	593a      	ldr	r2, [r7, r4]
 8023340:	17d9      	asrs	r1, r3, #31
 8023342:	593b      	ldr	r3, [r7, r4]
 8023344:	5930      	ldr	r0, [r6, r4]
 8023346:	17db      	asrs	r3, r3, #31
 8023348:	f7dd f93a 	bl	80005c0 <__aeabi_lmul>
 802334c:	004b      	lsls	r3, r1, #1
 802334e:	0fc0      	lsrs	r0, r0, #31
 8023350:	4318      	orrs	r0, r3
 8023352:	17c9      	asrs	r1, r1, #31
 8023354:	17c3      	asrs	r3, r0, #31
 8023356:	428b      	cmp	r3, r1
 8023358:	d1e8      	bne.n	802332c <arm_mult_q31+0x1c>
 802335a:	0001      	movs	r1, r0
 802335c:	4643      	mov	r3, r8
 802335e:	3d01      	subs	r5, #1
 8023360:	5119      	str	r1, [r3, r4]
 8023362:	3404      	adds	r4, #4
 8023364:	2d00      	cmp	r5, #0
 8023366:	d1e9      	bne.n	802333c <arm_mult_q31+0x2c>
 8023368:	bc0c      	pop	{r2, r3}
 802336a:	4690      	mov	r8, r2
 802336c:	4699      	mov	r9, r3
 802336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023370:	7fffffff 	.word	0x7fffffff

08023374 <arm_add_q31>:
 8023374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023376:	465f      	mov	r7, fp
 8023378:	4656      	mov	r6, sl
 802337a:	464d      	mov	r5, r9
 802337c:	4644      	mov	r4, r8
 802337e:	b4f0      	push	{r4, r5, r6, r7}
 8023380:	4693      	mov	fp, r2
 8023382:	b083      	sub	sp, #12
 8023384:	4681      	mov	r9, r0
 8023386:	468a      	mov	sl, r1
 8023388:	4698      	mov	r8, r3
 802338a:	2200      	movs	r2, #0
 802338c:	2b00      	cmp	r3, #0
 802338e:	d020      	beq.n	80233d2 <arm_add_q31+0x5e>
 8023390:	4649      	mov	r1, r9
 8023392:	4653      	mov	r3, sl
 8023394:	588e      	ldr	r6, [r1, r2]
 8023396:	589b      	ldr	r3, [r3, r2]
 8023398:	17f7      	asrs	r7, r6, #31
 802339a:	001c      	movs	r4, r3
 802339c:	0030      	movs	r0, r6
 802339e:	0039      	movs	r1, r7
 80233a0:	17dd      	asrs	r5, r3, #31
 80233a2:	46b4      	mov	ip, r6
 80233a4:	1900      	adds	r0, r0, r4
 80233a6:	4169      	adcs	r1, r5
 80233a8:	4463      	add	r3, ip
 80233aa:	9000      	str	r0, [sp, #0]
 80233ac:	9101      	str	r1, [sp, #4]
 80233ae:	17d9      	asrs	r1, r3, #31
 80233b0:	468c      	mov	ip, r1
 80233b2:	9901      	ldr	r1, [sp, #4]
 80233b4:	458c      	cmp	ip, r1
 80233b6:	d002      	beq.n	80233be <arm_add_q31+0x4a>
 80233b8:	17cb      	asrs	r3, r1, #31
 80233ba:	4909      	ldr	r1, [pc, #36]	@ (80233e0 <arm_add_q31+0x6c>)
 80233bc:	404b      	eors	r3, r1
 80233be:	4659      	mov	r1, fp
 80233c0:	508b      	str	r3, [r1, r2]
 80233c2:	2301      	movs	r3, #1
 80233c4:	425b      	negs	r3, r3
 80233c6:	469c      	mov	ip, r3
 80233c8:	44e0      	add	r8, ip
 80233ca:	4643      	mov	r3, r8
 80233cc:	3204      	adds	r2, #4
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d1de      	bne.n	8023390 <arm_add_q31+0x1c>
 80233d2:	b003      	add	sp, #12
 80233d4:	bc3c      	pop	{r2, r3, r4, r5}
 80233d6:	4690      	mov	r8, r2
 80233d8:	4699      	mov	r9, r3
 80233da:	46a2      	mov	sl, r4
 80233dc:	46ab      	mov	fp, r5
 80233de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80233e0:	7fffffff 	.word	0x7fffffff

080233e4 <atof>:
 80233e4:	b510      	push	{r4, lr}
 80233e6:	2100      	movs	r1, #0
 80233e8:	f000 fe12 	bl	8024010 <strtod>
 80233ec:	bd10      	pop	{r4, pc}

080233ee <atoi>:
 80233ee:	b510      	push	{r4, lr}
 80233f0:	220a      	movs	r2, #10
 80233f2:	2100      	movs	r1, #0
 80233f4:	f000 fea4 	bl	8024140 <strtol>
 80233f8:	bd10      	pop	{r4, pc}
	...

080233fc <sulp>:
 80233fc:	b570      	push	{r4, r5, r6, lr}
 80233fe:	0016      	movs	r6, r2
 8023400:	000d      	movs	r5, r1
 8023402:	f003 fd15 	bl	8026e30 <__ulp>
 8023406:	2e00      	cmp	r6, #0
 8023408:	d00d      	beq.n	8023426 <sulp+0x2a>
 802340a:	236b      	movs	r3, #107	@ 0x6b
 802340c:	006a      	lsls	r2, r5, #1
 802340e:	0d52      	lsrs	r2, r2, #21
 8023410:	1a9b      	subs	r3, r3, r2
 8023412:	2b00      	cmp	r3, #0
 8023414:	dd07      	ble.n	8023426 <sulp+0x2a>
 8023416:	2400      	movs	r4, #0
 8023418:	4a03      	ldr	r2, [pc, #12]	@ (8023428 <sulp+0x2c>)
 802341a:	051b      	lsls	r3, r3, #20
 802341c:	189d      	adds	r5, r3, r2
 802341e:	002b      	movs	r3, r5
 8023420:	0022      	movs	r2, r4
 8023422:	f7df f90b 	bl	800263c <__aeabi_dmul>
 8023426:	bd70      	pop	{r4, r5, r6, pc}
 8023428:	3ff00000 	.word	0x3ff00000

0802342c <_strtod_l>:
 802342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802342e:	b0a3      	sub	sp, #140	@ 0x8c
 8023430:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023432:	2200      	movs	r2, #0
 8023434:	2600      	movs	r6, #0
 8023436:	2700      	movs	r7, #0
 8023438:	9005      	str	r0, [sp, #20]
 802343a:	9109      	str	r1, [sp, #36]	@ 0x24
 802343c:	921e      	str	r2, [sp, #120]	@ 0x78
 802343e:	911d      	str	r1, [sp, #116]	@ 0x74
 8023440:	780a      	ldrb	r2, [r1, #0]
 8023442:	2a2b      	cmp	r2, #43	@ 0x2b
 8023444:	d053      	beq.n	80234ee <_strtod_l+0xc2>
 8023446:	d83f      	bhi.n	80234c8 <_strtod_l+0x9c>
 8023448:	2a0d      	cmp	r2, #13
 802344a:	d839      	bhi.n	80234c0 <_strtod_l+0x94>
 802344c:	2a08      	cmp	r2, #8
 802344e:	d839      	bhi.n	80234c4 <_strtod_l+0x98>
 8023450:	2a00      	cmp	r2, #0
 8023452:	d042      	beq.n	80234da <_strtod_l+0xae>
 8023454:	2200      	movs	r2, #0
 8023456:	9212      	str	r2, [sp, #72]	@ 0x48
 8023458:	2100      	movs	r1, #0
 802345a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802345c:	910c      	str	r1, [sp, #48]	@ 0x30
 802345e:	782a      	ldrb	r2, [r5, #0]
 8023460:	2a30      	cmp	r2, #48	@ 0x30
 8023462:	d000      	beq.n	8023466 <_strtod_l+0x3a>
 8023464:	e083      	b.n	802356e <_strtod_l+0x142>
 8023466:	786a      	ldrb	r2, [r5, #1]
 8023468:	3120      	adds	r1, #32
 802346a:	438a      	bics	r2, r1
 802346c:	2a58      	cmp	r2, #88	@ 0x58
 802346e:	d000      	beq.n	8023472 <_strtod_l+0x46>
 8023470:	e073      	b.n	802355a <_strtod_l+0x12e>
 8023472:	9302      	str	r3, [sp, #8]
 8023474:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023476:	4a95      	ldr	r2, [pc, #596]	@ (80236cc <_strtod_l+0x2a0>)
 8023478:	9301      	str	r3, [sp, #4]
 802347a:	ab1e      	add	r3, sp, #120	@ 0x78
 802347c:	9300      	str	r3, [sp, #0]
 802347e:	9805      	ldr	r0, [sp, #20]
 8023480:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023482:	a91d      	add	r1, sp, #116	@ 0x74
 8023484:	f002 fd84 	bl	8025f90 <__gethex>
 8023488:	230f      	movs	r3, #15
 802348a:	0002      	movs	r2, r0
 802348c:	401a      	ands	r2, r3
 802348e:	0004      	movs	r4, r0
 8023490:	9206      	str	r2, [sp, #24]
 8023492:	4218      	tst	r0, r3
 8023494:	d005      	beq.n	80234a2 <_strtod_l+0x76>
 8023496:	2a06      	cmp	r2, #6
 8023498:	d12b      	bne.n	80234f2 <_strtod_l+0xc6>
 802349a:	2300      	movs	r3, #0
 802349c:	3501      	adds	r5, #1
 802349e:	951d      	str	r5, [sp, #116]	@ 0x74
 80234a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80234a2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80234a4:	2b00      	cmp	r3, #0
 80234a6:	d002      	beq.n	80234ae <_strtod_l+0x82>
 80234a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80234aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80234ac:	6013      	str	r3, [r2, #0]
 80234ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	d019      	beq.n	80234e8 <_strtod_l+0xbc>
 80234b4:	2380      	movs	r3, #128	@ 0x80
 80234b6:	0030      	movs	r0, r6
 80234b8:	061b      	lsls	r3, r3, #24
 80234ba:	18f9      	adds	r1, r7, r3
 80234bc:	b023      	add	sp, #140	@ 0x8c
 80234be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234c0:	2a20      	cmp	r2, #32
 80234c2:	d1c7      	bne.n	8023454 <_strtod_l+0x28>
 80234c4:	3101      	adds	r1, #1
 80234c6:	e7ba      	b.n	802343e <_strtod_l+0x12>
 80234c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80234ca:	d1c3      	bne.n	8023454 <_strtod_l+0x28>
 80234cc:	3a2c      	subs	r2, #44	@ 0x2c
 80234ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80234d0:	1c4a      	adds	r2, r1, #1
 80234d2:	921d      	str	r2, [sp, #116]	@ 0x74
 80234d4:	784a      	ldrb	r2, [r1, #1]
 80234d6:	2a00      	cmp	r2, #0
 80234d8:	d1be      	bne.n	8023458 <_strtod_l+0x2c>
 80234da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234dc:	931d      	str	r3, [sp, #116]	@ 0x74
 80234de:	2300      	movs	r3, #0
 80234e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80234e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d1df      	bne.n	80234a8 <_strtod_l+0x7c>
 80234e8:	0030      	movs	r0, r6
 80234ea:	0039      	movs	r1, r7
 80234ec:	e7e6      	b.n	80234bc <_strtod_l+0x90>
 80234ee:	2200      	movs	r2, #0
 80234f0:	e7ed      	b.n	80234ce <_strtod_l+0xa2>
 80234f2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80234f4:	2a00      	cmp	r2, #0
 80234f6:	d007      	beq.n	8023508 <_strtod_l+0xdc>
 80234f8:	2135      	movs	r1, #53	@ 0x35
 80234fa:	a820      	add	r0, sp, #128	@ 0x80
 80234fc:	f003 fd8e 	bl	802701c <__copybits>
 8023500:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023502:	9805      	ldr	r0, [sp, #20]
 8023504:	f003 f948 	bl	8026798 <_Bfree>
 8023508:	9806      	ldr	r0, [sp, #24]
 802350a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802350c:	3801      	subs	r0, #1
 802350e:	2804      	cmp	r0, #4
 8023510:	d806      	bhi.n	8023520 <_strtod_l+0xf4>
 8023512:	f7dc fe33 	bl	800017c <__gnu_thumb1_case_uqi>
 8023516:	0312      	.short	0x0312
 8023518:	1e1c      	.short	0x1e1c
 802351a:	12          	.byte	0x12
 802351b:	00          	.byte	0x00
 802351c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802351e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8023520:	05e4      	lsls	r4, r4, #23
 8023522:	d502      	bpl.n	802352a <_strtod_l+0xfe>
 8023524:	2380      	movs	r3, #128	@ 0x80
 8023526:	061b      	lsls	r3, r3, #24
 8023528:	431f      	orrs	r7, r3
 802352a:	4b69      	ldr	r3, [pc, #420]	@ (80236d0 <_strtod_l+0x2a4>)
 802352c:	423b      	tst	r3, r7
 802352e:	d1b8      	bne.n	80234a2 <_strtod_l+0x76>
 8023530:	f001 fdb2 	bl	8025098 <__errno>
 8023534:	2322      	movs	r3, #34	@ 0x22
 8023536:	6003      	str	r3, [r0, #0]
 8023538:	e7b3      	b.n	80234a2 <_strtod_l+0x76>
 802353a:	4966      	ldr	r1, [pc, #408]	@ (80236d4 <_strtod_l+0x2a8>)
 802353c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802353e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023540:	400a      	ands	r2, r1
 8023542:	4965      	ldr	r1, [pc, #404]	@ (80236d8 <_strtod_l+0x2ac>)
 8023544:	185b      	adds	r3, r3, r1
 8023546:	051b      	lsls	r3, r3, #20
 8023548:	431a      	orrs	r2, r3
 802354a:	0017      	movs	r7, r2
 802354c:	e7e8      	b.n	8023520 <_strtod_l+0xf4>
 802354e:	4f60      	ldr	r7, [pc, #384]	@ (80236d0 <_strtod_l+0x2a4>)
 8023550:	e7e6      	b.n	8023520 <_strtod_l+0xf4>
 8023552:	2601      	movs	r6, #1
 8023554:	4f61      	ldr	r7, [pc, #388]	@ (80236dc <_strtod_l+0x2b0>)
 8023556:	4276      	negs	r6, r6
 8023558:	e7e2      	b.n	8023520 <_strtod_l+0xf4>
 802355a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802355c:	1c5a      	adds	r2, r3, #1
 802355e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023560:	785b      	ldrb	r3, [r3, #1]
 8023562:	2b30      	cmp	r3, #48	@ 0x30
 8023564:	d0f9      	beq.n	802355a <_strtod_l+0x12e>
 8023566:	2b00      	cmp	r3, #0
 8023568:	d09b      	beq.n	80234a2 <_strtod_l+0x76>
 802356a:	2301      	movs	r3, #1
 802356c:	930c      	str	r3, [sp, #48]	@ 0x30
 802356e:	2500      	movs	r5, #0
 8023570:	220a      	movs	r2, #10
 8023572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023574:	950d      	str	r5, [sp, #52]	@ 0x34
 8023576:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023578:	9508      	str	r5, [sp, #32]
 802357a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802357c:	7804      	ldrb	r4, [r0, #0]
 802357e:	0023      	movs	r3, r4
 8023580:	3b30      	subs	r3, #48	@ 0x30
 8023582:	b2d9      	uxtb	r1, r3
 8023584:	2909      	cmp	r1, #9
 8023586:	d927      	bls.n	80235d8 <_strtod_l+0x1ac>
 8023588:	2201      	movs	r2, #1
 802358a:	4955      	ldr	r1, [pc, #340]	@ (80236e0 <_strtod_l+0x2b4>)
 802358c:	f001 fcf6 	bl	8024f7c <strncmp>
 8023590:	2800      	cmp	r0, #0
 8023592:	d031      	beq.n	80235f8 <_strtod_l+0x1cc>
 8023594:	2000      	movs	r0, #0
 8023596:	0023      	movs	r3, r4
 8023598:	4684      	mov	ip, r0
 802359a:	9a08      	ldr	r2, [sp, #32]
 802359c:	900e      	str	r0, [sp, #56]	@ 0x38
 802359e:	9206      	str	r2, [sp, #24]
 80235a0:	2220      	movs	r2, #32
 80235a2:	0019      	movs	r1, r3
 80235a4:	4391      	bics	r1, r2
 80235a6:	000a      	movs	r2, r1
 80235a8:	2100      	movs	r1, #0
 80235aa:	9107      	str	r1, [sp, #28]
 80235ac:	2a45      	cmp	r2, #69	@ 0x45
 80235ae:	d000      	beq.n	80235b2 <_strtod_l+0x186>
 80235b0:	e0c0      	b.n	8023734 <_strtod_l+0x308>
 80235b2:	9b06      	ldr	r3, [sp, #24]
 80235b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80235b6:	4303      	orrs	r3, r0
 80235b8:	4313      	orrs	r3, r2
 80235ba:	428b      	cmp	r3, r1
 80235bc:	d08d      	beq.n	80234da <_strtod_l+0xae>
 80235be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80235c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80235c2:	3301      	adds	r3, #1
 80235c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80235c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235c8:	785b      	ldrb	r3, [r3, #1]
 80235ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80235cc:	d070      	beq.n	80236b0 <_strtod_l+0x284>
 80235ce:	000c      	movs	r4, r1
 80235d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80235d2:	d173      	bne.n	80236bc <_strtod_l+0x290>
 80235d4:	2401      	movs	r4, #1
 80235d6:	e06c      	b.n	80236b2 <_strtod_l+0x286>
 80235d8:	9908      	ldr	r1, [sp, #32]
 80235da:	2908      	cmp	r1, #8
 80235dc:	dc09      	bgt.n	80235f2 <_strtod_l+0x1c6>
 80235de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80235e0:	4351      	muls	r1, r2
 80235e2:	185b      	adds	r3, r3, r1
 80235e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80235e6:	9b08      	ldr	r3, [sp, #32]
 80235e8:	3001      	adds	r0, #1
 80235ea:	3301      	adds	r3, #1
 80235ec:	9308      	str	r3, [sp, #32]
 80235ee:	901d      	str	r0, [sp, #116]	@ 0x74
 80235f0:	e7c3      	b.n	802357a <_strtod_l+0x14e>
 80235f2:	4355      	muls	r5, r2
 80235f4:	195d      	adds	r5, r3, r5
 80235f6:	e7f6      	b.n	80235e6 <_strtod_l+0x1ba>
 80235f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80235fa:	1c5a      	adds	r2, r3, #1
 80235fc:	921d      	str	r2, [sp, #116]	@ 0x74
 80235fe:	9a08      	ldr	r2, [sp, #32]
 8023600:	785b      	ldrb	r3, [r3, #1]
 8023602:	2a00      	cmp	r2, #0
 8023604:	d03a      	beq.n	802367c <_strtod_l+0x250>
 8023606:	900e      	str	r0, [sp, #56]	@ 0x38
 8023608:	9206      	str	r2, [sp, #24]
 802360a:	001a      	movs	r2, r3
 802360c:	3a30      	subs	r2, #48	@ 0x30
 802360e:	2a09      	cmp	r2, #9
 8023610:	d912      	bls.n	8023638 <_strtod_l+0x20c>
 8023612:	2201      	movs	r2, #1
 8023614:	4694      	mov	ip, r2
 8023616:	e7c3      	b.n	80235a0 <_strtod_l+0x174>
 8023618:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802361a:	3001      	adds	r0, #1
 802361c:	1c5a      	adds	r2, r3, #1
 802361e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023620:	785b      	ldrb	r3, [r3, #1]
 8023622:	2b30      	cmp	r3, #48	@ 0x30
 8023624:	d0f8      	beq.n	8023618 <_strtod_l+0x1ec>
 8023626:	001a      	movs	r2, r3
 8023628:	3a31      	subs	r2, #49	@ 0x31
 802362a:	2a08      	cmp	r2, #8
 802362c:	d83b      	bhi.n	80236a6 <_strtod_l+0x27a>
 802362e:	900e      	str	r0, [sp, #56]	@ 0x38
 8023630:	2000      	movs	r0, #0
 8023632:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023634:	9006      	str	r0, [sp, #24]
 8023636:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023638:	001a      	movs	r2, r3
 802363a:	1c41      	adds	r1, r0, #1
 802363c:	3a30      	subs	r2, #48	@ 0x30
 802363e:	2b30      	cmp	r3, #48	@ 0x30
 8023640:	d016      	beq.n	8023670 <_strtod_l+0x244>
 8023642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023644:	185b      	adds	r3, r3, r1
 8023646:	930e      	str	r3, [sp, #56]	@ 0x38
 8023648:	9b06      	ldr	r3, [sp, #24]
 802364a:	210a      	movs	r1, #10
 802364c:	469c      	mov	ip, r3
 802364e:	4484      	add	ip, r0
 8023650:	459c      	cmp	ip, r3
 8023652:	d115      	bne.n	8023680 <_strtod_l+0x254>
 8023654:	9906      	ldr	r1, [sp, #24]
 8023656:	9b06      	ldr	r3, [sp, #24]
 8023658:	3101      	adds	r1, #1
 802365a:	1809      	adds	r1, r1, r0
 802365c:	181b      	adds	r3, r3, r0
 802365e:	9106      	str	r1, [sp, #24]
 8023660:	2b08      	cmp	r3, #8
 8023662:	dc19      	bgt.n	8023698 <_strtod_l+0x26c>
 8023664:	230a      	movs	r3, #10
 8023666:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023668:	434b      	muls	r3, r1
 802366a:	2100      	movs	r1, #0
 802366c:	18d3      	adds	r3, r2, r3
 802366e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023670:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023672:	0008      	movs	r0, r1
 8023674:	1c5a      	adds	r2, r3, #1
 8023676:	921d      	str	r2, [sp, #116]	@ 0x74
 8023678:	785b      	ldrb	r3, [r3, #1]
 802367a:	e7c6      	b.n	802360a <_strtod_l+0x1de>
 802367c:	9808      	ldr	r0, [sp, #32]
 802367e:	e7d0      	b.n	8023622 <_strtod_l+0x1f6>
 8023680:	1c5c      	adds	r4, r3, #1
 8023682:	2b08      	cmp	r3, #8
 8023684:	dc04      	bgt.n	8023690 <_strtod_l+0x264>
 8023686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023688:	434b      	muls	r3, r1
 802368a:	930d      	str	r3, [sp, #52]	@ 0x34
 802368c:	0023      	movs	r3, r4
 802368e:	e7df      	b.n	8023650 <_strtod_l+0x224>
 8023690:	2c10      	cmp	r4, #16
 8023692:	dcfb      	bgt.n	802368c <_strtod_l+0x260>
 8023694:	434d      	muls	r5, r1
 8023696:	e7f9      	b.n	802368c <_strtod_l+0x260>
 8023698:	2100      	movs	r1, #0
 802369a:	2b0f      	cmp	r3, #15
 802369c:	dce8      	bgt.n	8023670 <_strtod_l+0x244>
 802369e:	230a      	movs	r3, #10
 80236a0:	435d      	muls	r5, r3
 80236a2:	1955      	adds	r5, r2, r5
 80236a4:	e7e4      	b.n	8023670 <_strtod_l+0x244>
 80236a6:	2200      	movs	r2, #0
 80236a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80236aa:	9206      	str	r2, [sp, #24]
 80236ac:	3201      	adds	r2, #1
 80236ae:	e7b1      	b.n	8023614 <_strtod_l+0x1e8>
 80236b0:	2400      	movs	r4, #0
 80236b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236b4:	3302      	adds	r3, #2
 80236b6:	931d      	str	r3, [sp, #116]	@ 0x74
 80236b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236ba:	789b      	ldrb	r3, [r3, #2]
 80236bc:	001a      	movs	r2, r3
 80236be:	3a30      	subs	r2, #48	@ 0x30
 80236c0:	2a09      	cmp	r2, #9
 80236c2:	d913      	bls.n	80236ec <_strtod_l+0x2c0>
 80236c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80236c6:	921d      	str	r2, [sp, #116]	@ 0x74
 80236c8:	2200      	movs	r2, #0
 80236ca:	e032      	b.n	8023732 <_strtod_l+0x306>
 80236cc:	0802d8d0 	.word	0x0802d8d0
 80236d0:	7ff00000 	.word	0x7ff00000
 80236d4:	ffefffff 	.word	0xffefffff
 80236d8:	00000433 	.word	0x00000433
 80236dc:	7fffffff 	.word	0x7fffffff
 80236e0:	0802d8b8 	.word	0x0802d8b8
 80236e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80236e6:	1c5a      	adds	r2, r3, #1
 80236e8:	921d      	str	r2, [sp, #116]	@ 0x74
 80236ea:	785b      	ldrb	r3, [r3, #1]
 80236ec:	2b30      	cmp	r3, #48	@ 0x30
 80236ee:	d0f9      	beq.n	80236e4 <_strtod_l+0x2b8>
 80236f0:	2200      	movs	r2, #0
 80236f2:	9207      	str	r2, [sp, #28]
 80236f4:	001a      	movs	r2, r3
 80236f6:	3a31      	subs	r2, #49	@ 0x31
 80236f8:	2a08      	cmp	r2, #8
 80236fa:	d81b      	bhi.n	8023734 <_strtod_l+0x308>
 80236fc:	3b30      	subs	r3, #48	@ 0x30
 80236fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8023700:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023702:	9307      	str	r3, [sp, #28]
 8023704:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023706:	1c59      	adds	r1, r3, #1
 8023708:	911d      	str	r1, [sp, #116]	@ 0x74
 802370a:	785b      	ldrb	r3, [r3, #1]
 802370c:	001a      	movs	r2, r3
 802370e:	3a30      	subs	r2, #48	@ 0x30
 8023710:	2a09      	cmp	r2, #9
 8023712:	d93a      	bls.n	802378a <_strtod_l+0x35e>
 8023714:	9a07      	ldr	r2, [sp, #28]
 8023716:	1a8a      	subs	r2, r1, r2
 8023718:	49b4      	ldr	r1, [pc, #720]	@ (80239ec <_strtod_l+0x5c0>)
 802371a:	9107      	str	r1, [sp, #28]
 802371c:	2a08      	cmp	r2, #8
 802371e:	dc04      	bgt.n	802372a <_strtod_l+0x2fe>
 8023720:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023722:	9207      	str	r2, [sp, #28]
 8023724:	428a      	cmp	r2, r1
 8023726:	dd00      	ble.n	802372a <_strtod_l+0x2fe>
 8023728:	9107      	str	r1, [sp, #28]
 802372a:	2c00      	cmp	r4, #0
 802372c:	d002      	beq.n	8023734 <_strtod_l+0x308>
 802372e:	9a07      	ldr	r2, [sp, #28]
 8023730:	4252      	negs	r2, r2
 8023732:	9207      	str	r2, [sp, #28]
 8023734:	9a06      	ldr	r2, [sp, #24]
 8023736:	2a00      	cmp	r2, #0
 8023738:	d14d      	bne.n	80237d6 <_strtod_l+0x3aa>
 802373a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802373c:	4310      	orrs	r0, r2
 802373e:	d000      	beq.n	8023742 <_strtod_l+0x316>
 8023740:	e6af      	b.n	80234a2 <_strtod_l+0x76>
 8023742:	4662      	mov	r2, ip
 8023744:	2a00      	cmp	r2, #0
 8023746:	d000      	beq.n	802374a <_strtod_l+0x31e>
 8023748:	e6c7      	b.n	80234da <_strtod_l+0xae>
 802374a:	2b69      	cmp	r3, #105	@ 0x69
 802374c:	d027      	beq.n	802379e <_strtod_l+0x372>
 802374e:	dc23      	bgt.n	8023798 <_strtod_l+0x36c>
 8023750:	2b49      	cmp	r3, #73	@ 0x49
 8023752:	d024      	beq.n	802379e <_strtod_l+0x372>
 8023754:	2b4e      	cmp	r3, #78	@ 0x4e
 8023756:	d000      	beq.n	802375a <_strtod_l+0x32e>
 8023758:	e6bf      	b.n	80234da <_strtod_l+0xae>
 802375a:	49a5      	ldr	r1, [pc, #660]	@ (80239f0 <_strtod_l+0x5c4>)
 802375c:	a81d      	add	r0, sp, #116	@ 0x74
 802375e:	f002 fe4d 	bl	80263fc <__match>
 8023762:	2800      	cmp	r0, #0
 8023764:	d100      	bne.n	8023768 <_strtod_l+0x33c>
 8023766:	e6b8      	b.n	80234da <_strtod_l+0xae>
 8023768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802376a:	781b      	ldrb	r3, [r3, #0]
 802376c:	2b28      	cmp	r3, #40	@ 0x28
 802376e:	d12c      	bne.n	80237ca <_strtod_l+0x39e>
 8023770:	49a0      	ldr	r1, [pc, #640]	@ (80239f4 <_strtod_l+0x5c8>)
 8023772:	aa20      	add	r2, sp, #128	@ 0x80
 8023774:	a81d      	add	r0, sp, #116	@ 0x74
 8023776:	f002 fe55 	bl	8026424 <__hexnan>
 802377a:	2805      	cmp	r0, #5
 802377c:	d125      	bne.n	80237ca <_strtod_l+0x39e>
 802377e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023780:	4a9d      	ldr	r2, [pc, #628]	@ (80239f8 <_strtod_l+0x5cc>)
 8023782:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023784:	431a      	orrs	r2, r3
 8023786:	0017      	movs	r7, r2
 8023788:	e68b      	b.n	80234a2 <_strtod_l+0x76>
 802378a:	220a      	movs	r2, #10
 802378c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802378e:	434a      	muls	r2, r1
 8023790:	18d2      	adds	r2, r2, r3
 8023792:	3a30      	subs	r2, #48	@ 0x30
 8023794:	9210      	str	r2, [sp, #64]	@ 0x40
 8023796:	e7b5      	b.n	8023704 <_strtod_l+0x2d8>
 8023798:	2b6e      	cmp	r3, #110	@ 0x6e
 802379a:	d0de      	beq.n	802375a <_strtod_l+0x32e>
 802379c:	e69d      	b.n	80234da <_strtod_l+0xae>
 802379e:	4997      	ldr	r1, [pc, #604]	@ (80239fc <_strtod_l+0x5d0>)
 80237a0:	a81d      	add	r0, sp, #116	@ 0x74
 80237a2:	f002 fe2b 	bl	80263fc <__match>
 80237a6:	2800      	cmp	r0, #0
 80237a8:	d100      	bne.n	80237ac <_strtod_l+0x380>
 80237aa:	e696      	b.n	80234da <_strtod_l+0xae>
 80237ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80237ae:	4994      	ldr	r1, [pc, #592]	@ (8023a00 <_strtod_l+0x5d4>)
 80237b0:	3b01      	subs	r3, #1
 80237b2:	a81d      	add	r0, sp, #116	@ 0x74
 80237b4:	931d      	str	r3, [sp, #116]	@ 0x74
 80237b6:	f002 fe21 	bl	80263fc <__match>
 80237ba:	2800      	cmp	r0, #0
 80237bc:	d102      	bne.n	80237c4 <_strtod_l+0x398>
 80237be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80237c0:	3301      	adds	r3, #1
 80237c2:	931d      	str	r3, [sp, #116]	@ 0x74
 80237c4:	2600      	movs	r6, #0
 80237c6:	4f8c      	ldr	r7, [pc, #560]	@ (80239f8 <_strtod_l+0x5cc>)
 80237c8:	e66b      	b.n	80234a2 <_strtod_l+0x76>
 80237ca:	488e      	ldr	r0, [pc, #568]	@ (8023a04 <_strtod_l+0x5d8>)
 80237cc:	f001 fca6 	bl	802511c <nan>
 80237d0:	0006      	movs	r6, r0
 80237d2:	000f      	movs	r7, r1
 80237d4:	e665      	b.n	80234a2 <_strtod_l+0x76>
 80237d6:	9b07      	ldr	r3, [sp, #28]
 80237d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80237da:	1a9b      	subs	r3, r3, r2
 80237dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80237de:	9b08      	ldr	r3, [sp, #32]
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d101      	bne.n	80237e8 <_strtod_l+0x3bc>
 80237e4:	9b06      	ldr	r3, [sp, #24]
 80237e6:	9308      	str	r3, [sp, #32]
 80237e8:	9c06      	ldr	r4, [sp, #24]
 80237ea:	2c10      	cmp	r4, #16
 80237ec:	dd00      	ble.n	80237f0 <_strtod_l+0x3c4>
 80237ee:	2410      	movs	r4, #16
 80237f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80237f2:	f7df fe13 	bl	800341c <__aeabi_ui2d>
 80237f6:	9b06      	ldr	r3, [sp, #24]
 80237f8:	0006      	movs	r6, r0
 80237fa:	000f      	movs	r7, r1
 80237fc:	2b09      	cmp	r3, #9
 80237fe:	dc13      	bgt.n	8023828 <_strtod_l+0x3fc>
 8023800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023802:	2b00      	cmp	r3, #0
 8023804:	d100      	bne.n	8023808 <_strtod_l+0x3dc>
 8023806:	e64c      	b.n	80234a2 <_strtod_l+0x76>
 8023808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802380a:	2b00      	cmp	r3, #0
 802380c:	dc00      	bgt.n	8023810 <_strtod_l+0x3e4>
 802380e:	e07e      	b.n	802390e <_strtod_l+0x4e2>
 8023810:	2b16      	cmp	r3, #22
 8023812:	dc63      	bgt.n	80238dc <_strtod_l+0x4b0>
 8023814:	497c      	ldr	r1, [pc, #496]	@ (8023a08 <_strtod_l+0x5dc>)
 8023816:	00db      	lsls	r3, r3, #3
 8023818:	18c9      	adds	r1, r1, r3
 802381a:	0032      	movs	r2, r6
 802381c:	6808      	ldr	r0, [r1, #0]
 802381e:	6849      	ldr	r1, [r1, #4]
 8023820:	003b      	movs	r3, r7
 8023822:	f7de ff0b 	bl	800263c <__aeabi_dmul>
 8023826:	e7d3      	b.n	80237d0 <_strtod_l+0x3a4>
 8023828:	0022      	movs	r2, r4
 802382a:	4b77      	ldr	r3, [pc, #476]	@ (8023a08 <_strtod_l+0x5dc>)
 802382c:	3a09      	subs	r2, #9
 802382e:	00d2      	lsls	r2, r2, #3
 8023830:	189b      	adds	r3, r3, r2
 8023832:	681a      	ldr	r2, [r3, #0]
 8023834:	685b      	ldr	r3, [r3, #4]
 8023836:	f7de ff01 	bl	800263c <__aeabi_dmul>
 802383a:	0006      	movs	r6, r0
 802383c:	0028      	movs	r0, r5
 802383e:	000f      	movs	r7, r1
 8023840:	f7df fdec 	bl	800341c <__aeabi_ui2d>
 8023844:	000b      	movs	r3, r1
 8023846:	0002      	movs	r2, r0
 8023848:	0039      	movs	r1, r7
 802384a:	0030      	movs	r0, r6
 802384c:	f7dd ff4e 	bl	80016ec <__aeabi_dadd>
 8023850:	9b06      	ldr	r3, [sp, #24]
 8023852:	0006      	movs	r6, r0
 8023854:	000f      	movs	r7, r1
 8023856:	2b0f      	cmp	r3, #15
 8023858:	ddd2      	ble.n	8023800 <_strtod_l+0x3d4>
 802385a:	9b06      	ldr	r3, [sp, #24]
 802385c:	1b1c      	subs	r4, r3, r4
 802385e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023860:	18e4      	adds	r4, r4, r3
 8023862:	2c00      	cmp	r4, #0
 8023864:	dc00      	bgt.n	8023868 <_strtod_l+0x43c>
 8023866:	e09b      	b.n	80239a0 <_strtod_l+0x574>
 8023868:	220f      	movs	r2, #15
 802386a:	0023      	movs	r3, r4
 802386c:	4013      	ands	r3, r2
 802386e:	4214      	tst	r4, r2
 8023870:	d00a      	beq.n	8023888 <_strtod_l+0x45c>
 8023872:	4965      	ldr	r1, [pc, #404]	@ (8023a08 <_strtod_l+0x5dc>)
 8023874:	00db      	lsls	r3, r3, #3
 8023876:	18c9      	adds	r1, r1, r3
 8023878:	0032      	movs	r2, r6
 802387a:	6808      	ldr	r0, [r1, #0]
 802387c:	6849      	ldr	r1, [r1, #4]
 802387e:	003b      	movs	r3, r7
 8023880:	f7de fedc 	bl	800263c <__aeabi_dmul>
 8023884:	0006      	movs	r6, r0
 8023886:	000f      	movs	r7, r1
 8023888:	230f      	movs	r3, #15
 802388a:	439c      	bics	r4, r3
 802388c:	d073      	beq.n	8023976 <_strtod_l+0x54a>
 802388e:	3326      	adds	r3, #38	@ 0x26
 8023890:	33ff      	adds	r3, #255	@ 0xff
 8023892:	429c      	cmp	r4, r3
 8023894:	dd4b      	ble.n	802392e <_strtod_l+0x502>
 8023896:	2300      	movs	r3, #0
 8023898:	9306      	str	r3, [sp, #24]
 802389a:	9307      	str	r3, [sp, #28]
 802389c:	930d      	str	r3, [sp, #52]	@ 0x34
 802389e:	9308      	str	r3, [sp, #32]
 80238a0:	2322      	movs	r3, #34	@ 0x22
 80238a2:	2600      	movs	r6, #0
 80238a4:	9a05      	ldr	r2, [sp, #20]
 80238a6:	4f54      	ldr	r7, [pc, #336]	@ (80239f8 <_strtod_l+0x5cc>)
 80238a8:	6013      	str	r3, [r2, #0]
 80238aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80238ac:	42b3      	cmp	r3, r6
 80238ae:	d100      	bne.n	80238b2 <_strtod_l+0x486>
 80238b0:	e5f7      	b.n	80234a2 <_strtod_l+0x76>
 80238b2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80238b4:	9805      	ldr	r0, [sp, #20]
 80238b6:	f002 ff6f 	bl	8026798 <_Bfree>
 80238ba:	9908      	ldr	r1, [sp, #32]
 80238bc:	9805      	ldr	r0, [sp, #20]
 80238be:	f002 ff6b 	bl	8026798 <_Bfree>
 80238c2:	9907      	ldr	r1, [sp, #28]
 80238c4:	9805      	ldr	r0, [sp, #20]
 80238c6:	f002 ff67 	bl	8026798 <_Bfree>
 80238ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80238cc:	9805      	ldr	r0, [sp, #20]
 80238ce:	f002 ff63 	bl	8026798 <_Bfree>
 80238d2:	9906      	ldr	r1, [sp, #24]
 80238d4:	9805      	ldr	r0, [sp, #20]
 80238d6:	f002 ff5f 	bl	8026798 <_Bfree>
 80238da:	e5e2      	b.n	80234a2 <_strtod_l+0x76>
 80238dc:	2325      	movs	r3, #37	@ 0x25
 80238de:	9a06      	ldr	r2, [sp, #24]
 80238e0:	1a9b      	subs	r3, r3, r2
 80238e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80238e4:	4293      	cmp	r3, r2
 80238e6:	dbb8      	blt.n	802385a <_strtod_l+0x42e>
 80238e8:	240f      	movs	r4, #15
 80238ea:	9b06      	ldr	r3, [sp, #24]
 80238ec:	4d46      	ldr	r5, [pc, #280]	@ (8023a08 <_strtod_l+0x5dc>)
 80238ee:	1ae4      	subs	r4, r4, r3
 80238f0:	00e1      	lsls	r1, r4, #3
 80238f2:	1869      	adds	r1, r5, r1
 80238f4:	0032      	movs	r2, r6
 80238f6:	6808      	ldr	r0, [r1, #0]
 80238f8:	6849      	ldr	r1, [r1, #4]
 80238fa:	003b      	movs	r3, r7
 80238fc:	f7de fe9e 	bl	800263c <__aeabi_dmul>
 8023900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023902:	1b1c      	subs	r4, r3, r4
 8023904:	00e4      	lsls	r4, r4, #3
 8023906:	192d      	adds	r5, r5, r4
 8023908:	682a      	ldr	r2, [r5, #0]
 802390a:	686b      	ldr	r3, [r5, #4]
 802390c:	e789      	b.n	8023822 <_strtod_l+0x3f6>
 802390e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023910:	3316      	adds	r3, #22
 8023912:	dba2      	blt.n	802385a <_strtod_l+0x42e>
 8023914:	9907      	ldr	r1, [sp, #28]
 8023916:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023918:	4b3b      	ldr	r3, [pc, #236]	@ (8023a08 <_strtod_l+0x5dc>)
 802391a:	1a52      	subs	r2, r2, r1
 802391c:	00d2      	lsls	r2, r2, #3
 802391e:	189b      	adds	r3, r3, r2
 8023920:	0030      	movs	r0, r6
 8023922:	681a      	ldr	r2, [r3, #0]
 8023924:	685b      	ldr	r3, [r3, #4]
 8023926:	0039      	movs	r1, r7
 8023928:	f7de fa44 	bl	8001db4 <__aeabi_ddiv>
 802392c:	e750      	b.n	80237d0 <_strtod_l+0x3a4>
 802392e:	2300      	movs	r3, #0
 8023930:	0030      	movs	r0, r6
 8023932:	0039      	movs	r1, r7
 8023934:	4d35      	ldr	r5, [pc, #212]	@ (8023a0c <_strtod_l+0x5e0>)
 8023936:	1124      	asrs	r4, r4, #4
 8023938:	9309      	str	r3, [sp, #36]	@ 0x24
 802393a:	2c01      	cmp	r4, #1
 802393c:	dc1e      	bgt.n	802397c <_strtod_l+0x550>
 802393e:	2b00      	cmp	r3, #0
 8023940:	d001      	beq.n	8023946 <_strtod_l+0x51a>
 8023942:	0006      	movs	r6, r0
 8023944:	000f      	movs	r7, r1
 8023946:	4b32      	ldr	r3, [pc, #200]	@ (8023a10 <_strtod_l+0x5e4>)
 8023948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802394a:	18ff      	adds	r7, r7, r3
 802394c:	4b2f      	ldr	r3, [pc, #188]	@ (8023a0c <_strtod_l+0x5e0>)
 802394e:	00d5      	lsls	r5, r2, #3
 8023950:	195d      	adds	r5, r3, r5
 8023952:	0032      	movs	r2, r6
 8023954:	6828      	ldr	r0, [r5, #0]
 8023956:	6869      	ldr	r1, [r5, #4]
 8023958:	003b      	movs	r3, r7
 802395a:	f7de fe6f 	bl	800263c <__aeabi_dmul>
 802395e:	4b26      	ldr	r3, [pc, #152]	@ (80239f8 <_strtod_l+0x5cc>)
 8023960:	4a2c      	ldr	r2, [pc, #176]	@ (8023a14 <_strtod_l+0x5e8>)
 8023962:	0006      	movs	r6, r0
 8023964:	400b      	ands	r3, r1
 8023966:	4293      	cmp	r3, r2
 8023968:	d895      	bhi.n	8023896 <_strtod_l+0x46a>
 802396a:	4a2b      	ldr	r2, [pc, #172]	@ (8023a18 <_strtod_l+0x5ec>)
 802396c:	4293      	cmp	r3, r2
 802396e:	d913      	bls.n	8023998 <_strtod_l+0x56c>
 8023970:	2601      	movs	r6, #1
 8023972:	4f2a      	ldr	r7, [pc, #168]	@ (8023a1c <_strtod_l+0x5f0>)
 8023974:	4276      	negs	r6, r6
 8023976:	2300      	movs	r3, #0
 8023978:	9309      	str	r3, [sp, #36]	@ 0x24
 802397a:	e086      	b.n	8023a8a <_strtod_l+0x65e>
 802397c:	2201      	movs	r2, #1
 802397e:	4214      	tst	r4, r2
 8023980:	d004      	beq.n	802398c <_strtod_l+0x560>
 8023982:	682a      	ldr	r2, [r5, #0]
 8023984:	686b      	ldr	r3, [r5, #4]
 8023986:	f7de fe59 	bl	800263c <__aeabi_dmul>
 802398a:	2301      	movs	r3, #1
 802398c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802398e:	1064      	asrs	r4, r4, #1
 8023990:	3201      	adds	r2, #1
 8023992:	9209      	str	r2, [sp, #36]	@ 0x24
 8023994:	3508      	adds	r5, #8
 8023996:	e7d0      	b.n	802393a <_strtod_l+0x50e>
 8023998:	23d4      	movs	r3, #212	@ 0xd4
 802399a:	049b      	lsls	r3, r3, #18
 802399c:	18cf      	adds	r7, r1, r3
 802399e:	e7ea      	b.n	8023976 <_strtod_l+0x54a>
 80239a0:	2c00      	cmp	r4, #0
 80239a2:	d0e8      	beq.n	8023976 <_strtod_l+0x54a>
 80239a4:	4264      	negs	r4, r4
 80239a6:	230f      	movs	r3, #15
 80239a8:	0022      	movs	r2, r4
 80239aa:	401a      	ands	r2, r3
 80239ac:	421c      	tst	r4, r3
 80239ae:	d00a      	beq.n	80239c6 <_strtod_l+0x59a>
 80239b0:	4b15      	ldr	r3, [pc, #84]	@ (8023a08 <_strtod_l+0x5dc>)
 80239b2:	00d2      	lsls	r2, r2, #3
 80239b4:	189b      	adds	r3, r3, r2
 80239b6:	0030      	movs	r0, r6
 80239b8:	681a      	ldr	r2, [r3, #0]
 80239ba:	685b      	ldr	r3, [r3, #4]
 80239bc:	0039      	movs	r1, r7
 80239be:	f7de f9f9 	bl	8001db4 <__aeabi_ddiv>
 80239c2:	0006      	movs	r6, r0
 80239c4:	000f      	movs	r7, r1
 80239c6:	1124      	asrs	r4, r4, #4
 80239c8:	d0d5      	beq.n	8023976 <_strtod_l+0x54a>
 80239ca:	2c1f      	cmp	r4, #31
 80239cc:	dd28      	ble.n	8023a20 <_strtod_l+0x5f4>
 80239ce:	2300      	movs	r3, #0
 80239d0:	9306      	str	r3, [sp, #24]
 80239d2:	9307      	str	r3, [sp, #28]
 80239d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80239d6:	9308      	str	r3, [sp, #32]
 80239d8:	2322      	movs	r3, #34	@ 0x22
 80239da:	9a05      	ldr	r2, [sp, #20]
 80239dc:	2600      	movs	r6, #0
 80239de:	6013      	str	r3, [r2, #0]
 80239e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80239e2:	2700      	movs	r7, #0
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	d000      	beq.n	80239ea <_strtod_l+0x5be>
 80239e8:	e763      	b.n	80238b2 <_strtod_l+0x486>
 80239ea:	e55a      	b.n	80234a2 <_strtod_l+0x76>
 80239ec:	00004e1f 	.word	0x00004e1f
 80239f0:	0802da1e 	.word	0x0802da1e
 80239f4:	0802d8bc 	.word	0x0802d8bc
 80239f8:	7ff00000 	.word	0x7ff00000
 80239fc:	0802da16 	.word	0x0802da16
 8023a00:	0802da50 	.word	0x0802da50
 8023a04:	0802dcdc 	.word	0x0802dcdc
 8023a08:	0802dbc8 	.word	0x0802dbc8
 8023a0c:	0802dba0 	.word	0x0802dba0
 8023a10:	fcb00000 	.word	0xfcb00000
 8023a14:	7ca00000 	.word	0x7ca00000
 8023a18:	7c900000 	.word	0x7c900000
 8023a1c:	7fefffff 	.word	0x7fefffff
 8023a20:	2310      	movs	r3, #16
 8023a22:	0022      	movs	r2, r4
 8023a24:	401a      	ands	r2, r3
 8023a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8023a28:	421c      	tst	r4, r3
 8023a2a:	d001      	beq.n	8023a30 <_strtod_l+0x604>
 8023a2c:	335a      	adds	r3, #90	@ 0x5a
 8023a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a30:	0030      	movs	r0, r6
 8023a32:	0039      	movs	r1, r7
 8023a34:	2300      	movs	r3, #0
 8023a36:	4dbf      	ldr	r5, [pc, #764]	@ (8023d34 <_strtod_l+0x908>)
 8023a38:	2201      	movs	r2, #1
 8023a3a:	4214      	tst	r4, r2
 8023a3c:	d004      	beq.n	8023a48 <_strtod_l+0x61c>
 8023a3e:	682a      	ldr	r2, [r5, #0]
 8023a40:	686b      	ldr	r3, [r5, #4]
 8023a42:	f7de fdfb 	bl	800263c <__aeabi_dmul>
 8023a46:	2301      	movs	r3, #1
 8023a48:	1064      	asrs	r4, r4, #1
 8023a4a:	3508      	adds	r5, #8
 8023a4c:	2c00      	cmp	r4, #0
 8023a4e:	d1f3      	bne.n	8023a38 <_strtod_l+0x60c>
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d001      	beq.n	8023a58 <_strtod_l+0x62c>
 8023a54:	0006      	movs	r6, r0
 8023a56:	000f      	movs	r7, r1
 8023a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	d00d      	beq.n	8023a7a <_strtod_l+0x64e>
 8023a5e:	236b      	movs	r3, #107	@ 0x6b
 8023a60:	007a      	lsls	r2, r7, #1
 8023a62:	0d52      	lsrs	r2, r2, #21
 8023a64:	0039      	movs	r1, r7
 8023a66:	1a9b      	subs	r3, r3, r2
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	dd06      	ble.n	8023a7a <_strtod_l+0x64e>
 8023a6c:	2b1f      	cmp	r3, #31
 8023a6e:	dd5a      	ble.n	8023b26 <_strtod_l+0x6fa>
 8023a70:	2600      	movs	r6, #0
 8023a72:	2b34      	cmp	r3, #52	@ 0x34
 8023a74:	dd50      	ble.n	8023b18 <_strtod_l+0x6ec>
 8023a76:	27dc      	movs	r7, #220	@ 0xdc
 8023a78:	04bf      	lsls	r7, r7, #18
 8023a7a:	2200      	movs	r2, #0
 8023a7c:	2300      	movs	r3, #0
 8023a7e:	0030      	movs	r0, r6
 8023a80:	0039      	movs	r1, r7
 8023a82:	f7dc fd15 	bl	80004b0 <__aeabi_dcmpeq>
 8023a86:	2800      	cmp	r0, #0
 8023a88:	d1a1      	bne.n	80239ce <_strtod_l+0x5a2>
 8023a8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023a8c:	9a08      	ldr	r2, [sp, #32]
 8023a8e:	9300      	str	r3, [sp, #0]
 8023a90:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023a92:	9b06      	ldr	r3, [sp, #24]
 8023a94:	9805      	ldr	r0, [sp, #20]
 8023a96:	f002 fee7 	bl	8026868 <__s2b>
 8023a9a:	900d      	str	r0, [sp, #52]	@ 0x34
 8023a9c:	2800      	cmp	r0, #0
 8023a9e:	d100      	bne.n	8023aa2 <_strtod_l+0x676>
 8023aa0:	e6f9      	b.n	8023896 <_strtod_l+0x46a>
 8023aa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023aa4:	9907      	ldr	r1, [sp, #28]
 8023aa6:	17da      	asrs	r2, r3, #31
 8023aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023aaa:	1a5b      	subs	r3, r3, r1
 8023aac:	401a      	ands	r2, r3
 8023aae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ab0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023ab2:	43db      	mvns	r3, r3
 8023ab4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023ab6:	17db      	asrs	r3, r3, #31
 8023ab8:	401a      	ands	r2, r3
 8023aba:	2300      	movs	r3, #0
 8023abc:	921a      	str	r2, [sp, #104]	@ 0x68
 8023abe:	9306      	str	r3, [sp, #24]
 8023ac0:	9307      	str	r3, [sp, #28]
 8023ac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ac4:	9805      	ldr	r0, [sp, #20]
 8023ac6:	6859      	ldr	r1, [r3, #4]
 8023ac8:	f002 fe22 	bl	8026710 <_Balloc>
 8023acc:	9008      	str	r0, [sp, #32]
 8023ace:	2800      	cmp	r0, #0
 8023ad0:	d100      	bne.n	8023ad4 <_strtod_l+0x6a8>
 8023ad2:	e6e5      	b.n	80238a0 <_strtod_l+0x474>
 8023ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ad6:	300c      	adds	r0, #12
 8023ad8:	0019      	movs	r1, r3
 8023ada:	691a      	ldr	r2, [r3, #16]
 8023adc:	310c      	adds	r1, #12
 8023ade:	3202      	adds	r2, #2
 8023ae0:	0092      	lsls	r2, r2, #2
 8023ae2:	f001 fb11 	bl	8025108 <memcpy>
 8023ae6:	ab20      	add	r3, sp, #128	@ 0x80
 8023ae8:	9301      	str	r3, [sp, #4]
 8023aea:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023aec:	9300      	str	r3, [sp, #0]
 8023aee:	0032      	movs	r2, r6
 8023af0:	003b      	movs	r3, r7
 8023af2:	9805      	ldr	r0, [sp, #20]
 8023af4:	9610      	str	r6, [sp, #64]	@ 0x40
 8023af6:	9711      	str	r7, [sp, #68]	@ 0x44
 8023af8:	f003 fa06 	bl	8026f08 <__d2b>
 8023afc:	901e      	str	r0, [sp, #120]	@ 0x78
 8023afe:	2800      	cmp	r0, #0
 8023b00:	d100      	bne.n	8023b04 <_strtod_l+0x6d8>
 8023b02:	e6cd      	b.n	80238a0 <_strtod_l+0x474>
 8023b04:	2101      	movs	r1, #1
 8023b06:	9805      	ldr	r0, [sp, #20]
 8023b08:	f002 ff4a 	bl	80269a0 <__i2b>
 8023b0c:	9007      	str	r0, [sp, #28]
 8023b0e:	2800      	cmp	r0, #0
 8023b10:	d10e      	bne.n	8023b30 <_strtod_l+0x704>
 8023b12:	2300      	movs	r3, #0
 8023b14:	9307      	str	r3, [sp, #28]
 8023b16:	e6c3      	b.n	80238a0 <_strtod_l+0x474>
 8023b18:	234b      	movs	r3, #75	@ 0x4b
 8023b1a:	1a9a      	subs	r2, r3, r2
 8023b1c:	3b4c      	subs	r3, #76	@ 0x4c
 8023b1e:	4093      	lsls	r3, r2
 8023b20:	4019      	ands	r1, r3
 8023b22:	000f      	movs	r7, r1
 8023b24:	e7a9      	b.n	8023a7a <_strtod_l+0x64e>
 8023b26:	2201      	movs	r2, #1
 8023b28:	4252      	negs	r2, r2
 8023b2a:	409a      	lsls	r2, r3
 8023b2c:	4016      	ands	r6, r2
 8023b2e:	e7a4      	b.n	8023a7a <_strtod_l+0x64e>
 8023b30:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023b32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023b34:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8023b36:	1ad4      	subs	r4, r2, r3
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	db01      	blt.n	8023b40 <_strtod_l+0x714>
 8023b3c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8023b3e:	195d      	adds	r5, r3, r5
 8023b40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023b42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023b44:	1a5b      	subs	r3, r3, r1
 8023b46:	2136      	movs	r1, #54	@ 0x36
 8023b48:	189b      	adds	r3, r3, r2
 8023b4a:	1a8a      	subs	r2, r1, r2
 8023b4c:	497a      	ldr	r1, [pc, #488]	@ (8023d38 <_strtod_l+0x90c>)
 8023b4e:	2001      	movs	r0, #1
 8023b50:	468c      	mov	ip, r1
 8023b52:	2100      	movs	r1, #0
 8023b54:	3b01      	subs	r3, #1
 8023b56:	9116      	str	r1, [sp, #88]	@ 0x58
 8023b58:	9014      	str	r0, [sp, #80]	@ 0x50
 8023b5a:	4563      	cmp	r3, ip
 8023b5c:	da06      	bge.n	8023b6c <_strtod_l+0x740>
 8023b5e:	4661      	mov	r1, ip
 8023b60:	1ac9      	subs	r1, r1, r3
 8023b62:	1a52      	subs	r2, r2, r1
 8023b64:	291f      	cmp	r1, #31
 8023b66:	dc3f      	bgt.n	8023be8 <_strtod_l+0x7bc>
 8023b68:	4088      	lsls	r0, r1
 8023b6a:	9014      	str	r0, [sp, #80]	@ 0x50
 8023b6c:	18ab      	adds	r3, r5, r2
 8023b6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8023b70:	18a4      	adds	r4, r4, r2
 8023b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023b76:	191c      	adds	r4, r3, r4
 8023b78:	002b      	movs	r3, r5
 8023b7a:	4295      	cmp	r5, r2
 8023b7c:	dd00      	ble.n	8023b80 <_strtod_l+0x754>
 8023b7e:	0013      	movs	r3, r2
 8023b80:	42a3      	cmp	r3, r4
 8023b82:	dd00      	ble.n	8023b86 <_strtod_l+0x75a>
 8023b84:	0023      	movs	r3, r4
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	dd04      	ble.n	8023b94 <_strtod_l+0x768>
 8023b8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023b8c:	1ae4      	subs	r4, r4, r3
 8023b8e:	1ad2      	subs	r2, r2, r3
 8023b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8023b92:	1aed      	subs	r5, r5, r3
 8023b94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	dd16      	ble.n	8023bc8 <_strtod_l+0x79c>
 8023b9a:	001a      	movs	r2, r3
 8023b9c:	9907      	ldr	r1, [sp, #28]
 8023b9e:	9805      	ldr	r0, [sp, #20]
 8023ba0:	f002 ffc8 	bl	8026b34 <__pow5mult>
 8023ba4:	9007      	str	r0, [sp, #28]
 8023ba6:	2800      	cmp	r0, #0
 8023ba8:	d0b3      	beq.n	8023b12 <_strtod_l+0x6e6>
 8023baa:	0001      	movs	r1, r0
 8023bac:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023bae:	9805      	ldr	r0, [sp, #20]
 8023bb0:	f002 ff0e 	bl	80269d0 <__multiply>
 8023bb4:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023bb6:	2800      	cmp	r0, #0
 8023bb8:	d100      	bne.n	8023bbc <_strtod_l+0x790>
 8023bba:	e671      	b.n	80238a0 <_strtod_l+0x474>
 8023bbc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023bbe:	9805      	ldr	r0, [sp, #20]
 8023bc0:	f002 fdea 	bl	8026798 <_Bfree>
 8023bc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023bc6:	931e      	str	r3, [sp, #120]	@ 0x78
 8023bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	dc12      	bgt.n	8023bf4 <_strtod_l+0x7c8>
 8023bce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	dd18      	ble.n	8023c06 <_strtod_l+0x7da>
 8023bd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023bd6:	9908      	ldr	r1, [sp, #32]
 8023bd8:	9805      	ldr	r0, [sp, #20]
 8023bda:	f002 ffab 	bl	8026b34 <__pow5mult>
 8023bde:	9008      	str	r0, [sp, #32]
 8023be0:	2800      	cmp	r0, #0
 8023be2:	d110      	bne.n	8023c06 <_strtod_l+0x7da>
 8023be4:	2300      	movs	r3, #0
 8023be6:	e65a      	b.n	802389e <_strtod_l+0x472>
 8023be8:	4954      	ldr	r1, [pc, #336]	@ (8023d3c <_strtod_l+0x910>)
 8023bea:	1acb      	subs	r3, r1, r3
 8023bec:	0001      	movs	r1, r0
 8023bee:	4099      	lsls	r1, r3
 8023bf0:	9116      	str	r1, [sp, #88]	@ 0x58
 8023bf2:	e7ba      	b.n	8023b6a <_strtod_l+0x73e>
 8023bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023bf6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023bf8:	9805      	ldr	r0, [sp, #20]
 8023bfa:	f002 fff7 	bl	8026bec <__lshift>
 8023bfe:	901e      	str	r0, [sp, #120]	@ 0x78
 8023c00:	2800      	cmp	r0, #0
 8023c02:	d1e4      	bne.n	8023bce <_strtod_l+0x7a2>
 8023c04:	e64c      	b.n	80238a0 <_strtod_l+0x474>
 8023c06:	2c00      	cmp	r4, #0
 8023c08:	dd07      	ble.n	8023c1a <_strtod_l+0x7ee>
 8023c0a:	0022      	movs	r2, r4
 8023c0c:	9908      	ldr	r1, [sp, #32]
 8023c0e:	9805      	ldr	r0, [sp, #20]
 8023c10:	f002 ffec 	bl	8026bec <__lshift>
 8023c14:	9008      	str	r0, [sp, #32]
 8023c16:	2800      	cmp	r0, #0
 8023c18:	d0e4      	beq.n	8023be4 <_strtod_l+0x7b8>
 8023c1a:	2d00      	cmp	r5, #0
 8023c1c:	dd08      	ble.n	8023c30 <_strtod_l+0x804>
 8023c1e:	002a      	movs	r2, r5
 8023c20:	9907      	ldr	r1, [sp, #28]
 8023c22:	9805      	ldr	r0, [sp, #20]
 8023c24:	f002 ffe2 	bl	8026bec <__lshift>
 8023c28:	9007      	str	r0, [sp, #28]
 8023c2a:	2800      	cmp	r0, #0
 8023c2c:	d100      	bne.n	8023c30 <_strtod_l+0x804>
 8023c2e:	e637      	b.n	80238a0 <_strtod_l+0x474>
 8023c30:	9a08      	ldr	r2, [sp, #32]
 8023c32:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023c34:	9805      	ldr	r0, [sp, #20]
 8023c36:	f003 f861 	bl	8026cfc <__mdiff>
 8023c3a:	9006      	str	r0, [sp, #24]
 8023c3c:	2800      	cmp	r0, #0
 8023c3e:	d100      	bne.n	8023c42 <_strtod_l+0x816>
 8023c40:	e62e      	b.n	80238a0 <_strtod_l+0x474>
 8023c42:	68c3      	ldr	r3, [r0, #12]
 8023c44:	9907      	ldr	r1, [sp, #28]
 8023c46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023c48:	2300      	movs	r3, #0
 8023c4a:	60c3      	str	r3, [r0, #12]
 8023c4c:	f003 f83a 	bl	8026cc4 <__mcmp>
 8023c50:	2800      	cmp	r0, #0
 8023c52:	da3b      	bge.n	8023ccc <_strtod_l+0x8a0>
 8023c54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023c56:	4333      	orrs	r3, r6
 8023c58:	d167      	bne.n	8023d2a <_strtod_l+0x8fe>
 8023c5a:	033b      	lsls	r3, r7, #12
 8023c5c:	d165      	bne.n	8023d2a <_strtod_l+0x8fe>
 8023c5e:	22d6      	movs	r2, #214	@ 0xd6
 8023c60:	4b37      	ldr	r3, [pc, #220]	@ (8023d40 <_strtod_l+0x914>)
 8023c62:	04d2      	lsls	r2, r2, #19
 8023c64:	403b      	ands	r3, r7
 8023c66:	4293      	cmp	r3, r2
 8023c68:	d95f      	bls.n	8023d2a <_strtod_l+0x8fe>
 8023c6a:	9b06      	ldr	r3, [sp, #24]
 8023c6c:	695b      	ldr	r3, [r3, #20]
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	d103      	bne.n	8023c7a <_strtod_l+0x84e>
 8023c72:	9b06      	ldr	r3, [sp, #24]
 8023c74:	691b      	ldr	r3, [r3, #16]
 8023c76:	2b01      	cmp	r3, #1
 8023c78:	dd57      	ble.n	8023d2a <_strtod_l+0x8fe>
 8023c7a:	9906      	ldr	r1, [sp, #24]
 8023c7c:	2201      	movs	r2, #1
 8023c7e:	9805      	ldr	r0, [sp, #20]
 8023c80:	f002 ffb4 	bl	8026bec <__lshift>
 8023c84:	9907      	ldr	r1, [sp, #28]
 8023c86:	9006      	str	r0, [sp, #24]
 8023c88:	f003 f81c 	bl	8026cc4 <__mcmp>
 8023c8c:	2800      	cmp	r0, #0
 8023c8e:	dd4c      	ble.n	8023d2a <_strtod_l+0x8fe>
 8023c90:	4b2b      	ldr	r3, [pc, #172]	@ (8023d40 <_strtod_l+0x914>)
 8023c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c94:	403b      	ands	r3, r7
 8023c96:	2a00      	cmp	r2, #0
 8023c98:	d074      	beq.n	8023d84 <_strtod_l+0x958>
 8023c9a:	22d6      	movs	r2, #214	@ 0xd6
 8023c9c:	04d2      	lsls	r2, r2, #19
 8023c9e:	4293      	cmp	r3, r2
 8023ca0:	d870      	bhi.n	8023d84 <_strtod_l+0x958>
 8023ca2:	22dc      	movs	r2, #220	@ 0xdc
 8023ca4:	0492      	lsls	r2, r2, #18
 8023ca6:	4293      	cmp	r3, r2
 8023ca8:	d800      	bhi.n	8023cac <_strtod_l+0x880>
 8023caa:	e695      	b.n	80239d8 <_strtod_l+0x5ac>
 8023cac:	0030      	movs	r0, r6
 8023cae:	0039      	movs	r1, r7
 8023cb0:	4b24      	ldr	r3, [pc, #144]	@ (8023d44 <_strtod_l+0x918>)
 8023cb2:	2200      	movs	r2, #0
 8023cb4:	f7de fcc2 	bl	800263c <__aeabi_dmul>
 8023cb8:	4b21      	ldr	r3, [pc, #132]	@ (8023d40 <_strtod_l+0x914>)
 8023cba:	0006      	movs	r6, r0
 8023cbc:	000f      	movs	r7, r1
 8023cbe:	420b      	tst	r3, r1
 8023cc0:	d000      	beq.n	8023cc4 <_strtod_l+0x898>
 8023cc2:	e5f6      	b.n	80238b2 <_strtod_l+0x486>
 8023cc4:	2322      	movs	r3, #34	@ 0x22
 8023cc6:	9a05      	ldr	r2, [sp, #20]
 8023cc8:	6013      	str	r3, [r2, #0]
 8023cca:	e5f2      	b.n	80238b2 <_strtod_l+0x486>
 8023ccc:	970e      	str	r7, [sp, #56]	@ 0x38
 8023cce:	2800      	cmp	r0, #0
 8023cd0:	d175      	bne.n	8023dbe <_strtod_l+0x992>
 8023cd2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023cd4:	033b      	lsls	r3, r7, #12
 8023cd6:	0b1b      	lsrs	r3, r3, #12
 8023cd8:	2a00      	cmp	r2, #0
 8023cda:	d039      	beq.n	8023d50 <_strtod_l+0x924>
 8023cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8023d48 <_strtod_l+0x91c>)
 8023cde:	4293      	cmp	r3, r2
 8023ce0:	d138      	bne.n	8023d54 <_strtod_l+0x928>
 8023ce2:	2101      	movs	r1, #1
 8023ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ce6:	4249      	negs	r1, r1
 8023ce8:	0032      	movs	r2, r6
 8023cea:	0008      	movs	r0, r1
 8023cec:	2b00      	cmp	r3, #0
 8023cee:	d00b      	beq.n	8023d08 <_strtod_l+0x8dc>
 8023cf0:	24d4      	movs	r4, #212	@ 0xd4
 8023cf2:	4b13      	ldr	r3, [pc, #76]	@ (8023d40 <_strtod_l+0x914>)
 8023cf4:	0008      	movs	r0, r1
 8023cf6:	403b      	ands	r3, r7
 8023cf8:	04e4      	lsls	r4, r4, #19
 8023cfa:	42a3      	cmp	r3, r4
 8023cfc:	d804      	bhi.n	8023d08 <_strtod_l+0x8dc>
 8023cfe:	306c      	adds	r0, #108	@ 0x6c
 8023d00:	0d1b      	lsrs	r3, r3, #20
 8023d02:	1ac3      	subs	r3, r0, r3
 8023d04:	4099      	lsls	r1, r3
 8023d06:	0008      	movs	r0, r1
 8023d08:	4282      	cmp	r2, r0
 8023d0a:	d123      	bne.n	8023d54 <_strtod_l+0x928>
 8023d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8023d4c <_strtod_l+0x920>)
 8023d0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023d10:	4299      	cmp	r1, r3
 8023d12:	d102      	bne.n	8023d1a <_strtod_l+0x8ee>
 8023d14:	3201      	adds	r2, #1
 8023d16:	d100      	bne.n	8023d1a <_strtod_l+0x8ee>
 8023d18:	e5c2      	b.n	80238a0 <_strtod_l+0x474>
 8023d1a:	4b09      	ldr	r3, [pc, #36]	@ (8023d40 <_strtod_l+0x914>)
 8023d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d1e:	2600      	movs	r6, #0
 8023d20:	401a      	ands	r2, r3
 8023d22:	0013      	movs	r3, r2
 8023d24:	2280      	movs	r2, #128	@ 0x80
 8023d26:	0352      	lsls	r2, r2, #13
 8023d28:	189f      	adds	r7, r3, r2
 8023d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d2c:	2b00      	cmp	r3, #0
 8023d2e:	d1bd      	bne.n	8023cac <_strtod_l+0x880>
 8023d30:	e5bf      	b.n	80238b2 <_strtod_l+0x486>
 8023d32:	46c0      	nop			@ (mov r8, r8)
 8023d34:	0802d8e8 	.word	0x0802d8e8
 8023d38:	fffffc02 	.word	0xfffffc02
 8023d3c:	fffffbe2 	.word	0xfffffbe2
 8023d40:	7ff00000 	.word	0x7ff00000
 8023d44:	39500000 	.word	0x39500000
 8023d48:	000fffff 	.word	0x000fffff
 8023d4c:	7fefffff 	.word	0x7fefffff
 8023d50:	4333      	orrs	r3, r6
 8023d52:	d09d      	beq.n	8023c90 <_strtod_l+0x864>
 8023d54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	d01c      	beq.n	8023d94 <_strtod_l+0x968>
 8023d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023d5e:	4213      	tst	r3, r2
 8023d60:	d0e3      	beq.n	8023d2a <_strtod_l+0x8fe>
 8023d62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023d64:	0030      	movs	r0, r6
 8023d66:	0039      	movs	r1, r7
 8023d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023d6a:	2b00      	cmp	r3, #0
 8023d6c:	d016      	beq.n	8023d9c <_strtod_l+0x970>
 8023d6e:	f7ff fb45 	bl	80233fc <sulp>
 8023d72:	0002      	movs	r2, r0
 8023d74:	000b      	movs	r3, r1
 8023d76:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023d78:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023d7a:	f7dd fcb7 	bl	80016ec <__aeabi_dadd>
 8023d7e:	0006      	movs	r6, r0
 8023d80:	000f      	movs	r7, r1
 8023d82:	e7d2      	b.n	8023d2a <_strtod_l+0x8fe>
 8023d84:	2601      	movs	r6, #1
 8023d86:	4a92      	ldr	r2, [pc, #584]	@ (8023fd0 <_strtod_l+0xba4>)
 8023d88:	4276      	negs	r6, r6
 8023d8a:	189b      	adds	r3, r3, r2
 8023d8c:	4a91      	ldr	r2, [pc, #580]	@ (8023fd4 <_strtod_l+0xba8>)
 8023d8e:	431a      	orrs	r2, r3
 8023d90:	0017      	movs	r7, r2
 8023d92:	e7ca      	b.n	8023d2a <_strtod_l+0x8fe>
 8023d94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023d96:	4233      	tst	r3, r6
 8023d98:	d0c7      	beq.n	8023d2a <_strtod_l+0x8fe>
 8023d9a:	e7e2      	b.n	8023d62 <_strtod_l+0x936>
 8023d9c:	f7ff fb2e 	bl	80233fc <sulp>
 8023da0:	0002      	movs	r2, r0
 8023da2:	000b      	movs	r3, r1
 8023da4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023da6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023da8:	f7de ff10 	bl	8002bcc <__aeabi_dsub>
 8023dac:	2200      	movs	r2, #0
 8023dae:	2300      	movs	r3, #0
 8023db0:	0006      	movs	r6, r0
 8023db2:	000f      	movs	r7, r1
 8023db4:	f7dc fb7c 	bl	80004b0 <__aeabi_dcmpeq>
 8023db8:	2800      	cmp	r0, #0
 8023dba:	d0b6      	beq.n	8023d2a <_strtod_l+0x8fe>
 8023dbc:	e60c      	b.n	80239d8 <_strtod_l+0x5ac>
 8023dbe:	9907      	ldr	r1, [sp, #28]
 8023dc0:	9806      	ldr	r0, [sp, #24]
 8023dc2:	f003 f901 	bl	8026fc8 <__ratio>
 8023dc6:	2380      	movs	r3, #128	@ 0x80
 8023dc8:	2200      	movs	r2, #0
 8023dca:	05db      	lsls	r3, r3, #23
 8023dcc:	0004      	movs	r4, r0
 8023dce:	000d      	movs	r5, r1
 8023dd0:	f7dc fb7e 	bl	80004d0 <__aeabi_dcmple>
 8023dd4:	2800      	cmp	r0, #0
 8023dd6:	d06c      	beq.n	8023eb2 <_strtod_l+0xa86>
 8023dd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d177      	bne.n	8023ece <_strtod_l+0xaa2>
 8023dde:	2e00      	cmp	r6, #0
 8023de0:	d157      	bne.n	8023e92 <_strtod_l+0xa66>
 8023de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023de4:	031b      	lsls	r3, r3, #12
 8023de6:	d15a      	bne.n	8023e9e <_strtod_l+0xa72>
 8023de8:	2200      	movs	r2, #0
 8023dea:	0020      	movs	r0, r4
 8023dec:	0029      	movs	r1, r5
 8023dee:	4b7a      	ldr	r3, [pc, #488]	@ (8023fd8 <_strtod_l+0xbac>)
 8023df0:	f7dc fb64 	bl	80004bc <__aeabi_dcmplt>
 8023df4:	2800      	cmp	r0, #0
 8023df6:	d159      	bne.n	8023eac <_strtod_l+0xa80>
 8023df8:	0020      	movs	r0, r4
 8023dfa:	0029      	movs	r1, r5
 8023dfc:	2200      	movs	r2, #0
 8023dfe:	4b77      	ldr	r3, [pc, #476]	@ (8023fdc <_strtod_l+0xbb0>)
 8023e00:	f7de fc1c 	bl	800263c <__aeabi_dmul>
 8023e04:	0004      	movs	r4, r0
 8023e06:	000d      	movs	r5, r1
 8023e08:	2380      	movs	r3, #128	@ 0x80
 8023e0a:	061b      	lsls	r3, r3, #24
 8023e0c:	18eb      	adds	r3, r5, r3
 8023e0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8023e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e16:	9214      	str	r2, [sp, #80]	@ 0x50
 8023e18:	9315      	str	r3, [sp, #84]	@ 0x54
 8023e1a:	4a71      	ldr	r2, [pc, #452]	@ (8023fe0 <_strtod_l+0xbb4>)
 8023e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e1e:	4013      	ands	r3, r2
 8023e20:	9316      	str	r3, [sp, #88]	@ 0x58
 8023e22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023e24:	4b6f      	ldr	r3, [pc, #444]	@ (8023fe4 <_strtod_l+0xbb8>)
 8023e26:	429a      	cmp	r2, r3
 8023e28:	d000      	beq.n	8023e2c <_strtod_l+0xa00>
 8023e2a:	e087      	b.n	8023f3c <_strtod_l+0xb10>
 8023e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8023fe8 <_strtod_l+0xbbc>)
 8023e2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e30:	4694      	mov	ip, r2
 8023e32:	4463      	add	r3, ip
 8023e34:	001f      	movs	r7, r3
 8023e36:	0030      	movs	r0, r6
 8023e38:	0019      	movs	r1, r3
 8023e3a:	f002 fff9 	bl	8026e30 <__ulp>
 8023e3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023e40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e42:	f7de fbfb 	bl	800263c <__aeabi_dmul>
 8023e46:	0032      	movs	r2, r6
 8023e48:	003b      	movs	r3, r7
 8023e4a:	f7dd fc4f 	bl	80016ec <__aeabi_dadd>
 8023e4e:	4a64      	ldr	r2, [pc, #400]	@ (8023fe0 <_strtod_l+0xbb4>)
 8023e50:	4b66      	ldr	r3, [pc, #408]	@ (8023fec <_strtod_l+0xbc0>)
 8023e52:	0006      	movs	r6, r0
 8023e54:	400a      	ands	r2, r1
 8023e56:	429a      	cmp	r2, r3
 8023e58:	d940      	bls.n	8023edc <_strtod_l+0xab0>
 8023e5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023e5c:	4a64      	ldr	r2, [pc, #400]	@ (8023ff0 <_strtod_l+0xbc4>)
 8023e5e:	4293      	cmp	r3, r2
 8023e60:	d103      	bne.n	8023e6a <_strtod_l+0xa3e>
 8023e62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023e64:	3301      	adds	r3, #1
 8023e66:	d100      	bne.n	8023e6a <_strtod_l+0xa3e>
 8023e68:	e51a      	b.n	80238a0 <_strtod_l+0x474>
 8023e6a:	2601      	movs	r6, #1
 8023e6c:	4f60      	ldr	r7, [pc, #384]	@ (8023ff0 <_strtod_l+0xbc4>)
 8023e6e:	4276      	negs	r6, r6
 8023e70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023e72:	9805      	ldr	r0, [sp, #20]
 8023e74:	f002 fc90 	bl	8026798 <_Bfree>
 8023e78:	9908      	ldr	r1, [sp, #32]
 8023e7a:	9805      	ldr	r0, [sp, #20]
 8023e7c:	f002 fc8c 	bl	8026798 <_Bfree>
 8023e80:	9907      	ldr	r1, [sp, #28]
 8023e82:	9805      	ldr	r0, [sp, #20]
 8023e84:	f002 fc88 	bl	8026798 <_Bfree>
 8023e88:	9906      	ldr	r1, [sp, #24]
 8023e8a:	9805      	ldr	r0, [sp, #20]
 8023e8c:	f002 fc84 	bl	8026798 <_Bfree>
 8023e90:	e617      	b.n	8023ac2 <_strtod_l+0x696>
 8023e92:	2e01      	cmp	r6, #1
 8023e94:	d103      	bne.n	8023e9e <_strtod_l+0xa72>
 8023e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e98:	2b00      	cmp	r3, #0
 8023e9a:	d100      	bne.n	8023e9e <_strtod_l+0xa72>
 8023e9c:	e59c      	b.n	80239d8 <_strtod_l+0x5ac>
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	4c54      	ldr	r4, [pc, #336]	@ (8023ff4 <_strtod_l+0xbc8>)
 8023ea2:	4d4d      	ldr	r5, [pc, #308]	@ (8023fd8 <_strtod_l+0xbac>)
 8023ea4:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ea6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023ea8:	2400      	movs	r4, #0
 8023eaa:	e7b2      	b.n	8023e12 <_strtod_l+0x9e6>
 8023eac:	2400      	movs	r4, #0
 8023eae:	4d4b      	ldr	r5, [pc, #300]	@ (8023fdc <_strtod_l+0xbb0>)
 8023eb0:	e7aa      	b.n	8023e08 <_strtod_l+0x9dc>
 8023eb2:	0020      	movs	r0, r4
 8023eb4:	0029      	movs	r1, r5
 8023eb6:	4b49      	ldr	r3, [pc, #292]	@ (8023fdc <_strtod_l+0xbb0>)
 8023eb8:	2200      	movs	r2, #0
 8023eba:	f7de fbbf 	bl	800263c <__aeabi_dmul>
 8023ebe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023ec0:	0004      	movs	r4, r0
 8023ec2:	000d      	movs	r5, r1
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	d09f      	beq.n	8023e08 <_strtod_l+0x9dc>
 8023ec8:	940a      	str	r4, [sp, #40]	@ 0x28
 8023eca:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023ecc:	e7a1      	b.n	8023e12 <_strtod_l+0x9e6>
 8023ece:	2300      	movs	r3, #0
 8023ed0:	4c41      	ldr	r4, [pc, #260]	@ (8023fd8 <_strtod_l+0xbac>)
 8023ed2:	0025      	movs	r5, r4
 8023ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ed6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023ed8:	001c      	movs	r4, r3
 8023eda:	e79a      	b.n	8023e12 <_strtod_l+0x9e6>
 8023edc:	23d4      	movs	r3, #212	@ 0xd4
 8023ede:	049b      	lsls	r3, r3, #18
 8023ee0:	18cf      	adds	r7, r1, r3
 8023ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ee4:	9710      	str	r7, [sp, #64]	@ 0x40
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	d1c2      	bne.n	8023e70 <_strtod_l+0xa44>
 8023eea:	4b3d      	ldr	r3, [pc, #244]	@ (8023fe0 <_strtod_l+0xbb4>)
 8023eec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023eee:	403b      	ands	r3, r7
 8023ef0:	429a      	cmp	r2, r3
 8023ef2:	d1bd      	bne.n	8023e70 <_strtod_l+0xa44>
 8023ef4:	0020      	movs	r0, r4
 8023ef6:	0029      	movs	r1, r5
 8023ef8:	f7dc fbc6 	bl	8000688 <__aeabi_d2lz>
 8023efc:	f7dc fbfe 	bl	80006fc <__aeabi_l2d>
 8023f00:	0002      	movs	r2, r0
 8023f02:	000b      	movs	r3, r1
 8023f04:	0020      	movs	r0, r4
 8023f06:	0029      	movs	r1, r5
 8023f08:	f7de fe60 	bl	8002bcc <__aeabi_dsub>
 8023f0c:	033c      	lsls	r4, r7, #12
 8023f0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023f10:	0b24      	lsrs	r4, r4, #12
 8023f12:	4334      	orrs	r4, r6
 8023f14:	900e      	str	r0, [sp, #56]	@ 0x38
 8023f16:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023f18:	4a37      	ldr	r2, [pc, #220]	@ (8023ff8 <_strtod_l+0xbcc>)
 8023f1a:	431c      	orrs	r4, r3
 8023f1c:	d052      	beq.n	8023fc4 <_strtod_l+0xb98>
 8023f1e:	4b37      	ldr	r3, [pc, #220]	@ (8023ffc <_strtod_l+0xbd0>)
 8023f20:	f7dc facc 	bl	80004bc <__aeabi_dcmplt>
 8023f24:	2800      	cmp	r0, #0
 8023f26:	d000      	beq.n	8023f2a <_strtod_l+0xafe>
 8023f28:	e4c3      	b.n	80238b2 <_strtod_l+0x486>
 8023f2a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023f2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023f2e:	4a34      	ldr	r2, [pc, #208]	@ (8024000 <_strtod_l+0xbd4>)
 8023f30:	4b2a      	ldr	r3, [pc, #168]	@ (8023fdc <_strtod_l+0xbb0>)
 8023f32:	f7dc fad7 	bl	80004e4 <__aeabi_dcmpgt>
 8023f36:	2800      	cmp	r0, #0
 8023f38:	d09a      	beq.n	8023e70 <_strtod_l+0xa44>
 8023f3a:	e4ba      	b.n	80238b2 <_strtod_l+0x486>
 8023f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d02a      	beq.n	8023f98 <_strtod_l+0xb6c>
 8023f42:	23d4      	movs	r3, #212	@ 0xd4
 8023f44:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023f46:	04db      	lsls	r3, r3, #19
 8023f48:	429a      	cmp	r2, r3
 8023f4a:	d825      	bhi.n	8023f98 <_strtod_l+0xb6c>
 8023f4c:	0020      	movs	r0, r4
 8023f4e:	0029      	movs	r1, r5
 8023f50:	4a2c      	ldr	r2, [pc, #176]	@ (8024004 <_strtod_l+0xbd8>)
 8023f52:	4b2d      	ldr	r3, [pc, #180]	@ (8024008 <_strtod_l+0xbdc>)
 8023f54:	f7dc fabc 	bl	80004d0 <__aeabi_dcmple>
 8023f58:	2800      	cmp	r0, #0
 8023f5a:	d016      	beq.n	8023f8a <_strtod_l+0xb5e>
 8023f5c:	0020      	movs	r0, r4
 8023f5e:	0029      	movs	r1, r5
 8023f60:	f7dc fb74 	bl	800064c <__aeabi_d2uiz>
 8023f64:	2800      	cmp	r0, #0
 8023f66:	d100      	bne.n	8023f6a <_strtod_l+0xb3e>
 8023f68:	3001      	adds	r0, #1
 8023f6a:	f7df fa57 	bl	800341c <__aeabi_ui2d>
 8023f6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023f70:	0004      	movs	r4, r0
 8023f72:	000d      	movs	r5, r1
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d122      	bne.n	8023fbe <_strtod_l+0xb92>
 8023f78:	2380      	movs	r3, #128	@ 0x80
 8023f7a:	061b      	lsls	r3, r3, #24
 8023f7c:	18cb      	adds	r3, r1, r3
 8023f7e:	9018      	str	r0, [sp, #96]	@ 0x60
 8023f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8023f82:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023f84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023f86:	9214      	str	r2, [sp, #80]	@ 0x50
 8023f88:	9315      	str	r3, [sp, #84]	@ 0x54
 8023f8a:	22d6      	movs	r2, #214	@ 0xd6
 8023f8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023f8e:	04d2      	lsls	r2, r2, #19
 8023f90:	189b      	adds	r3, r3, r2
 8023f92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023f94:	1a9b      	subs	r3, r3, r2
 8023f96:	9315      	str	r3, [sp, #84]	@ 0x54
 8023f98:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023f9a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023f9c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8023f9e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8023fa0:	f002 ff46 	bl	8026e30 <__ulp>
 8023fa4:	0002      	movs	r2, r0
 8023fa6:	000b      	movs	r3, r1
 8023fa8:	0030      	movs	r0, r6
 8023faa:	0039      	movs	r1, r7
 8023fac:	f7de fb46 	bl	800263c <__aeabi_dmul>
 8023fb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023fb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023fb4:	f7dd fb9a 	bl	80016ec <__aeabi_dadd>
 8023fb8:	0006      	movs	r6, r0
 8023fba:	000f      	movs	r7, r1
 8023fbc:	e791      	b.n	8023ee2 <_strtod_l+0xab6>
 8023fbe:	9418      	str	r4, [sp, #96]	@ 0x60
 8023fc0:	9519      	str	r5, [sp, #100]	@ 0x64
 8023fc2:	e7de      	b.n	8023f82 <_strtod_l+0xb56>
 8023fc4:	4b11      	ldr	r3, [pc, #68]	@ (802400c <_strtod_l+0xbe0>)
 8023fc6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023fc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023fca:	f7dc fa77 	bl	80004bc <__aeabi_dcmplt>
 8023fce:	e7b2      	b.n	8023f36 <_strtod_l+0xb0a>
 8023fd0:	fff00000 	.word	0xfff00000
 8023fd4:	000fffff 	.word	0x000fffff
 8023fd8:	3ff00000 	.word	0x3ff00000
 8023fdc:	3fe00000 	.word	0x3fe00000
 8023fe0:	7ff00000 	.word	0x7ff00000
 8023fe4:	7fe00000 	.word	0x7fe00000
 8023fe8:	fcb00000 	.word	0xfcb00000
 8023fec:	7c9fffff 	.word	0x7c9fffff
 8023ff0:	7fefffff 	.word	0x7fefffff
 8023ff4:	bff00000 	.word	0xbff00000
 8023ff8:	94a03595 	.word	0x94a03595
 8023ffc:	3fdfffff 	.word	0x3fdfffff
 8024000:	35afe535 	.word	0x35afe535
 8024004:	ffc00000 	.word	0xffc00000
 8024008:	41dfffff 	.word	0x41dfffff
 802400c:	3fcfffff 	.word	0x3fcfffff

08024010 <strtod>:
 8024010:	b510      	push	{r4, lr}
 8024012:	4c04      	ldr	r4, [pc, #16]	@ (8024024 <strtod+0x14>)
 8024014:	000a      	movs	r2, r1
 8024016:	0001      	movs	r1, r0
 8024018:	4b03      	ldr	r3, [pc, #12]	@ (8024028 <strtod+0x18>)
 802401a:	6820      	ldr	r0, [r4, #0]
 802401c:	f7ff fa06 	bl	802342c <_strtod_l>
 8024020:	bd10      	pop	{r4, pc}
 8024022:	46c0      	nop			@ (mov r8, r8)
 8024024:	200003e0 	.word	0x200003e0
 8024028:	20000274 	.word	0x20000274

0802402c <_strtol_l.constprop.0>:
 802402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802402e:	b085      	sub	sp, #20
 8024030:	0017      	movs	r7, r2
 8024032:	001e      	movs	r6, r3
 8024034:	9003      	str	r0, [sp, #12]
 8024036:	9101      	str	r1, [sp, #4]
 8024038:	2b24      	cmp	r3, #36	@ 0x24
 802403a:	d844      	bhi.n	80240c6 <_strtol_l.constprop.0+0x9a>
 802403c:	000c      	movs	r4, r1
 802403e:	2b01      	cmp	r3, #1
 8024040:	d041      	beq.n	80240c6 <_strtol_l.constprop.0+0x9a>
 8024042:	4b3d      	ldr	r3, [pc, #244]	@ (8024138 <_strtol_l.constprop.0+0x10c>)
 8024044:	2208      	movs	r2, #8
 8024046:	469c      	mov	ip, r3
 8024048:	0023      	movs	r3, r4
 802404a:	4661      	mov	r1, ip
 802404c:	781d      	ldrb	r5, [r3, #0]
 802404e:	3401      	adds	r4, #1
 8024050:	5d48      	ldrb	r0, [r1, r5]
 8024052:	0001      	movs	r1, r0
 8024054:	4011      	ands	r1, r2
 8024056:	4210      	tst	r0, r2
 8024058:	d1f6      	bne.n	8024048 <_strtol_l.constprop.0+0x1c>
 802405a:	2d2d      	cmp	r5, #45	@ 0x2d
 802405c:	d13a      	bne.n	80240d4 <_strtol_l.constprop.0+0xa8>
 802405e:	7825      	ldrb	r5, [r4, #0]
 8024060:	1c9c      	adds	r4, r3, #2
 8024062:	2301      	movs	r3, #1
 8024064:	9300      	str	r3, [sp, #0]
 8024066:	2210      	movs	r2, #16
 8024068:	0033      	movs	r3, r6
 802406a:	4393      	bics	r3, r2
 802406c:	d109      	bne.n	8024082 <_strtol_l.constprop.0+0x56>
 802406e:	2d30      	cmp	r5, #48	@ 0x30
 8024070:	d136      	bne.n	80240e0 <_strtol_l.constprop.0+0xb4>
 8024072:	2120      	movs	r1, #32
 8024074:	7823      	ldrb	r3, [r4, #0]
 8024076:	438b      	bics	r3, r1
 8024078:	2b58      	cmp	r3, #88	@ 0x58
 802407a:	d131      	bne.n	80240e0 <_strtol_l.constprop.0+0xb4>
 802407c:	0016      	movs	r6, r2
 802407e:	7865      	ldrb	r5, [r4, #1]
 8024080:	3402      	adds	r4, #2
 8024082:	4a2e      	ldr	r2, [pc, #184]	@ (802413c <_strtol_l.constprop.0+0x110>)
 8024084:	9b00      	ldr	r3, [sp, #0]
 8024086:	4694      	mov	ip, r2
 8024088:	4463      	add	r3, ip
 802408a:	0031      	movs	r1, r6
 802408c:	0018      	movs	r0, r3
 802408e:	9302      	str	r3, [sp, #8]
 8024090:	f7dc f90e 	bl	80002b0 <__aeabi_uidivmod>
 8024094:	2200      	movs	r2, #0
 8024096:	4684      	mov	ip, r0
 8024098:	0010      	movs	r0, r2
 802409a:	002b      	movs	r3, r5
 802409c:	3b30      	subs	r3, #48	@ 0x30
 802409e:	2b09      	cmp	r3, #9
 80240a0:	d825      	bhi.n	80240ee <_strtol_l.constprop.0+0xc2>
 80240a2:	001d      	movs	r5, r3
 80240a4:	42ae      	cmp	r6, r5
 80240a6:	dd31      	ble.n	802410c <_strtol_l.constprop.0+0xe0>
 80240a8:	1c53      	adds	r3, r2, #1
 80240aa:	d009      	beq.n	80240c0 <_strtol_l.constprop.0+0x94>
 80240ac:	2201      	movs	r2, #1
 80240ae:	4252      	negs	r2, r2
 80240b0:	4584      	cmp	ip, r0
 80240b2:	d305      	bcc.n	80240c0 <_strtol_l.constprop.0+0x94>
 80240b4:	d101      	bne.n	80240ba <_strtol_l.constprop.0+0x8e>
 80240b6:	42a9      	cmp	r1, r5
 80240b8:	db25      	blt.n	8024106 <_strtol_l.constprop.0+0xda>
 80240ba:	2201      	movs	r2, #1
 80240bc:	4370      	muls	r0, r6
 80240be:	1828      	adds	r0, r5, r0
 80240c0:	7825      	ldrb	r5, [r4, #0]
 80240c2:	3401      	adds	r4, #1
 80240c4:	e7e9      	b.n	802409a <_strtol_l.constprop.0+0x6e>
 80240c6:	f000 ffe7 	bl	8025098 <__errno>
 80240ca:	2316      	movs	r3, #22
 80240cc:	6003      	str	r3, [r0, #0]
 80240ce:	2000      	movs	r0, #0
 80240d0:	b005      	add	sp, #20
 80240d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80240d4:	9100      	str	r1, [sp, #0]
 80240d6:	2d2b      	cmp	r5, #43	@ 0x2b
 80240d8:	d1c5      	bne.n	8024066 <_strtol_l.constprop.0+0x3a>
 80240da:	7825      	ldrb	r5, [r4, #0]
 80240dc:	1c9c      	adds	r4, r3, #2
 80240de:	e7c2      	b.n	8024066 <_strtol_l.constprop.0+0x3a>
 80240e0:	2e00      	cmp	r6, #0
 80240e2:	d1ce      	bne.n	8024082 <_strtol_l.constprop.0+0x56>
 80240e4:	3608      	adds	r6, #8
 80240e6:	2d30      	cmp	r5, #48	@ 0x30
 80240e8:	d0cb      	beq.n	8024082 <_strtol_l.constprop.0+0x56>
 80240ea:	3602      	adds	r6, #2
 80240ec:	e7c9      	b.n	8024082 <_strtol_l.constprop.0+0x56>
 80240ee:	002b      	movs	r3, r5
 80240f0:	3b41      	subs	r3, #65	@ 0x41
 80240f2:	2b19      	cmp	r3, #25
 80240f4:	d801      	bhi.n	80240fa <_strtol_l.constprop.0+0xce>
 80240f6:	3d37      	subs	r5, #55	@ 0x37
 80240f8:	e7d4      	b.n	80240a4 <_strtol_l.constprop.0+0x78>
 80240fa:	002b      	movs	r3, r5
 80240fc:	3b61      	subs	r3, #97	@ 0x61
 80240fe:	2b19      	cmp	r3, #25
 8024100:	d804      	bhi.n	802410c <_strtol_l.constprop.0+0xe0>
 8024102:	3d57      	subs	r5, #87	@ 0x57
 8024104:	e7ce      	b.n	80240a4 <_strtol_l.constprop.0+0x78>
 8024106:	2201      	movs	r2, #1
 8024108:	4252      	negs	r2, r2
 802410a:	e7d9      	b.n	80240c0 <_strtol_l.constprop.0+0x94>
 802410c:	1c53      	adds	r3, r2, #1
 802410e:	d108      	bne.n	8024122 <_strtol_l.constprop.0+0xf6>
 8024110:	2322      	movs	r3, #34	@ 0x22
 8024112:	9a03      	ldr	r2, [sp, #12]
 8024114:	9802      	ldr	r0, [sp, #8]
 8024116:	6013      	str	r3, [r2, #0]
 8024118:	2f00      	cmp	r7, #0
 802411a:	d0d9      	beq.n	80240d0 <_strtol_l.constprop.0+0xa4>
 802411c:	1e63      	subs	r3, r4, #1
 802411e:	9301      	str	r3, [sp, #4]
 8024120:	e007      	b.n	8024132 <_strtol_l.constprop.0+0x106>
 8024122:	9b00      	ldr	r3, [sp, #0]
 8024124:	2b00      	cmp	r3, #0
 8024126:	d000      	beq.n	802412a <_strtol_l.constprop.0+0xfe>
 8024128:	4240      	negs	r0, r0
 802412a:	2f00      	cmp	r7, #0
 802412c:	d0d0      	beq.n	80240d0 <_strtol_l.constprop.0+0xa4>
 802412e:	2a00      	cmp	r2, #0
 8024130:	d1f4      	bne.n	802411c <_strtol_l.constprop.0+0xf0>
 8024132:	9b01      	ldr	r3, [sp, #4]
 8024134:	603b      	str	r3, [r7, #0]
 8024136:	e7cb      	b.n	80240d0 <_strtol_l.constprop.0+0xa4>
 8024138:	0802d911 	.word	0x0802d911
 802413c:	7fffffff 	.word	0x7fffffff

08024140 <strtol>:
 8024140:	b510      	push	{r4, lr}
 8024142:	4c04      	ldr	r4, [pc, #16]	@ (8024154 <strtol+0x14>)
 8024144:	0013      	movs	r3, r2
 8024146:	000a      	movs	r2, r1
 8024148:	0001      	movs	r1, r0
 802414a:	6820      	ldr	r0, [r4, #0]
 802414c:	f7ff ff6e 	bl	802402c <_strtol_l.constprop.0>
 8024150:	bd10      	pop	{r4, pc}
 8024152:	46c0      	nop			@ (mov r8, r8)
 8024154:	200003e0 	.word	0x200003e0

08024158 <__cvt>:
 8024158:	b5f0      	push	{r4, r5, r6, r7, lr}
 802415a:	001f      	movs	r7, r3
 802415c:	2300      	movs	r3, #0
 802415e:	0016      	movs	r6, r2
 8024160:	b08b      	sub	sp, #44	@ 0x2c
 8024162:	429f      	cmp	r7, r3
 8024164:	da04      	bge.n	8024170 <__cvt+0x18>
 8024166:	2180      	movs	r1, #128	@ 0x80
 8024168:	0609      	lsls	r1, r1, #24
 802416a:	187b      	adds	r3, r7, r1
 802416c:	001f      	movs	r7, r3
 802416e:	232d      	movs	r3, #45	@ 0x2d
 8024170:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024172:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024174:	7013      	strb	r3, [r2, #0]
 8024176:	2320      	movs	r3, #32
 8024178:	2203      	movs	r2, #3
 802417a:	439d      	bics	r5, r3
 802417c:	2d46      	cmp	r5, #70	@ 0x46
 802417e:	d007      	beq.n	8024190 <__cvt+0x38>
 8024180:	002b      	movs	r3, r5
 8024182:	3b45      	subs	r3, #69	@ 0x45
 8024184:	4259      	negs	r1, r3
 8024186:	414b      	adcs	r3, r1
 8024188:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802418a:	3a01      	subs	r2, #1
 802418c:	18cb      	adds	r3, r1, r3
 802418e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024190:	ab09      	add	r3, sp, #36	@ 0x24
 8024192:	9304      	str	r3, [sp, #16]
 8024194:	ab08      	add	r3, sp, #32
 8024196:	9303      	str	r3, [sp, #12]
 8024198:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802419a:	9200      	str	r2, [sp, #0]
 802419c:	9302      	str	r3, [sp, #8]
 802419e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241a0:	0032      	movs	r2, r6
 80241a2:	9301      	str	r3, [sp, #4]
 80241a4:	003b      	movs	r3, r7
 80241a6:	f001 f84d 	bl	8025244 <_dtoa_r>
 80241aa:	0004      	movs	r4, r0
 80241ac:	2d47      	cmp	r5, #71	@ 0x47
 80241ae:	d11b      	bne.n	80241e8 <__cvt+0x90>
 80241b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80241b2:	07db      	lsls	r3, r3, #31
 80241b4:	d511      	bpl.n	80241da <__cvt+0x82>
 80241b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241b8:	18c3      	adds	r3, r0, r3
 80241ba:	9307      	str	r3, [sp, #28]
 80241bc:	2200      	movs	r2, #0
 80241be:	2300      	movs	r3, #0
 80241c0:	0030      	movs	r0, r6
 80241c2:	0039      	movs	r1, r7
 80241c4:	f7dc f974 	bl	80004b0 <__aeabi_dcmpeq>
 80241c8:	2800      	cmp	r0, #0
 80241ca:	d001      	beq.n	80241d0 <__cvt+0x78>
 80241cc:	9b07      	ldr	r3, [sp, #28]
 80241ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80241d0:	2230      	movs	r2, #48	@ 0x30
 80241d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241d4:	9907      	ldr	r1, [sp, #28]
 80241d6:	428b      	cmp	r3, r1
 80241d8:	d320      	bcc.n	802421c <__cvt+0xc4>
 80241da:	0020      	movs	r0, r4
 80241dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80241e0:	1b1b      	subs	r3, r3, r4
 80241e2:	6013      	str	r3, [r2, #0]
 80241e4:	b00b      	add	sp, #44	@ 0x2c
 80241e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241ea:	18c3      	adds	r3, r0, r3
 80241ec:	9307      	str	r3, [sp, #28]
 80241ee:	2d46      	cmp	r5, #70	@ 0x46
 80241f0:	d1e4      	bne.n	80241bc <__cvt+0x64>
 80241f2:	7803      	ldrb	r3, [r0, #0]
 80241f4:	2b30      	cmp	r3, #48	@ 0x30
 80241f6:	d10c      	bne.n	8024212 <__cvt+0xba>
 80241f8:	2200      	movs	r2, #0
 80241fa:	2300      	movs	r3, #0
 80241fc:	0030      	movs	r0, r6
 80241fe:	0039      	movs	r1, r7
 8024200:	f7dc f956 	bl	80004b0 <__aeabi_dcmpeq>
 8024204:	2800      	cmp	r0, #0
 8024206:	d104      	bne.n	8024212 <__cvt+0xba>
 8024208:	2301      	movs	r3, #1
 802420a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802420c:	1a9b      	subs	r3, r3, r2
 802420e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024210:	6013      	str	r3, [r2, #0]
 8024212:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024214:	9a07      	ldr	r2, [sp, #28]
 8024216:	681b      	ldr	r3, [r3, #0]
 8024218:	18d3      	adds	r3, r2, r3
 802421a:	e7ce      	b.n	80241ba <__cvt+0x62>
 802421c:	1c59      	adds	r1, r3, #1
 802421e:	9109      	str	r1, [sp, #36]	@ 0x24
 8024220:	701a      	strb	r2, [r3, #0]
 8024222:	e7d6      	b.n	80241d2 <__cvt+0x7a>

08024224 <__exponent>:
 8024224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024226:	232b      	movs	r3, #43	@ 0x2b
 8024228:	0005      	movs	r5, r0
 802422a:	000c      	movs	r4, r1
 802422c:	b085      	sub	sp, #20
 802422e:	7002      	strb	r2, [r0, #0]
 8024230:	2900      	cmp	r1, #0
 8024232:	da01      	bge.n	8024238 <__exponent+0x14>
 8024234:	424c      	negs	r4, r1
 8024236:	3302      	adds	r3, #2
 8024238:	706b      	strb	r3, [r5, #1]
 802423a:	2c09      	cmp	r4, #9
 802423c:	dd2c      	ble.n	8024298 <__exponent+0x74>
 802423e:	ab02      	add	r3, sp, #8
 8024240:	1dde      	adds	r6, r3, #7
 8024242:	0020      	movs	r0, r4
 8024244:	210a      	movs	r1, #10
 8024246:	f7dc f91d 	bl	8000484 <__aeabi_idivmod>
 802424a:	0037      	movs	r7, r6
 802424c:	3130      	adds	r1, #48	@ 0x30
 802424e:	3e01      	subs	r6, #1
 8024250:	0020      	movs	r0, r4
 8024252:	7031      	strb	r1, [r6, #0]
 8024254:	210a      	movs	r1, #10
 8024256:	9401      	str	r4, [sp, #4]
 8024258:	f7dc f82e 	bl	80002b8 <__divsi3>
 802425c:	9b01      	ldr	r3, [sp, #4]
 802425e:	0004      	movs	r4, r0
 8024260:	2b63      	cmp	r3, #99	@ 0x63
 8024262:	dcee      	bgt.n	8024242 <__exponent+0x1e>
 8024264:	1eba      	subs	r2, r7, #2
 8024266:	1ca8      	adds	r0, r5, #2
 8024268:	0001      	movs	r1, r0
 802426a:	0013      	movs	r3, r2
 802426c:	3430      	adds	r4, #48	@ 0x30
 802426e:	7014      	strb	r4, [r2, #0]
 8024270:	ac02      	add	r4, sp, #8
 8024272:	3407      	adds	r4, #7
 8024274:	429c      	cmp	r4, r3
 8024276:	d80a      	bhi.n	802428e <__exponent+0x6a>
 8024278:	2300      	movs	r3, #0
 802427a:	42a2      	cmp	r2, r4
 802427c:	d803      	bhi.n	8024286 <__exponent+0x62>
 802427e:	3309      	adds	r3, #9
 8024280:	aa02      	add	r2, sp, #8
 8024282:	189b      	adds	r3, r3, r2
 8024284:	1bdb      	subs	r3, r3, r7
 8024286:	18c0      	adds	r0, r0, r3
 8024288:	1b40      	subs	r0, r0, r5
 802428a:	b005      	add	sp, #20
 802428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802428e:	781c      	ldrb	r4, [r3, #0]
 8024290:	3301      	adds	r3, #1
 8024292:	700c      	strb	r4, [r1, #0]
 8024294:	3101      	adds	r1, #1
 8024296:	e7eb      	b.n	8024270 <__exponent+0x4c>
 8024298:	2330      	movs	r3, #48	@ 0x30
 802429a:	18e4      	adds	r4, r4, r3
 802429c:	70ab      	strb	r3, [r5, #2]
 802429e:	1d28      	adds	r0, r5, #4
 80242a0:	70ec      	strb	r4, [r5, #3]
 80242a2:	e7f1      	b.n	8024288 <__exponent+0x64>

080242a4 <_printf_float>:
 80242a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242a6:	b097      	sub	sp, #92	@ 0x5c
 80242a8:	000d      	movs	r5, r1
 80242aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80242ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80242ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80242b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80242b2:	f000 fe9f 	bl	8024ff4 <_localeconv_r>
 80242b6:	6803      	ldr	r3, [r0, #0]
 80242b8:	0018      	movs	r0, r3
 80242ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80242bc:	f7db ff56 	bl	800016c <strlen>
 80242c0:	2300      	movs	r3, #0
 80242c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80242c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80242c6:	7e2b      	ldrb	r3, [r5, #24]
 80242c8:	2207      	movs	r2, #7
 80242ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80242cc:	682b      	ldr	r3, [r5, #0]
 80242ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80242d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80242d2:	6823      	ldr	r3, [r4, #0]
 80242d4:	05c9      	lsls	r1, r1, #23
 80242d6:	d545      	bpl.n	8024364 <_printf_float+0xc0>
 80242d8:	189b      	adds	r3, r3, r2
 80242da:	4393      	bics	r3, r2
 80242dc:	001a      	movs	r2, r3
 80242de:	3208      	adds	r2, #8
 80242e0:	6022      	str	r2, [r4, #0]
 80242e2:	2201      	movs	r2, #1
 80242e4:	681e      	ldr	r6, [r3, #0]
 80242e6:	685f      	ldr	r7, [r3, #4]
 80242e8:	007b      	lsls	r3, r7, #1
 80242ea:	085b      	lsrs	r3, r3, #1
 80242ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80242ee:	9610      	str	r6, [sp, #64]	@ 0x40
 80242f0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80242f2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80242f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80242f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80242f8:	4ba7      	ldr	r3, [pc, #668]	@ (8024598 <_printf_float+0x2f4>)
 80242fa:	4252      	negs	r2, r2
 80242fc:	f7df f802 	bl	8003304 <__aeabi_dcmpun>
 8024300:	2800      	cmp	r0, #0
 8024302:	d131      	bne.n	8024368 <_printf_float+0xc4>
 8024304:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024306:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024308:	2201      	movs	r2, #1
 802430a:	4ba3      	ldr	r3, [pc, #652]	@ (8024598 <_printf_float+0x2f4>)
 802430c:	4252      	negs	r2, r2
 802430e:	f7dc f8df 	bl	80004d0 <__aeabi_dcmple>
 8024312:	2800      	cmp	r0, #0
 8024314:	d128      	bne.n	8024368 <_printf_float+0xc4>
 8024316:	2200      	movs	r2, #0
 8024318:	2300      	movs	r3, #0
 802431a:	0030      	movs	r0, r6
 802431c:	0039      	movs	r1, r7
 802431e:	f7dc f8cd 	bl	80004bc <__aeabi_dcmplt>
 8024322:	2800      	cmp	r0, #0
 8024324:	d003      	beq.n	802432e <_printf_float+0x8a>
 8024326:	002b      	movs	r3, r5
 8024328:	222d      	movs	r2, #45	@ 0x2d
 802432a:	3343      	adds	r3, #67	@ 0x43
 802432c:	701a      	strb	r2, [r3, #0]
 802432e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024330:	4f9a      	ldr	r7, [pc, #616]	@ (802459c <_printf_float+0x2f8>)
 8024332:	2b47      	cmp	r3, #71	@ 0x47
 8024334:	d900      	bls.n	8024338 <_printf_float+0x94>
 8024336:	4f9a      	ldr	r7, [pc, #616]	@ (80245a0 <_printf_float+0x2fc>)
 8024338:	2303      	movs	r3, #3
 802433a:	2400      	movs	r4, #0
 802433c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802433e:	612b      	str	r3, [r5, #16]
 8024340:	3301      	adds	r3, #1
 8024342:	439a      	bics	r2, r3
 8024344:	602a      	str	r2, [r5, #0]
 8024346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024348:	0029      	movs	r1, r5
 802434a:	9300      	str	r3, [sp, #0]
 802434c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802434e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024350:	aa15      	add	r2, sp, #84	@ 0x54
 8024352:	f000 f9e5 	bl	8024720 <_printf_common>
 8024356:	3001      	adds	r0, #1
 8024358:	d000      	beq.n	802435c <_printf_float+0xb8>
 802435a:	e09f      	b.n	802449c <_printf_float+0x1f8>
 802435c:	2001      	movs	r0, #1
 802435e:	4240      	negs	r0, r0
 8024360:	b017      	add	sp, #92	@ 0x5c
 8024362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024364:	3307      	adds	r3, #7
 8024366:	e7b8      	b.n	80242da <_printf_float+0x36>
 8024368:	0032      	movs	r2, r6
 802436a:	003b      	movs	r3, r7
 802436c:	0030      	movs	r0, r6
 802436e:	0039      	movs	r1, r7
 8024370:	f7de ffc8 	bl	8003304 <__aeabi_dcmpun>
 8024374:	2800      	cmp	r0, #0
 8024376:	d00b      	beq.n	8024390 <_printf_float+0xec>
 8024378:	2f00      	cmp	r7, #0
 802437a:	da03      	bge.n	8024384 <_printf_float+0xe0>
 802437c:	002b      	movs	r3, r5
 802437e:	222d      	movs	r2, #45	@ 0x2d
 8024380:	3343      	adds	r3, #67	@ 0x43
 8024382:	701a      	strb	r2, [r3, #0]
 8024384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024386:	4f87      	ldr	r7, [pc, #540]	@ (80245a4 <_printf_float+0x300>)
 8024388:	2b47      	cmp	r3, #71	@ 0x47
 802438a:	d9d5      	bls.n	8024338 <_printf_float+0x94>
 802438c:	4f86      	ldr	r7, [pc, #536]	@ (80245a8 <_printf_float+0x304>)
 802438e:	e7d3      	b.n	8024338 <_printf_float+0x94>
 8024390:	2220      	movs	r2, #32
 8024392:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024394:	686b      	ldr	r3, [r5, #4]
 8024396:	4394      	bics	r4, r2
 8024398:	1c5a      	adds	r2, r3, #1
 802439a:	d146      	bne.n	802442a <_printf_float+0x186>
 802439c:	3307      	adds	r3, #7
 802439e:	606b      	str	r3, [r5, #4]
 80243a0:	2380      	movs	r3, #128	@ 0x80
 80243a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80243a4:	00db      	lsls	r3, r3, #3
 80243a6:	4313      	orrs	r3, r2
 80243a8:	2200      	movs	r2, #0
 80243aa:	602b      	str	r3, [r5, #0]
 80243ac:	9206      	str	r2, [sp, #24]
 80243ae:	aa14      	add	r2, sp, #80	@ 0x50
 80243b0:	9205      	str	r2, [sp, #20]
 80243b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80243b4:	a90a      	add	r1, sp, #40	@ 0x28
 80243b6:	9204      	str	r2, [sp, #16]
 80243b8:	aa13      	add	r2, sp, #76	@ 0x4c
 80243ba:	9203      	str	r2, [sp, #12]
 80243bc:	2223      	movs	r2, #35	@ 0x23
 80243be:	1852      	adds	r2, r2, r1
 80243c0:	9202      	str	r2, [sp, #8]
 80243c2:	9301      	str	r3, [sp, #4]
 80243c4:	686b      	ldr	r3, [r5, #4]
 80243c6:	0032      	movs	r2, r6
 80243c8:	9300      	str	r3, [sp, #0]
 80243ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80243cc:	003b      	movs	r3, r7
 80243ce:	f7ff fec3 	bl	8024158 <__cvt>
 80243d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80243d4:	0007      	movs	r7, r0
 80243d6:	2c47      	cmp	r4, #71	@ 0x47
 80243d8:	d12d      	bne.n	8024436 <_printf_float+0x192>
 80243da:	1cd3      	adds	r3, r2, #3
 80243dc:	db02      	blt.n	80243e4 <_printf_float+0x140>
 80243de:	686b      	ldr	r3, [r5, #4]
 80243e0:	429a      	cmp	r2, r3
 80243e2:	dd48      	ble.n	8024476 <_printf_float+0x1d2>
 80243e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80243e8:	3b02      	subs	r3, #2
 80243ea:	b2db      	uxtb	r3, r3
 80243ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80243ee:	0028      	movs	r0, r5
 80243f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80243f2:	3901      	subs	r1, #1
 80243f4:	3050      	adds	r0, #80	@ 0x50
 80243f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80243f8:	f7ff ff14 	bl	8024224 <__exponent>
 80243fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80243fe:	0004      	movs	r4, r0
 8024400:	1813      	adds	r3, r2, r0
 8024402:	612b      	str	r3, [r5, #16]
 8024404:	2a01      	cmp	r2, #1
 8024406:	dc02      	bgt.n	802440e <_printf_float+0x16a>
 8024408:	682a      	ldr	r2, [r5, #0]
 802440a:	07d2      	lsls	r2, r2, #31
 802440c:	d501      	bpl.n	8024412 <_printf_float+0x16e>
 802440e:	3301      	adds	r3, #1
 8024410:	612b      	str	r3, [r5, #16]
 8024412:	2323      	movs	r3, #35	@ 0x23
 8024414:	aa0a      	add	r2, sp, #40	@ 0x28
 8024416:	189b      	adds	r3, r3, r2
 8024418:	781b      	ldrb	r3, [r3, #0]
 802441a:	2b00      	cmp	r3, #0
 802441c:	d100      	bne.n	8024420 <_printf_float+0x17c>
 802441e:	e792      	b.n	8024346 <_printf_float+0xa2>
 8024420:	002b      	movs	r3, r5
 8024422:	222d      	movs	r2, #45	@ 0x2d
 8024424:	3343      	adds	r3, #67	@ 0x43
 8024426:	701a      	strb	r2, [r3, #0]
 8024428:	e78d      	b.n	8024346 <_printf_float+0xa2>
 802442a:	2c47      	cmp	r4, #71	@ 0x47
 802442c:	d1b8      	bne.n	80243a0 <_printf_float+0xfc>
 802442e:	2b00      	cmp	r3, #0
 8024430:	d1b6      	bne.n	80243a0 <_printf_float+0xfc>
 8024432:	3301      	adds	r3, #1
 8024434:	e7b3      	b.n	802439e <_printf_float+0xfa>
 8024436:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024438:	0011      	movs	r1, r2
 802443a:	2b65      	cmp	r3, #101	@ 0x65
 802443c:	d9d7      	bls.n	80243ee <_printf_float+0x14a>
 802443e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024440:	2b66      	cmp	r3, #102	@ 0x66
 8024442:	d11a      	bne.n	802447a <_printf_float+0x1d6>
 8024444:	686b      	ldr	r3, [r5, #4]
 8024446:	2a00      	cmp	r2, #0
 8024448:	dd09      	ble.n	802445e <_printf_float+0x1ba>
 802444a:	612a      	str	r2, [r5, #16]
 802444c:	2b00      	cmp	r3, #0
 802444e:	d102      	bne.n	8024456 <_printf_float+0x1b2>
 8024450:	6829      	ldr	r1, [r5, #0]
 8024452:	07c9      	lsls	r1, r1, #31
 8024454:	d50b      	bpl.n	802446e <_printf_float+0x1ca>
 8024456:	3301      	adds	r3, #1
 8024458:	189b      	adds	r3, r3, r2
 802445a:	612b      	str	r3, [r5, #16]
 802445c:	e007      	b.n	802446e <_printf_float+0x1ca>
 802445e:	2b00      	cmp	r3, #0
 8024460:	d103      	bne.n	802446a <_printf_float+0x1c6>
 8024462:	2201      	movs	r2, #1
 8024464:	6829      	ldr	r1, [r5, #0]
 8024466:	4211      	tst	r1, r2
 8024468:	d000      	beq.n	802446c <_printf_float+0x1c8>
 802446a:	1c9a      	adds	r2, r3, #2
 802446c:	612a      	str	r2, [r5, #16]
 802446e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024470:	2400      	movs	r4, #0
 8024472:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024474:	e7cd      	b.n	8024412 <_printf_float+0x16e>
 8024476:	2367      	movs	r3, #103	@ 0x67
 8024478:	930c      	str	r3, [sp, #48]	@ 0x30
 802447a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802447c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802447e:	4299      	cmp	r1, r3
 8024480:	db06      	blt.n	8024490 <_printf_float+0x1ec>
 8024482:	682b      	ldr	r3, [r5, #0]
 8024484:	6129      	str	r1, [r5, #16]
 8024486:	07db      	lsls	r3, r3, #31
 8024488:	d5f1      	bpl.n	802446e <_printf_float+0x1ca>
 802448a:	3101      	adds	r1, #1
 802448c:	6129      	str	r1, [r5, #16]
 802448e:	e7ee      	b.n	802446e <_printf_float+0x1ca>
 8024490:	2201      	movs	r2, #1
 8024492:	2900      	cmp	r1, #0
 8024494:	dce0      	bgt.n	8024458 <_printf_float+0x1b4>
 8024496:	1892      	adds	r2, r2, r2
 8024498:	1a52      	subs	r2, r2, r1
 802449a:	e7dd      	b.n	8024458 <_printf_float+0x1b4>
 802449c:	682a      	ldr	r2, [r5, #0]
 802449e:	0553      	lsls	r3, r2, #21
 80244a0:	d408      	bmi.n	80244b4 <_printf_float+0x210>
 80244a2:	692b      	ldr	r3, [r5, #16]
 80244a4:	003a      	movs	r2, r7
 80244a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80244a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80244aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80244ac:	47a0      	blx	r4
 80244ae:	3001      	adds	r0, #1
 80244b0:	d129      	bne.n	8024506 <_printf_float+0x262>
 80244b2:	e753      	b.n	802435c <_printf_float+0xb8>
 80244b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80244b6:	2b65      	cmp	r3, #101	@ 0x65
 80244b8:	d800      	bhi.n	80244bc <_printf_float+0x218>
 80244ba:	e0da      	b.n	8024672 <_printf_float+0x3ce>
 80244bc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80244be:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80244c0:	2200      	movs	r2, #0
 80244c2:	2300      	movs	r3, #0
 80244c4:	f7db fff4 	bl	80004b0 <__aeabi_dcmpeq>
 80244c8:	2800      	cmp	r0, #0
 80244ca:	d033      	beq.n	8024534 <_printf_float+0x290>
 80244cc:	2301      	movs	r3, #1
 80244ce:	4a37      	ldr	r2, [pc, #220]	@ (80245ac <_printf_float+0x308>)
 80244d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80244d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80244d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80244d6:	47a0      	blx	r4
 80244d8:	3001      	adds	r0, #1
 80244da:	d100      	bne.n	80244de <_printf_float+0x23a>
 80244dc:	e73e      	b.n	802435c <_printf_float+0xb8>
 80244de:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80244e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80244e2:	42b3      	cmp	r3, r6
 80244e4:	db02      	blt.n	80244ec <_printf_float+0x248>
 80244e6:	682b      	ldr	r3, [r5, #0]
 80244e8:	07db      	lsls	r3, r3, #31
 80244ea:	d50c      	bpl.n	8024506 <_printf_float+0x262>
 80244ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80244ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80244f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80244f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80244f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80244f6:	47a0      	blx	r4
 80244f8:	2400      	movs	r4, #0
 80244fa:	3001      	adds	r0, #1
 80244fc:	d100      	bne.n	8024500 <_printf_float+0x25c>
 80244fe:	e72d      	b.n	802435c <_printf_float+0xb8>
 8024500:	1e73      	subs	r3, r6, #1
 8024502:	42a3      	cmp	r3, r4
 8024504:	dc0a      	bgt.n	802451c <_printf_float+0x278>
 8024506:	682b      	ldr	r3, [r5, #0]
 8024508:	079b      	lsls	r3, r3, #30
 802450a:	d500      	bpl.n	802450e <_printf_float+0x26a>
 802450c:	e105      	b.n	802471a <_printf_float+0x476>
 802450e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024510:	68e8      	ldr	r0, [r5, #12]
 8024512:	4298      	cmp	r0, r3
 8024514:	db00      	blt.n	8024518 <_printf_float+0x274>
 8024516:	e723      	b.n	8024360 <_printf_float+0xbc>
 8024518:	0018      	movs	r0, r3
 802451a:	e721      	b.n	8024360 <_printf_float+0xbc>
 802451c:	002a      	movs	r2, r5
 802451e:	2301      	movs	r3, #1
 8024520:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024524:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024526:	321a      	adds	r2, #26
 8024528:	47b8      	blx	r7
 802452a:	3001      	adds	r0, #1
 802452c:	d100      	bne.n	8024530 <_printf_float+0x28c>
 802452e:	e715      	b.n	802435c <_printf_float+0xb8>
 8024530:	3401      	adds	r4, #1
 8024532:	e7e5      	b.n	8024500 <_printf_float+0x25c>
 8024534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024536:	2b00      	cmp	r3, #0
 8024538:	dc3a      	bgt.n	80245b0 <_printf_float+0x30c>
 802453a:	2301      	movs	r3, #1
 802453c:	4a1b      	ldr	r2, [pc, #108]	@ (80245ac <_printf_float+0x308>)
 802453e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024540:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024542:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024544:	47a0      	blx	r4
 8024546:	3001      	adds	r0, #1
 8024548:	d100      	bne.n	802454c <_printf_float+0x2a8>
 802454a:	e707      	b.n	802435c <_printf_float+0xb8>
 802454c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802454e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024550:	4333      	orrs	r3, r6
 8024552:	d102      	bne.n	802455a <_printf_float+0x2b6>
 8024554:	682b      	ldr	r3, [r5, #0]
 8024556:	07db      	lsls	r3, r3, #31
 8024558:	d5d5      	bpl.n	8024506 <_printf_float+0x262>
 802455a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802455c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802455e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024560:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024562:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024564:	47a0      	blx	r4
 8024566:	2300      	movs	r3, #0
 8024568:	3001      	adds	r0, #1
 802456a:	d100      	bne.n	802456e <_printf_float+0x2ca>
 802456c:	e6f6      	b.n	802435c <_printf_float+0xb8>
 802456e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024570:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024572:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024574:	425b      	negs	r3, r3
 8024576:	4293      	cmp	r3, r2
 8024578:	dc01      	bgt.n	802457e <_printf_float+0x2da>
 802457a:	0033      	movs	r3, r6
 802457c:	e792      	b.n	80244a4 <_printf_float+0x200>
 802457e:	002a      	movs	r2, r5
 8024580:	2301      	movs	r3, #1
 8024582:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024584:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024586:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024588:	321a      	adds	r2, #26
 802458a:	47a0      	blx	r4
 802458c:	3001      	adds	r0, #1
 802458e:	d100      	bne.n	8024592 <_printf_float+0x2ee>
 8024590:	e6e4      	b.n	802435c <_printf_float+0xb8>
 8024592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024594:	3301      	adds	r3, #1
 8024596:	e7ea      	b.n	802456e <_printf_float+0x2ca>
 8024598:	7fefffff 	.word	0x7fefffff
 802459c:	0802da11 	.word	0x0802da11
 80245a0:	0802da15 	.word	0x0802da15
 80245a4:	0802da19 	.word	0x0802da19
 80245a8:	0802da1d 	.word	0x0802da1d
 80245ac:	0802da21 	.word	0x0802da21
 80245b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80245b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80245b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80245b6:	429e      	cmp	r6, r3
 80245b8:	dd00      	ble.n	80245bc <_printf_float+0x318>
 80245ba:	001e      	movs	r6, r3
 80245bc:	2e00      	cmp	r6, #0
 80245be:	dc31      	bgt.n	8024624 <_printf_float+0x380>
 80245c0:	43f3      	mvns	r3, r6
 80245c2:	2400      	movs	r4, #0
 80245c4:	17db      	asrs	r3, r3, #31
 80245c6:	4033      	ands	r3, r6
 80245c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80245ca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80245cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80245ce:	1af3      	subs	r3, r6, r3
 80245d0:	42a3      	cmp	r3, r4
 80245d2:	dc30      	bgt.n	8024636 <_printf_float+0x392>
 80245d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80245d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80245d8:	429a      	cmp	r2, r3
 80245da:	dc38      	bgt.n	802464e <_printf_float+0x3aa>
 80245dc:	682b      	ldr	r3, [r5, #0]
 80245de:	07db      	lsls	r3, r3, #31
 80245e0:	d435      	bmi.n	802464e <_printf_float+0x3aa>
 80245e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80245e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80245e8:	1b9b      	subs	r3, r3, r6
 80245ea:	1b14      	subs	r4, r2, r4
 80245ec:	429c      	cmp	r4, r3
 80245ee:	dd00      	ble.n	80245f2 <_printf_float+0x34e>
 80245f0:	001c      	movs	r4, r3
 80245f2:	2c00      	cmp	r4, #0
 80245f4:	dc34      	bgt.n	8024660 <_printf_float+0x3bc>
 80245f6:	43e3      	mvns	r3, r4
 80245f8:	2600      	movs	r6, #0
 80245fa:	17db      	asrs	r3, r3, #31
 80245fc:	401c      	ands	r4, r3
 80245fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024600:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024602:	1ad3      	subs	r3, r2, r3
 8024604:	1b1b      	subs	r3, r3, r4
 8024606:	42b3      	cmp	r3, r6
 8024608:	dc00      	bgt.n	802460c <_printf_float+0x368>
 802460a:	e77c      	b.n	8024506 <_printf_float+0x262>
 802460c:	002a      	movs	r2, r5
 802460e:	2301      	movs	r3, #1
 8024610:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024614:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024616:	321a      	adds	r2, #26
 8024618:	47b8      	blx	r7
 802461a:	3001      	adds	r0, #1
 802461c:	d100      	bne.n	8024620 <_printf_float+0x37c>
 802461e:	e69d      	b.n	802435c <_printf_float+0xb8>
 8024620:	3601      	adds	r6, #1
 8024622:	e7ec      	b.n	80245fe <_printf_float+0x35a>
 8024624:	0033      	movs	r3, r6
 8024626:	003a      	movs	r2, r7
 8024628:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802462a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802462c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802462e:	47a0      	blx	r4
 8024630:	3001      	adds	r0, #1
 8024632:	d1c5      	bne.n	80245c0 <_printf_float+0x31c>
 8024634:	e692      	b.n	802435c <_printf_float+0xb8>
 8024636:	002a      	movs	r2, r5
 8024638:	2301      	movs	r3, #1
 802463a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802463c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802463e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024640:	321a      	adds	r2, #26
 8024642:	47b0      	blx	r6
 8024644:	3001      	adds	r0, #1
 8024646:	d100      	bne.n	802464a <_printf_float+0x3a6>
 8024648:	e688      	b.n	802435c <_printf_float+0xb8>
 802464a:	3401      	adds	r4, #1
 802464c:	e7bd      	b.n	80245ca <_printf_float+0x326>
 802464e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024650:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024652:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024654:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024656:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024658:	47a0      	blx	r4
 802465a:	3001      	adds	r0, #1
 802465c:	d1c1      	bne.n	80245e2 <_printf_float+0x33e>
 802465e:	e67d      	b.n	802435c <_printf_float+0xb8>
 8024660:	19ba      	adds	r2, r7, r6
 8024662:	0023      	movs	r3, r4
 8024664:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024668:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802466a:	47b0      	blx	r6
 802466c:	3001      	adds	r0, #1
 802466e:	d1c2      	bne.n	80245f6 <_printf_float+0x352>
 8024670:	e674      	b.n	802435c <_printf_float+0xb8>
 8024672:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024674:	930c      	str	r3, [sp, #48]	@ 0x30
 8024676:	2b01      	cmp	r3, #1
 8024678:	dc02      	bgt.n	8024680 <_printf_float+0x3dc>
 802467a:	2301      	movs	r3, #1
 802467c:	421a      	tst	r2, r3
 802467e:	d039      	beq.n	80246f4 <_printf_float+0x450>
 8024680:	2301      	movs	r3, #1
 8024682:	003a      	movs	r2, r7
 8024684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024688:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802468a:	47b0      	blx	r6
 802468c:	3001      	adds	r0, #1
 802468e:	d100      	bne.n	8024692 <_printf_float+0x3ee>
 8024690:	e664      	b.n	802435c <_printf_float+0xb8>
 8024692:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024694:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024698:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802469a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802469c:	47b0      	blx	r6
 802469e:	3001      	adds	r0, #1
 80246a0:	d100      	bne.n	80246a4 <_printf_float+0x400>
 80246a2:	e65b      	b.n	802435c <_printf_float+0xb8>
 80246a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80246a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80246a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246aa:	2200      	movs	r2, #0
 80246ac:	3b01      	subs	r3, #1
 80246ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80246b0:	2300      	movs	r3, #0
 80246b2:	f7db fefd 	bl	80004b0 <__aeabi_dcmpeq>
 80246b6:	2800      	cmp	r0, #0
 80246b8:	d11a      	bne.n	80246f0 <_printf_float+0x44c>
 80246ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246bc:	1c7a      	adds	r2, r7, #1
 80246be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80246c4:	47b0      	blx	r6
 80246c6:	3001      	adds	r0, #1
 80246c8:	d10e      	bne.n	80246e8 <_printf_float+0x444>
 80246ca:	e647      	b.n	802435c <_printf_float+0xb8>
 80246cc:	002a      	movs	r2, r5
 80246ce:	2301      	movs	r3, #1
 80246d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80246d6:	321a      	adds	r2, #26
 80246d8:	47b8      	blx	r7
 80246da:	3001      	adds	r0, #1
 80246dc:	d100      	bne.n	80246e0 <_printf_float+0x43c>
 80246de:	e63d      	b.n	802435c <_printf_float+0xb8>
 80246e0:	3601      	adds	r6, #1
 80246e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246e4:	429e      	cmp	r6, r3
 80246e6:	dbf1      	blt.n	80246cc <_printf_float+0x428>
 80246e8:	002a      	movs	r2, r5
 80246ea:	0023      	movs	r3, r4
 80246ec:	3250      	adds	r2, #80	@ 0x50
 80246ee:	e6da      	b.n	80244a6 <_printf_float+0x202>
 80246f0:	2600      	movs	r6, #0
 80246f2:	e7f6      	b.n	80246e2 <_printf_float+0x43e>
 80246f4:	003a      	movs	r2, r7
 80246f6:	e7e2      	b.n	80246be <_printf_float+0x41a>
 80246f8:	002a      	movs	r2, r5
 80246fa:	2301      	movs	r3, #1
 80246fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024700:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024702:	3219      	adds	r2, #25
 8024704:	47b0      	blx	r6
 8024706:	3001      	adds	r0, #1
 8024708:	d100      	bne.n	802470c <_printf_float+0x468>
 802470a:	e627      	b.n	802435c <_printf_float+0xb8>
 802470c:	3401      	adds	r4, #1
 802470e:	68eb      	ldr	r3, [r5, #12]
 8024710:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024712:	1a9b      	subs	r3, r3, r2
 8024714:	42a3      	cmp	r3, r4
 8024716:	dcef      	bgt.n	80246f8 <_printf_float+0x454>
 8024718:	e6f9      	b.n	802450e <_printf_float+0x26a>
 802471a:	2400      	movs	r4, #0
 802471c:	e7f7      	b.n	802470e <_printf_float+0x46a>
 802471e:	46c0      	nop			@ (mov r8, r8)

08024720 <_printf_common>:
 8024720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024722:	0016      	movs	r6, r2
 8024724:	9301      	str	r3, [sp, #4]
 8024726:	688a      	ldr	r2, [r1, #8]
 8024728:	690b      	ldr	r3, [r1, #16]
 802472a:	000c      	movs	r4, r1
 802472c:	9000      	str	r0, [sp, #0]
 802472e:	4293      	cmp	r3, r2
 8024730:	da00      	bge.n	8024734 <_printf_common+0x14>
 8024732:	0013      	movs	r3, r2
 8024734:	0022      	movs	r2, r4
 8024736:	6033      	str	r3, [r6, #0]
 8024738:	3243      	adds	r2, #67	@ 0x43
 802473a:	7812      	ldrb	r2, [r2, #0]
 802473c:	2a00      	cmp	r2, #0
 802473e:	d001      	beq.n	8024744 <_printf_common+0x24>
 8024740:	3301      	adds	r3, #1
 8024742:	6033      	str	r3, [r6, #0]
 8024744:	6823      	ldr	r3, [r4, #0]
 8024746:	069b      	lsls	r3, r3, #26
 8024748:	d502      	bpl.n	8024750 <_printf_common+0x30>
 802474a:	6833      	ldr	r3, [r6, #0]
 802474c:	3302      	adds	r3, #2
 802474e:	6033      	str	r3, [r6, #0]
 8024750:	6822      	ldr	r2, [r4, #0]
 8024752:	2306      	movs	r3, #6
 8024754:	0015      	movs	r5, r2
 8024756:	401d      	ands	r5, r3
 8024758:	421a      	tst	r2, r3
 802475a:	d027      	beq.n	80247ac <_printf_common+0x8c>
 802475c:	0023      	movs	r3, r4
 802475e:	3343      	adds	r3, #67	@ 0x43
 8024760:	781b      	ldrb	r3, [r3, #0]
 8024762:	1e5a      	subs	r2, r3, #1
 8024764:	4193      	sbcs	r3, r2
 8024766:	6822      	ldr	r2, [r4, #0]
 8024768:	0692      	lsls	r2, r2, #26
 802476a:	d430      	bmi.n	80247ce <_printf_common+0xae>
 802476c:	0022      	movs	r2, r4
 802476e:	9901      	ldr	r1, [sp, #4]
 8024770:	9800      	ldr	r0, [sp, #0]
 8024772:	9d08      	ldr	r5, [sp, #32]
 8024774:	3243      	adds	r2, #67	@ 0x43
 8024776:	47a8      	blx	r5
 8024778:	3001      	adds	r0, #1
 802477a:	d025      	beq.n	80247c8 <_printf_common+0xa8>
 802477c:	2206      	movs	r2, #6
 802477e:	6823      	ldr	r3, [r4, #0]
 8024780:	2500      	movs	r5, #0
 8024782:	4013      	ands	r3, r2
 8024784:	2b04      	cmp	r3, #4
 8024786:	d105      	bne.n	8024794 <_printf_common+0x74>
 8024788:	6833      	ldr	r3, [r6, #0]
 802478a:	68e5      	ldr	r5, [r4, #12]
 802478c:	1aed      	subs	r5, r5, r3
 802478e:	43eb      	mvns	r3, r5
 8024790:	17db      	asrs	r3, r3, #31
 8024792:	401d      	ands	r5, r3
 8024794:	68a3      	ldr	r3, [r4, #8]
 8024796:	6922      	ldr	r2, [r4, #16]
 8024798:	4293      	cmp	r3, r2
 802479a:	dd01      	ble.n	80247a0 <_printf_common+0x80>
 802479c:	1a9b      	subs	r3, r3, r2
 802479e:	18ed      	adds	r5, r5, r3
 80247a0:	2600      	movs	r6, #0
 80247a2:	42b5      	cmp	r5, r6
 80247a4:	d120      	bne.n	80247e8 <_printf_common+0xc8>
 80247a6:	2000      	movs	r0, #0
 80247a8:	e010      	b.n	80247cc <_printf_common+0xac>
 80247aa:	3501      	adds	r5, #1
 80247ac:	68e3      	ldr	r3, [r4, #12]
 80247ae:	6832      	ldr	r2, [r6, #0]
 80247b0:	1a9b      	subs	r3, r3, r2
 80247b2:	42ab      	cmp	r3, r5
 80247b4:	ddd2      	ble.n	802475c <_printf_common+0x3c>
 80247b6:	0022      	movs	r2, r4
 80247b8:	2301      	movs	r3, #1
 80247ba:	9901      	ldr	r1, [sp, #4]
 80247bc:	9800      	ldr	r0, [sp, #0]
 80247be:	9f08      	ldr	r7, [sp, #32]
 80247c0:	3219      	adds	r2, #25
 80247c2:	47b8      	blx	r7
 80247c4:	3001      	adds	r0, #1
 80247c6:	d1f0      	bne.n	80247aa <_printf_common+0x8a>
 80247c8:	2001      	movs	r0, #1
 80247ca:	4240      	negs	r0, r0
 80247cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80247ce:	2030      	movs	r0, #48	@ 0x30
 80247d0:	18e1      	adds	r1, r4, r3
 80247d2:	3143      	adds	r1, #67	@ 0x43
 80247d4:	7008      	strb	r0, [r1, #0]
 80247d6:	0021      	movs	r1, r4
 80247d8:	1c5a      	adds	r2, r3, #1
 80247da:	3145      	adds	r1, #69	@ 0x45
 80247dc:	7809      	ldrb	r1, [r1, #0]
 80247de:	18a2      	adds	r2, r4, r2
 80247e0:	3243      	adds	r2, #67	@ 0x43
 80247e2:	3302      	adds	r3, #2
 80247e4:	7011      	strb	r1, [r2, #0]
 80247e6:	e7c1      	b.n	802476c <_printf_common+0x4c>
 80247e8:	0022      	movs	r2, r4
 80247ea:	2301      	movs	r3, #1
 80247ec:	9901      	ldr	r1, [sp, #4]
 80247ee:	9800      	ldr	r0, [sp, #0]
 80247f0:	9f08      	ldr	r7, [sp, #32]
 80247f2:	321a      	adds	r2, #26
 80247f4:	47b8      	blx	r7
 80247f6:	3001      	adds	r0, #1
 80247f8:	d0e6      	beq.n	80247c8 <_printf_common+0xa8>
 80247fa:	3601      	adds	r6, #1
 80247fc:	e7d1      	b.n	80247a2 <_printf_common+0x82>
	...

08024800 <_printf_i>:
 8024800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024802:	b08b      	sub	sp, #44	@ 0x2c
 8024804:	9206      	str	r2, [sp, #24]
 8024806:	000a      	movs	r2, r1
 8024808:	3243      	adds	r2, #67	@ 0x43
 802480a:	9307      	str	r3, [sp, #28]
 802480c:	9005      	str	r0, [sp, #20]
 802480e:	9203      	str	r2, [sp, #12]
 8024810:	7e0a      	ldrb	r2, [r1, #24]
 8024812:	000c      	movs	r4, r1
 8024814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024816:	2a78      	cmp	r2, #120	@ 0x78
 8024818:	d809      	bhi.n	802482e <_printf_i+0x2e>
 802481a:	2a62      	cmp	r2, #98	@ 0x62
 802481c:	d80b      	bhi.n	8024836 <_printf_i+0x36>
 802481e:	2a00      	cmp	r2, #0
 8024820:	d100      	bne.n	8024824 <_printf_i+0x24>
 8024822:	e0bc      	b.n	802499e <_printf_i+0x19e>
 8024824:	497b      	ldr	r1, [pc, #492]	@ (8024a14 <_printf_i+0x214>)
 8024826:	9104      	str	r1, [sp, #16]
 8024828:	2a58      	cmp	r2, #88	@ 0x58
 802482a:	d100      	bne.n	802482e <_printf_i+0x2e>
 802482c:	e090      	b.n	8024950 <_printf_i+0x150>
 802482e:	0025      	movs	r5, r4
 8024830:	3542      	adds	r5, #66	@ 0x42
 8024832:	702a      	strb	r2, [r5, #0]
 8024834:	e022      	b.n	802487c <_printf_i+0x7c>
 8024836:	0010      	movs	r0, r2
 8024838:	3863      	subs	r0, #99	@ 0x63
 802483a:	2815      	cmp	r0, #21
 802483c:	d8f7      	bhi.n	802482e <_printf_i+0x2e>
 802483e:	f7db fca7 	bl	8000190 <__gnu_thumb1_case_shi>
 8024842:	0016      	.short	0x0016
 8024844:	fff6001f 	.word	0xfff6001f
 8024848:	fff6fff6 	.word	0xfff6fff6
 802484c:	001ffff6 	.word	0x001ffff6
 8024850:	fff6fff6 	.word	0xfff6fff6
 8024854:	fff6fff6 	.word	0xfff6fff6
 8024858:	003600a1 	.word	0x003600a1
 802485c:	fff60080 	.word	0xfff60080
 8024860:	00b2fff6 	.word	0x00b2fff6
 8024864:	0036fff6 	.word	0x0036fff6
 8024868:	fff6fff6 	.word	0xfff6fff6
 802486c:	0084      	.short	0x0084
 802486e:	0025      	movs	r5, r4
 8024870:	681a      	ldr	r2, [r3, #0]
 8024872:	3542      	adds	r5, #66	@ 0x42
 8024874:	1d11      	adds	r1, r2, #4
 8024876:	6019      	str	r1, [r3, #0]
 8024878:	6813      	ldr	r3, [r2, #0]
 802487a:	702b      	strb	r3, [r5, #0]
 802487c:	2301      	movs	r3, #1
 802487e:	e0a0      	b.n	80249c2 <_printf_i+0x1c2>
 8024880:	6818      	ldr	r0, [r3, #0]
 8024882:	6809      	ldr	r1, [r1, #0]
 8024884:	1d02      	adds	r2, r0, #4
 8024886:	060d      	lsls	r5, r1, #24
 8024888:	d50b      	bpl.n	80248a2 <_printf_i+0xa2>
 802488a:	6806      	ldr	r6, [r0, #0]
 802488c:	601a      	str	r2, [r3, #0]
 802488e:	2e00      	cmp	r6, #0
 8024890:	da03      	bge.n	802489a <_printf_i+0x9a>
 8024892:	232d      	movs	r3, #45	@ 0x2d
 8024894:	9a03      	ldr	r2, [sp, #12]
 8024896:	4276      	negs	r6, r6
 8024898:	7013      	strb	r3, [r2, #0]
 802489a:	4b5e      	ldr	r3, [pc, #376]	@ (8024a14 <_printf_i+0x214>)
 802489c:	270a      	movs	r7, #10
 802489e:	9304      	str	r3, [sp, #16]
 80248a0:	e018      	b.n	80248d4 <_printf_i+0xd4>
 80248a2:	6806      	ldr	r6, [r0, #0]
 80248a4:	601a      	str	r2, [r3, #0]
 80248a6:	0649      	lsls	r1, r1, #25
 80248a8:	d5f1      	bpl.n	802488e <_printf_i+0x8e>
 80248aa:	b236      	sxth	r6, r6
 80248ac:	e7ef      	b.n	802488e <_printf_i+0x8e>
 80248ae:	6808      	ldr	r0, [r1, #0]
 80248b0:	6819      	ldr	r1, [r3, #0]
 80248b2:	c940      	ldmia	r1!, {r6}
 80248b4:	0605      	lsls	r5, r0, #24
 80248b6:	d402      	bmi.n	80248be <_printf_i+0xbe>
 80248b8:	0640      	lsls	r0, r0, #25
 80248ba:	d500      	bpl.n	80248be <_printf_i+0xbe>
 80248bc:	b2b6      	uxth	r6, r6
 80248be:	6019      	str	r1, [r3, #0]
 80248c0:	4b54      	ldr	r3, [pc, #336]	@ (8024a14 <_printf_i+0x214>)
 80248c2:	270a      	movs	r7, #10
 80248c4:	9304      	str	r3, [sp, #16]
 80248c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80248c8:	d100      	bne.n	80248cc <_printf_i+0xcc>
 80248ca:	3f02      	subs	r7, #2
 80248cc:	0023      	movs	r3, r4
 80248ce:	2200      	movs	r2, #0
 80248d0:	3343      	adds	r3, #67	@ 0x43
 80248d2:	701a      	strb	r2, [r3, #0]
 80248d4:	6863      	ldr	r3, [r4, #4]
 80248d6:	60a3      	str	r3, [r4, #8]
 80248d8:	2b00      	cmp	r3, #0
 80248da:	db03      	blt.n	80248e4 <_printf_i+0xe4>
 80248dc:	2104      	movs	r1, #4
 80248de:	6822      	ldr	r2, [r4, #0]
 80248e0:	438a      	bics	r2, r1
 80248e2:	6022      	str	r2, [r4, #0]
 80248e4:	2e00      	cmp	r6, #0
 80248e6:	d102      	bne.n	80248ee <_printf_i+0xee>
 80248e8:	9d03      	ldr	r5, [sp, #12]
 80248ea:	2b00      	cmp	r3, #0
 80248ec:	d00c      	beq.n	8024908 <_printf_i+0x108>
 80248ee:	9d03      	ldr	r5, [sp, #12]
 80248f0:	0030      	movs	r0, r6
 80248f2:	0039      	movs	r1, r7
 80248f4:	f7db fcdc 	bl	80002b0 <__aeabi_uidivmod>
 80248f8:	9b04      	ldr	r3, [sp, #16]
 80248fa:	3d01      	subs	r5, #1
 80248fc:	5c5b      	ldrb	r3, [r3, r1]
 80248fe:	702b      	strb	r3, [r5, #0]
 8024900:	0033      	movs	r3, r6
 8024902:	0006      	movs	r6, r0
 8024904:	429f      	cmp	r7, r3
 8024906:	d9f3      	bls.n	80248f0 <_printf_i+0xf0>
 8024908:	2f08      	cmp	r7, #8
 802490a:	d109      	bne.n	8024920 <_printf_i+0x120>
 802490c:	6823      	ldr	r3, [r4, #0]
 802490e:	07db      	lsls	r3, r3, #31
 8024910:	d506      	bpl.n	8024920 <_printf_i+0x120>
 8024912:	6862      	ldr	r2, [r4, #4]
 8024914:	6923      	ldr	r3, [r4, #16]
 8024916:	429a      	cmp	r2, r3
 8024918:	dc02      	bgt.n	8024920 <_printf_i+0x120>
 802491a:	2330      	movs	r3, #48	@ 0x30
 802491c:	3d01      	subs	r5, #1
 802491e:	702b      	strb	r3, [r5, #0]
 8024920:	9b03      	ldr	r3, [sp, #12]
 8024922:	1b5b      	subs	r3, r3, r5
 8024924:	6123      	str	r3, [r4, #16]
 8024926:	9b07      	ldr	r3, [sp, #28]
 8024928:	0021      	movs	r1, r4
 802492a:	9300      	str	r3, [sp, #0]
 802492c:	9805      	ldr	r0, [sp, #20]
 802492e:	9b06      	ldr	r3, [sp, #24]
 8024930:	aa09      	add	r2, sp, #36	@ 0x24
 8024932:	f7ff fef5 	bl	8024720 <_printf_common>
 8024936:	3001      	adds	r0, #1
 8024938:	d148      	bne.n	80249cc <_printf_i+0x1cc>
 802493a:	2001      	movs	r0, #1
 802493c:	4240      	negs	r0, r0
 802493e:	b00b      	add	sp, #44	@ 0x2c
 8024940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024942:	2220      	movs	r2, #32
 8024944:	6809      	ldr	r1, [r1, #0]
 8024946:	430a      	orrs	r2, r1
 8024948:	6022      	str	r2, [r4, #0]
 802494a:	2278      	movs	r2, #120	@ 0x78
 802494c:	4932      	ldr	r1, [pc, #200]	@ (8024a18 <_printf_i+0x218>)
 802494e:	9104      	str	r1, [sp, #16]
 8024950:	0021      	movs	r1, r4
 8024952:	3145      	adds	r1, #69	@ 0x45
 8024954:	700a      	strb	r2, [r1, #0]
 8024956:	6819      	ldr	r1, [r3, #0]
 8024958:	6822      	ldr	r2, [r4, #0]
 802495a:	c940      	ldmia	r1!, {r6}
 802495c:	0610      	lsls	r0, r2, #24
 802495e:	d402      	bmi.n	8024966 <_printf_i+0x166>
 8024960:	0650      	lsls	r0, r2, #25
 8024962:	d500      	bpl.n	8024966 <_printf_i+0x166>
 8024964:	b2b6      	uxth	r6, r6
 8024966:	6019      	str	r1, [r3, #0]
 8024968:	07d3      	lsls	r3, r2, #31
 802496a:	d502      	bpl.n	8024972 <_printf_i+0x172>
 802496c:	2320      	movs	r3, #32
 802496e:	4313      	orrs	r3, r2
 8024970:	6023      	str	r3, [r4, #0]
 8024972:	2e00      	cmp	r6, #0
 8024974:	d001      	beq.n	802497a <_printf_i+0x17a>
 8024976:	2710      	movs	r7, #16
 8024978:	e7a8      	b.n	80248cc <_printf_i+0xcc>
 802497a:	2220      	movs	r2, #32
 802497c:	6823      	ldr	r3, [r4, #0]
 802497e:	4393      	bics	r3, r2
 8024980:	6023      	str	r3, [r4, #0]
 8024982:	e7f8      	b.n	8024976 <_printf_i+0x176>
 8024984:	681a      	ldr	r2, [r3, #0]
 8024986:	680d      	ldr	r5, [r1, #0]
 8024988:	1d10      	adds	r0, r2, #4
 802498a:	6949      	ldr	r1, [r1, #20]
 802498c:	6018      	str	r0, [r3, #0]
 802498e:	6813      	ldr	r3, [r2, #0]
 8024990:	062e      	lsls	r6, r5, #24
 8024992:	d501      	bpl.n	8024998 <_printf_i+0x198>
 8024994:	6019      	str	r1, [r3, #0]
 8024996:	e002      	b.n	802499e <_printf_i+0x19e>
 8024998:	066d      	lsls	r5, r5, #25
 802499a:	d5fb      	bpl.n	8024994 <_printf_i+0x194>
 802499c:	8019      	strh	r1, [r3, #0]
 802499e:	2300      	movs	r3, #0
 80249a0:	9d03      	ldr	r5, [sp, #12]
 80249a2:	6123      	str	r3, [r4, #16]
 80249a4:	e7bf      	b.n	8024926 <_printf_i+0x126>
 80249a6:	681a      	ldr	r2, [r3, #0]
 80249a8:	1d11      	adds	r1, r2, #4
 80249aa:	6019      	str	r1, [r3, #0]
 80249ac:	6815      	ldr	r5, [r2, #0]
 80249ae:	2100      	movs	r1, #0
 80249b0:	0028      	movs	r0, r5
 80249b2:	6862      	ldr	r2, [r4, #4]
 80249b4:	f000 fb9d 	bl	80250f2 <memchr>
 80249b8:	2800      	cmp	r0, #0
 80249ba:	d001      	beq.n	80249c0 <_printf_i+0x1c0>
 80249bc:	1b40      	subs	r0, r0, r5
 80249be:	6060      	str	r0, [r4, #4]
 80249c0:	6863      	ldr	r3, [r4, #4]
 80249c2:	6123      	str	r3, [r4, #16]
 80249c4:	2300      	movs	r3, #0
 80249c6:	9a03      	ldr	r2, [sp, #12]
 80249c8:	7013      	strb	r3, [r2, #0]
 80249ca:	e7ac      	b.n	8024926 <_printf_i+0x126>
 80249cc:	002a      	movs	r2, r5
 80249ce:	6923      	ldr	r3, [r4, #16]
 80249d0:	9906      	ldr	r1, [sp, #24]
 80249d2:	9805      	ldr	r0, [sp, #20]
 80249d4:	9d07      	ldr	r5, [sp, #28]
 80249d6:	47a8      	blx	r5
 80249d8:	3001      	adds	r0, #1
 80249da:	d0ae      	beq.n	802493a <_printf_i+0x13a>
 80249dc:	6823      	ldr	r3, [r4, #0]
 80249de:	079b      	lsls	r3, r3, #30
 80249e0:	d415      	bmi.n	8024a0e <_printf_i+0x20e>
 80249e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80249e4:	68e0      	ldr	r0, [r4, #12]
 80249e6:	4298      	cmp	r0, r3
 80249e8:	daa9      	bge.n	802493e <_printf_i+0x13e>
 80249ea:	0018      	movs	r0, r3
 80249ec:	e7a7      	b.n	802493e <_printf_i+0x13e>
 80249ee:	0022      	movs	r2, r4
 80249f0:	2301      	movs	r3, #1
 80249f2:	9906      	ldr	r1, [sp, #24]
 80249f4:	9805      	ldr	r0, [sp, #20]
 80249f6:	9e07      	ldr	r6, [sp, #28]
 80249f8:	3219      	adds	r2, #25
 80249fa:	47b0      	blx	r6
 80249fc:	3001      	adds	r0, #1
 80249fe:	d09c      	beq.n	802493a <_printf_i+0x13a>
 8024a00:	3501      	adds	r5, #1
 8024a02:	68e3      	ldr	r3, [r4, #12]
 8024a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024a06:	1a9b      	subs	r3, r3, r2
 8024a08:	42ab      	cmp	r3, r5
 8024a0a:	dcf0      	bgt.n	80249ee <_printf_i+0x1ee>
 8024a0c:	e7e9      	b.n	80249e2 <_printf_i+0x1e2>
 8024a0e:	2500      	movs	r5, #0
 8024a10:	e7f7      	b.n	8024a02 <_printf_i+0x202>
 8024a12:	46c0      	nop			@ (mov r8, r8)
 8024a14:	0802da23 	.word	0x0802da23
 8024a18:	0802da34 	.word	0x0802da34

08024a1c <std>:
 8024a1c:	2300      	movs	r3, #0
 8024a1e:	b510      	push	{r4, lr}
 8024a20:	0004      	movs	r4, r0
 8024a22:	6003      	str	r3, [r0, #0]
 8024a24:	6043      	str	r3, [r0, #4]
 8024a26:	6083      	str	r3, [r0, #8]
 8024a28:	8181      	strh	r1, [r0, #12]
 8024a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8024a2c:	81c2      	strh	r2, [r0, #14]
 8024a2e:	6103      	str	r3, [r0, #16]
 8024a30:	6143      	str	r3, [r0, #20]
 8024a32:	6183      	str	r3, [r0, #24]
 8024a34:	0019      	movs	r1, r3
 8024a36:	2208      	movs	r2, #8
 8024a38:	305c      	adds	r0, #92	@ 0x5c
 8024a3a:	f000 fa89 	bl	8024f50 <memset>
 8024a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8024a6c <std+0x50>)
 8024a40:	6224      	str	r4, [r4, #32]
 8024a42:	6263      	str	r3, [r4, #36]	@ 0x24
 8024a44:	4b0a      	ldr	r3, [pc, #40]	@ (8024a70 <std+0x54>)
 8024a46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024a48:	4b0a      	ldr	r3, [pc, #40]	@ (8024a74 <std+0x58>)
 8024a4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8024a78 <std+0x5c>)
 8024a4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8024a50:	4b0a      	ldr	r3, [pc, #40]	@ (8024a7c <std+0x60>)
 8024a52:	429c      	cmp	r4, r3
 8024a54:	d005      	beq.n	8024a62 <std+0x46>
 8024a56:	4b0a      	ldr	r3, [pc, #40]	@ (8024a80 <std+0x64>)
 8024a58:	429c      	cmp	r4, r3
 8024a5a:	d002      	beq.n	8024a62 <std+0x46>
 8024a5c:	4b09      	ldr	r3, [pc, #36]	@ (8024a84 <std+0x68>)
 8024a5e:	429c      	cmp	r4, r3
 8024a60:	d103      	bne.n	8024a6a <std+0x4e>
 8024a62:	0020      	movs	r0, r4
 8024a64:	3058      	adds	r0, #88	@ 0x58
 8024a66:	f000 fb41 	bl	80250ec <__retarget_lock_init_recursive>
 8024a6a:	bd10      	pop	{r4, pc}
 8024a6c:	08024cc5 	.word	0x08024cc5
 8024a70:	08024ced 	.word	0x08024ced
 8024a74:	08024d25 	.word	0x08024d25
 8024a78:	08024d51 	.word	0x08024d51
 8024a7c:	200034f4 	.word	0x200034f4
 8024a80:	2000355c 	.word	0x2000355c
 8024a84:	200035c4 	.word	0x200035c4

08024a88 <stdio_exit_handler>:
 8024a88:	b510      	push	{r4, lr}
 8024a8a:	4a03      	ldr	r2, [pc, #12]	@ (8024a98 <stdio_exit_handler+0x10>)
 8024a8c:	4903      	ldr	r1, [pc, #12]	@ (8024a9c <stdio_exit_handler+0x14>)
 8024a8e:	4804      	ldr	r0, [pc, #16]	@ (8024aa0 <stdio_exit_handler+0x18>)
 8024a90:	f000 f86c 	bl	8024b6c <_fwalk_sglue>
 8024a94:	bd10      	pop	{r4, pc}
 8024a96:	46c0      	nop			@ (mov r8, r8)
 8024a98:	20000268 	.word	0x20000268
 8024a9c:	08027711 	.word	0x08027711
 8024aa0:	200003e4 	.word	0x200003e4

08024aa4 <cleanup_stdio>:
 8024aa4:	6841      	ldr	r1, [r0, #4]
 8024aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8024ad4 <cleanup_stdio+0x30>)
 8024aa8:	b510      	push	{r4, lr}
 8024aaa:	0004      	movs	r4, r0
 8024aac:	4299      	cmp	r1, r3
 8024aae:	d001      	beq.n	8024ab4 <cleanup_stdio+0x10>
 8024ab0:	f002 fe2e 	bl	8027710 <_fflush_r>
 8024ab4:	68a1      	ldr	r1, [r4, #8]
 8024ab6:	4b08      	ldr	r3, [pc, #32]	@ (8024ad8 <cleanup_stdio+0x34>)
 8024ab8:	4299      	cmp	r1, r3
 8024aba:	d002      	beq.n	8024ac2 <cleanup_stdio+0x1e>
 8024abc:	0020      	movs	r0, r4
 8024abe:	f002 fe27 	bl	8027710 <_fflush_r>
 8024ac2:	68e1      	ldr	r1, [r4, #12]
 8024ac4:	4b05      	ldr	r3, [pc, #20]	@ (8024adc <cleanup_stdio+0x38>)
 8024ac6:	4299      	cmp	r1, r3
 8024ac8:	d002      	beq.n	8024ad0 <cleanup_stdio+0x2c>
 8024aca:	0020      	movs	r0, r4
 8024acc:	f002 fe20 	bl	8027710 <_fflush_r>
 8024ad0:	bd10      	pop	{r4, pc}
 8024ad2:	46c0      	nop			@ (mov r8, r8)
 8024ad4:	200034f4 	.word	0x200034f4
 8024ad8:	2000355c 	.word	0x2000355c
 8024adc:	200035c4 	.word	0x200035c4

08024ae0 <global_stdio_init.part.0>:
 8024ae0:	b510      	push	{r4, lr}
 8024ae2:	4b09      	ldr	r3, [pc, #36]	@ (8024b08 <global_stdio_init.part.0+0x28>)
 8024ae4:	4a09      	ldr	r2, [pc, #36]	@ (8024b0c <global_stdio_init.part.0+0x2c>)
 8024ae6:	2104      	movs	r1, #4
 8024ae8:	601a      	str	r2, [r3, #0]
 8024aea:	4809      	ldr	r0, [pc, #36]	@ (8024b10 <global_stdio_init.part.0+0x30>)
 8024aec:	2200      	movs	r2, #0
 8024aee:	f7ff ff95 	bl	8024a1c <std>
 8024af2:	2201      	movs	r2, #1
 8024af4:	2109      	movs	r1, #9
 8024af6:	4807      	ldr	r0, [pc, #28]	@ (8024b14 <global_stdio_init.part.0+0x34>)
 8024af8:	f7ff ff90 	bl	8024a1c <std>
 8024afc:	2202      	movs	r2, #2
 8024afe:	2112      	movs	r1, #18
 8024b00:	4805      	ldr	r0, [pc, #20]	@ (8024b18 <global_stdio_init.part.0+0x38>)
 8024b02:	f7ff ff8b 	bl	8024a1c <std>
 8024b06:	bd10      	pop	{r4, pc}
 8024b08:	2000362c 	.word	0x2000362c
 8024b0c:	08024a89 	.word	0x08024a89
 8024b10:	200034f4 	.word	0x200034f4
 8024b14:	2000355c 	.word	0x2000355c
 8024b18:	200035c4 	.word	0x200035c4

08024b1c <__sfp_lock_acquire>:
 8024b1c:	b510      	push	{r4, lr}
 8024b1e:	4802      	ldr	r0, [pc, #8]	@ (8024b28 <__sfp_lock_acquire+0xc>)
 8024b20:	f000 fae5 	bl	80250ee <__retarget_lock_acquire_recursive>
 8024b24:	bd10      	pop	{r4, pc}
 8024b26:	46c0      	nop			@ (mov r8, r8)
 8024b28:	20003635 	.word	0x20003635

08024b2c <__sfp_lock_release>:
 8024b2c:	b510      	push	{r4, lr}
 8024b2e:	4802      	ldr	r0, [pc, #8]	@ (8024b38 <__sfp_lock_release+0xc>)
 8024b30:	f000 fade 	bl	80250f0 <__retarget_lock_release_recursive>
 8024b34:	bd10      	pop	{r4, pc}
 8024b36:	46c0      	nop			@ (mov r8, r8)
 8024b38:	20003635 	.word	0x20003635

08024b3c <__sinit>:
 8024b3c:	b510      	push	{r4, lr}
 8024b3e:	0004      	movs	r4, r0
 8024b40:	f7ff ffec 	bl	8024b1c <__sfp_lock_acquire>
 8024b44:	6a23      	ldr	r3, [r4, #32]
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d002      	beq.n	8024b50 <__sinit+0x14>
 8024b4a:	f7ff ffef 	bl	8024b2c <__sfp_lock_release>
 8024b4e:	bd10      	pop	{r4, pc}
 8024b50:	4b04      	ldr	r3, [pc, #16]	@ (8024b64 <__sinit+0x28>)
 8024b52:	6223      	str	r3, [r4, #32]
 8024b54:	4b04      	ldr	r3, [pc, #16]	@ (8024b68 <__sinit+0x2c>)
 8024b56:	681b      	ldr	r3, [r3, #0]
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	d1f6      	bne.n	8024b4a <__sinit+0xe>
 8024b5c:	f7ff ffc0 	bl	8024ae0 <global_stdio_init.part.0>
 8024b60:	e7f3      	b.n	8024b4a <__sinit+0xe>
 8024b62:	46c0      	nop			@ (mov r8, r8)
 8024b64:	08024aa5 	.word	0x08024aa5
 8024b68:	2000362c 	.word	0x2000362c

08024b6c <_fwalk_sglue>:
 8024b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024b6e:	0014      	movs	r4, r2
 8024b70:	2600      	movs	r6, #0
 8024b72:	9000      	str	r0, [sp, #0]
 8024b74:	9101      	str	r1, [sp, #4]
 8024b76:	68a5      	ldr	r5, [r4, #8]
 8024b78:	6867      	ldr	r7, [r4, #4]
 8024b7a:	3f01      	subs	r7, #1
 8024b7c:	d504      	bpl.n	8024b88 <_fwalk_sglue+0x1c>
 8024b7e:	6824      	ldr	r4, [r4, #0]
 8024b80:	2c00      	cmp	r4, #0
 8024b82:	d1f8      	bne.n	8024b76 <_fwalk_sglue+0xa>
 8024b84:	0030      	movs	r0, r6
 8024b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024b88:	89ab      	ldrh	r3, [r5, #12]
 8024b8a:	2b01      	cmp	r3, #1
 8024b8c:	d908      	bls.n	8024ba0 <_fwalk_sglue+0x34>
 8024b8e:	220e      	movs	r2, #14
 8024b90:	5eab      	ldrsh	r3, [r5, r2]
 8024b92:	3301      	adds	r3, #1
 8024b94:	d004      	beq.n	8024ba0 <_fwalk_sglue+0x34>
 8024b96:	0029      	movs	r1, r5
 8024b98:	9800      	ldr	r0, [sp, #0]
 8024b9a:	9b01      	ldr	r3, [sp, #4]
 8024b9c:	4798      	blx	r3
 8024b9e:	4306      	orrs	r6, r0
 8024ba0:	3568      	adds	r5, #104	@ 0x68
 8024ba2:	e7ea      	b.n	8024b7a <_fwalk_sglue+0xe>

08024ba4 <iprintf>:
 8024ba4:	b40f      	push	{r0, r1, r2, r3}
 8024ba6:	b507      	push	{r0, r1, r2, lr}
 8024ba8:	4905      	ldr	r1, [pc, #20]	@ (8024bc0 <iprintf+0x1c>)
 8024baa:	ab04      	add	r3, sp, #16
 8024bac:	6808      	ldr	r0, [r1, #0]
 8024bae:	cb04      	ldmia	r3!, {r2}
 8024bb0:	6881      	ldr	r1, [r0, #8]
 8024bb2:	9301      	str	r3, [sp, #4]
 8024bb4:	f002 fc0a 	bl	80273cc <_vfiprintf_r>
 8024bb8:	b003      	add	sp, #12
 8024bba:	bc08      	pop	{r3}
 8024bbc:	b004      	add	sp, #16
 8024bbe:	4718      	bx	r3
 8024bc0:	200003e0 	.word	0x200003e0

08024bc4 <_puts_r>:
 8024bc4:	6a03      	ldr	r3, [r0, #32]
 8024bc6:	b570      	push	{r4, r5, r6, lr}
 8024bc8:	0005      	movs	r5, r0
 8024bca:	000e      	movs	r6, r1
 8024bcc:	6884      	ldr	r4, [r0, #8]
 8024bce:	2b00      	cmp	r3, #0
 8024bd0:	d101      	bne.n	8024bd6 <_puts_r+0x12>
 8024bd2:	f7ff ffb3 	bl	8024b3c <__sinit>
 8024bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024bd8:	07db      	lsls	r3, r3, #31
 8024bda:	d405      	bmi.n	8024be8 <_puts_r+0x24>
 8024bdc:	89a3      	ldrh	r3, [r4, #12]
 8024bde:	059b      	lsls	r3, r3, #22
 8024be0:	d402      	bmi.n	8024be8 <_puts_r+0x24>
 8024be2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024be4:	f000 fa83 	bl	80250ee <__retarget_lock_acquire_recursive>
 8024be8:	89a3      	ldrh	r3, [r4, #12]
 8024bea:	071b      	lsls	r3, r3, #28
 8024bec:	d502      	bpl.n	8024bf4 <_puts_r+0x30>
 8024bee:	6923      	ldr	r3, [r4, #16]
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	d11f      	bne.n	8024c34 <_puts_r+0x70>
 8024bf4:	0021      	movs	r1, r4
 8024bf6:	0028      	movs	r0, r5
 8024bf8:	f000 f94c 	bl	8024e94 <__swsetup_r>
 8024bfc:	2800      	cmp	r0, #0
 8024bfe:	d019      	beq.n	8024c34 <_puts_r+0x70>
 8024c00:	2501      	movs	r5, #1
 8024c02:	426d      	negs	r5, r5
 8024c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024c06:	07db      	lsls	r3, r3, #31
 8024c08:	d405      	bmi.n	8024c16 <_puts_r+0x52>
 8024c0a:	89a3      	ldrh	r3, [r4, #12]
 8024c0c:	059b      	lsls	r3, r3, #22
 8024c0e:	d402      	bmi.n	8024c16 <_puts_r+0x52>
 8024c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024c12:	f000 fa6d 	bl	80250f0 <__retarget_lock_release_recursive>
 8024c16:	0028      	movs	r0, r5
 8024c18:	bd70      	pop	{r4, r5, r6, pc}
 8024c1a:	3601      	adds	r6, #1
 8024c1c:	60a3      	str	r3, [r4, #8]
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	da04      	bge.n	8024c2c <_puts_r+0x68>
 8024c22:	69a2      	ldr	r2, [r4, #24]
 8024c24:	429a      	cmp	r2, r3
 8024c26:	dc16      	bgt.n	8024c56 <_puts_r+0x92>
 8024c28:	290a      	cmp	r1, #10
 8024c2a:	d014      	beq.n	8024c56 <_puts_r+0x92>
 8024c2c:	6823      	ldr	r3, [r4, #0]
 8024c2e:	1c5a      	adds	r2, r3, #1
 8024c30:	6022      	str	r2, [r4, #0]
 8024c32:	7019      	strb	r1, [r3, #0]
 8024c34:	68a3      	ldr	r3, [r4, #8]
 8024c36:	7831      	ldrb	r1, [r6, #0]
 8024c38:	3b01      	subs	r3, #1
 8024c3a:	2900      	cmp	r1, #0
 8024c3c:	d1ed      	bne.n	8024c1a <_puts_r+0x56>
 8024c3e:	60a3      	str	r3, [r4, #8]
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	da0f      	bge.n	8024c64 <_puts_r+0xa0>
 8024c44:	0022      	movs	r2, r4
 8024c46:	0028      	movs	r0, r5
 8024c48:	310a      	adds	r1, #10
 8024c4a:	f000 f8e1 	bl	8024e10 <__swbuf_r>
 8024c4e:	3001      	adds	r0, #1
 8024c50:	d0d6      	beq.n	8024c00 <_puts_r+0x3c>
 8024c52:	250a      	movs	r5, #10
 8024c54:	e7d6      	b.n	8024c04 <_puts_r+0x40>
 8024c56:	0022      	movs	r2, r4
 8024c58:	0028      	movs	r0, r5
 8024c5a:	f000 f8d9 	bl	8024e10 <__swbuf_r>
 8024c5e:	3001      	adds	r0, #1
 8024c60:	d1e8      	bne.n	8024c34 <_puts_r+0x70>
 8024c62:	e7cd      	b.n	8024c00 <_puts_r+0x3c>
 8024c64:	6823      	ldr	r3, [r4, #0]
 8024c66:	1c5a      	adds	r2, r3, #1
 8024c68:	6022      	str	r2, [r4, #0]
 8024c6a:	220a      	movs	r2, #10
 8024c6c:	701a      	strb	r2, [r3, #0]
 8024c6e:	e7f0      	b.n	8024c52 <_puts_r+0x8e>

08024c70 <puts>:
 8024c70:	b510      	push	{r4, lr}
 8024c72:	4b03      	ldr	r3, [pc, #12]	@ (8024c80 <puts+0x10>)
 8024c74:	0001      	movs	r1, r0
 8024c76:	6818      	ldr	r0, [r3, #0]
 8024c78:	f7ff ffa4 	bl	8024bc4 <_puts_r>
 8024c7c:	bd10      	pop	{r4, pc}
 8024c7e:	46c0      	nop			@ (mov r8, r8)
 8024c80:	200003e0 	.word	0x200003e0

08024c84 <siprintf>:
 8024c84:	b40e      	push	{r1, r2, r3}
 8024c86:	b500      	push	{lr}
 8024c88:	490b      	ldr	r1, [pc, #44]	@ (8024cb8 <siprintf+0x34>)
 8024c8a:	b09c      	sub	sp, #112	@ 0x70
 8024c8c:	ab1d      	add	r3, sp, #116	@ 0x74
 8024c8e:	9002      	str	r0, [sp, #8]
 8024c90:	9006      	str	r0, [sp, #24]
 8024c92:	9107      	str	r1, [sp, #28]
 8024c94:	9104      	str	r1, [sp, #16]
 8024c96:	4809      	ldr	r0, [pc, #36]	@ (8024cbc <siprintf+0x38>)
 8024c98:	4909      	ldr	r1, [pc, #36]	@ (8024cc0 <siprintf+0x3c>)
 8024c9a:	cb04      	ldmia	r3!, {r2}
 8024c9c:	9105      	str	r1, [sp, #20]
 8024c9e:	6800      	ldr	r0, [r0, #0]
 8024ca0:	a902      	add	r1, sp, #8
 8024ca2:	9301      	str	r3, [sp, #4]
 8024ca4:	f002 fa6c 	bl	8027180 <_svfiprintf_r>
 8024ca8:	2200      	movs	r2, #0
 8024caa:	9b02      	ldr	r3, [sp, #8]
 8024cac:	701a      	strb	r2, [r3, #0]
 8024cae:	b01c      	add	sp, #112	@ 0x70
 8024cb0:	bc08      	pop	{r3}
 8024cb2:	b003      	add	sp, #12
 8024cb4:	4718      	bx	r3
 8024cb6:	46c0      	nop			@ (mov r8, r8)
 8024cb8:	7fffffff 	.word	0x7fffffff
 8024cbc:	200003e0 	.word	0x200003e0
 8024cc0:	ffff0208 	.word	0xffff0208

08024cc4 <__sread>:
 8024cc4:	b570      	push	{r4, r5, r6, lr}
 8024cc6:	000c      	movs	r4, r1
 8024cc8:	250e      	movs	r5, #14
 8024cca:	5f49      	ldrsh	r1, [r1, r5]
 8024ccc:	f000 f9bc 	bl	8025048 <_read_r>
 8024cd0:	2800      	cmp	r0, #0
 8024cd2:	db03      	blt.n	8024cdc <__sread+0x18>
 8024cd4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8024cd6:	181b      	adds	r3, r3, r0
 8024cd8:	6563      	str	r3, [r4, #84]	@ 0x54
 8024cda:	bd70      	pop	{r4, r5, r6, pc}
 8024cdc:	89a3      	ldrh	r3, [r4, #12]
 8024cde:	4a02      	ldr	r2, [pc, #8]	@ (8024ce8 <__sread+0x24>)
 8024ce0:	4013      	ands	r3, r2
 8024ce2:	81a3      	strh	r3, [r4, #12]
 8024ce4:	e7f9      	b.n	8024cda <__sread+0x16>
 8024ce6:	46c0      	nop			@ (mov r8, r8)
 8024ce8:	ffffefff 	.word	0xffffefff

08024cec <__swrite>:
 8024cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cee:	001f      	movs	r7, r3
 8024cf0:	898b      	ldrh	r3, [r1, #12]
 8024cf2:	0005      	movs	r5, r0
 8024cf4:	000c      	movs	r4, r1
 8024cf6:	0016      	movs	r6, r2
 8024cf8:	05db      	lsls	r3, r3, #23
 8024cfa:	d505      	bpl.n	8024d08 <__swrite+0x1c>
 8024cfc:	230e      	movs	r3, #14
 8024cfe:	5ec9      	ldrsh	r1, [r1, r3]
 8024d00:	2200      	movs	r2, #0
 8024d02:	2302      	movs	r3, #2
 8024d04:	f000 f98c 	bl	8025020 <_lseek_r>
 8024d08:	89a3      	ldrh	r3, [r4, #12]
 8024d0a:	4a05      	ldr	r2, [pc, #20]	@ (8024d20 <__swrite+0x34>)
 8024d0c:	0028      	movs	r0, r5
 8024d0e:	4013      	ands	r3, r2
 8024d10:	81a3      	strh	r3, [r4, #12]
 8024d12:	0032      	movs	r2, r6
 8024d14:	230e      	movs	r3, #14
 8024d16:	5ee1      	ldrsh	r1, [r4, r3]
 8024d18:	003b      	movs	r3, r7
 8024d1a:	f000 f9a9 	bl	8025070 <_write_r>
 8024d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d20:	ffffefff 	.word	0xffffefff

08024d24 <__sseek>:
 8024d24:	b570      	push	{r4, r5, r6, lr}
 8024d26:	000c      	movs	r4, r1
 8024d28:	250e      	movs	r5, #14
 8024d2a:	5f49      	ldrsh	r1, [r1, r5]
 8024d2c:	f000 f978 	bl	8025020 <_lseek_r>
 8024d30:	89a3      	ldrh	r3, [r4, #12]
 8024d32:	1c42      	adds	r2, r0, #1
 8024d34:	d103      	bne.n	8024d3e <__sseek+0x1a>
 8024d36:	4a05      	ldr	r2, [pc, #20]	@ (8024d4c <__sseek+0x28>)
 8024d38:	4013      	ands	r3, r2
 8024d3a:	81a3      	strh	r3, [r4, #12]
 8024d3c:	bd70      	pop	{r4, r5, r6, pc}
 8024d3e:	2280      	movs	r2, #128	@ 0x80
 8024d40:	0152      	lsls	r2, r2, #5
 8024d42:	4313      	orrs	r3, r2
 8024d44:	81a3      	strh	r3, [r4, #12]
 8024d46:	6560      	str	r0, [r4, #84]	@ 0x54
 8024d48:	e7f8      	b.n	8024d3c <__sseek+0x18>
 8024d4a:	46c0      	nop			@ (mov r8, r8)
 8024d4c:	ffffefff 	.word	0xffffefff

08024d50 <__sclose>:
 8024d50:	b510      	push	{r4, lr}
 8024d52:	230e      	movs	r3, #14
 8024d54:	5ec9      	ldrsh	r1, [r1, r3]
 8024d56:	f000 f951 	bl	8024ffc <_close_r>
 8024d5a:	bd10      	pop	{r4, pc}

08024d5c <_vsniprintf_r>:
 8024d5c:	b530      	push	{r4, r5, lr}
 8024d5e:	0014      	movs	r4, r2
 8024d60:	0005      	movs	r5, r0
 8024d62:	001a      	movs	r2, r3
 8024d64:	b09b      	sub	sp, #108	@ 0x6c
 8024d66:	2c00      	cmp	r4, #0
 8024d68:	da05      	bge.n	8024d76 <_vsniprintf_r+0x1a>
 8024d6a:	238b      	movs	r3, #139	@ 0x8b
 8024d6c:	6003      	str	r3, [r0, #0]
 8024d6e:	2001      	movs	r0, #1
 8024d70:	4240      	negs	r0, r0
 8024d72:	b01b      	add	sp, #108	@ 0x6c
 8024d74:	bd30      	pop	{r4, r5, pc}
 8024d76:	2382      	movs	r3, #130	@ 0x82
 8024d78:	4668      	mov	r0, sp
 8024d7a:	009b      	lsls	r3, r3, #2
 8024d7c:	8183      	strh	r3, [r0, #12]
 8024d7e:	2300      	movs	r3, #0
 8024d80:	9100      	str	r1, [sp, #0]
 8024d82:	9104      	str	r1, [sp, #16]
 8024d84:	429c      	cmp	r4, r3
 8024d86:	d000      	beq.n	8024d8a <_vsniprintf_r+0x2e>
 8024d88:	1e63      	subs	r3, r4, #1
 8024d8a:	9302      	str	r3, [sp, #8]
 8024d8c:	9305      	str	r3, [sp, #20]
 8024d8e:	2301      	movs	r3, #1
 8024d90:	4669      	mov	r1, sp
 8024d92:	425b      	negs	r3, r3
 8024d94:	81cb      	strh	r3, [r1, #14]
 8024d96:	0028      	movs	r0, r5
 8024d98:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024d9a:	f002 f9f1 	bl	8027180 <_svfiprintf_r>
 8024d9e:	1c43      	adds	r3, r0, #1
 8024da0:	da01      	bge.n	8024da6 <_vsniprintf_r+0x4a>
 8024da2:	238b      	movs	r3, #139	@ 0x8b
 8024da4:	602b      	str	r3, [r5, #0]
 8024da6:	2c00      	cmp	r4, #0
 8024da8:	d0e3      	beq.n	8024d72 <_vsniprintf_r+0x16>
 8024daa:	2200      	movs	r2, #0
 8024dac:	9b00      	ldr	r3, [sp, #0]
 8024dae:	701a      	strb	r2, [r3, #0]
 8024db0:	e7df      	b.n	8024d72 <_vsniprintf_r+0x16>
	...

08024db4 <vsniprintf>:
 8024db4:	b513      	push	{r0, r1, r4, lr}
 8024db6:	4c04      	ldr	r4, [pc, #16]	@ (8024dc8 <vsniprintf+0x14>)
 8024db8:	9300      	str	r3, [sp, #0]
 8024dba:	0013      	movs	r3, r2
 8024dbc:	000a      	movs	r2, r1
 8024dbe:	0001      	movs	r1, r0
 8024dc0:	6820      	ldr	r0, [r4, #0]
 8024dc2:	f7ff ffcb 	bl	8024d5c <_vsniprintf_r>
 8024dc6:	bd16      	pop	{r1, r2, r4, pc}
 8024dc8:	200003e0 	.word	0x200003e0

08024dcc <_vsiprintf_r>:
 8024dcc:	b500      	push	{lr}
 8024dce:	b09b      	sub	sp, #108	@ 0x6c
 8024dd0:	9100      	str	r1, [sp, #0]
 8024dd2:	9104      	str	r1, [sp, #16]
 8024dd4:	4906      	ldr	r1, [pc, #24]	@ (8024df0 <_vsiprintf_r+0x24>)
 8024dd6:	9105      	str	r1, [sp, #20]
 8024dd8:	9102      	str	r1, [sp, #8]
 8024dda:	4906      	ldr	r1, [pc, #24]	@ (8024df4 <_vsiprintf_r+0x28>)
 8024ddc:	9103      	str	r1, [sp, #12]
 8024dde:	4669      	mov	r1, sp
 8024de0:	f002 f9ce 	bl	8027180 <_svfiprintf_r>
 8024de4:	2200      	movs	r2, #0
 8024de6:	9b00      	ldr	r3, [sp, #0]
 8024de8:	701a      	strb	r2, [r3, #0]
 8024dea:	b01b      	add	sp, #108	@ 0x6c
 8024dec:	bd00      	pop	{pc}
 8024dee:	46c0      	nop			@ (mov r8, r8)
 8024df0:	7fffffff 	.word	0x7fffffff
 8024df4:	ffff0208 	.word	0xffff0208

08024df8 <vsiprintf>:
 8024df8:	b510      	push	{r4, lr}
 8024dfa:	4c04      	ldr	r4, [pc, #16]	@ (8024e0c <vsiprintf+0x14>)
 8024dfc:	0013      	movs	r3, r2
 8024dfe:	000a      	movs	r2, r1
 8024e00:	0001      	movs	r1, r0
 8024e02:	6820      	ldr	r0, [r4, #0]
 8024e04:	f7ff ffe2 	bl	8024dcc <_vsiprintf_r>
 8024e08:	bd10      	pop	{r4, pc}
 8024e0a:	46c0      	nop			@ (mov r8, r8)
 8024e0c:	200003e0 	.word	0x200003e0

08024e10 <__swbuf_r>:
 8024e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e12:	0006      	movs	r6, r0
 8024e14:	000d      	movs	r5, r1
 8024e16:	0014      	movs	r4, r2
 8024e18:	2800      	cmp	r0, #0
 8024e1a:	d004      	beq.n	8024e26 <__swbuf_r+0x16>
 8024e1c:	6a03      	ldr	r3, [r0, #32]
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d101      	bne.n	8024e26 <__swbuf_r+0x16>
 8024e22:	f7ff fe8b 	bl	8024b3c <__sinit>
 8024e26:	69a3      	ldr	r3, [r4, #24]
 8024e28:	60a3      	str	r3, [r4, #8]
 8024e2a:	89a3      	ldrh	r3, [r4, #12]
 8024e2c:	071b      	lsls	r3, r3, #28
 8024e2e:	d502      	bpl.n	8024e36 <__swbuf_r+0x26>
 8024e30:	6923      	ldr	r3, [r4, #16]
 8024e32:	2b00      	cmp	r3, #0
 8024e34:	d109      	bne.n	8024e4a <__swbuf_r+0x3a>
 8024e36:	0021      	movs	r1, r4
 8024e38:	0030      	movs	r0, r6
 8024e3a:	f000 f82b 	bl	8024e94 <__swsetup_r>
 8024e3e:	2800      	cmp	r0, #0
 8024e40:	d003      	beq.n	8024e4a <__swbuf_r+0x3a>
 8024e42:	2501      	movs	r5, #1
 8024e44:	426d      	negs	r5, r5
 8024e46:	0028      	movs	r0, r5
 8024e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e4a:	6923      	ldr	r3, [r4, #16]
 8024e4c:	6820      	ldr	r0, [r4, #0]
 8024e4e:	b2ef      	uxtb	r7, r5
 8024e50:	1ac0      	subs	r0, r0, r3
 8024e52:	6963      	ldr	r3, [r4, #20]
 8024e54:	b2ed      	uxtb	r5, r5
 8024e56:	4283      	cmp	r3, r0
 8024e58:	dc05      	bgt.n	8024e66 <__swbuf_r+0x56>
 8024e5a:	0021      	movs	r1, r4
 8024e5c:	0030      	movs	r0, r6
 8024e5e:	f002 fc57 	bl	8027710 <_fflush_r>
 8024e62:	2800      	cmp	r0, #0
 8024e64:	d1ed      	bne.n	8024e42 <__swbuf_r+0x32>
 8024e66:	68a3      	ldr	r3, [r4, #8]
 8024e68:	3001      	adds	r0, #1
 8024e6a:	3b01      	subs	r3, #1
 8024e6c:	60a3      	str	r3, [r4, #8]
 8024e6e:	6823      	ldr	r3, [r4, #0]
 8024e70:	1c5a      	adds	r2, r3, #1
 8024e72:	6022      	str	r2, [r4, #0]
 8024e74:	701f      	strb	r7, [r3, #0]
 8024e76:	6963      	ldr	r3, [r4, #20]
 8024e78:	4283      	cmp	r3, r0
 8024e7a:	d004      	beq.n	8024e86 <__swbuf_r+0x76>
 8024e7c:	89a3      	ldrh	r3, [r4, #12]
 8024e7e:	07db      	lsls	r3, r3, #31
 8024e80:	d5e1      	bpl.n	8024e46 <__swbuf_r+0x36>
 8024e82:	2d0a      	cmp	r5, #10
 8024e84:	d1df      	bne.n	8024e46 <__swbuf_r+0x36>
 8024e86:	0021      	movs	r1, r4
 8024e88:	0030      	movs	r0, r6
 8024e8a:	f002 fc41 	bl	8027710 <_fflush_r>
 8024e8e:	2800      	cmp	r0, #0
 8024e90:	d0d9      	beq.n	8024e46 <__swbuf_r+0x36>
 8024e92:	e7d6      	b.n	8024e42 <__swbuf_r+0x32>

08024e94 <__swsetup_r>:
 8024e94:	4b2d      	ldr	r3, [pc, #180]	@ (8024f4c <__swsetup_r+0xb8>)
 8024e96:	b570      	push	{r4, r5, r6, lr}
 8024e98:	0005      	movs	r5, r0
 8024e9a:	6818      	ldr	r0, [r3, #0]
 8024e9c:	000c      	movs	r4, r1
 8024e9e:	2800      	cmp	r0, #0
 8024ea0:	d004      	beq.n	8024eac <__swsetup_r+0x18>
 8024ea2:	6a03      	ldr	r3, [r0, #32]
 8024ea4:	2b00      	cmp	r3, #0
 8024ea6:	d101      	bne.n	8024eac <__swsetup_r+0x18>
 8024ea8:	f7ff fe48 	bl	8024b3c <__sinit>
 8024eac:	230c      	movs	r3, #12
 8024eae:	5ee2      	ldrsh	r2, [r4, r3]
 8024eb0:	0713      	lsls	r3, r2, #28
 8024eb2:	d423      	bmi.n	8024efc <__swsetup_r+0x68>
 8024eb4:	06d3      	lsls	r3, r2, #27
 8024eb6:	d407      	bmi.n	8024ec8 <__swsetup_r+0x34>
 8024eb8:	2309      	movs	r3, #9
 8024eba:	602b      	str	r3, [r5, #0]
 8024ebc:	2340      	movs	r3, #64	@ 0x40
 8024ebe:	2001      	movs	r0, #1
 8024ec0:	4313      	orrs	r3, r2
 8024ec2:	81a3      	strh	r3, [r4, #12]
 8024ec4:	4240      	negs	r0, r0
 8024ec6:	e03a      	b.n	8024f3e <__swsetup_r+0xaa>
 8024ec8:	0752      	lsls	r2, r2, #29
 8024eca:	d513      	bpl.n	8024ef4 <__swsetup_r+0x60>
 8024ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ece:	2900      	cmp	r1, #0
 8024ed0:	d008      	beq.n	8024ee4 <__swsetup_r+0x50>
 8024ed2:	0023      	movs	r3, r4
 8024ed4:	3344      	adds	r3, #68	@ 0x44
 8024ed6:	4299      	cmp	r1, r3
 8024ed8:	d002      	beq.n	8024ee0 <__swsetup_r+0x4c>
 8024eda:	0028      	movs	r0, r5
 8024edc:	f000 ffa6 	bl	8025e2c <_free_r>
 8024ee0:	2300      	movs	r3, #0
 8024ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8024ee4:	2224      	movs	r2, #36	@ 0x24
 8024ee6:	89a3      	ldrh	r3, [r4, #12]
 8024ee8:	4393      	bics	r3, r2
 8024eea:	81a3      	strh	r3, [r4, #12]
 8024eec:	2300      	movs	r3, #0
 8024eee:	6063      	str	r3, [r4, #4]
 8024ef0:	6923      	ldr	r3, [r4, #16]
 8024ef2:	6023      	str	r3, [r4, #0]
 8024ef4:	2308      	movs	r3, #8
 8024ef6:	89a2      	ldrh	r2, [r4, #12]
 8024ef8:	4313      	orrs	r3, r2
 8024efa:	81a3      	strh	r3, [r4, #12]
 8024efc:	6923      	ldr	r3, [r4, #16]
 8024efe:	2b00      	cmp	r3, #0
 8024f00:	d10b      	bne.n	8024f1a <__swsetup_r+0x86>
 8024f02:	21a0      	movs	r1, #160	@ 0xa0
 8024f04:	2280      	movs	r2, #128	@ 0x80
 8024f06:	89a3      	ldrh	r3, [r4, #12]
 8024f08:	0089      	lsls	r1, r1, #2
 8024f0a:	0092      	lsls	r2, r2, #2
 8024f0c:	400b      	ands	r3, r1
 8024f0e:	4293      	cmp	r3, r2
 8024f10:	d003      	beq.n	8024f1a <__swsetup_r+0x86>
 8024f12:	0021      	movs	r1, r4
 8024f14:	0028      	movs	r0, r5
 8024f16:	f002 fc51 	bl	80277bc <__smakebuf_r>
 8024f1a:	230c      	movs	r3, #12
 8024f1c:	5ee2      	ldrsh	r2, [r4, r3]
 8024f1e:	2101      	movs	r1, #1
 8024f20:	0013      	movs	r3, r2
 8024f22:	400b      	ands	r3, r1
 8024f24:	420a      	tst	r2, r1
 8024f26:	d00b      	beq.n	8024f40 <__swsetup_r+0xac>
 8024f28:	2300      	movs	r3, #0
 8024f2a:	60a3      	str	r3, [r4, #8]
 8024f2c:	6963      	ldr	r3, [r4, #20]
 8024f2e:	425b      	negs	r3, r3
 8024f30:	61a3      	str	r3, [r4, #24]
 8024f32:	2000      	movs	r0, #0
 8024f34:	6923      	ldr	r3, [r4, #16]
 8024f36:	4283      	cmp	r3, r0
 8024f38:	d101      	bne.n	8024f3e <__swsetup_r+0xaa>
 8024f3a:	0613      	lsls	r3, r2, #24
 8024f3c:	d4be      	bmi.n	8024ebc <__swsetup_r+0x28>
 8024f3e:	bd70      	pop	{r4, r5, r6, pc}
 8024f40:	0791      	lsls	r1, r2, #30
 8024f42:	d400      	bmi.n	8024f46 <__swsetup_r+0xb2>
 8024f44:	6963      	ldr	r3, [r4, #20]
 8024f46:	60a3      	str	r3, [r4, #8]
 8024f48:	e7f3      	b.n	8024f32 <__swsetup_r+0x9e>
 8024f4a:	46c0      	nop			@ (mov r8, r8)
 8024f4c:	200003e0 	.word	0x200003e0

08024f50 <memset>:
 8024f50:	0003      	movs	r3, r0
 8024f52:	1882      	adds	r2, r0, r2
 8024f54:	4293      	cmp	r3, r2
 8024f56:	d100      	bne.n	8024f5a <memset+0xa>
 8024f58:	4770      	bx	lr
 8024f5a:	7019      	strb	r1, [r3, #0]
 8024f5c:	3301      	adds	r3, #1
 8024f5e:	e7f9      	b.n	8024f54 <memset+0x4>

08024f60 <strchr>:
 8024f60:	b2c9      	uxtb	r1, r1
 8024f62:	7803      	ldrb	r3, [r0, #0]
 8024f64:	2b00      	cmp	r3, #0
 8024f66:	d004      	beq.n	8024f72 <strchr+0x12>
 8024f68:	428b      	cmp	r3, r1
 8024f6a:	d100      	bne.n	8024f6e <strchr+0xe>
 8024f6c:	4770      	bx	lr
 8024f6e:	3001      	adds	r0, #1
 8024f70:	e7f7      	b.n	8024f62 <strchr+0x2>
 8024f72:	424b      	negs	r3, r1
 8024f74:	4159      	adcs	r1, r3
 8024f76:	4249      	negs	r1, r1
 8024f78:	4008      	ands	r0, r1
 8024f7a:	e7f7      	b.n	8024f6c <strchr+0xc>

08024f7c <strncmp>:
 8024f7c:	b530      	push	{r4, r5, lr}
 8024f7e:	0005      	movs	r5, r0
 8024f80:	1e10      	subs	r0, r2, #0
 8024f82:	d00b      	beq.n	8024f9c <strncmp+0x20>
 8024f84:	2400      	movs	r4, #0
 8024f86:	3a01      	subs	r2, #1
 8024f88:	5d2b      	ldrb	r3, [r5, r4]
 8024f8a:	5d08      	ldrb	r0, [r1, r4]
 8024f8c:	4283      	cmp	r3, r0
 8024f8e:	d104      	bne.n	8024f9a <strncmp+0x1e>
 8024f90:	42a2      	cmp	r2, r4
 8024f92:	d002      	beq.n	8024f9a <strncmp+0x1e>
 8024f94:	3401      	adds	r4, #1
 8024f96:	2b00      	cmp	r3, #0
 8024f98:	d1f6      	bne.n	8024f88 <strncmp+0xc>
 8024f9a:	1a18      	subs	r0, r3, r0
 8024f9c:	bd30      	pop	{r4, r5, pc}

08024f9e <strncpy>:
 8024f9e:	0003      	movs	r3, r0
 8024fa0:	b530      	push	{r4, r5, lr}
 8024fa2:	001d      	movs	r5, r3
 8024fa4:	2a00      	cmp	r2, #0
 8024fa6:	d006      	beq.n	8024fb6 <strncpy+0x18>
 8024fa8:	780c      	ldrb	r4, [r1, #0]
 8024faa:	3a01      	subs	r2, #1
 8024fac:	3301      	adds	r3, #1
 8024fae:	702c      	strb	r4, [r5, #0]
 8024fb0:	3101      	adds	r1, #1
 8024fb2:	2c00      	cmp	r4, #0
 8024fb4:	d1f5      	bne.n	8024fa2 <strncpy+0x4>
 8024fb6:	2100      	movs	r1, #0
 8024fb8:	189a      	adds	r2, r3, r2
 8024fba:	4293      	cmp	r3, r2
 8024fbc:	d100      	bne.n	8024fc0 <strncpy+0x22>
 8024fbe:	bd30      	pop	{r4, r5, pc}
 8024fc0:	7019      	strb	r1, [r3, #0]
 8024fc2:	3301      	adds	r3, #1
 8024fc4:	e7f9      	b.n	8024fba <strncpy+0x1c>

08024fc6 <strstr>:
 8024fc6:	780a      	ldrb	r2, [r1, #0]
 8024fc8:	b530      	push	{r4, r5, lr}
 8024fca:	2a00      	cmp	r2, #0
 8024fcc:	d10c      	bne.n	8024fe8 <strstr+0x22>
 8024fce:	bd30      	pop	{r4, r5, pc}
 8024fd0:	429a      	cmp	r2, r3
 8024fd2:	d108      	bne.n	8024fe6 <strstr+0x20>
 8024fd4:	2301      	movs	r3, #1
 8024fd6:	5ccc      	ldrb	r4, [r1, r3]
 8024fd8:	2c00      	cmp	r4, #0
 8024fda:	d0f8      	beq.n	8024fce <strstr+0x8>
 8024fdc:	5cc5      	ldrb	r5, [r0, r3]
 8024fde:	42a5      	cmp	r5, r4
 8024fe0:	d101      	bne.n	8024fe6 <strstr+0x20>
 8024fe2:	3301      	adds	r3, #1
 8024fe4:	e7f7      	b.n	8024fd6 <strstr+0x10>
 8024fe6:	3001      	adds	r0, #1
 8024fe8:	7803      	ldrb	r3, [r0, #0]
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d1f0      	bne.n	8024fd0 <strstr+0xa>
 8024fee:	0018      	movs	r0, r3
 8024ff0:	e7ed      	b.n	8024fce <strstr+0x8>
	...

08024ff4 <_localeconv_r>:
 8024ff4:	4800      	ldr	r0, [pc, #0]	@ (8024ff8 <_localeconv_r+0x4>)
 8024ff6:	4770      	bx	lr
 8024ff8:	20000364 	.word	0x20000364

08024ffc <_close_r>:
 8024ffc:	2300      	movs	r3, #0
 8024ffe:	b570      	push	{r4, r5, r6, lr}
 8025000:	4d06      	ldr	r5, [pc, #24]	@ (802501c <_close_r+0x20>)
 8025002:	0004      	movs	r4, r0
 8025004:	0008      	movs	r0, r1
 8025006:	602b      	str	r3, [r5, #0]
 8025008:	f7ed f8fc 	bl	8012204 <_close>
 802500c:	1c43      	adds	r3, r0, #1
 802500e:	d103      	bne.n	8025018 <_close_r+0x1c>
 8025010:	682b      	ldr	r3, [r5, #0]
 8025012:	2b00      	cmp	r3, #0
 8025014:	d000      	beq.n	8025018 <_close_r+0x1c>
 8025016:	6023      	str	r3, [r4, #0]
 8025018:	bd70      	pop	{r4, r5, r6, pc}
 802501a:	46c0      	nop			@ (mov r8, r8)
 802501c:	20003630 	.word	0x20003630

08025020 <_lseek_r>:
 8025020:	b570      	push	{r4, r5, r6, lr}
 8025022:	0004      	movs	r4, r0
 8025024:	0008      	movs	r0, r1
 8025026:	0011      	movs	r1, r2
 8025028:	001a      	movs	r2, r3
 802502a:	2300      	movs	r3, #0
 802502c:	4d05      	ldr	r5, [pc, #20]	@ (8025044 <_lseek_r+0x24>)
 802502e:	602b      	str	r3, [r5, #0]
 8025030:	f7ed f909 	bl	8012246 <_lseek>
 8025034:	1c43      	adds	r3, r0, #1
 8025036:	d103      	bne.n	8025040 <_lseek_r+0x20>
 8025038:	682b      	ldr	r3, [r5, #0]
 802503a:	2b00      	cmp	r3, #0
 802503c:	d000      	beq.n	8025040 <_lseek_r+0x20>
 802503e:	6023      	str	r3, [r4, #0]
 8025040:	bd70      	pop	{r4, r5, r6, pc}
 8025042:	46c0      	nop			@ (mov r8, r8)
 8025044:	20003630 	.word	0x20003630

08025048 <_read_r>:
 8025048:	b570      	push	{r4, r5, r6, lr}
 802504a:	0004      	movs	r4, r0
 802504c:	0008      	movs	r0, r1
 802504e:	0011      	movs	r1, r2
 8025050:	001a      	movs	r2, r3
 8025052:	2300      	movs	r3, #0
 8025054:	4d05      	ldr	r5, [pc, #20]	@ (802506c <_read_r+0x24>)
 8025056:	602b      	str	r3, [r5, #0]
 8025058:	f7ed f8b7 	bl	80121ca <_read>
 802505c:	1c43      	adds	r3, r0, #1
 802505e:	d103      	bne.n	8025068 <_read_r+0x20>
 8025060:	682b      	ldr	r3, [r5, #0]
 8025062:	2b00      	cmp	r3, #0
 8025064:	d000      	beq.n	8025068 <_read_r+0x20>
 8025066:	6023      	str	r3, [r4, #0]
 8025068:	bd70      	pop	{r4, r5, r6, pc}
 802506a:	46c0      	nop			@ (mov r8, r8)
 802506c:	20003630 	.word	0x20003630

08025070 <_write_r>:
 8025070:	b570      	push	{r4, r5, r6, lr}
 8025072:	0004      	movs	r4, r0
 8025074:	0008      	movs	r0, r1
 8025076:	0011      	movs	r1, r2
 8025078:	001a      	movs	r2, r3
 802507a:	2300      	movs	r3, #0
 802507c:	4d05      	ldr	r5, [pc, #20]	@ (8025094 <_write_r+0x24>)
 802507e:	602b      	str	r3, [r5, #0]
 8025080:	f7ed fd74 	bl	8012b6c <_write>
 8025084:	1c43      	adds	r3, r0, #1
 8025086:	d103      	bne.n	8025090 <_write_r+0x20>
 8025088:	682b      	ldr	r3, [r5, #0]
 802508a:	2b00      	cmp	r3, #0
 802508c:	d000      	beq.n	8025090 <_write_r+0x20>
 802508e:	6023      	str	r3, [r4, #0]
 8025090:	bd70      	pop	{r4, r5, r6, pc}
 8025092:	46c0      	nop			@ (mov r8, r8)
 8025094:	20003630 	.word	0x20003630

08025098 <__errno>:
 8025098:	4b01      	ldr	r3, [pc, #4]	@ (80250a0 <__errno+0x8>)
 802509a:	6818      	ldr	r0, [r3, #0]
 802509c:	4770      	bx	lr
 802509e:	46c0      	nop			@ (mov r8, r8)
 80250a0:	200003e0 	.word	0x200003e0

080250a4 <__libc_init_array>:
 80250a4:	b570      	push	{r4, r5, r6, lr}
 80250a6:	2600      	movs	r6, #0
 80250a8:	4c0c      	ldr	r4, [pc, #48]	@ (80250dc <__libc_init_array+0x38>)
 80250aa:	4d0d      	ldr	r5, [pc, #52]	@ (80250e0 <__libc_init_array+0x3c>)
 80250ac:	1b64      	subs	r4, r4, r5
 80250ae:	10a4      	asrs	r4, r4, #2
 80250b0:	42a6      	cmp	r6, r4
 80250b2:	d109      	bne.n	80250c8 <__libc_init_array+0x24>
 80250b4:	2600      	movs	r6, #0
 80250b6:	f003 fff9 	bl	80290ac <_init>
 80250ba:	4c0a      	ldr	r4, [pc, #40]	@ (80250e4 <__libc_init_array+0x40>)
 80250bc:	4d0a      	ldr	r5, [pc, #40]	@ (80250e8 <__libc_init_array+0x44>)
 80250be:	1b64      	subs	r4, r4, r5
 80250c0:	10a4      	asrs	r4, r4, #2
 80250c2:	42a6      	cmp	r6, r4
 80250c4:	d105      	bne.n	80250d2 <__libc_init_array+0x2e>
 80250c6:	bd70      	pop	{r4, r5, r6, pc}
 80250c8:	00b3      	lsls	r3, r6, #2
 80250ca:	58eb      	ldr	r3, [r5, r3]
 80250cc:	4798      	blx	r3
 80250ce:	3601      	adds	r6, #1
 80250d0:	e7ee      	b.n	80250b0 <__libc_init_array+0xc>
 80250d2:	00b3      	lsls	r3, r6, #2
 80250d4:	58eb      	ldr	r3, [r5, r3]
 80250d6:	4798      	blx	r3
 80250d8:	3601      	adds	r6, #1
 80250da:	e7f2      	b.n	80250c2 <__libc_init_array+0x1e>
 80250dc:	0802dd30 	.word	0x0802dd30
 80250e0:	0802dd30 	.word	0x0802dd30
 80250e4:	0802dd34 	.word	0x0802dd34
 80250e8:	0802dd30 	.word	0x0802dd30

080250ec <__retarget_lock_init_recursive>:
 80250ec:	4770      	bx	lr

080250ee <__retarget_lock_acquire_recursive>:
 80250ee:	4770      	bx	lr

080250f0 <__retarget_lock_release_recursive>:
 80250f0:	4770      	bx	lr

080250f2 <memchr>:
 80250f2:	b2c9      	uxtb	r1, r1
 80250f4:	1882      	adds	r2, r0, r2
 80250f6:	4290      	cmp	r0, r2
 80250f8:	d101      	bne.n	80250fe <memchr+0xc>
 80250fa:	2000      	movs	r0, #0
 80250fc:	4770      	bx	lr
 80250fe:	7803      	ldrb	r3, [r0, #0]
 8025100:	428b      	cmp	r3, r1
 8025102:	d0fb      	beq.n	80250fc <memchr+0xa>
 8025104:	3001      	adds	r0, #1
 8025106:	e7f6      	b.n	80250f6 <memchr+0x4>

08025108 <memcpy>:
 8025108:	2300      	movs	r3, #0
 802510a:	b510      	push	{r4, lr}
 802510c:	429a      	cmp	r2, r3
 802510e:	d100      	bne.n	8025112 <memcpy+0xa>
 8025110:	bd10      	pop	{r4, pc}
 8025112:	5ccc      	ldrb	r4, [r1, r3]
 8025114:	54c4      	strb	r4, [r0, r3]
 8025116:	3301      	adds	r3, #1
 8025118:	e7f8      	b.n	802510c <memcpy+0x4>
	...

0802511c <nan>:
 802511c:	2000      	movs	r0, #0
 802511e:	4901      	ldr	r1, [pc, #4]	@ (8025124 <nan+0x8>)
 8025120:	4770      	bx	lr
 8025122:	46c0      	nop			@ (mov r8, r8)
 8025124:	7ff80000 	.word	0x7ff80000

08025128 <quorem>:
 8025128:	b5f0      	push	{r4, r5, r6, r7, lr}
 802512a:	6902      	ldr	r2, [r0, #16]
 802512c:	690f      	ldr	r7, [r1, #16]
 802512e:	b087      	sub	sp, #28
 8025130:	0006      	movs	r6, r0
 8025132:	000b      	movs	r3, r1
 8025134:	2000      	movs	r0, #0
 8025136:	9102      	str	r1, [sp, #8]
 8025138:	42ba      	cmp	r2, r7
 802513a:	db6d      	blt.n	8025218 <quorem+0xf0>
 802513c:	3f01      	subs	r7, #1
 802513e:	00bc      	lsls	r4, r7, #2
 8025140:	3314      	adds	r3, #20
 8025142:	9305      	str	r3, [sp, #20]
 8025144:	191b      	adds	r3, r3, r4
 8025146:	9303      	str	r3, [sp, #12]
 8025148:	0033      	movs	r3, r6
 802514a:	3314      	adds	r3, #20
 802514c:	191c      	adds	r4, r3, r4
 802514e:	9301      	str	r3, [sp, #4]
 8025150:	6823      	ldr	r3, [r4, #0]
 8025152:	9304      	str	r3, [sp, #16]
 8025154:	9b03      	ldr	r3, [sp, #12]
 8025156:	9804      	ldr	r0, [sp, #16]
 8025158:	681d      	ldr	r5, [r3, #0]
 802515a:	3501      	adds	r5, #1
 802515c:	0029      	movs	r1, r5
 802515e:	f7db f821 	bl	80001a4 <__udivsi3>
 8025162:	9b04      	ldr	r3, [sp, #16]
 8025164:	9000      	str	r0, [sp, #0]
 8025166:	42ab      	cmp	r3, r5
 8025168:	d32b      	bcc.n	80251c2 <quorem+0x9a>
 802516a:	9b05      	ldr	r3, [sp, #20]
 802516c:	9d01      	ldr	r5, [sp, #4]
 802516e:	469c      	mov	ip, r3
 8025170:	2300      	movs	r3, #0
 8025172:	9305      	str	r3, [sp, #20]
 8025174:	9304      	str	r3, [sp, #16]
 8025176:	4662      	mov	r2, ip
 8025178:	ca08      	ldmia	r2!, {r3}
 802517a:	6828      	ldr	r0, [r5, #0]
 802517c:	4694      	mov	ip, r2
 802517e:	9a00      	ldr	r2, [sp, #0]
 8025180:	b299      	uxth	r1, r3
 8025182:	4351      	muls	r1, r2
 8025184:	9a05      	ldr	r2, [sp, #20]
 8025186:	0c1b      	lsrs	r3, r3, #16
 8025188:	1889      	adds	r1, r1, r2
 802518a:	9a00      	ldr	r2, [sp, #0]
 802518c:	4353      	muls	r3, r2
 802518e:	0c0a      	lsrs	r2, r1, #16
 8025190:	189b      	adds	r3, r3, r2
 8025192:	0c1a      	lsrs	r2, r3, #16
 8025194:	b289      	uxth	r1, r1
 8025196:	9205      	str	r2, [sp, #20]
 8025198:	b282      	uxth	r2, r0
 802519a:	1a52      	subs	r2, r2, r1
 802519c:	9904      	ldr	r1, [sp, #16]
 802519e:	0c00      	lsrs	r0, r0, #16
 80251a0:	1852      	adds	r2, r2, r1
 80251a2:	b29b      	uxth	r3, r3
 80251a4:	1411      	asrs	r1, r2, #16
 80251a6:	1ac3      	subs	r3, r0, r3
 80251a8:	185b      	adds	r3, r3, r1
 80251aa:	1419      	asrs	r1, r3, #16
 80251ac:	b292      	uxth	r2, r2
 80251ae:	041b      	lsls	r3, r3, #16
 80251b0:	431a      	orrs	r2, r3
 80251b2:	9b03      	ldr	r3, [sp, #12]
 80251b4:	9104      	str	r1, [sp, #16]
 80251b6:	c504      	stmia	r5!, {r2}
 80251b8:	4563      	cmp	r3, ip
 80251ba:	d2dc      	bcs.n	8025176 <quorem+0x4e>
 80251bc:	6823      	ldr	r3, [r4, #0]
 80251be:	2b00      	cmp	r3, #0
 80251c0:	d030      	beq.n	8025224 <quorem+0xfc>
 80251c2:	0030      	movs	r0, r6
 80251c4:	9902      	ldr	r1, [sp, #8]
 80251c6:	f001 fd7d 	bl	8026cc4 <__mcmp>
 80251ca:	2800      	cmp	r0, #0
 80251cc:	db23      	blt.n	8025216 <quorem+0xee>
 80251ce:	0034      	movs	r4, r6
 80251d0:	2500      	movs	r5, #0
 80251d2:	9902      	ldr	r1, [sp, #8]
 80251d4:	3414      	adds	r4, #20
 80251d6:	3114      	adds	r1, #20
 80251d8:	6823      	ldr	r3, [r4, #0]
 80251da:	c901      	ldmia	r1!, {r0}
 80251dc:	9302      	str	r3, [sp, #8]
 80251de:	466b      	mov	r3, sp
 80251e0:	891b      	ldrh	r3, [r3, #8]
 80251e2:	b282      	uxth	r2, r0
 80251e4:	1a9a      	subs	r2, r3, r2
 80251e6:	9b02      	ldr	r3, [sp, #8]
 80251e8:	1952      	adds	r2, r2, r5
 80251ea:	0c00      	lsrs	r0, r0, #16
 80251ec:	0c1b      	lsrs	r3, r3, #16
 80251ee:	1a1b      	subs	r3, r3, r0
 80251f0:	1410      	asrs	r0, r2, #16
 80251f2:	181b      	adds	r3, r3, r0
 80251f4:	141d      	asrs	r5, r3, #16
 80251f6:	b292      	uxth	r2, r2
 80251f8:	041b      	lsls	r3, r3, #16
 80251fa:	431a      	orrs	r2, r3
 80251fc:	9b03      	ldr	r3, [sp, #12]
 80251fe:	c404      	stmia	r4!, {r2}
 8025200:	428b      	cmp	r3, r1
 8025202:	d2e9      	bcs.n	80251d8 <quorem+0xb0>
 8025204:	9a01      	ldr	r2, [sp, #4]
 8025206:	00bb      	lsls	r3, r7, #2
 8025208:	18d3      	adds	r3, r2, r3
 802520a:	681a      	ldr	r2, [r3, #0]
 802520c:	2a00      	cmp	r2, #0
 802520e:	d013      	beq.n	8025238 <quorem+0x110>
 8025210:	9b00      	ldr	r3, [sp, #0]
 8025212:	3301      	adds	r3, #1
 8025214:	9300      	str	r3, [sp, #0]
 8025216:	9800      	ldr	r0, [sp, #0]
 8025218:	b007      	add	sp, #28
 802521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802521c:	6823      	ldr	r3, [r4, #0]
 802521e:	2b00      	cmp	r3, #0
 8025220:	d104      	bne.n	802522c <quorem+0x104>
 8025222:	3f01      	subs	r7, #1
 8025224:	9b01      	ldr	r3, [sp, #4]
 8025226:	3c04      	subs	r4, #4
 8025228:	42a3      	cmp	r3, r4
 802522a:	d3f7      	bcc.n	802521c <quorem+0xf4>
 802522c:	6137      	str	r7, [r6, #16]
 802522e:	e7c8      	b.n	80251c2 <quorem+0x9a>
 8025230:	681a      	ldr	r2, [r3, #0]
 8025232:	2a00      	cmp	r2, #0
 8025234:	d104      	bne.n	8025240 <quorem+0x118>
 8025236:	3f01      	subs	r7, #1
 8025238:	9a01      	ldr	r2, [sp, #4]
 802523a:	3b04      	subs	r3, #4
 802523c:	429a      	cmp	r2, r3
 802523e:	d3f7      	bcc.n	8025230 <quorem+0x108>
 8025240:	6137      	str	r7, [r6, #16]
 8025242:	e7e5      	b.n	8025210 <quorem+0xe8>

08025244 <_dtoa_r>:
 8025244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025246:	0014      	movs	r4, r2
 8025248:	001d      	movs	r5, r3
 802524a:	69c6      	ldr	r6, [r0, #28]
 802524c:	b09d      	sub	sp, #116	@ 0x74
 802524e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025250:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025252:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8025254:	9003      	str	r0, [sp, #12]
 8025256:	2e00      	cmp	r6, #0
 8025258:	d10f      	bne.n	802527a <_dtoa_r+0x36>
 802525a:	2010      	movs	r0, #16
 802525c:	f001 f98a 	bl	8026574 <malloc>
 8025260:	9b03      	ldr	r3, [sp, #12]
 8025262:	1e02      	subs	r2, r0, #0
 8025264:	61d8      	str	r0, [r3, #28]
 8025266:	d104      	bne.n	8025272 <_dtoa_r+0x2e>
 8025268:	21ef      	movs	r1, #239	@ 0xef
 802526a:	4bc7      	ldr	r3, [pc, #796]	@ (8025588 <_dtoa_r+0x344>)
 802526c:	48c7      	ldr	r0, [pc, #796]	@ (802558c <_dtoa_r+0x348>)
 802526e:	f002 fb2f 	bl	80278d0 <__assert_func>
 8025272:	6046      	str	r6, [r0, #4]
 8025274:	6086      	str	r6, [r0, #8]
 8025276:	6006      	str	r6, [r0, #0]
 8025278:	60c6      	str	r6, [r0, #12]
 802527a:	9b03      	ldr	r3, [sp, #12]
 802527c:	69db      	ldr	r3, [r3, #28]
 802527e:	6819      	ldr	r1, [r3, #0]
 8025280:	2900      	cmp	r1, #0
 8025282:	d00b      	beq.n	802529c <_dtoa_r+0x58>
 8025284:	685a      	ldr	r2, [r3, #4]
 8025286:	2301      	movs	r3, #1
 8025288:	4093      	lsls	r3, r2
 802528a:	604a      	str	r2, [r1, #4]
 802528c:	608b      	str	r3, [r1, #8]
 802528e:	9803      	ldr	r0, [sp, #12]
 8025290:	f001 fa82 	bl	8026798 <_Bfree>
 8025294:	2200      	movs	r2, #0
 8025296:	9b03      	ldr	r3, [sp, #12]
 8025298:	69db      	ldr	r3, [r3, #28]
 802529a:	601a      	str	r2, [r3, #0]
 802529c:	2d00      	cmp	r5, #0
 802529e:	da1e      	bge.n	80252de <_dtoa_r+0x9a>
 80252a0:	2301      	movs	r3, #1
 80252a2:	603b      	str	r3, [r7, #0]
 80252a4:	006b      	lsls	r3, r5, #1
 80252a6:	085b      	lsrs	r3, r3, #1
 80252a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80252aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80252ac:	4bb8      	ldr	r3, [pc, #736]	@ (8025590 <_dtoa_r+0x34c>)
 80252ae:	4ab8      	ldr	r2, [pc, #736]	@ (8025590 <_dtoa_r+0x34c>)
 80252b0:	403b      	ands	r3, r7
 80252b2:	4293      	cmp	r3, r2
 80252b4:	d116      	bne.n	80252e4 <_dtoa_r+0xa0>
 80252b6:	4bb7      	ldr	r3, [pc, #732]	@ (8025594 <_dtoa_r+0x350>)
 80252b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80252ba:	6013      	str	r3, [r2, #0]
 80252bc:	033b      	lsls	r3, r7, #12
 80252be:	0b1b      	lsrs	r3, r3, #12
 80252c0:	4323      	orrs	r3, r4
 80252c2:	d101      	bne.n	80252c8 <_dtoa_r+0x84>
 80252c4:	f000 fd83 	bl	8025dce <_dtoa_r+0xb8a>
 80252c8:	4bb3      	ldr	r3, [pc, #716]	@ (8025598 <_dtoa_r+0x354>)
 80252ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80252cc:	9308      	str	r3, [sp, #32]
 80252ce:	2a00      	cmp	r2, #0
 80252d0:	d002      	beq.n	80252d8 <_dtoa_r+0x94>
 80252d2:	4bb2      	ldr	r3, [pc, #712]	@ (802559c <_dtoa_r+0x358>)
 80252d4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80252d6:	6013      	str	r3, [r2, #0]
 80252d8:	9808      	ldr	r0, [sp, #32]
 80252da:	b01d      	add	sp, #116	@ 0x74
 80252dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252de:	2300      	movs	r3, #0
 80252e0:	603b      	str	r3, [r7, #0]
 80252e2:	e7e2      	b.n	80252aa <_dtoa_r+0x66>
 80252e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80252e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80252e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80252ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80252ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80252ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80252f0:	2200      	movs	r2, #0
 80252f2:	2300      	movs	r3, #0
 80252f4:	f7db f8dc 	bl	80004b0 <__aeabi_dcmpeq>
 80252f8:	1e06      	subs	r6, r0, #0
 80252fa:	d00b      	beq.n	8025314 <_dtoa_r+0xd0>
 80252fc:	2301      	movs	r3, #1
 80252fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025300:	6013      	str	r3, [r2, #0]
 8025302:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025304:	2b00      	cmp	r3, #0
 8025306:	d002      	beq.n	802530e <_dtoa_r+0xca>
 8025308:	4ba5      	ldr	r3, [pc, #660]	@ (80255a0 <_dtoa_r+0x35c>)
 802530a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802530c:	6013      	str	r3, [r2, #0]
 802530e:	4ba5      	ldr	r3, [pc, #660]	@ (80255a4 <_dtoa_r+0x360>)
 8025310:	9308      	str	r3, [sp, #32]
 8025312:	e7e1      	b.n	80252d8 <_dtoa_r+0x94>
 8025314:	ab1a      	add	r3, sp, #104	@ 0x68
 8025316:	9301      	str	r3, [sp, #4]
 8025318:	ab1b      	add	r3, sp, #108	@ 0x6c
 802531a:	9300      	str	r3, [sp, #0]
 802531c:	9803      	ldr	r0, [sp, #12]
 802531e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025320:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025322:	f001 fdf1 	bl	8026f08 <__d2b>
 8025326:	007a      	lsls	r2, r7, #1
 8025328:	9005      	str	r0, [sp, #20]
 802532a:	0d52      	lsrs	r2, r2, #21
 802532c:	d100      	bne.n	8025330 <_dtoa_r+0xec>
 802532e:	e07b      	b.n	8025428 <_dtoa_r+0x1e4>
 8025330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025332:	9618      	str	r6, [sp, #96]	@ 0x60
 8025334:	0319      	lsls	r1, r3, #12
 8025336:	4b9c      	ldr	r3, [pc, #624]	@ (80255a8 <_dtoa_r+0x364>)
 8025338:	0b09      	lsrs	r1, r1, #12
 802533a:	430b      	orrs	r3, r1
 802533c:	499b      	ldr	r1, [pc, #620]	@ (80255ac <_dtoa_r+0x368>)
 802533e:	1857      	adds	r7, r2, r1
 8025340:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025342:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025344:	0019      	movs	r1, r3
 8025346:	2200      	movs	r2, #0
 8025348:	4b99      	ldr	r3, [pc, #612]	@ (80255b0 <_dtoa_r+0x36c>)
 802534a:	f7dd fc3f 	bl	8002bcc <__aeabi_dsub>
 802534e:	4a99      	ldr	r2, [pc, #612]	@ (80255b4 <_dtoa_r+0x370>)
 8025350:	4b99      	ldr	r3, [pc, #612]	@ (80255b8 <_dtoa_r+0x374>)
 8025352:	f7dd f973 	bl	800263c <__aeabi_dmul>
 8025356:	4a99      	ldr	r2, [pc, #612]	@ (80255bc <_dtoa_r+0x378>)
 8025358:	4b99      	ldr	r3, [pc, #612]	@ (80255c0 <_dtoa_r+0x37c>)
 802535a:	f7dc f9c7 	bl	80016ec <__aeabi_dadd>
 802535e:	0004      	movs	r4, r0
 8025360:	0038      	movs	r0, r7
 8025362:	000d      	movs	r5, r1
 8025364:	f7de f82c 	bl	80033c0 <__aeabi_i2d>
 8025368:	4a96      	ldr	r2, [pc, #600]	@ (80255c4 <_dtoa_r+0x380>)
 802536a:	4b97      	ldr	r3, [pc, #604]	@ (80255c8 <_dtoa_r+0x384>)
 802536c:	f7dd f966 	bl	800263c <__aeabi_dmul>
 8025370:	0002      	movs	r2, r0
 8025372:	000b      	movs	r3, r1
 8025374:	0020      	movs	r0, r4
 8025376:	0029      	movs	r1, r5
 8025378:	f7dc f9b8 	bl	80016ec <__aeabi_dadd>
 802537c:	0004      	movs	r4, r0
 802537e:	000d      	movs	r5, r1
 8025380:	f7dd ffe2 	bl	8003348 <__aeabi_d2iz>
 8025384:	2200      	movs	r2, #0
 8025386:	9004      	str	r0, [sp, #16]
 8025388:	2300      	movs	r3, #0
 802538a:	0020      	movs	r0, r4
 802538c:	0029      	movs	r1, r5
 802538e:	f7db f895 	bl	80004bc <__aeabi_dcmplt>
 8025392:	2800      	cmp	r0, #0
 8025394:	d00b      	beq.n	80253ae <_dtoa_r+0x16a>
 8025396:	9804      	ldr	r0, [sp, #16]
 8025398:	f7de f812 	bl	80033c0 <__aeabi_i2d>
 802539c:	002b      	movs	r3, r5
 802539e:	0022      	movs	r2, r4
 80253a0:	f7db f886 	bl	80004b0 <__aeabi_dcmpeq>
 80253a4:	4243      	negs	r3, r0
 80253a6:	4158      	adcs	r0, r3
 80253a8:	9b04      	ldr	r3, [sp, #16]
 80253aa:	1a1b      	subs	r3, r3, r0
 80253ac:	9304      	str	r3, [sp, #16]
 80253ae:	2301      	movs	r3, #1
 80253b0:	9315      	str	r3, [sp, #84]	@ 0x54
 80253b2:	9b04      	ldr	r3, [sp, #16]
 80253b4:	2b16      	cmp	r3, #22
 80253b6:	d810      	bhi.n	80253da <_dtoa_r+0x196>
 80253b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80253ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80253bc:	9a04      	ldr	r2, [sp, #16]
 80253be:	4b83      	ldr	r3, [pc, #524]	@ (80255cc <_dtoa_r+0x388>)
 80253c0:	00d2      	lsls	r2, r2, #3
 80253c2:	189b      	adds	r3, r3, r2
 80253c4:	681a      	ldr	r2, [r3, #0]
 80253c6:	685b      	ldr	r3, [r3, #4]
 80253c8:	f7db f878 	bl	80004bc <__aeabi_dcmplt>
 80253cc:	2800      	cmp	r0, #0
 80253ce:	d047      	beq.n	8025460 <_dtoa_r+0x21c>
 80253d0:	9b04      	ldr	r3, [sp, #16]
 80253d2:	3b01      	subs	r3, #1
 80253d4:	9304      	str	r3, [sp, #16]
 80253d6:	2300      	movs	r3, #0
 80253d8:	9315      	str	r3, [sp, #84]	@ 0x54
 80253da:	2200      	movs	r2, #0
 80253dc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80253de:	9206      	str	r2, [sp, #24]
 80253e0:	1bdb      	subs	r3, r3, r7
 80253e2:	1e5a      	subs	r2, r3, #1
 80253e4:	d53e      	bpl.n	8025464 <_dtoa_r+0x220>
 80253e6:	2201      	movs	r2, #1
 80253e8:	1ad3      	subs	r3, r2, r3
 80253ea:	9306      	str	r3, [sp, #24]
 80253ec:	2300      	movs	r3, #0
 80253ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80253f0:	9b04      	ldr	r3, [sp, #16]
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	db38      	blt.n	8025468 <_dtoa_r+0x224>
 80253f6:	9a04      	ldr	r2, [sp, #16]
 80253f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80253fa:	4694      	mov	ip, r2
 80253fc:	4463      	add	r3, ip
 80253fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8025400:	2300      	movs	r3, #0
 8025402:	9214      	str	r2, [sp, #80]	@ 0x50
 8025404:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025406:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025408:	2401      	movs	r4, #1
 802540a:	2b09      	cmp	r3, #9
 802540c:	d867      	bhi.n	80254de <_dtoa_r+0x29a>
 802540e:	2b05      	cmp	r3, #5
 8025410:	dd02      	ble.n	8025418 <_dtoa_r+0x1d4>
 8025412:	2400      	movs	r4, #0
 8025414:	3b04      	subs	r3, #4
 8025416:	9322      	str	r3, [sp, #136]	@ 0x88
 8025418:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802541a:	1e98      	subs	r0, r3, #2
 802541c:	2803      	cmp	r0, #3
 802541e:	d867      	bhi.n	80254f0 <_dtoa_r+0x2ac>
 8025420:	f7da feac 	bl	800017c <__gnu_thumb1_case_uqi>
 8025424:	5b383a2b 	.word	0x5b383a2b
 8025428:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802542a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802542c:	18f6      	adds	r6, r6, r3
 802542e:	4b68      	ldr	r3, [pc, #416]	@ (80255d0 <_dtoa_r+0x38c>)
 8025430:	18f2      	adds	r2, r6, r3
 8025432:	2a20      	cmp	r2, #32
 8025434:	dd0f      	ble.n	8025456 <_dtoa_r+0x212>
 8025436:	2340      	movs	r3, #64	@ 0x40
 8025438:	1a9b      	subs	r3, r3, r2
 802543a:	409f      	lsls	r7, r3
 802543c:	4b65      	ldr	r3, [pc, #404]	@ (80255d4 <_dtoa_r+0x390>)
 802543e:	0038      	movs	r0, r7
 8025440:	18f3      	adds	r3, r6, r3
 8025442:	40dc      	lsrs	r4, r3
 8025444:	4320      	orrs	r0, r4
 8025446:	f7dd ffe9 	bl	800341c <__aeabi_ui2d>
 802544a:	2201      	movs	r2, #1
 802544c:	4b62      	ldr	r3, [pc, #392]	@ (80255d8 <_dtoa_r+0x394>)
 802544e:	1e77      	subs	r7, r6, #1
 8025450:	18cb      	adds	r3, r1, r3
 8025452:	9218      	str	r2, [sp, #96]	@ 0x60
 8025454:	e776      	b.n	8025344 <_dtoa_r+0x100>
 8025456:	2320      	movs	r3, #32
 8025458:	0020      	movs	r0, r4
 802545a:	1a9b      	subs	r3, r3, r2
 802545c:	4098      	lsls	r0, r3
 802545e:	e7f2      	b.n	8025446 <_dtoa_r+0x202>
 8025460:	9015      	str	r0, [sp, #84]	@ 0x54
 8025462:	e7ba      	b.n	80253da <_dtoa_r+0x196>
 8025464:	920d      	str	r2, [sp, #52]	@ 0x34
 8025466:	e7c3      	b.n	80253f0 <_dtoa_r+0x1ac>
 8025468:	9b06      	ldr	r3, [sp, #24]
 802546a:	9a04      	ldr	r2, [sp, #16]
 802546c:	1a9b      	subs	r3, r3, r2
 802546e:	9306      	str	r3, [sp, #24]
 8025470:	4253      	negs	r3, r2
 8025472:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025474:	2300      	movs	r3, #0
 8025476:	9314      	str	r3, [sp, #80]	@ 0x50
 8025478:	e7c5      	b.n	8025406 <_dtoa_r+0x1c2>
 802547a:	2300      	movs	r3, #0
 802547c:	9310      	str	r3, [sp, #64]	@ 0x40
 802547e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025480:	930e      	str	r3, [sp, #56]	@ 0x38
 8025482:	9309      	str	r3, [sp, #36]	@ 0x24
 8025484:	2b00      	cmp	r3, #0
 8025486:	dc13      	bgt.n	80254b0 <_dtoa_r+0x26c>
 8025488:	2301      	movs	r3, #1
 802548a:	001a      	movs	r2, r3
 802548c:	930e      	str	r3, [sp, #56]	@ 0x38
 802548e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025490:	9223      	str	r2, [sp, #140]	@ 0x8c
 8025492:	e00d      	b.n	80254b0 <_dtoa_r+0x26c>
 8025494:	2301      	movs	r3, #1
 8025496:	e7f1      	b.n	802547c <_dtoa_r+0x238>
 8025498:	2300      	movs	r3, #0
 802549a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802549c:	9310      	str	r3, [sp, #64]	@ 0x40
 802549e:	4694      	mov	ip, r2
 80254a0:	9b04      	ldr	r3, [sp, #16]
 80254a2:	4463      	add	r3, ip
 80254a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80254a6:	3301      	adds	r3, #1
 80254a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80254aa:	2b00      	cmp	r3, #0
 80254ac:	dc00      	bgt.n	80254b0 <_dtoa_r+0x26c>
 80254ae:	2301      	movs	r3, #1
 80254b0:	9a03      	ldr	r2, [sp, #12]
 80254b2:	2100      	movs	r1, #0
 80254b4:	69d0      	ldr	r0, [r2, #28]
 80254b6:	2204      	movs	r2, #4
 80254b8:	0015      	movs	r5, r2
 80254ba:	3514      	adds	r5, #20
 80254bc:	429d      	cmp	r5, r3
 80254be:	d91b      	bls.n	80254f8 <_dtoa_r+0x2b4>
 80254c0:	6041      	str	r1, [r0, #4]
 80254c2:	9803      	ldr	r0, [sp, #12]
 80254c4:	f001 f924 	bl	8026710 <_Balloc>
 80254c8:	9008      	str	r0, [sp, #32]
 80254ca:	2800      	cmp	r0, #0
 80254cc:	d117      	bne.n	80254fe <_dtoa_r+0x2ba>
 80254ce:	21b0      	movs	r1, #176	@ 0xb0
 80254d0:	4b42      	ldr	r3, [pc, #264]	@ (80255dc <_dtoa_r+0x398>)
 80254d2:	482e      	ldr	r0, [pc, #184]	@ (802558c <_dtoa_r+0x348>)
 80254d4:	9a08      	ldr	r2, [sp, #32]
 80254d6:	31ff      	adds	r1, #255	@ 0xff
 80254d8:	e6c9      	b.n	802526e <_dtoa_r+0x2a>
 80254da:	2301      	movs	r3, #1
 80254dc:	e7dd      	b.n	802549a <_dtoa_r+0x256>
 80254de:	2300      	movs	r3, #0
 80254e0:	9410      	str	r4, [sp, #64]	@ 0x40
 80254e2:	9322      	str	r3, [sp, #136]	@ 0x88
 80254e4:	3b01      	subs	r3, #1
 80254e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80254e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80254ea:	2200      	movs	r2, #0
 80254ec:	3313      	adds	r3, #19
 80254ee:	e7cf      	b.n	8025490 <_dtoa_r+0x24c>
 80254f0:	2301      	movs	r3, #1
 80254f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80254f4:	3b02      	subs	r3, #2
 80254f6:	e7f6      	b.n	80254e6 <_dtoa_r+0x2a2>
 80254f8:	3101      	adds	r1, #1
 80254fa:	0052      	lsls	r2, r2, #1
 80254fc:	e7dc      	b.n	80254b8 <_dtoa_r+0x274>
 80254fe:	9b03      	ldr	r3, [sp, #12]
 8025500:	9a08      	ldr	r2, [sp, #32]
 8025502:	69db      	ldr	r3, [r3, #28]
 8025504:	601a      	str	r2, [r3, #0]
 8025506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025508:	2b0e      	cmp	r3, #14
 802550a:	d900      	bls.n	802550e <_dtoa_r+0x2ca>
 802550c:	e0d9      	b.n	80256c2 <_dtoa_r+0x47e>
 802550e:	2c00      	cmp	r4, #0
 8025510:	d100      	bne.n	8025514 <_dtoa_r+0x2d0>
 8025512:	e0d6      	b.n	80256c2 <_dtoa_r+0x47e>
 8025514:	9b04      	ldr	r3, [sp, #16]
 8025516:	2b00      	cmp	r3, #0
 8025518:	dd64      	ble.n	80255e4 <_dtoa_r+0x3a0>
 802551a:	210f      	movs	r1, #15
 802551c:	9a04      	ldr	r2, [sp, #16]
 802551e:	4b2b      	ldr	r3, [pc, #172]	@ (80255cc <_dtoa_r+0x388>)
 8025520:	400a      	ands	r2, r1
 8025522:	00d2      	lsls	r2, r2, #3
 8025524:	189b      	adds	r3, r3, r2
 8025526:	681e      	ldr	r6, [r3, #0]
 8025528:	685f      	ldr	r7, [r3, #4]
 802552a:	9b04      	ldr	r3, [sp, #16]
 802552c:	2402      	movs	r4, #2
 802552e:	111d      	asrs	r5, r3, #4
 8025530:	05db      	lsls	r3, r3, #23
 8025532:	d50a      	bpl.n	802554a <_dtoa_r+0x306>
 8025534:	4b2a      	ldr	r3, [pc, #168]	@ (80255e0 <_dtoa_r+0x39c>)
 8025536:	400d      	ands	r5, r1
 8025538:	6a1a      	ldr	r2, [r3, #32]
 802553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802553c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802553e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025540:	f7dc fc38 	bl	8001db4 <__aeabi_ddiv>
 8025544:	900a      	str	r0, [sp, #40]	@ 0x28
 8025546:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025548:	3401      	adds	r4, #1
 802554a:	4b25      	ldr	r3, [pc, #148]	@ (80255e0 <_dtoa_r+0x39c>)
 802554c:	930c      	str	r3, [sp, #48]	@ 0x30
 802554e:	2d00      	cmp	r5, #0
 8025550:	d108      	bne.n	8025564 <_dtoa_r+0x320>
 8025552:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025556:	0032      	movs	r2, r6
 8025558:	003b      	movs	r3, r7
 802555a:	f7dc fc2b 	bl	8001db4 <__aeabi_ddiv>
 802555e:	900a      	str	r0, [sp, #40]	@ 0x28
 8025560:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025562:	e05a      	b.n	802561a <_dtoa_r+0x3d6>
 8025564:	2301      	movs	r3, #1
 8025566:	421d      	tst	r5, r3
 8025568:	d009      	beq.n	802557e <_dtoa_r+0x33a>
 802556a:	18e4      	adds	r4, r4, r3
 802556c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802556e:	0030      	movs	r0, r6
 8025570:	681a      	ldr	r2, [r3, #0]
 8025572:	685b      	ldr	r3, [r3, #4]
 8025574:	0039      	movs	r1, r7
 8025576:	f7dd f861 	bl	800263c <__aeabi_dmul>
 802557a:	0006      	movs	r6, r0
 802557c:	000f      	movs	r7, r1
 802557e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025580:	106d      	asrs	r5, r5, #1
 8025582:	3308      	adds	r3, #8
 8025584:	e7e2      	b.n	802554c <_dtoa_r+0x308>
 8025586:	46c0      	nop			@ (mov r8, r8)
 8025588:	0802da5a 	.word	0x0802da5a
 802558c:	0802da71 	.word	0x0802da71
 8025590:	7ff00000 	.word	0x7ff00000
 8025594:	0000270f 	.word	0x0000270f
 8025598:	0802da56 	.word	0x0802da56
 802559c:	0802da59 	.word	0x0802da59
 80255a0:	0802da22 	.word	0x0802da22
 80255a4:	0802da21 	.word	0x0802da21
 80255a8:	3ff00000 	.word	0x3ff00000
 80255ac:	fffffc01 	.word	0xfffffc01
 80255b0:	3ff80000 	.word	0x3ff80000
 80255b4:	636f4361 	.word	0x636f4361
 80255b8:	3fd287a7 	.word	0x3fd287a7
 80255bc:	8b60c8b3 	.word	0x8b60c8b3
 80255c0:	3fc68a28 	.word	0x3fc68a28
 80255c4:	509f79fb 	.word	0x509f79fb
 80255c8:	3fd34413 	.word	0x3fd34413
 80255cc:	0802dbc8 	.word	0x0802dbc8
 80255d0:	00000432 	.word	0x00000432
 80255d4:	00000412 	.word	0x00000412
 80255d8:	fe100000 	.word	0xfe100000
 80255dc:	0802dac9 	.word	0x0802dac9
 80255e0:	0802dba0 	.word	0x0802dba0
 80255e4:	9b04      	ldr	r3, [sp, #16]
 80255e6:	2402      	movs	r4, #2
 80255e8:	2b00      	cmp	r3, #0
 80255ea:	d016      	beq.n	802561a <_dtoa_r+0x3d6>
 80255ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80255ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80255f0:	220f      	movs	r2, #15
 80255f2:	425d      	negs	r5, r3
 80255f4:	402a      	ands	r2, r5
 80255f6:	4bd7      	ldr	r3, [pc, #860]	@ (8025954 <_dtoa_r+0x710>)
 80255f8:	00d2      	lsls	r2, r2, #3
 80255fa:	189b      	adds	r3, r3, r2
 80255fc:	681a      	ldr	r2, [r3, #0]
 80255fe:	685b      	ldr	r3, [r3, #4]
 8025600:	f7dd f81c 	bl	800263c <__aeabi_dmul>
 8025604:	2701      	movs	r7, #1
 8025606:	2300      	movs	r3, #0
 8025608:	900a      	str	r0, [sp, #40]	@ 0x28
 802560a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802560c:	4ed2      	ldr	r6, [pc, #840]	@ (8025958 <_dtoa_r+0x714>)
 802560e:	112d      	asrs	r5, r5, #4
 8025610:	2d00      	cmp	r5, #0
 8025612:	d000      	beq.n	8025616 <_dtoa_r+0x3d2>
 8025614:	e0ba      	b.n	802578c <_dtoa_r+0x548>
 8025616:	2b00      	cmp	r3, #0
 8025618:	d1a1      	bne.n	802555e <_dtoa_r+0x31a>
 802561a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802561c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802561e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025620:	2b00      	cmp	r3, #0
 8025622:	d100      	bne.n	8025626 <_dtoa_r+0x3e2>
 8025624:	e0bd      	b.n	80257a2 <_dtoa_r+0x55e>
 8025626:	2200      	movs	r2, #0
 8025628:	0030      	movs	r0, r6
 802562a:	0039      	movs	r1, r7
 802562c:	4bcb      	ldr	r3, [pc, #812]	@ (802595c <_dtoa_r+0x718>)
 802562e:	f7da ff45 	bl	80004bc <__aeabi_dcmplt>
 8025632:	2800      	cmp	r0, #0
 8025634:	d100      	bne.n	8025638 <_dtoa_r+0x3f4>
 8025636:	e0b4      	b.n	80257a2 <_dtoa_r+0x55e>
 8025638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802563a:	2b00      	cmp	r3, #0
 802563c:	d100      	bne.n	8025640 <_dtoa_r+0x3fc>
 802563e:	e0b0      	b.n	80257a2 <_dtoa_r+0x55e>
 8025640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025642:	2b00      	cmp	r3, #0
 8025644:	dd39      	ble.n	80256ba <_dtoa_r+0x476>
 8025646:	9b04      	ldr	r3, [sp, #16]
 8025648:	2200      	movs	r2, #0
 802564a:	3b01      	subs	r3, #1
 802564c:	930c      	str	r3, [sp, #48]	@ 0x30
 802564e:	0030      	movs	r0, r6
 8025650:	4bc3      	ldr	r3, [pc, #780]	@ (8025960 <_dtoa_r+0x71c>)
 8025652:	0039      	movs	r1, r7
 8025654:	f7dc fff2 	bl	800263c <__aeabi_dmul>
 8025658:	900a      	str	r0, [sp, #40]	@ 0x28
 802565a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802565c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802565e:	3401      	adds	r4, #1
 8025660:	0020      	movs	r0, r4
 8025662:	9311      	str	r3, [sp, #68]	@ 0x44
 8025664:	f7dd feac 	bl	80033c0 <__aeabi_i2d>
 8025668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802566a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802566c:	f7dc ffe6 	bl	800263c <__aeabi_dmul>
 8025670:	4bbc      	ldr	r3, [pc, #752]	@ (8025964 <_dtoa_r+0x720>)
 8025672:	2200      	movs	r2, #0
 8025674:	f7dc f83a 	bl	80016ec <__aeabi_dadd>
 8025678:	4bbb      	ldr	r3, [pc, #748]	@ (8025968 <_dtoa_r+0x724>)
 802567a:	0006      	movs	r6, r0
 802567c:	18cf      	adds	r7, r1, r3
 802567e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025680:	2b00      	cmp	r3, #0
 8025682:	d000      	beq.n	8025686 <_dtoa_r+0x442>
 8025684:	e091      	b.n	80257aa <_dtoa_r+0x566>
 8025686:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025688:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802568a:	2200      	movs	r2, #0
 802568c:	4bb7      	ldr	r3, [pc, #732]	@ (802596c <_dtoa_r+0x728>)
 802568e:	f7dd fa9d 	bl	8002bcc <__aeabi_dsub>
 8025692:	0032      	movs	r2, r6
 8025694:	003b      	movs	r3, r7
 8025696:	0004      	movs	r4, r0
 8025698:	000d      	movs	r5, r1
 802569a:	f7da ff23 	bl	80004e4 <__aeabi_dcmpgt>
 802569e:	2800      	cmp	r0, #0
 80256a0:	d000      	beq.n	80256a4 <_dtoa_r+0x460>
 80256a2:	e29d      	b.n	8025be0 <_dtoa_r+0x99c>
 80256a4:	2180      	movs	r1, #128	@ 0x80
 80256a6:	0609      	lsls	r1, r1, #24
 80256a8:	187b      	adds	r3, r7, r1
 80256aa:	0032      	movs	r2, r6
 80256ac:	0020      	movs	r0, r4
 80256ae:	0029      	movs	r1, r5
 80256b0:	f7da ff04 	bl	80004bc <__aeabi_dcmplt>
 80256b4:	2800      	cmp	r0, #0
 80256b6:	d000      	beq.n	80256ba <_dtoa_r+0x476>
 80256b8:	e130      	b.n	802591c <_dtoa_r+0x6d8>
 80256ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80256bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80256be:	930a      	str	r3, [sp, #40]	@ 0x28
 80256c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80256c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	da00      	bge.n	80256ca <_dtoa_r+0x486>
 80256c8:	e177      	b.n	80259ba <_dtoa_r+0x776>
 80256ca:	9a04      	ldr	r2, [sp, #16]
 80256cc:	2a0e      	cmp	r2, #14
 80256ce:	dd00      	ble.n	80256d2 <_dtoa_r+0x48e>
 80256d0:	e173      	b.n	80259ba <_dtoa_r+0x776>
 80256d2:	4ba0      	ldr	r3, [pc, #640]	@ (8025954 <_dtoa_r+0x710>)
 80256d4:	00d2      	lsls	r2, r2, #3
 80256d6:	189b      	adds	r3, r3, r2
 80256d8:	685c      	ldr	r4, [r3, #4]
 80256da:	681b      	ldr	r3, [r3, #0]
 80256dc:	9306      	str	r3, [sp, #24]
 80256de:	9407      	str	r4, [sp, #28]
 80256e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	da03      	bge.n	80256ee <_dtoa_r+0x4aa>
 80256e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	dc00      	bgt.n	80256ee <_dtoa_r+0x4aa>
 80256ec:	e106      	b.n	80258fc <_dtoa_r+0x6b8>
 80256ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80256f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80256f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256f4:	9d08      	ldr	r5, [sp, #32]
 80256f6:	3b01      	subs	r3, #1
 80256f8:	195b      	adds	r3, r3, r5
 80256fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80256fc:	9a06      	ldr	r2, [sp, #24]
 80256fe:	9b07      	ldr	r3, [sp, #28]
 8025700:	0030      	movs	r0, r6
 8025702:	0039      	movs	r1, r7
 8025704:	f7dc fb56 	bl	8001db4 <__aeabi_ddiv>
 8025708:	f7dd fe1e 	bl	8003348 <__aeabi_d2iz>
 802570c:	9009      	str	r0, [sp, #36]	@ 0x24
 802570e:	f7dd fe57 	bl	80033c0 <__aeabi_i2d>
 8025712:	9a06      	ldr	r2, [sp, #24]
 8025714:	9b07      	ldr	r3, [sp, #28]
 8025716:	f7dc ff91 	bl	800263c <__aeabi_dmul>
 802571a:	0002      	movs	r2, r0
 802571c:	000b      	movs	r3, r1
 802571e:	0030      	movs	r0, r6
 8025720:	0039      	movs	r1, r7
 8025722:	f7dd fa53 	bl	8002bcc <__aeabi_dsub>
 8025726:	002b      	movs	r3, r5
 8025728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802572a:	3501      	adds	r5, #1
 802572c:	3230      	adds	r2, #48	@ 0x30
 802572e:	701a      	strb	r2, [r3, #0]
 8025730:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025732:	002c      	movs	r4, r5
 8025734:	429a      	cmp	r2, r3
 8025736:	d000      	beq.n	802573a <_dtoa_r+0x4f6>
 8025738:	e131      	b.n	802599e <_dtoa_r+0x75a>
 802573a:	0002      	movs	r2, r0
 802573c:	000b      	movs	r3, r1
 802573e:	f7db ffd5 	bl	80016ec <__aeabi_dadd>
 8025742:	9a06      	ldr	r2, [sp, #24]
 8025744:	9b07      	ldr	r3, [sp, #28]
 8025746:	0006      	movs	r6, r0
 8025748:	000f      	movs	r7, r1
 802574a:	f7da fecb 	bl	80004e4 <__aeabi_dcmpgt>
 802574e:	2800      	cmp	r0, #0
 8025750:	d000      	beq.n	8025754 <_dtoa_r+0x510>
 8025752:	e10f      	b.n	8025974 <_dtoa_r+0x730>
 8025754:	9a06      	ldr	r2, [sp, #24]
 8025756:	9b07      	ldr	r3, [sp, #28]
 8025758:	0030      	movs	r0, r6
 802575a:	0039      	movs	r1, r7
 802575c:	f7da fea8 	bl	80004b0 <__aeabi_dcmpeq>
 8025760:	2800      	cmp	r0, #0
 8025762:	d003      	beq.n	802576c <_dtoa_r+0x528>
 8025764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025766:	07dd      	lsls	r5, r3, #31
 8025768:	d500      	bpl.n	802576c <_dtoa_r+0x528>
 802576a:	e103      	b.n	8025974 <_dtoa_r+0x730>
 802576c:	9905      	ldr	r1, [sp, #20]
 802576e:	9803      	ldr	r0, [sp, #12]
 8025770:	f001 f812 	bl	8026798 <_Bfree>
 8025774:	2300      	movs	r3, #0
 8025776:	7023      	strb	r3, [r4, #0]
 8025778:	9b04      	ldr	r3, [sp, #16]
 802577a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802577c:	3301      	adds	r3, #1
 802577e:	6013      	str	r3, [r2, #0]
 8025780:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025782:	2b00      	cmp	r3, #0
 8025784:	d100      	bne.n	8025788 <_dtoa_r+0x544>
 8025786:	e5a7      	b.n	80252d8 <_dtoa_r+0x94>
 8025788:	601c      	str	r4, [r3, #0]
 802578a:	e5a5      	b.n	80252d8 <_dtoa_r+0x94>
 802578c:	423d      	tst	r5, r7
 802578e:	d005      	beq.n	802579c <_dtoa_r+0x558>
 8025790:	6832      	ldr	r2, [r6, #0]
 8025792:	6873      	ldr	r3, [r6, #4]
 8025794:	f7dc ff52 	bl	800263c <__aeabi_dmul>
 8025798:	003b      	movs	r3, r7
 802579a:	3401      	adds	r4, #1
 802579c:	106d      	asrs	r5, r5, #1
 802579e:	3608      	adds	r6, #8
 80257a0:	e736      	b.n	8025610 <_dtoa_r+0x3cc>
 80257a2:	9b04      	ldr	r3, [sp, #16]
 80257a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80257a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257a8:	e75a      	b.n	8025660 <_dtoa_r+0x41c>
 80257aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80257ac:	4b69      	ldr	r3, [pc, #420]	@ (8025954 <_dtoa_r+0x710>)
 80257ae:	3a01      	subs	r2, #1
 80257b0:	00d2      	lsls	r2, r2, #3
 80257b2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80257b4:	189b      	adds	r3, r3, r2
 80257b6:	681a      	ldr	r2, [r3, #0]
 80257b8:	685b      	ldr	r3, [r3, #4]
 80257ba:	2900      	cmp	r1, #0
 80257bc:	d04c      	beq.n	8025858 <_dtoa_r+0x614>
 80257be:	2000      	movs	r0, #0
 80257c0:	496b      	ldr	r1, [pc, #428]	@ (8025970 <_dtoa_r+0x72c>)
 80257c2:	f7dc faf7 	bl	8001db4 <__aeabi_ddiv>
 80257c6:	0032      	movs	r2, r6
 80257c8:	003b      	movs	r3, r7
 80257ca:	f7dd f9ff 	bl	8002bcc <__aeabi_dsub>
 80257ce:	9a08      	ldr	r2, [sp, #32]
 80257d0:	0006      	movs	r6, r0
 80257d2:	4694      	mov	ip, r2
 80257d4:	000f      	movs	r7, r1
 80257d6:	9b08      	ldr	r3, [sp, #32]
 80257d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80257da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80257dc:	4463      	add	r3, ip
 80257de:	9311      	str	r3, [sp, #68]	@ 0x44
 80257e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80257e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80257e4:	f7dd fdb0 	bl	8003348 <__aeabi_d2iz>
 80257e8:	0005      	movs	r5, r0
 80257ea:	f7dd fde9 	bl	80033c0 <__aeabi_i2d>
 80257ee:	0002      	movs	r2, r0
 80257f0:	000b      	movs	r3, r1
 80257f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80257f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80257f6:	f7dd f9e9 	bl	8002bcc <__aeabi_dsub>
 80257fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80257fc:	3530      	adds	r5, #48	@ 0x30
 80257fe:	1c5c      	adds	r4, r3, #1
 8025800:	701d      	strb	r5, [r3, #0]
 8025802:	0032      	movs	r2, r6
 8025804:	003b      	movs	r3, r7
 8025806:	900a      	str	r0, [sp, #40]	@ 0x28
 8025808:	910b      	str	r1, [sp, #44]	@ 0x2c
 802580a:	f7da fe57 	bl	80004bc <__aeabi_dcmplt>
 802580e:	2800      	cmp	r0, #0
 8025810:	d16a      	bne.n	80258e8 <_dtoa_r+0x6a4>
 8025812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025816:	2000      	movs	r0, #0
 8025818:	4950      	ldr	r1, [pc, #320]	@ (802595c <_dtoa_r+0x718>)
 802581a:	f7dd f9d7 	bl	8002bcc <__aeabi_dsub>
 802581e:	0032      	movs	r2, r6
 8025820:	003b      	movs	r3, r7
 8025822:	f7da fe4b 	bl	80004bc <__aeabi_dcmplt>
 8025826:	2800      	cmp	r0, #0
 8025828:	d000      	beq.n	802582c <_dtoa_r+0x5e8>
 802582a:	e0a5      	b.n	8025978 <_dtoa_r+0x734>
 802582c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802582e:	42a3      	cmp	r3, r4
 8025830:	d100      	bne.n	8025834 <_dtoa_r+0x5f0>
 8025832:	e742      	b.n	80256ba <_dtoa_r+0x476>
 8025834:	2200      	movs	r2, #0
 8025836:	0030      	movs	r0, r6
 8025838:	0039      	movs	r1, r7
 802583a:	4b49      	ldr	r3, [pc, #292]	@ (8025960 <_dtoa_r+0x71c>)
 802583c:	f7dc fefe 	bl	800263c <__aeabi_dmul>
 8025840:	2200      	movs	r2, #0
 8025842:	0006      	movs	r6, r0
 8025844:	000f      	movs	r7, r1
 8025846:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025848:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802584a:	4b45      	ldr	r3, [pc, #276]	@ (8025960 <_dtoa_r+0x71c>)
 802584c:	f7dc fef6 	bl	800263c <__aeabi_dmul>
 8025850:	9416      	str	r4, [sp, #88]	@ 0x58
 8025852:	900a      	str	r0, [sp, #40]	@ 0x28
 8025854:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025856:	e7c3      	b.n	80257e0 <_dtoa_r+0x59c>
 8025858:	0030      	movs	r0, r6
 802585a:	0039      	movs	r1, r7
 802585c:	f7dc feee 	bl	800263c <__aeabi_dmul>
 8025860:	9d08      	ldr	r5, [sp, #32]
 8025862:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025864:	002b      	movs	r3, r5
 8025866:	4694      	mov	ip, r2
 8025868:	9016      	str	r0, [sp, #88]	@ 0x58
 802586a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802586c:	4463      	add	r3, ip
 802586e:	9319      	str	r3, [sp, #100]	@ 0x64
 8025870:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025872:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025874:	f7dd fd68 	bl	8003348 <__aeabi_d2iz>
 8025878:	0004      	movs	r4, r0
 802587a:	f7dd fda1 	bl	80033c0 <__aeabi_i2d>
 802587e:	000b      	movs	r3, r1
 8025880:	0002      	movs	r2, r0
 8025882:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025884:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025886:	f7dd f9a1 	bl	8002bcc <__aeabi_dsub>
 802588a:	3430      	adds	r4, #48	@ 0x30
 802588c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802588e:	702c      	strb	r4, [r5, #0]
 8025890:	3501      	adds	r5, #1
 8025892:	0006      	movs	r6, r0
 8025894:	000f      	movs	r7, r1
 8025896:	42ab      	cmp	r3, r5
 8025898:	d129      	bne.n	80258ee <_dtoa_r+0x6aa>
 802589a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802589c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802589e:	9b08      	ldr	r3, [sp, #32]
 80258a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80258a2:	469c      	mov	ip, r3
 80258a4:	2200      	movs	r2, #0
 80258a6:	4b32      	ldr	r3, [pc, #200]	@ (8025970 <_dtoa_r+0x72c>)
 80258a8:	4464      	add	r4, ip
 80258aa:	f7db ff1f 	bl	80016ec <__aeabi_dadd>
 80258ae:	0002      	movs	r2, r0
 80258b0:	000b      	movs	r3, r1
 80258b2:	0030      	movs	r0, r6
 80258b4:	0039      	movs	r1, r7
 80258b6:	f7da fe15 	bl	80004e4 <__aeabi_dcmpgt>
 80258ba:	2800      	cmp	r0, #0
 80258bc:	d15c      	bne.n	8025978 <_dtoa_r+0x734>
 80258be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80258c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80258c2:	2000      	movs	r0, #0
 80258c4:	492a      	ldr	r1, [pc, #168]	@ (8025970 <_dtoa_r+0x72c>)
 80258c6:	f7dd f981 	bl	8002bcc <__aeabi_dsub>
 80258ca:	0002      	movs	r2, r0
 80258cc:	000b      	movs	r3, r1
 80258ce:	0030      	movs	r0, r6
 80258d0:	0039      	movs	r1, r7
 80258d2:	f7da fdf3 	bl	80004bc <__aeabi_dcmplt>
 80258d6:	2800      	cmp	r0, #0
 80258d8:	d100      	bne.n	80258dc <_dtoa_r+0x698>
 80258da:	e6ee      	b.n	80256ba <_dtoa_r+0x476>
 80258dc:	0023      	movs	r3, r4
 80258de:	3c01      	subs	r4, #1
 80258e0:	7822      	ldrb	r2, [r4, #0]
 80258e2:	2a30      	cmp	r2, #48	@ 0x30
 80258e4:	d0fa      	beq.n	80258dc <_dtoa_r+0x698>
 80258e6:	001c      	movs	r4, r3
 80258e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80258ea:	9304      	str	r3, [sp, #16]
 80258ec:	e73e      	b.n	802576c <_dtoa_r+0x528>
 80258ee:	2200      	movs	r2, #0
 80258f0:	4b1b      	ldr	r3, [pc, #108]	@ (8025960 <_dtoa_r+0x71c>)
 80258f2:	f7dc fea3 	bl	800263c <__aeabi_dmul>
 80258f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80258f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80258fa:	e7b9      	b.n	8025870 <_dtoa_r+0x62c>
 80258fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258fe:	2b00      	cmp	r3, #0
 8025900:	d10c      	bne.n	802591c <_dtoa_r+0x6d8>
 8025902:	9806      	ldr	r0, [sp, #24]
 8025904:	9907      	ldr	r1, [sp, #28]
 8025906:	2200      	movs	r2, #0
 8025908:	4b18      	ldr	r3, [pc, #96]	@ (802596c <_dtoa_r+0x728>)
 802590a:	f7dc fe97 	bl	800263c <__aeabi_dmul>
 802590e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025910:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025912:	f7da fdf1 	bl	80004f8 <__aeabi_dcmpge>
 8025916:	2800      	cmp	r0, #0
 8025918:	d100      	bne.n	802591c <_dtoa_r+0x6d8>
 802591a:	e164      	b.n	8025be6 <_dtoa_r+0x9a2>
 802591c:	2600      	movs	r6, #0
 802591e:	0037      	movs	r7, r6
 8025920:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025922:	9c08      	ldr	r4, [sp, #32]
 8025924:	43db      	mvns	r3, r3
 8025926:	930c      	str	r3, [sp, #48]	@ 0x30
 8025928:	2300      	movs	r3, #0
 802592a:	9304      	str	r3, [sp, #16]
 802592c:	0031      	movs	r1, r6
 802592e:	9803      	ldr	r0, [sp, #12]
 8025930:	f000 ff32 	bl	8026798 <_Bfree>
 8025934:	2f00      	cmp	r7, #0
 8025936:	d0d7      	beq.n	80258e8 <_dtoa_r+0x6a4>
 8025938:	9b04      	ldr	r3, [sp, #16]
 802593a:	2b00      	cmp	r3, #0
 802593c:	d005      	beq.n	802594a <_dtoa_r+0x706>
 802593e:	42bb      	cmp	r3, r7
 8025940:	d003      	beq.n	802594a <_dtoa_r+0x706>
 8025942:	0019      	movs	r1, r3
 8025944:	9803      	ldr	r0, [sp, #12]
 8025946:	f000 ff27 	bl	8026798 <_Bfree>
 802594a:	0039      	movs	r1, r7
 802594c:	9803      	ldr	r0, [sp, #12]
 802594e:	f000 ff23 	bl	8026798 <_Bfree>
 8025952:	e7c9      	b.n	80258e8 <_dtoa_r+0x6a4>
 8025954:	0802dbc8 	.word	0x0802dbc8
 8025958:	0802dba0 	.word	0x0802dba0
 802595c:	3ff00000 	.word	0x3ff00000
 8025960:	40240000 	.word	0x40240000
 8025964:	401c0000 	.word	0x401c0000
 8025968:	fcc00000 	.word	0xfcc00000
 802596c:	40140000 	.word	0x40140000
 8025970:	3fe00000 	.word	0x3fe00000
 8025974:	9b04      	ldr	r3, [sp, #16]
 8025976:	930c      	str	r3, [sp, #48]	@ 0x30
 8025978:	0023      	movs	r3, r4
 802597a:	001c      	movs	r4, r3
 802597c:	3b01      	subs	r3, #1
 802597e:	781a      	ldrb	r2, [r3, #0]
 8025980:	2a39      	cmp	r2, #57	@ 0x39
 8025982:	d108      	bne.n	8025996 <_dtoa_r+0x752>
 8025984:	9a08      	ldr	r2, [sp, #32]
 8025986:	429a      	cmp	r2, r3
 8025988:	d1f7      	bne.n	802597a <_dtoa_r+0x736>
 802598a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802598c:	9908      	ldr	r1, [sp, #32]
 802598e:	3201      	adds	r2, #1
 8025990:	920c      	str	r2, [sp, #48]	@ 0x30
 8025992:	2230      	movs	r2, #48	@ 0x30
 8025994:	700a      	strb	r2, [r1, #0]
 8025996:	781a      	ldrb	r2, [r3, #0]
 8025998:	3201      	adds	r2, #1
 802599a:	701a      	strb	r2, [r3, #0]
 802599c:	e7a4      	b.n	80258e8 <_dtoa_r+0x6a4>
 802599e:	2200      	movs	r2, #0
 80259a0:	4bc6      	ldr	r3, [pc, #792]	@ (8025cbc <_dtoa_r+0xa78>)
 80259a2:	f7dc fe4b 	bl	800263c <__aeabi_dmul>
 80259a6:	2200      	movs	r2, #0
 80259a8:	2300      	movs	r3, #0
 80259aa:	0006      	movs	r6, r0
 80259ac:	000f      	movs	r7, r1
 80259ae:	f7da fd7f 	bl	80004b0 <__aeabi_dcmpeq>
 80259b2:	2800      	cmp	r0, #0
 80259b4:	d100      	bne.n	80259b8 <_dtoa_r+0x774>
 80259b6:	e6a1      	b.n	80256fc <_dtoa_r+0x4b8>
 80259b8:	e6d8      	b.n	802576c <_dtoa_r+0x528>
 80259ba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80259bc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80259be:	9c06      	ldr	r4, [sp, #24]
 80259c0:	2f00      	cmp	r7, #0
 80259c2:	d014      	beq.n	80259ee <_dtoa_r+0x7aa>
 80259c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80259c6:	2a01      	cmp	r2, #1
 80259c8:	dd00      	ble.n	80259cc <_dtoa_r+0x788>
 80259ca:	e0c8      	b.n	8025b5e <_dtoa_r+0x91a>
 80259cc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80259ce:	2a00      	cmp	r2, #0
 80259d0:	d100      	bne.n	80259d4 <_dtoa_r+0x790>
 80259d2:	e0be      	b.n	8025b52 <_dtoa_r+0x90e>
 80259d4:	4aba      	ldr	r2, [pc, #744]	@ (8025cc0 <_dtoa_r+0xa7c>)
 80259d6:	189b      	adds	r3, r3, r2
 80259d8:	9a06      	ldr	r2, [sp, #24]
 80259da:	2101      	movs	r1, #1
 80259dc:	18d2      	adds	r2, r2, r3
 80259de:	9206      	str	r2, [sp, #24]
 80259e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80259e2:	9803      	ldr	r0, [sp, #12]
 80259e4:	18d3      	adds	r3, r2, r3
 80259e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80259e8:	f000 ffda 	bl	80269a0 <__i2b>
 80259ec:	0007      	movs	r7, r0
 80259ee:	2c00      	cmp	r4, #0
 80259f0:	d00e      	beq.n	8025a10 <_dtoa_r+0x7cc>
 80259f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80259f4:	2b00      	cmp	r3, #0
 80259f6:	dd0b      	ble.n	8025a10 <_dtoa_r+0x7cc>
 80259f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80259fa:	0023      	movs	r3, r4
 80259fc:	4294      	cmp	r4, r2
 80259fe:	dd00      	ble.n	8025a02 <_dtoa_r+0x7be>
 8025a00:	0013      	movs	r3, r2
 8025a02:	9a06      	ldr	r2, [sp, #24]
 8025a04:	1ae4      	subs	r4, r4, r3
 8025a06:	1ad2      	subs	r2, r2, r3
 8025a08:	9206      	str	r2, [sp, #24]
 8025a0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025a0c:	1ad3      	subs	r3, r2, r3
 8025a0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a12:	2b00      	cmp	r3, #0
 8025a14:	d01f      	beq.n	8025a56 <_dtoa_r+0x812>
 8025a16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025a18:	2b00      	cmp	r3, #0
 8025a1a:	d100      	bne.n	8025a1e <_dtoa_r+0x7da>
 8025a1c:	e0b5      	b.n	8025b8a <_dtoa_r+0x946>
 8025a1e:	2d00      	cmp	r5, #0
 8025a20:	d010      	beq.n	8025a44 <_dtoa_r+0x800>
 8025a22:	0039      	movs	r1, r7
 8025a24:	002a      	movs	r2, r5
 8025a26:	9803      	ldr	r0, [sp, #12]
 8025a28:	f001 f884 	bl	8026b34 <__pow5mult>
 8025a2c:	9a05      	ldr	r2, [sp, #20]
 8025a2e:	0001      	movs	r1, r0
 8025a30:	0007      	movs	r7, r0
 8025a32:	9803      	ldr	r0, [sp, #12]
 8025a34:	f000 ffcc 	bl	80269d0 <__multiply>
 8025a38:	0006      	movs	r6, r0
 8025a3a:	9905      	ldr	r1, [sp, #20]
 8025a3c:	9803      	ldr	r0, [sp, #12]
 8025a3e:	f000 feab 	bl	8026798 <_Bfree>
 8025a42:	9605      	str	r6, [sp, #20]
 8025a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a46:	1b5a      	subs	r2, r3, r5
 8025a48:	42ab      	cmp	r3, r5
 8025a4a:	d004      	beq.n	8025a56 <_dtoa_r+0x812>
 8025a4c:	9905      	ldr	r1, [sp, #20]
 8025a4e:	9803      	ldr	r0, [sp, #12]
 8025a50:	f001 f870 	bl	8026b34 <__pow5mult>
 8025a54:	9005      	str	r0, [sp, #20]
 8025a56:	2101      	movs	r1, #1
 8025a58:	9803      	ldr	r0, [sp, #12]
 8025a5a:	f000 ffa1 	bl	80269a0 <__i2b>
 8025a5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025a60:	0006      	movs	r6, r0
 8025a62:	2b00      	cmp	r3, #0
 8025a64:	d100      	bne.n	8025a68 <_dtoa_r+0x824>
 8025a66:	e1bc      	b.n	8025de2 <_dtoa_r+0xb9e>
 8025a68:	001a      	movs	r2, r3
 8025a6a:	0001      	movs	r1, r0
 8025a6c:	9803      	ldr	r0, [sp, #12]
 8025a6e:	f001 f861 	bl	8026b34 <__pow5mult>
 8025a72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025a74:	0006      	movs	r6, r0
 8025a76:	2500      	movs	r5, #0
 8025a78:	2b01      	cmp	r3, #1
 8025a7a:	dc16      	bgt.n	8025aaa <_dtoa_r+0x866>
 8025a7c:	2500      	movs	r5, #0
 8025a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025a80:	42ab      	cmp	r3, r5
 8025a82:	d10e      	bne.n	8025aa2 <_dtoa_r+0x85e>
 8025a84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025a86:	031b      	lsls	r3, r3, #12
 8025a88:	42ab      	cmp	r3, r5
 8025a8a:	d10a      	bne.n	8025aa2 <_dtoa_r+0x85e>
 8025a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8025cc4 <_dtoa_r+0xa80>)
 8025a8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025a90:	4213      	tst	r3, r2
 8025a92:	d006      	beq.n	8025aa2 <_dtoa_r+0x85e>
 8025a94:	9b06      	ldr	r3, [sp, #24]
 8025a96:	3501      	adds	r5, #1
 8025a98:	3301      	adds	r3, #1
 8025a9a:	9306      	str	r3, [sp, #24]
 8025a9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025a9e:	3301      	adds	r3, #1
 8025aa0:	930d      	str	r3, [sp, #52]	@ 0x34
 8025aa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025aa4:	2001      	movs	r0, #1
 8025aa6:	2b00      	cmp	r3, #0
 8025aa8:	d008      	beq.n	8025abc <_dtoa_r+0x878>
 8025aaa:	6933      	ldr	r3, [r6, #16]
 8025aac:	3303      	adds	r3, #3
 8025aae:	009b      	lsls	r3, r3, #2
 8025ab0:	18f3      	adds	r3, r6, r3
 8025ab2:	6858      	ldr	r0, [r3, #4]
 8025ab4:	f000 ff24 	bl	8026900 <__hi0bits>
 8025ab8:	2320      	movs	r3, #32
 8025aba:	1a18      	subs	r0, r3, r0
 8025abc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025abe:	1818      	adds	r0, r3, r0
 8025ac0:	0002      	movs	r2, r0
 8025ac2:	231f      	movs	r3, #31
 8025ac4:	401a      	ands	r2, r3
 8025ac6:	4218      	tst	r0, r3
 8025ac8:	d065      	beq.n	8025b96 <_dtoa_r+0x952>
 8025aca:	3301      	adds	r3, #1
 8025acc:	1a9b      	subs	r3, r3, r2
 8025ace:	2b04      	cmp	r3, #4
 8025ad0:	dd5d      	ble.n	8025b8e <_dtoa_r+0x94a>
 8025ad2:	231c      	movs	r3, #28
 8025ad4:	1a9b      	subs	r3, r3, r2
 8025ad6:	9a06      	ldr	r2, [sp, #24]
 8025ad8:	18e4      	adds	r4, r4, r3
 8025ada:	18d2      	adds	r2, r2, r3
 8025adc:	9206      	str	r2, [sp, #24]
 8025ade:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ae0:	18d3      	adds	r3, r2, r3
 8025ae2:	930d      	str	r3, [sp, #52]	@ 0x34
 8025ae4:	9b06      	ldr	r3, [sp, #24]
 8025ae6:	2b00      	cmp	r3, #0
 8025ae8:	dd05      	ble.n	8025af6 <_dtoa_r+0x8b2>
 8025aea:	001a      	movs	r2, r3
 8025aec:	9905      	ldr	r1, [sp, #20]
 8025aee:	9803      	ldr	r0, [sp, #12]
 8025af0:	f001 f87c 	bl	8026bec <__lshift>
 8025af4:	9005      	str	r0, [sp, #20]
 8025af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025af8:	2b00      	cmp	r3, #0
 8025afa:	dd05      	ble.n	8025b08 <_dtoa_r+0x8c4>
 8025afc:	0031      	movs	r1, r6
 8025afe:	001a      	movs	r2, r3
 8025b00:	9803      	ldr	r0, [sp, #12]
 8025b02:	f001 f873 	bl	8026bec <__lshift>
 8025b06:	0006      	movs	r6, r0
 8025b08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	d045      	beq.n	8025b9a <_dtoa_r+0x956>
 8025b0e:	0031      	movs	r1, r6
 8025b10:	9805      	ldr	r0, [sp, #20]
 8025b12:	f001 f8d7 	bl	8026cc4 <__mcmp>
 8025b16:	2800      	cmp	r0, #0
 8025b18:	da3f      	bge.n	8025b9a <_dtoa_r+0x956>
 8025b1a:	9b04      	ldr	r3, [sp, #16]
 8025b1c:	220a      	movs	r2, #10
 8025b1e:	3b01      	subs	r3, #1
 8025b20:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b22:	9905      	ldr	r1, [sp, #20]
 8025b24:	2300      	movs	r3, #0
 8025b26:	9803      	ldr	r0, [sp, #12]
 8025b28:	f000 fe5a 	bl	80267e0 <__multadd>
 8025b2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025b2e:	9005      	str	r0, [sp, #20]
 8025b30:	2b00      	cmp	r3, #0
 8025b32:	d100      	bne.n	8025b36 <_dtoa_r+0x8f2>
 8025b34:	e15c      	b.n	8025df0 <_dtoa_r+0xbac>
 8025b36:	2300      	movs	r3, #0
 8025b38:	0039      	movs	r1, r7
 8025b3a:	220a      	movs	r2, #10
 8025b3c:	9803      	ldr	r0, [sp, #12]
 8025b3e:	f000 fe4f 	bl	80267e0 <__multadd>
 8025b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025b44:	0007      	movs	r7, r0
 8025b46:	2b00      	cmp	r3, #0
 8025b48:	dc55      	bgt.n	8025bf6 <_dtoa_r+0x9b2>
 8025b4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025b4c:	2b02      	cmp	r3, #2
 8025b4e:	dc2d      	bgt.n	8025bac <_dtoa_r+0x968>
 8025b50:	e051      	b.n	8025bf6 <_dtoa_r+0x9b2>
 8025b52:	2336      	movs	r3, #54	@ 0x36
 8025b54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025b56:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8025b58:	9c06      	ldr	r4, [sp, #24]
 8025b5a:	1a9b      	subs	r3, r3, r2
 8025b5c:	e73c      	b.n	80259d8 <_dtoa_r+0x794>
 8025b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b60:	1e5d      	subs	r5, r3, #1
 8025b62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025b64:	42ab      	cmp	r3, r5
 8025b66:	db08      	blt.n	8025b7a <_dtoa_r+0x936>
 8025b68:	1b5d      	subs	r5, r3, r5
 8025b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b6c:	9c06      	ldr	r4, [sp, #24]
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	db00      	blt.n	8025b74 <_dtoa_r+0x930>
 8025b72:	e731      	b.n	80259d8 <_dtoa_r+0x794>
 8025b74:	1ae4      	subs	r4, r4, r3
 8025b76:	2300      	movs	r3, #0
 8025b78:	e72e      	b.n	80259d8 <_dtoa_r+0x794>
 8025b7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025b7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025b7e:	1aeb      	subs	r3, r5, r3
 8025b80:	18d3      	adds	r3, r2, r3
 8025b82:	950f      	str	r5, [sp, #60]	@ 0x3c
 8025b84:	9314      	str	r3, [sp, #80]	@ 0x50
 8025b86:	2500      	movs	r5, #0
 8025b88:	e7ef      	b.n	8025b6a <_dtoa_r+0x926>
 8025b8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025b8c:	e75e      	b.n	8025a4c <_dtoa_r+0x808>
 8025b8e:	2b04      	cmp	r3, #4
 8025b90:	d0a8      	beq.n	8025ae4 <_dtoa_r+0x8a0>
 8025b92:	331c      	adds	r3, #28
 8025b94:	e79f      	b.n	8025ad6 <_dtoa_r+0x892>
 8025b96:	0013      	movs	r3, r2
 8025b98:	e7fb      	b.n	8025b92 <_dtoa_r+0x94e>
 8025b9a:	9b04      	ldr	r3, [sp, #16]
 8025b9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ba0:	930e      	str	r3, [sp, #56]	@ 0x38
 8025ba2:	2b00      	cmp	r3, #0
 8025ba4:	dc23      	bgt.n	8025bee <_dtoa_r+0x9aa>
 8025ba6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025ba8:	2b02      	cmp	r3, #2
 8025baa:	dd20      	ble.n	8025bee <_dtoa_r+0x9aa>
 8025bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025bae:	2b00      	cmp	r3, #0
 8025bb0:	d000      	beq.n	8025bb4 <_dtoa_r+0x970>
 8025bb2:	e6b5      	b.n	8025920 <_dtoa_r+0x6dc>
 8025bb4:	0031      	movs	r1, r6
 8025bb6:	2205      	movs	r2, #5
 8025bb8:	9803      	ldr	r0, [sp, #12]
 8025bba:	f000 fe11 	bl	80267e0 <__multadd>
 8025bbe:	0006      	movs	r6, r0
 8025bc0:	0001      	movs	r1, r0
 8025bc2:	9805      	ldr	r0, [sp, #20]
 8025bc4:	f001 f87e 	bl	8026cc4 <__mcmp>
 8025bc8:	2800      	cmp	r0, #0
 8025bca:	dc00      	bgt.n	8025bce <_dtoa_r+0x98a>
 8025bcc:	e6a8      	b.n	8025920 <_dtoa_r+0x6dc>
 8025bce:	9b08      	ldr	r3, [sp, #32]
 8025bd0:	9a08      	ldr	r2, [sp, #32]
 8025bd2:	1c5c      	adds	r4, r3, #1
 8025bd4:	2331      	movs	r3, #49	@ 0x31
 8025bd6:	7013      	strb	r3, [r2, #0]
 8025bd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bda:	3301      	adds	r3, #1
 8025bdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bde:	e6a3      	b.n	8025928 <_dtoa_r+0x6e4>
 8025be0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8025be2:	0037      	movs	r7, r6
 8025be4:	e7f3      	b.n	8025bce <_dtoa_r+0x98a>
 8025be6:	9b04      	ldr	r3, [sp, #16]
 8025be8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8025bea:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bec:	e7f9      	b.n	8025be2 <_dtoa_r+0x99e>
 8025bee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025bf0:	2b00      	cmp	r3, #0
 8025bf2:	d100      	bne.n	8025bf6 <_dtoa_r+0x9b2>
 8025bf4:	e100      	b.n	8025df8 <_dtoa_r+0xbb4>
 8025bf6:	2c00      	cmp	r4, #0
 8025bf8:	dd05      	ble.n	8025c06 <_dtoa_r+0x9c2>
 8025bfa:	0039      	movs	r1, r7
 8025bfc:	0022      	movs	r2, r4
 8025bfe:	9803      	ldr	r0, [sp, #12]
 8025c00:	f000 fff4 	bl	8026bec <__lshift>
 8025c04:	0007      	movs	r7, r0
 8025c06:	0038      	movs	r0, r7
 8025c08:	2d00      	cmp	r5, #0
 8025c0a:	d018      	beq.n	8025c3e <_dtoa_r+0x9fa>
 8025c0c:	6879      	ldr	r1, [r7, #4]
 8025c0e:	9803      	ldr	r0, [sp, #12]
 8025c10:	f000 fd7e 	bl	8026710 <_Balloc>
 8025c14:	1e04      	subs	r4, r0, #0
 8025c16:	d105      	bne.n	8025c24 <_dtoa_r+0x9e0>
 8025c18:	0022      	movs	r2, r4
 8025c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8025cc8 <_dtoa_r+0xa84>)
 8025c1c:	482b      	ldr	r0, [pc, #172]	@ (8025ccc <_dtoa_r+0xa88>)
 8025c1e:	492c      	ldr	r1, [pc, #176]	@ (8025cd0 <_dtoa_r+0xa8c>)
 8025c20:	f7ff fb25 	bl	802526e <_dtoa_r+0x2a>
 8025c24:	0039      	movs	r1, r7
 8025c26:	693a      	ldr	r2, [r7, #16]
 8025c28:	310c      	adds	r1, #12
 8025c2a:	3202      	adds	r2, #2
 8025c2c:	0092      	lsls	r2, r2, #2
 8025c2e:	300c      	adds	r0, #12
 8025c30:	f7ff fa6a 	bl	8025108 <memcpy>
 8025c34:	2201      	movs	r2, #1
 8025c36:	0021      	movs	r1, r4
 8025c38:	9803      	ldr	r0, [sp, #12]
 8025c3a:	f000 ffd7 	bl	8026bec <__lshift>
 8025c3e:	9b08      	ldr	r3, [sp, #32]
 8025c40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025c42:	9306      	str	r3, [sp, #24]
 8025c44:	3b01      	subs	r3, #1
 8025c46:	189b      	adds	r3, r3, r2
 8025c48:	2201      	movs	r2, #1
 8025c4a:	9704      	str	r7, [sp, #16]
 8025c4c:	0007      	movs	r7, r0
 8025c4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025c52:	4013      	ands	r3, r2
 8025c54:	930e      	str	r3, [sp, #56]	@ 0x38
 8025c56:	0031      	movs	r1, r6
 8025c58:	9805      	ldr	r0, [sp, #20]
 8025c5a:	f7ff fa65 	bl	8025128 <quorem>
 8025c5e:	9904      	ldr	r1, [sp, #16]
 8025c60:	0005      	movs	r5, r0
 8025c62:	900a      	str	r0, [sp, #40]	@ 0x28
 8025c64:	9805      	ldr	r0, [sp, #20]
 8025c66:	f001 f82d 	bl	8026cc4 <__mcmp>
 8025c6a:	003a      	movs	r2, r7
 8025c6c:	900d      	str	r0, [sp, #52]	@ 0x34
 8025c6e:	0031      	movs	r1, r6
 8025c70:	9803      	ldr	r0, [sp, #12]
 8025c72:	f001 f843 	bl	8026cfc <__mdiff>
 8025c76:	2201      	movs	r2, #1
 8025c78:	68c3      	ldr	r3, [r0, #12]
 8025c7a:	0004      	movs	r4, r0
 8025c7c:	3530      	adds	r5, #48	@ 0x30
 8025c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	d104      	bne.n	8025c8e <_dtoa_r+0xa4a>
 8025c84:	0001      	movs	r1, r0
 8025c86:	9805      	ldr	r0, [sp, #20]
 8025c88:	f001 f81c 	bl	8026cc4 <__mcmp>
 8025c8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8025c8e:	0021      	movs	r1, r4
 8025c90:	9803      	ldr	r0, [sp, #12]
 8025c92:	f000 fd81 	bl	8026798 <_Bfree>
 8025c96:	9b06      	ldr	r3, [sp, #24]
 8025c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025c9a:	1c5c      	adds	r4, r3, #1
 8025c9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025c9e:	4313      	orrs	r3, r2
 8025ca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ca2:	4313      	orrs	r3, r2
 8025ca4:	d116      	bne.n	8025cd4 <_dtoa_r+0xa90>
 8025ca6:	2d39      	cmp	r5, #57	@ 0x39
 8025ca8:	d02f      	beq.n	8025d0a <_dtoa_r+0xac6>
 8025caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	dd01      	ble.n	8025cb4 <_dtoa_r+0xa70>
 8025cb0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8025cb2:	3531      	adds	r5, #49	@ 0x31
 8025cb4:	9b06      	ldr	r3, [sp, #24]
 8025cb6:	701d      	strb	r5, [r3, #0]
 8025cb8:	e638      	b.n	802592c <_dtoa_r+0x6e8>
 8025cba:	46c0      	nop			@ (mov r8, r8)
 8025cbc:	40240000 	.word	0x40240000
 8025cc0:	00000433 	.word	0x00000433
 8025cc4:	7ff00000 	.word	0x7ff00000
 8025cc8:	0802dac9 	.word	0x0802dac9
 8025ccc:	0802da71 	.word	0x0802da71
 8025cd0:	000002ef 	.word	0x000002ef
 8025cd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025cd6:	2b00      	cmp	r3, #0
 8025cd8:	db04      	blt.n	8025ce4 <_dtoa_r+0xaa0>
 8025cda:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025cdc:	4313      	orrs	r3, r2
 8025cde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ce0:	4313      	orrs	r3, r2
 8025ce2:	d11e      	bne.n	8025d22 <_dtoa_r+0xade>
 8025ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ce6:	2b00      	cmp	r3, #0
 8025ce8:	dde4      	ble.n	8025cb4 <_dtoa_r+0xa70>
 8025cea:	9905      	ldr	r1, [sp, #20]
 8025cec:	2201      	movs	r2, #1
 8025cee:	9803      	ldr	r0, [sp, #12]
 8025cf0:	f000 ff7c 	bl	8026bec <__lshift>
 8025cf4:	0031      	movs	r1, r6
 8025cf6:	9005      	str	r0, [sp, #20]
 8025cf8:	f000 ffe4 	bl	8026cc4 <__mcmp>
 8025cfc:	2800      	cmp	r0, #0
 8025cfe:	dc02      	bgt.n	8025d06 <_dtoa_r+0xac2>
 8025d00:	d1d8      	bne.n	8025cb4 <_dtoa_r+0xa70>
 8025d02:	07eb      	lsls	r3, r5, #31
 8025d04:	d5d6      	bpl.n	8025cb4 <_dtoa_r+0xa70>
 8025d06:	2d39      	cmp	r5, #57	@ 0x39
 8025d08:	d1d2      	bne.n	8025cb0 <_dtoa_r+0xa6c>
 8025d0a:	2339      	movs	r3, #57	@ 0x39
 8025d0c:	9a06      	ldr	r2, [sp, #24]
 8025d0e:	7013      	strb	r3, [r2, #0]
 8025d10:	0023      	movs	r3, r4
 8025d12:	001c      	movs	r4, r3
 8025d14:	3b01      	subs	r3, #1
 8025d16:	781a      	ldrb	r2, [r3, #0]
 8025d18:	2a39      	cmp	r2, #57	@ 0x39
 8025d1a:	d04f      	beq.n	8025dbc <_dtoa_r+0xb78>
 8025d1c:	3201      	adds	r2, #1
 8025d1e:	701a      	strb	r2, [r3, #0]
 8025d20:	e604      	b.n	802592c <_dtoa_r+0x6e8>
 8025d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d24:	2b00      	cmp	r3, #0
 8025d26:	dd03      	ble.n	8025d30 <_dtoa_r+0xaec>
 8025d28:	2d39      	cmp	r5, #57	@ 0x39
 8025d2a:	d0ee      	beq.n	8025d0a <_dtoa_r+0xac6>
 8025d2c:	3501      	adds	r5, #1
 8025d2e:	e7c1      	b.n	8025cb4 <_dtoa_r+0xa70>
 8025d30:	9b06      	ldr	r3, [sp, #24]
 8025d32:	9a06      	ldr	r2, [sp, #24]
 8025d34:	701d      	strb	r5, [r3, #0]
 8025d36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d38:	4293      	cmp	r3, r2
 8025d3a:	d02a      	beq.n	8025d92 <_dtoa_r+0xb4e>
 8025d3c:	2300      	movs	r3, #0
 8025d3e:	220a      	movs	r2, #10
 8025d40:	9905      	ldr	r1, [sp, #20]
 8025d42:	9803      	ldr	r0, [sp, #12]
 8025d44:	f000 fd4c 	bl	80267e0 <__multadd>
 8025d48:	9b04      	ldr	r3, [sp, #16]
 8025d4a:	9005      	str	r0, [sp, #20]
 8025d4c:	42bb      	cmp	r3, r7
 8025d4e:	d109      	bne.n	8025d64 <_dtoa_r+0xb20>
 8025d50:	2300      	movs	r3, #0
 8025d52:	220a      	movs	r2, #10
 8025d54:	9904      	ldr	r1, [sp, #16]
 8025d56:	9803      	ldr	r0, [sp, #12]
 8025d58:	f000 fd42 	bl	80267e0 <__multadd>
 8025d5c:	9004      	str	r0, [sp, #16]
 8025d5e:	0007      	movs	r7, r0
 8025d60:	9406      	str	r4, [sp, #24]
 8025d62:	e778      	b.n	8025c56 <_dtoa_r+0xa12>
 8025d64:	9904      	ldr	r1, [sp, #16]
 8025d66:	2300      	movs	r3, #0
 8025d68:	220a      	movs	r2, #10
 8025d6a:	9803      	ldr	r0, [sp, #12]
 8025d6c:	f000 fd38 	bl	80267e0 <__multadd>
 8025d70:	2300      	movs	r3, #0
 8025d72:	9004      	str	r0, [sp, #16]
 8025d74:	220a      	movs	r2, #10
 8025d76:	0039      	movs	r1, r7
 8025d78:	9803      	ldr	r0, [sp, #12]
 8025d7a:	f000 fd31 	bl	80267e0 <__multadd>
 8025d7e:	e7ee      	b.n	8025d5e <_dtoa_r+0xb1a>
 8025d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d82:	2401      	movs	r4, #1
 8025d84:	2b00      	cmp	r3, #0
 8025d86:	dd00      	ble.n	8025d8a <_dtoa_r+0xb46>
 8025d88:	001c      	movs	r4, r3
 8025d8a:	9b08      	ldr	r3, [sp, #32]
 8025d8c:	191c      	adds	r4, r3, r4
 8025d8e:	2300      	movs	r3, #0
 8025d90:	9304      	str	r3, [sp, #16]
 8025d92:	9905      	ldr	r1, [sp, #20]
 8025d94:	2201      	movs	r2, #1
 8025d96:	9803      	ldr	r0, [sp, #12]
 8025d98:	f000 ff28 	bl	8026bec <__lshift>
 8025d9c:	0031      	movs	r1, r6
 8025d9e:	9005      	str	r0, [sp, #20]
 8025da0:	f000 ff90 	bl	8026cc4 <__mcmp>
 8025da4:	2800      	cmp	r0, #0
 8025da6:	dcb3      	bgt.n	8025d10 <_dtoa_r+0xacc>
 8025da8:	d101      	bne.n	8025dae <_dtoa_r+0xb6a>
 8025daa:	07ed      	lsls	r5, r5, #31
 8025dac:	d4b0      	bmi.n	8025d10 <_dtoa_r+0xacc>
 8025dae:	0023      	movs	r3, r4
 8025db0:	001c      	movs	r4, r3
 8025db2:	3b01      	subs	r3, #1
 8025db4:	781a      	ldrb	r2, [r3, #0]
 8025db6:	2a30      	cmp	r2, #48	@ 0x30
 8025db8:	d0fa      	beq.n	8025db0 <_dtoa_r+0xb6c>
 8025dba:	e5b7      	b.n	802592c <_dtoa_r+0x6e8>
 8025dbc:	9a08      	ldr	r2, [sp, #32]
 8025dbe:	429a      	cmp	r2, r3
 8025dc0:	d1a7      	bne.n	8025d12 <_dtoa_r+0xace>
 8025dc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025dc4:	3301      	adds	r3, #1
 8025dc6:	930c      	str	r3, [sp, #48]	@ 0x30
 8025dc8:	2331      	movs	r3, #49	@ 0x31
 8025dca:	7013      	strb	r3, [r2, #0]
 8025dcc:	e5ae      	b.n	802592c <_dtoa_r+0x6e8>
 8025dce:	4b15      	ldr	r3, [pc, #84]	@ (8025e24 <_dtoa_r+0xbe0>)
 8025dd0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025dd2:	9308      	str	r3, [sp, #32]
 8025dd4:	4b14      	ldr	r3, [pc, #80]	@ (8025e28 <_dtoa_r+0xbe4>)
 8025dd6:	2a00      	cmp	r2, #0
 8025dd8:	d001      	beq.n	8025dde <_dtoa_r+0xb9a>
 8025dda:	f7ff fa7b 	bl	80252d4 <_dtoa_r+0x90>
 8025dde:	f7ff fa7b 	bl	80252d8 <_dtoa_r+0x94>
 8025de2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025de4:	2b01      	cmp	r3, #1
 8025de6:	dc00      	bgt.n	8025dea <_dtoa_r+0xba6>
 8025de8:	e648      	b.n	8025a7c <_dtoa_r+0x838>
 8025dea:	2001      	movs	r0, #1
 8025dec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025dee:	e665      	b.n	8025abc <_dtoa_r+0x878>
 8025df0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	dc00      	bgt.n	8025df8 <_dtoa_r+0xbb4>
 8025df6:	e6d6      	b.n	8025ba6 <_dtoa_r+0x962>
 8025df8:	2400      	movs	r4, #0
 8025dfa:	0031      	movs	r1, r6
 8025dfc:	9805      	ldr	r0, [sp, #20]
 8025dfe:	f7ff f993 	bl	8025128 <quorem>
 8025e02:	9b08      	ldr	r3, [sp, #32]
 8025e04:	3030      	adds	r0, #48	@ 0x30
 8025e06:	5518      	strb	r0, [r3, r4]
 8025e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e0a:	3401      	adds	r4, #1
 8025e0c:	0005      	movs	r5, r0
 8025e0e:	429c      	cmp	r4, r3
 8025e10:	dab6      	bge.n	8025d80 <_dtoa_r+0xb3c>
 8025e12:	2300      	movs	r3, #0
 8025e14:	220a      	movs	r2, #10
 8025e16:	9905      	ldr	r1, [sp, #20]
 8025e18:	9803      	ldr	r0, [sp, #12]
 8025e1a:	f000 fce1 	bl	80267e0 <__multadd>
 8025e1e:	9005      	str	r0, [sp, #20]
 8025e20:	e7eb      	b.n	8025dfa <_dtoa_r+0xbb6>
 8025e22:	46c0      	nop			@ (mov r8, r8)
 8025e24:	0802da4d 	.word	0x0802da4d
 8025e28:	0802da55 	.word	0x0802da55

08025e2c <_free_r>:
 8025e2c:	b570      	push	{r4, r5, r6, lr}
 8025e2e:	0005      	movs	r5, r0
 8025e30:	1e0c      	subs	r4, r1, #0
 8025e32:	d010      	beq.n	8025e56 <_free_r+0x2a>
 8025e34:	3c04      	subs	r4, #4
 8025e36:	6823      	ldr	r3, [r4, #0]
 8025e38:	2b00      	cmp	r3, #0
 8025e3a:	da00      	bge.n	8025e3e <_free_r+0x12>
 8025e3c:	18e4      	adds	r4, r4, r3
 8025e3e:	0028      	movs	r0, r5
 8025e40:	f000 fc56 	bl	80266f0 <__malloc_lock>
 8025e44:	4a1d      	ldr	r2, [pc, #116]	@ (8025ebc <_free_r+0x90>)
 8025e46:	6813      	ldr	r3, [r2, #0]
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	d105      	bne.n	8025e58 <_free_r+0x2c>
 8025e4c:	6063      	str	r3, [r4, #4]
 8025e4e:	6014      	str	r4, [r2, #0]
 8025e50:	0028      	movs	r0, r5
 8025e52:	f000 fc55 	bl	8026700 <__malloc_unlock>
 8025e56:	bd70      	pop	{r4, r5, r6, pc}
 8025e58:	42a3      	cmp	r3, r4
 8025e5a:	d908      	bls.n	8025e6e <_free_r+0x42>
 8025e5c:	6820      	ldr	r0, [r4, #0]
 8025e5e:	1821      	adds	r1, r4, r0
 8025e60:	428b      	cmp	r3, r1
 8025e62:	d1f3      	bne.n	8025e4c <_free_r+0x20>
 8025e64:	6819      	ldr	r1, [r3, #0]
 8025e66:	685b      	ldr	r3, [r3, #4]
 8025e68:	1809      	adds	r1, r1, r0
 8025e6a:	6021      	str	r1, [r4, #0]
 8025e6c:	e7ee      	b.n	8025e4c <_free_r+0x20>
 8025e6e:	001a      	movs	r2, r3
 8025e70:	685b      	ldr	r3, [r3, #4]
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	d001      	beq.n	8025e7a <_free_r+0x4e>
 8025e76:	42a3      	cmp	r3, r4
 8025e78:	d9f9      	bls.n	8025e6e <_free_r+0x42>
 8025e7a:	6811      	ldr	r1, [r2, #0]
 8025e7c:	1850      	adds	r0, r2, r1
 8025e7e:	42a0      	cmp	r0, r4
 8025e80:	d10b      	bne.n	8025e9a <_free_r+0x6e>
 8025e82:	6820      	ldr	r0, [r4, #0]
 8025e84:	1809      	adds	r1, r1, r0
 8025e86:	1850      	adds	r0, r2, r1
 8025e88:	6011      	str	r1, [r2, #0]
 8025e8a:	4283      	cmp	r3, r0
 8025e8c:	d1e0      	bne.n	8025e50 <_free_r+0x24>
 8025e8e:	6818      	ldr	r0, [r3, #0]
 8025e90:	685b      	ldr	r3, [r3, #4]
 8025e92:	1841      	adds	r1, r0, r1
 8025e94:	6011      	str	r1, [r2, #0]
 8025e96:	6053      	str	r3, [r2, #4]
 8025e98:	e7da      	b.n	8025e50 <_free_r+0x24>
 8025e9a:	42a0      	cmp	r0, r4
 8025e9c:	d902      	bls.n	8025ea4 <_free_r+0x78>
 8025e9e:	230c      	movs	r3, #12
 8025ea0:	602b      	str	r3, [r5, #0]
 8025ea2:	e7d5      	b.n	8025e50 <_free_r+0x24>
 8025ea4:	6820      	ldr	r0, [r4, #0]
 8025ea6:	1821      	adds	r1, r4, r0
 8025ea8:	428b      	cmp	r3, r1
 8025eaa:	d103      	bne.n	8025eb4 <_free_r+0x88>
 8025eac:	6819      	ldr	r1, [r3, #0]
 8025eae:	685b      	ldr	r3, [r3, #4]
 8025eb0:	1809      	adds	r1, r1, r0
 8025eb2:	6021      	str	r1, [r4, #0]
 8025eb4:	6063      	str	r3, [r4, #4]
 8025eb6:	6054      	str	r4, [r2, #4]
 8025eb8:	e7ca      	b.n	8025e50 <_free_r+0x24>
 8025eba:	46c0      	nop			@ (mov r8, r8)
 8025ebc:	2000363c 	.word	0x2000363c

08025ec0 <rshift>:
 8025ec0:	0002      	movs	r2, r0
 8025ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ec4:	6904      	ldr	r4, [r0, #16]
 8025ec6:	b085      	sub	sp, #20
 8025ec8:	3214      	adds	r2, #20
 8025eca:	114b      	asrs	r3, r1, #5
 8025ecc:	0016      	movs	r6, r2
 8025ece:	9302      	str	r3, [sp, #8]
 8025ed0:	429c      	cmp	r4, r3
 8025ed2:	dd31      	ble.n	8025f38 <rshift+0x78>
 8025ed4:	261f      	movs	r6, #31
 8025ed6:	000f      	movs	r7, r1
 8025ed8:	009b      	lsls	r3, r3, #2
 8025eda:	00a5      	lsls	r5, r4, #2
 8025edc:	18d3      	adds	r3, r2, r3
 8025ede:	4037      	ands	r7, r6
 8025ee0:	1955      	adds	r5, r2, r5
 8025ee2:	9300      	str	r3, [sp, #0]
 8025ee4:	9701      	str	r7, [sp, #4]
 8025ee6:	4231      	tst	r1, r6
 8025ee8:	d10d      	bne.n	8025f06 <rshift+0x46>
 8025eea:	0016      	movs	r6, r2
 8025eec:	0019      	movs	r1, r3
 8025eee:	428d      	cmp	r5, r1
 8025ef0:	d836      	bhi.n	8025f60 <rshift+0xa0>
 8025ef2:	9b00      	ldr	r3, [sp, #0]
 8025ef4:	2600      	movs	r6, #0
 8025ef6:	3b03      	subs	r3, #3
 8025ef8:	429d      	cmp	r5, r3
 8025efa:	d302      	bcc.n	8025f02 <rshift+0x42>
 8025efc:	9b02      	ldr	r3, [sp, #8]
 8025efe:	1ae4      	subs	r4, r4, r3
 8025f00:	00a6      	lsls	r6, r4, #2
 8025f02:	1996      	adds	r6, r2, r6
 8025f04:	e018      	b.n	8025f38 <rshift+0x78>
 8025f06:	2120      	movs	r1, #32
 8025f08:	9e01      	ldr	r6, [sp, #4]
 8025f0a:	9f01      	ldr	r7, [sp, #4]
 8025f0c:	1b89      	subs	r1, r1, r6
 8025f0e:	9e00      	ldr	r6, [sp, #0]
 8025f10:	9103      	str	r1, [sp, #12]
 8025f12:	ce02      	ldmia	r6!, {r1}
 8025f14:	4694      	mov	ip, r2
 8025f16:	40f9      	lsrs	r1, r7
 8025f18:	42b5      	cmp	r5, r6
 8025f1a:	d816      	bhi.n	8025f4a <rshift+0x8a>
 8025f1c:	9b00      	ldr	r3, [sp, #0]
 8025f1e:	2600      	movs	r6, #0
 8025f20:	3301      	adds	r3, #1
 8025f22:	429d      	cmp	r5, r3
 8025f24:	d303      	bcc.n	8025f2e <rshift+0x6e>
 8025f26:	9b02      	ldr	r3, [sp, #8]
 8025f28:	1ae4      	subs	r4, r4, r3
 8025f2a:	00a6      	lsls	r6, r4, #2
 8025f2c:	3e04      	subs	r6, #4
 8025f2e:	1996      	adds	r6, r2, r6
 8025f30:	6031      	str	r1, [r6, #0]
 8025f32:	2900      	cmp	r1, #0
 8025f34:	d000      	beq.n	8025f38 <rshift+0x78>
 8025f36:	3604      	adds	r6, #4
 8025f38:	1ab1      	subs	r1, r6, r2
 8025f3a:	1089      	asrs	r1, r1, #2
 8025f3c:	6101      	str	r1, [r0, #16]
 8025f3e:	4296      	cmp	r6, r2
 8025f40:	d101      	bne.n	8025f46 <rshift+0x86>
 8025f42:	2300      	movs	r3, #0
 8025f44:	6143      	str	r3, [r0, #20]
 8025f46:	b005      	add	sp, #20
 8025f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f4a:	6837      	ldr	r7, [r6, #0]
 8025f4c:	9b03      	ldr	r3, [sp, #12]
 8025f4e:	409f      	lsls	r7, r3
 8025f50:	430f      	orrs	r7, r1
 8025f52:	4661      	mov	r1, ip
 8025f54:	c180      	stmia	r1!, {r7}
 8025f56:	468c      	mov	ip, r1
 8025f58:	9b01      	ldr	r3, [sp, #4]
 8025f5a:	ce02      	ldmia	r6!, {r1}
 8025f5c:	40d9      	lsrs	r1, r3
 8025f5e:	e7db      	b.n	8025f18 <rshift+0x58>
 8025f60:	c980      	ldmia	r1!, {r7}
 8025f62:	c680      	stmia	r6!, {r7}
 8025f64:	e7c3      	b.n	8025eee <rshift+0x2e>

08025f66 <__hexdig_fun>:
 8025f66:	0002      	movs	r2, r0
 8025f68:	3a30      	subs	r2, #48	@ 0x30
 8025f6a:	0003      	movs	r3, r0
 8025f6c:	2a09      	cmp	r2, #9
 8025f6e:	d802      	bhi.n	8025f76 <__hexdig_fun+0x10>
 8025f70:	3b20      	subs	r3, #32
 8025f72:	b2d8      	uxtb	r0, r3
 8025f74:	4770      	bx	lr
 8025f76:	0002      	movs	r2, r0
 8025f78:	3a61      	subs	r2, #97	@ 0x61
 8025f7a:	2a05      	cmp	r2, #5
 8025f7c:	d801      	bhi.n	8025f82 <__hexdig_fun+0x1c>
 8025f7e:	3b47      	subs	r3, #71	@ 0x47
 8025f80:	e7f7      	b.n	8025f72 <__hexdig_fun+0xc>
 8025f82:	001a      	movs	r2, r3
 8025f84:	3a41      	subs	r2, #65	@ 0x41
 8025f86:	2000      	movs	r0, #0
 8025f88:	2a05      	cmp	r2, #5
 8025f8a:	d8f3      	bhi.n	8025f74 <__hexdig_fun+0xe>
 8025f8c:	3b27      	subs	r3, #39	@ 0x27
 8025f8e:	e7f0      	b.n	8025f72 <__hexdig_fun+0xc>

08025f90 <__gethex>:
 8025f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f92:	b089      	sub	sp, #36	@ 0x24
 8025f94:	9307      	str	r3, [sp, #28]
 8025f96:	680b      	ldr	r3, [r1, #0]
 8025f98:	9201      	str	r2, [sp, #4]
 8025f9a:	9003      	str	r0, [sp, #12]
 8025f9c:	9106      	str	r1, [sp, #24]
 8025f9e:	1c9a      	adds	r2, r3, #2
 8025fa0:	0011      	movs	r1, r2
 8025fa2:	3201      	adds	r2, #1
 8025fa4:	1e50      	subs	r0, r2, #1
 8025fa6:	7800      	ldrb	r0, [r0, #0]
 8025fa8:	2830      	cmp	r0, #48	@ 0x30
 8025faa:	d0f9      	beq.n	8025fa0 <__gethex+0x10>
 8025fac:	1acb      	subs	r3, r1, r3
 8025fae:	3b02      	subs	r3, #2
 8025fb0:	9305      	str	r3, [sp, #20]
 8025fb2:	9100      	str	r1, [sp, #0]
 8025fb4:	f7ff ffd7 	bl	8025f66 <__hexdig_fun>
 8025fb8:	2300      	movs	r3, #0
 8025fba:	001d      	movs	r5, r3
 8025fbc:	9302      	str	r3, [sp, #8]
 8025fbe:	4298      	cmp	r0, r3
 8025fc0:	d11e      	bne.n	8026000 <__gethex+0x70>
 8025fc2:	2201      	movs	r2, #1
 8025fc4:	49a6      	ldr	r1, [pc, #664]	@ (8026260 <__gethex+0x2d0>)
 8025fc6:	9800      	ldr	r0, [sp, #0]
 8025fc8:	f7fe ffd8 	bl	8024f7c <strncmp>
 8025fcc:	0007      	movs	r7, r0
 8025fce:	42a8      	cmp	r0, r5
 8025fd0:	d000      	beq.n	8025fd4 <__gethex+0x44>
 8025fd2:	e06a      	b.n	80260aa <__gethex+0x11a>
 8025fd4:	9b00      	ldr	r3, [sp, #0]
 8025fd6:	7858      	ldrb	r0, [r3, #1]
 8025fd8:	1c5c      	adds	r4, r3, #1
 8025fda:	f7ff ffc4 	bl	8025f66 <__hexdig_fun>
 8025fde:	2301      	movs	r3, #1
 8025fe0:	9302      	str	r3, [sp, #8]
 8025fe2:	42a8      	cmp	r0, r5
 8025fe4:	d02f      	beq.n	8026046 <__gethex+0xb6>
 8025fe6:	9400      	str	r4, [sp, #0]
 8025fe8:	9b00      	ldr	r3, [sp, #0]
 8025fea:	7818      	ldrb	r0, [r3, #0]
 8025fec:	2830      	cmp	r0, #48	@ 0x30
 8025fee:	d009      	beq.n	8026004 <__gethex+0x74>
 8025ff0:	f7ff ffb9 	bl	8025f66 <__hexdig_fun>
 8025ff4:	4242      	negs	r2, r0
 8025ff6:	4142      	adcs	r2, r0
 8025ff8:	2301      	movs	r3, #1
 8025ffa:	0025      	movs	r5, r4
 8025ffc:	9202      	str	r2, [sp, #8]
 8025ffe:	9305      	str	r3, [sp, #20]
 8026000:	9c00      	ldr	r4, [sp, #0]
 8026002:	e004      	b.n	802600e <__gethex+0x7e>
 8026004:	9b00      	ldr	r3, [sp, #0]
 8026006:	3301      	adds	r3, #1
 8026008:	9300      	str	r3, [sp, #0]
 802600a:	e7ed      	b.n	8025fe8 <__gethex+0x58>
 802600c:	3401      	adds	r4, #1
 802600e:	7820      	ldrb	r0, [r4, #0]
 8026010:	f7ff ffa9 	bl	8025f66 <__hexdig_fun>
 8026014:	1e07      	subs	r7, r0, #0
 8026016:	d1f9      	bne.n	802600c <__gethex+0x7c>
 8026018:	2201      	movs	r2, #1
 802601a:	0020      	movs	r0, r4
 802601c:	4990      	ldr	r1, [pc, #576]	@ (8026260 <__gethex+0x2d0>)
 802601e:	f7fe ffad 	bl	8024f7c <strncmp>
 8026022:	2800      	cmp	r0, #0
 8026024:	d10d      	bne.n	8026042 <__gethex+0xb2>
 8026026:	2d00      	cmp	r5, #0
 8026028:	d106      	bne.n	8026038 <__gethex+0xa8>
 802602a:	3401      	adds	r4, #1
 802602c:	0025      	movs	r5, r4
 802602e:	7820      	ldrb	r0, [r4, #0]
 8026030:	f7ff ff99 	bl	8025f66 <__hexdig_fun>
 8026034:	2800      	cmp	r0, #0
 8026036:	d102      	bne.n	802603e <__gethex+0xae>
 8026038:	1b2d      	subs	r5, r5, r4
 802603a:	00af      	lsls	r7, r5, #2
 802603c:	e003      	b.n	8026046 <__gethex+0xb6>
 802603e:	3401      	adds	r4, #1
 8026040:	e7f5      	b.n	802602e <__gethex+0x9e>
 8026042:	2d00      	cmp	r5, #0
 8026044:	d1f8      	bne.n	8026038 <__gethex+0xa8>
 8026046:	2220      	movs	r2, #32
 8026048:	7823      	ldrb	r3, [r4, #0]
 802604a:	0026      	movs	r6, r4
 802604c:	4393      	bics	r3, r2
 802604e:	2b50      	cmp	r3, #80	@ 0x50
 8026050:	d11d      	bne.n	802608e <__gethex+0xfe>
 8026052:	7863      	ldrb	r3, [r4, #1]
 8026054:	2b2b      	cmp	r3, #43	@ 0x2b
 8026056:	d02d      	beq.n	80260b4 <__gethex+0x124>
 8026058:	2b2d      	cmp	r3, #45	@ 0x2d
 802605a:	d02f      	beq.n	80260bc <__gethex+0x12c>
 802605c:	2300      	movs	r3, #0
 802605e:	1c66      	adds	r6, r4, #1
 8026060:	9304      	str	r3, [sp, #16]
 8026062:	7830      	ldrb	r0, [r6, #0]
 8026064:	f7ff ff7f 	bl	8025f66 <__hexdig_fun>
 8026068:	1e43      	subs	r3, r0, #1
 802606a:	b2db      	uxtb	r3, r3
 802606c:	0005      	movs	r5, r0
 802606e:	2b18      	cmp	r3, #24
 8026070:	d82a      	bhi.n	80260c8 <__gethex+0x138>
 8026072:	7870      	ldrb	r0, [r6, #1]
 8026074:	f7ff ff77 	bl	8025f66 <__hexdig_fun>
 8026078:	1e43      	subs	r3, r0, #1
 802607a:	b2db      	uxtb	r3, r3
 802607c:	3601      	adds	r6, #1
 802607e:	3d10      	subs	r5, #16
 8026080:	2b18      	cmp	r3, #24
 8026082:	d91d      	bls.n	80260c0 <__gethex+0x130>
 8026084:	9b04      	ldr	r3, [sp, #16]
 8026086:	2b00      	cmp	r3, #0
 8026088:	d000      	beq.n	802608c <__gethex+0xfc>
 802608a:	426d      	negs	r5, r5
 802608c:	197f      	adds	r7, r7, r5
 802608e:	9b06      	ldr	r3, [sp, #24]
 8026090:	601e      	str	r6, [r3, #0]
 8026092:	9b02      	ldr	r3, [sp, #8]
 8026094:	2b00      	cmp	r3, #0
 8026096:	d019      	beq.n	80260cc <__gethex+0x13c>
 8026098:	9b05      	ldr	r3, [sp, #20]
 802609a:	2606      	movs	r6, #6
 802609c:	425a      	negs	r2, r3
 802609e:	4153      	adcs	r3, r2
 80260a0:	425b      	negs	r3, r3
 80260a2:	401e      	ands	r6, r3
 80260a4:	0030      	movs	r0, r6
 80260a6:	b009      	add	sp, #36	@ 0x24
 80260a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260aa:	2301      	movs	r3, #1
 80260ac:	2700      	movs	r7, #0
 80260ae:	9c00      	ldr	r4, [sp, #0]
 80260b0:	9302      	str	r3, [sp, #8]
 80260b2:	e7c8      	b.n	8026046 <__gethex+0xb6>
 80260b4:	2300      	movs	r3, #0
 80260b6:	9304      	str	r3, [sp, #16]
 80260b8:	1ca6      	adds	r6, r4, #2
 80260ba:	e7d2      	b.n	8026062 <__gethex+0xd2>
 80260bc:	2301      	movs	r3, #1
 80260be:	e7fa      	b.n	80260b6 <__gethex+0x126>
 80260c0:	230a      	movs	r3, #10
 80260c2:	435d      	muls	r5, r3
 80260c4:	182d      	adds	r5, r5, r0
 80260c6:	e7d4      	b.n	8026072 <__gethex+0xe2>
 80260c8:	0026      	movs	r6, r4
 80260ca:	e7e0      	b.n	802608e <__gethex+0xfe>
 80260cc:	9b00      	ldr	r3, [sp, #0]
 80260ce:	9902      	ldr	r1, [sp, #8]
 80260d0:	1ae3      	subs	r3, r4, r3
 80260d2:	3b01      	subs	r3, #1
 80260d4:	2b07      	cmp	r3, #7
 80260d6:	dc0a      	bgt.n	80260ee <__gethex+0x15e>
 80260d8:	9803      	ldr	r0, [sp, #12]
 80260da:	f000 fb19 	bl	8026710 <_Balloc>
 80260de:	1e05      	subs	r5, r0, #0
 80260e0:	d108      	bne.n	80260f4 <__gethex+0x164>
 80260e2:	002a      	movs	r2, r5
 80260e4:	21e4      	movs	r1, #228	@ 0xe4
 80260e6:	4b5f      	ldr	r3, [pc, #380]	@ (8026264 <__gethex+0x2d4>)
 80260e8:	485f      	ldr	r0, [pc, #380]	@ (8026268 <__gethex+0x2d8>)
 80260ea:	f001 fbf1 	bl	80278d0 <__assert_func>
 80260ee:	3101      	adds	r1, #1
 80260f0:	105b      	asrs	r3, r3, #1
 80260f2:	e7ef      	b.n	80260d4 <__gethex+0x144>
 80260f4:	0003      	movs	r3, r0
 80260f6:	3314      	adds	r3, #20
 80260f8:	9302      	str	r3, [sp, #8]
 80260fa:	9305      	str	r3, [sp, #20]
 80260fc:	2300      	movs	r3, #0
 80260fe:	001e      	movs	r6, r3
 8026100:	9304      	str	r3, [sp, #16]
 8026102:	9b00      	ldr	r3, [sp, #0]
 8026104:	42a3      	cmp	r3, r4
 8026106:	d338      	bcc.n	802617a <__gethex+0x1ea>
 8026108:	9c05      	ldr	r4, [sp, #20]
 802610a:	9b02      	ldr	r3, [sp, #8]
 802610c:	c440      	stmia	r4!, {r6}
 802610e:	1ae4      	subs	r4, r4, r3
 8026110:	10a4      	asrs	r4, r4, #2
 8026112:	0030      	movs	r0, r6
 8026114:	612c      	str	r4, [r5, #16]
 8026116:	f000 fbf3 	bl	8026900 <__hi0bits>
 802611a:	9b01      	ldr	r3, [sp, #4]
 802611c:	0164      	lsls	r4, r4, #5
 802611e:	681b      	ldr	r3, [r3, #0]
 8026120:	1a26      	subs	r6, r4, r0
 8026122:	9300      	str	r3, [sp, #0]
 8026124:	429e      	cmp	r6, r3
 8026126:	dd52      	ble.n	80261ce <__gethex+0x23e>
 8026128:	1af6      	subs	r6, r6, r3
 802612a:	0031      	movs	r1, r6
 802612c:	0028      	movs	r0, r5
 802612e:	f000 ff96 	bl	802705e <__any_on>
 8026132:	1e04      	subs	r4, r0, #0
 8026134:	d00f      	beq.n	8026156 <__gethex+0x1c6>
 8026136:	2401      	movs	r4, #1
 8026138:	231f      	movs	r3, #31
 802613a:	0020      	movs	r0, r4
 802613c:	1e72      	subs	r2, r6, #1
 802613e:	4013      	ands	r3, r2
 8026140:	4098      	lsls	r0, r3
 8026142:	0003      	movs	r3, r0
 8026144:	1151      	asrs	r1, r2, #5
 8026146:	9802      	ldr	r0, [sp, #8]
 8026148:	0089      	lsls	r1, r1, #2
 802614a:	5809      	ldr	r1, [r1, r0]
 802614c:	4219      	tst	r1, r3
 802614e:	d002      	beq.n	8026156 <__gethex+0x1c6>
 8026150:	42a2      	cmp	r2, r4
 8026152:	dc34      	bgt.n	80261be <__gethex+0x22e>
 8026154:	2402      	movs	r4, #2
 8026156:	0031      	movs	r1, r6
 8026158:	0028      	movs	r0, r5
 802615a:	f7ff feb1 	bl	8025ec0 <rshift>
 802615e:	19bf      	adds	r7, r7, r6
 8026160:	9b01      	ldr	r3, [sp, #4]
 8026162:	689b      	ldr	r3, [r3, #8]
 8026164:	42bb      	cmp	r3, r7
 8026166:	da42      	bge.n	80261ee <__gethex+0x25e>
 8026168:	0029      	movs	r1, r5
 802616a:	9803      	ldr	r0, [sp, #12]
 802616c:	f000 fb14 	bl	8026798 <_Bfree>
 8026170:	2300      	movs	r3, #0
 8026172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026174:	26a3      	movs	r6, #163	@ 0xa3
 8026176:	6013      	str	r3, [r2, #0]
 8026178:	e794      	b.n	80260a4 <__gethex+0x114>
 802617a:	3c01      	subs	r4, #1
 802617c:	7823      	ldrb	r3, [r4, #0]
 802617e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026180:	d012      	beq.n	80261a8 <__gethex+0x218>
 8026182:	9b04      	ldr	r3, [sp, #16]
 8026184:	2b20      	cmp	r3, #32
 8026186:	d104      	bne.n	8026192 <__gethex+0x202>
 8026188:	9b05      	ldr	r3, [sp, #20]
 802618a:	c340      	stmia	r3!, {r6}
 802618c:	2600      	movs	r6, #0
 802618e:	9305      	str	r3, [sp, #20]
 8026190:	9604      	str	r6, [sp, #16]
 8026192:	7820      	ldrb	r0, [r4, #0]
 8026194:	f7ff fee7 	bl	8025f66 <__hexdig_fun>
 8026198:	230f      	movs	r3, #15
 802619a:	4018      	ands	r0, r3
 802619c:	9b04      	ldr	r3, [sp, #16]
 802619e:	4098      	lsls	r0, r3
 80261a0:	3304      	adds	r3, #4
 80261a2:	4306      	orrs	r6, r0
 80261a4:	9304      	str	r3, [sp, #16]
 80261a6:	e7ac      	b.n	8026102 <__gethex+0x172>
 80261a8:	9b00      	ldr	r3, [sp, #0]
 80261aa:	42a3      	cmp	r3, r4
 80261ac:	d8e9      	bhi.n	8026182 <__gethex+0x1f2>
 80261ae:	2201      	movs	r2, #1
 80261b0:	0020      	movs	r0, r4
 80261b2:	492b      	ldr	r1, [pc, #172]	@ (8026260 <__gethex+0x2d0>)
 80261b4:	f7fe fee2 	bl	8024f7c <strncmp>
 80261b8:	2800      	cmp	r0, #0
 80261ba:	d1e2      	bne.n	8026182 <__gethex+0x1f2>
 80261bc:	e7a1      	b.n	8026102 <__gethex+0x172>
 80261be:	0028      	movs	r0, r5
 80261c0:	1eb1      	subs	r1, r6, #2
 80261c2:	f000 ff4c 	bl	802705e <__any_on>
 80261c6:	2800      	cmp	r0, #0
 80261c8:	d0c4      	beq.n	8026154 <__gethex+0x1c4>
 80261ca:	2403      	movs	r4, #3
 80261cc:	e7c3      	b.n	8026156 <__gethex+0x1c6>
 80261ce:	9b00      	ldr	r3, [sp, #0]
 80261d0:	2400      	movs	r4, #0
 80261d2:	429e      	cmp	r6, r3
 80261d4:	dac4      	bge.n	8026160 <__gethex+0x1d0>
 80261d6:	1b9e      	subs	r6, r3, r6
 80261d8:	0029      	movs	r1, r5
 80261da:	0032      	movs	r2, r6
 80261dc:	9803      	ldr	r0, [sp, #12]
 80261de:	f000 fd05 	bl	8026bec <__lshift>
 80261e2:	0003      	movs	r3, r0
 80261e4:	3314      	adds	r3, #20
 80261e6:	0005      	movs	r5, r0
 80261e8:	1bbf      	subs	r7, r7, r6
 80261ea:	9302      	str	r3, [sp, #8]
 80261ec:	e7b8      	b.n	8026160 <__gethex+0x1d0>
 80261ee:	9b01      	ldr	r3, [sp, #4]
 80261f0:	685e      	ldr	r6, [r3, #4]
 80261f2:	42be      	cmp	r6, r7
 80261f4:	dd6f      	ble.n	80262d6 <__gethex+0x346>
 80261f6:	9b00      	ldr	r3, [sp, #0]
 80261f8:	1bf6      	subs	r6, r6, r7
 80261fa:	42b3      	cmp	r3, r6
 80261fc:	dc36      	bgt.n	802626c <__gethex+0x2dc>
 80261fe:	9b01      	ldr	r3, [sp, #4]
 8026200:	68db      	ldr	r3, [r3, #12]
 8026202:	2b02      	cmp	r3, #2
 8026204:	d024      	beq.n	8026250 <__gethex+0x2c0>
 8026206:	2b03      	cmp	r3, #3
 8026208:	d026      	beq.n	8026258 <__gethex+0x2c8>
 802620a:	2b01      	cmp	r3, #1
 802620c:	d117      	bne.n	802623e <__gethex+0x2ae>
 802620e:	9b00      	ldr	r3, [sp, #0]
 8026210:	42b3      	cmp	r3, r6
 8026212:	d114      	bne.n	802623e <__gethex+0x2ae>
 8026214:	2b01      	cmp	r3, #1
 8026216:	d10b      	bne.n	8026230 <__gethex+0x2a0>
 8026218:	9b01      	ldr	r3, [sp, #4]
 802621a:	9a07      	ldr	r2, [sp, #28]
 802621c:	685b      	ldr	r3, [r3, #4]
 802621e:	2662      	movs	r6, #98	@ 0x62
 8026220:	6013      	str	r3, [r2, #0]
 8026222:	2301      	movs	r3, #1
 8026224:	9a02      	ldr	r2, [sp, #8]
 8026226:	612b      	str	r3, [r5, #16]
 8026228:	6013      	str	r3, [r2, #0]
 802622a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802622c:	601d      	str	r5, [r3, #0]
 802622e:	e739      	b.n	80260a4 <__gethex+0x114>
 8026230:	9900      	ldr	r1, [sp, #0]
 8026232:	0028      	movs	r0, r5
 8026234:	3901      	subs	r1, #1
 8026236:	f000 ff12 	bl	802705e <__any_on>
 802623a:	2800      	cmp	r0, #0
 802623c:	d1ec      	bne.n	8026218 <__gethex+0x288>
 802623e:	0029      	movs	r1, r5
 8026240:	9803      	ldr	r0, [sp, #12]
 8026242:	f000 faa9 	bl	8026798 <_Bfree>
 8026246:	2300      	movs	r3, #0
 8026248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802624a:	2650      	movs	r6, #80	@ 0x50
 802624c:	6013      	str	r3, [r2, #0]
 802624e:	e729      	b.n	80260a4 <__gethex+0x114>
 8026250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026252:	2b00      	cmp	r3, #0
 8026254:	d1f3      	bne.n	802623e <__gethex+0x2ae>
 8026256:	e7df      	b.n	8026218 <__gethex+0x288>
 8026258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802625a:	2b00      	cmp	r3, #0
 802625c:	d1dc      	bne.n	8026218 <__gethex+0x288>
 802625e:	e7ee      	b.n	802623e <__gethex+0x2ae>
 8026260:	0802d8b8 	.word	0x0802d8b8
 8026264:	0802dac9 	.word	0x0802dac9
 8026268:	0802dada 	.word	0x0802dada
 802626c:	1e77      	subs	r7, r6, #1
 802626e:	2c00      	cmp	r4, #0
 8026270:	d12f      	bne.n	80262d2 <__gethex+0x342>
 8026272:	2f00      	cmp	r7, #0
 8026274:	d004      	beq.n	8026280 <__gethex+0x2f0>
 8026276:	0039      	movs	r1, r7
 8026278:	0028      	movs	r0, r5
 802627a:	f000 fef0 	bl	802705e <__any_on>
 802627e:	0004      	movs	r4, r0
 8026280:	231f      	movs	r3, #31
 8026282:	117a      	asrs	r2, r7, #5
 8026284:	401f      	ands	r7, r3
 8026286:	3b1e      	subs	r3, #30
 8026288:	40bb      	lsls	r3, r7
 802628a:	9902      	ldr	r1, [sp, #8]
 802628c:	0092      	lsls	r2, r2, #2
 802628e:	5852      	ldr	r2, [r2, r1]
 8026290:	421a      	tst	r2, r3
 8026292:	d001      	beq.n	8026298 <__gethex+0x308>
 8026294:	2302      	movs	r3, #2
 8026296:	431c      	orrs	r4, r3
 8026298:	9b00      	ldr	r3, [sp, #0]
 802629a:	0031      	movs	r1, r6
 802629c:	1b9b      	subs	r3, r3, r6
 802629e:	2602      	movs	r6, #2
 80262a0:	0028      	movs	r0, r5
 80262a2:	9300      	str	r3, [sp, #0]
 80262a4:	f7ff fe0c 	bl	8025ec0 <rshift>
 80262a8:	9b01      	ldr	r3, [sp, #4]
 80262aa:	685f      	ldr	r7, [r3, #4]
 80262ac:	2c00      	cmp	r4, #0
 80262ae:	d03f      	beq.n	8026330 <__gethex+0x3a0>
 80262b0:	9b01      	ldr	r3, [sp, #4]
 80262b2:	68db      	ldr	r3, [r3, #12]
 80262b4:	2b02      	cmp	r3, #2
 80262b6:	d010      	beq.n	80262da <__gethex+0x34a>
 80262b8:	2b03      	cmp	r3, #3
 80262ba:	d012      	beq.n	80262e2 <__gethex+0x352>
 80262bc:	2b01      	cmp	r3, #1
 80262be:	d106      	bne.n	80262ce <__gethex+0x33e>
 80262c0:	07a2      	lsls	r2, r4, #30
 80262c2:	d504      	bpl.n	80262ce <__gethex+0x33e>
 80262c4:	9a02      	ldr	r2, [sp, #8]
 80262c6:	6812      	ldr	r2, [r2, #0]
 80262c8:	4314      	orrs	r4, r2
 80262ca:	421c      	tst	r4, r3
 80262cc:	d10c      	bne.n	80262e8 <__gethex+0x358>
 80262ce:	2310      	movs	r3, #16
 80262d0:	e02d      	b.n	802632e <__gethex+0x39e>
 80262d2:	2401      	movs	r4, #1
 80262d4:	e7d4      	b.n	8026280 <__gethex+0x2f0>
 80262d6:	2601      	movs	r6, #1
 80262d8:	e7e8      	b.n	80262ac <__gethex+0x31c>
 80262da:	2301      	movs	r3, #1
 80262dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80262de:	1a9b      	subs	r3, r3, r2
 80262e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80262e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	d0f2      	beq.n	80262ce <__gethex+0x33e>
 80262e8:	692b      	ldr	r3, [r5, #16]
 80262ea:	2000      	movs	r0, #0
 80262ec:	9302      	str	r3, [sp, #8]
 80262ee:	009b      	lsls	r3, r3, #2
 80262f0:	9304      	str	r3, [sp, #16]
 80262f2:	002b      	movs	r3, r5
 80262f4:	9a04      	ldr	r2, [sp, #16]
 80262f6:	3314      	adds	r3, #20
 80262f8:	1899      	adds	r1, r3, r2
 80262fa:	681a      	ldr	r2, [r3, #0]
 80262fc:	1c54      	adds	r4, r2, #1
 80262fe:	d01c      	beq.n	802633a <__gethex+0x3aa>
 8026300:	3201      	adds	r2, #1
 8026302:	601a      	str	r2, [r3, #0]
 8026304:	002b      	movs	r3, r5
 8026306:	3314      	adds	r3, #20
 8026308:	2e02      	cmp	r6, #2
 802630a:	d13f      	bne.n	802638c <__gethex+0x3fc>
 802630c:	9a01      	ldr	r2, [sp, #4]
 802630e:	9900      	ldr	r1, [sp, #0]
 8026310:	6812      	ldr	r2, [r2, #0]
 8026312:	3a01      	subs	r2, #1
 8026314:	428a      	cmp	r2, r1
 8026316:	d109      	bne.n	802632c <__gethex+0x39c>
 8026318:	000a      	movs	r2, r1
 802631a:	201f      	movs	r0, #31
 802631c:	4010      	ands	r0, r2
 802631e:	2201      	movs	r2, #1
 8026320:	4082      	lsls	r2, r0
 8026322:	1149      	asrs	r1, r1, #5
 8026324:	0089      	lsls	r1, r1, #2
 8026326:	58cb      	ldr	r3, [r1, r3]
 8026328:	4213      	tst	r3, r2
 802632a:	d13d      	bne.n	80263a8 <__gethex+0x418>
 802632c:	2320      	movs	r3, #32
 802632e:	431e      	orrs	r6, r3
 8026330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026332:	601d      	str	r5, [r3, #0]
 8026334:	9b07      	ldr	r3, [sp, #28]
 8026336:	601f      	str	r7, [r3, #0]
 8026338:	e6b4      	b.n	80260a4 <__gethex+0x114>
 802633a:	c301      	stmia	r3!, {r0}
 802633c:	4299      	cmp	r1, r3
 802633e:	d8dc      	bhi.n	80262fa <__gethex+0x36a>
 8026340:	68ab      	ldr	r3, [r5, #8]
 8026342:	9a02      	ldr	r2, [sp, #8]
 8026344:	429a      	cmp	r2, r3
 8026346:	db18      	blt.n	802637a <__gethex+0x3ea>
 8026348:	6869      	ldr	r1, [r5, #4]
 802634a:	9803      	ldr	r0, [sp, #12]
 802634c:	3101      	adds	r1, #1
 802634e:	f000 f9df 	bl	8026710 <_Balloc>
 8026352:	1e04      	subs	r4, r0, #0
 8026354:	d104      	bne.n	8026360 <__gethex+0x3d0>
 8026356:	0022      	movs	r2, r4
 8026358:	2184      	movs	r1, #132	@ 0x84
 802635a:	4b1d      	ldr	r3, [pc, #116]	@ (80263d0 <__gethex+0x440>)
 802635c:	481d      	ldr	r0, [pc, #116]	@ (80263d4 <__gethex+0x444>)
 802635e:	e6c4      	b.n	80260ea <__gethex+0x15a>
 8026360:	0029      	movs	r1, r5
 8026362:	692a      	ldr	r2, [r5, #16]
 8026364:	310c      	adds	r1, #12
 8026366:	3202      	adds	r2, #2
 8026368:	0092      	lsls	r2, r2, #2
 802636a:	300c      	adds	r0, #12
 802636c:	f7fe fecc 	bl	8025108 <memcpy>
 8026370:	0029      	movs	r1, r5
 8026372:	9803      	ldr	r0, [sp, #12]
 8026374:	f000 fa10 	bl	8026798 <_Bfree>
 8026378:	0025      	movs	r5, r4
 802637a:	692b      	ldr	r3, [r5, #16]
 802637c:	1c5a      	adds	r2, r3, #1
 802637e:	612a      	str	r2, [r5, #16]
 8026380:	2201      	movs	r2, #1
 8026382:	3304      	adds	r3, #4
 8026384:	009b      	lsls	r3, r3, #2
 8026386:	18eb      	adds	r3, r5, r3
 8026388:	605a      	str	r2, [r3, #4]
 802638a:	e7bb      	b.n	8026304 <__gethex+0x374>
 802638c:	692a      	ldr	r2, [r5, #16]
 802638e:	9902      	ldr	r1, [sp, #8]
 8026390:	428a      	cmp	r2, r1
 8026392:	dd0b      	ble.n	80263ac <__gethex+0x41c>
 8026394:	2101      	movs	r1, #1
 8026396:	0028      	movs	r0, r5
 8026398:	f7ff fd92 	bl	8025ec0 <rshift>
 802639c:	9b01      	ldr	r3, [sp, #4]
 802639e:	3701      	adds	r7, #1
 80263a0:	689b      	ldr	r3, [r3, #8]
 80263a2:	42bb      	cmp	r3, r7
 80263a4:	da00      	bge.n	80263a8 <__gethex+0x418>
 80263a6:	e6df      	b.n	8026168 <__gethex+0x1d8>
 80263a8:	2601      	movs	r6, #1
 80263aa:	e7bf      	b.n	802632c <__gethex+0x39c>
 80263ac:	221f      	movs	r2, #31
 80263ae:	9c00      	ldr	r4, [sp, #0]
 80263b0:	9900      	ldr	r1, [sp, #0]
 80263b2:	4014      	ands	r4, r2
 80263b4:	4211      	tst	r1, r2
 80263b6:	d0f7      	beq.n	80263a8 <__gethex+0x418>
 80263b8:	9a04      	ldr	r2, [sp, #16]
 80263ba:	189b      	adds	r3, r3, r2
 80263bc:	3b04      	subs	r3, #4
 80263be:	6818      	ldr	r0, [r3, #0]
 80263c0:	f000 fa9e 	bl	8026900 <__hi0bits>
 80263c4:	2320      	movs	r3, #32
 80263c6:	1b1b      	subs	r3, r3, r4
 80263c8:	4298      	cmp	r0, r3
 80263ca:	dbe3      	blt.n	8026394 <__gethex+0x404>
 80263cc:	e7ec      	b.n	80263a8 <__gethex+0x418>
 80263ce:	46c0      	nop			@ (mov r8, r8)
 80263d0:	0802dac9 	.word	0x0802dac9
 80263d4:	0802dada 	.word	0x0802dada

080263d8 <L_shift>:
 80263d8:	2308      	movs	r3, #8
 80263da:	b570      	push	{r4, r5, r6, lr}
 80263dc:	2520      	movs	r5, #32
 80263de:	1a9a      	subs	r2, r3, r2
 80263e0:	0092      	lsls	r2, r2, #2
 80263e2:	1aad      	subs	r5, r5, r2
 80263e4:	6843      	ldr	r3, [r0, #4]
 80263e6:	6804      	ldr	r4, [r0, #0]
 80263e8:	001e      	movs	r6, r3
 80263ea:	40ae      	lsls	r6, r5
 80263ec:	40d3      	lsrs	r3, r2
 80263ee:	4334      	orrs	r4, r6
 80263f0:	6004      	str	r4, [r0, #0]
 80263f2:	6043      	str	r3, [r0, #4]
 80263f4:	3004      	adds	r0, #4
 80263f6:	4288      	cmp	r0, r1
 80263f8:	d3f4      	bcc.n	80263e4 <L_shift+0xc>
 80263fa:	bd70      	pop	{r4, r5, r6, pc}

080263fc <__match>:
 80263fc:	b530      	push	{r4, r5, lr}
 80263fe:	6803      	ldr	r3, [r0, #0]
 8026400:	780c      	ldrb	r4, [r1, #0]
 8026402:	3301      	adds	r3, #1
 8026404:	2c00      	cmp	r4, #0
 8026406:	d102      	bne.n	802640e <__match+0x12>
 8026408:	6003      	str	r3, [r0, #0]
 802640a:	2001      	movs	r0, #1
 802640c:	bd30      	pop	{r4, r5, pc}
 802640e:	781a      	ldrb	r2, [r3, #0]
 8026410:	0015      	movs	r5, r2
 8026412:	3d41      	subs	r5, #65	@ 0x41
 8026414:	2d19      	cmp	r5, #25
 8026416:	d800      	bhi.n	802641a <__match+0x1e>
 8026418:	3220      	adds	r2, #32
 802641a:	3101      	adds	r1, #1
 802641c:	42a2      	cmp	r2, r4
 802641e:	d0ef      	beq.n	8026400 <__match+0x4>
 8026420:	2000      	movs	r0, #0
 8026422:	e7f3      	b.n	802640c <__match+0x10>

08026424 <__hexnan>:
 8026424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026426:	680b      	ldr	r3, [r1, #0]
 8026428:	b08b      	sub	sp, #44	@ 0x2c
 802642a:	9201      	str	r2, [sp, #4]
 802642c:	9901      	ldr	r1, [sp, #4]
 802642e:	115a      	asrs	r2, r3, #5
 8026430:	0092      	lsls	r2, r2, #2
 8026432:	188a      	adds	r2, r1, r2
 8026434:	9202      	str	r2, [sp, #8]
 8026436:	0019      	movs	r1, r3
 8026438:	221f      	movs	r2, #31
 802643a:	4011      	ands	r1, r2
 802643c:	9008      	str	r0, [sp, #32]
 802643e:	9106      	str	r1, [sp, #24]
 8026440:	4213      	tst	r3, r2
 8026442:	d002      	beq.n	802644a <__hexnan+0x26>
 8026444:	9b02      	ldr	r3, [sp, #8]
 8026446:	3304      	adds	r3, #4
 8026448:	9302      	str	r3, [sp, #8]
 802644a:	9b02      	ldr	r3, [sp, #8]
 802644c:	2500      	movs	r5, #0
 802644e:	1f1f      	subs	r7, r3, #4
 8026450:	003e      	movs	r6, r7
 8026452:	003c      	movs	r4, r7
 8026454:	9b08      	ldr	r3, [sp, #32]
 8026456:	603d      	str	r5, [r7, #0]
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	9507      	str	r5, [sp, #28]
 802645c:	9305      	str	r3, [sp, #20]
 802645e:	9503      	str	r5, [sp, #12]
 8026460:	9b05      	ldr	r3, [sp, #20]
 8026462:	3301      	adds	r3, #1
 8026464:	9309      	str	r3, [sp, #36]	@ 0x24
 8026466:	9b05      	ldr	r3, [sp, #20]
 8026468:	785b      	ldrb	r3, [r3, #1]
 802646a:	9304      	str	r3, [sp, #16]
 802646c:	2b00      	cmp	r3, #0
 802646e:	d028      	beq.n	80264c2 <__hexnan+0x9e>
 8026470:	9804      	ldr	r0, [sp, #16]
 8026472:	f7ff fd78 	bl	8025f66 <__hexdig_fun>
 8026476:	2800      	cmp	r0, #0
 8026478:	d155      	bne.n	8026526 <__hexnan+0x102>
 802647a:	9b04      	ldr	r3, [sp, #16]
 802647c:	2b20      	cmp	r3, #32
 802647e:	d819      	bhi.n	80264b4 <__hexnan+0x90>
 8026480:	9b03      	ldr	r3, [sp, #12]
 8026482:	9a07      	ldr	r2, [sp, #28]
 8026484:	4293      	cmp	r3, r2
 8026486:	dd12      	ble.n	80264ae <__hexnan+0x8a>
 8026488:	42b4      	cmp	r4, r6
 802648a:	d206      	bcs.n	802649a <__hexnan+0x76>
 802648c:	2d07      	cmp	r5, #7
 802648e:	dc04      	bgt.n	802649a <__hexnan+0x76>
 8026490:	002a      	movs	r2, r5
 8026492:	0031      	movs	r1, r6
 8026494:	0020      	movs	r0, r4
 8026496:	f7ff ff9f 	bl	80263d8 <L_shift>
 802649a:	9b01      	ldr	r3, [sp, #4]
 802649c:	2508      	movs	r5, #8
 802649e:	429c      	cmp	r4, r3
 80264a0:	d905      	bls.n	80264ae <__hexnan+0x8a>
 80264a2:	1f26      	subs	r6, r4, #4
 80264a4:	2500      	movs	r5, #0
 80264a6:	0034      	movs	r4, r6
 80264a8:	9b03      	ldr	r3, [sp, #12]
 80264aa:	6035      	str	r5, [r6, #0]
 80264ac:	9307      	str	r3, [sp, #28]
 80264ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264b0:	9305      	str	r3, [sp, #20]
 80264b2:	e7d5      	b.n	8026460 <__hexnan+0x3c>
 80264b4:	9b04      	ldr	r3, [sp, #16]
 80264b6:	2b29      	cmp	r3, #41	@ 0x29
 80264b8:	d15a      	bne.n	8026570 <__hexnan+0x14c>
 80264ba:	9b05      	ldr	r3, [sp, #20]
 80264bc:	9a08      	ldr	r2, [sp, #32]
 80264be:	3302      	adds	r3, #2
 80264c0:	6013      	str	r3, [r2, #0]
 80264c2:	9b03      	ldr	r3, [sp, #12]
 80264c4:	2b00      	cmp	r3, #0
 80264c6:	d053      	beq.n	8026570 <__hexnan+0x14c>
 80264c8:	42b4      	cmp	r4, r6
 80264ca:	d206      	bcs.n	80264da <__hexnan+0xb6>
 80264cc:	2d07      	cmp	r5, #7
 80264ce:	dc04      	bgt.n	80264da <__hexnan+0xb6>
 80264d0:	002a      	movs	r2, r5
 80264d2:	0031      	movs	r1, r6
 80264d4:	0020      	movs	r0, r4
 80264d6:	f7ff ff7f 	bl	80263d8 <L_shift>
 80264da:	9b01      	ldr	r3, [sp, #4]
 80264dc:	429c      	cmp	r4, r3
 80264de:	d936      	bls.n	802654e <__hexnan+0x12a>
 80264e0:	001a      	movs	r2, r3
 80264e2:	0023      	movs	r3, r4
 80264e4:	cb02      	ldmia	r3!, {r1}
 80264e6:	c202      	stmia	r2!, {r1}
 80264e8:	429f      	cmp	r7, r3
 80264ea:	d2fb      	bcs.n	80264e4 <__hexnan+0xc0>
 80264ec:	9b02      	ldr	r3, [sp, #8]
 80264ee:	1c61      	adds	r1, r4, #1
 80264f0:	1eda      	subs	r2, r3, #3
 80264f2:	2304      	movs	r3, #4
 80264f4:	4291      	cmp	r1, r2
 80264f6:	d805      	bhi.n	8026504 <__hexnan+0xe0>
 80264f8:	9b02      	ldr	r3, [sp, #8]
 80264fa:	3b04      	subs	r3, #4
 80264fc:	1b1b      	subs	r3, r3, r4
 80264fe:	089b      	lsrs	r3, r3, #2
 8026500:	3301      	adds	r3, #1
 8026502:	009b      	lsls	r3, r3, #2
 8026504:	9a01      	ldr	r2, [sp, #4]
 8026506:	18d3      	adds	r3, r2, r3
 8026508:	2200      	movs	r2, #0
 802650a:	c304      	stmia	r3!, {r2}
 802650c:	429f      	cmp	r7, r3
 802650e:	d2fc      	bcs.n	802650a <__hexnan+0xe6>
 8026510:	683b      	ldr	r3, [r7, #0]
 8026512:	2b00      	cmp	r3, #0
 8026514:	d104      	bne.n	8026520 <__hexnan+0xfc>
 8026516:	9b01      	ldr	r3, [sp, #4]
 8026518:	429f      	cmp	r7, r3
 802651a:	d127      	bne.n	802656c <__hexnan+0x148>
 802651c:	2301      	movs	r3, #1
 802651e:	603b      	str	r3, [r7, #0]
 8026520:	2005      	movs	r0, #5
 8026522:	b00b      	add	sp, #44	@ 0x2c
 8026524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026526:	9b03      	ldr	r3, [sp, #12]
 8026528:	3501      	adds	r5, #1
 802652a:	3301      	adds	r3, #1
 802652c:	9303      	str	r3, [sp, #12]
 802652e:	2d08      	cmp	r5, #8
 8026530:	dd06      	ble.n	8026540 <__hexnan+0x11c>
 8026532:	9b01      	ldr	r3, [sp, #4]
 8026534:	429c      	cmp	r4, r3
 8026536:	d9ba      	bls.n	80264ae <__hexnan+0x8a>
 8026538:	2300      	movs	r3, #0
 802653a:	2501      	movs	r5, #1
 802653c:	3c04      	subs	r4, #4
 802653e:	6023      	str	r3, [r4, #0]
 8026540:	220f      	movs	r2, #15
 8026542:	6823      	ldr	r3, [r4, #0]
 8026544:	4010      	ands	r0, r2
 8026546:	011b      	lsls	r3, r3, #4
 8026548:	4303      	orrs	r3, r0
 802654a:	6023      	str	r3, [r4, #0]
 802654c:	e7af      	b.n	80264ae <__hexnan+0x8a>
 802654e:	9b06      	ldr	r3, [sp, #24]
 8026550:	2b00      	cmp	r3, #0
 8026552:	d0dd      	beq.n	8026510 <__hexnan+0xec>
 8026554:	2320      	movs	r3, #32
 8026556:	9a06      	ldr	r2, [sp, #24]
 8026558:	9902      	ldr	r1, [sp, #8]
 802655a:	1a9b      	subs	r3, r3, r2
 802655c:	2201      	movs	r2, #1
 802655e:	4252      	negs	r2, r2
 8026560:	40da      	lsrs	r2, r3
 8026562:	3904      	subs	r1, #4
 8026564:	680b      	ldr	r3, [r1, #0]
 8026566:	4013      	ands	r3, r2
 8026568:	600b      	str	r3, [r1, #0]
 802656a:	e7d1      	b.n	8026510 <__hexnan+0xec>
 802656c:	3f04      	subs	r7, #4
 802656e:	e7cf      	b.n	8026510 <__hexnan+0xec>
 8026570:	2004      	movs	r0, #4
 8026572:	e7d6      	b.n	8026522 <__hexnan+0xfe>

08026574 <malloc>:
 8026574:	b510      	push	{r4, lr}
 8026576:	4b03      	ldr	r3, [pc, #12]	@ (8026584 <malloc+0x10>)
 8026578:	0001      	movs	r1, r0
 802657a:	6818      	ldr	r0, [r3, #0]
 802657c:	f000 f826 	bl	80265cc <_malloc_r>
 8026580:	bd10      	pop	{r4, pc}
 8026582:	46c0      	nop			@ (mov r8, r8)
 8026584:	200003e0 	.word	0x200003e0

08026588 <sbrk_aligned>:
 8026588:	b570      	push	{r4, r5, r6, lr}
 802658a:	4e0f      	ldr	r6, [pc, #60]	@ (80265c8 <sbrk_aligned+0x40>)
 802658c:	000d      	movs	r5, r1
 802658e:	6831      	ldr	r1, [r6, #0]
 8026590:	0004      	movs	r4, r0
 8026592:	2900      	cmp	r1, #0
 8026594:	d102      	bne.n	802659c <sbrk_aligned+0x14>
 8026596:	f001 f989 	bl	80278ac <_sbrk_r>
 802659a:	6030      	str	r0, [r6, #0]
 802659c:	0029      	movs	r1, r5
 802659e:	0020      	movs	r0, r4
 80265a0:	f001 f984 	bl	80278ac <_sbrk_r>
 80265a4:	1c43      	adds	r3, r0, #1
 80265a6:	d103      	bne.n	80265b0 <sbrk_aligned+0x28>
 80265a8:	2501      	movs	r5, #1
 80265aa:	426d      	negs	r5, r5
 80265ac:	0028      	movs	r0, r5
 80265ae:	bd70      	pop	{r4, r5, r6, pc}
 80265b0:	2303      	movs	r3, #3
 80265b2:	1cc5      	adds	r5, r0, #3
 80265b4:	439d      	bics	r5, r3
 80265b6:	42a8      	cmp	r0, r5
 80265b8:	d0f8      	beq.n	80265ac <sbrk_aligned+0x24>
 80265ba:	1a29      	subs	r1, r5, r0
 80265bc:	0020      	movs	r0, r4
 80265be:	f001 f975 	bl	80278ac <_sbrk_r>
 80265c2:	3001      	adds	r0, #1
 80265c4:	d1f2      	bne.n	80265ac <sbrk_aligned+0x24>
 80265c6:	e7ef      	b.n	80265a8 <sbrk_aligned+0x20>
 80265c8:	20003638 	.word	0x20003638

080265cc <_malloc_r>:
 80265cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80265ce:	2203      	movs	r2, #3
 80265d0:	1ccb      	adds	r3, r1, #3
 80265d2:	4393      	bics	r3, r2
 80265d4:	3308      	adds	r3, #8
 80265d6:	0005      	movs	r5, r0
 80265d8:	001f      	movs	r7, r3
 80265da:	2b0c      	cmp	r3, #12
 80265dc:	d234      	bcs.n	8026648 <_malloc_r+0x7c>
 80265de:	270c      	movs	r7, #12
 80265e0:	42b9      	cmp	r1, r7
 80265e2:	d833      	bhi.n	802664c <_malloc_r+0x80>
 80265e4:	0028      	movs	r0, r5
 80265e6:	f000 f883 	bl	80266f0 <__malloc_lock>
 80265ea:	4e37      	ldr	r6, [pc, #220]	@ (80266c8 <_malloc_r+0xfc>)
 80265ec:	6833      	ldr	r3, [r6, #0]
 80265ee:	001c      	movs	r4, r3
 80265f0:	2c00      	cmp	r4, #0
 80265f2:	d12f      	bne.n	8026654 <_malloc_r+0x88>
 80265f4:	0039      	movs	r1, r7
 80265f6:	0028      	movs	r0, r5
 80265f8:	f7ff ffc6 	bl	8026588 <sbrk_aligned>
 80265fc:	0004      	movs	r4, r0
 80265fe:	1c43      	adds	r3, r0, #1
 8026600:	d15f      	bne.n	80266c2 <_malloc_r+0xf6>
 8026602:	6834      	ldr	r4, [r6, #0]
 8026604:	9400      	str	r4, [sp, #0]
 8026606:	9b00      	ldr	r3, [sp, #0]
 8026608:	2b00      	cmp	r3, #0
 802660a:	d14a      	bne.n	80266a2 <_malloc_r+0xd6>
 802660c:	2c00      	cmp	r4, #0
 802660e:	d052      	beq.n	80266b6 <_malloc_r+0xea>
 8026610:	6823      	ldr	r3, [r4, #0]
 8026612:	0028      	movs	r0, r5
 8026614:	18e3      	adds	r3, r4, r3
 8026616:	9900      	ldr	r1, [sp, #0]
 8026618:	9301      	str	r3, [sp, #4]
 802661a:	f001 f947 	bl	80278ac <_sbrk_r>
 802661e:	9b01      	ldr	r3, [sp, #4]
 8026620:	4283      	cmp	r3, r0
 8026622:	d148      	bne.n	80266b6 <_malloc_r+0xea>
 8026624:	6823      	ldr	r3, [r4, #0]
 8026626:	0028      	movs	r0, r5
 8026628:	1aff      	subs	r7, r7, r3
 802662a:	0039      	movs	r1, r7
 802662c:	f7ff ffac 	bl	8026588 <sbrk_aligned>
 8026630:	3001      	adds	r0, #1
 8026632:	d040      	beq.n	80266b6 <_malloc_r+0xea>
 8026634:	6823      	ldr	r3, [r4, #0]
 8026636:	19db      	adds	r3, r3, r7
 8026638:	6023      	str	r3, [r4, #0]
 802663a:	6833      	ldr	r3, [r6, #0]
 802663c:	685a      	ldr	r2, [r3, #4]
 802663e:	2a00      	cmp	r2, #0
 8026640:	d133      	bne.n	80266aa <_malloc_r+0xde>
 8026642:	9b00      	ldr	r3, [sp, #0]
 8026644:	6033      	str	r3, [r6, #0]
 8026646:	e019      	b.n	802667c <_malloc_r+0xb0>
 8026648:	2b00      	cmp	r3, #0
 802664a:	dac9      	bge.n	80265e0 <_malloc_r+0x14>
 802664c:	230c      	movs	r3, #12
 802664e:	602b      	str	r3, [r5, #0]
 8026650:	2000      	movs	r0, #0
 8026652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026654:	6821      	ldr	r1, [r4, #0]
 8026656:	1bc9      	subs	r1, r1, r7
 8026658:	d420      	bmi.n	802669c <_malloc_r+0xd0>
 802665a:	290b      	cmp	r1, #11
 802665c:	d90a      	bls.n	8026674 <_malloc_r+0xa8>
 802665e:	19e2      	adds	r2, r4, r7
 8026660:	6027      	str	r7, [r4, #0]
 8026662:	42a3      	cmp	r3, r4
 8026664:	d104      	bne.n	8026670 <_malloc_r+0xa4>
 8026666:	6032      	str	r2, [r6, #0]
 8026668:	6863      	ldr	r3, [r4, #4]
 802666a:	6011      	str	r1, [r2, #0]
 802666c:	6053      	str	r3, [r2, #4]
 802666e:	e005      	b.n	802667c <_malloc_r+0xb0>
 8026670:	605a      	str	r2, [r3, #4]
 8026672:	e7f9      	b.n	8026668 <_malloc_r+0x9c>
 8026674:	6862      	ldr	r2, [r4, #4]
 8026676:	42a3      	cmp	r3, r4
 8026678:	d10e      	bne.n	8026698 <_malloc_r+0xcc>
 802667a:	6032      	str	r2, [r6, #0]
 802667c:	0028      	movs	r0, r5
 802667e:	f000 f83f 	bl	8026700 <__malloc_unlock>
 8026682:	0020      	movs	r0, r4
 8026684:	2207      	movs	r2, #7
 8026686:	300b      	adds	r0, #11
 8026688:	1d23      	adds	r3, r4, #4
 802668a:	4390      	bics	r0, r2
 802668c:	1ac2      	subs	r2, r0, r3
 802668e:	4298      	cmp	r0, r3
 8026690:	d0df      	beq.n	8026652 <_malloc_r+0x86>
 8026692:	1a1b      	subs	r3, r3, r0
 8026694:	50a3      	str	r3, [r4, r2]
 8026696:	e7dc      	b.n	8026652 <_malloc_r+0x86>
 8026698:	605a      	str	r2, [r3, #4]
 802669a:	e7ef      	b.n	802667c <_malloc_r+0xb0>
 802669c:	0023      	movs	r3, r4
 802669e:	6864      	ldr	r4, [r4, #4]
 80266a0:	e7a6      	b.n	80265f0 <_malloc_r+0x24>
 80266a2:	9c00      	ldr	r4, [sp, #0]
 80266a4:	6863      	ldr	r3, [r4, #4]
 80266a6:	9300      	str	r3, [sp, #0]
 80266a8:	e7ad      	b.n	8026606 <_malloc_r+0x3a>
 80266aa:	001a      	movs	r2, r3
 80266ac:	685b      	ldr	r3, [r3, #4]
 80266ae:	42a3      	cmp	r3, r4
 80266b0:	d1fb      	bne.n	80266aa <_malloc_r+0xde>
 80266b2:	2300      	movs	r3, #0
 80266b4:	e7da      	b.n	802666c <_malloc_r+0xa0>
 80266b6:	230c      	movs	r3, #12
 80266b8:	0028      	movs	r0, r5
 80266ba:	602b      	str	r3, [r5, #0]
 80266bc:	f000 f820 	bl	8026700 <__malloc_unlock>
 80266c0:	e7c6      	b.n	8026650 <_malloc_r+0x84>
 80266c2:	6007      	str	r7, [r0, #0]
 80266c4:	e7da      	b.n	802667c <_malloc_r+0xb0>
 80266c6:	46c0      	nop			@ (mov r8, r8)
 80266c8:	2000363c 	.word	0x2000363c

080266cc <__ascii_mbtowc>:
 80266cc:	b082      	sub	sp, #8
 80266ce:	2900      	cmp	r1, #0
 80266d0:	d100      	bne.n	80266d4 <__ascii_mbtowc+0x8>
 80266d2:	a901      	add	r1, sp, #4
 80266d4:	1e10      	subs	r0, r2, #0
 80266d6:	d006      	beq.n	80266e6 <__ascii_mbtowc+0x1a>
 80266d8:	2b00      	cmp	r3, #0
 80266da:	d006      	beq.n	80266ea <__ascii_mbtowc+0x1e>
 80266dc:	7813      	ldrb	r3, [r2, #0]
 80266de:	600b      	str	r3, [r1, #0]
 80266e0:	7810      	ldrb	r0, [r2, #0]
 80266e2:	1e43      	subs	r3, r0, #1
 80266e4:	4198      	sbcs	r0, r3
 80266e6:	b002      	add	sp, #8
 80266e8:	4770      	bx	lr
 80266ea:	2002      	movs	r0, #2
 80266ec:	4240      	negs	r0, r0
 80266ee:	e7fa      	b.n	80266e6 <__ascii_mbtowc+0x1a>

080266f0 <__malloc_lock>:
 80266f0:	b510      	push	{r4, lr}
 80266f2:	4802      	ldr	r0, [pc, #8]	@ (80266fc <__malloc_lock+0xc>)
 80266f4:	f7fe fcfb 	bl	80250ee <__retarget_lock_acquire_recursive>
 80266f8:	bd10      	pop	{r4, pc}
 80266fa:	46c0      	nop			@ (mov r8, r8)
 80266fc:	20003634 	.word	0x20003634

08026700 <__malloc_unlock>:
 8026700:	b510      	push	{r4, lr}
 8026702:	4802      	ldr	r0, [pc, #8]	@ (802670c <__malloc_unlock+0xc>)
 8026704:	f7fe fcf4 	bl	80250f0 <__retarget_lock_release_recursive>
 8026708:	bd10      	pop	{r4, pc}
 802670a:	46c0      	nop			@ (mov r8, r8)
 802670c:	20003634 	.word	0x20003634

08026710 <_Balloc>:
 8026710:	b570      	push	{r4, r5, r6, lr}
 8026712:	69c5      	ldr	r5, [r0, #28]
 8026714:	0006      	movs	r6, r0
 8026716:	000c      	movs	r4, r1
 8026718:	2d00      	cmp	r5, #0
 802671a:	d10e      	bne.n	802673a <_Balloc+0x2a>
 802671c:	2010      	movs	r0, #16
 802671e:	f7ff ff29 	bl	8026574 <malloc>
 8026722:	1e02      	subs	r2, r0, #0
 8026724:	61f0      	str	r0, [r6, #28]
 8026726:	d104      	bne.n	8026732 <_Balloc+0x22>
 8026728:	216b      	movs	r1, #107	@ 0x6b
 802672a:	4b19      	ldr	r3, [pc, #100]	@ (8026790 <_Balloc+0x80>)
 802672c:	4819      	ldr	r0, [pc, #100]	@ (8026794 <_Balloc+0x84>)
 802672e:	f001 f8cf 	bl	80278d0 <__assert_func>
 8026732:	6045      	str	r5, [r0, #4]
 8026734:	6085      	str	r5, [r0, #8]
 8026736:	6005      	str	r5, [r0, #0]
 8026738:	60c5      	str	r5, [r0, #12]
 802673a:	69f5      	ldr	r5, [r6, #28]
 802673c:	68eb      	ldr	r3, [r5, #12]
 802673e:	2b00      	cmp	r3, #0
 8026740:	d013      	beq.n	802676a <_Balloc+0x5a>
 8026742:	69f3      	ldr	r3, [r6, #28]
 8026744:	00a2      	lsls	r2, r4, #2
 8026746:	68db      	ldr	r3, [r3, #12]
 8026748:	189b      	adds	r3, r3, r2
 802674a:	6818      	ldr	r0, [r3, #0]
 802674c:	2800      	cmp	r0, #0
 802674e:	d118      	bne.n	8026782 <_Balloc+0x72>
 8026750:	2101      	movs	r1, #1
 8026752:	000d      	movs	r5, r1
 8026754:	40a5      	lsls	r5, r4
 8026756:	1d6a      	adds	r2, r5, #5
 8026758:	0030      	movs	r0, r6
 802675a:	0092      	lsls	r2, r2, #2
 802675c:	f001 f8d6 	bl	802790c <_calloc_r>
 8026760:	2800      	cmp	r0, #0
 8026762:	d00c      	beq.n	802677e <_Balloc+0x6e>
 8026764:	6044      	str	r4, [r0, #4]
 8026766:	6085      	str	r5, [r0, #8]
 8026768:	e00d      	b.n	8026786 <_Balloc+0x76>
 802676a:	2221      	movs	r2, #33	@ 0x21
 802676c:	2104      	movs	r1, #4
 802676e:	0030      	movs	r0, r6
 8026770:	f001 f8cc 	bl	802790c <_calloc_r>
 8026774:	69f3      	ldr	r3, [r6, #28]
 8026776:	60e8      	str	r0, [r5, #12]
 8026778:	68db      	ldr	r3, [r3, #12]
 802677a:	2b00      	cmp	r3, #0
 802677c:	d1e1      	bne.n	8026742 <_Balloc+0x32>
 802677e:	2000      	movs	r0, #0
 8026780:	bd70      	pop	{r4, r5, r6, pc}
 8026782:	6802      	ldr	r2, [r0, #0]
 8026784:	601a      	str	r2, [r3, #0]
 8026786:	2300      	movs	r3, #0
 8026788:	6103      	str	r3, [r0, #16]
 802678a:	60c3      	str	r3, [r0, #12]
 802678c:	e7f8      	b.n	8026780 <_Balloc+0x70>
 802678e:	46c0      	nop			@ (mov r8, r8)
 8026790:	0802da5a 	.word	0x0802da5a
 8026794:	0802db3a 	.word	0x0802db3a

08026798 <_Bfree>:
 8026798:	b570      	push	{r4, r5, r6, lr}
 802679a:	69c6      	ldr	r6, [r0, #28]
 802679c:	0005      	movs	r5, r0
 802679e:	000c      	movs	r4, r1
 80267a0:	2e00      	cmp	r6, #0
 80267a2:	d10e      	bne.n	80267c2 <_Bfree+0x2a>
 80267a4:	2010      	movs	r0, #16
 80267a6:	f7ff fee5 	bl	8026574 <malloc>
 80267aa:	1e02      	subs	r2, r0, #0
 80267ac:	61e8      	str	r0, [r5, #28]
 80267ae:	d104      	bne.n	80267ba <_Bfree+0x22>
 80267b0:	218f      	movs	r1, #143	@ 0x8f
 80267b2:	4b09      	ldr	r3, [pc, #36]	@ (80267d8 <_Bfree+0x40>)
 80267b4:	4809      	ldr	r0, [pc, #36]	@ (80267dc <_Bfree+0x44>)
 80267b6:	f001 f88b 	bl	80278d0 <__assert_func>
 80267ba:	6046      	str	r6, [r0, #4]
 80267bc:	6086      	str	r6, [r0, #8]
 80267be:	6006      	str	r6, [r0, #0]
 80267c0:	60c6      	str	r6, [r0, #12]
 80267c2:	2c00      	cmp	r4, #0
 80267c4:	d007      	beq.n	80267d6 <_Bfree+0x3e>
 80267c6:	69eb      	ldr	r3, [r5, #28]
 80267c8:	6862      	ldr	r2, [r4, #4]
 80267ca:	68db      	ldr	r3, [r3, #12]
 80267cc:	0092      	lsls	r2, r2, #2
 80267ce:	189b      	adds	r3, r3, r2
 80267d0:	681a      	ldr	r2, [r3, #0]
 80267d2:	6022      	str	r2, [r4, #0]
 80267d4:	601c      	str	r4, [r3, #0]
 80267d6:	bd70      	pop	{r4, r5, r6, pc}
 80267d8:	0802da5a 	.word	0x0802da5a
 80267dc:	0802db3a 	.word	0x0802db3a

080267e0 <__multadd>:
 80267e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80267e2:	000f      	movs	r7, r1
 80267e4:	9001      	str	r0, [sp, #4]
 80267e6:	000c      	movs	r4, r1
 80267e8:	001e      	movs	r6, r3
 80267ea:	2000      	movs	r0, #0
 80267ec:	690d      	ldr	r5, [r1, #16]
 80267ee:	3714      	adds	r7, #20
 80267f0:	683b      	ldr	r3, [r7, #0]
 80267f2:	3001      	adds	r0, #1
 80267f4:	b299      	uxth	r1, r3
 80267f6:	4351      	muls	r1, r2
 80267f8:	0c1b      	lsrs	r3, r3, #16
 80267fa:	4353      	muls	r3, r2
 80267fc:	1989      	adds	r1, r1, r6
 80267fe:	0c0e      	lsrs	r6, r1, #16
 8026800:	199b      	adds	r3, r3, r6
 8026802:	0c1e      	lsrs	r6, r3, #16
 8026804:	b289      	uxth	r1, r1
 8026806:	041b      	lsls	r3, r3, #16
 8026808:	185b      	adds	r3, r3, r1
 802680a:	c708      	stmia	r7!, {r3}
 802680c:	4285      	cmp	r5, r0
 802680e:	dcef      	bgt.n	80267f0 <__multadd+0x10>
 8026810:	2e00      	cmp	r6, #0
 8026812:	d022      	beq.n	802685a <__multadd+0x7a>
 8026814:	68a3      	ldr	r3, [r4, #8]
 8026816:	42ab      	cmp	r3, r5
 8026818:	dc19      	bgt.n	802684e <__multadd+0x6e>
 802681a:	6861      	ldr	r1, [r4, #4]
 802681c:	9801      	ldr	r0, [sp, #4]
 802681e:	3101      	adds	r1, #1
 8026820:	f7ff ff76 	bl	8026710 <_Balloc>
 8026824:	1e07      	subs	r7, r0, #0
 8026826:	d105      	bne.n	8026834 <__multadd+0x54>
 8026828:	003a      	movs	r2, r7
 802682a:	21ba      	movs	r1, #186	@ 0xba
 802682c:	4b0c      	ldr	r3, [pc, #48]	@ (8026860 <__multadd+0x80>)
 802682e:	480d      	ldr	r0, [pc, #52]	@ (8026864 <__multadd+0x84>)
 8026830:	f001 f84e 	bl	80278d0 <__assert_func>
 8026834:	0021      	movs	r1, r4
 8026836:	6922      	ldr	r2, [r4, #16]
 8026838:	310c      	adds	r1, #12
 802683a:	3202      	adds	r2, #2
 802683c:	0092      	lsls	r2, r2, #2
 802683e:	300c      	adds	r0, #12
 8026840:	f7fe fc62 	bl	8025108 <memcpy>
 8026844:	0021      	movs	r1, r4
 8026846:	9801      	ldr	r0, [sp, #4]
 8026848:	f7ff ffa6 	bl	8026798 <_Bfree>
 802684c:	003c      	movs	r4, r7
 802684e:	1d2b      	adds	r3, r5, #4
 8026850:	009b      	lsls	r3, r3, #2
 8026852:	18e3      	adds	r3, r4, r3
 8026854:	3501      	adds	r5, #1
 8026856:	605e      	str	r6, [r3, #4]
 8026858:	6125      	str	r5, [r4, #16]
 802685a:	0020      	movs	r0, r4
 802685c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802685e:	46c0      	nop			@ (mov r8, r8)
 8026860:	0802dac9 	.word	0x0802dac9
 8026864:	0802db3a 	.word	0x0802db3a

08026868 <__s2b>:
 8026868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802686a:	0007      	movs	r7, r0
 802686c:	0018      	movs	r0, r3
 802686e:	000c      	movs	r4, r1
 8026870:	3008      	adds	r0, #8
 8026872:	2109      	movs	r1, #9
 8026874:	9301      	str	r3, [sp, #4]
 8026876:	0015      	movs	r5, r2
 8026878:	f7d9 fd1e 	bl	80002b8 <__divsi3>
 802687c:	2301      	movs	r3, #1
 802687e:	2100      	movs	r1, #0
 8026880:	4283      	cmp	r3, r0
 8026882:	db0a      	blt.n	802689a <__s2b+0x32>
 8026884:	0038      	movs	r0, r7
 8026886:	f7ff ff43 	bl	8026710 <_Balloc>
 802688a:	1e01      	subs	r1, r0, #0
 802688c:	d108      	bne.n	80268a0 <__s2b+0x38>
 802688e:	000a      	movs	r2, r1
 8026890:	4b19      	ldr	r3, [pc, #100]	@ (80268f8 <__s2b+0x90>)
 8026892:	481a      	ldr	r0, [pc, #104]	@ (80268fc <__s2b+0x94>)
 8026894:	31d3      	adds	r1, #211	@ 0xd3
 8026896:	f001 f81b 	bl	80278d0 <__assert_func>
 802689a:	005b      	lsls	r3, r3, #1
 802689c:	3101      	adds	r1, #1
 802689e:	e7ef      	b.n	8026880 <__s2b+0x18>
 80268a0:	9b08      	ldr	r3, [sp, #32]
 80268a2:	6143      	str	r3, [r0, #20]
 80268a4:	2301      	movs	r3, #1
 80268a6:	6103      	str	r3, [r0, #16]
 80268a8:	2d09      	cmp	r5, #9
 80268aa:	dd18      	ble.n	80268de <__s2b+0x76>
 80268ac:	0023      	movs	r3, r4
 80268ae:	3309      	adds	r3, #9
 80268b0:	001e      	movs	r6, r3
 80268b2:	9300      	str	r3, [sp, #0]
 80268b4:	1964      	adds	r4, r4, r5
 80268b6:	7833      	ldrb	r3, [r6, #0]
 80268b8:	220a      	movs	r2, #10
 80268ba:	0038      	movs	r0, r7
 80268bc:	3b30      	subs	r3, #48	@ 0x30
 80268be:	f7ff ff8f 	bl	80267e0 <__multadd>
 80268c2:	3601      	adds	r6, #1
 80268c4:	0001      	movs	r1, r0
 80268c6:	42a6      	cmp	r6, r4
 80268c8:	d1f5      	bne.n	80268b6 <__s2b+0x4e>
 80268ca:	002c      	movs	r4, r5
 80268cc:	9b00      	ldr	r3, [sp, #0]
 80268ce:	3c08      	subs	r4, #8
 80268d0:	191c      	adds	r4, r3, r4
 80268d2:	002e      	movs	r6, r5
 80268d4:	9b01      	ldr	r3, [sp, #4]
 80268d6:	429e      	cmp	r6, r3
 80268d8:	db04      	blt.n	80268e4 <__s2b+0x7c>
 80268da:	0008      	movs	r0, r1
 80268dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80268de:	2509      	movs	r5, #9
 80268e0:	340a      	adds	r4, #10
 80268e2:	e7f6      	b.n	80268d2 <__s2b+0x6a>
 80268e4:	1b63      	subs	r3, r4, r5
 80268e6:	5d9b      	ldrb	r3, [r3, r6]
 80268e8:	220a      	movs	r2, #10
 80268ea:	0038      	movs	r0, r7
 80268ec:	3b30      	subs	r3, #48	@ 0x30
 80268ee:	f7ff ff77 	bl	80267e0 <__multadd>
 80268f2:	3601      	adds	r6, #1
 80268f4:	0001      	movs	r1, r0
 80268f6:	e7ed      	b.n	80268d4 <__s2b+0x6c>
 80268f8:	0802dac9 	.word	0x0802dac9
 80268fc:	0802db3a 	.word	0x0802db3a

08026900 <__hi0bits>:
 8026900:	2280      	movs	r2, #128	@ 0x80
 8026902:	0003      	movs	r3, r0
 8026904:	0252      	lsls	r2, r2, #9
 8026906:	2000      	movs	r0, #0
 8026908:	4293      	cmp	r3, r2
 802690a:	d201      	bcs.n	8026910 <__hi0bits+0x10>
 802690c:	041b      	lsls	r3, r3, #16
 802690e:	3010      	adds	r0, #16
 8026910:	2280      	movs	r2, #128	@ 0x80
 8026912:	0452      	lsls	r2, r2, #17
 8026914:	4293      	cmp	r3, r2
 8026916:	d201      	bcs.n	802691c <__hi0bits+0x1c>
 8026918:	3008      	adds	r0, #8
 802691a:	021b      	lsls	r3, r3, #8
 802691c:	2280      	movs	r2, #128	@ 0x80
 802691e:	0552      	lsls	r2, r2, #21
 8026920:	4293      	cmp	r3, r2
 8026922:	d201      	bcs.n	8026928 <__hi0bits+0x28>
 8026924:	3004      	adds	r0, #4
 8026926:	011b      	lsls	r3, r3, #4
 8026928:	2280      	movs	r2, #128	@ 0x80
 802692a:	05d2      	lsls	r2, r2, #23
 802692c:	4293      	cmp	r3, r2
 802692e:	d201      	bcs.n	8026934 <__hi0bits+0x34>
 8026930:	3002      	adds	r0, #2
 8026932:	009b      	lsls	r3, r3, #2
 8026934:	2b00      	cmp	r3, #0
 8026936:	db03      	blt.n	8026940 <__hi0bits+0x40>
 8026938:	3001      	adds	r0, #1
 802693a:	4213      	tst	r3, r2
 802693c:	d100      	bne.n	8026940 <__hi0bits+0x40>
 802693e:	2020      	movs	r0, #32
 8026940:	4770      	bx	lr

08026942 <__lo0bits>:
 8026942:	6803      	ldr	r3, [r0, #0]
 8026944:	0001      	movs	r1, r0
 8026946:	2207      	movs	r2, #7
 8026948:	0018      	movs	r0, r3
 802694a:	4010      	ands	r0, r2
 802694c:	4213      	tst	r3, r2
 802694e:	d00d      	beq.n	802696c <__lo0bits+0x2a>
 8026950:	3a06      	subs	r2, #6
 8026952:	2000      	movs	r0, #0
 8026954:	4213      	tst	r3, r2
 8026956:	d105      	bne.n	8026964 <__lo0bits+0x22>
 8026958:	3002      	adds	r0, #2
 802695a:	4203      	tst	r3, r0
 802695c:	d003      	beq.n	8026966 <__lo0bits+0x24>
 802695e:	40d3      	lsrs	r3, r2
 8026960:	0010      	movs	r0, r2
 8026962:	600b      	str	r3, [r1, #0]
 8026964:	4770      	bx	lr
 8026966:	089b      	lsrs	r3, r3, #2
 8026968:	600b      	str	r3, [r1, #0]
 802696a:	e7fb      	b.n	8026964 <__lo0bits+0x22>
 802696c:	b29a      	uxth	r2, r3
 802696e:	2a00      	cmp	r2, #0
 8026970:	d101      	bne.n	8026976 <__lo0bits+0x34>
 8026972:	2010      	movs	r0, #16
 8026974:	0c1b      	lsrs	r3, r3, #16
 8026976:	b2da      	uxtb	r2, r3
 8026978:	2a00      	cmp	r2, #0
 802697a:	d101      	bne.n	8026980 <__lo0bits+0x3e>
 802697c:	3008      	adds	r0, #8
 802697e:	0a1b      	lsrs	r3, r3, #8
 8026980:	071a      	lsls	r2, r3, #28
 8026982:	d101      	bne.n	8026988 <__lo0bits+0x46>
 8026984:	3004      	adds	r0, #4
 8026986:	091b      	lsrs	r3, r3, #4
 8026988:	079a      	lsls	r2, r3, #30
 802698a:	d101      	bne.n	8026990 <__lo0bits+0x4e>
 802698c:	3002      	adds	r0, #2
 802698e:	089b      	lsrs	r3, r3, #2
 8026990:	07da      	lsls	r2, r3, #31
 8026992:	d4e9      	bmi.n	8026968 <__lo0bits+0x26>
 8026994:	3001      	adds	r0, #1
 8026996:	085b      	lsrs	r3, r3, #1
 8026998:	d1e6      	bne.n	8026968 <__lo0bits+0x26>
 802699a:	2020      	movs	r0, #32
 802699c:	e7e2      	b.n	8026964 <__lo0bits+0x22>
	...

080269a0 <__i2b>:
 80269a0:	b510      	push	{r4, lr}
 80269a2:	000c      	movs	r4, r1
 80269a4:	2101      	movs	r1, #1
 80269a6:	f7ff feb3 	bl	8026710 <_Balloc>
 80269aa:	2800      	cmp	r0, #0
 80269ac:	d107      	bne.n	80269be <__i2b+0x1e>
 80269ae:	2146      	movs	r1, #70	@ 0x46
 80269b0:	4c05      	ldr	r4, [pc, #20]	@ (80269c8 <__i2b+0x28>)
 80269b2:	0002      	movs	r2, r0
 80269b4:	4b05      	ldr	r3, [pc, #20]	@ (80269cc <__i2b+0x2c>)
 80269b6:	0020      	movs	r0, r4
 80269b8:	31ff      	adds	r1, #255	@ 0xff
 80269ba:	f000 ff89 	bl	80278d0 <__assert_func>
 80269be:	2301      	movs	r3, #1
 80269c0:	6144      	str	r4, [r0, #20]
 80269c2:	6103      	str	r3, [r0, #16]
 80269c4:	bd10      	pop	{r4, pc}
 80269c6:	46c0      	nop			@ (mov r8, r8)
 80269c8:	0802db3a 	.word	0x0802db3a
 80269cc:	0802dac9 	.word	0x0802dac9

080269d0 <__multiply>:
 80269d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269d2:	0014      	movs	r4, r2
 80269d4:	690a      	ldr	r2, [r1, #16]
 80269d6:	6923      	ldr	r3, [r4, #16]
 80269d8:	000d      	movs	r5, r1
 80269da:	b08b      	sub	sp, #44	@ 0x2c
 80269dc:	429a      	cmp	r2, r3
 80269de:	db02      	blt.n	80269e6 <__multiply+0x16>
 80269e0:	0023      	movs	r3, r4
 80269e2:	000c      	movs	r4, r1
 80269e4:	001d      	movs	r5, r3
 80269e6:	6927      	ldr	r7, [r4, #16]
 80269e8:	692e      	ldr	r6, [r5, #16]
 80269ea:	6861      	ldr	r1, [r4, #4]
 80269ec:	19bb      	adds	r3, r7, r6
 80269ee:	9303      	str	r3, [sp, #12]
 80269f0:	68a3      	ldr	r3, [r4, #8]
 80269f2:	19ba      	adds	r2, r7, r6
 80269f4:	4293      	cmp	r3, r2
 80269f6:	da00      	bge.n	80269fa <__multiply+0x2a>
 80269f8:	3101      	adds	r1, #1
 80269fa:	f7ff fe89 	bl	8026710 <_Balloc>
 80269fe:	9002      	str	r0, [sp, #8]
 8026a00:	2800      	cmp	r0, #0
 8026a02:	d106      	bne.n	8026a12 <__multiply+0x42>
 8026a04:	21b1      	movs	r1, #177	@ 0xb1
 8026a06:	4b49      	ldr	r3, [pc, #292]	@ (8026b2c <__multiply+0x15c>)
 8026a08:	4849      	ldr	r0, [pc, #292]	@ (8026b30 <__multiply+0x160>)
 8026a0a:	9a02      	ldr	r2, [sp, #8]
 8026a0c:	0049      	lsls	r1, r1, #1
 8026a0e:	f000 ff5f 	bl	80278d0 <__assert_func>
 8026a12:	9b02      	ldr	r3, [sp, #8]
 8026a14:	2200      	movs	r2, #0
 8026a16:	3314      	adds	r3, #20
 8026a18:	469c      	mov	ip, r3
 8026a1a:	19bb      	adds	r3, r7, r6
 8026a1c:	009b      	lsls	r3, r3, #2
 8026a1e:	4463      	add	r3, ip
 8026a20:	9304      	str	r3, [sp, #16]
 8026a22:	4663      	mov	r3, ip
 8026a24:	9904      	ldr	r1, [sp, #16]
 8026a26:	428b      	cmp	r3, r1
 8026a28:	d32a      	bcc.n	8026a80 <__multiply+0xb0>
 8026a2a:	0023      	movs	r3, r4
 8026a2c:	00bf      	lsls	r7, r7, #2
 8026a2e:	3314      	adds	r3, #20
 8026a30:	3514      	adds	r5, #20
 8026a32:	9308      	str	r3, [sp, #32]
 8026a34:	00b6      	lsls	r6, r6, #2
 8026a36:	19db      	adds	r3, r3, r7
 8026a38:	9305      	str	r3, [sp, #20]
 8026a3a:	19ab      	adds	r3, r5, r6
 8026a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a3e:	2304      	movs	r3, #4
 8026a40:	9306      	str	r3, [sp, #24]
 8026a42:	0023      	movs	r3, r4
 8026a44:	9a05      	ldr	r2, [sp, #20]
 8026a46:	3315      	adds	r3, #21
 8026a48:	9501      	str	r5, [sp, #4]
 8026a4a:	429a      	cmp	r2, r3
 8026a4c:	d305      	bcc.n	8026a5a <__multiply+0x8a>
 8026a4e:	1b13      	subs	r3, r2, r4
 8026a50:	3b15      	subs	r3, #21
 8026a52:	089b      	lsrs	r3, r3, #2
 8026a54:	3301      	adds	r3, #1
 8026a56:	009b      	lsls	r3, r3, #2
 8026a58:	9306      	str	r3, [sp, #24]
 8026a5a:	9b01      	ldr	r3, [sp, #4]
 8026a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026a5e:	4293      	cmp	r3, r2
 8026a60:	d310      	bcc.n	8026a84 <__multiply+0xb4>
 8026a62:	9b03      	ldr	r3, [sp, #12]
 8026a64:	2b00      	cmp	r3, #0
 8026a66:	dd05      	ble.n	8026a74 <__multiply+0xa4>
 8026a68:	9b04      	ldr	r3, [sp, #16]
 8026a6a:	3b04      	subs	r3, #4
 8026a6c:	9304      	str	r3, [sp, #16]
 8026a6e:	681b      	ldr	r3, [r3, #0]
 8026a70:	2b00      	cmp	r3, #0
 8026a72:	d056      	beq.n	8026b22 <__multiply+0x152>
 8026a74:	9b02      	ldr	r3, [sp, #8]
 8026a76:	9a03      	ldr	r2, [sp, #12]
 8026a78:	0018      	movs	r0, r3
 8026a7a:	611a      	str	r2, [r3, #16]
 8026a7c:	b00b      	add	sp, #44	@ 0x2c
 8026a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a80:	c304      	stmia	r3!, {r2}
 8026a82:	e7cf      	b.n	8026a24 <__multiply+0x54>
 8026a84:	9b01      	ldr	r3, [sp, #4]
 8026a86:	6818      	ldr	r0, [r3, #0]
 8026a88:	b280      	uxth	r0, r0
 8026a8a:	2800      	cmp	r0, #0
 8026a8c:	d01e      	beq.n	8026acc <__multiply+0xfc>
 8026a8e:	4667      	mov	r7, ip
 8026a90:	2500      	movs	r5, #0
 8026a92:	9e08      	ldr	r6, [sp, #32]
 8026a94:	ce02      	ldmia	r6!, {r1}
 8026a96:	683b      	ldr	r3, [r7, #0]
 8026a98:	9307      	str	r3, [sp, #28]
 8026a9a:	b28b      	uxth	r3, r1
 8026a9c:	4343      	muls	r3, r0
 8026a9e:	001a      	movs	r2, r3
 8026aa0:	466b      	mov	r3, sp
 8026aa2:	0c09      	lsrs	r1, r1, #16
 8026aa4:	8b9b      	ldrh	r3, [r3, #28]
 8026aa6:	4341      	muls	r1, r0
 8026aa8:	18d3      	adds	r3, r2, r3
 8026aaa:	9a07      	ldr	r2, [sp, #28]
 8026aac:	195b      	adds	r3, r3, r5
 8026aae:	0c12      	lsrs	r2, r2, #16
 8026ab0:	1889      	adds	r1, r1, r2
 8026ab2:	0c1a      	lsrs	r2, r3, #16
 8026ab4:	188a      	adds	r2, r1, r2
 8026ab6:	b29b      	uxth	r3, r3
 8026ab8:	0c15      	lsrs	r5, r2, #16
 8026aba:	0412      	lsls	r2, r2, #16
 8026abc:	431a      	orrs	r2, r3
 8026abe:	9b05      	ldr	r3, [sp, #20]
 8026ac0:	c704      	stmia	r7!, {r2}
 8026ac2:	42b3      	cmp	r3, r6
 8026ac4:	d8e6      	bhi.n	8026a94 <__multiply+0xc4>
 8026ac6:	4663      	mov	r3, ip
 8026ac8:	9a06      	ldr	r2, [sp, #24]
 8026aca:	509d      	str	r5, [r3, r2]
 8026acc:	9b01      	ldr	r3, [sp, #4]
 8026ace:	6818      	ldr	r0, [r3, #0]
 8026ad0:	0c00      	lsrs	r0, r0, #16
 8026ad2:	d020      	beq.n	8026b16 <__multiply+0x146>
 8026ad4:	4663      	mov	r3, ip
 8026ad6:	0025      	movs	r5, r4
 8026ad8:	4661      	mov	r1, ip
 8026ada:	2700      	movs	r7, #0
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	3514      	adds	r5, #20
 8026ae0:	682a      	ldr	r2, [r5, #0]
 8026ae2:	680e      	ldr	r6, [r1, #0]
 8026ae4:	b292      	uxth	r2, r2
 8026ae6:	4342      	muls	r2, r0
 8026ae8:	0c36      	lsrs	r6, r6, #16
 8026aea:	1992      	adds	r2, r2, r6
 8026aec:	19d2      	adds	r2, r2, r7
 8026aee:	0416      	lsls	r6, r2, #16
 8026af0:	b29b      	uxth	r3, r3
 8026af2:	431e      	orrs	r6, r3
 8026af4:	600e      	str	r6, [r1, #0]
 8026af6:	cd40      	ldmia	r5!, {r6}
 8026af8:	684b      	ldr	r3, [r1, #4]
 8026afa:	0c36      	lsrs	r6, r6, #16
 8026afc:	4346      	muls	r6, r0
 8026afe:	b29b      	uxth	r3, r3
 8026b00:	0c12      	lsrs	r2, r2, #16
 8026b02:	18f3      	adds	r3, r6, r3
 8026b04:	189b      	adds	r3, r3, r2
 8026b06:	9a05      	ldr	r2, [sp, #20]
 8026b08:	0c1f      	lsrs	r7, r3, #16
 8026b0a:	3104      	adds	r1, #4
 8026b0c:	42aa      	cmp	r2, r5
 8026b0e:	d8e7      	bhi.n	8026ae0 <__multiply+0x110>
 8026b10:	4662      	mov	r2, ip
 8026b12:	9906      	ldr	r1, [sp, #24]
 8026b14:	5053      	str	r3, [r2, r1]
 8026b16:	9b01      	ldr	r3, [sp, #4]
 8026b18:	3304      	adds	r3, #4
 8026b1a:	9301      	str	r3, [sp, #4]
 8026b1c:	2304      	movs	r3, #4
 8026b1e:	449c      	add	ip, r3
 8026b20:	e79b      	b.n	8026a5a <__multiply+0x8a>
 8026b22:	9b03      	ldr	r3, [sp, #12]
 8026b24:	3b01      	subs	r3, #1
 8026b26:	9303      	str	r3, [sp, #12]
 8026b28:	e79b      	b.n	8026a62 <__multiply+0x92>
 8026b2a:	46c0      	nop			@ (mov r8, r8)
 8026b2c:	0802dac9 	.word	0x0802dac9
 8026b30:	0802db3a 	.word	0x0802db3a

08026b34 <__pow5mult>:
 8026b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026b36:	2303      	movs	r3, #3
 8026b38:	0015      	movs	r5, r2
 8026b3a:	0007      	movs	r7, r0
 8026b3c:	000e      	movs	r6, r1
 8026b3e:	401a      	ands	r2, r3
 8026b40:	421d      	tst	r5, r3
 8026b42:	d008      	beq.n	8026b56 <__pow5mult+0x22>
 8026b44:	4925      	ldr	r1, [pc, #148]	@ (8026bdc <__pow5mult+0xa8>)
 8026b46:	3a01      	subs	r2, #1
 8026b48:	0092      	lsls	r2, r2, #2
 8026b4a:	5852      	ldr	r2, [r2, r1]
 8026b4c:	2300      	movs	r3, #0
 8026b4e:	0031      	movs	r1, r6
 8026b50:	f7ff fe46 	bl	80267e0 <__multadd>
 8026b54:	0006      	movs	r6, r0
 8026b56:	10ad      	asrs	r5, r5, #2
 8026b58:	d03d      	beq.n	8026bd6 <__pow5mult+0xa2>
 8026b5a:	69fc      	ldr	r4, [r7, #28]
 8026b5c:	2c00      	cmp	r4, #0
 8026b5e:	d10f      	bne.n	8026b80 <__pow5mult+0x4c>
 8026b60:	2010      	movs	r0, #16
 8026b62:	f7ff fd07 	bl	8026574 <malloc>
 8026b66:	1e02      	subs	r2, r0, #0
 8026b68:	61f8      	str	r0, [r7, #28]
 8026b6a:	d105      	bne.n	8026b78 <__pow5mult+0x44>
 8026b6c:	21b4      	movs	r1, #180	@ 0xb4
 8026b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8026be0 <__pow5mult+0xac>)
 8026b70:	481c      	ldr	r0, [pc, #112]	@ (8026be4 <__pow5mult+0xb0>)
 8026b72:	31ff      	adds	r1, #255	@ 0xff
 8026b74:	f000 feac 	bl	80278d0 <__assert_func>
 8026b78:	6044      	str	r4, [r0, #4]
 8026b7a:	6084      	str	r4, [r0, #8]
 8026b7c:	6004      	str	r4, [r0, #0]
 8026b7e:	60c4      	str	r4, [r0, #12]
 8026b80:	69fb      	ldr	r3, [r7, #28]
 8026b82:	689c      	ldr	r4, [r3, #8]
 8026b84:	9301      	str	r3, [sp, #4]
 8026b86:	2c00      	cmp	r4, #0
 8026b88:	d108      	bne.n	8026b9c <__pow5mult+0x68>
 8026b8a:	0038      	movs	r0, r7
 8026b8c:	4916      	ldr	r1, [pc, #88]	@ (8026be8 <__pow5mult+0xb4>)
 8026b8e:	f7ff ff07 	bl	80269a0 <__i2b>
 8026b92:	9b01      	ldr	r3, [sp, #4]
 8026b94:	0004      	movs	r4, r0
 8026b96:	6098      	str	r0, [r3, #8]
 8026b98:	2300      	movs	r3, #0
 8026b9a:	6003      	str	r3, [r0, #0]
 8026b9c:	2301      	movs	r3, #1
 8026b9e:	421d      	tst	r5, r3
 8026ba0:	d00a      	beq.n	8026bb8 <__pow5mult+0x84>
 8026ba2:	0031      	movs	r1, r6
 8026ba4:	0022      	movs	r2, r4
 8026ba6:	0038      	movs	r0, r7
 8026ba8:	f7ff ff12 	bl	80269d0 <__multiply>
 8026bac:	0031      	movs	r1, r6
 8026bae:	9001      	str	r0, [sp, #4]
 8026bb0:	0038      	movs	r0, r7
 8026bb2:	f7ff fdf1 	bl	8026798 <_Bfree>
 8026bb6:	9e01      	ldr	r6, [sp, #4]
 8026bb8:	106d      	asrs	r5, r5, #1
 8026bba:	d00c      	beq.n	8026bd6 <__pow5mult+0xa2>
 8026bbc:	6820      	ldr	r0, [r4, #0]
 8026bbe:	2800      	cmp	r0, #0
 8026bc0:	d107      	bne.n	8026bd2 <__pow5mult+0x9e>
 8026bc2:	0022      	movs	r2, r4
 8026bc4:	0021      	movs	r1, r4
 8026bc6:	0038      	movs	r0, r7
 8026bc8:	f7ff ff02 	bl	80269d0 <__multiply>
 8026bcc:	2300      	movs	r3, #0
 8026bce:	6020      	str	r0, [r4, #0]
 8026bd0:	6003      	str	r3, [r0, #0]
 8026bd2:	0004      	movs	r4, r0
 8026bd4:	e7e2      	b.n	8026b9c <__pow5mult+0x68>
 8026bd6:	0030      	movs	r0, r6
 8026bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026bda:	46c0      	nop			@ (mov r8, r8)
 8026bdc:	0802db94 	.word	0x0802db94
 8026be0:	0802da5a 	.word	0x0802da5a
 8026be4:	0802db3a 	.word	0x0802db3a
 8026be8:	00000271 	.word	0x00000271

08026bec <__lshift>:
 8026bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026bee:	000c      	movs	r4, r1
 8026bf0:	0016      	movs	r6, r2
 8026bf2:	6923      	ldr	r3, [r4, #16]
 8026bf4:	1157      	asrs	r7, r2, #5
 8026bf6:	b085      	sub	sp, #20
 8026bf8:	18fb      	adds	r3, r7, r3
 8026bfa:	9301      	str	r3, [sp, #4]
 8026bfc:	3301      	adds	r3, #1
 8026bfe:	9300      	str	r3, [sp, #0]
 8026c00:	6849      	ldr	r1, [r1, #4]
 8026c02:	68a3      	ldr	r3, [r4, #8]
 8026c04:	9002      	str	r0, [sp, #8]
 8026c06:	9a00      	ldr	r2, [sp, #0]
 8026c08:	4293      	cmp	r3, r2
 8026c0a:	db10      	blt.n	8026c2e <__lshift+0x42>
 8026c0c:	9802      	ldr	r0, [sp, #8]
 8026c0e:	f7ff fd7f 	bl	8026710 <_Balloc>
 8026c12:	2300      	movs	r3, #0
 8026c14:	0001      	movs	r1, r0
 8026c16:	0005      	movs	r5, r0
 8026c18:	001a      	movs	r2, r3
 8026c1a:	3114      	adds	r1, #20
 8026c1c:	4298      	cmp	r0, r3
 8026c1e:	d10c      	bne.n	8026c3a <__lshift+0x4e>
 8026c20:	21ef      	movs	r1, #239	@ 0xef
 8026c22:	002a      	movs	r2, r5
 8026c24:	4b25      	ldr	r3, [pc, #148]	@ (8026cbc <__lshift+0xd0>)
 8026c26:	4826      	ldr	r0, [pc, #152]	@ (8026cc0 <__lshift+0xd4>)
 8026c28:	0049      	lsls	r1, r1, #1
 8026c2a:	f000 fe51 	bl	80278d0 <__assert_func>
 8026c2e:	3101      	adds	r1, #1
 8026c30:	005b      	lsls	r3, r3, #1
 8026c32:	e7e8      	b.n	8026c06 <__lshift+0x1a>
 8026c34:	0098      	lsls	r0, r3, #2
 8026c36:	500a      	str	r2, [r1, r0]
 8026c38:	3301      	adds	r3, #1
 8026c3a:	42bb      	cmp	r3, r7
 8026c3c:	dbfa      	blt.n	8026c34 <__lshift+0x48>
 8026c3e:	43fb      	mvns	r3, r7
 8026c40:	17db      	asrs	r3, r3, #31
 8026c42:	401f      	ands	r7, r3
 8026c44:	00bf      	lsls	r7, r7, #2
 8026c46:	0023      	movs	r3, r4
 8026c48:	201f      	movs	r0, #31
 8026c4a:	19c9      	adds	r1, r1, r7
 8026c4c:	0037      	movs	r7, r6
 8026c4e:	6922      	ldr	r2, [r4, #16]
 8026c50:	3314      	adds	r3, #20
 8026c52:	0092      	lsls	r2, r2, #2
 8026c54:	189a      	adds	r2, r3, r2
 8026c56:	4007      	ands	r7, r0
 8026c58:	4206      	tst	r6, r0
 8026c5a:	d029      	beq.n	8026cb0 <__lshift+0xc4>
 8026c5c:	3001      	adds	r0, #1
 8026c5e:	1bc0      	subs	r0, r0, r7
 8026c60:	9003      	str	r0, [sp, #12]
 8026c62:	468c      	mov	ip, r1
 8026c64:	2000      	movs	r0, #0
 8026c66:	681e      	ldr	r6, [r3, #0]
 8026c68:	40be      	lsls	r6, r7
 8026c6a:	4306      	orrs	r6, r0
 8026c6c:	4660      	mov	r0, ip
 8026c6e:	c040      	stmia	r0!, {r6}
 8026c70:	4684      	mov	ip, r0
 8026c72:	9e03      	ldr	r6, [sp, #12]
 8026c74:	cb01      	ldmia	r3!, {r0}
 8026c76:	40f0      	lsrs	r0, r6
 8026c78:	429a      	cmp	r2, r3
 8026c7a:	d8f4      	bhi.n	8026c66 <__lshift+0x7a>
 8026c7c:	0026      	movs	r6, r4
 8026c7e:	3615      	adds	r6, #21
 8026c80:	2304      	movs	r3, #4
 8026c82:	42b2      	cmp	r2, r6
 8026c84:	d304      	bcc.n	8026c90 <__lshift+0xa4>
 8026c86:	1b13      	subs	r3, r2, r4
 8026c88:	3b15      	subs	r3, #21
 8026c8a:	089b      	lsrs	r3, r3, #2
 8026c8c:	3301      	adds	r3, #1
 8026c8e:	009b      	lsls	r3, r3, #2
 8026c90:	50c8      	str	r0, [r1, r3]
 8026c92:	2800      	cmp	r0, #0
 8026c94:	d002      	beq.n	8026c9c <__lshift+0xb0>
 8026c96:	9b01      	ldr	r3, [sp, #4]
 8026c98:	3302      	adds	r3, #2
 8026c9a:	9300      	str	r3, [sp, #0]
 8026c9c:	9b00      	ldr	r3, [sp, #0]
 8026c9e:	9802      	ldr	r0, [sp, #8]
 8026ca0:	3b01      	subs	r3, #1
 8026ca2:	0021      	movs	r1, r4
 8026ca4:	612b      	str	r3, [r5, #16]
 8026ca6:	f7ff fd77 	bl	8026798 <_Bfree>
 8026caa:	0028      	movs	r0, r5
 8026cac:	b005      	add	sp, #20
 8026cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026cb0:	cb01      	ldmia	r3!, {r0}
 8026cb2:	c101      	stmia	r1!, {r0}
 8026cb4:	429a      	cmp	r2, r3
 8026cb6:	d8fb      	bhi.n	8026cb0 <__lshift+0xc4>
 8026cb8:	e7f0      	b.n	8026c9c <__lshift+0xb0>
 8026cba:	46c0      	nop			@ (mov r8, r8)
 8026cbc:	0802dac9 	.word	0x0802dac9
 8026cc0:	0802db3a 	.word	0x0802db3a

08026cc4 <__mcmp>:
 8026cc4:	b530      	push	{r4, r5, lr}
 8026cc6:	690b      	ldr	r3, [r1, #16]
 8026cc8:	6904      	ldr	r4, [r0, #16]
 8026cca:	0002      	movs	r2, r0
 8026ccc:	1ae0      	subs	r0, r4, r3
 8026cce:	429c      	cmp	r4, r3
 8026cd0:	d10f      	bne.n	8026cf2 <__mcmp+0x2e>
 8026cd2:	3214      	adds	r2, #20
 8026cd4:	009b      	lsls	r3, r3, #2
 8026cd6:	3114      	adds	r1, #20
 8026cd8:	0014      	movs	r4, r2
 8026cda:	18c9      	adds	r1, r1, r3
 8026cdc:	18d2      	adds	r2, r2, r3
 8026cde:	3a04      	subs	r2, #4
 8026ce0:	3904      	subs	r1, #4
 8026ce2:	6815      	ldr	r5, [r2, #0]
 8026ce4:	680b      	ldr	r3, [r1, #0]
 8026ce6:	429d      	cmp	r5, r3
 8026ce8:	d004      	beq.n	8026cf4 <__mcmp+0x30>
 8026cea:	2001      	movs	r0, #1
 8026cec:	429d      	cmp	r5, r3
 8026cee:	d200      	bcs.n	8026cf2 <__mcmp+0x2e>
 8026cf0:	3802      	subs	r0, #2
 8026cf2:	bd30      	pop	{r4, r5, pc}
 8026cf4:	4294      	cmp	r4, r2
 8026cf6:	d3f2      	bcc.n	8026cde <__mcmp+0x1a>
 8026cf8:	e7fb      	b.n	8026cf2 <__mcmp+0x2e>
	...

08026cfc <__mdiff>:
 8026cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026cfe:	000c      	movs	r4, r1
 8026d00:	b087      	sub	sp, #28
 8026d02:	9000      	str	r0, [sp, #0]
 8026d04:	0011      	movs	r1, r2
 8026d06:	0020      	movs	r0, r4
 8026d08:	0017      	movs	r7, r2
 8026d0a:	f7ff ffdb 	bl	8026cc4 <__mcmp>
 8026d0e:	1e05      	subs	r5, r0, #0
 8026d10:	d110      	bne.n	8026d34 <__mdiff+0x38>
 8026d12:	0001      	movs	r1, r0
 8026d14:	9800      	ldr	r0, [sp, #0]
 8026d16:	f7ff fcfb 	bl	8026710 <_Balloc>
 8026d1a:	1e02      	subs	r2, r0, #0
 8026d1c:	d104      	bne.n	8026d28 <__mdiff+0x2c>
 8026d1e:	4b40      	ldr	r3, [pc, #256]	@ (8026e20 <__mdiff+0x124>)
 8026d20:	4840      	ldr	r0, [pc, #256]	@ (8026e24 <__mdiff+0x128>)
 8026d22:	4941      	ldr	r1, [pc, #260]	@ (8026e28 <__mdiff+0x12c>)
 8026d24:	f000 fdd4 	bl	80278d0 <__assert_func>
 8026d28:	2301      	movs	r3, #1
 8026d2a:	6145      	str	r5, [r0, #20]
 8026d2c:	6103      	str	r3, [r0, #16]
 8026d2e:	0010      	movs	r0, r2
 8026d30:	b007      	add	sp, #28
 8026d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d34:	2600      	movs	r6, #0
 8026d36:	42b0      	cmp	r0, r6
 8026d38:	da03      	bge.n	8026d42 <__mdiff+0x46>
 8026d3a:	0023      	movs	r3, r4
 8026d3c:	003c      	movs	r4, r7
 8026d3e:	001f      	movs	r7, r3
 8026d40:	3601      	adds	r6, #1
 8026d42:	6861      	ldr	r1, [r4, #4]
 8026d44:	9800      	ldr	r0, [sp, #0]
 8026d46:	f7ff fce3 	bl	8026710 <_Balloc>
 8026d4a:	1e02      	subs	r2, r0, #0
 8026d4c:	d103      	bne.n	8026d56 <__mdiff+0x5a>
 8026d4e:	4b34      	ldr	r3, [pc, #208]	@ (8026e20 <__mdiff+0x124>)
 8026d50:	4834      	ldr	r0, [pc, #208]	@ (8026e24 <__mdiff+0x128>)
 8026d52:	4936      	ldr	r1, [pc, #216]	@ (8026e2c <__mdiff+0x130>)
 8026d54:	e7e6      	b.n	8026d24 <__mdiff+0x28>
 8026d56:	6923      	ldr	r3, [r4, #16]
 8026d58:	3414      	adds	r4, #20
 8026d5a:	9300      	str	r3, [sp, #0]
 8026d5c:	009b      	lsls	r3, r3, #2
 8026d5e:	18e3      	adds	r3, r4, r3
 8026d60:	0021      	movs	r1, r4
 8026d62:	9401      	str	r4, [sp, #4]
 8026d64:	003c      	movs	r4, r7
 8026d66:	9302      	str	r3, [sp, #8]
 8026d68:	693b      	ldr	r3, [r7, #16]
 8026d6a:	3414      	adds	r4, #20
 8026d6c:	009b      	lsls	r3, r3, #2
 8026d6e:	18e3      	adds	r3, r4, r3
 8026d70:	9303      	str	r3, [sp, #12]
 8026d72:	0003      	movs	r3, r0
 8026d74:	60c6      	str	r6, [r0, #12]
 8026d76:	468c      	mov	ip, r1
 8026d78:	2000      	movs	r0, #0
 8026d7a:	3314      	adds	r3, #20
 8026d7c:	9304      	str	r3, [sp, #16]
 8026d7e:	9305      	str	r3, [sp, #20]
 8026d80:	4663      	mov	r3, ip
 8026d82:	cb20      	ldmia	r3!, {r5}
 8026d84:	b2a9      	uxth	r1, r5
 8026d86:	000e      	movs	r6, r1
 8026d88:	469c      	mov	ip, r3
 8026d8a:	cc08      	ldmia	r4!, {r3}
 8026d8c:	0c2d      	lsrs	r5, r5, #16
 8026d8e:	b299      	uxth	r1, r3
 8026d90:	1a71      	subs	r1, r6, r1
 8026d92:	1809      	adds	r1, r1, r0
 8026d94:	0c1b      	lsrs	r3, r3, #16
 8026d96:	1408      	asrs	r0, r1, #16
 8026d98:	1aeb      	subs	r3, r5, r3
 8026d9a:	181b      	adds	r3, r3, r0
 8026d9c:	1418      	asrs	r0, r3, #16
 8026d9e:	b289      	uxth	r1, r1
 8026da0:	041b      	lsls	r3, r3, #16
 8026da2:	4319      	orrs	r1, r3
 8026da4:	9b05      	ldr	r3, [sp, #20]
 8026da6:	c302      	stmia	r3!, {r1}
 8026da8:	9305      	str	r3, [sp, #20]
 8026daa:	9b03      	ldr	r3, [sp, #12]
 8026dac:	42a3      	cmp	r3, r4
 8026dae:	d8e7      	bhi.n	8026d80 <__mdiff+0x84>
 8026db0:	0039      	movs	r1, r7
 8026db2:	9c03      	ldr	r4, [sp, #12]
 8026db4:	3115      	adds	r1, #21
 8026db6:	2304      	movs	r3, #4
 8026db8:	428c      	cmp	r4, r1
 8026dba:	d304      	bcc.n	8026dc6 <__mdiff+0xca>
 8026dbc:	1be3      	subs	r3, r4, r7
 8026dbe:	3b15      	subs	r3, #21
 8026dc0:	089b      	lsrs	r3, r3, #2
 8026dc2:	3301      	adds	r3, #1
 8026dc4:	009b      	lsls	r3, r3, #2
 8026dc6:	9901      	ldr	r1, [sp, #4]
 8026dc8:	18cd      	adds	r5, r1, r3
 8026dca:	9904      	ldr	r1, [sp, #16]
 8026dcc:	002e      	movs	r6, r5
 8026dce:	18cb      	adds	r3, r1, r3
 8026dd0:	001f      	movs	r7, r3
 8026dd2:	9902      	ldr	r1, [sp, #8]
 8026dd4:	428e      	cmp	r6, r1
 8026dd6:	d311      	bcc.n	8026dfc <__mdiff+0x100>
 8026dd8:	9c02      	ldr	r4, [sp, #8]
 8026dda:	1ee9      	subs	r1, r5, #3
 8026ddc:	2000      	movs	r0, #0
 8026dde:	428c      	cmp	r4, r1
 8026de0:	d304      	bcc.n	8026dec <__mdiff+0xf0>
 8026de2:	0021      	movs	r1, r4
 8026de4:	3103      	adds	r1, #3
 8026de6:	1b49      	subs	r1, r1, r5
 8026de8:	0889      	lsrs	r1, r1, #2
 8026dea:	0088      	lsls	r0, r1, #2
 8026dec:	181b      	adds	r3, r3, r0
 8026dee:	3b04      	subs	r3, #4
 8026df0:	6819      	ldr	r1, [r3, #0]
 8026df2:	2900      	cmp	r1, #0
 8026df4:	d010      	beq.n	8026e18 <__mdiff+0x11c>
 8026df6:	9b00      	ldr	r3, [sp, #0]
 8026df8:	6113      	str	r3, [r2, #16]
 8026dfa:	e798      	b.n	8026d2e <__mdiff+0x32>
 8026dfc:	4684      	mov	ip, r0
 8026dfe:	ce02      	ldmia	r6!, {r1}
 8026e00:	b288      	uxth	r0, r1
 8026e02:	4460      	add	r0, ip
 8026e04:	1400      	asrs	r0, r0, #16
 8026e06:	0c0c      	lsrs	r4, r1, #16
 8026e08:	1904      	adds	r4, r0, r4
 8026e0a:	4461      	add	r1, ip
 8026e0c:	1420      	asrs	r0, r4, #16
 8026e0e:	b289      	uxth	r1, r1
 8026e10:	0424      	lsls	r4, r4, #16
 8026e12:	4321      	orrs	r1, r4
 8026e14:	c702      	stmia	r7!, {r1}
 8026e16:	e7dc      	b.n	8026dd2 <__mdiff+0xd6>
 8026e18:	9900      	ldr	r1, [sp, #0]
 8026e1a:	3901      	subs	r1, #1
 8026e1c:	9100      	str	r1, [sp, #0]
 8026e1e:	e7e6      	b.n	8026dee <__mdiff+0xf2>
 8026e20:	0802dac9 	.word	0x0802dac9
 8026e24:	0802db3a 	.word	0x0802db3a
 8026e28:	00000237 	.word	0x00000237
 8026e2c:	00000245 	.word	0x00000245

08026e30 <__ulp>:
 8026e30:	b510      	push	{r4, lr}
 8026e32:	2400      	movs	r4, #0
 8026e34:	4b0c      	ldr	r3, [pc, #48]	@ (8026e68 <__ulp+0x38>)
 8026e36:	4a0d      	ldr	r2, [pc, #52]	@ (8026e6c <__ulp+0x3c>)
 8026e38:	400b      	ands	r3, r1
 8026e3a:	189b      	adds	r3, r3, r2
 8026e3c:	42a3      	cmp	r3, r4
 8026e3e:	dc06      	bgt.n	8026e4e <__ulp+0x1e>
 8026e40:	425b      	negs	r3, r3
 8026e42:	151a      	asrs	r2, r3, #20
 8026e44:	2a13      	cmp	r2, #19
 8026e46:	dc05      	bgt.n	8026e54 <__ulp+0x24>
 8026e48:	2380      	movs	r3, #128	@ 0x80
 8026e4a:	031b      	lsls	r3, r3, #12
 8026e4c:	4113      	asrs	r3, r2
 8026e4e:	0019      	movs	r1, r3
 8026e50:	0020      	movs	r0, r4
 8026e52:	bd10      	pop	{r4, pc}
 8026e54:	3a14      	subs	r2, #20
 8026e56:	2401      	movs	r4, #1
 8026e58:	2a1e      	cmp	r2, #30
 8026e5a:	dc02      	bgt.n	8026e62 <__ulp+0x32>
 8026e5c:	2480      	movs	r4, #128	@ 0x80
 8026e5e:	0624      	lsls	r4, r4, #24
 8026e60:	40d4      	lsrs	r4, r2
 8026e62:	2300      	movs	r3, #0
 8026e64:	e7f3      	b.n	8026e4e <__ulp+0x1e>
 8026e66:	46c0      	nop			@ (mov r8, r8)
 8026e68:	7ff00000 	.word	0x7ff00000
 8026e6c:	fcc00000 	.word	0xfcc00000

08026e70 <__b2d>:
 8026e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026e72:	0006      	movs	r6, r0
 8026e74:	6903      	ldr	r3, [r0, #16]
 8026e76:	3614      	adds	r6, #20
 8026e78:	009b      	lsls	r3, r3, #2
 8026e7a:	18f3      	adds	r3, r6, r3
 8026e7c:	1f1d      	subs	r5, r3, #4
 8026e7e:	682c      	ldr	r4, [r5, #0]
 8026e80:	000f      	movs	r7, r1
 8026e82:	0020      	movs	r0, r4
 8026e84:	9301      	str	r3, [sp, #4]
 8026e86:	f7ff fd3b 	bl	8026900 <__hi0bits>
 8026e8a:	2220      	movs	r2, #32
 8026e8c:	1a12      	subs	r2, r2, r0
 8026e8e:	603a      	str	r2, [r7, #0]
 8026e90:	0003      	movs	r3, r0
 8026e92:	4a1c      	ldr	r2, [pc, #112]	@ (8026f04 <__b2d+0x94>)
 8026e94:	280a      	cmp	r0, #10
 8026e96:	dc15      	bgt.n	8026ec4 <__b2d+0x54>
 8026e98:	210b      	movs	r1, #11
 8026e9a:	0027      	movs	r7, r4
 8026e9c:	1a09      	subs	r1, r1, r0
 8026e9e:	40cf      	lsrs	r7, r1
 8026ea0:	433a      	orrs	r2, r7
 8026ea2:	468c      	mov	ip, r1
 8026ea4:	0011      	movs	r1, r2
 8026ea6:	2200      	movs	r2, #0
 8026ea8:	42ae      	cmp	r6, r5
 8026eaa:	d202      	bcs.n	8026eb2 <__b2d+0x42>
 8026eac:	9a01      	ldr	r2, [sp, #4]
 8026eae:	3a08      	subs	r2, #8
 8026eb0:	6812      	ldr	r2, [r2, #0]
 8026eb2:	3315      	adds	r3, #21
 8026eb4:	409c      	lsls	r4, r3
 8026eb6:	4663      	mov	r3, ip
 8026eb8:	0027      	movs	r7, r4
 8026eba:	40da      	lsrs	r2, r3
 8026ebc:	4317      	orrs	r7, r2
 8026ebe:	0038      	movs	r0, r7
 8026ec0:	b003      	add	sp, #12
 8026ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ec4:	2700      	movs	r7, #0
 8026ec6:	42ae      	cmp	r6, r5
 8026ec8:	d202      	bcs.n	8026ed0 <__b2d+0x60>
 8026eca:	9d01      	ldr	r5, [sp, #4]
 8026ecc:	3d08      	subs	r5, #8
 8026ece:	682f      	ldr	r7, [r5, #0]
 8026ed0:	210b      	movs	r1, #11
 8026ed2:	4249      	negs	r1, r1
 8026ed4:	468c      	mov	ip, r1
 8026ed6:	449c      	add	ip, r3
 8026ed8:	2b0b      	cmp	r3, #11
 8026eda:	d010      	beq.n	8026efe <__b2d+0x8e>
 8026edc:	4661      	mov	r1, ip
 8026ede:	2320      	movs	r3, #32
 8026ee0:	408c      	lsls	r4, r1
 8026ee2:	1a5b      	subs	r3, r3, r1
 8026ee4:	0039      	movs	r1, r7
 8026ee6:	40d9      	lsrs	r1, r3
 8026ee8:	430c      	orrs	r4, r1
 8026eea:	4322      	orrs	r2, r4
 8026eec:	0011      	movs	r1, r2
 8026eee:	2200      	movs	r2, #0
 8026ef0:	42b5      	cmp	r5, r6
 8026ef2:	d901      	bls.n	8026ef8 <__b2d+0x88>
 8026ef4:	3d04      	subs	r5, #4
 8026ef6:	682a      	ldr	r2, [r5, #0]
 8026ef8:	4664      	mov	r4, ip
 8026efa:	40a7      	lsls	r7, r4
 8026efc:	e7dd      	b.n	8026eba <__b2d+0x4a>
 8026efe:	4322      	orrs	r2, r4
 8026f00:	0011      	movs	r1, r2
 8026f02:	e7dc      	b.n	8026ebe <__b2d+0x4e>
 8026f04:	3ff00000 	.word	0x3ff00000

08026f08 <__d2b>:
 8026f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f0a:	2101      	movs	r1, #1
 8026f0c:	0016      	movs	r6, r2
 8026f0e:	001f      	movs	r7, r3
 8026f10:	f7ff fbfe 	bl	8026710 <_Balloc>
 8026f14:	1e04      	subs	r4, r0, #0
 8026f16:	d105      	bne.n	8026f24 <__d2b+0x1c>
 8026f18:	0022      	movs	r2, r4
 8026f1a:	4b25      	ldr	r3, [pc, #148]	@ (8026fb0 <__d2b+0xa8>)
 8026f1c:	4825      	ldr	r0, [pc, #148]	@ (8026fb4 <__d2b+0xac>)
 8026f1e:	4926      	ldr	r1, [pc, #152]	@ (8026fb8 <__d2b+0xb0>)
 8026f20:	f000 fcd6 	bl	80278d0 <__assert_func>
 8026f24:	033b      	lsls	r3, r7, #12
 8026f26:	007d      	lsls	r5, r7, #1
 8026f28:	0b1b      	lsrs	r3, r3, #12
 8026f2a:	0d6d      	lsrs	r5, r5, #21
 8026f2c:	d002      	beq.n	8026f34 <__d2b+0x2c>
 8026f2e:	2280      	movs	r2, #128	@ 0x80
 8026f30:	0352      	lsls	r2, r2, #13
 8026f32:	4313      	orrs	r3, r2
 8026f34:	9301      	str	r3, [sp, #4]
 8026f36:	2e00      	cmp	r6, #0
 8026f38:	d025      	beq.n	8026f86 <__d2b+0x7e>
 8026f3a:	4668      	mov	r0, sp
 8026f3c:	9600      	str	r6, [sp, #0]
 8026f3e:	f7ff fd00 	bl	8026942 <__lo0bits>
 8026f42:	9b01      	ldr	r3, [sp, #4]
 8026f44:	9900      	ldr	r1, [sp, #0]
 8026f46:	2800      	cmp	r0, #0
 8026f48:	d01b      	beq.n	8026f82 <__d2b+0x7a>
 8026f4a:	2220      	movs	r2, #32
 8026f4c:	001e      	movs	r6, r3
 8026f4e:	1a12      	subs	r2, r2, r0
 8026f50:	4096      	lsls	r6, r2
 8026f52:	0032      	movs	r2, r6
 8026f54:	40c3      	lsrs	r3, r0
 8026f56:	430a      	orrs	r2, r1
 8026f58:	6162      	str	r2, [r4, #20]
 8026f5a:	9301      	str	r3, [sp, #4]
 8026f5c:	9e01      	ldr	r6, [sp, #4]
 8026f5e:	61a6      	str	r6, [r4, #24]
 8026f60:	1e73      	subs	r3, r6, #1
 8026f62:	419e      	sbcs	r6, r3
 8026f64:	3601      	adds	r6, #1
 8026f66:	6126      	str	r6, [r4, #16]
 8026f68:	2d00      	cmp	r5, #0
 8026f6a:	d014      	beq.n	8026f96 <__d2b+0x8e>
 8026f6c:	2635      	movs	r6, #53	@ 0x35
 8026f6e:	4b13      	ldr	r3, [pc, #76]	@ (8026fbc <__d2b+0xb4>)
 8026f70:	18ed      	adds	r5, r5, r3
 8026f72:	9b08      	ldr	r3, [sp, #32]
 8026f74:	182d      	adds	r5, r5, r0
 8026f76:	601d      	str	r5, [r3, #0]
 8026f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026f7a:	1a36      	subs	r6, r6, r0
 8026f7c:	601e      	str	r6, [r3, #0]
 8026f7e:	0020      	movs	r0, r4
 8026f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026f82:	6161      	str	r1, [r4, #20]
 8026f84:	e7ea      	b.n	8026f5c <__d2b+0x54>
 8026f86:	a801      	add	r0, sp, #4
 8026f88:	f7ff fcdb 	bl	8026942 <__lo0bits>
 8026f8c:	9b01      	ldr	r3, [sp, #4]
 8026f8e:	2601      	movs	r6, #1
 8026f90:	6163      	str	r3, [r4, #20]
 8026f92:	3020      	adds	r0, #32
 8026f94:	e7e7      	b.n	8026f66 <__d2b+0x5e>
 8026f96:	4b0a      	ldr	r3, [pc, #40]	@ (8026fc0 <__d2b+0xb8>)
 8026f98:	18c0      	adds	r0, r0, r3
 8026f9a:	9b08      	ldr	r3, [sp, #32]
 8026f9c:	6018      	str	r0, [r3, #0]
 8026f9e:	4b09      	ldr	r3, [pc, #36]	@ (8026fc4 <__d2b+0xbc>)
 8026fa0:	18f3      	adds	r3, r6, r3
 8026fa2:	009b      	lsls	r3, r3, #2
 8026fa4:	18e3      	adds	r3, r4, r3
 8026fa6:	6958      	ldr	r0, [r3, #20]
 8026fa8:	f7ff fcaa 	bl	8026900 <__hi0bits>
 8026fac:	0176      	lsls	r6, r6, #5
 8026fae:	e7e3      	b.n	8026f78 <__d2b+0x70>
 8026fb0:	0802dac9 	.word	0x0802dac9
 8026fb4:	0802db3a 	.word	0x0802db3a
 8026fb8:	0000030f 	.word	0x0000030f
 8026fbc:	fffffbcd 	.word	0xfffffbcd
 8026fc0:	fffffbce 	.word	0xfffffbce
 8026fc4:	3fffffff 	.word	0x3fffffff

08026fc8 <__ratio>:
 8026fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026fca:	b087      	sub	sp, #28
 8026fcc:	000f      	movs	r7, r1
 8026fce:	a904      	add	r1, sp, #16
 8026fd0:	0006      	movs	r6, r0
 8026fd2:	f7ff ff4d 	bl	8026e70 <__b2d>
 8026fd6:	9000      	str	r0, [sp, #0]
 8026fd8:	9101      	str	r1, [sp, #4]
 8026fda:	9b00      	ldr	r3, [sp, #0]
 8026fdc:	9c01      	ldr	r4, [sp, #4]
 8026fde:	0038      	movs	r0, r7
 8026fe0:	a905      	add	r1, sp, #20
 8026fe2:	9302      	str	r3, [sp, #8]
 8026fe4:	9403      	str	r4, [sp, #12]
 8026fe6:	f7ff ff43 	bl	8026e70 <__b2d>
 8026fea:	000d      	movs	r5, r1
 8026fec:	0002      	movs	r2, r0
 8026fee:	000b      	movs	r3, r1
 8026ff0:	6930      	ldr	r0, [r6, #16]
 8026ff2:	6939      	ldr	r1, [r7, #16]
 8026ff4:	9e04      	ldr	r6, [sp, #16]
 8026ff6:	1a40      	subs	r0, r0, r1
 8026ff8:	9905      	ldr	r1, [sp, #20]
 8026ffa:	0140      	lsls	r0, r0, #5
 8026ffc:	1a71      	subs	r1, r6, r1
 8026ffe:	1841      	adds	r1, r0, r1
 8027000:	0508      	lsls	r0, r1, #20
 8027002:	2900      	cmp	r1, #0
 8027004:	dd08      	ble.n	8027018 <__ratio+0x50>
 8027006:	9901      	ldr	r1, [sp, #4]
 8027008:	1841      	adds	r1, r0, r1
 802700a:	9103      	str	r1, [sp, #12]
 802700c:	9802      	ldr	r0, [sp, #8]
 802700e:	9903      	ldr	r1, [sp, #12]
 8027010:	f7da fed0 	bl	8001db4 <__aeabi_ddiv>
 8027014:	b007      	add	sp, #28
 8027016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027018:	1a2b      	subs	r3, r5, r0
 802701a:	e7f7      	b.n	802700c <__ratio+0x44>

0802701c <__copybits>:
 802701c:	b570      	push	{r4, r5, r6, lr}
 802701e:	0014      	movs	r4, r2
 8027020:	0005      	movs	r5, r0
 8027022:	3901      	subs	r1, #1
 8027024:	6913      	ldr	r3, [r2, #16]
 8027026:	1149      	asrs	r1, r1, #5
 8027028:	3101      	adds	r1, #1
 802702a:	0089      	lsls	r1, r1, #2
 802702c:	3414      	adds	r4, #20
 802702e:	009b      	lsls	r3, r3, #2
 8027030:	1841      	adds	r1, r0, r1
 8027032:	18e3      	adds	r3, r4, r3
 8027034:	42a3      	cmp	r3, r4
 8027036:	d80d      	bhi.n	8027054 <__copybits+0x38>
 8027038:	0014      	movs	r4, r2
 802703a:	3411      	adds	r4, #17
 802703c:	2500      	movs	r5, #0
 802703e:	429c      	cmp	r4, r3
 8027040:	d803      	bhi.n	802704a <__copybits+0x2e>
 8027042:	1a9b      	subs	r3, r3, r2
 8027044:	3b11      	subs	r3, #17
 8027046:	089b      	lsrs	r3, r3, #2
 8027048:	009d      	lsls	r5, r3, #2
 802704a:	2300      	movs	r3, #0
 802704c:	1940      	adds	r0, r0, r5
 802704e:	4281      	cmp	r1, r0
 8027050:	d803      	bhi.n	802705a <__copybits+0x3e>
 8027052:	bd70      	pop	{r4, r5, r6, pc}
 8027054:	cc40      	ldmia	r4!, {r6}
 8027056:	c540      	stmia	r5!, {r6}
 8027058:	e7ec      	b.n	8027034 <__copybits+0x18>
 802705a:	c008      	stmia	r0!, {r3}
 802705c:	e7f7      	b.n	802704e <__copybits+0x32>

0802705e <__any_on>:
 802705e:	0002      	movs	r2, r0
 8027060:	6900      	ldr	r0, [r0, #16]
 8027062:	b510      	push	{r4, lr}
 8027064:	3214      	adds	r2, #20
 8027066:	114b      	asrs	r3, r1, #5
 8027068:	4298      	cmp	r0, r3
 802706a:	db13      	blt.n	8027094 <__any_on+0x36>
 802706c:	dd0c      	ble.n	8027088 <__any_on+0x2a>
 802706e:	241f      	movs	r4, #31
 8027070:	0008      	movs	r0, r1
 8027072:	4020      	ands	r0, r4
 8027074:	4221      	tst	r1, r4
 8027076:	d007      	beq.n	8027088 <__any_on+0x2a>
 8027078:	0099      	lsls	r1, r3, #2
 802707a:	588c      	ldr	r4, [r1, r2]
 802707c:	0021      	movs	r1, r4
 802707e:	40c1      	lsrs	r1, r0
 8027080:	4081      	lsls	r1, r0
 8027082:	2001      	movs	r0, #1
 8027084:	428c      	cmp	r4, r1
 8027086:	d104      	bne.n	8027092 <__any_on+0x34>
 8027088:	009b      	lsls	r3, r3, #2
 802708a:	18d3      	adds	r3, r2, r3
 802708c:	4293      	cmp	r3, r2
 802708e:	d803      	bhi.n	8027098 <__any_on+0x3a>
 8027090:	2000      	movs	r0, #0
 8027092:	bd10      	pop	{r4, pc}
 8027094:	0003      	movs	r3, r0
 8027096:	e7f7      	b.n	8027088 <__any_on+0x2a>
 8027098:	3b04      	subs	r3, #4
 802709a:	6819      	ldr	r1, [r3, #0]
 802709c:	2900      	cmp	r1, #0
 802709e:	d0f5      	beq.n	802708c <__any_on+0x2e>
 80270a0:	2001      	movs	r0, #1
 80270a2:	e7f6      	b.n	8027092 <__any_on+0x34>

080270a4 <__ascii_wctomb>:
 80270a4:	0003      	movs	r3, r0
 80270a6:	1e08      	subs	r0, r1, #0
 80270a8:	d005      	beq.n	80270b6 <__ascii_wctomb+0x12>
 80270aa:	2aff      	cmp	r2, #255	@ 0xff
 80270ac:	d904      	bls.n	80270b8 <__ascii_wctomb+0x14>
 80270ae:	228a      	movs	r2, #138	@ 0x8a
 80270b0:	2001      	movs	r0, #1
 80270b2:	601a      	str	r2, [r3, #0]
 80270b4:	4240      	negs	r0, r0
 80270b6:	4770      	bx	lr
 80270b8:	2001      	movs	r0, #1
 80270ba:	700a      	strb	r2, [r1, #0]
 80270bc:	e7fb      	b.n	80270b6 <__ascii_wctomb+0x12>
	...

080270c0 <__ssputs_r>:
 80270c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270c2:	688e      	ldr	r6, [r1, #8]
 80270c4:	b085      	sub	sp, #20
 80270c6:	001f      	movs	r7, r3
 80270c8:	000c      	movs	r4, r1
 80270ca:	680b      	ldr	r3, [r1, #0]
 80270cc:	9002      	str	r0, [sp, #8]
 80270ce:	9203      	str	r2, [sp, #12]
 80270d0:	42be      	cmp	r6, r7
 80270d2:	d830      	bhi.n	8027136 <__ssputs_r+0x76>
 80270d4:	210c      	movs	r1, #12
 80270d6:	5e62      	ldrsh	r2, [r4, r1]
 80270d8:	2190      	movs	r1, #144	@ 0x90
 80270da:	00c9      	lsls	r1, r1, #3
 80270dc:	420a      	tst	r2, r1
 80270de:	d028      	beq.n	8027132 <__ssputs_r+0x72>
 80270e0:	2003      	movs	r0, #3
 80270e2:	6921      	ldr	r1, [r4, #16]
 80270e4:	1a5b      	subs	r3, r3, r1
 80270e6:	9301      	str	r3, [sp, #4]
 80270e8:	6963      	ldr	r3, [r4, #20]
 80270ea:	4343      	muls	r3, r0
 80270ec:	9801      	ldr	r0, [sp, #4]
 80270ee:	0fdd      	lsrs	r5, r3, #31
 80270f0:	18ed      	adds	r5, r5, r3
 80270f2:	1c7b      	adds	r3, r7, #1
 80270f4:	181b      	adds	r3, r3, r0
 80270f6:	106d      	asrs	r5, r5, #1
 80270f8:	42ab      	cmp	r3, r5
 80270fa:	d900      	bls.n	80270fe <__ssputs_r+0x3e>
 80270fc:	001d      	movs	r5, r3
 80270fe:	0552      	lsls	r2, r2, #21
 8027100:	d528      	bpl.n	8027154 <__ssputs_r+0x94>
 8027102:	0029      	movs	r1, r5
 8027104:	9802      	ldr	r0, [sp, #8]
 8027106:	f7ff fa61 	bl	80265cc <_malloc_r>
 802710a:	1e06      	subs	r6, r0, #0
 802710c:	d02c      	beq.n	8027168 <__ssputs_r+0xa8>
 802710e:	9a01      	ldr	r2, [sp, #4]
 8027110:	6921      	ldr	r1, [r4, #16]
 8027112:	f7fd fff9 	bl	8025108 <memcpy>
 8027116:	89a2      	ldrh	r2, [r4, #12]
 8027118:	4b18      	ldr	r3, [pc, #96]	@ (802717c <__ssputs_r+0xbc>)
 802711a:	401a      	ands	r2, r3
 802711c:	2380      	movs	r3, #128	@ 0x80
 802711e:	4313      	orrs	r3, r2
 8027120:	81a3      	strh	r3, [r4, #12]
 8027122:	9b01      	ldr	r3, [sp, #4]
 8027124:	6126      	str	r6, [r4, #16]
 8027126:	18f6      	adds	r6, r6, r3
 8027128:	6026      	str	r6, [r4, #0]
 802712a:	003e      	movs	r6, r7
 802712c:	6165      	str	r5, [r4, #20]
 802712e:	1aed      	subs	r5, r5, r3
 8027130:	60a5      	str	r5, [r4, #8]
 8027132:	42be      	cmp	r6, r7
 8027134:	d900      	bls.n	8027138 <__ssputs_r+0x78>
 8027136:	003e      	movs	r6, r7
 8027138:	0032      	movs	r2, r6
 802713a:	9903      	ldr	r1, [sp, #12]
 802713c:	6820      	ldr	r0, [r4, #0]
 802713e:	f000 fb7e 	bl	802783e <memmove>
 8027142:	2000      	movs	r0, #0
 8027144:	68a3      	ldr	r3, [r4, #8]
 8027146:	1b9b      	subs	r3, r3, r6
 8027148:	60a3      	str	r3, [r4, #8]
 802714a:	6823      	ldr	r3, [r4, #0]
 802714c:	199b      	adds	r3, r3, r6
 802714e:	6023      	str	r3, [r4, #0]
 8027150:	b005      	add	sp, #20
 8027152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027154:	002a      	movs	r2, r5
 8027156:	9802      	ldr	r0, [sp, #8]
 8027158:	f000 fc05 	bl	8027966 <_realloc_r>
 802715c:	1e06      	subs	r6, r0, #0
 802715e:	d1e0      	bne.n	8027122 <__ssputs_r+0x62>
 8027160:	6921      	ldr	r1, [r4, #16]
 8027162:	9802      	ldr	r0, [sp, #8]
 8027164:	f7fe fe62 	bl	8025e2c <_free_r>
 8027168:	230c      	movs	r3, #12
 802716a:	2001      	movs	r0, #1
 802716c:	9a02      	ldr	r2, [sp, #8]
 802716e:	4240      	negs	r0, r0
 8027170:	6013      	str	r3, [r2, #0]
 8027172:	89a2      	ldrh	r2, [r4, #12]
 8027174:	3334      	adds	r3, #52	@ 0x34
 8027176:	4313      	orrs	r3, r2
 8027178:	81a3      	strh	r3, [r4, #12]
 802717a:	e7e9      	b.n	8027150 <__ssputs_r+0x90>
 802717c:	fffffb7f 	.word	0xfffffb7f

08027180 <_svfiprintf_r>:
 8027180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027182:	b0a1      	sub	sp, #132	@ 0x84
 8027184:	9003      	str	r0, [sp, #12]
 8027186:	001d      	movs	r5, r3
 8027188:	898b      	ldrh	r3, [r1, #12]
 802718a:	000f      	movs	r7, r1
 802718c:	0016      	movs	r6, r2
 802718e:	061b      	lsls	r3, r3, #24
 8027190:	d511      	bpl.n	80271b6 <_svfiprintf_r+0x36>
 8027192:	690b      	ldr	r3, [r1, #16]
 8027194:	2b00      	cmp	r3, #0
 8027196:	d10e      	bne.n	80271b6 <_svfiprintf_r+0x36>
 8027198:	2140      	movs	r1, #64	@ 0x40
 802719a:	f7ff fa17 	bl	80265cc <_malloc_r>
 802719e:	6038      	str	r0, [r7, #0]
 80271a0:	6138      	str	r0, [r7, #16]
 80271a2:	2800      	cmp	r0, #0
 80271a4:	d105      	bne.n	80271b2 <_svfiprintf_r+0x32>
 80271a6:	230c      	movs	r3, #12
 80271a8:	9a03      	ldr	r2, [sp, #12]
 80271aa:	6013      	str	r3, [r2, #0]
 80271ac:	2001      	movs	r0, #1
 80271ae:	4240      	negs	r0, r0
 80271b0:	e0cf      	b.n	8027352 <_svfiprintf_r+0x1d2>
 80271b2:	2340      	movs	r3, #64	@ 0x40
 80271b4:	617b      	str	r3, [r7, #20]
 80271b6:	2300      	movs	r3, #0
 80271b8:	ac08      	add	r4, sp, #32
 80271ba:	6163      	str	r3, [r4, #20]
 80271bc:	3320      	adds	r3, #32
 80271be:	7663      	strb	r3, [r4, #25]
 80271c0:	3310      	adds	r3, #16
 80271c2:	76a3      	strb	r3, [r4, #26]
 80271c4:	9507      	str	r5, [sp, #28]
 80271c6:	0035      	movs	r5, r6
 80271c8:	782b      	ldrb	r3, [r5, #0]
 80271ca:	2b00      	cmp	r3, #0
 80271cc:	d001      	beq.n	80271d2 <_svfiprintf_r+0x52>
 80271ce:	2b25      	cmp	r3, #37	@ 0x25
 80271d0:	d148      	bne.n	8027264 <_svfiprintf_r+0xe4>
 80271d2:	1bab      	subs	r3, r5, r6
 80271d4:	9305      	str	r3, [sp, #20]
 80271d6:	42b5      	cmp	r5, r6
 80271d8:	d00b      	beq.n	80271f2 <_svfiprintf_r+0x72>
 80271da:	0032      	movs	r2, r6
 80271dc:	0039      	movs	r1, r7
 80271de:	9803      	ldr	r0, [sp, #12]
 80271e0:	f7ff ff6e 	bl	80270c0 <__ssputs_r>
 80271e4:	3001      	adds	r0, #1
 80271e6:	d100      	bne.n	80271ea <_svfiprintf_r+0x6a>
 80271e8:	e0ae      	b.n	8027348 <_svfiprintf_r+0x1c8>
 80271ea:	6963      	ldr	r3, [r4, #20]
 80271ec:	9a05      	ldr	r2, [sp, #20]
 80271ee:	189b      	adds	r3, r3, r2
 80271f0:	6163      	str	r3, [r4, #20]
 80271f2:	782b      	ldrb	r3, [r5, #0]
 80271f4:	2b00      	cmp	r3, #0
 80271f6:	d100      	bne.n	80271fa <_svfiprintf_r+0x7a>
 80271f8:	e0a6      	b.n	8027348 <_svfiprintf_r+0x1c8>
 80271fa:	2201      	movs	r2, #1
 80271fc:	2300      	movs	r3, #0
 80271fe:	4252      	negs	r2, r2
 8027200:	6062      	str	r2, [r4, #4]
 8027202:	a904      	add	r1, sp, #16
 8027204:	3254      	adds	r2, #84	@ 0x54
 8027206:	1852      	adds	r2, r2, r1
 8027208:	1c6e      	adds	r6, r5, #1
 802720a:	6023      	str	r3, [r4, #0]
 802720c:	60e3      	str	r3, [r4, #12]
 802720e:	60a3      	str	r3, [r4, #8]
 8027210:	7013      	strb	r3, [r2, #0]
 8027212:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027214:	4b54      	ldr	r3, [pc, #336]	@ (8027368 <_svfiprintf_r+0x1e8>)
 8027216:	2205      	movs	r2, #5
 8027218:	0018      	movs	r0, r3
 802721a:	7831      	ldrb	r1, [r6, #0]
 802721c:	9305      	str	r3, [sp, #20]
 802721e:	f7fd ff68 	bl	80250f2 <memchr>
 8027222:	1c75      	adds	r5, r6, #1
 8027224:	2800      	cmp	r0, #0
 8027226:	d11f      	bne.n	8027268 <_svfiprintf_r+0xe8>
 8027228:	6822      	ldr	r2, [r4, #0]
 802722a:	06d3      	lsls	r3, r2, #27
 802722c:	d504      	bpl.n	8027238 <_svfiprintf_r+0xb8>
 802722e:	2353      	movs	r3, #83	@ 0x53
 8027230:	a904      	add	r1, sp, #16
 8027232:	185b      	adds	r3, r3, r1
 8027234:	2120      	movs	r1, #32
 8027236:	7019      	strb	r1, [r3, #0]
 8027238:	0713      	lsls	r3, r2, #28
 802723a:	d504      	bpl.n	8027246 <_svfiprintf_r+0xc6>
 802723c:	2353      	movs	r3, #83	@ 0x53
 802723e:	a904      	add	r1, sp, #16
 8027240:	185b      	adds	r3, r3, r1
 8027242:	212b      	movs	r1, #43	@ 0x2b
 8027244:	7019      	strb	r1, [r3, #0]
 8027246:	7833      	ldrb	r3, [r6, #0]
 8027248:	2b2a      	cmp	r3, #42	@ 0x2a
 802724a:	d016      	beq.n	802727a <_svfiprintf_r+0xfa>
 802724c:	0035      	movs	r5, r6
 802724e:	2100      	movs	r1, #0
 8027250:	200a      	movs	r0, #10
 8027252:	68e3      	ldr	r3, [r4, #12]
 8027254:	782a      	ldrb	r2, [r5, #0]
 8027256:	1c6e      	adds	r6, r5, #1
 8027258:	3a30      	subs	r2, #48	@ 0x30
 802725a:	2a09      	cmp	r2, #9
 802725c:	d950      	bls.n	8027300 <_svfiprintf_r+0x180>
 802725e:	2900      	cmp	r1, #0
 8027260:	d111      	bne.n	8027286 <_svfiprintf_r+0x106>
 8027262:	e017      	b.n	8027294 <_svfiprintf_r+0x114>
 8027264:	3501      	adds	r5, #1
 8027266:	e7af      	b.n	80271c8 <_svfiprintf_r+0x48>
 8027268:	9b05      	ldr	r3, [sp, #20]
 802726a:	6822      	ldr	r2, [r4, #0]
 802726c:	1ac0      	subs	r0, r0, r3
 802726e:	2301      	movs	r3, #1
 8027270:	4083      	lsls	r3, r0
 8027272:	4313      	orrs	r3, r2
 8027274:	002e      	movs	r6, r5
 8027276:	6023      	str	r3, [r4, #0]
 8027278:	e7cc      	b.n	8027214 <_svfiprintf_r+0x94>
 802727a:	9b07      	ldr	r3, [sp, #28]
 802727c:	1d19      	adds	r1, r3, #4
 802727e:	681b      	ldr	r3, [r3, #0]
 8027280:	9107      	str	r1, [sp, #28]
 8027282:	2b00      	cmp	r3, #0
 8027284:	db01      	blt.n	802728a <_svfiprintf_r+0x10a>
 8027286:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027288:	e004      	b.n	8027294 <_svfiprintf_r+0x114>
 802728a:	425b      	negs	r3, r3
 802728c:	60e3      	str	r3, [r4, #12]
 802728e:	2302      	movs	r3, #2
 8027290:	4313      	orrs	r3, r2
 8027292:	6023      	str	r3, [r4, #0]
 8027294:	782b      	ldrb	r3, [r5, #0]
 8027296:	2b2e      	cmp	r3, #46	@ 0x2e
 8027298:	d10c      	bne.n	80272b4 <_svfiprintf_r+0x134>
 802729a:	786b      	ldrb	r3, [r5, #1]
 802729c:	2b2a      	cmp	r3, #42	@ 0x2a
 802729e:	d134      	bne.n	802730a <_svfiprintf_r+0x18a>
 80272a0:	9b07      	ldr	r3, [sp, #28]
 80272a2:	3502      	adds	r5, #2
 80272a4:	1d1a      	adds	r2, r3, #4
 80272a6:	681b      	ldr	r3, [r3, #0]
 80272a8:	9207      	str	r2, [sp, #28]
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	da01      	bge.n	80272b2 <_svfiprintf_r+0x132>
 80272ae:	2301      	movs	r3, #1
 80272b0:	425b      	negs	r3, r3
 80272b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80272b4:	4e2d      	ldr	r6, [pc, #180]	@ (802736c <_svfiprintf_r+0x1ec>)
 80272b6:	2203      	movs	r2, #3
 80272b8:	0030      	movs	r0, r6
 80272ba:	7829      	ldrb	r1, [r5, #0]
 80272bc:	f7fd ff19 	bl	80250f2 <memchr>
 80272c0:	2800      	cmp	r0, #0
 80272c2:	d006      	beq.n	80272d2 <_svfiprintf_r+0x152>
 80272c4:	2340      	movs	r3, #64	@ 0x40
 80272c6:	1b80      	subs	r0, r0, r6
 80272c8:	4083      	lsls	r3, r0
 80272ca:	6822      	ldr	r2, [r4, #0]
 80272cc:	3501      	adds	r5, #1
 80272ce:	4313      	orrs	r3, r2
 80272d0:	6023      	str	r3, [r4, #0]
 80272d2:	7829      	ldrb	r1, [r5, #0]
 80272d4:	2206      	movs	r2, #6
 80272d6:	4826      	ldr	r0, [pc, #152]	@ (8027370 <_svfiprintf_r+0x1f0>)
 80272d8:	1c6e      	adds	r6, r5, #1
 80272da:	7621      	strb	r1, [r4, #24]
 80272dc:	f7fd ff09 	bl	80250f2 <memchr>
 80272e0:	2800      	cmp	r0, #0
 80272e2:	d038      	beq.n	8027356 <_svfiprintf_r+0x1d6>
 80272e4:	4b23      	ldr	r3, [pc, #140]	@ (8027374 <_svfiprintf_r+0x1f4>)
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d122      	bne.n	8027330 <_svfiprintf_r+0x1b0>
 80272ea:	2207      	movs	r2, #7
 80272ec:	9b07      	ldr	r3, [sp, #28]
 80272ee:	3307      	adds	r3, #7
 80272f0:	4393      	bics	r3, r2
 80272f2:	3308      	adds	r3, #8
 80272f4:	9307      	str	r3, [sp, #28]
 80272f6:	6963      	ldr	r3, [r4, #20]
 80272f8:	9a04      	ldr	r2, [sp, #16]
 80272fa:	189b      	adds	r3, r3, r2
 80272fc:	6163      	str	r3, [r4, #20]
 80272fe:	e762      	b.n	80271c6 <_svfiprintf_r+0x46>
 8027300:	4343      	muls	r3, r0
 8027302:	0035      	movs	r5, r6
 8027304:	2101      	movs	r1, #1
 8027306:	189b      	adds	r3, r3, r2
 8027308:	e7a4      	b.n	8027254 <_svfiprintf_r+0xd4>
 802730a:	2300      	movs	r3, #0
 802730c:	200a      	movs	r0, #10
 802730e:	0019      	movs	r1, r3
 8027310:	3501      	adds	r5, #1
 8027312:	6063      	str	r3, [r4, #4]
 8027314:	782a      	ldrb	r2, [r5, #0]
 8027316:	1c6e      	adds	r6, r5, #1
 8027318:	3a30      	subs	r2, #48	@ 0x30
 802731a:	2a09      	cmp	r2, #9
 802731c:	d903      	bls.n	8027326 <_svfiprintf_r+0x1a6>
 802731e:	2b00      	cmp	r3, #0
 8027320:	d0c8      	beq.n	80272b4 <_svfiprintf_r+0x134>
 8027322:	9109      	str	r1, [sp, #36]	@ 0x24
 8027324:	e7c6      	b.n	80272b4 <_svfiprintf_r+0x134>
 8027326:	4341      	muls	r1, r0
 8027328:	0035      	movs	r5, r6
 802732a:	2301      	movs	r3, #1
 802732c:	1889      	adds	r1, r1, r2
 802732e:	e7f1      	b.n	8027314 <_svfiprintf_r+0x194>
 8027330:	aa07      	add	r2, sp, #28
 8027332:	9200      	str	r2, [sp, #0]
 8027334:	0021      	movs	r1, r4
 8027336:	003a      	movs	r2, r7
 8027338:	4b0f      	ldr	r3, [pc, #60]	@ (8027378 <_svfiprintf_r+0x1f8>)
 802733a:	9803      	ldr	r0, [sp, #12]
 802733c:	f7fc ffb2 	bl	80242a4 <_printf_float>
 8027340:	9004      	str	r0, [sp, #16]
 8027342:	9b04      	ldr	r3, [sp, #16]
 8027344:	3301      	adds	r3, #1
 8027346:	d1d6      	bne.n	80272f6 <_svfiprintf_r+0x176>
 8027348:	89bb      	ldrh	r3, [r7, #12]
 802734a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802734c:	065b      	lsls	r3, r3, #25
 802734e:	d500      	bpl.n	8027352 <_svfiprintf_r+0x1d2>
 8027350:	e72c      	b.n	80271ac <_svfiprintf_r+0x2c>
 8027352:	b021      	add	sp, #132	@ 0x84
 8027354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027356:	aa07      	add	r2, sp, #28
 8027358:	9200      	str	r2, [sp, #0]
 802735a:	0021      	movs	r1, r4
 802735c:	003a      	movs	r2, r7
 802735e:	4b06      	ldr	r3, [pc, #24]	@ (8027378 <_svfiprintf_r+0x1f8>)
 8027360:	9803      	ldr	r0, [sp, #12]
 8027362:	f7fd fa4d 	bl	8024800 <_printf_i>
 8027366:	e7eb      	b.n	8027340 <_svfiprintf_r+0x1c0>
 8027368:	0802dc90 	.word	0x0802dc90
 802736c:	0802dc96 	.word	0x0802dc96
 8027370:	0802dc9a 	.word	0x0802dc9a
 8027374:	080242a5 	.word	0x080242a5
 8027378:	080270c1 	.word	0x080270c1

0802737c <__sfputc_r>:
 802737c:	6893      	ldr	r3, [r2, #8]
 802737e:	b510      	push	{r4, lr}
 8027380:	3b01      	subs	r3, #1
 8027382:	6093      	str	r3, [r2, #8]
 8027384:	2b00      	cmp	r3, #0
 8027386:	da04      	bge.n	8027392 <__sfputc_r+0x16>
 8027388:	6994      	ldr	r4, [r2, #24]
 802738a:	42a3      	cmp	r3, r4
 802738c:	db07      	blt.n	802739e <__sfputc_r+0x22>
 802738e:	290a      	cmp	r1, #10
 8027390:	d005      	beq.n	802739e <__sfputc_r+0x22>
 8027392:	6813      	ldr	r3, [r2, #0]
 8027394:	1c58      	adds	r0, r3, #1
 8027396:	6010      	str	r0, [r2, #0]
 8027398:	7019      	strb	r1, [r3, #0]
 802739a:	0008      	movs	r0, r1
 802739c:	bd10      	pop	{r4, pc}
 802739e:	f7fd fd37 	bl	8024e10 <__swbuf_r>
 80273a2:	0001      	movs	r1, r0
 80273a4:	e7f9      	b.n	802739a <__sfputc_r+0x1e>

080273a6 <__sfputs_r>:
 80273a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273a8:	0006      	movs	r6, r0
 80273aa:	000f      	movs	r7, r1
 80273ac:	0014      	movs	r4, r2
 80273ae:	18d5      	adds	r5, r2, r3
 80273b0:	42ac      	cmp	r4, r5
 80273b2:	d101      	bne.n	80273b8 <__sfputs_r+0x12>
 80273b4:	2000      	movs	r0, #0
 80273b6:	e007      	b.n	80273c8 <__sfputs_r+0x22>
 80273b8:	7821      	ldrb	r1, [r4, #0]
 80273ba:	003a      	movs	r2, r7
 80273bc:	0030      	movs	r0, r6
 80273be:	f7ff ffdd 	bl	802737c <__sfputc_r>
 80273c2:	3401      	adds	r4, #1
 80273c4:	1c43      	adds	r3, r0, #1
 80273c6:	d1f3      	bne.n	80273b0 <__sfputs_r+0xa>
 80273c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080273cc <_vfiprintf_r>:
 80273cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273ce:	b0a1      	sub	sp, #132	@ 0x84
 80273d0:	000f      	movs	r7, r1
 80273d2:	0015      	movs	r5, r2
 80273d4:	001e      	movs	r6, r3
 80273d6:	9003      	str	r0, [sp, #12]
 80273d8:	2800      	cmp	r0, #0
 80273da:	d004      	beq.n	80273e6 <_vfiprintf_r+0x1a>
 80273dc:	6a03      	ldr	r3, [r0, #32]
 80273de:	2b00      	cmp	r3, #0
 80273e0:	d101      	bne.n	80273e6 <_vfiprintf_r+0x1a>
 80273e2:	f7fd fbab 	bl	8024b3c <__sinit>
 80273e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80273e8:	07db      	lsls	r3, r3, #31
 80273ea:	d405      	bmi.n	80273f8 <_vfiprintf_r+0x2c>
 80273ec:	89bb      	ldrh	r3, [r7, #12]
 80273ee:	059b      	lsls	r3, r3, #22
 80273f0:	d402      	bmi.n	80273f8 <_vfiprintf_r+0x2c>
 80273f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80273f4:	f7fd fe7b 	bl	80250ee <__retarget_lock_acquire_recursive>
 80273f8:	89bb      	ldrh	r3, [r7, #12]
 80273fa:	071b      	lsls	r3, r3, #28
 80273fc:	d502      	bpl.n	8027404 <_vfiprintf_r+0x38>
 80273fe:	693b      	ldr	r3, [r7, #16]
 8027400:	2b00      	cmp	r3, #0
 8027402:	d113      	bne.n	802742c <_vfiprintf_r+0x60>
 8027404:	0039      	movs	r1, r7
 8027406:	9803      	ldr	r0, [sp, #12]
 8027408:	f7fd fd44 	bl	8024e94 <__swsetup_r>
 802740c:	2800      	cmp	r0, #0
 802740e:	d00d      	beq.n	802742c <_vfiprintf_r+0x60>
 8027410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027412:	07db      	lsls	r3, r3, #31
 8027414:	d503      	bpl.n	802741e <_vfiprintf_r+0x52>
 8027416:	2001      	movs	r0, #1
 8027418:	4240      	negs	r0, r0
 802741a:	b021      	add	sp, #132	@ 0x84
 802741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802741e:	89bb      	ldrh	r3, [r7, #12]
 8027420:	059b      	lsls	r3, r3, #22
 8027422:	d4f8      	bmi.n	8027416 <_vfiprintf_r+0x4a>
 8027424:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027426:	f7fd fe63 	bl	80250f0 <__retarget_lock_release_recursive>
 802742a:	e7f4      	b.n	8027416 <_vfiprintf_r+0x4a>
 802742c:	2300      	movs	r3, #0
 802742e:	ac08      	add	r4, sp, #32
 8027430:	6163      	str	r3, [r4, #20]
 8027432:	3320      	adds	r3, #32
 8027434:	7663      	strb	r3, [r4, #25]
 8027436:	3310      	adds	r3, #16
 8027438:	76a3      	strb	r3, [r4, #26]
 802743a:	9607      	str	r6, [sp, #28]
 802743c:	002e      	movs	r6, r5
 802743e:	7833      	ldrb	r3, [r6, #0]
 8027440:	2b00      	cmp	r3, #0
 8027442:	d001      	beq.n	8027448 <_vfiprintf_r+0x7c>
 8027444:	2b25      	cmp	r3, #37	@ 0x25
 8027446:	d148      	bne.n	80274da <_vfiprintf_r+0x10e>
 8027448:	1b73      	subs	r3, r6, r5
 802744a:	9305      	str	r3, [sp, #20]
 802744c:	42ae      	cmp	r6, r5
 802744e:	d00b      	beq.n	8027468 <_vfiprintf_r+0x9c>
 8027450:	002a      	movs	r2, r5
 8027452:	0039      	movs	r1, r7
 8027454:	9803      	ldr	r0, [sp, #12]
 8027456:	f7ff ffa6 	bl	80273a6 <__sfputs_r>
 802745a:	3001      	adds	r0, #1
 802745c:	d100      	bne.n	8027460 <_vfiprintf_r+0x94>
 802745e:	e0ae      	b.n	80275be <_vfiprintf_r+0x1f2>
 8027460:	6963      	ldr	r3, [r4, #20]
 8027462:	9a05      	ldr	r2, [sp, #20]
 8027464:	189b      	adds	r3, r3, r2
 8027466:	6163      	str	r3, [r4, #20]
 8027468:	7833      	ldrb	r3, [r6, #0]
 802746a:	2b00      	cmp	r3, #0
 802746c:	d100      	bne.n	8027470 <_vfiprintf_r+0xa4>
 802746e:	e0a6      	b.n	80275be <_vfiprintf_r+0x1f2>
 8027470:	2201      	movs	r2, #1
 8027472:	2300      	movs	r3, #0
 8027474:	4252      	negs	r2, r2
 8027476:	6062      	str	r2, [r4, #4]
 8027478:	a904      	add	r1, sp, #16
 802747a:	3254      	adds	r2, #84	@ 0x54
 802747c:	1852      	adds	r2, r2, r1
 802747e:	1c75      	adds	r5, r6, #1
 8027480:	6023      	str	r3, [r4, #0]
 8027482:	60e3      	str	r3, [r4, #12]
 8027484:	60a3      	str	r3, [r4, #8]
 8027486:	7013      	strb	r3, [r2, #0]
 8027488:	65a3      	str	r3, [r4, #88]	@ 0x58
 802748a:	4b59      	ldr	r3, [pc, #356]	@ (80275f0 <_vfiprintf_r+0x224>)
 802748c:	2205      	movs	r2, #5
 802748e:	0018      	movs	r0, r3
 8027490:	7829      	ldrb	r1, [r5, #0]
 8027492:	9305      	str	r3, [sp, #20]
 8027494:	f7fd fe2d 	bl	80250f2 <memchr>
 8027498:	1c6e      	adds	r6, r5, #1
 802749a:	2800      	cmp	r0, #0
 802749c:	d11f      	bne.n	80274de <_vfiprintf_r+0x112>
 802749e:	6822      	ldr	r2, [r4, #0]
 80274a0:	06d3      	lsls	r3, r2, #27
 80274a2:	d504      	bpl.n	80274ae <_vfiprintf_r+0xe2>
 80274a4:	2353      	movs	r3, #83	@ 0x53
 80274a6:	a904      	add	r1, sp, #16
 80274a8:	185b      	adds	r3, r3, r1
 80274aa:	2120      	movs	r1, #32
 80274ac:	7019      	strb	r1, [r3, #0]
 80274ae:	0713      	lsls	r3, r2, #28
 80274b0:	d504      	bpl.n	80274bc <_vfiprintf_r+0xf0>
 80274b2:	2353      	movs	r3, #83	@ 0x53
 80274b4:	a904      	add	r1, sp, #16
 80274b6:	185b      	adds	r3, r3, r1
 80274b8:	212b      	movs	r1, #43	@ 0x2b
 80274ba:	7019      	strb	r1, [r3, #0]
 80274bc:	782b      	ldrb	r3, [r5, #0]
 80274be:	2b2a      	cmp	r3, #42	@ 0x2a
 80274c0:	d016      	beq.n	80274f0 <_vfiprintf_r+0x124>
 80274c2:	002e      	movs	r6, r5
 80274c4:	2100      	movs	r1, #0
 80274c6:	200a      	movs	r0, #10
 80274c8:	68e3      	ldr	r3, [r4, #12]
 80274ca:	7832      	ldrb	r2, [r6, #0]
 80274cc:	1c75      	adds	r5, r6, #1
 80274ce:	3a30      	subs	r2, #48	@ 0x30
 80274d0:	2a09      	cmp	r2, #9
 80274d2:	d950      	bls.n	8027576 <_vfiprintf_r+0x1aa>
 80274d4:	2900      	cmp	r1, #0
 80274d6:	d111      	bne.n	80274fc <_vfiprintf_r+0x130>
 80274d8:	e017      	b.n	802750a <_vfiprintf_r+0x13e>
 80274da:	3601      	adds	r6, #1
 80274dc:	e7af      	b.n	802743e <_vfiprintf_r+0x72>
 80274de:	9b05      	ldr	r3, [sp, #20]
 80274e0:	6822      	ldr	r2, [r4, #0]
 80274e2:	1ac0      	subs	r0, r0, r3
 80274e4:	2301      	movs	r3, #1
 80274e6:	4083      	lsls	r3, r0
 80274e8:	4313      	orrs	r3, r2
 80274ea:	0035      	movs	r5, r6
 80274ec:	6023      	str	r3, [r4, #0]
 80274ee:	e7cc      	b.n	802748a <_vfiprintf_r+0xbe>
 80274f0:	9b07      	ldr	r3, [sp, #28]
 80274f2:	1d19      	adds	r1, r3, #4
 80274f4:	681b      	ldr	r3, [r3, #0]
 80274f6:	9107      	str	r1, [sp, #28]
 80274f8:	2b00      	cmp	r3, #0
 80274fa:	db01      	blt.n	8027500 <_vfiprintf_r+0x134>
 80274fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80274fe:	e004      	b.n	802750a <_vfiprintf_r+0x13e>
 8027500:	425b      	negs	r3, r3
 8027502:	60e3      	str	r3, [r4, #12]
 8027504:	2302      	movs	r3, #2
 8027506:	4313      	orrs	r3, r2
 8027508:	6023      	str	r3, [r4, #0]
 802750a:	7833      	ldrb	r3, [r6, #0]
 802750c:	2b2e      	cmp	r3, #46	@ 0x2e
 802750e:	d10c      	bne.n	802752a <_vfiprintf_r+0x15e>
 8027510:	7873      	ldrb	r3, [r6, #1]
 8027512:	2b2a      	cmp	r3, #42	@ 0x2a
 8027514:	d134      	bne.n	8027580 <_vfiprintf_r+0x1b4>
 8027516:	9b07      	ldr	r3, [sp, #28]
 8027518:	3602      	adds	r6, #2
 802751a:	1d1a      	adds	r2, r3, #4
 802751c:	681b      	ldr	r3, [r3, #0]
 802751e:	9207      	str	r2, [sp, #28]
 8027520:	2b00      	cmp	r3, #0
 8027522:	da01      	bge.n	8027528 <_vfiprintf_r+0x15c>
 8027524:	2301      	movs	r3, #1
 8027526:	425b      	negs	r3, r3
 8027528:	9309      	str	r3, [sp, #36]	@ 0x24
 802752a:	4d32      	ldr	r5, [pc, #200]	@ (80275f4 <_vfiprintf_r+0x228>)
 802752c:	2203      	movs	r2, #3
 802752e:	0028      	movs	r0, r5
 8027530:	7831      	ldrb	r1, [r6, #0]
 8027532:	f7fd fdde 	bl	80250f2 <memchr>
 8027536:	2800      	cmp	r0, #0
 8027538:	d006      	beq.n	8027548 <_vfiprintf_r+0x17c>
 802753a:	2340      	movs	r3, #64	@ 0x40
 802753c:	1b40      	subs	r0, r0, r5
 802753e:	4083      	lsls	r3, r0
 8027540:	6822      	ldr	r2, [r4, #0]
 8027542:	3601      	adds	r6, #1
 8027544:	4313      	orrs	r3, r2
 8027546:	6023      	str	r3, [r4, #0]
 8027548:	7831      	ldrb	r1, [r6, #0]
 802754a:	2206      	movs	r2, #6
 802754c:	482a      	ldr	r0, [pc, #168]	@ (80275f8 <_vfiprintf_r+0x22c>)
 802754e:	1c75      	adds	r5, r6, #1
 8027550:	7621      	strb	r1, [r4, #24]
 8027552:	f7fd fdce 	bl	80250f2 <memchr>
 8027556:	2800      	cmp	r0, #0
 8027558:	d040      	beq.n	80275dc <_vfiprintf_r+0x210>
 802755a:	4b28      	ldr	r3, [pc, #160]	@ (80275fc <_vfiprintf_r+0x230>)
 802755c:	2b00      	cmp	r3, #0
 802755e:	d122      	bne.n	80275a6 <_vfiprintf_r+0x1da>
 8027560:	2207      	movs	r2, #7
 8027562:	9b07      	ldr	r3, [sp, #28]
 8027564:	3307      	adds	r3, #7
 8027566:	4393      	bics	r3, r2
 8027568:	3308      	adds	r3, #8
 802756a:	9307      	str	r3, [sp, #28]
 802756c:	6963      	ldr	r3, [r4, #20]
 802756e:	9a04      	ldr	r2, [sp, #16]
 8027570:	189b      	adds	r3, r3, r2
 8027572:	6163      	str	r3, [r4, #20]
 8027574:	e762      	b.n	802743c <_vfiprintf_r+0x70>
 8027576:	4343      	muls	r3, r0
 8027578:	002e      	movs	r6, r5
 802757a:	2101      	movs	r1, #1
 802757c:	189b      	adds	r3, r3, r2
 802757e:	e7a4      	b.n	80274ca <_vfiprintf_r+0xfe>
 8027580:	2300      	movs	r3, #0
 8027582:	200a      	movs	r0, #10
 8027584:	0019      	movs	r1, r3
 8027586:	3601      	adds	r6, #1
 8027588:	6063      	str	r3, [r4, #4]
 802758a:	7832      	ldrb	r2, [r6, #0]
 802758c:	1c75      	adds	r5, r6, #1
 802758e:	3a30      	subs	r2, #48	@ 0x30
 8027590:	2a09      	cmp	r2, #9
 8027592:	d903      	bls.n	802759c <_vfiprintf_r+0x1d0>
 8027594:	2b00      	cmp	r3, #0
 8027596:	d0c8      	beq.n	802752a <_vfiprintf_r+0x15e>
 8027598:	9109      	str	r1, [sp, #36]	@ 0x24
 802759a:	e7c6      	b.n	802752a <_vfiprintf_r+0x15e>
 802759c:	4341      	muls	r1, r0
 802759e:	002e      	movs	r6, r5
 80275a0:	2301      	movs	r3, #1
 80275a2:	1889      	adds	r1, r1, r2
 80275a4:	e7f1      	b.n	802758a <_vfiprintf_r+0x1be>
 80275a6:	aa07      	add	r2, sp, #28
 80275a8:	9200      	str	r2, [sp, #0]
 80275aa:	0021      	movs	r1, r4
 80275ac:	003a      	movs	r2, r7
 80275ae:	4b14      	ldr	r3, [pc, #80]	@ (8027600 <_vfiprintf_r+0x234>)
 80275b0:	9803      	ldr	r0, [sp, #12]
 80275b2:	f7fc fe77 	bl	80242a4 <_printf_float>
 80275b6:	9004      	str	r0, [sp, #16]
 80275b8:	9b04      	ldr	r3, [sp, #16]
 80275ba:	3301      	adds	r3, #1
 80275bc:	d1d6      	bne.n	802756c <_vfiprintf_r+0x1a0>
 80275be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80275c0:	07db      	lsls	r3, r3, #31
 80275c2:	d405      	bmi.n	80275d0 <_vfiprintf_r+0x204>
 80275c4:	89bb      	ldrh	r3, [r7, #12]
 80275c6:	059b      	lsls	r3, r3, #22
 80275c8:	d402      	bmi.n	80275d0 <_vfiprintf_r+0x204>
 80275ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80275cc:	f7fd fd90 	bl	80250f0 <__retarget_lock_release_recursive>
 80275d0:	89bb      	ldrh	r3, [r7, #12]
 80275d2:	065b      	lsls	r3, r3, #25
 80275d4:	d500      	bpl.n	80275d8 <_vfiprintf_r+0x20c>
 80275d6:	e71e      	b.n	8027416 <_vfiprintf_r+0x4a>
 80275d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80275da:	e71e      	b.n	802741a <_vfiprintf_r+0x4e>
 80275dc:	aa07      	add	r2, sp, #28
 80275de:	9200      	str	r2, [sp, #0]
 80275e0:	0021      	movs	r1, r4
 80275e2:	003a      	movs	r2, r7
 80275e4:	4b06      	ldr	r3, [pc, #24]	@ (8027600 <_vfiprintf_r+0x234>)
 80275e6:	9803      	ldr	r0, [sp, #12]
 80275e8:	f7fd f90a 	bl	8024800 <_printf_i>
 80275ec:	e7e3      	b.n	80275b6 <_vfiprintf_r+0x1ea>
 80275ee:	46c0      	nop			@ (mov r8, r8)
 80275f0:	0802dc90 	.word	0x0802dc90
 80275f4:	0802dc96 	.word	0x0802dc96
 80275f8:	0802dc9a 	.word	0x0802dc9a
 80275fc:	080242a5 	.word	0x080242a5
 8027600:	080273a7 	.word	0x080273a7

08027604 <__sflush_r>:
 8027604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027606:	220c      	movs	r2, #12
 8027608:	5e8b      	ldrsh	r3, [r1, r2]
 802760a:	0005      	movs	r5, r0
 802760c:	000c      	movs	r4, r1
 802760e:	071a      	lsls	r2, r3, #28
 8027610:	d456      	bmi.n	80276c0 <__sflush_r+0xbc>
 8027612:	684a      	ldr	r2, [r1, #4]
 8027614:	2a00      	cmp	r2, #0
 8027616:	dc02      	bgt.n	802761e <__sflush_r+0x1a>
 8027618:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802761a:	2a00      	cmp	r2, #0
 802761c:	dd4e      	ble.n	80276bc <__sflush_r+0xb8>
 802761e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027620:	2f00      	cmp	r7, #0
 8027622:	d04b      	beq.n	80276bc <__sflush_r+0xb8>
 8027624:	2200      	movs	r2, #0
 8027626:	2080      	movs	r0, #128	@ 0x80
 8027628:	682e      	ldr	r6, [r5, #0]
 802762a:	602a      	str	r2, [r5, #0]
 802762c:	001a      	movs	r2, r3
 802762e:	0140      	lsls	r0, r0, #5
 8027630:	6a21      	ldr	r1, [r4, #32]
 8027632:	4002      	ands	r2, r0
 8027634:	4203      	tst	r3, r0
 8027636:	d033      	beq.n	80276a0 <__sflush_r+0x9c>
 8027638:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802763a:	89a3      	ldrh	r3, [r4, #12]
 802763c:	075b      	lsls	r3, r3, #29
 802763e:	d506      	bpl.n	802764e <__sflush_r+0x4a>
 8027640:	6863      	ldr	r3, [r4, #4]
 8027642:	1ad2      	subs	r2, r2, r3
 8027644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027646:	2b00      	cmp	r3, #0
 8027648:	d001      	beq.n	802764e <__sflush_r+0x4a>
 802764a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802764c:	1ad2      	subs	r2, r2, r3
 802764e:	2300      	movs	r3, #0
 8027650:	0028      	movs	r0, r5
 8027652:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027654:	6a21      	ldr	r1, [r4, #32]
 8027656:	47b8      	blx	r7
 8027658:	89a2      	ldrh	r2, [r4, #12]
 802765a:	1c43      	adds	r3, r0, #1
 802765c:	d106      	bne.n	802766c <__sflush_r+0x68>
 802765e:	6829      	ldr	r1, [r5, #0]
 8027660:	291d      	cmp	r1, #29
 8027662:	d846      	bhi.n	80276f2 <__sflush_r+0xee>
 8027664:	4b29      	ldr	r3, [pc, #164]	@ (802770c <__sflush_r+0x108>)
 8027666:	410b      	asrs	r3, r1
 8027668:	07db      	lsls	r3, r3, #31
 802766a:	d442      	bmi.n	80276f2 <__sflush_r+0xee>
 802766c:	2300      	movs	r3, #0
 802766e:	6063      	str	r3, [r4, #4]
 8027670:	6923      	ldr	r3, [r4, #16]
 8027672:	6023      	str	r3, [r4, #0]
 8027674:	04d2      	lsls	r2, r2, #19
 8027676:	d505      	bpl.n	8027684 <__sflush_r+0x80>
 8027678:	1c43      	adds	r3, r0, #1
 802767a:	d102      	bne.n	8027682 <__sflush_r+0x7e>
 802767c:	682b      	ldr	r3, [r5, #0]
 802767e:	2b00      	cmp	r3, #0
 8027680:	d100      	bne.n	8027684 <__sflush_r+0x80>
 8027682:	6560      	str	r0, [r4, #84]	@ 0x54
 8027684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027686:	602e      	str	r6, [r5, #0]
 8027688:	2900      	cmp	r1, #0
 802768a:	d017      	beq.n	80276bc <__sflush_r+0xb8>
 802768c:	0023      	movs	r3, r4
 802768e:	3344      	adds	r3, #68	@ 0x44
 8027690:	4299      	cmp	r1, r3
 8027692:	d002      	beq.n	802769a <__sflush_r+0x96>
 8027694:	0028      	movs	r0, r5
 8027696:	f7fe fbc9 	bl	8025e2c <_free_r>
 802769a:	2300      	movs	r3, #0
 802769c:	6363      	str	r3, [r4, #52]	@ 0x34
 802769e:	e00d      	b.n	80276bc <__sflush_r+0xb8>
 80276a0:	2301      	movs	r3, #1
 80276a2:	0028      	movs	r0, r5
 80276a4:	47b8      	blx	r7
 80276a6:	0002      	movs	r2, r0
 80276a8:	1c43      	adds	r3, r0, #1
 80276aa:	d1c6      	bne.n	802763a <__sflush_r+0x36>
 80276ac:	682b      	ldr	r3, [r5, #0]
 80276ae:	2b00      	cmp	r3, #0
 80276b0:	d0c3      	beq.n	802763a <__sflush_r+0x36>
 80276b2:	2b1d      	cmp	r3, #29
 80276b4:	d001      	beq.n	80276ba <__sflush_r+0xb6>
 80276b6:	2b16      	cmp	r3, #22
 80276b8:	d11a      	bne.n	80276f0 <__sflush_r+0xec>
 80276ba:	602e      	str	r6, [r5, #0]
 80276bc:	2000      	movs	r0, #0
 80276be:	e01e      	b.n	80276fe <__sflush_r+0xfa>
 80276c0:	690e      	ldr	r6, [r1, #16]
 80276c2:	2e00      	cmp	r6, #0
 80276c4:	d0fa      	beq.n	80276bc <__sflush_r+0xb8>
 80276c6:	680f      	ldr	r7, [r1, #0]
 80276c8:	600e      	str	r6, [r1, #0]
 80276ca:	1bba      	subs	r2, r7, r6
 80276cc:	9201      	str	r2, [sp, #4]
 80276ce:	2200      	movs	r2, #0
 80276d0:	079b      	lsls	r3, r3, #30
 80276d2:	d100      	bne.n	80276d6 <__sflush_r+0xd2>
 80276d4:	694a      	ldr	r2, [r1, #20]
 80276d6:	60a2      	str	r2, [r4, #8]
 80276d8:	9b01      	ldr	r3, [sp, #4]
 80276da:	2b00      	cmp	r3, #0
 80276dc:	ddee      	ble.n	80276bc <__sflush_r+0xb8>
 80276de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80276e0:	0032      	movs	r2, r6
 80276e2:	001f      	movs	r7, r3
 80276e4:	0028      	movs	r0, r5
 80276e6:	9b01      	ldr	r3, [sp, #4]
 80276e8:	6a21      	ldr	r1, [r4, #32]
 80276ea:	47b8      	blx	r7
 80276ec:	2800      	cmp	r0, #0
 80276ee:	dc07      	bgt.n	8027700 <__sflush_r+0xfc>
 80276f0:	89a2      	ldrh	r2, [r4, #12]
 80276f2:	2340      	movs	r3, #64	@ 0x40
 80276f4:	2001      	movs	r0, #1
 80276f6:	4313      	orrs	r3, r2
 80276f8:	b21b      	sxth	r3, r3
 80276fa:	81a3      	strh	r3, [r4, #12]
 80276fc:	4240      	negs	r0, r0
 80276fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027700:	9b01      	ldr	r3, [sp, #4]
 8027702:	1836      	adds	r6, r6, r0
 8027704:	1a1b      	subs	r3, r3, r0
 8027706:	9301      	str	r3, [sp, #4]
 8027708:	e7e6      	b.n	80276d8 <__sflush_r+0xd4>
 802770a:	46c0      	nop			@ (mov r8, r8)
 802770c:	dfbffffe 	.word	0xdfbffffe

08027710 <_fflush_r>:
 8027710:	690b      	ldr	r3, [r1, #16]
 8027712:	b570      	push	{r4, r5, r6, lr}
 8027714:	0005      	movs	r5, r0
 8027716:	000c      	movs	r4, r1
 8027718:	2b00      	cmp	r3, #0
 802771a:	d102      	bne.n	8027722 <_fflush_r+0x12>
 802771c:	2500      	movs	r5, #0
 802771e:	0028      	movs	r0, r5
 8027720:	bd70      	pop	{r4, r5, r6, pc}
 8027722:	2800      	cmp	r0, #0
 8027724:	d004      	beq.n	8027730 <_fflush_r+0x20>
 8027726:	6a03      	ldr	r3, [r0, #32]
 8027728:	2b00      	cmp	r3, #0
 802772a:	d101      	bne.n	8027730 <_fflush_r+0x20>
 802772c:	f7fd fa06 	bl	8024b3c <__sinit>
 8027730:	220c      	movs	r2, #12
 8027732:	5ea3      	ldrsh	r3, [r4, r2]
 8027734:	2b00      	cmp	r3, #0
 8027736:	d0f1      	beq.n	802771c <_fflush_r+0xc>
 8027738:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802773a:	07d2      	lsls	r2, r2, #31
 802773c:	d404      	bmi.n	8027748 <_fflush_r+0x38>
 802773e:	059b      	lsls	r3, r3, #22
 8027740:	d402      	bmi.n	8027748 <_fflush_r+0x38>
 8027742:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027744:	f7fd fcd3 	bl	80250ee <__retarget_lock_acquire_recursive>
 8027748:	0028      	movs	r0, r5
 802774a:	0021      	movs	r1, r4
 802774c:	f7ff ff5a 	bl	8027604 <__sflush_r>
 8027750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027752:	0005      	movs	r5, r0
 8027754:	07db      	lsls	r3, r3, #31
 8027756:	d4e2      	bmi.n	802771e <_fflush_r+0xe>
 8027758:	89a3      	ldrh	r3, [r4, #12]
 802775a:	059b      	lsls	r3, r3, #22
 802775c:	d4df      	bmi.n	802771e <_fflush_r+0xe>
 802775e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027760:	f7fd fcc6 	bl	80250f0 <__retarget_lock_release_recursive>
 8027764:	e7db      	b.n	802771e <_fflush_r+0xe>
	...

08027768 <__swhatbuf_r>:
 8027768:	b570      	push	{r4, r5, r6, lr}
 802776a:	000e      	movs	r6, r1
 802776c:	001d      	movs	r5, r3
 802776e:	230e      	movs	r3, #14
 8027770:	5ec9      	ldrsh	r1, [r1, r3]
 8027772:	0014      	movs	r4, r2
 8027774:	b096      	sub	sp, #88	@ 0x58
 8027776:	2900      	cmp	r1, #0
 8027778:	da0c      	bge.n	8027794 <__swhatbuf_r+0x2c>
 802777a:	89b2      	ldrh	r2, [r6, #12]
 802777c:	2380      	movs	r3, #128	@ 0x80
 802777e:	0011      	movs	r1, r2
 8027780:	4019      	ands	r1, r3
 8027782:	421a      	tst	r2, r3
 8027784:	d114      	bne.n	80277b0 <__swhatbuf_r+0x48>
 8027786:	2380      	movs	r3, #128	@ 0x80
 8027788:	00db      	lsls	r3, r3, #3
 802778a:	2000      	movs	r0, #0
 802778c:	6029      	str	r1, [r5, #0]
 802778e:	6023      	str	r3, [r4, #0]
 8027790:	b016      	add	sp, #88	@ 0x58
 8027792:	bd70      	pop	{r4, r5, r6, pc}
 8027794:	466a      	mov	r2, sp
 8027796:	f000 f865 	bl	8027864 <_fstat_r>
 802779a:	2800      	cmp	r0, #0
 802779c:	dbed      	blt.n	802777a <__swhatbuf_r+0x12>
 802779e:	23f0      	movs	r3, #240	@ 0xf0
 80277a0:	9901      	ldr	r1, [sp, #4]
 80277a2:	021b      	lsls	r3, r3, #8
 80277a4:	4019      	ands	r1, r3
 80277a6:	4b04      	ldr	r3, [pc, #16]	@ (80277b8 <__swhatbuf_r+0x50>)
 80277a8:	18c9      	adds	r1, r1, r3
 80277aa:	424b      	negs	r3, r1
 80277ac:	4159      	adcs	r1, r3
 80277ae:	e7ea      	b.n	8027786 <__swhatbuf_r+0x1e>
 80277b0:	2100      	movs	r1, #0
 80277b2:	2340      	movs	r3, #64	@ 0x40
 80277b4:	e7e9      	b.n	802778a <__swhatbuf_r+0x22>
 80277b6:	46c0      	nop			@ (mov r8, r8)
 80277b8:	ffffe000 	.word	0xffffe000

080277bc <__smakebuf_r>:
 80277bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80277be:	2602      	movs	r6, #2
 80277c0:	898b      	ldrh	r3, [r1, #12]
 80277c2:	0005      	movs	r5, r0
 80277c4:	000c      	movs	r4, r1
 80277c6:	b085      	sub	sp, #20
 80277c8:	4233      	tst	r3, r6
 80277ca:	d007      	beq.n	80277dc <__smakebuf_r+0x20>
 80277cc:	0023      	movs	r3, r4
 80277ce:	3347      	adds	r3, #71	@ 0x47
 80277d0:	6023      	str	r3, [r4, #0]
 80277d2:	6123      	str	r3, [r4, #16]
 80277d4:	2301      	movs	r3, #1
 80277d6:	6163      	str	r3, [r4, #20]
 80277d8:	b005      	add	sp, #20
 80277da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277dc:	ab03      	add	r3, sp, #12
 80277de:	aa02      	add	r2, sp, #8
 80277e0:	f7ff ffc2 	bl	8027768 <__swhatbuf_r>
 80277e4:	9f02      	ldr	r7, [sp, #8]
 80277e6:	9001      	str	r0, [sp, #4]
 80277e8:	0039      	movs	r1, r7
 80277ea:	0028      	movs	r0, r5
 80277ec:	f7fe feee 	bl	80265cc <_malloc_r>
 80277f0:	2800      	cmp	r0, #0
 80277f2:	d108      	bne.n	8027806 <__smakebuf_r+0x4a>
 80277f4:	220c      	movs	r2, #12
 80277f6:	5ea3      	ldrsh	r3, [r4, r2]
 80277f8:	059a      	lsls	r2, r3, #22
 80277fa:	d4ed      	bmi.n	80277d8 <__smakebuf_r+0x1c>
 80277fc:	2203      	movs	r2, #3
 80277fe:	4393      	bics	r3, r2
 8027800:	431e      	orrs	r6, r3
 8027802:	81a6      	strh	r6, [r4, #12]
 8027804:	e7e2      	b.n	80277cc <__smakebuf_r+0x10>
 8027806:	2380      	movs	r3, #128	@ 0x80
 8027808:	89a2      	ldrh	r2, [r4, #12]
 802780a:	6020      	str	r0, [r4, #0]
 802780c:	4313      	orrs	r3, r2
 802780e:	81a3      	strh	r3, [r4, #12]
 8027810:	9b03      	ldr	r3, [sp, #12]
 8027812:	6120      	str	r0, [r4, #16]
 8027814:	6167      	str	r7, [r4, #20]
 8027816:	2b00      	cmp	r3, #0
 8027818:	d00c      	beq.n	8027834 <__smakebuf_r+0x78>
 802781a:	0028      	movs	r0, r5
 802781c:	230e      	movs	r3, #14
 802781e:	5ee1      	ldrsh	r1, [r4, r3]
 8027820:	f000 f832 	bl	8027888 <_isatty_r>
 8027824:	2800      	cmp	r0, #0
 8027826:	d005      	beq.n	8027834 <__smakebuf_r+0x78>
 8027828:	2303      	movs	r3, #3
 802782a:	89a2      	ldrh	r2, [r4, #12]
 802782c:	439a      	bics	r2, r3
 802782e:	3b02      	subs	r3, #2
 8027830:	4313      	orrs	r3, r2
 8027832:	81a3      	strh	r3, [r4, #12]
 8027834:	89a3      	ldrh	r3, [r4, #12]
 8027836:	9a01      	ldr	r2, [sp, #4]
 8027838:	4313      	orrs	r3, r2
 802783a:	81a3      	strh	r3, [r4, #12]
 802783c:	e7cc      	b.n	80277d8 <__smakebuf_r+0x1c>

0802783e <memmove>:
 802783e:	b510      	push	{r4, lr}
 8027840:	4288      	cmp	r0, r1
 8027842:	d806      	bhi.n	8027852 <memmove+0x14>
 8027844:	2300      	movs	r3, #0
 8027846:	429a      	cmp	r2, r3
 8027848:	d008      	beq.n	802785c <memmove+0x1e>
 802784a:	5ccc      	ldrb	r4, [r1, r3]
 802784c:	54c4      	strb	r4, [r0, r3]
 802784e:	3301      	adds	r3, #1
 8027850:	e7f9      	b.n	8027846 <memmove+0x8>
 8027852:	188b      	adds	r3, r1, r2
 8027854:	4298      	cmp	r0, r3
 8027856:	d2f5      	bcs.n	8027844 <memmove+0x6>
 8027858:	3a01      	subs	r2, #1
 802785a:	d200      	bcs.n	802785e <memmove+0x20>
 802785c:	bd10      	pop	{r4, pc}
 802785e:	5c8b      	ldrb	r3, [r1, r2]
 8027860:	5483      	strb	r3, [r0, r2]
 8027862:	e7f9      	b.n	8027858 <memmove+0x1a>

08027864 <_fstat_r>:
 8027864:	2300      	movs	r3, #0
 8027866:	b570      	push	{r4, r5, r6, lr}
 8027868:	4d06      	ldr	r5, [pc, #24]	@ (8027884 <_fstat_r+0x20>)
 802786a:	0004      	movs	r4, r0
 802786c:	0008      	movs	r0, r1
 802786e:	0011      	movs	r1, r2
 8027870:	602b      	str	r3, [r5, #0]
 8027872:	f7ea fcd1 	bl	8012218 <_fstat>
 8027876:	1c43      	adds	r3, r0, #1
 8027878:	d103      	bne.n	8027882 <_fstat_r+0x1e>
 802787a:	682b      	ldr	r3, [r5, #0]
 802787c:	2b00      	cmp	r3, #0
 802787e:	d000      	beq.n	8027882 <_fstat_r+0x1e>
 8027880:	6023      	str	r3, [r4, #0]
 8027882:	bd70      	pop	{r4, r5, r6, pc}
 8027884:	20003630 	.word	0x20003630

08027888 <_isatty_r>:
 8027888:	2300      	movs	r3, #0
 802788a:	b570      	push	{r4, r5, r6, lr}
 802788c:	4d06      	ldr	r5, [pc, #24]	@ (80278a8 <_isatty_r+0x20>)
 802788e:	0004      	movs	r4, r0
 8027890:	0008      	movs	r0, r1
 8027892:	602b      	str	r3, [r5, #0]
 8027894:	f7ea fcce 	bl	8012234 <_isatty>
 8027898:	1c43      	adds	r3, r0, #1
 802789a:	d103      	bne.n	80278a4 <_isatty_r+0x1c>
 802789c:	682b      	ldr	r3, [r5, #0]
 802789e:	2b00      	cmp	r3, #0
 80278a0:	d000      	beq.n	80278a4 <_isatty_r+0x1c>
 80278a2:	6023      	str	r3, [r4, #0]
 80278a4:	bd70      	pop	{r4, r5, r6, pc}
 80278a6:	46c0      	nop			@ (mov r8, r8)
 80278a8:	20003630 	.word	0x20003630

080278ac <_sbrk_r>:
 80278ac:	2300      	movs	r3, #0
 80278ae:	b570      	push	{r4, r5, r6, lr}
 80278b0:	4d06      	ldr	r5, [pc, #24]	@ (80278cc <_sbrk_r+0x20>)
 80278b2:	0004      	movs	r4, r0
 80278b4:	0008      	movs	r0, r1
 80278b6:	602b      	str	r3, [r5, #0]
 80278b8:	f7ea fcd0 	bl	801225c <_sbrk>
 80278bc:	1c43      	adds	r3, r0, #1
 80278be:	d103      	bne.n	80278c8 <_sbrk_r+0x1c>
 80278c0:	682b      	ldr	r3, [r5, #0]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d000      	beq.n	80278c8 <_sbrk_r+0x1c>
 80278c6:	6023      	str	r3, [r4, #0]
 80278c8:	bd70      	pop	{r4, r5, r6, pc}
 80278ca:	46c0      	nop			@ (mov r8, r8)
 80278cc:	20003630 	.word	0x20003630

080278d0 <__assert_func>:
 80278d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80278d2:	0014      	movs	r4, r2
 80278d4:	001a      	movs	r2, r3
 80278d6:	4b09      	ldr	r3, [pc, #36]	@ (80278fc <__assert_func+0x2c>)
 80278d8:	0005      	movs	r5, r0
 80278da:	681b      	ldr	r3, [r3, #0]
 80278dc:	000e      	movs	r6, r1
 80278de:	68d8      	ldr	r0, [r3, #12]
 80278e0:	4b07      	ldr	r3, [pc, #28]	@ (8027900 <__assert_func+0x30>)
 80278e2:	2c00      	cmp	r4, #0
 80278e4:	d101      	bne.n	80278ea <__assert_func+0x1a>
 80278e6:	4b07      	ldr	r3, [pc, #28]	@ (8027904 <__assert_func+0x34>)
 80278e8:	001c      	movs	r4, r3
 80278ea:	4907      	ldr	r1, [pc, #28]	@ (8027908 <__assert_func+0x38>)
 80278ec:	9301      	str	r3, [sp, #4]
 80278ee:	9402      	str	r4, [sp, #8]
 80278f0:	002b      	movs	r3, r5
 80278f2:	9600      	str	r6, [sp, #0]
 80278f4:	f000 f866 	bl	80279c4 <fiprintf>
 80278f8:	f000 f874 	bl	80279e4 <abort>
 80278fc:	200003e0 	.word	0x200003e0
 8027900:	0802dca1 	.word	0x0802dca1
 8027904:	0802dcdc 	.word	0x0802dcdc
 8027908:	0802dcae 	.word	0x0802dcae

0802790c <_calloc_r>:
 802790c:	b570      	push	{r4, r5, r6, lr}
 802790e:	0c0b      	lsrs	r3, r1, #16
 8027910:	0c15      	lsrs	r5, r2, #16
 8027912:	2b00      	cmp	r3, #0
 8027914:	d11e      	bne.n	8027954 <_calloc_r+0x48>
 8027916:	2d00      	cmp	r5, #0
 8027918:	d10c      	bne.n	8027934 <_calloc_r+0x28>
 802791a:	b289      	uxth	r1, r1
 802791c:	b294      	uxth	r4, r2
 802791e:	434c      	muls	r4, r1
 8027920:	0021      	movs	r1, r4
 8027922:	f7fe fe53 	bl	80265cc <_malloc_r>
 8027926:	1e05      	subs	r5, r0, #0
 8027928:	d01a      	beq.n	8027960 <_calloc_r+0x54>
 802792a:	0022      	movs	r2, r4
 802792c:	2100      	movs	r1, #0
 802792e:	f7fd fb0f 	bl	8024f50 <memset>
 8027932:	e016      	b.n	8027962 <_calloc_r+0x56>
 8027934:	1c2b      	adds	r3, r5, #0
 8027936:	1c0c      	adds	r4, r1, #0
 8027938:	b289      	uxth	r1, r1
 802793a:	b292      	uxth	r2, r2
 802793c:	434a      	muls	r2, r1
 802793e:	b29b      	uxth	r3, r3
 8027940:	b2a1      	uxth	r1, r4
 8027942:	4359      	muls	r1, r3
 8027944:	0c14      	lsrs	r4, r2, #16
 8027946:	190c      	adds	r4, r1, r4
 8027948:	0c23      	lsrs	r3, r4, #16
 802794a:	d107      	bne.n	802795c <_calloc_r+0x50>
 802794c:	0424      	lsls	r4, r4, #16
 802794e:	b292      	uxth	r2, r2
 8027950:	4314      	orrs	r4, r2
 8027952:	e7e5      	b.n	8027920 <_calloc_r+0x14>
 8027954:	2d00      	cmp	r5, #0
 8027956:	d101      	bne.n	802795c <_calloc_r+0x50>
 8027958:	1c14      	adds	r4, r2, #0
 802795a:	e7ed      	b.n	8027938 <_calloc_r+0x2c>
 802795c:	230c      	movs	r3, #12
 802795e:	6003      	str	r3, [r0, #0]
 8027960:	2500      	movs	r5, #0
 8027962:	0028      	movs	r0, r5
 8027964:	bd70      	pop	{r4, r5, r6, pc}

08027966 <_realloc_r>:
 8027966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027968:	0006      	movs	r6, r0
 802796a:	000c      	movs	r4, r1
 802796c:	0015      	movs	r5, r2
 802796e:	2900      	cmp	r1, #0
 8027970:	d105      	bne.n	802797e <_realloc_r+0x18>
 8027972:	0011      	movs	r1, r2
 8027974:	f7fe fe2a 	bl	80265cc <_malloc_r>
 8027978:	0004      	movs	r4, r0
 802797a:	0020      	movs	r0, r4
 802797c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802797e:	2a00      	cmp	r2, #0
 8027980:	d103      	bne.n	802798a <_realloc_r+0x24>
 8027982:	f7fe fa53 	bl	8025e2c <_free_r>
 8027986:	2400      	movs	r4, #0
 8027988:	e7f7      	b.n	802797a <_realloc_r+0x14>
 802798a:	f000 f832 	bl	80279f2 <_malloc_usable_size_r>
 802798e:	0007      	movs	r7, r0
 8027990:	4285      	cmp	r5, r0
 8027992:	d802      	bhi.n	802799a <_realloc_r+0x34>
 8027994:	0843      	lsrs	r3, r0, #1
 8027996:	42ab      	cmp	r3, r5
 8027998:	d3ef      	bcc.n	802797a <_realloc_r+0x14>
 802799a:	0029      	movs	r1, r5
 802799c:	0030      	movs	r0, r6
 802799e:	f7fe fe15 	bl	80265cc <_malloc_r>
 80279a2:	9001      	str	r0, [sp, #4]
 80279a4:	2800      	cmp	r0, #0
 80279a6:	d0ee      	beq.n	8027986 <_realloc_r+0x20>
 80279a8:	002a      	movs	r2, r5
 80279aa:	42bd      	cmp	r5, r7
 80279ac:	d900      	bls.n	80279b0 <_realloc_r+0x4a>
 80279ae:	003a      	movs	r2, r7
 80279b0:	0021      	movs	r1, r4
 80279b2:	9801      	ldr	r0, [sp, #4]
 80279b4:	f7fd fba8 	bl	8025108 <memcpy>
 80279b8:	0021      	movs	r1, r4
 80279ba:	0030      	movs	r0, r6
 80279bc:	f7fe fa36 	bl	8025e2c <_free_r>
 80279c0:	9c01      	ldr	r4, [sp, #4]
 80279c2:	e7da      	b.n	802797a <_realloc_r+0x14>

080279c4 <fiprintf>:
 80279c4:	b40e      	push	{r1, r2, r3}
 80279c6:	b517      	push	{r0, r1, r2, r4, lr}
 80279c8:	4c05      	ldr	r4, [pc, #20]	@ (80279e0 <fiprintf+0x1c>)
 80279ca:	ab05      	add	r3, sp, #20
 80279cc:	cb04      	ldmia	r3!, {r2}
 80279ce:	0001      	movs	r1, r0
 80279d0:	6820      	ldr	r0, [r4, #0]
 80279d2:	9301      	str	r3, [sp, #4]
 80279d4:	f7ff fcfa 	bl	80273cc <_vfiprintf_r>
 80279d8:	bc1e      	pop	{r1, r2, r3, r4}
 80279da:	bc08      	pop	{r3}
 80279dc:	b003      	add	sp, #12
 80279de:	4718      	bx	r3
 80279e0:	200003e0 	.word	0x200003e0

080279e4 <abort>:
 80279e4:	2006      	movs	r0, #6
 80279e6:	b510      	push	{r4, lr}
 80279e8:	f000 f834 	bl	8027a54 <raise>
 80279ec:	2001      	movs	r0, #1
 80279ee:	f7ea fbdf 	bl	80121b0 <_exit>

080279f2 <_malloc_usable_size_r>:
 80279f2:	1f0b      	subs	r3, r1, #4
 80279f4:	681b      	ldr	r3, [r3, #0]
 80279f6:	1f18      	subs	r0, r3, #4
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	da01      	bge.n	8027a00 <_malloc_usable_size_r+0xe>
 80279fc:	580b      	ldr	r3, [r1, r0]
 80279fe:	18c0      	adds	r0, r0, r3
 8027a00:	4770      	bx	lr

08027a02 <_raise_r>:
 8027a02:	b570      	push	{r4, r5, r6, lr}
 8027a04:	0004      	movs	r4, r0
 8027a06:	000d      	movs	r5, r1
 8027a08:	291f      	cmp	r1, #31
 8027a0a:	d904      	bls.n	8027a16 <_raise_r+0x14>
 8027a0c:	2316      	movs	r3, #22
 8027a0e:	6003      	str	r3, [r0, #0]
 8027a10:	2001      	movs	r0, #1
 8027a12:	4240      	negs	r0, r0
 8027a14:	bd70      	pop	{r4, r5, r6, pc}
 8027a16:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8027a18:	2b00      	cmp	r3, #0
 8027a1a:	d004      	beq.n	8027a26 <_raise_r+0x24>
 8027a1c:	008a      	lsls	r2, r1, #2
 8027a1e:	189b      	adds	r3, r3, r2
 8027a20:	681a      	ldr	r2, [r3, #0]
 8027a22:	2a00      	cmp	r2, #0
 8027a24:	d108      	bne.n	8027a38 <_raise_r+0x36>
 8027a26:	0020      	movs	r0, r4
 8027a28:	f000 f830 	bl	8027a8c <_getpid_r>
 8027a2c:	002a      	movs	r2, r5
 8027a2e:	0001      	movs	r1, r0
 8027a30:	0020      	movs	r0, r4
 8027a32:	f000 f819 	bl	8027a68 <_kill_r>
 8027a36:	e7ed      	b.n	8027a14 <_raise_r+0x12>
 8027a38:	2a01      	cmp	r2, #1
 8027a3a:	d009      	beq.n	8027a50 <_raise_r+0x4e>
 8027a3c:	1c51      	adds	r1, r2, #1
 8027a3e:	d103      	bne.n	8027a48 <_raise_r+0x46>
 8027a40:	2316      	movs	r3, #22
 8027a42:	6003      	str	r3, [r0, #0]
 8027a44:	2001      	movs	r0, #1
 8027a46:	e7e5      	b.n	8027a14 <_raise_r+0x12>
 8027a48:	2100      	movs	r1, #0
 8027a4a:	0028      	movs	r0, r5
 8027a4c:	6019      	str	r1, [r3, #0]
 8027a4e:	4790      	blx	r2
 8027a50:	2000      	movs	r0, #0
 8027a52:	e7df      	b.n	8027a14 <_raise_r+0x12>

08027a54 <raise>:
 8027a54:	b510      	push	{r4, lr}
 8027a56:	4b03      	ldr	r3, [pc, #12]	@ (8027a64 <raise+0x10>)
 8027a58:	0001      	movs	r1, r0
 8027a5a:	6818      	ldr	r0, [r3, #0]
 8027a5c:	f7ff ffd1 	bl	8027a02 <_raise_r>
 8027a60:	bd10      	pop	{r4, pc}
 8027a62:	46c0      	nop			@ (mov r8, r8)
 8027a64:	200003e0 	.word	0x200003e0

08027a68 <_kill_r>:
 8027a68:	2300      	movs	r3, #0
 8027a6a:	b570      	push	{r4, r5, r6, lr}
 8027a6c:	4d06      	ldr	r5, [pc, #24]	@ (8027a88 <_kill_r+0x20>)
 8027a6e:	0004      	movs	r4, r0
 8027a70:	0008      	movs	r0, r1
 8027a72:	0011      	movs	r1, r2
 8027a74:	602b      	str	r3, [r5, #0]
 8027a76:	f7ea fb8b 	bl	8012190 <_kill>
 8027a7a:	1c43      	adds	r3, r0, #1
 8027a7c:	d103      	bne.n	8027a86 <_kill_r+0x1e>
 8027a7e:	682b      	ldr	r3, [r5, #0]
 8027a80:	2b00      	cmp	r3, #0
 8027a82:	d000      	beq.n	8027a86 <_kill_r+0x1e>
 8027a84:	6023      	str	r3, [r4, #0]
 8027a86:	bd70      	pop	{r4, r5, r6, pc}
 8027a88:	20003630 	.word	0x20003630

08027a8c <_getpid_r>:
 8027a8c:	b510      	push	{r4, lr}
 8027a8e:	f7ea fb79 	bl	8012184 <_getpid>
 8027a92:	bd10      	pop	{r4, pc}

08027a94 <log>:
 8027a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a96:	0004      	movs	r4, r0
 8027a98:	000d      	movs	r5, r1
 8027a9a:	f000 f991 	bl	8027dc0 <__ieee754_log>
 8027a9e:	0022      	movs	r2, r4
 8027aa0:	0006      	movs	r6, r0
 8027aa2:	000f      	movs	r7, r1
 8027aa4:	002b      	movs	r3, r5
 8027aa6:	0020      	movs	r0, r4
 8027aa8:	0029      	movs	r1, r5
 8027aaa:	f7db fc2b 	bl	8003304 <__aeabi_dcmpun>
 8027aae:	2800      	cmp	r0, #0
 8027ab0:	d115      	bne.n	8027ade <log+0x4a>
 8027ab2:	2200      	movs	r2, #0
 8027ab4:	2300      	movs	r3, #0
 8027ab6:	0020      	movs	r0, r4
 8027ab8:	0029      	movs	r1, r5
 8027aba:	f7d8 fd13 	bl	80004e4 <__aeabi_dcmpgt>
 8027abe:	2800      	cmp	r0, #0
 8027ac0:	d10d      	bne.n	8027ade <log+0x4a>
 8027ac2:	2200      	movs	r2, #0
 8027ac4:	2300      	movs	r3, #0
 8027ac6:	0020      	movs	r0, r4
 8027ac8:	0029      	movs	r1, r5
 8027aca:	f7d8 fcf1 	bl	80004b0 <__aeabi_dcmpeq>
 8027ace:	2800      	cmp	r0, #0
 8027ad0:	d008      	beq.n	8027ae4 <log+0x50>
 8027ad2:	f7fd fae1 	bl	8025098 <__errno>
 8027ad6:	2322      	movs	r3, #34	@ 0x22
 8027ad8:	2600      	movs	r6, #0
 8027ada:	4f07      	ldr	r7, [pc, #28]	@ (8027af8 <log+0x64>)
 8027adc:	6003      	str	r3, [r0, #0]
 8027ade:	0030      	movs	r0, r6
 8027ae0:	0039      	movs	r1, r7
 8027ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027ae4:	f7fd fad8 	bl	8025098 <__errno>
 8027ae8:	2321      	movs	r3, #33	@ 0x21
 8027aea:	6003      	str	r3, [r0, #0]
 8027aec:	4803      	ldr	r0, [pc, #12]	@ (8027afc <log+0x68>)
 8027aee:	f7fd fb15 	bl	802511c <nan>
 8027af2:	0006      	movs	r6, r0
 8027af4:	000f      	movs	r7, r1
 8027af6:	e7f2      	b.n	8027ade <log+0x4a>
 8027af8:	fff00000 	.word	0xfff00000
 8027afc:	0802dcdc 	.word	0x0802dcdc

08027b00 <pow>:
 8027b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027b02:	0014      	movs	r4, r2
 8027b04:	001d      	movs	r5, r3
 8027b06:	9000      	str	r0, [sp, #0]
 8027b08:	9101      	str	r1, [sp, #4]
 8027b0a:	f000 fb0b 	bl	8028124 <__ieee754_pow>
 8027b0e:	0022      	movs	r2, r4
 8027b10:	0006      	movs	r6, r0
 8027b12:	000f      	movs	r7, r1
 8027b14:	002b      	movs	r3, r5
 8027b16:	0020      	movs	r0, r4
 8027b18:	0029      	movs	r1, r5
 8027b1a:	f7db fbf3 	bl	8003304 <__aeabi_dcmpun>
 8027b1e:	2800      	cmp	r0, #0
 8027b20:	d13f      	bne.n	8027ba2 <pow+0xa2>
 8027b22:	9800      	ldr	r0, [sp, #0]
 8027b24:	9901      	ldr	r1, [sp, #4]
 8027b26:	2200      	movs	r2, #0
 8027b28:	2300      	movs	r3, #0
 8027b2a:	f7d8 fcc1 	bl	80004b0 <__aeabi_dcmpeq>
 8027b2e:	2800      	cmp	r0, #0
 8027b30:	d019      	beq.n	8027b66 <pow+0x66>
 8027b32:	2200      	movs	r2, #0
 8027b34:	2300      	movs	r3, #0
 8027b36:	0020      	movs	r0, r4
 8027b38:	0029      	movs	r1, r5
 8027b3a:	f7d8 fcb9 	bl	80004b0 <__aeabi_dcmpeq>
 8027b3e:	2800      	cmp	r0, #0
 8027b40:	d146      	bne.n	8027bd0 <pow+0xd0>
 8027b42:	0020      	movs	r0, r4
 8027b44:	0029      	movs	r1, r5
 8027b46:	f000 f88d 	bl	8027c64 <finite>
 8027b4a:	2800      	cmp	r0, #0
 8027b4c:	d029      	beq.n	8027ba2 <pow+0xa2>
 8027b4e:	2200      	movs	r2, #0
 8027b50:	2300      	movs	r3, #0
 8027b52:	0020      	movs	r0, r4
 8027b54:	0029      	movs	r1, r5
 8027b56:	f7d8 fcb1 	bl	80004bc <__aeabi_dcmplt>
 8027b5a:	2800      	cmp	r0, #0
 8027b5c:	d021      	beq.n	8027ba2 <pow+0xa2>
 8027b5e:	f7fd fa9b 	bl	8025098 <__errno>
 8027b62:	2322      	movs	r3, #34	@ 0x22
 8027b64:	e01c      	b.n	8027ba0 <pow+0xa0>
 8027b66:	0030      	movs	r0, r6
 8027b68:	0039      	movs	r1, r7
 8027b6a:	f000 f87b 	bl	8027c64 <finite>
 8027b6e:	2800      	cmp	r0, #0
 8027b70:	d11b      	bne.n	8027baa <pow+0xaa>
 8027b72:	9800      	ldr	r0, [sp, #0]
 8027b74:	9901      	ldr	r1, [sp, #4]
 8027b76:	f000 f875 	bl	8027c64 <finite>
 8027b7a:	2800      	cmp	r0, #0
 8027b7c:	d015      	beq.n	8027baa <pow+0xaa>
 8027b7e:	0020      	movs	r0, r4
 8027b80:	0029      	movs	r1, r5
 8027b82:	f000 f86f 	bl	8027c64 <finite>
 8027b86:	2800      	cmp	r0, #0
 8027b88:	d00f      	beq.n	8027baa <pow+0xaa>
 8027b8a:	0032      	movs	r2, r6
 8027b8c:	003b      	movs	r3, r7
 8027b8e:	0030      	movs	r0, r6
 8027b90:	0039      	movs	r1, r7
 8027b92:	f7db fbb7 	bl	8003304 <__aeabi_dcmpun>
 8027b96:	2800      	cmp	r0, #0
 8027b98:	d0e1      	beq.n	8027b5e <pow+0x5e>
 8027b9a:	f7fd fa7d 	bl	8025098 <__errno>
 8027b9e:	2321      	movs	r3, #33	@ 0x21
 8027ba0:	6003      	str	r3, [r0, #0]
 8027ba2:	0030      	movs	r0, r6
 8027ba4:	0039      	movs	r1, r7
 8027ba6:	b003      	add	sp, #12
 8027ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027baa:	2200      	movs	r2, #0
 8027bac:	2300      	movs	r3, #0
 8027bae:	0030      	movs	r0, r6
 8027bb0:	0039      	movs	r1, r7
 8027bb2:	f7d8 fc7d 	bl	80004b0 <__aeabi_dcmpeq>
 8027bb6:	2800      	cmp	r0, #0
 8027bb8:	d0f3      	beq.n	8027ba2 <pow+0xa2>
 8027bba:	9800      	ldr	r0, [sp, #0]
 8027bbc:	9901      	ldr	r1, [sp, #4]
 8027bbe:	f000 f851 	bl	8027c64 <finite>
 8027bc2:	2800      	cmp	r0, #0
 8027bc4:	d0ed      	beq.n	8027ba2 <pow+0xa2>
 8027bc6:	0020      	movs	r0, r4
 8027bc8:	0029      	movs	r1, r5
 8027bca:	f000 f84b 	bl	8027c64 <finite>
 8027bce:	e7c4      	b.n	8027b5a <pow+0x5a>
 8027bd0:	2600      	movs	r6, #0
 8027bd2:	4f01      	ldr	r7, [pc, #4]	@ (8027bd8 <pow+0xd8>)
 8027bd4:	e7e5      	b.n	8027ba2 <pow+0xa2>
 8027bd6:	46c0      	nop			@ (mov r8, r8)
 8027bd8:	3ff00000 	.word	0x3ff00000

08027bdc <expf>:
 8027bdc:	b570      	push	{r4, r5, r6, lr}
 8027bde:	1c04      	adds	r4, r0, #0
 8027be0:	f000 ffd0 	bl	8028b84 <__ieee754_expf>
 8027be4:	1c05      	adds	r5, r0, #0
 8027be6:	1c20      	adds	r0, r4, #0
 8027be8:	f000 f844 	bl	8027c74 <finitef>
 8027bec:	2800      	cmp	r0, #0
 8027bee:	d00b      	beq.n	8027c08 <expf+0x2c>
 8027bf0:	490c      	ldr	r1, [pc, #48]	@ (8027c24 <expf+0x48>)
 8027bf2:	1c20      	adds	r0, r4, #0
 8027bf4:	f7d8 fcb0 	bl	8000558 <__aeabi_fcmpgt>
 8027bf8:	2800      	cmp	r0, #0
 8027bfa:	d007      	beq.n	8027c0c <expf+0x30>
 8027bfc:	f7fd fa4c 	bl	8025098 <__errno>
 8027c00:	25ff      	movs	r5, #255	@ 0xff
 8027c02:	2322      	movs	r3, #34	@ 0x22
 8027c04:	05ed      	lsls	r5, r5, #23
 8027c06:	6003      	str	r3, [r0, #0]
 8027c08:	1c28      	adds	r0, r5, #0
 8027c0a:	bd70      	pop	{r4, r5, r6, pc}
 8027c0c:	4906      	ldr	r1, [pc, #24]	@ (8027c28 <expf+0x4c>)
 8027c0e:	1c20      	adds	r0, r4, #0
 8027c10:	f7d8 fc8e 	bl	8000530 <__aeabi_fcmplt>
 8027c14:	2800      	cmp	r0, #0
 8027c16:	d0f7      	beq.n	8027c08 <expf+0x2c>
 8027c18:	f7fd fa3e 	bl	8025098 <__errno>
 8027c1c:	2322      	movs	r3, #34	@ 0x22
 8027c1e:	2500      	movs	r5, #0
 8027c20:	6003      	str	r3, [r0, #0]
 8027c22:	e7f1      	b.n	8027c08 <expf+0x2c>
 8027c24:	42b17217 	.word	0x42b17217
 8027c28:	c2cff1b5 	.word	0xc2cff1b5

08027c2c <sqrtf>:
 8027c2c:	b570      	push	{r4, r5, r6, lr}
 8027c2e:	1c05      	adds	r5, r0, #0
 8027c30:	f000 f82a 	bl	8027c88 <__ieee754_sqrtf>
 8027c34:	1c29      	adds	r1, r5, #0
 8027c36:	1c04      	adds	r4, r0, #0
 8027c38:	1c28      	adds	r0, r5, #0
 8027c3a:	f7d9 fc93 	bl	8001564 <__aeabi_fcmpun>
 8027c3e:	2800      	cmp	r0, #0
 8027c40:	d10e      	bne.n	8027c60 <sqrtf+0x34>
 8027c42:	2100      	movs	r1, #0
 8027c44:	1c28      	adds	r0, r5, #0
 8027c46:	f7d8 fc73 	bl	8000530 <__aeabi_fcmplt>
 8027c4a:	2800      	cmp	r0, #0
 8027c4c:	d008      	beq.n	8027c60 <sqrtf+0x34>
 8027c4e:	f7fd fa23 	bl	8025098 <__errno>
 8027c52:	2321      	movs	r3, #33	@ 0x21
 8027c54:	2100      	movs	r1, #0
 8027c56:	6003      	str	r3, [r0, #0]
 8027c58:	1c08      	adds	r0, r1, #0
 8027c5a:	f7d8 ffbb 	bl	8000bd4 <__aeabi_fdiv>
 8027c5e:	1c04      	adds	r4, r0, #0
 8027c60:	1c20      	adds	r0, r4, #0
 8027c62:	bd70      	pop	{r4, r5, r6, pc}

08027c64 <finite>:
 8027c64:	4b02      	ldr	r3, [pc, #8]	@ (8027c70 <finite+0xc>)
 8027c66:	0048      	lsls	r0, r1, #1
 8027c68:	0840      	lsrs	r0, r0, #1
 8027c6a:	18c0      	adds	r0, r0, r3
 8027c6c:	0fc0      	lsrs	r0, r0, #31
 8027c6e:	4770      	bx	lr
 8027c70:	80100000 	.word	0x80100000

08027c74 <finitef>:
 8027c74:	22ff      	movs	r2, #255	@ 0xff
 8027c76:	0043      	lsls	r3, r0, #1
 8027c78:	085b      	lsrs	r3, r3, #1
 8027c7a:	2001      	movs	r0, #1
 8027c7c:	05d2      	lsls	r2, r2, #23
 8027c7e:	4293      	cmp	r3, r2
 8027c80:	db00      	blt.n	8027c84 <finitef+0x10>
 8027c82:	2000      	movs	r0, #0
 8027c84:	4770      	bx	lr
	...

08027c88 <__ieee754_sqrtf>:
 8027c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027c8a:	0003      	movs	r3, r0
 8027c8c:	0042      	lsls	r2, r0, #1
 8027c8e:	1c04      	adds	r4, r0, #0
 8027c90:	20ff      	movs	r0, #255	@ 0xff
 8027c92:	0852      	lsrs	r2, r2, #1
 8027c94:	05c0      	lsls	r0, r0, #23
 8027c96:	4282      	cmp	r2, r0
 8027c98:	d30a      	bcc.n	8027cb0 <__ieee754_sqrtf+0x28>
 8027c9a:	1c21      	adds	r1, r4, #0
 8027c9c:	1c20      	adds	r0, r4, #0
 8027c9e:	f7d9 f97f 	bl	8000fa0 <__aeabi_fmul>
 8027ca2:	1c01      	adds	r1, r0, #0
 8027ca4:	1c20      	adds	r0, r4, #0
 8027ca6:	f7d8 fe0b 	bl	80008c0 <__aeabi_fadd>
 8027caa:	1c04      	adds	r4, r0, #0
 8027cac:	1c20      	adds	r0, r4, #0
 8027cae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027cb0:	2a00      	cmp	r2, #0
 8027cb2:	d0fb      	beq.n	8027cac <__ieee754_sqrtf+0x24>
 8027cb4:	2c00      	cmp	r4, #0
 8027cb6:	da07      	bge.n	8027cc8 <__ieee754_sqrtf+0x40>
 8027cb8:	1c21      	adds	r1, r4, #0
 8027cba:	1c20      	adds	r0, r4, #0
 8027cbc:	f7d9 faae 	bl	800121c <__aeabi_fsub>
 8027cc0:	1c01      	adds	r1, r0, #0
 8027cc2:	f7d8 ff87 	bl	8000bd4 <__aeabi_fdiv>
 8027cc6:	e7f0      	b.n	8027caa <__ieee754_sqrtf+0x22>
 8027cc8:	0022      	movs	r2, r4
 8027cca:	15e1      	asrs	r1, r4, #23
 8027ccc:	4002      	ands	r2, r0
 8027cce:	4204      	tst	r4, r0
 8027cd0:	d046      	beq.n	8027d60 <__ieee754_sqrtf+0xd8>
 8027cd2:	2280      	movs	r2, #128	@ 0x80
 8027cd4:	000f      	movs	r7, r1
 8027cd6:	025b      	lsls	r3, r3, #9
 8027cd8:	0a5b      	lsrs	r3, r3, #9
 8027cda:	0412      	lsls	r2, r2, #16
 8027cdc:	3f7f      	subs	r7, #127	@ 0x7f
 8027cde:	4313      	orrs	r3, r2
 8027ce0:	07c9      	lsls	r1, r1, #31
 8027ce2:	d400      	bmi.n	8027ce6 <__ieee754_sqrtf+0x5e>
 8027ce4:	005b      	lsls	r3, r3, #1
 8027ce6:	2400      	movs	r4, #0
 8027ce8:	2180      	movs	r1, #128	@ 0x80
 8027cea:	2019      	movs	r0, #25
 8027cec:	0026      	movs	r6, r4
 8027cee:	107f      	asrs	r7, r7, #1
 8027cf0:	005b      	lsls	r3, r3, #1
 8027cf2:	0449      	lsls	r1, r1, #17
 8027cf4:	1875      	adds	r5, r6, r1
 8027cf6:	001a      	movs	r2, r3
 8027cf8:	429d      	cmp	r5, r3
 8027cfa:	dc02      	bgt.n	8027d02 <__ieee754_sqrtf+0x7a>
 8027cfc:	186e      	adds	r6, r5, r1
 8027cfe:	1b5a      	subs	r2, r3, r5
 8027d00:	1864      	adds	r4, r4, r1
 8027d02:	3801      	subs	r0, #1
 8027d04:	0053      	lsls	r3, r2, #1
 8027d06:	0849      	lsrs	r1, r1, #1
 8027d08:	2800      	cmp	r0, #0
 8027d0a:	d1f3      	bne.n	8027cf4 <__ieee754_sqrtf+0x6c>
 8027d0c:	2a00      	cmp	r2, #0
 8027d0e:	d019      	beq.n	8027d44 <__ieee754_sqrtf+0xbc>
 8027d10:	4d17      	ldr	r5, [pc, #92]	@ (8027d70 <__ieee754_sqrtf+0xe8>)
 8027d12:	4e18      	ldr	r6, [pc, #96]	@ (8027d74 <__ieee754_sqrtf+0xec>)
 8027d14:	6828      	ldr	r0, [r5, #0]
 8027d16:	6831      	ldr	r1, [r6, #0]
 8027d18:	682b      	ldr	r3, [r5, #0]
 8027d1a:	9301      	str	r3, [sp, #4]
 8027d1c:	f7d9 fa7e 	bl	800121c <__aeabi_fsub>
 8027d20:	1c01      	adds	r1, r0, #0
 8027d22:	9801      	ldr	r0, [sp, #4]
 8027d24:	f7d8 fc0e 	bl	8000544 <__aeabi_fcmple>
 8027d28:	2800      	cmp	r0, #0
 8027d2a:	d00b      	beq.n	8027d44 <__ieee754_sqrtf+0xbc>
 8027d2c:	6828      	ldr	r0, [r5, #0]
 8027d2e:	6831      	ldr	r1, [r6, #0]
 8027d30:	f7d8 fdc6 	bl	80008c0 <__aeabi_fadd>
 8027d34:	682d      	ldr	r5, [r5, #0]
 8027d36:	1c01      	adds	r1, r0, #0
 8027d38:	1c28      	adds	r0, r5, #0
 8027d3a:	f7d8 fbf9 	bl	8000530 <__aeabi_fcmplt>
 8027d3e:	2800      	cmp	r0, #0
 8027d40:	d011      	beq.n	8027d66 <__ieee754_sqrtf+0xde>
 8027d42:	3402      	adds	r4, #2
 8027d44:	23fc      	movs	r3, #252	@ 0xfc
 8027d46:	1064      	asrs	r4, r4, #1
 8027d48:	059b      	lsls	r3, r3, #22
 8027d4a:	18e3      	adds	r3, r4, r3
 8027d4c:	05fc      	lsls	r4, r7, #23
 8027d4e:	18e4      	adds	r4, r4, r3
 8027d50:	e7ac      	b.n	8027cac <__ieee754_sqrtf+0x24>
 8027d52:	005b      	lsls	r3, r3, #1
 8027d54:	3201      	adds	r2, #1
 8027d56:	4203      	tst	r3, r0
 8027d58:	d0fb      	beq.n	8027d52 <__ieee754_sqrtf+0xca>
 8027d5a:	3a01      	subs	r2, #1
 8027d5c:	1a89      	subs	r1, r1, r2
 8027d5e:	e7b8      	b.n	8027cd2 <__ieee754_sqrtf+0x4a>
 8027d60:	2080      	movs	r0, #128	@ 0x80
 8027d62:	0400      	lsls	r0, r0, #16
 8027d64:	e7f7      	b.n	8027d56 <__ieee754_sqrtf+0xce>
 8027d66:	2301      	movs	r3, #1
 8027d68:	3401      	adds	r4, #1
 8027d6a:	439c      	bics	r4, r3
 8027d6c:	e7ea      	b.n	8027d44 <__ieee754_sqrtf+0xbc>
 8027d6e:	46c0      	nop			@ (mov r8, r8)
 8027d70:	20000434 	.word	0x20000434
 8027d74:	20000430 	.word	0x20000430

08027d78 <roundf>:
 8027d78:	0dc3      	lsrs	r3, r0, #23
 8027d7a:	b2db      	uxtb	r3, r3
 8027d7c:	3b7f      	subs	r3, #127	@ 0x7f
 8027d7e:	0002      	movs	r2, r0
 8027d80:	b510      	push	{r4, lr}
 8027d82:	2b16      	cmp	r3, #22
 8027d84:	dc13      	bgt.n	8027dae <roundf+0x36>
 8027d86:	2b00      	cmp	r3, #0
 8027d88:	da07      	bge.n	8027d9a <roundf+0x22>
 8027d8a:	0fc2      	lsrs	r2, r0, #31
 8027d8c:	07d0      	lsls	r0, r2, #31
 8027d8e:	3301      	adds	r3, #1
 8027d90:	d102      	bne.n	8027d98 <roundf+0x20>
 8027d92:	23fe      	movs	r3, #254	@ 0xfe
 8027d94:	059b      	lsls	r3, r3, #22
 8027d96:	4318      	orrs	r0, r3
 8027d98:	bd10      	pop	{r4, pc}
 8027d9a:	4908      	ldr	r1, [pc, #32]	@ (8027dbc <roundf+0x44>)
 8027d9c:	4119      	asrs	r1, r3
 8027d9e:	4208      	tst	r0, r1
 8027da0:	d0fa      	beq.n	8027d98 <roundf+0x20>
 8027da2:	2080      	movs	r0, #128	@ 0x80
 8027da4:	03c0      	lsls	r0, r0, #15
 8027da6:	4118      	asrs	r0, r3
 8027da8:	1880      	adds	r0, r0, r2
 8027daa:	4388      	bics	r0, r1
 8027dac:	e7f4      	b.n	8027d98 <roundf+0x20>
 8027dae:	2b80      	cmp	r3, #128	@ 0x80
 8027db0:	d1f2      	bne.n	8027d98 <roundf+0x20>
 8027db2:	1c01      	adds	r1, r0, #0
 8027db4:	f7d8 fd84 	bl	80008c0 <__aeabi_fadd>
 8027db8:	e7ee      	b.n	8027d98 <roundf+0x20>
 8027dba:	46c0      	nop			@ (mov r8, r8)
 8027dbc:	007fffff 	.word	0x007fffff

08027dc0 <__ieee754_log>:
 8027dc0:	2380      	movs	r3, #128	@ 0x80
 8027dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027dc4:	035b      	lsls	r3, r3, #13
 8027dc6:	000e      	movs	r6, r1
 8027dc8:	b08d      	sub	sp, #52	@ 0x34
 8027dca:	4299      	cmp	r1, r3
 8027dcc:	da23      	bge.n	8027e16 <__ieee754_log+0x56>
 8027dce:	004b      	lsls	r3, r1, #1
 8027dd0:	085b      	lsrs	r3, r3, #1
 8027dd2:	4303      	orrs	r3, r0
 8027dd4:	d107      	bne.n	8027de6 <__ieee754_log+0x26>
 8027dd6:	2200      	movs	r2, #0
 8027dd8:	2300      	movs	r3, #0
 8027dda:	2000      	movs	r0, #0
 8027ddc:	49b4      	ldr	r1, [pc, #720]	@ (80280b0 <__ieee754_log+0x2f0>)
 8027dde:	f7d9 ffe9 	bl	8001db4 <__aeabi_ddiv>
 8027de2:	b00d      	add	sp, #52	@ 0x34
 8027de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027de6:	2900      	cmp	r1, #0
 8027de8:	da06      	bge.n	8027df8 <__ieee754_log+0x38>
 8027dea:	0002      	movs	r2, r0
 8027dec:	000b      	movs	r3, r1
 8027dee:	f7da feed 	bl	8002bcc <__aeabi_dsub>
 8027df2:	2200      	movs	r2, #0
 8027df4:	2300      	movs	r3, #0
 8027df6:	e7f2      	b.n	8027dde <__ieee754_log+0x1e>
 8027df8:	4bae      	ldr	r3, [pc, #696]	@ (80280b4 <__ieee754_log+0x2f4>)
 8027dfa:	2200      	movs	r2, #0
 8027dfc:	f7da fc1e 	bl	800263c <__aeabi_dmul>
 8027e00:	2336      	movs	r3, #54	@ 0x36
 8027e02:	000e      	movs	r6, r1
 8027e04:	425b      	negs	r3, r3
 8027e06:	4aac      	ldr	r2, [pc, #688]	@ (80280b8 <__ieee754_log+0x2f8>)
 8027e08:	4296      	cmp	r6, r2
 8027e0a:	dd06      	ble.n	8027e1a <__ieee754_log+0x5a>
 8027e0c:	0002      	movs	r2, r0
 8027e0e:	000b      	movs	r3, r1
 8027e10:	f7d9 fc6c 	bl	80016ec <__aeabi_dadd>
 8027e14:	e7e5      	b.n	8027de2 <__ieee754_log+0x22>
 8027e16:	2300      	movs	r3, #0
 8027e18:	e7f5      	b.n	8027e06 <__ieee754_log+0x46>
 8027e1a:	4ca8      	ldr	r4, [pc, #672]	@ (80280bc <__ieee754_log+0x2fc>)
 8027e1c:	1532      	asrs	r2, r6, #20
 8027e1e:	1912      	adds	r2, r2, r4
 8027e20:	0336      	lsls	r6, r6, #12
 8027e22:	4ca7      	ldr	r4, [pc, #668]	@ (80280c0 <__ieee754_log+0x300>)
 8027e24:	18d2      	adds	r2, r2, r3
 8027e26:	0b33      	lsrs	r3, r6, #12
 8027e28:	9302      	str	r3, [sp, #8]
 8027e2a:	191b      	adds	r3, r3, r4
 8027e2c:	2480      	movs	r4, #128	@ 0x80
 8027e2e:	0364      	lsls	r4, r4, #13
 8027e30:	4023      	ands	r3, r4
 8027e32:	4ca4      	ldr	r4, [pc, #656]	@ (80280c4 <__ieee754_log+0x304>)
 8027e34:	9d02      	ldr	r5, [sp, #8]
 8027e36:	405c      	eors	r4, r3
 8027e38:	151b      	asrs	r3, r3, #20
 8027e3a:	189b      	adds	r3, r3, r2
 8027e3c:	4325      	orrs	r5, r4
 8027e3e:	2200      	movs	r2, #0
 8027e40:	9300      	str	r3, [sp, #0]
 8027e42:	0029      	movs	r1, r5
 8027e44:	4b9f      	ldr	r3, [pc, #636]	@ (80280c4 <__ieee754_log+0x304>)
 8027e46:	f7da fec1 	bl	8002bcc <__aeabi_dsub>
 8027e4a:	9b02      	ldr	r3, [sp, #8]
 8027e4c:	0006      	movs	r6, r0
 8027e4e:	3302      	adds	r3, #2
 8027e50:	031b      	lsls	r3, r3, #12
 8027e52:	000f      	movs	r7, r1
 8027e54:	2200      	movs	r2, #0
 8027e56:	0b1b      	lsrs	r3, r3, #12
 8027e58:	2b02      	cmp	r3, #2
 8027e5a:	dc64      	bgt.n	8027f26 <__ieee754_log+0x166>
 8027e5c:	2300      	movs	r3, #0
 8027e5e:	f7d8 fb27 	bl	80004b0 <__aeabi_dcmpeq>
 8027e62:	2800      	cmp	r0, #0
 8027e64:	d019      	beq.n	8027e9a <__ieee754_log+0xda>
 8027e66:	9b00      	ldr	r3, [sp, #0]
 8027e68:	2b00      	cmp	r3, #0
 8027e6a:	d100      	bne.n	8027e6e <__ieee754_log+0xae>
 8027e6c:	e11c      	b.n	80280a8 <__ieee754_log+0x2e8>
 8027e6e:	0018      	movs	r0, r3
 8027e70:	f7db faa6 	bl	80033c0 <__aeabi_i2d>
 8027e74:	4a94      	ldr	r2, [pc, #592]	@ (80280c8 <__ieee754_log+0x308>)
 8027e76:	4b95      	ldr	r3, [pc, #596]	@ (80280cc <__ieee754_log+0x30c>)
 8027e78:	0004      	movs	r4, r0
 8027e7a:	000d      	movs	r5, r1
 8027e7c:	f7da fbde 	bl	800263c <__aeabi_dmul>
 8027e80:	4a93      	ldr	r2, [pc, #588]	@ (80280d0 <__ieee754_log+0x310>)
 8027e82:	0006      	movs	r6, r0
 8027e84:	000f      	movs	r7, r1
 8027e86:	4b93      	ldr	r3, [pc, #588]	@ (80280d4 <__ieee754_log+0x314>)
 8027e88:	0020      	movs	r0, r4
 8027e8a:	0029      	movs	r1, r5
 8027e8c:	f7da fbd6 	bl	800263c <__aeabi_dmul>
 8027e90:	0002      	movs	r2, r0
 8027e92:	000b      	movs	r3, r1
 8027e94:	0030      	movs	r0, r6
 8027e96:	0039      	movs	r1, r7
 8027e98:	e7ba      	b.n	8027e10 <__ieee754_log+0x50>
 8027e9a:	4a8f      	ldr	r2, [pc, #572]	@ (80280d8 <__ieee754_log+0x318>)
 8027e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80280dc <__ieee754_log+0x31c>)
 8027e9e:	0030      	movs	r0, r6
 8027ea0:	0039      	movs	r1, r7
 8027ea2:	f7da fbcb 	bl	800263c <__aeabi_dmul>
 8027ea6:	0002      	movs	r2, r0
 8027ea8:	000b      	movs	r3, r1
 8027eaa:	2000      	movs	r0, #0
 8027eac:	498c      	ldr	r1, [pc, #560]	@ (80280e0 <__ieee754_log+0x320>)
 8027eae:	f7da fe8d 	bl	8002bcc <__aeabi_dsub>
 8027eb2:	0032      	movs	r2, r6
 8027eb4:	0004      	movs	r4, r0
 8027eb6:	000d      	movs	r5, r1
 8027eb8:	003b      	movs	r3, r7
 8027eba:	0030      	movs	r0, r6
 8027ebc:	0039      	movs	r1, r7
 8027ebe:	f7da fbbd 	bl	800263c <__aeabi_dmul>
 8027ec2:	000b      	movs	r3, r1
 8027ec4:	0002      	movs	r2, r0
 8027ec6:	0029      	movs	r1, r5
 8027ec8:	0020      	movs	r0, r4
 8027eca:	f7da fbb7 	bl	800263c <__aeabi_dmul>
 8027ece:	9b00      	ldr	r3, [sp, #0]
 8027ed0:	9002      	str	r0, [sp, #8]
 8027ed2:	9103      	str	r1, [sp, #12]
 8027ed4:	2b00      	cmp	r3, #0
 8027ed6:	d106      	bne.n	8027ee6 <__ieee754_log+0x126>
 8027ed8:	0002      	movs	r2, r0
 8027eda:	000b      	movs	r3, r1
 8027edc:	0030      	movs	r0, r6
 8027ede:	0039      	movs	r1, r7
 8027ee0:	f7da fe74 	bl	8002bcc <__aeabi_dsub>
 8027ee4:	e77d      	b.n	8027de2 <__ieee754_log+0x22>
 8027ee6:	9800      	ldr	r0, [sp, #0]
 8027ee8:	f7db fa6a 	bl	80033c0 <__aeabi_i2d>
 8027eec:	4a76      	ldr	r2, [pc, #472]	@ (80280c8 <__ieee754_log+0x308>)
 8027eee:	4b77      	ldr	r3, [pc, #476]	@ (80280cc <__ieee754_log+0x30c>)
 8027ef0:	0004      	movs	r4, r0
 8027ef2:	000d      	movs	r5, r1
 8027ef4:	f7da fba2 	bl	800263c <__aeabi_dmul>
 8027ef8:	4a75      	ldr	r2, [pc, #468]	@ (80280d0 <__ieee754_log+0x310>)
 8027efa:	9000      	str	r0, [sp, #0]
 8027efc:	9101      	str	r1, [sp, #4]
 8027efe:	4b75      	ldr	r3, [pc, #468]	@ (80280d4 <__ieee754_log+0x314>)
 8027f00:	0020      	movs	r0, r4
 8027f02:	0029      	movs	r1, r5
 8027f04:	f7da fb9a 	bl	800263c <__aeabi_dmul>
 8027f08:	0002      	movs	r2, r0
 8027f0a:	000b      	movs	r3, r1
 8027f0c:	9802      	ldr	r0, [sp, #8]
 8027f0e:	9903      	ldr	r1, [sp, #12]
 8027f10:	f7da fe5c 	bl	8002bcc <__aeabi_dsub>
 8027f14:	0032      	movs	r2, r6
 8027f16:	003b      	movs	r3, r7
 8027f18:	f7da fe58 	bl	8002bcc <__aeabi_dsub>
 8027f1c:	0002      	movs	r2, r0
 8027f1e:	000b      	movs	r3, r1
 8027f20:	9800      	ldr	r0, [sp, #0]
 8027f22:	9901      	ldr	r1, [sp, #4]
 8027f24:	e7dc      	b.n	8027ee0 <__ieee754_log+0x120>
 8027f26:	2380      	movs	r3, #128	@ 0x80
 8027f28:	05db      	lsls	r3, r3, #23
 8027f2a:	f7d9 fbdf 	bl	80016ec <__aeabi_dadd>
 8027f2e:	0002      	movs	r2, r0
 8027f30:	000b      	movs	r3, r1
 8027f32:	0030      	movs	r0, r6
 8027f34:	0039      	movs	r1, r7
 8027f36:	f7d9 ff3d 	bl	8001db4 <__aeabi_ddiv>
 8027f3a:	9004      	str	r0, [sp, #16]
 8027f3c:	9105      	str	r1, [sp, #20]
 8027f3e:	9800      	ldr	r0, [sp, #0]
 8027f40:	f7db fa3e 	bl	80033c0 <__aeabi_i2d>
 8027f44:	9a04      	ldr	r2, [sp, #16]
 8027f46:	9b05      	ldr	r3, [sp, #20]
 8027f48:	9006      	str	r0, [sp, #24]
 8027f4a:	9107      	str	r1, [sp, #28]
 8027f4c:	0010      	movs	r0, r2
 8027f4e:	0019      	movs	r1, r3
 8027f50:	f7da fb74 	bl	800263c <__aeabi_dmul>
 8027f54:	4a63      	ldr	r2, [pc, #396]	@ (80280e4 <__ieee754_log+0x324>)
 8027f56:	9b02      	ldr	r3, [sp, #8]
 8027f58:	4694      	mov	ip, r2
 8027f5a:	4463      	add	r3, ip
 8027f5c:	0002      	movs	r2, r0
 8027f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027f60:	000b      	movs	r3, r1
 8027f62:	9008      	str	r0, [sp, #32]
 8027f64:	9109      	str	r1, [sp, #36]	@ 0x24
 8027f66:	f7da fb69 	bl	800263c <__aeabi_dmul>
 8027f6a:	0004      	movs	r4, r0
 8027f6c:	000d      	movs	r5, r1
 8027f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80280e8 <__ieee754_log+0x328>)
 8027f70:	4b5e      	ldr	r3, [pc, #376]	@ (80280ec <__ieee754_log+0x32c>)
 8027f72:	f7da fb63 	bl	800263c <__aeabi_dmul>
 8027f76:	4a5e      	ldr	r2, [pc, #376]	@ (80280f0 <__ieee754_log+0x330>)
 8027f78:	4b5e      	ldr	r3, [pc, #376]	@ (80280f4 <__ieee754_log+0x334>)
 8027f7a:	f7d9 fbb7 	bl	80016ec <__aeabi_dadd>
 8027f7e:	0022      	movs	r2, r4
 8027f80:	002b      	movs	r3, r5
 8027f82:	f7da fb5b 	bl	800263c <__aeabi_dmul>
 8027f86:	4a5c      	ldr	r2, [pc, #368]	@ (80280f8 <__ieee754_log+0x338>)
 8027f88:	4b5c      	ldr	r3, [pc, #368]	@ (80280fc <__ieee754_log+0x33c>)
 8027f8a:	f7d9 fbaf 	bl	80016ec <__aeabi_dadd>
 8027f8e:	0022      	movs	r2, r4
 8027f90:	002b      	movs	r3, r5
 8027f92:	f7da fb53 	bl	800263c <__aeabi_dmul>
 8027f96:	4a5a      	ldr	r2, [pc, #360]	@ (8028100 <__ieee754_log+0x340>)
 8027f98:	4b5a      	ldr	r3, [pc, #360]	@ (8028104 <__ieee754_log+0x344>)
 8027f9a:	f7d9 fba7 	bl	80016ec <__aeabi_dadd>
 8027f9e:	9a08      	ldr	r2, [sp, #32]
 8027fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027fa2:	f7da fb4b 	bl	800263c <__aeabi_dmul>
 8027fa6:	4a58      	ldr	r2, [pc, #352]	@ (8028108 <__ieee754_log+0x348>)
 8027fa8:	9008      	str	r0, [sp, #32]
 8027faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8027fac:	4b57      	ldr	r3, [pc, #348]	@ (802810c <__ieee754_log+0x34c>)
 8027fae:	0020      	movs	r0, r4
 8027fb0:	0029      	movs	r1, r5
 8027fb2:	f7da fb43 	bl	800263c <__aeabi_dmul>
 8027fb6:	4a56      	ldr	r2, [pc, #344]	@ (8028110 <__ieee754_log+0x350>)
 8027fb8:	4b56      	ldr	r3, [pc, #344]	@ (8028114 <__ieee754_log+0x354>)
 8027fba:	f7d9 fb97 	bl	80016ec <__aeabi_dadd>
 8027fbe:	0022      	movs	r2, r4
 8027fc0:	002b      	movs	r3, r5
 8027fc2:	f7da fb3b 	bl	800263c <__aeabi_dmul>
 8027fc6:	4a54      	ldr	r2, [pc, #336]	@ (8028118 <__ieee754_log+0x358>)
 8027fc8:	4b54      	ldr	r3, [pc, #336]	@ (802811c <__ieee754_log+0x35c>)
 8027fca:	f7d9 fb8f 	bl	80016ec <__aeabi_dadd>
 8027fce:	0022      	movs	r2, r4
 8027fd0:	002b      	movs	r3, r5
 8027fd2:	f7da fb33 	bl	800263c <__aeabi_dmul>
 8027fd6:	0002      	movs	r2, r0
 8027fd8:	000b      	movs	r3, r1
 8027fda:	9808      	ldr	r0, [sp, #32]
 8027fdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027fde:	f7d9 fb85 	bl	80016ec <__aeabi_dadd>
 8027fe2:	9a02      	ldr	r2, [sp, #8]
 8027fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8028120 <__ieee754_log+0x360>)
 8027fe6:	0004      	movs	r4, r0
 8027fe8:	1a9b      	subs	r3, r3, r2
 8027fea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027fec:	000d      	movs	r5, r1
 8027fee:	4313      	orrs	r3, r2
 8027ff0:	2b00      	cmp	r3, #0
 8027ff2:	dd34      	ble.n	802805e <__ieee754_log+0x29e>
 8027ff4:	2200      	movs	r2, #0
 8027ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80280e0 <__ieee754_log+0x320>)
 8027ff8:	0030      	movs	r0, r6
 8027ffa:	0039      	movs	r1, r7
 8027ffc:	f7da fb1e 	bl	800263c <__aeabi_dmul>
 8028000:	0032      	movs	r2, r6
 8028002:	003b      	movs	r3, r7
 8028004:	f7da fb1a 	bl	800263c <__aeabi_dmul>
 8028008:	0002      	movs	r2, r0
 802800a:	000b      	movs	r3, r1
 802800c:	9002      	str	r0, [sp, #8]
 802800e:	9103      	str	r1, [sp, #12]
 8028010:	0020      	movs	r0, r4
 8028012:	0029      	movs	r1, r5
 8028014:	f7d9 fb6a 	bl	80016ec <__aeabi_dadd>
 8028018:	9a04      	ldr	r2, [sp, #16]
 802801a:	9b05      	ldr	r3, [sp, #20]
 802801c:	f7da fb0e 	bl	800263c <__aeabi_dmul>
 8028020:	9b00      	ldr	r3, [sp, #0]
 8028022:	0004      	movs	r4, r0
 8028024:	000d      	movs	r5, r1
 8028026:	2b00      	cmp	r3, #0
 8028028:	d106      	bne.n	8028038 <__ieee754_log+0x278>
 802802a:	0002      	movs	r2, r0
 802802c:	000b      	movs	r3, r1
 802802e:	9802      	ldr	r0, [sp, #8]
 8028030:	9903      	ldr	r1, [sp, #12]
 8028032:	f7da fdcb 	bl	8002bcc <__aeabi_dsub>
 8028036:	e74f      	b.n	8027ed8 <__ieee754_log+0x118>
 8028038:	4a23      	ldr	r2, [pc, #140]	@ (80280c8 <__ieee754_log+0x308>)
 802803a:	4b24      	ldr	r3, [pc, #144]	@ (80280cc <__ieee754_log+0x30c>)
 802803c:	9806      	ldr	r0, [sp, #24]
 802803e:	9907      	ldr	r1, [sp, #28]
 8028040:	f7da fafc 	bl	800263c <__aeabi_dmul>
 8028044:	4a22      	ldr	r2, [pc, #136]	@ (80280d0 <__ieee754_log+0x310>)
 8028046:	9000      	str	r0, [sp, #0]
 8028048:	9101      	str	r1, [sp, #4]
 802804a:	9806      	ldr	r0, [sp, #24]
 802804c:	9907      	ldr	r1, [sp, #28]
 802804e:	4b21      	ldr	r3, [pc, #132]	@ (80280d4 <__ieee754_log+0x314>)
 8028050:	f7da faf4 	bl	800263c <__aeabi_dmul>
 8028054:	0022      	movs	r2, r4
 8028056:	002b      	movs	r3, r5
 8028058:	f7d9 fb48 	bl	80016ec <__aeabi_dadd>
 802805c:	e754      	b.n	8027f08 <__ieee754_log+0x148>
 802805e:	0002      	movs	r2, r0
 8028060:	000b      	movs	r3, r1
 8028062:	0030      	movs	r0, r6
 8028064:	0039      	movs	r1, r7
 8028066:	f7da fdb1 	bl	8002bcc <__aeabi_dsub>
 802806a:	9a04      	ldr	r2, [sp, #16]
 802806c:	9b05      	ldr	r3, [sp, #20]
 802806e:	f7da fae5 	bl	800263c <__aeabi_dmul>
 8028072:	9b00      	ldr	r3, [sp, #0]
 8028074:	0004      	movs	r4, r0
 8028076:	000d      	movs	r5, r1
 8028078:	2b00      	cmp	r3, #0
 802807a:	d102      	bne.n	8028082 <__ieee754_log+0x2c2>
 802807c:	0002      	movs	r2, r0
 802807e:	000b      	movs	r3, r1
 8028080:	e72c      	b.n	8027edc <__ieee754_log+0x11c>
 8028082:	4a11      	ldr	r2, [pc, #68]	@ (80280c8 <__ieee754_log+0x308>)
 8028084:	4b11      	ldr	r3, [pc, #68]	@ (80280cc <__ieee754_log+0x30c>)
 8028086:	9806      	ldr	r0, [sp, #24]
 8028088:	9907      	ldr	r1, [sp, #28]
 802808a:	f7da fad7 	bl	800263c <__aeabi_dmul>
 802808e:	4a10      	ldr	r2, [pc, #64]	@ (80280d0 <__ieee754_log+0x310>)
 8028090:	9000      	str	r0, [sp, #0]
 8028092:	9101      	str	r1, [sp, #4]
 8028094:	9806      	ldr	r0, [sp, #24]
 8028096:	9907      	ldr	r1, [sp, #28]
 8028098:	4b0e      	ldr	r3, [pc, #56]	@ (80280d4 <__ieee754_log+0x314>)
 802809a:	f7da facf 	bl	800263c <__aeabi_dmul>
 802809e:	0002      	movs	r2, r0
 80280a0:	000b      	movs	r3, r1
 80280a2:	0020      	movs	r0, r4
 80280a4:	0029      	movs	r1, r5
 80280a6:	e733      	b.n	8027f10 <__ieee754_log+0x150>
 80280a8:	2000      	movs	r0, #0
 80280aa:	2100      	movs	r1, #0
 80280ac:	e699      	b.n	8027de2 <__ieee754_log+0x22>
 80280ae:	46c0      	nop			@ (mov r8, r8)
 80280b0:	c3500000 	.word	0xc3500000
 80280b4:	43500000 	.word	0x43500000
 80280b8:	7fefffff 	.word	0x7fefffff
 80280bc:	fffffc01 	.word	0xfffffc01
 80280c0:	00095f64 	.word	0x00095f64
 80280c4:	3ff00000 	.word	0x3ff00000
 80280c8:	fee00000 	.word	0xfee00000
 80280cc:	3fe62e42 	.word	0x3fe62e42
 80280d0:	35793c76 	.word	0x35793c76
 80280d4:	3dea39ef 	.word	0x3dea39ef
 80280d8:	55555555 	.word	0x55555555
 80280dc:	3fd55555 	.word	0x3fd55555
 80280e0:	3fe00000 	.word	0x3fe00000
 80280e4:	fff9eb86 	.word	0xfff9eb86
 80280e8:	df3e5244 	.word	0xdf3e5244
 80280ec:	3fc2f112 	.word	0x3fc2f112
 80280f0:	96cb03de 	.word	0x96cb03de
 80280f4:	3fc74664 	.word	0x3fc74664
 80280f8:	94229359 	.word	0x94229359
 80280fc:	3fd24924 	.word	0x3fd24924
 8028100:	55555593 	.word	0x55555593
 8028104:	3fe55555 	.word	0x3fe55555
 8028108:	d078c69f 	.word	0xd078c69f
 802810c:	3fc39a09 	.word	0x3fc39a09
 8028110:	1d8e78af 	.word	0x1d8e78af
 8028114:	3fcc71c5 	.word	0x3fcc71c5
 8028118:	9997fa04 	.word	0x9997fa04
 802811c:	3fd99999 	.word	0x3fd99999
 8028120:	0006b851 	.word	0x0006b851

08028124 <__ieee754_pow>:
 8028124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028126:	b095      	sub	sp, #84	@ 0x54
 8028128:	9202      	str	r2, [sp, #8]
 802812a:	9303      	str	r3, [sp, #12]
 802812c:	9b03      	ldr	r3, [sp, #12]
 802812e:	9a03      	ldr	r2, [sp, #12]
 8028130:	9306      	str	r3, [sp, #24]
 8028132:	0052      	lsls	r2, r2, #1
 8028134:	9b02      	ldr	r3, [sp, #8]
 8028136:	0852      	lsrs	r2, r2, #1
 8028138:	9204      	str	r2, [sp, #16]
 802813a:	001a      	movs	r2, r3
 802813c:	000f      	movs	r7, r1
 802813e:	9904      	ldr	r1, [sp, #16]
 8028140:	0006      	movs	r6, r0
 8028142:	430a      	orrs	r2, r1
 8028144:	d119      	bne.n	802817a <__ieee754_pow+0x56>
 8028146:	2180      	movs	r1, #128	@ 0x80
 8028148:	0309      	lsls	r1, r1, #12
 802814a:	4079      	eors	r1, r7
 802814c:	0002      	movs	r2, r0
 802814e:	000b      	movs	r3, r1
 8028150:	1892      	adds	r2, r2, r2
 8028152:	415b      	adcs	r3, r3
 8028154:	499b      	ldr	r1, [pc, #620]	@ (80283c4 <__ieee754_pow+0x2a0>)
 8028156:	428b      	cmp	r3, r1
 8028158:	d806      	bhi.n	8028168 <__ieee754_pow+0x44>
 802815a:	d001      	beq.n	8028160 <__ieee754_pow+0x3c>
 802815c:	f000 fcde 	bl	8028b1c <__ieee754_pow+0x9f8>
 8028160:	2a00      	cmp	r2, #0
 8028162:	d101      	bne.n	8028168 <__ieee754_pow+0x44>
 8028164:	f000 fcda 	bl	8028b1c <__ieee754_pow+0x9f8>
 8028168:	9a02      	ldr	r2, [sp, #8]
 802816a:	9b03      	ldr	r3, [sp, #12]
 802816c:	0030      	movs	r0, r6
 802816e:	0039      	movs	r1, r7
 8028170:	f7d9 fabc 	bl	80016ec <__aeabi_dadd>
 8028174:	9000      	str	r0, [sp, #0]
 8028176:	9101      	str	r1, [sp, #4]
 8028178:	e0af      	b.n	80282da <__ieee754_pow+0x1b6>
 802817a:	4a93      	ldr	r2, [pc, #588]	@ (80283c8 <__ieee754_pow+0x2a4>)
 802817c:	007c      	lsls	r4, r7, #1
 802817e:	9708      	str	r7, [sp, #32]
 8028180:	900e      	str	r0, [sp, #56]	@ 0x38
 8028182:	0864      	lsrs	r4, r4, #1
 8028184:	4294      	cmp	r4, r2
 8028186:	d809      	bhi.n	802819c <__ieee754_pow+0x78>
 8028188:	d101      	bne.n	802818e <__ieee754_pow+0x6a>
 802818a:	2800      	cmp	r0, #0
 802818c:	d1ec      	bne.n	8028168 <__ieee754_pow+0x44>
 802818e:	9904      	ldr	r1, [sp, #16]
 8028190:	4a8d      	ldr	r2, [pc, #564]	@ (80283c8 <__ieee754_pow+0x2a4>)
 8028192:	4291      	cmp	r1, r2
 8028194:	d802      	bhi.n	802819c <__ieee754_pow+0x78>
 8028196:	d10c      	bne.n	80281b2 <__ieee754_pow+0x8e>
 8028198:	2b00      	cmp	r3, #0
 802819a:	d00a      	beq.n	80281b2 <__ieee754_pow+0x8e>
 802819c:	4b8b      	ldr	r3, [pc, #556]	@ (80283cc <__ieee754_pow+0x2a8>)
 802819e:	18fb      	adds	r3, r7, r3
 80281a0:	4333      	orrs	r3, r6
 80281a2:	d1e1      	bne.n	8028168 <__ieee754_pow+0x44>
 80281a4:	2180      	movs	r1, #128	@ 0x80
 80281a6:	9803      	ldr	r0, [sp, #12]
 80281a8:	0309      	lsls	r1, r1, #12
 80281aa:	4048      	eors	r0, r1
 80281ac:	0003      	movs	r3, r0
 80281ae:	9a02      	ldr	r2, [sp, #8]
 80281b0:	e7ce      	b.n	8028150 <__ieee754_pow+0x2c>
 80281b2:	2500      	movs	r5, #0
 80281b4:	9a08      	ldr	r2, [sp, #32]
 80281b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80281b8:	42aa      	cmp	r2, r5
 80281ba:	da68      	bge.n	802828e <__ieee754_pow+0x16a>
 80281bc:	4a84      	ldr	r2, [pc, #528]	@ (80283d0 <__ieee754_pow+0x2ac>)
 80281be:	9904      	ldr	r1, [sp, #16]
 80281c0:	4291      	cmp	r1, r2
 80281c2:	d863      	bhi.n	802828c <__ieee754_pow+0x168>
 80281c4:	4a83      	ldr	r2, [pc, #524]	@ (80283d4 <__ieee754_pow+0x2b0>)
 80281c6:	4291      	cmp	r1, r2
 80281c8:	d910      	bls.n	80281ec <__ieee754_pow+0xc8>
 80281ca:	150a      	asrs	r2, r1, #20
 80281cc:	4982      	ldr	r1, [pc, #520]	@ (80283d8 <__ieee754_pow+0x2b4>)
 80281ce:	1852      	adds	r2, r2, r1
 80281d0:	2a14      	cmp	r2, #20
 80281d2:	dd3b      	ble.n	802824c <__ieee754_pow+0x128>
 80281d4:	2134      	movs	r1, #52	@ 0x34
 80281d6:	1a89      	subs	r1, r1, r2
 80281d8:	9a02      	ldr	r2, [sp, #8]
 80281da:	40ca      	lsrs	r2, r1
 80281dc:	0010      	movs	r0, r2
 80281de:	4088      	lsls	r0, r1
 80281e0:	4298      	cmp	r0, r3
 80281e2:	d103      	bne.n	80281ec <__ieee754_pow+0xc8>
 80281e4:	2101      	movs	r1, #1
 80281e6:	3502      	adds	r5, #2
 80281e8:	400a      	ands	r2, r1
 80281ea:	1aad      	subs	r5, r5, r2
 80281ec:	2b00      	cmp	r3, #0
 80281ee:	d03d      	beq.n	802826c <__ieee754_pow+0x148>
 80281f0:	0030      	movs	r0, r6
 80281f2:	0039      	movs	r1, r7
 80281f4:	f000 fcc2 	bl	8028b7c <fabs>
 80281f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80281fa:	9000      	str	r0, [sp, #0]
 80281fc:	9101      	str	r1, [sp, #4]
 80281fe:	2b00      	cmp	r3, #0
 8028200:	d000      	beq.n	8028204 <__ieee754_pow+0xe0>
 8028202:	e093      	b.n	802832c <__ieee754_pow+0x208>
 8028204:	4a75      	ldr	r2, [pc, #468]	@ (80283dc <__ieee754_pow+0x2b8>)
 8028206:	00bb      	lsls	r3, r7, #2
 8028208:	089b      	lsrs	r3, r3, #2
 802820a:	4293      	cmp	r3, r2
 802820c:	d002      	beq.n	8028214 <__ieee754_pow+0xf0>
 802820e:	2c00      	cmp	r4, #0
 8028210:	d000      	beq.n	8028214 <__ieee754_pow+0xf0>
 8028212:	e08b      	b.n	802832c <__ieee754_pow+0x208>
 8028214:	9b06      	ldr	r3, [sp, #24]
 8028216:	2b00      	cmp	r3, #0
 8028218:	da07      	bge.n	802822a <__ieee754_pow+0x106>
 802821a:	9a00      	ldr	r2, [sp, #0]
 802821c:	9b01      	ldr	r3, [sp, #4]
 802821e:	2000      	movs	r0, #0
 8028220:	496e      	ldr	r1, [pc, #440]	@ (80283dc <__ieee754_pow+0x2b8>)
 8028222:	f7d9 fdc7 	bl	8001db4 <__aeabi_ddiv>
 8028226:	9000      	str	r0, [sp, #0]
 8028228:	9101      	str	r1, [sp, #4]
 802822a:	9b08      	ldr	r3, [sp, #32]
 802822c:	2b00      	cmp	r3, #0
 802822e:	da54      	bge.n	80282da <__ieee754_pow+0x1b6>
 8028230:	4b66      	ldr	r3, [pc, #408]	@ (80283cc <__ieee754_pow+0x2a8>)
 8028232:	18e4      	adds	r4, r4, r3
 8028234:	432c      	orrs	r4, r5
 8028236:	d000      	beq.n	802823a <__ieee754_pow+0x116>
 8028238:	e06d      	b.n	8028316 <__ieee754_pow+0x1f2>
 802823a:	9a00      	ldr	r2, [sp, #0]
 802823c:	9b01      	ldr	r3, [sp, #4]
 802823e:	0010      	movs	r0, r2
 8028240:	0019      	movs	r1, r3
 8028242:	f7da fcc3 	bl	8002bcc <__aeabi_dsub>
 8028246:	0002      	movs	r2, r0
 8028248:	000b      	movs	r3, r1
 802824a:	e01c      	b.n	8028286 <__ieee754_pow+0x162>
 802824c:	2b00      	cmp	r3, #0
 802824e:	d1cf      	bne.n	80281f0 <__ieee754_pow+0xcc>
 8028250:	3314      	adds	r3, #20
 8028252:	1a9a      	subs	r2, r3, r2
 8028254:	9b04      	ldr	r3, [sp, #16]
 8028256:	4113      	asrs	r3, r2
 8028258:	0019      	movs	r1, r3
 802825a:	4091      	lsls	r1, r2
 802825c:	000a      	movs	r2, r1
 802825e:	9904      	ldr	r1, [sp, #16]
 8028260:	428a      	cmp	r2, r1
 8028262:	d103      	bne.n	802826c <__ieee754_pow+0x148>
 8028264:	2201      	movs	r2, #1
 8028266:	2502      	movs	r5, #2
 8028268:	4013      	ands	r3, r2
 802826a:	1aed      	subs	r5, r5, r3
 802826c:	4b5b      	ldr	r3, [pc, #364]	@ (80283dc <__ieee754_pow+0x2b8>)
 802826e:	9a04      	ldr	r2, [sp, #16]
 8028270:	429a      	cmp	r2, r3
 8028272:	d136      	bne.n	80282e2 <__ieee754_pow+0x1be>
 8028274:	9b06      	ldr	r3, [sp, #24]
 8028276:	9600      	str	r6, [sp, #0]
 8028278:	9701      	str	r7, [sp, #4]
 802827a:	2b00      	cmp	r3, #0
 802827c:	da2d      	bge.n	80282da <__ieee754_pow+0x1b6>
 802827e:	0032      	movs	r2, r6
 8028280:	003b      	movs	r3, r7
 8028282:	2000      	movs	r0, #0
 8028284:	4955      	ldr	r1, [pc, #340]	@ (80283dc <__ieee754_pow+0x2b8>)
 8028286:	f7d9 fd95 	bl	8001db4 <__aeabi_ddiv>
 802828a:	e773      	b.n	8028174 <__ieee754_pow+0x50>
 802828c:	2502      	movs	r5, #2
 802828e:	2b00      	cmp	r3, #0
 8028290:	d1ae      	bne.n	80281f0 <__ieee754_pow+0xcc>
 8028292:	9b04      	ldr	r3, [sp, #16]
 8028294:	4a4c      	ldr	r2, [pc, #304]	@ (80283c8 <__ieee754_pow+0x2a4>)
 8028296:	4293      	cmp	r3, r2
 8028298:	d1e8      	bne.n	802826c <__ieee754_pow+0x148>
 802829a:	4b4c      	ldr	r3, [pc, #304]	@ (80283cc <__ieee754_pow+0x2a8>)
 802829c:	18e3      	adds	r3, r4, r3
 802829e:	4333      	orrs	r3, r6
 80282a0:	d101      	bne.n	80282a6 <__ieee754_pow+0x182>
 80282a2:	f000 fc3b 	bl	8028b1c <__ieee754_pow+0x9f8>
 80282a6:	4b4b      	ldr	r3, [pc, #300]	@ (80283d4 <__ieee754_pow+0x2b0>)
 80282a8:	429c      	cmp	r4, r3
 80282aa:	d909      	bls.n	80282c0 <__ieee754_pow+0x19c>
 80282ac:	9b06      	ldr	r3, [sp, #24]
 80282ae:	2b00      	cmp	r3, #0
 80282b0:	da01      	bge.n	80282b6 <__ieee754_pow+0x192>
 80282b2:	f000 fc37 	bl	8028b24 <__ieee754_pow+0xa00>
 80282b6:	9b02      	ldr	r3, [sp, #8]
 80282b8:	9c03      	ldr	r4, [sp, #12]
 80282ba:	9300      	str	r3, [sp, #0]
 80282bc:	9401      	str	r4, [sp, #4]
 80282be:	e00c      	b.n	80282da <__ieee754_pow+0x1b6>
 80282c0:	9b06      	ldr	r3, [sp, #24]
 80282c2:	2b00      	cmp	r3, #0
 80282c4:	db01      	blt.n	80282ca <__ieee754_pow+0x1a6>
 80282c6:	f000 fc2d 	bl	8028b24 <__ieee754_pow+0xa00>
 80282ca:	2280      	movs	r2, #128	@ 0x80
 80282cc:	0612      	lsls	r2, r2, #24
 80282ce:	4694      	mov	ip, r2
 80282d0:	9b02      	ldr	r3, [sp, #8]
 80282d2:	9300      	str	r3, [sp, #0]
 80282d4:	9b03      	ldr	r3, [sp, #12]
 80282d6:	4463      	add	r3, ip
 80282d8:	9301      	str	r3, [sp, #4]
 80282da:	9800      	ldr	r0, [sp, #0]
 80282dc:	9901      	ldr	r1, [sp, #4]
 80282de:	b015      	add	sp, #84	@ 0x54
 80282e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80282e2:	2380      	movs	r3, #128	@ 0x80
 80282e4:	9a06      	ldr	r2, [sp, #24]
 80282e6:	05db      	lsls	r3, r3, #23
 80282e8:	429a      	cmp	r2, r3
 80282ea:	d106      	bne.n	80282fa <__ieee754_pow+0x1d6>
 80282ec:	0032      	movs	r2, r6
 80282ee:	003b      	movs	r3, r7
 80282f0:	0030      	movs	r0, r6
 80282f2:	0039      	movs	r1, r7
 80282f4:	f7da f9a2 	bl	800263c <__aeabi_dmul>
 80282f8:	e73c      	b.n	8028174 <__ieee754_pow+0x50>
 80282fa:	4b39      	ldr	r3, [pc, #228]	@ (80283e0 <__ieee754_pow+0x2bc>)
 80282fc:	9a06      	ldr	r2, [sp, #24]
 80282fe:	429a      	cmp	r2, r3
 8028300:	d000      	beq.n	8028304 <__ieee754_pow+0x1e0>
 8028302:	e775      	b.n	80281f0 <__ieee754_pow+0xcc>
 8028304:	9b08      	ldr	r3, [sp, #32]
 8028306:	2b00      	cmp	r3, #0
 8028308:	da00      	bge.n	802830c <__ieee754_pow+0x1e8>
 802830a:	e771      	b.n	80281f0 <__ieee754_pow+0xcc>
 802830c:	0030      	movs	r0, r6
 802830e:	0039      	movs	r1, r7
 8028310:	f000 fde4 	bl	8028edc <__ieee754_sqrt>
 8028314:	e72e      	b.n	8028174 <__ieee754_pow+0x50>
 8028316:	2d01      	cmp	r5, #1
 8028318:	d1df      	bne.n	80282da <__ieee754_pow+0x1b6>
 802831a:	9800      	ldr	r0, [sp, #0]
 802831c:	2180      	movs	r1, #128	@ 0x80
 802831e:	0002      	movs	r2, r0
 8028320:	9801      	ldr	r0, [sp, #4]
 8028322:	0609      	lsls	r1, r1, #24
 8028324:	1843      	adds	r3, r0, r1
 8028326:	9200      	str	r2, [sp, #0]
 8028328:	9301      	str	r3, [sp, #4]
 802832a:	e7d6      	b.n	80282da <__ieee754_pow+0x1b6>
 802832c:	0ffb      	lsrs	r3, r7, #31
 802832e:	3b01      	subs	r3, #1
 8028330:	001a      	movs	r2, r3
 8028332:	432a      	orrs	r2, r5
 8028334:	d104      	bne.n	8028340 <__ieee754_pow+0x21c>
 8028336:	0032      	movs	r2, r6
 8028338:	003b      	movs	r3, r7
 802833a:	0030      	movs	r0, r6
 802833c:	0039      	movs	r1, r7
 802833e:	e780      	b.n	8028242 <__ieee754_pow+0x11e>
 8028340:	3d01      	subs	r5, #1
 8028342:	2200      	movs	r2, #0
 8028344:	431d      	orrs	r5, r3
 8028346:	d015      	beq.n	8028374 <__ieee754_pow+0x250>
 8028348:	4b24      	ldr	r3, [pc, #144]	@ (80283dc <__ieee754_pow+0x2b8>)
 802834a:	9208      	str	r2, [sp, #32]
 802834c:	9309      	str	r3, [sp, #36]	@ 0x24
 802834e:	2384      	movs	r3, #132	@ 0x84
 8028350:	9a04      	ldr	r2, [sp, #16]
 8028352:	05db      	lsls	r3, r3, #23
 8028354:	429a      	cmp	r2, r3
 8028356:	d800      	bhi.n	802835a <__ieee754_pow+0x236>
 8028358:	e102      	b.n	8028560 <__ieee754_pow+0x43c>
 802835a:	4b22      	ldr	r3, [pc, #136]	@ (80283e4 <__ieee754_pow+0x2c0>)
 802835c:	429a      	cmp	r2, r3
 802835e:	d912      	bls.n	8028386 <__ieee754_pow+0x262>
 8028360:	4b1c      	ldr	r3, [pc, #112]	@ (80283d4 <__ieee754_pow+0x2b0>)
 8028362:	429c      	cmp	r4, r3
 8028364:	d808      	bhi.n	8028378 <__ieee754_pow+0x254>
 8028366:	9b06      	ldr	r3, [sp, #24]
 8028368:	2b00      	cmp	r3, #0
 802836a:	da08      	bge.n	802837e <__ieee754_pow+0x25a>
 802836c:	2000      	movs	r0, #0
 802836e:	f000 fd8b 	bl	8028e88 <__math_oflow>
 8028372:	e6ff      	b.n	8028174 <__ieee754_pow+0x50>
 8028374:	4b1c      	ldr	r3, [pc, #112]	@ (80283e8 <__ieee754_pow+0x2c4>)
 8028376:	e7e8      	b.n	802834a <__ieee754_pow+0x226>
 8028378:	9b06      	ldr	r3, [sp, #24]
 802837a:	2b00      	cmp	r3, #0
 802837c:	dcf6      	bgt.n	802836c <__ieee754_pow+0x248>
 802837e:	2000      	movs	r0, #0
 8028380:	f000 fd7b 	bl	8028e7a <__math_uflow>
 8028384:	e6f6      	b.n	8028174 <__ieee754_pow+0x50>
 8028386:	4b19      	ldr	r3, [pc, #100]	@ (80283ec <__ieee754_pow+0x2c8>)
 8028388:	429c      	cmp	r4, r3
 802838a:	d80b      	bhi.n	80283a4 <__ieee754_pow+0x280>
 802838c:	9808      	ldr	r0, [sp, #32]
 802838e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028390:	2300      	movs	r3, #0
 8028392:	2200      	movs	r2, #0
 8028394:	f7d8 f892 	bl	80004bc <__aeabi_dcmplt>
 8028398:	1e43      	subs	r3, r0, #1
 802839a:	4198      	sbcs	r0, r3
 802839c:	9b06      	ldr	r3, [sp, #24]
 802839e:	2b00      	cmp	r3, #0
 80283a0:	daee      	bge.n	8028380 <__ieee754_pow+0x25c>
 80283a2:	e7e4      	b.n	802836e <__ieee754_pow+0x24a>
 80283a4:	4b0d      	ldr	r3, [pc, #52]	@ (80283dc <__ieee754_pow+0x2b8>)
 80283a6:	2200      	movs	r2, #0
 80283a8:	429c      	cmp	r4, r3
 80283aa:	d921      	bls.n	80283f0 <__ieee754_pow+0x2cc>
 80283ac:	9808      	ldr	r0, [sp, #32]
 80283ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80283b0:	2300      	movs	r3, #0
 80283b2:	f7d8 f883 	bl	80004bc <__aeabi_dcmplt>
 80283b6:	1e43      	subs	r3, r0, #1
 80283b8:	4198      	sbcs	r0, r3
 80283ba:	9b06      	ldr	r3, [sp, #24]
 80283bc:	2b00      	cmp	r3, #0
 80283be:	dcd6      	bgt.n	802836e <__ieee754_pow+0x24a>
 80283c0:	e7de      	b.n	8028380 <__ieee754_pow+0x25c>
 80283c2:	46c0      	nop			@ (mov r8, r8)
 80283c4:	fff00000 	.word	0xfff00000
 80283c8:	7ff00000 	.word	0x7ff00000
 80283cc:	c0100000 	.word	0xc0100000
 80283d0:	433fffff 	.word	0x433fffff
 80283d4:	3fefffff 	.word	0x3fefffff
 80283d8:	fffffc01 	.word	0xfffffc01
 80283dc:	3ff00000 	.word	0x3ff00000
 80283e0:	3fe00000 	.word	0x3fe00000
 80283e4:	43f00000 	.word	0x43f00000
 80283e8:	bff00000 	.word	0xbff00000
 80283ec:	3feffffe 	.word	0x3feffffe
 80283f0:	9800      	ldr	r0, [sp, #0]
 80283f2:	9901      	ldr	r1, [sp, #4]
 80283f4:	4b4f      	ldr	r3, [pc, #316]	@ (8028534 <__ieee754_pow+0x410>)
 80283f6:	f7da fbe9 	bl	8002bcc <__aeabi_dsub>
 80283fa:	22c0      	movs	r2, #192	@ 0xc0
 80283fc:	4b4e      	ldr	r3, [pc, #312]	@ (8028538 <__ieee754_pow+0x414>)
 80283fe:	05d2      	lsls	r2, r2, #23
 8028400:	0006      	movs	r6, r0
 8028402:	000f      	movs	r7, r1
 8028404:	f7da f91a 	bl	800263c <__aeabi_dmul>
 8028408:	4a4c      	ldr	r2, [pc, #304]	@ (802853c <__ieee754_pow+0x418>)
 802840a:	9004      	str	r0, [sp, #16]
 802840c:	9105      	str	r1, [sp, #20]
 802840e:	4b4c      	ldr	r3, [pc, #304]	@ (8028540 <__ieee754_pow+0x41c>)
 8028410:	0030      	movs	r0, r6
 8028412:	0039      	movs	r1, r7
 8028414:	f7da f912 	bl	800263c <__aeabi_dmul>
 8028418:	2200      	movs	r2, #0
 802841a:	9000      	str	r0, [sp, #0]
 802841c:	9101      	str	r1, [sp, #4]
 802841e:	4b49      	ldr	r3, [pc, #292]	@ (8028544 <__ieee754_pow+0x420>)
 8028420:	0030      	movs	r0, r6
 8028422:	0039      	movs	r1, r7
 8028424:	f7da f90a 	bl	800263c <__aeabi_dmul>
 8028428:	0002      	movs	r2, r0
 802842a:	000b      	movs	r3, r1
 802842c:	4846      	ldr	r0, [pc, #280]	@ (8028548 <__ieee754_pow+0x424>)
 802842e:	4947      	ldr	r1, [pc, #284]	@ (802854c <__ieee754_pow+0x428>)
 8028430:	f7da fbcc 	bl	8002bcc <__aeabi_dsub>
 8028434:	0032      	movs	r2, r6
 8028436:	003b      	movs	r3, r7
 8028438:	f7da f900 	bl	800263c <__aeabi_dmul>
 802843c:	0002      	movs	r2, r0
 802843e:	000b      	movs	r3, r1
 8028440:	2000      	movs	r0, #0
 8028442:	4943      	ldr	r1, [pc, #268]	@ (8028550 <__ieee754_pow+0x42c>)
 8028444:	f7da fbc2 	bl	8002bcc <__aeabi_dsub>
 8028448:	0032      	movs	r2, r6
 802844a:	0004      	movs	r4, r0
 802844c:	000d      	movs	r5, r1
 802844e:	003b      	movs	r3, r7
 8028450:	0030      	movs	r0, r6
 8028452:	0039      	movs	r1, r7
 8028454:	f7da f8f2 	bl	800263c <__aeabi_dmul>
 8028458:	0002      	movs	r2, r0
 802845a:	000b      	movs	r3, r1
 802845c:	0020      	movs	r0, r4
 802845e:	0029      	movs	r1, r5
 8028460:	f7da f8ec 	bl	800263c <__aeabi_dmul>
 8028464:	4a3b      	ldr	r2, [pc, #236]	@ (8028554 <__ieee754_pow+0x430>)
 8028466:	4b34      	ldr	r3, [pc, #208]	@ (8028538 <__ieee754_pow+0x414>)
 8028468:	f7da f8e8 	bl	800263c <__aeabi_dmul>
 802846c:	0002      	movs	r2, r0
 802846e:	000b      	movs	r3, r1
 8028470:	9800      	ldr	r0, [sp, #0]
 8028472:	9901      	ldr	r1, [sp, #4]
 8028474:	f7da fbaa 	bl	8002bcc <__aeabi_dsub>
 8028478:	0002      	movs	r2, r0
 802847a:	000b      	movs	r3, r1
 802847c:	0004      	movs	r4, r0
 802847e:	000d      	movs	r5, r1
 8028480:	9804      	ldr	r0, [sp, #16]
 8028482:	9905      	ldr	r1, [sp, #20]
 8028484:	f7d9 f932 	bl	80016ec <__aeabi_dadd>
 8028488:	9a04      	ldr	r2, [sp, #16]
 802848a:	9b05      	ldr	r3, [sp, #20]
 802848c:	2000      	movs	r0, #0
 802848e:	9000      	str	r0, [sp, #0]
 8028490:	9101      	str	r1, [sp, #4]
 8028492:	f7da fb9b 	bl	8002bcc <__aeabi_dsub>
 8028496:	0002      	movs	r2, r0
 8028498:	000b      	movs	r3, r1
 802849a:	0020      	movs	r0, r4
 802849c:	0029      	movs	r1, r5
 802849e:	f7da fb95 	bl	8002bcc <__aeabi_dsub>
 80284a2:	9b02      	ldr	r3, [sp, #8]
 80284a4:	9c03      	ldr	r4, [sp, #12]
 80284a6:	9304      	str	r3, [sp, #16]
 80284a8:	9405      	str	r4, [sp, #20]
 80284aa:	2300      	movs	r3, #0
 80284ac:	9304      	str	r3, [sp, #16]
 80284ae:	9c04      	ldr	r4, [sp, #16]
 80284b0:	9d05      	ldr	r5, [sp, #20]
 80284b2:	0006      	movs	r6, r0
 80284b4:	000f      	movs	r7, r1
 80284b6:	9802      	ldr	r0, [sp, #8]
 80284b8:	9903      	ldr	r1, [sp, #12]
 80284ba:	0022      	movs	r2, r4
 80284bc:	002b      	movs	r3, r5
 80284be:	f7da fb85 	bl	8002bcc <__aeabi_dsub>
 80284c2:	9a00      	ldr	r2, [sp, #0]
 80284c4:	9b01      	ldr	r3, [sp, #4]
 80284c6:	f7da f8b9 	bl	800263c <__aeabi_dmul>
 80284ca:	9a02      	ldr	r2, [sp, #8]
 80284cc:	9b03      	ldr	r3, [sp, #12]
 80284ce:	9006      	str	r0, [sp, #24]
 80284d0:	9107      	str	r1, [sp, #28]
 80284d2:	0030      	movs	r0, r6
 80284d4:	0039      	movs	r1, r7
 80284d6:	f7da f8b1 	bl	800263c <__aeabi_dmul>
 80284da:	0002      	movs	r2, r0
 80284dc:	000b      	movs	r3, r1
 80284de:	9806      	ldr	r0, [sp, #24]
 80284e0:	9907      	ldr	r1, [sp, #28]
 80284e2:	f7d9 f903 	bl	80016ec <__aeabi_dadd>
 80284e6:	0022      	movs	r2, r4
 80284e8:	002b      	movs	r3, r5
 80284ea:	9002      	str	r0, [sp, #8]
 80284ec:	9103      	str	r1, [sp, #12]
 80284ee:	9800      	ldr	r0, [sp, #0]
 80284f0:	9901      	ldr	r1, [sp, #4]
 80284f2:	f7da f8a3 	bl	800263c <__aeabi_dmul>
 80284f6:	000b      	movs	r3, r1
 80284f8:	0002      	movs	r2, r0
 80284fa:	0006      	movs	r6, r0
 80284fc:	000f      	movs	r7, r1
 80284fe:	9802      	ldr	r0, [sp, #8]
 8028500:	9903      	ldr	r1, [sp, #12]
 8028502:	f7d9 f8f3 	bl	80016ec <__aeabi_dadd>
 8028506:	9000      	str	r0, [sp, #0]
 8028508:	9101      	str	r1, [sp, #4]
 802850a:	9c01      	ldr	r4, [sp, #4]
 802850c:	4b12      	ldr	r3, [pc, #72]	@ (8028558 <__ieee754_pow+0x434>)
 802850e:	9406      	str	r4, [sp, #24]
 8028510:	429c      	cmp	r4, r3
 8028512:	dc00      	bgt.n	8028516 <__ieee754_pow+0x3f2>
 8028514:	e222      	b.n	802895c <__ieee754_pow+0x838>
 8028516:	4a11      	ldr	r2, [pc, #68]	@ (802855c <__ieee754_pow+0x438>)
 8028518:	18a3      	adds	r3, r4, r2
 802851a:	9a00      	ldr	r2, [sp, #0]
 802851c:	4313      	orrs	r3, r2
 802851e:	d100      	bne.n	8028522 <__ieee754_pow+0x3fe>
 8028520:	e1a0      	b.n	8028864 <__ieee754_pow+0x740>
 8028522:	9808      	ldr	r0, [sp, #32]
 8028524:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028526:	2300      	movs	r3, #0
 8028528:	2200      	movs	r2, #0
 802852a:	f7d7 ffc7 	bl	80004bc <__aeabi_dcmplt>
 802852e:	1e43      	subs	r3, r0, #1
 8028530:	4198      	sbcs	r0, r3
 8028532:	e71c      	b.n	802836e <__ieee754_pow+0x24a>
 8028534:	3ff00000 	.word	0x3ff00000
 8028538:	3ff71547 	.word	0x3ff71547
 802853c:	f85ddf44 	.word	0xf85ddf44
 8028540:	3e54ae0b 	.word	0x3e54ae0b
 8028544:	3fd00000 	.word	0x3fd00000
 8028548:	55555555 	.word	0x55555555
 802854c:	3fd55555 	.word	0x3fd55555
 8028550:	3fe00000 	.word	0x3fe00000
 8028554:	652b82fe 	.word	0x652b82fe
 8028558:	408fffff 	.word	0x408fffff
 802855c:	bf700000 	.word	0xbf700000
 8028560:	4be0      	ldr	r3, [pc, #896]	@ (80288e4 <__ieee754_pow+0x7c0>)
 8028562:	2200      	movs	r2, #0
 8028564:	423b      	tst	r3, r7
 8028566:	d10b      	bne.n	8028580 <__ieee754_pow+0x45c>
 8028568:	9800      	ldr	r0, [sp, #0]
 802856a:	9901      	ldr	r1, [sp, #4]
 802856c:	2200      	movs	r2, #0
 802856e:	4bde      	ldr	r3, [pc, #888]	@ (80288e8 <__ieee754_pow+0x7c4>)
 8028570:	f7da f864 	bl	800263c <__aeabi_dmul>
 8028574:	2235      	movs	r2, #53	@ 0x35
 8028576:	9000      	str	r0, [sp, #0]
 8028578:	9101      	str	r1, [sp, #4]
 802857a:	9b01      	ldr	r3, [sp, #4]
 802857c:	4252      	negs	r2, r2
 802857e:	930a      	str	r3, [sp, #40]	@ 0x28
 8028580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028582:	49da      	ldr	r1, [pc, #872]	@ (80288ec <__ieee754_pow+0x7c8>)
 8028584:	151b      	asrs	r3, r3, #20
 8028586:	185b      	adds	r3, r3, r1
 8028588:	189b      	adds	r3, r3, r2
 802858a:	930e      	str	r3, [sp, #56]	@ 0x38
 802858c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802858e:	4dd8      	ldr	r5, [pc, #864]	@ (80288f0 <__ieee754_pow+0x7cc>)
 8028590:	031b      	lsls	r3, r3, #12
 8028592:	4ad8      	ldr	r2, [pc, #864]	@ (80288f4 <__ieee754_pow+0x7d0>)
 8028594:	0b1b      	lsrs	r3, r3, #12
 8028596:	2600      	movs	r6, #0
 8028598:	431d      	orrs	r5, r3
 802859a:	4293      	cmp	r3, r2
 802859c:	dd09      	ble.n	80285b2 <__ieee754_pow+0x48e>
 802859e:	4ad6      	ldr	r2, [pc, #856]	@ (80288f8 <__ieee754_pow+0x7d4>)
 80285a0:	3601      	adds	r6, #1
 80285a2:	4293      	cmp	r3, r2
 80285a4:	dd05      	ble.n	80285b2 <__ieee754_pow+0x48e>
 80285a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80285a8:	199b      	adds	r3, r3, r6
 80285aa:	2600      	movs	r6, #0
 80285ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80285ae:	4bd3      	ldr	r3, [pc, #844]	@ (80288fc <__ieee754_pow+0x7d8>)
 80285b0:	18ed      	adds	r5, r5, r3
 80285b2:	9800      	ldr	r0, [sp, #0]
 80285b4:	9901      	ldr	r1, [sp, #4]
 80285b6:	0029      	movs	r1, r5
 80285b8:	4bd1      	ldr	r3, [pc, #836]	@ (8028900 <__ieee754_pow+0x7dc>)
 80285ba:	00f2      	lsls	r2, r6, #3
 80285bc:	189b      	adds	r3, r3, r2
 80285be:	685c      	ldr	r4, [r3, #4]
 80285c0:	681b      	ldr	r3, [r3, #0]
 80285c2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80285c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80285c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80285c8:	001a      	movs	r2, r3
 80285ca:	0023      	movs	r3, r4
 80285cc:	900c      	str	r0, [sp, #48]	@ 0x30
 80285ce:	910d      	str	r1, [sp, #52]	@ 0x34
 80285d0:	f7da fafc 	bl	8002bcc <__aeabi_dsub>
 80285d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80285d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80285d8:	9010      	str	r0, [sp, #64]	@ 0x40
 80285da:	9111      	str	r1, [sp, #68]	@ 0x44
 80285dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80285de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80285e0:	f7d9 f884 	bl	80016ec <__aeabi_dadd>
 80285e4:	0002      	movs	r2, r0
 80285e6:	000b      	movs	r3, r1
 80285e8:	2000      	movs	r0, #0
 80285ea:	49c1      	ldr	r1, [pc, #772]	@ (80288f0 <__ieee754_pow+0x7cc>)
 80285ec:	f7d9 fbe2 	bl	8001db4 <__aeabi_ddiv>
 80285f0:	0002      	movs	r2, r0
 80285f2:	000b      	movs	r3, r1
 80285f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80285f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80285f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80285fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80285fc:	f7da f81e 	bl	800263c <__aeabi_dmul>
 8028600:	9006      	str	r0, [sp, #24]
 8028602:	9107      	str	r1, [sp, #28]
 8028604:	9b06      	ldr	r3, [sp, #24]
 8028606:	9c07      	ldr	r4, [sp, #28]
 8028608:	2180      	movs	r1, #128	@ 0x80
 802860a:	9304      	str	r3, [sp, #16]
 802860c:	9405      	str	r4, [sp, #20]
 802860e:	2080      	movs	r0, #128	@ 0x80
 8028610:	2300      	movs	r3, #0
 8028612:	2200      	movs	r2, #0
 8028614:	106d      	asrs	r5, r5, #1
 8028616:	0589      	lsls	r1, r1, #22
 8028618:	9304      	str	r3, [sp, #16]
 802861a:	4329      	orrs	r1, r5
 802861c:	0300      	lsls	r0, r0, #12
 802861e:	9b04      	ldr	r3, [sp, #16]
 8028620:	9c05      	ldr	r4, [sp, #20]
 8028622:	1809      	adds	r1, r1, r0
 8028624:	9300      	str	r3, [sp, #0]
 8028626:	9401      	str	r4, [sp, #4]
 8028628:	04b6      	lsls	r6, r6, #18
 802862a:	198b      	adds	r3, r1, r6
 802862c:	9800      	ldr	r0, [sp, #0]
 802862e:	9901      	ldr	r1, [sp, #4]
 8028630:	0014      	movs	r4, r2
 8028632:	001d      	movs	r5, r3
 8028634:	f7da f802 	bl	800263c <__aeabi_dmul>
 8028638:	0002      	movs	r2, r0
 802863a:	000b      	movs	r3, r1
 802863c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802863e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028640:	f7da fac4 	bl	8002bcc <__aeabi_dsub>
 8028644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028648:	0006      	movs	r6, r0
 802864a:	000f      	movs	r7, r1
 802864c:	0020      	movs	r0, r4
 802864e:	0029      	movs	r1, r5
 8028650:	f7da fabc 	bl	8002bcc <__aeabi_dsub>
 8028654:	0002      	movs	r2, r0
 8028656:	000b      	movs	r3, r1
 8028658:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802865a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802865c:	f7da fab6 	bl	8002bcc <__aeabi_dsub>
 8028660:	9a00      	ldr	r2, [sp, #0]
 8028662:	9b01      	ldr	r3, [sp, #4]
 8028664:	f7d9 ffea 	bl	800263c <__aeabi_dmul>
 8028668:	0002      	movs	r2, r0
 802866a:	000b      	movs	r3, r1
 802866c:	0030      	movs	r0, r6
 802866e:	0039      	movs	r1, r7
 8028670:	f7da faac 	bl	8002bcc <__aeabi_dsub>
 8028674:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028676:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028678:	f7d9 ffe0 	bl	800263c <__aeabi_dmul>
 802867c:	9a06      	ldr	r2, [sp, #24]
 802867e:	9b07      	ldr	r3, [sp, #28]
 8028680:	900a      	str	r0, [sp, #40]	@ 0x28
 8028682:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028684:	0010      	movs	r0, r2
 8028686:	0019      	movs	r1, r3
 8028688:	f7d9 ffd8 	bl	800263c <__aeabi_dmul>
 802868c:	0006      	movs	r6, r0
 802868e:	000f      	movs	r7, r1
 8028690:	4a9c      	ldr	r2, [pc, #624]	@ (8028904 <__ieee754_pow+0x7e0>)
 8028692:	4b9d      	ldr	r3, [pc, #628]	@ (8028908 <__ieee754_pow+0x7e4>)
 8028694:	f7d9 ffd2 	bl	800263c <__aeabi_dmul>
 8028698:	4a9c      	ldr	r2, [pc, #624]	@ (802890c <__ieee754_pow+0x7e8>)
 802869a:	4b9d      	ldr	r3, [pc, #628]	@ (8028910 <__ieee754_pow+0x7ec>)
 802869c:	f7d9 f826 	bl	80016ec <__aeabi_dadd>
 80286a0:	0032      	movs	r2, r6
 80286a2:	003b      	movs	r3, r7
 80286a4:	f7d9 ffca 	bl	800263c <__aeabi_dmul>
 80286a8:	4a9a      	ldr	r2, [pc, #616]	@ (8028914 <__ieee754_pow+0x7f0>)
 80286aa:	4b9b      	ldr	r3, [pc, #620]	@ (8028918 <__ieee754_pow+0x7f4>)
 80286ac:	f7d9 f81e 	bl	80016ec <__aeabi_dadd>
 80286b0:	0032      	movs	r2, r6
 80286b2:	003b      	movs	r3, r7
 80286b4:	f7d9 ffc2 	bl	800263c <__aeabi_dmul>
 80286b8:	4a98      	ldr	r2, [pc, #608]	@ (802891c <__ieee754_pow+0x7f8>)
 80286ba:	4b99      	ldr	r3, [pc, #612]	@ (8028920 <__ieee754_pow+0x7fc>)
 80286bc:	f7d9 f816 	bl	80016ec <__aeabi_dadd>
 80286c0:	0032      	movs	r2, r6
 80286c2:	003b      	movs	r3, r7
 80286c4:	f7d9 ffba 	bl	800263c <__aeabi_dmul>
 80286c8:	4a96      	ldr	r2, [pc, #600]	@ (8028924 <__ieee754_pow+0x800>)
 80286ca:	4b97      	ldr	r3, [pc, #604]	@ (8028928 <__ieee754_pow+0x804>)
 80286cc:	f7d9 f80e 	bl	80016ec <__aeabi_dadd>
 80286d0:	0032      	movs	r2, r6
 80286d2:	003b      	movs	r3, r7
 80286d4:	f7d9 ffb2 	bl	800263c <__aeabi_dmul>
 80286d8:	4a94      	ldr	r2, [pc, #592]	@ (802892c <__ieee754_pow+0x808>)
 80286da:	4b95      	ldr	r3, [pc, #596]	@ (8028930 <__ieee754_pow+0x80c>)
 80286dc:	f7d9 f806 	bl	80016ec <__aeabi_dadd>
 80286e0:	0032      	movs	r2, r6
 80286e2:	0004      	movs	r4, r0
 80286e4:	000d      	movs	r5, r1
 80286e6:	003b      	movs	r3, r7
 80286e8:	0030      	movs	r0, r6
 80286ea:	0039      	movs	r1, r7
 80286ec:	f7d9 ffa6 	bl	800263c <__aeabi_dmul>
 80286f0:	0002      	movs	r2, r0
 80286f2:	000b      	movs	r3, r1
 80286f4:	0020      	movs	r0, r4
 80286f6:	0029      	movs	r1, r5
 80286f8:	f7d9 ffa0 	bl	800263c <__aeabi_dmul>
 80286fc:	9a00      	ldr	r2, [sp, #0]
 80286fe:	9b01      	ldr	r3, [sp, #4]
 8028700:	0004      	movs	r4, r0
 8028702:	000d      	movs	r5, r1
 8028704:	9806      	ldr	r0, [sp, #24]
 8028706:	9907      	ldr	r1, [sp, #28]
 8028708:	f7d8 fff0 	bl	80016ec <__aeabi_dadd>
 802870c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802870e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028710:	f7d9 ff94 	bl	800263c <__aeabi_dmul>
 8028714:	0022      	movs	r2, r4
 8028716:	002b      	movs	r3, r5
 8028718:	f7d8 ffe8 	bl	80016ec <__aeabi_dadd>
 802871c:	9a00      	ldr	r2, [sp, #0]
 802871e:	9b01      	ldr	r3, [sp, #4]
 8028720:	900c      	str	r0, [sp, #48]	@ 0x30
 8028722:	910d      	str	r1, [sp, #52]	@ 0x34
 8028724:	0010      	movs	r0, r2
 8028726:	0019      	movs	r1, r3
 8028728:	f7d9 ff88 	bl	800263c <__aeabi_dmul>
 802872c:	2200      	movs	r2, #0
 802872e:	4b81      	ldr	r3, [pc, #516]	@ (8028934 <__ieee754_pow+0x810>)
 8028730:	0004      	movs	r4, r0
 8028732:	000d      	movs	r5, r1
 8028734:	f7d8 ffda 	bl	80016ec <__aeabi_dadd>
 8028738:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802873a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802873c:	f7d8 ffd6 	bl	80016ec <__aeabi_dadd>
 8028740:	2000      	movs	r0, #0
 8028742:	000f      	movs	r7, r1
 8028744:	0006      	movs	r6, r0
 8028746:	0002      	movs	r2, r0
 8028748:	000b      	movs	r3, r1
 802874a:	9800      	ldr	r0, [sp, #0]
 802874c:	9901      	ldr	r1, [sp, #4]
 802874e:	f7d9 ff75 	bl	800263c <__aeabi_dmul>
 8028752:	2200      	movs	r2, #0
 8028754:	9000      	str	r0, [sp, #0]
 8028756:	9101      	str	r1, [sp, #4]
 8028758:	4b76      	ldr	r3, [pc, #472]	@ (8028934 <__ieee754_pow+0x810>)
 802875a:	0030      	movs	r0, r6
 802875c:	0039      	movs	r1, r7
 802875e:	f7da fa35 	bl	8002bcc <__aeabi_dsub>
 8028762:	0022      	movs	r2, r4
 8028764:	002b      	movs	r3, r5
 8028766:	f7da fa31 	bl	8002bcc <__aeabi_dsub>
 802876a:	0002      	movs	r2, r0
 802876c:	000b      	movs	r3, r1
 802876e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028770:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028772:	f7da fa2b 	bl	8002bcc <__aeabi_dsub>
 8028776:	9a06      	ldr	r2, [sp, #24]
 8028778:	9b07      	ldr	r3, [sp, #28]
 802877a:	f7d9 ff5f 	bl	800263c <__aeabi_dmul>
 802877e:	0032      	movs	r2, r6
 8028780:	0004      	movs	r4, r0
 8028782:	000d      	movs	r5, r1
 8028784:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028786:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028788:	003b      	movs	r3, r7
 802878a:	f7d9 ff57 	bl	800263c <__aeabi_dmul>
 802878e:	0002      	movs	r2, r0
 8028790:	000b      	movs	r3, r1
 8028792:	0020      	movs	r0, r4
 8028794:	0029      	movs	r1, r5
 8028796:	f7d8 ffa9 	bl	80016ec <__aeabi_dadd>
 802879a:	0004      	movs	r4, r0
 802879c:	000d      	movs	r5, r1
 802879e:	0002      	movs	r2, r0
 80287a0:	000b      	movs	r3, r1
 80287a2:	9800      	ldr	r0, [sp, #0]
 80287a4:	9901      	ldr	r1, [sp, #4]
 80287a6:	f7d8 ffa1 	bl	80016ec <__aeabi_dadd>
 80287aa:	22e0      	movs	r2, #224	@ 0xe0
 80287ac:	2000      	movs	r0, #0
 80287ae:	4b62      	ldr	r3, [pc, #392]	@ (8028938 <__ieee754_pow+0x814>)
 80287b0:	0612      	lsls	r2, r2, #24
 80287b2:	0006      	movs	r6, r0
 80287b4:	000f      	movs	r7, r1
 80287b6:	f7d9 ff41 	bl	800263c <__aeabi_dmul>
 80287ba:	9006      	str	r0, [sp, #24]
 80287bc:	9107      	str	r1, [sp, #28]
 80287be:	9a00      	ldr	r2, [sp, #0]
 80287c0:	9b01      	ldr	r3, [sp, #4]
 80287c2:	0030      	movs	r0, r6
 80287c4:	0039      	movs	r1, r7
 80287c6:	f7da fa01 	bl	8002bcc <__aeabi_dsub>
 80287ca:	0002      	movs	r2, r0
 80287cc:	000b      	movs	r3, r1
 80287ce:	0020      	movs	r0, r4
 80287d0:	0029      	movs	r1, r5
 80287d2:	f7da f9fb 	bl	8002bcc <__aeabi_dsub>
 80287d6:	4a59      	ldr	r2, [pc, #356]	@ (802893c <__ieee754_pow+0x818>)
 80287d8:	4b57      	ldr	r3, [pc, #348]	@ (8028938 <__ieee754_pow+0x814>)
 80287da:	f7d9 ff2f 	bl	800263c <__aeabi_dmul>
 80287de:	4a58      	ldr	r2, [pc, #352]	@ (8028940 <__ieee754_pow+0x81c>)
 80287e0:	0004      	movs	r4, r0
 80287e2:	000d      	movs	r5, r1
 80287e4:	0030      	movs	r0, r6
 80287e6:	0039      	movs	r1, r7
 80287e8:	4b56      	ldr	r3, [pc, #344]	@ (8028944 <__ieee754_pow+0x820>)
 80287ea:	f7d9 ff27 	bl	800263c <__aeabi_dmul>
 80287ee:	0002      	movs	r2, r0
 80287f0:	000b      	movs	r3, r1
 80287f2:	0020      	movs	r0, r4
 80287f4:	0029      	movs	r1, r5
 80287f6:	f7d8 ff79 	bl	80016ec <__aeabi_dadd>
 80287fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80287fc:	4b52      	ldr	r3, [pc, #328]	@ (8028948 <__ieee754_pow+0x824>)
 80287fe:	189b      	adds	r3, r3, r2
 8028800:	681a      	ldr	r2, [r3, #0]
 8028802:	685b      	ldr	r3, [r3, #4]
 8028804:	f7d8 ff72 	bl	80016ec <__aeabi_dadd>
 8028808:	900a      	str	r0, [sp, #40]	@ 0x28
 802880a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802880c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802880e:	f7da fdd7 	bl	80033c0 <__aeabi_i2d>
 8028812:	0004      	movs	r4, r0
 8028814:	000d      	movs	r5, r1
 8028816:	9806      	ldr	r0, [sp, #24]
 8028818:	9907      	ldr	r1, [sp, #28]
 802881a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802881c:	4b4b      	ldr	r3, [pc, #300]	@ (802894c <__ieee754_pow+0x828>)
 802881e:	189b      	adds	r3, r3, r2
 8028820:	681e      	ldr	r6, [r3, #0]
 8028822:	685f      	ldr	r7, [r3, #4]
 8028824:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028828:	f7d8 ff60 	bl	80016ec <__aeabi_dadd>
 802882c:	0032      	movs	r2, r6
 802882e:	003b      	movs	r3, r7
 8028830:	f7d8 ff5c 	bl	80016ec <__aeabi_dadd>
 8028834:	0022      	movs	r2, r4
 8028836:	002b      	movs	r3, r5
 8028838:	f7d8 ff58 	bl	80016ec <__aeabi_dadd>
 802883c:	2000      	movs	r0, #0
 802883e:	0022      	movs	r2, r4
 8028840:	002b      	movs	r3, r5
 8028842:	9000      	str	r0, [sp, #0]
 8028844:	9101      	str	r1, [sp, #4]
 8028846:	f7da f9c1 	bl	8002bcc <__aeabi_dsub>
 802884a:	0032      	movs	r2, r6
 802884c:	003b      	movs	r3, r7
 802884e:	f7da f9bd 	bl	8002bcc <__aeabi_dsub>
 8028852:	9a06      	ldr	r2, [sp, #24]
 8028854:	9b07      	ldr	r3, [sp, #28]
 8028856:	f7da f9b9 	bl	8002bcc <__aeabi_dsub>
 802885a:	0002      	movs	r2, r0
 802885c:	000b      	movs	r3, r1
 802885e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028862:	e61c      	b.n	802849e <__ieee754_pow+0x37a>
 8028864:	4a3a      	ldr	r2, [pc, #232]	@ (8028950 <__ieee754_pow+0x82c>)
 8028866:	4b3b      	ldr	r3, [pc, #236]	@ (8028954 <__ieee754_pow+0x830>)
 8028868:	9802      	ldr	r0, [sp, #8]
 802886a:	9903      	ldr	r1, [sp, #12]
 802886c:	f7d8 ff3e 	bl	80016ec <__aeabi_dadd>
 8028870:	0032      	movs	r2, r6
 8028872:	003b      	movs	r3, r7
 8028874:	9004      	str	r0, [sp, #16]
 8028876:	9105      	str	r1, [sp, #20]
 8028878:	9800      	ldr	r0, [sp, #0]
 802887a:	9901      	ldr	r1, [sp, #4]
 802887c:	f7da f9a6 	bl	8002bcc <__aeabi_dsub>
 8028880:	0002      	movs	r2, r0
 8028882:	000b      	movs	r3, r1
 8028884:	9804      	ldr	r0, [sp, #16]
 8028886:	9905      	ldr	r1, [sp, #20]
 8028888:	f7d7 fe2c 	bl	80004e4 <__aeabi_dcmpgt>
 802888c:	2800      	cmp	r0, #0
 802888e:	d000      	beq.n	8028892 <__ieee754_pow+0x76e>
 8028890:	e647      	b.n	8028522 <__ieee754_pow+0x3fe>
 8028892:	2580      	movs	r5, #128	@ 0x80
 8028894:	4b30      	ldr	r3, [pc, #192]	@ (8028958 <__ieee754_pow+0x834>)
 8028896:	036d      	lsls	r5, r5, #13
 8028898:	1524      	asrs	r4, r4, #20
 802889a:	18e4      	adds	r4, r4, r3
 802889c:	002b      	movs	r3, r5
 802889e:	4123      	asrs	r3, r4
 80288a0:	9a06      	ldr	r2, [sp, #24]
 80288a2:	4912      	ldr	r1, [pc, #72]	@ (80288ec <__ieee754_pow+0x7c8>)
 80288a4:	189b      	adds	r3, r3, r2
 80288a6:	005a      	lsls	r2, r3, #1
 80288a8:	4c14      	ldr	r4, [pc, #80]	@ (80288fc <__ieee754_pow+0x7d8>)
 80288aa:	0d52      	lsrs	r2, r2, #21
 80288ac:	1852      	adds	r2, r2, r1
 80288ae:	4114      	asrs	r4, r2
 80288b0:	401c      	ands	r4, r3
 80288b2:	0021      	movs	r1, r4
 80288b4:	2414      	movs	r4, #20
 80288b6:	031b      	lsls	r3, r3, #12
 80288b8:	0b1b      	lsrs	r3, r3, #12
 80288ba:	432b      	orrs	r3, r5
 80288bc:	1aa2      	subs	r2, r4, r2
 80288be:	4113      	asrs	r3, r2
 80288c0:	9300      	str	r3, [sp, #0]
 80288c2:	9b06      	ldr	r3, [sp, #24]
 80288c4:	2000      	movs	r0, #0
 80288c6:	2b00      	cmp	r3, #0
 80288c8:	da02      	bge.n	80288d0 <__ieee754_pow+0x7ac>
 80288ca:	9b00      	ldr	r3, [sp, #0]
 80288cc:	425b      	negs	r3, r3
 80288ce:	9300      	str	r3, [sp, #0]
 80288d0:	0002      	movs	r2, r0
 80288d2:	000b      	movs	r3, r1
 80288d4:	0030      	movs	r0, r6
 80288d6:	0039      	movs	r1, r7
 80288d8:	f7da f978 	bl	8002bcc <__aeabi_dsub>
 80288dc:	0006      	movs	r6, r0
 80288de:	000f      	movs	r7, r1
 80288e0:	e065      	b.n	80289ae <__ieee754_pow+0x88a>
 80288e2:	46c0      	nop			@ (mov r8, r8)
 80288e4:	7ff00000 	.word	0x7ff00000
 80288e8:	43400000 	.word	0x43400000
 80288ec:	fffffc01 	.word	0xfffffc01
 80288f0:	3ff00000 	.word	0x3ff00000
 80288f4:	0003988e 	.word	0x0003988e
 80288f8:	000bb679 	.word	0x000bb679
 80288fc:	fff00000 	.word	0xfff00000
 8028900:	0802dd00 	.word	0x0802dd00
 8028904:	4a454eef 	.word	0x4a454eef
 8028908:	3fca7e28 	.word	0x3fca7e28
 802890c:	93c9db65 	.word	0x93c9db65
 8028910:	3fcd864a 	.word	0x3fcd864a
 8028914:	a91d4101 	.word	0xa91d4101
 8028918:	3fd17460 	.word	0x3fd17460
 802891c:	518f264d 	.word	0x518f264d
 8028920:	3fd55555 	.word	0x3fd55555
 8028924:	db6fabff 	.word	0xdb6fabff
 8028928:	3fdb6db6 	.word	0x3fdb6db6
 802892c:	33333303 	.word	0x33333303
 8028930:	3fe33333 	.word	0x3fe33333
 8028934:	40080000 	.word	0x40080000
 8028938:	3feec709 	.word	0x3feec709
 802893c:	dc3a03fd 	.word	0xdc3a03fd
 8028940:	145b01f5 	.word	0x145b01f5
 8028944:	be3e2fe0 	.word	0xbe3e2fe0
 8028948:	0802dce0 	.word	0x0802dce0
 802894c:	0802dcf0 	.word	0x0802dcf0
 8028950:	652b82fe 	.word	0x652b82fe
 8028954:	3c971547 	.word	0x3c971547
 8028958:	fffffc02 	.word	0xfffffc02
 802895c:	9b01      	ldr	r3, [sp, #4]
 802895e:	005c      	lsls	r4, r3, #1
 8028960:	4b72      	ldr	r3, [pc, #456]	@ (8028b2c <__ieee754_pow+0xa08>)
 8028962:	0864      	lsrs	r4, r4, #1
 8028964:	429c      	cmp	r4, r3
 8028966:	d91c      	bls.n	80289a2 <__ieee754_pow+0x87e>
 8028968:	4a71      	ldr	r2, [pc, #452]	@ (8028b30 <__ieee754_pow+0xa0c>)
 802896a:	9b01      	ldr	r3, [sp, #4]
 802896c:	189b      	adds	r3, r3, r2
 802896e:	9a00      	ldr	r2, [sp, #0]
 8028970:	4313      	orrs	r3, r2
 8028972:	d008      	beq.n	8028986 <__ieee754_pow+0x862>
 8028974:	9808      	ldr	r0, [sp, #32]
 8028976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028978:	2300      	movs	r3, #0
 802897a:	2200      	movs	r2, #0
 802897c:	f7d7 fd9e 	bl	80004bc <__aeabi_dcmplt>
 8028980:	1e43      	subs	r3, r0, #1
 8028982:	4198      	sbcs	r0, r3
 8028984:	e4fc      	b.n	8028380 <__ieee754_pow+0x25c>
 8028986:	0032      	movs	r2, r6
 8028988:	9800      	ldr	r0, [sp, #0]
 802898a:	9901      	ldr	r1, [sp, #4]
 802898c:	003b      	movs	r3, r7
 802898e:	f7da f91d 	bl	8002bcc <__aeabi_dsub>
 8028992:	9a02      	ldr	r2, [sp, #8]
 8028994:	9b03      	ldr	r3, [sp, #12]
 8028996:	f7d7 fdaf 	bl	80004f8 <__aeabi_dcmpge>
 802899a:	2800      	cmp	r0, #0
 802899c:	d1ea      	bne.n	8028974 <__ieee754_pow+0x850>
 802899e:	4c65      	ldr	r4, [pc, #404]	@ (8028b34 <__ieee754_pow+0xa10>)
 80289a0:	e777      	b.n	8028892 <__ieee754_pow+0x76e>
 80289a2:	9a04      	ldr	r2, [sp, #16]
 80289a4:	4b64      	ldr	r3, [pc, #400]	@ (8028b38 <__ieee754_pow+0xa14>)
 80289a6:	9200      	str	r2, [sp, #0]
 80289a8:	429c      	cmp	r4, r3
 80289aa:	d900      	bls.n	80289ae <__ieee754_pow+0x88a>
 80289ac:	e771      	b.n	8028892 <__ieee754_pow+0x76e>
 80289ae:	9a02      	ldr	r2, [sp, #8]
 80289b0:	9b03      	ldr	r3, [sp, #12]
 80289b2:	0030      	movs	r0, r6
 80289b4:	0039      	movs	r1, r7
 80289b6:	f7d8 fe99 	bl	80016ec <__aeabi_dadd>
 80289ba:	2000      	movs	r0, #0
 80289bc:	2200      	movs	r2, #0
 80289be:	4b5f      	ldr	r3, [pc, #380]	@ (8028b3c <__ieee754_pow+0xa18>)
 80289c0:	9004      	str	r0, [sp, #16]
 80289c2:	9105      	str	r1, [sp, #20]
 80289c4:	f7d9 fe3a 	bl	800263c <__aeabi_dmul>
 80289c8:	0032      	movs	r2, r6
 80289ca:	003b      	movs	r3, r7
 80289cc:	9006      	str	r0, [sp, #24]
 80289ce:	9107      	str	r1, [sp, #28]
 80289d0:	9804      	ldr	r0, [sp, #16]
 80289d2:	9905      	ldr	r1, [sp, #20]
 80289d4:	f7da f8fa 	bl	8002bcc <__aeabi_dsub>
 80289d8:	0002      	movs	r2, r0
 80289da:	000b      	movs	r3, r1
 80289dc:	9802      	ldr	r0, [sp, #8]
 80289de:	9903      	ldr	r1, [sp, #12]
 80289e0:	f7da f8f4 	bl	8002bcc <__aeabi_dsub>
 80289e4:	4a56      	ldr	r2, [pc, #344]	@ (8028b40 <__ieee754_pow+0xa1c>)
 80289e6:	4b57      	ldr	r3, [pc, #348]	@ (8028b44 <__ieee754_pow+0xa20>)
 80289e8:	f7d9 fe28 	bl	800263c <__aeabi_dmul>
 80289ec:	4a56      	ldr	r2, [pc, #344]	@ (8028b48 <__ieee754_pow+0xa24>)
 80289ee:	0004      	movs	r4, r0
 80289f0:	000d      	movs	r5, r1
 80289f2:	9804      	ldr	r0, [sp, #16]
 80289f4:	9905      	ldr	r1, [sp, #20]
 80289f6:	4b55      	ldr	r3, [pc, #340]	@ (8028b4c <__ieee754_pow+0xa28>)
 80289f8:	f7d9 fe20 	bl	800263c <__aeabi_dmul>
 80289fc:	0002      	movs	r2, r0
 80289fe:	000b      	movs	r3, r1
 8028a00:	0020      	movs	r0, r4
 8028a02:	0029      	movs	r1, r5
 8028a04:	f7d8 fe72 	bl	80016ec <__aeabi_dadd>
 8028a08:	0004      	movs	r4, r0
 8028a0a:	000d      	movs	r5, r1
 8028a0c:	0002      	movs	r2, r0
 8028a0e:	000b      	movs	r3, r1
 8028a10:	9806      	ldr	r0, [sp, #24]
 8028a12:	9907      	ldr	r1, [sp, #28]
 8028a14:	f7d8 fe6a 	bl	80016ec <__aeabi_dadd>
 8028a18:	9a06      	ldr	r2, [sp, #24]
 8028a1a:	9b07      	ldr	r3, [sp, #28]
 8028a1c:	0006      	movs	r6, r0
 8028a1e:	000f      	movs	r7, r1
 8028a20:	f7da f8d4 	bl	8002bcc <__aeabi_dsub>
 8028a24:	0002      	movs	r2, r0
 8028a26:	000b      	movs	r3, r1
 8028a28:	0020      	movs	r0, r4
 8028a2a:	0029      	movs	r1, r5
 8028a2c:	f7da f8ce 	bl	8002bcc <__aeabi_dsub>
 8028a30:	0032      	movs	r2, r6
 8028a32:	9002      	str	r0, [sp, #8]
 8028a34:	9103      	str	r1, [sp, #12]
 8028a36:	003b      	movs	r3, r7
 8028a38:	0030      	movs	r0, r6
 8028a3a:	0039      	movs	r1, r7
 8028a3c:	f7d9 fdfe 	bl	800263c <__aeabi_dmul>
 8028a40:	0004      	movs	r4, r0
 8028a42:	000d      	movs	r5, r1
 8028a44:	4a42      	ldr	r2, [pc, #264]	@ (8028b50 <__ieee754_pow+0xa2c>)
 8028a46:	4b43      	ldr	r3, [pc, #268]	@ (8028b54 <__ieee754_pow+0xa30>)
 8028a48:	f7d9 fdf8 	bl	800263c <__aeabi_dmul>
 8028a4c:	4a42      	ldr	r2, [pc, #264]	@ (8028b58 <__ieee754_pow+0xa34>)
 8028a4e:	4b43      	ldr	r3, [pc, #268]	@ (8028b5c <__ieee754_pow+0xa38>)
 8028a50:	f7da f8bc 	bl	8002bcc <__aeabi_dsub>
 8028a54:	0022      	movs	r2, r4
 8028a56:	002b      	movs	r3, r5
 8028a58:	f7d9 fdf0 	bl	800263c <__aeabi_dmul>
 8028a5c:	4a40      	ldr	r2, [pc, #256]	@ (8028b60 <__ieee754_pow+0xa3c>)
 8028a5e:	4b41      	ldr	r3, [pc, #260]	@ (8028b64 <__ieee754_pow+0xa40>)
 8028a60:	f7d8 fe44 	bl	80016ec <__aeabi_dadd>
 8028a64:	0022      	movs	r2, r4
 8028a66:	002b      	movs	r3, r5
 8028a68:	f7d9 fde8 	bl	800263c <__aeabi_dmul>
 8028a6c:	4a3e      	ldr	r2, [pc, #248]	@ (8028b68 <__ieee754_pow+0xa44>)
 8028a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8028b6c <__ieee754_pow+0xa48>)
 8028a70:	f7da f8ac 	bl	8002bcc <__aeabi_dsub>
 8028a74:	0022      	movs	r2, r4
 8028a76:	002b      	movs	r3, r5
 8028a78:	f7d9 fde0 	bl	800263c <__aeabi_dmul>
 8028a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8028b70 <__ieee754_pow+0xa4c>)
 8028a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8028b74 <__ieee754_pow+0xa50>)
 8028a80:	f7d8 fe34 	bl	80016ec <__aeabi_dadd>
 8028a84:	0022      	movs	r2, r4
 8028a86:	002b      	movs	r3, r5
 8028a88:	f7d9 fdd8 	bl	800263c <__aeabi_dmul>
 8028a8c:	0002      	movs	r2, r0
 8028a8e:	000b      	movs	r3, r1
 8028a90:	0030      	movs	r0, r6
 8028a92:	0039      	movs	r1, r7
 8028a94:	f7da f89a 	bl	8002bcc <__aeabi_dsub>
 8028a98:	0004      	movs	r4, r0
 8028a9a:	000d      	movs	r5, r1
 8028a9c:	0002      	movs	r2, r0
 8028a9e:	000b      	movs	r3, r1
 8028aa0:	0030      	movs	r0, r6
 8028aa2:	0039      	movs	r1, r7
 8028aa4:	f7d9 fdca 	bl	800263c <__aeabi_dmul>
 8028aa8:	2380      	movs	r3, #128	@ 0x80
 8028aaa:	9004      	str	r0, [sp, #16]
 8028aac:	9105      	str	r1, [sp, #20]
 8028aae:	2200      	movs	r2, #0
 8028ab0:	0020      	movs	r0, r4
 8028ab2:	0029      	movs	r1, r5
 8028ab4:	05db      	lsls	r3, r3, #23
 8028ab6:	f7da f889 	bl	8002bcc <__aeabi_dsub>
 8028aba:	0002      	movs	r2, r0
 8028abc:	000b      	movs	r3, r1
 8028abe:	9804      	ldr	r0, [sp, #16]
 8028ac0:	9905      	ldr	r1, [sp, #20]
 8028ac2:	f7d9 f977 	bl	8001db4 <__aeabi_ddiv>
 8028ac6:	9a02      	ldr	r2, [sp, #8]
 8028ac8:	9b03      	ldr	r3, [sp, #12]
 8028aca:	0004      	movs	r4, r0
 8028acc:	000d      	movs	r5, r1
 8028ace:	0030      	movs	r0, r6
 8028ad0:	0039      	movs	r1, r7
 8028ad2:	f7d9 fdb3 	bl	800263c <__aeabi_dmul>
 8028ad6:	9a02      	ldr	r2, [sp, #8]
 8028ad8:	9b03      	ldr	r3, [sp, #12]
 8028ada:	f7d8 fe07 	bl	80016ec <__aeabi_dadd>
 8028ade:	0002      	movs	r2, r0
 8028ae0:	000b      	movs	r3, r1
 8028ae2:	0020      	movs	r0, r4
 8028ae4:	0029      	movs	r1, r5
 8028ae6:	f7da f871 	bl	8002bcc <__aeabi_dsub>
 8028aea:	0032      	movs	r2, r6
 8028aec:	003b      	movs	r3, r7
 8028aee:	f7da f86d 	bl	8002bcc <__aeabi_dsub>
 8028af2:	0002      	movs	r2, r0
 8028af4:	000b      	movs	r3, r1
 8028af6:	2000      	movs	r0, #0
 8028af8:	491f      	ldr	r1, [pc, #124]	@ (8028b78 <__ieee754_pow+0xa54>)
 8028afa:	f7da f867 	bl	8002bcc <__aeabi_dsub>
 8028afe:	9b00      	ldr	r3, [sp, #0]
 8028b00:	051b      	lsls	r3, r3, #20
 8028b02:	185b      	adds	r3, r3, r1
 8028b04:	151a      	asrs	r2, r3, #20
 8028b06:	2a00      	cmp	r2, #0
 8028b08:	dc06      	bgt.n	8028b18 <__ieee754_pow+0x9f4>
 8028b0a:	9a00      	ldr	r2, [sp, #0]
 8028b0c:	f000 f92a 	bl	8028d64 <scalbn>
 8028b10:	9a08      	ldr	r2, [sp, #32]
 8028b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028b14:	f7ff fbee 	bl	80282f4 <__ieee754_pow+0x1d0>
 8028b18:	0019      	movs	r1, r3
 8028b1a:	e7f9      	b.n	8028b10 <__ieee754_pow+0x9ec>
 8028b1c:	2300      	movs	r3, #0
 8028b1e:	4c16      	ldr	r4, [pc, #88]	@ (8028b78 <__ieee754_pow+0xa54>)
 8028b20:	f7ff fbcb 	bl	80282ba <__ieee754_pow+0x196>
 8028b24:	2300      	movs	r3, #0
 8028b26:	2400      	movs	r4, #0
 8028b28:	f7ff fbc7 	bl	80282ba <__ieee754_pow+0x196>
 8028b2c:	4090cbff 	.word	0x4090cbff
 8028b30:	3f6f3400 	.word	0x3f6f3400
 8028b34:	4090cc00 	.word	0x4090cc00
 8028b38:	3fe00000 	.word	0x3fe00000
 8028b3c:	3fe62e43 	.word	0x3fe62e43
 8028b40:	fefa39ef 	.word	0xfefa39ef
 8028b44:	3fe62e42 	.word	0x3fe62e42
 8028b48:	0ca86c39 	.word	0x0ca86c39
 8028b4c:	be205c61 	.word	0xbe205c61
 8028b50:	72bea4d0 	.word	0x72bea4d0
 8028b54:	3e663769 	.word	0x3e663769
 8028b58:	c5d26bf1 	.word	0xc5d26bf1
 8028b5c:	3ebbbd41 	.word	0x3ebbbd41
 8028b60:	af25de2c 	.word	0xaf25de2c
 8028b64:	3f11566a 	.word	0x3f11566a
 8028b68:	16bebd93 	.word	0x16bebd93
 8028b6c:	3f66c16c 	.word	0x3f66c16c
 8028b70:	5555553e 	.word	0x5555553e
 8028b74:	3fc55555 	.word	0x3fc55555
 8028b78:	3ff00000 	.word	0x3ff00000

08028b7c <fabs>:
 8028b7c:	0049      	lsls	r1, r1, #1
 8028b7e:	084b      	lsrs	r3, r1, #1
 8028b80:	0019      	movs	r1, r3
 8028b82:	4770      	bx	lr

08028b84 <__ieee754_expf>:
 8028b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028b86:	21ff      	movs	r1, #255	@ 0xff
 8028b88:	0043      	lsls	r3, r0, #1
 8028b8a:	1c04      	adds	r4, r0, #0
 8028b8c:	085b      	lsrs	r3, r3, #1
 8028b8e:	05c9      	lsls	r1, r1, #23
 8028b90:	428b      	cmp	r3, r1
 8028b92:	d904      	bls.n	8028b9e <__ieee754_expf+0x1a>
 8028b94:	1c01      	adds	r1, r0, #0
 8028b96:	1c20      	adds	r0, r4, #0
 8028b98:	f7d7 fe92 	bl	80008c0 <__aeabi_fadd>
 8028b9c:	e00d      	b.n	8028bba <__ieee754_expf+0x36>
 8028b9e:	0fc6      	lsrs	r6, r0, #31
 8028ba0:	428b      	cmp	r3, r1
 8028ba2:	d104      	bne.n	8028bae <__ieee754_expf+0x2a>
 8028ba4:	2e00      	cmp	r6, #0
 8028ba6:	d000      	beq.n	8028baa <__ieee754_expf+0x26>
 8028ba8:	e0ba      	b.n	8028d20 <__ieee754_expf+0x19c>
 8028baa:	1c20      	adds	r0, r4, #0
 8028bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028bae:	495d      	ldr	r1, [pc, #372]	@ (8028d24 <__ieee754_expf+0x1a0>)
 8028bb0:	4288      	cmp	r0, r1
 8028bb2:	dd04      	ble.n	8028bbe <__ieee754_expf+0x3a>
 8028bb4:	2000      	movs	r0, #0
 8028bb6:	f000 f98a 	bl	8028ece <__math_oflowf>
 8028bba:	1c04      	adds	r4, r0, #0
 8028bbc:	e7f5      	b.n	8028baa <__ieee754_expf+0x26>
 8028bbe:	2800      	cmp	r0, #0
 8028bc0:	da06      	bge.n	8028bd0 <__ieee754_expf+0x4c>
 8028bc2:	4a59      	ldr	r2, [pc, #356]	@ (8028d28 <__ieee754_expf+0x1a4>)
 8028bc4:	4293      	cmp	r3, r2
 8028bc6:	d903      	bls.n	8028bd0 <__ieee754_expf+0x4c>
 8028bc8:	2000      	movs	r0, #0
 8028bca:	f000 f97a 	bl	8028ec2 <__math_uflowf>
 8028bce:	e7f4      	b.n	8028bba <__ieee754_expf+0x36>
 8028bd0:	4a56      	ldr	r2, [pc, #344]	@ (8028d2c <__ieee754_expf+0x1a8>)
 8028bd2:	4293      	cmp	r3, r2
 8028bd4:	d96e      	bls.n	8028cb4 <__ieee754_expf+0x130>
 8028bd6:	4a56      	ldr	r2, [pc, #344]	@ (8028d30 <__ieee754_expf+0x1ac>)
 8028bd8:	00b5      	lsls	r5, r6, #2
 8028bda:	4293      	cmp	r3, r2
 8028bdc:	d84e      	bhi.n	8028c7c <__ieee754_expf+0xf8>
 8028bde:	4b55      	ldr	r3, [pc, #340]	@ (8028d34 <__ieee754_expf+0x1b0>)
 8028be0:	1c20      	adds	r0, r4, #0
 8028be2:	5959      	ldr	r1, [r3, r5]
 8028be4:	f7d8 fb1a 	bl	800121c <__aeabi_fsub>
 8028be8:	4b53      	ldr	r3, [pc, #332]	@ (8028d38 <__ieee754_expf+0x1b4>)
 8028bea:	1c07      	adds	r7, r0, #0
 8028bec:	595b      	ldr	r3, [r3, r5]
 8028bee:	2501      	movs	r5, #1
 8028bf0:	1bad      	subs	r5, r5, r6
 8028bf2:	9300      	str	r3, [sp, #0]
 8028bf4:	1bad      	subs	r5, r5, r6
 8028bf6:	9900      	ldr	r1, [sp, #0]
 8028bf8:	1c38      	adds	r0, r7, #0
 8028bfa:	f7d8 fb0f 	bl	800121c <__aeabi_fsub>
 8028bfe:	1c04      	adds	r4, r0, #0
 8028c00:	1c21      	adds	r1, r4, #0
 8028c02:	1c20      	adds	r0, r4, #0
 8028c04:	f7d8 f9cc 	bl	8000fa0 <__aeabi_fmul>
 8028c08:	494c      	ldr	r1, [pc, #304]	@ (8028d3c <__ieee754_expf+0x1b8>)
 8028c0a:	1c06      	adds	r6, r0, #0
 8028c0c:	f7d8 f9c8 	bl	8000fa0 <__aeabi_fmul>
 8028c10:	494b      	ldr	r1, [pc, #300]	@ (8028d40 <__ieee754_expf+0x1bc>)
 8028c12:	f7d8 fb03 	bl	800121c <__aeabi_fsub>
 8028c16:	1c31      	adds	r1, r6, #0
 8028c18:	f7d8 f9c2 	bl	8000fa0 <__aeabi_fmul>
 8028c1c:	4949      	ldr	r1, [pc, #292]	@ (8028d44 <__ieee754_expf+0x1c0>)
 8028c1e:	f7d7 fe4f 	bl	80008c0 <__aeabi_fadd>
 8028c22:	1c31      	adds	r1, r6, #0
 8028c24:	f7d8 f9bc 	bl	8000fa0 <__aeabi_fmul>
 8028c28:	4947      	ldr	r1, [pc, #284]	@ (8028d48 <__ieee754_expf+0x1c4>)
 8028c2a:	f7d8 faf7 	bl	800121c <__aeabi_fsub>
 8028c2e:	1c31      	adds	r1, r6, #0
 8028c30:	f7d8 f9b6 	bl	8000fa0 <__aeabi_fmul>
 8028c34:	4945      	ldr	r1, [pc, #276]	@ (8028d4c <__ieee754_expf+0x1c8>)
 8028c36:	f7d7 fe43 	bl	80008c0 <__aeabi_fadd>
 8028c3a:	1c31      	adds	r1, r6, #0
 8028c3c:	f7d8 f9b0 	bl	8000fa0 <__aeabi_fmul>
 8028c40:	1c01      	adds	r1, r0, #0
 8028c42:	1c20      	adds	r0, r4, #0
 8028c44:	f7d8 faea 	bl	800121c <__aeabi_fsub>
 8028c48:	1c01      	adds	r1, r0, #0
 8028c4a:	1c06      	adds	r6, r0, #0
 8028c4c:	1c20      	adds	r0, r4, #0
 8028c4e:	f7d8 f9a7 	bl	8000fa0 <__aeabi_fmul>
 8028c52:	9001      	str	r0, [sp, #4]
 8028c54:	2d00      	cmp	r5, #0
 8028c56:	d140      	bne.n	8028cda <__ieee754_expf+0x156>
 8028c58:	2180      	movs	r1, #128	@ 0x80
 8028c5a:	1c30      	adds	r0, r6, #0
 8028c5c:	05c9      	lsls	r1, r1, #23
 8028c5e:	f7d8 fadd 	bl	800121c <__aeabi_fsub>
 8028c62:	1c01      	adds	r1, r0, #0
 8028c64:	9801      	ldr	r0, [sp, #4]
 8028c66:	f7d7 ffb5 	bl	8000bd4 <__aeabi_fdiv>
 8028c6a:	1c21      	adds	r1, r4, #0
 8028c6c:	f7d8 fad6 	bl	800121c <__aeabi_fsub>
 8028c70:	1c01      	adds	r1, r0, #0
 8028c72:	20fe      	movs	r0, #254	@ 0xfe
 8028c74:	0580      	lsls	r0, r0, #22
 8028c76:	f7d8 fad1 	bl	800121c <__aeabi_fsub>
 8028c7a:	e79e      	b.n	8028bba <__ieee754_expf+0x36>
 8028c7c:	4934      	ldr	r1, [pc, #208]	@ (8028d50 <__ieee754_expf+0x1cc>)
 8028c7e:	1c20      	adds	r0, r4, #0
 8028c80:	f7d8 f98e 	bl	8000fa0 <__aeabi_fmul>
 8028c84:	4b33      	ldr	r3, [pc, #204]	@ (8028d54 <__ieee754_expf+0x1d0>)
 8028c86:	5959      	ldr	r1, [r3, r5]
 8028c88:	f7d7 fe1a 	bl	80008c0 <__aeabi_fadd>
 8028c8c:	f7d8 fc80 	bl	8001590 <__aeabi_f2iz>
 8028c90:	0005      	movs	r5, r0
 8028c92:	f7d8 fc9d 	bl	80015d0 <__aeabi_i2f>
 8028c96:	4930      	ldr	r1, [pc, #192]	@ (8028d58 <__ieee754_expf+0x1d4>)
 8028c98:	1c06      	adds	r6, r0, #0
 8028c9a:	f7d8 f981 	bl	8000fa0 <__aeabi_fmul>
 8028c9e:	1c01      	adds	r1, r0, #0
 8028ca0:	1c20      	adds	r0, r4, #0
 8028ca2:	f7d8 fabb 	bl	800121c <__aeabi_fsub>
 8028ca6:	492d      	ldr	r1, [pc, #180]	@ (8028d5c <__ieee754_expf+0x1d8>)
 8028ca8:	1c07      	adds	r7, r0, #0
 8028caa:	1c30      	adds	r0, r6, #0
 8028cac:	f7d8 f978 	bl	8000fa0 <__aeabi_fmul>
 8028cb0:	9000      	str	r0, [sp, #0]
 8028cb2:	e7a0      	b.n	8028bf6 <__ieee754_expf+0x72>
 8028cb4:	22d0      	movs	r2, #208	@ 0xd0
 8028cb6:	0592      	lsls	r2, r2, #22
 8028cb8:	4293      	cmp	r3, r2
 8028cba:	d20c      	bcs.n	8028cd6 <__ieee754_expf+0x152>
 8028cbc:	4928      	ldr	r1, [pc, #160]	@ (8028d60 <__ieee754_expf+0x1dc>)
 8028cbe:	1c20      	adds	r0, r4, #0
 8028cc0:	f7d7 fdfe 	bl	80008c0 <__aeabi_fadd>
 8028cc4:	21fe      	movs	r1, #254	@ 0xfe
 8028cc6:	0589      	lsls	r1, r1, #22
 8028cc8:	f7d7 fc46 	bl	8000558 <__aeabi_fcmpgt>
 8028ccc:	1e05      	subs	r5, r0, #0
 8028cce:	d097      	beq.n	8028c00 <__ieee754_expf+0x7c>
 8028cd0:	21fe      	movs	r1, #254	@ 0xfe
 8028cd2:	0589      	lsls	r1, r1, #22
 8028cd4:	e75f      	b.n	8028b96 <__ieee754_expf+0x12>
 8028cd6:	2500      	movs	r5, #0
 8028cd8:	e792      	b.n	8028c00 <__ieee754_expf+0x7c>
 8028cda:	2080      	movs	r0, #128	@ 0x80
 8028cdc:	1c31      	adds	r1, r6, #0
 8028cde:	05c0      	lsls	r0, r0, #23
 8028ce0:	f7d8 fa9c 	bl	800121c <__aeabi_fsub>
 8028ce4:	1c01      	adds	r1, r0, #0
 8028ce6:	9801      	ldr	r0, [sp, #4]
 8028ce8:	f7d7 ff74 	bl	8000bd4 <__aeabi_fdiv>
 8028cec:	1c01      	adds	r1, r0, #0
 8028cee:	9800      	ldr	r0, [sp, #0]
 8028cf0:	f7d8 fa94 	bl	800121c <__aeabi_fsub>
 8028cf4:	1c39      	adds	r1, r7, #0
 8028cf6:	f7d8 fa91 	bl	800121c <__aeabi_fsub>
 8028cfa:	1c01      	adds	r1, r0, #0
 8028cfc:	20fe      	movs	r0, #254	@ 0xfe
 8028cfe:	0580      	lsls	r0, r0, #22
 8028d00:	f7d8 fa8c 	bl	800121c <__aeabi_fsub>
 8028d04:	002b      	movs	r3, r5
 8028d06:	337d      	adds	r3, #125	@ 0x7d
 8028d08:	db02      	blt.n	8028d10 <__ieee754_expf+0x18c>
 8028d0a:	05ec      	lsls	r4, r5, #23
 8028d0c:	1824      	adds	r4, r4, r0
 8028d0e:	e74c      	b.n	8028baa <__ieee754_expf+0x26>
 8028d10:	21d8      	movs	r1, #216	@ 0xd8
 8028d12:	3564      	adds	r5, #100	@ 0x64
 8028d14:	05ed      	lsls	r5, r5, #23
 8028d16:	1828      	adds	r0, r5, r0
 8028d18:	0509      	lsls	r1, r1, #20
 8028d1a:	f7d8 f941 	bl	8000fa0 <__aeabi_fmul>
 8028d1e:	e74c      	b.n	8028bba <__ieee754_expf+0x36>
 8028d20:	2400      	movs	r4, #0
 8028d22:	e742      	b.n	8028baa <__ieee754_expf+0x26>
 8028d24:	42b17217 	.word	0x42b17217
 8028d28:	42cff1b5 	.word	0x42cff1b5
 8028d2c:	3eb17218 	.word	0x3eb17218
 8028d30:	3f851591 	.word	0x3f851591
 8028d34:	0802dd18 	.word	0x0802dd18
 8028d38:	0802dd10 	.word	0x0802dd10
 8028d3c:	3331bb4c 	.word	0x3331bb4c
 8028d40:	35ddea0e 	.word	0x35ddea0e
 8028d44:	388ab355 	.word	0x388ab355
 8028d48:	3b360b61 	.word	0x3b360b61
 8028d4c:	3e2aaaab 	.word	0x3e2aaaab
 8028d50:	3fb8aa3b 	.word	0x3fb8aa3b
 8028d54:	0802dd20 	.word	0x0802dd20
 8028d58:	3f317180 	.word	0x3f317180
 8028d5c:	3717f7d1 	.word	0x3717f7d1
 8028d60:	7149f2ca 	.word	0x7149f2ca

08028d64 <scalbn>:
 8028d64:	004b      	lsls	r3, r1, #1
 8028d66:	b570      	push	{r4, r5, r6, lr}
 8028d68:	0d5b      	lsrs	r3, r3, #21
 8028d6a:	0014      	movs	r4, r2
 8028d6c:	000d      	movs	r5, r1
 8028d6e:	2b00      	cmp	r3, #0
 8028d70:	d10f      	bne.n	8028d92 <scalbn+0x2e>
 8028d72:	004b      	lsls	r3, r1, #1
 8028d74:	085b      	lsrs	r3, r3, #1
 8028d76:	4303      	orrs	r3, r0
 8028d78:	d012      	beq.n	8028da0 <scalbn+0x3c>
 8028d7a:	4b23      	ldr	r3, [pc, #140]	@ (8028e08 <scalbn+0xa4>)
 8028d7c:	2200      	movs	r2, #0
 8028d7e:	f7d9 fc5d 	bl	800263c <__aeabi_dmul>
 8028d82:	4b22      	ldr	r3, [pc, #136]	@ (8028e0c <scalbn+0xa8>)
 8028d84:	429c      	cmp	r4, r3
 8028d86:	da0c      	bge.n	8028da2 <scalbn+0x3e>
 8028d88:	4a21      	ldr	r2, [pc, #132]	@ (8028e10 <scalbn+0xac>)
 8028d8a:	4b22      	ldr	r3, [pc, #136]	@ (8028e14 <scalbn+0xb0>)
 8028d8c:	f7d9 fc56 	bl	800263c <__aeabi_dmul>
 8028d90:	e006      	b.n	8028da0 <scalbn+0x3c>
 8028d92:	4a21      	ldr	r2, [pc, #132]	@ (8028e18 <scalbn+0xb4>)
 8028d94:	4293      	cmp	r3, r2
 8028d96:	d108      	bne.n	8028daa <scalbn+0x46>
 8028d98:	0002      	movs	r2, r0
 8028d9a:	000b      	movs	r3, r1
 8028d9c:	f7d8 fca6 	bl	80016ec <__aeabi_dadd>
 8028da0:	bd70      	pop	{r4, r5, r6, pc}
 8028da2:	000d      	movs	r5, r1
 8028da4:	004b      	lsls	r3, r1, #1
 8028da6:	0d5b      	lsrs	r3, r3, #21
 8028da8:	3b36      	subs	r3, #54	@ 0x36
 8028daa:	4a1c      	ldr	r2, [pc, #112]	@ (8028e1c <scalbn+0xb8>)
 8028dac:	4294      	cmp	r4, r2
 8028dae:	dd0a      	ble.n	8028dc6 <scalbn+0x62>
 8028db0:	4c1b      	ldr	r4, [pc, #108]	@ (8028e20 <scalbn+0xbc>)
 8028db2:	4d1c      	ldr	r5, [pc, #112]	@ (8028e24 <scalbn+0xc0>)
 8028db4:	2900      	cmp	r1, #0
 8028db6:	da01      	bge.n	8028dbc <scalbn+0x58>
 8028db8:	4c19      	ldr	r4, [pc, #100]	@ (8028e20 <scalbn+0xbc>)
 8028dba:	4d1b      	ldr	r5, [pc, #108]	@ (8028e28 <scalbn+0xc4>)
 8028dbc:	4a18      	ldr	r2, [pc, #96]	@ (8028e20 <scalbn+0xbc>)
 8028dbe:	4b19      	ldr	r3, [pc, #100]	@ (8028e24 <scalbn+0xc0>)
 8028dc0:	0020      	movs	r0, r4
 8028dc2:	0029      	movs	r1, r5
 8028dc4:	e7e2      	b.n	8028d8c <scalbn+0x28>
 8028dc6:	18e2      	adds	r2, r4, r3
 8028dc8:	4b18      	ldr	r3, [pc, #96]	@ (8028e2c <scalbn+0xc8>)
 8028dca:	429a      	cmp	r2, r3
 8028dcc:	dcf0      	bgt.n	8028db0 <scalbn+0x4c>
 8028dce:	2a00      	cmp	r2, #0
 8028dd0:	dd05      	ble.n	8028dde <scalbn+0x7a>
 8028dd2:	4b17      	ldr	r3, [pc, #92]	@ (8028e30 <scalbn+0xcc>)
 8028dd4:	0512      	lsls	r2, r2, #20
 8028dd6:	402b      	ands	r3, r5
 8028dd8:	431a      	orrs	r2, r3
 8028dda:	0011      	movs	r1, r2
 8028ddc:	e7e0      	b.n	8028da0 <scalbn+0x3c>
 8028dde:	0013      	movs	r3, r2
 8028de0:	3335      	adds	r3, #53	@ 0x35
 8028de2:	da08      	bge.n	8028df6 <scalbn+0x92>
 8028de4:	4c0a      	ldr	r4, [pc, #40]	@ (8028e10 <scalbn+0xac>)
 8028de6:	4d0b      	ldr	r5, [pc, #44]	@ (8028e14 <scalbn+0xb0>)
 8028de8:	2900      	cmp	r1, #0
 8028dea:	da01      	bge.n	8028df0 <scalbn+0x8c>
 8028dec:	4c08      	ldr	r4, [pc, #32]	@ (8028e10 <scalbn+0xac>)
 8028dee:	4d11      	ldr	r5, [pc, #68]	@ (8028e34 <scalbn+0xd0>)
 8028df0:	4a07      	ldr	r2, [pc, #28]	@ (8028e10 <scalbn+0xac>)
 8028df2:	4b08      	ldr	r3, [pc, #32]	@ (8028e14 <scalbn+0xb0>)
 8028df4:	e7e4      	b.n	8028dc0 <scalbn+0x5c>
 8028df6:	4b0e      	ldr	r3, [pc, #56]	@ (8028e30 <scalbn+0xcc>)
 8028df8:	3236      	adds	r2, #54	@ 0x36
 8028dfa:	401d      	ands	r5, r3
 8028dfc:	0512      	lsls	r2, r2, #20
 8028dfe:	432a      	orrs	r2, r5
 8028e00:	0011      	movs	r1, r2
 8028e02:	4b0d      	ldr	r3, [pc, #52]	@ (8028e38 <scalbn+0xd4>)
 8028e04:	2200      	movs	r2, #0
 8028e06:	e7c1      	b.n	8028d8c <scalbn+0x28>
 8028e08:	43500000 	.word	0x43500000
 8028e0c:	ffff3cb0 	.word	0xffff3cb0
 8028e10:	c2f8f359 	.word	0xc2f8f359
 8028e14:	01a56e1f 	.word	0x01a56e1f
 8028e18:	000007ff 	.word	0x000007ff
 8028e1c:	0000c350 	.word	0x0000c350
 8028e20:	8800759c 	.word	0x8800759c
 8028e24:	7e37e43c 	.word	0x7e37e43c
 8028e28:	fe37e43c 	.word	0xfe37e43c
 8028e2c:	000007fe 	.word	0x000007fe
 8028e30:	800fffff 	.word	0x800fffff
 8028e34:	81a56e1f 	.word	0x81a56e1f
 8028e38:	3c900000 	.word	0x3c900000

08028e3c <with_errno>:
 8028e3c:	b570      	push	{r4, r5, r6, lr}
 8028e3e:	000d      	movs	r5, r1
 8028e40:	0016      	movs	r6, r2
 8028e42:	0004      	movs	r4, r0
 8028e44:	f7fc f928 	bl	8025098 <__errno>
 8028e48:	0029      	movs	r1, r5
 8028e4a:	6006      	str	r6, [r0, #0]
 8028e4c:	0020      	movs	r0, r4
 8028e4e:	bd70      	pop	{r4, r5, r6, pc}

08028e50 <xflow>:
 8028e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028e52:	0014      	movs	r4, r2
 8028e54:	001d      	movs	r5, r3
 8028e56:	2800      	cmp	r0, #0
 8028e58:	d002      	beq.n	8028e60 <xflow+0x10>
 8028e5a:	2180      	movs	r1, #128	@ 0x80
 8028e5c:	0609      	lsls	r1, r1, #24
 8028e5e:	185b      	adds	r3, r3, r1
 8028e60:	9200      	str	r2, [sp, #0]
 8028e62:	9301      	str	r3, [sp, #4]
 8028e64:	9a00      	ldr	r2, [sp, #0]
 8028e66:	9b01      	ldr	r3, [sp, #4]
 8028e68:	0020      	movs	r0, r4
 8028e6a:	0029      	movs	r1, r5
 8028e6c:	f7d9 fbe6 	bl	800263c <__aeabi_dmul>
 8028e70:	2222      	movs	r2, #34	@ 0x22
 8028e72:	f7ff ffe3 	bl	8028e3c <with_errno>
 8028e76:	b003      	add	sp, #12
 8028e78:	bd30      	pop	{r4, r5, pc}

08028e7a <__math_uflow>:
 8028e7a:	2380      	movs	r3, #128	@ 0x80
 8028e7c:	b510      	push	{r4, lr}
 8028e7e:	2200      	movs	r2, #0
 8028e80:	055b      	lsls	r3, r3, #21
 8028e82:	f7ff ffe5 	bl	8028e50 <xflow>
 8028e86:	bd10      	pop	{r4, pc}

08028e88 <__math_oflow>:
 8028e88:	23e0      	movs	r3, #224	@ 0xe0
 8028e8a:	b510      	push	{r4, lr}
 8028e8c:	2200      	movs	r2, #0
 8028e8e:	05db      	lsls	r3, r3, #23
 8028e90:	f7ff ffde 	bl	8028e50 <xflow>
 8028e94:	bd10      	pop	{r4, pc}

08028e96 <with_errnof>:
 8028e96:	b570      	push	{r4, r5, r6, lr}
 8028e98:	000d      	movs	r5, r1
 8028e9a:	1c04      	adds	r4, r0, #0
 8028e9c:	f7fc f8fc 	bl	8025098 <__errno>
 8028ea0:	6005      	str	r5, [r0, #0]
 8028ea2:	1c20      	adds	r0, r4, #0
 8028ea4:	bd70      	pop	{r4, r5, r6, pc}

08028ea6 <xflowf>:
 8028ea6:	b510      	push	{r4, lr}
 8028ea8:	1c0b      	adds	r3, r1, #0
 8028eaa:	2800      	cmp	r0, #0
 8028eac:	d002      	beq.n	8028eb4 <xflowf+0xe>
 8028eae:	2380      	movs	r3, #128	@ 0x80
 8028eb0:	061b      	lsls	r3, r3, #24
 8028eb2:	18cb      	adds	r3, r1, r3
 8028eb4:	1c18      	adds	r0, r3, #0
 8028eb6:	f7d8 f873 	bl	8000fa0 <__aeabi_fmul>
 8028eba:	2122      	movs	r1, #34	@ 0x22
 8028ebc:	f7ff ffeb 	bl	8028e96 <with_errnof>
 8028ec0:	bd10      	pop	{r4, pc}

08028ec2 <__math_uflowf>:
 8028ec2:	2180      	movs	r1, #128	@ 0x80
 8028ec4:	b510      	push	{r4, lr}
 8028ec6:	0549      	lsls	r1, r1, #21
 8028ec8:	f7ff ffed 	bl	8028ea6 <xflowf>
 8028ecc:	bd10      	pop	{r4, pc}

08028ece <__math_oflowf>:
 8028ece:	21e0      	movs	r1, #224	@ 0xe0
 8028ed0:	b510      	push	{r4, lr}
 8028ed2:	05c9      	lsls	r1, r1, #23
 8028ed4:	f7ff ffe7 	bl	8028ea6 <xflowf>
 8028ed8:	bd10      	pop	{r4, pc}
	...

08028edc <__ieee754_sqrt>:
 8028edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ede:	000a      	movs	r2, r1
 8028ee0:	000d      	movs	r5, r1
 8028ee2:	496d      	ldr	r1, [pc, #436]	@ (8029098 <__ieee754_sqrt+0x1bc>)
 8028ee4:	0004      	movs	r4, r0
 8028ee6:	0003      	movs	r3, r0
 8028ee8:	0008      	movs	r0, r1
 8028eea:	b087      	sub	sp, #28
 8028eec:	4028      	ands	r0, r5
 8028eee:	4288      	cmp	r0, r1
 8028ef0:	d111      	bne.n	8028f16 <__ieee754_sqrt+0x3a>
 8028ef2:	0022      	movs	r2, r4
 8028ef4:	002b      	movs	r3, r5
 8028ef6:	0020      	movs	r0, r4
 8028ef8:	0029      	movs	r1, r5
 8028efa:	f7d9 fb9f 	bl	800263c <__aeabi_dmul>
 8028efe:	0002      	movs	r2, r0
 8028f00:	000b      	movs	r3, r1
 8028f02:	0020      	movs	r0, r4
 8028f04:	0029      	movs	r1, r5
 8028f06:	f7d8 fbf1 	bl	80016ec <__aeabi_dadd>
 8028f0a:	0004      	movs	r4, r0
 8028f0c:	000d      	movs	r5, r1
 8028f0e:	0020      	movs	r0, r4
 8028f10:	0029      	movs	r1, r5
 8028f12:	b007      	add	sp, #28
 8028f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f16:	2d00      	cmp	r5, #0
 8028f18:	dc11      	bgt.n	8028f3e <__ieee754_sqrt+0x62>
 8028f1a:	0069      	lsls	r1, r5, #1
 8028f1c:	0849      	lsrs	r1, r1, #1
 8028f1e:	4321      	orrs	r1, r4
 8028f20:	d0f5      	beq.n	8028f0e <__ieee754_sqrt+0x32>
 8028f22:	2000      	movs	r0, #0
 8028f24:	4285      	cmp	r5, r0
 8028f26:	d010      	beq.n	8028f4a <__ieee754_sqrt+0x6e>
 8028f28:	0022      	movs	r2, r4
 8028f2a:	002b      	movs	r3, r5
 8028f2c:	0020      	movs	r0, r4
 8028f2e:	0029      	movs	r1, r5
 8028f30:	f7d9 fe4c 	bl	8002bcc <__aeabi_dsub>
 8028f34:	0002      	movs	r2, r0
 8028f36:	000b      	movs	r3, r1
 8028f38:	f7d8 ff3c 	bl	8001db4 <__aeabi_ddiv>
 8028f3c:	e7e5      	b.n	8028f0a <__ieee754_sqrt+0x2e>
 8028f3e:	1528      	asrs	r0, r5, #20
 8028f40:	d115      	bne.n	8028f6e <__ieee754_sqrt+0x92>
 8028f42:	2480      	movs	r4, #128	@ 0x80
 8028f44:	2100      	movs	r1, #0
 8028f46:	0364      	lsls	r4, r4, #13
 8028f48:	e007      	b.n	8028f5a <__ieee754_sqrt+0x7e>
 8028f4a:	0ada      	lsrs	r2, r3, #11
 8028f4c:	3815      	subs	r0, #21
 8028f4e:	055b      	lsls	r3, r3, #21
 8028f50:	2a00      	cmp	r2, #0
 8028f52:	d0fa      	beq.n	8028f4a <__ieee754_sqrt+0x6e>
 8028f54:	e7f5      	b.n	8028f42 <__ieee754_sqrt+0x66>
 8028f56:	0052      	lsls	r2, r2, #1
 8028f58:	3101      	adds	r1, #1
 8028f5a:	4222      	tst	r2, r4
 8028f5c:	d0fb      	beq.n	8028f56 <__ieee754_sqrt+0x7a>
 8028f5e:	1e4c      	subs	r4, r1, #1
 8028f60:	1b00      	subs	r0, r0, r4
 8028f62:	2420      	movs	r4, #32
 8028f64:	001d      	movs	r5, r3
 8028f66:	1a64      	subs	r4, r4, r1
 8028f68:	40e5      	lsrs	r5, r4
 8028f6a:	408b      	lsls	r3, r1
 8028f6c:	432a      	orrs	r2, r5
 8028f6e:	494b      	ldr	r1, [pc, #300]	@ (802909c <__ieee754_sqrt+0x1c0>)
 8028f70:	0312      	lsls	r2, r2, #12
 8028f72:	1844      	adds	r4, r0, r1
 8028f74:	2180      	movs	r1, #128	@ 0x80
 8028f76:	0b12      	lsrs	r2, r2, #12
 8028f78:	0349      	lsls	r1, r1, #13
 8028f7a:	4311      	orrs	r1, r2
 8028f7c:	07c0      	lsls	r0, r0, #31
 8028f7e:	d403      	bmi.n	8028f88 <__ieee754_sqrt+0xac>
 8028f80:	0fda      	lsrs	r2, r3, #31
 8028f82:	0049      	lsls	r1, r1, #1
 8028f84:	1851      	adds	r1, r2, r1
 8028f86:	005b      	lsls	r3, r3, #1
 8028f88:	2500      	movs	r5, #0
 8028f8a:	1062      	asrs	r2, r4, #1
 8028f8c:	0049      	lsls	r1, r1, #1
 8028f8e:	2480      	movs	r4, #128	@ 0x80
 8028f90:	9205      	str	r2, [sp, #20]
 8028f92:	0fda      	lsrs	r2, r3, #31
 8028f94:	1852      	adds	r2, r2, r1
 8028f96:	2016      	movs	r0, #22
 8028f98:	0029      	movs	r1, r5
 8028f9a:	005b      	lsls	r3, r3, #1
 8028f9c:	03a4      	lsls	r4, r4, #14
 8028f9e:	190e      	adds	r6, r1, r4
 8028fa0:	4296      	cmp	r6, r2
 8028fa2:	dc02      	bgt.n	8028faa <__ieee754_sqrt+0xce>
 8028fa4:	1931      	adds	r1, r6, r4
 8028fa6:	1b92      	subs	r2, r2, r6
 8028fa8:	192d      	adds	r5, r5, r4
 8028faa:	0fde      	lsrs	r6, r3, #31
 8028fac:	0052      	lsls	r2, r2, #1
 8028fae:	3801      	subs	r0, #1
 8028fb0:	1992      	adds	r2, r2, r6
 8028fb2:	005b      	lsls	r3, r3, #1
 8028fb4:	0864      	lsrs	r4, r4, #1
 8028fb6:	2800      	cmp	r0, #0
 8028fb8:	d1f1      	bne.n	8028f9e <__ieee754_sqrt+0xc2>
 8028fba:	2620      	movs	r6, #32
 8028fbc:	2780      	movs	r7, #128	@ 0x80
 8028fbe:	0004      	movs	r4, r0
 8028fc0:	9604      	str	r6, [sp, #16]
 8028fc2:	063f      	lsls	r7, r7, #24
 8028fc4:	19c6      	adds	r6, r0, r7
 8028fc6:	46b4      	mov	ip, r6
 8028fc8:	4291      	cmp	r1, r2
 8028fca:	db02      	blt.n	8028fd2 <__ieee754_sqrt+0xf6>
 8028fcc:	d114      	bne.n	8028ff8 <__ieee754_sqrt+0x11c>
 8028fce:	429e      	cmp	r6, r3
 8028fd0:	d812      	bhi.n	8028ff8 <__ieee754_sqrt+0x11c>
 8028fd2:	4660      	mov	r0, ip
 8028fd4:	4666      	mov	r6, ip
 8028fd6:	19c0      	adds	r0, r0, r7
 8028fd8:	9100      	str	r1, [sp, #0]
 8028fda:	2e00      	cmp	r6, #0
 8028fdc:	da03      	bge.n	8028fe6 <__ieee754_sqrt+0x10a>
 8028fde:	43c6      	mvns	r6, r0
 8028fe0:	0ff6      	lsrs	r6, r6, #31
 8028fe2:	198e      	adds	r6, r1, r6
 8028fe4:	9600      	str	r6, [sp, #0]
 8028fe6:	1a52      	subs	r2, r2, r1
 8028fe8:	4563      	cmp	r3, ip
 8028fea:	4189      	sbcs	r1, r1
 8028fec:	4249      	negs	r1, r1
 8028fee:	1a52      	subs	r2, r2, r1
 8028ff0:	4661      	mov	r1, ip
 8028ff2:	1a5b      	subs	r3, r3, r1
 8028ff4:	9900      	ldr	r1, [sp, #0]
 8028ff6:	19e4      	adds	r4, r4, r7
 8028ff8:	0fde      	lsrs	r6, r3, #31
 8028ffa:	0052      	lsls	r2, r2, #1
 8028ffc:	1992      	adds	r2, r2, r6
 8028ffe:	9e04      	ldr	r6, [sp, #16]
 8029000:	005b      	lsls	r3, r3, #1
 8029002:	3e01      	subs	r6, #1
 8029004:	087f      	lsrs	r7, r7, #1
 8029006:	9604      	str	r6, [sp, #16]
 8029008:	2e00      	cmp	r6, #0
 802900a:	d1db      	bne.n	8028fc4 <__ieee754_sqrt+0xe8>
 802900c:	431a      	orrs	r2, r3
 802900e:	d01f      	beq.n	8029050 <__ieee754_sqrt+0x174>
 8029010:	4e23      	ldr	r6, [pc, #140]	@ (80290a0 <__ieee754_sqrt+0x1c4>)
 8029012:	4f24      	ldr	r7, [pc, #144]	@ (80290a4 <__ieee754_sqrt+0x1c8>)
 8029014:	6830      	ldr	r0, [r6, #0]
 8029016:	6871      	ldr	r1, [r6, #4]
 8029018:	683a      	ldr	r2, [r7, #0]
 802901a:	687b      	ldr	r3, [r7, #4]
 802901c:	9200      	str	r2, [sp, #0]
 802901e:	9301      	str	r3, [sp, #4]
 8029020:	6832      	ldr	r2, [r6, #0]
 8029022:	6873      	ldr	r3, [r6, #4]
 8029024:	9202      	str	r2, [sp, #8]
 8029026:	9303      	str	r3, [sp, #12]
 8029028:	9a00      	ldr	r2, [sp, #0]
 802902a:	9b01      	ldr	r3, [sp, #4]
 802902c:	f7d9 fdce 	bl	8002bcc <__aeabi_dsub>
 8029030:	0002      	movs	r2, r0
 8029032:	000b      	movs	r3, r1
 8029034:	9802      	ldr	r0, [sp, #8]
 8029036:	9903      	ldr	r1, [sp, #12]
 8029038:	f7d7 fa4a 	bl	80004d0 <__aeabi_dcmple>
 802903c:	2800      	cmp	r0, #0
 802903e:	d007      	beq.n	8029050 <__ieee754_sqrt+0x174>
 8029040:	6830      	ldr	r0, [r6, #0]
 8029042:	6871      	ldr	r1, [r6, #4]
 8029044:	683a      	ldr	r2, [r7, #0]
 8029046:	687b      	ldr	r3, [r7, #4]
 8029048:	1c67      	adds	r7, r4, #1
 802904a:	d10f      	bne.n	802906c <__ieee754_sqrt+0x190>
 802904c:	9c04      	ldr	r4, [sp, #16]
 802904e:	3501      	adds	r5, #1
 8029050:	4b15      	ldr	r3, [pc, #84]	@ (80290a8 <__ieee754_sqrt+0x1cc>)
 8029052:	106a      	asrs	r2, r5, #1
 8029054:	18d2      	adds	r2, r2, r3
 8029056:	0863      	lsrs	r3, r4, #1
 8029058:	07ed      	lsls	r5, r5, #31
 802905a:	d502      	bpl.n	8029062 <__ieee754_sqrt+0x186>
 802905c:	2180      	movs	r1, #128	@ 0x80
 802905e:	0609      	lsls	r1, r1, #24
 8029060:	430b      	orrs	r3, r1
 8029062:	9905      	ldr	r1, [sp, #20]
 8029064:	001c      	movs	r4, r3
 8029066:	0509      	lsls	r1, r1, #20
 8029068:	188d      	adds	r5, r1, r2
 802906a:	e750      	b.n	8028f0e <__ieee754_sqrt+0x32>
 802906c:	f7d8 fb3e 	bl	80016ec <__aeabi_dadd>
 8029070:	6877      	ldr	r7, [r6, #4]
 8029072:	6836      	ldr	r6, [r6, #0]
 8029074:	0002      	movs	r2, r0
 8029076:	000b      	movs	r3, r1
 8029078:	0030      	movs	r0, r6
 802907a:	0039      	movs	r1, r7
 802907c:	f7d7 fa1e 	bl	80004bc <__aeabi_dcmplt>
 8029080:	2800      	cmp	r0, #0
 8029082:	d004      	beq.n	802908e <__ieee754_sqrt+0x1b2>
 8029084:	3402      	adds	r4, #2
 8029086:	4263      	negs	r3, r4
 8029088:	4163      	adcs	r3, r4
 802908a:	18ed      	adds	r5, r5, r3
 802908c:	e7e0      	b.n	8029050 <__ieee754_sqrt+0x174>
 802908e:	2301      	movs	r3, #1
 8029090:	3401      	adds	r4, #1
 8029092:	439c      	bics	r4, r3
 8029094:	e7dc      	b.n	8029050 <__ieee754_sqrt+0x174>
 8029096:	46c0      	nop			@ (mov r8, r8)
 8029098:	7ff00000 	.word	0x7ff00000
 802909c:	fffffc01 	.word	0xfffffc01
 80290a0:	20000440 	.word	0x20000440
 80290a4:	20000438 	.word	0x20000438
 80290a8:	3fe00000 	.word	0x3fe00000

080290ac <_init>:
 80290ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290ae:	46c0      	nop			@ (mov r8, r8)
 80290b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80290b2:	bc08      	pop	{r3}
 80290b4:	469e      	mov	lr, r3
 80290b6:	4770      	bx	lr

080290b8 <_fini>:
 80290b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290ba:	46c0      	nop			@ (mov r8, r8)
 80290bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80290be:	bc08      	pop	{r3}
 80290c0:	469e      	mov	lr, r3
 80290c2:	4770      	bx	lr
