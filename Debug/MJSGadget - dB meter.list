
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023098  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e90  08023158  08023158  00024158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025fe8  08025fe8  0002742c  2**0
                  CONTENTS
  4 .ARM          00000008  08025fe8  08025fe8  00026fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025ff0  08025ff0  0002742c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025ff0  08025ff0  00026ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025ff4  08025ff4  00026ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000042c  20000000  08025ff8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000338c  2000042c  08026424  0002742c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200037b8  08026424  000277b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002742c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033fb4  00000000  00000000  00027454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009355  00000000  00000000  0005b408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab8  00000000  00000000  00064760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fb1  00000000  00000000  00067218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229be  00000000  00000000  000691c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041896  00000000  00000000  0008bb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0585  00000000  00000000  000cd41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016d9a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae1c  00000000  00000000  0016da54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00178870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  001788dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017ae59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000042c 	.word	0x2000042c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023140 	.word	0x08023140

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000430 	.word	0x20000430
 8000104:	08023140 	.word	0x08023140

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08025200 	.word	0x08025200
 8000e0c:	08025240 	.word	0x08025240
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802527c 	.word	0x0802527c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fbac 	bl	800fdc0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fc03 	bl	800fe90 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fbb6 	bl	800fe1c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000448 	.word	0x20000448

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fb32 	bl	800fdc0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fb61 	bl	800fe38 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fb45 	bl	800fe1c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000028 	.word	0x20000028

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b facc 	bl	800ed54 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a28 	.word	0x20000a28

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd82 	bl	80062e0 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fddf 	bl	80063a4 <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	2000057c 	.word	0x2000057c
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000580 	.word	0x20000580

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a34 	.word	0x20000a34
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a40 	.word	0x20000a40
 8003884:	20000a44 	.word	0x20000a44

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a48 	.word	0x20000a48
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a68 	.word	0x20000a68
 80038f0:	20000a6c 	.word	0x20000a6c

080038f4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <ESP_GetHT+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <ESP_GetHT+0x24>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000574 	.word	0x20000574
 8003918:	20000578 	.word	0x20000578

0800391c <setHIDS>:
void setHIDS(float temp, float humid){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <setHIDS+0x20>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <setHIDS+0x24>)
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000574 	.word	0x20000574
 8003940:	20000578 	.word	0x20000578

08003944 <setVOC>:
void setVOC(uint16_t voc){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	0002      	movs	r2, r0
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <setVOC+0x1c>)
 8003952:	1dba      	adds	r2, r7, #6
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	801a      	strh	r2, [r3, #0]
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000584 	.word	0x20000584

08003964 <setMic>:
void setMic(float dB){
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <setMic+0x18>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	20000588 	.word	0x20000588

08003980 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe1a 	bl	80015d0 <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	490d      	ldr	r1, [pc, #52]	@ (80039d4 <setPMsen50+0x54>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd f917 	bl	8000bd4 <__aeabi_fdiv>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <setPMsen50+0x58>)
 80039ac:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fe0c 	bl	80015d0 <__aeabi_i2f>
 80039b8:	1c03      	adds	r3, r0, #0
 80039ba:	4906      	ldr	r1, [pc, #24]	@ (80039d4 <setPMsen50+0x54>)
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7fd f909 	bl	8000bd4 <__aeabi_fdiv>
 80039c2:	1c03      	adds	r3, r0, #0
 80039c4:	1c1a      	adds	r2, r3, #0
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <setPMsen50+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	41200000 	.word	0x41200000
 80039d8:	2000058c 	.word	0x2000058c
 80039dc:	20000590 	.word	0x20000590

080039e0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0005      	movs	r5, r0
 80039e8:	000c      	movs	r4, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c2a      	adds	r2, r5, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fd fde0 	bl	80015d0 <__aeabi_i2f>
 8003a10:	1c03      	adds	r3, r0, #0
 8003a12:	491d      	ldr	r1, [pc, #116]	@ (8003a88 <setPMs+0xa8>)
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7fd f8dd 	bl	8000bd4 <__aeabi_fdiv>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	1c1a      	adds	r2, r3, #0
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <setPMs+0xac>)
 8003a20:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fd fdd2 	bl	80015d0 <__aeabi_i2f>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <setPMs+0xa8>)
 8003a30:	1c18      	adds	r0, r3, #0
 8003a32:	f7fd f8cf 	bl	8000bd4 <__aeabi_fdiv>
 8003a36:	1c03      	adds	r3, r0, #0
 8003a38:	1c1a      	adds	r2, r3, #0
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <setPMs+0xb0>)
 8003a3c:	601a      	str	r2, [r3, #0]
  VOCIndex = voc / 10.0f;
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fd fdc4 	bl	80015d0 <__aeabi_i2f>
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	490f      	ldr	r1, [pc, #60]	@ (8003a88 <setPMs+0xa8>)
 8003a4c:	1c18      	adds	r0, r3, #0
 8003a4e:	f7fd f8c1 	bl	8000bd4 <__aeabi_fdiv>
 8003a52:	1c03      	adds	r3, r0, #0
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	f7fc fde1 	bl	800061c <__aeabi_f2uiz>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <setPMs+0xb4>)
 8003a60:	801a      	strh	r2, [r3, #0]
  airNOx = nox / 10.0f;
 8003a62:	003b      	movs	r3, r7
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fd fdb2 	bl	80015d0 <__aeabi_i2f>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	4906      	ldr	r1, [pc, #24]	@ (8003a88 <setPMs+0xa8>)
 8003a70:	1c18      	adds	r0, r3, #0
 8003a72:	f7fd f8af 	bl	8000bd4 <__aeabi_fdiv>
 8003a76:	1c03      	adds	r3, r0, #0
 8003a78:	1c1a      	adds	r2, r3, #0
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <setPMs+0xb8>)
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	41200000 	.word	0x41200000
 8003a8c:	2000058c 	.word	0x2000058c
 8003a90:	20000590 	.word	0x20000590
 8003a94:	20000584 	.word	0x20000584
 8003a98:	20000594 	.word	0x20000594

08003a9c <SetConfigMode>:

void SetConfigMode(){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <SetConfigMode+0x18>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003aa6:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <SetConfigMode+0x1c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	20000557 	.word	0x20000557
 8003ab8:	200001fb 	.word	0x200001fb

08003abc <GetReconfigMode>:

bool GetReconfigMode() {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003ac0:	4b02      	ldr	r3, [pc, #8]	@ (8003acc <GetReconfigMode+0x10>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	20000557 	.word	0x20000557

08003ad0 <ESP_GetUID>:

void ESP_GetUID(){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003ad4:	f00b f988 	bl	800ede8 <HAL_GetUIDw0>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <ESP_GetUID+0x28>)
 8003adc:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003ade:	f00b f98d 	bl	800edfc <HAL_GetUIDw1>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <ESP_GetUID+0x28>)
 8003ae6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003ae8:	f00b f992 	bl	800ee10 <HAL_GetUIDw2>
 8003aec:	0002      	movs	r2, r0
 8003aee:	4b02      	ldr	r3, [pc, #8]	@ (8003af8 <ESP_GetUID+0x28>)
 8003af0:	609a      	str	r2, [r3, #8]
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000560 	.word	0x20000560

08003afc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003b04:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <ESP_Init+0x2c>)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <ESP_Init+0x30>)
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003b10:	f7ff ffde 	bl	8003ad0 <ESP_GetUID>
  beurs = checkEEprom();
 8003b14:	f7ff fe82 	bl	800381c <checkEEprom>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <ESP_Init+0x34>)
 8003b1e:	701a      	strb	r2, [r3, #0]
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	2000044c 	.word	0x2000044c
 8003b2c:	20000030 	.word	0x20000030
 8003b30:	2000055a 	.word	0x2000055a

08003b34 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	000a      	movs	r2, r1
 8003b3e:	1cbb      	adds	r3, r7, #2
 8003b40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b42:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <ESP_Send+0x54>)
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	250f      	movs	r5, #15
 8003b48:	197c      	adds	r4, r7, r5
 8003b4a:	1cbb      	adds	r3, r7, #2
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0019      	movs	r1, r3
 8003b52:	f013 fc29 	bl	80173a8 <HAL_UART_Transmit_DMA>
 8003b56:	0003      	movs	r3, r0
 8003b58:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b5a:	197b      	adds	r3, r7, r5
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b62:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <ESP_Send+0x58>)
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <ESP_Send+0x5c>)
 8003b66:	0019      	movs	r1, r3
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f00a fcad 	bl	800e4c8 <CreateLine>
    return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e006      	b.n	8003b80 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a07      	ldr	r2, [pc, #28]	@ (8003b94 <ESP_Send+0x60>)
 8003b76:	4908      	ldr	r1, [pc, #32]	@ (8003b98 <ESP_Send+0x64>)
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f00a fca5 	bl	800e4c8 <CreateLine>
#endif
  return true;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b004      	add	sp, #16
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	2000044c 	.word	0x2000044c
 8003b8c:	08023158 	.word	0x08023158
 8003b90:	08023178 	.word	0x08023178
 8003b94:	0802317c 	.word	0x0802317c
 8003b98:	0802318c 	.word	0x0802318c

08003b9c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	000a      	movs	r2, r1
 8003ba6:	1cbb      	adds	r3, r7, #2
 8003ba8:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003baa:	4b45      	ldr	r3, [pc, #276]	@ (8003cc0 <ESP_Receive+0x124>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003bb0:	260f      	movs	r6, #15
 8003bb2:	19bb      	adds	r3, r7, r6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003bb8:	4b42      	ldr	r3, [pc, #264]	@ (8003cc4 <ESP_Receive+0x128>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	250e      	movs	r5, #14
 8003bbe:	197c      	adds	r4, r7, r5
 8003bc0:	1cbb      	adds	r3, r7, #2
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	f013 fc7e 	bl	80174c8 <HAL_UART_Receive_DMA>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003bd0:	002c      	movs	r4, r5
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d100      	bne.n	8003bdc <ESP_Receive+0x40>
 8003bda:	e06c      	b.n	8003cb6 <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bdc:	4b39      	ldr	r3, [pc, #228]	@ (8003cc4 <ESP_Receive+0x128>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2284      	movs	r2, #132	@ 0x84
 8003be2:	589b      	ldr	r3, [r3, r2]
 8003be4:	4a38      	ldr	r2, [pc, #224]	@ (8003cc8 <ESP_Receive+0x12c>)
 8003be6:	4939      	ldr	r1, [pc, #228]	@ (8003ccc <ESP_Receive+0x130>)
 8003be8:	2001      	movs	r0, #1
 8003bea:	f00a fc6d 	bl	800e4c8 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d008      	beq.n	8003c0a <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003bf8:	4a35      	ldr	r2, [pc, #212]	@ (8003cd0 <ESP_Receive+0x134>)
 8003bfa:	4b34      	ldr	r3, [pc, #208]	@ (8003ccc <ESP_Receive+0x130>)
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f00a fc62 	bl	800e4c8 <CreateLine>
      reset = true;
 8003c04:	19bb      	adds	r3, r7, r6
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003c0a:	230e      	movs	r3, #14
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d005      	beq.n	8003c22 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003c16:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd4 <ESP_Receive+0x138>)
 8003c18:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <ESP_Receive+0x130>)
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f00a fc53 	bl	800e4c8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c22:	230e      	movs	r3, #14
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d005      	beq.n	8003c3a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <ESP_Receive+0x13c>)
 8003c30:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <ESP_Receive+0x130>)
 8003c32:	0019      	movs	r1, r3
 8003c34:	2001      	movs	r0, #1
 8003c36:	f00a fc47 	bl	800e4c8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c3a:	230e      	movs	r3, #14
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	4013      	ands	r3, r2
 8003c44:	d005      	beq.n	8003c52 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c46:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <ESP_Receive+0x140>)
 8003c48:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <ESP_Receive+0x130>)
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f00a fc3b 	bl	800e4c8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c52:	230e      	movs	r3, #14
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d005      	beq.n	8003c6a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c5e:	4a20      	ldr	r2, [pc, #128]	@ (8003ce0 <ESP_Receive+0x144>)
 8003c60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <ESP_Receive+0x130>)
 8003c62:	0019      	movs	r1, r3
 8003c64:	2001      	movs	r0, #1
 8003c66:	f00a fc2f 	bl	800e4c8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c6a:	230e      	movs	r3, #14
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2220      	movs	r2, #32
 8003c72:	4013      	ands	r3, r2
 8003c74:	d005      	beq.n	8003c82 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <ESP_Receive+0x148>)
 8003c78:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <ESP_Receive+0x130>)
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f00a fc23 	bl	800e4c8 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c82:	230e      	movs	r3, #14
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2240      	movs	r2, #64	@ 0x40
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d005      	beq.n	8003c9a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ce8 <ESP_Receive+0x14c>)
 8003c90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <ESP_Receive+0x130>)
 8003c92:	0019      	movs	r1, r3
 8003c94:	2001      	movs	r0, #1
 8003c96:	f00a fc17 	bl	800e4c8 <CreateLine>
    }
#endif
    if (reset) {
 8003c9a:	230f      	movs	r3, #15
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <ESP_Receive+0x110>
      SetAllREDLED();
 8003ca4:	f009 fc96 	bl	800d5d4 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003ca8:	f00b fd1d 	bl	800f6e6 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <ESP_Receive+0x124>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
    return false;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <ESP_Receive+0x11c>
  }
  return true;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b005      	add	sp, #20
 8003cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc0:	20000450 	.word	0x20000450
 8003cc4:	2000044c 	.word	0x2000044c
 8003cc8:	08023190 	.word	0x08023190
 8003ccc:	08023178 	.word	0x08023178
 8003cd0:	080231c0 	.word	0x080231c0
 8003cd4:	080231e4 	.word	0x080231e4
 8003cd8:	08023208 	.word	0x08023208
 8003cdc:	0802322c 	.word	0x0802322c
 8003ce0:	08023250 	.word	0x08023250
 8003ce4:	0802327c 	.word	0x0802327c
 8003ce8:	080232ac 	.word	0x080232ac

08003cec <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_UART_ErrorCallback+0x34>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d10c      	bne.n	8003d18 <HAL_UART_ErrorCallback+0x2c>
    if (huart->ErrorCode != 4) {
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2284      	movs	r2, #132	@ 0x84
 8003d02:	589b      	ldr	r3, [r3, r2]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d007      	beq.n	8003d18 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2284      	movs	r2, #132	@ 0x84
 8003d0c:	589b      	ldr	r3, [r3, r2]
 8003d0e:	4a05      	ldr	r2, [pc, #20]	@ (8003d24 <HAL_UART_ErrorCallback+0x38>)
 8003d10:	4905      	ldr	r1, [pc, #20]	@ (8003d28 <HAL_UART_ErrorCallback+0x3c>)
 8003d12:	2003      	movs	r0, #3
 8003d14:	f00a fbd8 	bl	800e4c8 <CreateLine>
    }
  }
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2000044c 	.word	0x2000044c
 8003d24:	080232dc 	.word	0x080232dc
 8003d28:	0802318c 	.word	0x0802318c

08003d2c <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e010      	b.n	8003d5e <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	001a      	movs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1898      	adds	r0, r3, r2
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	18d3      	adds	r3, r2, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	001a      	movs	r2, r3
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <uint8ArrayToString+0x44>)
 8003d52:	0019      	movs	r1, r3
 8003d54:	f01c f912 	bl	801ff7c <siprintf>
  for (int i = 0; i < 12; i++)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b0b      	cmp	r3, #11
 8003d62:	ddeb      	ble.n	8003d3c <uint8ArrayToString+0x10>
  }
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	08023308 	.word	0x08023308

08003d74 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b089      	sub	sp, #36	@ 0x24
 8003d78:	af04      	add	r7, sp, #16
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	1dfb      	adds	r3, r7, #7
 8003d7e:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d80:	4bd8      	ldr	r3, [pc, #864]	@ (80040e4 <CreateMessage+0x370>)
 8003d82:	48d9      	ldr	r0, [pc, #868]	@ (80040e8 <CreateMessage+0x374>)
 8003d84:	220c      	movs	r2, #12
 8003d86:	0019      	movs	r1, r3
 8003d88:	f7ff fcb6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d8c:	4bd7      	ldr	r3, [pc, #860]	@ (80040ec <CreateMessage+0x378>)
 8003d8e:	48d8      	ldr	r0, [pc, #864]	@ (80040f0 <CreateMessage+0x37c>)
 8003d90:	220c      	movs	r2, #12
 8003d92:	0019      	movs	r1, r3
 8003d94:	f7ff fcb0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d98:	4bd6      	ldr	r3, [pc, #856]	@ (80040f4 <CreateMessage+0x380>)
 8003d9a:	48d7      	ldr	r0, [pc, #860]	@ (80040f8 <CreateMessage+0x384>)
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	0019      	movs	r1, r3
 8003da0:	f7ff fcaa 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003da4:	4bd5      	ldr	r3, [pc, #852]	@ (80040fc <CreateMessage+0x388>)
 8003da6:	48d6      	ldr	r0, [pc, #856]	@ (8004100 <CreateMessage+0x38c>)
 8003da8:	220c      	movs	r2, #12
 8003daa:	0019      	movs	r1, r3
 8003dac:	f7ff fca4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003db0:	4bd4      	ldr	r3, [pc, #848]	@ (8004104 <CreateMessage+0x390>)
 8003db2:	48d5      	ldr	r0, [pc, #852]	@ (8004108 <CreateMessage+0x394>)
 8003db4:	220c      	movs	r2, #12
 8003db6:	0019      	movs	r1, r3
 8003db8:	f7ff fc9e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dbc:	4bd3      	ldr	r3, [pc, #844]	@ (800410c <CreateMessage+0x398>)
 8003dbe:	48d4      	ldr	r0, [pc, #848]	@ (8004110 <CreateMessage+0x39c>)
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	f7ff fc98 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003dc8:	4bd2      	ldr	r3, [pc, #840]	@ (8004114 <CreateMessage+0x3a0>)
 8003dca:	48d3      	ldr	r0, [pc, #844]	@ (8004118 <CreateMessage+0x3a4>)
 8003dcc:	220c      	movs	r2, #12
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f7ff fc92 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003dd4:	4bd1      	ldr	r3, [pc, #836]	@ (800411c <CreateMessage+0x3a8>)
 8003dd6:	48d2      	ldr	r0, [pc, #840]	@ (8004120 <CreateMessage+0x3ac>)
 8003dd8:	220c      	movs	r2, #12
 8003dda:	0019      	movs	r1, r3
 8003ddc:	f7ff fc8c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003de0:	4bd0      	ldr	r3, [pc, #832]	@ (8004124 <CreateMessage+0x3b0>)
 8003de2:	48d1      	ldr	r0, [pc, #836]	@ (8004128 <CreateMessage+0x3b4>)
 8003de4:	220c      	movs	r2, #12
 8003de6:	0019      	movs	r1, r3
 8003de8:	f7ff fc86 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003dec:	f7ff fd4c 	bl	8003888 <checkName>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d006      	beq.n	8003e02 <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003df4:	4bcd      	ldr	r3, [pc, #820]	@ (800412c <CreateMessage+0x3b8>)
 8003df6:	48ce      	ldr	r0, [pc, #824]	@ (8004130 <CreateMessage+0x3bc>)
 8003df8:	221e      	movs	r2, #30
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	f7ff fc7c 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e00:	e005      	b.n	8003e0e <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e02:	4bca      	ldr	r3, [pc, #808]	@ (800412c <CreateMessage+0x3b8>)
 8003e04:	4acb      	ldr	r2, [pc, #812]	@ (8004134 <CreateMessage+0x3c0>)
 8003e06:	6811      	ldr	r1, [r2, #0]
 8003e08:	6019      	str	r1, [r3, #0]
 8003e0a:	7912      	ldrb	r2, [r2, #4]
 8003e0c:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e0e:	f7ff fce1 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e12:	2390      	movs	r3, #144	@ 0x90
 8003e14:	00da      	lsls	r2, r3, #3
 8003e16:	4bc8      	ldr	r3, [pc, #800]	@ (8004138 <CreateMessage+0x3c4>)
 8003e18:	2100      	movs	r1, #0
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f01c f9f2 	bl	8020204 <memset>
  uint16_t index = 0;
 8003e20:	260e      	movs	r6, #14
 8003e22:	19bb      	adds	r3, r7, r6
 8003e24:	2200      	movs	r2, #0
 8003e26:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	4bc2      	ldr	r3, [pc, #776]	@ (8004138 <CreateMessage+0x3c4>)
 8003e2e:	18d3      	adds	r3, r2, r3
 8003e30:	4ac2      	ldr	r2, [pc, #776]	@ (800413c <CreateMessage+0x3c8>)
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f01c f8a1 	bl	801ff7c <siprintf>
  index = strlen(message);
 8003e3a:	4bbf      	ldr	r3, [pc, #764]	@ (8004138 <CreateMessage+0x3c4>)
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fc f995 	bl	800016c <strlen>
 8003e42:	0002      	movs	r2, r0
 8003e44:	19bb      	adds	r3, r7, r6
 8003e46:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e48:	4aa6      	ldr	r2, [pc, #664]	@ (80040e4 <CreateMessage+0x370>)
 8003e4a:	4bbd      	ldr	r3, [pc, #756]	@ (8004140 <CreateMessage+0x3cc>)
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff ff6c 	bl	8003d2c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003e54:	19bb      	adds	r3, r7, r6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	4bb7      	ldr	r3, [pc, #732]	@ (8004138 <CreateMessage+0x3c4>)
 8003e5a:	18d4      	adds	r4, r2, r3
 8003e5c:	4bb9      	ldr	r3, [pc, #740]	@ (8004144 <CreateMessage+0x3d0>)
 8003e5e:	689d      	ldr	r5, [r3, #8]
 8003e60:	4bb9      	ldr	r3, [pc, #740]	@ (8004148 <CreateMessage+0x3d4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c18      	adds	r0, r3, #0
 8003e66:	f7ff fafd 	bl	8003464 <__aeabi_f2d>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	48af      	ldr	r0, [pc, #700]	@ (800412c <CreateMessage+0x3b8>)
 8003e70:	49b6      	ldr	r1, [pc, #728]	@ (800414c <CreateMessage+0x3d8>)
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	9303      	str	r3, [sp, #12]
 8003e76:	4bb2      	ldr	r3, [pc, #712]	@ (8004140 <CreateMessage+0x3cc>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	002a      	movs	r2, r5
 8003e7e:	0020      	movs	r0, r4
 8003e80:	f01c f87c 	bl	801ff7c <siprintf>
  index = strlen(message);
 8003e84:	4bac      	ldr	r3, [pc, #688]	@ (8004138 <CreateMessage+0x3c4>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc f970 	bl	800016c <strlen>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	19bb      	adds	r3, r7, r6
 8003e90:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003e92:	4a96      	ldr	r2, [pc, #600]	@ (80040ec <CreateMessage+0x378>)
 8003e94:	4baa      	ldr	r3, [pc, #680]	@ (8004140 <CreateMessage+0x3cc>)
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff ff47 	bl	8003d2c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003e9e:	19bb      	adds	r3, r7, r6
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	4ba5      	ldr	r3, [pc, #660]	@ (8004138 <CreateMessage+0x3c4>)
 8003ea4:	18d4      	adds	r4, r2, r3
 8003ea6:	4ba7      	ldr	r3, [pc, #668]	@ (8004144 <CreateMessage+0x3d0>)
 8003ea8:	689d      	ldr	r5, [r3, #8]
 8003eaa:	4ba9      	ldr	r3, [pc, #676]	@ (8004150 <CreateMessage+0x3dc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f7ff fad8 	bl	8003464 <__aeabi_f2d>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	000b      	movs	r3, r1
 8003eb8:	489c      	ldr	r0, [pc, #624]	@ (800412c <CreateMessage+0x3b8>)
 8003eba:	49a6      	ldr	r1, [pc, #664]	@ (8004154 <CreateMessage+0x3e0>)
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	4b9f      	ldr	r3, [pc, #636]	@ (8004140 <CreateMessage+0x3cc>)
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	002a      	movs	r2, r5
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f01c f857 	bl	801ff7c <siprintf>
  index = strlen(message);
 8003ece:	4b9a      	ldr	r3, [pc, #616]	@ (8004138 <CreateMessage+0x3c4>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7fc f94b 	bl	800016c <strlen>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003edc:	4a85      	ldr	r2, [pc, #532]	@ (80040f4 <CreateMessage+0x380>)
 8003ede:	4b98      	ldr	r3, [pc, #608]	@ (8004140 <CreateMessage+0x3cc>)
 8003ee0:	0011      	movs	r1, r2
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff ff22 	bl	8003d2c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003ee8:	19bb      	adds	r3, r7, r6
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	4b92      	ldr	r3, [pc, #584]	@ (8004138 <CreateMessage+0x3c4>)
 8003eee:	18d4      	adds	r4, r2, r3
 8003ef0:	4b94      	ldr	r3, [pc, #592]	@ (8004144 <CreateMessage+0x3d0>)
 8003ef2:	689d      	ldr	r5, [r3, #8]
 8003ef4:	4b98      	ldr	r3, [pc, #608]	@ (8004158 <CreateMessage+0x3e4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c18      	adds	r0, r3, #0
 8003efa:	f7ff fab3 	bl	8003464 <__aeabi_f2d>
 8003efe:	0002      	movs	r2, r0
 8003f00:	000b      	movs	r3, r1
 8003f02:	488a      	ldr	r0, [pc, #552]	@ (800412c <CreateMessage+0x3b8>)
 8003f04:	4995      	ldr	r1, [pc, #596]	@ (800415c <CreateMessage+0x3e8>)
 8003f06:	9202      	str	r2, [sp, #8]
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004140 <CreateMessage+0x3cc>)
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	0003      	movs	r3, r0
 8003f10:	002a      	movs	r2, r5
 8003f12:	0020      	movs	r0, r4
 8003f14:	f01c f832 	bl	801ff7c <siprintf>
  index = strlen(message);
 8003f18:	4b87      	ldr	r3, [pc, #540]	@ (8004138 <CreateMessage+0x3c4>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fc f926 	bl	800016c <strlen>
 8003f20:	0002      	movs	r2, r0
 8003f22:	19bb      	adds	r3, r7, r6
 8003f24:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f26:	4a75      	ldr	r2, [pc, #468]	@ (80040fc <CreateMessage+0x388>)
 8003f28:	4b85      	ldr	r3, [pc, #532]	@ (8004140 <CreateMessage+0x3cc>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff fefd 	bl	8003d2c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003f32:	19bb      	adds	r3, r7, r6
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	4b80      	ldr	r3, [pc, #512]	@ (8004138 <CreateMessage+0x3c4>)
 8003f38:	18d0      	adds	r0, r2, r3
 8003f3a:	4b82      	ldr	r3, [pc, #520]	@ (8004144 <CreateMessage+0x3d0>)
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <CreateMessage+0x3ec>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	4c7a      	ldr	r4, [pc, #488]	@ (800412c <CreateMessage+0x3b8>)
 8003f44:	4987      	ldr	r1, [pc, #540]	@ (8004164 <CreateMessage+0x3f0>)
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <CreateMessage+0x3cc>)
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	0023      	movs	r3, r4
 8003f4e:	f01c f815 	bl	801ff7c <siprintf>
  index = strlen(message);
 8003f52:	4b79      	ldr	r3, [pc, #484]	@ (8004138 <CreateMessage+0x3c4>)
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fc f909 	bl	800016c <strlen>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	19bb      	adds	r3, r7, r6
 8003f5e:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4053      	eors	r3, r2
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d100      	bne.n	8003f70 <CreateMessage+0x1fc>
 8003f6e:	e10f      	b.n	8004190 <CreateMessage+0x41c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f70:	4a64      	ldr	r2, [pc, #400]	@ (8004104 <CreateMessage+0x390>)
 8003f72:	4b73      	ldr	r3, [pc, #460]	@ (8004140 <CreateMessage+0x3cc>)
 8003f74:	0011      	movs	r1, r2
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff fed8 	bl	8003d2c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f7c:	19bb      	adds	r3, r7, r6
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	4b6d      	ldr	r3, [pc, #436]	@ (8004138 <CreateMessage+0x3c4>)
 8003f82:	18d4      	adds	r4, r2, r3
 8003f84:	4b6f      	ldr	r3, [pc, #444]	@ (8004144 <CreateMessage+0x3d0>)
 8003f86:	689d      	ldr	r5, [r3, #8]
 8003f88:	4b77      	ldr	r3, [pc, #476]	@ (8004168 <CreateMessage+0x3f4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1c18      	adds	r0, r3, #0
 8003f8e:	f7ff fa69 	bl	8003464 <__aeabi_f2d>
 8003f92:	0002      	movs	r2, r0
 8003f94:	000b      	movs	r3, r1
 8003f96:	4865      	ldr	r0, [pc, #404]	@ (800412c <CreateMessage+0x3b8>)
 8003f98:	4974      	ldr	r1, [pc, #464]	@ (800416c <CreateMessage+0x3f8>)
 8003f9a:	9202      	str	r2, [sp, #8]
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <CreateMessage+0x3cc>)
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	002a      	movs	r2, r5
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	f01b ffe8 	bl	801ff7c <siprintf>
    index = strlen(message);
 8003fac:	4b62      	ldr	r3, [pc, #392]	@ (8004138 <CreateMessage+0x3c4>)
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7fc f8dc 	bl	800016c <strlen>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	19bb      	adds	r3, r7, r6
 8003fb8:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003fba:	4a54      	ldr	r2, [pc, #336]	@ (800410c <CreateMessage+0x398>)
 8003fbc:	4b60      	ldr	r3, [pc, #384]	@ (8004140 <CreateMessage+0x3cc>)
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff feb3 	bl	8003d2c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003fc6:	19bb      	adds	r3, r7, r6
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	4b5b      	ldr	r3, [pc, #364]	@ (8004138 <CreateMessage+0x3c4>)
 8003fcc:	18d4      	adds	r4, r2, r3
 8003fce:	4b5d      	ldr	r3, [pc, #372]	@ (8004144 <CreateMessage+0x3d0>)
 8003fd0:	689d      	ldr	r5, [r3, #8]
 8003fd2:	4b67      	ldr	r3, [pc, #412]	@ (8004170 <CreateMessage+0x3fc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	1c18      	adds	r0, r3, #0
 8003fd8:	f7ff fa44 	bl	8003464 <__aeabi_f2d>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	000b      	movs	r3, r1
 8003fe0:	4852      	ldr	r0, [pc, #328]	@ (800412c <CreateMessage+0x3b8>)
 8003fe2:	4964      	ldr	r1, [pc, #400]	@ (8004174 <CreateMessage+0x400>)
 8003fe4:	9202      	str	r2, [sp, #8]
 8003fe6:	9303      	str	r3, [sp, #12]
 8003fe8:	4b55      	ldr	r3, [pc, #340]	@ (8004140 <CreateMessage+0x3cc>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0003      	movs	r3, r0
 8003fee:	002a      	movs	r2, r5
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	f01b ffc3 	bl	801ff7c <siprintf>
    index = strlen(message);
 8003ff6:	4b50      	ldr	r3, [pc, #320]	@ (8004138 <CreateMessage+0x3c4>)
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fc f8b7 	bl	800016c <strlen>
 8003ffe:	0002      	movs	r2, r0
 8004000:	19bb      	adds	r3, r7, r6
 8004002:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 8004004:	4a43      	ldr	r2, [pc, #268]	@ (8004114 <CreateMessage+0x3a0>)
 8004006:	4b4e      	ldr	r3, [pc, #312]	@ (8004140 <CreateMessage+0x3cc>)
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff fe8e 	bl	8003d2c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 8004010:	19bb      	adds	r3, r7, r6
 8004012:	881a      	ldrh	r2, [r3, #0]
 8004014:	4b48      	ldr	r3, [pc, #288]	@ (8004138 <CreateMessage+0x3c4>)
 8004016:	18d4      	adds	r4, r2, r3
 8004018:	4b4a      	ldr	r3, [pc, #296]	@ (8004144 <CreateMessage+0x3d0>)
 800401a:	689d      	ldr	r5, [r3, #8]
 800401c:	4b56      	ldr	r3, [pc, #344]	@ (8004178 <CreateMessage+0x404>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1c18      	adds	r0, r3, #0
 8004022:	f7ff fa1f 	bl	8003464 <__aeabi_f2d>
 8004026:	0002      	movs	r2, r0
 8004028:	000b      	movs	r3, r1
 800402a:	4840      	ldr	r0, [pc, #256]	@ (800412c <CreateMessage+0x3b8>)
 800402c:	4953      	ldr	r1, [pc, #332]	@ (800417c <CreateMessage+0x408>)
 800402e:	9202      	str	r2, [sp, #8]
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	4b43      	ldr	r3, [pc, #268]	@ (8004140 <CreateMessage+0x3cc>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	0003      	movs	r3, r0
 8004038:	002a      	movs	r2, r5
 800403a:	0020      	movs	r0, r4
 800403c:	f01b ff9e 	bl	801ff7c <siprintf>
    index = strlen(message);
 8004040:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <CreateMessage+0x3c4>)
 8004042:	0018      	movs	r0, r3
 8004044:	f7fc f892 	bl	800016c <strlen>
 8004048:	0002      	movs	r2, r0
 800404a:	19bb      	adds	r3, r7, r6
 800404c:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 800404e:	4a33      	ldr	r2, [pc, #204]	@ (800411c <CreateMessage+0x3a8>)
 8004050:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <CreateMessage+0x3cc>)
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fe69 	bl	8003d2c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 800405a:	19bb      	adds	r3, r7, r6
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	4b36      	ldr	r3, [pc, #216]	@ (8004138 <CreateMessage+0x3c4>)
 8004060:	18d4      	adds	r4, r2, r3
 8004062:	4b38      	ldr	r3, [pc, #224]	@ (8004144 <CreateMessage+0x3d0>)
 8004064:	689d      	ldr	r5, [r3, #8]
 8004066:	4b46      	ldr	r3, [pc, #280]	@ (8004180 <CreateMessage+0x40c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1c18      	adds	r0, r3, #0
 800406c:	f7ff f9fa 	bl	8003464 <__aeabi_f2d>
 8004070:	0002      	movs	r2, r0
 8004072:	000b      	movs	r3, r1
 8004074:	482d      	ldr	r0, [pc, #180]	@ (800412c <CreateMessage+0x3b8>)
 8004076:	4943      	ldr	r1, [pc, #268]	@ (8004184 <CreateMessage+0x410>)
 8004078:	9202      	str	r2, [sp, #8]
 800407a:	9303      	str	r3, [sp, #12]
 800407c:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <CreateMessage+0x3cc>)
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0003      	movs	r3, r0
 8004082:	002a      	movs	r2, r5
 8004084:	0020      	movs	r0, r4
 8004086:	f01b ff79 	bl	801ff7c <siprintf>
    index = strlen(message);
 800408a:	4b2b      	ldr	r3, [pc, #172]	@ (8004138 <CreateMessage+0x3c4>)
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc f86d 	bl	800016c <strlen>
 8004092:	0002      	movs	r2, r0
 8004094:	19bb      	adds	r3, r7, r6
 8004096:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8004098:	4a22      	ldr	r2, [pc, #136]	@ (8004124 <CreateMessage+0x3b0>)
 800409a:	4b29      	ldr	r3, [pc, #164]	@ (8004140 <CreateMessage+0x3cc>)
 800409c:	0011      	movs	r1, r2
 800409e:	0018      	movs	r0, r3
 80040a0:	f7ff fe44 	bl	8003d2c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 80040a4:	19bb      	adds	r3, r7, r6
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <CreateMessage+0x3c4>)
 80040aa:	18d4      	adds	r4, r2, r3
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <CreateMessage+0x3d0>)
 80040ae:	689d      	ldr	r5, [r3, #8]
 80040b0:	4b35      	ldr	r3, [pc, #212]	@ (8004188 <CreateMessage+0x414>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1c18      	adds	r0, r3, #0
 80040b6:	f7ff f9d5 	bl	8003464 <__aeabi_f2d>
 80040ba:	0002      	movs	r2, r0
 80040bc:	000b      	movs	r3, r1
 80040be:	481b      	ldr	r0, [pc, #108]	@ (800412c <CreateMessage+0x3b8>)
 80040c0:	4932      	ldr	r1, [pc, #200]	@ (800418c <CreateMessage+0x418>)
 80040c2:	9202      	str	r2, [sp, #8]
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <CreateMessage+0x3cc>)
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	0003      	movs	r3, r0
 80040cc:	002a      	movs	r2, r5
 80040ce:	0020      	movs	r0, r4
 80040d0:	f01b ff54 	bl	801ff7c <siprintf>
    index = strlen(message);
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <CreateMessage+0x3c4>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc f848 	bl	800016c <strlen>
 80040dc:	0002      	movs	r2, r0
 80040de:	19bb      	adds	r3, r7, r6
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	e07b      	b.n	80041dc <CreateMessage+0x468>
 80040e4:	20000a70 	.word	0x20000a70
 80040e8:	0808000c 	.word	0x0808000c
 80040ec:	20000a7c 	.word	0x20000a7c
 80040f0:	08080018 	.word	0x08080018
 80040f4:	20000a88 	.word	0x20000a88
 80040f8:	08080048 	.word	0x08080048
 80040fc:	20000a94 	.word	0x20000a94
 8004100:	08080030 	.word	0x08080030
 8004104:	20000aa0 	.word	0x20000aa0
 8004108:	0808006c 	.word	0x0808006c
 800410c:	20000aac 	.word	0x20000aac
 8004110:	08080078 	.word	0x08080078
 8004114:	20000ab8 	.word	0x20000ab8
 8004118:	08080024 	.word	0x08080024
 800411c:	20000ac4 	.word	0x20000ac4
 8004120:	08080054 	.word	0x08080054
 8004124:	20000ad0 	.word	0x20000ad0
 8004128:	08080060 	.word	0x08080060
 800412c:	20000adc 	.word	0x20000adc
 8004130:	08080090 	.word	0x08080090
 8004134:	080252dc 	.word	0x080252dc
 8004138:	20000598 	.word	0x20000598
 800413c:	08023310 	.word	0x08023310
 8004140:	20000afc 	.word	0x20000afc
 8004144:	20000560 	.word	0x20000560
 8004148:	20000574 	.word	0x20000574
 800414c:	08023314 	.word	0x08023314
 8004150:	20000578 	.word	0x20000578
 8004154:	08023368 	.word	0x08023368
 8004158:	20000588 	.word	0x20000588
 800415c:	080233c0 	.word	0x080233c0
 8004160:	20000584 	.word	0x20000584
 8004164:	0802341c 	.word	0x0802341c
 8004168:	2000057c 	.word	0x2000057c
 800416c:	08023470 	.word	0x08023470
 8004170:	20000580 	.word	0x20000580
 8004174:	080234d0 	.word	0x080234d0
 8004178:	20000594 	.word	0x20000594
 800417c:	08023530 	.word	0x08023530
 8004180:	2000058c 	.word	0x2000058c
 8004184:	08023588 	.word	0x08023588
 8004188:	20000590 	.word	0x20000590
 800418c:	080235e4 	.word	0x080235e4

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004190:	4a21      	ldr	r2, [pc, #132]	@ (8004218 <CreateMessage+0x4a4>)
 8004192:	4b22      	ldr	r3, [pc, #136]	@ (800421c <CreateMessage+0x4a8>)
 8004194:	0011      	movs	r1, r2
 8004196:	0018      	movs	r0, r3
 8004198:	f7ff fdc8 	bl	8003d2c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800419c:	260e      	movs	r6, #14
 800419e:	19bb      	adds	r3, r7, r6
 80041a0:	881a      	ldrh	r2, [r3, #0]
 80041a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <CreateMessage+0x4ac>)
 80041a4:	18d4      	adds	r4, r2, r3
 80041a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004224 <CreateMessage+0x4b0>)
 80041a8:	689d      	ldr	r5, [r3, #8]
 80041aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <CreateMessage+0x4b4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7ff f958 	bl	8003464 <__aeabi_f2d>
 80041b4:	0002      	movs	r2, r0
 80041b6:	000b      	movs	r3, r1
 80041b8:	481c      	ldr	r0, [pc, #112]	@ (800422c <CreateMessage+0x4b8>)
 80041ba:	491d      	ldr	r1, [pc, #116]	@ (8004230 <CreateMessage+0x4bc>)
 80041bc:	9202      	str	r2, [sp, #8]
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	4b16      	ldr	r3, [pc, #88]	@ (800421c <CreateMessage+0x4a8>)
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	0003      	movs	r3, r0
 80041c6:	002a      	movs	r2, r5
 80041c8:	0020      	movs	r0, r4
 80041ca:	f01b fed7 	bl	801ff7c <siprintf>
    index = strlen(message);
 80041ce:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <CreateMessage+0x4ac>)
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7fb ffcb 	bl	800016c <strlen>
 80041d6:	0002      	movs	r2, r0
 80041d8:	19bb      	adds	r3, r7, r6
 80041da:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 80041dc:	230e      	movs	r3, #14
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <CreateMessage+0x4ac>)
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	4a13      	ldr	r2, [pc, #76]	@ (8004234 <CreateMessage+0x4c0>)
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f01b fec6 	bl	801ff7c <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <CreateMessage+0x4ac>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7fb ffba 	bl	800016c <strlen>
 80041f8:	0003      	movs	r3, r0
 80041fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004238 <CreateMessage+0x4c4>)
 80041fc:	490f      	ldr	r1, [pc, #60]	@ (800423c <CreateMessage+0x4c8>)
 80041fe:	2003      	movs	r0, #3
 8004200:	f00a f962 	bl	800e4c8 <CreateLine>
  return strlen(message);
 8004204:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <CreateMessage+0x4ac>)
 8004206:	0018      	movs	r0, r3
 8004208:	f7fb ffb0 	bl	800016c <strlen>
 800420c:	0003      	movs	r3, r0
 800420e:	b29b      	uxth	r3, r3
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b005      	add	sp, #20
 8004216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004218:	20000aa0 	.word	0x20000aa0
 800421c:	20000afc 	.word	0x20000afc
 8004220:	20000598 	.word	0x20000598
 8004224:	20000560 	.word	0x20000560
 8004228:	2000057c 	.word	0x2000057c
 800422c:	20000adc 	.word	0x20000adc
 8004230:	0802363c 	.word	0x0802363c
 8004234:	08023694 	.word	0x08023694
 8004238:	08023698 	.word	0x08023698
 800423c:	0802318c 	.word	0x0802318c

08004240 <StartProg>:

void StartProg(){
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004244:	2064      	movs	r0, #100	@ 0x64
 8004246:	f00a fd8f 	bl	800ed68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <StartProg+0x60>)
 800424c:	2200      	movs	r2, #0
 800424e:	2101      	movs	r1, #1
 8004250:	0018      	movs	r0, r3
 8004252:	f00c f810 	bl	8010276 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004256:	2064      	movs	r0, #100	@ 0x64
 8004258:	f00a fd86 	bl	800ed68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800425c:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <StartProg+0x60>)
 800425e:	2200      	movs	r2, #0
 8004260:	2102      	movs	r1, #2
 8004262:	0018      	movs	r0, r3
 8004264:	f00c f807 	bl	8010276 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004268:	23fa      	movs	r3, #250	@ 0xfa
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	0018      	movs	r0, r3
 800426e:	f00a fd7b 	bl	800ed68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <StartProg+0x60>)
 8004274:	2201      	movs	r2, #1
 8004276:	2101      	movs	r1, #1
 8004278:	0018      	movs	r0, r3
 800427a:	f00b fffc 	bl	8010276 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800427e:	23fa      	movs	r3, #250	@ 0xfa
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	0018      	movs	r0, r3
 8004284:	f00a fd70 	bl	800ed68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <StartProg+0x60>)
 800428a:	2201      	movs	r2, #1
 800428c:	2102      	movs	r1, #2
 800428e:	0018      	movs	r0, r3
 8004290:	f00b fff1 	bl	8010276 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004294:	2028      	movs	r0, #40	@ 0x28
 8004296:	f00a fd67 	bl	800ed68 <HAL_Delay>
}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	50001c00 	.word	0x50001c00

080042a4 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	b0d9      	sub	sp, #356	@ 0x164
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	0008      	movs	r0, r1
 80042ae:	0011      	movs	r1, r2
 80042b0:	4ba4      	ldr	r3, [pc, #656]	@ (8004544 <ParseBuffer+0x2a0>)
 80042b2:	24b0      	movs	r4, #176	@ 0xb0
 80042b4:	0064      	lsls	r4, r4, #1
 80042b6:	191b      	adds	r3, r3, r4
 80042b8:	19db      	adds	r3, r3, r7
 80042ba:	1c02      	adds	r2, r0, #0
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	4ba2      	ldr	r3, [pc, #648]	@ (8004548 <ParseBuffer+0x2a4>)
 80042c0:	191b      	adds	r3, r3, r4
 80042c2:	19db      	adds	r3, r3, r7
 80042c4:	1c0a      	adds	r2, r1, #0
 80042c6:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80042c8:	2380      	movs	r3, #128	@ 0x80
 80042ca:	005a      	lsls	r2, r3, #1
 80042cc:	2348      	movs	r3, #72	@ 0x48
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2100      	movs	r1, #0
 80042d2:	0018      	movs	r0, r3
 80042d4:	f01b ff96 	bl	8020204 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80042d8:	2360      	movs	r3, #96	@ 0x60
 80042da:	33ff      	adds	r3, #255	@ 0xff
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	2203      	movs	r2, #3
 80042e0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80042e2:	23ae      	movs	r3, #174	@ 0xae
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e013      	b.n	8004316 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80042ee:	20ae      	movs	r0, #174	@ 0xae
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	183b      	adds	r3, r7, r0
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	18d2      	adds	r2, r2, r3
 80042fa:	183b      	adds	r3, r7, r0
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	7811      	ldrb	r1, [r2, #0]
 8004300:	4a92      	ldr	r2, [pc, #584]	@ (800454c <ParseBuffer+0x2a8>)
 8004302:	24b0      	movs	r4, #176	@ 0xb0
 8004304:	0064      	lsls	r4, r4, #1
 8004306:	1912      	adds	r2, r2, r4
 8004308:	19d2      	adds	r2, r2, r7
 800430a:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 800430c:	183b      	adds	r3, r7, r0
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	183b      	adds	r3, r7, r0
 8004312:	3201      	adds	r2, #1
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	23ae      	movs	r3, #174	@ 0xae
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	18fa      	adds	r2, r7, r3
 800431c:	4b89      	ldr	r3, [pc, #548]	@ (8004544 <ParseBuffer+0x2a0>)
 800431e:	21b0      	movs	r1, #176	@ 0xb0
 8004320:	0049      	lsls	r1, r1, #1
 8004322:	185b      	adds	r3, r3, r1
 8004324:	19db      	adds	r3, r3, r7
 8004326:	8812      	ldrh	r2, [r2, #0]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d3df      	bcc.n	80042ee <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800432e:	4b85      	ldr	r3, [pc, #532]	@ (8004544 <ParseBuffer+0x2a0>)
 8004330:	185b      	adds	r3, r3, r1
 8004332:	19db      	adds	r3, r3, r7
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	4a85      	ldr	r2, [pc, #532]	@ (800454c <ParseBuffer+0x2a8>)
 8004338:	1852      	adds	r2, r2, r1
 800433a:	19d2      	adds	r2, r2, r7
 800433c:	2100      	movs	r1, #0
 800433e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004340:	f00a f93c 	bl	800e5bc <GetVerboseLevel>
 8004344:	0003      	movs	r3, r0
 8004346:	2b03      	cmp	r3, #3
 8004348:	d106      	bne.n	8004358 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800434a:	2348      	movs	r3, #72	@ 0x48
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	4a80      	ldr	r2, [pc, #512]	@ (8004550 <ParseBuffer+0x2ac>)
 8004350:	4980      	ldr	r1, [pc, #512]	@ (8004554 <ParseBuffer+0x2b0>)
 8004352:	2003      	movs	r0, #3
 8004354:	f00a f8b8 	bl	800e4c8 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	26ac      	movs	r6, #172	@ 0xac
 800435c:	0076      	lsls	r6, r6, #1
 800435e:	19ba      	adds	r2, r7, r6
 8004360:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004362:	4b7d      	ldr	r3, [pc, #500]	@ (8004558 <ParseBuffer+0x2b4>)
 8004364:	25b0      	movs	r5, #176	@ 0xb0
 8004366:	006d      	lsls	r5, r5, #1
 8004368:	195b      	adds	r3, r3, r5
 800436a:	19db      	adds	r3, r3, r7
 800436c:	4a7b      	ldr	r2, [pc, #492]	@ (800455c <ParseBuffer+0x2b8>)
 800436e:	8811      	ldrh	r1, [r2, #0]
 8004370:	8019      	strh	r1, [r3, #0]
 8004372:	7892      	ldrb	r2, [r2, #2]
 8004374:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004376:	4b7a      	ldr	r3, [pc, #488]	@ (8004560 <ParseBuffer+0x2bc>)
 8004378:	195b      	adds	r3, r3, r5
 800437a:	19db      	adds	r3, r3, r7
 800437c:	4a79      	ldr	r2, [pc, #484]	@ (8004564 <ParseBuffer+0x2c0>)
 800437e:	6811      	ldr	r1, [r2, #0]
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	8892      	ldrh	r2, [r2, #4]
 8004384:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004386:	4b78      	ldr	r3, [pc, #480]	@ (8004568 <ParseBuffer+0x2c4>)
 8004388:	195b      	adds	r3, r3, r5
 800438a:	19db      	adds	r3, r3, r7
 800438c:	4a77      	ldr	r2, [pc, #476]	@ (800456c <ParseBuffer+0x2c8>)
 800438e:	6811      	ldr	r1, [r2, #0]
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	7912      	ldrb	r2, [r2, #4]
 8004394:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004396:	4b76      	ldr	r3, [pc, #472]	@ (8004570 <ParseBuffer+0x2cc>)
 8004398:	195b      	adds	r3, r3, r5
 800439a:	19db      	adds	r3, r3, r7
 800439c:	4a75      	ldr	r2, [pc, #468]	@ (8004574 <ParseBuffer+0x2d0>)
 800439e:	6811      	ldr	r1, [r2, #0]
 80043a0:	6019      	str	r1, [r3, #0]
 80043a2:	8892      	ldrh	r2, [r2, #4]
 80043a4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80043a6:	4b74      	ldr	r3, [pc, #464]	@ (8004578 <ParseBuffer+0x2d4>)
 80043a8:	195b      	adds	r3, r3, r5
 80043aa:	19db      	adds	r3, r3, r7
 80043ac:	223e      	movs	r2, #62	@ 0x3e
 80043ae:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043b0:	4b72      	ldr	r3, [pc, #456]	@ (800457c <ParseBuffer+0x2d8>)
 80043b2:	195b      	adds	r3, r3, r5
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	4a72      	ldr	r2, [pc, #456]	@ (8004580 <ParseBuffer+0x2dc>)
 80043b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ba:	c313      	stmia	r3!, {r0, r1, r4}
 80043bc:	8811      	ldrh	r1, [r2, #0]
 80043be:	8019      	strh	r1, [r3, #0]
 80043c0:	7892      	ldrb	r2, [r2, #2]
 80043c2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80043c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004584 <ParseBuffer+0x2e0>)
 80043c6:	195b      	adds	r3, r3, r5
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004588 <ParseBuffer+0x2e4>)
 80043cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ce:	c313      	stmia	r3!, {r0, r1, r4}
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80043d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004548 <ParseBuffer+0x2a4>)
 80043d6:	195b      	adds	r3, r3, r5
 80043d8:	19db      	adds	r3, r3, r7
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80043e0:	2344      	movs	r3, #68	@ 0x44
 80043e2:	18fa      	adds	r2, r7, r3
 80043e4:	2348      	movs	r3, #72	@ 0x48
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	0011      	movs	r1, r2
 80043ea:	0018      	movs	r0, r3
 80043ec:	f01b ff45 	bl	802027a <strstr>
 80043f0:	0003      	movs	r3, r0
 80043f2:	19ba      	adds	r2, r7, r6
 80043f4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80043f6:	4b54      	ldr	r3, [pc, #336]	@ (8004548 <ParseBuffer+0x2a4>)
 80043f8:	22b0      	movs	r2, #176	@ 0xb0
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10c      	bne.n	8004420 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004406:	232c      	movs	r3, #44	@ 0x2c
 8004408:	18fa      	adds	r2, r7, r3
 800440a:	2348      	movs	r3, #72	@ 0x48
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	0011      	movs	r1, r2
 8004410:	0018      	movs	r0, r3
 8004412:	f01b ff32 	bl	802027a <strstr>
 8004416:	0003      	movs	r3, r0
 8004418:	22ac      	movs	r2, #172	@ 0xac
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	18ba      	adds	r2, r7, r2
 800441e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004420:	4b49      	ldr	r3, [pc, #292]	@ (8004548 <ParseBuffer+0x2a4>)
 8004422:	22b0      	movs	r2, #176	@ 0xb0
 8004424:	0052      	lsls	r2, r2, #1
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d10c      	bne.n	800444a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004430:	2328      	movs	r3, #40	@ 0x28
 8004432:	18fa      	adds	r2, r7, r3
 8004434:	2348      	movs	r3, #72	@ 0x48
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f01b ff1d 	bl	802027a <strstr>
 8004440:	0003      	movs	r3, r0
 8004442:	22ac      	movs	r2, #172	@ 0xac
 8004444:	0052      	lsls	r2, r2, #1
 8004446:	18ba      	adds	r2, r7, r2
 8004448:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800444a:	4b3f      	ldr	r3, [pc, #252]	@ (8004548 <ParseBuffer+0x2a4>)
 800444c:	22b0      	movs	r2, #176	@ 0xb0
 800444e:	0052      	lsls	r2, r2, #1
 8004450:	189b      	adds	r3, r3, r2
 8004452:	19db      	adds	r3, r3, r7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b05      	cmp	r3, #5
 8004458:	d10c      	bne.n	8004474 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800445a:	2308      	movs	r3, #8
 800445c:	18fa      	adds	r2, r7, r3
 800445e:	2348      	movs	r3, #72	@ 0x48
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f01b ff08 	bl	802027a <strstr>
 800446a:	0003      	movs	r3, r0
 800446c:	22ac      	movs	r2, #172	@ 0xac
 800446e:	0052      	lsls	r2, r2, #1
 8004470:	18ba      	adds	r2, r7, r2
 8004472:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004474:	233c      	movs	r3, #60	@ 0x3c
 8004476:	18fa      	adds	r2, r7, r3
 8004478:	2448      	movs	r4, #72	@ 0x48
 800447a:	193b      	adds	r3, r7, r4
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f01b fefb 	bl	802027a <strstr>
 8004484:	0003      	movs	r3, r0
 8004486:	22aa      	movs	r2, #170	@ 0xaa
 8004488:	0052      	lsls	r2, r2, #1
 800448a:	18ba      	adds	r2, r7, r2
 800448c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800448e:	2318      	movs	r3, #24
 8004490:	18fa      	adds	r2, r7, r3
 8004492:	193b      	adds	r3, r7, r4
 8004494:	0011      	movs	r1, r2
 8004496:	0018      	movs	r0, r3
 8004498:	f01b feef 	bl	802027a <strstr>
 800449c:	0003      	movs	r3, r0
 800449e:	22a8      	movs	r2, #168	@ 0xa8
 80044a0:	0052      	lsls	r2, r2, #1
 80044a2:	18ba      	adds	r2, r7, r2
 80044a4:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80044a6:	4a39      	ldr	r2, [pc, #228]	@ (800458c <ParseBuffer+0x2e8>)
 80044a8:	193b      	adds	r3, r7, r4
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f01b fee4 	bl	802027a <strstr>
 80044b2:	0003      	movs	r3, r0
 80044b4:	22a6      	movs	r2, #166	@ 0xa6
 80044b6:	0052      	lsls	r2, r2, #1
 80044b8:	18ba      	adds	r2, r7, r2
 80044ba:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80044bc:	2334      	movs	r3, #52	@ 0x34
 80044be:	18fa      	adds	r2, r7, r3
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f01b fed8 	bl	802027a <strstr>
 80044ca:	0003      	movs	r3, r0
 80044cc:	22a4      	movs	r2, #164	@ 0xa4
 80044ce:	0052      	lsls	r2, r2, #1
 80044d0:	18ba      	adds	r2, r7, r2
 80044d2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80044d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <ParseBuffer+0x2a0>)
 80044d6:	21b0      	movs	r1, #176	@ 0xb0
 80044d8:	0049      	lsls	r1, r1, #1
 80044da:	185b      	adds	r3, r3, r1
 80044dc:	19db      	adds	r3, r3, r7
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d800      	bhi.n	80044e6 <ParseBuffer+0x242>
 80044e4:	e0c1      	b.n	800466a <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80044e6:	22ac      	movs	r2, #172	@ 0xac
 80044e8:	0052      	lsls	r2, r2, #1
 80044ea:	18bb      	adds	r3, r7, r2
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d054      	beq.n	800459c <ParseBuffer+0x2f8>
 80044f2:	18bb      	adds	r3, r7, r2
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80044fa:	d14f      	bne.n	800459c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80044fc:	2360      	movs	r3, #96	@ 0x60
 80044fe:	33ff      	adds	r3, #255	@ 0xff
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004506:	4b22      	ldr	r3, [pc, #136]	@ (8004590 <ParseBuffer+0x2ec>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b12      	cmp	r3, #18
 800450c:	d146      	bne.n	800459c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <ParseBuffer+0x2a0>)
 8004510:	185b      	adds	r3, r3, r1
 8004512:	19db      	adds	r3, r3, r7
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	2b2b      	cmp	r3, #43	@ 0x2b
 8004518:	d10b      	bne.n	8004532 <ParseBuffer+0x28e>
 800451a:	4b0c      	ldr	r3, [pc, #48]	@ (800454c <ParseBuffer+0x2a8>)
 800451c:	185b      	adds	r3, r3, r1
 800451e:	19db      	adds	r3, r3, r7
 8004520:	2221      	movs	r2, #33	@ 0x21
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	2b32      	cmp	r3, #50	@ 0x32
 8004526:	d104      	bne.n	8004532 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004528:	193b      	adds	r3, r7, r4
 800452a:	0018      	movs	r0, r3
 800452c:	f002 f8fa 	bl	8006724 <ParseTime>
 8004530:	e034      	b.n	800459c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004532:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <ParseBuffer+0x2f0>)
 8004534:	4b18      	ldr	r3, [pc, #96]	@ (8004598 <ParseBuffer+0x2f4>)
 8004536:	0019      	movs	r1, r3
 8004538:	2001      	movs	r0, #1
 800453a:	f009 ffc5 	bl	800e4c8 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800453e:	2306      	movs	r3, #6
 8004540:	e097      	b.n	8004672 <ParseBuffer+0x3ce>
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	fffffea2 	.word	0xfffffea2
 8004548:	fffffea1 	.word	0xfffffea1
 800454c:	fffffee8 	.word	0xfffffee8
 8004550:	080236b0 	.word	0x080236b0
 8004554:	0802318c 	.word	0x0802318c
 8004558:	fffffee4 	.word	0xfffffee4
 800455c:	080236dc 	.word	0x080236dc
 8004560:	fffffedc 	.word	0xfffffedc
 8004564:	080236e0 	.word	0x080236e0
 8004568:	fffffed4 	.word	0xfffffed4
 800456c:	080236e8 	.word	0x080236e8
 8004570:	fffffecc 	.word	0xfffffecc
 8004574:	080236f0 	.word	0x080236f0
 8004578:	fffffec8 	.word	0xfffffec8
 800457c:	fffffeb8 	.word	0xfffffeb8
 8004580:	080236f8 	.word	0x080236f8
 8004584:	fffffea8 	.word	0xfffffea8
 8004588:	08023708 	.word	0x08023708
 800458c:	080252bc 	.word	0x080252bc
 8004590:	20000a2e 	.word	0x20000a2e
 8004594:	080236c8 	.word	0x080236c8
 8004598:	08023178 	.word	0x08023178
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800459c:	22ac      	movs	r2, #172	@ 0xac
 800459e:	0052      	lsls	r2, r2, #1
 80045a0:	18bb      	adds	r3, r7, r2
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <ParseBuffer+0x318>
 80045a8:	18bb      	adds	r3, r7, r2
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b72      	cmp	r3, #114	@ 0x72
 80045b0:	d104      	bne.n	80045bc <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045b2:	2360      	movs	r3, #96	@ 0x60
 80045b4:	33ff      	adds	r3, #255	@ 0xff
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2202      	movs	r2, #2
 80045ba:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80045bc:	22ac      	movs	r2, #172	@ 0xac
 80045be:	0052      	lsls	r2, r2, #1
 80045c0:	18bb      	adds	r3, r7, r2
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <ParseBuffer+0x338>
 80045c8:	18bb      	adds	r3, r7, r2
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80045d0:	d104      	bne.n	80045dc <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80045d2:	2360      	movs	r3, #96	@ 0x60
 80045d4:	33ff      	adds	r3, #255	@ 0xff
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	2205      	movs	r2, #5
 80045da:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80045dc:	22ac      	movs	r2, #172	@ 0xac
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	18bb      	adds	r3, r7, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <ParseBuffer+0x358>
 80045e8:	18bb      	adds	r3, r7, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80045f0:	d104      	bne.n	80045fc <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80045f2:	2360      	movs	r3, #96	@ 0x60
 80045f4:	33ff      	adds	r3, #255	@ 0xff
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	220b      	movs	r2, #11
 80045fa:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80045fc:	22aa      	movs	r2, #170	@ 0xaa
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	18bb      	adds	r3, r7, r2
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <ParseBuffer+0x36e>
 8004608:	18bb      	adds	r3, r7, r2
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b45      	cmp	r3, #69	@ 0x45
 8004610:	d00a      	beq.n	8004628 <ParseBuffer+0x384>
 8004612:	22a4      	movs	r2, #164	@ 0xa4
 8004614:	0052      	lsls	r2, r2, #1
 8004616:	18bb      	adds	r3, r7, r2
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <ParseBuffer+0x38e>
 800461e:	18bb      	adds	r3, r7, r2
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b46      	cmp	r3, #70	@ 0x46
 8004626:	d104      	bne.n	8004632 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004628:	2360      	movs	r3, #96	@ 0x60
 800462a:	33ff      	adds	r3, #255	@ 0xff
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004632:	22a8      	movs	r2, #168	@ 0xa8
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	18bb      	adds	r3, r7, r2
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <ParseBuffer+0x3aa>
 800463e:	18bb      	adds	r3, r7, r2
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b57      	cmp	r3, #87	@ 0x57
 8004646:	d102      	bne.n	800464e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004648:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <ParseBuffer+0x3d8>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800464e:	22a6      	movs	r2, #166	@ 0xa6
 8004650:	0052      	lsls	r2, r2, #1
 8004652:	18bb      	adds	r3, r7, r2
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <ParseBuffer+0x3c6>
 800465a:	18bb      	adds	r3, r7, r2
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b32      	cmp	r3, #50	@ 0x32
 8004662:	d102      	bne.n	800466a <ParseBuffer+0x3c6>
      beurs = true;
 8004664:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <ParseBuffer+0x3dc>)
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800466a:	2360      	movs	r3, #96	@ 0x60
 800466c:	33ff      	adds	r3, #255	@ 0xff
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	781b      	ldrb	r3, [r3, #0]

}
 8004672:	0018      	movs	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	b059      	add	sp, #356	@ 0x164
 8004678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	20000558 	.word	0x20000558
 8004680:	2000055a 	.word	0x2000055a

08004684 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800468a:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <PollAwake+0x34>)
 800468c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fb fd6b 	bl	800016c <strlen>
 8004696:	0003      	movs	r3, r0
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff fa48 	bl	8003b34 <ESP_Send>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d001      	beq.n	80046ac <PollAwake+0x28>
    return true;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <PollAwake+0x2a>
  }
  else{
    return false;
 80046ac:	2300      	movs	r3, #0
  }
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	08023718 	.word	0x08023718

080046bc <RFPower>:

bool RFPower(){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <RFPower+0x34>)
 80046c4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fb fd4f 	bl	800016c <strlen>
 80046ce:	0003      	movs	r3, r0
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff fa2c 	bl	8003b34 <ESP_Send>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d001      	beq.n	80046e4 <RFPower+0x28>
    return true;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <RFPower+0x2a>
  }
  else{
    return false;
 80046e4:	2300      	movs	r3, #0
  }
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b002      	add	sp, #8
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	08023720 	.word	0x08023720

080046f4 <CheckRFPower>:

bool CheckRFPower(){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <CheckRFPower+0x34>)
 80046fc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f7fb fd33 	bl	800016c <strlen>
 8004706:	0003      	movs	r3, r0
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0011      	movs	r1, r2
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff fa10 	bl	8003b34 <ESP_Send>
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d001      	beq.n	800471c <CheckRFPower+0x28>
    return true;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	08023730 	.word	0x08023730

0800472c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <ATRestore+0x34>)
 8004734:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fd17 	bl	800016c <strlen>
 800473e:	0003      	movs	r3, r0
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff f9f4 	bl	8003b34 <ESP_Send>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <ATRestore+0x28>
    return true;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <ATRestore+0x2a>
  }
  else{
    return false;
 8004754:	2300      	movs	r3, #0
  }
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	08023740 	.word	0x08023740

08004764 <CWINIT>:

bool CWINIT(){
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <CWINIT+0x34>)
 800476c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7fb fcfb 	bl	800016c <strlen>
 8004776:	0003      	movs	r3, r0
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f9d8 	bl	8003b34 <ESP_Send>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d001      	beq.n	800478c <CWINIT+0x28>
    return true;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <CWINIT+0x2a>
  }
  else{
    return false;
 800478c:	2300      	movs	r3, #0
  }
}
 800478e:	0018      	movs	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	08023750 	.word	0x08023750

0800479c <CWMODE1>:

bool CWMODE1(){
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <CWMODE1+0x34>)
 80047a4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fb fcdf 	bl	800016c <strlen>
 80047ae:	0003      	movs	r3, r0
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff f9bc 	bl	8003b34 <ESP_Send>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d001      	beq.n	80047c4 <CWMODE1+0x28>
    return true;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80047c4:	2300      	movs	r3, #0
  }
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	08023760 	.word	0x08023760

080047d4 <CWMODE2>:

bool CWMODE2(){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <CWMODE2+0x34>)
 80047dc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7fb fcc3 	bl	800016c <strlen>
 80047e6:	0003      	movs	r3, r0
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0011      	movs	r1, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7ff f9a0 	bl	8003b34 <ESP_Send>
 80047f4:	1e03      	subs	r3, r0, #0
 80047f6:	d001      	beq.n	80047fc <CWMODE2+0x28>
    return true;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <CWMODE2+0x2a>
  }
  else{
    return false;
 80047fc:	2300      	movs	r3, #0
  }
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	08023770 	.word	0x08023770

0800480c <CWAUTOCONN>:

bool CWAUTOCONN(){
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <CWAUTOCONN+0x34>)
 8004814:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f7fb fca7 	bl	800016c <strlen>
 800481e:	0003      	movs	r3, r0
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0011      	movs	r1, r2
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff f984 	bl	8003b34 <ESP_Send>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d001      	beq.n	8004834 <CWAUTOCONN+0x28>
    return true;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004834:	2300      	movs	r3, #0
  }
}
 8004836:	0018      	movs	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	08023780 	.word	0x08023780

08004844 <CWJAP>:

bool CWJAP(){
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	46c6      	mov	lr, r8
 8004848:	b500      	push	{lr}
 800484a:	b0a2      	sub	sp, #136	@ 0x88
 800484c:	af00      	add	r7, sp, #0
 800484e:	466b      	mov	r3, sp
 8004850:	4698      	mov	r8, r3
  beursTest = true;
 8004852:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <CWJAP+0xf4>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004858:	2618      	movs	r6, #24
 800485a:	19bb      	adds	r3, r7, r6
 800485c:	2264      	movs	r2, #100	@ 0x64
 800485e:	2100      	movs	r1, #0
 8004860:	0018      	movs	r0, r3
 8004862:	f01b fccf 	bl	8020204 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <CWJAP+0xf8>)
 8004868:	4a35      	ldr	r2, [pc, #212]	@ (8004940 <CWJAP+0xfc>)
 800486a:	4936      	ldr	r1, [pc, #216]	@ (8004944 <CWJAP+0x100>)
 800486c:	19b8      	adds	r0, r7, r6
 800486e:	f01b fb85 	bl	801ff7c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004872:	19bb      	adds	r3, r7, r6
 8004874:	0018      	movs	r0, r3
 8004876:	f7fb fc79 	bl	800016c <strlen>
 800487a:	0002      	movs	r2, r0
 800487c:	216f      	movs	r1, #111	@ 0x6f
 800487e:	0030      	movs	r0, r6
 8004880:	180b      	adds	r3, r1, r0
 8004882:	19db      	adds	r3, r3, r7
 8004884:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004886:	180b      	adds	r3, r1, r0
 8004888:	19db      	adds	r3, r3, r7
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	2180      	movs	r1, #128	@ 0x80
 8004892:	1879      	adds	r1, r7, r1
 8004894:	600a      	str	r2, [r1, #0]
 8004896:	001a      	movs	r2, r3
 8004898:	60ba      	str	r2, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	60fa      	str	r2, [r7, #12]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	0002      	movs	r2, r0
 80048a4:	0f52      	lsrs	r2, r2, #29
 80048a6:	000e      	movs	r6, r1
 80048a8:	00f6      	lsls	r6, r6, #3
 80048aa:	617e      	str	r6, [r7, #20]
 80048ac:	697e      	ldr	r6, [r7, #20]
 80048ae:	4316      	orrs	r6, r2
 80048b0:	617e      	str	r6, [r7, #20]
 80048b2:	0002      	movs	r2, r0
 80048b4:	00d2      	lsls	r2, r2, #3
 80048b6:	613a      	str	r2, [r7, #16]
 80048b8:	001a      	movs	r2, r3
 80048ba:	603a      	str	r2, [r7, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	0002      	movs	r2, r0
 80048c6:	0f52      	lsrs	r2, r2, #29
 80048c8:	000e      	movs	r6, r1
 80048ca:	00f5      	lsls	r5, r6, #3
 80048cc:	4315      	orrs	r5, r2
 80048ce:	0002      	movs	r2, r0
 80048d0:	00d4      	lsls	r4, r2, #3
 80048d2:	3307      	adds	r3, #7
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	466a      	mov	r2, sp
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	469d      	mov	sp, r3
 80048de:	466b      	mov	r3, sp
 80048e0:	3300      	adds	r3, #0
 80048e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80048e4:	246f      	movs	r4, #111	@ 0x6f
 80048e6:	2518      	movs	r5, #24
 80048e8:	1963      	adds	r3, r4, r5
 80048ea:	19db      	adds	r3, r3, r7
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	001a      	movs	r2, r3
 80048f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f4:	2100      	movs	r1, #0
 80048f6:	0018      	movs	r0, r3
 80048f8:	f01b fc84 	bl	8020204 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80048fc:	1963      	adds	r3, r4, r5
 80048fe:	19db      	adds	r3, r3, r7
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	1979      	adds	r1, r7, r5
 8004904:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004906:	0018      	movs	r0, r3
 8004908:	f01b fca3 	bl	8020252 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800490c:	1963      	adds	r3, r4, r5
 800490e:	19db      	adds	r3, r3, r7
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b29a      	uxth	r2, r3
 8004914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004916:	0011      	movs	r1, r2
 8004918:	0018      	movs	r0, r3
 800491a:	f7ff f90b 	bl	8003b34 <ESP_Send>
 800491e:	1e03      	subs	r3, r0, #0
 8004920:	d001      	beq.n	8004926 <CWJAP+0xe2>
    return true;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <CWJAP+0xe4>
  }
  else{
    return false;
 8004926:	2300      	movs	r3, #0
 8004928:	46c5      	mov	sp, r8
  }
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b022      	add	sp, #136	@ 0x88
 8004930:	bc80      	pop	{r7}
 8004932:	46b8      	mov	r8, r7
 8004934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	20000559 	.word	0x20000559
 800493c:	080252c8 	.word	0x080252c8
 8004940:	080252bc 	.word	0x080252bc
 8004944:	08023794 	.word	0x08023794

08004948 <CWMODE3>:

bool CWMODE3(){
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <CWMODE3+0x34>)
 8004950:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7fb fc09 	bl	800016c <strlen>
 800495a:	0003      	movs	r3, r0
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff f8e6 	bl	8003b34 <ESP_Send>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d001      	beq.n	8004970 <CWMODE3+0x28>
    return true;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004970:	2300      	movs	r3, #0
  }
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	080237ac 	.word	0x080237ac

08004980 <CWSTATE>:

bool CWSTATE(){
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <CWSTATE+0x34>)
 8004988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f7fb fbed 	bl	800016c <strlen>
 8004992:	0003      	movs	r3, r0
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0011      	movs	r1, r2
 800499a:	0018      	movs	r0, r3
 800499c:	f7ff f8ca 	bl	8003b34 <ESP_Send>
 80049a0:	1e03      	subs	r3, r0, #0
 80049a2:	d001      	beq.n	80049a8 <CWSTATE+0x28>
    return true;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <CWSTATE+0x2a>
  }
  else{
    return false;
 80049a8:	2300      	movs	r3, #0
  }
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b002      	add	sp, #8
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	080237bc 	.word	0x080237bc

080049b8 <CWSAP>:

bool CWSAP(){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80049be:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <CWSAP+0x34>)
 80049c0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fb fbd1 	bl	800016c <strlen>
 80049ca:	0003      	movs	r3, r0
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0011      	movs	r1, r2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff f8ae 	bl	8003b34 <ESP_Send>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d001      	beq.n	80049e0 <CWSAP+0x28>
    return true;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <CWSAP+0x2a>
  }
  else{
    return false;
 80049e0:	2300      	movs	r3, #0
  }
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b002      	add	sp, #8
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	080237cc 	.word	0x080237cc

080049f0 <CIPMUX>:

bool CIPMUX(){
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <CIPMUX+0x34>)
 80049f8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fb fbb5 	bl	800016c <strlen>
 8004a02:	0003      	movs	r3, r0
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0011      	movs	r1, r2
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f7ff f892 	bl	8003b34 <ESP_Send>
 8004a10:	1e03      	subs	r3, r0, #0
 8004a12:	d001      	beq.n	8004a18 <CIPMUX+0x28>
    return true;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a18:	2300      	movs	r3, #0
  }
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	080237f0 	.word	0x080237f0

08004a28 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <WEBSERVER+0x34>)
 8004a30:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fb fb99 	bl	800016c <strlen>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	0011      	movs	r1, r2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff f876 	bl	8003b34 <ESP_Send>
 8004a48:	1e03      	subs	r3, r0, #0
 8004a4a:	d001      	beq.n	8004a50 <WEBSERVER+0x28>
    return true;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a50:	2300      	movs	r3, #0
  }
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	08023800 	.word	0x08023800

08004a60 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b0c5      	sub	sp, #276	@ 0x114
 8004a64:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a66:	2380      	movs	r3, #128	@ 0x80
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f01b fbc8 	bl	8020204 <memset>
  uint16_t length = CreateMessage(beurs);
 8004a74:	4b22      	ldr	r3, [pc, #136]	@ (8004b00 <HTTPCPOST+0xa0>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	1dfc      	adds	r4, r7, #7
 8004a7a:	34ff      	adds	r4, #255	@ 0xff
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff f979 	bl	8003d74 <CreateMessage>
 8004a82:	0003      	movs	r3, r0
 8004a84:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a86:	4b1e      	ldr	r3, [pc, #120]	@ (8004b00 <HTTPCPOST+0xa0>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a8e:	1dfb      	adds	r3, r7, #7
 8004a90:	33ff      	adds	r3, #255	@ 0xff
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HTTPCPOST+0xa4>)
 8004a96:	491c      	ldr	r1, [pc, #112]	@ (8004b08 <HTTPCPOST+0xa8>)
 8004a98:	1d38      	adds	r0, r7, #4
 8004a9a:	f01b fa6f 	bl	801ff7c <siprintf>
 8004a9e:	e016      	b.n	8004ace <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b0c <HTTPCPOST+0xac>)
 8004aa2:	481b      	ldr	r0, [pc, #108]	@ (8004b10 <HTTPCPOST+0xb0>)
 8004aa4:	220c      	movs	r2, #12
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	f7fe fe26 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004aac:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <HTTPCPOST+0xac>)
 8004aae:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HTTPCPOST+0xb4>)
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f7ff f93a 	bl	8003d2c <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004ab8:	1dfb      	adds	r3, r7, #7
 8004aba:	33ff      	adds	r3, #255	@ 0xff
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	4c15      	ldr	r4, [pc, #84]	@ (8004b14 <HTTPCPOST+0xb4>)
 8004ac0:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <HTTPCPOST+0xb8>)
 8004ac2:	4916      	ldr	r1, [pc, #88]	@ (8004b1c <HTTPCPOST+0xbc>)
 8004ac4:	1d38      	adds	r0, r7, #4
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	0023      	movs	r3, r4
 8004aca:	f01b fa57 	bl	801ff7c <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fb fb4b 	bl	800016c <strlen>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	1d7b      	adds	r3, r7, #5
 8004ada:	33ff      	adds	r3, #255	@ 0xff
 8004adc:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004ade:	1d7b      	adds	r3, r7, #5
 8004ae0:	33ff      	adds	r3, #255	@ 0xff
 8004ae2:	881a      	ldrh	r2, [r3, #0]
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff f823 	bl	8003b34 <ESP_Send>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d001      	beq.n	8004af6 <HTTPCPOST+0x96>
    return true;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004af6:	2300      	movs	r3, #0
  }
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b043      	add	sp, #268	@ 0x10c
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	2000055a 	.word	0x2000055a
 8004b04:	080252e4 	.word	0x080252e4
 8004b08:	08023818 	.word	0x08023818
 8004b0c:	20000b18 	.word	0x20000b18
 8004b10:	08080000 	.word	0x08080000
 8004b14:	20000b24 	.word	0x20000b24
 8004b18:	08025320 	.word	0x08025320
 8004b1c:	08023850 	.word	0x08023850

08004b20 <SENDDATA>:

bool SENDDATA(){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <SENDDATA+0x34>)
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7fb fb1f 	bl	800016c <strlen>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	1dbb      	adds	r3, r7, #6
 8004b32:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	881a      	ldrh	r2, [r3, #0]
 8004b38:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <SENDDATA+0x34>)
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fe fff9 	bl	8003b34 <ESP_Send>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d001      	beq.n	8004b4a <SENDDATA+0x2a>
    return true;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b4a:	2300      	movs	r3, #0
  }
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000598 	.word	0x20000598

08004b58 <SLEEP>:

bool SLEEP(){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <SLEEP+0x34>)
 8004b60:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fb fb01 	bl	800016c <strlen>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0011      	movs	r1, r2
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fe ffde 	bl	8003b34 <ESP_Send>
 8004b78:	1e03      	subs	r3, r0, #0
 8004b7a:	d001      	beq.n	8004b80 <SLEEP+0x28>
    return true;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <SLEEP+0x2a>
  }
  else{
    return false;
 8004b80:	2300      	movs	r3, #0
  }
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	08023890 	.word	0x08023890

08004b90 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <CIPSNTPCFG+0x3c>)
 8004b98:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7fb fae5 	bl	800016c <strlen>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0011      	movs	r1, r2
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fe ffc2 	bl	8003b34 <ESP_Send>
 8004bb0:	1e03      	subs	r3, r0, #0
 8004bb2:	d006      	beq.n	8004bc2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004bb4:	23fa      	movs	r3, #250	@ 0xfa
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f00a f8d5 	bl	800ed68 <HAL_Delay>
    return true;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004bc2:	2300      	movs	r3, #0
  }
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	080238a0 	.word	0x080238a0

08004bd0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <CIPSNTPTIME+0x34>)
 8004bd8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fb fac5 	bl	800016c <strlen>
 8004be2:	0003      	movs	r3, r0
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0011      	movs	r1, r2
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7fe ffa2 	bl	8003b34 <ESP_Send>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d001      	beq.n	8004bf8 <CIPSNTPTIME+0x28>
    return true;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004bf8:	2300      	movs	r3, #0
  }
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	080238f0 	.word	0x080238f0

08004c08 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <CIPSNTPINTV+0x34>)
 8004c10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fb faa9 	bl	800016c <strlen>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0011      	movs	r1, r2
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7fe ff86 	bl	8003b34 <ESP_Send>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d001      	beq.n	8004c30 <CIPSNTPINTV+0x28>
    return true;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c30:	2300      	movs	r3, #0
  }
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b002      	add	sp, #8
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	08023904 	.word	0x08023904

08004c40 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c40:	b5b0      	push	{r4, r5, r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	0002      	movs	r2, r0
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e00 <DMA_ProcessBuffer+0x1c0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	200e      	movs	r0, #14
 8004c56:	183b      	adds	r3, r7, r0
 8004c58:	2180      	movs	r1, #128	@ 0x80
 8004c5a:	0049      	lsls	r1, r1, #1
 8004c5c:	1a8a      	subs	r2, r1, r2
 8004c5e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c60:	230d      	movs	r3, #13
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2203      	movs	r2, #3
 8004c66:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c68:	183b      	adds	r3, r7, r0
 8004c6a:	881a      	ldrh	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d903      	bls.n	8004c7c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c74:	183b      	adds	r3, r7, r0
 8004c76:	2280      	movs	r2, #128	@ 0x80
 8004c78:	0052      	lsls	r2, r2, #1
 8004c7a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c7c:	4b61      	ldr	r3, [pc, #388]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	001a      	movs	r2, r3
 8004c84:	230e      	movs	r3, #14
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d131      	bne.n	8004cf2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8004e08 <DMA_ProcessBuffer+0x1c8>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b14      	cmp	r3, #20
 8004c94:	d91b      	bls.n	8004cce <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c96:	4b5c      	ldr	r3, [pc, #368]	@ (8004e08 <DMA_ProcessBuffer+0x1c8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8004e0c <DMA_ProcessBuffer+0x1cc>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <DMA_ProcessBuffer+0x74>
 8004ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e10 <DMA_ProcessBuffer+0x1d0>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004cac:	230d      	movs	r3, #13
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004cb4:	4b55      	ldr	r3, [pc, #340]	@ (8004e0c <DMA_ProcessBuffer+0x1cc>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d103      	bne.n	8004cc4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004cbc:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <DMA_ProcessBuffer+0x1d4>)
 8004cbe:	220b      	movs	r2, #11
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e016      	b.n	8004cf2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004cc4:	230d      	movs	r3, #13
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	2206      	movs	r2, #6
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	e011      	b.n	8004cf2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004cce:	4b4e      	ldr	r3, [pc, #312]	@ (8004e08 <DMA_ProcessBuffer+0x1c8>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e08 <DMA_ProcessBuffer+0x1c8>)
 8004cd8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004cda:	f00a f83b 	bl	800ed54 <HAL_GetTick>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	33f5      	adds	r3, #245	@ 0xf5
 8004ce2:	33ff      	adds	r3, #255	@ 0xff
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e18 <DMA_ProcessBuffer+0x1d8>)
 8004ce8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004cea:	230d      	movs	r3, #13
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2204      	movs	r2, #4
 8004cf0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004cf2:	4b44      	ldr	r3, [pc, #272]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	210e      	movs	r1, #14
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <DMA_ProcessBuffer+0xc6>
 8004d04:	e075      	b.n	8004df2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004d06:	4b40      	ldr	r3, [pc, #256]	@ (8004e08 <DMA_ProcessBuffer+0x1c8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004d0c:	4b43      	ldr	r3, [pc, #268]	@ (8004e1c <DMA_ProcessBuffer+0x1dc>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4b3c      	ldr	r3, [pc, #240]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d109      	bne.n	8004d30 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <DMA_ProcessBuffer+0x1dc>)
 8004d24:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d26:	230d      	movs	r3, #13
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	220a      	movs	r2, #10
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e060      	b.n	8004df2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d30:	4b3a      	ldr	r3, [pc, #232]	@ (8004e1c <DMA_ProcessBuffer+0x1dc>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	001a      	movs	r2, r3
 8004d38:	210e      	movs	r1, #14
 8004d3a:	187b      	adds	r3, r7, r1
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <DMA_ProcessBuffer+0x1dc>)
 8004d4a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d4c:	230d      	movs	r3, #13
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	220a      	movs	r2, #10
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e04d      	b.n	8004df2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d56:	4b2b      	ldr	r3, [pc, #172]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	210e      	movs	r1, #14
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d917      	bls.n	8004d98 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d68:	4b26      	ldr	r3, [pc, #152]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	001a      	movs	r2, r3
 8004d70:	4b2b      	ldr	r3, [pc, #172]	@ (8004e20 <DMA_ProcessBuffer+0x1e0>)
 8004d72:	18d0      	adds	r0, r2, r3
 8004d74:	4b23      	ldr	r3, [pc, #140]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	b299      	uxth	r1, r3
 8004d84:	230d      	movs	r3, #13
 8004d86:	18fc      	adds	r4, r7, r3
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	001a      	movs	r2, r3
 8004d8e:	f7ff fa89 	bl	80042a4 <ParseBuffer>
 8004d92:	0003      	movs	r3, r0
 8004d94:	7023      	strb	r3, [r4, #0]
 8004d96:	e026      	b.n	8004de6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d98:	4b1a      	ldr	r3, [pc, #104]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	001a      	movs	r2, r3
 8004da0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e20 <DMA_ProcessBuffer+0x1e0>)
 8004da2:	18d0      	adds	r0, r2, r3
 8004da4:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	001a      	movs	r2, r3
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	b299      	uxth	r1, r3
 8004db4:	250d      	movs	r5, #13
 8004db6:	197c      	adds	r4, r7, r5
 8004db8:	1dfb      	adds	r3, r7, #7
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	f7ff fa71 	bl	80042a4 <ParseBuffer>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004dc6:	210e      	movs	r1, #14
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004dd0:	197c      	adds	r4, r7, r5
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	8819      	ldrh	r1, [r3, #0]
 8004dda:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <DMA_ProcessBuffer+0x1e0>)
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7ff fa61 	bl	80042a4 <ParseBuffer>
 8004de2:	0003      	movs	r3, r0
 8004de4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004de6:	230e      	movs	r3, #14
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <DMA_ProcessBuffer+0x1c4>)
 8004df0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004df2:	230d      	movs	r3, #13
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	781b      	ldrb	r3, [r3, #0]
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b004      	add	sp, #16
 8004dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004e00:	200022fc 	.word	0x200022fc
 8004e04:	20000b3d 	.word	0x20000b3d
 8004e08:	20000a2c 	.word	0x20000a2c
 8004e0c:	20000a2e 	.word	0x20000a2e
 8004e10:	20000000 	.word	0x20000000
 8004e14:	20000030 	.word	0x20000030
 8004e18:	20000a28 	.word	0x20000a28
 8004e1c:	20000b3e 	.word	0x20000b3e
 8004e20:	20000454 	.word	0x20000454

08004e24 <clearDMABuffer>:

void clearDMABuffer(){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	005a      	lsls	r2, r3, #1
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <clearDMABuffer+0x18>)
 8004e2e:	2100      	movs	r1, #0
 8004e30:	0018      	movs	r0, r3
 8004e32:	f01b f9e7 	bl	8020204 <memset>
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000454 	.word	0x20000454

08004e40 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	0002      	movs	r2, r0
 8004e48:	1dfb      	adds	r3, r7, #7
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	1dbb      	adds	r3, r7, #6
 8004e4e:	1c0a      	adds	r2, r1, #0
 8004e50:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e52:	210f      	movs	r1, #15
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e5a:	1dbb      	adds	r3, r7, #6
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	1dfa      	adds	r2, r7, #7
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	4251      	negs	r1, r2
 8004e6a:	414a      	adcs	r2, r1
 8004e6c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e6e:	1dbb      	adds	r3, r7, #6
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e76:	230f      	movs	r3, #15
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	1dfa      	adds	r2, r7, #7
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	3a02      	subs	r2, #2
 8004e80:	4251      	negs	r1, r2
 8004e82:	414a      	adcs	r2, r1
 8004e84:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e86:	1dbb      	adds	r3, r7, #6
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d107      	bne.n	8004e9e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e8e:	230f      	movs	r3, #15
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	1dfa      	adds	r2, r7, #7
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	3a05      	subs	r2, #5
 8004e98:	4251      	negs	r1, r2
 8004e9a:	414a      	adcs	r2, r1
 8004e9c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e9e:	1dbb      	adds	r3, r7, #6
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d107      	bne.n	8004eb6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004ea6:	230f      	movs	r3, #15
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	1dfa      	adds	r2, r7, #7
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	3a0b      	subs	r2, #11
 8004eb0:	4251      	negs	r1, r2
 8004eb2:	414a      	adcs	r2, r1
 8004eb4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	781b      	ldrb	r3, [r3, #0]
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	0002      	movs	r2, r0
 8004ecc:	1dfb      	adds	r3, r7, #7
 8004ece:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004ed0:	230f      	movs	r3, #15
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b14      	cmp	r3, #20
 8004ede:	d900      	bls.n	8004ee2 <AT_Send+0x1e>
 8004ee0:	e19e      	b.n	8005220 <AT_Send+0x35c>
 8004ee2:	009a      	lsls	r2, r3, #2
 8004ee4:	4bd2      	ldr	r3, [pc, #840]	@ (8005230 <AT_Send+0x36c>)
 8004ee6:	18d3      	adds	r3, r2, r3
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004eec:	4bd1      	ldr	r3, [pc, #836]	@ (8005234 <AT_Send+0x370>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f009 fa93 	bl	800e41c <TimestampIsReached>
 8004ef6:	1e03      	subs	r3, r0, #0
 8004ef8:	d100      	bne.n	8004efc <AT_Send+0x38>
 8004efa:	e190      	b.n	800521e <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8004efc:	4ace      	ldr	r2, [pc, #824]	@ (8005238 <AT_Send+0x374>)
 8004efe:	4bcf      	ldr	r3, [pc, #828]	@ (800523c <AT_Send+0x378>)
 8004f00:	0019      	movs	r1, r3
 8004f02:	2003      	movs	r0, #3
 8004f04:	f009 fae0 	bl	800e4c8 <CreateLine>
    ATCommandSend = PollAwake();
 8004f08:	230f      	movs	r3, #15
 8004f0a:	18fc      	adds	r4, r7, r3
 8004f0c:	f7ff fbba 	bl	8004684 <PollAwake>
 8004f10:	0003      	movs	r3, r0
 8004f12:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f14:	f009 ff1e 	bl	800ed54 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	3332      	adds	r3, #50	@ 0x32
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	4bc5      	ldr	r3, [pc, #788]	@ (8005234 <AT_Send+0x370>)
 8004f20:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f22:	e17c      	b.n	800521e <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f24:	4ac6      	ldr	r2, [pc, #792]	@ (8005240 <AT_Send+0x37c>)
 8004f26:	4bc5      	ldr	r3, [pc, #788]	@ (800523c <AT_Send+0x378>)
 8004f28:	0019      	movs	r1, r3
 8004f2a:	2003      	movs	r0, #3
 8004f2c:	f009 facc 	bl	800e4c8 <CreateLine>
    ATCommandSend = RFPower();
 8004f30:	230f      	movs	r3, #15
 8004f32:	18fc      	adds	r4, r7, r3
 8004f34:	f7ff fbc2 	bl	80046bc <RFPower>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f3c:	f009 ff0a 	bl	800ed54 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	330a      	adds	r3, #10
 8004f44:	001a      	movs	r2, r3
 8004f46:	4bbb      	ldr	r3, [pc, #748]	@ (8005234 <AT_Send+0x370>)
 8004f48:	601a      	str	r2, [r3, #0]
    break;
 8004f4a:	e169      	b.n	8005220 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f4c:	4abd      	ldr	r2, [pc, #756]	@ (8005244 <AT_Send+0x380>)
 8004f4e:	4bbb      	ldr	r3, [pc, #748]	@ (800523c <AT_Send+0x378>)
 8004f50:	0019      	movs	r1, r3
 8004f52:	2003      	movs	r0, #3
 8004f54:	f009 fab8 	bl	800e4c8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f58:	230f      	movs	r3, #15
 8004f5a:	18fc      	adds	r4, r7, r3
 8004f5c:	f7ff fbca 	bl	80046f4 <CheckRFPower>
 8004f60:	0003      	movs	r3, r0
 8004f62:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f64:	f009 fef6 	bl	800ed54 <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	330a      	adds	r3, #10
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	4bb1      	ldr	r3, [pc, #708]	@ (8005234 <AT_Send+0x370>)
 8004f70:	601a      	str	r2, [r3, #0]
    break;
 8004f72:	e155      	b.n	8005220 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f74:	4ab4      	ldr	r2, [pc, #720]	@ (8005248 <AT_Send+0x384>)
 8004f76:	4bb1      	ldr	r3, [pc, #708]	@ (800523c <AT_Send+0x378>)
 8004f78:	0019      	movs	r1, r3
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	f009 faa4 	bl	800e4c8 <CreateLine>
    ATCommandSend = ATRestore();
 8004f80:	230f      	movs	r3, #15
 8004f82:	18fc      	adds	r4, r7, r3
 8004f84:	f7ff fbd2 	bl	800472c <ATRestore>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f8c:	f009 fee2 	bl	800ed54 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	3332      	adds	r3, #50	@ 0x32
 8004f94:	001a      	movs	r2, r3
 8004f96:	4ba7      	ldr	r3, [pc, #668]	@ (8005234 <AT_Send+0x370>)
 8004f98:	601a      	str	r2, [r3, #0]
    break;
 8004f9a:	e141      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f9c:	4aab      	ldr	r2, [pc, #684]	@ (800524c <AT_Send+0x388>)
 8004f9e:	4ba7      	ldr	r3, [pc, #668]	@ (800523c <AT_Send+0x378>)
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	f009 fa90 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWINIT();
 8004fa8:	230f      	movs	r3, #15
 8004faa:	18fc      	adds	r4, r7, r3
 8004fac:	f7ff fbda 	bl	8004764 <CWINIT>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fb4:	f009 fece 	bl	800ed54 <HAL_GetTick>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	33f5      	adds	r3, #245	@ 0xf5
 8004fbc:	33ff      	adds	r3, #255	@ 0xff
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8005234 <AT_Send+0x370>)
 8004fc2:	601a      	str	r2, [r3, #0]
    break;
 8004fc4:	e12c      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004fc6:	4aa2      	ldr	r2, [pc, #648]	@ (8005250 <AT_Send+0x38c>)
 8004fc8:	4b9c      	ldr	r3, [pc, #624]	@ (800523c <AT_Send+0x378>)
 8004fca:	0019      	movs	r1, r3
 8004fcc:	2003      	movs	r0, #3
 8004fce:	f009 fa7b 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWSTATE();
 8004fd2:	230f      	movs	r3, #15
 8004fd4:	18fc      	adds	r4, r7, r3
 8004fd6:	f7ff fcd3 	bl	8004980 <CWSTATE>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fde:	f009 feb9 	bl	800ed54 <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	33f5      	adds	r3, #245	@ 0xf5
 8004fe6:	33ff      	adds	r3, #255	@ 0xff
 8004fe8:	001a      	movs	r2, r3
 8004fea:	4b92      	ldr	r3, [pc, #584]	@ (8005234 <AT_Send+0x370>)
 8004fec:	601a      	str	r2, [r3, #0]
    break;
 8004fee:	e117      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004ff0:	4a98      	ldr	r2, [pc, #608]	@ (8005254 <AT_Send+0x390>)
 8004ff2:	4b92      	ldr	r3, [pc, #584]	@ (800523c <AT_Send+0x378>)
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	2003      	movs	r0, #3
 8004ff8:	f009 fa66 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWMODE1();
 8004ffc:	230f      	movs	r3, #15
 8004ffe:	18fc      	adds	r4, r7, r3
 8005000:	f7ff fbcc 	bl	800479c <CWMODE1>
 8005004:	0003      	movs	r3, r0
 8005006:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005008:	f009 fea4 	bl	800ed54 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	330a      	adds	r3, #10
 8005010:	001a      	movs	r2, r3
 8005012:	4b88      	ldr	r3, [pc, #544]	@ (8005234 <AT_Send+0x370>)
 8005014:	601a      	str	r2, [r3, #0]
    break;
 8005016:	e103      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005018:	4a8e      	ldr	r2, [pc, #568]	@ (8005254 <AT_Send+0x390>)
 800501a:	4b88      	ldr	r3, [pc, #544]	@ (800523c <AT_Send+0x378>)
 800501c:	0019      	movs	r1, r3
 800501e:	2003      	movs	r0, #3
 8005020:	f009 fa52 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWMODE2();
 8005024:	230f      	movs	r3, #15
 8005026:	18fc      	adds	r4, r7, r3
 8005028:	f7ff fbd4 	bl	80047d4 <CWMODE2>
 800502c:	0003      	movs	r3, r0
 800502e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005030:	f009 fe90 	bl	800ed54 <HAL_GetTick>
 8005034:	0003      	movs	r3, r0
 8005036:	330a      	adds	r3, #10
 8005038:	001a      	movs	r2, r3
 800503a:	4b7e      	ldr	r3, [pc, #504]	@ (8005234 <AT_Send+0x370>)
 800503c:	601a      	str	r2, [r3, #0]
    break;
 800503e:	e0ef      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005040:	4a85      	ldr	r2, [pc, #532]	@ (8005258 <AT_Send+0x394>)
 8005042:	4b7e      	ldr	r3, [pc, #504]	@ (800523c <AT_Send+0x378>)
 8005044:	0019      	movs	r1, r3
 8005046:	2003      	movs	r0, #3
 8005048:	f009 fa3e 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800504c:	230f      	movs	r3, #15
 800504e:	18fc      	adds	r4, r7, r3
 8005050:	f7ff fbdc 	bl	800480c <CWAUTOCONN>
 8005054:	0003      	movs	r3, r0
 8005056:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005058:	f009 fe7c 	bl	800ed54 <HAL_GetTick>
 800505c:	0003      	movs	r3, r0
 800505e:	330a      	adds	r3, #10
 8005060:	001a      	movs	r2, r3
 8005062:	4b74      	ldr	r3, [pc, #464]	@ (8005234 <AT_Send+0x370>)
 8005064:	601a      	str	r2, [r3, #0]
    break;
 8005066:	e0db      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005068:	4a7c      	ldr	r2, [pc, #496]	@ (800525c <AT_Send+0x398>)
 800506a:	4b74      	ldr	r3, [pc, #464]	@ (800523c <AT_Send+0x378>)
 800506c:	0019      	movs	r1, r3
 800506e:	2003      	movs	r0, #3
 8005070:	f009 fa2a 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWJAP();
 8005074:	230f      	movs	r3, #15
 8005076:	18fc      	adds	r4, r7, r3
 8005078:	f7ff fbe4 	bl	8004844 <CWJAP>
 800507c:	0003      	movs	r3, r0
 800507e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005080:	f009 fe68 	bl	800ed54 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	3332      	adds	r3, #50	@ 0x32
 8005088:	001a      	movs	r2, r3
 800508a:	4b6a      	ldr	r3, [pc, #424]	@ (8005234 <AT_Send+0x370>)
 800508c:	601a      	str	r2, [r3, #0]
    break;
 800508e:	e0c7      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005090:	4a73      	ldr	r2, [pc, #460]	@ (8005260 <AT_Send+0x39c>)
 8005092:	4b6a      	ldr	r3, [pc, #424]	@ (800523c <AT_Send+0x378>)
 8005094:	0019      	movs	r1, r3
 8005096:	2003      	movs	r0, #3
 8005098:	f009 fa16 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWMODE3();
 800509c:	230f      	movs	r3, #15
 800509e:	18fc      	adds	r4, r7, r3
 80050a0:	f7ff fc52 	bl	8004948 <CWMODE3>
 80050a4:	0003      	movs	r3, r0
 80050a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050a8:	f009 fe54 	bl	800ed54 <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	330a      	adds	r3, #10
 80050b0:	001a      	movs	r2, r3
 80050b2:	4b60      	ldr	r3, [pc, #384]	@ (8005234 <AT_Send+0x370>)
 80050b4:	601a      	str	r2, [r3, #0]
    break;
 80050b6:	e0b3      	b.n	8005220 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005264 <AT_Send+0x3a0>)
 80050ba:	4b60      	ldr	r3, [pc, #384]	@ (800523c <AT_Send+0x378>)
 80050bc:	0019      	movs	r1, r3
 80050be:	2003      	movs	r0, #3
 80050c0:	f009 fa02 	bl	800e4c8 <CreateLine>
    ATCommandSend = CWSAP();
 80050c4:	230f      	movs	r3, #15
 80050c6:	18fc      	adds	r4, r7, r3
 80050c8:	f7ff fc76 	bl	80049b8 <CWSAP>
 80050cc:	0003      	movs	r3, r0
 80050ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050d0:	f009 fe40 	bl	800ed54 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	330a      	adds	r3, #10
 80050d8:	001a      	movs	r2, r3
 80050da:	4b56      	ldr	r3, [pc, #344]	@ (8005234 <AT_Send+0x370>)
 80050dc:	601a      	str	r2, [r3, #0]
    break;
 80050de:	e09f      	b.n	8005220 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80050e0:	4a61      	ldr	r2, [pc, #388]	@ (8005268 <AT_Send+0x3a4>)
 80050e2:	4b56      	ldr	r3, [pc, #344]	@ (800523c <AT_Send+0x378>)
 80050e4:	0019      	movs	r1, r3
 80050e6:	2003      	movs	r0, #3
 80050e8:	f009 f9ee 	bl	800e4c8 <CreateLine>
    ATCommandSend = CIPMUX();
 80050ec:	230f      	movs	r3, #15
 80050ee:	18fc      	adds	r4, r7, r3
 80050f0:	f7ff fc7e 	bl	80049f0 <CIPMUX>
 80050f4:	0003      	movs	r3, r0
 80050f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050f8:	f009 fe2c 	bl	800ed54 <HAL_GetTick>
 80050fc:	0003      	movs	r3, r0
 80050fe:	330a      	adds	r3, #10
 8005100:	001a      	movs	r2, r3
 8005102:	4b4c      	ldr	r3, [pc, #304]	@ (8005234 <AT_Send+0x370>)
 8005104:	601a      	str	r2, [r3, #0]
    break;
 8005106:	e08b      	b.n	8005220 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8005108:	4a58      	ldr	r2, [pc, #352]	@ (800526c <AT_Send+0x3a8>)
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <AT_Send+0x378>)
 800510c:	0019      	movs	r1, r3
 800510e:	2003      	movs	r0, #3
 8005110:	f009 f9da 	bl	800e4c8 <CreateLine>
    ATCommandSend = WEBSERVER();
 8005114:	230f      	movs	r3, #15
 8005116:	18fc      	adds	r4, r7, r3
 8005118:	f7ff fc86 	bl	8004a28 <WEBSERVER>
 800511c:	0003      	movs	r3, r0
 800511e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005120:	f009 fe18 	bl	800ed54 <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	330a      	adds	r3, #10
 8005128:	001a      	movs	r2, r3
 800512a:	4b42      	ldr	r3, [pc, #264]	@ (8005234 <AT_Send+0x370>)
 800512c:	601a      	str	r2, [r3, #0]
    break;
 800512e:	e077      	b.n	8005220 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005130:	230f      	movs	r3, #15
 8005132:	18fc      	adds	r4, r7, r3
 8005134:	f7ff fc94 	bl	8004a60 <HTTPCPOST>
 8005138:	0003      	movs	r3, r0
 800513a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800513c:	f009 fe0a 	bl	800ed54 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	33f5      	adds	r3, #245	@ 0xf5
 8005144:	33ff      	adds	r3, #255	@ 0xff
 8005146:	001a      	movs	r2, r3
 8005148:	4b3a      	ldr	r3, [pc, #232]	@ (8005234 <AT_Send+0x370>)
 800514a:	601a      	str	r2, [r3, #0]
    break;
 800514c:	e068      	b.n	8005220 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800514e:	4a48      	ldr	r2, [pc, #288]	@ (8005270 <AT_Send+0x3ac>)
 8005150:	4b3a      	ldr	r3, [pc, #232]	@ (800523c <AT_Send+0x378>)
 8005152:	0019      	movs	r1, r3
 8005154:	2003      	movs	r0, #3
 8005156:	f009 f9b7 	bl	800e4c8 <CreateLine>
    ATCommandSend = SENDDATA();
 800515a:	230f      	movs	r3, #15
 800515c:	18fc      	adds	r4, r7, r3
 800515e:	f7ff fcdf 	bl	8004b20 <SENDDATA>
 8005162:	0003      	movs	r3, r0
 8005164:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005166:	f009 fdf5 	bl	800ed54 <HAL_GetTick>
 800516a:	0003      	movs	r3, r0
 800516c:	33f5      	adds	r3, #245	@ 0xf5
 800516e:	33ff      	adds	r3, #255	@ 0xff
 8005170:	001a      	movs	r2, r3
 8005172:	4b30      	ldr	r3, [pc, #192]	@ (8005234 <AT_Send+0x370>)
 8005174:	601a      	str	r2, [r3, #0]
    break;
 8005176:	e053      	b.n	8005220 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005178:	4a3e      	ldr	r2, [pc, #248]	@ (8005274 <AT_Send+0x3b0>)
 800517a:	4b30      	ldr	r3, [pc, #192]	@ (800523c <AT_Send+0x378>)
 800517c:	0019      	movs	r1, r3
 800517e:	2003      	movs	r0, #3
 8005180:	f009 f9a2 	bl	800e4c8 <CreateLine>
    ATCommandSend = SLEEP();
 8005184:	230f      	movs	r3, #15
 8005186:	18fc      	adds	r4, r7, r3
 8005188:	f7ff fce6 	bl	8004b58 <SLEEP>
 800518c:	0003      	movs	r3, r0
 800518e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005190:	f009 fde0 	bl	800ed54 <HAL_GetTick>
 8005194:	0003      	movs	r3, r0
 8005196:	330a      	adds	r3, #10
 8005198:	001a      	movs	r2, r3
 800519a:	4b26      	ldr	r3, [pc, #152]	@ (8005234 <AT_Send+0x370>)
 800519c:	601a      	str	r2, [r3, #0]
    break;
 800519e:	e03f      	b.n	8005220 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80051a0:	4a35      	ldr	r2, [pc, #212]	@ (8005278 <AT_Send+0x3b4>)
 80051a2:	4b26      	ldr	r3, [pc, #152]	@ (800523c <AT_Send+0x378>)
 80051a4:	0019      	movs	r1, r3
 80051a6:	2003      	movs	r0, #3
 80051a8:	f009 f98e 	bl	800e4c8 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80051ac:	230f      	movs	r3, #15
 80051ae:	18fc      	adds	r4, r7, r3
 80051b0:	f7ff fcee 	bl	8004b90 <CIPSNTPCFG>
 80051b4:	0003      	movs	r3, r0
 80051b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051b8:	f009 fdcc 	bl	800ed54 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	330a      	adds	r3, #10
 80051c0:	001a      	movs	r2, r3
 80051c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <AT_Send+0x370>)
 80051c4:	601a      	str	r2, [r3, #0]
    break;
 80051c6:	e02b      	b.n	8005220 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051c8:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <AT_Send+0x3b8>)
 80051ca:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <AT_Send+0x378>)
 80051cc:	0019      	movs	r1, r3
 80051ce:	2003      	movs	r0, #3
 80051d0:	f009 f97a 	bl	800e4c8 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051d4:	230f      	movs	r3, #15
 80051d6:	18fc      	adds	r4, r7, r3
 80051d8:	f7ff fcfa 	bl	8004bd0 <CIPSNTPTIME>
 80051dc:	0003      	movs	r3, r0
 80051de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051e0:	f009 fdb8 	bl	800ed54 <HAL_GetTick>
 80051e4:	0003      	movs	r3, r0
 80051e6:	33f5      	adds	r3, #245	@ 0xf5
 80051e8:	33ff      	adds	r3, #255	@ 0xff
 80051ea:	001a      	movs	r2, r3
 80051ec:	4b11      	ldr	r3, [pc, #68]	@ (8005234 <AT_Send+0x370>)
 80051ee:	601a      	str	r2, [r3, #0]
    break;
 80051f0:	e016      	b.n	8005220 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051f2:	4a23      	ldr	r2, [pc, #140]	@ (8005280 <AT_Send+0x3bc>)
 80051f4:	4b11      	ldr	r3, [pc, #68]	@ (800523c <AT_Send+0x378>)
 80051f6:	0019      	movs	r1, r3
 80051f8:	2003      	movs	r0, #3
 80051fa:	f009 f965 	bl	800e4c8 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80051fe:	230f      	movs	r3, #15
 8005200:	18fc      	adds	r4, r7, r3
 8005202:	f7ff fd01 	bl	8004c08 <CIPSNTPINTV>
 8005206:	0003      	movs	r3, r0
 8005208:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800520a:	f009 fda3 	bl	800ed54 <HAL_GetTick>
 800520e:	0003      	movs	r3, r0
 8005210:	330a      	adds	r3, #10
 8005212:	001a      	movs	r2, r3
 8005214:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <AT_Send+0x370>)
 8005216:	601a      	str	r2, [r3, #0]
    break;
 8005218:	e002      	b.n	8005220 <AT_Send+0x35c>

  case AT_END:
    break;
 800521a:	46c0      	nop			@ (mov r8, r8)
 800521c:	e000      	b.n	8005220 <AT_Send+0x35c>
  break;
 800521e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005220:	230f      	movs	r3, #15
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	781b      	ldrb	r3, [r3, #0]
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b005      	add	sp, #20
 800522c:	bd90      	pop	{r4, r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	08025348 	.word	0x08025348
 8005234:	20000a28 	.word	0x20000a28
 8005238:	0802391c 	.word	0x0802391c
 800523c:	0802318c 	.word	0x0802318c
 8005240:	08023928 	.word	0x08023928
 8005244:	0802393c 	.word	0x0802393c
 8005248:	08023950 	.word	0x08023950
 800524c:	08023960 	.word	0x08023960
 8005250:	08023974 	.word	0x08023974
 8005254:	0802398c 	.word	0x0802398c
 8005258:	080239a4 	.word	0x080239a4
 800525c:	080239bc 	.word	0x080239bc
 8005260:	080239d0 	.word	0x080239d0
 8005264:	080239ec 	.word	0x080239ec
 8005268:	08023a08 	.word	0x08023a08
 800526c:	08023a24 	.word	0x08023a24
 8005270:	08023a40 	.word	0x08023a40
 8005274:	08023a50 	.word	0x08023a50
 8005278:	08023a74 	.word	0x08023a74
 800527c:	08023a88 	.word	0x08023a88
 8005280:	08023aa0 	.word	0x08023aa0

08005284 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005284:	b590      	push	{r4, r7, lr}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800528a:	1dfb      	adds	r3, r7, #7
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005290:	4b7d      	ldr	r3, [pc, #500]	@ (8005488 <ESP_WakeTest+0x204>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d900      	bls.n	800529a <ESP_WakeTest+0x16>
 8005298:	e0d9      	b.n	800544e <ESP_WakeTest+0x1ca>
 800529a:	009a      	lsls	r2, r3, #2
 800529c:	4b7b      	ldr	r3, [pc, #492]	@ (800548c <ESP_WakeTest+0x208>)
 800529e:	18d3      	adds	r3, r2, r3
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80052a4:	4b7a      	ldr	r3, [pc, #488]	@ (8005490 <ESP_WakeTest+0x20c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	4053      	eors	r3, r2
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d036      	beq.n	8005320 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052b2:	2380      	movs	r3, #128	@ 0x80
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	4877      	ldr	r0, [pc, #476]	@ (8005494 <ESP_WakeTest+0x210>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	0019      	movs	r1, r3
 80052bc:	f00a ffdb 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052c0:	2032      	movs	r0, #50	@ 0x32
 80052c2:	f009 fd51 	bl	800ed68 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052c6:	2380      	movs	r3, #128	@ 0x80
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	4872      	ldr	r0, [pc, #456]	@ (8005494 <ESP_WakeTest+0x210>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	0019      	movs	r1, r3
 80052d0:	f00a ffd1 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052d4:	200a      	movs	r0, #10
 80052d6:	f009 fd47 	bl	800ed68 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052da:	4b6f      	ldr	r3, [pc, #444]	@ (8005498 <ESP_WakeTest+0x214>)
 80052dc:	2200      	movs	r2, #0
 80052de:	2101      	movs	r1, #1
 80052e0:	0018      	movs	r0, r3
 80052e2:	f00a ffc8 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052e6:	200a      	movs	r0, #10
 80052e8:	f009 fd3e 	bl	800ed68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005498 <ESP_WakeTest+0x214>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	2102      	movs	r1, #2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f00a ffbf 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052f8:	200a      	movs	r0, #10
 80052fa:	f009 fd35 	bl	800ed68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fe:	4b66      	ldr	r3, [pc, #408]	@ (8005498 <ESP_WakeTest+0x214>)
 8005300:	2201      	movs	r2, #1
 8005302:	2101      	movs	r1, #1
 8005304:	0018      	movs	r0, r3
 8005306:	f00a ffb6 	bl	8010276 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800530a:	f009 fd23 	bl	800ed54 <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	22af      	movs	r2, #175	@ 0xaf
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	189a      	adds	r2, r3, r2
 8005316:	4b61      	ldr	r3, [pc, #388]	@ (800549c <ESP_WakeTest+0x218>)
 8005318:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800531a:	4b5d      	ldr	r3, [pc, #372]	@ (8005490 <ESP_WakeTest+0x20c>)
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	005a      	lsls	r2, r3, #1
 8005324:	4b5e      	ldr	r3, [pc, #376]	@ (80054a0 <ESP_WakeTest+0x21c>)
 8005326:	0011      	movs	r1, r2
 8005328:	0018      	movs	r0, r3
 800532a:	f7fe fc37 	bl	8003b9c <ESP_Receive>
 800532e:	1e03      	subs	r3, r0, #0
 8005330:	d100      	bne.n	8005334 <ESP_WakeTest+0xb0>
 8005332:	e09f      	b.n	8005474 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005334:	4b54      	ldr	r3, [pc, #336]	@ (8005488 <ESP_WakeTest+0x204>)
 8005336:	2201      	movs	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
      }
      break;
 800533a:	e09b      	b.n	8005474 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800533c:	4b57      	ldr	r3, [pc, #348]	@ (800549c <ESP_WakeTest+0x218>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	0018      	movs	r0, r3
 8005342:	f009 f86b 	bl	800e41c <TimestampIsReached>
 8005346:	1e03      	subs	r3, r0, #0
 8005348:	d100      	bne.n	800534c <ESP_WakeTest+0xc8>
 800534a:	e095      	b.n	8005478 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800534c:	4b55      	ldr	r3, [pc, #340]	@ (80054a4 <ESP_WakeTest+0x220>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	1dfc      	adds	r4, r7, #7
 8005352:	0018      	movs	r0, r3
 8005354:	f7ff fdb6 	bl	8004ec4 <AT_Send>
 8005358:	0003      	movs	r3, r0
 800535a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d100      	bne.n	8005366 <ESP_WakeTest+0xe2>
 8005364:	e088      	b.n	8005478 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005366:	4b48      	ldr	r3, [pc, #288]	@ (8005488 <ESP_WakeTest+0x204>)
 8005368:	2202      	movs	r2, #2
 800536a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800536c:	e084      	b.n	8005478 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800536e:	4b4b      	ldr	r3, [pc, #300]	@ (800549c <ESP_WakeTest+0x218>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0018      	movs	r0, r3
 8005374:	f009 f852 	bl	800e41c <TimestampIsReached>
 8005378:	1e03      	subs	r3, r0, #0
 800537a:	d100      	bne.n	800537e <ESP_WakeTest+0xfa>
 800537c:	e07e      	b.n	800547c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800537e:	4b4a      	ldr	r3, [pc, #296]	@ (80054a8 <ESP_WakeTest+0x224>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	0018      	movs	r0, r3
 8005384:	f7ff fc5c 	bl	8004c40 <DMA_ProcessBuffer>
 8005388:	0003      	movs	r3, r0
 800538a:	001a      	movs	r2, r3
 800538c:	4b47      	ldr	r3, [pc, #284]	@ (80054ac <ESP_WakeTest+0x228>)
 800538e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005390:	4b46      	ldr	r3, [pc, #280]	@ (80054ac <ESP_WakeTest+0x228>)
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	4b44      	ldr	r3, [pc, #272]	@ (80054a8 <ESP_WakeTest+0x224>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	1dbc      	adds	r4, r7, #6
 800539a:	0019      	movs	r1, r3
 800539c:	0010      	movs	r0, r2
 800539e:	f7ff fd4f 	bl	8004e40 <ATCompare>
 80053a2:	0003      	movs	r3, r0
 80053a4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80053a6:	4b41      	ldr	r3, [pc, #260]	@ (80054ac <ESP_WakeTest+0x228>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d102      	bne.n	80053b4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80053ae:	4b36      	ldr	r3, [pc, #216]	@ (8005488 <ESP_WakeTest+0x204>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053b4:	4b3d      	ldr	r3, [pc, #244]	@ (80054ac <ESP_WakeTest+0x228>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b07      	cmp	r3, #7
 80053ba:	d104      	bne.n	80053c6 <ESP_WakeTest+0x142>
          StartProg();
 80053bc:	f7fe ff40 	bl	8004240 <StartProg>
          TestState = ESP_TEST_BOOT;
 80053c0:	4b31      	ldr	r3, [pc, #196]	@ (8005488 <ESP_WakeTest+0x204>)
 80053c2:	2205      	movs	r2, #5
 80053c4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053c6:	4b39      	ldr	r3, [pc, #228]	@ (80054ac <ESP_WakeTest+0x228>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d109      	bne.n	80053e2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053ce:	f009 fcc1 	bl	800ed54 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	3332      	adds	r3, #50	@ 0x32
 80053d6:	001a      	movs	r2, r3
 80053d8:	4b30      	ldr	r3, [pc, #192]	@ (800549c <ESP_WakeTest+0x218>)
 80053da:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <ESP_WakeTest+0x204>)
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053e2:	1dbb      	adds	r3, r7, #6
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d048      	beq.n	800547c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80053ea:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <ESP_WakeTest+0x204>)
 80053ec:	2203      	movs	r2, #3
 80053ee:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053f0:	e044      	b.n	800547c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053f2:	4b2f      	ldr	r3, [pc, #188]	@ (80054b0 <ESP_WakeTest+0x22c>)
 80053f4:	22fa      	movs	r2, #250	@ 0xfa
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80053fa:	f007 fec9 	bl	800d190 <Calculate_LED_ON>
 80053fe:	0003      	movs	r3, r0
 8005400:	001a      	movs	r2, r3
 8005402:	4b2b      	ldr	r3, [pc, #172]	@ (80054b0 <ESP_WakeTest+0x22c>)
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005406:	4b2a      	ldr	r3, [pc, #168]	@ (80054b0 <ESP_WakeTest+0x22c>)
 8005408:	22fa      	movs	r2, #250	@ 0xfa
 800540a:	0112      	lsls	r2, r2, #4
 800540c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800540e:	4b1e      	ldr	r3, [pc, #120]	@ (8005488 <ESP_WakeTest+0x204>)
 8005410:	2204      	movs	r2, #4
 8005412:	701a      	strb	r2, [r3, #0]

      break;
 8005414:	e033      	b.n	800547e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005416:	4b27      	ldr	r3, [pc, #156]	@ (80054b4 <ESP_WakeTest+0x230>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800541c:	4b1c      	ldr	r3, [pc, #112]	@ (8005490 <ESP_WakeTest+0x20c>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005422:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <ESP_WakeTest+0x214>)
 8005424:	2200      	movs	r2, #0
 8005426:	2101      	movs	r1, #1
 8005428:	0018      	movs	r0, r3
 800542a:	f00a ff24 	bl	8010276 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	4818      	ldr	r0, [pc, #96]	@ (8005494 <ESP_WakeTest+0x210>)
 8005434:	2200      	movs	r2, #0
 8005436:	0019      	movs	r1, r3
 8005438:	f00a ff1d 	bl	8010276 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800543c:	4b16      	ldr	r3, [pc, #88]	@ (8005498 <ESP_WakeTest+0x214>)
 800543e:	2200      	movs	r2, #0
 8005440:	2102      	movs	r1, #2
 8005442:	0018      	movs	r0, r3
 8005444:	f00a ff17 	bl	8010276 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005448:	f003 f818 	bl	800847c <SetESPMeasurementDone>
      break;
 800544c:	e017      	b.n	800547e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800544e:	4b0e      	ldr	r3, [pc, #56]	@ (8005488 <ESP_WakeTest+0x204>)
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
      break;
 8005454:	e013      	b.n	800547e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8005456:	4b16      	ldr	r3, [pc, #88]	@ (80054b0 <ESP_WakeTest+0x22c>)
 8005458:	22fa      	movs	r2, #250	@ 0xfa
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <ESP_WakeTest+0x22c>)
 8005460:	22fa      	movs	r2, #250	@ 0xfa
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005466:	f007 fe93 	bl	800d190 <Calculate_LED_ON>
 800546a:	0003      	movs	r3, r0
 800546c:	001a      	movs	r2, r3
 800546e:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <ESP_WakeTest+0x22c>)
 8005470:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005472:	e004      	b.n	800547e <ESP_WakeTest+0x1fa>
      break;
 8005474:	46c0      	nop			@ (mov r8, r8)
 8005476:	e002      	b.n	800547e <ESP_WakeTest+0x1fa>
      break;
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	e000      	b.n	800547e <ESP_WakeTest+0x1fa>
      break;
 800547c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b003      	add	sp, #12
 8005484:	bd90      	pop	{r4, r7, pc}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	20000a30 	.word	0x20000a30
 800548c:	0802539c 	.word	0x0802539c
 8005490:	20000554 	.word	0x20000554
 8005494:	50000800 	.word	0x50000800
 8005498:	50001c00 	.word	0x50001c00
 800549c:	20000a28 	.word	0x20000a28
 80054a0:	20000454 	.word	0x20000454
 80054a4:	20000a2e 	.word	0x20000a2e
 80054a8:	20000a2d 	.word	0x20000a2d
 80054ac:	20000031 	.word	0x20000031
 80054b0:	40000400 	.word	0x40000400
 80054b4:	20000000 	.word	0x20000000

080054b8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054c4:	4be2      	ldr	r3, [pc, #904]	@ (8005850 <ESP_Upkeep+0x398>)
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	4be2      	ldr	r3, [pc, #904]	@ (8005854 <ESP_Upkeep+0x39c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d024      	beq.n	800551a <ESP_Upkeep+0x62>
 80054d0:	f009 f874 	bl	800e5bc <GetVerboseLevel>
 80054d4:	0003      	movs	r3, r0
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d11f      	bne.n	800551a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054da:	4bdd      	ldr	r3, [pc, #884]	@ (8005850 <ESP_Upkeep+0x398>)
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	4bdd      	ldr	r3, [pc, #884]	@ (8005854 <ESP_Upkeep+0x39c>)
 80054e0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054e2:	4bdc      	ldr	r3, [pc, #880]	@ (8005854 <ESP_Upkeep+0x39c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d103      	bne.n	80054f2 <ESP_Upkeep+0x3a>
 80054ea:	4bdb      	ldr	r3, [pc, #876]	@ (8005858 <ESP_Upkeep+0x3a0>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b0e      	cmp	r3, #14
 80054f0:	d013      	beq.n	800551a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80054f2:	4bd8      	ldr	r3, [pc, #864]	@ (8005854 <ESP_Upkeep+0x39c>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	001d      	movs	r5, r3
 80054f8:	4bd7      	ldr	r3, [pc, #860]	@ (8005858 <ESP_Upkeep+0x3a0>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	0018      	movs	r0, r3
 80054fe:	4bd7      	ldr	r3, [pc, #860]	@ (800585c <ESP_Upkeep+0x3a4>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	001c      	movs	r4, r3
 8005504:	4bd6      	ldr	r3, [pc, #856]	@ (8005860 <ESP_Upkeep+0x3a8>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4ad6      	ldr	r2, [pc, #856]	@ (8005864 <ESP_Upkeep+0x3ac>)
 800550a:	49d7      	ldr	r1, [pc, #860]	@ (8005868 <ESP_Upkeep+0x3b0>)
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	9401      	str	r4, [sp, #4]
 8005510:	9000      	str	r0, [sp, #0]
 8005512:	002b      	movs	r3, r5
 8005514:	2003      	movs	r0, #3
 8005516:	f008 ffd7 	bl	800e4c8 <CreateLine>
    }
  }
  switch (EspState) {
 800551a:	4bcd      	ldr	r3, [pc, #820]	@ (8005850 <ESP_Upkeep+0x398>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d901      	bls.n	8005526 <ESP_Upkeep+0x6e>
 8005522:	f000 fc16 	bl	8005d52 <ESP_Upkeep+0x89a>
 8005526:	009a      	lsls	r2, r3, #2
 8005528:	4bd0      	ldr	r3, [pc, #832]	@ (800586c <ESP_Upkeep+0x3b4>)
 800552a:	18d3      	adds	r3, r2, r3
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005530:	4bc7      	ldr	r3, [pc, #796]	@ (8005850 <ESP_Upkeep+0x398>)
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
      break;
 8005536:	f000 fc25 	bl	8005d84 <ESP_Upkeep+0x8cc>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      DisableConnectedDevices();
 800553a:	f003 f9ff 	bl	800893c <DisableConnectedDevices>
      SetESPIndicator();
 800553e:	f007 ffb9 	bl	800d4b4 <SetESPIndicator>
      if(!EspTurnedOn){
 8005542:	4bcb      	ldr	r3, [pc, #812]	@ (8005870 <ESP_Upkeep+0x3b8>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	4053      	eors	r3, r2
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d036      	beq.n	80055be <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005550:	2380      	movs	r3, #128	@ 0x80
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	48c7      	ldr	r0, [pc, #796]	@ (8005874 <ESP_Upkeep+0x3bc>)
 8005556:	2200      	movs	r2, #0
 8005558:	0019      	movs	r1, r3
 800555a:	f00a fe8c 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800555e:	2001      	movs	r0, #1
 8005560:	f009 fc02 	bl	800ed68 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	48c2      	ldr	r0, [pc, #776]	@ (8005874 <ESP_Upkeep+0x3bc>)
 800556a:	2201      	movs	r2, #1
 800556c:	0019      	movs	r1, r3
 800556e:	f00a fe82 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005572:	2001      	movs	r0, #1
 8005574:	f009 fbf8 	bl	800ed68 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005578:	4bbf      	ldr	r3, [pc, #764]	@ (8005878 <ESP_Upkeep+0x3c0>)
 800557a:	2200      	movs	r2, #0
 800557c:	2101      	movs	r1, #1
 800557e:	0018      	movs	r0, r3
 8005580:	f00a fe79 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005584:	2001      	movs	r0, #1
 8005586:	f009 fbef 	bl	800ed68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800558a:	4bbb      	ldr	r3, [pc, #748]	@ (8005878 <ESP_Upkeep+0x3c0>)
 800558c:	2201      	movs	r2, #1
 800558e:	2102      	movs	r1, #2
 8005590:	0018      	movs	r0, r3
 8005592:	f00a fe70 	bl	8010276 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005596:	2001      	movs	r0, #1
 8005598:	f009 fbe6 	bl	800ed68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800559c:	4bb6      	ldr	r3, [pc, #728]	@ (8005878 <ESP_Upkeep+0x3c0>)
 800559e:	2201      	movs	r2, #1
 80055a0:	2101      	movs	r1, #1
 80055a2:	0018      	movs	r0, r3
 80055a4:	f00a fe67 	bl	8010276 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055a8:	f009 fbd4 	bl	800ed54 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	22af      	movs	r2, #175	@ 0xaf
 80055b0:	0092      	lsls	r2, r2, #2
 80055b2:	189a      	adds	r2, r3, r2
 80055b4:	4bb1      	ldr	r3, [pc, #708]	@ (800587c <ESP_Upkeep+0x3c4>)
 80055b6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055b8:	4bad      	ldr	r3, [pc, #692]	@ (8005870 <ESP_Upkeep+0x3b8>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	4baf      	ldr	r3, [pc, #700]	@ (8005880 <ESP_Upkeep+0x3c8>)
 80055c4:	0011      	movs	r1, r2
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7fe fae8 	bl	8003b9c <ESP_Receive>
 80055cc:	1e03      	subs	r3, r0, #0
 80055ce:	d101      	bne.n	80055d4 <ESP_Upkeep+0x11c>
 80055d0:	f000 fbcb 	bl	8005d6a <ESP_Upkeep+0x8b2>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005850 <ESP_Upkeep+0x398>)
 80055d6:	220f      	movs	r2, #15
 80055d8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055da:	f009 fbbb 	bl	800ed54 <HAL_GetTick>
 80055de:	0003      	movs	r3, r0
 80055e0:	22fa      	movs	r2, #250	@ 0xfa
 80055e2:	00d2      	lsls	r2, r2, #3
 80055e4:	189a      	adds	r2, r3, r2
 80055e6:	4ba7      	ldr	r3, [pc, #668]	@ (8005884 <ESP_Upkeep+0x3cc>)
 80055e8:	601a      	str	r2, [r3, #0]
      }
      break;
 80055ea:	f000 fbbe 	bl	8005d6a <ESP_Upkeep+0x8b2>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7ff fb26 	bl	8004c40 <DMA_ProcessBuffer>
 80055f4:	0003      	movs	r3, r0
 80055f6:	001a      	movs	r2, r3
 80055f8:	4ba3      	ldr	r3, [pc, #652]	@ (8005888 <ESP_Upkeep+0x3d0>)
 80055fa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80055fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005888 <ESP_Upkeep+0x3d0>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	1dbc      	adds	r4, r7, #6
 8005602:	2101      	movs	r1, #1
 8005604:	0018      	movs	r0, r3
 8005606:	f7ff fc1b 	bl	8004e40 <ATCompare>
 800560a:	0003      	movs	r3, r0
 800560c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800560e:	1dbb      	adds	r3, r7, #6
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d108      	bne.n	8005628 <ESP_Upkeep+0x170>
 8005616:	4b9b      	ldr	r3, [pc, #620]	@ (8005884 <ESP_Upkeep+0x3cc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	0018      	movs	r0, r3
 800561c:	f008 fefe 	bl	800e41c <TimestampIsReached>
 8005620:	1e03      	subs	r3, r0, #0
 8005622:	d101      	bne.n	8005628 <ESP_Upkeep+0x170>
 8005624:	f000 fba3 	bl	8005d6e <ESP_Upkeep+0x8b6>
          EspState = ESP_STATE_MODE_SELECT;
 8005628:	4b89      	ldr	r3, [pc, #548]	@ (8005850 <ESP_Upkeep+0x398>)
 800562a:	220b      	movs	r2, #11
 800562c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800562e:	f000 fb9e 	bl	8005d6e <ESP_Upkeep+0x8b6>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005632:	4b96      	ldr	r3, [pc, #600]	@ (800588c <ESP_Upkeep+0x3d4>)
 8005634:	2209      	movs	r2, #9
 8005636:	2114      	movs	r1, #20
 8005638:	0018      	movs	r0, r3
 800563a:	f01a fde3 	bl	8020204 <memset>
      if(!InitIsDone || WifiReset){
 800563e:	4b94      	ldr	r3, [pc, #592]	@ (8005890 <ESP_Upkeep+0x3d8>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	4053      	eors	r3, r2
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <ESP_Upkeep+0x19c>
 800564c:	4b91      	ldr	r3, [pc, #580]	@ (8005894 <ESP_Upkeep+0x3dc>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01a      	beq.n	800568a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005654:	4b8d      	ldr	r3, [pc, #564]	@ (800588c <ESP_Upkeep+0x3d4>)
 8005656:	4a90      	ldr	r2, [pc, #576]	@ (8005898 <ESP_Upkeep+0x3e0>)
 8005658:	6811      	ldr	r1, [r2, #0]
 800565a:	6019      	str	r1, [r3, #0]
 800565c:	8891      	ldrh	r1, [r2, #4]
 800565e:	8099      	strh	r1, [r3, #4]
 8005660:	7992      	ldrb	r2, [r2, #6]
 8005662:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005664:	4b7a      	ldr	r3, [pc, #488]	@ (8005850 <ESP_Upkeep+0x398>)
 8005666:	2204      	movs	r2, #4
 8005668:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800566a:	4b8c      	ldr	r3, [pc, #560]	@ (800589c <ESP_Upkeep+0x3e4>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005670:	4b7a      	ldr	r3, [pc, #488]	@ (800585c <ESP_Upkeep+0x3a4>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005676:	4b89      	ldr	r3, [pc, #548]	@ (800589c <ESP_Upkeep+0x3e4>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	001a      	movs	r2, r3
 800567c:	4b83      	ldr	r3, [pc, #524]	@ (800588c <ESP_Upkeep+0x3d4>)
 800567e:	5c9a      	ldrb	r2, [r3, r2]
 8005680:	4b75      	ldr	r3, [pc, #468]	@ (8005858 <ESP_Upkeep+0x3a0>)
 8005682:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005684:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <ESP_Upkeep+0x3a8>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800568a:	4b81      	ldr	r3, [pc, #516]	@ (8005890 <ESP_Upkeep+0x3d8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01f      	beq.n	80056d2 <ESP_Upkeep+0x21a>
 8005692:	4b83      	ldr	r3, [pc, #524]	@ (80058a0 <ESP_Upkeep+0x3e8>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	4053      	eors	r3, r2
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d018      	beq.n	80056d2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80056a0:	4b7a      	ldr	r3, [pc, #488]	@ (800588c <ESP_Upkeep+0x3d4>)
 80056a2:	4a80      	ldr	r2, [pc, #512]	@ (80058a4 <ESP_Upkeep+0x3ec>)
 80056a4:	6811      	ldr	r1, [r2, #0]
 80056a6:	6019      	str	r1, [r3, #0]
 80056a8:	8892      	ldrh	r2, [r2, #4]
 80056aa:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80056ac:	4b68      	ldr	r3, [pc, #416]	@ (8005850 <ESP_Upkeep+0x398>)
 80056ae:	2204      	movs	r2, #4
 80056b0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056b2:	4b7a      	ldr	r3, [pc, #488]	@ (800589c <ESP_Upkeep+0x3e4>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80056b8:	4b68      	ldr	r3, [pc, #416]	@ (800585c <ESP_Upkeep+0x3a4>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056be:	4b77      	ldr	r3, [pc, #476]	@ (800589c <ESP_Upkeep+0x3e4>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	001a      	movs	r2, r3
 80056c4:	4b71      	ldr	r3, [pc, #452]	@ (800588c <ESP_Upkeep+0x3d4>)
 80056c6:	5c9a      	ldrb	r2, [r3, r2]
 80056c8:	4b63      	ldr	r3, [pc, #396]	@ (8005858 <ESP_Upkeep+0x3a0>)
 80056ca:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056cc:	4b64      	ldr	r3, [pc, #400]	@ (8005860 <ESP_Upkeep+0x3a8>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005890 <ESP_Upkeep+0x3d8>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d021      	beq.n	800571e <ESP_Upkeep+0x266>
 80056da:	4b71      	ldr	r3, [pc, #452]	@ (80058a0 <ESP_Upkeep+0x3e8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01d      	beq.n	800571e <ESP_Upkeep+0x266>
 80056e2:	4b71      	ldr	r3, [pc, #452]	@ (80058a8 <ESP_Upkeep+0x3f0>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4053      	eors	r3, r2
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d016      	beq.n	800571e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056f0:	4b6e      	ldr	r3, [pc, #440]	@ (80058ac <ESP_Upkeep+0x3f4>)
 80056f2:	881a      	ldrh	r2, [r3, #0]
 80056f4:	4b65      	ldr	r3, [pc, #404]	@ (800588c <ESP_Upkeep+0x3d4>)
 80056f6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056f8:	4b55      	ldr	r3, [pc, #340]	@ (8005850 <ESP_Upkeep+0x398>)
 80056fa:	2204      	movs	r2, #4
 80056fc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056fe:	4b67      	ldr	r3, [pc, #412]	@ (800589c <ESP_Upkeep+0x3e4>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005704:	4b55      	ldr	r3, [pc, #340]	@ (800585c <ESP_Upkeep+0x3a4>)
 8005706:	2204      	movs	r2, #4
 8005708:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800570a:	4b64      	ldr	r3, [pc, #400]	@ (800589c <ESP_Upkeep+0x3e4>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	001a      	movs	r2, r3
 8005710:	4b5e      	ldr	r3, [pc, #376]	@ (800588c <ESP_Upkeep+0x3d4>)
 8005712:	5c9a      	ldrb	r2, [r3, r2]
 8005714:	4b50      	ldr	r3, [pc, #320]	@ (8005858 <ESP_Upkeep+0x3a0>)
 8005716:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005718:	4b51      	ldr	r3, [pc, #324]	@ (8005860 <ESP_Upkeep+0x3a8>)
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800571e:	4b5c      	ldr	r3, [pc, #368]	@ (8005890 <ESP_Upkeep+0x3d8>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d02c      	beq.n	8005780 <ESP_Upkeep+0x2c8>
 8005726:	4b5e      	ldr	r3, [pc, #376]	@ (80058a0 <ESP_Upkeep+0x3e8>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d028      	beq.n	8005780 <ESP_Upkeep+0x2c8>
 800572e:	4b5e      	ldr	r3, [pc, #376]	@ (80058a8 <ESP_Upkeep+0x3f0>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d024      	beq.n	8005780 <ESP_Upkeep+0x2c8>
 8005736:	4b5e      	ldr	r3, [pc, #376]	@ (80058b0 <ESP_Upkeep+0x3f8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	4053      	eors	r3, r2
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01d      	beq.n	8005780 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005744:	4b51      	ldr	r3, [pc, #324]	@ (800588c <ESP_Upkeep+0x3d4>)
 8005746:	4a5b      	ldr	r2, [pc, #364]	@ (80058b4 <ESP_Upkeep+0x3fc>)
 8005748:	8811      	ldrh	r1, [r2, #0]
 800574a:	8019      	strh	r1, [r3, #0]
 800574c:	7892      	ldrb	r2, [r2, #2]
 800574e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005750:	4b3f      	ldr	r3, [pc, #252]	@ (8005850 <ESP_Upkeep+0x398>)
 8005752:	2204      	movs	r2, #4
 8005754:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005756:	4b51      	ldr	r3, [pc, #324]	@ (800589c <ESP_Upkeep+0x3e4>)
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800575c:	4b3f      	ldr	r3, [pc, #252]	@ (800585c <ESP_Upkeep+0x3a4>)
 800575e:	2202      	movs	r2, #2
 8005760:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005762:	f009 faf7 	bl	800ed54 <HAL_GetTick>
 8005766:	0002      	movs	r2, r0
 8005768:	4b53      	ldr	r3, [pc, #332]	@ (80058b8 <ESP_Upkeep+0x400>)
 800576a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800576c:	4b4b      	ldr	r3, [pc, #300]	@ (800589c <ESP_Upkeep+0x3e4>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	001a      	movs	r2, r3
 8005772:	4b46      	ldr	r3, [pc, #280]	@ (800588c <ESP_Upkeep+0x3d4>)
 8005774:	5c9a      	ldrb	r2, [r3, r2]
 8005776:	4b38      	ldr	r3, [pc, #224]	@ (8005858 <ESP_Upkeep+0x3a0>)
 8005778:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800577a:	4b39      	ldr	r3, [pc, #228]	@ (8005860 <ESP_Upkeep+0x3a8>)
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005780:	4b43      	ldr	r3, [pc, #268]	@ (8005890 <ESP_Upkeep+0x3d8>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d027      	beq.n	80057d8 <ESP_Upkeep+0x320>
 8005788:	4b45      	ldr	r3, [pc, #276]	@ (80058a0 <ESP_Upkeep+0x3e8>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <ESP_Upkeep+0x320>
 8005790:	4b45      	ldr	r3, [pc, #276]	@ (80058a8 <ESP_Upkeep+0x3f0>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01f      	beq.n	80057d8 <ESP_Upkeep+0x320>
 8005798:	4b45      	ldr	r3, [pc, #276]	@ (80058b0 <ESP_Upkeep+0x3f8>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01b      	beq.n	80057d8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80057a0:	4b46      	ldr	r3, [pc, #280]	@ (80058bc <ESP_Upkeep+0x404>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b39      	ldr	r3, [pc, #228]	@ (800588c <ESP_Upkeep+0x3d4>)
 80057a6:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057a8:	4b29      	ldr	r3, [pc, #164]	@ (8005850 <ESP_Upkeep+0x398>)
 80057aa:	2204      	movs	r2, #4
 80057ac:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057ae:	4b3b      	ldr	r3, [pc, #236]	@ (800589c <ESP_Upkeep+0x3e4>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80057b4:	4b29      	ldr	r3, [pc, #164]	@ (800585c <ESP_Upkeep+0x3a4>)
 80057b6:	2205      	movs	r2, #5
 80057b8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80057ba:	f009 facb 	bl	800ed54 <HAL_GetTick>
 80057be:	0002      	movs	r2, r0
 80057c0:	4b3d      	ldr	r3, [pc, #244]	@ (80058b8 <ESP_Upkeep+0x400>)
 80057c2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057c4:	4b35      	ldr	r3, [pc, #212]	@ (800589c <ESP_Upkeep+0x3e4>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	001a      	movs	r2, r3
 80057ca:	4b30      	ldr	r3, [pc, #192]	@ (800588c <ESP_Upkeep+0x3d4>)
 80057cc:	5c9a      	ldrb	r2, [r3, r2]
 80057ce:	4b22      	ldr	r3, [pc, #136]	@ (8005858 <ESP_Upkeep+0x3a0>)
 80057d0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057d2:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <ESP_Upkeep+0x3a8>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80057d8:	4b39      	ldr	r3, [pc, #228]	@ (80058c0 <ESP_Upkeep+0x408>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d100      	bne.n	80057e2 <ESP_Upkeep+0x32a>
 80057e0:	e2c7      	b.n	8005d72 <ESP_Upkeep+0x8ba>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80057e2:	4b2a      	ldr	r3, [pc, #168]	@ (800588c <ESP_Upkeep+0x3d4>)
 80057e4:	4a37      	ldr	r2, [pc, #220]	@ (80058c4 <ESP_Upkeep+0x40c>)
 80057e6:	6811      	ldr	r1, [r2, #0]
 80057e8:	6019      	str	r1, [r3, #0]
 80057ea:	7912      	ldrb	r2, [r2, #4]
 80057ec:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80057ee:	4a36      	ldr	r2, [pc, #216]	@ (80058c8 <ESP_Upkeep+0x410>)
 80057f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005868 <ESP_Upkeep+0x3b0>)
 80057f2:	0019      	movs	r1, r3
 80057f4:	2003      	movs	r0, #3
 80057f6:	f008 fe67 	bl	800e4c8 <CreateLine>
        DisableConnectedDevices();
 80057fa:	f003 f89f 	bl	800893c <DisableConnectedDevices>
        usblog = false;
 80057fe:	4b33      	ldr	r3, [pc, #204]	@ (80058cc <ESP_Upkeep+0x414>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005804:	4b12      	ldr	r3, [pc, #72]	@ (8005850 <ESP_Upkeep+0x398>)
 8005806:	2204      	movs	r2, #4
 8005808:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800580a:	4b24      	ldr	r3, [pc, #144]	@ (800589c <ESP_Upkeep+0x3e4>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005810:	4b12      	ldr	r3, [pc, #72]	@ (800585c <ESP_Upkeep+0x3a4>)
 8005812:	2203      	movs	r2, #3
 8005814:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005816:	4b21      	ldr	r3, [pc, #132]	@ (800589c <ESP_Upkeep+0x3e4>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	001a      	movs	r2, r3
 800581c:	4b1b      	ldr	r3, [pc, #108]	@ (800588c <ESP_Upkeep+0x3d4>)
 800581e:	5c9a      	ldrb	r2, [r3, r2]
 8005820:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <ESP_Upkeep+0x3a0>)
 8005822:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005824:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <ESP_Upkeep+0x3a8>)
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
      }
    break;
 800582a:	e2a2      	b.n	8005d72 <ESP_Upkeep+0x8ba>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800582c:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <ESP_Upkeep+0x3a0>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	1dfc      	adds	r4, r7, #7
 8005832:	0018      	movs	r0, r3
 8005834:	f7ff fb46 	bl	8004ec4 <AT_Send>
 8005838:	0003      	movs	r3, r0
 800583a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800583c:	1dfb      	adds	r3, r7, #7
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d100      	bne.n	8005846 <ESP_Upkeep+0x38e>
 8005844:	e297      	b.n	8005d76 <ESP_Upkeep+0x8be>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005846:	4b02      	ldr	r3, [pc, #8]	@ (8005850 <ESP_Upkeep+0x398>)
 8005848:	2203      	movs	r2, #3
 800584a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800584c:	e293      	b.n	8005d76 <ESP_Upkeep+0x8be>
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	20000030 	.word	0x20000030
 8005854:	20000002 	.word	0x20000002
 8005858:	20000a2e 	.word	0x20000a2e
 800585c:	20000a2f 	.word	0x20000a2f
 8005860:	20000a2d 	.word	0x20000a2d
 8005864:	08023ac0 	.word	0x08023ac0
 8005868:	0802318c 	.word	0x0802318c
 800586c:	080253b4 	.word	0x080253b4
 8005870:	20000554 	.word	0x20000554
 8005874:	50000800 	.word	0x50000800
 8005878:	50001c00 	.word	0x50001c00
 800587c:	20000a28 	.word	0x20000a28
 8005880:	20000454 	.word	0x20000454
 8005884:	20000b40 	.word	0x20000b40
 8005888:	20000032 	.word	0x20000032
 800588c:	20000a18 	.word	0x20000a18
 8005890:	20000555 	.word	0x20000555
 8005894:	20000556 	.word	0x20000556
 8005898:	20000004 	.word	0x20000004
 800589c:	20000a22 	.word	0x20000a22
 80058a0:	20000558 	.word	0x20000558
 80058a4:	20000014 	.word	0x20000014
 80058a8:	20000559 	.word	0x20000559
 80058ac:	20000010 	.word	0x20000010
 80058b0:	20000001 	.word	0x20000001
 80058b4:	2000000c 	.word	0x2000000c
 80058b8:	2000056c 	.word	0x2000056c
 80058bc:	20000024 	.word	0x20000024
 80058c0:	20000557 	.word	0x20000557
 80058c4:	2000001c 	.word	0x2000001c
 80058c8:	08023aec 	.word	0x08023aec
 80058cc:	200001fb 	.word	0x200001fb

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80058d0:	4bc2      	ldr	r3, [pc, #776]	@ (8005bdc <ESP_Upkeep+0x724>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f008 fda1 	bl	800e41c <TimestampIsReached>
 80058da:	1e03      	subs	r3, r0, #0
 80058dc:	d100      	bne.n	80058e0 <ESP_Upkeep+0x428>
 80058de:	e24c      	b.n	8005d7a <ESP_Upkeep+0x8c2>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058e0:	4bbf      	ldr	r3, [pc, #764]	@ (8005be0 <ESP_Upkeep+0x728>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7ff f9ab 	bl	8004c40 <DMA_ProcessBuffer>
 80058ea:	0003      	movs	r3, r0
 80058ec:	001a      	movs	r2, r3
 80058ee:	4bbd      	ldr	r3, [pc, #756]	@ (8005be4 <ESP_Upkeep+0x72c>)
 80058f0:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058f2:	4bbc      	ldr	r3, [pc, #752]	@ (8005be4 <ESP_Upkeep+0x72c>)
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	4bba      	ldr	r3, [pc, #744]	@ (8005be0 <ESP_Upkeep+0x728>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	1d7c      	adds	r4, r7, #5
 80058fc:	0019      	movs	r1, r3
 80058fe:	0010      	movs	r0, r2
 8005900:	f7ff fa9e 	bl	8004e40 <ATCompare>
 8005904:	0003      	movs	r3, r0
 8005906:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005908:	4bb6      	ldr	r3, [pc, #728]	@ (8005be4 <ESP_Upkeep+0x72c>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d138      	bne.n	8005982 <ESP_Upkeep+0x4ca>
          if(ATCommand == AT_SENDDATA){
 8005910:	4bb5      	ldr	r3, [pc, #724]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b0f      	cmp	r3, #15
 8005916:	d108      	bne.n	800592a <ESP_Upkeep+0x472>
            ATCommand = AT_HTTPCPOST;
 8005918:	4bb3      	ldr	r3, [pc, #716]	@ (8005be8 <ESP_Upkeep+0x730>)
 800591a:	220e      	movs	r2, #14
 800591c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800591e:	4bb0      	ldr	r3, [pc, #704]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005920:	2202      	movs	r2, #2
 8005922:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005924:	4bb1      	ldr	r3, [pc, #708]	@ (8005bec <ESP_Upkeep+0x734>)
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800592a:	4bb1      	ldr	r3, [pc, #708]	@ (8005bf0 <ESP_Upkeep+0x738>)
 800592c:	2204      	movs	r2, #4
 800592e:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005930:	4bb0      	ldr	r3, [pc, #704]	@ (8005bf4 <ESP_Upkeep+0x73c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4bae      	ldr	r3, [pc, #696]	@ (8005bf4 <ESP_Upkeep+0x73c>)
 800593a:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 800593c:	4bad      	ldr	r3, [pc, #692]	@ (8005bf4 <ESP_Upkeep+0x73c>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d91e      	bls.n	8005982 <ESP_Upkeep+0x4ca>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005944:	f009 fa06 	bl	800ed54 <HAL_GetTick>
 8005948:	0003      	movs	r3, r0
 800594a:	4aab      	ldr	r2, [pc, #684]	@ (8005bf8 <ESP_Upkeep+0x740>)
 800594c:	189a      	adds	r2, r3, r2
 800594e:	4ba3      	ldr	r3, [pc, #652]	@ (8005bdc <ESP_Upkeep+0x724>)
 8005950:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005952:	4baa      	ldr	r3, [pc, #680]	@ (8005bfc <ESP_Upkeep+0x744>)
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005958:	f7ff fa64 	bl	8004e24 <clearDMABuffer>
            stop = HAL_GetTick();
 800595c:	f009 f9fa 	bl	800ed54 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	4ba7      	ldr	r3, [pc, #668]	@ (8005c00 <ESP_Upkeep+0x748>)
 8005964:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005966:	4ba6      	ldr	r3, [pc, #664]	@ (8005c00 <ESP_Upkeep+0x748>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4ba6      	ldr	r3, [pc, #664]	@ (8005c04 <ESP_Upkeep+0x74c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	4aa5      	ldr	r2, [pc, #660]	@ (8005c08 <ESP_Upkeep+0x750>)
 8005972:	49a6      	ldr	r1, [pc, #664]	@ (8005c0c <ESP_Upkeep+0x754>)
 8005974:	2001      	movs	r0, #1
 8005976:	f008 fda7 	bl	800e4c8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800597a:	4b9d      	ldr	r3, [pc, #628]	@ (8005bf0 <ESP_Upkeep+0x738>)
 800597c:	220d      	movs	r2, #13
 800597e:	701a      	strb	r2, [r3, #0]
            break;
 8005980:	e200      	b.n	8005d84 <ESP_Upkeep+0x8cc>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005982:	4b98      	ldr	r3, [pc, #608]	@ (8005be4 <ESP_Upkeep+0x72c>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b03      	cmp	r3, #3
 8005988:	d106      	bne.n	8005998 <ESP_Upkeep+0x4e0>
          ESPTimeStamp = HAL_GetTick() + 10;
 800598a:	f009 f9e3 	bl	800ed54 <HAL_GetTick>
 800598e:	0003      	movs	r3, r0
 8005990:	330a      	adds	r3, #10
 8005992:	001a      	movs	r2, r3
 8005994:	4b91      	ldr	r3, [pc, #580]	@ (8005bdc <ESP_Upkeep+0x724>)
 8005996:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005998:	4b92      	ldr	r3, [pc, #584]	@ (8005be4 <ESP_Upkeep+0x72c>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b0a      	cmp	r3, #10
 800599e:	d106      	bne.n	80059ae <ESP_Upkeep+0x4f6>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059a0:	f009 f9d8 	bl	800ed54 <HAL_GetTick>
 80059a4:	0003      	movs	r3, r0
 80059a6:	330a      	adds	r3, #10
 80059a8:	001a      	movs	r2, r3
 80059aa:	4b8c      	ldr	r3, [pc, #560]	@ (8005bdc <ESP_Upkeep+0x724>)
 80059ac:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059ae:	4b8d      	ldr	r3, [pc, #564]	@ (8005be4 <ESP_Upkeep+0x72c>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b06      	cmp	r3, #6
 80059b4:	d14b      	bne.n	8005a4e <ESP_Upkeep+0x596>
          timeoutcntr++;
 80059b6:	4b96      	ldr	r3, [pc, #600]	@ (8005c10 <ESP_Upkeep+0x758>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4b94      	ldr	r3, [pc, #592]	@ (8005c10 <ESP_Upkeep+0x758>)
 80059c0:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059c2:	4a94      	ldr	r2, [pc, #592]	@ (8005c14 <ESP_Upkeep+0x75c>)
 80059c4:	4b91      	ldr	r3, [pc, #580]	@ (8005c0c <ESP_Upkeep+0x754>)
 80059c6:	0019      	movs	r1, r3
 80059c8:	2001      	movs	r0, #1
 80059ca:	f008 fd7d 	bl	800e4c8 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059ce:	4b90      	ldr	r3, [pc, #576]	@ (8005c10 <ESP_Upkeep+0x758>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d924      	bls.n	8005a20 <ESP_Upkeep+0x568>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80059d6:	f009 f9bd 	bl	800ed54 <HAL_GetTick>
 80059da:	0003      	movs	r3, r0
 80059dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005c18 <ESP_Upkeep+0x760>)
 80059de:	189a      	adds	r2, r3, r2
 80059e0:	4b7e      	ldr	r3, [pc, #504]	@ (8005bdc <ESP_Upkeep+0x724>)
 80059e2:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059e4:	4b85      	ldr	r3, [pc, #532]	@ (8005bfc <ESP_Upkeep+0x744>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059ea:	f7ff fa1b 	bl	8004e24 <clearDMABuffer>
            stop = HAL_GetTick();
 80059ee:	f009 f9b1 	bl	800ed54 <HAL_GetTick>
 80059f2:	0002      	movs	r2, r0
 80059f4:	4b82      	ldr	r3, [pc, #520]	@ (8005c00 <ESP_Upkeep+0x748>)
 80059f6:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 80059f8:	4b81      	ldr	r3, [pc, #516]	@ (8005c00 <ESP_Upkeep+0x748>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b81      	ldr	r3, [pc, #516]	@ (8005c04 <ESP_Upkeep+0x74c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a86      	ldr	r2, [pc, #536]	@ (8005c1c <ESP_Upkeep+0x764>)
 8005a04:	4981      	ldr	r1, [pc, #516]	@ (8005c0c <ESP_Upkeep+0x754>)
 8005a06:	2001      	movs	r0, #1
 8005a08:	f008 fd5e 	bl	800e4c8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005a0c:	4b78      	ldr	r3, [pc, #480]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005a0e:	220d      	movs	r2, #13
 8005a10:	701a      	strb	r2, [r3, #0]
             ATCommand = AT_END;
 8005a12:	4b75      	ldr	r3, [pc, #468]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a14:	2214      	movs	r2, #20
 8005a16:	701a      	strb	r2, [r3, #0]
             ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a18:	4b71      	ldr	r3, [pc, #452]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
             break;
 8005a1e:	e1b1      	b.n	8005d84 <ESP_Upkeep+0x8cc>
          }
          if(ATCommand != AT_SENDDATA){
 8005a20:	4b71      	ldr	r3, [pc, #452]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b0f      	cmp	r3, #15
 8005a26:	d003      	beq.n	8005a30 <ESP_Upkeep+0x578>
            EspState = ESP_STATE_SEND;
 8005a28:	4b71      	ldr	r3, [pc, #452]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e00e      	b.n	8005a4e <ESP_Upkeep+0x596>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a30:	4b6d      	ldr	r3, [pc, #436]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a32:	220e      	movs	r2, #14
 8005a34:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a36:	4b6d      	ldr	r3, [pc, #436]	@ (8005bec <ESP_Upkeep+0x734>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b6b      	ldr	r3, [pc, #428]	@ (8005bec <ESP_Upkeep+0x734>)
 8005a40:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a42:	4b67      	ldr	r3, [pc, #412]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005a44:	2202      	movs	r2, #2
 8005a46:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a48:	4b69      	ldr	r3, [pc, #420]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a4e:	1d7b      	adds	r3, r7, #5
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d100      	bne.n	8005a58 <ESP_Upkeep+0x5a0>
 8005a56:	e190      	b.n	8005d7a <ESP_Upkeep+0x8c2>
          EspState = ESP_STATE_NEXT_AT;
 8005a58:	4b65      	ldr	r3, [pc, #404]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005a5a:	2205      	movs	r2, #5
 8005a5c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a5e:	e18c      	b.n	8005d7a <ESP_Upkeep+0x8c2>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005a60:	4b62      	ldr	r3, [pc, #392]	@ (8005bec <ESP_Upkeep+0x734>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	4b60      	ldr	r3, [pc, #384]	@ (8005bec <ESP_Upkeep+0x734>)
 8005a6a:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a6c:	4b5f      	ldr	r3, [pc, #380]	@ (8005bec <ESP_Upkeep+0x734>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	001a      	movs	r2, r3
 8005a72:	4b6b      	ldr	r3, [pc, #428]	@ (8005c20 <ESP_Upkeep+0x768>)
 8005a74:	5c9a      	ldrb	r2, [r3, r2]
 8005a76:	4b5c      	ldr	r3, [pc, #368]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a78:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d102      	bne.n	8005a88 <ESP_Upkeep+0x5d0>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a82:	4b57      	ldr	r3, [pc, #348]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a88:	4b57      	ldr	r3, [pc, #348]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b0e      	cmp	r3, #14
 8005a8e:	d102      	bne.n	8005a96 <ESP_Upkeep+0x5de>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a90:	4b53      	ldr	r3, [pc, #332]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005a92:	2202      	movs	r2, #2
 8005a94:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a96:	4b54      	ldr	r3, [pc, #336]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b0e      	cmp	r3, #14
 8005a9c:	d006      	beq.n	8005aac <ESP_Upkeep+0x5f4>
 8005a9e:	4b52      	ldr	r3, [pc, #328]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d002      	beq.n	8005aac <ESP_Upkeep+0x5f4>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005aac:	4b4e      	ldr	r3, [pc, #312]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b11      	cmp	r3, #17
 8005ab2:	d102      	bne.n	8005aba <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8005be0 <ESP_Upkeep+0x728>)
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005aba:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005abc:	2204      	movs	r2, #4
 8005abe:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ac0:	4b49      	ldr	r3, [pc, #292]	@ (8005be8 <ESP_Upkeep+0x730>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b14      	cmp	r3, #20
 8005ac6:	d000      	beq.n	8005aca <ESP_Upkeep+0x612>
 8005ac8:	e159      	b.n	8005d7e <ESP_Upkeep+0x8c6>
        if(Mode == AT_MODE_SEND){
 8005aca:	4b56      	ldr	r3, [pc, #344]	@ (8005c24 <ESP_Upkeep+0x76c>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d122      	bne.n	8005b18 <ESP_Upkeep+0x660>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005ad2:	f009 f93f 	bl	800ed54 <HAL_GetTick>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	4a47      	ldr	r2, [pc, #284]	@ (8005bf8 <ESP_Upkeep+0x740>)
 8005ada:	189a      	adds	r2, r3, r2
 8005adc:	4b3f      	ldr	r3, [pc, #252]	@ (8005bdc <ESP_Upkeep+0x724>)
 8005ade:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ae0:	f7ff f9a0 	bl	8004e24 <clearDMABuffer>
          stop = HAL_GetTick();
 8005ae4:	f009 f936 	bl	800ed54 <HAL_GetTick>
 8005ae8:	0002      	movs	r2, r0
 8005aea:	4b45      	ldr	r3, [pc, #276]	@ (8005c00 <ESP_Upkeep+0x748>)
 8005aec:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005aee:	4b44      	ldr	r3, [pc, #272]	@ (8005c00 <ESP_Upkeep+0x748>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b44      	ldr	r3, [pc, #272]	@ (8005c04 <ESP_Upkeep+0x74c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	4a4b      	ldr	r2, [pc, #300]	@ (8005c28 <ESP_Upkeep+0x770>)
 8005afa:	494c      	ldr	r1, [pc, #304]	@ (8005c2c <ESP_Upkeep+0x774>)
 8005afc:	2002      	movs	r0, #2
 8005afe:	f008 fce3 	bl	800e4c8 <CreateLine>
          ResetdBAmax();
 8005b02:	f002 ff39 	bl	8008978 <ResetdBAmax>
          showTime();
 8005b06:	f000 fcd1 	bl	80064ac <showTime>
          ESPTransmitDone = true;
 8005b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005bfc <ESP_Upkeep+0x744>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b10:	4b37      	ldr	r3, [pc, #220]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005b12:	220d      	movs	r2, #13
 8005b14:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b16:	e132      	b.n	8005d7e <ESP_Upkeep+0x8c6>
        else if (Mode == AT_MODE_GETTIME) {
 8005b18:	4b42      	ldr	r3, [pc, #264]	@ (8005c24 <ESP_Upkeep+0x76c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d12c      	bne.n	8005b7a <ESP_Upkeep+0x6c2>
            setTime = false;
 8005b20:	4b43      	ldr	r3, [pc, #268]	@ (8005c30 <ESP_Upkeep+0x778>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b26:	f009 f915 	bl	800ed54 <HAL_GetTick>
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	4a41      	ldr	r2, [pc, #260]	@ (8005c34 <ESP_Upkeep+0x77c>)
 8005b2e:	189a      	adds	r2, r3, r2
 8005b30:	4b41      	ldr	r3, [pc, #260]	@ (8005c38 <ESP_Upkeep+0x780>)
 8005b32:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b34:	4b40      	ldr	r3, [pc, #256]	@ (8005c38 <ESP_Upkeep+0x780>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a40      	ldr	r2, [pc, #256]	@ (8005c3c <ESP_Upkeep+0x784>)
 8005b3a:	493c      	ldr	r1, [pc, #240]	@ (8005c2c <ESP_Upkeep+0x774>)
 8005b3c:	2002      	movs	r0, #2
 8005b3e:	f008 fcc3 	bl	800e4c8 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b42:	4b3f      	ldr	r3, [pc, #252]	@ (8005c40 <ESP_Upkeep+0x788>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <ESP_Upkeep+0x724>)
 8005b48:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b4a:	f7ff f96b 	bl	8004e24 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b4e:	f009 f901 	bl	800ed54 <HAL_GetTick>
 8005b52:	0002      	movs	r2, r0
 8005b54:	4b2a      	ldr	r3, [pc, #168]	@ (8005c00 <ESP_Upkeep+0x748>)
 8005b56:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b58:	4b29      	ldr	r3, [pc, #164]	@ (8005c00 <ESP_Upkeep+0x748>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b29      	ldr	r3, [pc, #164]	@ (8005c04 <ESP_Upkeep+0x74c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a38      	ldr	r2, [pc, #224]	@ (8005c44 <ESP_Upkeep+0x78c>)
 8005b64:	4931      	ldr	r1, [pc, #196]	@ (8005c2c <ESP_Upkeep+0x774>)
 8005b66:	2002      	movs	r0, #2
 8005b68:	f008 fcae 	bl	800e4c8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b6c:	4b20      	ldr	r3, [pc, #128]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005b6e:	220d      	movs	r2, #13
 8005b70:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b72:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <ESP_Upkeep+0x76c>)
 8005b74:	2202      	movs	r2, #2
 8005b76:	701a      	strb	r2, [r3, #0]
    break;
 8005b78:	e101      	b.n	8005d7e <ESP_Upkeep+0x8c6>
          EspState = ESP_STATE_RESET;
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005b7c:	2209      	movs	r2, #9
 8005b7e:	701a      	strb	r2, [r3, #0]
    break;
 8005b80:	e0fd      	b.n	8005d7e <ESP_Upkeep+0x8c6>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005b82:	4b31      	ldr	r3, [pc, #196]	@ (8005c48 <ESP_Upkeep+0x790>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b88:	4b30      	ldr	r3, [pc, #192]	@ (8005c4c <ESP_Upkeep+0x794>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f00a fb71 	bl	8010276 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b94:	2001      	movs	r0, #1
 8005b96:	f009 f8e7 	bl	800ed68 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005b9a:	2380      	movs	r3, #128	@ 0x80
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	482c      	ldr	r0, [pc, #176]	@ (8005c50 <ESP_Upkeep+0x798>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	f00a fb67 	bl	8010276 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f009 f8dd 	bl	800ed68 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005bae:	4b27      	ldr	r3, [pc, #156]	@ (8005c4c <ESP_Upkeep+0x794>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f00a fb5e 	bl	8010276 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <ESP_Upkeep+0x738>)
 8005bbc:	2209      	movs	r2, #9
 8005bbe:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005bc0:	f002 fe92 	bl	80088e8 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	f009 f8cf 	bl	800ed68 <HAL_Delay>
      ResetESPIndicator();
 8005bca:	f007 fc8b 	bl	800d4e4 <ResetESPIndicator>
      errorcntr = 0;
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <ESP_Upkeep+0x73c>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c10 <ESP_Upkeep+0x758>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
      break;
 8005bda:	e0d3      	b.n	8005d84 <ESP_Upkeep+0x8cc>
 8005bdc:	20000a28 	.word	0x20000a28
 8005be0:	20000a2d 	.word	0x20000a2d
 8005be4:	20000032 	.word	0x20000032
 8005be8:	20000a2e 	.word	0x20000a2e
 8005bec:	20000a22 	.word	0x20000a22
 8005bf0:	20000030 	.word	0x20000030
 8005bf4:	20000a23 	.word	0x20000a23
 8005bf8:	0003a980 	.word	0x0003a980
 8005bfc:	2000055c 	.word	0x2000055c
 8005c00:	20000570 	.word	0x20000570
 8005c04:	2000056c 	.word	0x2000056c
 8005c08:	08023b1c 	.word	0x08023b1c
 8005c0c:	08023178 	.word	0x08023178
 8005c10:	20000a24 	.word	0x20000a24
 8005c14:	08023b50 	.word	0x08023b50
 8005c18:	0000c350 	.word	0x0000c350
 8005c1c:	08023b8c 	.word	0x08023b8c
 8005c20:	20000a18 	.word	0x20000a18
 8005c24:	20000a2f 	.word	0x20000a2f
 8005c28:	08023bbc 	.word	0x08023bbc
 8005c2c:	08023bd4 	.word	0x08023bd4
 8005c30:	20000001 	.word	0x20000001
 8005c34:	047e7c4f 	.word	0x047e7c4f
 8005c38:	20000028 	.word	0x20000028
 8005c3c:	08023bd8 	.word	0x08023bd8
 8005c40:	2000002c 	.word	0x2000002c
 8005c44:	08023c1c 	.word	0x08023c1c
 8005c48:	20000554 	.word	0x20000554
 8005c4c:	50001c00 	.word	0x50001c00
 8005c50:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c54:	4b4e      	ldr	r3, [pc, #312]	@ (8005d90 <ESP_Upkeep+0x8d8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f008 fbdf 	bl	800e41c <TimestampIsReached>
 8005c5e:	1e03      	subs	r3, r0, #0
 8005c60:	d103      	bne.n	8005c6a <ESP_Upkeep+0x7b2>
 8005c62:	4b4c      	ldr	r3, [pc, #304]	@ (8005d94 <ESP_Upkeep+0x8dc>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d038      	beq.n	8005cdc <ESP_Upkeep+0x824>
        ESPTransmitDone = false;
 8005c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d98 <ESP_Upkeep+0x8e0>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c70:	4b4a      	ldr	r3, [pc, #296]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <ESP_Upkeep+0x7cc>
          InitIsDone = true;
 8005c78:	4b49      	ldr	r3, [pc, #292]	@ (8005da0 <ESP_Upkeep+0x8e8>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c7e:	4b49      	ldr	r3, [pc, #292]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005c80:	220b      	movs	r2, #11
 8005c82:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c84:	4b45      	ldr	r3, [pc, #276]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d108      	bne.n	8005c9e <ESP_Upkeep+0x7e6>
          ConnectionMade = true;
 8005c8c:	4b46      	ldr	r3, [pc, #280]	@ (8005da8 <ESP_Upkeep+0x8f0>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005c92:	4b46      	ldr	r3, [pc, #280]	@ (8005dac <ESP_Upkeep+0x8f4>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c98:	4b42      	ldr	r3, [pc, #264]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005c9a:	220b      	movs	r2, #11
 8005c9c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d102      	bne.n	8005cac <ESP_Upkeep+0x7f4>
          EspState = ESP_STATE_INIT;
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cac:	4b3b      	ldr	r3, [pc, #236]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d108      	bne.n	8005cc6 <ESP_Upkeep+0x80e>
          EspState = ESP_STATE_CONFIG;
 8005cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005cb6:	220e      	movs	r2, #14
 8005cb8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005cba:	4a3d      	ldr	r2, [pc, #244]	@ (8005db0 <ESP_Upkeep+0x8f8>)
 8005cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8005db4 <ESP_Upkeep+0x8fc>)
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	2002      	movs	r0, #2
 8005cc2:	f008 fc01 	bl	800e4c8 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cc6:	4b35      	ldr	r3, [pc, #212]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d11f      	bne.n	8005d0e <ESP_Upkeep+0x856>
          EspState = ESP_STATE_MODE_SELECT;
 8005cce:	4b35      	ldr	r3, [pc, #212]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005cd0:	220b      	movs	r2, #11
 8005cd2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005cd4:	4b38      	ldr	r3, [pc, #224]	@ (8005db8 <ESP_Upkeep+0x900>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005cda:	e018      	b.n	8005d0e <ESP_Upkeep+0x856>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005cdc:	4b37      	ldr	r3, [pc, #220]	@ (8005dbc <ESP_Upkeep+0x904>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f008 fb9b 	bl	800e41c <TimestampIsReached>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d04b      	beq.n	8005d82 <ESP_Upkeep+0x8ca>
        if(Mode == AT_MODE_SEND ) {
 8005cea:	4b2c      	ldr	r3, [pc, #176]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d147      	bne.n	8005d82 <ESP_Upkeep+0x8ca>
            Mode = AT_MODE_GETTIME;
 8005cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8005d9c <ESP_Upkeep+0x8e4>)
 8005cf4:	2205      	movs	r2, #5
 8005cf6:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005cfe:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <ESP_Upkeep+0x8d8>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <ESP_Upkeep+0x908>)
 8005d04:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005d06:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc4 <ESP_Upkeep+0x90c>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d0c:	e039      	b.n	8005d82 <ESP_Upkeep+0x8ca>
 8005d0e:	e038      	b.n	8005d82 <ESP_Upkeep+0x8ca>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d10:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc8 <ESP_Upkeep+0x910>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4053      	eors	r3, r2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d008      	beq.n	8005d30 <ESP_Upkeep+0x878>
        Info("Do nothing until reset");
 8005d1e:	4a24      	ldr	r2, [pc, #144]	@ (8005db0 <ESP_Upkeep+0x8f8>)
 8005d20:	4b24      	ldr	r3, [pc, #144]	@ (8005db4 <ESP_Upkeep+0x8fc>)
 8005d22:	0019      	movs	r1, r3
 8005d24:	2002      	movs	r0, #2
 8005d26:	f008 fbcf 	bl	800e4c8 <CreateLine>
        msgdone = true;
 8005d2a:	4b27      	ldr	r3, [pc, #156]	@ (8005dc8 <ESP_Upkeep+0x910>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d30:	f017 f850 	bl	801cdd4 <GetUsbRxPointer>
 8005d34:	0003      	movs	r3, r0
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 f8c0 	bl	8005ebc <Process_PC_Config>
      break;
 8005d3c:	e022      	b.n	8005d84 <ESP_Upkeep+0x8cc>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d3e:	4a23      	ldr	r2, [pc, #140]	@ (8005dcc <ESP_Upkeep+0x914>)
 8005d40:	4b23      	ldr	r3, [pc, #140]	@ (8005dd0 <ESP_Upkeep+0x918>)
 8005d42:	0019      	movs	r1, r3
 8005d44:	2001      	movs	r0, #1
 8005d46:	f008 fbbf 	bl	800e4c8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	701a      	strb	r2, [r3, #0]
      break;
 8005d50:	e018      	b.n	8005d84 <ESP_Upkeep+0x8cc>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d52:	4a20      	ldr	r2, [pc, #128]	@ (8005dd4 <ESP_Upkeep+0x91c>)
 8005d54:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <ESP_Upkeep+0x918>)
 8005d56:	0019      	movs	r1, r3
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f008 fbb5 	bl	800e4c8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005d60:	2207      	movs	r2, #7
 8005d62:	701a      	strb	r2, [r3, #0]
      break;
 8005d64:	e00e      	b.n	8005d84 <ESP_Upkeep+0x8cc>
      break;
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	e00c      	b.n	8005d84 <ESP_Upkeep+0x8cc>
      break;
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	e00a      	b.n	8005d84 <ESP_Upkeep+0x8cc>
        break;
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	e008      	b.n	8005d84 <ESP_Upkeep+0x8cc>
    break;
 8005d72:	46c0      	nop			@ (mov r8, r8)
 8005d74:	e006      	b.n	8005d84 <ESP_Upkeep+0x8cc>
    break;
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	e004      	b.n	8005d84 <ESP_Upkeep+0x8cc>
      break;
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	e002      	b.n	8005d84 <ESP_Upkeep+0x8cc>
    break;
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	e000      	b.n	8005d84 <ESP_Upkeep+0x8cc>
      break;
 8005d82:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005d84:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <ESP_Upkeep+0x8ec>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d90:	20000a28 	.word	0x20000a28
 8005d94:	20000557 	.word	0x20000557
 8005d98:	2000055c 	.word	0x2000055c
 8005d9c:	20000a2f 	.word	0x20000a2f
 8005da0:	20000555 	.word	0x20000555
 8005da4:	20000030 	.word	0x20000030
 8005da8:	20000558 	.word	0x20000558
 8005dac:	2000055a 	.word	0x2000055a
 8005db0:	08023c3c 	.word	0x08023c3c
 8005db4:	08023bd4 	.word	0x08023bd4
 8005db8:	20000559 	.word	0x20000559
 8005dbc:	20000028 	.word	0x20000028
 8005dc0:	2000002c 	.word	0x2000002c
 8005dc4:	20000001 	.word	0x20000001
 8005dc8:	2000055b 	.word	0x2000055b
 8005dcc:	08023c54 	.word	0x08023c54
 8005dd0:	08023178 	.word	0x08023178
 8005dd4:	08023c68 	.word	0x08023c68

08005dd8 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005de0:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <I2CSensors_Init+0x30>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005de6:	4a09      	ldr	r2, [pc, #36]	@ (8005e0c <I2CSensors_Init+0x34>)
 8005de8:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <I2CSensors_Init+0x38>)
 8005dea:	0011      	movs	r1, r2
 8005dec:	0018      	movs	r0, r3
 8005dee:	f008 fccf 	bl	800e790 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005df2:	4a06      	ldr	r2, [pc, #24]	@ (8005e0c <I2CSensors_Init+0x34>)
 8005df4:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <I2CSensors_Init+0x38>)
 8005df6:	0011      	movs	r1, r2
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f005 fc85 	bl	800b708 <SGP_Init>
}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b002      	add	sp, #8
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	20000b44 	.word	0x20000b44
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e15 	.word	0x08005e15

08005e14 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e14:	b5b0      	push	{r4, r5, r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6039      	str	r1, [r7, #0]
 8005e1c:	0011      	movs	r1, r2
 8005e1e:	1dfb      	adds	r3, r7, #7
 8005e20:	1c02      	adds	r2, r0, #0
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	1dbb      	adds	r3, r7, #6
 8005e26:	1c0a      	adds	r2, r1, #0
 8005e28:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e64 <ReadI2C+0x50>)
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	18db      	adds	r3, r3, r3
 8005e36:	b299      	uxth	r1, r3
 8005e38:	1dbb      	adds	r3, r7, #6
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	250f      	movs	r5, #15
 8005e40:	197c      	adds	r4, r7, r5
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	f00a fdfc 	bl	8010a40 <HAL_I2C_Master_Receive_DMA>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e4c:	197b      	adds	r3, r7, r5
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <ReadI2C+0x44>
        return false;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e000      	b.n	8005e5a <ReadI2C+0x46>
    }
    return true;
 8005e58:	2301      	movs	r3, #1
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b004      	add	sp, #16
 8005e60:	bdb0      	pop	{r4, r5, r7, pc}
 8005e62:	46c0      	nop			@ (mov r8, r8)
 8005e64:	20000b44 	.word	0x20000b44

08005e68 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6039      	str	r1, [r7, #0]
 8005e70:	0011      	movs	r1, r2
 8005e72:	1dfb      	adds	r3, r7, #7
 8005e74:	1c02      	adds	r2, r0, #0
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	1dbb      	adds	r3, r7, #6
 8005e7a:	1c0a      	adds	r2, r1, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <WriteI2C+0x50>)
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	1dfb      	adds	r3, r7, #7
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	18db      	adds	r3, r3, r3
 8005e8a:	b299      	uxth	r1, r3
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	250f      	movs	r5, #15
 8005e94:	197c      	adds	r4, r7, r5
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	f00a fccc 	bl	8010834 <HAL_I2C_Master_Transmit_DMA>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ea0:	197b      	adds	r3, r7, r5
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <WriteI2C+0x44>
        return false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <WriteI2C+0x46>
    }
    return true;
 8005eac:	2301      	movs	r3, #1
}
 8005eae:	0018      	movs	r0, r3
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b004      	add	sp, #16
 8005eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb6:	46c0      	nop			@ (mov r8, r8)
 8005eb8:	20000b44 	.word	0x20000b44

08005ebc <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b0c3      	sub	sp, #268	@ 0x10c
 8005ec0:	af3e      	add	r7, sp, #248	@ 0xf8
 8005ec2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005ec4:	f016 ffa6 	bl	801ce14 <GetUsbRxDataSize>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d971      	bls.n	8005fb6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2123      	movs	r1, #35	@ 0x23
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f01a f99c 	bl	8020214 <strchr>
 8005edc:	0003      	movs	r3, r0
 8005ede:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d065      	beq.n	8005fb2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	785a      	ldrb	r2, [r3, #1]
 8005eea:	4b34      	ldr	r3, [pc, #208]	@ (8005fbc <Process_PC_Config+0x100>)
 8005eec:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	789a      	ldrb	r2, [r3, #2]
 8005ef2:	4b32      	ldr	r3, [pc, #200]	@ (8005fbc <Process_PC_Config+0x100>)
 8005ef4:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005ef6:	4b31      	ldr	r3, [pc, #196]	@ (8005fbc <Process_PC_Config+0x100>)
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	3305      	adds	r3, #5
 8005efc:	001a      	movs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d351      	bcc.n	8005fa8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	1cd9      	adds	r1, r3, #3
 8005f08:	4b2c      	ldr	r3, [pc, #176]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <Process_PC_Config+0x104>)
 8005f10:	0018      	movs	r0, r3
 8005f12:	f01a fa53 	bl	80203bc <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f16:	4b29      	ldr	r3, [pc, #164]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	3303      	adds	r3, #3
 8005f1c:	001a      	movs	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	189b      	adds	r3, r3, r2
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	4b24      	ldr	r3, [pc, #144]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	18cb      	adds	r3, r1, r3
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	4313      	orrs	r3, r2
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	b299      	uxth	r1, r3
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f3e:	2381      	movs	r3, #129	@ 0x81
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f44:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f46:	2381      	movs	r3, #129	@ 0x81
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	5ad4      	ldrh	r4, [r2, r3]
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	3303      	adds	r3, #3
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0011      	movs	r1, r2
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f975 	bl	8006248 <CRC16_ARC>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	429c      	cmp	r4, r3
 8005f62:	d007      	beq.n	8005f74 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f64:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f66:	785a      	ldrb	r2, [r3, #1]
 8005f68:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <Process_PC_Config+0x104>)
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f000 f919 	bl	80061a4 <Create_Message>
 8005f72:	e016      	b.n	8005fa2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f74:	4c11      	ldr	r4, [pc, #68]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f76:	466b      	mov	r3, sp
 8005f78:	0018      	movs	r0, r3
 8005f7a:	0023      	movs	r3, r4
 8005f7c:	3310      	adds	r3, #16
 8005f7e:	22f4      	movs	r2, #244	@ 0xf4
 8005f80:	0019      	movs	r1, r3
 8005f82:	f01a fa1b 	bl	80203bc <memcpy>
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	6861      	ldr	r1, [r4, #4]
 8005f8a:	68a2      	ldr	r2, [r4, #8]
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	f000 f819 	bl	8005fc4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005f92:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f94:	7818      	ldrb	r0, [r3, #0]
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f98:	785a      	ldrb	r2, [r3, #1]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <Process_PC_Config+0x104>)
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	f000 f901 	bl	80061a4 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005fa2:	f016 ff1f 	bl	801cde4 <ResetUsbRxDataSize>
                return;
 8005fa6:	e006      	b.n	8005fb6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f016 ff3c 	bl	801ce28 <GetUsbRxNextChunk>
 8005fb0:	e001      	b.n	8005fb6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005fb2:	f016 ff17 	bl	801cde4 <ResetUsbRxDataSize>
        }
    }
}
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b005      	add	sp, #20
 8005fba:	bd90      	pop	{r4, r7, pc}
 8005fbc:	20000b48 	.word	0x20000b48
 8005fc0:	20000b4a 	.word	0x20000b4a

08005fc4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	b5b0      	push	{r4, r5, r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	2518      	movs	r5, #24
 8005fce:	197c      	adds	r4, r7, r5
 8005fd0:	6020      	str	r0, [r4, #0]
 8005fd2:	6061      	str	r1, [r4, #4]
 8005fd4:	60a2      	str	r2, [r4, #8]
 8005fd6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005fd8:	197b      	adds	r3, r7, r5
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2bfe      	cmp	r3, #254	@ 0xfe
 8005fde:	d100      	bne.n	8005fe2 <ProcessCmd+0x1e>
 8005fe0:	e09c      	b.n	800611c <ProcessCmd+0x158>
 8005fe2:	dd00      	ble.n	8005fe6 <ProcessCmd+0x22>
 8005fe4:	e0bc      	b.n	8006160 <ProcessCmd+0x19c>
 8005fe6:	2b0c      	cmp	r3, #12
 8005fe8:	dc0a      	bgt.n	8006000 <ProcessCmd+0x3c>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da00      	bge.n	8005ff0 <ProcessCmd+0x2c>
 8005fee:	e0b7      	b.n	8006160 <ProcessCmd+0x19c>
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d900      	bls.n	8005ff6 <ProcessCmd+0x32>
 8005ff4:	e0b4      	b.n	8006160 <ProcessCmd+0x19c>
 8005ff6:	009a      	lsls	r2, r3, #2
 8005ff8:	4b5d      	ldr	r3, [pc, #372]	@ (8006170 <ProcessCmd+0x1ac>)
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	469f      	mov	pc, r3
 8006000:	2bfd      	cmp	r3, #253	@ 0xfd
 8006002:	d100      	bne.n	8006006 <ProcessCmd+0x42>
 8006004:	e084      	b.n	8006110 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8006006:	e0ab      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006008:	2118      	movs	r1, #24
 800600a:	187b      	adds	r3, r7, r1
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	001a      	movs	r2, r3
 8006010:	187b      	adds	r3, r7, r1
 8006012:	1c99      	adds	r1, r3, #2
 8006014:	4857      	ldr	r0, [pc, #348]	@ (8006174 <ProcessCmd+0x1b0>)
 8006016:	230c      	movs	r3, #12
 8006018:	f7fd fb52 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800601c:	e0a0      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800601e:	2118      	movs	r1, #24
 8006020:	187b      	adds	r3, r7, r1
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	001a      	movs	r2, r3
 8006026:	187b      	adds	r3, r7, r1
 8006028:	1c99      	adds	r1, r3, #2
 800602a:	4853      	ldr	r0, [pc, #332]	@ (8006178 <ProcessCmd+0x1b4>)
 800602c:	230c      	movs	r3, #12
 800602e:	f7fd fb47 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006032:	e095      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006034:	2118      	movs	r1, #24
 8006036:	187b      	adds	r3, r7, r1
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	001a      	movs	r2, r3
 800603c:	187b      	adds	r3, r7, r1
 800603e:	1c99      	adds	r1, r3, #2
 8006040:	484e      	ldr	r0, [pc, #312]	@ (800617c <ProcessCmd+0x1b8>)
 8006042:	230c      	movs	r3, #12
 8006044:	f7fd fb3c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006048:	e08a      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800604a:	2118      	movs	r1, #24
 800604c:	187b      	adds	r3, r7, r1
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	001a      	movs	r2, r3
 8006052:	187b      	adds	r3, r7, r1
 8006054:	1c99      	adds	r1, r3, #2
 8006056:	484a      	ldr	r0, [pc, #296]	@ (8006180 <ProcessCmd+0x1bc>)
 8006058:	230c      	movs	r3, #12
 800605a:	f7fd fb31 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800605e:	e07f      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006060:	2118      	movs	r1, #24
 8006062:	187b      	adds	r3, r7, r1
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	001a      	movs	r2, r3
 8006068:	187b      	adds	r3, r7, r1
 800606a:	1c99      	adds	r1, r3, #2
 800606c:	4845      	ldr	r0, [pc, #276]	@ (8006184 <ProcessCmd+0x1c0>)
 800606e:	230c      	movs	r3, #12
 8006070:	f7fd fb26 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006074:	e074      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006076:	2118      	movs	r1, #24
 8006078:	187b      	adds	r3, r7, r1
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	001a      	movs	r2, r3
 800607e:	187b      	adds	r3, r7, r1
 8006080:	1c99      	adds	r1, r3, #2
 8006082:	4841      	ldr	r0, [pc, #260]	@ (8006188 <ProcessCmd+0x1c4>)
 8006084:	230c      	movs	r3, #12
 8006086:	f7fd fb1b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800608a:	e069      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800608c:	2118      	movs	r1, #24
 800608e:	187b      	adds	r3, r7, r1
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	001a      	movs	r2, r3
 8006094:	187b      	adds	r3, r7, r1
 8006096:	1c99      	adds	r1, r3, #2
 8006098:	483c      	ldr	r0, [pc, #240]	@ (800618c <ProcessCmd+0x1c8>)
 800609a:	230c      	movs	r3, #12
 800609c:	f7fd fb10 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060a0:	e05e      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80060a2:	2118      	movs	r1, #24
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	001a      	movs	r2, r3
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	1c99      	adds	r1, r3, #2
 80060ae:	4838      	ldr	r0, [pc, #224]	@ (8006190 <ProcessCmd+0x1cc>)
 80060b0:	231e      	movs	r3, #30
 80060b2:	f7fd fb05 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b6:	e053      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060b8:	2118      	movs	r1, #24
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	001a      	movs	r2, r3
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	1c99      	adds	r1, r3, #2
 80060c4:	4833      	ldr	r0, [pc, #204]	@ (8006194 <ProcessCmd+0x1d0>)
 80060c6:	230c      	movs	r3, #12
 80060c8:	f7fd fafa 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060cc:	e048      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060ce:	2118      	movs	r1, #24
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	001a      	movs	r2, r3
 80060d6:	187b      	adds	r3, r7, r1
 80060d8:	1c99      	adds	r1, r3, #2
 80060da:	482f      	ldr	r0, [pc, #188]	@ (8006198 <ProcessCmd+0x1d4>)
 80060dc:	230c      	movs	r3, #12
 80060de:	f7fd faef 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060e2:	e03d      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060e4:	2118      	movs	r1, #24
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	001a      	movs	r2, r3
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	1c99      	adds	r1, r3, #2
 80060f0:	482a      	ldr	r0, [pc, #168]	@ (800619c <ProcessCmd+0x1d8>)
 80060f2:	230c      	movs	r3, #12
 80060f4:	f7fd fae4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060f8:	e032      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060fa:	2118      	movs	r1, #24
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	001a      	movs	r2, r3
 8006102:	187b      	adds	r3, r7, r1
 8006104:	1c99      	adds	r1, r3, #2
 8006106:	4826      	ldr	r0, [pc, #152]	@ (80061a0 <ProcessCmd+0x1dc>)
 8006108:	230c      	movs	r3, #12
 800610a:	f7fd fad9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800610e:	e027      	b.n	8006160 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006110:	4b18      	ldr	r3, [pc, #96]	@ (8006174 <ProcessCmd+0x1b0>)
 8006112:	21ba      	movs	r1, #186	@ 0xba
 8006114:	0018      	movs	r0, r3
 8006116:	f7fd fb18 	bl	800374a <ClearEEprom>
        break;
 800611a:	e021      	b.n	8006160 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800611c:	2118      	movs	r1, #24
 800611e:	187b      	adds	r3, r7, r1
 8006120:	789b      	ldrb	r3, [r3, #2]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b21a      	sxth	r2, r3
 8006126:	187b      	adds	r3, r7, r1
 8006128:	78db      	ldrb	r3, [r3, #3]
 800612a:	b21b      	sxth	r3, r3
 800612c:	4313      	orrs	r3, r2
 800612e:	b21a      	sxth	r2, r3
 8006130:	1dbb      	adds	r3, r7, #6
 8006132:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006134:	1dbb      	adds	r3, r7, #6
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	23c0      	movs	r3, #192	@ 0xc0
 800613a:	015b      	lsls	r3, r3, #5
 800613c:	429a      	cmp	r2, r3
 800613e:	d207      	bcs.n	8006150 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006140:	1dbb      	adds	r3, r7, #6
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	4a0b      	ldr	r2, [pc, #44]	@ (8006174 <ProcessCmd+0x1b0>)
 8006146:	0019      	movs	r1, r3
 8006148:	0010      	movs	r0, r2
 800614a:	f7fd fafe 	bl	800374a <ClearEEprom>
            break;
 800614e:	e006      	b.n	800615e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006150:	23c0      	movs	r3, #192	@ 0xc0
 8006152:	015b      	lsls	r3, r3, #5
 8006154:	4a07      	ldr	r2, [pc, #28]	@ (8006174 <ProcessCmd+0x1b0>)
 8006156:	0019      	movs	r1, r3
 8006158:	0010      	movs	r0, r2
 800615a:	f7fd faf6 	bl	800374a <ClearEEprom>
            break;
 800615e:	46c0      	nop			@ (mov r8, r8)
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bcb0      	pop	{r4, r5, r7}
 8006168:	bc08      	pop	{r3}
 800616a:	b004      	add	sp, #16
 800616c:	4718      	bx	r3
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	080253f4 	.word	0x080253f4
 8006174:	08080000 	.word	0x08080000
 8006178:	0808000c 	.word	0x0808000c
 800617c:	08080018 	.word	0x08080018
 8006180:	08080024 	.word	0x08080024
 8006184:	08080030 	.word	0x08080030
 8006188:	0808003c 	.word	0x0808003c
 800618c:	08080048 	.word	0x08080048
 8006190:	08080090 	.word	0x08080090
 8006194:	08080078 	.word	0x08080078
 8006198:	0808006c 	.word	0x0808006c
 800619c:	08080060 	.word	0x08080060
 80061a0:	08080054 	.word	0x08080054

080061a4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80061a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6039      	str	r1, [r7, #0]
 80061ac:	0011      	movs	r1, r2
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	1c02      	adds	r2, r0, #0
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	1dbb      	adds	r3, r7, #6
 80061b6:	1c0a      	adds	r2, r1, #0
 80061b8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061ba:	2223      	movs	r2, #35	@ 0x23
 80061bc:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <Create_Message+0x9c>)
 80061be:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006240 <Create_Message+0x9c>)
 80061c2:	1dfa      	adds	r2, r7, #7
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <Create_Message+0x9c>)
 80061ca:	1dba      	adds	r2, r7, #6
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061d0:	1dbb      	adds	r3, r7, #6
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <Create_Message+0xa0>)
 80061d8:	0018      	movs	r0, r3
 80061da:	f01a f8ef 	bl	80203bc <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80061de:	1dbb      	adds	r3, r7, #6
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	250e      	movs	r5, #14
 80061e6:	197b      	adds	r3, r7, r5
 80061e8:	3203      	adds	r2, #3
 80061ea:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80061ec:	260c      	movs	r6, #12
 80061ee:	19bc      	adds	r4, r7, r6
 80061f0:	197b      	adds	r3, r7, r5
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	4b12      	ldr	r3, [pc, #72]	@ (8006240 <Create_Message+0x9c>)
 80061f6:	0011      	movs	r1, r2
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 f825 	bl	8006248 <CRC16_ARC>
 80061fe:	0003      	movs	r3, r0
 8006200:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006202:	0030      	movs	r0, r6
 8006204:	183b      	adds	r3, r7, r0
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b29a      	uxth	r2, r3
 800620c:	197b      	adds	r3, r7, r5
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b2d1      	uxtb	r1, r2
 8006212:	4a0b      	ldr	r2, [pc, #44]	@ (8006240 <Create_Message+0x9c>)
 8006214:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006216:	197b      	adds	r3, r7, r5
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	183a      	adds	r2, r7, r0
 800621e:	8812      	ldrh	r2, [r2, #0]
 8006220:	b2d1      	uxtb	r1, r2
 8006222:	4a07      	ldr	r2, [pc, #28]	@ (8006240 <Create_Message+0x9c>)
 8006224:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006226:	197b      	adds	r3, r7, r5
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	3302      	adds	r3, #2
 800622c:	b29a      	uxth	r2, r3
 800622e:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <Create_Message+0x9c>)
 8006230:	0011      	movs	r1, r2
 8006232:	0018      	movs	r0, r3
 8006234:	f016 fd94 	bl	801cd60 <CDC_Transmit_FS>
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b005      	add	sp, #20
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006240:	20000c4c 	.word	0x20000c4c
 8006244:	20000c4f 	.word	0x20000c4f

08006248 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	000a      	movs	r2, r1
 8006252:	1cbb      	adds	r3, r7, #2
 8006254:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006256:	2316      	movs	r3, #22
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	2200      	movs	r2, #0
 800625c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	e02e      	b.n	80062c2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	18d3      	adds	r3, r2, r3
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	0019      	movs	r1, r3
 800626e:	2216      	movs	r2, #22
 8006270:	18bb      	adds	r3, r7, r2
 8006272:	18ba      	adds	r2, r7, r2
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	404a      	eors	r2, r1
 8006278:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e01a      	b.n	80062b6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006280:	2116      	movs	r1, #22
 8006282:	187b      	adds	r3, r7, r1
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	4013      	ands	r3, r2
 800628a:	d00b      	beq.n	80062a4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 800628c:	187b      	adds	r3, r7, r1
 800628e:	187a      	adds	r2, r7, r1
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8006296:	187b      	adds	r3, r7, r1
 8006298:	187a      	adds	r2, r7, r1
 800629a:	8812      	ldrh	r2, [r2, #0]
 800629c:	490f      	ldr	r1, [pc, #60]	@ (80062dc <CRC16_ARC+0x94>)
 800629e:	404a      	eors	r2, r1
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e005      	b.n	80062b0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80062a4:	2216      	movs	r2, #22
 80062a6:	18bb      	adds	r3, r7, r2
 80062a8:	18ba      	adds	r2, r7, r2
 80062aa:	8812      	ldrh	r2, [r2, #0]
 80062ac:	0852      	lsrs	r2, r2, #1
 80062ae:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b07      	cmp	r3, #7
 80062ba:	dde1      	ble.n	8006280 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	3301      	adds	r3, #1
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	1cbb      	adds	r3, r7, #2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	dbcb      	blt.n	8006264 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062cc:	2316      	movs	r3, #22
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	881b      	ldrh	r3, [r3, #0]
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b006      	add	sp, #24
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	ffffa001 	.word	0xffffa001

080062e0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80062e4:	4b26      	ldr	r3, [pc, #152]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 80062e6:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <ReadBatteryVoltage+0xa4>)
 80062e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80062ea:	4b25      	ldr	r3, [pc, #148]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 80062ec:	2280      	movs	r2, #128	@ 0x80
 80062ee:	0152      	lsls	r2, r2, #5
 80062f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80062f2:	4a23      	ldr	r2, [pc, #140]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 80062f4:	4b24      	ldr	r3, [pc, #144]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 80062f6:	0011      	movs	r1, r2
 80062f8:	0018      	movs	r0, r3
 80062fa:	f009 f803 	bl	800f304 <HAL_ADC_ConfigChannel>
 80062fe:	1e03      	subs	r3, r0, #0
 8006300:	d001      	beq.n	8006306 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006302:	f002 f803 	bl	800830c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006306:	4b20      	ldr	r3, [pc, #128]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 8006308:	0018      	movs	r0, r3
 800630a:	f008 feff 	bl	800f10c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800630e:	4b1e      	ldr	r3, [pc, #120]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 8006310:	2101      	movs	r1, #1
 8006312:	0018      	movs	r0, r3
 8006314:	f008 ff4e 	bl	800f1b4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006318:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 800631a:	0018      	movs	r0, r3
 800631c:	f008 ffe6 	bl	800f2ec <HAL_ADC_GetValue>
 8006320:	0002      	movs	r2, r0
 8006322:	4b1a      	ldr	r3, [pc, #104]	@ (800638c <ReadBatteryVoltage+0xac>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4353      	muls	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4919      	ldr	r1, [pc, #100]	@ (8006390 <ReadBatteryVoltage+0xb0>)
 800632c:	0018      	movs	r0, r3
 800632e:	f7f9 ff39 	bl	80001a4 <__udivsi3>
 8006332:	0003      	movs	r3, r0
 8006334:	001a      	movs	r2, r3
 8006336:	4b17      	ldr	r3, [pc, #92]	@ (8006394 <ReadBatteryVoltage+0xb4>)
 8006338:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800633a:	4b16      	ldr	r3, [pc, #88]	@ (8006394 <ReadBatteryVoltage+0xb4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	0018      	movs	r0, r3
 8006340:	f7fb f992 	bl	8001668 <__aeabi_ui2f>
 8006344:	1c03      	adds	r3, r0, #0
 8006346:	4914      	ldr	r1, [pc, #80]	@ (8006398 <ReadBatteryVoltage+0xb8>)
 8006348:	1c18      	adds	r0, r3, #0
 800634a:	f7fa fc43 	bl	8000bd4 <__aeabi_fdiv>
 800634e:	1c03      	adds	r3, r0, #0
 8006350:	1c1a      	adds	r2, r3, #0
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <ReadBatteryVoltage+0xbc>)
 8006354:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006356:	4b0a      	ldr	r3, [pc, #40]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 8006358:	4a0a      	ldr	r2, [pc, #40]	@ (8006384 <ReadBatteryVoltage+0xa4>)
 800635a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800635c:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 800635e:	4a10      	ldr	r2, [pc, #64]	@ (80063a0 <ReadBatteryVoltage+0xc0>)
 8006360:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006362:	4a07      	ldr	r2, [pc, #28]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 8006364:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 8006366:	0011      	movs	r1, r2
 8006368:	0018      	movs	r0, r3
 800636a:	f008 ffcb 	bl	800f304 <HAL_ADC_ConfigChannel>
 800636e:	1e03      	subs	r3, r0, #0
 8006370:	d001      	beq.n	8006376 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006372:	f001 ffcb 	bl	800830c <Error_Handler>
  }
  return trueValue;
 8006376:	4b09      	ldr	r3, [pc, #36]	@ (800639c <ReadBatteryVoltage+0xbc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 }
 800637a:	1c18      	adds	r0, r3, #0
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000d54 	.word	0x20000d54
 8006384:	38004000 	.word	0x38004000
 8006388:	20000d90 	.word	0x20000d90
 800638c:	20000034 	.word	0x20000034
 8006390:	00000fff 	.word	0x00000fff
 8006394:	20000d5c 	.word	0x20000d5c
 8006398:	447a0000 	.word	0x447a0000
 800639c:	20000d60 	.word	0x20000d60
 80063a0:	00001001 	.word	0x00001001

080063a4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80063a8:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <ReadSolarVoltage+0x8c>)
 80063aa:	4a22      	ldr	r2, [pc, #136]	@ (8006434 <ReadSolarVoltage+0x90>)
 80063ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80063ae:	4b20      	ldr	r3, [pc, #128]	@ (8006430 <ReadSolarVoltage+0x8c>)
 80063b0:	2280      	movs	r2, #128	@ 0x80
 80063b2:	0152      	lsls	r2, r2, #5
 80063b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006430 <ReadSolarVoltage+0x8c>)
 80063b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063ba:	0011      	movs	r1, r2
 80063bc:	0018      	movs	r0, r3
 80063be:	f008 ffa1 	bl	800f304 <HAL_ADC_ConfigChannel>
 80063c2:	1e03      	subs	r3, r0, #0
 80063c4:	d001      	beq.n	80063ca <ReadSolarVoltage+0x26>
    Error_Handler();
 80063c6:	f001 ffa1 	bl	800830c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063cc:	0018      	movs	r0, r3
 80063ce:	f008 fe9d 	bl	800f10c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063d2:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063d4:	2101      	movs	r1, #1
 80063d6:	0018      	movs	r0, r3
 80063d8:	f008 feec 	bl	800f1b4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80063dc:	4b16      	ldr	r3, [pc, #88]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063de:	0018      	movs	r0, r3
 80063e0:	f008 ff84 	bl	800f2ec <HAL_ADC_GetValue>
 80063e4:	0002      	movs	r2, r0
 80063e6:	4b15      	ldr	r3, [pc, #84]	@ (800643c <ReadSolarVoltage+0x98>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	435a      	muls	r2, r3
 80063ec:	0013      	movs	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	4913      	ldr	r1, [pc, #76]	@ (8006440 <ReadSolarVoltage+0x9c>)
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7f9 fed5 	bl	80001a4 <__udivsi3>
 80063fa:	0003      	movs	r3, r0
 80063fc:	001a      	movs	r2, r3
 80063fe:	4b11      	ldr	r3, [pc, #68]	@ (8006444 <ReadSolarVoltage+0xa0>)
 8006400:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006402:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <ReadSolarVoltage+0x8c>)
 8006404:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <ReadSolarVoltage+0x90>)
 8006406:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <ReadSolarVoltage+0x8c>)
 800640a:	4a0f      	ldr	r2, [pc, #60]	@ (8006448 <ReadSolarVoltage+0xa4>)
 800640c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800640e:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <ReadSolarVoltage+0x8c>)
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <ReadSolarVoltage+0x94>)
 8006412:	0011      	movs	r1, r2
 8006414:	0018      	movs	r0, r3
 8006416:	f008 ff75 	bl	800f304 <HAL_ADC_ConfigChannel>
 800641a:	1e03      	subs	r3, r0, #0
 800641c:	d001      	beq.n	8006422 <ReadSolarVoltage+0x7e>
    Error_Handler();
 800641e:	f001 ff75 	bl	800830c <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <ReadSolarVoltage+0xa0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 }
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	20000d54 	.word	0x20000d54
 8006434:	3c008000 	.word	0x3c008000
 8006438:	20000d90 	.word	0x20000d90
 800643c:	20000034 	.word	0x20000034
 8006440:	00000fff 	.word	0x00000fff
 8006444:	20000d64 	.word	0x20000d64
 8006448:	00001001 	.word	0x00001001

0800644c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006450:	23a0      	movs	r3, #160	@ 0xa0
 8006452:	05db      	lsls	r3, r3, #23
 8006454:	2180      	movs	r1, #128	@ 0x80
 8006456:	0018      	movs	r0, r3
 8006458:	f009 fef0 	bl	801023c <HAL_GPIO_ReadPin>
 800645c:	0003      	movs	r3, r0
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	4193      	sbcs	r3, r2
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800646a:	b580      	push	{r7, lr}
 800646c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	23a0      	movs	r3, #160	@ 0xa0
 8006474:	05db      	lsls	r3, r3, #23
 8006476:	0011      	movs	r1, r2
 8006478:	0018      	movs	r0, r3
 800647a:	f009 fedf 	bl	801023c <HAL_GPIO_ReadPin>
 800647e:	0003      	movs	r3, r0
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	4193      	sbcs	r3, r2
 8006484:	b2db      	uxtb	r3, r3
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <UserButton_Pressed+0x1c>)
 8006492:	2104      	movs	r1, #4
 8006494:	0018      	movs	r0, r3
 8006496:	f009 fed1 	bl	801023c <HAL_GPIO_ReadPin>
 800649a:	0003      	movs	r3, r0
 800649c:	425a      	negs	r2, r3
 800649e:	4153      	adcs	r3, r2
 80064a0:	b2db      	uxtb	r3, r3
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	50000c00 	.word	0x50000c00

080064ac <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	46d6      	mov	lr, sl
 80064b0:	464f      	mov	r7, r9
 80064b2:	4646      	mov	r6, r8
 80064b4:	b5c0      	push	{r6, r7, lr}
 80064b6:	b08e      	sub	sp, #56	@ 0x38
 80064b8:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064ba:	4b21      	ldr	r3, [pc, #132]	@ (8006540 <showTime+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064c2:	003a      	movs	r2, r7
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	0011      	movs	r1, r2
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 fa2b 	bl	8006924 <RTC_GetTime>
  UpdateSystemUptime();
 80064ce:	f000 f83f 	bl	8006550 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d2:	003b      	movs	r3, r7
 80064d4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064d6:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d8:	003b      	movs	r3, r7
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064de:	4b19      	ldr	r3, [pc, #100]	@ (8006544 <showTime+0x98>)
 80064e0:	0092      	lsls	r2, r2, #2
 80064e2:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064e4:	003b      	movs	r3, r7
 80064e6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064e8:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064ee:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064f4:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064fa:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064fc:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <showTime+0x9c>)
 80064fe:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006500:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006502:	4b11      	ldr	r3, [pc, #68]	@ (8006548 <showTime+0x9c>)
 8006504:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006506:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006508:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <showTime+0x9c>)
 800650a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800650c:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800650e:	4b0e      	ldr	r3, [pc, #56]	@ (8006548 <showTime+0x9c>)
 8006510:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006512:	480e      	ldr	r0, [pc, #56]	@ (800654c <showTime+0xa0>)
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	4643      	mov	r3, r8
 8006518:	9305      	str	r3, [sp, #20]
 800651a:	4663      	mov	r3, ip
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9603      	str	r6, [sp, #12]
 8006520:	9502      	str	r5, [sp, #8]
 8006522:	9401      	str	r4, [sp, #4]
 8006524:	9100      	str	r1, [sp, #0]
 8006526:	4653      	mov	r3, sl
 8006528:	4649      	mov	r1, r9
 800652a:	f019 fcb7 	bl	801fe9c <iprintf>
 800652e:	e000      	b.n	8006532 <showTime+0x86>
    return;
 8006530:	46c0      	nop			@ (mov r8, r8)
}
 8006532:	46bd      	mov	sp, r7
 8006534:	b006      	add	sp, #24
 8006536:	bce0      	pop	{r5, r6, r7}
 8006538:	46ba      	mov	sl, r7
 800653a:	46b1      	mov	r9, r6
 800653c:	46a8      	mov	r8, r5
 800653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006540:	20000d74 	.word	0x20000d74
 8006544:	20000054 	.word	0x20000054
 8006548:	20000d68 	.word	0x20000d68
 800654c:	08023ce4 	.word	0x08023ce4

08006550 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006556:	003a      	movs	r2, r7
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	0011      	movs	r1, r2
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f9e1 	bl	8006924 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006562:	1d3a      	adds	r2, r7, #4
 8006564:	003b      	movs	r3, r7
 8006566:	0011      	movs	r1, r2
 8006568:	0018      	movs	r0, r3
 800656a:	f000 fba5 	bl	8006cb8 <makeTime>
 800656e:	0002      	movs	r2, r0
 8006570:	4b1e      	ldr	r3, [pc, #120]	@ (80065ec <UpdateSystemUptime+0x9c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	213c      	movs	r1, #60	@ 0x3c
 8006580:	0018      	movs	r0, r3
 8006582:	f7f9 fe95 	bl	80002b0 <__aeabi_uidivmod>
 8006586:	000b      	movs	r3, r1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 800658c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	213c      	movs	r1, #60	@ 0x3c
 8006592:	0018      	movs	r0, r3
 8006594:	f7f9 fe06 	bl	80001a4 <__udivsi3>
 8006598:	0003      	movs	r3, r0
 800659a:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	213c      	movs	r1, #60	@ 0x3c
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7f9 fe85 	bl	80002b0 <__aeabi_uidivmod>
 80065a6:	000b      	movs	r3, r1
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 80065ac:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	213c      	movs	r1, #60	@ 0x3c
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7f9 fdf6 	bl	80001a4 <__udivsi3>
 80065b8:	0003      	movs	r3, r0
 80065ba:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2118      	movs	r1, #24
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7f9 fe75 	bl	80002b0 <__aeabi_uidivmod>
 80065c6:	000b      	movs	r3, r1
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 80065cc:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2118      	movs	r1, #24
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7f9 fde6 	bl	80001a4 <__udivsi3>
 80065d8:	0003      	movs	r3, r0
 80065da:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b03      	ldr	r3, [pc, #12]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 80065e2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80065e4:	46c0      	nop			@ (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b008      	add	sp, #32
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000d74 	.word	0x20000d74
 80065f0:	20000d68 	.word	0x20000d68

080065f4 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80065f4:	b590      	push	{r4, r7, lr}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	0008      	movs	r0, r1
 80065fe:	0011      	movs	r1, r2
 8006600:	1cfb      	adds	r3, r7, #3
 8006602:	1c02      	adds	r2, r0, #0
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	1cbb      	adds	r3, r7, #2
 8006608:	1c0a      	adds	r2, r1, #0
 800660a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800660c:	230e      	movs	r3, #14
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006614:	230f      	movs	r3, #15
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	1cfa      	adds	r2, r7, #3
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e015      	b.n	800664c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006620:	200f      	movs	r0, #15
 8006622:	183b      	adds	r3, r7, r0
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	18d2      	adds	r2, r2, r3
 800662a:	240e      	movs	r4, #14
 800662c:	193b      	adds	r3, r7, r4
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	7811      	ldrb	r1, [r2, #0]
 8006632:	2208      	movs	r2, #8
 8006634:	18ba      	adds	r2, r7, r2
 8006636:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006638:	193b      	adds	r3, r7, r4
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	193b      	adds	r3, r7, r4
 800663e:	3201      	adds	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006642:	183b      	adds	r3, r7, r0
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	183b      	adds	r3, r7, r0
 8006648:	3201      	adds	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	200f      	movs	r0, #15
 800664e:	183a      	adds	r2, r7, r0
 8006650:	1cbb      	adds	r3, r7, #2
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d9e2      	bls.n	8006620 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800665a:	230e      	movs	r3, #14
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	18ba      	adds	r2, r7, r2
 8006664:	2100      	movs	r1, #0
 8006666:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006668:	1cfb      	adds	r3, r7, #3
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b13      	cmp	r3, #19
 800666e:	d849      	bhi.n	8006704 <aBuff2int+0x110>
    if (start == 17) { //month
 8006670:	1cfb      	adds	r3, r7, #3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b11      	cmp	r3, #17
 8006676:	d122      	bne.n	80066be <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006678:	183b      	adds	r3, r7, r0
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e018      	b.n	80066b2 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006680:	240f      	movs	r4, #15
 8006682:	193b      	adds	r3, r7, r4
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	4b25      	ldr	r3, [pc, #148]	@ (800671c <aBuff2int+0x128>)
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	58d2      	ldr	r2, [r2, r3]
 800668c:	2308      	movs	r3, #8
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	0011      	movs	r1, r2
 8006692:	0018      	movs	r0, r3
 8006694:	f7f9 fd60 	bl	8000158 <strcmp>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d104      	bne.n	80066a6 <aBuff2int+0xb2>
          return i+1;
 800669c:	193b      	adds	r3, r7, r4
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e035      	b.n	8006712 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80066a6:	210f      	movs	r1, #15
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	3201      	adds	r2, #1
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	230f      	movs	r3, #15
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b0b      	cmp	r3, #11
 80066ba:	d9e1      	bls.n	8006680 <aBuff2int+0x8c>
 80066bc:	e022      	b.n	8006704 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066be:	230f      	movs	r3, #15
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e018      	b.n	80066fa <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066c8:	240f      	movs	r4, #15
 80066ca:	193b      	adds	r3, r7, r4
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <aBuff2int+0x12c>)
 80066d0:	0092      	lsls	r2, r2, #2
 80066d2:	58d2      	ldr	r2, [r2, r3]
 80066d4:	2308      	movs	r3, #8
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	0011      	movs	r1, r2
 80066da:	0018      	movs	r0, r3
 80066dc:	f7f9 fd3c 	bl	8000158 <strcmp>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d104      	bne.n	80066ee <aBuff2int+0xfa>
          return i+1;
 80066e4:	193b      	adds	r3, r7, r4
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e011      	b.n	8006712 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80066ee:	210f      	movs	r1, #15
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	187b      	adds	r3, r7, r1
 80066f6:	3201      	adds	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	230f      	movs	r3, #15
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b06      	cmp	r3, #6
 8006702:	d9e1      	bls.n	80066c8 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006704:	2308      	movs	r3, #8
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	0018      	movs	r0, r3
 800670a:	f017 ffec 	bl	801e6e6 <atoi>
 800670e:	0003      	movs	r3, r0
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	0018      	movs	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	b005      	add	sp, #20
 8006718:	bd90      	pop	{r4, r7, pc}
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	20000054 	.word	0x20000054
 8006720:	20000038 	.word	0x20000038

08006724 <ParseTime>:

void ParseTime(char* buffer) {
 8006724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006726:	b08b      	sub	sp, #44	@ 0x2c
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800672c:	2408      	movs	r4, #8
 800672e:	193a      	adds	r2, r7, r4
 8006730:	260c      	movs	r6, #12
 8006732:	19bb      	adds	r3, r7, r6
 8006734:	0011      	movs	r1, r2
 8006736:	0018      	movs	r0, r3
 8006738:	f000 f8f4 	bl	8006924 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2219      	movs	r2, #25
 8006740:	2118      	movs	r1, #24
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff ff56 	bl	80065f4 <aBuff2int>
 8006748:	0003      	movs	r3, r0
 800674a:	001a      	movs	r2, r3
 800674c:	19bb      	adds	r3, r7, r6
 800674e:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	221c      	movs	r2, #28
 8006754:	211b      	movs	r1, #27
 8006756:	0018      	movs	r0, r3
 8006758:	f7ff ff4c 	bl	80065f4 <aBuff2int>
 800675c:	0003      	movs	r3, r0
 800675e:	001a      	movs	r2, r3
 8006760:	19bb      	adds	r3, r7, r6
 8006762:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	221f      	movs	r2, #31
 8006768:	211e      	movs	r1, #30
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff ff42 	bl	80065f4 <aBuff2int>
 8006770:	0003      	movs	r3, r0
 8006772:	001a      	movs	r2, r3
 8006774:	19bb      	adds	r3, r7, r6
 8006776:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2224      	movs	r2, #36	@ 0x24
 800677c:	2123      	movs	r1, #35	@ 0x23
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff ff38 	bl	80065f4 <aBuff2int>
 8006784:	0003      	movs	r3, r0
 8006786:	001a      	movs	r2, r3
 8006788:	0025      	movs	r5, r4
 800678a:	197b      	adds	r3, r7, r5
 800678c:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2213      	movs	r2, #19
 8006792:	2111      	movs	r1, #17
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff ff2d 	bl	80065f4 <aBuff2int>
 800679a:	0003      	movs	r3, r0
 800679c:	001a      	movs	r2, r3
 800679e:	197b      	adds	r3, r7, r5
 80067a0:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2216      	movs	r2, #22
 80067a6:	2115      	movs	r1, #21
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff ff23 	bl	80065f4 <aBuff2int>
 80067ae:	0003      	movs	r3, r0
 80067b0:	001a      	movs	r2, r3
 80067b2:	197b      	adds	r3, r7, r5
 80067b4:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	220f      	movs	r2, #15
 80067ba:	210d      	movs	r1, #13
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff ff19 	bl	80065f4 <aBuff2int>
 80067c2:	0003      	movs	r3, r0
 80067c4:	001a      	movs	r2, r3
 80067c6:	197b      	adds	r3, r7, r5
 80067c8:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067ca:	19bb      	adds	r3, r7, r6
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	001c      	movs	r4, r3
 80067d0:	19bb      	adds	r3, r7, r6
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	0018      	movs	r0, r3
 80067d6:	19bb      	adds	r3, r7, r6
 80067d8:	789b      	ldrb	r3, [r3, #2]
 80067da:	4a1c      	ldr	r2, [pc, #112]	@ (800684c <ParseTime+0x128>)
 80067dc:	491c      	ldr	r1, [pc, #112]	@ (8006850 <ParseTime+0x12c>)
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	9000      	str	r0, [sp, #0]
 80067e2:	0023      	movs	r3, r4
 80067e4:	2003      	movs	r0, #3
 80067e6:	f007 fe6f 	bl	800e4c8 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80067ea:	197b      	adds	r3, r7, r5
 80067ec:	789b      	ldrb	r3, [r3, #2]
 80067ee:	001c      	movs	r4, r3
 80067f0:	197b      	adds	r3, r7, r5
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	0018      	movs	r0, r3
 80067f6:	197b      	adds	r3, r7, r5
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	4a16      	ldr	r2, [pc, #88]	@ (8006854 <ParseTime+0x130>)
 80067fc:	4914      	ldr	r1, [pc, #80]	@ (8006850 <ParseTime+0x12c>)
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	0023      	movs	r3, r4
 8006804:	2003      	movs	r0, #3
 8006806:	f007 fe5f 	bl	800e4c8 <CreateLine>
  RTC_SetTime(&currentTime);
 800680a:	19bb      	adds	r3, r7, r6
 800680c:	0018      	movs	r0, r3
 800680e:	f000 f825 	bl	800685c <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006812:	197b      	adds	r3, r7, r5
 8006814:	0018      	movs	r0, r3
 8006816:	f000 f847 	bl	80068a8 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800681a:	197b      	adds	r3, r7, r5
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d101      	bne.n	8006826 <ParseTime+0x102>
    reset_fanCleaningDone();
 8006822:	f002 fcd7 	bl	80091d4 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8006826:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <ParseTime+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800682e:	230c      	movs	r3, #12
 8006830:	18fa      	adds	r2, r7, r3
 8006832:	2308      	movs	r3, #8
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	0011      	movs	r1, r2
 8006838:	0018      	movs	r0, r3
 800683a:	f000 fa3d 	bl	8006cb8 <makeTime>
 800683e:	0002      	movs	r2, r0
 8006840:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <ParseTime+0x134>)
 8006842:	601a      	str	r2, [r3, #0]
  }
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b009      	add	sp, #36	@ 0x24
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684c:	08023d3c 	.word	0x08023d3c
 8006850:	08023d74 	.word	0x08023d74
 8006854:	08023d78 	.word	0x08023d78
 8006858:	20000d74 	.word	0x20000d74

0800685c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006876:	4b09      	ldr	r3, [pc, #36]	@ (800689c <RTC_SetTime+0x40>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	0018      	movs	r0, r3
 8006880:	f00f fb88 	bl	8015f94 <HAL_RTC_SetTime>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d005      	beq.n	8006894 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8006888:	4a05      	ldr	r2, [pc, #20]	@ (80068a0 <RTC_SetTime+0x44>)
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <RTC_SetTime+0x48>)
 800688c:	0019      	movs	r1, r3
 800688e:	2001      	movs	r0, #1
 8006890:	f007 fe1a 	bl	800e4c8 <CreateLine>
    }
}
 8006894:	46c0      	nop			@ (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b002      	add	sp, #8
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000d70 	.word	0x20000d70
 80068a0:	08023dac 	.word	0x08023dac
 80068a4:	08023dc8 	.word	0x08023dc8

080068a8 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068b0:	4b16      	ldr	r3, [pc, #88]	@ (800690c <RTC_SetDate+0x64>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	0018      	movs	r0, r3
 80068ba:	f00f fc73 	bl	80161a4 <HAL_RTC_SetDate>
 80068be:	1e03      	subs	r3, r0, #0
 80068c0:	d005      	beq.n	80068ce <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80068c2:	4a13      	ldr	r2, [pc, #76]	@ (8006910 <RTC_SetDate+0x68>)
 80068c4:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <RTC_SetDate+0x6c>)
 80068c6:	0019      	movs	r1, r3
 80068c8:	2001      	movs	r0, #1
 80068ca:	f007 fdfd 	bl	800e4c8 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068ce:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <RTC_SetDate+0x64>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2101      	movs	r1, #1
 80068d4:	0018      	movs	r0, r3
 80068d6:	f00f ffab 	bl	8016830 <HAL_RTCEx_BKUPRead>
 80068da:	0003      	movs	r3, r0
 80068dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006918 <RTC_SetDate+0x70>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d010      	beq.n	8006904 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80068e2:	4a0e      	ldr	r2, [pc, #56]	@ (800691c <RTC_SetDate+0x74>)
 80068e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <RTC_SetDate+0x78>)
 80068e6:	0019      	movs	r1, r3
 80068e8:	2003      	movs	r0, #3
 80068ea:	f007 fded 	bl	800e4c8 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80068ee:	f00e fad1 	bl	8014e94 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <RTC_SetDate+0x64>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a08      	ldr	r2, [pc, #32]	@ (8006918 <RTC_SetDate+0x70>)
 80068f8:	2101      	movs	r1, #1
 80068fa:	0018      	movs	r0, r3
 80068fc:	f00f ff80 	bl	8016800 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006900:	f00e fad6 	bl	8014eb0 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006904:	46c0      	nop			@ (mov r8, r8)
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000d70 	.word	0x20000d70
 8006910:	08023dcc 	.word	0x08023dcc
 8006914:	08023dc8 	.word	0x08023dc8
 8006918:	0000bebe 	.word	0x0000bebe
 800691c:	08023de8 	.word	0x08023de8
 8006920:	08023d74 	.word	0x08023d74

08006924 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800692e:	250f      	movs	r5, #15
 8006930:	197b      	adds	r3, r7, r5
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006936:	230e      	movs	r3, #14
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800693e:	260c      	movs	r6, #12
 8006940:	19bc      	adds	r4, r7, r6
 8006942:	f006 fe75 	bl	800d630 <powerCheck>
 8006946:	0003      	movs	r3, r0
 8006948:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800694a:	19bb      	adds	r3, r7, r6
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006952:	197b      	adds	r3, r7, r5
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	197b      	adds	r3, r7, r5
 8006958:	3201      	adds	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800695c:	230d      	movs	r3, #13
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e039      	b.n	80069da <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006966:	4b23      	ldr	r3, [pc, #140]	@ (80069f4 <RTC_GetTime+0xd0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	0018      	movs	r0, r3
 8006970:	f00f fbba 	bl	80160e8 <HAL_RTC_GetTime>
 8006974:	1e03      	subs	r3, r0, #0
 8006976:	d005      	beq.n	8006984 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006978:	4a1f      	ldr	r2, [pc, #124]	@ (80069f8 <RTC_GetTime+0xd4>)
 800697a:	4b20      	ldr	r3, [pc, #128]	@ (80069fc <RTC_GetTime+0xd8>)
 800697c:	0019      	movs	r1, r3
 800697e:	2001      	movs	r0, #1
 8006980:	f007 fda2 	bl	800e4c8 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006984:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <RTC_GetTime+0xd0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	0018      	movs	r0, r3
 800698e:	f00f fc9d 	bl	80162cc <HAL_RTC_GetDate>
 8006992:	1e03      	subs	r3, r0, #0
 8006994:	d005      	beq.n	80069a2 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8006996:	4a1a      	ldr	r2, [pc, #104]	@ (8006a00 <RTC_GetTime+0xdc>)
 8006998:	4b18      	ldr	r3, [pc, #96]	@ (80069fc <RTC_GetTime+0xd8>)
 800699a:	0019      	movs	r1, r3
 800699c:	2001      	movs	r0, #1
 800699e:	f007 fd93 	bl	800e4c8 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80069a2:	230c      	movs	r3, #12
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d110      	bne.n	80069ce <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	210e      	movs	r1, #14
 80069b2:	187a      	adds	r2, r7, r1
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d018      	beq.n	80069ec <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069ba:	187b      	adds	r3, r7, r1
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	701a      	strb	r2, [r3, #0]
        t++;
 80069c2:	210f      	movs	r1, #15
 80069c4:	187b      	adds	r3, r7, r1
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	3201      	adds	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069ce:	210d      	movs	r1, #13
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	187b      	adds	r3, r7, r1
 80069d6:	3201      	adds	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	230d      	movs	r3, #13
 80069dc:	18fa      	adds	r2, r7, r3
 80069de:	230f      	movs	r3, #15
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d3bd      	bcc.n	8006966 <RTC_GetTime+0x42>
 80069ea:	e000      	b.n	80069ee <RTC_GetTime+0xca>
      }
      else {
        return;
 80069ec:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b005      	add	sp, #20
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	20000d70 	.word	0x20000d70
 80069f8:	08023e00 	.word	0x08023e00
 80069fc:	08023dc8 	.word	0x08023dc8
 8006a00:	08023e1c 	.word	0x08023e1c

08006a04 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a0a:	003a      	movs	r2, r7
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	0011      	movs	r1, r2
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7ff ff87 	bl	8006924 <RTC_GetTime>
  return currentDate.WeekDay;
 8006a16:	003b      	movs	r3, r7
 8006a18:	781b      	ldrb	r3, [r3, #0]
}
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b006      	add	sp, #24
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a28:	003a      	movs	r2, r7
 8006a2a:	1d3b      	adds	r3, r7, #4
 8006a2c:	0011      	movs	r1, r2
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7ff ff78 	bl	8006924 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a34:	1d3a      	adds	r2, r7, #4
 8006a36:	003b      	movs	r3, r7
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 f93c 	bl	8006cb8 <makeTime>
 8006a40:	0003      	movs	r3, r0
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b006      	add	sp, #24
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	b08d      	sub	sp, #52	@ 0x34
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a56:	240c      	movs	r4, #12
 8006a58:	193a      	adds	r2, r7, r4
 8006a5a:	2508      	movs	r5, #8
 8006a5c:	1979      	adds	r1, r7, r5
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f000 f9f3 	bl	8006e4c <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a66:	002a      	movs	r2, r5
 8006a68:	18bb      	adds	r3, r7, r2
 8006a6a:	789b      	ldrb	r3, [r3, #2]
 8006a6c:	001e      	movs	r6, r3
 8006a6e:	18bb      	adds	r3, r7, r2
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	469c      	mov	ip, r3
 8006a74:	18bb      	adds	r3, r7, r2
 8006a76:	78db      	ldrb	r3, [r3, #3]
 8006a78:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a7a:	0021      	movs	r1, r4
 8006a7c:	187b      	adds	r3, r7, r1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a80:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a86:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a8c:	4906      	ldr	r1, [pc, #24]	@ (8006aa8 <getUTCfromPosixTime+0x5c>)
 8006a8e:	6838      	ldr	r0, [r7, #0]
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	9502      	str	r5, [sp, #8]
 8006a94:	9401      	str	r4, [sp, #4]
 8006a96:	9200      	str	r2, [sp, #0]
 8006a98:	4663      	mov	r3, ip
 8006a9a:	0032      	movs	r2, r6
 8006a9c:	f019 fa6e 	bl	801ff7c <siprintf>
}
 8006aa0:	46c0      	nop			@ (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b009      	add	sp, #36	@ 0x24
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	08023e38 	.word	0x08023e38

08006aac <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f00f fe05 	bl	80166c8 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006abe:	4b0e      	ldr	r3, [pc, #56]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	22ff      	movs	r2, #255	@ 0xff
 8006ac8:	401a      	ands	r2, r3
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	490a      	ldr	r1, [pc, #40]	@ (8006afc <RTC_SetWakeUpTimer+0x50>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <RTC_SetWakeUpTimer+0x54>)
 8006ad8:	2280      	movs	r2, #128	@ 0x80
 8006ada:	0352      	lsls	r2, r2, #13
 8006adc:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006ade:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	0019      	movs	r1, r3
 8006aea:	f00f fd15 	bl	8016518 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b002      	add	sp, #8
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	20000d70 	.word	0x20000d70
 8006afc:	fffffb7f 	.word	0xfffffb7f
 8006b00:	40010400 	.word	0x40010400

08006b04 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b08:	4a0b      	ldr	r2, [pc, #44]	@ (8006b38 <Enter_Standby_Mode+0x34>)
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <Enter_Standby_Mode+0x38>)
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	2003      	movs	r0, #3
 8006b10:	f007 fcda 	bl	800e4c8 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b14:	2064      	movs	r0, #100	@ 0x64
 8006b16:	f008 f927 	bl	800ed68 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <Enter_Standby_Mode+0x3c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f00f fdd2 	bl	80166c8 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006b24:	f000 fe14 	bl	8007750 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006b28:	f008 f942 	bl	800edb0 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006b2c:	f00e fa2c 	bl	8014f88 <HAL_PWR_EnterSTANDBYMode>
}
 8006b30:	46c0      	nop			@ (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			@ (mov r8, r8)
 8006b38:	08023e8c 	.word	0x08023e8c
 8006b3c:	08023d74 	.word	0x08023d74
 8006b40:	20000d70 	.word	0x20000d70

08006b44 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	0002      	movs	r2, r0
 8006b4c:	1dbb      	adds	r3, r7, #6
 8006b4e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b50:	4b46      	ldr	r3, [pc, #280]	@ (8006c6c <Enter_Stop_Mode+0x128>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b58:	f002 fb10 	bl	800917c <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b5c:	f7ff fbc0 	bl	80062e0 <ReadBatteryVoltage>
 8006b60:	1c03      	adds	r3, r0, #0
 8006b62:	1c18      	adds	r0, r3, #0
 8006b64:	f7fc fc7e 	bl	8003464 <__aeabi_f2d>
 8006b68:	0002      	movs	r2, r0
 8006b6a:	000b      	movs	r3, r1
 8006b6c:	4840      	ldr	r0, [pc, #256]	@ (8006c70 <Enter_Stop_Mode+0x12c>)
 8006b6e:	4941      	ldr	r1, [pc, #260]	@ (8006c74 <Enter_Stop_Mode+0x130>)
 8006b70:	9200      	str	r2, [sp, #0]
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	0002      	movs	r2, r0
 8006b76:	2002      	movs	r0, #2
 8006b78:	f007 fca6 	bl	800e4c8 <CreateLine>
  powerDisplay(powerCheck());
 8006b7c:	f006 fd58 	bl	800d630 <powerCheck>
 8006b80:	0003      	movs	r3, r0
 8006b82:	0018      	movs	r0, r3
 8006b84:	f006 fd70 	bl	800d668 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006b88:	1dbb      	adds	r3, r7, #6
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c78 <Enter_Stop_Mode+0x134>)
 8006b8e:	493b      	ldr	r1, [pc, #236]	@ (8006c7c <Enter_Stop_Mode+0x138>)
 8006b90:	2003      	movs	r0, #3
 8006b92:	f007 fc99 	bl	800e4c8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006b96:	f7ff ff44 	bl	8006a22 <getPosixTime>
 8006b9a:	0002      	movs	r2, r0
 8006b9c:	1dbb      	adds	r3, r7, #6
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	4a37      	ldr	r2, [pc, #220]	@ (8006c80 <Enter_Stop_Mode+0x13c>)
 8006ba4:	0011      	movs	r1, r2
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7ff ff50 	bl	8006a4c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006bac:	4b34      	ldr	r3, [pc, #208]	@ (8006c80 <Enter_Stop_Mode+0x13c>)
 8006bae:	4a35      	ldr	r2, [pc, #212]	@ (8006c84 <Enter_Stop_Mode+0x140>)
 8006bb0:	4930      	ldr	r1, [pc, #192]	@ (8006c74 <Enter_Stop_Mode+0x130>)
 8006bb2:	2002      	movs	r0, #2
 8006bb4:	f007 fc88 	bl	800e4c8 <CreateLine>
  HAL_Delay(100);
 8006bb8:	2064      	movs	r0, #100	@ 0x64
 8006bba:	f008 f8d5 	bl	800ed68 <HAL_Delay>
  HAL_SuspendTick();
 8006bbe:	f008 f8f7 	bl	800edb0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006bc2:	1dbb      	adds	r3, r7, #6
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7ff ff70 	bl	8006aac <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	2001      	movs	r0, #1
 8006bd0:	f00e f97e 	bl	8014ed0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bd4:	f001 fa54 	bl	8008080 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006bd8:	1dbb      	adds	r3, r7, #6
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f002 fa5b 	bl	8009098 <sen5x_enable>
 8006be2:	1e03      	subs	r3, r0, #0
 8006be4:	d01c      	beq.n	8006c20 <Enter_Stop_Mode+0xdc>
    showTime();
 8006be6:	f7ff fc61 	bl	80064ac <showTime>
    set_light_on_state();
 8006bea:	f002 ff4f 	bl	8009a8c <set_light_on_state>
    if (!userToggle) {
 8006bee:	4b26      	ldr	r3, [pc, #152]	@ (8006c88 <Enter_Stop_Mode+0x144>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4053      	eors	r3, r2
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <Enter_Stop_Mode+0xdc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006bfc:	201c      	movs	r0, #28
 8006bfe:	f7ff ff55 	bl	8006aac <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c02:	4a1d      	ldr	r2, [pc, #116]	@ (8006c78 <Enter_Stop_Mode+0x134>)
 8006c04:	491d      	ldr	r1, [pc, #116]	@ (8006c7c <Enter_Stop_Mode+0x138>)
 8006c06:	231c      	movs	r3, #28
 8006c08:	2003      	movs	r0, #3
 8006c0a:	f007 fc5d 	bl	800e4c8 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c0e:	2101      	movs	r1, #1
 8006c10:	2001      	movs	r0, #1
 8006c12:	f00e f95d 	bl	8014ed0 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c16:	f001 fa33 	bl	8008080 <SystemClock_Config>
      setsen5xReadTimer(0);
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f002 fa1a 	bl	8009054 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c20:	f008 f8d4 	bl	800edcc <HAL_ResumeTick>
  showTime();
 8006c24:	f7ff fc42 	bl	80064ac <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c28:	f001 fec2 	bl	80089b0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c2c:	f004 fd62 	bl	800b6f4 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c30:	2000      	movs	r0, #0
 8006c32:	f002 fa21 	bl	8009078 <setsen5xSamplecounter>
  setESPTimeStamp(2500);
 8006c36:	4b15      	ldr	r3, [pc, #84]	@ (8006c8c <Enter_Stop_Mode+0x148>)
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7fc fdb9 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f004 fd46 	bl	800b6d0 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c44:	2000      	movs	r0, #0
 8006c46:	f007 fe03 	bl	800e850 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f001 fe9e 	bl	800898c <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c50:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <Enter_Stop_Mode+0x14c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c56:	f008 f87d 	bl	800ed54 <HAL_GetTick>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <Enter_Stop_Mode+0x150>)
 8006c5e:	189a      	adds	r2, r3, r2
 8006c60:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <Enter_Stop_Mode+0x154>)
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	46c0      	nop			@ (mov r8, r8)
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b002      	add	sp, #8
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	2000105d 	.word	0x2000105d
 8006c70:	08023eb0 	.word	0x08023eb0
 8006c74:	08023ec8 	.word	0x08023ec8
 8006c78:	08023ecc 	.word	0x08023ecc
 8006c7c:	08023d74 	.word	0x08023d74
 8006c80:	20000d78 	.word	0x20000d78
 8006c84:	08023ef0 	.word	0x08023ef0
 8006c88:	20001ffa 	.word	0x20001ffa
 8006c8c:	000009c4 	.word	0x000009c4
 8006c90:	2000055c 	.word	0x2000055c
 8006c94:	000008fc 	.word	0x000008fc
 8006c98:	20000fc0 	.word	0x20000fc0

08006c9c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	@ (8006cb4 <InitClock+0x18>)
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	46c0      	nop			@ (mov r8, r8)
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b002      	add	sp, #8
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	46c0      	nop			@ (mov r8, r8)
 8006cb4:	20000d70 	.word	0x20000d70

08006cb8 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	001a      	movs	r2, r3
 8006cc8:	0013      	movs	r3, r2
 8006cca:	025b      	lsls	r3, r3, #9
 8006ccc:	189b      	adds	r3, r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	189b      	adds	r3, r3, r2
 8006cd6:	011a      	lsls	r2, r3, #4
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	01d3      	lsls	r3, r2, #7
 8006cdc:	001a      	movs	r2, r3
 8006cde:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e028      	b.n	8006d38 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a53      	ldr	r2, [pc, #332]	@ (8006e38 <makeTime+0x180>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	db21      	blt.n	8006d32 <makeTime+0x7a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a52      	ldr	r2, [pc, #328]	@ (8006e3c <makeTime+0x184>)
 8006cf2:	4694      	mov	ip, r2
 8006cf4:	4463      	add	r3, ip
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d119      	bne.n	8006d32 <makeTime+0x7a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a4e      	ldr	r2, [pc, #312]	@ (8006e3c <makeTime+0x184>)
 8006d02:	4694      	mov	ip, r2
 8006d04:	4463      	add	r3, ip
 8006d06:	2164      	movs	r1, #100	@ 0x64
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7f9 fbbb 	bl	8000484 <__aeabi_idivmod>
 8006d0e:	1e0b      	subs	r3, r1, #0
 8006d10:	d10a      	bne.n	8006d28 <makeTime+0x70>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a49      	ldr	r2, [pc, #292]	@ (8006e3c <makeTime+0x184>)
 8006d16:	4694      	mov	ip, r2
 8006d18:	4463      	add	r3, ip
 8006d1a:	22c8      	movs	r2, #200	@ 0xc8
 8006d1c:	0051      	lsls	r1, r2, #1
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7f9 fbb0 	bl	8000484 <__aeabi_idivmod>
 8006d24:	1e0b      	subs	r3, r1, #0
 8006d26:	d104      	bne.n	8006d32 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a45      	ldr	r2, [pc, #276]	@ (8006e40 <makeTime+0x188>)
 8006d2c:	4694      	mov	ip, r2
 8006d2e:	4463      	add	r3, ip
 8006d30:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	78db      	ldrb	r3, [r3, #3]
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	dbd0      	blt.n	8006ce6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d44:	2301      	movs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e03c      	b.n	8006dc4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d125      	bne.n	8006d9c <makeTime+0xe4>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	78db      	ldrb	r3, [r3, #3]
 8006d54:	4a39      	ldr	r2, [pc, #228]	@ (8006e3c <makeTime+0x184>)
 8006d56:	4694      	mov	ip, r2
 8006d58:	4463      	add	r3, ip
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d11c      	bne.n	8006d9c <makeTime+0xe4>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	4a35      	ldr	r2, [pc, #212]	@ (8006e3c <makeTime+0x184>)
 8006d68:	4694      	mov	ip, r2
 8006d6a:	4463      	add	r3, ip
 8006d6c:	2164      	movs	r1, #100	@ 0x64
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7f9 fb88 	bl	8000484 <__aeabi_idivmod>
 8006d74:	1e0b      	subs	r3, r1, #0
 8006d76:	d10b      	bne.n	8006d90 <makeTime+0xd8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	78db      	ldrb	r3, [r3, #3]
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e3c <makeTime+0x184>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	22c8      	movs	r2, #200	@ 0xc8
 8006d84:	0051      	lsls	r1, r2, #1
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7f9 fb7c 	bl	8000484 <__aeabi_idivmod>
 8006d8c:	1e0b      	subs	r3, r1, #0
 8006d8e:	d105      	bne.n	8006d9c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4a2c      	ldr	r2, [pc, #176]	@ (8006e44 <makeTime+0x18c>)
 8006d94:	4694      	mov	ip, r2
 8006d96:	4463      	add	r3, ip
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	e010      	b.n	8006dbe <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	4a29      	ldr	r2, [pc, #164]	@ (8006e48 <makeTime+0x190>)
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
 8006da4:	001a      	movs	r2, r3
 8006da6:	0013      	movs	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	011a      	lsls	r2, r3, #4
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	0113      	lsls	r3, r2, #4
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	01db      	lsls	r3, r3, #7
 8006db6:	001a      	movs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	189b      	adds	r3, r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	001a      	movs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	dbbc      	blt.n	8006d4a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	789b      	ldrb	r3, [r3, #2]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	0013      	movs	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	189b      	adds	r3, r3, r2
 8006dde:	011a      	lsls	r2, r3, #4
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	0113      	lsls	r3, r2, #4
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	01db      	lsls	r3, r3, #7
 8006de8:	001a      	movs	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	189b      	adds	r3, r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	001a      	movs	r2, r3
 8006df6:	0013      	movs	r3, r2
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	011a      	lsls	r2, r3, #4
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	0113      	lsls	r3, r2, #4
 8006e02:	001a      	movs	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	001a      	movs	r2, r3
 8006e10:	0013      	movs	r3, r2
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	1a9b      	subs	r3, r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	001a      	movs	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	789b      	ldrb	r3, [r3, #2]
 8006e24:	001a      	movs	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
}
 8006e2e:	0018      	movs	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b004      	add	sp, #16
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	fffff84f 	.word	0xfffff84f
 8006e3c:	000007b2 	.word	0x000007b2
 8006e40:	00015180 	.word	0x00015180
 8006e44:	00263b80 	.word	0x00263b80
 8006e48:	08025428 	.word	0x08025428

08006e4c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b089      	sub	sp, #36	@ 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	213c      	movs	r1, #60	@ 0x3c
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7f9 fa25 	bl	80002b0 <__aeabi_uidivmod>
 8006e66:	000b      	movs	r3, r1
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	213c      	movs	r1, #60	@ 0x3c
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7f9 f996 	bl	80001a4 <__udivsi3>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	213c      	movs	r1, #60	@ 0x3c
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7f9 fa15 	bl	80002b0 <__aeabi_uidivmod>
 8006e86:	000b      	movs	r3, r1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	213c      	movs	r1, #60	@ 0x3c
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7f9 f986 	bl	80001a4 <__udivsi3>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2118      	movs	r1, #24
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7f9 fa05 	bl	80002b0 <__aeabi_uidivmod>
 8006ea6:	000b      	movs	r3, r1
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2118      	movs	r1, #24
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7f9 f976 	bl	80001a4 <__udivsi3>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2107      	movs	r1, #7
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7f9 f9f4 	bl	80002b0 <__aeabi_uidivmod>
 8006ec8:	000b      	movs	r3, r1
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ed4:	231f      	movs	r3, #31
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ee0:	e005      	b.n	8006eee <breakPosixTime+0xa2>
    year++;
 8006ee2:	211f      	movs	r1, #31
 8006ee4:	187b      	adds	r3, r7, r1
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	3201      	adds	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006eee:	241f      	movs	r4, #31
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4a64      	ldr	r2, [pc, #400]	@ (8007088 <breakPosixTime+0x23c>)
 8006ef6:	4694      	mov	ip, r2
 8006ef8:	4463      	add	r3, ip
 8006efa:	001a      	movs	r2, r3
 8006efc:	2303      	movs	r3, #3
 8006efe:	4013      	ands	r3, r2
 8006f00:	d119      	bne.n	8006f36 <breakPosixTime+0xea>
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	4a60      	ldr	r2, [pc, #384]	@ (8007088 <breakPosixTime+0x23c>)
 8006f08:	4694      	mov	ip, r2
 8006f0a:	4463      	add	r3, ip
 8006f0c:	2164      	movs	r1, #100	@ 0x64
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7f9 fab8 	bl	8000484 <__aeabi_idivmod>
 8006f14:	1e0b      	subs	r3, r1, #0
 8006f16:	d10b      	bne.n	8006f30 <breakPosixTime+0xe4>
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8007088 <breakPosixTime+0x23c>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	22c8      	movs	r2, #200	@ 0xc8
 8006f24:	0051      	lsls	r1, r2, #1
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7f9 faac 	bl	8000484 <__aeabi_idivmod>
 8006f2c:	1e0b      	subs	r3, r1, #0
 8006f2e:	d102      	bne.n	8006f36 <breakPosixTime+0xea>
 8006f30:	23b7      	movs	r3, #183	@ 0xb7
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	e001      	b.n	8006f3a <breakPosixTime+0xee>
 8006f36:	236e      	movs	r3, #110	@ 0x6e
 8006f38:	33ff      	adds	r3, #255	@ 0xff
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	18d3      	adds	r3, r2, r3
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d9cc      	bls.n	8006ee2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	241f      	movs	r4, #31
 8006f4c:	193a      	adds	r2, r7, r4
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a4c      	ldr	r2, [pc, #304]	@ (8007088 <breakPosixTime+0x23c>)
 8006f58:	4694      	mov	ip, r2
 8006f5a:	4463      	add	r3, ip
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	2303      	movs	r3, #3
 8006f60:	4013      	ands	r3, r2
 8006f62:	d119      	bne.n	8006f98 <breakPosixTime+0x14c>
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	4a47      	ldr	r2, [pc, #284]	@ (8007088 <breakPosixTime+0x23c>)
 8006f6a:	4694      	mov	ip, r2
 8006f6c:	4463      	add	r3, ip
 8006f6e:	2164      	movs	r1, #100	@ 0x64
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7f9 fa87 	bl	8000484 <__aeabi_idivmod>
 8006f76:	1e0b      	subs	r3, r1, #0
 8006f78:	d10b      	bne.n	8006f92 <breakPosixTime+0x146>
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4a42      	ldr	r2, [pc, #264]	@ (8007088 <breakPosixTime+0x23c>)
 8006f80:	4694      	mov	ip, r2
 8006f82:	4463      	add	r3, ip
 8006f84:	22c8      	movs	r2, #200	@ 0xc8
 8006f86:	0051      	lsls	r1, r2, #1
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7f9 fa7b 	bl	8000484 <__aeabi_idivmod>
 8006f8e:	1e0b      	subs	r3, r1, #0
 8006f90:	d102      	bne.n	8006f98 <breakPosixTime+0x14c>
 8006f92:	23b7      	movs	r3, #183	@ 0xb7
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	e001      	b.n	8006f9c <breakPosixTime+0x150>
 8006f98:	236e      	movs	r3, #110	@ 0x6e
 8006f9a:	33ff      	adds	r3, #255	@ 0xff
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	61bb      	str	r3, [r7, #24]

  days=0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  month=0;
 8006fae:	211e      	movs	r1, #30
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006fb6:	231d      	movs	r3, #29
 8006fb8:	18fb      	adds	r3, r7, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e048      	b.n	8007058 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fc6:	231e      	movs	r3, #30
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d12a      	bne.n	8007026 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006fd0:	241f      	movs	r4, #31
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <breakPosixTime+0x23c>)
 8006fd8:	4694      	mov	ip, r2
 8006fda:	4463      	add	r3, ip
 8006fdc:	001a      	movs	r2, r3
 8006fde:	2303      	movs	r3, #3
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d11b      	bne.n	800701c <breakPosixTime+0x1d0>
 8006fe4:	193b      	adds	r3, r7, r4
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	4a27      	ldr	r2, [pc, #156]	@ (8007088 <breakPosixTime+0x23c>)
 8006fea:	4694      	mov	ip, r2
 8006fec:	4463      	add	r3, ip
 8006fee:	2164      	movs	r1, #100	@ 0x64
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7f9 fa47 	bl	8000484 <__aeabi_idivmod>
 8006ff6:	1e0b      	subs	r3, r1, #0
 8006ff8:	d10b      	bne.n	8007012 <breakPosixTime+0x1c6>
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4a22      	ldr	r2, [pc, #136]	@ (8007088 <breakPosixTime+0x23c>)
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	22c8      	movs	r2, #200	@ 0xc8
 8007006:	0051      	lsls	r1, r2, #1
 8007008:	0018      	movs	r0, r3
 800700a:	f7f9 fa3b 	bl	8000484 <__aeabi_idivmod>
 800700e:	1e0b      	subs	r3, r1, #0
 8007010:	d104      	bne.n	800701c <breakPosixTime+0x1d0>
        monthLength=29;
 8007012:	231d      	movs	r3, #29
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	221d      	movs	r2, #29
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	e00c      	b.n	8007036 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800701c:	231d      	movs	r3, #29
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	221c      	movs	r2, #28
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e007      	b.n	8007036 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007026:	231e      	movs	r3, #30
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	231d      	movs	r3, #29
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	4916      	ldr	r1, [pc, #88]	@ (800708c <breakPosixTime+0x240>)
 8007032:	5c8a      	ldrb	r2, [r1, r2]
 8007034:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007036:	211d      	movs	r1, #29
 8007038:	187b      	adds	r3, r7, r1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	429a      	cmp	r2, r3
 8007040:	d310      	bcc.n	8007064 <breakPosixTime+0x218>
      time -= monthLength;
 8007042:	187b      	adds	r3, r7, r1
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800704c:	211e      	movs	r1, #30
 800704e:	187b      	adds	r3, r7, r1
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	187b      	adds	r3, r7, r1
 8007054:	3201      	adds	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	231e      	movs	r3, #30
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b0b      	cmp	r3, #11
 8007060:	d9b1      	bls.n	8006fc6 <breakPosixTime+0x17a>
 8007062:	e000      	b.n	8007066 <breakPosixTime+0x21a>
    } else {
        break;
 8007064:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007066:	231e      	movs	r3, #30
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	b2da      	uxtb	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	3301      	adds	r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	709a      	strb	r2, [r3, #2]
}
 8007080:	46c0      	nop			@ (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b009      	add	sp, #36	@ 0x24
 8007086:	bd90      	pop	{r4, r7, pc}
 8007088:	000007b2 	.word	0x000007b2
 800708c:	08025428 	.word	0x08025428

08007090 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007096:	003b      	movs	r3, r7
 8007098:	0018      	movs	r0, r3
 800709a:	2308      	movs	r3, #8
 800709c:	001a      	movs	r2, r3
 800709e:	2100      	movs	r1, #0
 80070a0:	f019 f8b0 	bl	8020204 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80070a4:	4b30      	ldr	r3, [pc, #192]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070a6:	4a31      	ldr	r2, [pc, #196]	@ (800716c <MX_ADC_Init+0xdc>)
 80070a8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80070aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070b2:	22c0      	movs	r2, #192	@ 0xc0
 80070b4:	0612      	lsls	r2, r2, #24
 80070b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80070b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070be:	4b2a      	ldr	r3, [pc, #168]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070c4:	4b28      	ldr	r3, [pc, #160]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070ca:	4b27      	ldr	r3, [pc, #156]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070d0:	4b25      	ldr	r3, [pc, #148]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070d2:	2220      	movs	r2, #32
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80070d8:	4b23      	ldr	r3, [pc, #140]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070da:	2221      	movs	r2, #33	@ 0x21
 80070dc:	2101      	movs	r1, #1
 80070de:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070e0:	4b21      	ldr	r3, [pc, #132]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070e6:	4b20      	ldr	r3, [pc, #128]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070e8:	22c2      	movs	r2, #194	@ 0xc2
 80070ea:	32ff      	adds	r2, #255	@ 0xff
 80070ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80070ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070f0:	222c      	movs	r2, #44	@ 0x2c
 80070f2:	2100      	movs	r1, #0
 80070f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070f8:	2204      	movs	r2, #4
 80070fa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007102:	4b19      	ldr	r3, [pc, #100]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007104:	2200      	movs	r2, #0
 8007106:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007108:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <MX_ADC_Init+0xd8>)
 800710a:	2200      	movs	r2, #0
 800710c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800710e:	4b16      	ldr	r3, [pc, #88]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007110:	2200      	movs	r2, #0
 8007112:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007114:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007116:	0018      	movs	r0, r3
 8007118:	f007 fe84 	bl	800ee24 <HAL_ADC_Init>
 800711c:	1e03      	subs	r3, r0, #0
 800711e:	d001      	beq.n	8007124 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007120:	f001 f8f4 	bl	800830c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007124:	003b      	movs	r3, r7
 8007126:	4a12      	ldr	r2, [pc, #72]	@ (8007170 <MX_ADC_Init+0xe0>)
 8007128:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800712a:	003b      	movs	r3, r7
 800712c:	2280      	movs	r2, #128	@ 0x80
 800712e:	0152      	lsls	r2, r2, #5
 8007130:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007132:	003a      	movs	r2, r7
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007136:	0011      	movs	r1, r2
 8007138:	0018      	movs	r0, r3
 800713a:	f008 f8e3 	bl	800f304 <HAL_ADC_ConfigChannel>
 800713e:	1e03      	subs	r3, r0, #0
 8007140:	d001      	beq.n	8007146 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007142:	f001 f8e3 	bl	800830c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007146:	003b      	movs	r3, r7
 8007148:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <MX_ADC_Init+0xe4>)
 800714a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800714c:	003a      	movs	r2, r7
 800714e:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f008 f8d6 	bl	800f304 <HAL_ADC_ConfigChannel>
 8007158:	1e03      	subs	r3, r0, #0
 800715a:	d001      	beq.n	8007160 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800715c:	f001 f8d6 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007160:	46c0      	nop			@ (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b002      	add	sp, #8
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000d90 	.word	0x20000d90
 800716c:	40012400 	.word	0x40012400
 8007170:	38004000 	.word	0x38004000
 8007174:	3c008000 	.word	0x3c008000

08007178 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b089      	sub	sp, #36	@ 0x24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007180:	240c      	movs	r4, #12
 8007182:	193b      	adds	r3, r7, r4
 8007184:	0018      	movs	r0, r3
 8007186:	2314      	movs	r3, #20
 8007188:	001a      	movs	r2, r3
 800718a:	2100      	movs	r1, #0
 800718c:	f019 f83a 	bl	8020204 <memset>
  if(adcHandle->Instance==ADC1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <HAL_ADC_MspInit+0x70>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d121      	bne.n	80071de <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800719a:	4b14      	ldr	r3, [pc, #80]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 800719c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800719e:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	0089      	lsls	r1, r1, #2
 80071a4:	430a      	orrs	r2, r1
 80071a6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071a8:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ac:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071ae:	2104      	movs	r1, #4
 80071b0:	430a      	orrs	r2, r1
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071b4:	4b0d      	ldr	r3, [pc, #52]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	2204      	movs	r2, #4
 80071ba:	4013      	ands	r3, r2
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071c0:	193b      	adds	r3, r7, r4
 80071c2:	2230      	movs	r2, #48	@ 0x30
 80071c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071c6:	193b      	adds	r3, r7, r4
 80071c8:	2203      	movs	r2, #3
 80071ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071cc:	193b      	adds	r3, r7, r4
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071d2:	193b      	adds	r3, r7, r4
 80071d4:	4a06      	ldr	r2, [pc, #24]	@ (80071f0 <HAL_ADC_MspInit+0x78>)
 80071d6:	0019      	movs	r1, r3
 80071d8:	0010      	movs	r0, r2
 80071da:	f008 feb1 	bl	800ff40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b009      	add	sp, #36	@ 0x24
 80071e4:	bd90      	pop	{r4, r7, pc}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	40012400 	.word	0x40012400
 80071ec:	40021000 	.word	0x40021000
 80071f0:	50000800 	.word	0x50000800

080071f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071fa:	4b10      	ldr	r3, [pc, #64]	@ (800723c <MX_DMA_Init+0x48>)
 80071fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <MX_DMA_Init+0x48>)
 8007200:	2101      	movs	r1, #1
 8007202:	430a      	orrs	r2, r1
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <MX_DMA_Init+0x48>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720a:	2201      	movs	r2, #1
 800720c:	4013      	ands	r3, r2
 800720e:	607b      	str	r3, [r7, #4]
 8007210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007212:	2200      	movs	r2, #0
 8007214:	2100      	movs	r1, #0
 8007216:	200a      	movs	r0, #10
 8007218:	f008 fa40 	bl	800f69c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800721c:	200a      	movs	r0, #10
 800721e:	f008 fa52 	bl	800f6c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007222:	2200      	movs	r2, #0
 8007224:	2103      	movs	r1, #3
 8007226:	200b      	movs	r0, #11
 8007228:	f008 fa38 	bl	800f69c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800722c:	200b      	movs	r0, #11
 800722e:	f008 fa4a 	bl	800f6c6 <HAL_NVIC_EnableIRQ>

}
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	46bd      	mov	sp, r7
 8007236:	b002      	add	sp, #8
 8007238:	bd80      	pop	{r7, pc}
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	40021000 	.word	0x40021000

08007240 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007250:	d901      	bls.n	8007256 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8007252:	237f      	movs	r3, #127	@ 0x7f
 8007254:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007256:	2017      	movs	r0, #23
 8007258:	183b      	adds	r3, r7, r0
 800725a:	490d      	ldr	r1, [pc, #52]	@ (8007290 <accessLUT10log10+0x50>)
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	188a      	adds	r2, r1, r2
 8007260:	7812      	ldrb	r2, [r2, #0]
 8007262:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007264:	0001      	movs	r1, r0
 8007266:	187b      	adds	r3, r7, r1
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2206      	movs	r2, #6
 800726c:	4113      	asrs	r3, r2
 800726e:	001a      	movs	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007274:	187b      	adds	r3, r7, r1
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2106      	movs	r1, #6
 800727e:	408b      	lsls	r3, r1
 8007280:	1ad2      	subs	r2, r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b006      	add	sp, #24
 800728c:	bd80      	pop	{r7, pc}
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	08025434 	.word	0x08025434

08007294 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007294:	b5b0      	push	{r4, r5, r7, lr}
 8007296:	b090      	sub	sp, #64	@ 0x40
 8007298:	af00      	add	r7, sp, #0
 800729a:	6138      	str	r0, [r7, #16]
 800729c:	6179      	str	r1, [r7, #20]
 800729e:	60fa      	str	r2, [r7, #12]
 80072a0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80072a2:	2308      	movs	r3, #8
 80072a4:	001a      	movs	r2, r3
 80072a6:	3a20      	subs	r2, #32
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	db03      	blt.n	80072b4 <efficient10log10+0x20>
 80072ac:	2101      	movs	r1, #1
 80072ae:	4091      	lsls	r1, r2
 80072b0:	000d      	movs	r5, r1
 80072b2:	e008      	b.n	80072c6 <efficient10log10+0x32>
 80072b4:	2220      	movs	r2, #32
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	2101      	movs	r1, #1
 80072ba:	40d1      	lsrs	r1, r2
 80072bc:	000a      	movs	r2, r1
 80072be:	2100      	movs	r1, #0
 80072c0:	4099      	lsls	r1, r3
 80072c2:	000d      	movs	r5, r1
 80072c4:	4315      	orrs	r5, r2
 80072c6:	2201      	movs	r2, #1
 80072c8:	409a      	lsls	r2, r3
 80072ca:	0014      	movs	r4, r2
 80072cc:	2201      	movs	r2, #1
 80072ce:	4252      	negs	r2, r2
 80072d0:	17d3      	asrs	r3, r2, #31
 80072d2:	1912      	adds	r2, r2, r4
 80072d4:	416b      	adcs	r3, r5
 80072d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80072da:	2336      	movs	r3, #54	@ 0x36
 80072dc:	2208      	movs	r2, #8
 80072de:	189b      	adds	r3, r3, r2
 80072e0:	19db      	adds	r3, r3, r7
 80072e2:	2200      	movs	r2, #0
 80072e4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072e6:	e017      	b.n	8007318 <efficient10log10+0x84>
    {
        P = P >> 1;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	0852      	lsrs	r2, r2, #1
 80072f0:	603a      	str	r2, [r7, #0]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	603a      	str	r2, [r7, #0]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	687c      	ldr	r4, [r7, #4]
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	617c      	str	r4, [r7, #20]
        bShift++;
 8007306:	2136      	movs	r1, #54	@ 0x36
 8007308:	2008      	movs	r0, #8
 800730a:	180b      	adds	r3, r1, r0
 800730c:	19db      	adds	r3, r3, r7
 800730e:	881a      	ldrh	r2, [r3, #0]
 8007310:	180b      	adds	r3, r1, r0
 8007312:	19db      	adds	r3, r3, r7
 8007314:	3201      	adds	r2, #1
 8007316:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	429a      	cmp	r2, r3
 800731e:	d8e3      	bhi.n	80072e8 <efficient10log10+0x54>
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007324:	429a      	cmp	r2, r3
 8007326:	d103      	bne.n	8007330 <efficient10log10+0x9c>
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	429a      	cmp	r2, r3
 800732e:	d8db      	bhi.n	80072e8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	2308      	movs	r3, #8
 8007334:	3b01      	subs	r3, #1
 8007336:	2101      	movs	r1, #1
 8007338:	4099      	lsls	r1, r3
 800733a:	000b      	movs	r3, r1
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007348:	231c      	movs	r3, #28
 800734a:	2408      	movs	r4, #8
 800734c:	191b      	adds	r3, r3, r4
 800734e:	19da      	adds	r2, r3, r7
 8007350:	2320      	movs	r3, #32
 8007352:	191b      	adds	r3, r3, r4
 8007354:	19d9      	adds	r1, r3, r7
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff ff71 	bl	8007240 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800735e:	2215      	movs	r2, #21
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007364:	2036      	movs	r0, #54	@ 0x36
 8007366:	1902      	adds	r2, r0, r4
 8007368:	19d2      	adds	r2, r2, r7
 800736a:	8812      	ldrh	r2, [r2, #0]
 800736c:	2103      	movs	r1, #3
 800736e:	434a      	muls	r2, r1
 8007370:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007372:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007374:	0021      	movs	r1, r4
 8007376:	1843      	adds	r3, r0, r1
 8007378:	19db      	adds	r3, r3, r7
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2201      	movs	r2, #1
 800737e:	4353      	muls	r3, r2
 8007380:	2203      	movs	r2, #3
 8007382:	4113      	asrs	r3, r2
 8007384:	001a      	movs	r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800738a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800738c:	2314      	movs	r3, #20
 800738e:	185b      	adds	r3, r3, r1
 8007390:	19da      	adds	r2, r3, r7
 8007392:	2318      	movs	r3, #24
 8007394:	185b      	adds	r3, r3, r1
 8007396:	19db      	adds	r3, r3, r7
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f000 f80a 	bl	80073b4 <correctIntFracNumber>
    integerPart[0] = intPart;
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	601a      	str	r2, [r3, #0]
}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b010      	add	sp, #64	@ 0x40
 80073b2:	bdb0      	pop	{r4, r5, r7, pc}

080073b4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80073be:	e00a      	b.n	80073d6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3b0a      	subs	r3, #10
 80073d0:	001a      	movs	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	dcf0      	bgt.n	80073c0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80073de:	e00a      	b.n	80073f6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330a      	adds	r3, #10
 80073f0:	001a      	movs	r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3309      	adds	r3, #9
 80073fc:	dbf0      	blt.n	80073e0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da0f      	bge.n	8007426 <correctIntFracNumber+0x72>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd0b      	ble.n	8007426 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3b0a      	subs	r3, #10
 800741e:	001a      	movs	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007424:	e012      	b.n	800744c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd0e      	ble.n	800744c <correctIntFracNumber+0x98>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	da0a      	bge.n	800744c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	1e5a      	subs	r2, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330a      	adds	r3, #10
 8007446:	001a      	movs	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
}
 800744c:	46c0      	nop			@ (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b002      	add	sp, #8
 8007452:	bd80      	pop	{r7, pc}

08007454 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b08b      	sub	sp, #44	@ 0x2c
 8007458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800745a:	2414      	movs	r4, #20
 800745c:	193b      	adds	r3, r7, r4
 800745e:	0018      	movs	r0, r3
 8007460:	2314      	movs	r3, #20
 8007462:	001a      	movs	r2, r3
 8007464:	2100      	movs	r1, #0
 8007466:	f018 fecd 	bl	8020204 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800746a:	4b8a      	ldr	r3, [pc, #552]	@ (8007694 <MX_GPIO_Init+0x240>)
 800746c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746e:	4b89      	ldr	r3, [pc, #548]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007470:	2104      	movs	r1, #4
 8007472:	430a      	orrs	r2, r1
 8007474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007476:	4b87      	ldr	r3, [pc, #540]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	2204      	movs	r2, #4
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007482:	4b84      	ldr	r3, [pc, #528]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	4b83      	ldr	r3, [pc, #524]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007488:	2180      	movs	r1, #128	@ 0x80
 800748a:	430a      	orrs	r2, r1
 800748c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800748e:	4b81      	ldr	r3, [pc, #516]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	2280      	movs	r2, #128	@ 0x80
 8007494:	4013      	ands	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800749a:	4b7e      	ldr	r3, [pc, #504]	@ (8007694 <MX_GPIO_Init+0x240>)
 800749c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749e:	4b7d      	ldr	r3, [pc, #500]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074a0:	2101      	movs	r1, #1
 80074a2:	430a      	orrs	r2, r1
 80074a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	2201      	movs	r2, #1
 80074ac:	4013      	ands	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]
 80074b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074b2:	4b78      	ldr	r3, [pc, #480]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b6:	4b77      	ldr	r3, [pc, #476]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074b8:	2102      	movs	r1, #2
 80074ba:	430a      	orrs	r2, r1
 80074bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074be:	4b75      	ldr	r3, [pc, #468]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c2:	2202      	movs	r2, #2
 80074c4:	4013      	ands	r3, r2
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ca:	4b72      	ldr	r3, [pc, #456]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ce:	4b71      	ldr	r3, [pc, #452]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074d0:	2108      	movs	r1, #8
 80074d2:	430a      	orrs	r2, r1
 80074d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	2208      	movs	r2, #8
 80074dc:	4013      	ands	r3, r2
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e2:	4b6d      	ldr	r3, [pc, #436]	@ (8007698 <MX_GPIO_Init+0x244>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	2101      	movs	r1, #1
 80074e8:	0018      	movs	r0, r3
 80074ea:	f008 fec4 	bl	8010276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80074ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007698 <MX_GPIO_Init+0x244>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	2102      	movs	r1, #2
 80074f4:	0018      	movs	r0, r3
 80074f6:	f008 febe 	bl	8010276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80074fa:	4968      	ldr	r1, [pc, #416]	@ (800769c <MX_GPIO_Init+0x248>)
 80074fc:	4b68      	ldr	r3, [pc, #416]	@ (80076a0 <MX_GPIO_Init+0x24c>)
 80074fe:	2201      	movs	r2, #1
 8007500:	0018      	movs	r0, r3
 8007502:	f008 feb8 	bl	8010276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007506:	2380      	movs	r3, #128	@ 0x80
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	4866      	ldr	r0, [pc, #408]	@ (80076a4 <MX_GPIO_Init+0x250>)
 800750c:	2201      	movs	r2, #1
 800750e:	0019      	movs	r1, r3
 8007510:	f008 feb1 	bl	8010276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007514:	2380      	movs	r3, #128	@ 0x80
 8007516:	015b      	lsls	r3, r3, #5
 8007518:	4862      	ldr	r0, [pc, #392]	@ (80076a4 <MX_GPIO_Init+0x250>)
 800751a:	2200      	movs	r2, #0
 800751c:	0019      	movs	r1, r3
 800751e:	f008 feaa 	bl	8010276 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007522:	193b      	adds	r3, r7, r4
 8007524:	4a60      	ldr	r2, [pc, #384]	@ (80076a8 <MX_GPIO_Init+0x254>)
 8007526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007528:	193b      	adds	r3, r7, r4
 800752a:	2203      	movs	r2, #3
 800752c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	193b      	adds	r3, r7, r4
 8007530:	2200      	movs	r2, #0
 8007532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007534:	193b      	adds	r3, r7, r4
 8007536:	4a5b      	ldr	r2, [pc, #364]	@ (80076a4 <MX_GPIO_Init+0x250>)
 8007538:	0019      	movs	r1, r3
 800753a:	0010      	movs	r0, r2
 800753c:	f008 fd00 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007540:	193b      	adds	r3, r7, r4
 8007542:	2203      	movs	r2, #3
 8007544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007546:	193b      	adds	r3, r7, r4
 8007548:	2201      	movs	r2, #1
 800754a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	193b      	adds	r3, r7, r4
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	193b      	adds	r3, r7, r4
 8007554:	2200      	movs	r2, #0
 8007556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007558:	193b      	adds	r3, r7, r4
 800755a:	4a4f      	ldr	r2, [pc, #316]	@ (8007698 <MX_GPIO_Init+0x244>)
 800755c:	0019      	movs	r1, r3
 800755e:	0010      	movs	r0, r2
 8007560:	f008 fcee 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007564:	193b      	adds	r3, r7, r4
 8007566:	2270      	movs	r2, #112	@ 0x70
 8007568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800756a:	193b      	adds	r3, r7, r4
 800756c:	2203      	movs	r2, #3
 800756e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007570:	193b      	adds	r3, r7, r4
 8007572:	2200      	movs	r2, #0
 8007574:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007576:	193a      	adds	r2, r7, r4
 8007578:	23a0      	movs	r3, #160	@ 0xa0
 800757a:	05db      	lsls	r3, r3, #23
 800757c:	0011      	movs	r1, r2
 800757e:	0018      	movs	r0, r3
 8007580:	f008 fcde 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007584:	193b      	adds	r3, r7, r4
 8007586:	22c0      	movs	r2, #192	@ 0xc0
 8007588:	0052      	lsls	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2200      	movs	r2, #0
 8007590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007592:	193b      	adds	r3, r7, r4
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007598:	193a      	adds	r2, r7, r4
 800759a:	23a0      	movs	r3, #160	@ 0xa0
 800759c:	05db      	lsls	r3, r3, #23
 800759e:	0011      	movs	r1, r2
 80075a0:	0018      	movs	r0, r3
 80075a2:	f008 fccd 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80075a6:	193b      	adds	r3, r7, r4
 80075a8:	4a3c      	ldr	r2, [pc, #240]	@ (800769c <MX_GPIO_Init+0x248>)
 80075aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	2201      	movs	r2, #1
 80075b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	2200      	movs	r2, #0
 80075b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b8:	193b      	adds	r3, r7, r4
 80075ba:	2200      	movs	r2, #0
 80075bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075be:	193b      	adds	r3, r7, r4
 80075c0:	4a37      	ldr	r2, [pc, #220]	@ (80076a0 <MX_GPIO_Init+0x24c>)
 80075c2:	0019      	movs	r1, r3
 80075c4:	0010      	movs	r0, r2
 80075c6:	f008 fcbb 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075ca:	193b      	adds	r3, r7, r4
 80075cc:	4a37      	ldr	r2, [pc, #220]	@ (80076ac <MX_GPIO_Init+0x258>)
 80075ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075d0:	193b      	adds	r3, r7, r4
 80075d2:	2203      	movs	r2, #3
 80075d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d6:	193b      	adds	r3, r7, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075dc:	193b      	adds	r3, r7, r4
 80075de:	4a30      	ldr	r2, [pc, #192]	@ (80076a0 <MX_GPIO_Init+0x24c>)
 80075e0:	0019      	movs	r1, r3
 80075e2:	0010      	movs	r0, r2
 80075e4:	f008 fcac 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80075e8:	0021      	movs	r1, r4
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	2280      	movs	r2, #128	@ 0x80
 80075ee:	0092      	lsls	r2, r2, #2
 80075f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075f2:	000c      	movs	r4, r1
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	2200      	movs	r2, #0
 80075f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fa:	193b      	adds	r3, r7, r4
 80075fc:	2200      	movs	r2, #0
 80075fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007600:	193b      	adds	r3, r7, r4
 8007602:	4a28      	ldr	r2, [pc, #160]	@ (80076a4 <MX_GPIO_Init+0x250>)
 8007604:	0019      	movs	r1, r3
 8007606:	0010      	movs	r0, r2
 8007608:	f008 fc9a 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800760c:	193b      	adds	r3, r7, r4
 800760e:	2280      	movs	r2, #128	@ 0x80
 8007610:	0212      	lsls	r2, r2, #8
 8007612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007614:	193b      	adds	r3, r7, r4
 8007616:	2288      	movs	r2, #136	@ 0x88
 8007618:	0352      	lsls	r2, r2, #13
 800761a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	193b      	adds	r3, r7, r4
 800761e:	2200      	movs	r2, #0
 8007620:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007622:	193a      	adds	r2, r7, r4
 8007624:	23a0      	movs	r3, #160	@ 0xa0
 8007626:	05db      	lsls	r3, r3, #23
 8007628:	0011      	movs	r1, r2
 800762a:	0018      	movs	r0, r3
 800762c:	f008 fc88 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007630:	0021      	movs	r1, r4
 8007632:	187b      	adds	r3, r7, r1
 8007634:	22c0      	movs	r2, #192	@ 0xc0
 8007636:	0152      	lsls	r2, r2, #5
 8007638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800763a:	000c      	movs	r4, r1
 800763c:	193b      	adds	r3, r7, r4
 800763e:	2201      	movs	r2, #1
 8007640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	193b      	adds	r3, r7, r4
 8007644:	2200      	movs	r2, #0
 8007646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007648:	193b      	adds	r3, r7, r4
 800764a:	2200      	movs	r2, #0
 800764c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800764e:	193b      	adds	r3, r7, r4
 8007650:	4a14      	ldr	r2, [pc, #80]	@ (80076a4 <MX_GPIO_Init+0x250>)
 8007652:	0019      	movs	r1, r3
 8007654:	0010      	movs	r0, r2
 8007656:	f008 fc73 	bl	800ff40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800765a:	0021      	movs	r1, r4
 800765c:	187b      	adds	r3, r7, r1
 800765e:	2204      	movs	r2, #4
 8007660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007662:	187b      	adds	r3, r7, r1
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007668:	187b      	adds	r3, r7, r1
 800766a:	2201      	movs	r2, #1
 800766c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800766e:	187b      	adds	r3, r7, r1
 8007670:	4a0f      	ldr	r2, [pc, #60]	@ (80076b0 <MX_GPIO_Init+0x25c>)
 8007672:	0019      	movs	r1, r3
 8007674:	0010      	movs	r0, r2
 8007676:	f008 fc63 	bl	800ff40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	2007      	movs	r0, #7
 8007680:	f008 f80c 	bl	800f69c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007684:	2007      	movs	r0, #7
 8007686:	f008 f81e 	bl	800f6c6 <HAL_NVIC_EnableIRQ>

}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	46bd      	mov	sp, r7
 800768e:	b00b      	add	sp, #44	@ 0x2c
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	40021000 	.word	0x40021000
 8007698:	50001c00 	.word	0x50001c00
 800769c:	00000301 	.word	0x00000301
 80076a0:	50000400 	.word	0x50000400
 80076a4:	50000800 	.word	0x50000800
 80076a8:	0000200c 	.word	0x0000200c
 80076ac:	0000403e 	.word	0x0000403e
 80076b0:	50000c00 	.word	0x50000c00

080076b4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2100      	movs	r1, #0
 80076c2:	0018      	movs	r0, r3
 80076c4:	f00f f9b2 	bl	8016a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2108      	movs	r1, #8
 80076cc:	0018      	movs	r0, r3
 80076ce:	f00f f9ad 	bl	8016a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	210c      	movs	r1, #12
 80076d6:	0018      	movs	r0, r3
 80076d8:	f00f f9a8 	bl	8016a2c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	05db      	lsls	r3, r3, #23
 80076e0:	22fa      	movs	r2, #250	@ 0xfa
 80076e2:	0112      	lsls	r2, r2, #4
 80076e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80076e6:	2380      	movs	r3, #128	@ 0x80
 80076e8:	05db      	lsls	r3, r3, #23
 80076ea:	22fa      	movs	r2, #250	@ 0xfa
 80076ec:	0112      	lsls	r2, r2, #4
 80076ee:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80076f0:	2380      	movs	r3, #128	@ 0x80
 80076f2:	05db      	lsls	r3, r3, #23
 80076f4:	22fa      	movs	r2, #250	@ 0xfa
 80076f6:	0112      	lsls	r2, r2, #4
 80076f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80076fa:	2380      	movs	r3, #128	@ 0x80
 80076fc:	05db      	lsls	r3, r3, #23
 80076fe:	22fa      	movs	r2, #250	@ 0xfa
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2100      	movs	r1, #0
 8007708:	0018      	movs	r0, r3
 800770a:	f00f f98f 	bl	8016a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2104      	movs	r1, #4
 8007712:	0018      	movs	r0, r3
 8007714:	f00f f98a 	bl	8016a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2108      	movs	r1, #8
 800771c:	0018      	movs	r0, r3
 800771e:	f00f f985 	bl	8016a2c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007722:	4b0a      	ldr	r3, [pc, #40]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 8007724:	22fa      	movs	r2, #250	@ 0xfa
 8007726:	0112      	lsls	r2, r2, #4
 8007728:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800772a:	4b08      	ldr	r3, [pc, #32]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 800772c:	22fa      	movs	r2, #250	@ 0xfa
 800772e:	0112      	lsls	r2, r2, #4
 8007730:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007732:	4b06      	ldr	r3, [pc, #24]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 8007734:	22fa      	movs	r2, #250	@ 0xfa
 8007736:	0112      	lsls	r2, r2, #4
 8007738:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800773a:	4b04      	ldr	r3, [pc, #16]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 800773c:	22fa      	movs	r2, #250	@ 0xfa
 800773e:	0112      	lsls	r2, r2, #4
 8007740:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007742:	46c0      	nop			@ (mov r8, r8)
 8007744:	46bd      	mov	sp, r7
 8007746:	b002      	add	sp, #8
 8007748:	bd80      	pop	{r7, pc}
 800774a:	46c0      	nop			@ (mov r8, r8)
 800774c:	40000400 	.word	0x40000400

08007750 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	0018      	movs	r0, r3
 800775a:	2314      	movs	r3, #20
 800775c:	001a      	movs	r2, r3
 800775e:	2100      	movs	r1, #0
 8007760:	f018 fd50 	bl	8020204 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8007764:	1d3b      	adds	r3, r7, #4
 8007766:	2205      	movs	r2, #5
 8007768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800776a:	1d3b      	adds	r3, r7, #4
 800776c:	2203      	movs	r2, #3
 800776e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007776:	1d3a      	adds	r2, r7, #4
 8007778:	23a0      	movs	r3, #160	@ 0xa0
 800777a:	05db      	lsls	r3, r3, #23
 800777c:	0011      	movs	r1, r2
 800777e:	0018      	movs	r0, r3
 8007780:	f008 fbde 	bl	800ff40 <HAL_GPIO_Init>
}
 8007784:	46c0      	nop			@ (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	b006      	add	sp, #24
 800778a:	bd80      	pop	{r7, pc}

0800778c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007790:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <MX_I2C1_Init+0x74>)
 8007792:	4a1c      	ldr	r2, [pc, #112]	@ (8007804 <MX_I2C1_Init+0x78>)
 8007794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007796:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <MX_I2C1_Init+0x74>)
 8007798:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <MX_I2C1_Init+0x7c>)
 800779a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800779c:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <MX_I2C1_Init+0x74>)
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077a2:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077a8:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077ae:	4b14      	ldr	r3, [pc, #80]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077b4:	4b12      	ldr	r3, [pc, #72]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077ba:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077bc:	2200      	movs	r2, #0
 80077be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077c8:	0018      	movs	r0, r3
 80077ca:	f008 fd8d 	bl	80102e8 <HAL_I2C_Init>
 80077ce:	1e03      	subs	r3, r0, #0
 80077d0:	d001      	beq.n	80077d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077d2:	f000 fd9b 	bl	800830c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077d8:	2100      	movs	r1, #0
 80077da:	0018      	movs	r0, r3
 80077dc:	f00b f95e 	bl	8012a9c <HAL_I2CEx_ConfigAnalogFilter>
 80077e0:	1e03      	subs	r3, r0, #0
 80077e2:	d001      	beq.n	80077e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80077e4:	f000 fd92 	bl	800830c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077ea:	2100      	movs	r1, #0
 80077ec:	0018      	movs	r0, r3
 80077ee:	f00b f9a1 	bl	8012b34 <HAL_I2CEx_ConfigDigitalFilter>
 80077f2:	1e03      	subs	r3, r0, #0
 80077f4:	d001      	beq.n	80077fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80077f6:	f000 fd89 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000dec 	.word	0x20000dec
 8007804:	40005400 	.word	0x40005400
 8007808:	00503d58 	.word	0x00503d58

0800780c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007810:	4b1b      	ldr	r3, [pc, #108]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007812:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <MX_I2C2_Init+0x78>)
 8007814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007816:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007818:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <MX_I2C2_Init+0x7c>)
 800781a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800781c:	4b18      	ldr	r3, [pc, #96]	@ (8007880 <MX_I2C2_Init+0x74>)
 800781e:	2200      	movs	r2, #0
 8007820:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007822:	4b17      	ldr	r3, [pc, #92]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007824:	2201      	movs	r2, #1
 8007826:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <MX_I2C2_Init+0x74>)
 800782a:	2200      	movs	r2, #0
 800782c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800782e:	4b14      	ldr	r3, [pc, #80]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007830:	2200      	movs	r2, #0
 8007832:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007834:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007836:	2200      	movs	r2, #0
 8007838:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800783a:	4b11      	ldr	r3, [pc, #68]	@ (8007880 <MX_I2C2_Init+0x74>)
 800783c:	2200      	movs	r2, #0
 800783e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007840:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007842:	2200      	movs	r2, #0
 8007844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007846:	4b0e      	ldr	r3, [pc, #56]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007848:	0018      	movs	r0, r3
 800784a:	f008 fd4d 	bl	80102e8 <HAL_I2C_Init>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d001      	beq.n	8007856 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007852:	f000 fd5b 	bl	800830c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007856:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007858:	2100      	movs	r1, #0
 800785a:	0018      	movs	r0, r3
 800785c:	f00b f91e 	bl	8012a9c <HAL_I2CEx_ConfigAnalogFilter>
 8007860:	1e03      	subs	r3, r0, #0
 8007862:	d001      	beq.n	8007868 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007864:	f000 fd52 	bl	800830c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007868:	4b05      	ldr	r3, [pc, #20]	@ (8007880 <MX_I2C2_Init+0x74>)
 800786a:	2100      	movs	r1, #0
 800786c:	0018      	movs	r0, r3
 800786e:	f00b f961 	bl	8012b34 <HAL_I2CEx_ConfigDigitalFilter>
 8007872:	1e03      	subs	r3, r0, #0
 8007874:	d001      	beq.n	800787a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007876:	f000 fd49 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20000e40 	.word	0x20000e40
 8007884:	40005800 	.word	0x40005800
 8007888:	00503d58 	.word	0x00503d58

0800788c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b08b      	sub	sp, #44	@ 0x2c
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007894:	2414      	movs	r4, #20
 8007896:	193b      	adds	r3, r7, r4
 8007898:	0018      	movs	r0, r3
 800789a:	2314      	movs	r3, #20
 800789c:	001a      	movs	r2, r3
 800789e:	2100      	movs	r1, #0
 80078a0:	f018 fcb0 	bl	8020204 <memset>
  if(i2cHandle->Instance==I2C1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5d      	ldr	r2, [pc, #372]	@ (8007a20 <HAL_I2C_MspInit+0x194>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d000      	beq.n	80078b0 <HAL_I2C_MspInit+0x24>
 80078ae:	e083      	b.n	80079b8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078b6:	2102      	movs	r1, #2
 80078b8:	430a      	orrs	r2, r1
 80078ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078bc:	4b59      	ldr	r3, [pc, #356]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	2202      	movs	r2, #2
 80078c2:	4013      	ands	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078c8:	0021      	movs	r1, r4
 80078ca:	187b      	adds	r3, r7, r1
 80078cc:	22c0      	movs	r2, #192	@ 0xc0
 80078ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	2212      	movs	r2, #18
 80078d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d6:	187b      	adds	r3, r7, r1
 80078d8:	2200      	movs	r2, #0
 80078da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078dc:	187b      	adds	r3, r7, r1
 80078de:	2203      	movs	r2, #3
 80078e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80078e2:	187b      	adds	r3, r7, r1
 80078e4:	2201      	movs	r2, #1
 80078e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078e8:	187b      	adds	r3, r7, r1
 80078ea:	4a4f      	ldr	r2, [pc, #316]	@ (8007a28 <HAL_I2C_MspInit+0x19c>)
 80078ec:	0019      	movs	r1, r3
 80078ee:	0010      	movs	r0, r2
 80078f0:	f008 fb26 	bl	800ff40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078fa:	2180      	movs	r1, #128	@ 0x80
 80078fc:	0389      	lsls	r1, r1, #14
 80078fe:	430a      	orrs	r2, r1
 8007900:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007902:	4b4a      	ldr	r3, [pc, #296]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007904:	4a4a      	ldr	r2, [pc, #296]	@ (8007a30 <HAL_I2C_MspInit+0x1a4>)
 8007906:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007908:	4b48      	ldr	r3, [pc, #288]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800790a:	2206      	movs	r2, #6
 800790c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800790e:	4b47      	ldr	r3, [pc, #284]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007910:	2200      	movs	r2, #0
 8007912:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007914:	4b45      	ldr	r3, [pc, #276]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007916:	2200      	movs	r2, #0
 8007918:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800791a:	4b44      	ldr	r3, [pc, #272]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800791c:	2280      	movs	r2, #128	@ 0x80
 800791e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007920:	4b42      	ldr	r3, [pc, #264]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007922:	2200      	movs	r2, #0
 8007924:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007926:	4b41      	ldr	r3, [pc, #260]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007928:	2200      	movs	r2, #0
 800792a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800792c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800792e:	2200      	movs	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007932:	4b3e      	ldr	r3, [pc, #248]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007934:	2200      	movs	r2, #0
 8007936:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007938:	4b3c      	ldr	r3, [pc, #240]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800793a:	0018      	movs	r0, r3
 800793c:	f007 fee4 	bl	800f708 <HAL_DMA_Init>
 8007940:	1e03      	subs	r3, r0, #0
 8007942:	d001      	beq.n	8007948 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007944:	f000 fce2 	bl	800830c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a38      	ldr	r2, [pc, #224]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800794c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800794e:	4b37      	ldr	r3, [pc, #220]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007954:	4b37      	ldr	r3, [pc, #220]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007956:	4a38      	ldr	r2, [pc, #224]	@ (8007a38 <HAL_I2C_MspInit+0x1ac>)
 8007958:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800795a:	4b36      	ldr	r3, [pc, #216]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800795c:	2206      	movs	r2, #6
 800795e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007960:	4b34      	ldr	r3, [pc, #208]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007962:	2210      	movs	r2, #16
 8007964:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007966:	4b33      	ldr	r3, [pc, #204]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007968:	2200      	movs	r2, #0
 800796a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800796c:	4b31      	ldr	r3, [pc, #196]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800796e:	2280      	movs	r2, #128	@ 0x80
 8007970:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007972:	4b30      	ldr	r3, [pc, #192]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007974:	2200      	movs	r2, #0
 8007976:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007978:	4b2e      	ldr	r3, [pc, #184]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800797a:	2200      	movs	r2, #0
 800797c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800797e:	4b2d      	ldr	r3, [pc, #180]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007980:	2200      	movs	r2, #0
 8007982:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007984:	4b2b      	ldr	r3, [pc, #172]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007986:	2200      	movs	r2, #0
 8007988:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800798a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800798c:	0018      	movs	r0, r3
 800798e:	f007 febb 	bl	800f708 <HAL_DMA_Init>
 8007992:	1e03      	subs	r3, r0, #0
 8007994:	d001      	beq.n	800799a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007996:	f000 fcb9 	bl	800830c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a25      	ldr	r2, [pc, #148]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800799e:	639a      	str	r2, [r3, #56]	@ 0x38
 80079a0:	4b24      	ldr	r3, [pc, #144]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80079a6:	2200      	movs	r2, #0
 80079a8:	2100      	movs	r1, #0
 80079aa:	2017      	movs	r0, #23
 80079ac:	f007 fe76 	bl	800f69c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80079b0:	2017      	movs	r0, #23
 80079b2:	f007 fe88 	bl	800f6c6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079b6:	e02e      	b.n	8007a16 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1f      	ldr	r2, [pc, #124]	@ (8007a3c <HAL_I2C_MspInit+0x1b0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d129      	bne.n	8007a16 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079c2:	4b18      	ldr	r3, [pc, #96]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	4b17      	ldr	r3, [pc, #92]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80079c8:	2102      	movs	r1, #2
 80079ca:	430a      	orrs	r2, r1
 80079cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	2202      	movs	r2, #2
 80079d4:	4013      	ands	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80079da:	2114      	movs	r1, #20
 80079dc:	187b      	adds	r3, r7, r1
 80079de:	22c0      	movs	r2, #192	@ 0xc0
 80079e0:	0112      	lsls	r2, r2, #4
 80079e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80079e4:	187b      	adds	r3, r7, r1
 80079e6:	2212      	movs	r2, #18
 80079e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ea:	187b      	adds	r3, r7, r1
 80079ec:	2200      	movs	r2, #0
 80079ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f0:	187b      	adds	r3, r7, r1
 80079f2:	2203      	movs	r2, #3
 80079f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80079f6:	187b      	adds	r3, r7, r1
 80079f8:	2206      	movs	r2, #6
 80079fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079fc:	187b      	adds	r3, r7, r1
 80079fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007a28 <HAL_I2C_MspInit+0x19c>)
 8007a00:	0019      	movs	r1, r3
 8007a02:	0010      	movs	r0, r2
 8007a04:	f008 fa9c 	bl	800ff40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 8007a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a0c:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 8007a0e:	2180      	movs	r1, #128	@ 0x80
 8007a10:	03c9      	lsls	r1, r1, #15
 8007a12:	430a      	orrs	r2, r1
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b00b      	add	sp, #44	@ 0x2c
 8007a1c:	bd90      	pop	{r4, r7, pc}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	40005400 	.word	0x40005400
 8007a24:	40021000 	.word	0x40021000
 8007a28:	50000400 	.word	0x50000400
 8007a2c:	20000e94 	.word	0x20000e94
 8007a30:	40020030 	.word	0x40020030
 8007a34:	20000edc 	.word	0x20000edc
 8007a38:	4002001c 	.word	0x4002001c
 8007a3c:	40005800 	.word	0x40005800

08007a40 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a44:	4b10      	ldr	r3, [pc, #64]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a46:	4a11      	ldr	r2, [pc, #68]	@ (8007a8c <MX_I2S2_Init+0x4c>)
 8007a48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a4c:	22c0      	movs	r2, #192	@ 0xc0
 8007a4e:	0092      	lsls	r2, r2, #2
 8007a50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a52:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a58:	4b0b      	ldr	r3, [pc, #44]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a64:	4b08      	ldr	r3, [pc, #32]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a66:	22fa      	movs	r2, #250	@ 0xfa
 8007a68:	0192      	lsls	r2, r2, #6
 8007a6a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a72:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a74:	0018      	movs	r0, r3
 8007a76:	f00b f8a9 	bl	8012bcc <HAL_I2S_Init>
 8007a7a:	1e03      	subs	r3, r0, #0
 8007a7c:	d001      	beq.n	8007a82 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007a7e:	f000 fc45 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000f24 	.word	0x20000f24
 8007a8c:	40003800 	.word	0x40003800

08007a90 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b089      	sub	sp, #36	@ 0x24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a98:	240c      	movs	r4, #12
 8007a9a:	193b      	adds	r3, r7, r4
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	2314      	movs	r3, #20
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f018 fbae 	bl	8020204 <memset>
  if(i2sHandle->Instance==SPI2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2d      	ldr	r2, [pc, #180]	@ (8007b64 <HAL_I2S_MspInit+0xd4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d154      	bne.n	8007b5c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ab8:	2180      	movs	r1, #128	@ 0x80
 8007aba:	01c9      	lsls	r1, r1, #7
 8007abc:	430a      	orrs	r2, r1
 8007abe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac0:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac4:	4b28      	ldr	r3, [pc, #160]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007acc:	4b26      	ldr	r3, [pc, #152]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007ad8:	193b      	adds	r3, r7, r4
 8007ada:	22b0      	movs	r2, #176	@ 0xb0
 8007adc:	0212      	lsls	r2, r2, #8
 8007ade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae0:	0021      	movs	r1, r4
 8007ae2:	187b      	adds	r3, r7, r1
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae8:	187b      	adds	r3, r7, r1
 8007aea:	2200      	movs	r2, #0
 8007aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aee:	187b      	adds	r3, r7, r1
 8007af0:	2200      	movs	r2, #0
 8007af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007afa:	187b      	adds	r3, r7, r1
 8007afc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <HAL_I2S_MspInit+0xdc>)
 8007afe:	0019      	movs	r1, r3
 8007b00:	0010      	movs	r0, r2
 8007b02:	f008 fa1d 	bl	800ff40 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007b06:	4b1a      	ldr	r3, [pc, #104]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b08:	4a1a      	ldr	r2, [pc, #104]	@ (8007b74 <HAL_I2S_MspInit+0xe4>)
 8007b0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007b0c:	4b18      	ldr	r3, [pc, #96]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b0e:	2202      	movs	r2, #2
 8007b10:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b12:	4b17      	ldr	r3, [pc, #92]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b18:	4b15      	ldr	r3, [pc, #84]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b20:	2280      	movs	r2, #128	@ 0x80
 8007b22:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b24:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b26:	2280      	movs	r2, #128	@ 0x80
 8007b28:	0052      	lsls	r2, r2, #1
 8007b2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b2c:	4b10      	ldr	r3, [pc, #64]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b2e:	2280      	movs	r2, #128	@ 0x80
 8007b30:	00d2      	lsls	r2, r2, #3
 8007b32:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b34:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b36:	2220      	movs	r2, #32
 8007b38:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b42:	0018      	movs	r0, r3
 8007b44:	f007 fde0 	bl	800f708 <HAL_DMA_Init>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b4c:	f000 fbde 	bl	800830c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a07      	ldr	r2, [pc, #28]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b54:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b56:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b5c:	46c0      	nop			@ (mov r8, r8)
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b009      	add	sp, #36	@ 0x24
 8007b62:	bd90      	pop	{r4, r7, pc}
 8007b64:	40003800 	.word	0x40003800
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	50000400 	.word	0x50000400
 8007b70:	20000f60 	.word	0x20000f60
 8007b74:	40020044 	.word	0x40020044

08007b78 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  testDone = true;
 8007b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf8 <SetTestDone+0x80>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007b82:	23fa      	movs	r3, #250	@ 0xfa
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	0018      	movs	r0, r3
 8007b88:	f007 f8ee 	bl	800ed68 <HAL_Delay>
  SetDBLED(false, false, true);
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2100      	movs	r1, #0
 8007b90:	2000      	movs	r0, #0
 8007b92:	f005 fb79 	bl	800d288 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007b96:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <SetTestDone+0x84>)
 8007b98:	23fa      	movs	r3, #250	@ 0xfa
 8007b9a:	0119      	lsls	r1, r3, #4
 8007b9c:	23fa      	movs	r3, #250	@ 0xfa
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f005 fb3d 	bl	800d220 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007ba6:	4a15      	ldr	r2, [pc, #84]	@ (8007bfc <SetTestDone+0x84>)
 8007ba8:	23fa      	movs	r3, #250	@ 0xfa
 8007baa:	0119      	lsls	r1, r3, #4
 8007bac:	23fa      	movs	r3, #250	@ 0xfa
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f005 fbb3 	bl	800d31c <SetVocLED>
  HAL_Delay(500);
 8007bb6:	23fa      	movs	r3, #250	@ 0xfa
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f007 f8d4 	bl	800ed68 <HAL_Delay>
  SetDBLED(false, false, false);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f005 fb5f 	bl	800d288 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007bca:	23fa      	movs	r3, #250	@ 0xfa
 8007bcc:	011a      	lsls	r2, r3, #4
 8007bce:	23fa      	movs	r3, #250	@ 0xfa
 8007bd0:	0119      	lsls	r1, r3, #4
 8007bd2:	23fa      	movs	r3, #250	@ 0xfa
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f005 fb22 	bl	800d220 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007bdc:	23fa      	movs	r3, #250	@ 0xfa
 8007bde:	011a      	lsls	r2, r3, #4
 8007be0:	23fa      	movs	r3, #250	@ 0xfa
 8007be2:	0119      	lsls	r1, r3, #4
 8007be4:	23fa      	movs	r3, #250	@ 0xfa
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	0018      	movs	r0, r3
 8007bea:	f005 fb97 	bl	800d31c <SetVocLED>
  InitDone();
 8007bee:	f005 fa6b 	bl	800d0c8 <InitDone>
}
 8007bf2:	46c0      	nop			@ (mov r8, r8)
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000fa8 	.word	0x20000fa8
 8007bfc:	00000bb8 	.word	0x00000bb8

08007c00 <FlashLEDs>:

void FlashLEDs(){
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007c06:	1dfb      	adds	r3, r7, #7
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
 8007c0c:	e021      	b.n	8007c52 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007c0e:	2201      	movs	r2, #1
 8007c10:	2101      	movs	r1, #1
 8007c12:	2001      	movs	r0, #1
 8007c14:	f005 fb38 	bl	800d288 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007c18:	4a12      	ldr	r2, [pc, #72]	@ (8007c64 <FlashLEDs+0x64>)
 8007c1a:	23fa      	movs	r3, #250	@ 0xfa
 8007c1c:	0119      	lsls	r1, r3, #4
 8007c1e:	23fa      	movs	r3, #250	@ 0xfa
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	0018      	movs	r0, r3
 8007c24:	f005 fafc 	bl	800d220 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c28:	4a0e      	ldr	r2, [pc, #56]	@ (8007c64 <FlashLEDs+0x64>)
 8007c2a:	23fa      	movs	r3, #250	@ 0xfa
 8007c2c:	0119      	lsls	r1, r3, #4
 8007c2e:	23fa      	movs	r3, #250	@ 0xfa
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	0018      	movs	r0, r3
 8007c34:	f005 fb72 	bl	800d31c <SetVocLED>
    HAL_Delay(250);
 8007c38:	20fa      	movs	r0, #250	@ 0xfa
 8007c3a:	f007 f895 	bl	800ed68 <HAL_Delay>
    SetLEDsOff();
 8007c3e:	f005 fcad 	bl	800d59c <SetLEDsOff>
    HAL_Delay(250);
 8007c42:	20fa      	movs	r0, #250	@ 0xfa
 8007c44:	f007 f890 	bl	800ed68 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c48:	1dfb      	adds	r3, r7, #7
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	1dfb      	adds	r3, r7, #7
 8007c4e:	3201      	adds	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	1dfb      	adds	r3, r7, #7
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d9d9      	bls.n	8007c0e <FlashLEDs+0xe>
  }
}
 8007c5a:	46c0      	nop			@ (mov r8, r8)
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b002      	add	sp, #8
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	00000bb8 	.word	0x00000bb8

08007c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c6e:	f007 f80b 	bl	800ec88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c72:	f000 fa05 	bl	8008080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c76:	f7ff fbed 	bl	8007454 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c7a:	f7ff fabb 	bl	80071f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8007c7e:	f7ff fd85 	bl	800778c <MX_I2C1_Init>
  MX_I2S2_Init();
 8007c82:	f7ff fedd 	bl	8007a40 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007c86:	f006 fa2d 	bl	800e0e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007c8a:	f7ff fdbf 	bl	800780c <MX_I2C2_Init>
  MX_TIM2_Init();
 8007c8e:	f006 f821 	bl	800dcd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c92:	f006 f893 	bl	800ddbc <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007c96:	f006 fa59 	bl	800e14c <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007c9a:	f7ff f9f9 	bl	8007090 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007c9e:	f014 ffbf 	bl	801cc20 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007ca2:	f001 f93f 	bl	8008f24 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007ca6:	f006 f9e7 	bl	800e078 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007caa:	f006 f905 	bl	800deb8 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007cae:	4acd      	ldr	r2, [pc, #820]	@ (8007fe4 <main+0x37c>)
 8007cb0:	4bcd      	ldr	r3, [pc, #820]	@ (8007fe8 <main+0x380>)
 8007cb2:	0011      	movs	r1, r2
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7ff fcfd 	bl	80076b4 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8007cba:	f006 fc89 	bl	800e5d0 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8007cbe:	f005 fe93 	bl	800d9e8 <Battery_Upkeep>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	4bc9      	ldr	r3, [pc, #804]	@ (8007fec <main+0x384>)
 8007cc8:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8007cca:	4bc8      	ldr	r3, [pc, #800]	@ (8007fec <main+0x384>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d113      	bne.n	8007cfa <main+0x92>
    SetAllREDLED();
 8007cd2:	f005 fc7f 	bl	800d5d4 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007cd6:	f7fe fb03 	bl	80062e0 <ReadBatteryVoltage>
 8007cda:	1c03      	adds	r3, r0, #0
 8007cdc:	1c18      	adds	r0, r3, #0
 8007cde:	f7fb fbc1 	bl	8003464 <__aeabi_f2d>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	000b      	movs	r3, r1
 8007ce6:	48c2      	ldr	r0, [pc, #776]	@ (8007ff0 <main+0x388>)
 8007ce8:	49c2      	ldr	r1, [pc, #776]	@ (8007ff4 <main+0x38c>)
 8007cea:	9200      	str	r2, [sp, #0]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	0002      	movs	r2, r0
 8007cf0:	2002      	movs	r0, #2
 8007cf2:	f006 fbe9 	bl	800e4c8 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8007cf6:	f7fe ff05 	bl	8006b04 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8007cfa:	f7fe fbc7 	bl	800648c <UserButton_Pressed>
 8007cfe:	1e03      	subs	r3, r0, #0
 8007d00:	d004      	beq.n	8007d0c <main+0xa4>
    EnableESPProg();
 8007d02:	f015 f85d 	bl	801cdc0 <EnableESPProg>
    ESP_Programming = true;
 8007d06:	4bbc      	ldr	r3, [pc, #752]	@ (8007ff8 <main+0x390>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007d0c:	2003      	movs	r0, #3
 8007d0e:	f006 fc45 	bl	800e59c <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007d12:	49ba      	ldr	r1, [pc, #744]	@ (8007ffc <main+0x394>)
 8007d14:	4bba      	ldr	r3, [pc, #744]	@ (8008000 <main+0x398>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f00f fae7 	bl	80172ec <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007d1e:	4bb9      	ldr	r3, [pc, #740]	@ (8008004 <main+0x39c>)
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7fe ffbb 	bl	8006c9c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007d26:	4ab8      	ldr	r2, [pc, #736]	@ (8008008 <main+0x3a0>)
 8007d28:	49b8      	ldr	r1, [pc, #736]	@ (800800c <main+0x3a4>)
 8007d2a:	48b9      	ldr	r0, [pc, #740]	@ (8008010 <main+0x3a8>)
 8007d2c:	230b      	movs	r3, #11
 8007d2e:	f004 fb41 	bl	800c3b4 <soundInit>
 8007d32:	0003      	movs	r3, r0
 8007d34:	001a      	movs	r2, r3
 8007d36:	2301      	movs	r3, #1
 8007d38:	4053      	eors	r3, r2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007d40:	4ab4      	ldr	r2, [pc, #720]	@ (8008014 <main+0x3ac>)
 8007d42:	4bb5      	ldr	r3, [pc, #724]	@ (8008018 <main+0x3b0>)
 8007d44:	21fa      	movs	r1, #250	@ 0xfa
 8007d46:	0018      	movs	r0, r3
 8007d48:	f006 fc76 	bl	800e638 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007d4c:	4bb3      	ldr	r3, [pc, #716]	@ (800801c <main+0x3b4>)
 8007d4e:	4ab4      	ldr	r2, [pc, #720]	@ (8008020 <main+0x3b8>)
 8007d50:	49ae      	ldr	r1, [pc, #696]	@ (800800c <main+0x3a4>)
 8007d52:	48b4      	ldr	r0, [pc, #720]	@ (8008024 <main+0x3bc>)
 8007d54:	f000 fb9c 	bl	8008490 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8007d58:	f006 fffc 	bl	800ed54 <HAL_GetTick>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	4ab2      	ldr	r2, [pc, #712]	@ (8008028 <main+0x3c0>)
 8007d60:	189a      	adds	r2, r3, r2
 8007d62:	4bb2      	ldr	r3, [pc, #712]	@ (800802c <main+0x3c4>)
 8007d64:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d66:	f7fe fb71 	bl	800644c <Check_USB_PowerOn>
 8007d6a:	0003      	movs	r3, r0
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	4193      	sbcs	r3, r2
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2201      	movs	r2, #1
 8007d74:	4053      	eors	r3, r2
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	1c1a      	adds	r2, r3, #0
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	4bab      	ldr	r3, [pc, #684]	@ (8008030 <main+0x3c8>)
 8007d82:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007d84:	4bab      	ldr	r3, [pc, #684]	@ (8008034 <main+0x3cc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f006 fb47 	bl	800e41c <TimestampIsReached>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d00e      	beq.n	8007db0 <main+0x148>
      charge = Battery_Upkeep();
 8007d92:	f005 fe29 	bl	800d9e8 <Battery_Upkeep>
 8007d96:	0003      	movs	r3, r0
 8007d98:	001a      	movs	r2, r3
 8007d9a:	4b94      	ldr	r3, [pc, #592]	@ (8007fec <main+0x384>)
 8007d9c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007d9e:	f006 ffd9 	bl	800ed54 <HAL_GetTick>
 8007da2:	0003      	movs	r3, r0
 8007da4:	4aa4      	ldr	r2, [pc, #656]	@ (8008038 <main+0x3d0>)
 8007da6:	189a      	adds	r2, r3, r2
 8007da8:	4ba2      	ldr	r3, [pc, #648]	@ (8008034 <main+0x3cc>)
 8007daa:	601a      	str	r2, [r3, #0]
        showTime();
 8007dac:	f7fe fb7e 	bl	80064ac <showTime>
    }
    configCheck();
 8007db0:	f005 fca2 	bl	800d6f8 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007db4:	4ba1      	ldr	r3, [pc, #644]	@ (800803c <main+0x3d4>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007dba:	4b8c      	ldr	r3, [pc, #560]	@ (8007fec <main+0x384>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d003      	beq.n	8007dca <main+0x162>
 8007dc2:	4b8a      	ldr	r3, [pc, #552]	@ (8007fec <main+0x384>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <main+0x16c>
          FlashLEDs();
 8007dca:	f7ff ff19 	bl	8007c00 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007dce:	4b9c      	ldr	r3, [pc, #624]	@ (8008040 <main+0x3d8>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007dd4:	4b85      	ldr	r3, [pc, #532]	@ (8007fec <main+0x384>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <main+0x188>
 8007ddc:	4b99      	ldr	r3, [pc, #612]	@ (8008044 <main+0x3dc>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	d105      	bne.n	8007df0 <main+0x188>
          batteryEmpty = true;
 8007de4:	4b98      	ldr	r3, [pc, #608]	@ (8008048 <main+0x3e0>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007dea:	f7fe fe8b 	bl	8006b04 <Enter_Standby_Mode>
 8007dee:	e002      	b.n	8007df6 <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8007df0:	4b95      	ldr	r3, [pc, #596]	@ (8008048 <main+0x3e0>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007df6:	4b95      	ldr	r3, [pc, #596]	@ (800804c <main+0x3e4>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d100      	bne.n	8007e00 <main+0x198>
 8007dfe:	e0b0      	b.n	8007f62 <main+0x2fa>
 8007e00:	4b7d      	ldr	r3, [pc, #500]	@ (8007ff8 <main+0x390>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2201      	movs	r2, #1
 8007e06:	4053      	eors	r3, r2
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d100      	bne.n	8007e10 <main+0x1a8>
 8007e0e:	e0a8      	b.n	8007f62 <main+0x2fa>
 8007e10:	4b8d      	ldr	r3, [pc, #564]	@ (8008048 <main+0x3e0>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	4053      	eors	r3, r2
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d100      	bne.n	8007e20 <main+0x1b8>
 8007e1e:	e0a0      	b.n	8007f62 <main+0x2fa>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007e20:	4b83      	ldr	r3, [pc, #524]	@ (8008030 <main+0x3c8>)
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	4b8a      	ldr	r3, [pc, #552]	@ (8008050 <main+0x3e8>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d026      	beq.n	8007e7a <main+0x212>
        Info("USB power state change detected");
 8007e2c:	4a89      	ldr	r2, [pc, #548]	@ (8008054 <main+0x3ec>)
 8007e2e:	4b71      	ldr	r3, [pc, #452]	@ (8007ff4 <main+0x38c>)
 8007e30:	0019      	movs	r1, r3
 8007e32:	2002      	movs	r0, #2
 8007e34:	f006 fb48 	bl	800e4c8 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007e38:	f000 fab0 	bl	800839c <IsSGPPresent>
 8007e3c:	1e03      	subs	r3, r0, #0
 8007e3e:	d009      	beq.n	8007e54 <main+0x1ec>
 8007e40:	4b83      	ldr	r3, [pc, #524]	@ (8008050 <main+0x3e8>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	4053      	eors	r3, r2
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <main+0x1ec>
          SetVOCSensorDIS_ENA(true);
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f000 faae 	bl	80083b0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007e54:	4b80      	ldr	r3, [pc, #512]	@ (8008058 <main+0x3f0>)
 8007e56:	791b      	ldrb	r3, [r3, #4]
 8007e58:	2b34      	cmp	r3, #52	@ 0x34
 8007e5a:	d003      	beq.n	8007e64 <main+0x1fc>
 8007e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008058 <main+0x3f0>)
 8007e5e:	791b      	ldrb	r3, [r3, #4]
 8007e60:	2b35      	cmp	r3, #53	@ 0x35
 8007e62:	d106      	bne.n	8007e72 <main+0x20a>
 8007e64:	4b7a      	ldr	r3, [pc, #488]	@ (8008050 <main+0x3e8>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <main+0x20a>
          SetVOCSensorDIS_ENA(false);
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f000 fa9f 	bl	80083b0 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e72:	4b77      	ldr	r3, [pc, #476]	@ (8008050 <main+0x3e8>)
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	4b6e      	ldr	r3, [pc, #440]	@ (8008030 <main+0x3c8>)
 8007e78:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007e7a:	4b78      	ldr	r3, [pc, #480]	@ (800805c <main+0x3f4>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d00d      	beq.n	8007e9e <main+0x236>
 8007e82:	4b76      	ldr	r3, [pc, #472]	@ (800805c <main+0x3f4>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d009      	beq.n	8007e9e <main+0x236>
 8007e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8008040 <main+0x3d8>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <main+0x236>
        HIDSstate = HIDS_Upkeep();
 8007e92:	f006 fe43 	bl	800eb1c <HIDS_Upkeep>
 8007e96:	0003      	movs	r3, r0
 8007e98:	001a      	movs	r2, r3
 8007e9a:	4b71      	ldr	r3, [pc, #452]	@ (8008060 <main+0x3f8>)
 8007e9c:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007e9e:	4b70      	ldr	r3, [pc, #448]	@ (8008060 <main+0x3f8>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d00d      	beq.n	8007ec2 <main+0x25a>
 8007ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8008060 <main+0x3f8>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d009      	beq.n	8007ec2 <main+0x25a>
 8007eae:	4b64      	ldr	r3, [pc, #400]	@ (8008040 <main+0x3d8>)
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <main+0x25a>
        SGPstate = SGP_Upkeep();
 8007eb6:	f004 f8e3 	bl	800c080 <SGP_Upkeep>
 8007eba:	0003      	movs	r3, r0
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	4b67      	ldr	r3, [pc, #412]	@ (800805c <main+0x3f4>)
 8007ec0:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8008040 <main+0x3d8>)
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <main+0x26e>
        MICstate = Mic_Upkeep();
 8007eca:	f000 ff17 	bl	8008cfc <Mic_Upkeep>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	001a      	movs	r2, r3
 8007ed2:	4b64      	ldr	r3, [pc, #400]	@ (8008064 <main+0x3fc>)
 8007ed4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007ed6:	4b45      	ldr	r3, [pc, #276]	@ (8007fec <main+0x384>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d803      	bhi.n	8007ee6 <main+0x27e>
 8007ede:	4b57      	ldr	r3, [pc, #348]	@ (800803c <main+0x3d4>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d016      	beq.n	8007f14 <main+0x2ac>
 8007ee6:	4b56      	ldr	r3, [pc, #344]	@ (8008040 <main+0x3d8>)
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d012      	beq.n	8007f14 <main+0x2ac>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007eee:	f001 f8a7 	bl	8009040 <sen5x_Get_sen5x_enable_state>
 8007ef2:	0003      	movs	r3, r0
 8007ef4:	001a      	movs	r2, r3
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4053      	eors	r3, r2
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d006      	beq.n	8007f0e <main+0x2a6>
 8007f00:	4b53      	ldr	r3, [pc, #332]	@ (8008050 <main+0x3e8>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <main+0x2a6>
          sen5x_enable(0);
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f001 f8c5 	bl	8009098 <sen5x_enable>
        }
        sen5x_statemachine();
 8007f0e:	f001 fdfb 	bl	8009b08 <sen5x_statemachine>
 8007f12:	e020      	b.n	8007f56 <main+0x2ee>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007f14:	4b35      	ldr	r3, [pc, #212]	@ (8007fec <main+0x384>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d81c      	bhi.n	8007f56 <main+0x2ee>
 8007f1c:	4b47      	ldr	r3, [pc, #284]	@ (800803c <main+0x3d4>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2201      	movs	r2, #1
 8007f22:	4053      	eors	r3, r2
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d015      	beq.n	8007f56 <main+0x2ee>
 8007f2a:	4b45      	ldr	r3, [pc, #276]	@ (8008040 <main+0x3d8>)
 8007f2c:	789b      	ldrb	r3, [r3, #2]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d011      	beq.n	8007f56 <main+0x2ee>
        Info("Battery level insufficient for sen5x operation");
 8007f32:	4a4d      	ldr	r2, [pc, #308]	@ (8008068 <main+0x400>)
 8007f34:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff4 <main+0x38c>)
 8007f36:	0019      	movs	r1, r3
 8007f38:	2002      	movs	r0, #2
 8007f3a:	f006 fac5 	bl	800e4c8 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007f3e:	4b40      	ldr	r3, [pc, #256]	@ (8008040 <main+0x3d8>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007f44:	4b49      	ldr	r3, [pc, #292]	@ (800806c <main+0x404>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007f4a:	4b49      	ldr	r3, [pc, #292]	@ (8008070 <main+0x408>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <main+0x2ee>
          sen5x_Power_Off();
 8007f52:	f001 f913 	bl	800917c <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007f56:	f7fd faaf 	bl	80054b8 <ESP_Upkeep>
 8007f5a:	0003      	movs	r3, r0
 8007f5c:	001a      	movs	r2, r3
 8007f5e:	4b39      	ldr	r3, [pc, #228]	@ (8008044 <main+0x3dc>)
 8007f60:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f62:	4b3a      	ldr	r3, [pc, #232]	@ (800804c <main+0x3e4>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2201      	movs	r2, #1
 8007f68:	4053      	eors	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00f      	beq.n	8007f90 <main+0x328>
 8007f70:	4b21      	ldr	r3, [pc, #132]	@ (8007ff8 <main+0x390>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	4053      	eors	r3, r2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <main+0x328>
 8007f7e:	4b32      	ldr	r3, [pc, #200]	@ (8008048 <main+0x3e0>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	4053      	eors	r3, r2
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <main+0x328>
      Device_Test();  // for device with startup time
 8007f8c:	f000 fbc6 	bl	800871c <Device_Test>
    }
    if (!usbPluggedIn) {
 8007f90:	4b2f      	ldr	r3, [pc, #188]	@ (8008050 <main+0x3e8>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2201      	movs	r2, #1
 8007f96:	4053      	eors	r3, r2
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d100      	bne.n	8007fa0 <main+0x338>
 8007f9e:	e6f1      	b.n	8007d84 <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007fa0:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <main+0x40c>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4053      	eors	r3, r2
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d100      	bne.n	8007fb0 <main+0x348>
 8007fae:	e6e9      	b.n	8007d84 <main+0x11c>
 8007fb0:	f000 fc32 	bl	8008818 <AllDevicesReady>
 8007fb4:	1e03      	subs	r3, r0, #0
 8007fb6:	d100      	bne.n	8007fba <main+0x352>
 8007fb8:	e6e4      	b.n	8007d84 <main+0x11c>
 8007fba:	4b2f      	ldr	r3, [pc, #188]	@ (8008078 <main+0x410>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d100      	bne.n	8007fc4 <main+0x35c>
 8007fc2:	e6df      	b.n	8007d84 <main+0x11c>
        EnabledConnectedDevices();
 8007fc4:	f000 fc90 	bl	80088e8 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800807c <main+0x414>)
 8007fca:	789b      	ldrb	r3, [r3, #2]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <main+0x36e>
 8007fd0:	23d7      	movs	r3, #215	@ 0xd7
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	e001      	b.n	8007fda <main+0x372>
 8007fd6:	23dc      	movs	r3, #220	@ 0xdc
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7fe fdb2 	bl	8006b44 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007fe0:	e6d0      	b.n	8007d84 <main+0x11c>
 8007fe2:	46c0      	nop			@ (mov r8, r8)
 8007fe4:	20002054 	.word	0x20002054
 8007fe8:	20002014 	.word	0x20002014
 8007fec:	20000fc4 	.word	0x20000fc4
 8007ff0:	08023f10 	.word	0x08023f10
 8007ff4:	08023f28 	.word	0x08023f28
 8007ff8:	20000fa9 	.word	0x20000fa9
 8007ffc:	20000fb0 	.word	0x20000fb0
 8008000:	2000218c 	.word	0x2000218c
 8008004:	20001038 	.word	0x20001038
 8008008:	20002094 	.word	0x20002094
 800800c:	20000f24 	.word	0x20000f24
 8008010:	20000f60 	.word	0x20000f60
 8008014:	08023f2c 	.word	0x08023f2c
 8008018:	08025504 	.word	0x08025504
 800801c:	20002244 	.word	0x20002244
 8008020:	20000d90 	.word	0x20000d90
 8008024:	20000dec 	.word	0x20000dec
 8008028:	000061a8 	.word	0x000061a8
 800802c:	20000fc0 	.word	0x20000fc0
 8008030:	20000fab 	.word	0x20000fab
 8008034:	20000088 	.word	0x20000088
 8008038:	0000c350 	.word	0x0000c350
 800803c:	20000084 	.word	0x20000084
 8008040:	20000fc8 	.word	0x20000fc8
 8008044:	20000faf 	.word	0x20000faf
 8008048:	20000faa 	.word	0x20000faa
 800804c:	20000fa8 	.word	0x20000fa8
 8008050:	20001ff9 	.word	0x20001ff9
 8008054:	08023f40 	.word	0x08023f40
 8008058:	20001060 	.word	0x20001060
 800805c:	20000fac 	.word	0x20000fac
 8008060:	20000fad 	.word	0x20000fad
 8008064:	20000fae 	.word	0x20000fae
 8008068:	08023f60 	.word	0x08023f60
 800806c:	2000105e 	.word	0x2000105e
 8008070:	2000105d 	.word	0x2000105d
 8008074:	20001ffa 	.word	0x20001ffa
 8008078:	2000055c 	.word	0x2000055c
 800807c:	20000fcc 	.word	0x20000fcc

08008080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b09d      	sub	sp, #116	@ 0x74
 8008084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008086:	2438      	movs	r4, #56	@ 0x38
 8008088:	193b      	adds	r3, r7, r4
 800808a:	0018      	movs	r0, r3
 800808c:	2338      	movs	r3, #56	@ 0x38
 800808e:	001a      	movs	r2, r3
 8008090:	2100      	movs	r1, #0
 8008092:	f018 f8b7 	bl	8020204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008096:	2324      	movs	r3, #36	@ 0x24
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	0018      	movs	r0, r3
 800809c:	2314      	movs	r3, #20
 800809e:	001a      	movs	r2, r3
 80080a0:	2100      	movs	r1, #0
 80080a2:	f018 f8af 	bl	8020204 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080a6:	003b      	movs	r3, r7
 80080a8:	0018      	movs	r0, r3
 80080aa:	2324      	movs	r3, #36	@ 0x24
 80080ac:	001a      	movs	r2, r3
 80080ae:	2100      	movs	r1, #0
 80080b0:	f018 f8a8 	bl	8020204 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080b4:	4b34      	ldr	r3, [pc, #208]	@ (8008188 <SystemClock_Config+0x108>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a34      	ldr	r2, [pc, #208]	@ (800818c <SystemClock_Config+0x10c>)
 80080ba:	401a      	ands	r2, r3
 80080bc:	4b32      	ldr	r3, [pc, #200]	@ (8008188 <SystemClock_Config+0x108>)
 80080be:	2180      	movs	r1, #128	@ 0x80
 80080c0:	0109      	lsls	r1, r1, #4
 80080c2:	430a      	orrs	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080c6:	f00c fee5 	bl	8014e94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80080ca:	4b31      	ldr	r3, [pc, #196]	@ (8008190 <SystemClock_Config+0x110>)
 80080cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ce:	4a2f      	ldr	r2, [pc, #188]	@ (800818c <SystemClock_Config+0x10c>)
 80080d0:	401a      	ands	r2, r3
 80080d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <SystemClock_Config+0x110>)
 80080d4:	2180      	movs	r1, #128	@ 0x80
 80080d6:	0149      	lsls	r1, r1, #5
 80080d8:	430a      	orrs	r2, r1
 80080da:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80080dc:	193b      	adds	r3, r7, r4
 80080de:	2226      	movs	r2, #38	@ 0x26
 80080e0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80080e2:	193b      	adds	r3, r7, r4
 80080e4:	2280      	movs	r2, #128	@ 0x80
 80080e6:	0052      	lsls	r2, r2, #1
 80080e8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080ea:	0021      	movs	r1, r4
 80080ec:	187b      	adds	r3, r7, r1
 80080ee:	2201      	movs	r2, #1
 80080f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	2210      	movs	r2, #16
 80080f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	2201      	movs	r2, #1
 80080fc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80080fe:	187b      	adds	r3, r7, r1
 8008100:	2200      	movs	r2, #0
 8008102:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008104:	187b      	adds	r3, r7, r1
 8008106:	0018      	movs	r0, r3
 8008108:	f00c ff54 	bl	8014fb4 <HAL_RCC_OscConfig>
 800810c:	1e03      	subs	r3, r0, #0
 800810e:	d001      	beq.n	8008114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008110:	f000 f8fc 	bl	800830c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008114:	2124      	movs	r1, #36	@ 0x24
 8008116:	187b      	adds	r3, r7, r1
 8008118:	220f      	movs	r2, #15
 800811a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800811c:	187b      	adds	r3, r7, r1
 800811e:	2201      	movs	r2, #1
 8008120:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008122:	187b      	adds	r3, r7, r1
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008128:	187b      	adds	r3, r7, r1
 800812a:	2200      	movs	r2, #0
 800812c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800812e:	187b      	adds	r3, r7, r1
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008134:	187b      	adds	r3, r7, r1
 8008136:	2100      	movs	r1, #0
 8008138:	0018      	movs	r0, r3
 800813a:	f00d fb0f 	bl	801575c <HAL_RCC_ClockConfig>
 800813e:	1e03      	subs	r3, r0, #0
 8008140:	d001      	beq.n	8008146 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008142:	f000 f8e3 	bl	800830c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8008146:	003b      	movs	r3, r7
 8008148:	226d      	movs	r2, #109	@ 0x6d
 800814a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800814c:	003b      	movs	r3, r7
 800814e:	2200      	movs	r2, #0
 8008150:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008152:	003b      	movs	r3, r7
 8008154:	2200      	movs	r2, #0
 8008156:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008158:	003b      	movs	r3, r7
 800815a:	2200      	movs	r2, #0
 800815c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800815e:	003b      	movs	r3, r7
 8008160:	2280      	movs	r2, #128	@ 0x80
 8008162:	0252      	lsls	r2, r2, #9
 8008164:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008166:	003b      	movs	r3, r7
 8008168:	2280      	movs	r2, #128	@ 0x80
 800816a:	04d2      	lsls	r2, r2, #19
 800816c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800816e:	003b      	movs	r3, r7
 8008170:	0018      	movs	r0, r3
 8008172:	f00d fd17 	bl	8015ba4 <HAL_RCCEx_PeriphCLKConfig>
 8008176:	1e03      	subs	r3, r0, #0
 8008178:	d001      	beq.n	800817e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800817a:	f000 f8c7 	bl	800830c <Error_Handler>
  }
}
 800817e:	46c0      	nop			@ (mov r8, r8)
 8008180:	46bd      	mov	sp, r7
 8008182:	b01d      	add	sp, #116	@ 0x74
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	46c0      	nop			@ (mov r8, r8)
 8008188:	40007000 	.word	0x40007000
 800818c:	ffffe7ff 	.word	0xffffe7ff
 8008190:	40021000 	.word	0x40021000

08008194 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8008198:	4b2f      	ldr	r3, [pc, #188]	@ (8008258 <check_cli_command+0xc4>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	3b61      	subs	r3, #97	@ 0x61
 800819e:	2b13      	cmp	r3, #19
 80081a0:	d830      	bhi.n	8008204 <check_cli_command+0x70>
 80081a2:	009a      	lsls	r2, r3, #2
 80081a4:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <check_cli_command+0xc8>)
 80081a6:	18d3      	adds	r3, r2, r3
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80081ac:	4b2c      	ldr	r3, [pc, #176]	@ (8008260 <check_cli_command+0xcc>)
 80081ae:	0018      	movs	r0, r3
 80081b0:	f017 feda 	bl	801ff68 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80081b4:	2003      	movs	r0, #3
 80081b6:	f006 f9f1 	bl	800e59c <SetVerboseLevel>
      break;
 80081ba:	e04a      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80081bc:	f7fb faee 	bl	800379c <forceNTPupdate>
    break;
 80081c0:	e047      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80081c2:	4b28      	ldr	r3, [pc, #160]	@ (8008264 <check_cli_command+0xd0>)
 80081c4:	0018      	movs	r0, r3
 80081c6:	f017 fecf 	bl	801ff68 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80081ca:	2002      	movs	r0, #2
 80081cc:	f006 f9e6 	bl	800e59c <SetVerboseLevel>
      break;
 80081d0:	e03f      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 80081d2:	4b25      	ldr	r3, [pc, #148]	@ (8008268 <check_cli_command+0xd4>)
 80081d4:	0018      	movs	r0, r3
 80081d6:	f017 fec7 	bl	801ff68 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 80081da:	2001      	movs	r0, #1
 80081dc:	f006 f9de 	bl	800e59c <SetVerboseLevel>
      break;
 80081e0:	e037      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80081e2:	4b22      	ldr	r3, [pc, #136]	@ (800826c <check_cli_command+0xd8>)
 80081e4:	0018      	movs	r0, r3
 80081e6:	f017 febf 	bl	801ff68 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80081ea:	2000      	movs	r0, #0
 80081ec:	f006 f9d6 	bl	800e59c <SetVerboseLevel>
      break;
 80081f0:	e02f      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80081f2:	f006 fdaf 	bl	800ed54 <HAL_GetTick>
 80081f6:	0002      	movs	r2, r0
 80081f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008270 <check_cli_command+0xdc>)
 80081fa:	601a      	str	r2, [r3, #0]
      break;
 80081fc:	e029      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80081fe:	f7fe f955 	bl	80064ac <showTime>
      break;
 8008202:	e026      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008204:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <check_cli_command+0xe0>)
 8008206:	4b1c      	ldr	r3, [pc, #112]	@ (8008278 <check_cli_command+0xe4>)
 8008208:	0019      	movs	r1, r3
 800820a:	2001      	movs	r0, #1
 800820c:	f006 f95c 	bl	800e4c8 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008210:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <check_cli_command+0xe8>)
 8008212:	0018      	movs	r0, r3
 8008214:	f017 fea8 	bl	801ff68 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008218:	4b19      	ldr	r3, [pc, #100]	@ (8008280 <check_cli_command+0xec>)
 800821a:	0018      	movs	r0, r3
 800821c:	f017 fea4 	bl	801ff68 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008220:	4b18      	ldr	r3, [pc, #96]	@ (8008284 <check_cli_command+0xf0>)
 8008222:	0018      	movs	r0, r3
 8008224:	f017 fea0 	bl	801ff68 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008228:	4b17      	ldr	r3, [pc, #92]	@ (8008288 <check_cli_command+0xf4>)
 800822a:	0018      	movs	r0, r3
 800822c:	f017 fe9c 	bl	801ff68 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008230:	4b16      	ldr	r3, [pc, #88]	@ (800828c <check_cli_command+0xf8>)
 8008232:	0018      	movs	r0, r3
 8008234:	f017 fe98 	bl	801ff68 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008238:	4b15      	ldr	r3, [pc, #84]	@ (8008290 <check_cli_command+0xfc>)
 800823a:	0018      	movs	r0, r3
 800823c:	f017 fe94 	bl	801ff68 <puts>
      printf("s - Start particle measurement\r\n");
 8008240:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <check_cli_command+0x100>)
 8008242:	0018      	movs	r0, r3
 8008244:	f017 fe90 	bl	801ff68 <puts>
      printf("t - Show actual systemtime\r\n");
 8008248:	4b13      	ldr	r3, [pc, #76]	@ (8008298 <check_cli_command+0x104>)
 800824a:	0018      	movs	r0, r3
 800824c:	f017 fe8c 	bl	801ff68 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008250:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000fb0 	.word	0x20000fb0
 800825c:	080254b4 	.word	0x080254b4
 8008260:	08023f90 	.word	0x08023f90
 8008264:	08023fac 	.word	0x08023fac
 8008268:	08023fc8 	.word	0x08023fc8
 800826c:	08023fe8 	.word	0x08023fe8
 8008270:	20001074 	.word	0x20001074
 8008274:	08024004 	.word	0x08024004
 8008278:	08024034 	.word	0x08024034
 800827c:	08024038 	.word	0x08024038
 8008280:	08024050 	.word	0x08024050
 8008284:	08024070 	.word	0x08024070
 8008288:	08024094 	.word	0x08024094
 800828c:	080240b4 	.word	0x080240b4
 8008290:	080240d8 	.word	0x080240d8
 8008294:	080240f8 	.word	0x080240f8
 8008298:	08024118 	.word	0x08024118

0800829c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80082a4:	4908      	ldr	r1, [pc, #32]	@ (80082c8 <HAL_UART_RxCpltCallback+0x2c>)
 80082a6:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <HAL_UART_RxCpltCallback+0x30>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	0018      	movs	r0, r3
 80082ac:	f00f f81e 	bl	80172ec <HAL_UART_Receive_IT>
  check_cli_command();
 80082b0:	f7ff ff70 	bl	8008194 <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80082b4:	4904      	ldr	r1, [pc, #16]	@ (80082c8 <HAL_UART_RxCpltCallback+0x2c>)
 80082b6:	4b05      	ldr	r3, [pc, #20]	@ (80082cc <HAL_UART_RxCpltCallback+0x30>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	0018      	movs	r0, r3
 80082bc:	f00f f816 	bl	80172ec <HAL_UART_Receive_IT>
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b002      	add	sp, #8
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000fb0 	.word	0x20000fb0
 80082cc:	2000218c 	.word	0x2000218c

080082d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	0002      	movs	r2, r0
 80082d8:	1dbb      	adds	r3, r7, #6
 80082da:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	881a      	ldrh	r2, [r3, #0]
 80082e0:	2380      	movs	r3, #128	@ 0x80
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d10b      	bne.n	8008300 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 80082e8:	f005 fb92 	bl	800da10 <setuserToggle>
    if (GetPMSensorPresence()) {
 80082ec:	f000 f84c 	bl	8008388 <GetPMSensorPresence>
 80082f0:	1e03      	subs	r3, r0, #0
 80082f2:	d005      	beq.n	8008300 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <HAL_GPIO_EXTI_Callback+0x38>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 80082fa:	2064      	movs	r0, #100	@ 0x64
 80082fc:	f000 feaa 	bl	8009054 <setsen5xReadTimer>
    }
  }
}
 8008300:	46c0      	nop			@ (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000fc8 	.word	0x20000fc8

0800830c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008310:	b672      	cpsid	i
}
 8008312:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008314:	4a05      	ldr	r2, [pc, #20]	@ (800832c <Error_Handler+0x20>)
 8008316:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <Error_Handler+0x24>)
 8008318:	0019      	movs	r1, r3
 800831a:	2001      	movs	r0, #1
 800831c:	f006 f8d4 	bl	800e4c8 <CreateLine>
    HAL_Delay(2500);
 8008320:	4b04      	ldr	r3, [pc, #16]	@ (8008334 <Error_Handler+0x28>)
 8008322:	0018      	movs	r0, r3
 8008324:	f006 fd20 	bl	800ed68 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	e7f3      	b.n	8008314 <Error_Handler+0x8>
 800832c:	08024134 	.word	0x08024134
 8008330:	08024034 	.word	0x08024034
 8008334:	000009c4 	.word	0x000009c4

08008338 <testInit>:
#include "statusCheck.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800833c:	4b10      	ldr	r3, [pc, #64]	@ (8008380 <testInit+0x48>)
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008342:	4b0f      	ldr	r3, [pc, #60]	@ (8008380 <testInit+0x48>)
 8008344:	2200      	movs	r2, #0
 8008346:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008348:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <testInit+0x48>)
 800834a:	2200      	movs	r2, #0
 800834c:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 800834e:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <testInit+0x48>)
 8008350:	2200      	movs	r2, #0
 8008352:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008354:	4b0a      	ldr	r3, [pc, #40]	@ (8008380 <testInit+0x48>)
 8008356:	2200      	movs	r2, #0
 8008358:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 800835a:	4b09      	ldr	r3, [pc, #36]	@ (8008380 <testInit+0x48>)
 800835c:	2200      	movs	r2, #0
 800835e:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008360:	4b08      	ldr	r3, [pc, #32]	@ (8008384 <testInit+0x4c>)
 8008362:	2201      	movs	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 8008366:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <testInit+0x4c>)
 8008368:	2201      	movs	r2, #1
 800836a:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <testInit+0x4c>)
 800836e:	2201      	movs	r2, #1
 8008370:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 8008372:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <testInit+0x4c>)
 8008374:	2201      	movs	r2, #1
 8008376:	70da      	strb	r2, [r3, #3]
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	20000fcc 	.word	0x20000fcc
 8008384:	20000fc8 	.word	0x20000fc8

08008388 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800838c:	4b02      	ldr	r3, [pc, #8]	@ (8008398 <GetPMSensorPresence+0x10>)
 800838e:	789b      	ldrb	r3, [r3, #2]
}
 8008390:	0018      	movs	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	20000fcc 	.word	0x20000fcc

0800839c <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80083a0:	4b02      	ldr	r3, [pc, #8]	@ (80083ac <IsSGPPresent+0x10>)
 80083a2:	785b      	ldrb	r3, [r3, #1]
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	20000fcc 	.word	0x20000fcc

080083b0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	0002      	movs	r2, r0
 80083b8:	1dfb      	adds	r3, r7, #7
 80083ba:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 80083bc:	4b0b      	ldr	r3, [pc, #44]	@ (80083ec <SetVOCSensorDIS_ENA+0x3c>)
 80083be:	1dfa      	adds	r2, r7, #7
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 80083c4:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <SetVOCSensorDIS_ENA+0x40>)
 80083c6:	1dfa      	adds	r2, r7, #7
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 80083cc:	1dfb      	adds	r3, r7, #7
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <SetVOCSensorDIS_ENA+0x28>
 80083d4:	4b07      	ldr	r3, [pc, #28]	@ (80083f4 <SetVOCSensorDIS_ENA+0x44>)
 80083d6:	e000      	b.n	80083da <SetVOCSensorDIS_ENA+0x2a>
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <SetVOCSensorDIS_ENA+0x48>)
 80083da:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <SetVOCSensorDIS_ENA+0x4c>)
 80083dc:	4908      	ldr	r1, [pc, #32]	@ (8008400 <SetVOCSensorDIS_ENA+0x50>)
 80083de:	2003      	movs	r0, #3
 80083e0:	f006 f872 	bl	800e4c8 <CreateLine>
}
 80083e4:	46c0      	nop			@ (mov r8, r8)
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b002      	add	sp, #8
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000fcc 	.word	0x20000fcc
 80083f0:	20000fc8 	.word	0x20000fc8
 80083f4:	08024160 	.word	0x08024160
 80083f8:	08024168 	.word	0x08024168
 80083fc:	08024174 	.word	0x08024174
 8008400:	08024188 	.word	0x08024188

08008404 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008408:	4b02      	ldr	r3, [pc, #8]	@ (8008414 <IsPMSensorEnabled+0x10>)
 800840a:	789b      	ldrb	r3, [r3, #2]
}
 800840c:	0018      	movs	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	46c0      	nop			@ (mov r8, r8)
 8008414:	20000fc8 	.word	0x20000fc8

08008418 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	0002      	movs	r2, r0
 8008420:	1dfb      	adds	r3, r7, #7
 8008422:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 8008424:	4b09      	ldr	r3, [pc, #36]	@ (800844c <SetVOCSensorStatus+0x34>)
 8008426:	795b      	ldrb	r3, [r3, #5]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800842c:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <SetVOCSensorStatus+0x38>)
 800842e:	1dfa      	adds	r2, r7, #7
 8008430:	7812      	ldrb	r2, [r2, #0]
 8008432:	705a      	strb	r2, [r3, #1]
  }
  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
 8008434:	1dfb      	adds	r3, r7, #7
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	4a06      	ldr	r2, [pc, #24]	@ (8008454 <SetVOCSensorStatus+0x3c>)
 800843a:	4907      	ldr	r1, [pc, #28]	@ (8008458 <SetVOCSensorStatus+0x40>)
 800843c:	2003      	movs	r0, #3
 800843e:	f006 f843 	bl	800e4c8 <CreateLine>
}
 8008442:	46c0      	nop			@ (mov r8, r8)
 8008444:	46bd      	mov	sp, r7
 8008446:	b002      	add	sp, #8
 8008448:	bd80      	pop	{r7, pc}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	20000fcc 	.word	0x20000fcc
 8008450:	20000fc8 	.word	0x20000fc8
 8008454:	0802418c 	.word	0x0802418c
 8008458:	08024188 	.word	0x08024188

0800845c <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	0002      	movs	r2, r0
 8008464:	1dfb      	adds	r3, r7, #7
 8008466:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008468:	4b03      	ldr	r3, [pc, #12]	@ (8008478 <SetPMSensorStatus+0x1c>)
 800846a:	1dfa      	adds	r2, r7, #7
 800846c:	7812      	ldrb	r2, [r2, #0]
 800846e:	709a      	strb	r2, [r3, #2]
}
 8008470:	46c0      	nop			@ (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b002      	add	sp, #8
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000fc8 	.word	0x20000fc8

0800847c <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008480:	4b02      	ldr	r3, [pc, #8]	@ (800848c <SetESPMeasurementDone+0x10>)
 8008482:	2201      	movs	r2, #1
 8008484:	711a      	strb	r2, [r3, #4]
}
 8008486:	46c0      	nop			@ (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000fcc 	.word	0x20000fcc

08008490 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  testInit();
 800849e:	f7ff ff4b 	bl	8008338 <testInit>
  I2CSensors_Init(sensorI2C);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7fd fc97 	bl	8005dd8 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80084aa:	f006 fa3f 	bl	800e92c <HIDS_DeviceConnected>
 80084ae:	0003      	movs	r3, r0
 80084b0:	001a      	movs	r2, r3
 80084b2:	2301      	movs	r3, #1
 80084b4:	4053      	eors	r3, r2
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80084bc:	4a7f      	ldr	r2, [pc, #508]	@ (80086bc <Device_Init+0x22c>)
 80084be:	4b80      	ldr	r3, [pc, #512]	@ (80086c0 <Device_Init+0x230>)
 80084c0:	0019      	movs	r1, r3
 80084c2:	2001      	movs	r0, #1
 80084c4:	f006 f800 	bl	800e4c8 <CreateLine>
     SensorProbe.HT_Present = false;
 80084c8:	4b7e      	ldr	r3, [pc, #504]	@ (80086c4 <Device_Init+0x234>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 80084ce:	4b7e      	ldr	r3, [pc, #504]	@ (80086c8 <Device_Init+0x238>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e008      	b.n	80084e8 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80084d6:	4b7b      	ldr	r3, [pc, #492]	@ (80086c4 <Device_Init+0x234>)
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 80084dc:	4a7b      	ldr	r2, [pc, #492]	@ (80086cc <Device_Init+0x23c>)
 80084de:	4b7c      	ldr	r3, [pc, #496]	@ (80086d0 <Device_Init+0x240>)
 80084e0:	0019      	movs	r1, r3
 80084e2:	2003      	movs	r0, #3
 80084e4:	f005 fff0 	bl	800e4c8 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 80084e8:	f003 fbc0 	bl	800bc6c <SGP_DeviceConnected>
 80084ec:	0003      	movs	r3, r0
 80084ee:	001a      	movs	r2, r3
 80084f0:	2301      	movs	r3, #1
 80084f2:	4053      	eors	r3, r2
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 80084fa:	4b72      	ldr	r3, [pc, #456]	@ (80086c4 <Device_Init+0x234>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008500:	4a74      	ldr	r2, [pc, #464]	@ (80086d4 <Device_Init+0x244>)
 8008502:	4b6f      	ldr	r3, [pc, #444]	@ (80086c0 <Device_Init+0x230>)
 8008504:	0019      	movs	r1, r3
 8008506:	2001      	movs	r0, #1
 8008508:	f005 ffde 	bl	800e4c8 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800850c:	4b6e      	ldr	r3, [pc, #440]	@ (80086c8 <Device_Init+0x238>)
 800850e:	2200      	movs	r2, #0
 8008510:	705a      	strb	r2, [r3, #1]
 8008512:	e00b      	b.n	800852c <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008514:	4b6b      	ldr	r3, [pc, #428]	@ (80086c4 <Device_Init+0x234>)
 8008516:	2201      	movs	r2, #1
 8008518:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800851a:	4b6a      	ldr	r3, [pc, #424]	@ (80086c4 <Device_Init+0x234>)
 800851c:	2201      	movs	r2, #1
 800851e:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008520:	4a6d      	ldr	r2, [pc, #436]	@ (80086d8 <Device_Init+0x248>)
 8008522:	4b6b      	ldr	r3, [pc, #428]	@ (80086d0 <Device_Init+0x240>)
 8008524:	0019      	movs	r1, r3
 8008526:	2003      	movs	r0, #3
 8008528:	f005 ffce 	bl	800e4c8 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800852c:	4b65      	ldr	r3, [pc, #404]	@ (80086c4 <Device_Init+0x234>)
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <Device_Init+0xb8>
 8008534:	4b63      	ldr	r3, [pc, #396]	@ (80086c4 <Device_Init+0x234>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 800853c:	2200      	movs	r2, #0
 800853e:	2101      	movs	r1, #1
 8008540:	2000      	movs	r0, #0
 8008542:	f004 fea1 	bl	800d288 <SetDBLED>
 8008546:	e018      	b.n	800857a <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	2001      	movs	r0, #1
 800854e:	f004 fe9b 	bl	800d288 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008552:	4b62      	ldr	r3, [pc, #392]	@ (80086dc <Device_Init+0x24c>)
 8008554:	2200      	movs	r2, #0
 8008556:	2101      	movs	r1, #1
 8008558:	0018      	movs	r0, r3
 800855a:	f007 fe8c 	bl	8010276 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800855e:	2380      	movs	r3, #128	@ 0x80
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	485e      	ldr	r0, [pc, #376]	@ (80086dc <Device_Init+0x24c>)
 8008564:	2201      	movs	r2, #1
 8008566:	0019      	movs	r1, r3
 8008568:	f007 fe85 	bl	8010276 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800856c:	2380      	movs	r3, #128	@ 0x80
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	485a      	ldr	r0, [pc, #360]	@ (80086dc <Device_Init+0x24c>)
 8008572:	2201      	movs	r2, #1
 8008574:	0019      	movs	r1, r3
 8008576:	f007 fe7e 	bl	8010276 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800857a:	4b53      	ldr	r3, [pc, #332]	@ (80086c8 <Device_Init+0x238>)
 800857c:	78db      	ldrb	r3, [r3, #3]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d028      	beq.n	80085d4 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008582:	4a57      	ldr	r2, [pc, #348]	@ (80086e0 <Device_Init+0x250>)
 8008584:	4b57      	ldr	r3, [pc, #348]	@ (80086e4 <Device_Init+0x254>)
 8008586:	0019      	movs	r1, r3
 8008588:	2002      	movs	r0, #2
 800858a:	f005 ff9d 	bl	800e4c8 <CreateLine>
    if (!enableMicrophone(true)) {
 800858e:	2001      	movs	r0, #1
 8008590:	f003 ff78 	bl	800c484 <enableMicrophone>
 8008594:	0003      	movs	r3, r0
 8008596:	001a      	movs	r2, r3
 8008598:	2301      	movs	r3, #1
 800859a:	4053      	eors	r3, r2
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80085a2:	4a51      	ldr	r2, [pc, #324]	@ (80086e8 <Device_Init+0x258>)
 80085a4:	4b46      	ldr	r3, [pc, #280]	@ (80086c0 <Device_Init+0x230>)
 80085a6:	0019      	movs	r1, r3
 80085a8:	2001      	movs	r0, #1
 80085aa:	f005 ff8d 	bl	800e4c8 <CreateLine>
      SensorProbe.MIC_Present = false;
 80085ae:	4b45      	ldr	r3, [pc, #276]	@ (80086c4 <Device_Init+0x234>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80085b4:	4b44      	ldr	r3, [pc, #272]	@ (80086c8 <Device_Init+0x238>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	70da      	strb	r2, [r3, #3]
 80085ba:	e00b      	b.n	80085d4 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80085bc:	4b41      	ldr	r3, [pc, #260]	@ (80086c4 <Device_Init+0x234>)
 80085be:	2201      	movs	r2, #1
 80085c0:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80085c2:	4b41      	ldr	r3, [pc, #260]	@ (80086c8 <Device_Init+0x238>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 80085c8:	4a48      	ldr	r2, [pc, #288]	@ (80086ec <Device_Init+0x25c>)
 80085ca:	4b41      	ldr	r3, [pc, #260]	@ (80086d0 <Device_Init+0x240>)
 80085cc:	0019      	movs	r1, r3
 80085ce:	2003      	movs	r0, #3
 80085d0:	f005 ff7a 	bl	800e4c8 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80085d4:	f000 fe08 	bl	80091e8 <probe_sen5x>
 80085d8:	1e03      	subs	r3, r0, #0
 80085da:	d122      	bne.n	8008622 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 80085dc:	4a44      	ldr	r2, [pc, #272]	@ (80086f0 <Device_Init+0x260>)
 80085de:	4b3c      	ldr	r3, [pc, #240]	@ (80086d0 <Device_Init+0x240>)
 80085e0:	0019      	movs	r1, r3
 80085e2:	2003      	movs	r0, #3
 80085e4:	f005 ff70 	bl	800e4c8 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 80085e8:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <Device_Init+0x234>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 80085ee:	4b36      	ldr	r3, [pc, #216]	@ (80086c8 <Device_Init+0x238>)
 80085f0:	2201      	movs	r2, #1
 80085f2:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 80085f4:	4b3f      	ldr	r3, [pc, #252]	@ (80086f4 <Device_Init+0x264>)
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	2b34      	cmp	r3, #52	@ 0x34
 80085fa:	d003      	beq.n	8008604 <Device_Init+0x174>
 80085fc:	4b3d      	ldr	r3, [pc, #244]	@ (80086f4 <Device_Init+0x264>)
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	2b35      	cmp	r3, #53	@ 0x35
 8008602:	d11c      	bne.n	800863e <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008604:	4a3c      	ldr	r2, [pc, #240]	@ (80086f8 <Device_Init+0x268>)
 8008606:	4b37      	ldr	r3, [pc, #220]	@ (80086e4 <Device_Init+0x254>)
 8008608:	0019      	movs	r1, r3
 800860a:	2002      	movs	r0, #2
 800860c:	f005 ff5c 	bl	800e4c8 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008610:	4b2d      	ldr	r3, [pc, #180]	@ (80086c8 <Device_Init+0x238>)
 8008612:	2200      	movs	r2, #0
 8008614:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 8008616:	4b2b      	ldr	r3, [pc, #172]	@ (80086c4 <Device_Init+0x234>)
 8008618:	2200      	movs	r2, #0
 800861a:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 800861c:	f003 fd0a 	bl	800c034 <SGP_SoftReset>
 8008620:	e00d      	b.n	800863e <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008622:	f000 fdab 	bl	800917c <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008626:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <Device_Init+0x26c>)
 8008628:	4b29      	ldr	r3, [pc, #164]	@ (80086d0 <Device_Init+0x240>)
 800862a:	0019      	movs	r1, r3
 800862c:	2003      	movs	r0, #3
 800862e:	f005 ff4b 	bl	800e4c8 <CreateLine>
    SensorProbe.PM_Present = false;
 8008632:	4b24      	ldr	r3, [pc, #144]	@ (80086c4 <Device_Init+0x234>)
 8008634:	2200      	movs	r2, #0
 8008636:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008638:	4b23      	ldr	r3, [pc, #140]	@ (80086c8 <Device_Init+0x238>)
 800863a:	2200      	movs	r2, #0
 800863c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800863e:	4b21      	ldr	r3, [pc, #132]	@ (80086c4 <Device_Init+0x234>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <Device_Init+0x1ba>
 8008646:	4b2e      	ldr	r3, [pc, #184]	@ (8008700 <Device_Init+0x270>)
 8008648:	e000      	b.n	800864c <Device_Init+0x1bc>
 800864a:	4b2e      	ldr	r3, [pc, #184]	@ (8008704 <Device_Init+0x274>)
 800864c:	4a2e      	ldr	r2, [pc, #184]	@ (8008708 <Device_Init+0x278>)
 800864e:	4925      	ldr	r1, [pc, #148]	@ (80086e4 <Device_Init+0x254>)
 8008650:	2002      	movs	r0, #2
 8008652:	f005 ff39 	bl	800e4c8 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8008656:	4b1b      	ldr	r3, [pc, #108]	@ (80086c4 <Device_Init+0x234>)
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <Device_Init+0x1d2>
 800865e:	4b28      	ldr	r3, [pc, #160]	@ (8008700 <Device_Init+0x270>)
 8008660:	e000      	b.n	8008664 <Device_Init+0x1d4>
 8008662:	4b28      	ldr	r3, [pc, #160]	@ (8008704 <Device_Init+0x274>)
 8008664:	4a29      	ldr	r2, [pc, #164]	@ (800870c <Device_Init+0x27c>)
 8008666:	491f      	ldr	r1, [pc, #124]	@ (80086e4 <Device_Init+0x254>)
 8008668:	2002      	movs	r0, #2
 800866a:	f005 ff2d 	bl	800e4c8 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <Device_Init+0x234>)
 8008670:	789b      	ldrb	r3, [r3, #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <Device_Init+0x1ea>
 8008676:	4b22      	ldr	r3, [pc, #136]	@ (8008700 <Device_Init+0x270>)
 8008678:	e000      	b.n	800867c <Device_Init+0x1ec>
 800867a:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <Device_Init+0x274>)
 800867c:	4a24      	ldr	r2, [pc, #144]	@ (8008710 <Device_Init+0x280>)
 800867e:	4919      	ldr	r1, [pc, #100]	@ (80086e4 <Device_Init+0x254>)
 8008680:	2002      	movs	r0, #2
 8008682:	f005 ff21 	bl	800e4c8 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <Device_Init+0x234>)
 8008688:	78db      	ldrb	r3, [r3, #3]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <Device_Init+0x202>
 800868e:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <Device_Init+0x270>)
 8008690:	e000      	b.n	8008694 <Device_Init+0x204>
 8008692:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <Device_Init+0x274>)
 8008694:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <Device_Init+0x284>)
 8008696:	4913      	ldr	r1, [pc, #76]	@ (80086e4 <Device_Init+0x254>)
 8008698:	2002      	movs	r0, #2
 800869a:	f005 ff15 	bl	800e4c8 <CreateLine>
  ESP_Init(espUart);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f7fb fa2b 	bl	8003afc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80086a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008718 <Device_Init+0x288>)
 80086a8:	4b09      	ldr	r3, [pc, #36]	@ (80086d0 <Device_Init+0x240>)
 80086aa:	0019      	movs	r1, r3
 80086ac:	2003      	movs	r0, #3
 80086ae:	f005 ff0b 	bl	800e4c8 <CreateLine>
}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b004      	add	sp, #16
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	080241bc 	.word	0x080241bc
 80086c0:	080241ec 	.word	0x080241ec
 80086c4:	20000fcc 	.word	0x20000fcc
 80086c8:	20000fc8 	.word	0x20000fc8
 80086cc:	080241f0 	.word	0x080241f0
 80086d0:	08024188 	.word	0x08024188
 80086d4:	0802421c 	.word	0x0802421c
 80086d8:	08024238 	.word	0x08024238
 80086dc:	50000400 	.word	0x50000400
 80086e0:	08024250 	.word	0x08024250
 80086e4:	08024274 	.word	0x08024274
 80086e8:	08024278 	.word	0x08024278
 80086ec:	080242a4 	.word	0x080242a4
 80086f0:	080242d0 	.word	0x080242d0
 80086f4:	20001060 	.word	0x20001060
 80086f8:	080242e8 	.word	0x080242e8
 80086fc:	08024338 	.word	0x08024338
 8008700:	0802435c 	.word	0x0802435c
 8008704:	08024360 	.word	0x08024360
 8008708:	08024364 	.word	0x08024364
 800870c:	08024380 	.word	0x08024380
 8008710:	0802439c 	.word	0x0802439c
 8008714:	080243b8 	.word	0x080243b8
 8008718:	080243d4 	.word	0x080243d4

0800871c <Device_Test>:

void Device_Test(){
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008720:	4b34      	ldr	r3, [pc, #208]	@ (80087f4 <Device_Test+0xd8>)
 8008722:	78db      	ldrb	r3, [r3, #3]
 8008724:	2201      	movs	r2, #1
 8008726:	4053      	eors	r3, r2
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d027      	beq.n	800877e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800872e:	f000 fab5 	bl	8008c9c <MIC_TestMeasurementDone>
 8008732:	1e03      	subs	r3, r0, #0
 8008734:	d011      	beq.n	800875a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 8008736:	4b2f      	ldr	r3, [pc, #188]	@ (80087f4 <Device_Test+0xd8>)
 8008738:	2201      	movs	r2, #1
 800873a:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 800873c:	4b2e      	ldr	r3, [pc, #184]	@ (80087f8 <Device_Test+0xdc>)
 800873e:	2201      	movs	r2, #1
 8008740:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008742:	f004 fd25 	bl	800d190 <Calculate_LED_ON>
 8008746:	0003      	movs	r3, r0
 8008748:	0019      	movs	r1, r3
 800874a:	23fa      	movs	r3, #250	@ 0xfa
 800874c:	011a      	lsls	r2, r3, #4
 800874e:	23fa      	movs	r3, #250	@ 0xfa
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	0018      	movs	r0, r3
 8008754:	f004 fd64 	bl	800d220 <SetStatusLED>
 8008758:	e011      	b.n	800877e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800875a:	f003 fe6f 	bl	800c43c <micSettlingComplete>
 800875e:	1e03      	subs	r3, r0, #0
 8008760:	d00d      	beq.n	800877e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8008762:	4b25      	ldr	r3, [pc, #148]	@ (80087f8 <Device_Test+0xdc>)
 8008764:	2201      	movs	r2, #1
 8008766:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008768:	f004 fd12 	bl	800d190 <Calculate_LED_ON>
 800876c:	0003      	movs	r3, r0
 800876e:	0018      	movs	r0, r3
 8008770:	23fa      	movs	r3, #250	@ 0xfa
 8008772:	011a      	lsls	r2, r3, #4
 8008774:	23fa      	movs	r3, #250	@ 0xfa
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	0019      	movs	r1, r3
 800877a:	f004 fd51 	bl	800d220 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800877e:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <Device_Test+0xd8>)
 8008780:	791b      	ldrb	r3, [r3, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	4053      	eors	r3, r2
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800878c:	f7fc fd7a 	bl	8005284 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008790:	4b18      	ldr	r3, [pc, #96]	@ (80087f4 <Device_Test+0xd8>)
 8008792:	791b      	ldrb	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <Device_Test+0x84>
 8008798:	4b16      	ldr	r3, [pc, #88]	@ (80087f4 <Device_Test+0xd8>)
 800879a:	78db      	ldrb	r3, [r3, #3]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <Device_Test+0x92>
 80087a0:	4b16      	ldr	r3, [pc, #88]	@ (80087fc <Device_Test+0xe0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	0018      	movs	r0, r3
 80087a6:	f005 fe39 	bl	800e41c <TimestampIsReached>
 80087aa:	1e03      	subs	r3, r0, #0
 80087ac:	d01f      	beq.n	80087ee <Device_Test+0xd2>
    Info("Test completed");
 80087ae:	4a14      	ldr	r2, [pc, #80]	@ (8008800 <Device_Test+0xe4>)
 80087b0:	4b14      	ldr	r3, [pc, #80]	@ (8008804 <Device_Test+0xe8>)
 80087b2:	0019      	movs	r1, r3
 80087b4:	2002      	movs	r0, #2
 80087b6:	f005 fe87 	bl	800e4c8 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80087ba:	4b0e      	ldr	r3, [pc, #56]	@ (80087f4 <Device_Test+0xd8>)
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <Device_Test+0xaa>
 80087c2:	4b11      	ldr	r3, [pc, #68]	@ (8008808 <Device_Test+0xec>)
 80087c4:	e000      	b.n	80087c8 <Device_Test+0xac>
 80087c6:	4b11      	ldr	r3, [pc, #68]	@ (800880c <Device_Test+0xf0>)
 80087c8:	4a11      	ldr	r2, [pc, #68]	@ (8008810 <Device_Test+0xf4>)
 80087ca:	490e      	ldr	r1, [pc, #56]	@ (8008804 <Device_Test+0xe8>)
 80087cc:	2002      	movs	r0, #2
 80087ce:	f005 fe7b 	bl	800e4c8 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80087d2:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <Device_Test+0xd8>)
 80087d4:	78db      	ldrb	r3, [r3, #3]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <Device_Test+0xc2>
 80087da:	4b0b      	ldr	r3, [pc, #44]	@ (8008808 <Device_Test+0xec>)
 80087dc:	e000      	b.n	80087e0 <Device_Test+0xc4>
 80087de:	4b0b      	ldr	r3, [pc, #44]	@ (800880c <Device_Test+0xf0>)
 80087e0:	4a0c      	ldr	r2, [pc, #48]	@ (8008814 <Device_Test+0xf8>)
 80087e2:	4908      	ldr	r1, [pc, #32]	@ (8008804 <Device_Test+0xe8>)
 80087e4:	2002      	movs	r0, #2
 80087e6:	f005 fe6f 	bl	800e4c8 <CreateLine>
    SetTestDone();
 80087ea:	f7ff f9c5 	bl	8007b78 <SetTestDone>
  }
}
 80087ee:	46c0      	nop			@ (mov r8, r8)
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000fcc 	.word	0x20000fcc
 80087f8:	20000fc8 	.word	0x20000fc8
 80087fc:	20000fc0 	.word	0x20000fc0
 8008800:	080243f8 	.word	0x080243f8
 8008804:	08024274 	.word	0x08024274
 8008808:	08024408 	.word	0x08024408
 800880c:	08024410 	.word	0x08024410
 8008810:	08024418 	.word	0x08024418
 8008814:	0802442c 	.word	0x0802442c

08008818 <AllDevicesReady>:

bool AllDevicesReady() {
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800881c:	4b2a      	ldr	r3, [pc, #168]	@ (80088c8 <AllDevicesReady+0xb0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	0018      	movs	r0, r3
 8008822:	f005 fdfb 	bl	800e41c <TimestampIsReached>
 8008826:	1e03      	subs	r3, r0, #0
 8008828:	d04a      	beq.n	80088c0 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800882a:	4b28      	ldr	r3, [pc, #160]	@ (80088cc <AllDevicesReady+0xb4>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b06      	cmp	r3, #6
 8008830:	d102      	bne.n	8008838 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008832:	4b27      	ldr	r3, [pc, #156]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008838:	4b26      	ldr	r3, [pc, #152]	@ (80088d4 <AllDevicesReady+0xbc>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b07      	cmp	r3, #7
 800883e:	d006      	beq.n	800884e <AllDevicesReady+0x36>
 8008840:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <AllDevicesReady+0xc0>)
 8008842:	795b      	ldrb	r3, [r3, #5]
 8008844:	2201      	movs	r2, #1
 8008846:	4053      	eors	r3, r2
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 800884e:	4b20      	ldr	r3, [pc, #128]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008850:	2200      	movs	r2, #0
 8008852:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008854:	4b21      	ldr	r3, [pc, #132]	@ (80088dc <AllDevicesReady+0xc4>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d102      	bne.n	8008862 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 800885c:	4b1c      	ldr	r3, [pc, #112]	@ (80088d0 <AllDevicesReady+0xb8>)
 800885e:	2200      	movs	r2, #0
 8008860:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008862:	4b1f      	ldr	r3, [pc, #124]	@ (80088e0 <AllDevicesReady+0xc8>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d102      	bne.n	8008870 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 800886a:	4b19      	ldr	r3, [pc, #100]	@ (80088d0 <AllDevicesReady+0xb8>)
 800886c:	2200      	movs	r2, #0
 800886e:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008870:	4b1c      	ldr	r3, [pc, #112]	@ (80088e4 <AllDevicesReady+0xcc>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b09      	cmp	r3, #9
 8008876:	d123      	bne.n	80088c0 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008878:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <AllDevicesReady+0xb8>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2201      	movs	r2, #1
 800887e:	4053      	eors	r3, r2
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <AllDevicesReady+0x9c>
 8008886:	4b12      	ldr	r3, [pc, #72]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2201      	movs	r2, #1
 800888c:	4053      	eors	r3, r2
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00f      	beq.n	80088b4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008894:	4b0e      	ldr	r3, [pc, #56]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008896:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008898:	2201      	movs	r2, #1
 800889a:	4053      	eors	r3, r2
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d008      	beq.n	80088b4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088a2:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <AllDevicesReady+0xb8>)
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	2201      	movs	r2, #1
 80088a8:	4053      	eors	r3, r2
 80088aa:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <AllDevicesReady+0x9c>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <AllDevicesReady+0x9e>
 80088b4:	2300      	movs	r3, #0
 80088b6:	1c1a      	adds	r2, r3, #0
 80088b8:	2301      	movs	r3, #1
 80088ba:	4013      	ands	r3, r2
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e000      	b.n	80088c2 <AllDevicesReady+0xaa>
    }
  }
  return false;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	0018      	movs	r0, r3
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000fc0 	.word	0x20000fc0
 80088cc:	20000fad 	.word	0x20000fad
 80088d0:	20000fc8 	.word	0x20000fc8
 80088d4:	20000fac 	.word	0x20000fac
 80088d8:	20000fcc 	.word	0x20000fcc
 80088dc:	2000008d 	.word	0x2000008d
 80088e0:	20000fae 	.word	0x20000fae
 80088e4:	20000faf 	.word	0x20000faf

080088e8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 80088ec:	4b11      	ldr	r3, [pc, #68]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 80088f4:	4b10      	ldr	r3, [pc, #64]	@ (8008938 <EnabledConnectedDevices+0x50>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 80088fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d006      	beq.n	8008910 <EnabledConnectedDevices+0x28>
 8008902:	4b0c      	ldr	r3, [pc, #48]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 8008904:	795b      	ldrb	r3, [r3, #5]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800890a:	4b0b      	ldr	r3, [pc, #44]	@ (8008938 <EnabledConnectedDevices+0x50>)
 800890c:	2201      	movs	r2, #1
 800890e:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008910:	4b08      	ldr	r3, [pc, #32]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 8008912:	789b      	ldrb	r3, [r3, #2]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008918:	4b07      	ldr	r3, [pc, #28]	@ (8008938 <EnabledConnectedDevices+0x50>)
 800891a:	2201      	movs	r2, #1
 800891c:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800891e:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 8008920:	78db      	ldrb	r3, [r3, #3]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 8008926:	4b04      	ldr	r3, [pc, #16]	@ (8008938 <EnabledConnectedDevices+0x50>)
 8008928:	2201      	movs	r2, #1
 800892a:	70da      	strb	r2, [r3, #3]
  }
}
 800892c:	46c0      	nop			@ (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	46c0      	nop			@ (mov r8, r8)
 8008934:	20000fcc 	.word	0x20000fcc
 8008938:	20000fc8 	.word	0x20000fc8

0800893c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008940:	4a0a      	ldr	r2, [pc, #40]	@ (800896c <DisableConnectedDevices+0x30>)
 8008942:	4b0b      	ldr	r3, [pc, #44]	@ (8008970 <DisableConnectedDevices+0x34>)
 8008944:	0019      	movs	r1, r3
 8008946:	2003      	movs	r0, #3
 8008948:	f005 fdbe 	bl	800e4c8 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800894c:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <DisableConnectedDevices+0x38>)
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008952:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <DisableConnectedDevices+0x38>)
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008958:	4b06      	ldr	r3, [pc, #24]	@ (8008974 <DisableConnectedDevices+0x38>)
 800895a:	2200      	movs	r2, #0
 800895c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800895e:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <DisableConnectedDevices+0x38>)
 8008960:	2200      	movs	r2, #0
 8008962:	70da      	strb	r2, [r3, #3]
}
 8008964:	46c0      	nop			@ (mov r8, r8)
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	46c0      	nop			@ (mov r8, r8)
 800896c:	08024440 	.word	0x08024440
 8008970:	08024188 	.word	0x08024188
 8008974:	20000fc8 	.word	0x20000fc8

08008978 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800897c:	4b02      	ldr	r3, [pc, #8]	@ (8008988 <ResetdBAmax+0x10>)
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
}
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20001018 	.word	0x20001018

0800898c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008994:	f006 f9de 	bl	800ed54 <HAL_GetTick>
 8008998:	0002      	movs	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	18d2      	adds	r2, r2, r3
 800899e:	4b03      	ldr	r3, [pc, #12]	@ (80089ac <setMICTimeStamp+0x20>)
 80089a0:	601a      	str	r2, [r3, #0]
}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	46bd      	mov	sp, r7
 80089a6:	b002      	add	sp, #8
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	20001020 	.word	0x20001020

080089b0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  counter = 0;
 80089b4:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <ResetDBACalculator+0x1c>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80089ba:	4b05      	ldr	r3, [pc, #20]	@ (80089d0 <ResetDBACalculator+0x20>)
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <ResetDBACalculator+0x24>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	701a      	strb	r2, [r3, #0]
}
 80089c6:	46c0      	nop			@ (mov r8, r8)
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	2000101c 	.word	0x2000101c
 80089d0:	2000008c 	.word	0x2000008c
 80089d4:	2000101d 	.word	0x2000101d

080089d8 <MIC_Print>:

void MIC_Print(void) {
 80089d8:	b5b0      	push	{r4, r5, r7, lr}
 80089da:	b08a      	sub	sp, #40	@ 0x28
 80089dc:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 80089de:	4b9d      	ldr	r3, [pc, #628]	@ (8008c54 <MIC_Print+0x27c>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b9d      	ldr	r3, [pc, #628]	@ (8008c58 <MIC_Print+0x280>)
 80089e4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 80089e6:	4b9d      	ldr	r3, [pc, #628]	@ (8008c5c <MIC_Print+0x284>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	001a      	movs	r2, r3
 80089ec:	4b9a      	ldr	r3, [pc, #616]	@ (8008c58 <MIC_Print+0x280>)
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	4b9b      	ldr	r3, [pc, #620]	@ (8008c60 <MIC_Print+0x288>)
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	50d1      	str	r1, [r2, r3]
  counter++;
 80089f6:	4b99      	ldr	r3, [pc, #612]	@ (8008c5c <MIC_Print+0x284>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4b97      	ldr	r3, [pc, #604]	@ (8008c5c <MIC_Print+0x284>)
 8008a00:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008a02:	4b96      	ldr	r3, [pc, #600]	@ (8008c5c <MIC_Print+0x284>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b09      	cmp	r3, #9
 8008a08:	d80b      	bhi.n	8008a22 <MIC_Print+0x4a>
 8008a0a:	4b96      	ldr	r3, [pc, #600]	@ (8008c64 <MIC_Print+0x28c>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4053      	eors	r3, r2
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d004      	beq.n	8008a22 <MIC_Print+0x4a>
    denominator = counter;
 8008a18:	4b90      	ldr	r3, [pc, #576]	@ (8008c5c <MIC_Print+0x284>)
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	4b92      	ldr	r3, [pc, #584]	@ (8008c68 <MIC_Print+0x290>)
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e005      	b.n	8008a2e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008a22:	4b91      	ldr	r3, [pc, #580]	@ (8008c68 <MIC_Print+0x290>)
 8008a24:	220a      	movs	r2, #10
 8008a26:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008a28:	4b8e      	ldr	r3, [pc, #568]	@ (8008c64 <MIC_Print+0x28c>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8008c6c <MIC_Print+0x294>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008a34:	230f      	movs	r3, #15
 8008a36:	18fb      	adds	r3, r7, r3
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	e03e      	b.n	8008abc <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 8008a3e:	240f      	movs	r4, #15
 8008a40:	193b      	adds	r3, r7, r4
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	4b86      	ldr	r3, [pc, #536]	@ (8008c60 <MIC_Print+0x288>)
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	58d2      	ldr	r2, [r2, r3]
 8008a4a:	4b88      	ldr	r3, [pc, #544]	@ (8008c6c <MIC_Print+0x294>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	1c19      	adds	r1, r3, #0
 8008a50:	1c10      	adds	r0, r2, #0
 8008a52:	f7f7 ff35 	bl	80008c0 <__aeabi_fadd>
 8008a56:	1c03      	adds	r3, r0, #0
 8008a58:	1c1a      	adds	r2, r3, #0
 8008a5a:	4b84      	ldr	r3, [pc, #528]	@ (8008c6c <MIC_Print+0x294>)
 8008a5c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008a5e:	193b      	adds	r3, r7, r4
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	4b7f      	ldr	r3, [pc, #508]	@ (8008c60 <MIC_Print+0x288>)
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	58d2      	ldr	r2, [r2, r3]
 8008a68:	4b81      	ldr	r3, [pc, #516]	@ (8008c70 <MIC_Print+0x298>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	1c19      	adds	r1, r3, #0
 8008a6e:	1c10      	adds	r0, r2, #0
 8008a70:	f7f7 fd72 	bl	8000558 <__aeabi_fcmpgt>
 8008a74:	1e03      	subs	r3, r0, #0
 8008a76:	d006      	beq.n	8008a86 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008a78:	193b      	adds	r3, r7, r4
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	4b78      	ldr	r3, [pc, #480]	@ (8008c60 <MIC_Print+0x288>)
 8008a7e:	0092      	lsls	r2, r2, #2
 8008a80:	58d2      	ldr	r2, [r2, r3]
 8008a82:	4b7b      	ldr	r3, [pc, #492]	@ (8008c70 <MIC_Print+0x298>)
 8008a84:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008a86:	4b79      	ldr	r3, [pc, #484]	@ (8008c6c <MIC_Print+0x294>)
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	4b77      	ldr	r3, [pc, #476]	@ (8008c68 <MIC_Print+0x290>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f7f8 fdea 	bl	8001668 <__aeabi_ui2f>
 8008a94:	1c03      	adds	r3, r0, #0
 8008a96:	1c19      	adds	r1, r3, #0
 8008a98:	1c20      	adds	r0, r4, #0
 8008a9a:	f7f8 f89b 	bl	8000bd4 <__aeabi_fdiv>
 8008a9e:	1c03      	adds	r3, r0, #0
 8008aa0:	1c1a      	adds	r2, r3, #0
 8008aa2:	4b74      	ldr	r3, [pc, #464]	@ (8008c74 <MIC_Print+0x29c>)
 8008aa4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 8008aa6:	4b72      	ldr	r3, [pc, #456]	@ (8008c70 <MIC_Print+0x298>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	1c18      	adds	r0, r3, #0
 8008aac:	f7fa ff5a 	bl	8003964 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008ab0:	210f      	movs	r1, #15
 8008ab2:	187b      	adds	r3, r7, r1
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	187b      	adds	r3, r7, r1
 8008ab8:	3201      	adds	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	4b6a      	ldr	r3, [pc, #424]	@ (8008c68 <MIC_Print+0x290>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	220f      	movs	r2, #15
 8008ac2:	18ba      	adds	r2, r7, r2
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d3b9      	bcc.n	8008a3e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008aca:	4b63      	ldr	r3, [pc, #396]	@ (8008c58 <MIC_Print+0x280>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	1c18      	adds	r0, r3, #0
 8008ad0:	f7fa fcc8 	bl	8003464 <__aeabi_f2d>
 8008ad4:	6038      	str	r0, [r7, #0]
 8008ad6:	6079      	str	r1, [r7, #4]
 8008ad8:	4b65      	ldr	r3, [pc, #404]	@ (8008c70 <MIC_Print+0x298>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	1c18      	adds	r0, r3, #0
 8008ade:	f7fa fcc1 	bl	8003464 <__aeabi_f2d>
 8008ae2:	0004      	movs	r4, r0
 8008ae4:	000d      	movs	r5, r1
 8008ae6:	4b63      	ldr	r3, [pc, #396]	@ (8008c74 <MIC_Print+0x29c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	1c18      	adds	r0, r3, #0
 8008aec:	f7fa fcba 	bl	8003464 <__aeabi_f2d>
 8008af0:	0002      	movs	r2, r0
 8008af2:	000b      	movs	r3, r1
 8008af4:	4960      	ldr	r1, [pc, #384]	@ (8008c78 <MIC_Print+0x2a0>)
 8008af6:	9204      	str	r2, [sp, #16]
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	9402      	str	r4, [sp, #8]
 8008afc:	9503      	str	r5, [sp, #12]
 8008afe:	4b5f      	ldr	r3, [pc, #380]	@ (8008c7c <MIC_Print+0x2a4>)
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0008      	movs	r0, r1
 8008b08:	f017 f9c8 	bl	801fe9c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008b0c:	4b53      	ldr	r3, [pc, #332]	@ (8008c5c <MIC_Print+0x284>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b0a      	cmp	r3, #10
 8008b12:	d902      	bls.n	8008b1a <MIC_Print+0x142>
    counter = 0;
 8008b14:	4b51      	ldr	r3, [pc, #324]	@ (8008c5c <MIC_Print+0x284>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008c58 <MIC_Print+0x280>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4958      	ldr	r1, [pc, #352]	@ (8008c80 <MIC_Print+0x2a8>)
 8008b20:	1c18      	adds	r0, r3, #0
 8008b22:	f7f7 fd23 	bl	800056c <__aeabi_fcmpge>
 8008b26:	1e03      	subs	r3, r0, #0
 8008b28:	d004      	beq.n	8008b34 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	2001      	movs	r0, #1
 8008b30:	f004 fbaa 	bl	800d288 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008b34:	4b48      	ldr	r3, [pc, #288]	@ (8008c58 <MIC_Print+0x280>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4952      	ldr	r1, [pc, #328]	@ (8008c84 <MIC_Print+0x2ac>)
 8008b3a:	1c18      	adds	r0, r3, #0
 8008b3c:	f7f7 fd16 	bl	800056c <__aeabi_fcmpge>
 8008b40:	1e03      	subs	r3, r0, #0
 8008b42:	d00c      	beq.n	8008b5e <MIC_Print+0x186>
 8008b44:	4b44      	ldr	r3, [pc, #272]	@ (8008c58 <MIC_Print+0x280>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	494d      	ldr	r1, [pc, #308]	@ (8008c80 <MIC_Print+0x2a8>)
 8008b4a:	1c18      	adds	r0, r3, #0
 8008b4c:	f7f7 fcf0 	bl	8000530 <__aeabi_fcmplt>
 8008b50:	1e03      	subs	r3, r0, #0
 8008b52:	d004      	beq.n	8008b5e <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f004 fb95 	bl	800d288 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c58 <MIC_Print+0x280>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4949      	ldr	r1, [pc, #292]	@ (8008c88 <MIC_Print+0x2b0>)
 8008b64:	1c18      	adds	r0, r3, #0
 8008b66:	f7f7 fd01 	bl	800056c <__aeabi_fcmpge>
 8008b6a:	1e03      	subs	r3, r0, #0
 8008b6c:	d00c      	beq.n	8008b88 <MIC_Print+0x1b0>
 8008b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c58 <MIC_Print+0x280>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4944      	ldr	r1, [pc, #272]	@ (8008c84 <MIC_Print+0x2ac>)
 8008b74:	1c18      	adds	r0, r3, #0
 8008b76:	f7f7 fcdb 	bl	8000530 <__aeabi_fcmplt>
 8008b7a:	1e03      	subs	r3, r0, #0
 8008b7c:	d004      	beq.n	8008b88 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2101      	movs	r1, #1
 8008b82:	2001      	movs	r0, #1
 8008b84:	f004 fb80 	bl	800d288 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008b88:	4b33      	ldr	r3, [pc, #204]	@ (8008c58 <MIC_Print+0x280>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	493f      	ldr	r1, [pc, #252]	@ (8008c8c <MIC_Print+0x2b4>)
 8008b8e:	1c18      	adds	r0, r3, #0
 8008b90:	f7f7 fcec 	bl	800056c <__aeabi_fcmpge>
 8008b94:	1e03      	subs	r3, r0, #0
 8008b96:	d00c      	beq.n	8008bb2 <MIC_Print+0x1da>
 8008b98:	4b2f      	ldr	r3, [pc, #188]	@ (8008c58 <MIC_Print+0x280>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	493a      	ldr	r1, [pc, #232]	@ (8008c88 <MIC_Print+0x2b0>)
 8008b9e:	1c18      	adds	r0, r3, #0
 8008ba0:	f7f7 fcc6 	bl	8000530 <__aeabi_fcmplt>
 8008ba4:	1e03      	subs	r3, r0, #0
 8008ba6:	d004      	beq.n	8008bb2 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2101      	movs	r1, #1
 8008bac:	2000      	movs	r0, #0
 8008bae:	f004 fb6b 	bl	800d288 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008bb2:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <MIC_Print+0x280>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4936      	ldr	r1, [pc, #216]	@ (8008c90 <MIC_Print+0x2b8>)
 8008bb8:	1c18      	adds	r0, r3, #0
 8008bba:	f7f7 fcd7 	bl	800056c <__aeabi_fcmpge>
 8008bbe:	1e03      	subs	r3, r0, #0
 8008bc0:	d00c      	beq.n	8008bdc <MIC_Print+0x204>
 8008bc2:	4b25      	ldr	r3, [pc, #148]	@ (8008c58 <MIC_Print+0x280>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4931      	ldr	r1, [pc, #196]	@ (8008c8c <MIC_Print+0x2b4>)
 8008bc8:	1c18      	adds	r0, r3, #0
 8008bca:	f7f7 fcb1 	bl	8000530 <__aeabi_fcmplt>
 8008bce:	1e03      	subs	r3, r0, #0
 8008bd0:	d004      	beq.n	8008bdc <MIC_Print+0x204>
    SetDBLED(false, true, true);
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f004 fb56 	bl	800d288 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c58 <MIC_Print+0x280>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	492c      	ldr	r1, [pc, #176]	@ (8008c94 <MIC_Print+0x2bc>)
 8008be2:	1c18      	adds	r0, r3, #0
 8008be4:	f7f7 fcc2 	bl	800056c <__aeabi_fcmpge>
 8008be8:	1e03      	subs	r3, r0, #0
 8008bea:	d00c      	beq.n	8008c06 <MIC_Print+0x22e>
 8008bec:	4b1a      	ldr	r3, [pc, #104]	@ (8008c58 <MIC_Print+0x280>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4927      	ldr	r1, [pc, #156]	@ (8008c90 <MIC_Print+0x2b8>)
 8008bf2:	1c18      	adds	r0, r3, #0
 8008bf4:	f7f7 fc9c 	bl	8000530 <__aeabi_fcmplt>
 8008bf8:	1e03      	subs	r3, r0, #0
 8008bfa:	d004      	beq.n	8008c06 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	2100      	movs	r1, #0
 8008c00:	2000      	movs	r0, #0
 8008c02:	f004 fb41 	bl	800d288 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008c06:	4b14      	ldr	r3, [pc, #80]	@ (8008c58 <MIC_Print+0x280>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4923      	ldr	r1, [pc, #140]	@ (8008c98 <MIC_Print+0x2c0>)
 8008c0c:	1c18      	adds	r0, r3, #0
 8008c0e:	f7f7 fcad 	bl	800056c <__aeabi_fcmpge>
 8008c12:	1e03      	subs	r3, r0, #0
 8008c14:	d00c      	beq.n	8008c30 <MIC_Print+0x258>
 8008c16:	4b10      	ldr	r3, [pc, #64]	@ (8008c58 <MIC_Print+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	491e      	ldr	r1, [pc, #120]	@ (8008c94 <MIC_Print+0x2bc>)
 8008c1c:	1c18      	adds	r0, r3, #0
 8008c1e:	f7f7 fc87 	bl	8000530 <__aeabi_fcmplt>
 8008c22:	1e03      	subs	r3, r0, #0
 8008c24:	d004      	beq.n	8008c30 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008c26:	2201      	movs	r2, #1
 8008c28:	2100      	movs	r1, #0
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	f004 fb2c 	bl	800d288 <SetDBLED>
  }
  if(dBA < 35){//off
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <MIC_Print+0x280>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4918      	ldr	r1, [pc, #96]	@ (8008c98 <MIC_Print+0x2c0>)
 8008c36:	1c18      	adds	r0, r3, #0
 8008c38:	f7f7 fc7a 	bl	8000530 <__aeabi_fcmplt>
 8008c3c:	1e03      	subs	r3, r0, #0
 8008c3e:	d100      	bne.n	8008c42 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008c40:	e004      	b.n	8008c4c <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008c42:	2200      	movs	r2, #0
 8008c44:	2100      	movs	r1, #0
 8008c46:	2000      	movs	r0, #0
 8008c48:	f004 fb1e 	bl	800d288 <SetDBLED>
}
 8008c4c:	46c0      	nop			@ (mov r8, r8)
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b004      	add	sp, #16
 8008c52:	bdb0      	pop	{r4, r5, r7, pc}
 8008c54:	20001014 	.word	0x20001014
 8008c58:	20000fe0 	.word	0x20000fe0
 8008c5c:	2000101c 	.word	0x2000101c
 8008c60:	20000fe4 	.word	0x20000fe4
 8008c64:	2000101d 	.word	0x2000101d
 8008c68:	2000008c 	.word	0x2000008c
 8008c6c:	20001010 	.word	0x20001010
 8008c70:	20001018 	.word	0x20001018
 8008c74:	2000100c 	.word	0x2000100c
 8008c78:	08024454 	.word	0x08024454
 8008c7c:	20000fd4 	.word	0x20000fd4
 8008c80:	42b40000 	.word	0x42b40000
 8008c84:	42a00000 	.word	0x42a00000
 8008c88:	428c0000 	.word	0x428c0000
 8008c8c:	42700000 	.word	0x42700000
 8008c90:	42480000 	.word	0x42480000
 8008c94:	42200000 	.word	0x42200000
 8008c98:	420c0000 	.word	0x420c0000

08008c9c <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008ca2:	4b11      	ldr	r3, [pc, #68]	@ (8008ce8 <MIC_TestMeasurementDone+0x4c>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4a10      	ldr	r2, [pc, #64]	@ (8008cec <MIC_TestMeasurementDone+0x50>)
 8008caa:	4911      	ldr	r1, [pc, #68]	@ (8008cf0 <MIC_TestMeasurementDone+0x54>)
 8008cac:	2002      	movs	r0, #2
 8008cae:	f005 fc0b 	bl	800e4c8 <CreateLine>
  if(DataReady) {
 8008cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce8 <MIC_TestMeasurementDone+0x4c>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d010      	beq.n	8008cde <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008cbc:	1dfb      	adds	r3, r7, #7
 8008cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf4 <MIC_TestMeasurementDone+0x58>)
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <MIC_TestMeasurementDone+0x58>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf8 <MIC_TestMeasurementDone+0x5c>)
 8008ccc:	4908      	ldr	r1, [pc, #32]	@ (8008cf0 <MIC_TestMeasurementDone+0x54>)
 8008cce:	2002      	movs	r0, #2
 8008cd0:	f005 fbfa 	bl	800e4c8 <CreateLine>
    ResetMICIndicator();
 8008cd4:	f004 fbc6 	bl	800d464 <ResetMICIndicator>
    return Check;
 8008cd8:	1dfb      	adds	r3, r7, #7
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	e000      	b.n	8008ce0 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b002      	add	sp, #8
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	2000115f 	.word	0x2000115f
 8008cec:	0802449c 	.word	0x0802449c
 8008cf0:	080244c8 	.word	0x080244c8
 8008cf4:	20001160 	.word	0x20001160
 8008cf8:	080244cc 	.word	0x080244cc

08008cfc <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008d02:	4b78      	ldr	r3, [pc, #480]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d100      	bne.n	8008d0c <Mic_Upkeep+0x10>
 8008d0a:	e0b8      	b.n	8008e7e <Mic_Upkeep+0x182>
 8008d0c:	dd00      	ble.n	8008d10 <Mic_Upkeep+0x14>
 8008d0e:	e0d3      	b.n	8008eb8 <Mic_Upkeep+0x1bc>
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d037      	beq.n	8008d84 <Mic_Upkeep+0x88>
 8008d14:	dd00      	ble.n	8008d18 <Mic_Upkeep+0x1c>
 8008d16:	e0cf      	b.n	8008eb8 <Mic_Upkeep+0x1bc>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <Mic_Upkeep+0x26>
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d014      	beq.n	8008d4a <Mic_Upkeep+0x4e>
 8008d20:	e0ca      	b.n	8008eb8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008d22:	2001      	movs	r0, #1
 8008d24:	f003 fbae 	bl	800c484 <enableMicrophone>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4053      	eors	r3, r2
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008d36:	4a6c      	ldr	r2, [pc, #432]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008d38:	4b6c      	ldr	r3, [pc, #432]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008d3a:	217f      	movs	r1, #127	@ 0x7f
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f005 fc7b 	bl	800e638 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008d42:	4b68      	ldr	r3, [pc, #416]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]
    break;
 8008d48:	e0c5      	b.n	8008ed6 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008d4a:	f003 fb77 	bl	800c43c <micSettlingComplete>
 8008d4e:	1e03      	subs	r3, r0, #0
 8008d50:	d105      	bne.n	8008d5e <Mic_Upkeep+0x62>
 8008d52:	4b67      	ldr	r3, [pc, #412]	@ (8008ef0 <Mic_Upkeep+0x1f4>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d100      	bne.n	8008d5e <Mic_Upkeep+0x62>
 8008d5c:	e0b6      	b.n	8008ecc <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008d5e:	f003 fbfb 	bl	800c558 <startSPLcalculation>
 8008d62:	0003      	movs	r3, r0
 8008d64:	001a      	movs	r2, r3
 8008d66:	2301      	movs	r3, #1
 8008d68:	4053      	eors	r3, r2
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d005      	beq.n	8008d7c <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008d70:	4a5d      	ldr	r2, [pc, #372]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008d72:	4b5e      	ldr	r3, [pc, #376]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008d74:	2188      	movs	r1, #136	@ 0x88
 8008d76:	0018      	movs	r0, r3
 8008d78:	f005 fc5e 	bl	800e638 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008d7c:	4b59      	ldr	r3, [pc, #356]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008d7e:	2202      	movs	r2, #2
 8008d80:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008d82:	e0a3      	b.n	8008ecc <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008d84:	4b5b      	ldr	r3, [pc, #364]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	2101      	movs	r1, #1
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f003 fa38 	bl	800c200 <getSoundData>
 8008d90:	1e03      	subs	r3, r0, #0
 8008d92:	d100      	bne.n	8008d96 <Mic_Upkeep+0x9a>
 8008d94:	e09c      	b.n	8008ed0 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008d96:	f003 fb31 	bl	800c3fc <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008d9a:	4b56      	ldr	r3, [pc, #344]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	001a      	movs	r2, r3
 8008da0:	4b54      	ldr	r3, [pc, #336]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	4954      	ldr	r1, [pc, #336]	@ (8008ef8 <Mic_Upkeep+0x1fc>)
 8008da6:	0038      	movs	r0, r7
 8008da8:	f017 f8e8 	bl	801ff7c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008dac:	4b51      	ldr	r3, [pc, #324]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008dae:	89db      	ldrh	r3, [r3, #14]
 8008db0:	001a      	movs	r2, r3
 8008db2:	4b50      	ldr	r3, [pc, #320]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008db4:	7c1b      	ldrb	r3, [r3, #16]
 8008db6:	4951      	ldr	r1, [pc, #324]	@ (8008efc <Mic_Upkeep+0x200>)
 8008db8:	4851      	ldr	r0, [pc, #324]	@ (8008f00 <Mic_Upkeep+0x204>)
 8008dba:	f017 f8df 	bl	801ff7c <siprintf>
      dBValue = atof(dBbuffer);
 8008dbe:	003b      	movs	r3, r7
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f015 fc8b 	bl	801e6dc <atof>
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	000b      	movs	r3, r1
 8008dca:	0010      	movs	r0, r2
 8008dcc:	0019      	movs	r1, r3
 8008dce:	f7fa fb91 	bl	80034f4 <__aeabi_d2f>
 8008dd2:	1c02      	adds	r2, r0, #0
 8008dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f04 <Mic_Upkeep+0x208>)
 8008dd6:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8008f04 <Mic_Upkeep+0x208>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	494a      	ldr	r1, [pc, #296]	@ (8008f08 <Mic_Upkeep+0x20c>)
 8008dde:	1c18      	adds	r0, r3, #0
 8008de0:	f7f8 f8de 	bl	8000fa0 <__aeabi_fmul>
 8008de4:	1c03      	adds	r3, r0, #0
 8008de6:	1c18      	adds	r0, r3, #0
 8008de8:	f7fa fb3c 	bl	8003464 <__aeabi_f2d>
 8008dec:	2200      	movs	r2, #0
 8008dee:	4b47      	ldr	r3, [pc, #284]	@ (8008f0c <Mic_Upkeep+0x210>)
 8008df0:	f7f8 fc7c 	bl	80016ec <__aeabi_dadd>
 8008df4:	0002      	movs	r2, r0
 8008df6:	000b      	movs	r3, r1
 8008df8:	0010      	movs	r0, r2
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	f7fa faa4 	bl	8003348 <__aeabi_d2iz>
 8008e00:	0003      	movs	r3, r0
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7fa fadc 	bl	80033c0 <__aeabi_i2d>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4b41      	ldr	r3, [pc, #260]	@ (8008f10 <Mic_Upkeep+0x214>)
 8008e0c:	f7f8 ffd2 	bl	8001db4 <__aeabi_ddiv>
 8008e10:	0002      	movs	r2, r0
 8008e12:	000b      	movs	r3, r1
 8008e14:	0010      	movs	r0, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	f7fa fb6c 	bl	80034f4 <__aeabi_d2f>
 8008e1c:	1c02      	adds	r2, r0, #0
 8008e1e:	4b39      	ldr	r3, [pc, #228]	@ (8008f04 <Mic_Upkeep+0x208>)
 8008e20:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008e22:	f7ff fdd9 	bl	80089d8 <MIC_Print>
      if (!startSPLcalculation()) {
 8008e26:	f003 fb97 	bl	800c558 <startSPLcalculation>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4053      	eors	r3, r2
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e38:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008e3c:	2198      	movs	r1, #152	@ 0x98
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f005 fbfa 	bl	800e638 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008e44:	2000      	movs	r0, #0
 8008e46:	f003 fb1d 	bl	800c484 <enableMicrophone>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	001a      	movs	r2, r3
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4053      	eors	r3, r2
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e58:	4a23      	ldr	r2, [pc, #140]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008e5a:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008e5c:	219b      	movs	r1, #155	@ 0x9b
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f005 fbea 	bl	800e638 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008e64:	f005 ff76 	bl	800ed54 <HAL_GetTick>
 8008e68:	0003      	movs	r3, r0
 8008e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f14 <Mic_Upkeep+0x218>)
 8008e6c:	189a      	adds	r2, r3, r2
 8008e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f18 <Mic_Upkeep+0x21c>)
 8008e70:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008e72:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008e74:	2203      	movs	r2, #3
 8008e76:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008e78:	f004 faf4 	bl	800d464 <ResetMICIndicator>
    }
    break;
 8008e7c:	e028      	b.n	8008ed0 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008e7e:	4b26      	ldr	r3, [pc, #152]	@ (8008f18 <Mic_Upkeep+0x21c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	0018      	movs	r0, r3
 8008e84:	f005 faca 	bl	800e41c <TimestampIsReached>
 8008e88:	1e03      	subs	r3, r0, #0
 8008e8a:	d023      	beq.n	8008ed4 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f003 faf9 	bl	800c484 <enableMicrophone>
 8008e92:	0003      	movs	r3, r0
 8008e94:	001a      	movs	r2, r3
 8008e96:	2301      	movs	r3, #1
 8008e98:	4053      	eors	r3, r2
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008ea0:	4a11      	ldr	r2, [pc, #68]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008ea2:	4b12      	ldr	r3, [pc, #72]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008ea4:	21a6      	movs	r1, #166	@ 0xa6
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f005 fbc6 	bl	800e638 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008eac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008eb2:	f004 fa95 	bl	800d3e0 <SetMICIndicator>
    }
    break;
 8008eb6:	e00d      	b.n	8008ed4 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008eb8:	4a18      	ldr	r2, [pc, #96]	@ (8008f1c <Mic_Upkeep+0x220>)
 8008eba:	4b19      	ldr	r3, [pc, #100]	@ (8008f20 <Mic_Upkeep+0x224>)
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	2003      	movs	r0, #3
 8008ec0:	f005 fb02 	bl	800e4c8 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008ec4:	4b07      	ldr	r3, [pc, #28]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
    break;
 8008eca:	e004      	b.n	8008ed6 <Mic_Upkeep+0x1da>
    break;
 8008ecc:	46c0      	nop			@ (mov r8, r8)
 8008ece:	e002      	b.n	8008ed6 <Mic_Upkeep+0x1da>
    break;
 8008ed0:	46c0      	nop			@ (mov r8, r8)
 8008ed2:	e000      	b.n	8008ed6 <Mic_Upkeep+0x1da>
    break;
 8008ed4:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008ed6:	4b03      	ldr	r3, [pc, #12]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
}
 8008eda:	0018      	movs	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b002      	add	sp, #8
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	46c0      	nop			@ (mov r8, r8)
 8008ee4:	20001036 	.word	0x20001036
 8008ee8:	080244e4 	.word	0x080244e4
 8008eec:	0802550c 	.word	0x0802550c
 8008ef0:	2000115f 	.word	0x2000115f
 8008ef4:	20001024 	.word	0x20001024
 8008ef8:	08024500 	.word	0x08024500
 8008efc:	08024508 	.word	0x08024508
 8008f00:	20000fd4 	.word	0x20000fd4
 8008f04:	20001014 	.word	0x20001014
 8008f08:	42c80000 	.word	0x42c80000
 8008f0c:	3fe00000 	.word	0x3fe00000
 8008f10:	40590000 	.word	0x40590000
 8008f14:	000002f3 	.word	0x000002f3
 8008f18:	20001020 	.word	0x20001020
 8008f1c:	08024510 	.word	0x08024510
 8008f20:	08024530 	.word	0x08024530

08008f24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	2314      	movs	r3, #20
 8008f30:	001a      	movs	r2, r3
 8008f32:	2100      	movs	r1, #0
 8008f34:	f017 f966 	bl	8020204 <memset>
  RTC_DateTypeDef sDate = {0};
 8008f38:	003b      	movs	r3, r7
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f40:	4a2e      	ldr	r2, [pc, #184]	@ (8008ffc <MX_RTC_Init+0xd8>)
 8008f42:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008f44:	4b2c      	ldr	r3, [pc, #176]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f4c:	227f      	movs	r2, #127	@ 0x7f
 8008f4e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008f50:	4b29      	ldr	r3, [pc, #164]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f52:	22ff      	movs	r2, #255	@ 0xff
 8008f54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f56:	4b28      	ldr	r3, [pc, #160]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008f5c:	4b26      	ldr	r3, [pc, #152]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f62:	4b25      	ldr	r3, [pc, #148]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f68:	4b23      	ldr	r3, [pc, #140]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f6e:	4b22      	ldr	r3, [pc, #136]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f70:	0018      	movs	r0, r3
 8008f72:	f00c ff73 	bl	8015e5c <HAL_RTC_Init>
 8008f76:	1e03      	subs	r3, r0, #0
 8008f78:	d001      	beq.n	8008f7e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008f7a:	f7ff f9c7 	bl	800830c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008f7e:	1d3b      	adds	r3, r7, #4
 8008f80:	220d      	movs	r2, #13
 8008f82:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008f84:	1d3b      	adds	r3, r7, #4
 8008f86:	2200      	movs	r2, #0
 8008f88:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008f8a:	1d3b      	adds	r3, r7, #4
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	2200      	movs	r2, #0
 8008f94:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	2200      	movs	r2, #0
 8008f9a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008f9c:	1d39      	adds	r1, r7, #4
 8008f9e:	4b16      	ldr	r3, [pc, #88]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f00c fff6 	bl	8015f94 <HAL_RTC_SetTime>
 8008fa8:	1e03      	subs	r3, r0, #0
 8008faa:	d001      	beq.n	8008fb0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008fac:	f7ff f9ae 	bl	800830c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008fb0:	003b      	movs	r3, r7
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008fb6:	003b      	movs	r3, r7
 8008fb8:	2211      	movs	r2, #17
 8008fba:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008fbc:	003b      	movs	r3, r7
 8008fbe:	2217      	movs	r2, #23
 8008fc0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008fc2:	003b      	movs	r3, r7
 8008fc4:	2218      	movs	r2, #24
 8008fc6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008fc8:	0039      	movs	r1, r7
 8008fca:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f00d f8e8 	bl	80161a4 <HAL_RTC_SetDate>
 8008fd4:	1e03      	subs	r3, r0, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008fd8:	f7ff f998 	bl	800830c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f00d fa98 	bl	8016518 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008fe8:	1e03      	subs	r3, r0, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008fec:	f7ff f98e 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008ff0:	46c0      	nop			@ (mov r8, r8)
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b006      	add	sp, #24
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	20001038 	.word	0x20001038
 8008ffc:	40002800 	.word	0x40002800

08009000 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a0a      	ldr	r2, [pc, #40]	@ (8009038 <HAL_RTC_MspInit+0x38>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d10e      	bne.n	8009030 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <HAL_RTC_MspInit+0x3c>)
 8009014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009016:	4b09      	ldr	r3, [pc, #36]	@ (800903c <HAL_RTC_MspInit+0x3c>)
 8009018:	2180      	movs	r1, #128	@ 0x80
 800901a:	02c9      	lsls	r1, r1, #11
 800901c:	430a      	orrs	r2, r1
 800901e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009020:	2200      	movs	r2, #0
 8009022:	2100      	movs	r1, #0
 8009024:	2002      	movs	r0, #2
 8009026:	f006 fb39 	bl	800f69c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800902a:	2002      	movs	r0, #2
 800902c:	f006 fb4b 	bl	800f6c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009030:	46c0      	nop			@ (mov r8, r8)
 8009032:	46bd      	mov	sp, r7
 8009034:	b002      	add	sp, #8
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40002800 	.word	0x40002800
 800903c:	40021000 	.word	0x40021000

08009040 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoximax;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009044:	4b02      	ldr	r3, [pc, #8]	@ (8009050 <sen5x_Get_sen5x_enable_state+0x10>)
 8009046:	781b      	ldrb	r3, [r3, #0]
}
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	2000105f 	.word	0x2000105f

08009054 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800905c:	f005 fe7a 	bl	800ed54 <HAL_GetTick>
 8009060:	0002      	movs	r2, r0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	18d2      	adds	r2, r2, r3
 8009066:	4b03      	ldr	r3, [pc, #12]	@ (8009074 <setsen5xReadTimer+0x20>)
 8009068:	601a      	str	r2, [r3, #0]
}
 800906a:	46c0      	nop			@ (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b002      	add	sp, #8
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	20001074 	.word	0x20001074

08009078 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	0002      	movs	r2, r0
 8009080:	1dfb      	adds	r3, r7, #7
 8009082:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009084:	4b03      	ldr	r3, [pc, #12]	@ (8009094 <setsen5xSamplecounter+0x1c>)
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
}
 800908a:	46c0      	nop			@ (mov r8, r8)
 800908c:	46bd      	mov	sp, r7
 800908e:	b002      	add	sp, #8
 8009090:	bd80      	pop	{r7, pc}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	20001068 	.word	0x20001068

08009098 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 80090a0:	f7ff f9b0 	bl	8008404 <IsPMSensorEnabled>
 80090a4:	1e03      	subs	r3, r0, #0
 80090a6:	d02c      	beq.n	8009102 <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 80090a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <sen5x_enable+0x88>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	4193      	sbcs	r3, r2
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2201      	movs	r2, #1
 80090b4:	4053      	eors	r3, r2
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	1c1a      	adds	r2, r3, #0
 80090ba:	2301      	movs	r3, #1
 80090bc:	4013      	ands	r3, r2
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	4b17      	ldr	r3, [pc, #92]	@ (8009120 <sen5x_enable+0x88>)
 80090c2:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 80090c4:	4b16      	ldr	r3, [pc, #88]	@ (8009120 <sen5x_enable+0x88>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7ff ffc1 	bl	8009054 <setsen5xReadTimer>
 80090d2:	e009      	b.n	80090e8 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 80090d4:	f005 fe3e 	bl	800ed54 <HAL_GetTick>
 80090d8:	0002      	movs	r2, r0
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2164      	movs	r1, #100	@ 0x64
 80090de:	434b      	muls	r3, r1
 80090e0:	18d3      	adds	r3, r2, r3
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff ffb6 	bl	8009054 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is : %s", sen5x_Enable?"enabled":"disabled");
 80090e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <sen5x_enable+0x88>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <sen5x_enable+0x5c>
 80090f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009124 <sen5x_enable+0x8c>)
 80090f2:	e000      	b.n	80090f6 <sen5x_enable+0x5e>
 80090f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009128 <sen5x_enable+0x90>)
 80090f6:	4a0d      	ldr	r2, [pc, #52]	@ (800912c <sen5x_enable+0x94>)
 80090f8:	490d      	ldr	r1, [pc, #52]	@ (8009130 <sen5x_enable+0x98>)
 80090fa:	2002      	movs	r0, #2
 80090fc:	f005 f9e4 	bl	800e4c8 <CreateLine>
 8009100:	e005      	b.n	800910e <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 8009102:	4a0c      	ldr	r2, [pc, #48]	@ (8009134 <sen5x_enable+0x9c>)
 8009104:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <sen5x_enable+0x98>)
 8009106:	0019      	movs	r1, r3
 8009108:	2002      	movs	r0, #2
 800910a:	f005 f9dd 	bl	800e4c8 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800910e:	4b0a      	ldr	r3, [pc, #40]	@ (8009138 <sen5x_enable+0xa0>)
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009114:	4b02      	ldr	r3, [pc, #8]	@ (8009120 <sen5x_enable+0x88>)
 8009116:	781b      	ldrb	r3, [r3, #0]
}
 8009118:	0018      	movs	r0, r3
 800911a:	46bd      	mov	sp, r7
 800911c:	b002      	add	sp, #8
 800911e:	bd80      	pop	{r7, pc}
 8009120:	2000105f 	.word	0x2000105f
 8009124:	08024534 	.word	0x08024534
 8009128:	0802453c 	.word	0x0802453c
 800912c:	08024548 	.word	0x08024548
 8009130:	08024568 	.word	0x08024568
 8009134:	0802456c 	.word	0x0802456c
 8009138:	2000008d 	.word	0x2000008d

0800913c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8009140:	4a0a      	ldr	r2, [pc, #40]	@ (800916c <sen5x_Power_On+0x30>)
 8009142:	4b0b      	ldr	r3, [pc, #44]	@ (8009170 <sen5x_Power_On+0x34>)
 8009144:	0019      	movs	r1, r3
 8009146:	2003      	movs	r0, #3
 8009148:	f005 f9be 	bl	800e4c8 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800914c:	2380      	movs	r3, #128	@ 0x80
 800914e:	015b      	lsls	r3, r3, #5
 8009150:	4808      	ldr	r0, [pc, #32]	@ (8009174 <sen5x_Power_On+0x38>)
 8009152:	2201      	movs	r2, #1
 8009154:	0019      	movs	r1, r3
 8009156:	f007 f88e 	bl	8010276 <HAL_GPIO_WritePin>
  sen5x_On = true;
 800915a:	4b07      	ldr	r3, [pc, #28]	@ (8009178 <sen5x_Power_On+0x3c>)
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8009160:	2037      	movs	r0, #55	@ 0x37
 8009162:	f005 fe01 	bl	800ed68 <HAL_Delay>
}
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	0802458c 	.word	0x0802458c
 8009170:	080245a8 	.word	0x080245a8
 8009174:	50000800 	.word	0x50000800
 8009178:	2000105d 	.word	0x2000105d

0800917c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009180:	4b0e      	ldr	r3, [pc, #56]	@ (80091bc <sen5x_Power_Off+0x40>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d006      	beq.n	8009196 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009188:	4a0d      	ldr	r2, [pc, #52]	@ (80091c0 <sen5x_Power_Off+0x44>)
 800918a:	4b0e      	ldr	r3, [pc, #56]	@ (80091c4 <sen5x_Power_Off+0x48>)
 800918c:	0019      	movs	r1, r3
 800918e:	2003      	movs	r0, #3
 8009190:	f005 f99a 	bl	800e4c8 <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 8009194:	e00f      	b.n	80091b6 <sen5x_Power_Off+0x3a>
    Debug("executing sen5x_Power_Off");
 8009196:	4a0c      	ldr	r2, [pc, #48]	@ (80091c8 <sen5x_Power_Off+0x4c>)
 8009198:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <sen5x_Power_Off+0x48>)
 800919a:	0019      	movs	r1, r3
 800919c:	2003      	movs	r0, #3
 800919e:	f005 f993 	bl	800e4c8 <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80091a2:	2380      	movs	r3, #128	@ 0x80
 80091a4:	015b      	lsls	r3, r3, #5
 80091a6:	4809      	ldr	r0, [pc, #36]	@ (80091cc <sen5x_Power_Off+0x50>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	0019      	movs	r1, r3
 80091ac:	f007 f863 	bl	8010276 <HAL_GPIO_WritePin>
    sen5x_On = false;
 80091b0:	4b07      	ldr	r3, [pc, #28]	@ (80091d0 <sen5x_Power_Off+0x54>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
}
 80091b6:	46c0      	nop			@ (mov r8, r8)
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	2000105e 	.word	0x2000105e
 80091c0:	080245ac 	.word	0x080245ac
 80091c4:	080245a8 	.word	0x080245a8
 80091c8:	080245dc 	.word	0x080245dc
 80091cc:	50000800 	.word	0x50000800
 80091d0:	2000105d 	.word	0x2000105d

080091d4 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 80091d8:	4b02      	ldr	r3, [pc, #8]	@ (80091e4 <reset_fanCleaningDone+0x10>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
}
 80091de:	46c0      	nop			@ (mov r8, r8)
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	2000105c 	.word	0x2000105c

080091e8 <probe_sen5x>:

int16_t probe_sen5x(void) {
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ea:	b093      	sub	sp, #76	@ 0x4c
 80091ec:	af04      	add	r7, sp, #16
  int16_t error = 0;
 80091ee:	2436      	movs	r4, #54	@ 0x36
 80091f0:	193b      	adds	r3, r7, r4
 80091f2:	2200      	movs	r2, #0
 80091f4:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 80091f6:	2335      	movs	r3, #53	@ 0x35
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	2220      	movs	r2, #32
 80091fc:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 80091fe:	2334      	movs	r3, #52	@ 0x34
 8009200:	18fb      	adds	r3, r7, r3
 8009202:	2220      	movs	r2, #32
 8009204:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8009206:	f7ff ff99 	bl	800913c <sen5x_Power_On>
  error = sen5x_device_reset();
 800920a:	0025      	movs	r5, r4
 800920c:	193c      	adds	r4, r7, r4
 800920e:	f001 f903 	bl	800a418 <sen5x_device_reset>
 8009212:	0003      	movs	r3, r0
 8009214:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009216:	002c      	movs	r4, r5
 8009218:	193b      	adds	r3, r7, r4
 800921a:	2200      	movs	r2, #0
 800921c:	5e9b      	ldrsh	r3, [r3, r2]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8009222:	193b      	adds	r3, r7, r4
 8009224:	2200      	movs	r2, #0
 8009226:	5e9b      	ldrsh	r3, [r3, r2]
 8009228:	4a6d      	ldr	r2, [pc, #436]	@ (80093e0 <probe_sen5x+0x1f8>)
 800922a:	496e      	ldr	r1, [pc, #440]	@ (80093e4 <probe_sen5x+0x1fc>)
 800922c:	2001      	movs	r0, #1
 800922e:	f005 f94b 	bl	800e4c8 <CreateLine>
      return error;
 8009232:	193b      	adds	r3, r7, r4
 8009234:	2200      	movs	r2, #0
 8009236:	5e9b      	ldrsh	r3, [r3, r2]
 8009238:	e0cd      	b.n	80093d6 <probe_sen5x+0x1ee>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800923a:	2536      	movs	r5, #54	@ 0x36
 800923c:	197c      	adds	r4, r7, r5
 800923e:	2335      	movs	r3, #53	@ 0x35
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	230c      	movs	r3, #12
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	0011      	movs	r1, r2
 800924a:	0018      	movs	r0, r3
 800924c:	f000 ffd0 	bl	800a1f0 <sen5x_get_serial_number>
 8009250:	0003      	movs	r3, r0
 8009252:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009254:	197b      	adds	r3, r7, r5
 8009256:	2200      	movs	r2, #0
 8009258:	5e9b      	ldrsh	r3, [r3, r2]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800925e:	197b      	adds	r3, r7, r5
 8009260:	2200      	movs	r2, #0
 8009262:	5e9a      	ldrsh	r2, [r3, r2]
 8009264:	4b60      	ldr	r3, [pc, #384]	@ (80093e8 <probe_sen5x+0x200>)
 8009266:	0011      	movs	r1, r2
 8009268:	0018      	movs	r0, r3
 800926a:	f016 fe17 	bl	801fe9c <iprintf>
      return error;
 800926e:	197b      	adds	r3, r7, r5
 8009270:	2200      	movs	r2, #0
 8009272:	5e9b      	ldrsh	r3, [r3, r2]
 8009274:	e0af      	b.n	80093d6 <probe_sen5x+0x1ee>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8009276:	230c      	movs	r3, #12
 8009278:	18fa      	adds	r2, r7, r3
 800927a:	4b5c      	ldr	r3, [pc, #368]	@ (80093ec <probe_sen5x+0x204>)
 800927c:	0011      	movs	r1, r2
 800927e:	0018      	movs	r0, r3
 8009280:	f016 fe0c 	bl	801fe9c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009284:	2536      	movs	r5, #54	@ 0x36
 8009286:	197c      	adds	r4, r7, r5
 8009288:	2334      	movs	r3, #52	@ 0x34
 800928a:	18fb      	adds	r3, r7, r3
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4b58      	ldr	r3, [pc, #352]	@ (80093f0 <probe_sen5x+0x208>)
 8009290:	0011      	movs	r1, r2
 8009292:	0018      	movs	r0, r3
 8009294:	f000 ff56 	bl	800a144 <sen5x_get_product_name>
 8009298:	0003      	movs	r3, r0
 800929a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800929c:	197b      	adds	r3, r7, r5
 800929e:	2200      	movs	r2, #0
 80092a0:	5e9b      	ldrsh	r3, [r3, r2]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 80092a6:	197b      	adds	r3, r7, r5
 80092a8:	2200      	movs	r2, #0
 80092aa:	5e9a      	ldrsh	r2, [r3, r2]
 80092ac:	4b51      	ldr	r3, [pc, #324]	@ (80093f4 <probe_sen5x+0x20c>)
 80092ae:	0011      	movs	r1, r2
 80092b0:	0018      	movs	r0, r3
 80092b2:	f016 fdf3 	bl	801fe9c <iprintf>
      return error;
 80092b6:	197b      	adds	r3, r7, r5
 80092b8:	2200      	movs	r2, #0
 80092ba:	5e9b      	ldrsh	r3, [r3, r2]
 80092bc:	e08b      	b.n	80093d6 <probe_sen5x+0x1ee>
  } else {
      printf("Product name: %s\r\n", product_name);
 80092be:	4a4c      	ldr	r2, [pc, #304]	@ (80093f0 <probe_sen5x+0x208>)
 80092c0:	4b4d      	ldr	r3, [pc, #308]	@ (80093f8 <probe_sen5x+0x210>)
 80092c2:	0011      	movs	r1, r2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f016 fde9 	bl	801fe9c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 80092ca:	2636      	movs	r6, #54	@ 0x36
 80092cc:	19bc      	adds	r4, r7, r6
 80092ce:	2308      	movs	r3, #8
 80092d0:	18fd      	adds	r5, r7, r3
 80092d2:	2309      	movs	r3, #9
 80092d4:	18fa      	adds	r2, r7, r3
 80092d6:	230a      	movs	r3, #10
 80092d8:	18f9      	adds	r1, r7, r3
 80092da:	230b      	movs	r3, #11
 80092dc:	18f8      	adds	r0, r7, r3
 80092de:	1d7b      	adds	r3, r7, #5
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	1dbb      	adds	r3, r7, #6
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	1dfb      	adds	r3, r7, #7
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	002b      	movs	r3, r5
 80092ec:	f000 ffd6 	bl	800a29c <sen5x_get_version>
 80092f0:	0003      	movs	r3, r0
 80092f2:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 80092f4:	19bb      	adds	r3, r7, r6
 80092f6:	2200      	movs	r2, #0
 80092f8:	5e9b      	ldrsh	r3, [r3, r2]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 80092fe:	19bb      	adds	r3, r7, r6
 8009300:	2200      	movs	r2, #0
 8009302:	5e9a      	ldrsh	r2, [r3, r2]
 8009304:	4b3d      	ldr	r3, [pc, #244]	@ (80093fc <probe_sen5x+0x214>)
 8009306:	0011      	movs	r1, r2
 8009308:	0018      	movs	r0, r3
 800930a:	f016 fdc7 	bl	801fe9c <iprintf>
      return error;
 800930e:	19bb      	adds	r3, r7, r6
 8009310:	2200      	movs	r2, #0
 8009312:	5e9b      	ldrsh	r3, [r3, r2]
 8009314:	e05f      	b.n	80093d6 <probe_sen5x+0x1ee>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8009316:	230b      	movs	r3, #11
 8009318:	18fb      	adds	r3, r7, r3
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	0019      	movs	r1, r3
 800931e:	230a      	movs	r3, #10
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	001a      	movs	r2, r3
 8009326:	2308      	movs	r3, #8
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	001c      	movs	r4, r3
 800932e:	1dfb      	adds	r3, r7, #7
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4833      	ldr	r0, [pc, #204]	@ (8009400 <probe_sen5x+0x218>)
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	0023      	movs	r3, r4
 8009338:	f016 fdb0 	bl	801fe9c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800933c:	2300      	movs	r3, #0
 800933e:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 8009340:	262e      	movs	r6, #46	@ 0x2e
 8009342:	19bb      	adds	r3, r7, r6
 8009344:	2200      	movs	r2, #0
 8009346:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009348:	232c      	movs	r3, #44	@ 0x2c
 800934a:	18fb      	adds	r3, r7, r3
 800934c:	2200      	movs	r2, #0
 800934e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8009350:	492c      	ldr	r1, [pc, #176]	@ (8009404 <probe_sen5x+0x21c>)
 8009352:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009354:	f7f7 fe24 	bl	8000fa0 <__aeabi_fmul>
 8009358:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800935a:	1c18      	adds	r0, r3, #0
 800935c:	f7f8 f918 	bl	8001590 <__aeabi_f2iz>
 8009360:	0003      	movs	r3, r0
 8009362:	b218      	sxth	r0, r3
 8009364:	2536      	movs	r5, #54	@ 0x36
 8009366:	197c      	adds	r4, r7, r5
 8009368:	232c      	movs	r3, #44	@ 0x2c
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	881a      	ldrh	r2, [r3, #0]
 800936e:	19bb      	adds	r3, r7, r6
 8009370:	2100      	movs	r1, #0
 8009372:	5e5b      	ldrsh	r3, [r3, r1]
 8009374:	0019      	movs	r1, r3
 8009376:	f000 fe81 	bl	800a07c <sen5x_set_temperature_offset_parameters>
 800937a:	0003      	movs	r3, r0
 800937c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800937e:	197b      	adds	r3, r7, r5
 8009380:	2200      	movs	r2, #0
 8009382:	5e9b      	ldrsh	r3, [r3, r2]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009388:	197b      	adds	r3, r7, r5
 800938a:	2200      	movs	r2, #0
 800938c:	5e9b      	ldrsh	r3, [r3, r2]
 800938e:	4a1e      	ldr	r2, [pc, #120]	@ (8009408 <probe_sen5x+0x220>)
 8009390:	4914      	ldr	r1, [pc, #80]	@ (80093e4 <probe_sen5x+0x1fc>)
 8009392:	2001      	movs	r0, #1
 8009394:	f005 f898 	bl	800e4c8 <CreateLine>
      return error;
 8009398:	197b      	adds	r3, r7, r5
 800939a:	2200      	movs	r2, #0
 800939c:	5e9b      	ldrsh	r3, [r3, r2]
 800939e:	e01a      	b.n	80093d6 <probe_sen5x+0x1ee>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 80093a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093a2:	f7fa f85f 	bl	8003464 <__aeabi_f2d>
 80093a6:	0002      	movs	r2, r0
 80093a8:	000b      	movs	r3, r1
 80093aa:	4818      	ldr	r0, [pc, #96]	@ (800940c <probe_sen5x+0x224>)
 80093ac:	4918      	ldr	r1, [pc, #96]	@ (8009410 <probe_sen5x+0x228>)
 80093ae:	9200      	str	r2, [sp, #0]
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	0002      	movs	r2, r0
 80093b4:	2002      	movs	r0, #2
 80093b6:	f005 f887 	bl	800e4c8 <CreateLine>
  }
  sen5x_Power_Off();
 80093ba:	f7ff fedf 	bl	800917c <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 80093be:	f005 fcc9 	bl	800ed54 <HAL_GetTick>
 80093c2:	0003      	movs	r3, r0
 80093c4:	22fa      	movs	r2, #250	@ 0xfa
 80093c6:	00d2      	lsls	r2, r2, #3
 80093c8:	189a      	adds	r2, r3, r2
 80093ca:	4b12      	ldr	r3, [pc, #72]	@ (8009414 <probe_sen5x+0x22c>)
 80093cc:	601a      	str	r2, [r3, #0]
  return error;
 80093ce:	2336      	movs	r3, #54	@ 0x36
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	2200      	movs	r2, #0
 80093d4:	5e9b      	ldrsh	r3, [r3, r2]
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b00f      	add	sp, #60	@ 0x3c
 80093dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	080245f8 	.word	0x080245f8
 80093e4:	08024624 	.word	0x08024624
 80093e8:	08024628 	.word	0x08024628
 80093ec:	08024658 	.word	0x08024658
 80093f0:	20001060 	.word	0x20001060
 80093f4:	0802466c 	.word	0x0802466c
 80093f8:	0802469c 	.word	0x0802469c
 80093fc:	080246b0 	.word	0x080246b0
 8009400:	080246dc 	.word	0x080246dc
 8009404:	43480000 	.word	0x43480000
 8009408:	08024700 	.word	0x08024700
 800940c:	08024740 	.word	0x08024740
 8009410:	08024568 	.word	0x08024568
 8009414:	20001074 	.word	0x20001074

08009418 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009418:	b590      	push	{r4, r7, lr}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800941e:	1dbb      	adds	r3, r7, #6
 8009420:	2200      	movs	r2, #0
 8009422:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 8009424:	4b1b      	ldr	r3, [pc, #108]	@ (8009494 <sen5x_lightup_measurement+0x7c>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00b      	beq.n	8009444 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800942c:	4a1a      	ldr	r2, [pc, #104]	@ (8009498 <sen5x_lightup_measurement+0x80>)
 800942e:	4b1b      	ldr	r3, [pc, #108]	@ (800949c <sen5x_lightup_measurement+0x84>)
 8009430:	0019      	movs	r1, r3
 8009432:	2002      	movs	r0, #2
 8009434:	f005 f848 	bl	800e4c8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009438:	1dbc      	adds	r4, r7, #6
 800943a:	f000 fcab 	bl	8009d94 <sen5x_start_measurement_without_pm>
 800943e:	0003      	movs	r3, r0
 8009440:	8023      	strh	r3, [r4, #0]
 8009442:	e00a      	b.n	800945a <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 8009444:	4a16      	ldr	r2, [pc, #88]	@ (80094a0 <sen5x_lightup_measurement+0x88>)
 8009446:	4b15      	ldr	r3, [pc, #84]	@ (800949c <sen5x_lightup_measurement+0x84>)
 8009448:	0019      	movs	r1, r3
 800944a:	2002      	movs	r0, #2
 800944c:	f005 f83c 	bl	800e4c8 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 8009450:	1dbc      	adds	r4, r7, #6
 8009452:	f000 fc71 	bl	8009d38 <sen5x_start_measurement>
 8009456:	0003      	movs	r3, r0
 8009458:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800945a:	1dbb      	adds	r3, r7, #6
 800945c:	2200      	movs	r2, #0
 800945e:	5e9b      	ldrsh	r3, [r3, r2]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d008      	beq.n	8009476 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009464:	1dbb      	adds	r3, r7, #6
 8009466:	2200      	movs	r2, #0
 8009468:	5e9b      	ldrsh	r3, [r3, r2]
 800946a:	4a0e      	ldr	r2, [pc, #56]	@ (80094a4 <sen5x_lightup_measurement+0x8c>)
 800946c:	490e      	ldr	r1, [pc, #56]	@ (80094a8 <sen5x_lightup_measurement+0x90>)
 800946e:	2001      	movs	r0, #1
 8009470:	f005 f82a 	bl	800e4c8 <CreateLine>
 8009474:	e007      	b.n	8009486 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009476:	f7fd f819 	bl	80064ac <showTime>
    Info("sen5x_start_measurement executed");
 800947a:	4a0c      	ldr	r2, [pc, #48]	@ (80094ac <sen5x_lightup_measurement+0x94>)
 800947c:	4b07      	ldr	r3, [pc, #28]	@ (800949c <sen5x_lightup_measurement+0x84>)
 800947e:	0019      	movs	r1, r3
 8009480:	2002      	movs	r0, #2
 8009482:	f005 f821 	bl	800e4c8 <CreateLine>
  }
  return error;
 8009486:	1dbb      	adds	r3, r7, #6
 8009488:	2200      	movs	r2, #0
 800948a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800948c:	0018      	movs	r0, r3
 800948e:	46bd      	mov	sp, r7
 8009490:	b003      	add	sp, #12
 8009492:	bd90      	pop	{r4, r7, pc}
 8009494:	2000105e 	.word	0x2000105e
 8009498:	08024778 	.word	0x08024778
 800949c:	08024568 	.word	0x08024568
 80094a0:	080247a4 	.word	0x080247a4
 80094a4:	080247c4 	.word	0x080247c4
 80094a8:	08024624 	.word	0x08024624
 80094ac:	080247f4 	.word	0x080247f4

080094b0 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 80094b0:	b590      	push	{r4, r7, lr}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
  int16_t error = 0;
 80094b6:	1dbb      	adds	r3, r7, #6
 80094b8:	2200      	movs	r2, #0
 80094ba:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 80094bc:	4b21      	ldr	r3, [pc, #132]	@ (8009544 <sen5x_extinguish_measurement+0x94>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01e      	beq.n	8009502 <sen5x_extinguish_measurement+0x52>
    Info("Continious VOC & NOx is active, sensor not powered off");
 80094c4:	4a20      	ldr	r2, [pc, #128]	@ (8009548 <sen5x_extinguish_measurement+0x98>)
 80094c6:	4b21      	ldr	r3, [pc, #132]	@ (800954c <sen5x_extinguish_measurement+0x9c>)
 80094c8:	0019      	movs	r1, r3
 80094ca:	2002      	movs	r0, #2
 80094cc:	f004 fffc 	bl	800e4c8 <CreateLine>
    Info("PM measurement is disabled");
 80094d0:	4a1f      	ldr	r2, [pc, #124]	@ (8009550 <sen5x_extinguish_measurement+0xa0>)
 80094d2:	4b1e      	ldr	r3, [pc, #120]	@ (800954c <sen5x_extinguish_measurement+0x9c>)
 80094d4:	0019      	movs	r1, r3
 80094d6:	2002      	movs	r0, #2
 80094d8:	f004 fff6 	bl	800e4c8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80094dc:	1dbc      	adds	r4, r7, #6
 80094de:	f000 fc59 	bl	8009d94 <sen5x_start_measurement_without_pm>
 80094e2:	0003      	movs	r3, r0
 80094e4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80094e6:	1dbb      	adds	r3, r7, #6
 80094e8:	2200      	movs	r2, #0
 80094ea:	5e9b      	ldrsh	r3, [r3, r2]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d022      	beq.n	8009536 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 80094f0:	1dbb      	adds	r3, r7, #6
 80094f2:	2200      	movs	r2, #0
 80094f4:	5e9b      	ldrsh	r3, [r3, r2]
 80094f6:	4a17      	ldr	r2, [pc, #92]	@ (8009554 <sen5x_extinguish_measurement+0xa4>)
 80094f8:	4917      	ldr	r1, [pc, #92]	@ (8009558 <sen5x_extinguish_measurement+0xa8>)
 80094fa:	2001      	movs	r0, #1
 80094fc:	f004 ffe4 	bl	800e4c8 <CreateLine>
 8009500:	e019      	b.n	8009536 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 8009502:	1dbc      	adds	r4, r7, #6
 8009504:	f000 fc74 	bl	8009df0 <sen5x_stop_measurement>
 8009508:	0003      	movs	r3, r0
 800950a:	8023      	strh	r3, [r4, #0]
    showTime();
 800950c:	f7fc ffce 	bl	80064ac <showTime>
    Info("sen5x_stop_measurement executed");
 8009510:	4a12      	ldr	r2, [pc, #72]	@ (800955c <sen5x_extinguish_measurement+0xac>)
 8009512:	4b0e      	ldr	r3, [pc, #56]	@ (800954c <sen5x_extinguish_measurement+0x9c>)
 8009514:	0019      	movs	r1, r3
 8009516:	2002      	movs	r0, #2
 8009518:	f004 ffd6 	bl	800e4c8 <CreateLine>
    if (error) {
 800951c:	1dbb      	adds	r3, r7, #6
 800951e:	2200      	movs	r2, #0
 8009520:	5e9b      	ldrsh	r3, [r3, r2]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 8009526:	1dbb      	adds	r3, r7, #6
 8009528:	2200      	movs	r2, #0
 800952a:	5e9b      	ldrsh	r3, [r3, r2]
 800952c:	4a0c      	ldr	r2, [pc, #48]	@ (8009560 <sen5x_extinguish_measurement+0xb0>)
 800952e:	490a      	ldr	r1, [pc, #40]	@ (8009558 <sen5x_extinguish_measurement+0xa8>)
 8009530:	2001      	movs	r0, #1
 8009532:	f004 ffc9 	bl	800e4c8 <CreateLine>
    }
  }
  return error;
 8009536:	1dbb      	adds	r3, r7, #6
 8009538:	2200      	movs	r2, #0
 800953a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800953c:	0018      	movs	r0, r3
 800953e:	46bd      	mov	sp, r7
 8009540:	b003      	add	sp, #12
 8009542:	bd90      	pop	{r4, r7, pc}
 8009544:	2000105e 	.word	0x2000105e
 8009548:	08024818 	.word	0x08024818
 800954c:	08024568 	.word	0x08024568
 8009550:	08024850 	.word	0x08024850
 8009554:	0802486c 	.word	0x0802486c
 8009558:	08024624 	.word	0x08024624
 800955c:	080248ac 	.word	0x080248ac
 8009560:	080248cc 	.word	0x080248cc

08009564 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009566:	b08d      	sub	sp, #52	@ 0x34
 8009568:	af04      	add	r7, sp, #16
 800956a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800956c:	261e      	movs	r6, #30
 800956e:	19bb      	adds	r3, r7, r6
 8009570:	2200      	movs	r2, #0
 8009572:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009574:	19bc      	adds	r4, r7, r6
 8009576:	2316      	movs	r3, #22
 8009578:	18fd      	adds	r5, r7, r3
 800957a:	2318      	movs	r3, #24
 800957c:	18fa      	adds	r2, r7, r3
 800957e:	231a      	movs	r3, #26
 8009580:	18f9      	adds	r1, r7, r3
 8009582:	231c      	movs	r3, #28
 8009584:	18f8      	adds	r0, r7, r3
 8009586:	230e      	movs	r3, #14
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	2310      	movs	r3, #16
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	2312      	movs	r3, #18
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	2314      	movs	r3, #20
 800959a:	18fb      	adds	r3, r7, r3
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	002b      	movs	r3, r5
 80095a0:	f000 fca8 	bl	8009ef4 <sen5x_read_measured_values>
 80095a4:	0003      	movs	r3, r0
 80095a6:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 80095a8:	19bb      	adds	r3, r7, r6
 80095aa:	2200      	movs	r2, #0
 80095ac:	5e9b      	ldrsh	r3, [r3, r2]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <sen5x_read_measurement+0x56>
    return error;
 80095b2:	19bb      	adds	r3, r7, r6
 80095b4:	2200      	movs	r2, #0
 80095b6:	5e9b      	ldrsh	r3, [r3, r2]
 80095b8:	e02c      	b.n	8009614 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 80095ba:	231c      	movs	r3, #28
 80095bc:	18fb      	adds	r3, r7, r3
 80095be:	881a      	ldrh	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 80095c4:	231a      	movs	r3, #26
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	881a      	ldrh	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 80095ce:	2318      	movs	r3, #24
 80095d0:	18fb      	adds	r3, r7, r3
 80095d2:	881a      	ldrh	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 80095d8:	2316      	movs	r3, #22
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 80095e2:	2314      	movs	r3, #20
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	2200      	movs	r2, #0
 80095e8:	5e9a      	ldrsh	r2, [r3, r2]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 80095ee:	2312      	movs	r3, #18
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	2200      	movs	r2, #0
 80095f4:	5e9a      	ldrsh	r2, [r3, r2]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80095fa:	2310      	movs	r3, #16
 80095fc:	18fb      	adds	r3, r7, r3
 80095fe:	2200      	movs	r2, #0
 8009600:	5e9a      	ldrsh	r2, [r3, r2]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8009606:	230e      	movs	r3, #14
 8009608:	18fb      	adds	r3, r7, r3
 800960a:	2200      	movs	r2, #0
 800960c:	5e9a      	ldrsh	r2, [r3, r2]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	81da      	strh	r2, [r3, #14]
  return 0;
 8009612:	2300      	movs	r3, #0
}
 8009614:	0018      	movs	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	b009      	add	sp, #36	@ 0x24
 800961a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800961c <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 8009620:	4b69      	ldr	r3, [pc, #420]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	4a69      	ldr	r2, [pc, #420]	@ (80097cc <sen5x_printvalues+0x1b0>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800962a:	4b67      	ldr	r3, [pc, #412]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	0018      	movs	r0, r3
 8009630:	f7f7 ffce 	bl	80015d0 <__aeabi_i2f>
 8009634:	1c03      	adds	r3, r0, #0
 8009636:	4966      	ldr	r1, [pc, #408]	@ (80097d0 <sen5x_printvalues+0x1b4>)
 8009638:	1c18      	adds	r0, r3, #0
 800963a:	f7f7 facb 	bl	8000bd4 <__aeabi_fdiv>
 800963e:	1c03      	adds	r3, r0, #0
 8009640:	1c18      	adds	r0, r3, #0
 8009642:	f7f9 ff0f 	bl	8003464 <__aeabi_f2d>
 8009646:	0002      	movs	r2, r0
 8009648:	000b      	movs	r3, r1
 800964a:	4962      	ldr	r1, [pc, #392]	@ (80097d4 <sen5x_printvalues+0x1b8>)
 800964c:	0008      	movs	r0, r1
 800964e:	f016 fc25 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009652:	4b5d      	ldr	r3, [pc, #372]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009654:	885b      	ldrh	r3, [r3, #2]
 8009656:	4a5d      	ldr	r2, [pc, #372]	@ (80097cc <sen5x_printvalues+0x1b0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d013      	beq.n	8009684 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800965c:	4b5a      	ldr	r3, [pc, #360]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 800965e:	885b      	ldrh	r3, [r3, #2]
 8009660:	0018      	movs	r0, r3
 8009662:	f7f7 ffb5 	bl	80015d0 <__aeabi_i2f>
 8009666:	1c03      	adds	r3, r0, #0
 8009668:	4959      	ldr	r1, [pc, #356]	@ (80097d0 <sen5x_printvalues+0x1b4>)
 800966a:	1c18      	adds	r0, r3, #0
 800966c:	f7f7 fab2 	bl	8000bd4 <__aeabi_fdiv>
 8009670:	1c03      	adds	r3, r0, #0
 8009672:	1c18      	adds	r0, r3, #0
 8009674:	f7f9 fef6 	bl	8003464 <__aeabi_f2d>
 8009678:	0002      	movs	r2, r0
 800967a:	000b      	movs	r3, r1
 800967c:	4956      	ldr	r1, [pc, #344]	@ (80097d8 <sen5x_printvalues+0x1bc>)
 800967e:	0008      	movs	r0, r1
 8009680:	f016 fc0c 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009684:	4b50      	ldr	r3, [pc, #320]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009686:	889b      	ldrh	r3, [r3, #4]
 8009688:	4a50      	ldr	r2, [pc, #320]	@ (80097cc <sen5x_printvalues+0x1b0>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d013      	beq.n	80096b6 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800968e:	4b4e      	ldr	r3, [pc, #312]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009690:	889b      	ldrh	r3, [r3, #4]
 8009692:	0018      	movs	r0, r3
 8009694:	f7f7 ff9c 	bl	80015d0 <__aeabi_i2f>
 8009698:	1c03      	adds	r3, r0, #0
 800969a:	494d      	ldr	r1, [pc, #308]	@ (80097d0 <sen5x_printvalues+0x1b4>)
 800969c:	1c18      	adds	r0, r3, #0
 800969e:	f7f7 fa99 	bl	8000bd4 <__aeabi_fdiv>
 80096a2:	1c03      	adds	r3, r0, #0
 80096a4:	1c18      	adds	r0, r3, #0
 80096a6:	f7f9 fedd 	bl	8003464 <__aeabi_f2d>
 80096aa:	0002      	movs	r2, r0
 80096ac:	000b      	movs	r3, r1
 80096ae:	494b      	ldr	r1, [pc, #300]	@ (80097dc <sen5x_printvalues+0x1c0>)
 80096b0:	0008      	movs	r0, r1
 80096b2:	f016 fbf3 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 80096b6:	4b44      	ldr	r3, [pc, #272]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 80096b8:	88db      	ldrh	r3, [r3, #6]
 80096ba:	4a44      	ldr	r2, [pc, #272]	@ (80097cc <sen5x_printvalues+0x1b0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d013      	beq.n	80096e8 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 80096c0:	4b41      	ldr	r3, [pc, #260]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 80096c2:	88db      	ldrh	r3, [r3, #6]
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7f7 ff83 	bl	80015d0 <__aeabi_i2f>
 80096ca:	1c03      	adds	r3, r0, #0
 80096cc:	4940      	ldr	r1, [pc, #256]	@ (80097d0 <sen5x_printvalues+0x1b4>)
 80096ce:	1c18      	adds	r0, r3, #0
 80096d0:	f7f7 fa80 	bl	8000bd4 <__aeabi_fdiv>
 80096d4:	1c03      	adds	r3, r0, #0
 80096d6:	1c18      	adds	r0, r3, #0
 80096d8:	f7f9 fec4 	bl	8003464 <__aeabi_f2d>
 80096dc:	0002      	movs	r2, r0
 80096de:	000b      	movs	r3, r1
 80096e0:	493f      	ldr	r1, [pc, #252]	@ (80097e0 <sen5x_printvalues+0x1c4>)
 80096e2:	0008      	movs	r0, r1
 80096e4:	f016 fbda 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80096e8:	4b37      	ldr	r3, [pc, #220]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 80096ea:	2208      	movs	r2, #8
 80096ec:	5e9b      	ldrsh	r3, [r3, r2]
 80096ee:	4a3d      	ldr	r2, [pc, #244]	@ (80097e4 <sen5x_printvalues+0x1c8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d014      	beq.n	800971e <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80096f4:	4b34      	ldr	r3, [pc, #208]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 80096f6:	2208      	movs	r2, #8
 80096f8:	5e9b      	ldrsh	r3, [r3, r2]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f7f7 ff68 	bl	80015d0 <__aeabi_i2f>
 8009700:	1c03      	adds	r3, r0, #0
 8009702:	4939      	ldr	r1, [pc, #228]	@ (80097e8 <sen5x_printvalues+0x1cc>)
 8009704:	1c18      	adds	r0, r3, #0
 8009706:	f7f7 fa65 	bl	8000bd4 <__aeabi_fdiv>
 800970a:	1c03      	adds	r3, r0, #0
 800970c:	1c18      	adds	r0, r3, #0
 800970e:	f7f9 fea9 	bl	8003464 <__aeabi_f2d>
 8009712:	0002      	movs	r2, r0
 8009714:	000b      	movs	r3, r1
 8009716:	4935      	ldr	r1, [pc, #212]	@ (80097ec <sen5x_printvalues+0x1d0>)
 8009718:	0008      	movs	r0, r1
 800971a:	f016 fbbf 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800971e:	4b2a      	ldr	r3, [pc, #168]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009720:	220a      	movs	r2, #10
 8009722:	5e9b      	ldrsh	r3, [r3, r2]
 8009724:	4a2f      	ldr	r2, [pc, #188]	@ (80097e4 <sen5x_printvalues+0x1c8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d014      	beq.n	8009754 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800972a:	4b27      	ldr	r3, [pc, #156]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 800972c:	220a      	movs	r2, #10
 800972e:	5e9b      	ldrsh	r3, [r3, r2]
 8009730:	0018      	movs	r0, r3
 8009732:	f7f7 ff4d 	bl	80015d0 <__aeabi_i2f>
 8009736:	1c03      	adds	r3, r0, #0
 8009738:	492d      	ldr	r1, [pc, #180]	@ (80097f0 <sen5x_printvalues+0x1d4>)
 800973a:	1c18      	adds	r0, r3, #0
 800973c:	f7f7 fa4a 	bl	8000bd4 <__aeabi_fdiv>
 8009740:	1c03      	adds	r3, r0, #0
 8009742:	1c18      	adds	r0, r3, #0
 8009744:	f7f9 fe8e 	bl	8003464 <__aeabi_f2d>
 8009748:	0002      	movs	r2, r0
 800974a:	000b      	movs	r3, r1
 800974c:	4929      	ldr	r1, [pc, #164]	@ (80097f4 <sen5x_printvalues+0x1d8>)
 800974e:	0008      	movs	r0, r1
 8009750:	f016 fba4 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009754:	4b1c      	ldr	r3, [pc, #112]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009756:	220c      	movs	r2, #12
 8009758:	5e9b      	ldrsh	r3, [r3, r2]
 800975a:	4a22      	ldr	r2, [pc, #136]	@ (80097e4 <sen5x_printvalues+0x1c8>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d014      	beq.n	800978a <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009760:	4b19      	ldr	r3, [pc, #100]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009762:	220c      	movs	r2, #12
 8009764:	5e9b      	ldrsh	r3, [r3, r2]
 8009766:	0018      	movs	r0, r3
 8009768:	f7f7 ff32 	bl	80015d0 <__aeabi_i2f>
 800976c:	1c03      	adds	r3, r0, #0
 800976e:	4918      	ldr	r1, [pc, #96]	@ (80097d0 <sen5x_printvalues+0x1b4>)
 8009770:	1c18      	adds	r0, r3, #0
 8009772:	f7f7 fa2f 	bl	8000bd4 <__aeabi_fdiv>
 8009776:	1c03      	adds	r3, r0, #0
 8009778:	1c18      	adds	r0, r3, #0
 800977a:	f7f9 fe73 	bl	8003464 <__aeabi_f2d>
 800977e:	0002      	movs	r2, r0
 8009780:	000b      	movs	r3, r1
 8009782:	491d      	ldr	r1, [pc, #116]	@ (80097f8 <sen5x_printvalues+0x1dc>)
 8009784:	0008      	movs	r0, r1
 8009786:	f016 fb89 	bl	801fe9c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800978a:	4b0f      	ldr	r3, [pc, #60]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 800978c:	220e      	movs	r2, #14
 800978e:	5e9b      	ldrsh	r3, [r3, r2]
 8009790:	4a14      	ldr	r2, [pc, #80]	@ (80097e4 <sen5x_printvalues+0x1c8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d014      	beq.n	80097c0 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009796:	4b0c      	ldr	r3, [pc, #48]	@ (80097c8 <sen5x_printvalues+0x1ac>)
 8009798:	220e      	movs	r2, #14
 800979a:	5e9b      	ldrsh	r3, [r3, r2]
 800979c:	0018      	movs	r0, r3
 800979e:	f7f7 ff17 	bl	80015d0 <__aeabi_i2f>
 80097a2:	1c03      	adds	r3, r0, #0
 80097a4:	490a      	ldr	r1, [pc, #40]	@ (80097d0 <sen5x_printvalues+0x1b4>)
 80097a6:	1c18      	adds	r0, r3, #0
 80097a8:	f7f7 fa14 	bl	8000bd4 <__aeabi_fdiv>
 80097ac:	1c03      	adds	r3, r0, #0
 80097ae:	1c18      	adds	r0, r3, #0
 80097b0:	f7f9 fe58 	bl	8003464 <__aeabi_f2d>
 80097b4:	0002      	movs	r2, r0
 80097b6:	000b      	movs	r3, r1
 80097b8:	4910      	ldr	r1, [pc, #64]	@ (80097fc <sen5x_printvalues+0x1e0>)
 80097ba:	0008      	movs	r0, r1
 80097bc:	f016 fb6e 	bl	801fe9c <iprintf>
  }
}
 80097c0:	46c0      	nop			@ (mov r8, r8)
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	46c0      	nop			@ (mov r8, r8)
 80097c8:	20001078 	.word	0x20001078
 80097cc:	0000ffff 	.word	0x0000ffff
 80097d0:	41200000 	.word	0x41200000
 80097d4:	080248fc 	.word	0x080248fc
 80097d8:	08024928 	.word	0x08024928
 80097dc:	08024954 	.word	0x08024954
 80097e0:	08024980 	.word	0x08024980
 80097e4:	00007fff 	.word	0x00007fff
 80097e8:	42c80000 	.word	0x42c80000
 80097ec:	080249ac 	.word	0x080249ac
 80097f0:	43480000 	.word	0x43480000
 80097f4:	080249d0 	.word	0x080249d0
 80097f8:	080249f8 	.word	0x080249f8
 80097fc:	08024a10 	.word	0x08024a10

08009800 <sen5xStoreMax>:

void sen5xStoreMax() {
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 8009804:	4b32      	ldr	r3, [pc, #200]	@ (80098d0 <sen5xStoreMax+0xd0>)
 8009806:	885b      	ldrh	r3, [r3, #2]
 8009808:	4a32      	ldr	r2, [pc, #200]	@ (80098d4 <sen5xStoreMax+0xd4>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d009      	beq.n	8009822 <sen5xStoreMax+0x22>
 800980e:	4b30      	ldr	r3, [pc, #192]	@ (80098d0 <sen5xStoreMax+0xd0>)
 8009810:	885a      	ldrh	r2, [r3, #2]
 8009812:	4b31      	ldr	r3, [pc, #196]	@ (80098d8 <sen5xStoreMax+0xd8>)
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d903      	bls.n	8009822 <sen5xStoreMax+0x22>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 800981a:	4b2d      	ldr	r3, [pc, #180]	@ (80098d0 <sen5xStoreMax+0xd0>)
 800981c:	885a      	ldrh	r2, [r3, #2]
 800981e:	4b2e      	ldr	r3, [pc, #184]	@ (80098d8 <sen5xStoreMax+0xd8>)
 8009820:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 8009822:	4b2b      	ldr	r3, [pc, #172]	@ (80098d0 <sen5xStoreMax+0xd0>)
 8009824:	88db      	ldrh	r3, [r3, #6]
 8009826:	4a2b      	ldr	r2, [pc, #172]	@ (80098d4 <sen5xStoreMax+0xd4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d009      	beq.n	8009840 <sen5xStoreMax+0x40>
 800982c:	4b28      	ldr	r3, [pc, #160]	@ (80098d0 <sen5xStoreMax+0xd0>)
 800982e:	88da      	ldrh	r2, [r3, #6]
 8009830:	4b2a      	ldr	r3, [pc, #168]	@ (80098dc <sen5xStoreMax+0xdc>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d903      	bls.n	8009840 <sen5xStoreMax+0x40>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 8009838:	4b25      	ldr	r3, [pc, #148]	@ (80098d0 <sen5xStoreMax+0xd0>)
 800983a:	88da      	ldrh	r2, [r3, #6]
 800983c:	4b27      	ldr	r3, [pc, #156]	@ (80098dc <sen5xStoreMax+0xdc>)
 800983e:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 8009840:	4b23      	ldr	r3, [pc, #140]	@ (80098d0 <sen5xStoreMax+0xd0>)
 8009842:	220c      	movs	r2, #12
 8009844:	5e9b      	ldrsh	r3, [r3, r2]
 8009846:	4a26      	ldr	r2, [pc, #152]	@ (80098e0 <sen5xStoreMax+0xe0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00d      	beq.n	8009868 <sen5xStoreMax+0x68>
 800984c:	4b20      	ldr	r3, [pc, #128]	@ (80098d0 <sen5xStoreMax+0xd0>)
 800984e:	220c      	movs	r2, #12
 8009850:	5e9b      	ldrsh	r3, [r3, r2]
 8009852:	001a      	movs	r2, r3
 8009854:	4b23      	ldr	r3, [pc, #140]	@ (80098e4 <sen5xStoreMax+0xe4>)
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	429a      	cmp	r2, r3
 800985a:	dd05      	ble.n	8009868 <sen5xStoreMax+0x68>
    s5xvocimax = sen5x_data.voc_index;
 800985c:	4b1c      	ldr	r3, [pc, #112]	@ (80098d0 <sen5xStoreMax+0xd0>)
 800985e:	220c      	movs	r2, #12
 8009860:	5e9b      	ldrsh	r3, [r3, r2]
 8009862:	b29a      	uxth	r2, r3
 8009864:	4b1f      	ldr	r3, [pc, #124]	@ (80098e4 <sen5xStoreMax+0xe4>)
 8009866:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 8009868:	4b19      	ldr	r3, [pc, #100]	@ (80098d0 <sen5xStoreMax+0xd0>)
 800986a:	220e      	movs	r2, #14
 800986c:	5e9b      	ldrsh	r3, [r3, r2]
 800986e:	4a1c      	ldr	r2, [pc, #112]	@ (80098e0 <sen5xStoreMax+0xe0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00d      	beq.n	8009890 <sen5xStoreMax+0x90>
 8009874:	4b16      	ldr	r3, [pc, #88]	@ (80098d0 <sen5xStoreMax+0xd0>)
 8009876:	220e      	movs	r2, #14
 8009878:	5e9b      	ldrsh	r3, [r3, r2]
 800987a:	001a      	movs	r2, r3
 800987c:	4b1a      	ldr	r3, [pc, #104]	@ (80098e8 <sen5xStoreMax+0xe8>)
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	dd05      	ble.n	8009890 <sen5xStoreMax+0x90>
    s5xnoximax = sen5x_data.nox_index;
 8009884:	4b12      	ldr	r3, [pc, #72]	@ (80098d0 <sen5xStoreMax+0xd0>)
 8009886:	220e      	movs	r2, #14
 8009888:	5e9b      	ldrsh	r3, [r3, r2]
 800988a:	b29a      	uxth	r2, r3
 800988c:	4b16      	ldr	r3, [pc, #88]	@ (80098e8 <sen5xStoreMax+0xe8>)
 800988e:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009890:	4b16      	ldr	r3, [pc, #88]	@ (80098ec <sen5xStoreMax+0xec>)
 8009892:	791b      	ldrb	r3, [r3, #4]
 8009894:	2b34      	cmp	r3, #52	@ 0x34
 8009896:	d003      	beq.n	80098a0 <sen5xStoreMax+0xa0>
 8009898:	4b14      	ldr	r3, [pc, #80]	@ (80098ec <sen5xStoreMax+0xec>)
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	2b35      	cmp	r3, #53	@ 0x35
 800989e:	d10a      	bne.n	80098b6 <sen5xStoreMax+0xb6>
    setPMs(pm2p5max, pm10p0max, s5xvocimax, s5xnoximax);
 80098a0:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <sen5xStoreMax+0xd8>)
 80098a2:	8818      	ldrh	r0, [r3, #0]
 80098a4:	4b0d      	ldr	r3, [pc, #52]	@ (80098dc <sen5xStoreMax+0xdc>)
 80098a6:	8819      	ldrh	r1, [r3, #0]
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <sen5xStoreMax+0xe4>)
 80098aa:	881a      	ldrh	r2, [r3, #0]
 80098ac:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <sen5xStoreMax+0xe8>)
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	f7fa f896 	bl	80039e0 <setPMs>
 80098b4:	e008      	b.n	80098c8 <sen5xStoreMax+0xc8>
  }
  else {
    setPMsen50(pm2p5max, pm10p0max);
 80098b6:	4b08      	ldr	r3, [pc, #32]	@ (80098d8 <sen5xStoreMax+0xd8>)
 80098b8:	881a      	ldrh	r2, [r3, #0]
 80098ba:	4b08      	ldr	r3, [pc, #32]	@ (80098dc <sen5xStoreMax+0xdc>)
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	0019      	movs	r1, r3
 80098c0:	0010      	movs	r0, r2
 80098c2:	f7fa f85d 	bl	8003980 <setPMsen50>
  }
}
 80098c6:	46c0      	nop			@ (mov r8, r8)
 80098c8:	46c0      	nop			@ (mov r8, r8)
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	46c0      	nop			@ (mov r8, r8)
 80098d0:	20001078 	.word	0x20001078
 80098d4:	0000ffff 	.word	0x0000ffff
 80098d8:	2000106a 	.word	0x2000106a
 80098dc:	2000106c 	.word	0x2000106c
 80098e0:	00007fff 	.word	0x00007fff
 80098e4:	2000106e 	.word	0x2000106e
 80098e8:	20001070 	.word	0x20001070
 80098ec:	20001060 	.word	0x20001060

080098f0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80098f0:	b590      	push	{r4, r7, lr}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	6039      	str	r1, [r7, #0]
 80098f8:	0011      	movs	r1, r2
 80098fa:	1dfb      	adds	r3, r7, #7
 80098fc:	1c02      	adds	r2, r0, #0
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	1d3b      	adds	r3, r7, #4
 8009902:	1c0a      	adds	r2, r1, #0
 8009904:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009906:	1dfb      	adds	r3, r7, #7
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	18db      	adds	r3, r3, r3
 800990e:	b299      	uxth	r1, r3
 8009910:	1d3b      	adds	r3, r7, #4
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	4805      	ldr	r0, [pc, #20]	@ (800992c <sensirion_i2c_hal_read+0x3c>)
 8009918:	2464      	movs	r4, #100	@ 0x64
 800991a:	9400      	str	r4, [sp, #0]
 800991c:	f006 fe82 	bl	8010624 <HAL_I2C_Master_Receive>
 8009920:	0003      	movs	r3, r0
 8009922:	b25b      	sxtb	r3, r3
}
 8009924:	0018      	movs	r0, r3
 8009926:	46bd      	mov	sp, r7
 8009928:	b003      	add	sp, #12
 800992a:	bd90      	pop	{r4, r7, pc}
 800992c:	20000e40 	.word	0x20000e40

08009930 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009930:	b590      	push	{r4, r7, lr}
 8009932:	b085      	sub	sp, #20
 8009934:	af02      	add	r7, sp, #8
 8009936:	6039      	str	r1, [r7, #0]
 8009938:	0011      	movs	r1, r2
 800993a:	1dfb      	adds	r3, r7, #7
 800993c:	1c02      	adds	r2, r0, #0
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	1d3b      	adds	r3, r7, #4
 8009942:	1c0a      	adds	r2, r1, #0
 8009944:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009946:	1dfb      	adds	r3, r7, #7
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	18db      	adds	r3, r3, r3
 800994e:	b299      	uxth	r1, r3
 8009950:	1d3b      	adds	r3, r7, #4
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	4805      	ldr	r0, [pc, #20]	@ (800996c <sensirion_i2c_hal_write+0x3c>)
 8009958:	2464      	movs	r4, #100	@ 0x64
 800995a:	9400      	str	r4, [sp, #0]
 800995c:	f006 fd5a 	bl	8010414 <HAL_I2C_Master_Transmit>
 8009960:	0003      	movs	r3, r0
 8009962:	b25b      	sxtb	r3, r3
}
 8009964:	0018      	movs	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	b003      	add	sp, #12
 800996a:	bd90      	pop	{r4, r7, pc}
 800996c:	20000e40 	.word	0x20000e40

08009970 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	22fa      	movs	r2, #250	@ 0xfa
 800997c:	0091      	lsls	r1, r2, #2
 800997e:	0018      	movs	r0, r3
 8009980:	f7f6 fc10 	bl	80001a4 <__udivsi3>
 8009984:	0003      	movs	r3, r0
 8009986:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	22fa      	movs	r2, #250	@ 0xfa
 800998c:	0091      	lsls	r1, r2, #2
 800998e:	0018      	movs	r0, r3
 8009990:	f7f6 fc8e 	bl	80002b0 <__aeabi_uidivmod>
 8009994:	1e0b      	subs	r3, r1, #0
 8009996:	d002      	beq.n	800999e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	0018      	movs	r0, r3
 80099a2:	f005 f9e1 	bl	800ed68 <HAL_Delay>
}
 80099a6:	46c0      	nop			@ (mov r8, r8)
 80099a8:	46bd      	mov	sp, r7
 80099aa:	b004      	add	sp, #16
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80099ba:	1d3b      	adds	r3, r7, #4
 80099bc:	0018      	movs	r0, r3
 80099be:	f000 fcd9 	bl	800a374 <sen5x_read_device_status>
 80099c2:	1e03      	subs	r3, r0, #0
 80099c4:	d007      	beq.n	80099d6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 80099c6:	4a28      	ldr	r2, [pc, #160]	@ (8009a68 <sen5x_check_for_errors+0xb8>)
 80099c8:	4b28      	ldr	r3, [pc, #160]	@ (8009a6c <sen5x_check_for_errors+0xbc>)
 80099ca:	0019      	movs	r1, r3
 80099cc:	2001      	movs	r0, #1
 80099ce:	f004 fd7b 	bl	800e4c8 <CreateLine>
    return 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e043      	b.n	8009a5e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <sen5x_check_for_errors+0x30>
    return 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	e03e      	b.n	8009a5e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	2380      	movs	r3, #128	@ 0x80
 80099e4:	039b      	lsls	r3, r3, #14
 80099e6:	4013      	ands	r3, r2
 80099e8:	d005      	beq.n	80099f6 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80099ea:	4a21      	ldr	r2, [pc, #132]	@ (8009a70 <sen5x_check_for_errors+0xc0>)
 80099ec:	4b21      	ldr	r3, [pc, #132]	@ (8009a74 <sen5x_check_for_errors+0xc4>)
 80099ee:	0019      	movs	r1, r3
 80099f0:	2003      	movs	r0, #3
 80099f2:	f004 fd69 	bl	800e4c8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	2380      	movs	r3, #128	@ 0x80
 80099fa:	031b      	lsls	r3, r3, #12
 80099fc:	4013      	ands	r3, r2
 80099fe:	d005      	beq.n	8009a0c <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009a00:	4a1d      	ldr	r2, [pc, #116]	@ (8009a78 <sen5x_check_for_errors+0xc8>)
 8009a02:	4b1c      	ldr	r3, [pc, #112]	@ (8009a74 <sen5x_check_for_errors+0xc4>)
 8009a04:	0019      	movs	r1, r3
 8009a06:	2003      	movs	r0, #3
 8009a08:	f004 fd5e 	bl	800e4c8 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2280      	movs	r2, #128	@ 0x80
 8009a10:	4013      	ands	r3, r2
 8009a12:	d005      	beq.n	8009a20 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009a14:	4a19      	ldr	r2, [pc, #100]	@ (8009a7c <sen5x_check_for_errors+0xcc>)
 8009a16:	4b17      	ldr	r3, [pc, #92]	@ (8009a74 <sen5x_check_for_errors+0xc4>)
 8009a18:	0019      	movs	r1, r3
 8009a1a:	2003      	movs	r0, #3
 8009a1c:	f004 fd54 	bl	800e4c8 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2240      	movs	r2, #64	@ 0x40
 8009a24:	4013      	ands	r3, r2
 8009a26:	d005      	beq.n	8009a34 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009a28:	4a15      	ldr	r2, [pc, #84]	@ (8009a80 <sen5x_check_for_errors+0xd0>)
 8009a2a:	4b12      	ldr	r3, [pc, #72]	@ (8009a74 <sen5x_check_for_errors+0xc4>)
 8009a2c:	0019      	movs	r1, r3
 8009a2e:	2003      	movs	r0, #3
 8009a30:	f004 fd4a 	bl	800e4c8 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	4013      	ands	r3, r2
 8009a3a:	d005      	beq.n	8009a48 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009a3c:	4a11      	ldr	r2, [pc, #68]	@ (8009a84 <sen5x_check_for_errors+0xd4>)
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <sen5x_check_for_errors+0xc4>)
 8009a40:	0019      	movs	r1, r3
 8009a42:	2003      	movs	r0, #3
 8009a44:	f004 fd40 	bl	800e4c8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2210      	movs	r2, #16
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	d005      	beq.n	8009a5c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009a50:	4a0d      	ldr	r2, [pc, #52]	@ (8009a88 <sen5x_check_for_errors+0xd8>)
 8009a52:	4b08      	ldr	r3, [pc, #32]	@ (8009a74 <sen5x_check_for_errors+0xc4>)
 8009a54:	0019      	movs	r1, r3
 8009a56:	2003      	movs	r0, #3
 8009a58:	f004 fd36 	bl	800e4c8 <CreateLine>
  }
  return 1;
 8009a5c:	2301      	movs	r3, #1
}
 8009a5e:	0018      	movs	r0, r3
 8009a60:	46bd      	mov	sp, r7
 8009a62:	b002      	add	sp, #8
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	46c0      	nop			@ (mov r8, r8)
 8009a68:	08024a28 	.word	0x08024a28
 8009a6c:	08024624 	.word	0x08024624
 8009a70:	08024a54 	.word	0x08024a54
 8009a74:	080245a8 	.word	0x080245a8
 8009a78:	08024a74 	.word	0x08024a74
 8009a7c:	08024a90 	.word	0x08024a90
 8009a80:	08024ab4 	.word	0x08024ab4
 8009a84:	08024ad4 	.word	0x08024ad4
 8009a88:	08024ae8 	.word	0x08024ae8

08009a8c <set_light_on_state>:

void set_light_on_state(void) {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009a90:	4b15      	ldr	r3, [pc, #84]	@ (8009ae8 <set_light_on_state+0x5c>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2201      	movs	r2, #1
 8009a96:	4053      	eors	r3, r2
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d008      	beq.n	8009ab0 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009a9e:	f7ff fb4d 	bl	800913c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009aa2:	4a12      	ldr	r2, [pc, #72]	@ (8009aec <set_light_on_state+0x60>)
 8009aa4:	4b12      	ldr	r3, [pc, #72]	@ (8009af0 <set_light_on_state+0x64>)
 8009aa6:	0019      	movs	r1, r3
 8009aa8:	2003      	movs	r0, #3
 8009aaa:	f004 fd0d 	bl	800e4c8 <CreateLine>
 8009aae:	e00a      	b.n	8009ac6 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009ab0:	f005 f950 	bl	800ed54 <HAL_GetTick>
 8009ab4:	0002      	movs	r2, r0
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8009af4 <set_light_on_state+0x68>)
 8009ab8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009aba:	4a0f      	ldr	r2, [pc, #60]	@ (8009af8 <set_light_on_state+0x6c>)
 8009abc:	4b0c      	ldr	r3, [pc, #48]	@ (8009af0 <set_light_on_state+0x64>)
 8009abe:	0019      	movs	r1, r3
 8009ac0:	2003      	movs	r0, #3
 8009ac2:	f004 fd01 	bl	800e4c8 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009ac6:	f7ff fca7 	bl	8009418 <sen5x_lightup_measurement>
 8009aca:	1e03      	subs	r3, r0, #0
 8009acc:	d005      	beq.n	8009ada <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009ace:	4a0b      	ldr	r2, [pc, #44]	@ (8009afc <set_light_on_state+0x70>)
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b00 <set_light_on_state+0x74>)
 8009ad2:	0019      	movs	r1, r3
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	f004 fcf7 	bl	800e4c8 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009ada:	4b0a      	ldr	r3, [pc, #40]	@ (8009b04 <set_light_on_state+0x78>)
 8009adc:	2203      	movs	r2, #3
 8009ade:	701a      	strb	r2, [r3, #0]
}
 8009ae0:	46c0      	nop			@ (mov r8, r8)
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	46c0      	nop			@ (mov r8, r8)
 8009ae8:	2000105d 	.word	0x2000105d
 8009aec:	08024b24 	.word	0x08024b24
 8009af0:	080245a8 	.word	0x080245a8
 8009af4:	20001074 	.word	0x20001074
 8009af8:	08024b50 	.word	0x08024b50
 8009afc:	08024b68 	.word	0x08024b68
 8009b00:	08024624 	.word	0x08024624
 8009b04:	2000008d 	.word	0x2000008d

08009b08 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009b0e:	1dfb      	adds	r3, r7, #7
 8009b10:	2200      	movs	r2, #0
 8009b12:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009b14:	4b75      	ldr	r3, [pc, #468]	@ (8009cec <sen5x_statemachine+0x1e4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f004 fc7f 	bl	800e41c <TimestampIsReached>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d100      	bne.n	8009b24 <sen5x_statemachine+0x1c>
 8009b22:	e0df      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009b24:	4b72      	ldr	r3, [pc, #456]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b05      	cmp	r3, #5
 8009b2a:	d900      	bls.n	8009b2e <sen5x_statemachine+0x26>
 8009b2c:	e0da      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
 8009b2e:	009a      	lsls	r2, r3, #2
 8009b30:	4b70      	ldr	r3, [pc, #448]	@ (8009cf4 <sen5x_statemachine+0x1ec>)
 8009b32:	18d3      	adds	r3, r2, r3
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009b38:	4a6f      	ldr	r2, [pc, #444]	@ (8009cf8 <sen5x_statemachine+0x1f0>)
 8009b3a:	4b70      	ldr	r3, [pc, #448]	@ (8009cfc <sen5x_statemachine+0x1f4>)
 8009b3c:	0019      	movs	r1, r3
 8009b3e:	2001      	movs	r0, #1
 8009b40:	f004 fcc2 	bl	800e4c8 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009b44:	f005 f906 	bl	800ed54 <HAL_GetTick>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	4a6d      	ldr	r2, [pc, #436]	@ (8009d00 <sen5x_statemachine+0x1f8>)
 8009b4c:	189a      	adds	r2, r3, r2
 8009b4e:	4b67      	ldr	r3, [pc, #412]	@ (8009cec <sen5x_statemachine+0x1e4>)
 8009b50:	601a      	str	r2, [r3, #0]
      break;
 8009b52:	e0c7      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009b54:	f005 f8fe 	bl	800ed54 <HAL_GetTick>
 8009b58:	0003      	movs	r3, r0
 8009b5a:	4a6a      	ldr	r2, [pc, #424]	@ (8009d04 <sen5x_statemachine+0x1fc>)
 8009b5c:	189a      	adds	r2, r3, r2
 8009b5e:	4b63      	ldr	r3, [pc, #396]	@ (8009cec <sen5x_statemachine+0x1e4>)
 8009b60:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009b62:	f7ff ff93 	bl	8009a8c <set_light_on_state>
      break;
 8009b66:	e0bd      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009b68:	4b61      	ldr	r3, [pc, #388]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009b6e:	4b66      	ldr	r3, [pc, #408]	@ (8009d08 <sen5x_statemachine+0x200>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	d905      	bls.n	8009b82 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009b76:	4b5e      	ldr	r3, [pc, #376]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009b7c:	f7ff fafe 	bl	800917c <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009b80:	e0ad      	b.n	8009cde <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009b82:	f7ff ff15 	bl	80099b0 <sen5x_check_for_errors>
 8009b86:	1e03      	subs	r3, r0, #0
 8009b88:	d100      	bne.n	8009b8c <sen5x_statemachine+0x84>
 8009b8a:	e0a8      	b.n	8009cde <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009b8c:	f000 fc44 	bl	800a418 <sen5x_device_reset>
 8009b90:	1e03      	subs	r3, r0, #0
 8009b92:	d006      	beq.n	8009ba2 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009b94:	4a5d      	ldr	r2, [pc, #372]	@ (8009d0c <sen5x_statemachine+0x204>)
 8009b96:	4b59      	ldr	r3, [pc, #356]	@ (8009cfc <sen5x_statemachine+0x1f4>)
 8009b98:	0019      	movs	r1, r3
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	f004 fc94 	bl	800e4c8 <CreateLine>
 8009ba0:	e005      	b.n	8009bae <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8009d10 <sen5x_statemachine+0x208>)
 8009ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8009d14 <sen5x_statemachine+0x20c>)
 8009ba6:	0019      	movs	r1, r3
 8009ba8:	2002      	movs	r0, #2
 8009baa:	f004 fc8d 	bl	800e4c8 <CreateLine>
          sen5xErrors++;
 8009bae:	4b56      	ldr	r3, [pc, #344]	@ (8009d08 <sen5x_statemachine+0x200>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	4b54      	ldr	r3, [pc, #336]	@ (8009d08 <sen5x_statemachine+0x200>)
 8009bb8:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009bba:	f005 f8cb 	bl	800ed54 <HAL_GetTick>
 8009bbe:	0003      	movs	r3, r0
 8009bc0:	3396      	adds	r3, #150	@ 0x96
 8009bc2:	001a      	movs	r2, r3
 8009bc4:	4b49      	ldr	r3, [pc, #292]	@ (8009cec <sen5x_statemachine+0x1e4>)
 8009bc6:	601a      	str	r2, [r3, #0]
      break;
 8009bc8:	e089      	b.n	8009cde <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009bca:	1dfb      	adds	r3, r7, #7
 8009bcc:	0018      	movs	r0, r3
 8009bce:	f000 f93f 	bl	8009e50 <sen5x_read_data_ready>
      if (data_ready) {
 8009bd2:	1dfb      	adds	r3, r7, #7
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d028      	beq.n	8009c2c <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009bda:	f003 fc99 	bl	800d510 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009bde:	4b4e      	ldr	r3, [pc, #312]	@ (8009d18 <sen5x_statemachine+0x210>)
 8009be0:	0018      	movs	r0, r3
 8009be2:	f7ff fcbf 	bl	8009564 <sen5x_read_measurement>
 8009be6:	1e03      	subs	r3, r0, #0
 8009be8:	d005      	beq.n	8009bf6 <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009bea:	4a4c      	ldr	r2, [pc, #304]	@ (8009d1c <sen5x_statemachine+0x214>)
 8009bec:	4b43      	ldr	r3, [pc, #268]	@ (8009cfc <sen5x_statemachine+0x1f4>)
 8009bee:	0019      	movs	r1, r3
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	f004 fc69 	bl	800e4c8 <CreateLine>
        }
        sen5xSamples++;
 8009bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	4b48      	ldr	r3, [pc, #288]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009c00:	701a      	strb	r2, [r3, #0]
        sen5xStoreMax();
 8009c02:	f7ff fdfd 	bl	8009800 <sen5xStoreMax>
        if (sen5xSamples == 31) { // about two times a minute
 8009c06:	4b46      	ldr	r3, [pc, #280]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b1f      	cmp	r3, #31
 8009c0c:	d102      	bne.n	8009c14 <sen5x_statemachine+0x10c>
          sen5xSamples = 0;  // enable display on serial
 8009c0e:	4b44      	ldr	r3, [pc, #272]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009c14:	4b42      	ldr	r3, [pc, #264]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d901      	bls.n	8009c20 <sen5x_statemachine+0x118>
          sen5xStoreMax();
 8009c1c:	f7ff fdf0 	bl	8009800 <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009c20:	4b3f      	ldr	r3, [pc, #252]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d101      	bne.n	8009c2c <sen5x_statemachine+0x124>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009c28:	f7ff fcf8 	bl	800961c <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8009d24 <sen5x_statemachine+0x21c>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d103      	bne.n	8009c3c <sen5x_statemachine+0x134>
 8009c34:	4b3a      	ldr	r3, [pc, #232]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d952      	bls.n	8009ce2 <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009c3e:	2204      	movs	r2, #4
 8009c40:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009c42:	e04e      	b.n	8009ce2 <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009c44:	f7fc fede 	bl	8006a04 <RTC_GetWeekday>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d118      	bne.n	8009c80 <sen5x_statemachine+0x178>
 8009c4e:	4b36      	ldr	r3, [pc, #216]	@ (8009d28 <sen5x_statemachine+0x220>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2201      	movs	r2, #1
 8009c54:	4053      	eors	r3, r2
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d011      	beq.n	8009c80 <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009c5c:	f000 f9de 	bl	800a01c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009c60:	4a32      	ldr	r2, [pc, #200]	@ (8009d2c <sen5x_statemachine+0x224>)
 8009c62:	4b2c      	ldr	r3, [pc, #176]	@ (8009d14 <sen5x_statemachine+0x20c>)
 8009c64:	0019      	movs	r1, r3
 8009c66:	2002      	movs	r0, #2
 8009c68:	f004 fc2e 	bl	800e4c8 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009c6c:	f005 f872 	bl	800ed54 <HAL_GetTick>
 8009c70:	0003      	movs	r3, r0
 8009c72:	4a2f      	ldr	r2, [pc, #188]	@ (8009d30 <sen5x_statemachine+0x228>)
 8009c74:	189a      	adds	r2, r3, r2
 8009c76:	4b1d      	ldr	r3, [pc, #116]	@ (8009cec <sen5x_statemachine+0x1e4>)
 8009c78:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8009d28 <sen5x_statemachine+0x220>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009c80:	4b1b      	ldr	r3, [pc, #108]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009c82:	2205      	movs	r2, #5
 8009c84:	701a      	strb	r2, [r3, #0]
      break;
 8009c86:	e02d      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn) {
 8009c88:	4b26      	ldr	r3, [pc, #152]	@ (8009d24 <sen5x_statemachine+0x21c>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	4053      	eors	r3, r2
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d015      	beq.n	8009cc2 <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009c96:	f7ff fc0b 	bl	80094b0 <sen5x_extinguish_measurement>
 8009c9a:	1e03      	subs	r3, r0, #0
 8009c9c:	d005      	beq.n	8009caa <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009c9e:	4a25      	ldr	r2, [pc, #148]	@ (8009d34 <sen5x_statemachine+0x22c>)
 8009ca0:	4b16      	ldr	r3, [pc, #88]	@ (8009cfc <sen5x_statemachine+0x1f4>)
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	f004 fc0f 	bl	800e4c8 <CreateLine>
        }
        sen5xSamples = 0;
 8009caa:	4b1d      	ldr	r3, [pc, #116]	@ (8009d20 <sen5x_statemachine+0x218>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009cb0:	f7ff fa64 	bl	800917c <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	f7fe fbd1 	bl	800845c <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009cba:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	e002      	b.n	8009cc8 <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <sen5x_statemachine+0x1e8>)
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009cc8:	f003 fc48 	bl	800d55c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009ccc:	f005 f842 	bl	800ed54 <HAL_GetTick>
 8009cd0:	0003      	movs	r3, r0
 8009cd2:	22fa      	movs	r2, #250	@ 0xfa
 8009cd4:	0092      	lsls	r2, r2, #2
 8009cd6:	189a      	adds	r2, r3, r2
 8009cd8:	4b04      	ldr	r3, [pc, #16]	@ (8009cec <sen5x_statemachine+0x1e4>)
 8009cda:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009cdc:	e002      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
      break;
 8009cde:	46c0      	nop			@ (mov r8, r8)
 8009ce0:	e000      	b.n	8009ce4 <sen5x_statemachine+0x1dc>
      break;
 8009ce2:	46c0      	nop			@ (mov r8, r8)
}
 8009ce4:	46c0      	nop			@ (mov r8, r8)
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20001074 	.word	0x20001074
 8009cf0:	2000008d 	.word	0x2000008d
 8009cf4:	08025518 	.word	0x08025518
 8009cf8:	08024b94 	.word	0x08024b94
 8009cfc:	08024624 	.word	0x08024624
 8009d00:	002fefd8 	.word	0x002fefd8
 8009d04:	00005910 	.word	0x00005910
 8009d08:	20001069 	.word	0x20001069
 8009d0c:	08024bc4 	.word	0x08024bc4
 8009d10:	08024bdc 	.word	0x08024bdc
 8009d14:	08024568 	.word	0x08024568
 8009d18:	20001078 	.word	0x20001078
 8009d1c:	08024bf4 	.word	0x08024bf4
 8009d20:	20001068 	.word	0x20001068
 8009d24:	20001ff9 	.word	0x20001ff9
 8009d28:	2000105c 	.word	0x2000105c
 8009d2c:	08024c24 	.word	0x08024c24
 8009d30:	00002710 	.word	0x00002710
 8009d34:	08024c3c 	.word	0x08024c3c

08009d38 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d3e:	1dbb      	adds	r3, r7, #6
 8009d40:	2200      	movs	r2, #0
 8009d42:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009d44:	1dbc      	adds	r4, r7, #6
 8009d46:	1dbb      	adds	r3, r7, #6
 8009d48:	8819      	ldrh	r1, [r3, #0]
 8009d4a:	003b      	movs	r3, r7
 8009d4c:	2221      	movs	r2, #33	@ 0x21
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f001 fb56 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 8009d54:	0003      	movs	r3, r0
 8009d56:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d58:	1d3c      	adds	r4, r7, #4
 8009d5a:	1dbb      	adds	r3, r7, #6
 8009d5c:	881a      	ldrh	r2, [r3, #0]
 8009d5e:	003b      	movs	r3, r7
 8009d60:	0019      	movs	r1, r3
 8009d62:	2069      	movs	r0, #105	@ 0x69
 8009d64:	f001 fbd0 	bl	800b508 <sensirion_i2c_write_data>
 8009d68:	0003      	movs	r3, r0
 8009d6a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d6c:	1d3b      	adds	r3, r7, #4
 8009d6e:	2200      	movs	r2, #0
 8009d70:	5e9b      	ldrsh	r3, [r3, r2]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <sen5x_start_measurement+0x46>
        return error;
 8009d76:	1d3b      	adds	r3, r7, #4
 8009d78:	2200      	movs	r2, #0
 8009d7a:	5e9b      	ldrsh	r3, [r3, r2]
 8009d7c:	e004      	b.n	8009d88 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d7e:	4b04      	ldr	r3, [pc, #16]	@ (8009d90 <sen5x_start_measurement+0x58>)
 8009d80:	0018      	movs	r0, r3
 8009d82:	f7ff fdf5 	bl	8009970 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	0018      	movs	r0, r3
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	b003      	add	sp, #12
 8009d8e:	bd90      	pop	{r4, r7, pc}
 8009d90:	0000c350 	.word	0x0000c350

08009d94 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009d94:	b590      	push	{r4, r7, lr}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d9a:	1dbb      	adds	r3, r7, #6
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009da0:	1dbc      	adds	r4, r7, #6
 8009da2:	1dbb      	adds	r3, r7, #6
 8009da4:	8819      	ldrh	r1, [r3, #0]
 8009da6:	003b      	movs	r3, r7
 8009da8:	2237      	movs	r2, #55	@ 0x37
 8009daa:	0018      	movs	r0, r3
 8009dac:	f001 fb28 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 8009db0:	0003      	movs	r3, r0
 8009db2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009db4:	1d3c      	adds	r4, r7, #4
 8009db6:	1dbb      	adds	r3, r7, #6
 8009db8:	881a      	ldrh	r2, [r3, #0]
 8009dba:	003b      	movs	r3, r7
 8009dbc:	0019      	movs	r1, r3
 8009dbe:	2069      	movs	r0, #105	@ 0x69
 8009dc0:	f001 fba2 	bl	800b508 <sensirion_i2c_write_data>
 8009dc4:	0003      	movs	r3, r0
 8009dc6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	2200      	movs	r2, #0
 8009dcc:	5e9b      	ldrsh	r3, [r3, r2]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009dd2:	1d3b      	adds	r3, r7, #4
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	5e9b      	ldrsh	r3, [r3, r2]
 8009dd8:	e004      	b.n	8009de4 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009dda:	4b04      	ldr	r3, [pc, #16]	@ (8009dec <sen5x_start_measurement_without_pm+0x58>)
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f7ff fdc7 	bl	8009970 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	0018      	movs	r0, r3
 8009de6:	46bd      	mov	sp, r7
 8009de8:	b003      	add	sp, #12
 8009dea:	bd90      	pop	{r4, r7, pc}
 8009dec:	0000c350 	.word	0x0000c350

08009df0 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009df0:	b590      	push	{r4, r7, lr}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009df6:	1dbb      	adds	r3, r7, #6
 8009df8:	2200      	movs	r2, #0
 8009dfa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009dfc:	1dbc      	adds	r4, r7, #6
 8009dfe:	2382      	movs	r3, #130	@ 0x82
 8009e00:	005a      	lsls	r2, r3, #1
 8009e02:	1dbb      	adds	r3, r7, #6
 8009e04:	8819      	ldrh	r1, [r3, #0]
 8009e06:	003b      	movs	r3, r7
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f001 faf9 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e12:	1d3c      	adds	r4, r7, #4
 8009e14:	1dbb      	adds	r3, r7, #6
 8009e16:	881a      	ldrh	r2, [r3, #0]
 8009e18:	003b      	movs	r3, r7
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	2069      	movs	r0, #105	@ 0x69
 8009e1e:	f001 fb73 	bl	800b508 <sensirion_i2c_write_data>
 8009e22:	0003      	movs	r3, r0
 8009e24:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e26:	1d3b      	adds	r3, r7, #4
 8009e28:	2200      	movs	r2, #0
 8009e2a:	5e9b      	ldrsh	r3, [r3, r2]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <sen5x_stop_measurement+0x48>
        return error;
 8009e30:	1d3b      	adds	r3, r7, #4
 8009e32:	2200      	movs	r2, #0
 8009e34:	5e9b      	ldrsh	r3, [r3, r2]
 8009e36:	e004      	b.n	8009e42 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <sen5x_stop_measurement+0x5c>)
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f7ff fd98 	bl	8009970 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	0018      	movs	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	b003      	add	sp, #12
 8009e48:	bd90      	pop	{r4, r7, pc}
 8009e4a:	46c0      	nop			@ (mov r8, r8)
 8009e4c:	00030d40 	.word	0x00030d40

08009e50 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009e58:	250e      	movs	r5, #14
 8009e5a:	197b      	adds	r3, r7, r5
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009e60:	197c      	adds	r4, r7, r5
 8009e62:	4a22      	ldr	r2, [pc, #136]	@ (8009eec <sen5x_read_data_ready+0x9c>)
 8009e64:	197b      	adds	r3, r7, r5
 8009e66:	8819      	ldrh	r1, [r3, #0]
 8009e68:	2308      	movs	r3, #8
 8009e6a:	18fb      	adds	r3, r7, r3
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f001 fac7 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 8009e72:	0003      	movs	r3, r0
 8009e74:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e76:	260c      	movs	r6, #12
 8009e78:	19bc      	adds	r4, r7, r6
 8009e7a:	197b      	adds	r3, r7, r5
 8009e7c:	881a      	ldrh	r2, [r3, #0]
 8009e7e:	2308      	movs	r3, #8
 8009e80:	18fb      	adds	r3, r7, r3
 8009e82:	0019      	movs	r1, r3
 8009e84:	2069      	movs	r0, #105	@ 0x69
 8009e86:	f001 fb3f 	bl	800b508 <sensirion_i2c_write_data>
 8009e8a:	0003      	movs	r3, r0
 8009e8c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e8e:	19bb      	adds	r3, r7, r6
 8009e90:	2200      	movs	r2, #0
 8009e92:	5e9b      	ldrsh	r3, [r3, r2]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <sen5x_read_data_ready+0x50>
        return error;
 8009e98:	19bb      	adds	r3, r7, r6
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	5e9b      	ldrsh	r3, [r3, r2]
 8009e9e:	e020      	b.n	8009ee2 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009ea0:	4b13      	ldr	r3, [pc, #76]	@ (8009ef0 <sen5x_read_data_ready+0xa0>)
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f7ff fd64 	bl	8009970 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009ea8:	250c      	movs	r5, #12
 8009eaa:	197c      	adds	r4, r7, r5
 8009eac:	2308      	movs	r3, #8
 8009eae:	18fb      	adds	r3, r7, r3
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	2069      	movs	r0, #105	@ 0x69
 8009eb6:	f001 fb3f 	bl	800b538 <sensirion_i2c_read_data_inplace>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ebe:	197b      	adds	r3, r7, r5
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <sen5x_read_data_ready+0x80>
        return error;
 8009ec8:	197b      	adds	r3, r7, r5
 8009eca:	2200      	movs	r2, #0
 8009ecc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ece:	e008      	b.n	8009ee2 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	18fb      	adds	r3, r7, r3
 8009ed4:	785b      	ldrb	r3, [r3, #1]
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	4193      	sbcs	r3, r2
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b005      	add	sp, #20
 8009ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eea:	46c0      	nop			@ (mov r8, r8)
 8009eec:	00000202 	.word	0x00000202
 8009ef0:	00004e20 	.word	0x00004e20

08009ef4 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	b08d      	sub	sp, #52	@ 0x34
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009f02:	252e      	movs	r5, #46	@ 0x2e
 8009f04:	197b      	adds	r3, r7, r5
 8009f06:	2200      	movs	r2, #0
 8009f08:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009f0a:	197c      	adds	r4, r7, r5
 8009f0c:	23f1      	movs	r3, #241	@ 0xf1
 8009f0e:	009a      	lsls	r2, r3, #2
 8009f10:	197b      	adds	r3, r7, r5
 8009f12:	8819      	ldrh	r1, [r3, #0]
 8009f14:	2314      	movs	r3, #20
 8009f16:	18fb      	adds	r3, r7, r3
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f001 fa71 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 8009f1e:	0003      	movs	r3, r0
 8009f20:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f22:	262c      	movs	r6, #44	@ 0x2c
 8009f24:	19bc      	adds	r4, r7, r6
 8009f26:	197b      	adds	r3, r7, r5
 8009f28:	881a      	ldrh	r2, [r3, #0]
 8009f2a:	2314      	movs	r3, #20
 8009f2c:	18fb      	adds	r3, r7, r3
 8009f2e:	0019      	movs	r1, r3
 8009f30:	2069      	movs	r0, #105	@ 0x69
 8009f32:	f001 fae9 	bl	800b508 <sensirion_i2c_write_data>
 8009f36:	0003      	movs	r3, r0
 8009f38:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f3a:	19bb      	adds	r3, r7, r6
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <sen5x_read_measured_values+0x58>
        return error;
 8009f44:	19bb      	adds	r3, r7, r6
 8009f46:	2200      	movs	r2, #0
 8009f48:	5e9b      	ldrsh	r3, [r3, r2]
 8009f4a:	e060      	b.n	800a00e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009f4c:	4b32      	ldr	r3, [pc, #200]	@ (800a018 <sen5x_read_measured_values+0x124>)
 8009f4e:	0018      	movs	r0, r3
 8009f50:	f7ff fd0e 	bl	8009970 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009f54:	252c      	movs	r5, #44	@ 0x2c
 8009f56:	197c      	adds	r4, r7, r5
 8009f58:	2314      	movs	r3, #20
 8009f5a:	18fb      	adds	r3, r7, r3
 8009f5c:	2210      	movs	r2, #16
 8009f5e:	0019      	movs	r1, r3
 8009f60:	2069      	movs	r0, #105	@ 0x69
 8009f62:	f001 fae9 	bl	800b538 <sensirion_i2c_read_data_inplace>
 8009f66:	0003      	movs	r3, r0
 8009f68:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f6a:	197b      	adds	r3, r7, r5
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d003      	beq.n	8009f7c <sen5x_read_measured_values+0x88>
        return error;
 8009f74:	197b      	adds	r3, r7, r5
 8009f76:	2200      	movs	r2, #0
 8009f78:	5e9b      	ldrsh	r3, [r3, r2]
 8009f7a:	e048      	b.n	800a00e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009f7c:	2414      	movs	r4, #20
 8009f7e:	193b      	adds	r3, r7, r4
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 fa79 	bl	800a478 <sensirion_common_bytes_to_uint16_t>
 8009f86:	0003      	movs	r3, r0
 8009f88:	001a      	movs	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009f8e:	193b      	adds	r3, r7, r4
 8009f90:	3302      	adds	r3, #2
 8009f92:	0018      	movs	r0, r3
 8009f94:	f000 fa70 	bl	800a478 <sensirion_common_bytes_to_uint16_t>
 8009f98:	0003      	movs	r3, r0
 8009f9a:	001a      	movs	r2, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009fa0:	193b      	adds	r3, r7, r4
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f000 fa67 	bl	800a478 <sensirion_common_bytes_to_uint16_t>
 8009faa:	0003      	movs	r3, r0
 8009fac:	001a      	movs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009fb2:	193b      	adds	r3, r7, r4
 8009fb4:	3306      	adds	r3, #6
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f000 fa5e 	bl	800a478 <sensirion_common_bytes_to_uint16_t>
 8009fbc:	0003      	movs	r3, r0
 8009fbe:	001a      	movs	r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009fc4:	193b      	adds	r3, r7, r4
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f000 fa81 	bl	800a4d0 <sensirion_common_bytes_to_int16_t>
 8009fce:	0003      	movs	r3, r0
 8009fd0:	001a      	movs	r2, r3
 8009fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fd4:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009fd6:	193b      	adds	r3, r7, r4
 8009fd8:	330a      	adds	r3, #10
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f000 fa78 	bl	800a4d0 <sensirion_common_bytes_to_int16_t>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	001a      	movs	r2, r3
 8009fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe6:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009fe8:	193b      	adds	r3, r7, r4
 8009fea:	330c      	adds	r3, #12
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 fa6f 	bl	800a4d0 <sensirion_common_bytes_to_int16_t>
 8009ff2:	0003      	movs	r3, r0
 8009ff4:	001a      	movs	r2, r3
 8009ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff8:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009ffa:	193b      	adds	r3, r7, r4
 8009ffc:	330e      	adds	r3, #14
 8009ffe:	0018      	movs	r0, r3
 800a000:	f000 fa66 	bl	800a4d0 <sensirion_common_bytes_to_int16_t>
 800a004:	0003      	movs	r3, r0
 800a006:	001a      	movs	r2, r3
 800a008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a00a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	0018      	movs	r0, r3
 800a010:	46bd      	mov	sp, r7
 800a012:	b00d      	add	sp, #52	@ 0x34
 800a014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a016:	46c0      	nop			@ (mov r8, r8)
 800a018:	00004e20 	.word	0x00004e20

0800a01c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a01c:	b590      	push	{r4, r7, lr}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a022:	1dbb      	adds	r3, r7, #6
 800a024:	2200      	movs	r2, #0
 800a026:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a028:	1dbc      	adds	r4, r7, #6
 800a02a:	4a12      	ldr	r2, [pc, #72]	@ (800a074 <sen5x_start_fan_cleaning+0x58>)
 800a02c:	1dbb      	adds	r3, r7, #6
 800a02e:	8819      	ldrh	r1, [r3, #0]
 800a030:	003b      	movs	r3, r7
 800a032:	0018      	movs	r0, r3
 800a034:	f001 f9e4 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a038:	0003      	movs	r3, r0
 800a03a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a03c:	1d3c      	adds	r4, r7, #4
 800a03e:	1dbb      	adds	r3, r7, #6
 800a040:	881a      	ldrh	r2, [r3, #0]
 800a042:	003b      	movs	r3, r7
 800a044:	0019      	movs	r1, r3
 800a046:	2069      	movs	r0, #105	@ 0x69
 800a048:	f001 fa5e 	bl	800b508 <sensirion_i2c_write_data>
 800a04c:	0003      	movs	r3, r0
 800a04e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a050:	1d3b      	adds	r3, r7, #4
 800a052:	2200      	movs	r2, #0
 800a054:	5e9b      	ldrsh	r3, [r3, r2]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <sen5x_start_fan_cleaning+0x46>
        return error;
 800a05a:	1d3b      	adds	r3, r7, #4
 800a05c:	2200      	movs	r2, #0
 800a05e:	5e9b      	ldrsh	r3, [r3, r2]
 800a060:	e004      	b.n	800a06c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a062:	4b05      	ldr	r3, [pc, #20]	@ (800a078 <sen5x_start_fan_cleaning+0x5c>)
 800a064:	0018      	movs	r0, r3
 800a066:	f7ff fc83 	bl	8009970 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	0018      	movs	r0, r3
 800a06e:	46bd      	mov	sp, r7
 800a070:	b003      	add	sp, #12
 800a072:	bd90      	pop	{r4, r7, pc}
 800a074:	00005607 	.word	0x00005607
 800a078:	00004e20 	.word	0x00004e20

0800a07c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	0004      	movs	r4, r0
 800a084:	0008      	movs	r0, r1
 800a086:	0011      	movs	r1, r2
 800a088:	1dbb      	adds	r3, r7, #6
 800a08a:	1c22      	adds	r2, r4, #0
 800a08c:	801a      	strh	r2, [r3, #0]
 800a08e:	1d3b      	adds	r3, r7, #4
 800a090:	1c02      	adds	r2, r0, #0
 800a092:	801a      	strh	r2, [r3, #0]
 800a094:	1cbb      	adds	r3, r7, #2
 800a096:	1c0a      	adds	r2, r1, #0
 800a098:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a09a:	2516      	movs	r5, #22
 800a09c:	197b      	adds	r3, r7, r5
 800a09e:	2200      	movs	r2, #0
 800a0a0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a0a2:	197c      	adds	r4, r7, r5
 800a0a4:	4a25      	ldr	r2, [pc, #148]	@ (800a13c <sen5x_set_temperature_offset_parameters+0xc0>)
 800a0a6:	197b      	adds	r3, r7, r5
 800a0a8:	8819      	ldrh	r1, [r3, #0]
 800a0aa:	2608      	movs	r6, #8
 800a0ac:	19bb      	adds	r3, r7, r6
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f001 f9a6 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a0b4:	0003      	movs	r3, r0
 800a0b6:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a0b8:	197c      	adds	r4, r7, r5
 800a0ba:	1dbb      	adds	r3, r7, #6
 800a0bc:	2200      	movs	r2, #0
 800a0be:	5e9a      	ldrsh	r2, [r3, r2]
 800a0c0:	197b      	adds	r3, r7, r5
 800a0c2:	8819      	ldrh	r1, [r3, #0]
 800a0c4:	19bb      	adds	r3, r7, r6
 800a0c6:	0018      	movs	r0, r3
 800a0c8:	f001 fa05 	bl	800b4d6 <sensirion_i2c_add_int16_t_to_buffer>
 800a0cc:	0003      	movs	r3, r0
 800a0ce:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a0d0:	197c      	adds	r4, r7, r5
 800a0d2:	1d3b      	adds	r3, r7, #4
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	5e9a      	ldrsh	r2, [r3, r2]
 800a0d8:	197b      	adds	r3, r7, r5
 800a0da:	8819      	ldrh	r1, [r3, #0]
 800a0dc:	19bb      	adds	r3, r7, r6
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f001 f9f9 	bl	800b4d6 <sensirion_i2c_add_int16_t_to_buffer>
 800a0e4:	0003      	movs	r3, r0
 800a0e6:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a0e8:	197c      	adds	r4, r7, r5
 800a0ea:	1cbb      	adds	r3, r7, #2
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	197b      	adds	r3, r7, r5
 800a0f0:	8819      	ldrh	r1, [r3, #0]
 800a0f2:	19bb      	adds	r3, r7, r6
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f001 f9af 	bl	800b458 <sensirion_i2c_add_uint16_t_to_buffer>
 800a0fa:	0003      	movs	r3, r0
 800a0fc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a0fe:	2214      	movs	r2, #20
 800a100:	18bc      	adds	r4, r7, r2
 800a102:	197b      	adds	r3, r7, r5
 800a104:	881a      	ldrh	r2, [r3, #0]
 800a106:	19bb      	adds	r3, r7, r6
 800a108:	0019      	movs	r1, r3
 800a10a:	2069      	movs	r0, #105	@ 0x69
 800a10c:	f001 f9fc 	bl	800b508 <sensirion_i2c_write_data>
 800a110:	0003      	movs	r3, r0
 800a112:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a114:	2214      	movs	r2, #20
 800a116:	18bb      	adds	r3, r7, r2
 800a118:	2100      	movs	r1, #0
 800a11a:	5e5b      	ldrsh	r3, [r3, r1]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a120:	18bb      	adds	r3, r7, r2
 800a122:	2200      	movs	r2, #0
 800a124:	5e9b      	ldrsh	r3, [r3, r2]
 800a126:	e004      	b.n	800a132 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7ff fc20 	bl	8009970 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a130:	2300      	movs	r3, #0
}
 800a132:	0018      	movs	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	b007      	add	sp, #28
 800a138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	000060b2 	.word	0x000060b2
 800a140:	00004e20 	.word	0x00004e20

0800a144 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	b091      	sub	sp, #68	@ 0x44
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	000a      	movs	r2, r1
 800a14e:	1cfb      	adds	r3, r7, #3
 800a150:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a152:	253e      	movs	r5, #62	@ 0x3e
 800a154:	197b      	adds	r3, r7, r5
 800a156:	2200      	movs	r2, #0
 800a158:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a15a:	197c      	adds	r4, r7, r5
 800a15c:	4a22      	ldr	r2, [pc, #136]	@ (800a1e8 <sen5x_get_product_name+0xa4>)
 800a15e:	197b      	adds	r3, r7, r5
 800a160:	8819      	ldrh	r1, [r3, #0]
 800a162:	230c      	movs	r3, #12
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	0018      	movs	r0, r3
 800a168:	f001 f94a 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a16c:	0003      	movs	r3, r0
 800a16e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a170:	263c      	movs	r6, #60	@ 0x3c
 800a172:	19bc      	adds	r4, r7, r6
 800a174:	197b      	adds	r3, r7, r5
 800a176:	881a      	ldrh	r2, [r3, #0]
 800a178:	230c      	movs	r3, #12
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	0019      	movs	r1, r3
 800a17e:	2069      	movs	r0, #105	@ 0x69
 800a180:	f001 f9c2 	bl	800b508 <sensirion_i2c_write_data>
 800a184:	0003      	movs	r3, r0
 800a186:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a188:	19bb      	adds	r3, r7, r6
 800a18a:	2200      	movs	r2, #0
 800a18c:	5e9b      	ldrsh	r3, [r3, r2]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <sen5x_get_product_name+0x56>
        return error;
 800a192:	19bb      	adds	r3, r7, r6
 800a194:	2200      	movs	r2, #0
 800a196:	5e9b      	ldrsh	r3, [r3, r2]
 800a198:	e021      	b.n	800a1de <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a19a:	4b14      	ldr	r3, [pc, #80]	@ (800a1ec <sen5x_get_product_name+0xa8>)
 800a19c:	0018      	movs	r0, r3
 800a19e:	f7ff fbe7 	bl	8009970 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a1a2:	253c      	movs	r5, #60	@ 0x3c
 800a1a4:	197c      	adds	r4, r7, r5
 800a1a6:	230c      	movs	r3, #12
 800a1a8:	18fb      	adds	r3, r7, r3
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	0019      	movs	r1, r3
 800a1ae:	2069      	movs	r0, #105	@ 0x69
 800a1b0:	f001 f9c2 	bl	800b538 <sensirion_i2c_read_data_inplace>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1b8:	197b      	adds	r3, r7, r5
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <sen5x_get_product_name+0x86>
        return error;
 800a1c2:	197b      	adds	r3, r7, r5
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1c8:	e009      	b.n	800a1de <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a1ca:	1cfb      	adds	r3, r7, #3
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	18fb      	adds	r3, r7, r3
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f000 f988 	bl	800a4ec <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	0018      	movs	r0, r3
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	b011      	add	sp, #68	@ 0x44
 800a1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1e6:	46c0      	nop			@ (mov r8, r8)
 800a1e8:	0000d014 	.word	0x0000d014
 800a1ec:	0000c350 	.word	0x0000c350

0800a1f0 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f2:	b091      	sub	sp, #68	@ 0x44
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	000a      	movs	r2, r1
 800a1fa:	1cfb      	adds	r3, r7, #3
 800a1fc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a1fe:	253e      	movs	r5, #62	@ 0x3e
 800a200:	197b      	adds	r3, r7, r5
 800a202:	2200      	movs	r2, #0
 800a204:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a206:	197c      	adds	r4, r7, r5
 800a208:	4a22      	ldr	r2, [pc, #136]	@ (800a294 <sen5x_get_serial_number+0xa4>)
 800a20a:	197b      	adds	r3, r7, r5
 800a20c:	8819      	ldrh	r1, [r3, #0]
 800a20e:	230c      	movs	r3, #12
 800a210:	18fb      	adds	r3, r7, r3
 800a212:	0018      	movs	r0, r3
 800a214:	f001 f8f4 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a218:	0003      	movs	r3, r0
 800a21a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a21c:	263c      	movs	r6, #60	@ 0x3c
 800a21e:	19bc      	adds	r4, r7, r6
 800a220:	197b      	adds	r3, r7, r5
 800a222:	881a      	ldrh	r2, [r3, #0]
 800a224:	230c      	movs	r3, #12
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	0019      	movs	r1, r3
 800a22a:	2069      	movs	r0, #105	@ 0x69
 800a22c:	f001 f96c 	bl	800b508 <sensirion_i2c_write_data>
 800a230:	0003      	movs	r3, r0
 800a232:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a234:	19bb      	adds	r3, r7, r6
 800a236:	2200      	movs	r2, #0
 800a238:	5e9b      	ldrsh	r3, [r3, r2]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <sen5x_get_serial_number+0x56>
        return error;
 800a23e:	19bb      	adds	r3, r7, r6
 800a240:	2200      	movs	r2, #0
 800a242:	5e9b      	ldrsh	r3, [r3, r2]
 800a244:	e021      	b.n	800a28a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a246:	4b14      	ldr	r3, [pc, #80]	@ (800a298 <sen5x_get_serial_number+0xa8>)
 800a248:	0018      	movs	r0, r3
 800a24a:	f7ff fb91 	bl	8009970 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a24e:	253c      	movs	r5, #60	@ 0x3c
 800a250:	197c      	adds	r4, r7, r5
 800a252:	230c      	movs	r3, #12
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	2220      	movs	r2, #32
 800a258:	0019      	movs	r1, r3
 800a25a:	2069      	movs	r0, #105	@ 0x69
 800a25c:	f001 f96c 	bl	800b538 <sensirion_i2c_read_data_inplace>
 800a260:	0003      	movs	r3, r0
 800a262:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a264:	197b      	adds	r3, r7, r5
 800a266:	2200      	movs	r2, #0
 800a268:	5e9b      	ldrsh	r3, [r3, r2]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <sen5x_get_serial_number+0x86>
        return error;
 800a26e:	197b      	adds	r3, r7, r5
 800a270:	2200      	movs	r2, #0
 800a272:	5e9b      	ldrsh	r3, [r3, r2]
 800a274:	e009      	b.n	800a28a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a276:	1cfb      	adds	r3, r7, #3
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	230c      	movs	r3, #12
 800a280:	18fb      	adds	r3, r7, r3
 800a282:	0018      	movs	r0, r3
 800a284:	f000 f932 	bl	800a4ec <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	0018      	movs	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b011      	add	sp, #68	@ 0x44
 800a290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a292:	46c0      	nop			@ (mov r8, r8)
 800a294:	0000d033 	.word	0x0000d033
 800a298:	0000c350 	.word	0x0000c350

0800a29c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a29e:	b089      	sub	sp, #36	@ 0x24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a2aa:	251e      	movs	r5, #30
 800a2ac:	197b      	adds	r3, r7, r5
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a2b2:	197c      	adds	r4, r7, r5
 800a2b4:	23d1      	movs	r3, #209	@ 0xd1
 800a2b6:	021a      	lsls	r2, r3, #8
 800a2b8:	197b      	adds	r3, r7, r5
 800a2ba:	8819      	ldrh	r1, [r3, #0]
 800a2bc:	2310      	movs	r3, #16
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f001 f89d 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2ca:	261c      	movs	r6, #28
 800a2cc:	19bc      	adds	r4, r7, r6
 800a2ce:	197b      	adds	r3, r7, r5
 800a2d0:	881a      	ldrh	r2, [r3, #0]
 800a2d2:	2310      	movs	r3, #16
 800a2d4:	18fb      	adds	r3, r7, r3
 800a2d6:	0019      	movs	r1, r3
 800a2d8:	2069      	movs	r0, #105	@ 0x69
 800a2da:	f001 f915 	bl	800b508 <sensirion_i2c_write_data>
 800a2de:	0003      	movs	r3, r0
 800a2e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2e2:	19bb      	adds	r3, r7, r6
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	5e9b      	ldrsh	r3, [r3, r2]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <sen5x_get_version+0x58>
        return error;
 800a2ec:	19bb      	adds	r3, r7, r6
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	5e9b      	ldrsh	r3, [r3, r2]
 800a2f2:	e038      	b.n	800a366 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a2f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a370 <sen5x_get_version+0xd4>)
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f7ff fb3a 	bl	8009970 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a2fc:	251c      	movs	r5, #28
 800a2fe:	197c      	adds	r4, r7, r5
 800a300:	2310      	movs	r3, #16
 800a302:	18fb      	adds	r3, r7, r3
 800a304:	2208      	movs	r2, #8
 800a306:	0019      	movs	r1, r3
 800a308:	2069      	movs	r0, #105	@ 0x69
 800a30a:	f001 f915 	bl	800b538 <sensirion_i2c_read_data_inplace>
 800a30e:	0003      	movs	r3, r0
 800a310:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a312:	197b      	adds	r3, r7, r5
 800a314:	2200      	movs	r2, #0
 800a316:	5e9b      	ldrsh	r3, [r3, r2]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <sen5x_get_version+0x88>
        return error;
 800a31c:	197b      	adds	r3, r7, r5
 800a31e:	2200      	movs	r2, #0
 800a320:	5e9b      	ldrsh	r3, [r3, r2]
 800a322:	e020      	b.n	800a366 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a324:	2110      	movs	r1, #16
 800a326:	187b      	adds	r3, r7, r1
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a32e:	187b      	adds	r3, r7, r1
 800a330:	785a      	ldrb	r2, [r3, #1]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a336:	187b      	adds	r3, r7, r1
 800a338:	789b      	ldrb	r3, [r3, #2]
 800a33a:	1e5a      	subs	r2, r3, #1
 800a33c:	4193      	sbcs	r3, r2
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a344:	187b      	adds	r3, r7, r1
 800a346:	78da      	ldrb	r2, [r3, #3]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a34c:	187b      	adds	r3, r7, r1
 800a34e:	791a      	ldrb	r2, [r3, #4]
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a354:	187b      	adds	r3, r7, r1
 800a356:	795a      	ldrb	r2, [r3, #5]
 800a358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a35c:	187b      	adds	r3, r7, r1
 800a35e:	799a      	ldrb	r2, [r3, #6]
 800a360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a362:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a364:	2300      	movs	r3, #0
}
 800a366:	0018      	movs	r0, r3
 800a368:	46bd      	mov	sp, r7
 800a36a:	b009      	add	sp, #36	@ 0x24
 800a36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36e:	46c0      	nop			@ (mov r8, r8)
 800a370:	00004e20 	.word	0x00004e20

0800a374 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a37c:	2516      	movs	r5, #22
 800a37e:	197b      	adds	r3, r7, r5
 800a380:	2200      	movs	r2, #0
 800a382:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a384:	197c      	adds	r4, r7, r5
 800a386:	4a22      	ldr	r2, [pc, #136]	@ (800a410 <sen5x_read_device_status+0x9c>)
 800a388:	197b      	adds	r3, r7, r5
 800a38a:	8819      	ldrh	r1, [r3, #0]
 800a38c:	230c      	movs	r3, #12
 800a38e:	18fb      	adds	r3, r7, r3
 800a390:	0018      	movs	r0, r3
 800a392:	f001 f835 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a396:	0003      	movs	r3, r0
 800a398:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a39a:	2614      	movs	r6, #20
 800a39c:	19bc      	adds	r4, r7, r6
 800a39e:	197b      	adds	r3, r7, r5
 800a3a0:	881a      	ldrh	r2, [r3, #0]
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	18fb      	adds	r3, r7, r3
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	2069      	movs	r0, #105	@ 0x69
 800a3aa:	f001 f8ad 	bl	800b508 <sensirion_i2c_write_data>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3b2:	19bb      	adds	r3, r7, r6
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	5e9b      	ldrsh	r3, [r3, r2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <sen5x_read_device_status+0x50>
        return error;
 800a3bc:	19bb      	adds	r3, r7, r6
 800a3be:	2200      	movs	r2, #0
 800a3c0:	5e9b      	ldrsh	r3, [r3, r2]
 800a3c2:	e020      	b.n	800a406 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a3c4:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <sen5x_read_device_status+0xa0>)
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f7ff fad2 	bl	8009970 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a3cc:	2514      	movs	r5, #20
 800a3ce:	197c      	adds	r4, r7, r5
 800a3d0:	230c      	movs	r3, #12
 800a3d2:	18fb      	adds	r3, r7, r3
 800a3d4:	2204      	movs	r2, #4
 800a3d6:	0019      	movs	r1, r3
 800a3d8:	2069      	movs	r0, #105	@ 0x69
 800a3da:	f001 f8ad 	bl	800b538 <sensirion_i2c_read_data_inplace>
 800a3de:	0003      	movs	r3, r0
 800a3e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3e2:	197b      	adds	r3, r7, r5
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	5e9b      	ldrsh	r3, [r3, r2]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <sen5x_read_device_status+0x80>
        return error;
 800a3ec:	197b      	adds	r3, r7, r5
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	5e9b      	ldrsh	r3, [r3, r2]
 800a3f2:	e008      	b.n	800a406 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a3f4:	230c      	movs	r3, #12
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f000 f850 	bl	800a49e <sensirion_common_bytes_to_uint32_t>
 800a3fe:	0002      	movs	r2, r0
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a404:	2300      	movs	r3, #0
}
 800a406:	0018      	movs	r0, r3
 800a408:	46bd      	mov	sp, r7
 800a40a:	b007      	add	sp, #28
 800a40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40e:	46c0      	nop			@ (mov r8, r8)
 800a410:	0000d206 	.word	0x0000d206
 800a414:	00004e20 	.word	0x00004e20

0800a418 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a418:	b590      	push	{r4, r7, lr}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a41e:	1dbb      	adds	r3, r7, #6
 800a420:	2200      	movs	r2, #0
 800a422:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a424:	1dbc      	adds	r4, r7, #6
 800a426:	4a12      	ldr	r2, [pc, #72]	@ (800a470 <sen5x_device_reset+0x58>)
 800a428:	1dbb      	adds	r3, r7, #6
 800a42a:	8819      	ldrh	r1, [r3, #0]
 800a42c:	003b      	movs	r3, r7
 800a42e:	0018      	movs	r0, r3
 800a430:	f000 ffe6 	bl	800b400 <sensirion_i2c_add_command_to_buffer>
 800a434:	0003      	movs	r3, r0
 800a436:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a438:	1d3c      	adds	r4, r7, #4
 800a43a:	1dbb      	adds	r3, r7, #6
 800a43c:	881a      	ldrh	r2, [r3, #0]
 800a43e:	003b      	movs	r3, r7
 800a440:	0019      	movs	r1, r3
 800a442:	2069      	movs	r0, #105	@ 0x69
 800a444:	f001 f860 	bl	800b508 <sensirion_i2c_write_data>
 800a448:	0003      	movs	r3, r0
 800a44a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a44c:	1d3b      	adds	r3, r7, #4
 800a44e:	2200      	movs	r2, #0
 800a450:	5e9b      	ldrsh	r3, [r3, r2]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <sen5x_device_reset+0x46>
        return error;
 800a456:	1d3b      	adds	r3, r7, #4
 800a458:	2200      	movs	r2, #0
 800a45a:	5e9b      	ldrsh	r3, [r3, r2]
 800a45c:	e004      	b.n	800a468 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a45e:	4b05      	ldr	r3, [pc, #20]	@ (800a474 <sen5x_device_reset+0x5c>)
 800a460:	0018      	movs	r0, r3
 800a462:	f7ff fa85 	bl	8009970 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a466:	2300      	movs	r3, #0
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b003      	add	sp, #12
 800a46e:	bd90      	pop	{r4, r7, pc}
 800a470:	0000d304 	.word	0x0000d304
 800a474:	00030d40 	.word	0x00030d40

0800a478 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	b21a      	sxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3301      	adds	r3, #1
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	b21b      	sxth	r3, r3
 800a490:	4313      	orrs	r3, r2
 800a492:	b21b      	sxth	r3, r3
 800a494:	b29b      	uxth	r3, r3
}
 800a496:	0018      	movs	r0, r3
 800a498:	46bd      	mov	sp, r7
 800a49a:	b002      	add	sp, #8
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	061a      	lsls	r2, r3, #24
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	041b      	lsls	r3, r3, #16
 800a4b4:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a4be:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	3203      	adds	r2, #3
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	4313      	orrs	r3, r2
}
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	b002      	add	sp, #8
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f7ff ffcc 	bl	800a478 <sensirion_common_bytes_to_uint16_t>
 800a4e0:	0003      	movs	r3, r0
 800a4e2:	b21b      	sxth	r3, r3
}
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	b002      	add	sp, #8
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	1dbb      	adds	r3, r7, #6
 800a4f8:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a4fa:	2316      	movs	r3, #22
 800a4fc:	18fb      	adds	r3, r7, r3
 800a4fe:	2200      	movs	r2, #0
 800a500:	801a      	strh	r2, [r3, #0]
 800a502:	e00f      	b.n	800a524 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a504:	2016      	movs	r0, #22
 800a506:	183b      	adds	r3, r7, r0
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	18d2      	adds	r2, r2, r3
 800a50e:	183b      	adds	r3, r7, r0
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	18cb      	adds	r3, r1, r3
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a51a:	183b      	adds	r3, r7, r0
 800a51c:	881a      	ldrh	r2, [r3, #0]
 800a51e:	183b      	adds	r3, r7, r0
 800a520:	3201      	adds	r2, #1
 800a522:	801a      	strh	r2, [r3, #0]
 800a524:	2316      	movs	r3, #22
 800a526:	18fa      	adds	r2, r7, r3
 800a528:	1dbb      	adds	r3, r7, #6
 800a52a:	8812      	ldrh	r2, [r2, #0]
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d3e8      	bcc.n	800a504 <sensirion_common_copy_bytes+0x18>
    }
}
 800a532:	46c0      	nop			@ (mov r8, r8)
 800a534:	46c0      	nop			@ (mov r8, r8)
 800a536:	46bd      	mov	sp, r7
 800a538:	b006      	add	sp, #24
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d113      	bne.n	800a582 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	22fe      	movs	r2, #254	@ 0xfe
 800a55e:	0592      	lsls	r2, r2, #22
 800a560:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4a1a      	ldr	r2, [pc, #104]	@ (800a5d0 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a566:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4a1a      	ldr	r2, [pc, #104]	@ (800a5d4 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a56c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4a19      	ldr	r2, [pc, #100]	@ (800a5d8 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a572:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4a19      	ldr	r2, [pc, #100]	@ (800a5dc <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a578:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4a18      	ldr	r2, [pc, #96]	@ (800a5e0 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a57e:	61da      	str	r2, [r3, #28]
 800a580:	e011      	b.n	800a5a6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4a17      	ldr	r2, [pc, #92]	@ (800a5e4 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a586:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4a17      	ldr	r2, [pc, #92]	@ (800a5e8 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a58c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	4a16      	ldr	r2, [pc, #88]	@ (800a5ec <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a592:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4a16      	ldr	r2, [pc, #88]	@ (800a5f0 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a598:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4a15      	ldr	r2, [pc, #84]	@ (800a5f4 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a59e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	@ (800a5f8 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a5a4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4a14      	ldr	r2, [pc, #80]	@ (800a5fc <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a5aa:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4a14      	ldr	r2, [pc, #80]	@ (800a600 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a5b0:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4a12      	ldr	r2, [pc, #72]	@ (800a600 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a5b6:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4a12      	ldr	r2, [pc, #72]	@ (800a604 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a5bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f000 f833 	bl	800a62c <GasIndexAlgorithm_reset>
}
 800a5c6:	46c0      	nop			@ (mov r8, r8)
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	b004      	add	sp, #16
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	46c0      	nop			@ (mov r8, r8)
 800a5d0:	00002710 	.word	0x00002710
 800a5d4:	44340000 	.word	0x44340000
 800a5d8:	46859800 	.word	0x46859800
 800a5dc:	46a05000 	.word	0x46a05000
 800a5e0:	41f00000 	.word	0x41f00000
 800a5e4:	42c80000 	.word	0x42c80000
 800a5e8:	00004e20 	.word	0x00004e20
 800a5ec:	43340000 	.word	0x43340000
 800a5f0:	4528c000 	.word	0x4528c000
 800a5f4:	45a32000 	.word	0x45a32000
 800a5f8:	43aa0000 	.word	0x43aa0000
 800a5fc:	43660000 	.word	0x43660000
 800a600:	41400000 	.word	0x41400000
 800a604:	42480000 	.word	0x42480000

0800a608 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a612:	4a05      	ldr	r2, [pc, #20]	@ (800a628 <GasIndexAlgorithm_init+0x20>)
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	0018      	movs	r0, r3
 800a61a:	f7ff ff8f 	bl	800a53c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	44610000 	.word	0x44610000

0800a62c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	0018      	movs	r0, r3
 800a64a:	f000 f805 	bl	800a658 <GasIndexAlgorithm__init_instances>
}
 800a64e:	46c0      	nop			@ (mov r8, r8)
 800a650:	46bd      	mov	sp, r7
 800a652:	b002      	add	sp, #8
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a658:	b590      	push	{r4, r7, lr}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	0018      	movs	r0, r3
 800a664:	f000 f8e8 	bl	800a838 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	0018      	movs	r0, r3
 800a66c:	f000 f9a6 	bl	800a9bc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a670:	1c04      	adds	r4, r0, #0
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	0018      	movs	r0, r3
 800a676:	f000 f9ab 	bl	800a9d0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a67a:	1c02      	adds	r2, r0, #0
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	1c21      	adds	r1, r4, #0
 800a680:	0018      	movs	r0, r3
 800a682:	f000 fc3b 	bl	800aefc <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d107      	bne.n	800a69e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a68e:	23fe      	movs	r3, #254	@ 0xfe
 800a690:	059b      	lsls	r3, r3, #22
 800a692:	4a0a      	ldr	r2, [pc, #40]	@ (800a6bc <GasIndexAlgorithm__init_instances+0x64>)
 800a694:	490a      	ldr	r1, [pc, #40]	@ (800a6c0 <GasIndexAlgorithm__init_instances+0x68>)
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fc86 	bl	800afa8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a69c:	e005      	b.n	800a6aa <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a69e:	4b09      	ldr	r3, [pc, #36]	@ (800a6c4 <GasIndexAlgorithm__init_instances+0x6c>)
 800a6a0:	4a09      	ldr	r2, [pc, #36]	@ (800a6c8 <GasIndexAlgorithm__init_instances+0x70>)
 800a6a2:	490a      	ldr	r1, [pc, #40]	@ (800a6cc <GasIndexAlgorithm__init_instances+0x74>)
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fc7f 	bl	800afa8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f000 fd35 	bl	800b11c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a6b2:	46c0      	nop			@ (mov r8, r8)
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	b003      	add	sp, #12
 800a6b8:	bd90      	pop	{r4, r7, pc}
 800a6ba:	46c0      	nop			@ (mov r8, r8)
 800a6bc:	bc257a78 	.word	0xbc257a78
 800a6c0:	44198000 	.word	0x44198000
 800a6c4:	42c80000 	.word	0x42c80000
 800a6c8:	bbd4fdf4 	.word	0xbbd4fdf4
 800a6cc:	43550000 	.word	0x43550000

0800a6d0 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a6d0:	b590      	push	{r4, r7, lr}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e0:	4952      	ldr	r1, [pc, #328]	@ (800a82c <GasIndexAlgorithm_process+0x15c>)
 800a6e2:	1c18      	adds	r0, r3, #0
 800a6e4:	f7f5 ff2e 	bl	8000544 <__aeabi_fcmple>
 800a6e8:	1e03      	subs	r3, r0, #0
 800a6ea:	d00c      	beq.n	800a706 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	1c19      	adds	r1, r3, #0
 800a6f6:	1c10      	adds	r0, r2, #0
 800a6f8:	f7f6 f8e2 	bl	80008c0 <__aeabi_fadd>
 800a6fc:	1c03      	adds	r3, r0, #0
 800a6fe:	1c1a      	adds	r2, r3, #0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	631a      	str	r2, [r3, #48]	@ 0x30
 800a704:	e080      	b.n	800a808 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dd25      	ble.n	800a758 <GasIndexAlgorithm_process+0x88>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a48      	ldr	r2, [pc, #288]	@ (800a830 <GasIndexAlgorithm_process+0x160>)
 800a710:	4293      	cmp	r3, r2
 800a712:	dc21      	bgt.n	800a758 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	dc04      	bgt.n	800a728 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	60bb      	str	r3, [r7, #8]
 800a726:	e00d      	b.n	800a744 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	4a41      	ldr	r2, [pc, #260]	@ (800a834 <GasIndexAlgorithm_process+0x164>)
 800a72e:	4694      	mov	ip, r2
 800a730:	4463      	add	r3, ip
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	429a      	cmp	r2, r3
 800a736:	dd05      	ble.n	800a744 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	4a3d      	ldr	r2, [pc, #244]	@ (800a834 <GasIndexAlgorithm_process+0x164>)
 800a73e:	4694      	mov	ip, r2
 800a740:	4463      	add	r3, ip
 800a742:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	0018      	movs	r0, r3
 800a74e:	f7f6 ff3f 	bl	80015d0 <__aeabi_i2f>
 800a752:	1c02      	adds	r2, r0, #0
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	0018      	movs	r0, r3
 800a764:	f000 f945 	bl	800a9f2 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a768:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a76a:	d014      	beq.n	800a796 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	1c11      	adds	r1, r2, #0
 800a774:	0018      	movs	r0, r3
 800a776:	f000 fbd1 	bl	800af1c <GasIndexAlgorithm__mox_model__process>
 800a77a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	1c11      	adds	r1, r2, #0
 800a788:	0018      	movs	r0, r3
 800a78a:	f000 fc25 	bl	800afd8 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a78e:	1c02      	adds	r2, r0, #0
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	639a      	str	r2, [r3, #56]	@ 0x38
 800a794:	e003      	b.n	800a79e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	689a      	ldr	r2, [r3, #8]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	1c11      	adds	r1, r2, #0
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f000 fcec 	bl	800b184 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a7ac:	1c02      	adds	r2, r0, #0
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b6:	21fc      	movs	r1, #252	@ 0xfc
 800a7b8:	0589      	lsls	r1, r1, #22
 800a7ba:	1c18      	adds	r0, r3, #0
 800a7bc:	f7f5 feb8 	bl	8000530 <__aeabi_fcmplt>
 800a7c0:	1e03      	subs	r3, r0, #0
 800a7c2:	d003      	beq.n	800a7cc <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	22fc      	movs	r2, #252	@ 0xfc
 800a7c8:	0592      	lsls	r2, r2, #22
 800a7ca:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	1c18      	adds	r0, r3, #0
 800a7d4:	f7f5 fec0 	bl	8000558 <__aeabi_fcmpgt>
 800a7d8:	1e03      	subs	r3, r0, #0
 800a7da:	d015      	beq.n	800a808 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	1c11      	adds	r1, r2, #0
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	f000 fa4f 	bl	800ac88 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	f000 f8e5 	bl	800a9bc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a7f2:	1c04      	adds	r4, r0, #0
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	f000 f8ea 	bl	800a9d0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a7fc:	1c02      	adds	r2, r0, #0
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1c21      	adds	r1, r4, #0
 800a802:	0018      	movs	r0, r3
 800a804:	f000 fb7a 	bl	800aefc <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80c:	21fc      	movs	r1, #252	@ 0xfc
 800a80e:	0589      	lsls	r1, r1, #22
 800a810:	1c18      	adds	r0, r3, #0
 800a812:	f7f6 f855 	bl	80008c0 <__aeabi_fadd>
 800a816:	1c03      	adds	r3, r0, #0
 800a818:	1c18      	adds	r0, r3, #0
 800a81a:	f7f6 feb9 	bl	8001590 <__aeabi_f2iz>
 800a81e:	0002      	movs	r2, r0
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
    return;
 800a824:	46c0      	nop			@ (mov r8, r8)
}
 800a826:	46bd      	mov	sp, r7
 800a828:	b005      	add	sp, #20
 800a82a:	bd90      	pop	{r4, r7, pc}
 800a82c:	42340000 	.word	0x42340000
 800a830:	0000fde7 	.word	0x0000fde7
 800a834:	00007fff 	.word	0x00007fff

0800a838 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a838:	b5b0      	push	{r4, r5, r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	223c      	movs	r2, #60	@ 0x3c
 800a844:	2100      	movs	r1, #0
 800a846:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4952      	ldr	r1, [pc, #328]	@ (800a9ac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a862:	1c18      	adds	r0, r3, #0
 800a864:	f7f6 f9b6 	bl	8000bd4 <__aeabi_fdiv>
 800a868:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a86a:	2188      	movs	r1, #136	@ 0x88
 800a86c:	05c9      	lsls	r1, r1, #23
 800a86e:	1c18      	adds	r0, r3, #0
 800a870:	f7f6 fb96 	bl	8000fa0 <__aeabi_fmul>
 800a874:	1c03      	adds	r3, r0, #0
 800a876:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	494a      	ldr	r1, [pc, #296]	@ (800a9ac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a882:	1c18      	adds	r0, r3, #0
 800a884:	f7f6 f9a6 	bl	8000bd4 <__aeabi_fdiv>
 800a888:	1c03      	adds	r3, r0, #0
 800a88a:	1c19      	adds	r1, r3, #0
 800a88c:	1c20      	adds	r0, r4, #0
 800a88e:	f7f6 f817 	bl	80008c0 <__aeabi_fadd>
 800a892:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a894:	1c19      	adds	r1, r3, #0
 800a896:	1c28      	adds	r0, r5, #0
 800a898:	f7f6 f99c 	bl	8000bd4 <__aeabi_fdiv>
 800a89c:	1c03      	adds	r3, r0, #0
 800a89e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4940      	ldr	r1, [pc, #256]	@ (800a9ac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a8aa:	1c18      	adds	r0, r3, #0
 800a8ac:	f7f6 f992 	bl	8000bd4 <__aeabi_fdiv>
 800a8b0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a8b2:	2185      	movs	r1, #133	@ 0x85
 800a8b4:	05c9      	lsls	r1, r1, #23
 800a8b6:	1c18      	adds	r0, r3, #0
 800a8b8:	f7f6 fb72 	bl	8000fa0 <__aeabi_fmul>
 800a8bc:	1c03      	adds	r3, r0, #0
 800a8be:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4938      	ldr	r1, [pc, #224]	@ (800a9ac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a8ca:	1c18      	adds	r0, r3, #0
 800a8cc:	f7f6 f982 	bl	8000bd4 <__aeabi_fdiv>
 800a8d0:	1c03      	adds	r3, r0, #0
 800a8d2:	1c19      	adds	r1, r3, #0
 800a8d4:	1c20      	adds	r0, r4, #0
 800a8d6:	f7f5 fff3 	bl	80008c0 <__aeabi_fadd>
 800a8da:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a8dc:	1c19      	adds	r1, r3, #0
 800a8de:	1c28      	adds	r0, r5, #0
 800a8e0:	f7f6 f978 	bl	8000bd4 <__aeabi_fdiv>
 800a8e4:	1c03      	adds	r3, r0, #0
 800a8e6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d118      	bne.n	800a926 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8f8:	2188      	movs	r1, #136	@ 0x88
 800a8fa:	05c9      	lsls	r1, r1, #23
 800a8fc:	1c18      	adds	r0, r3, #0
 800a8fe:	f7f6 fb4f 	bl	8000fa0 <__aeabi_fmul>
 800a902:	1c03      	adds	r3, r0, #0
 800a904:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a90a:	4929      	ldr	r1, [pc, #164]	@ (800a9b0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a90c:	1c18      	adds	r0, r3, #0
 800a90e:	f7f5 ffd7 	bl	80008c0 <__aeabi_fadd>
 800a912:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a914:	1c19      	adds	r1, r3, #0
 800a916:	1c20      	adds	r0, r4, #0
 800a918:	f7f6 f95c 	bl	8000bd4 <__aeabi_fdiv>
 800a91c:	1c03      	adds	r3, r0, #0
 800a91e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	655a      	str	r2, [r3, #84]	@ 0x54
 800a924:	e017      	b.n	800a956 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a92a:	2188      	movs	r1, #136	@ 0x88
 800a92c:	05c9      	lsls	r1, r1, #23
 800a92e:	1c18      	adds	r0, r3, #0
 800a930:	f7f6 fb36 	bl	8000fa0 <__aeabi_fmul>
 800a934:	1c03      	adds	r3, r0, #0
 800a936:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a93c:	491d      	ldr	r1, [pc, #116]	@ (800a9b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a93e:	1c18      	adds	r0, r3, #0
 800a940:	f7f5 ffbe 	bl	80008c0 <__aeabi_fadd>
 800a944:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a946:	1c19      	adds	r1, r3, #0
 800a948:	1c20      	adds	r0, r4, #0
 800a94a:	f7f6 f943 	bl	8000bd4 <__aeabi_fdiv>
 800a94e:	1c03      	adds	r3, r0, #0
 800a950:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a95a:	2185      	movs	r1, #133	@ 0x85
 800a95c:	05c9      	lsls	r1, r1, #23
 800a95e:	1c18      	adds	r0, r3, #0
 800a960:	f7f6 fb1e 	bl	8000fa0 <__aeabi_fmul>
 800a964:	1c03      	adds	r3, r0, #0
 800a966:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	4912      	ldr	r1, [pc, #72]	@ (800a9b8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a96e:	1c18      	adds	r0, r3, #0
 800a970:	f7f5 ffa6 	bl	80008c0 <__aeabi_fadd>
 800a974:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a976:	1c19      	adds	r1, r3, #0
 800a978:	1c20      	adds	r0, r4, #0
 800a97a:	f7f6 f92b 	bl	8000bd4 <__aeabi_fdiv>
 800a97e:	1c03      	adds	r3, r0, #0
 800a980:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a9a4:	46c0      	nop			@ (mov r8, r8)
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	b002      	add	sp, #8
 800a9aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a9ac:	45610000 	.word	0x45610000
 800a9b0:	44960000 	.word	0x44960000
 800a9b4:	41a00000 	.word	0x41a00000
 800a9b8:	451c4000 	.word	0x451c4000

0800a9bc <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a9c8:	1c18      	adds	r0, r3, #0
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b002      	add	sp, #8
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a9e0:	1c19      	adds	r1, r3, #0
 800a9e2:	1c10      	adds	r0, r2, #0
 800a9e4:	f7f5 ff6c 	bl	80008c0 <__aeabi_fadd>
 800a9e8:	1c03      	adds	r3, r0, #0
}
 800a9ea:	1c18      	adds	r0, r3, #0
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b002      	add	sp, #8
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	223c      	movs	r2, #60	@ 0x3c
 800a9fe:	5c9b      	ldrb	r3, [r3, r2]
}
 800aa00:	0018      	movs	r0, r3
 800aa02:	46bd      	mov	sp, r7
 800aa04:	b002      	add	sp, #8
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800aa08:	b5b0      	push	{r4, r5, r7, lr}
 800aa0a:	b08c      	sub	sp, #48	@ 0x30
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800aa14:	1c19      	adds	r1, r3, #0
 800aa16:	4895      	ldr	r0, [pc, #596]	@ (800ac6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800aa18:	f7f6 fc00 	bl	800121c <__aeabi_fsub>
 800aa1c:	1c03      	adds	r3, r0, #0
 800aa1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa24:	1c19      	adds	r1, r3, #0
 800aa26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa28:	f7f5 fd96 	bl	8000558 <__aeabi_fcmpgt>
 800aa2c:	1e03      	subs	r3, r0, #0
 800aa2e:	d00b      	beq.n	800aa48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aa38:	1c19      	adds	r1, r3, #0
 800aa3a:	1c10      	adds	r0, r2, #0
 800aa3c:	f7f5 ff40 	bl	80008c0 <__aeabi_fadd>
 800aa40:	1c03      	adds	r3, r0, #0
 800aa42:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa4c:	1c19      	adds	r1, r3, #0
 800aa4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa50:	f7f5 fd82 	bl	8000558 <__aeabi_fcmpgt>
 800aa54:	1e03      	subs	r3, r0, #0
 800aa56:	d00b      	beq.n	800aa70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aa60:	1c19      	adds	r1, r3, #0
 800aa62:	1c10      	adds	r0, r2, #0
 800aa64:	f7f5 ff2c 	bl	80008c0 <__aeabi_fadd>
 800aa68:	1c03      	adds	r3, r0, #0
 800aa6a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6959      	ldr	r1, [r3, #20]
 800aa74:	4a7e      	ldr	r2, [pc, #504]	@ (800ac70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	0018      	movs	r0, r3
 800aa7a:	f000 f9f1 	bl	800ae60 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	1c11      	adds	r1, r2, #0
 800aa86:	0018      	movs	r0, r3
 800aa88:	f000 f9fa 	bl	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa8c:	1c03      	adds	r3, r0, #0
 800aa8e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa9c:	1c19      	adds	r1, r3, #0
 800aa9e:	1c10      	adds	r0, r2, #0
 800aaa0:	f7f6 fbbc 	bl	800121c <__aeabi_fsub>
 800aaa4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aaa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaa8:	1c18      	adds	r0, r3, #0
 800aaaa:	f7f6 fa79 	bl	8000fa0 <__aeabi_fmul>
 800aaae:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aab0:	1c19      	adds	r1, r3, #0
 800aab2:	1c20      	adds	r0, r4, #0
 800aab4:	f7f5 ff04 	bl	80008c0 <__aeabi_fadd>
 800aab8:	1c03      	adds	r3, r0, #0
 800aaba:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800aac4:	1c19      	adds	r1, r3, #0
 800aac6:	486b      	ldr	r0, [pc, #428]	@ (800ac74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800aac8:	f7f6 fba8 	bl	800121c <__aeabi_fsub>
 800aacc:	1c03      	adds	r3, r0, #0
 800aace:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	1c11      	adds	r1, r2, #0
 800aad8:	0018      	movs	r0, r3
 800aada:	f000 f9d1 	bl	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aade:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aae0:	1c19      	adds	r1, r3, #0
 800aae2:	1c28      	adds	r0, r5, #0
 800aae4:	f7f6 fa5c 	bl	8000fa0 <__aeabi_fmul>
 800aae8:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aaea:	1c19      	adds	r1, r3, #0
 800aaec:	1c20      	adds	r0, r4, #0
 800aaee:	f7f5 fee7 	bl	80008c0 <__aeabi_fadd>
 800aaf2:	1c03      	adds	r3, r0, #0
 800aaf4:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aaf6:	4a60      	ldr	r2, [pc, #384]	@ (800ac78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aaf8:	6a39      	ldr	r1, [r7, #32]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0018      	movs	r0, r3
 800aafe:	f000 f9af 	bl	800ae60 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	1c11      	adds	r1, r2, #0
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f000 f9b8 	bl	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab10:	1c03      	adds	r3, r0, #0
 800ab12:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800ab14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab16:	69f8      	ldr	r0, [r7, #28]
 800ab18:	f7f6 fa42 	bl	8000fa0 <__aeabi_fmul>
 800ab1c:	1c03      	adds	r3, r0, #0
 800ab1e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6999      	ldr	r1, [r3, #24]
 800ab28:	4a51      	ldr	r2, [pc, #324]	@ (800ac70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f000 f997 	bl	800ae60 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	1c11      	adds	r1, r2, #0
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	f000 f9a0 	bl	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab40:	1c03      	adds	r3, r0, #0
 800ab42:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ab50:	1c19      	adds	r1, r3, #0
 800ab52:	1c10      	adds	r0, r2, #0
 800ab54:	f7f6 fb62 	bl	800121c <__aeabi_fsub>
 800ab58:	1c03      	adds	r3, r0, #0
 800ab5a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ab5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab5e:	69b8      	ldr	r0, [r7, #24]
 800ab60:	f7f6 fb5c 	bl	800121c <__aeabi_fsub>
 800ab64:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ab66:	1c19      	adds	r1, r3, #0
 800ab68:	1c28      	adds	r0, r5, #0
 800ab6a:	f7f6 fa19 	bl	8000fa0 <__aeabi_fmul>
 800ab6e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800ab70:	1c19      	adds	r1, r3, #0
 800ab72:	1c20      	adds	r0, r4, #0
 800ab74:	f7f5 fea4 	bl	80008c0 <__aeabi_fadd>
 800ab78:	1c03      	adds	r3, r0, #0
 800ab7a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ab84:	1c19      	adds	r1, r3, #0
 800ab86:	483b      	ldr	r0, [pc, #236]	@ (800ac74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ab88:	f7f6 fb48 	bl	800121c <__aeabi_fsub>
 800ab8c:	1c03      	adds	r3, r0, #0
 800ab8e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	1c11      	adds	r1, r2, #0
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f000 f971 	bl	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab9e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aba0:	1c19      	adds	r1, r3, #0
 800aba2:	1c28      	adds	r0, r5, #0
 800aba4:	f7f6 f9fc 	bl	8000fa0 <__aeabi_fmul>
 800aba8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800abaa:	1c19      	adds	r1, r3, #0
 800abac:	1c20      	adds	r0, r4, #0
 800abae:	f7f5 fe87 	bl	80008c0 <__aeabi_fadd>
 800abb2:	1c03      	adds	r3, r0, #0
 800abb4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800abb6:	4a30      	ldr	r2, [pc, #192]	@ (800ac78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800abb8:	6939      	ldr	r1, [r7, #16]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	0018      	movs	r0, r3
 800abbe:	f000 f94f 	bl	800ae60 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	1c11      	adds	r1, r2, #0
 800abca:	0018      	movs	r0, r3
 800abcc:	f000 f958 	bl	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800abd0:	1c03      	adds	r3, r0, #0
 800abd2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800abd4:	6979      	ldr	r1, [r7, #20]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7f6 f9e2 	bl	8000fa0 <__aeabi_fmul>
 800abdc:	1c03      	adds	r3, r0, #0
 800abde:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	4923      	ldr	r1, [pc, #140]	@ (800ac7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800abee:	1c18      	adds	r0, r3, #0
 800abf0:	f7f5 fff0 	bl	8000bd4 <__aeabi_fdiv>
 800abf4:	1c03      	adds	r3, r0, #0
 800abf6:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800abf8:	69f9      	ldr	r1, [r7, #28]
 800abfa:	20fe      	movs	r0, #254	@ 0xfe
 800abfc:	0580      	lsls	r0, r0, #22
 800abfe:	f7f6 fb0d 	bl	800121c <__aeabi_fsub>
 800ac02:	1c03      	adds	r3, r0, #0
 800ac04:	491e      	ldr	r1, [pc, #120]	@ (800ac80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ac06:	1c18      	adds	r0, r3, #0
 800ac08:	f7f6 f9ca 	bl	8000fa0 <__aeabi_fmul>
 800ac0c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ac0e:	491d      	ldr	r1, [pc, #116]	@ (800ac84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ac10:	1c18      	adds	r0, r3, #0
 800ac12:	f7f6 fb03 	bl	800121c <__aeabi_fsub>
 800ac16:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ac18:	1c19      	adds	r1, r3, #0
 800ac1a:	1c28      	adds	r0, r5, #0
 800ac1c:	f7f6 f9c0 	bl	8000fa0 <__aeabi_fmul>
 800ac20:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ac22:	1c19      	adds	r1, r3, #0
 800ac24:	1c20      	adds	r0, r4, #0
 800ac26:	f7f5 fe4b 	bl	80008c0 <__aeabi_fadd>
 800ac2a:	1c03      	adds	r3, r0, #0
 800ac2c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac36:	2100      	movs	r1, #0
 800ac38:	1c18      	adds	r0, r3, #0
 800ac3a:	f7f5 fc79 	bl	8000530 <__aeabi_fcmplt>
 800ac3e:	1e03      	subs	r3, r0, #0
 800ac40:	d002      	beq.n	800ac48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ac50:	1c19      	adds	r1, r3, #0
 800ac52:	1c10      	adds	r0, r2, #0
 800ac54:	f7f5 fc80 	bl	8000558 <__aeabi_fcmpgt>
 800ac58:	1e03      	subs	r3, r0, #0
 800ac5a:	d100      	bne.n	800ac5e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ac5c:	e002      	b.n	800ac64 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ac64:	46c0      	nop			@ (mov r8, r8)
 800ac66:	46bd      	mov	sp, r7
 800ac68:	b00c      	add	sp, #48	@ 0x30
 800ac6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac6c:	46fffe00 	.word	0x46fffe00
 800ac70:	3c23d70a 	.word	0x3c23d70a
 800ac74:	43ff0000 	.word	0x43ff0000
 800ac78:	3db851ec 	.word	0x3db851ec
 800ac7c:	42700000 	.word	0x42700000
 800ac80:	3fa66666 	.word	0x3fa66666
 800ac84:	3e99999a 	.word	0x3e99999a

0800ac88 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	223c      	movs	r2, #60	@ 0x3c
 800ac96:	5c9b      	ldrb	r3, [r3, r2]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4053      	eors	r3, r2
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	223c      	movs	r2, #60	@ 0x3c
 800aca6:	2101      	movs	r1, #1
 800aca8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800acb6:	e0c8      	b.n	800ae4a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbc:	4965      	ldr	r1, [pc, #404]	@ (800ae54 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800acbe:	1c18      	adds	r0, r3, #0
 800acc0:	f7f5 fc54 	bl	800056c <__aeabi_fcmpge>
 800acc4:	1e03      	subs	r3, r0, #0
 800acc6:	d107      	bne.n	800acd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800accc:	4962      	ldr	r1, [pc, #392]	@ (800ae58 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800acce:	1c18      	adds	r0, r3, #0
 800acd0:	f7f5 fc38 	bl	8000544 <__aeabi_fcmple>
 800acd4:	1e03      	subs	r3, r0, #0
 800acd6:	d00e      	beq.n	800acf6 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ace0:	1c19      	adds	r1, r3, #0
 800ace2:	1c10      	adds	r0, r2, #0
 800ace4:	f7f5 fdec 	bl	80008c0 <__aeabi_fadd>
 800ace8:	1c03      	adds	r3, r0, #0
 800acea:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acfa:	1c19      	adds	r1, r3, #0
 800acfc:	6838      	ldr	r0, [r7, #0]
 800acfe:	f7f6 fa8d 	bl	800121c <__aeabi_fsub>
 800ad02:	1c03      	adds	r3, r0, #0
 800ad04:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	0018      	movs	r0, r3
 800ad0a:	f7ff fe7d 	bl	800aa08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad12:	1c19      	adds	r1, r3, #0
 800ad14:	6838      	ldr	r0, [r7, #0]
 800ad16:	f7f6 fa81 	bl	800121c <__aeabi_fsub>
 800ad1a:	1c03      	adds	r3, r0, #0
 800ad1c:	2185      	movs	r1, #133	@ 0x85
 800ad1e:	05c9      	lsls	r1, r1, #23
 800ad20:	1c18      	adds	r0, r3, #0
 800ad22:	f7f5 ff57 	bl	8000bd4 <__aeabi_fdiv>
 800ad26:	1c03      	adds	r3, r0, #0
 800ad28:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7f5 fbff 	bl	8000530 <__aeabi_fcmplt>
 800ad32:	1e03      	subs	r3, r0, #0
 800ad34:	d008      	beq.n	800ad48 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad3a:	68f9      	ldr	r1, [r7, #12]
 800ad3c:	1c18      	adds	r0, r3, #0
 800ad3e:	f7f6 fa6d 	bl	800121c <__aeabi_fsub>
 800ad42:	1c03      	adds	r3, r0, #0
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	e007      	b.n	800ad58 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad4c:	1c19      	adds	r1, r3, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7f5 fdb6 	bl	80008c0 <__aeabi_fadd>
 800ad54:	1c03      	adds	r3, r0, #0
 800ad56:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800ad58:	23fe      	movs	r3, #254	@ 0xfe
 800ad5a:	059b      	lsls	r3, r3, #22
 800ad5c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800ad5e:	493f      	ldr	r1, [pc, #252]	@ (800ae5c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad60:	6978      	ldr	r0, [r7, #20]
 800ad62:	f7f5 fbf9 	bl	8000558 <__aeabi_fcmpgt>
 800ad66:	1e03      	subs	r3, r0, #0
 800ad68:	d010      	beq.n	800ad8c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800ad6a:	493c      	ldr	r1, [pc, #240]	@ (800ae5c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f7f5 ff31 	bl	8000bd4 <__aeabi_fdiv>
 800ad72:	1c03      	adds	r3, r0, #0
 800ad74:	1c1c      	adds	r4, r3, #0
 800ad76:	4939      	ldr	r1, [pc, #228]	@ (800ae5c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad78:	6978      	ldr	r0, [r7, #20]
 800ad7a:	f7f5 ff2b 	bl	8000bd4 <__aeabi_fdiv>
 800ad7e:	1c03      	adds	r3, r0, #0
 800ad80:	1c19      	adds	r1, r3, #0
 800ad82:	1c20      	adds	r0, r4, #0
 800ad84:	f7f6 f90c 	bl	8000fa0 <__aeabi_fmul>
 800ad88:	1c03      	adds	r3, r0, #0
 800ad8a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ad90:	1c19      	adds	r1, r3, #0
 800ad92:	2085      	movs	r0, #133	@ 0x85
 800ad94:	05c0      	lsls	r0, r0, #23
 800ad96:	f7f6 fa41 	bl	800121c <__aeabi_fsub>
 800ad9a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ad9c:	6939      	ldr	r1, [r7, #16]
 800ad9e:	1c18      	adds	r0, r3, #0
 800ada0:	f7f6 f8fe 	bl	8000fa0 <__aeabi_fmul>
 800ada4:	1c03      	adds	r3, r0, #0
 800ada6:	1c18      	adds	r0, r3, #0
 800ada8:	f017 fff6 	bl	8022d98 <sqrtf>
 800adac:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800adb6:	2185      	movs	r1, #133	@ 0x85
 800adb8:	05c9      	lsls	r1, r1, #23
 800adba:	6938      	ldr	r0, [r7, #16]
 800adbc:	f7f6 f8f0 	bl	8000fa0 <__aeabi_fmul>
 800adc0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800adc2:	1c19      	adds	r1, r3, #0
 800adc4:	1c28      	adds	r0, r5, #0
 800adc6:	f7f5 ff05 	bl	8000bd4 <__aeabi_fdiv>
 800adca:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800adcc:	1c19      	adds	r1, r3, #0
 800adce:	1c20      	adds	r0, r4, #0
 800add0:	f7f6 f8e6 	bl	8000fa0 <__aeabi_fmul>
 800add4:	1c03      	adds	r3, r0, #0
 800add6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800addc:	68f9      	ldr	r1, [r7, #12]
 800adde:	1c18      	adds	r0, r3, #0
 800ade0:	f7f6 f8de 	bl	8000fa0 <__aeabi_fmul>
 800ade4:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800ade6:	6939      	ldr	r1, [r7, #16]
 800ade8:	1c18      	adds	r0, r3, #0
 800adea:	f7f5 fef3 	bl	8000bd4 <__aeabi_fdiv>
 800adee:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800adf0:	68f9      	ldr	r1, [r7, #12]
 800adf2:	1c18      	adds	r0, r3, #0
 800adf4:	f7f6 f8d4 	bl	8000fa0 <__aeabi_fmul>
 800adf8:	1c03      	adds	r3, r0, #0
             sqrtf(
 800adfa:	1c19      	adds	r1, r3, #0
 800adfc:	1c20      	adds	r0, r4, #0
 800adfe:	f7f5 fd5f 	bl	80008c0 <__aeabi_fadd>
 800ae02:	1c03      	adds	r3, r0, #0
 800ae04:	1c18      	adds	r0, r3, #0
 800ae06:	f017 ffc7 	bl	8022d98 <sqrtf>
 800ae0a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ae0c:	1c19      	adds	r1, r3, #0
 800ae0e:	1c30      	adds	r0, r6, #0
 800ae10:	f7f6 f8c6 	bl	8000fa0 <__aeabi_fmul>
 800ae14:	1c03      	adds	r3, r0, #0
 800ae16:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae24:	68f9      	ldr	r1, [r7, #12]
 800ae26:	1c18      	adds	r0, r3, #0
 800ae28:	f7f6 f8ba 	bl	8000fa0 <__aeabi_fmul>
 800ae2c:	1c03      	adds	r3, r0, #0
 800ae2e:	2182      	movs	r1, #130	@ 0x82
 800ae30:	05c9      	lsls	r1, r1, #23
 800ae32:	1c18      	adds	r0, r3, #0
 800ae34:	f7f5 fece 	bl	8000bd4 <__aeabi_fdiv>
 800ae38:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800ae3a:	1c19      	adds	r1, r3, #0
 800ae3c:	1c20      	adds	r0, r4, #0
 800ae3e:	f7f5 fd3f 	bl	80008c0 <__aeabi_fadd>
 800ae42:	1c03      	adds	r3, r0, #0
 800ae44:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ae4a:	46c0      	nop			@ (mov r8, r8)
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	b007      	add	sp, #28
 800ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae52:	46c0      	nop			@ (mov r8, r8)
 800ae54:	42c80000 	.word	0x42c80000
 800ae58:	c2c80000 	.word	0xc2c80000
 800ae5c:	44b40000 	.word	0x44b40000

0800ae60 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae78:	46c0      	nop			@ (mov r8, r8)
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b004      	add	sp, #16
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae92:	1c19      	adds	r1, r3, #0
 800ae94:	6838      	ldr	r0, [r7, #0]
 800ae96:	f7f6 f9c1 	bl	800121c <__aeabi_fsub>
 800ae9a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae9c:	1c19      	adds	r1, r3, #0
 800ae9e:	1c20      	adds	r0, r4, #0
 800aea0:	f7f6 f87e 	bl	8000fa0 <__aeabi_fmul>
 800aea4:	1c03      	adds	r3, r0, #0
 800aea6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800aea8:	4912      	ldr	r1, [pc, #72]	@ (800aef4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7f5 fb40 	bl	8000530 <__aeabi_fcmplt>
 800aeb0:	1e03      	subs	r3, r0, #0
 800aeb2:	d002      	beq.n	800aeba <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800aeb4:	23fe      	movs	r3, #254	@ 0xfe
 800aeb6:	059b      	lsls	r3, r3, #22
 800aeb8:	e018      	b.n	800aeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800aeba:	490f      	ldr	r1, [pc, #60]	@ (800aef8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7f5 fb4b 	bl	8000558 <__aeabi_fcmpgt>
 800aec2:	1e03      	subs	r3, r0, #0
 800aec4:	d001      	beq.n	800aeca <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e010      	b.n	800aeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1c18      	adds	r0, r3, #0
 800aece:	f017 ff3b 	bl	8022d48 <expf>
 800aed2:	1c03      	adds	r3, r0, #0
 800aed4:	21fe      	movs	r1, #254	@ 0xfe
 800aed6:	0589      	lsls	r1, r1, #22
 800aed8:	1c18      	adds	r0, r3, #0
 800aeda:	f7f5 fcf1 	bl	80008c0 <__aeabi_fadd>
 800aede:	1c03      	adds	r3, r0, #0
 800aee0:	1c19      	adds	r1, r3, #0
 800aee2:	20fe      	movs	r0, #254	@ 0xfe
 800aee4:	0580      	lsls	r0, r0, #22
 800aee6:	f7f5 fe75 	bl	8000bd4 <__aeabi_fdiv>
 800aeea:	1c03      	adds	r3, r0, #0
    }
}
 800aeec:	1c18      	adds	r0, r3, #0
 800aeee:	46bd      	mov	sp, r7
 800aef0:	b005      	add	sp, #20
 800aef2:	bd90      	pop	{r4, r7, pc}
 800aef4:	c2480000 	.word	0xc2480000
 800aef8:	42480000 	.word	0x42480000

0800aefc <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800af14:	46c0      	nop			@ (mov r8, r8)
 800af16:	46bd      	mov	sp, r7
 800af18:	b004      	add	sp, #16
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d114      	bne.n	800af58 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af32:	1c19      	adds	r1, r3, #0
 800af34:	6838      	ldr	r0, [r7, #0]
 800af36:	f7f6 f971 	bl	800121c <__aeabi_fsub>
 800af3a:	1c03      	adds	r3, r0, #0
 800af3c:	4918      	ldr	r1, [pc, #96]	@ (800afa0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800af3e:	1c18      	adds	r0, r3, #0
 800af40:	f7f5 fe48 	bl	8000bd4 <__aeabi_fdiv>
 800af44:	1c03      	adds	r3, r0, #0
 800af46:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800af4c:	1c19      	adds	r1, r3, #0
 800af4e:	1c10      	adds	r0, r2, #0
 800af50:	f7f6 f826 	bl	8000fa0 <__aeabi_fmul>
 800af54:	1c03      	adds	r3, r0, #0
 800af56:	e01f      	b.n	800af98 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af5c:	1c19      	adds	r1, r3, #0
 800af5e:	6838      	ldr	r0, [r7, #0]
 800af60:	f7f6 f95c 	bl	800121c <__aeabi_fsub>
 800af64:	1c03      	adds	r3, r0, #0
 800af66:	1c1a      	adds	r2, r3, #0
 800af68:	2380      	movs	r3, #128	@ 0x80
 800af6a:	061b      	lsls	r3, r3, #24
 800af6c:	4053      	eors	r3, r2
 800af6e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af74:	490b      	ldr	r1, [pc, #44]	@ (800afa4 <GasIndexAlgorithm__mox_model__process+0x88>)
 800af76:	1c18      	adds	r0, r3, #0
 800af78:	f7f5 fca2 	bl	80008c0 <__aeabi_fadd>
 800af7c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af7e:	1c19      	adds	r1, r3, #0
 800af80:	1c20      	adds	r0, r4, #0
 800af82:	f7f5 fe27 	bl	8000bd4 <__aeabi_fdiv>
 800af86:	1c03      	adds	r3, r0, #0
 800af88:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800af8e:	1c19      	adds	r1, r3, #0
 800af90:	1c10      	adds	r0, r2, #0
 800af92:	f7f6 f805 	bl	8000fa0 <__aeabi_fmul>
 800af96:	1c03      	adds	r3, r0, #0
    }
}
 800af98:	1c18      	adds	r0, r3, #0
 800af9a:	46bd      	mov	sp, r7
 800af9c:	b003      	add	sp, #12
 800af9e:	bd90      	pop	{r4, r7, pc}
 800afa0:	44fa0000 	.word	0x44fa0000
 800afa4:	435c0000 	.word	0x435c0000

0800afa8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2180      	movs	r1, #128	@ 0x80
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2184      	movs	r1, #132	@ 0x84
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2188      	movs	r1, #136	@ 0x88
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	505a      	str	r2, [r3, r1]
}
 800afce:	46c0      	nop			@ (mov r8, r8)
 800afd0:	46bd      	mov	sp, r7
 800afd2:	b004      	add	sp, #16
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800afd8:	b590      	push	{r4, r7, lr}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2280      	movs	r2, #128	@ 0x80
 800afe6:	589c      	ldr	r4, [r3, r2]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2284      	movs	r2, #132	@ 0x84
 800afec:	589b      	ldr	r3, [r3, r2]
 800afee:	1c19      	adds	r1, r3, #0
 800aff0:	6838      	ldr	r0, [r7, #0]
 800aff2:	f7f6 f913 	bl	800121c <__aeabi_fsub>
 800aff6:	1c03      	adds	r3, r0, #0
 800aff8:	1c19      	adds	r1, r3, #0
 800affa:	1c20      	adds	r0, r4, #0
 800affc:	f7f5 ffd0 	bl	8000fa0 <__aeabi_fmul>
 800b000:	1c03      	adds	r3, r0, #0
 800b002:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b004:	4940      	ldr	r1, [pc, #256]	@ (800b108 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b006:	68b8      	ldr	r0, [r7, #8]
 800b008:	f7f5 fa92 	bl	8000530 <__aeabi_fcmplt>
 800b00c:	1e03      	subs	r3, r0, #0
 800b00e:	d001      	beq.n	800b014 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b010:	4b3e      	ldr	r3, [pc, #248]	@ (800b10c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b012:	e075      	b.n	800b100 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b014:	493e      	ldr	r1, [pc, #248]	@ (800b110 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b016:	68b8      	ldr	r0, [r7, #8]
 800b018:	f7f5 fa9e 	bl	8000558 <__aeabi_fcmpgt>
 800b01c:	1e03      	subs	r3, r0, #0
 800b01e:	d001      	beq.n	800b024 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b020:	2300      	movs	r3, #0
 800b022:	e06d      	b.n	800b100 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b024:	2100      	movs	r1, #0
 800b026:	6838      	ldr	r0, [r7, #0]
 800b028:	f7f5 faa0 	bl	800056c <__aeabi_fcmpge>
 800b02c:	1e03      	subs	r3, r0, #0
 800b02e:	d047      	beq.n	800b0c0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2288      	movs	r2, #136	@ 0x88
 800b034:	589b      	ldr	r3, [r3, r2]
 800b036:	21fe      	movs	r1, #254	@ 0xfe
 800b038:	0589      	lsls	r1, r1, #22
 800b03a:	1c18      	adds	r0, r3, #0
 800b03c:	f7f5 fa72 	bl	8000524 <__aeabi_fcmpeq>
 800b040:	1e03      	subs	r3, r0, #0
 800b042:	d00e      	beq.n	800b062 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	1c19      	adds	r1, r3, #0
 800b04a:	20fe      	movs	r0, #254	@ 0xfe
 800b04c:	0580      	lsls	r0, r0, #22
 800b04e:	f7f6 f8e5 	bl	800121c <__aeabi_fsub>
 800b052:	1c03      	adds	r3, r0, #0
 800b054:	492f      	ldr	r1, [pc, #188]	@ (800b114 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b056:	1c18      	adds	r0, r3, #0
 800b058:	f7f5 ffa2 	bl	8000fa0 <__aeabi_fmul>
 800b05c:	1c03      	adds	r3, r0, #0
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	e012      	b.n	800b088 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	492c      	ldr	r1, [pc, #176]	@ (800b118 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b068:	1c18      	adds	r0, r3, #0
 800b06a:	f7f5 ff99 	bl	8000fa0 <__aeabi_fmul>
 800b06e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b070:	1c19      	adds	r1, r3, #0
 800b072:	4826      	ldr	r0, [pc, #152]	@ (800b10c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b074:	f7f6 f8d2 	bl	800121c <__aeabi_fsub>
 800b078:	1c03      	adds	r3, r0, #0
 800b07a:	2181      	movs	r1, #129	@ 0x81
 800b07c:	05c9      	lsls	r1, r1, #23
 800b07e:	1c18      	adds	r0, r3, #0
 800b080:	f7f5 fda8 	bl	8000bd4 <__aeabi_fdiv>
 800b084:	1c03      	adds	r3, r0, #0
 800b086:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b088:	4920      	ldr	r1, [pc, #128]	@ (800b10c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7f5 fc18 	bl	80008c0 <__aeabi_fadd>
 800b090:	1c03      	adds	r3, r0, #0
 800b092:	1c1c      	adds	r4, r3, #0
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	1c18      	adds	r0, r3, #0
 800b098:	f017 fe56 	bl	8022d48 <expf>
 800b09c:	1c03      	adds	r3, r0, #0
 800b09e:	21fe      	movs	r1, #254	@ 0xfe
 800b0a0:	0589      	lsls	r1, r1, #22
 800b0a2:	1c18      	adds	r0, r3, #0
 800b0a4:	f7f5 fc0c 	bl	80008c0 <__aeabi_fadd>
 800b0a8:	1c03      	adds	r3, r0, #0
 800b0aa:	1c19      	adds	r1, r3, #0
 800b0ac:	1c20      	adds	r0, r4, #0
 800b0ae:	f7f5 fd91 	bl	8000bd4 <__aeabi_fdiv>
 800b0b2:	1c03      	adds	r3, r0, #0
 800b0b4:	68f9      	ldr	r1, [r7, #12]
 800b0b6:	1c18      	adds	r0, r3, #0
 800b0b8:	f7f6 f8b0 	bl	800121c <__aeabi_fsub>
 800b0bc:	1c03      	adds	r3, r0, #0
 800b0be:	e01f      	b.n	800b100 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2188      	movs	r1, #136	@ 0x88
 800b0c8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b0ca:	1c19      	adds	r1, r3, #0
 800b0cc:	1c10      	adds	r0, r2, #0
 800b0ce:	f7f5 fd81 	bl	8000bd4 <__aeabi_fdiv>
 800b0d2:	1c03      	adds	r3, r0, #0
 800b0d4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	1c18      	adds	r0, r3, #0
 800b0da:	f017 fe35 	bl	8022d48 <expf>
 800b0de:	1c03      	adds	r3, r0, #0
 800b0e0:	21fe      	movs	r1, #254	@ 0xfe
 800b0e2:	0589      	lsls	r1, r1, #22
 800b0e4:	1c18      	adds	r0, r3, #0
 800b0e6:	f7f5 fbeb 	bl	80008c0 <__aeabi_fadd>
 800b0ea:	1c03      	adds	r3, r0, #0
 800b0ec:	1c19      	adds	r1, r3, #0
 800b0ee:	4807      	ldr	r0, [pc, #28]	@ (800b10c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b0f0:	f7f5 fd70 	bl	8000bd4 <__aeabi_fdiv>
 800b0f4:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b0f6:	1c19      	adds	r1, r3, #0
 800b0f8:	1c20      	adds	r0, r4, #0
 800b0fa:	f7f5 ff51 	bl	8000fa0 <__aeabi_fmul>
 800b0fe:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b100:	1c18      	adds	r0, r3, #0
 800b102:	46bd      	mov	sp, r7
 800b104:	b005      	add	sp, #20
 800b106:	bd90      	pop	{r4, r7, pc}
 800b108:	c2480000 	.word	0xc2480000
 800b10c:	43fa0000 	.word	0x43fa0000
 800b110:	42480000 	.word	0x42480000
 800b114:	3f8041ab 	.word	0x3f8041ab
 800b118:	40a00000 	.word	0x40a00000

0800b11c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b11c:	b590      	push	{r4, r7, lr}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	4913      	ldr	r1, [pc, #76]	@ (800b17c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b12e:	1c18      	adds	r0, r3, #0
 800b130:	f7f5 fbc6 	bl	80008c0 <__aeabi_fadd>
 800b134:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b136:	1c19      	adds	r1, r3, #0
 800b138:	1c20      	adds	r0, r4, #0
 800b13a:	f7f5 fd4b 	bl	8000bd4 <__aeabi_fdiv>
 800b13e:	1c03      	adds	r3, r0, #0
 800b140:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	228c      	movs	r2, #140	@ 0x8c
 800b146:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	490b      	ldr	r1, [pc, #44]	@ (800b180 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b152:	1c18      	adds	r0, r3, #0
 800b154:	f7f5 fbb4 	bl	80008c0 <__aeabi_fadd>
 800b158:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b15a:	1c19      	adds	r1, r3, #0
 800b15c:	1c20      	adds	r0, r4, #0
 800b15e:	f7f5 fd39 	bl	8000bd4 <__aeabi_fdiv>
 800b162:	1c03      	adds	r3, r0, #0
 800b164:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2290      	movs	r2, #144	@ 0x90
 800b16a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2294      	movs	r2, #148	@ 0x94
 800b170:	2100      	movs	r1, #0
 800b172:	5499      	strb	r1, [r3, r2]
}
 800b174:	46c0      	nop			@ (mov r8, r8)
 800b176:	46bd      	mov	sp, r7
 800b178:	b003      	add	sp, #12
 800b17a:	bd90      	pop	{r4, r7, pc}
 800b17c:	41a00000 	.word	0x41a00000
 800b180:	43fa0000 	.word	0x43fa0000

0800b184 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2294      	movs	r2, #148	@ 0x94
 800b192:	5c9b      	ldrb	r3, [r3, r2]
 800b194:	2201      	movs	r2, #1
 800b196:	4053      	eors	r3, r2
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00f      	beq.n	800b1be <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2198      	movs	r1, #152	@ 0x98
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	219c      	movs	r1, #156	@ 0x9c
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	21a0      	movs	r1, #160	@ 0xa0
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2294      	movs	r2, #148	@ 0x94
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	228c      	movs	r2, #140	@ 0x8c
 800b1c2:	589b      	ldr	r3, [r3, r2]
 800b1c4:	1c19      	adds	r1, r3, #0
 800b1c6:	20fe      	movs	r0, #254	@ 0xfe
 800b1c8:	0580      	lsls	r0, r0, #22
 800b1ca:	f7f6 f827 	bl	800121c <__aeabi_fsub>
 800b1ce:	1c03      	adds	r3, r0, #0
 800b1d0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2298      	movs	r2, #152	@ 0x98
 800b1d6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b1d8:	1c19      	adds	r1, r3, #0
 800b1da:	f7f5 fee1 	bl	8000fa0 <__aeabi_fmul>
 800b1de:	1c03      	adds	r3, r0, #0
 800b1e0:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	228c      	movs	r2, #140	@ 0x8c
 800b1e6:	589b      	ldr	r3, [r3, r2]
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	1c18      	adds	r0, r3, #0
 800b1ec:	f7f5 fed8 	bl	8000fa0 <__aeabi_fmul>
 800b1f0:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b1f2:	1c19      	adds	r1, r3, #0
 800b1f4:	1c20      	adds	r0, r4, #0
 800b1f6:	f7f5 fb63 	bl	80008c0 <__aeabi_fadd>
 800b1fa:	1c03      	adds	r3, r0, #0
 800b1fc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2298      	movs	r2, #152	@ 0x98
 800b202:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2290      	movs	r2, #144	@ 0x90
 800b208:	589b      	ldr	r3, [r3, r2]
 800b20a:	1c19      	adds	r1, r3, #0
 800b20c:	20fe      	movs	r0, #254	@ 0xfe
 800b20e:	0580      	lsls	r0, r0, #22
 800b210:	f7f6 f804 	bl	800121c <__aeabi_fsub>
 800b214:	1c03      	adds	r3, r0, #0
 800b216:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	229c      	movs	r2, #156	@ 0x9c
 800b21c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b21e:	1c19      	adds	r1, r3, #0
 800b220:	f7f5 febe 	bl	8000fa0 <__aeabi_fmul>
 800b224:	1c03      	adds	r3, r0, #0
 800b226:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2290      	movs	r2, #144	@ 0x90
 800b22c:	589b      	ldr	r3, [r3, r2]
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	1c18      	adds	r0, r3, #0
 800b232:	f7f5 feb5 	bl	8000fa0 <__aeabi_fmul>
 800b236:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b238:	1c19      	adds	r1, r3, #0
 800b23a:	1c20      	adds	r0, r4, #0
 800b23c:	f7f5 fb40 	bl	80008c0 <__aeabi_fadd>
 800b240:	1c03      	adds	r3, r0, #0
 800b242:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	229c      	movs	r2, #156	@ 0x9c
 800b248:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2298      	movs	r2, #152	@ 0x98
 800b24e:	589a      	ldr	r2, [r3, r2]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	219c      	movs	r1, #156	@ 0x9c
 800b254:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b256:	1c19      	adds	r1, r3, #0
 800b258:	1c10      	adds	r0, r2, #0
 800b25a:	f7f5 ffdf 	bl	800121c <__aeabi_fsub>
 800b25e:	1c03      	adds	r3, r0, #0
 800b260:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b262:	2100      	movs	r1, #0
 800b264:	6978      	ldr	r0, [r7, #20]
 800b266:	f7f5 f963 	bl	8000530 <__aeabi_fcmplt>
 800b26a:	1e03      	subs	r3, r0, #0
 800b26c:	d004      	beq.n	800b278 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2280      	movs	r2, #128	@ 0x80
 800b272:	0612      	lsls	r2, r2, #24
 800b274:	4053      	eors	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b278:	4923      	ldr	r1, [pc, #140]	@ (800b308 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b27a:	6978      	ldr	r0, [r7, #20]
 800b27c:	f7f5 fe90 	bl	8000fa0 <__aeabi_fmul>
 800b280:	1c03      	adds	r3, r0, #0
 800b282:	1c18      	adds	r0, r3, #0
 800b284:	f017 fd60 	bl	8022d48 <expf>
 800b288:	1c03      	adds	r3, r0, #0
 800b28a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b28c:	491f      	ldr	r1, [pc, #124]	@ (800b30c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b28e:	6938      	ldr	r0, [r7, #16]
 800b290:	f7f5 fe86 	bl	8000fa0 <__aeabi_fmul>
 800b294:	1c03      	adds	r3, r0, #0
 800b296:	491e      	ldr	r1, [pc, #120]	@ (800b310 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b298:	1c18      	adds	r0, r3, #0
 800b29a:	f7f5 fb11 	bl	80008c0 <__aeabi_fadd>
 800b29e:	1c03      	adds	r3, r0, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685c      	ldr	r4, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	1c18      	adds	r0, r3, #0
 800b2ae:	f7f5 fb07 	bl	80008c0 <__aeabi_fadd>
 800b2b2:	1c03      	adds	r3, r0, #0
 800b2b4:	1c19      	adds	r1, r3, #0
 800b2b6:	1c20      	adds	r0, r4, #0
 800b2b8:	f7f5 fc8c 	bl	8000bd4 <__aeabi_fdiv>
 800b2bc:	1c03      	adds	r3, r0, #0
 800b2be:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b2c0:	68b9      	ldr	r1, [r7, #8]
 800b2c2:	20fe      	movs	r0, #254	@ 0xfe
 800b2c4:	0580      	lsls	r0, r0, #22
 800b2c6:	f7f5 ffa9 	bl	800121c <__aeabi_fsub>
 800b2ca:	1c03      	adds	r3, r0, #0
 800b2cc:	1c18      	adds	r0, r3, #0
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	22a0      	movs	r2, #160	@ 0xa0
 800b2d2:	589b      	ldr	r3, [r3, r2]
 800b2d4:	1c19      	adds	r1, r3, #0
 800b2d6:	f7f5 fe63 	bl	8000fa0 <__aeabi_fmul>
 800b2da:	1c03      	adds	r3, r0, #0
 800b2dc:	1c1c      	adds	r4, r3, #0
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	68b8      	ldr	r0, [r7, #8]
 800b2e2:	f7f5 fe5d 	bl	8000fa0 <__aeabi_fmul>
 800b2e6:	1c03      	adds	r3, r0, #0
 800b2e8:	1c19      	adds	r1, r3, #0
 800b2ea:	1c20      	adds	r0, r4, #0
 800b2ec:	f7f5 fae8 	bl	80008c0 <__aeabi_fadd>
 800b2f0:	1c03      	adds	r3, r0, #0
 800b2f2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	22a0      	movs	r2, #160	@ 0xa0
 800b2f8:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	22a0      	movs	r2, #160	@ 0xa0
 800b2fe:	589b      	ldr	r3, [r3, r2]
}
 800b300:	1c18      	adds	r0, r3, #0
 800b302:	46bd      	mov	sp, r7
 800b304:	b007      	add	sp, #28
 800b306:	bd90      	pop	{r4, r7, pc}
 800b308:	be4ccccd 	.word	0xbe4ccccd
 800b30c:	43f00000 	.word	0x43f00000
 800b310:	41a00000 	.word	0x41a00000

0800b314 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	000a      	movs	r2, r1
 800b31e:	1cbb      	adds	r3, r7, #2
 800b320:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b322:	230d      	movs	r3, #13
 800b324:	18fb      	adds	r3, r7, r3
 800b326:	22ff      	movs	r2, #255	@ 0xff
 800b328:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b32a:	230e      	movs	r3, #14
 800b32c:	18fb      	adds	r3, r7, r3
 800b32e:	2200      	movs	r2, #0
 800b330:	801a      	strh	r2, [r3, #0]
 800b332:	e037      	b.n	800b3a4 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b334:	230e      	movs	r3, #14
 800b336:	18fb      	adds	r3, r7, r3
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	18d3      	adds	r3, r2, r3
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	220d      	movs	r2, #13
 800b342:	18bb      	adds	r3, r7, r2
 800b344:	18ba      	adds	r2, r7, r2
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	404a      	eors	r2, r1
 800b34a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b34c:	230c      	movs	r3, #12
 800b34e:	18fb      	adds	r3, r7, r3
 800b350:	2208      	movs	r2, #8
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	e01b      	b.n	800b38e <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b356:	210d      	movs	r1, #13
 800b358:	187b      	adds	r3, r7, r1
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	b25b      	sxtb	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da09      	bge.n	800b376 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b362:	187b      	adds	r3, r7, r1
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	b25b      	sxtb	r3, r3
 800b36a:	2231      	movs	r2, #49	@ 0x31
 800b36c:	4053      	eors	r3, r2
 800b36e:	b25a      	sxtb	r2, r3
 800b370:	187b      	adds	r3, r7, r1
 800b372:	701a      	strb	r2, [r3, #0]
 800b374:	e005      	b.n	800b382 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b376:	230d      	movs	r3, #13
 800b378:	18fa      	adds	r2, r7, r3
 800b37a:	18fb      	adds	r3, r7, r3
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	18db      	adds	r3, r3, r3
 800b380:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b382:	220c      	movs	r2, #12
 800b384:	18bb      	adds	r3, r7, r2
 800b386:	18ba      	adds	r2, r7, r2
 800b388:	7812      	ldrb	r2, [r2, #0]
 800b38a:	3a01      	subs	r2, #1
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	230c      	movs	r3, #12
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1de      	bne.n	800b356 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b398:	220e      	movs	r2, #14
 800b39a:	18bb      	adds	r3, r7, r2
 800b39c:	18ba      	adds	r2, r7, r2
 800b39e:	8812      	ldrh	r2, [r2, #0]
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	801a      	strh	r2, [r3, #0]
 800b3a4:	230e      	movs	r3, #14
 800b3a6:	18fa      	adds	r2, r7, r3
 800b3a8:	1cbb      	adds	r3, r7, #2
 800b3aa:	8812      	ldrh	r2, [r2, #0]
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d3c0      	bcc.n	800b334 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b3b2:	230d      	movs	r3, #13
 800b3b4:	18fb      	adds	r3, r7, r3
 800b3b6:	781b      	ldrb	r3, [r3, #0]
}
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	b004      	add	sp, #16
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	0008      	movs	r0, r1
 800b3ca:	0011      	movs	r1, r2
 800b3cc:	1cbb      	adds	r3, r7, #2
 800b3ce:	1c02      	adds	r2, r0, #0
 800b3d0:	801a      	strh	r2, [r3, #0]
 800b3d2:	1c7b      	adds	r3, r7, #1
 800b3d4:	1c0a      	adds	r2, r1, #0
 800b3d6:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b3d8:	1cbb      	adds	r3, r7, #2
 800b3da:	881a      	ldrh	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	0011      	movs	r1, r2
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	f7ff ff97 	bl	800b314 <sensirion_i2c_generate_crc>
 800b3e6:	0003      	movs	r3, r0
 800b3e8:	001a      	movs	r2, r3
 800b3ea:	1c7b      	adds	r3, r7, #1
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d001      	beq.n	800b3f6 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e000      	b.n	800b3f8 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	0018      	movs	r0, r3
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	b002      	add	sp, #8
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	0008      	movs	r0, r1
 800b40a:	0011      	movs	r1, r2
 800b40c:	1cbb      	adds	r3, r7, #2
 800b40e:	1c02      	adds	r2, r0, #0
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	003b      	movs	r3, r7
 800b414:	1c0a      	adds	r2, r1, #0
 800b416:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b418:	003b      	movs	r3, r7
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	0a1b      	lsrs	r3, r3, #8
 800b41e:	b299      	uxth	r1, r3
 800b420:	1cbb      	adds	r3, r7, #2
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	1cba      	adds	r2, r7, #2
 800b426:	1c58      	adds	r0, r3, #1
 800b428:	8010      	strh	r0, [r2, #0]
 800b42a:	001a      	movs	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	b2ca      	uxtb	r2, r1
 800b432:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b434:	1cbb      	adds	r3, r7, #2
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	1cba      	adds	r2, r7, #2
 800b43a:	1c59      	adds	r1, r3, #1
 800b43c:	8011      	strh	r1, [r2, #0]
 800b43e:	001a      	movs	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	189b      	adds	r3, r3, r2
 800b444:	003a      	movs	r2, r7
 800b446:	8812      	ldrh	r2, [r2, #0]
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
    return offset;
 800b44c:	1cbb      	adds	r3, r7, #2
 800b44e:	881b      	ldrh	r3, [r3, #0]
}
 800b450:	0018      	movs	r0, r3
 800b452:	46bd      	mov	sp, r7
 800b454:	b002      	add	sp, #8
 800b456:	bd80      	pop	{r7, pc}

0800b458 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b458:	b590      	push	{r4, r7, lr}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	0008      	movs	r0, r1
 800b462:	0011      	movs	r1, r2
 800b464:	1cbb      	adds	r3, r7, #2
 800b466:	1c02      	adds	r2, r0, #0
 800b468:	801a      	strh	r2, [r3, #0]
 800b46a:	003b      	movs	r3, r7
 800b46c:	1c0a      	adds	r2, r1, #0
 800b46e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b470:	003b      	movs	r3, r7
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	b299      	uxth	r1, r3
 800b478:	1cbb      	adds	r3, r7, #2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	1cba      	adds	r2, r7, #2
 800b47e:	1c58      	adds	r0, r3, #1
 800b480:	8010      	strh	r0, [r2, #0]
 800b482:	001a      	movs	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	189b      	adds	r3, r3, r2
 800b488:	b2ca      	uxtb	r2, r1
 800b48a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b48c:	1cbb      	adds	r3, r7, #2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	1cba      	adds	r2, r7, #2
 800b492:	1c59      	adds	r1, r3, #1
 800b494:	8011      	strh	r1, [r2, #0]
 800b496:	001a      	movs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	189b      	adds	r3, r3, r2
 800b49c:	003a      	movs	r2, r7
 800b49e:	8812      	ldrh	r2, [r2, #0]
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b4a4:	1cbb      	adds	r3, r7, #2
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	3b02      	subs	r3, #2
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b4ae:	1cbb      	adds	r3, r7, #2
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	18d4      	adds	r4, r2, r3
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	f7ff ff2c 	bl	800b314 <sensirion_i2c_generate_crc>
 800b4bc:	0003      	movs	r3, r0
 800b4be:	7023      	strb	r3, [r4, #0]
    offset++;
 800b4c0:	1cbb      	adds	r3, r7, #2
 800b4c2:	881a      	ldrh	r2, [r3, #0]
 800b4c4:	1cbb      	adds	r3, r7, #2
 800b4c6:	3201      	adds	r2, #1
 800b4c8:	801a      	strh	r2, [r3, #0]

    return offset;
 800b4ca:	1cbb      	adds	r3, r7, #2
 800b4cc:	881b      	ldrh	r3, [r3, #0]
}
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	b003      	add	sp, #12
 800b4d4:	bd90      	pop	{r4, r7, pc}

0800b4d6 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	0008      	movs	r0, r1
 800b4e0:	0011      	movs	r1, r2
 800b4e2:	1cbb      	adds	r3, r7, #2
 800b4e4:	1c02      	adds	r2, r0, #0
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	003b      	movs	r3, r7
 800b4ea:	1c0a      	adds	r2, r1, #0
 800b4ec:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b4ee:	003b      	movs	r3, r7
 800b4f0:	881a      	ldrh	r2, [r3, #0]
 800b4f2:	1cbb      	adds	r3, r7, #2
 800b4f4:	8819      	ldrh	r1, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f7ff ffad 	bl	800b458 <sensirion_i2c_add_uint16_t_to_buffer>
 800b4fe:	0003      	movs	r3, r0
}
 800b500:	0018      	movs	r0, r3
 800b502:	46bd      	mov	sp, r7
 800b504:	b002      	add	sp, #8
 800b506:	bd80      	pop	{r7, pc}

0800b508 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6039      	str	r1, [r7, #0]
 800b510:	0011      	movs	r1, r2
 800b512:	1dfb      	adds	r3, r7, #7
 800b514:	1c02      	adds	r2, r0, #0
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	1d3b      	adds	r3, r7, #4
 800b51a:	1c0a      	adds	r2, r1, #0
 800b51c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b51e:	1d3b      	adds	r3, r7, #4
 800b520:	881a      	ldrh	r2, [r3, #0]
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	1dfb      	adds	r3, r7, #7
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	0018      	movs	r0, r3
 800b52a:	f7fe fa01 	bl	8009930 <sensirion_i2c_hal_write>
 800b52e:	0003      	movs	r3, r0
}
 800b530:	0018      	movs	r0, r3
 800b532:	46bd      	mov	sp, r7
 800b534:	b002      	add	sp, #8
 800b536:	bd80      	pop	{r7, pc}

0800b538 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b538:	b5b0      	push	{r4, r5, r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6039      	str	r1, [r7, #0]
 800b540:	0011      	movs	r1, r2
 800b542:	1dfb      	adds	r3, r7, #7
 800b544:	1c02      	adds	r2, r0, #0
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	1d3b      	adds	r3, r7, #4
 800b54a:	1c0a      	adds	r2, r1, #0
 800b54c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b54e:	1d3b      	adds	r3, r7, #4
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	085b      	lsrs	r3, r3, #1
 800b554:	b29b      	uxth	r3, r3
 800b556:	220a      	movs	r2, #10
 800b558:	18ba      	adds	r2, r7, r2
 800b55a:	1c19      	adds	r1, r3, #0
 800b55c:	1c0b      	adds	r3, r1, #0
 800b55e:	18db      	adds	r3, r3, r3
 800b560:	185b      	adds	r3, r3, r1
 800b562:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b564:	1d3b      	adds	r3, r7, #4
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	2201      	movs	r2, #1
 800b56a:	4013      	ands	r3, r2
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b572:	2304      	movs	r3, #4
 800b574:	e06b      	b.n	800b64e <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b576:	230a      	movs	r3, #10
 800b578:	18fb      	adds	r3, r7, r3
 800b57a:	881a      	ldrh	r2, [r3, #0]
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	1dfb      	adds	r3, r7, #7
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	0018      	movs	r0, r3
 800b584:	f7fe f9b4 	bl	80098f0 <sensirion_i2c_hal_read>
 800b588:	0003      	movs	r3, r0
 800b58a:	001a      	movs	r2, r3
 800b58c:	2108      	movs	r1, #8
 800b58e:	187b      	adds	r3, r7, r1
 800b590:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b592:	000a      	movs	r2, r1
 800b594:	18bb      	adds	r3, r7, r2
 800b596:	2100      	movs	r1, #0
 800b598:	5e5b      	ldrsh	r3, [r3, r1]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b59e:	18bb      	adds	r3, r7, r2
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	5e9b      	ldrsh	r3, [r3, r2]
 800b5a4:	e053      	b.n	800b64e <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b5a6:	230e      	movs	r3, #14
 800b5a8:	18fb      	adds	r3, r7, r3
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	230c      	movs	r3, #12
 800b5b0:	18fb      	adds	r3, r7, r3
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	801a      	strh	r2, [r3, #0]
 800b5b6:	e041      	b.n	800b63c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b5b8:	210e      	movs	r1, #14
 800b5ba:	187b      	adds	r3, r7, r1
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b5c2:	187b      	adds	r3, r7, r1
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	3302      	adds	r3, #2
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	001a      	movs	r2, r3
 800b5d0:	2102      	movs	r1, #2
 800b5d2:	f7ff fef5 	bl	800b3c0 <sensirion_i2c_check_crc>
 800b5d6:	0003      	movs	r3, r0
 800b5d8:	001a      	movs	r2, r3
 800b5da:	2108      	movs	r1, #8
 800b5dc:	187b      	adds	r3, r7, r1
 800b5de:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b5e0:	000a      	movs	r2, r1
 800b5e2:	18bb      	adds	r3, r7, r2
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	5e5b      	ldrsh	r3, [r3, r1]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b5ec:	18bb      	adds	r3, r7, r2
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	5e9b      	ldrsh	r3, [r3, r2]
 800b5f2:	e02c      	b.n	800b64e <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b5f4:	240e      	movs	r4, #14
 800b5f6:	193b      	adds	r3, r7, r4
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	18d2      	adds	r2, r2, r3
 800b5fe:	250c      	movs	r5, #12
 800b600:	197b      	adds	r3, r7, r5
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	1979      	adds	r1, r7, r5
 800b606:	1c58      	adds	r0, r3, #1
 800b608:	8008      	strh	r0, [r1, #0]
 800b60a:	0019      	movs	r1, r3
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	185b      	adds	r3, r3, r1
 800b610:	7812      	ldrb	r2, [r2, #0]
 800b612:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b614:	193b      	adds	r3, r7, r4
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	3301      	adds	r3, #1
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	18d2      	adds	r2, r2, r3
 800b61e:	197b      	adds	r3, r7, r5
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	1979      	adds	r1, r7, r5
 800b624:	1c58      	adds	r0, r3, #1
 800b626:	8008      	strh	r0, [r1, #0]
 800b628:	0019      	movs	r1, r3
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	185b      	adds	r3, r3, r1
 800b62e:	7812      	ldrb	r2, [r2, #0]
 800b630:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b632:	193b      	adds	r3, r7, r4
 800b634:	193a      	adds	r2, r7, r4
 800b636:	8812      	ldrh	r2, [r2, #0]
 800b638:	3203      	adds	r2, #3
 800b63a:	801a      	strh	r2, [r3, #0]
 800b63c:	230e      	movs	r3, #14
 800b63e:	18fa      	adds	r2, r7, r3
 800b640:	230a      	movs	r3, #10
 800b642:	18fb      	adds	r3, r7, r3
 800b644:	8812      	ldrh	r2, [r2, #0]
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d3b5      	bcc.n	800b5b8 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	0018      	movs	r0, r3
 800b650:	46bd      	mov	sp, r7
 800b652:	b004      	add	sp, #16
 800b654:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b658 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6039      	str	r1, [r7, #0]
 800b660:	0011      	movs	r1, r2
 800b662:	1dfb      	adds	r3, r7, #7
 800b664:	1c02      	adds	r2, r0, #0
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	1dbb      	adds	r3, r7, #6
 800b66a:	1c0a      	adds	r2, r1, #0
 800b66c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b66e:	4b08      	ldr	r3, [pc, #32]	@ (800b690 <ReadRegister+0x38>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d008      	beq.n	800b688 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b676:	4b06      	ldr	r3, [pc, #24]	@ (800b690 <ReadRegister+0x38>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	1dba      	adds	r2, r7, #6
 800b67c:	7814      	ldrb	r4, [r2, #0]
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	1dfa      	adds	r2, r7, #7
 800b682:	7810      	ldrb	r0, [r2, #0]
 800b684:	0022      	movs	r2, r4
 800b686:	4798      	blx	r3
  }
}
 800b688:	46c0      	nop			@ (mov r8, r8)
 800b68a:	46bd      	mov	sp, r7
 800b68c:	b003      	add	sp, #12
 800b68e:	bd90      	pop	{r4, r7, pc}
 800b690:	2000108c 	.word	0x2000108c

0800b694 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6039      	str	r1, [r7, #0]
 800b69c:	0011      	movs	r1, r2
 800b69e:	1dfb      	adds	r3, r7, #7
 800b6a0:	1c02      	adds	r2, r0, #0
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	1dbb      	adds	r3, r7, #6
 800b6a6:	1c0a      	adds	r2, r1, #0
 800b6a8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b6aa:	4b08      	ldr	r3, [pc, #32]	@ (800b6cc <WriteRegister+0x38>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d008      	beq.n	800b6c4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b6b2:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <WriteRegister+0x38>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	1dba      	adds	r2, r7, #6
 800b6b8:	7814      	ldrb	r4, [r2, #0]
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	1dfa      	adds	r2, r7, #7
 800b6be:	7810      	ldrb	r0, [r2, #0]
 800b6c0:	0022      	movs	r2, r4
 800b6c2:	4798      	blx	r3
  }
}
 800b6c4:	46c0      	nop			@ (mov r8, r8)
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	b003      	add	sp, #12
 800b6ca:	bd90      	pop	{r4, r7, pc}
 800b6cc:	20001090 	.word	0x20001090

0800b6d0 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b6d8:	f003 fb3c 	bl	800ed54 <HAL_GetTick>
 800b6dc:	0002      	movs	r2, r0
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	4b03      	ldr	r3, [pc, #12]	@ (800b6f0 <setSGP40TimeStamp+0x20>)
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	46c0      	nop			@ (mov r8, r8)
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	b002      	add	sp, #8
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	46c0      	nop			@ (mov r8, r8)
 800b6f0:	200010a0 	.word	0x200010a0

0800b6f4 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b6f8:	4b02      	ldr	r3, [pc, #8]	@ (800b704 <ResetSGP40samplecounter+0x10>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	701a      	strb	r2, [r3, #0]
}
 800b6fe:	46c0      	nop			@ (mov r8, r8)
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	2000109e 	.word	0x2000109e

0800b708 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b712:	4b07      	ldr	r3, [pc, #28]	@ (800b730 <SGP_Init+0x28>)
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b718:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <SGP_Init+0x2c>)
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b71e:	4b06      	ldr	r3, [pc, #24]	@ (800b738 <SGP_Init+0x30>)
 800b720:	2100      	movs	r1, #0
 800b722:	0018      	movs	r0, r3
 800b724:	f7fe ff70 	bl	800a608 <GasIndexAlgorithm_init>
}
 800b728:	46c0      	nop			@ (mov r8, r8)
 800b72a:	46bd      	mov	sp, r7
 800b72c:	b002      	add	sp, #8
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	2000108c 	.word	0x2000108c
 800b734:	20001090 	.word	0x20001090
 800b738:	200010a8 	.word	0x200010a8

0800b73c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b740:	4b07      	ldr	r3, [pc, #28]	@ (800b760 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d004      	beq.n	800b752 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b748:	4b06      	ldr	r3, [pc, #24]	@ (800b764 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b74a:	22fe      	movs	r2, #254	@ 0xfe
 800b74c:	0592      	lsls	r2, r2, #22
 800b74e:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b750:	e002      	b.n	800b758 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b752:	4b04      	ldr	r3, [pc, #16]	@ (800b764 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b754:	4a04      	ldr	r2, [pc, #16]	@ (800b768 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b756:	605a      	str	r2, [r3, #4]
}
 800b758:	46c0      	nop			@ (mov r8, r8)
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	20001ff9 	.word	0x20001ff9
 800b764:	200010a8 	.word	0x200010a8
 800b768:	44610000 	.word	0x44610000

0800b76c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b770:	4b13      	ldr	r3, [pc, #76]	@ (800b7c0 <SGP_StartMeasurement+0x54>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00d      	beq.n	800b794 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b778:	4b12      	ldr	r3, [pc, #72]	@ (800b7c4 <SGP_StartMeasurement+0x58>)
 800b77a:	2208      	movs	r2, #8
 800b77c:	0019      	movs	r1, r3
 800b77e:	2059      	movs	r0, #89	@ 0x59
 800b780:	f7ff ff88 	bl	800b694 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b784:	f003 fae6 	bl	800ed54 <HAL_GetTick>
 800b788:	0003      	movs	r3, r0
 800b78a:	331e      	adds	r3, #30
 800b78c:	001a      	movs	r2, r3
 800b78e:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c8 <SGP_StartMeasurement+0x5c>)
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	e00c      	b.n	800b7ae <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b794:	4b0d      	ldr	r3, [pc, #52]	@ (800b7cc <SGP_StartMeasurement+0x60>)
 800b796:	2208      	movs	r2, #8
 800b798:	0019      	movs	r1, r3
 800b79a:	2059      	movs	r0, #89	@ 0x59
 800b79c:	f7ff ff7a 	bl	800b694 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b7a0:	f003 fad8 	bl	800ed54 <HAL_GetTick>
 800b7a4:	0003      	movs	r3, r0
 800b7a6:	33aa      	adds	r3, #170	@ 0xaa
 800b7a8:	001a      	movs	r2, r3
 800b7aa:	4b09      	ldr	r3, [pc, #36]	@ (800b7d0 <SGP_StartMeasurement+0x64>)
 800b7ac:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b7ae:	4b09      	ldr	r3, [pc, #36]	@ (800b7d4 <SGP_StartMeasurement+0x68>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b7b4:	4b08      	ldr	r3, [pc, #32]	@ (800b7d8 <SGP_StartMeasurement+0x6c>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20001150 	.word	0x20001150
 800b7c4:	200000a0 	.word	0x200000a0
 800b7c8:	200000b4 	.word	0x200000b4
 800b7cc:	20000098 	.word	0x20000098
 800b7d0:	200000ac 	.word	0x200000ac
 800b7d4:	200010a4 	.word	0x200010a4
 800b7d8:	200010a5 	.word	0x200010a5

0800b7dc <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b7e0:	4b04      	ldr	r3, [pc, #16]	@ (800b7f4 <SGP_HeatedUp+0x18>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	f002 fe19 	bl	800e41c <TimestampIsReached>
 800b7ea:	0003      	movs	r3, r0
}
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	46c0      	nop			@ (mov r8, r8)
 800b7f4:	200000ac 	.word	0x200000ac

0800b7f8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b7fc:	4b04      	ldr	r3, [pc, #16]	@ (800b810 <SGP_MeasurementReady+0x18>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	0018      	movs	r0, r3
 800b802:	f002 fe0b 	bl	800e41c <TimestampIsReached>
 800b806:	0003      	movs	r3, r0
}
 800b808:	0018      	movs	r0, r3
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	46c0      	nop			@ (mov r8, r8)
 800b810:	200000b4 	.word	0x200000b4

0800b814 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b818:	4b04      	ldr	r3, [pc, #16]	@ (800b82c <SGP_MeasurementDone+0x18>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	0018      	movs	r0, r3
 800b81e:	f002 fdfd 	bl	800e41c <TimestampIsReached>
 800b822:	0003      	movs	r3, r0
}
 800b824:	0018      	movs	r0, r3
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	46c0      	nop			@ (mov r8, r8)
 800b82c:	200000b0 	.word	0x200000b0

0800b830 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b834:	4b04      	ldr	r3, [pc, #16]	@ (800b848 <SGP_TurnHeaterOff+0x18>)
 800b836:	2202      	movs	r2, #2
 800b838:	0019      	movs	r1, r3
 800b83a:	2059      	movs	r0, #89	@ 0x59
 800b83c:	f7ff ff2a 	bl	800b694 <WriteRegister>
}
 800b840:	46c0      	nop			@ (mov r8, r8)
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	46c0      	nop			@ (mov r8, r8)
 800b848:	20000090 	.word	0x20000090

0800b84c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b84c:	b5b0      	push	{r4, r5, r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af02      	add	r7, sp, #8
 800b852:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b854:	f7ff ffc2 	bl	800b7dc <SGP_HeatedUp>
 800b858:	1e03      	subs	r3, r0, #0
 800b85a:	d032      	beq.n	800b8c2 <SGP_GetMeasurementValues+0x76>
 800b85c:	4bd4      	ldr	r3, [pc, #848]	@ (800bbb0 <SGP_GetMeasurementValues+0x364>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2201      	movs	r2, #1
 800b862:	4053      	eors	r3, r2
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d02b      	beq.n	800b8c2 <SGP_GetMeasurementValues+0x76>
 800b86a:	4bd2      	ldr	r3, [pc, #840]	@ (800bbb4 <SGP_GetMeasurementValues+0x368>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2201      	movs	r2, #1
 800b870:	4053      	eors	r3, r2
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d024      	beq.n	800b8c2 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800b878:	4bcd      	ldr	r3, [pc, #820]	@ (800bbb0 <SGP_GetMeasurementValues+0x364>)
 800b87a:	2201      	movs	r2, #1
 800b87c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b87e:	4bce      	ldr	r3, [pc, #824]	@ (800bbb8 <SGP_GetMeasurementValues+0x36c>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00d      	beq.n	800b8a2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b886:	4bcd      	ldr	r3, [pc, #820]	@ (800bbbc <SGP_GetMeasurementValues+0x370>)
 800b888:	2208      	movs	r2, #8
 800b88a:	0019      	movs	r1, r3
 800b88c:	2059      	movs	r0, #89	@ 0x59
 800b88e:	f7ff ff01 	bl	800b694 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b892:	f003 fa5f 	bl	800ed54 <HAL_GetTick>
 800b896:	0003      	movs	r3, r0
 800b898:	331e      	adds	r3, #30
 800b89a:	001a      	movs	r2, r3
 800b89c:	4bc8      	ldr	r3, [pc, #800]	@ (800bbc0 <SGP_GetMeasurementValues+0x374>)
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	e00c      	b.n	800b8bc <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8a2:	4bc8      	ldr	r3, [pc, #800]	@ (800bbc4 <SGP_GetMeasurementValues+0x378>)
 800b8a4:	2208      	movs	r2, #8
 800b8a6:	0019      	movs	r1, r3
 800b8a8:	2059      	movs	r0, #89	@ 0x59
 800b8aa:	f7ff fef3 	bl	800b694 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b8ae:	f003 fa51 	bl	800ed54 <HAL_GetTick>
 800b8b2:	0003      	movs	r3, r0
 800b8b4:	331e      	adds	r3, #30
 800b8b6:	001a      	movs	r2, r3
 800b8b8:	4bc1      	ldr	r3, [pc, #772]	@ (800bbc0 <SGP_GetMeasurementValues+0x374>)
 800b8ba:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b8bc:	4bbd      	ldr	r3, [pc, #756]	@ (800bbb4 <SGP_GetMeasurementValues+0x368>)
 800b8be:	2201      	movs	r2, #1
 800b8c0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b8c2:	4bbb      	ldr	r3, [pc, #748]	@ (800bbb0 <SGP_GetMeasurementValues+0x364>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d100      	bne.n	800b8cc <SGP_GetMeasurementValues+0x80>
 800b8ca:	e1a9      	b.n	800bc20 <SGP_GetMeasurementValues+0x3d4>
 800b8cc:	f7ff ff94 	bl	800b7f8 <SGP_MeasurementReady>
 800b8d0:	1e03      	subs	r3, r0, #0
 800b8d2:	d100      	bne.n	800b8d6 <SGP_GetMeasurementValues+0x8a>
 800b8d4:	e1a4      	b.n	800bc20 <SGP_GetMeasurementValues+0x3d4>
 800b8d6:	4bbc      	ldr	r3, [pc, #752]	@ (800bbc8 <SGP_GetMeasurementValues+0x37c>)
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	4053      	eors	r3, r2
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d100      	bne.n	800b8e6 <SGP_GetMeasurementValues+0x9a>
 800b8e4:	e19c      	b.n	800bc20 <SGP_GetMeasurementValues+0x3d4>
    MeasurementIsReady = true;
 800b8e6:	4bb8      	ldr	r3, [pc, #736]	@ (800bbc8 <SGP_GetMeasurementValues+0x37c>)
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b8ec:	4bb7      	ldr	r3, [pc, #732]	@ (800bbcc <SGP_GetMeasurementValues+0x380>)
 800b8ee:	2203      	movs	r2, #3
 800b8f0:	0019      	movs	r1, r3
 800b8f2:	2059      	movs	r0, #89	@ 0x59
 800b8f4:	f7ff feb0 	bl	800b658 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b8f8:	4bb4      	ldr	r3, [pc, #720]	@ (800bbcc <SGP_GetMeasurementValues+0x380>)
 800b8fa:	2203      	movs	r2, #3
 800b8fc:	2103      	movs	r1, #3
 800b8fe:	0018      	movs	r0, r3
 800b900:	f000 f9f4 	bl	800bcec <CheckCRC>
 800b904:	0003      	movs	r3, r0
 800b906:	001a      	movs	r2, r3
 800b908:	2301      	movs	r3, #1
 800b90a:	4053      	eors	r3, r2
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d02a      	beq.n	800b968 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b912:	4aaf      	ldr	r2, [pc, #700]	@ (800bbd0 <SGP_GetMeasurementValues+0x384>)
 800b914:	4baf      	ldr	r3, [pc, #700]	@ (800bbd4 <SGP_GetMeasurementValues+0x388>)
 800b916:	0019      	movs	r1, r3
 800b918:	2001      	movs	r0, #1
 800b91a:	f002 fdd5 	bl	800e4c8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b91e:	4aae      	ldr	r2, [pc, #696]	@ (800bbd8 <SGP_GetMeasurementValues+0x38c>)
 800b920:	4bae      	ldr	r3, [pc, #696]	@ (800bbdc <SGP_GetMeasurementValues+0x390>)
 800b922:	0019      	movs	r1, r3
 800b924:	2002      	movs	r0, #2
 800b926:	f002 fdcf 	bl	800e4c8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b92a:	230f      	movs	r3, #15
 800b92c:	18fb      	adds	r3, r7, r3
 800b92e:	2200      	movs	r2, #0
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	e012      	b.n	800b95a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b934:	240f      	movs	r4, #15
 800b936:	193b      	adds	r3, r7, r4
 800b938:	7818      	ldrb	r0, [r3, #0]
 800b93a:	193b      	adds	r3, r7, r4
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	4aa3      	ldr	r2, [pc, #652]	@ (800bbcc <SGP_GetMeasurementValues+0x380>)
 800b940:	5cd3      	ldrb	r3, [r2, r3]
 800b942:	4aa7      	ldr	r2, [pc, #668]	@ (800bbe0 <SGP_GetMeasurementValues+0x394>)
 800b944:	49a7      	ldr	r1, [pc, #668]	@ (800bbe4 <SGP_GetMeasurementValues+0x398>)
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	0003      	movs	r3, r0
 800b94a:	2003      	movs	r0, #3
 800b94c:	f002 fdbc 	bl	800e4c8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b950:	193b      	adds	r3, r7, r4
 800b952:	781a      	ldrb	r2, [r3, #0]
 800b954:	193b      	adds	r3, r7, r4
 800b956:	3201      	adds	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	230f      	movs	r3, #15
 800b95c:	18fb      	adds	r3, r7, r3
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d9e7      	bls.n	800b934 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b964:	2300      	movs	r3, #0
 800b966:	e173      	b.n	800bc50 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b968:	f003 f9f4 	bl	800ed54 <HAL_GetTick>
 800b96c:	0003      	movs	r3, r0
 800b96e:	22fa      	movs	r2, #250	@ 0xfa
 800b970:	0092      	lsls	r2, r2, #2
 800b972:	189a      	adds	r2, r3, r2
 800b974:	4b9c      	ldr	r3, [pc, #624]	@ (800bbe8 <SGP_GetMeasurementValues+0x39c>)
 800b976:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b978:	f7ff ff5a 	bl	800b830 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b97c:	4b9b      	ldr	r3, [pc, #620]	@ (800bbec <SGP_GetMeasurementValues+0x3a0>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	b2da      	uxtb	r2, r3
 800b984:	4b99      	ldr	r3, [pc, #612]	@ (800bbec <SGP_GetMeasurementValues+0x3a0>)
 800b986:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b988:	4b98      	ldr	r3, [pc, #608]	@ (800bbec <SGP_GetMeasurementValues+0x3a0>)
 800b98a:	781a      	ldrb	r2, [r3, #0]
 800b98c:	4b98      	ldr	r3, [pc, #608]	@ (800bbf0 <SGP_GetMeasurementValues+0x3a4>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d200      	bcs.n	800b996 <SGP_GetMeasurementValues+0x14a>
 800b994:	e144      	b.n	800bc20 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b996:	4b8d      	ldr	r3, [pc, #564]	@ (800bbcc <SGP_GetMeasurementValues+0x380>)
 800b998:	785b      	ldrb	r3, [r3, #1]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	b21a      	sxth	r2, r3
 800b99e:	4b8b      	ldr	r3, [pc, #556]	@ (800bbcc <SGP_GetMeasurementValues+0x380>)
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b21b      	sxth	r3, r3
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b21a      	sxth	r2, r3
 800b9a8:	240c      	movs	r4, #12
 800b9aa:	193b      	adds	r3, r7, r4
 800b9ac:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b9b2:	193b      	adds	r3, r7, r4
 800b9b4:	8819      	ldrh	r1, [r3, #0]
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	18fa      	adds	r2, r7, r3
 800b9ba:	4b8e      	ldr	r3, [pc, #568]	@ (800bbf4 <SGP_GetMeasurementValues+0x3a8>)
 800b9bc:	0018      	movs	r0, r3
 800b9be:	f7fe fe87 	bl	800a6d0 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b9c2:	4b8d      	ldr	r3, [pc, #564]	@ (800bbf8 <SGP_GetMeasurementValues+0x3ac>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	4b8b      	ldr	r3, [pc, #556]	@ (800bbf8 <SGP_GetMeasurementValues+0x3ac>)
 800b9cc:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b9ce:	4b8a      	ldr	r3, [pc, #552]	@ (800bbf8 <SGP_GetMeasurementValues+0x3ac>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d10d      	bne.n	800b9f2 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b9d6:	193b      	adds	r3, r7, r4
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	4a88      	ldr	r2, [pc, #544]	@ (800bbfc <SGP_GetMeasurementValues+0x3b0>)
 800b9dc:	4981      	ldr	r1, [pc, #516]	@ (800bbe4 <SGP_GetMeasurementValues+0x398>)
 800b9de:	2003      	movs	r0, #3
 800b9e0:	f002 fd72 	bl	800e4c8 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	4a86      	ldr	r2, [pc, #536]	@ (800bc00 <SGP_GetMeasurementValues+0x3b4>)
 800b9e8:	497e      	ldr	r1, [pc, #504]	@ (800bbe4 <SGP_GetMeasurementValues+0x398>)
 800b9ea:	2003      	movs	r0, #3
 800b9ec:	f002 fd6c 	bl	800e4c8 <CreateLine>
 800b9f0:	e006      	b.n	800ba00 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b9f2:	4b81      	ldr	r3, [pc, #516]	@ (800bbf8 <SGP_GetMeasurementValues+0x3ac>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b0b      	cmp	r3, #11
 800b9f8:	d102      	bne.n	800ba00 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b9fa:	4b7f      	ldr	r3, [pc, #508]	@ (800bbf8 <SGP_GetMeasurementValues+0x3ac>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dd5a      	ble.n	800bac4 <SGP_GetMeasurementValues+0x278>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b64      	cmp	r3, #100	@ 0x64
 800ba14:	dc56      	bgt.n	800bac4 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	f7f7 fcd0 	bl	80033c0 <__aeabi_i2d>
 800ba20:	2200      	movs	r2, #0
 800ba22:	4b78      	ldr	r3, [pc, #480]	@ (800bc04 <SGP_GetMeasurementValues+0x3b8>)
 800ba24:	f7f6 f9c6 	bl	8001db4 <__aeabi_ddiv>
 800ba28:	0002      	movs	r2, r0
 800ba2a:	000b      	movs	r3, r1
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	4976      	ldr	r1, [pc, #472]	@ (800bc08 <SGP_GetMeasurementValues+0x3bc>)
 800ba30:	f7f7 f8cc 	bl	8002bcc <__aeabi_dsub>
 800ba34:	0002      	movs	r2, r0
 800ba36:	000b      	movs	r3, r1
 800ba38:	0014      	movs	r4, r2
 800ba3a:	001d      	movs	r5, r3
 800ba3c:	4b73      	ldr	r3, [pc, #460]	@ (800bc0c <SGP_GetMeasurementValues+0x3c0>)
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	0018      	movs	r0, r3
 800ba42:	f7f7 fcbd 	bl	80033c0 <__aeabi_i2d>
 800ba46:	0002      	movs	r2, r0
 800ba48:	000b      	movs	r3, r1
 800ba4a:	0020      	movs	r0, r4
 800ba4c:	0029      	movs	r1, r5
 800ba4e:	f7f6 fdf5 	bl	800263c <__aeabi_dmul>
 800ba52:	0002      	movs	r2, r0
 800ba54:	000b      	movs	r3, r1
 800ba56:	0010      	movs	r0, r2
 800ba58:	0019      	movs	r1, r3
 800ba5a:	f7f4 fdf7 	bl	800064c <__aeabi_d2uiz>
 800ba5e:	0003      	movs	r3, r0
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	4b6b      	ldr	r3, [pc, #428]	@ (800bc10 <SGP_GetMeasurementValues+0x3c4>)
 800ba64:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f7f7 fca8 	bl	80033c0 <__aeabi_i2d>
 800ba70:	2200      	movs	r2, #0
 800ba72:	4b64      	ldr	r3, [pc, #400]	@ (800bc04 <SGP_GetMeasurementValues+0x3b8>)
 800ba74:	f7f6 f99e 	bl	8001db4 <__aeabi_ddiv>
 800ba78:	0002      	movs	r2, r0
 800ba7a:	000b      	movs	r3, r1
 800ba7c:	0014      	movs	r4, r2
 800ba7e:	001d      	movs	r5, r3
 800ba80:	4b62      	ldr	r3, [pc, #392]	@ (800bc0c <SGP_GetMeasurementValues+0x3c0>)
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	0018      	movs	r0, r3
 800ba86:	f7f7 fc9b 	bl	80033c0 <__aeabi_i2d>
 800ba8a:	0002      	movs	r2, r0
 800ba8c:	000b      	movs	r3, r1
 800ba8e:	0020      	movs	r0, r4
 800ba90:	0029      	movs	r1, r5
 800ba92:	f7f6 fdd3 	bl	800263c <__aeabi_dmul>
 800ba96:	0002      	movs	r2, r0
 800ba98:	000b      	movs	r3, r1
 800ba9a:	0010      	movs	r0, r2
 800ba9c:	0019      	movs	r1, r3
 800ba9e:	f7f4 fdd5 	bl	800064c <__aeabi_d2uiz>
 800baa2:	0003      	movs	r3, r0
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	4b5b      	ldr	r3, [pc, #364]	@ (800bc14 <SGP_GetMeasurementValues+0x3c8>)
 800baa8:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800baaa:	4b58      	ldr	r3, [pc, #352]	@ (800bc0c <SGP_GetMeasurementValues+0x3c0>)
 800baac:	881a      	ldrh	r2, [r3, #0]
 800baae:	4b5a      	ldr	r3, [pc, #360]	@ (800bc18 <SGP_GetMeasurementValues+0x3cc>)
 800bab0:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bab2:	4b59      	ldr	r3, [pc, #356]	@ (800bc18 <SGP_GetMeasurementValues+0x3cc>)
 800bab4:	8818      	ldrh	r0, [r3, #0]
 800bab6:	4b56      	ldr	r3, [pc, #344]	@ (800bc10 <SGP_GetMeasurementValues+0x3c4>)
 800bab8:	8819      	ldrh	r1, [r3, #0]
 800baba:	4b56      	ldr	r3, [pc, #344]	@ (800bc14 <SGP_GetMeasurementValues+0x3c8>)
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	001a      	movs	r2, r3
 800bac0:	f001 fc2c 	bl	800d31c <SetVocLED>
      }
      if(*vocIndex > 100){
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b64      	cmp	r3, #100	@ 0x64
 800baca:	dd66      	ble.n	800bb9a <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	0018      	movs	r0, r3
 800bad2:	f7f7 fc75 	bl	80033c0 <__aeabi_i2d>
 800bad6:	2200      	movs	r2, #0
 800bad8:	4b4a      	ldr	r3, [pc, #296]	@ (800bc04 <SGP_GetMeasurementValues+0x3b8>)
 800bada:	f7f7 f877 	bl	8002bcc <__aeabi_dsub>
 800bade:	0002      	movs	r2, r0
 800bae0:	000b      	movs	r3, r1
 800bae2:	0010      	movs	r0, r2
 800bae4:	0019      	movs	r1, r3
 800bae6:	2200      	movs	r2, #0
 800bae8:	4b4c      	ldr	r3, [pc, #304]	@ (800bc1c <SGP_GetMeasurementValues+0x3d0>)
 800baea:	f7f6 f963 	bl	8001db4 <__aeabi_ddiv>
 800baee:	0002      	movs	r2, r0
 800baf0:	000b      	movs	r3, r1
 800baf2:	0014      	movs	r4, r2
 800baf4:	001d      	movs	r5, r3
 800baf6:	4b45      	ldr	r3, [pc, #276]	@ (800bc0c <SGP_GetMeasurementValues+0x3c0>)
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	0018      	movs	r0, r3
 800bafc:	f7f7 fc60 	bl	80033c0 <__aeabi_i2d>
 800bb00:	0002      	movs	r2, r0
 800bb02:	000b      	movs	r3, r1
 800bb04:	0020      	movs	r0, r4
 800bb06:	0029      	movs	r1, r5
 800bb08:	f7f6 fd98 	bl	800263c <__aeabi_dmul>
 800bb0c:	0002      	movs	r2, r0
 800bb0e:	000b      	movs	r3, r1
 800bb10:	0010      	movs	r0, r2
 800bb12:	0019      	movs	r1, r3
 800bb14:	f7f4 fd9a 	bl	800064c <__aeabi_d2uiz>
 800bb18:	0003      	movs	r3, r0
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	4b3c      	ldr	r3, [pc, #240]	@ (800bc10 <SGP_GetMeasurementValues+0x3c4>)
 800bb1e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	0018      	movs	r0, r3
 800bb26:	f7f7 fc4b 	bl	80033c0 <__aeabi_i2d>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	4b35      	ldr	r3, [pc, #212]	@ (800bc04 <SGP_GetMeasurementValues+0x3b8>)
 800bb2e:	f7f7 f84d 	bl	8002bcc <__aeabi_dsub>
 800bb32:	0002      	movs	r2, r0
 800bb34:	000b      	movs	r3, r1
 800bb36:	0010      	movs	r0, r2
 800bb38:	0019      	movs	r1, r3
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4b37      	ldr	r3, [pc, #220]	@ (800bc1c <SGP_GetMeasurementValues+0x3d0>)
 800bb3e:	f7f6 f939 	bl	8001db4 <__aeabi_ddiv>
 800bb42:	0002      	movs	r2, r0
 800bb44:	000b      	movs	r3, r1
 800bb46:	2000      	movs	r0, #0
 800bb48:	492f      	ldr	r1, [pc, #188]	@ (800bc08 <SGP_GetMeasurementValues+0x3bc>)
 800bb4a:	f7f7 f83f 	bl	8002bcc <__aeabi_dsub>
 800bb4e:	0002      	movs	r2, r0
 800bb50:	000b      	movs	r3, r1
 800bb52:	0014      	movs	r4, r2
 800bb54:	001d      	movs	r5, r3
 800bb56:	4b2d      	ldr	r3, [pc, #180]	@ (800bc0c <SGP_GetMeasurementValues+0x3c0>)
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	0018      	movs	r0, r3
 800bb5c:	f7f7 fc30 	bl	80033c0 <__aeabi_i2d>
 800bb60:	0002      	movs	r2, r0
 800bb62:	000b      	movs	r3, r1
 800bb64:	0020      	movs	r0, r4
 800bb66:	0029      	movs	r1, r5
 800bb68:	f7f6 fd68 	bl	800263c <__aeabi_dmul>
 800bb6c:	0002      	movs	r2, r0
 800bb6e:	000b      	movs	r3, r1
 800bb70:	0010      	movs	r0, r2
 800bb72:	0019      	movs	r1, r3
 800bb74:	f7f4 fd6a 	bl	800064c <__aeabi_d2uiz>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	4b26      	ldr	r3, [pc, #152]	@ (800bc18 <SGP_GetMeasurementValues+0x3cc>)
 800bb7e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800bb80:	4b22      	ldr	r3, [pc, #136]	@ (800bc0c <SGP_GetMeasurementValues+0x3c0>)
 800bb82:	881a      	ldrh	r2, [r3, #0]
 800bb84:	4b23      	ldr	r3, [pc, #140]	@ (800bc14 <SGP_GetMeasurementValues+0x3c8>)
 800bb86:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bb88:	4b23      	ldr	r3, [pc, #140]	@ (800bc18 <SGP_GetMeasurementValues+0x3cc>)
 800bb8a:	8818      	ldrh	r0, [r3, #0]
 800bb8c:	4b20      	ldr	r3, [pc, #128]	@ (800bc10 <SGP_GetMeasurementValues+0x3c4>)
 800bb8e:	8819      	ldrh	r1, [r3, #0]
 800bb90:	4b20      	ldr	r3, [pc, #128]	@ (800bc14 <SGP_GetMeasurementValues+0x3c8>)
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	001a      	movs	r2, r3
 800bb96:	f001 fbc1 	bl	800d31c <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800bb9a:	4b14      	ldr	r3, [pc, #80]	@ (800bbec <SGP_GetMeasurementValues+0x3a0>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bba0:	4b05      	ldr	r3, [pc, #20]	@ (800bbb8 <SGP_GetMeasurementValues+0x36c>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bba6:	4b03      	ldr	r3, [pc, #12]	@ (800bbb4 <SGP_GetMeasurementValues+0x368>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	701a      	strb	r2, [r3, #0]
      return true;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e04f      	b.n	800bc50 <SGP_GetMeasurementValues+0x404>
 800bbb0:	200010a4 	.word	0x200010a4
 800bbb4:	20001151 	.word	0x20001151
 800bbb8:	20001150 	.word	0x20001150
 800bbbc:	200000a0 	.word	0x200000a0
 800bbc0:	200000b4 	.word	0x200000b4
 800bbc4:	20000098 	.word	0x20000098
 800bbc8:	200010a5 	.word	0x200010a5
 800bbcc:	20001094 	.word	0x20001094
 800bbd0:	08024c6c 	.word	0x08024c6c
 800bbd4:	08024c94 	.word	0x08024c94
 800bbd8:	08024c98 	.word	0x08024c98
 800bbdc:	08024cb8 	.word	0x08024cb8
 800bbe0:	08024cbc 	.word	0x08024cbc
 800bbe4:	08024cdc 	.word	0x08024cdc
 800bbe8:	200000b0 	.word	0x200000b0
 800bbec:	2000109d 	.word	0x2000109d
 800bbf0:	200000aa 	.word	0x200000aa
 800bbf4:	200010a8 	.word	0x200010a8
 800bbf8:	2000109e 	.word	0x2000109e
 800bbfc:	08024ce0 	.word	0x08024ce0
 800bc00:	08024cfc 	.word	0x08024cfc
 800bc04:	40590000 	.word	0x40590000
 800bc08:	3ff00000 	.word	0x3ff00000
 800bc0c:	200000b8 	.word	0x200000b8
 800bc10:	2000115c 	.word	0x2000115c
 800bc14:	2000115a 	.word	0x2000115a
 800bc18:	20001158 	.word	0x20001158
 800bc1c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bc20:	f7ff fdf8 	bl	800b814 <SGP_MeasurementDone>
 800bc24:	1e03      	subs	r3, r0, #0
 800bc26:	d012      	beq.n	800bc4e <SGP_GetMeasurementValues+0x402>
 800bc28:	4b0b      	ldr	r3, [pc, #44]	@ (800bc58 <SGP_GetMeasurementValues+0x40c>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00e      	beq.n	800bc4e <SGP_GetMeasurementValues+0x402>
 800bc30:	4b0a      	ldr	r3, [pc, #40]	@ (800bc5c <SGP_GetMeasurementValues+0x410>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00a      	beq.n	800bc4e <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bc38:	4a09      	ldr	r2, [pc, #36]	@ (800bc60 <SGP_GetMeasurementValues+0x414>)
 800bc3a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc64 <SGP_GetMeasurementValues+0x418>)
 800bc3c:	0019      	movs	r1, r3
 800bc3e:	2003      	movs	r0, #3
 800bc40:	f002 fc42 	bl	800e4c8 <CreateLine>
    SGP_StartMeasurement();
 800bc44:	f7ff fd92 	bl	800b76c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bc48:	4b07      	ldr	r3, [pc, #28]	@ (800bc68 <SGP_GetMeasurementValues+0x41c>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	0018      	movs	r0, r3
 800bc52:	46bd      	mov	sp, r7
 800bc54:	b004      	add	sp, #16
 800bc56:	bdb0      	pop	{r4, r5, r7, pc}
 800bc58:	200010a4 	.word	0x200010a4
 800bc5c:	200010a5 	.word	0x200010a5
 800bc60:	08024d18 	.word	0x08024d18
 800bc64:	08024cdc 	.word	0x08024cdc
 800bc68:	20001151 	.word	0x20001151

0800bc6c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc72:	4b1a      	ldr	r3, [pc, #104]	@ (800bcdc <SGP_DeviceConnected+0x70>)
 800bc74:	2202      	movs	r2, #2
 800bc76:	0019      	movs	r1, r3
 800bc78:	2059      	movs	r0, #89	@ 0x59
 800bc7a:	f7ff fd0b 	bl	800b694 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc7e:	2001      	movs	r0, #1
 800bc80:	f003 f872 	bl	800ed68 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc84:	4b16      	ldr	r3, [pc, #88]	@ (800bce0 <SGP_DeviceConnected+0x74>)
 800bc86:	2209      	movs	r2, #9
 800bc88:	0019      	movs	r1, r3
 800bc8a:	2059      	movs	r0, #89	@ 0x59
 800bc8c:	f7ff fce4 	bl	800b658 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc90:	1dfb      	adds	r3, r7, #7
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	e011      	b.n	800bcbc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc98:	1dfb      	adds	r3, r7, #7
 800bc9a:	7818      	ldrb	r0, [r3, #0]
 800bc9c:	1dfb      	adds	r3, r7, #7
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	4a0f      	ldr	r2, [pc, #60]	@ (800bce0 <SGP_DeviceConnected+0x74>)
 800bca2:	5cd3      	ldrb	r3, [r2, r3]
 800bca4:	4a0f      	ldr	r2, [pc, #60]	@ (800bce4 <SGP_DeviceConnected+0x78>)
 800bca6:	4910      	ldr	r1, [pc, #64]	@ (800bce8 <SGP_DeviceConnected+0x7c>)
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	0003      	movs	r3, r0
 800bcac:	2002      	movs	r0, #2
 800bcae:	f002 fc0b 	bl	800e4c8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bcb2:	1dfb      	adds	r3, r7, #7
 800bcb4:	781a      	ldrb	r2, [r3, #0]
 800bcb6:	1dfb      	adds	r3, r7, #7
 800bcb8:	3201      	adds	r2, #1
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	1dfb      	adds	r3, r7, #7
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b08      	cmp	r3, #8
 800bcc2:	d9e9      	bls.n	800bc98 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bcc4:	4b06      	ldr	r3, [pc, #24]	@ (800bce0 <SGP_DeviceConnected+0x74>)
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	2109      	movs	r1, #9
 800bcca:	0018      	movs	r0, r3
 800bccc:	f000 f80e 	bl	800bcec <CheckCRC>
 800bcd0:	0003      	movs	r3, r0
}
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	b002      	add	sp, #8
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	46c0      	nop			@ (mov r8, r8)
 800bcdc:	20000094 	.word	0x20000094
 800bce0:	20001094 	.word	0x20001094
 800bce4:	08024d38 	.word	0x08024d38
 800bce8:	08024cb8 	.word	0x08024cb8

0800bcec <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcee:	b08f      	sub	sp, #60	@ 0x3c
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6278      	str	r0, [r7, #36]	@ 0x24
 800bcf4:	0008      	movs	r0, r1
 800bcf6:	0011      	movs	r1, r2
 800bcf8:	2323      	movs	r3, #35	@ 0x23
 800bcfa:	18fb      	adds	r3, r7, r3
 800bcfc:	1c02      	adds	r2, r0, #0
 800bcfe:	701a      	strb	r2, [r3, #0]
 800bd00:	2322      	movs	r3, #34	@ 0x22
 800bd02:	18fb      	adds	r3, r7, r3
 800bd04:	1c0a      	adds	r2, r1, #0
 800bd06:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bd08:	2317      	movs	r3, #23
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	189b      	adds	r3, r3, r2
 800bd0e:	19db      	adds	r3, r3, r7
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
 800bd14:	e09f      	b.n	800be56 <CheckCRC+0x16a>
 800bd16:	466b      	mov	r3, sp
 800bd18:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bd1a:	2322      	movs	r3, #34	@ 0x22
 800bd1c:	18fb      	adds	r3, r7, r3
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	001a      	movs	r2, r3
 800bd22:	3a01      	subs	r2, #1
 800bd24:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd26:	60bb      	str	r3, [r7, #8]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	60fa      	str	r2, [r7, #12]
 800bd2c:	68b8      	ldr	r0, [r7, #8]
 800bd2e:	68f9      	ldr	r1, [r7, #12]
 800bd30:	0002      	movs	r2, r0
 800bd32:	0f52      	lsrs	r2, r2, #29
 800bd34:	000c      	movs	r4, r1
 800bd36:	00e4      	lsls	r4, r4, #3
 800bd38:	61fc      	str	r4, [r7, #28]
 800bd3a:	69fc      	ldr	r4, [r7, #28]
 800bd3c:	4314      	orrs	r4, r2
 800bd3e:	61fc      	str	r4, [r7, #28]
 800bd40:	0002      	movs	r2, r0
 800bd42:	00d2      	lsls	r2, r2, #3
 800bd44:	61ba      	str	r2, [r7, #24]
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	6838      	ldr	r0, [r7, #0]
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	0002      	movs	r2, r0
 800bd52:	0f52      	lsrs	r2, r2, #29
 800bd54:	000c      	movs	r4, r1
 800bd56:	00e4      	lsls	r4, r4, #3
 800bd58:	617c      	str	r4, [r7, #20]
 800bd5a:	697c      	ldr	r4, [r7, #20]
 800bd5c:	4314      	orrs	r4, r2
 800bd5e:	617c      	str	r4, [r7, #20]
 800bd60:	0002      	movs	r2, r0
 800bd62:	00d2      	lsls	r2, r2, #3
 800bd64:	613a      	str	r2, [r7, #16]
 800bd66:	3307      	adds	r3, #7
 800bd68:	08db      	lsrs	r3, r3, #3
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	466a      	mov	r2, sp
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	469d      	mov	sp, r3
 800bd72:	466b      	mov	r3, sp
 800bd74:	3300      	adds	r3, #0
 800bd76:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd78:	2316      	movs	r3, #22
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	189b      	adds	r3, r3, r2
 800bd7e:	19db      	adds	r3, r3, r7
 800bd80:	2200      	movs	r2, #0
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e01e      	b.n	800bdc4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd86:	2317      	movs	r3, #23
 800bd88:	2220      	movs	r2, #32
 800bd8a:	189b      	adds	r3, r3, r2
 800bd8c:	19db      	adds	r3, r3, r7
 800bd8e:	781a      	ldrb	r2, [r3, #0]
 800bd90:	2116      	movs	r1, #22
 800bd92:	2320      	movs	r3, #32
 800bd94:	18cb      	adds	r3, r1, r3
 800bd96:	19db      	adds	r3, r3, r7
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	18d3      	adds	r3, r2, r3
 800bd9c:	001a      	movs	r2, r3
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	189a      	adds	r2, r3, r2
 800bda2:	0008      	movs	r0, r1
 800bda4:	2320      	movs	r3, #32
 800bda6:	18cb      	adds	r3, r1, r3
 800bda8:	19db      	adds	r3, r3, r7
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	7811      	ldrb	r1, [r2, #0]
 800bdae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdb0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bdb2:	2320      	movs	r3, #32
 800bdb4:	18c3      	adds	r3, r0, r3
 800bdb6:	19db      	adds	r3, r3, r7
 800bdb8:	781a      	ldrb	r2, [r3, #0]
 800bdba:	2320      	movs	r3, #32
 800bdbc:	18c3      	adds	r3, r0, r3
 800bdbe:	19db      	adds	r3, r3, r7
 800bdc0:	3201      	adds	r2, #1
 800bdc2:	701a      	strb	r2, [r3, #0]
 800bdc4:	2316      	movs	r3, #22
 800bdc6:	2220      	movs	r2, #32
 800bdc8:	189b      	adds	r3, r3, r2
 800bdca:	19da      	adds	r2, r3, r7
 800bdcc:	2322      	movs	r3, #34	@ 0x22
 800bdce:	18fb      	adds	r3, r7, r3
 800bdd0:	7812      	ldrb	r2, [r2, #0]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d3d6      	bcc.n	800bd86 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bdd8:	2417      	movs	r4, #23
 800bdda:	2320      	movs	r3, #32
 800bddc:	18e3      	adds	r3, r4, r3
 800bdde:	19db      	adds	r3, r3, r7
 800bde0:	781a      	ldrb	r2, [r3, #0]
 800bde2:	2322      	movs	r3, #34	@ 0x22
 800bde4:	18fb      	adds	r3, r7, r3
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	18d3      	adds	r3, r2, r3
 800bdea:	3b01      	subs	r3, #1
 800bdec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdee:	18d2      	adds	r2, r2, r3
 800bdf0:	250b      	movs	r5, #11
 800bdf2:	2320      	movs	r3, #32
 800bdf4:	18eb      	adds	r3, r5, r3
 800bdf6:	19db      	adds	r3, r3, r7
 800bdf8:	7812      	ldrb	r2, [r2, #0]
 800bdfa:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bdfc:	2322      	movs	r3, #34	@ 0x22
 800bdfe:	18fb      	adds	r3, r7, r3
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	3b01      	subs	r3, #1
 800be04:	b2da      	uxtb	r2, r3
 800be06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be08:	0011      	movs	r1, r2
 800be0a:	0018      	movs	r0, r3
 800be0c:	f000 f838 	bl	800be80 <CalculateCRC>
 800be10:	0003      	movs	r3, r0
 800be12:	001a      	movs	r2, r3
 800be14:	2320      	movs	r3, #32
 800be16:	18eb      	adds	r3, r5, r3
 800be18:	19db      	adds	r3, r3, r7
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d00c      	beq.n	800be3a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800be20:	2320      	movs	r3, #32
 800be22:	18e3      	adds	r3, r4, r3
 800be24:	19db      	adds	r3, r3, r7
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	4a13      	ldr	r2, [pc, #76]	@ (800be78 <CheckCRC+0x18c>)
 800be2c:	4913      	ldr	r1, [pc, #76]	@ (800be7c <CheckCRC+0x190>)
 800be2e:	2001      	movs	r0, #1
 800be30:	f002 fb4a 	bl	800e4c8 <CreateLine>
      return false;
 800be34:	2300      	movs	r3, #0
 800be36:	46b5      	mov	sp, r6
 800be38:	e019      	b.n	800be6e <CheckCRC+0x182>
 800be3a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800be3c:	2217      	movs	r2, #23
 800be3e:	2320      	movs	r3, #32
 800be40:	18d3      	adds	r3, r2, r3
 800be42:	19db      	adds	r3, r3, r7
 800be44:	2120      	movs	r1, #32
 800be46:	1852      	adds	r2, r2, r1
 800be48:	19d1      	adds	r1, r2, r7
 800be4a:	2222      	movs	r2, #34	@ 0x22
 800be4c:	18ba      	adds	r2, r7, r2
 800be4e:	7809      	ldrb	r1, [r1, #0]
 800be50:	7812      	ldrb	r2, [r2, #0]
 800be52:	188a      	adds	r2, r1, r2
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	2317      	movs	r3, #23
 800be58:	2220      	movs	r2, #32
 800be5a:	189b      	adds	r3, r3, r2
 800be5c:	19da      	adds	r2, r3, r7
 800be5e:	2323      	movs	r3, #35	@ 0x23
 800be60:	18fb      	adds	r3, r7, r3
 800be62:	7812      	ldrb	r2, [r2, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d200      	bcs.n	800be6c <CheckCRC+0x180>
 800be6a:	e754      	b.n	800bd16 <CheckCRC+0x2a>
    }
  }
  return true;
 800be6c:	2301      	movs	r3, #1
}
 800be6e:	0018      	movs	r0, r3
 800be70:	46bd      	mov	sp, r7
 800be72:	b00f      	add	sp, #60	@ 0x3c
 800be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be76:	46c0      	nop			@ (mov r8, r8)
 800be78:	08024d58 	.word	0x08024d58
 800be7c:	08024c94 	.word	0x08024c94

0800be80 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	000a      	movs	r2, r1
 800be8a:	1cfb      	adds	r3, r7, #3
 800be8c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be8e:	230f      	movs	r3, #15
 800be90:	18fb      	adds	r3, r7, r3
 800be92:	22ff      	movs	r2, #255	@ 0xff
 800be94:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be96:	230e      	movs	r3, #14
 800be98:	18fb      	adds	r3, r7, r3
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
 800be9e:	e037      	b.n	800bf10 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800bea0:	230e      	movs	r3, #14
 800bea2:	18fb      	adds	r3, r7, r3
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	18d3      	adds	r3, r2, r3
 800beaa:	7819      	ldrb	r1, [r3, #0]
 800beac:	220f      	movs	r2, #15
 800beae:	18bb      	adds	r3, r7, r2
 800beb0:	18ba      	adds	r2, r7, r2
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	404a      	eors	r2, r1
 800beb6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800beb8:	230d      	movs	r3, #13
 800beba:	18fb      	adds	r3, r7, r3
 800bebc:	2200      	movs	r2, #0
 800bebe:	701a      	strb	r2, [r3, #0]
 800bec0:	e01b      	b.n	800befa <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800bec2:	210f      	movs	r1, #15
 800bec4:	187b      	adds	r3, r7, r1
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	b25b      	sxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	da09      	bge.n	800bee2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800bece:	187b      	adds	r3, r7, r1
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	2231      	movs	r2, #49	@ 0x31
 800bed8:	4053      	eors	r3, r2
 800beda:	b25a      	sxtb	r2, r3
 800bedc:	187b      	adds	r3, r7, r1
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e005      	b.n	800beee <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800bee2:	230f      	movs	r3, #15
 800bee4:	18fa      	adds	r2, r7, r3
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	18db      	adds	r3, r3, r3
 800beec:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800beee:	210d      	movs	r1, #13
 800bef0:	187b      	adds	r3, r7, r1
 800bef2:	781a      	ldrb	r2, [r3, #0]
 800bef4:	187b      	adds	r3, r7, r1
 800bef6:	3201      	adds	r2, #1
 800bef8:	701a      	strb	r2, [r3, #0]
 800befa:	230d      	movs	r3, #13
 800befc:	18fb      	adds	r3, r7, r3
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b07      	cmp	r3, #7
 800bf02:	d9de      	bls.n	800bec2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800bf04:	210e      	movs	r1, #14
 800bf06:	187b      	adds	r3, r7, r1
 800bf08:	781a      	ldrb	r2, [r3, #0]
 800bf0a:	187b      	adds	r3, r7, r1
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	230e      	movs	r3, #14
 800bf12:	18fa      	adds	r2, r7, r3
 800bf14:	1cfb      	adds	r3, r7, #3
 800bf16:	7812      	ldrb	r2, [r2, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d3c0      	bcc.n	800bea0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800bf1e:	230f      	movs	r3, #15
 800bf20:	18fb      	adds	r3, r7, r3
 800bf22:	781b      	ldrb	r3, [r3, #0]
}
 800bf24:	0018      	movs	r0, r3
 800bf26:	46bd      	mov	sp, r7
 800bf28:	b004      	add	sp, #16
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4936      	ldr	r1, [pc, #216]	@ (800c014 <SGP_GetHT+0xe8>)
 800bf3c:	1c18      	adds	r0, r3, #0
 800bf3e:	f7f4 fcbf 	bl	80008c0 <__aeabi_fadd>
 800bf42:	1c03      	adds	r3, r0, #0
 800bf44:	4934      	ldr	r1, [pc, #208]	@ (800c018 <SGP_GetHT+0xec>)
 800bf46:	1c18      	adds	r0, r3, #0
 800bf48:	f7f4 fe44 	bl	8000bd4 <__aeabi_fdiv>
 800bf4c:	1c03      	adds	r3, r0, #0
 800bf4e:	4933      	ldr	r1, [pc, #204]	@ (800c01c <SGP_GetHT+0xf0>)
 800bf50:	1c18      	adds	r0, r3, #0
 800bf52:	f7f5 f825 	bl	8000fa0 <__aeabi_fmul>
 800bf56:	1c03      	adds	r3, r0, #0
 800bf58:	1c18      	adds	r0, r3, #0
 800bf5a:	f7f4 fb5f 	bl	800061c <__aeabi_f2uiz>
 800bf5e:	0003      	movs	r3, r0
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	4b2f      	ldr	r3, [pc, #188]	@ (800c020 <SGP_GetHT+0xf4>)
 800bf64:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	492e      	ldr	r1, [pc, #184]	@ (800c024 <SGP_GetHT+0xf8>)
 800bf6c:	1c18      	adds	r0, r3, #0
 800bf6e:	f7f4 fe31 	bl	8000bd4 <__aeabi_fdiv>
 800bf72:	1c03      	adds	r3, r0, #0
 800bf74:	4929      	ldr	r1, [pc, #164]	@ (800c01c <SGP_GetHT+0xf0>)
 800bf76:	1c18      	adds	r0, r3, #0
 800bf78:	f7f5 f812 	bl	8000fa0 <__aeabi_fmul>
 800bf7c:	1c03      	adds	r3, r0, #0
 800bf7e:	1c18      	adds	r0, r3, #0
 800bf80:	f7f4 fb4c 	bl	800061c <__aeabi_f2uiz>
 800bf84:	0003      	movs	r3, r0
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	4b27      	ldr	r3, [pc, #156]	@ (800c028 <SGP_GetHT+0xfc>)
 800bf8a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf8c:	4b26      	ldr	r3, [pc, #152]	@ (800c028 <SGP_GetHT+0xfc>)
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	0a1b      	lsrs	r3, r3, #8
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	4b25      	ldr	r3, [pc, #148]	@ (800c02c <SGP_GetHT+0x100>)
 800bf98:	709a      	strb	r2, [r3, #2]
 800bf9a:	4b24      	ldr	r3, [pc, #144]	@ (800c02c <SGP_GetHT+0x100>)
 800bf9c:	789a      	ldrb	r2, [r3, #2]
 800bf9e:	210c      	movs	r1, #12
 800bfa0:	187b      	adds	r3, r7, r1
 800bfa2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bfa4:	4b20      	ldr	r3, [pc, #128]	@ (800c028 <SGP_GetHT+0xfc>)
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	4b20      	ldr	r3, [pc, #128]	@ (800c02c <SGP_GetHT+0x100>)
 800bfac:	70da      	strb	r2, [r3, #3]
 800bfae:	4b1f      	ldr	r3, [pc, #124]	@ (800c02c <SGP_GetHT+0x100>)
 800bfb0:	78da      	ldrb	r2, [r3, #3]
 800bfb2:	187b      	adds	r3, r7, r1
 800bfb4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bfb6:	187b      	adds	r3, r7, r1
 800bfb8:	2102      	movs	r1, #2
 800bfba:	0018      	movs	r0, r3
 800bfbc:	f7ff ff60 	bl	800be80 <CalculateCRC>
 800bfc0:	0003      	movs	r3, r0
 800bfc2:	001a      	movs	r2, r3
 800bfc4:	4b19      	ldr	r3, [pc, #100]	@ (800c02c <SGP_GetHT+0x100>)
 800bfc6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bfc8:	4b15      	ldr	r3, [pc, #84]	@ (800c020 <SGP_GetHT+0xf4>)
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	0a1b      	lsrs	r3, r3, #8
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	4b16      	ldr	r3, [pc, #88]	@ (800c02c <SGP_GetHT+0x100>)
 800bfd4:	715a      	strb	r2, [r3, #5]
 800bfd6:	4b15      	ldr	r3, [pc, #84]	@ (800c02c <SGP_GetHT+0x100>)
 800bfd8:	795a      	ldrb	r2, [r3, #5]
 800bfda:	2108      	movs	r1, #8
 800bfdc:	187b      	adds	r3, r7, r1
 800bfde:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bfe0:	4b0f      	ldr	r3, [pc, #60]	@ (800c020 <SGP_GetHT+0xf4>)
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	4b11      	ldr	r3, [pc, #68]	@ (800c02c <SGP_GetHT+0x100>)
 800bfe8:	719a      	strb	r2, [r3, #6]
 800bfea:	4b10      	ldr	r3, [pc, #64]	@ (800c02c <SGP_GetHT+0x100>)
 800bfec:	799a      	ldrb	r2, [r3, #6]
 800bfee:	187b      	adds	r3, r7, r1
 800bff0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bff2:	187b      	adds	r3, r7, r1
 800bff4:	2102      	movs	r1, #2
 800bff6:	0018      	movs	r0, r3
 800bff8:	f7ff ff42 	bl	800be80 <CalculateCRC>
 800bffc:	0003      	movs	r3, r0
 800bffe:	001a      	movs	r2, r3
 800c000:	4b0a      	ldr	r3, [pc, #40]	@ (800c02c <SGP_GetHT+0x100>)
 800c002:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c004:	4b0a      	ldr	r3, [pc, #40]	@ (800c030 <SGP_GetHT+0x104>)
 800c006:	2201      	movs	r2, #1
 800c008:	701a      	strb	r2, [r3, #0]
}
 800c00a:	46c0      	nop			@ (mov r8, r8)
 800c00c:	46bd      	mov	sp, r7
 800c00e:	b004      	add	sp, #16
 800c010:	bd80      	pop	{r7, pc}
 800c012:	46c0      	nop			@ (mov r8, r8)
 800c014:	42340000 	.word	0x42340000
 800c018:	432f0000 	.word	0x432f0000
 800c01c:	477fff00 	.word	0x477fff00
 800c020:	2000114e 	.word	0x2000114e
 800c024:	42c80000 	.word	0x42c80000
 800c028:	2000114c 	.word	0x2000114c
 800c02c:	200000a0 	.word	0x200000a0
 800c030:	20001150 	.word	0x20001150

0800c034 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c038:	4a09      	ldr	r2, [pc, #36]	@ (800c060 <SGP_SoftReset+0x2c>)
 800c03a:	4b0a      	ldr	r3, [pc, #40]	@ (800c064 <SGP_SoftReset+0x30>)
 800c03c:	0019      	movs	r1, r3
 800c03e:	2003      	movs	r0, #3
 800c040:	f002 fa42 	bl	800e4c8 <CreateLine>
  SGP_TurnHeaterOff();
 800c044:	f7ff fbf4 	bl	800b830 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c048:	200a      	movs	r0, #10
 800c04a:	f002 fe8d 	bl	800ed68 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c04e:	4b06      	ldr	r3, [pc, #24]	@ (800c068 <SGP_SoftReset+0x34>)
 800c050:	2202      	movs	r2, #2
 800c052:	0019      	movs	r1, r3
 800c054:	2059      	movs	r0, #89	@ 0x59
 800c056:	f7ff fb1d 	bl	800b694 <WriteRegister>
}
 800c05a:	46c0      	nop			@ (mov r8, r8)
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	08024e00 	.word	0x08024e00
 800c064:	08024cdc 	.word	0x08024cdc
 800c068:	200000a8 	.word	0x200000a8

0800c06c <ResetVOCresult>:

void ResetVOCresult(void) {
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c070:	4b02      	ldr	r3, [pc, #8]	@ (800c07c <ResetVOCresult+0x10>)
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
}
 800c076:	46c0      	nop			@ (mov r8, r8)
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	20001154 	.word	0x20001154

0800c080 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c084:	4b37      	ldr	r3, [pc, #220]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	2b07      	cmp	r3, #7
 800c08a:	d85f      	bhi.n	800c14c <SGP_Upkeep+0xcc>
 800c08c:	009a      	lsls	r2, r3, #2
 800c08e:	4b36      	ldr	r3, [pc, #216]	@ (800c168 <SGP_Upkeep+0xe8>)
 800c090:	18d3      	adds	r3, r2, r3
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c096:	4a35      	ldr	r2, [pc, #212]	@ (800c16c <SGP_Upkeep+0xec>)
 800c098:	4b35      	ldr	r3, [pc, #212]	@ (800c170 <SGP_Upkeep+0xf0>)
 800c09a:	0019      	movs	r1, r3
 800c09c:	2003      	movs	r0, #3
 800c09e:	f002 fa13 	bl	800e4c8 <CreateLine>
    break;
 800c0a2:	e05a      	b.n	800c15a <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c0a4:	f7ff ffe2 	bl	800c06c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c0a8:	4b2e      	ldr	r3, [pc, #184]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	701a      	strb	r2, [r3, #0]
    break;
 800c0ae:	e054      	b.n	800c15a <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c0b0:	f7ff fb5c 	bl	800b76c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c0b4:	f001 f966 	bl	800d384 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c0b8:	4b2a      	ldr	r3, [pc, #168]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	701a      	strb	r2, [r3, #0]
    break;
 800c0be:	e04c      	b.n	800c15a <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c0c0:	4b2c      	ldr	r3, [pc, #176]	@ (800c174 <SGP_Upkeep+0xf4>)
 800c0c2:	0018      	movs	r0, r3
 800c0c4:	f7ff fbc2 	bl	800b84c <SGP_GetMeasurementValues>
 800c0c8:	1e03      	subs	r3, r0, #0
 800c0ca:	d043      	beq.n	800c154 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c0cc:	4b25      	ldr	r3, [pc, #148]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c0ce:	2203      	movs	r2, #3
 800c0d0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0d2:	e03f      	b.n	800c154 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c0d4:	4b27      	ldr	r3, [pc, #156]	@ (800c174 <SGP_Upkeep+0xf4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	0018      	movs	r0, r3
 800c0dc:	f7f7 fc32 	bl	8003944 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c0e0:	4b20      	ldr	r3, [pc, #128]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c0e2:	2206      	movs	r2, #6
 800c0e4:	701a      	strb	r2, [r3, #0]
    break;
 800c0e6:	e038      	b.n	800c15a <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c0e8:	4b1e      	ldr	r3, [pc, #120]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c0ea:	2207      	movs	r2, #7
 800c0ec:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c0ee:	4b22      	ldr	r3, [pc, #136]	@ (800c178 <SGP_Upkeep+0xf8>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d112      	bne.n	800c11c <SGP_Upkeep+0x9c>
 800c0f6:	4b21      	ldr	r3, [pc, #132]	@ (800c17c <SGP_Upkeep+0xfc>)
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	4053      	eors	r3, r2
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c104:	4b1e      	ldr	r3, [pc, #120]	@ (800c180 <SGP_Upkeep+0x100>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d004      	beq.n	800c116 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c10c:	f7ff ff92 	bl	800c034 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c110:	2000      	movs	r0, #0
 800c112:	f7fc f981 	bl	8008418 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c116:	4b1a      	ldr	r3, [pc, #104]	@ (800c180 <SGP_Upkeep+0x100>)
 800c118:	2201      	movs	r2, #1
 800c11a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c11c:	f002 fe1a 	bl	800ed54 <HAL_GetTick>
 800c120:	0003      	movs	r3, r0
 800c122:	22c8      	movs	r2, #200	@ 0xc8
 800c124:	0092      	lsls	r2, r2, #2
 800c126:	189a      	adds	r2, r3, r2
 800c128:	4b16      	ldr	r3, [pc, #88]	@ (800c184 <SGP_Upkeep+0x104>)
 800c12a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c12c:	f001 f942 	bl	800d3b4 <ResetMeasurementIndicator>
  break;
 800c130:	e013      	b.n	800c15a <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c132:	4b14      	ldr	r3, [pc, #80]	@ (800c184 <SGP_Upkeep+0x104>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	0018      	movs	r0, r3
 800c138:	f002 f970 	bl	800e41c <TimestampIsReached>
 800c13c:	1e03      	subs	r3, r0, #0
 800c13e:	d00b      	beq.n	800c158 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c140:	f7ff fafc 	bl	800b73c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c144:	4b07      	ldr	r3, [pc, #28]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c14a:	e005      	b.n	800c158 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c14c:	4b05      	ldr	r3, [pc, #20]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
    break;
 800c152:	e002      	b.n	800c15a <SGP_Upkeep+0xda>
    break;
 800c154:	46c0      	nop			@ (mov r8, r8)
 800c156:	e000      	b.n	800c15a <SGP_Upkeep+0xda>
    break;
 800c158:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c15a:	4b02      	ldr	r3, [pc, #8]	@ (800c164 <SGP_Upkeep+0xe4>)
 800c15c:	781b      	ldrb	r3, [r3, #0]
}
 800c15e:	0018      	movs	r0, r3
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	2000115e 	.word	0x2000115e
 800c168:	08025530 	.word	0x08025530
 800c16c:	08024e18 	.word	0x08024e18
 800c170:	08024cdc 	.word	0x08024cdc
 800c174:	20001154 	.word	0x20001154
 800c178:	2000109e 	.word	0x2000109e
 800c17c:	20001ff9 	.word	0x20001ff9
 800c180:	20001088 	.word	0x20001088
 800c184:	200010a0 	.word	0x200010a0

0800c188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	0002      	movs	r2, r0
 800c190:	1dfb      	adds	r3, r7, #7
 800c192:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c194:	1dfb      	adds	r3, r7, #7
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b7f      	cmp	r3, #127	@ 0x7f
 800c19a:	d809      	bhi.n	800c1b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c19c:	1dfb      	adds	r3, r7, #7
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	001a      	movs	r2, r3
 800c1a2:	231f      	movs	r3, #31
 800c1a4:	401a      	ands	r2, r3
 800c1a6:	4b04      	ldr	r3, [pc, #16]	@ (800c1b8 <__NVIC_EnableIRQ+0x30>)
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	4091      	lsls	r1, r2
 800c1ac:	000a      	movs	r2, r1
 800c1ae:	601a      	str	r2, [r3, #0]
  }
}
 800c1b0:	46c0      	nop			@ (mov r8, r8)
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	b002      	add	sp, #8
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	e000e100 	.word	0xe000e100

0800c1bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	0002      	movs	r2, r0
 800c1c4:	1dfb      	adds	r3, r7, #7
 800c1c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c1c8:	1dfb      	adds	r3, r7, #7
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1ce:	d810      	bhi.n	800c1f2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c1d0:	1dfb      	adds	r3, r7, #7
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	001a      	movs	r2, r3
 800c1d6:	231f      	movs	r3, #31
 800c1d8:	4013      	ands	r3, r2
 800c1da:	4908      	ldr	r1, [pc, #32]	@ (800c1fc <__NVIC_DisableIRQ+0x40>)
 800c1dc:	2201      	movs	r2, #1
 800c1de:	409a      	lsls	r2, r3
 800c1e0:	0013      	movs	r3, r2
 800c1e2:	2280      	movs	r2, #128	@ 0x80
 800c1e4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c1e6:	f3bf 8f4f 	dsb	sy
}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1ec:	f3bf 8f6f 	isb	sy
}
 800c1f0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	b002      	add	sp, #8
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	46c0      	nop			@ (mov r8, r8)
 800c1fc:	e000e100 	.word	0xe000e100

0800c200 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c200:	b5b0      	push	{r4, r5, r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af02      	add	r7, sp, #8
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	0008      	movs	r0, r1
 800c20a:	0011      	movs	r1, r2
 800c20c:	1cfb      	adds	r3, r7, #3
 800c20e:	1c02      	adds	r2, r0, #0
 800c210:	701a      	strb	r2, [r3, #0]
 800c212:	1cbb      	adds	r3, r7, #2
 800c214:	1c0a      	adds	r2, r1, #0
 800c216:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c218:	4b5b      	ldr	r3, [pc, #364]	@ (800c388 <getSoundData+0x188>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2201      	movs	r2, #1
 800c220:	4053      	eors	r3, r2
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d107      	bne.n	800c238 <getSoundData+0x38>
 800c228:	4b58      	ldr	r3, [pc, #352]	@ (800c38c <getSoundData+0x18c>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2201      	movs	r2, #1
 800c230:	4053      	eors	r3, r2
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <getSoundData+0x3c>
    {
        return false;
 800c238:	2300      	movs	r3, #0
 800c23a:	e0a0      	b.n	800c37e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c23c:	4b54      	ldr	r3, [pc, #336]	@ (800c390 <getSoundData+0x190>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	d005      	beq.n	800c252 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c246:	4b53      	ldr	r3, [pc, #332]	@ (800c394 <getSoundData+0x194>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	b25b      	sxtb	r3, r3
 800c24c:	0018      	movs	r0, r3
 800c24e:	f7ff ffb5 	bl	800c1bc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c252:	f3bf 8f4f 	dsb	sy
}
 800c256:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c258:	f3bf 8f6f 	isb	sy
}
 800c25c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c25e:	1cfb      	adds	r3, r7, #3
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d04c      	beq.n	800c300 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c266:	4b4c      	ldr	r3, [pc, #304]	@ (800c398 <getSoundData+0x198>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d11b      	bne.n	800c2a6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
 800c27e:	e00e      	b.n	800c29e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	18d3      	adds	r3, r2, r3
 800c286:	3302      	adds	r3, #2
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	18d3      	adds	r3, r2, r3
 800c292:	3308      	adds	r3, #8
 800c294:	2200      	movs	r2, #0
 800c296:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	3301      	adds	r3, #1
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b05      	cmp	r3, #5
 800c2a2:	d9ed      	bls.n	800c280 <getSoundData+0x80>
 800c2a4:	e02c      	b.n	800c300 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	1c59      	adds	r1, r3, #1
 800c2ac:	4b3b      	ldr	r3, [pc, #236]	@ (800c39c <getSoundData+0x19c>)
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	4b3b      	ldr	r3, [pc, #236]	@ (800c3a0 <getSoundData+0x1a0>)
 800c2b2:	681c      	ldr	r4, [r3, #0]
 800c2b4:	4b38      	ldr	r3, [pc, #224]	@ (800c398 <getSoundData+0x198>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	0023      	movs	r3, r4
 800c2bc:	f000 fde8 	bl	800ce90 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	613b      	str	r3, [r7, #16]
 800c2c4:	e019      	b.n	800c2fa <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	18d3      	adds	r3, r2, r3
 800c2cc:	1c98      	adds	r0, r3, #2
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c2d6:	4b33      	ldr	r3, [pc, #204]	@ (800c3a4 <getSoundData+0x1a4>)
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	0092      	lsls	r2, r2, #2
 800c2dc:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c2de:	4b32      	ldr	r3, [pc, #200]	@ (800c3a8 <getSoundData+0x1a8>)
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	0092      	lsls	r2, r2, #2
 800c2e4:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c2e6:	4b2c      	ldr	r3, [pc, #176]	@ (800c398 <getSoundData+0x198>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	0013      	movs	r3, r2
 800c2ee:	0022      	movs	r2, r4
 800c2f0:	f000 fdce 	bl	800ce90 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	613b      	str	r3, [r7, #16]
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	d9e2      	bls.n	800c2c6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c300:	1cbb      	adds	r3, r7, #2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d028      	beq.n	800c35a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c308:	240e      	movs	r4, #14
 800c30a:	193b      	adds	r3, r7, r4
 800c30c:	2200      	movs	r2, #0
 800c30e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c310:	250d      	movs	r5, #13
 800c312:	197b      	adds	r3, r7, r5
 800c314:	2200      	movs	r2, #0
 800c316:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c318:	4b24      	ldr	r3, [pc, #144]	@ (800c3ac <getSoundData+0x1ac>)
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	4924      	ldr	r1, [pc, #144]	@ (800c3b0 <getSoundData+0x1b0>)
 800c31e:	197b      	adds	r3, r7, r5
 800c320:	193a      	adds	r2, r7, r4
 800c322:	f000 fe59 	bl	800cfd8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c326:	193b      	adds	r3, r7, r4
 800c328:	881a      	ldrh	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	21ff      	movs	r1, #255	@ 0xff
 800c32e:	4011      	ands	r1, r2
 800c330:	000c      	movs	r4, r1
 800c332:	7b99      	ldrb	r1, [r3, #14]
 800c334:	2000      	movs	r0, #0
 800c336:	4001      	ands	r1, r0
 800c338:	1c08      	adds	r0, r1, #0
 800c33a:	1c21      	adds	r1, r4, #0
 800c33c:	4301      	orrs	r1, r0
 800c33e:	7399      	strb	r1, [r3, #14]
 800c340:	0a12      	lsrs	r2, r2, #8
 800c342:	b290      	uxth	r0, r2
 800c344:	7bda      	ldrb	r2, [r3, #15]
 800c346:	2100      	movs	r1, #0
 800c348:	400a      	ands	r2, r1
 800c34a:	1c11      	adds	r1, r2, #0
 800c34c:	1c02      	adds	r2, r0, #0
 800c34e:	430a      	orrs	r2, r1
 800c350:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c352:	197b      	adds	r3, r7, r5
 800c354:	781a      	ldrb	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c35a:	f000 f86f 	bl	800c43c <micSettlingComplete>
 800c35e:	0003      	movs	r3, r0
 800c360:	001a      	movs	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c366:	4b0a      	ldr	r3, [pc, #40]	@ (800c390 <getSoundData+0x190>)
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d005      	beq.n	800c37c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c370:	4b08      	ldr	r3, [pc, #32]	@ (800c394 <getSoundData+0x194>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b25b      	sxtb	r3, r3
 800c376:	0018      	movs	r0, r3
 800c378:	f7ff ff06 	bl	800c188 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c37c:	2301      	movs	r3, #1
}
 800c37e:	0018      	movs	r0, r3
 800c380:	46bd      	mov	sp, r7
 800c382:	b006      	add	sp, #24
 800c384:	bdb0      	pop	{r4, r5, r7, pc}
 800c386:	46c0      	nop			@ (mov r8, r8)
 800c388:	20001160 	.word	0x20001160
 800c38c:	20001163 	.word	0x20001163
 800c390:	20001162 	.word	0x20001162
 800c394:	20001bb0 	.word	0x20001bb0
 800c398:	20001bec 	.word	0x20001bec
 800c39c:	20001bb4 	.word	0x20001bb4
 800c3a0:	20001bb8 	.word	0x20001bb8
 800c3a4:	20001bbc 	.word	0x20001bbc
 800c3a8:	20001bd4 	.word	0x20001bd4
 800c3ac:	20001168 	.word	0x20001168
 800c3b0:	3b5c7333 	.word	0x3b5c7333

0800c3b4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	001a      	movs	r2, r3
 800c3c2:	1cfb      	adds	r3, r7, #3
 800c3c4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c3c6:	4b09      	ldr	r3, [pc, #36]	@ (800c3ec <soundInit+0x38>)
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c3cc:	4b08      	ldr	r3, [pc, #32]	@ (800c3f0 <soundInit+0x3c>)
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c3d2:	4b08      	ldr	r3, [pc, #32]	@ (800c3f4 <soundInit+0x40>)
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c3d8:	4b07      	ldr	r3, [pc, #28]	@ (800c3f8 <soundInit+0x44>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	569a      	ldrsb	r2, [r3, r2]
 800c3de:	4b06      	ldr	r3, [pc, #24]	@ (800c3f8 <soundInit+0x44>)
 800c3e0:	701a      	strb	r2, [r3, #0]

    return true;
 800c3e2:	2301      	movs	r3, #1
}
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	b004      	add	sp, #16
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20001ba8 	.word	0x20001ba8
 800c3f0:	20001ba4 	.word	0x20001ba4
 800c3f4:	20001bac 	.word	0x20001bac
 800c3f8:	20001bb0 	.word	0x20001bb0

0800c3fc <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c400:	4b02      	ldr	r3, [pc, #8]	@ (800c40c <clearMaximumAmplitude+0x10>)
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
}
 800c406:	46c0      	nop			@ (mov r8, r8)
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	20001168 	.word	0x20001168

0800c410 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c414:	4b08      	ldr	r3, [pc, #32]	@ (800c438 <startMicSettlingPeriod+0x28>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2200      	movs	r2, #0
 800c41c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c41e:	4b06      	ldr	r3, [pc, #24]	@ (800c438 <startMicSettlingPeriod+0x28>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	0018      	movs	r0, r3
 800c424:	f00a fa5a 	bl	80168dc <HAL_TIM_Base_Start>
 800c428:	1e03      	subs	r3, r0, #0
 800c42a:	d001      	beq.n	800c430 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c42c:	2300      	movs	r3, #0
 800c42e:	e000      	b.n	800c432 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c430:	2301      	movs	r3, #1
}
 800c432:	0018      	movs	r0, r3
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20001ba4 	.word	0x20001ba4

0800c43c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c442:	4b0e      	ldr	r3, [pc, #56]	@ (800c47c <micSettlingComplete+0x40>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	2201      	movs	r2, #1
 800c44c:	401a      	ands	r2, r3
 800c44e:	1dfb      	adds	r3, r7, #7
 800c450:	3a01      	subs	r2, #1
 800c452:	4251      	negs	r1, r2
 800c454:	414a      	adcs	r2, r1
 800c456:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c458:	1dfb      	adds	r3, r7, #7
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c460:	4b06      	ldr	r3, [pc, #24]	@ (800c47c <micSettlingComplete+0x40>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	0018      	movs	r0, r3
 800c466:	f00a fa83 	bl	8016970 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c46a:	4b05      	ldr	r3, [pc, #20]	@ (800c480 <micSettlingComplete+0x44>)
 800c46c:	2201      	movs	r2, #1
 800c46e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c470:	1dfb      	adds	r3, r7, #7
 800c472:	781b      	ldrb	r3, [r3, #0]
}
 800c474:	0018      	movs	r0, r3
 800c476:	46bd      	mov	sp, r7
 800c478:	b002      	add	sp, #8
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	20001ba4 	.word	0x20001ba4
 800c480:	2000115f 	.word	0x2000115f

0800c484 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	0002      	movs	r2, r0
 800c48c:	1dfb      	adds	r3, r7, #7
 800c48e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c490:	4b29      	ldr	r3, [pc, #164]	@ (800c538 <enableMicrophone+0xb4>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	b2db      	uxtb	r3, r3
 800c496:	1dfa      	adds	r2, r7, #7
 800c498:	7812      	ldrb	r2, [r2, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d101      	bne.n	800c4a2 <enableMicrophone+0x1e>
    {
        return true;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e045      	b.n	800c52e <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c4a2:	1dfb      	adds	r3, r7, #7
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d025      	beq.n	800c4f6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c4aa:	f7ff ffb1 	bl	800c410 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c4ae:	4b23      	ldr	r3, [pc, #140]	@ (800c53c <enableMicrophone+0xb8>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2280      	movs	r2, #128	@ 0x80
 800c4b4:	0092      	lsls	r2, r2, #2
 800c4b6:	4922      	ldr	r1, [pc, #136]	@ (800c540 <enableMicrophone+0xbc>)
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f006 fc79 	bl	8012db0 <HAL_I2S_Receive_DMA>
 800c4be:	1e03      	subs	r3, r0, #0
 800c4c0:	d001      	beq.n	800c4c6 <enableMicrophone+0x42>
        {
            return false;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e033      	b.n	800c52e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c4c6:	f7ff ff99 	bl	800c3fc <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c4ca:	4b1e      	ldr	r3, [pc, #120]	@ (800c544 <enableMicrophone+0xc0>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c4d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c548 <enableMicrophone+0xc4>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	b25b      	sxtb	r3, r3
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	f7ff fe56 	bl	800c188 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c4dc:	4b1b      	ldr	r3, [pc, #108]	@ (800c54c <enableMicrophone+0xc8>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c4e2:	4b15      	ldr	r3, [pc, #84]	@ (800c538 <enableMicrophone+0xb4>)
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c4e8:	4b19      	ldr	r3, [pc, #100]	@ (800c550 <enableMicrophone+0xcc>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c4ee:	4b19      	ldr	r3, [pc, #100]	@ (800c554 <enableMicrophone+0xd0>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	e01a      	b.n	800c52c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c4f6:	4b14      	ldr	r3, [pc, #80]	@ (800c548 <enableMicrophone+0xc4>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b25b      	sxtb	r3, r3
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f7ff fe5d 	bl	800c1bc <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c502:	4b12      	ldr	r3, [pc, #72]	@ (800c54c <enableMicrophone+0xc8>)
 800c504:	2200      	movs	r2, #0
 800c506:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c508:	4b11      	ldr	r3, [pc, #68]	@ (800c550 <enableMicrophone+0xcc>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c50e:	4b11      	ldr	r3, [pc, #68]	@ (800c554 <enableMicrophone+0xd0>)
 800c510:	2200      	movs	r2, #0
 800c512:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c514:	4b09      	ldr	r3, [pc, #36]	@ (800c53c <enableMicrophone+0xb8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	0018      	movs	r0, r3
 800c51a:	f006 fd0b 	bl	8012f34 <HAL_I2S_DMAStop>
 800c51e:	1e03      	subs	r3, r0, #0
 800c520:	d001      	beq.n	800c526 <enableMicrophone+0xa2>
        {
            return false;
 800c522:	2300      	movs	r3, #0
 800c524:	e003      	b.n	800c52e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c526:	4b04      	ldr	r3, [pc, #16]	@ (800c538 <enableMicrophone+0xb4>)
 800c528:	2200      	movs	r2, #0
 800c52a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c52c:	2301      	movs	r3, #1
}
 800c52e:	0018      	movs	r0, r3
 800c530:	46bd      	mov	sp, r7
 800c532:	b002      	add	sp, #8
 800c534:	bd80      	pop	{r7, pc}
 800c536:	46c0      	nop			@ (mov r8, r8)
 800c538:	20001160 	.word	0x20001160
 800c53c:	20001ba8 	.word	0x20001ba8
 800c540:	200011a4 	.word	0x200011a4
 800c544:	20001164 	.word	0x20001164
 800c548:	20001bb0 	.word	0x20001bb0
 800c54c:	20001162 	.word	0x20001162
 800c550:	20001161 	.word	0x20001161
 800c554:	20001163 	.word	0x20001163

0800c558 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c55c:	4b0c      	ldr	r3, [pc, #48]	@ (800c590 <startSPLcalculation+0x38>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2201      	movs	r2, #1
 800c564:	4053      	eors	r3, r2
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <startSPLcalculation+0x18>
    {
        return false;
 800c56c:	2300      	movs	r3, #0
 800c56e:	e00c      	b.n	800c58a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c570:	4b08      	ldr	r3, [pc, #32]	@ (800c594 <startSPLcalculation+0x3c>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <startSPLcalculation+0x26>
    {
        return true;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e005      	b.n	800c58a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c57e:	f000 fb63 	bl	800cc48 <resetSPLstate>
    SPLcalcEnabled = true;
 800c582:	4b04      	ldr	r3, [pc, #16]	@ (800c594 <startSPLcalculation+0x3c>)
 800c584:	2201      	movs	r2, #1
 800c586:	701a      	strb	r2, [r3, #0]
    return true;
 800c588:	2301      	movs	r3, #1
}
 800c58a:	0018      	movs	r0, r3
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20001160 	.word	0x20001160
 800c594:	20001161 	.word	0x20001161

0800c598 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5a0:	4b05      	ldr	r3, [pc, #20]	@ (800c5b8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d102      	bne.n	800c5b0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	f000 f81a 	bl	800c5e4 <processHalfDMAbuffer>
  }
}
 800c5b0:	46c0      	nop			@ (mov r8, r8)
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	b002      	add	sp, #8
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	20001ba8 	.word	0x20001ba8

0800c5bc <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5c4:	4b06      	ldr	r3, [pc, #24]	@ (800c5e0 <HAL_I2S_RxCpltCallback+0x24>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d104      	bne.n	800c5d8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c5ce:	2380      	movs	r3, #128	@ 0x80
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f000 f806 	bl	800c5e4 <processHalfDMAbuffer>
  }
}
 800c5d8:	46c0      	nop			@ (mov r8, r8)
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	b002      	add	sp, #8
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20001ba8 	.word	0x20001ba8

0800c5e4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	005a      	lsls	r2, r3, #1
 800c5f0:	4b15      	ldr	r3, [pc, #84]	@ (800c648 <processHalfDMAbuffer+0x64>)
 800c5f2:	18d3      	adds	r3, r2, r3
 800c5f4:	4a15      	ldr	r2, [pc, #84]	@ (800c64c <processHalfDMAbuffer+0x68>)
 800c5f6:	2180      	movs	r1, #128	@ 0x80
 800c5f8:	0089      	lsls	r1, r1, #2
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	f000 fd35 	bl	800d06a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c600:	4b13      	ldr	r3, [pc, #76]	@ (800c650 <processHalfDMAbuffer+0x6c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	425a      	negs	r2, r3
 800c606:	4153      	adcs	r3, r2
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	4b11      	ldr	r3, [pc, #68]	@ (800c650 <processHalfDMAbuffer+0x6c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2109      	movs	r1, #9
 800c610:	4299      	cmp	r1, r3
 800c612:	419b      	sbcs	r3, r3
 800c614:	425b      	negs	r3, r3
 800c616:	b2db      	uxtb	r3, r3
 800c618:	480c      	ldr	r0, [pc, #48]	@ (800c64c <processHalfDMAbuffer+0x68>)
 800c61a:	2180      	movs	r1, #128	@ 0x80
 800c61c:	f000 fb46 	bl	800ccac <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c620:	4b0b      	ldr	r3, [pc, #44]	@ (800c650 <processHalfDMAbuffer+0x6c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b09      	cmp	r3, #9
 800c626:	d804      	bhi.n	800c632 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c628:	4b09      	ldr	r3, [pc, #36]	@ (800c650 <processHalfDMAbuffer+0x6c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	4b08      	ldr	r3, [pc, #32]	@ (800c650 <processHalfDMAbuffer+0x6c>)
 800c630:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c632:	4b08      	ldr	r3, [pc, #32]	@ (800c654 <processHalfDMAbuffer+0x70>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c63c:	f000 f826 	bl	800c68c <calculateSPLQ31>
    }
}
 800c640:	46c0      	nop			@ (mov r8, r8)
 800c642:	46bd      	mov	sp, r7
 800c644:	b002      	add	sp, #8
 800c646:	bd80      	pop	{r7, pc}
 800c648:	200011a4 	.word	0x200011a4
 800c64c:	200019a4 	.word	0x200019a4
 800c650:	20001164 	.word	0x20001164
 800c654:	20001161 	.word	0x20001161

0800c658 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c660:	4b07      	ldr	r3, [pc, #28]	@ (800c680 <HAL_I2S_ErrorCallback+0x28>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d106      	bne.n	800c678 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c66a:	4a06      	ldr	r2, [pc, #24]	@ (800c684 <HAL_I2S_ErrorCallback+0x2c>)
 800c66c:	239e      	movs	r3, #158	@ 0x9e
 800c66e:	0059      	lsls	r1, r3, #1
 800c670:	4b05      	ldr	r3, [pc, #20]	@ (800c688 <HAL_I2S_ErrorCallback+0x30>)
 800c672:	0018      	movs	r0, r3
 800c674:	f001 ffe0 	bl	800e638 <errorHandler>
  }
}
 800c678:	46c0      	nop			@ (mov r8, r8)
 800c67a:	46bd      	mov	sp, r7
 800c67c:	b002      	add	sp, #8
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20001ba8 	.word	0x20001ba8
 800c684:	08024e40 	.word	0x08024e40
 800c688:	08025620 	.word	0x08025620

0800c68c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c68e:	b0b3      	sub	sp, #204	@ 0xcc
 800c690:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c692:	4ae2      	ldr	r2, [pc, #904]	@ (800ca1c <calculateSPLQ31+0x390>)
 800c694:	2338      	movs	r3, #56	@ 0x38
 800c696:	2030      	movs	r0, #48	@ 0x30
 800c698:	181b      	adds	r3, r3, r0
 800c69a:	19d9      	adds	r1, r3, r7
 800c69c:	2334      	movs	r3, #52	@ 0x34
 800c69e:	181b      	adds	r3, r3, r0
 800c6a0:	19d8      	adds	r0, r3, r7
 800c6a2:	2380      	movs	r3, #128	@ 0x80
 800c6a4:	f000 fc36 	bl	800cf14 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c6a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da00      	bge.n	800c6b0 <calculateSPLQ31+0x24>
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	105b      	asrs	r3, r3, #1
 800c6b2:	001a      	movs	r2, r3
 800c6b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	da00      	bge.n	800c6bc <calculateSPLQ31+0x30>
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	105b      	asrs	r3, r3, #1
 800c6be:	18d3      	adds	r3, r2, r3
 800c6c0:	2188      	movs	r1, #136	@ 0x88
 800c6c2:	187a      	adds	r2, r7, r1
 800c6c4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c6c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c6c8:	187b      	adds	r3, r7, r1
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	2284      	movs	r2, #132	@ 0x84
 800c6d2:	18b9      	adds	r1, r7, r2
 800c6d4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c6d6:	18bb      	adds	r3, r7, r2
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4ad1      	ldr	r2, [pc, #836]	@ (800ca20 <calculateSPLQ31+0x394>)
 800c6dc:	0019      	movs	r1, r3
 800c6de:	0010      	movs	r0, r2
 800c6e0:	f000 fc58 	bl	800cf94 <getPo2factor>
 800c6e4:	0003      	movs	r3, r0
 800c6e6:	2280      	movs	r2, #128	@ 0x80
 800c6e8:	18ba      	adds	r2, r7, r2
 800c6ea:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	2284      	movs	r2, #132	@ 0x84
 800c6f0:	2130      	movs	r1, #48	@ 0x30
 800c6f2:	1852      	adds	r2, r2, r1
 800c6f4:	19d2      	adds	r2, r2, r7
 800c6f6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	2280      	movs	r2, #128	@ 0x80
 800c6fc:	1852      	adds	r2, r2, r1
 800c6fe:	19d2      	adds	r2, r2, r7
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	e032      	b.n	800c76a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c704:	4ac5      	ldr	r2, [pc, #788]	@ (800ca1c <calculateSPLQ31+0x390>)
 800c706:	2680      	movs	r6, #128	@ 0x80
 800c708:	2330      	movs	r3, #48	@ 0x30
 800c70a:	18f1      	adds	r1, r6, r3
 800c70c:	19cb      	adds	r3, r1, r7
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	589a      	ldr	r2, [r3, r2]
 800c714:	2188      	movs	r1, #136	@ 0x88
 800c716:	1879      	adds	r1, r7, r1
 800c718:	680b      	ldr	r3, [r1, #0]
 800c71a:	1ad2      	subs	r2, r2, r3
 800c71c:	2180      	movs	r1, #128	@ 0x80
 800c71e:	1879      	adds	r1, r7, r1
 800c720:	680b      	ldr	r3, [r1, #0]
 800c722:	409a      	lsls	r2, r3
 800c724:	0011      	movs	r1, r2
 800c726:	4abf      	ldr	r2, [pc, #764]	@ (800ca24 <calculateSPLQ31+0x398>)
 800c728:	2084      	movs	r0, #132	@ 0x84
 800c72a:	2330      	movs	r3, #48	@ 0x30
 800c72c:	18c3      	adds	r3, r0, r3
 800c72e:	19db      	adds	r3, r3, r7
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c736:	2230      	movs	r2, #48	@ 0x30
 800c738:	1883      	adds	r3, r0, r2
 800c73a:	19db      	adds	r3, r3, r7
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	3301      	adds	r3, #1
 800c740:	49b8      	ldr	r1, [pc, #736]	@ (800ca24 <calculateSPLQ31+0x398>)
 800c742:	009a      	lsls	r2, r3, #2
 800c744:	2300      	movs	r3, #0
 800c746:	5053      	str	r3, [r2, r1]
        count += 2;
 800c748:	2230      	movs	r2, #48	@ 0x30
 800c74a:	1883      	adds	r3, r0, r2
 800c74c:	19db      	adds	r3, r3, r7
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3302      	adds	r3, #2
 800c752:	0011      	movs	r1, r2
 800c754:	1882      	adds	r2, r0, r2
 800c756:	19d2      	adds	r2, r2, r7
 800c758:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c75a:	000a      	movs	r2, r1
 800c75c:	18b3      	adds	r3, r6, r2
 800c75e:	19db      	adds	r3, r3, r7
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	18b2      	adds	r2, r6, r2
 800c766:	19d2      	adds	r2, r2, r7
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	2380      	movs	r3, #128	@ 0x80
 800c76c:	2630      	movs	r6, #48	@ 0x30
 800c76e:	199b      	adds	r3, r3, r6
 800c770:	19db      	adds	r3, r3, r7
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b7f      	cmp	r3, #127	@ 0x7f
 800c776:	d9c5      	bls.n	800c704 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c778:	4bab      	ldr	r3, [pc, #684]	@ (800ca28 <calculateSPLQ31+0x39c>)
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	49a9      	ldr	r1, [pc, #676]	@ (800ca24 <calculateSPLQ31+0x398>)
 800c77e:	2301      	movs	r3, #1
 800c780:	2200      	movs	r2, #0
 800c782:	f011 f971 	bl	801da68 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c786:	4aa9      	ldr	r2, [pc, #676]	@ (800ca2c <calculateSPLQ31+0x3a0>)
 800c788:	2338      	movs	r3, #56	@ 0x38
 800c78a:	199b      	adds	r3, r3, r6
 800c78c:	19d9      	adds	r1, r3, r7
 800c78e:	2334      	movs	r3, #52	@ 0x34
 800c790:	199b      	adds	r3, r3, r6
 800c792:	19d8      	adds	r0, r3, r7
 800c794:	237e      	movs	r3, #126	@ 0x7e
 800c796:	f000 fbbd 	bl	800cf14 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c79a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c79c:	2380      	movs	r3, #128	@ 0x80
 800c79e:	061b      	lsls	r3, r3, #24
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d101      	bne.n	800c7a8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c7a4:	4b9e      	ldr	r3, [pc, #632]	@ (800ca20 <calculateSPLQ31+0x394>)
 800c7a6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c7a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c7aa:	2380      	movs	r3, #128	@ 0x80
 800c7ac:	061b      	lsls	r3, r3, #24
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d101      	bne.n	800c7b6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ca20 <calculateSPLQ31+0x394>)
 800c7b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c7b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7b8:	17da      	asrs	r2, r3, #31
 800c7ba:	189b      	adds	r3, r3, r2
 800c7bc:	4053      	eors	r3, r2
 800c7be:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c7c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7c2:	17da      	asrs	r2, r3, #31
 800c7c4:	189b      	adds	r3, r3, r2
 800c7c6:	4053      	eors	r3, r2
 800c7c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c7ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c7cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	dd01      	ble.n	800c7d6 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c7d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c7d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7d8:	3304      	adds	r3, #4
 800c7da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c7dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7de:	4a90      	ldr	r2, [pc, #576]	@ (800ca20 <calculateSPLQ31+0x394>)
 800c7e0:	0019      	movs	r1, r3
 800c7e2:	0010      	movs	r0, r2
 800c7e4:	f000 fbd6 	bl	800cf94 <getPo2factor>
 800c7e8:	0003      	movs	r3, r0
 800c7ea:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	22ac      	movs	r2, #172	@ 0xac
 800c7f0:	18ba      	adds	r2, r7, r2
 800c7f2:	6013      	str	r3, [r2, #0]
 800c7f4:	e012      	b.n	800c81c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c7f6:	4a8b      	ldr	r2, [pc, #556]	@ (800ca24 <calculateSPLQ31+0x398>)
 800c7f8:	20ac      	movs	r0, #172	@ 0xac
 800c7fa:	183b      	adds	r3, r7, r0
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	589a      	ldr	r2, [r3, r2]
 800c802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c804:	409a      	lsls	r2, r3
 800c806:	0011      	movs	r1, r2
 800c808:	4a86      	ldr	r2, [pc, #536]	@ (800ca24 <calculateSPLQ31+0x398>)
 800c80a:	183b      	adds	r3, r7, r0
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c812:	183b      	adds	r3, r7, r0
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3301      	adds	r3, #1
 800c818:	183a      	adds	r2, r7, r0
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	23ac      	movs	r3, #172	@ 0xac
 800c81e:	18fb      	adds	r3, r7, r3
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b7f      	cmp	r3, #127	@ 0x7f
 800c824:	d9e7      	bls.n	800c7f6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c826:	4b7d      	ldr	r3, [pc, #500]	@ (800ca1c <calculateSPLQ31+0x390>)
 800c828:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c82a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c82c:	4b7d      	ldr	r3, [pc, #500]	@ (800ca24 <calculateSPLQ31+0x398>)
 800c82e:	2240      	movs	r2, #64	@ 0x40
 800c830:	0018      	movs	r0, r3
 800c832:	f011 fec3 	bl	801e5bc <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c836:	2330      	movs	r3, #48	@ 0x30
 800c838:	18fb      	adds	r3, r7, r3
 800c83a:	0018      	movs	r0, r3
 800c83c:	2330      	movs	r3, #48	@ 0x30
 800c83e:	001a      	movs	r2, r3
 800c840:	2100      	movs	r1, #0
 800c842:	f013 fcdf 	bl	8020204 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c846:	2200      	movs	r2, #0
 800c848:	2300      	movs	r3, #0
 800c84a:	21a0      	movs	r1, #160	@ 0xa0
 800c84c:	1879      	adds	r1, r7, r1
 800c84e:	600a      	str	r2, [r1, #0]
 800c850:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c852:	2301      	movs	r3, #1
 800c854:	229c      	movs	r2, #156	@ 0x9c
 800c856:	18ba      	adds	r2, r7, r2
 800c858:	6013      	str	r3, [r2, #0]
 800c85a:	e05b      	b.n	800c914 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c85c:	269c      	movs	r6, #156	@ 0x9c
 800c85e:	19bb      	adds	r3, r7, r6
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	009a      	lsls	r2, r3, #2
 800c864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c866:	189b      	adds	r3, r3, r2
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	17db      	asrs	r3, r3, #31
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	4b6f      	ldr	r3, [pc, #444]	@ (800ca30 <calculateSPLQ31+0x3a4>)
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	19bb      	adds	r3, r7, r6
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	18d3      	adds	r3, r2, r3
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	60bb      	str	r3, [r7, #8]
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6938      	ldr	r0, [r7, #16]
 800c88a:	6979      	ldr	r1, [r7, #20]
 800c88c:	f7f3 fe98 	bl	80005c0 <__aeabi_lmul>
 800c890:	0002      	movs	r2, r0
 800c892:	000b      	movs	r3, r1
 800c894:	0010      	movs	r0, r2
 800c896:	0019      	movs	r1, r3
 800c898:	23a0      	movs	r3, #160	@ 0xa0
 800c89a:	18fa      	adds	r2, r7, r3
 800c89c:	6853      	ldr	r3, [r2, #4]
 800c89e:	6812      	ldr	r2, [r2, #0]
 800c8a0:	1812      	adds	r2, r2, r0
 800c8a2:	414b      	adcs	r3, r1
 800c8a4:	21a0      	movs	r1, #160	@ 0xa0
 800c8a6:	1879      	adds	r1, r7, r1
 800c8a8:	600a      	str	r2, [r1, #0]
 800c8aa:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c8ac:	4b61      	ldr	r3, [pc, #388]	@ (800ca34 <calculateSPLQ31+0x3a8>)
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	19bb      	adds	r3, r7, r6
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	18d3      	adds	r3, r2, r3
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b06      	cmp	r3, #6
 800c8ba:	d025      	beq.n	800c908 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c8bc:	4b5d      	ldr	r3, [pc, #372]	@ (800ca34 <calculateSPLQ31+0x3a8>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	19bb      	adds	r3, r7, r6
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	18d3      	adds	r3, r2, r3
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2230      	movs	r2, #48	@ 0x30
 800c8ca:	18ba      	adds	r2, r7, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	18d3      	adds	r3, r2, r3
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	6859      	ldr	r1, [r3, #4]
 800c8d4:	19bb      	adds	r3, r7, r6
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	009a      	lsls	r2, r3, #2
 800c8da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8dc:	189b      	adds	r3, r3, r2
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	603b      	str	r3, [r7, #0]
 800c8e2:	17db      	asrs	r3, r3, #31
 800c8e4:	607b      	str	r3, [r7, #4]
 800c8e6:	4b53      	ldr	r3, [pc, #332]	@ (800ca34 <calculateSPLQ31+0x3a8>)
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	19be      	adds	r6, r7, r6
 800c8ec:	6833      	ldr	r3, [r6, #0]
 800c8ee:	18d3      	adds	r3, r2, r3
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	001e      	movs	r6, r3
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	1880      	adds	r0, r0, r2
 800c8fa:	4159      	adcs	r1, r3
 800c8fc:	2330      	movs	r3, #48	@ 0x30
 800c8fe:	18fa      	adds	r2, r7, r3
 800c900:	00f3      	lsls	r3, r6, #3
 800c902:	18d3      	adds	r3, r2, r3
 800c904:	6018      	str	r0, [r3, #0]
 800c906:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c908:	229c      	movs	r2, #156	@ 0x9c
 800c90a:	18bb      	adds	r3, r7, r2
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3301      	adds	r3, #1
 800c910:	18ba      	adds	r2, r7, r2
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	239c      	movs	r3, #156	@ 0x9c
 800c916:	18fb      	adds	r3, r7, r3
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c91c:	d99e      	bls.n	800c85c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c91e:	2380      	movs	r3, #128	@ 0x80
 800c920:	18fb      	adds	r3, r7, r3
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	001a      	movs	r2, r3
 800c928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	18d3      	adds	r3, r2, r3
 800c92e:	3b22      	subs	r3, #34	@ 0x22
 800c930:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c934:	17da      	asrs	r2, r3, #31
 800c936:	189b      	adds	r3, r3, r2
 800c938:	4053      	eors	r3, r2
 800c93a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c93c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c93e:	2b00      	cmp	r3, #0
 800c940:	da62      	bge.n	800ca08 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c944:	3b20      	subs	r3, #32
 800c946:	2b00      	cmp	r3, #0
 800c948:	db05      	blt.n	800c956 <calculateSPLQ31+0x2ca>
 800c94a:	22a0      	movs	r2, #160	@ 0xa0
 800c94c:	18ba      	adds	r2, r7, r2
 800c94e:	6812      	ldr	r2, [r2, #0]
 800c950:	409a      	lsls	r2, r3
 800c952:	627a      	str	r2, [r7, #36]	@ 0x24
 800c954:	e010      	b.n	800c978 <calculateSPLQ31+0x2ec>
 800c956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c958:	2220      	movs	r2, #32
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	22a0      	movs	r2, #160	@ 0xa0
 800c95e:	18ba      	adds	r2, r7, r2
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	40da      	lsrs	r2, r3
 800c964:	0013      	movs	r3, r2
 800c966:	22a4      	movs	r2, #164	@ 0xa4
 800c968:	18ba      	adds	r2, r7, r2
 800c96a:	6811      	ldr	r1, [r2, #0]
 800c96c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c96e:	4091      	lsls	r1, r2
 800c970:	6279      	str	r1, [r7, #36]	@ 0x24
 800c972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c974:	431a      	orrs	r2, r3
 800c976:	627a      	str	r2, [r7, #36]	@ 0x24
 800c978:	21a0      	movs	r1, #160	@ 0xa0
 800c97a:	187b      	adds	r3, r7, r1
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c980:	409a      	lsls	r2, r3
 800c982:	623a      	str	r2, [r7, #32]
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c988:	187a      	adds	r2, r7, r1
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c98e:	2300      	movs	r3, #0
 800c990:	2298      	movs	r2, #152	@ 0x98
 800c992:	18ba      	adds	r2, r7, r2
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	e031      	b.n	800c9fc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c998:	2330      	movs	r3, #48	@ 0x30
 800c99a:	18fa      	adds	r2, r7, r3
 800c99c:	2398      	movs	r3, #152	@ 0x98
 800c99e:	18fb      	adds	r3, r7, r3
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	18d3      	adds	r3, r2, r3
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9ac:	3920      	subs	r1, #32
 800c9ae:	2900      	cmp	r1, #0
 800c9b0:	db03      	blt.n	800c9ba <calculateSPLQ31+0x32e>
 800c9b2:	0010      	movs	r0, r2
 800c9b4:	4088      	lsls	r0, r1
 800c9b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9b8:	e00c      	b.n	800c9d4 <calculateSPLQ31+0x348>
 800c9ba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9bc:	2020      	movs	r0, #32
 800c9be:	1a41      	subs	r1, r0, r1
 800c9c0:	0010      	movs	r0, r2
 800c9c2:	40c8      	lsrs	r0, r1
 800c9c4:	0001      	movs	r1, r0
 800c9c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9c8:	001c      	movs	r4, r3
 800c9ca:	4084      	lsls	r4, r0
 800c9cc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c9ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9d0:	4308      	orrs	r0, r1
 800c9d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9d6:	0013      	movs	r3, r2
 800c9d8:	408b      	lsls	r3, r1
 800c9da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9dc:	2330      	movs	r3, #48	@ 0x30
 800c9de:	18fa      	adds	r2, r7, r3
 800c9e0:	2098      	movs	r0, #152	@ 0x98
 800c9e2:	183b      	adds	r3, r7, r0
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	18d3      	adds	r3, r2, r3
 800c9ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ee:	6019      	str	r1, [r3, #0]
 800c9f0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9f2:	183b      	adds	r3, r7, r0
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	183a      	adds	r2, r7, r0
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	2398      	movs	r3, #152	@ 0x98
 800c9fe:	18fb      	adds	r3, r7, r3
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b05      	cmp	r3, #5
 800ca04:	d9c8      	bls.n	800c998 <calculateSPLQ31+0x30c>
 800ca06:	e06b      	b.n	800cae0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800ca08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca0a:	3b20      	subs	r3, #32
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	db13      	blt.n	800ca38 <calculateSPLQ31+0x3ac>
 800ca10:	22a4      	movs	r2, #164	@ 0xa4
 800ca12:	18ba      	adds	r2, r7, r2
 800ca14:	6812      	ldr	r2, [r2, #0]
 800ca16:	40da      	lsrs	r2, r3
 800ca18:	61ba      	str	r2, [r7, #24]
 800ca1a:	e01e      	b.n	800ca5a <calculateSPLQ31+0x3ce>
 800ca1c:	200019a4 	.word	0x200019a4
 800ca20:	7fffffff 	.word	0x7fffffff
 800ca24:	20001bf0 	.word	0x20001bf0
 800ca28:	200000bc 	.word	0x200000bc
 800ca2c:	20001bf8 	.word	0x20001bf8
 800ca30:	200000c0 	.word	0x200000c0
 800ca34:	200000cc 	.word	0x200000cc
 800ca38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	22a4      	movs	r2, #164	@ 0xa4
 800ca40:	18ba      	adds	r2, r7, r2
 800ca42:	6812      	ldr	r2, [r2, #0]
 800ca44:	409a      	lsls	r2, r3
 800ca46:	0013      	movs	r3, r2
 800ca48:	22a0      	movs	r2, #160	@ 0xa0
 800ca4a:	18ba      	adds	r2, r7, r2
 800ca4c:	6811      	ldr	r1, [r2, #0]
 800ca4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca50:	40d1      	lsrs	r1, r2
 800ca52:	61b9      	str	r1, [r7, #24]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	431a      	orrs	r2, r3
 800ca58:	61ba      	str	r2, [r7, #24]
 800ca5a:	23a4      	movs	r3, #164	@ 0xa4
 800ca5c:	18fb      	adds	r3, r7, r3
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca62:	40da      	lsrs	r2, r3
 800ca64:	61fa      	str	r2, [r7, #28]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	21a0      	movs	r1, #160	@ 0xa0
 800ca6c:	1879      	adds	r1, r7, r1
 800ca6e:	600a      	str	r2, [r1, #0]
 800ca70:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca72:	2300      	movs	r3, #0
 800ca74:	2294      	movs	r2, #148	@ 0x94
 800ca76:	18ba      	adds	r2, r7, r2
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	e02c      	b.n	800cad6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca7c:	2330      	movs	r3, #48	@ 0x30
 800ca7e:	18fa      	adds	r2, r7, r3
 800ca80:	2394      	movs	r3, #148	@ 0x94
 800ca82:	18fb      	adds	r3, r7, r3
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	18d3      	adds	r3, r2, r3
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca90:	3920      	subs	r1, #32
 800ca92:	2900      	cmp	r1, #0
 800ca94:	db03      	blt.n	800ca9e <calculateSPLQ31+0x412>
 800ca96:	0018      	movs	r0, r3
 800ca98:	40c8      	lsrs	r0, r1
 800ca9a:	0004      	movs	r4, r0
 800ca9c:	e00a      	b.n	800cab4 <calculateSPLQ31+0x428>
 800ca9e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800caa0:	2020      	movs	r0, #32
 800caa2:	1a41      	subs	r1, r0, r1
 800caa4:	0018      	movs	r0, r3
 800caa6:	4088      	lsls	r0, r1
 800caa8:	0001      	movs	r1, r0
 800caaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800caac:	0016      	movs	r6, r2
 800caae:	40c6      	lsrs	r6, r0
 800cab0:	0034      	movs	r4, r6
 800cab2:	430c      	orrs	r4, r1
 800cab4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cab6:	40cb      	lsrs	r3, r1
 800cab8:	001d      	movs	r5, r3
 800caba:	2330      	movs	r3, #48	@ 0x30
 800cabc:	18fa      	adds	r2, r7, r3
 800cabe:	2194      	movs	r1, #148	@ 0x94
 800cac0:	187b      	adds	r3, r7, r1
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	18d3      	adds	r3, r2, r3
 800cac8:	601c      	str	r4, [r3, #0]
 800caca:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cacc:	187b      	adds	r3, r7, r1
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3301      	adds	r3, #1
 800cad2:	187a      	adds	r2, r7, r1
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	2394      	movs	r3, #148	@ 0x94
 800cad8:	18fb      	adds	r3, r7, r3
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b05      	cmp	r3, #5
 800cade:	d9cd      	bls.n	800ca7c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800cae0:	230f      	movs	r3, #15
 800cae2:	425d      	negs	r5, r3
 800cae4:	2305      	movs	r3, #5
 800cae6:	425e      	negs	r6, r3
 800cae8:	4b4a      	ldr	r3, [pc, #296]	@ (800cc14 <calculateSPLQ31+0x588>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	4b4a      	ldr	r3, [pc, #296]	@ (800cc18 <calculateSPLQ31+0x58c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	21a0      	movs	r1, #160	@ 0xa0
 800caf6:	1879      	adds	r1, r7, r1
 800caf8:	6808      	ldr	r0, [r1, #0]
 800cafa:	6849      	ldr	r1, [r1, #4]
 800cafc:	4c47      	ldr	r4, [pc, #284]	@ (800cc1c <calculateSPLQ31+0x590>)
 800cafe:	9403      	str	r4, [sp, #12]
 800cb00:	4c47      	ldr	r4, [pc, #284]	@ (800cc20 <calculateSPLQ31+0x594>)
 800cb02:	9402      	str	r4, [sp, #8]
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	9200      	str	r2, [sp, #0]
 800cb08:	0033      	movs	r3, r6
 800cb0a:	002a      	movs	r2, r5
 800cb0c:	f000 fa86 	bl	800d01c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cb10:	2300      	movs	r3, #0
 800cb12:	2290      	movs	r2, #144	@ 0x90
 800cb14:	18ba      	adds	r2, r7, r2
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	e026      	b.n	800cb68 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cb1a:	2330      	movs	r3, #48	@ 0x30
 800cb1c:	18fa      	adds	r2, r7, r3
 800cb1e:	2490      	movs	r4, #144	@ 0x90
 800cb20:	193b      	adds	r3, r7, r4
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	18d3      	adds	r3, r2, r3
 800cb28:	6818      	ldr	r0, [r3, #0]
 800cb2a:	6859      	ldr	r1, [r3, #4]
 800cb2c:	230f      	movs	r3, #15
 800cb2e:	425d      	negs	r5, r3
 800cb30:	2305      	movs	r3, #5
 800cb32:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cb34:	193b      	adds	r3, r7, r4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	009a      	lsls	r2, r3, #2
 800cb3a:	4b3a      	ldr	r3, [pc, #232]	@ (800cc24 <calculateSPLQ31+0x598>)
 800cb3c:	18d3      	adds	r3, r2, r3
 800cb3e:	193a      	adds	r2, r7, r4
 800cb40:	6812      	ldr	r2, [r2, #0]
 800cb42:	0094      	lsls	r4, r2, #2
 800cb44:	4a38      	ldr	r2, [pc, #224]	@ (800cc28 <calculateSPLQ31+0x59c>)
 800cb46:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cb48:	9203      	str	r2, [sp, #12]
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	0033      	movs	r3, r6
 800cb56:	002a      	movs	r2, r5
 800cb58:	f000 fa60 	bl	800d01c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cb5c:	2490      	movs	r4, #144	@ 0x90
 800cb5e:	193b      	adds	r3, r7, r4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	193a      	adds	r2, r7, r4
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	2390      	movs	r3, #144	@ 0x90
 800cb6a:	18fb      	adds	r3, r7, r3
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b05      	cmp	r3, #5
 800cb70:	d9d3      	bls.n	800cb1a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cb72:	4b2b      	ldr	r3, [pc, #172]	@ (800cc20 <calculateSPLQ31+0x594>)
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	4b2d      	ldr	r3, [pc, #180]	@ (800cc2c <calculateSPLQ31+0x5a0>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	18d2      	adds	r2, r2, r3
 800cb7c:	4b2b      	ldr	r3, [pc, #172]	@ (800cc2c <calculateSPLQ31+0x5a0>)
 800cb7e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb80:	4b26      	ldr	r3, [pc, #152]	@ (800cc1c <calculateSPLQ31+0x590>)
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	4b2a      	ldr	r3, [pc, #168]	@ (800cc30 <calculateSPLQ31+0x5a4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	18d2      	adds	r2, r2, r3
 800cb8a:	4b29      	ldr	r3, [pc, #164]	@ (800cc30 <calculateSPLQ31+0x5a4>)
 800cb8c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb8e:	2300      	movs	r3, #0
 800cb90:	228c      	movs	r2, #140	@ 0x8c
 800cb92:	18ba      	adds	r2, r7, r2
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	e025      	b.n	800cbe4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb98:	4b22      	ldr	r3, [pc, #136]	@ (800cc24 <calculateSPLQ31+0x598>)
 800cb9a:	208c      	movs	r0, #140	@ 0x8c
 800cb9c:	183a      	adds	r2, r7, r0
 800cb9e:	6812      	ldr	r2, [r2, #0]
 800cba0:	0092      	lsls	r2, r2, #2
 800cba2:	58d2      	ldr	r2, [r2, r3]
 800cba4:	4b23      	ldr	r3, [pc, #140]	@ (800cc34 <calculateSPLQ31+0x5a8>)
 800cba6:	1839      	adds	r1, r7, r0
 800cba8:	6809      	ldr	r1, [r1, #0]
 800cbaa:	0089      	lsls	r1, r1, #2
 800cbac:	58cb      	ldr	r3, [r1, r3]
 800cbae:	18d1      	adds	r1, r2, r3
 800cbb0:	4b20      	ldr	r3, [pc, #128]	@ (800cc34 <calculateSPLQ31+0x5a8>)
 800cbb2:	183a      	adds	r2, r7, r0
 800cbb4:	6812      	ldr	r2, [r2, #0]
 800cbb6:	0092      	lsls	r2, r2, #2
 800cbb8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cbba:	4b1b      	ldr	r3, [pc, #108]	@ (800cc28 <calculateSPLQ31+0x59c>)
 800cbbc:	183a      	adds	r2, r7, r0
 800cbbe:	6812      	ldr	r2, [r2, #0]
 800cbc0:	0092      	lsls	r2, r2, #2
 800cbc2:	58d2      	ldr	r2, [r2, r3]
 800cbc4:	4b1c      	ldr	r3, [pc, #112]	@ (800cc38 <calculateSPLQ31+0x5ac>)
 800cbc6:	1839      	adds	r1, r7, r0
 800cbc8:	6809      	ldr	r1, [r1, #0]
 800cbca:	0089      	lsls	r1, r1, #2
 800cbcc:	58cb      	ldr	r3, [r1, r3]
 800cbce:	18d1      	adds	r1, r2, r3
 800cbd0:	4b19      	ldr	r3, [pc, #100]	@ (800cc38 <calculateSPLQ31+0x5ac>)
 800cbd2:	183a      	adds	r2, r7, r0
 800cbd4:	6812      	ldr	r2, [r2, #0]
 800cbd6:	0092      	lsls	r2, r2, #2
 800cbd8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cbda:	183b      	adds	r3, r7, r0
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	183a      	adds	r2, r7, r0
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	238c      	movs	r3, #140	@ 0x8c
 800cbe6:	18fb      	adds	r3, r7, r3
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b05      	cmp	r3, #5
 800cbec:	d9d4      	bls.n	800cb98 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cbee:	4b13      	ldr	r3, [pc, #76]	@ (800cc3c <calculateSPLQ31+0x5b0>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	4b11      	ldr	r3, [pc, #68]	@ (800cc3c <calculateSPLQ31+0x5b0>)
 800cbf6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cbf8:	4b10      	ldr	r3, [pc, #64]	@ (800cc3c <calculateSPLQ31+0x5b0>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b0f      	cmp	r3, #15
 800cbfe:	d905      	bls.n	800cc0c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cc00:	4b0f      	ldr	r3, [pc, #60]	@ (800cc40 <calculateSPLQ31+0x5b4>)
 800cc02:	2201      	movs	r2, #1
 800cc04:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cc06:	4b0f      	ldr	r3, [pc, #60]	@ (800cc44 <calculateSPLQ31+0x5b8>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	701a      	strb	r2, [r3, #0]
    }
}
 800cc0c:	46c0      	nop			@ (mov r8, r8)
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	b02f      	add	sp, #188	@ 0xbc
 800cc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc14:	200000c4 	.word	0x200000c4
 800cc18:	200000c8 	.word	0x200000c8
 800cc1c:	20001170 	.word	0x20001170
 800cc20:	2000116c 	.word	0x2000116c
 800cc24:	20001174 	.word	0x20001174
 800cc28:	2000118c 	.word	0x2000118c
 800cc2c:	20001bb4 	.word	0x20001bb4
 800cc30:	20001bb8 	.word	0x20001bb8
 800cc34:	20001bbc 	.word	0x20001bbc
 800cc38:	20001bd4 	.word	0x20001bd4
 800cc3c:	20001bec 	.word	0x20001bec
 800cc40:	20001163 	.word	0x20001163
 800cc44:	20001161 	.word	0x20001161

0800cc48 <resetSPLstate>:

static void resetSPLstate(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cc4e:	4b11      	ldr	r3, [pc, #68]	@ (800cc94 <resetSPLstate+0x4c>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cc54:	4b10      	ldr	r3, [pc, #64]	@ (800cc98 <resetSPLstate+0x50>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cc5a:	4b10      	ldr	r3, [pc, #64]	@ (800cc9c <resetSPLstate+0x54>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc60:	2300      	movs	r3, #0
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	e00c      	b.n	800cc80 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cc66:	4b0e      	ldr	r3, [pc, #56]	@ (800cca0 <resetSPLstate+0x58>)
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	0092      	lsls	r2, r2, #2
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cc70:	4b0c      	ldr	r3, [pc, #48]	@ (800cca4 <resetSPLstate+0x5c>)
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	0092      	lsls	r2, r2, #2
 800cc76:	2100      	movs	r1, #0
 800cc78:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b05      	cmp	r3, #5
 800cc84:	d9ef      	bls.n	800cc66 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc86:	4b08      	ldr	r3, [pc, #32]	@ (800cca8 <resetSPLstate+0x60>)
 800cc88:	2200      	movs	r2, #0
 800cc8a:	701a      	strb	r2, [r3, #0]
}
 800cc8c:	46c0      	nop			@ (mov r8, r8)
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	b002      	add	sp, #8
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	20001bb4 	.word	0x20001bb4
 800cc98:	20001bb8 	.word	0x20001bb8
 800cc9c:	20001bec 	.word	0x20001bec
 800cca0:	20001bbc 	.word	0x20001bbc
 800cca4:	20001bd4 	.word	0x20001bd4
 800cca8:	20001163 	.word	0x20001163

0800ccac <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800ccac:	b5b0      	push	{r4, r5, r7, lr}
 800ccae:	b090      	sub	sp, #64	@ 0x40
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	0019      	movs	r1, r3
 800ccb8:	1dfb      	adds	r3, r7, #7
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	1dbb      	adds	r3, r7, #6
 800ccbe:	1c0a      	adds	r2, r1, #0
 800ccc0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800ccc2:	1dfb      	adds	r3, r7, #7
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800ccca:	4b3b      	ldr	r3, [pc, #236]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800ccd0:	4b3a      	ldr	r3, [pc, #232]	@ (800cdbc <getFilteredMaxAmplitudeQ31+0x110>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800ccde:	2305      	movs	r3, #5
 800cce0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cce2:	2300      	movs	r3, #0
 800cce4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cce6:	e040      	b.n	800cd6a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	18d3      	adds	r3, r2, r3
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	409a      	lsls	r2, r3
 800ccf6:	0013      	movs	r3, r2
 800ccf8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800ccfa:	4b30      	ldr	r3, [pc, #192]	@ (800cdbc <getFilteredMaxAmplitudeQ31+0x110>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	425a      	negs	r2, r3
 800cd00:	4b2e      	ldr	r3, [pc, #184]	@ (800cdbc <getFilteredMaxAmplitudeQ31+0x110>)
 800cd02:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cd04:	2418      	movs	r4, #24
 800cd06:	193a      	adds	r2, r7, r4
 800cd08:	492c      	ldr	r1, [pc, #176]	@ (800cdbc <getFilteredMaxAmplitudeQ31+0x110>)
 800cd0a:	231c      	movs	r3, #28
 800cd0c:	18f8      	adds	r0, r7, r3
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f011 fcac 	bl	801e66c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cd14:	2514      	movs	r5, #20
 800cd16:	197a      	adds	r2, r7, r5
 800cd18:	1939      	adds	r1, r7, r4
 800cd1a:	4829      	ldr	r0, [pc, #164]	@ (800cdc0 <getFilteredMaxAmplitudeQ31+0x114>)
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f011 fc73 	bl	801e608 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cd22:	2410      	movs	r4, #16
 800cd24:	193a      	adds	r2, r7, r4
 800cd26:	4924      	ldr	r1, [pc, #144]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd28:	4826      	ldr	r0, [pc, #152]	@ (800cdc4 <getFilteredMaxAmplitudeQ31+0x118>)
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	f011 fc6c 	bl	801e608 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cd30:	4a21      	ldr	r2, [pc, #132]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd32:	1939      	adds	r1, r7, r4
 800cd34:	1978      	adds	r0, r7, r5
 800cd36:	2301      	movs	r3, #1
 800cd38:	f011 fc98 	bl	801e66c <arm_add_q31>

        lastData = fx;
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	4b1f      	ldr	r3, [pc, #124]	@ (800cdbc <getFilteredMaxAmplitudeQ31+0x110>)
 800cd40:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800cd42:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	da03      	bge.n	800cd54 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800cd4c:	4b1a      	ldr	r3, [pc, #104]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd52:	e007      	b.n	800cd64 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cd54:	4b18      	ldr	r3, [pc, #96]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	dd02      	ble.n	800cd64 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cd5e:	4b16      	ldr	r3, [pc, #88]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd66:	3301      	adds	r3, #1
 800cd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d3ba      	bcc.n	800cce8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd74:	17da      	asrs	r2, r3, #31
 800cd76:	189b      	adds	r3, r3, r2
 800cd78:	4053      	eors	r3, r2
 800cd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d200      	bcs.n	800cd8a <getFilteredMaxAmplitudeQ31+0xde>
 800cd88:	0013      	movs	r3, r2
 800cd8a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd90:	40da      	lsrs	r2, r3
 800cd92:	0013      	movs	r3, r2
 800cd94:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd96:	1dbb      	adds	r3, r7, #6
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d007      	beq.n	800cdae <getFilteredMaxAmplitudeQ31+0x102>
 800cd9e:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6a3a      	ldr	r2, [r7, #32]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d902      	bls.n	800cdae <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cda8:	4b07      	ldr	r3, [pc, #28]	@ (800cdc8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cdaa:	6a3a      	ldr	r2, [r7, #32]
 800cdac:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cdae:	6a3b      	ldr	r3, [r7, #32]
}
 800cdb0:	0018      	movs	r0, r3
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	b010      	add	sp, #64	@ 0x40
 800cdb6:	bdb0      	pop	{r4, r5, r7, pc}
 800cdb8:	20001ff0 	.word	0x20001ff0
 800cdbc:	20001ff4 	.word	0x20001ff4
 800cdc0:	08025618 	.word	0x08025618
 800cdc4:	0802561c 	.word	0x0802561c
 800cdc8:	20001168 	.word	0x20001168

0800cdcc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cdd8:	4913      	ldr	r1, [pc, #76]	@ (800ce28 <floatToIntAndFrac2dp+0x5c>)
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f7f4 f8e0 	bl	8000fa0 <__aeabi_fmul>
 800cde0:	1c03      	adds	r3, r0, #0
 800cde2:	1c18      	adds	r0, r3, #0
 800cde4:	f016 f876 	bl	8022ed4 <roundf>
 800cde8:	1c03      	adds	r3, r0, #0
 800cdea:	1c18      	adds	r0, r3, #0
 800cdec:	f7f3 fc16 	bl	800061c <__aeabi_f2uiz>
 800cdf0:	0003      	movs	r3, r0
 800cdf2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2164      	movs	r1, #100	@ 0x64
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	f7f3 f9d3 	bl	80001a4 <__udivsi3>
 800cdfe:	0003      	movs	r3, r0
 800ce00:	001a      	movs	r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2164      	movs	r1, #100	@ 0x64
 800ce12:	434b      	muls	r3, r1
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	701a      	strb	r2, [r3, #0]
}
 800ce1e:	46c0      	nop			@ (mov r8, r8)
 800ce20:	46bd      	mov	sp, r7
 800ce22:	b006      	add	sp, #24
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	46c0      	nop			@ (mov r8, r8)
 800ce28:	42c80000 	.word	0x42c80000

0800ce2c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ce38:	4914      	ldr	r1, [pc, #80]	@ (800ce8c <floatToIntAndFrac1dp+0x60>)
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f7f4 f8b0 	bl	8000fa0 <__aeabi_fmul>
 800ce40:	1c03      	adds	r3, r0, #0
 800ce42:	1c18      	adds	r0, r3, #0
 800ce44:	f016 f846 	bl	8022ed4 <roundf>
 800ce48:	1c03      	adds	r3, r0, #0
 800ce4a:	1c18      	adds	r0, r3, #0
 800ce4c:	f7f3 fbe6 	bl	800061c <__aeabi_f2uiz>
 800ce50:	0003      	movs	r3, r0
 800ce52:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	210a      	movs	r1, #10
 800ce58:	0018      	movs	r0, r3
 800ce5a:	f7f3 f9a3 	bl	80001a4 <__udivsi3>
 800ce5e:	0003      	movs	r3, r0
 800ce60:	001a      	movs	r2, r3
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	1c19      	adds	r1, r3, #0
 800ce72:	0089      	lsls	r1, r1, #2
 800ce74:	18cb      	adds	r3, r1, r3
 800ce76:	18db      	adds	r3, r3, r3
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	701a      	strb	r2, [r3, #0]
}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	46bd      	mov	sp, r7
 800ce86:	b006      	add	sp, #24
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	41200000 	.word	0x41200000

0800ce90 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce90:	b590      	push	{r4, r7, lr}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7f4 fb96 	bl	80015d0 <__aeabi_i2f>
 800cea4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800cea6:	6838      	ldr	r0, [r7, #0]
 800cea8:	f7f4 fb92 	bl	80015d0 <__aeabi_i2f>
 800ceac:	1c03      	adds	r3, r0, #0
 800ceae:	4918      	ldr	r1, [pc, #96]	@ (800cf10 <sumToIntAverage+0x80>)
 800ceb0:	1c18      	adds	r0, r3, #0
 800ceb2:	f7f3 fe8f 	bl	8000bd4 <__aeabi_fdiv>
 800ceb6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ceb8:	1c19      	adds	r1, r3, #0
 800ceba:	1c20      	adds	r0, r4, #0
 800cebc:	f7f3 fd00 	bl	80008c0 <__aeabi_fadd>
 800cec0:	1c03      	adds	r3, r0, #0
 800cec2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800cec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cec6:	f7f4 fbcf 	bl	8001668 <__aeabi_ui2f>
 800ceca:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800cecc:	1c19      	adds	r1, r3, #0
 800cece:	1c20      	adds	r0, r4, #0
 800ced0:	f7f3 fe80 	bl	8000bd4 <__aeabi_fdiv>
 800ced4:	1c03      	adds	r3, r0, #0
 800ced6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	2310      	movs	r3, #16
 800cee0:	18f9      	adds	r1, r7, r3
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	1c18      	adds	r0, r3, #0
 800cee6:	f7ff ffa1 	bl	800ce2c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	2bff      	cmp	r3, #255	@ 0xff
 800ceee:	d906      	bls.n	800cefe <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	22ff      	movs	r2, #255	@ 0xff
 800cef4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2209      	movs	r2, #9
 800cefa:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800cefc:	e003      	b.n	800cf06 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	701a      	strb	r2, [r3, #0]
}
 800cf06:	46c0      	nop			@ (mov r8, r8)
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	b007      	add	sp, #28
 800cf0c:	bd90      	pop	{r4, r7, pc}
 800cf0e:	46c0      	nop			@ (mov r8, r8)
 800cf10:	41200000 	.word	0x41200000

0800cf14 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	2280      	movs	r2, #128	@ 0x80
 800cf26:	0612      	lsls	r2, r2, #24
 800cf28:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4a18      	ldr	r2, [pc, #96]	@ (800cf90 <findMinMax+0x7c>)
 800cf2e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf30:	2300      	movs	r3, #0
 800cf32:	617b      	str	r3, [r7, #20]
 800cf34:	e022      	b.n	800cf7c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	18d3      	adds	r3, r2, r3
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	da06      	bge.n	800cf56 <findMinMax+0x42>
        {
            min[0] = array[i];
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	18d3      	adds	r3, r2, r3
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	18d3      	adds	r3, r2, r3
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	dd06      	ble.n	800cf76 <findMinMax+0x62>
        {
            max[0] = array[i];
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	18d3      	adds	r3, r2, r3
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	617b      	str	r3, [r7, #20]
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d3d8      	bcc.n	800cf36 <findMinMax+0x22>
        }
    }
}
 800cf84:	46c0      	nop			@ (mov r8, r8)
 800cf86:	46c0      	nop			@ (mov r8, r8)
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	b006      	add	sp, #24
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	46c0      	nop			@ (mov r8, r8)
 800cf90:	7fffffff 	.word	0x7fffffff

0800cf94 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d302      	bcc.n	800cfb0 <getPo2factor+0x1c>
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d107      	bne.n	800cfc0 <getPo2factor+0x2c>
    {
        return 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	e00d      	b.n	800cfd0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	085b      	lsrs	r3, r3, #1
 800cfb8:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d2f5      	bcs.n	800cfb4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cfce:	68fb      	ldr	r3, [r7, #12]
}
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	b004      	add	sp, #16
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f7f4 fb3e 	bl	8001668 <__aeabi_ui2f>
 800cfec:	1c03      	adds	r3, r0, #0
 800cfee:	1c19      	adds	r1, r3, #0
 800cff0:	68b8      	ldr	r0, [r7, #8]
 800cff2:	f7f3 ffd5 	bl	8000fa0 <__aeabi_fmul>
 800cff6:	1c03      	adds	r3, r0, #0
 800cff8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	2310      	movs	r3, #16
 800d002:	18f9      	adds	r1, r7, r3
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	1c18      	adds	r0, r3, #0
 800d008:	f7ff fee0 	bl	800cdcc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	b29a      	uxth	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	801a      	strh	r2, [r3, #0]
}
 800d014:	46c0      	nop			@ (mov r8, r8)
 800d016:	46bd      	mov	sp, r7
 800d018:	b006      	add	sp, #24
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	60b8      	str	r0, [r7, #8]
 800d024:	60f9      	str	r1, [r7, #12]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	6a3a      	ldr	r2, [r7, #32]
 800d02e:	68b8      	ldr	r0, [r7, #8]
 800d030:	68f9      	ldr	r1, [r7, #12]
 800d032:	f7fa f92f 	bl	8007294 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	18d2      	adds	r2, r2, r3
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	18d2      	adds	r2, r2, r3
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	18d2      	adds	r2, r2, r3
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	18d2      	adds	r2, r2, r3
 800d052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d054:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	0011      	movs	r1, r2
 800d05c:	0018      	movs	r0, r3
 800d05e:	f7fa f9a9 	bl	80073b4 <correctIntFracNumber>
}
 800d062:	46c0      	nop			@ (mov r8, r8)
 800d064:	46bd      	mov	sp, r7
 800d066:	b004      	add	sp, #16
 800d068:	bd80      	pop	{r7, pc}

0800d06a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b086      	sub	sp, #24
 800d06e:	af00      	add	r7, sp, #0
 800d070:	60f8      	str	r0, [r7, #12]
 800d072:	60b9      	str	r1, [r7, #8]
 800d074:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d07a:	2300      	movs	r3, #0
 800d07c:	613b      	str	r3, [r7, #16]
 800d07e:	e019      	b.n	800d0b4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	18d3      	adds	r3, r2, r3
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	3201      	adds	r2, #1
 800d090:	0052      	lsls	r2, r2, #1
 800d092:	68f9      	ldr	r1, [r7, #12]
 800d094:	188a      	adds	r2, r1, r2
 800d096:	8812      	ldrh	r2, [r2, #0]
 800d098:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d09a:	0019      	movs	r1, r3
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d0a4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d0a6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	693a      	ldr	r2, [r7, #16]
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d3e1      	bcc.n	800d080 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d0bc:	46c0      	nop			@ (mov r8, r8)
 800d0be:	46c0      	nop			@ (mov r8, r8)
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	b006      	add	sp, #24
 800d0c4:	bd80      	pop	{r7, pc}
	...

0800d0c8 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	af00      	add	r7, sp, #0
  init = false;
 800d0cc:	4b02      	ldr	r3, [pc, #8]	@ (800d0d8 <InitDone+0x10>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
}
 800d0d2:	46c0      	nop			@ (mov r8, r8)
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	200000d0 	.word	0x200000d0

0800d0dc <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d0e2:	f7f9 f8fd 	bl	80062e0 <ReadBatteryVoltage>
 800d0e6:	1c02      	adds	r2, r0, #0
 800d0e8:	4b25      	ldr	r3, [pc, #148]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d0ea:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d0ec:	4b24      	ldr	r3, [pc, #144]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4924      	ldr	r1, [pc, #144]	@ (800d184 <batteryChargeCheck+0xa8>)
 800d0f2:	1c18      	adds	r0, r3, #0
 800d0f4:	f7f3 fa1c 	bl	8000530 <__aeabi_fcmplt>
 800d0f8:	1e03      	subs	r3, r0, #0
 800d0fa:	d002      	beq.n	800d102 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d0fc:	1dfb      	adds	r3, r7, #7
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d102:	4b1f      	ldr	r3, [pc, #124]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	491f      	ldr	r1, [pc, #124]	@ (800d184 <batteryChargeCheck+0xa8>)
 800d108:	1c18      	adds	r0, r3, #0
 800d10a:	f7f3 fa2f 	bl	800056c <__aeabi_fcmpge>
 800d10e:	1e03      	subs	r3, r0, #0
 800d110:	d00d      	beq.n	800d12e <batteryChargeCheck+0x52>
 800d112:	4b1b      	ldr	r3, [pc, #108]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	1c18      	adds	r0, r3, #0
 800d118:	f7f6 f9a4 	bl	8003464 <__aeabi_f2d>
 800d11c:	4a1a      	ldr	r2, [pc, #104]	@ (800d188 <batteryChargeCheck+0xac>)
 800d11e:	4b1b      	ldr	r3, [pc, #108]	@ (800d18c <batteryChargeCheck+0xb0>)
 800d120:	f7f3 f9cc 	bl	80004bc <__aeabi_dcmplt>
 800d124:	1e03      	subs	r3, r0, #0
 800d126:	d002      	beq.n	800d12e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d128:	1dfb      	adds	r3, r7, #7
 800d12a:	2201      	movs	r2, #1
 800d12c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d12e:	4b14      	ldr	r3, [pc, #80]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	1c18      	adds	r0, r3, #0
 800d134:	f7f6 f996 	bl	8003464 <__aeabi_f2d>
 800d138:	4a13      	ldr	r2, [pc, #76]	@ (800d188 <batteryChargeCheck+0xac>)
 800d13a:	4b14      	ldr	r3, [pc, #80]	@ (800d18c <batteryChargeCheck+0xb0>)
 800d13c:	f7f3 f9dc 	bl	80004f8 <__aeabi_dcmpge>
 800d140:	1e03      	subs	r3, r0, #0
 800d142:	d00b      	beq.n	800d15c <batteryChargeCheck+0x80>
 800d144:	4b0e      	ldr	r3, [pc, #56]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2181      	movs	r1, #129	@ 0x81
 800d14a:	05c9      	lsls	r1, r1, #23
 800d14c:	1c18      	adds	r0, r3, #0
 800d14e:	f7f3 f9ef 	bl	8000530 <__aeabi_fcmplt>
 800d152:	1e03      	subs	r3, r0, #0
 800d154:	d002      	beq.n	800d15c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d156:	1dfb      	adds	r3, r7, #7
 800d158:	2202      	movs	r2, #2
 800d15a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d15c:	4b08      	ldr	r3, [pc, #32]	@ (800d180 <batteryChargeCheck+0xa4>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2181      	movs	r1, #129	@ 0x81
 800d162:	05c9      	lsls	r1, r1, #23
 800d164:	1c18      	adds	r0, r3, #0
 800d166:	f7f3 fa01 	bl	800056c <__aeabi_fcmpge>
 800d16a:	1e03      	subs	r3, r0, #0
 800d16c:	d002      	beq.n	800d174 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d16e:	1dfb      	adds	r3, r7, #7
 800d170:	2203      	movs	r2, #3
 800d172:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d174:	1dfb      	adds	r3, r7, #7
 800d176:	781b      	ldrb	r3, [r3, #0]
}
 800d178:	0018      	movs	r0, r3
 800d17a:	46bd      	mov	sp, r7
 800d17c:	b002      	add	sp, #8
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20002008 	.word	0x20002008
 800d184:	40600000 	.word	0x40600000
 800d188:	9999999a 	.word	0x9999999a
 800d18c:	400d9999 	.word	0x400d9999

0800d190 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d190:	b5b0      	push	{r4, r5, r7, lr}
 800d192:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d194:	f7f9 f906 	bl	80063a4 <ReadSolarVoltage>
 800d198:	0003      	movs	r3, r0
 800d19a:	001a      	movs	r2, r3
 800d19c:	4b1a      	ldr	r3, [pc, #104]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d19e:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d1a0:	4b19      	ldr	r3, [pc, #100]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	4a19      	ldr	r2, [pc, #100]	@ (800d20c <Calculate_LED_ON+0x7c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d802      	bhi.n	800d1b0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d1aa:	4b17      	ldr	r3, [pc, #92]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d1ac:	4a18      	ldr	r2, [pc, #96]	@ (800d210 <Calculate_LED_ON+0x80>)
 800d1ae:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d1b0:	4b15      	ldr	r3, [pc, #84]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	4a17      	ldr	r2, [pc, #92]	@ (800d214 <Calculate_LED_ON+0x84>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d902      	bls.n	800d1c0 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d1ba:	4b13      	ldr	r3, [pc, #76]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d1bc:	4a15      	ldr	r2, [pc, #84]	@ (800d214 <Calculate_LED_ON+0x84>)
 800d1be:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d1c0:	4b11      	ldr	r3, [pc, #68]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	0018      	movs	r0, r3
 800d1c6:	f7f6 f8fb 	bl	80033c0 <__aeabi_i2d>
 800d1ca:	0004      	movs	r4, r0
 800d1cc:	000d      	movs	r5, r1
 800d1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d208 <Calculate_LED_ON+0x78>)
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	001a      	movs	r2, r3
 800d1d4:	4b10      	ldr	r3, [pc, #64]	@ (800d218 <Calculate_LED_ON+0x88>)
 800d1d6:	1a9b      	subs	r3, r3, r2
 800d1d8:	0018      	movs	r0, r3
 800d1da:	f7f6 f8f1 	bl	80033c0 <__aeabi_i2d>
 800d1de:	2200      	movs	r2, #0
 800d1e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d21c <Calculate_LED_ON+0x8c>)
 800d1e2:	f7f5 fa2b 	bl	800263c <__aeabi_dmul>
 800d1e6:	0002      	movs	r2, r0
 800d1e8:	000b      	movs	r3, r1
 800d1ea:	0020      	movs	r0, r4
 800d1ec:	0029      	movs	r1, r5
 800d1ee:	f7f4 fa7d 	bl	80016ec <__aeabi_dadd>
 800d1f2:	0002      	movs	r2, r0
 800d1f4:	000b      	movs	r3, r1
 800d1f6:	0010      	movs	r0, r2
 800d1f8:	0019      	movs	r1, r3
 800d1fa:	f7f3 fa27 	bl	800064c <__aeabi_d2uiz>
 800d1fe:	0003      	movs	r3, r0
 800d200:	b29b      	uxth	r3, r3
}
 800d202:	0018      	movs	r0, r3
 800d204:	46bd      	mov	sp, r7
 800d206:	bdb0      	pop	{r4, r5, r7, pc}
 800d208:	2000200c 	.word	0x2000200c
 800d20c:	00000b53 	.word	0x00000b53
 800d210:	00000b54 	.word	0x00000b54
 800d214:	0000125c 	.word	0x0000125c
 800d218:	00000dee 	.word	0x00000dee
 800d21c:	3ff80000 	.word	0x3ff80000

0800d220 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d220:	b590      	push	{r4, r7, lr}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	0004      	movs	r4, r0
 800d228:	0008      	movs	r0, r1
 800d22a:	0011      	movs	r1, r2
 800d22c:	1dbb      	adds	r3, r7, #6
 800d22e:	1c22      	adds	r2, r4, #0
 800d230:	801a      	strh	r2, [r3, #0]
 800d232:	1d3b      	adds	r3, r7, #4
 800d234:	1c02      	adds	r2, r0, #0
 800d236:	801a      	strh	r2, [r3, #0]
 800d238:	1cbb      	adds	r3, r7, #2
 800d23a:	1c0a      	adds	r2, r1, #0
 800d23c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d23e:	4b0f      	ldr	r3, [pc, #60]	@ (800d27c <SetStatusLED+0x5c>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d107      	bne.n	800d256 <SetStatusLED+0x36>
 800d246:	4b0e      	ldr	r3, [pc, #56]	@ (800d280 <SetStatusLED+0x60>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d103      	bne.n	800d256 <SetStatusLED+0x36>
 800d24e:	4b0d      	ldr	r3, [pc, #52]	@ (800d284 <SetStatusLED+0x64>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00e      	beq.n	800d274 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d256:	2380      	movs	r3, #128	@ 0x80
 800d258:	05db      	lsls	r3, r3, #23
 800d25a:	1dba      	adds	r2, r7, #6
 800d25c:	8812      	ldrh	r2, [r2, #0]
 800d25e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d260:	2380      	movs	r3, #128	@ 0x80
 800d262:	05db      	lsls	r3, r3, #23
 800d264:	1d3a      	adds	r2, r7, #4
 800d266:	8812      	ldrh	r2, [r2, #0]
 800d268:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d26a:	2380      	movs	r3, #128	@ 0x80
 800d26c:	05db      	lsls	r3, r3, #23
 800d26e:	1cba      	adds	r2, r7, #2
 800d270:	8812      	ldrh	r2, [r2, #0]
 800d272:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d274:	46c0      	nop			@ (mov r8, r8)
 800d276:	46bd      	mov	sp, r7
 800d278:	b003      	add	sp, #12
 800d27a:	bd90      	pop	{r4, r7, pc}
 800d27c:	20001ff9 	.word	0x20001ff9
 800d280:	200000d0 	.word	0x200000d0
 800d284:	20001ffa 	.word	0x20001ffa

0800d288 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d288:	b590      	push	{r4, r7, lr}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	0004      	movs	r4, r0
 800d290:	0008      	movs	r0, r1
 800d292:	0011      	movs	r1, r2
 800d294:	1dfb      	adds	r3, r7, #7
 800d296:	1c22      	adds	r2, r4, #0
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	1dbb      	adds	r3, r7, #6
 800d29c:	1c02      	adds	r2, r0, #0
 800d29e:	701a      	strb	r2, [r3, #0]
 800d2a0:	1d7b      	adds	r3, r7, #5
 800d2a2:	1c0a      	adds	r2, r1, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d2a6:	4b19      	ldr	r3, [pc, #100]	@ (800d30c <SetDBLED+0x84>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d107      	bne.n	800d2be <SetDBLED+0x36>
 800d2ae:	4b18      	ldr	r3, [pc, #96]	@ (800d310 <SetDBLED+0x88>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d103      	bne.n	800d2be <SetDBLED+0x36>
 800d2b6:	4b17      	ldr	r3, [pc, #92]	@ (800d314 <SetDBLED+0x8c>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d022      	beq.n	800d304 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d2be:	1dfb      	adds	r3, r7, #7
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	4053      	eors	r3, r2
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	001a      	movs	r2, r3
 800d2ca:	4b13      	ldr	r3, [pc, #76]	@ (800d318 <SetDBLED+0x90>)
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	0018      	movs	r0, r3
 800d2d0:	f002 ffd1 	bl	8010276 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d2d4:	1dbb      	adds	r3, r7, #6
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	4053      	eors	r3, r2
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	001a      	movs	r2, r3
 800d2e0:	2380      	movs	r3, #128	@ 0x80
 800d2e2:	005b      	lsls	r3, r3, #1
 800d2e4:	480c      	ldr	r0, [pc, #48]	@ (800d318 <SetDBLED+0x90>)
 800d2e6:	0019      	movs	r1, r3
 800d2e8:	f002 ffc5 	bl	8010276 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d2ec:	1d7b      	adds	r3, r7, #5
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	4053      	eors	r3, r2
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	001a      	movs	r2, r3
 800d2f8:	2380      	movs	r3, #128	@ 0x80
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4806      	ldr	r0, [pc, #24]	@ (800d318 <SetDBLED+0x90>)
 800d2fe:	0019      	movs	r1, r3
 800d300:	f002 ffb9 	bl	8010276 <HAL_GPIO_WritePin>
  }
}
 800d304:	46c0      	nop			@ (mov r8, r8)
 800d306:	46bd      	mov	sp, r7
 800d308:	b003      	add	sp, #12
 800d30a:	bd90      	pop	{r4, r7, pc}
 800d30c:	20001ff9 	.word	0x20001ff9
 800d310:	200000d0 	.word	0x200000d0
 800d314:	20001ffa 	.word	0x20001ffa
 800d318:	50000400 	.word	0x50000400

0800d31c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d31c:	b590      	push	{r4, r7, lr}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	0004      	movs	r4, r0
 800d324:	0008      	movs	r0, r1
 800d326:	0011      	movs	r1, r2
 800d328:	1dbb      	adds	r3, r7, #6
 800d32a:	1c22      	adds	r2, r4, #0
 800d32c:	801a      	strh	r2, [r3, #0]
 800d32e:	1d3b      	adds	r3, r7, #4
 800d330:	1c02      	adds	r2, r0, #0
 800d332:	801a      	strh	r2, [r3, #0]
 800d334:	1cbb      	adds	r3, r7, #2
 800d336:	1c0a      	adds	r2, r1, #0
 800d338:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d33a:	4b0e      	ldr	r3, [pc, #56]	@ (800d374 <SetVocLED+0x58>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d107      	bne.n	800d352 <SetVocLED+0x36>
 800d342:	4b0d      	ldr	r3, [pc, #52]	@ (800d378 <SetVocLED+0x5c>)
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d103      	bne.n	800d352 <SetVocLED+0x36>
 800d34a:	4b0c      	ldr	r3, [pc, #48]	@ (800d37c <SetVocLED+0x60>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d352:	4b0b      	ldr	r3, [pc, #44]	@ (800d380 <SetVocLED+0x64>)
 800d354:	1dba      	adds	r2, r7, #6
 800d356:	8812      	ldrh	r2, [r2, #0]
 800d358:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d35a:	4b09      	ldr	r3, [pc, #36]	@ (800d380 <SetVocLED+0x64>)
 800d35c:	1d3a      	adds	r2, r7, #4
 800d35e:	8812      	ldrh	r2, [r2, #0]
 800d360:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d362:	4b07      	ldr	r3, [pc, #28]	@ (800d380 <SetVocLED+0x64>)
 800d364:	1cba      	adds	r2, r7, #2
 800d366:	8812      	ldrh	r2, [r2, #0]
 800d368:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d36a:	46c0      	nop			@ (mov r8, r8)
 800d36c:	46bd      	mov	sp, r7
 800d36e:	b003      	add	sp, #12
 800d370:	bd90      	pop	{r4, r7, pc}
 800d372:	46c0      	nop			@ (mov r8, r8)
 800d374:	20001ff9 	.word	0x20001ff9
 800d378:	200000d0 	.word	0x200000d0
 800d37c:	20001ffa 	.word	0x20001ffa
 800d380:	40000400 	.word	0x40000400

0800d384 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d388:	4b08      	ldr	r3, [pc, #32]	@ (800d3ac <SetMeasurementIndicator+0x28>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <SetMeasurementIndicator+0x14>
 800d390:	4b07      	ldr	r3, [pc, #28]	@ (800d3b0 <SetMeasurementIndicator+0x2c>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d006      	beq.n	800d3a6 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d398:	f7ff fefa 	bl	800d190 <Calculate_LED_ON>
 800d39c:	0003      	movs	r3, r0
 800d39e:	001a      	movs	r2, r3
 800d3a0:	2380      	movs	r3, #128	@ 0x80
 800d3a2:	05db      	lsls	r3, r3, #23
 800d3a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d3a6:	46c0      	nop			@ (mov r8, r8)
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	20001ff9 	.word	0x20001ff9
 800d3b0:	20001ffa 	.word	0x20001ffa

0800d3b4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3b8:	4b07      	ldr	r3, [pc, #28]	@ (800d3d8 <ResetMeasurementIndicator+0x24>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d103      	bne.n	800d3c8 <ResetMeasurementIndicator+0x14>
 800d3c0:	4b06      	ldr	r3, [pc, #24]	@ (800d3dc <ResetMeasurementIndicator+0x28>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d004      	beq.n	800d3d2 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d3c8:	2380      	movs	r3, #128	@ 0x80
 800d3ca:	05db      	lsls	r3, r3, #23
 800d3cc:	22fa      	movs	r2, #250	@ 0xfa
 800d3ce:	0112      	lsls	r2, r2, #4
 800d3d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d3d2:	46c0      	nop			@ (mov r8, r8)
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	20001ff9 	.word	0x20001ff9
 800d3dc:	20001ffa 	.word	0x20001ffa

0800d3e0 <SetMICIndicator>:
void SetMICIndicator(){
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3e4:	4b19      	ldr	r3, [pc, #100]	@ (800d44c <SetMICIndicator+0x6c>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d103      	bne.n	800d3f4 <SetMICIndicator+0x14>
 800d3ec:	4b18      	ldr	r3, [pc, #96]	@ (800d450 <SetMICIndicator+0x70>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d3f4:	f7ff fecc 	bl	800d190 <Calculate_LED_ON>
 800d3f8:	0003      	movs	r3, r0
 800d3fa:	001a      	movs	r2, r3
 800d3fc:	2380      	movs	r3, #128	@ 0x80
 800d3fe:	05db      	lsls	r3, r3, #23
 800d400:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d402:	e01f      	b.n	800d444 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d404:	4b13      	ldr	r3, [pc, #76]	@ (800d454 <SetMICIndicator+0x74>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	1c18      	adds	r0, r3, #0
 800d40a:	f7f6 f82b 	bl	8003464 <__aeabi_f2d>
 800d40e:	4a12      	ldr	r2, [pc, #72]	@ (800d458 <SetMICIndicator+0x78>)
 800d410:	4b12      	ldr	r3, [pc, #72]	@ (800d45c <SetMICIndicator+0x7c>)
 800d412:	f7f3 f867 	bl	80004e4 <__aeabi_dcmpgt>
 800d416:	1e03      	subs	r3, r0, #0
 800d418:	d00a      	beq.n	800d430 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d41a:	f7ff feb9 	bl	800d190 <Calculate_LED_ON>
 800d41e:	0003      	movs	r3, r0
 800d420:	001a      	movs	r2, r3
 800d422:	2380      	movs	r3, #128	@ 0x80
 800d424:	05db      	lsls	r3, r3, #23
 800d426:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d428:	4b0d      	ldr	r3, [pc, #52]	@ (800d460 <SetMICIndicator+0x80>)
 800d42a:	2202      	movs	r2, #2
 800d42c:	701a      	strb	r2, [r3, #0]
}
 800d42e:	e009      	b.n	800d444 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d430:	f7ff feae 	bl	800d190 <Calculate_LED_ON>
 800d434:	0003      	movs	r3, r0
 800d436:	001a      	movs	r2, r3
 800d438:	2380      	movs	r3, #128	@ 0x80
 800d43a:	05db      	lsls	r3, r3, #23
 800d43c:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d43e:	4b08      	ldr	r3, [pc, #32]	@ (800d460 <SetMICIndicator+0x80>)
 800d440:	2201      	movs	r2, #1
 800d442:	701a      	strb	r2, [r3, #0]
}
 800d444:	46c0      	nop			@ (mov r8, r8)
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	46c0      	nop			@ (mov r8, r8)
 800d44c:	20001ff9 	.word	0x20001ff9
 800d450:	20001ffa 	.word	0x20001ffa
 800d454:	20002008 	.word	0x20002008
 800d458:	9999999a 	.word	0x9999999a
 800d45c:	400d9999 	.word	0x400d9999
 800d460:	20001ffc 	.word	0x20001ffc

0800d464 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d464:	b580      	push	{r7, lr}
 800d466:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d468:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a8 <ResetMICIndicator+0x44>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d103      	bne.n	800d478 <ResetMICIndicator+0x14>
 800d470:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ac <ResetMICIndicator+0x48>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d005      	beq.n	800d484 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d478:	2380      	movs	r3, #128	@ 0x80
 800d47a:	05db      	lsls	r3, r3, #23
 800d47c:	22fa      	movs	r2, #250	@ 0xfa
 800d47e:	0112      	lsls	r2, r2, #4
 800d480:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d482:	e00e      	b.n	800d4a2 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d484:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b0 <ResetMICIndicator+0x4c>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d105      	bne.n	800d498 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d48c:	2380      	movs	r3, #128	@ 0x80
 800d48e:	05db      	lsls	r3, r3, #23
 800d490:	22fa      	movs	r2, #250	@ 0xfa
 800d492:	0112      	lsls	r2, r2, #4
 800d494:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d496:	e004      	b.n	800d4a2 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d498:	2380      	movs	r3, #128	@ 0x80
 800d49a:	05db      	lsls	r3, r3, #23
 800d49c:	22fa      	movs	r2, #250	@ 0xfa
 800d49e:	0112      	lsls	r2, r2, #4
 800d4a0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d4a2:	46c0      	nop			@ (mov r8, r8)
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	20001ff9 	.word	0x20001ff9
 800d4ac:	20001ffa 	.word	0x20001ffa
 800d4b0:	20001ffc 	.word	0x20001ffc

0800d4b4 <SetESPIndicator>:
void SetESPIndicator(){
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4b8:	4b08      	ldr	r3, [pc, #32]	@ (800d4dc <SetESPIndicator+0x28>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d103      	bne.n	800d4c8 <SetESPIndicator+0x14>
 800d4c0:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <SetESPIndicator+0x2c>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d006      	beq.n	800d4d6 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4c8:	f7ff fe62 	bl	800d190 <Calculate_LED_ON>
 800d4cc:	0003      	movs	r3, r0
 800d4ce:	001a      	movs	r2, r3
 800d4d0:	2380      	movs	r3, #128	@ 0x80
 800d4d2:	05db      	lsls	r3, r3, #23
 800d4d4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d4d6:	46c0      	nop			@ (mov r8, r8)
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20001ff9 	.word	0x20001ff9
 800d4e0:	20001ffa 	.word	0x20001ffa

0800d4e4 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4e8:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <ResetESPIndicator+0x24>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <ResetESPIndicator+0x14>
 800d4f0:	4b06      	ldr	r3, [pc, #24]	@ (800d50c <ResetESPIndicator+0x28>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d4f8:	2380      	movs	r3, #128	@ 0x80
 800d4fa:	05db      	lsls	r3, r3, #23
 800d4fc:	22fa      	movs	r2, #250	@ 0xfa
 800d4fe:	0112      	lsls	r2, r2, #4
 800d500:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d502:	46c0      	nop			@ (mov r8, r8)
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20001ff9 	.word	0x20001ff9
 800d50c:	20001ffa 	.word	0x20001ffa

0800d510 <SetPMIndicator>:

void SetPMIndicator() {
 800d510:	b580      	push	{r7, lr}
 800d512:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d514:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <SetPMIndicator+0x44>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d103      	bne.n	800d524 <SetPMIndicator+0x14>
 800d51c:	4b0e      	ldr	r3, [pc, #56]	@ (800d558 <SetPMIndicator+0x48>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d014      	beq.n	800d54e <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d524:	f7ff fe34 	bl	800d190 <Calculate_LED_ON>
 800d528:	0003      	movs	r3, r0
 800d52a:	001a      	movs	r2, r3
 800d52c:	2380      	movs	r3, #128	@ 0x80
 800d52e:	05db      	lsls	r3, r3, #23
 800d530:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d532:	f7ff fe2d 	bl	800d190 <Calculate_LED_ON>
 800d536:	0003      	movs	r3, r0
 800d538:	001a      	movs	r2, r3
 800d53a:	2380      	movs	r3, #128	@ 0x80
 800d53c:	05db      	lsls	r3, r3, #23
 800d53e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d540:	f7ff fe26 	bl	800d190 <Calculate_LED_ON>
 800d544:	0003      	movs	r3, r0
 800d546:	001a      	movs	r2, r3
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	05db      	lsls	r3, r3, #23
 800d54c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d54e:	46c0      	nop			@ (mov r8, r8)
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	20001ff9 	.word	0x20001ff9
 800d558:	20001ffa 	.word	0x20001ffa

0800d55c <ResetPMIndicator>:

void ResetPMIndicator() {
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d560:	4b0c      	ldr	r3, [pc, #48]	@ (800d594 <ResetPMIndicator+0x38>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d103      	bne.n	800d570 <ResetPMIndicator+0x14>
 800d568:	4b0b      	ldr	r3, [pc, #44]	@ (800d598 <ResetPMIndicator+0x3c>)
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00e      	beq.n	800d58e <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d570:	2380      	movs	r3, #128	@ 0x80
 800d572:	05db      	lsls	r3, r3, #23
 800d574:	22fa      	movs	r2, #250	@ 0xfa
 800d576:	0112      	lsls	r2, r2, #4
 800d578:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d57a:	2380      	movs	r3, #128	@ 0x80
 800d57c:	05db      	lsls	r3, r3, #23
 800d57e:	22fa      	movs	r2, #250	@ 0xfa
 800d580:	0112      	lsls	r2, r2, #4
 800d582:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d584:	2380      	movs	r3, #128	@ 0x80
 800d586:	05db      	lsls	r3, r3, #23
 800d588:	22fa      	movs	r2, #250	@ 0xfa
 800d58a:	0112      	lsls	r2, r2, #4
 800d58c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d58e:	46c0      	nop			@ (mov r8, r8)
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	20001ff9 	.word	0x20001ff9
 800d598:	20001ffa 	.word	0x20001ffa

0800d59c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d5a0:	23fa      	movs	r3, #250	@ 0xfa
 800d5a2:	011a      	lsls	r2, r3, #4
 800d5a4:	23fa      	movs	r3, #250	@ 0xfa
 800d5a6:	0119      	lsls	r1, r3, #4
 800d5a8:	23fa      	movs	r3, #250	@ 0xfa
 800d5aa:	011b      	lsls	r3, r3, #4
 800d5ac:	0018      	movs	r0, r3
 800d5ae:	f7ff fe37 	bl	800d220 <SetStatusLED>
  SetDBLED(false,false,false);
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	f7ff fe66 	bl	800d288 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d5bc:	23fa      	movs	r3, #250	@ 0xfa
 800d5be:	011a      	lsls	r2, r3, #4
 800d5c0:	23fa      	movs	r3, #250	@ 0xfa
 800d5c2:	0119      	lsls	r1, r3, #4
 800d5c4:	23fa      	movs	r3, #250	@ 0xfa
 800d5c6:	011b      	lsls	r3, r3, #4
 800d5c8:	0018      	movs	r0, r3
 800d5ca:	f7ff fea7 	bl	800d31c <SetVocLED>
return;
 800d5ce:	46c0      	nop			@ (mov r8, r8)
}
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <SetAllREDLED>:

void SetAllREDLED() {
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d5d8:	2380      	movs	r3, #128	@ 0x80
 800d5da:	05db      	lsls	r3, r3, #23
 800d5dc:	2200      	movs	r2, #0
 800d5de:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d5e0:	2380      	movs	r3, #128	@ 0x80
 800d5e2:	05db      	lsls	r3, r3, #23
 800d5e4:	22fa      	movs	r2, #250	@ 0xfa
 800d5e6:	0112      	lsls	r2, r2, #4
 800d5e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d5ea:	2380      	movs	r3, #128	@ 0x80
 800d5ec:	05db      	lsls	r3, r3, #23
 800d5ee:	22fa      	movs	r2, #250	@ 0xfa
 800d5f0:	0112      	lsls	r2, r2, #4
 800d5f2:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d628 <SetAllREDLED+0x54>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d628 <SetAllREDLED+0x54>)
 800d5fc:	22fa      	movs	r2, #250	@ 0xfa
 800d5fe:	0112      	lsls	r2, r2, #4
 800d600:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d602:	4b09      	ldr	r3, [pc, #36]	@ (800d628 <SetAllREDLED+0x54>)
 800d604:	22fa      	movs	r2, #250	@ 0xfa
 800d606:	0112      	lsls	r2, r2, #4
 800d608:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d60a:	4b08      	ldr	r3, [pc, #32]	@ (800d62c <SetAllREDLED+0x58>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	2101      	movs	r1, #1
 800d610:	0018      	movs	r0, r3
 800d612:	f002 fe30 	bl	8010276 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d616:	23fa      	movs	r3, #250	@ 0xfa
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	0018      	movs	r0, r3
 800d61c:	f001 fba4 	bl	800ed68 <HAL_Delay>
}
 800d620:	46c0      	nop			@ (mov r8, r8)
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	46c0      	nop			@ (mov r8, r8)
 800d628:	40000400 	.word	0x40000400
 800d62c:	50000400 	.word	0x50000400

0800d630 <powerCheck>:

Battery_Status powerCheck(){
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d636:	f7f8 ff09 	bl	800644c <Check_USB_PowerOn>
 800d63a:	0003      	movs	r3, r0
 800d63c:	001a      	movs	r2, r3
 800d63e:	2301      	movs	r3, #1
 800d640:	4053      	eors	r3, r2
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	d005      	beq.n	800d654 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d648:	1dfc      	adds	r4, r7, #7
 800d64a:	f7ff fd47 	bl	800d0dc <batteryChargeCheck>
 800d64e:	0003      	movs	r3, r0
 800d650:	7023      	strb	r3, [r4, #0]
 800d652:	e002      	b.n	800d65a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d654:	1dfb      	adds	r3, r7, #7
 800d656:	2204      	movs	r2, #4
 800d658:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d65a:	1dfb      	adds	r3, r7, #7
 800d65c:	781b      	ldrb	r3, [r3, #0]
}
 800d65e:	0018      	movs	r0, r3
 800d660:	46bd      	mov	sp, r7
 800d662:	b003      	add	sp, #12
 800d664:	bd90      	pop	{r4, r7, pc}
	...

0800d668 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	0002      	movs	r2, r0
 800d670:	1dfb      	adds	r3, r7, #7
 800d672:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d674:	1dfb      	adds	r3, r7, #7
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b04      	cmp	r3, #4
 800d67a:	d105      	bne.n	800d688 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800d67c:	4a18      	ldr	r2, [pc, #96]	@ (800d6e0 <powerDisplay+0x78>)
 800d67e:	4b19      	ldr	r3, [pc, #100]	@ (800d6e4 <powerDisplay+0x7c>)
 800d680:	0019      	movs	r1, r3
 800d682:	2003      	movs	r0, #3
 800d684:	f000 ff20 	bl	800e4c8 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d688:	1dfb      	adds	r3, r7, #7
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b03      	cmp	r3, #3
 800d68e:	d105      	bne.n	800d69c <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d690:	4a15      	ldr	r2, [pc, #84]	@ (800d6e8 <powerDisplay+0x80>)
 800d692:	4b14      	ldr	r3, [pc, #80]	@ (800d6e4 <powerDisplay+0x7c>)
 800d694:	0019      	movs	r1, r3
 800d696:	2003      	movs	r0, #3
 800d698:	f000 ff16 	bl	800e4c8 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d69c:	1dfb      	adds	r3, r7, #7
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d105      	bne.n	800d6b0 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d6a4:	4a11      	ldr	r2, [pc, #68]	@ (800d6ec <powerDisplay+0x84>)
 800d6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e4 <powerDisplay+0x7c>)
 800d6a8:	0019      	movs	r1, r3
 800d6aa:	2003      	movs	r0, #3
 800d6ac:	f000 ff0c 	bl	800e4c8 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d6b0:	1dfb      	adds	r3, r7, #7
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d105      	bne.n	800d6c4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d6b8:	4a0d      	ldr	r2, [pc, #52]	@ (800d6f0 <powerDisplay+0x88>)
 800d6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e4 <powerDisplay+0x7c>)
 800d6bc:	0019      	movs	r1, r3
 800d6be:	2003      	movs	r0, #3
 800d6c0:	f000 ff02 	bl	800e4c8 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d6c4:	1dfb      	adds	r3, r7, #7
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d105      	bne.n	800d6d8 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d6cc:	4a09      	ldr	r2, [pc, #36]	@ (800d6f4 <powerDisplay+0x8c>)
 800d6ce:	4b05      	ldr	r3, [pc, #20]	@ (800d6e4 <powerDisplay+0x7c>)
 800d6d0:	0019      	movs	r1, r3
 800d6d2:	2003      	movs	r0, #3
 800d6d4:	f000 fef8 	bl	800e4c8 <CreateLine>
  }
}
 800d6d8:	46c0      	nop			@ (mov r8, r8)
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	b002      	add	sp, #8
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	08024e60 	.word	0x08024e60
 800d6e4:	08024e84 	.word	0x08024e84
 800d6e8:	08024e88 	.word	0x08024e88
 800d6ec:	08024ea0 	.word	0x08024ea0
 800d6f0:	08024ec0 	.word	0x08024ec0
 800d6f4:	08024ed8 	.word	0x08024ed8

0800d6f8 <configCheck>:

void configCheck(){
 800d6f8:	b590      	push	{r4, r7, lr}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d6fe:	f7f8 feb4 	bl	800646a <BootButton_Pressed>
 800d702:	1e03      	subs	r3, r0, #0
 800d704:	d007      	beq.n	800d716 <configCheck+0x1e>
 800d706:	f7f8 fec1 	bl	800648c <UserButton_Pressed>
 800d70a:	1e03      	subs	r3, r0, #0
 800d70c:	d003      	beq.n	800d716 <configCheck+0x1e>
    configSet = true;
 800d70e:	4ba4      	ldr	r3, [pc, #656]	@ (800d9a0 <configCheck+0x2a8>)
 800d710:	2201      	movs	r2, #1
 800d712:	701a      	strb	r2, [r3, #0]
 800d714:	e00a      	b.n	800d72c <configCheck+0x34>
  }
  else{
    configSet = false;
 800d716:	4ba2      	ldr	r3, [pc, #648]	@ (800d9a0 <configCheck+0x2a8>)
 800d718:	2200      	movs	r2, #0
 800d71a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d71c:	f001 fb1a 	bl	800ed54 <HAL_GetTick>
 800d720:	0003      	movs	r3, r0
 800d722:	22fa      	movs	r2, #250	@ 0xfa
 800d724:	00d2      	lsls	r2, r2, #3
 800d726:	189a      	adds	r2, r3, r2
 800d728:	4b9e      	ldr	r3, [pc, #632]	@ (800d9a4 <configCheck+0x2ac>)
 800d72a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d72c:	4b9c      	ldr	r3, [pc, #624]	@ (800d9a0 <configCheck+0x2a8>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00d      	beq.n	800d750 <configCheck+0x58>
 800d734:	4b9b      	ldr	r3, [pc, #620]	@ (800d9a4 <configCheck+0x2ac>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	0018      	movs	r0, r3
 800d73a:	f000 fe6f 	bl	800e41c <TimestampIsReached>
 800d73e:	1e03      	subs	r3, r0, #0
 800d740:	d006      	beq.n	800d750 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d742:	f7f6 f9ab 	bl	8003a9c <SetConfigMode>
    SetDBLED(true, true, true);
 800d746:	2201      	movs	r2, #1
 800d748:	2101      	movs	r1, #1
 800d74a:	2001      	movs	r0, #1
 800d74c:	f7ff fd9c 	bl	800d288 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld && !GetReconfigMode()){
 800d750:	f7f8 fe8b 	bl	800646a <BootButton_Pressed>
 800d754:	0003      	movs	r3, r0
 800d756:	001a      	movs	r2, r3
 800d758:	2301      	movs	r3, #1
 800d75a:	4053      	eors	r3, r2
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d03a      	beq.n	800d7d8 <configCheck+0xe0>
 800d762:	f7f8 fe93 	bl	800648c <UserButton_Pressed>
 800d766:	1e03      	subs	r3, r0, #0
 800d768:	d036      	beq.n	800d7d8 <configCheck+0xe0>
 800d76a:	4b8f      	ldr	r3, [pc, #572]	@ (800d9a8 <configCheck+0x2b0>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	2201      	movs	r2, #1
 800d770:	4053      	eors	r3, r2
 800d772:	b2db      	uxtb	r3, r3
 800d774:	2b00      	cmp	r3, #0
 800d776:	d02f      	beq.n	800d7d8 <configCheck+0xe0>
 800d778:	f7f6 f9a0 	bl	8003abc <GetReconfigMode>
 800d77c:	0003      	movs	r3, r0
 800d77e:	001a      	movs	r2, r3
 800d780:	2301      	movs	r3, #1
 800d782:	4053      	eors	r3, r2
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	d026      	beq.n	800d7d8 <configCheck+0xe0>
    SetLEDsOff();
 800d78a:	f7ff ff07 	bl	800d59c <SetLEDsOff>
    Debug("userToggle flipped");
 800d78e:	4a87      	ldr	r2, [pc, #540]	@ (800d9ac <configCheck+0x2b4>)
 800d790:	4b87      	ldr	r3, [pc, #540]	@ (800d9b0 <configCheck+0x2b8>)
 800d792:	0019      	movs	r1, r3
 800d794:	2003      	movs	r0, #3
 800d796:	f000 fe97 	bl	800e4c8 <CreateLine>
    userToggle = !userToggle;
 800d79a:	4b86      	ldr	r3, [pc, #536]	@ (800d9b4 <configCheck+0x2bc>)
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	1e5a      	subs	r2, r3, #1
 800d7a0:	4193      	sbcs	r3, r2
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	4053      	eors	r3, r2
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	1c1a      	adds	r2, r3, #0
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	4b80      	ldr	r3, [pc, #512]	@ (800d9b4 <configCheck+0x2bc>)
 800d7b4:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800d9b4 <configCheck+0x2bc>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d001      	beq.n	800d7c2 <configCheck+0xca>
      EnabledConnectedDevices();
 800d7be:	f7fb f893 	bl	80088e8 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d7c2:	4b79      	ldr	r3, [pc, #484]	@ (800d9a8 <configCheck+0x2b0>)
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d7c8:	f001 fac4 	bl	800ed54 <HAL_GetTick>
 800d7cc:	0003      	movs	r3, r0
 800d7ce:	22fa      	movs	r2, #250	@ 0xfa
 800d7d0:	00d2      	lsls	r2, r2, #3
 800d7d2:	189a      	adds	r2, r3, r2
 800d7d4:	4b78      	ldr	r3, [pc, #480]	@ (800d9b8 <configCheck+0x2c0>)
 800d7d6:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d7d8:	f7f8 fe47 	bl	800646a <BootButton_Pressed>
 800d7dc:	0003      	movs	r3, r0
 800d7de:	001a      	movs	r2, r3
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	4053      	eors	r3, r2
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d100      	bne.n	800d7ec <configCheck+0xf4>
 800d7ea:	e0a4      	b.n	800d936 <configCheck+0x23e>
 800d7ec:	4b6e      	ldr	r3, [pc, #440]	@ (800d9a8 <configCheck+0x2b0>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d100      	bne.n	800d7f6 <configCheck+0xfe>
 800d7f4:	e09f      	b.n	800d936 <configCheck+0x23e>
 800d7f6:	4b70      	ldr	r3, [pc, #448]	@ (800d9b8 <configCheck+0x2c0>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	0018      	movs	r0, r3
 800d7fc:	f000 fe0e 	bl	800e41c <TimestampIsReached>
 800d800:	1e03      	subs	r3, r0, #0
 800d802:	d100      	bne.n	800d806 <configCheck+0x10e>
 800d804:	e097      	b.n	800d936 <configCheck+0x23e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d806:	f7fa fdbf 	bl	8008388 <GetPMSensorPresence>
 800d80a:	1e03      	subs	r3, r0, #0
 800d80c:	d100      	bne.n	800d810 <configCheck+0x118>
 800d80e:	e082      	b.n	800d916 <configCheck+0x21e>
 800d810:	4b6a      	ldr	r3, [pc, #424]	@ (800d9bc <configCheck+0x2c4>)
 800d812:	791b      	ldrb	r3, [r3, #4]
 800d814:	2b34      	cmp	r3, #52	@ 0x34
 800d816:	d004      	beq.n	800d822 <configCheck+0x12a>
 800d818:	4b68      	ldr	r3, [pc, #416]	@ (800d9bc <configCheck+0x2c4>)
 800d81a:	791b      	ldrb	r3, [r3, #4]
 800d81c:	2b35      	cmp	r3, #53	@ 0x35
 800d81e:	d000      	beq.n	800d822 <configCheck+0x12a>
 800d820:	e079      	b.n	800d916 <configCheck+0x21e>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d822:	4b67      	ldr	r3, [pc, #412]	@ (800d9c0 <configCheck+0x2c8>)
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	1e5a      	subs	r2, r3, #1
 800d828:	4193      	sbcs	r3, r2
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	2201      	movs	r2, #1
 800d82e:	4053      	eors	r3, r2
 800d830:	b2db      	uxtb	r3, r3
 800d832:	1c1a      	adds	r2, r3, #0
 800d834:	2301      	movs	r3, #1
 800d836:	4013      	ands	r3, r2
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	4b61      	ldr	r3, [pc, #388]	@ (800d9c0 <configCheck+0x2c8>)
 800d83c:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d83e:	4b60      	ldr	r3, [pc, #384]	@ (800d9c0 <configCheck+0x2c8>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d005      	beq.n	800d852 <configCheck+0x15a>
 800d846:	1dbc      	adds	r4, r7, #6
 800d848:	f7ff fca2 	bl	800d190 <Calculate_LED_ON>
 800d84c:	0003      	movs	r3, r0
 800d84e:	8023      	strh	r3, [r4, #0]
 800d850:	e003      	b.n	800d85a <configCheck+0x162>
        else color = 4000;
 800d852:	1dbb      	adds	r3, r7, #6
 800d854:	22fa      	movs	r2, #250	@ 0xfa
 800d856:	0112      	lsls	r2, r2, #4
 800d858:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d85a:	4b59      	ldr	r3, [pc, #356]	@ (800d9c0 <configCheck+0x2c8>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <configCheck+0x16e>
 800d862:	4b58      	ldr	r3, [pc, #352]	@ (800d9c4 <configCheck+0x2cc>)
 800d864:	e000      	b.n	800d868 <configCheck+0x170>
 800d866:	4b58      	ldr	r3, [pc, #352]	@ (800d9c8 <configCheck+0x2d0>)
 800d868:	4a58      	ldr	r2, [pc, #352]	@ (800d9cc <configCheck+0x2d4>)
 800d86a:	4959      	ldr	r1, [pc, #356]	@ (800d9d0 <configCheck+0x2d8>)
 800d86c:	2002      	movs	r0, #2
 800d86e:	f000 fe2b 	bl	800e4c8 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d872:	1d7b      	adds	r3, r7, #5
 800d874:	2200      	movs	r2, #0
 800d876:	701a      	strb	r2, [r3, #0]
 800d878:	e028      	b.n	800d8cc <configCheck+0x1d4>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d87a:	f7ff fc89 	bl	800d190 <Calculate_LED_ON>
 800d87e:	0003      	movs	r3, r0
 800d880:	001a      	movs	r2, r3
 800d882:	4b54      	ldr	r3, [pc, #336]	@ (800d9d4 <configCheck+0x2dc>)
 800d884:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d886:	4b53      	ldr	r3, [pc, #332]	@ (800d9d4 <configCheck+0x2dc>)
 800d888:	1dba      	adds	r2, r7, #6
 800d88a:	8812      	ldrh	r2, [r2, #0]
 800d88c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d88e:	4b51      	ldr	r3, [pc, #324]	@ (800d9d4 <configCheck+0x2dc>)
 800d890:	1dba      	adds	r2, r7, #6
 800d892:	8812      	ldrh	r2, [r2, #0]
 800d894:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d896:	23c8      	movs	r3, #200	@ 0xc8
 800d898:	005b      	lsls	r3, r3, #1
 800d89a:	0018      	movs	r0, r3
 800d89c:	f001 fa64 	bl	800ed68 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d8a0:	4b4c      	ldr	r3, [pc, #304]	@ (800d9d4 <configCheck+0x2dc>)
 800d8a2:	22fa      	movs	r2, #250	@ 0xfa
 800d8a4:	0112      	lsls	r2, r2, #4
 800d8a6:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d8a8:	4b4a      	ldr	r3, [pc, #296]	@ (800d9d4 <configCheck+0x2dc>)
 800d8aa:	22fa      	movs	r2, #250	@ 0xfa
 800d8ac:	0112      	lsls	r2, r2, #4
 800d8ae:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d8b0:	4b48      	ldr	r3, [pc, #288]	@ (800d9d4 <configCheck+0x2dc>)
 800d8b2:	22fa      	movs	r2, #250	@ 0xfa
 800d8b4:	0112      	lsls	r2, r2, #4
 800d8b6:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d8b8:	23c8      	movs	r3, #200	@ 0xc8
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	0018      	movs	r0, r3
 800d8be:	f001 fa53 	bl	800ed68 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d8c2:	1d7b      	adds	r3, r7, #5
 800d8c4:	781a      	ldrb	r2, [r3, #0]
 800d8c6:	1d7b      	adds	r3, r7, #5
 800d8c8:	3201      	adds	r2, #1
 800d8ca:	701a      	strb	r2, [r3, #0]
 800d8cc:	1d7b      	adds	r3, r7, #5
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d9d2      	bls.n	800d87a <configCheck+0x182>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800d8d4:	4b37      	ldr	r3, [pc, #220]	@ (800d9b4 <configCheck+0x2bc>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	1e5a      	subs	r2, r3, #1
 800d8da:	4193      	sbcs	r3, r2
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2201      	movs	r2, #1
 800d8e0:	4053      	eors	r3, r2
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	1c1a      	adds	r2, r3, #0
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	4b31      	ldr	r3, [pc, #196]	@ (800d9b4 <configCheck+0x2bc>)
 800d8ee:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800d8f0:	4b30      	ldr	r3, [pc, #192]	@ (800d9b4 <configCheck+0x2bc>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <configCheck+0x204>
 800d8f8:	4b32      	ldr	r3, [pc, #200]	@ (800d9c4 <configCheck+0x2cc>)
 800d8fa:	e000      	b.n	800d8fe <configCheck+0x206>
 800d8fc:	4b32      	ldr	r3, [pc, #200]	@ (800d9c8 <configCheck+0x2d0>)
 800d8fe:	4a36      	ldr	r2, [pc, #216]	@ (800d9d8 <configCheck+0x2e0>)
 800d900:	4933      	ldr	r1, [pc, #204]	@ (800d9d0 <configCheck+0x2d8>)
 800d902:	2002      	movs	r0, #2
 800d904:	f000 fde0 	bl	800e4c8 <CreateLine>
      if (usbPluggedIn) {
 800d908:	4b34      	ldr	r3, [pc, #208]	@ (800d9dc <configCheck+0x2e4>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d009      	beq.n	800d924 <configCheck+0x22c>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800d910:	f7fc f8bc 	bl	8009a8c <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d914:	e006      	b.n	800d924 <configCheck+0x22c>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800d916:	4a32      	ldr	r2, [pc, #200]	@ (800d9e0 <configCheck+0x2e8>)
 800d918:	4b2d      	ldr	r3, [pc, #180]	@ (800d9d0 <configCheck+0x2d8>)
 800d91a:	0019      	movs	r1, r3
 800d91c:	2002      	movs	r0, #2
 800d91e:	f000 fdd3 	bl	800e4c8 <CreateLine>
 800d922:	e000      	b.n	800d926 <configCheck+0x22e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d924:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800d926:	46c0      	nop			@ (mov r8, r8)
 800d928:	f7f8 fdb0 	bl	800648c <UserButton_Pressed>
 800d92c:	1e03      	subs	r3, r0, #0
 800d92e:	d1fb      	bne.n	800d928 <configCheck+0x230>
    }
    buttonHeld = false;
 800d930:	4b1d      	ldr	r3, [pc, #116]	@ (800d9a8 <configCheck+0x2b0>)
 800d932:	2200      	movs	r2, #0
 800d934:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d936:	f7f8 fd98 	bl	800646a <BootButton_Pressed>
 800d93a:	0003      	movs	r3, r0
 800d93c:	001a      	movs	r2, r3
 800d93e:	2301      	movs	r3, #1
 800d940:	4053      	eors	r3, r2
 800d942:	b2db      	uxtb	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00b      	beq.n	800d960 <configCheck+0x268>
 800d948:	f7f8 fda0 	bl	800648c <UserButton_Pressed>
 800d94c:	0003      	movs	r3, r0
 800d94e:	001a      	movs	r2, r3
 800d950:	2301      	movs	r3, #1
 800d952:	4053      	eors	r3, r2
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d002      	beq.n	800d960 <configCheck+0x268>
    buttonHeld = false;
 800d95a:	4b13      	ldr	r3, [pc, #76]	@ (800d9a8 <configCheck+0x2b0>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d960:	f7f8 fd74 	bl	800644c <Check_USB_PowerOn>
 800d964:	1e03      	subs	r3, r0, #0
 800d966:	d003      	beq.n	800d970 <configCheck+0x278>
    usbPluggedIn = true;
 800d968:	4b1c      	ldr	r3, [pc, #112]	@ (800d9dc <configCheck+0x2e4>)
 800d96a:	2201      	movs	r2, #1
 800d96c:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d96e:	e012      	b.n	800d996 <configCheck+0x29e>
    if(!userToggle && !init){
 800d970:	4b10      	ldr	r3, [pc, #64]	@ (800d9b4 <configCheck+0x2bc>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2201      	movs	r2, #1
 800d976:	4053      	eors	r3, r2
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d008      	beq.n	800d990 <configCheck+0x298>
 800d97e:	4b19      	ldr	r3, [pc, #100]	@ (800d9e4 <configCheck+0x2ec>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	2201      	movs	r2, #1
 800d984:	4053      	eors	r3, r2
 800d986:	b2db      	uxtb	r3, r3
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <configCheck+0x298>
      SetLEDsOff();
 800d98c:	f7ff fe06 	bl	800d59c <SetLEDsOff>
    usbPluggedIn = false;
 800d990:	4b12      	ldr	r3, [pc, #72]	@ (800d9dc <configCheck+0x2e4>)
 800d992:	2200      	movs	r2, #0
 800d994:	701a      	strb	r2, [r3, #0]
}
 800d996:	46c0      	nop			@ (mov r8, r8)
 800d998:	46bd      	mov	sp, r7
 800d99a:	b003      	add	sp, #12
 800d99c:	bd90      	pop	{r4, r7, pc}
 800d99e:	46c0      	nop			@ (mov r8, r8)
 800d9a0:	20001ff8 	.word	0x20001ff8
 800d9a4:	20002000 	.word	0x20002000
 800d9a8:	20001ffb 	.word	0x20001ffb
 800d9ac:	08024efc 	.word	0x08024efc
 800d9b0:	08024e84 	.word	0x08024e84
 800d9b4:	20001ffa 	.word	0x20001ffa
 800d9b8:	20002004 	.word	0x20002004
 800d9bc:	20001060 	.word	0x20001060
 800d9c0:	2000105e 	.word	0x2000105e
 800d9c4:	08024f10 	.word	0x08024f10
 800d9c8:	08024f18 	.word	0x08024f18
 800d9cc:	08024f24 	.word	0x08024f24
 800d9d0:	08024f44 	.word	0x08024f44
 800d9d4:	40000400 	.word	0x40000400
 800d9d8:	08024f48 	.word	0x08024f48
 800d9dc:	20001ff9 	.word	0x20001ff9
 800d9e0:	08024f60 	.word	0x08024f60
 800d9e4:	200000d0 	.word	0x200000d0

0800d9e8 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800d9e8:	b590      	push	{r4, r7, lr}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d9ee:	1dfc      	adds	r4, r7, #7
 800d9f0:	f7ff fe1e 	bl	800d630 <powerCheck>
 800d9f4:	0003      	movs	r3, r0
 800d9f6:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d9f8:	1dfb      	adds	r3, r7, #7
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	0018      	movs	r0, r3
 800d9fe:	f7ff fe33 	bl	800d668 <powerDisplay>
  return status;
 800da02:	1dfb      	adds	r3, r7, #7
 800da04:	781b      	ldrb	r3, [r3, #0]
}
 800da06:	0018      	movs	r0, r3
 800da08:	46bd      	mov	sp, r7
 800da0a:	b003      	add	sp, #12
 800da0c:	bd90      	pop	{r4, r7, pc}
	...

0800da10 <setuserToggle>:

void setuserToggle(void) {
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800da14:	f7ff fe0c 	bl	800d630 <powerCheck>
 800da18:	0003      	movs	r3, r0
 800da1a:	2b04      	cmp	r3, #4
 800da1c:	d002      	beq.n	800da24 <setuserToggle+0x14>
    userToggle = true;
 800da1e:	4b03      	ldr	r3, [pc, #12]	@ (800da2c <setuserToggle+0x1c>)
 800da20:	2201      	movs	r2, #1
 800da22:	701a      	strb	r2, [r3, #0]
  }
}
 800da24:	46c0      	nop			@ (mov r8, r8)
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	46c0      	nop			@ (mov r8, r8)
 800da2c:	20001ffa 	.word	0x20001ffa

0800da30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da34:	4b07      	ldr	r3, [pc, #28]	@ (800da54 <HAL_MspInit+0x24>)
 800da36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da38:	4b06      	ldr	r3, [pc, #24]	@ (800da54 <HAL_MspInit+0x24>)
 800da3a:	2101      	movs	r1, #1
 800da3c:	430a      	orrs	r2, r1
 800da3e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800da40:	4b04      	ldr	r3, [pc, #16]	@ (800da54 <HAL_MspInit+0x24>)
 800da42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da44:	4b03      	ldr	r3, [pc, #12]	@ (800da54 <HAL_MspInit+0x24>)
 800da46:	2180      	movs	r1, #128	@ 0x80
 800da48:	0549      	lsls	r1, r1, #21
 800da4a:	430a      	orrs	r2, r1
 800da4c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da4e:	46c0      	nop			@ (mov r8, r8)
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	40021000 	.word	0x40021000

0800da58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800da5c:	46c0      	nop			@ (mov r8, r8)
 800da5e:	e7fd      	b.n	800da5c <NMI_Handler+0x4>

0800da60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da64:	46c0      	nop			@ (mov r8, r8)
 800da66:	e7fd      	b.n	800da64 <HardFault_Handler+0x4>

0800da68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800da6c:	46c0      	nop			@ (mov r8, r8)
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da76:	46c0      	nop			@ (mov r8, r8)
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da80:	f001 f956 	bl	800ed30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800da84:	46c0      	nop			@ (mov r8, r8)
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
	...

0800da8c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800da90:	4b03      	ldr	r3, [pc, #12]	@ (800daa0 <RTC_IRQHandler+0x14>)
 800da92:	0018      	movs	r0, r3
 800da94:	f008 fe7c 	bl	8016790 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800da98:	46c0      	nop			@ (mov r8, r8)
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	46c0      	nop			@ (mov r8, r8)
 800daa0:	20001038 	.word	0x20001038

0800daa4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800daa8:	2380      	movs	r3, #128	@ 0x80
 800daaa:	021b      	lsls	r3, r3, #8
 800daac:	0018      	movs	r0, r3
 800daae:	f002 fbff 	bl	80102b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800dab2:	46c0      	nop			@ (mov r8, r8)
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dabc:	4b05      	ldr	r3, [pc, #20]	@ (800dad4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800dabe:	0018      	movs	r0, r3
 800dac0:	f001 ff87 	bl	800f9d2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dac4:	4b04      	ldr	r3, [pc, #16]	@ (800dad8 <DMA1_Channel2_3_IRQHandler+0x20>)
 800dac6:	0018      	movs	r0, r3
 800dac8:	f001 ff83 	bl	800f9d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800dacc:	46c0      	nop			@ (mov r8, r8)
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	46c0      	nop			@ (mov r8, r8)
 800dad4:	20000edc 	.word	0x20000edc
 800dad8:	20000e94 	.word	0x20000e94

0800dadc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dae0:	4b07      	ldr	r3, [pc, #28]	@ (800db00 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800dae2:	0018      	movs	r0, r3
 800dae4:	f001 ff75 	bl	800f9d2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800dae8:	4b06      	ldr	r3, [pc, #24]	@ (800db04 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800daea:	0018      	movs	r0, r3
 800daec:	f001 ff71 	bl	800f9d2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800daf0:	4b05      	ldr	r3, [pc, #20]	@ (800db08 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800daf2:	0018      	movs	r0, r3
 800daf4:	f001 ff6d 	bl	800f9d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800daf8:	46c0      	nop			@ (mov r8, r8)
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	46c0      	nop			@ (mov r8, r8)
 800db00:	20000f60 	.word	0x20000f60
 800db04:	200022fc 	.word	0x200022fc
 800db08:	20002344 	.word	0x20002344

0800db0c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800db10:	4b03      	ldr	r3, [pc, #12]	@ (800db20 <USART4_5_IRQHandler+0x14>)
 800db12:	0018      	movs	r0, r3
 800db14:	f009 fd36 	bl	8017584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800db18:	46c0      	nop			@ (mov r8, r8)
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	46c0      	nop			@ (mov r8, r8)
 800db20:	20002244 	.word	0x20002244

0800db24 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800db28:	4b09      	ldr	r3, [pc, #36]	@ (800db50 <I2C1_IRQHandler+0x2c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	699a      	ldr	r2, [r3, #24]
 800db2e:	23e0      	movs	r3, #224	@ 0xe0
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	4013      	ands	r3, r2
 800db34:	d004      	beq.n	800db40 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800db36:	4b06      	ldr	r3, [pc, #24]	@ (800db50 <I2C1_IRQHandler+0x2c>)
 800db38:	0018      	movs	r0, r3
 800db3a:	f003 f8a1 	bl	8010c80 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800db3e:	e003      	b.n	800db48 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800db40:	4b03      	ldr	r3, [pc, #12]	@ (800db50 <I2C1_IRQHandler+0x2c>)
 800db42:	0018      	movs	r0, r3
 800db44:	f003 f882 	bl	8010c4c <HAL_I2C_EV_IRQHandler>
}
 800db48:	46c0      	nop			@ (mov r8, r8)
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	46c0      	nop			@ (mov r8, r8)
 800db50:	20000dec 	.word	0x20000dec

0800db54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800db58:	4b03      	ldr	r3, [pc, #12]	@ (800db68 <USART1_IRQHandler+0x14>)
 800db5a:	0018      	movs	r0, r3
 800db5c:	f009 fd12 	bl	8017584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800db60:	46c0      	nop			@ (mov r8, r8)
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	2000218c 	.word	0x2000218c

0800db6c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800db70:	4b03      	ldr	r3, [pc, #12]	@ (800db80 <USB_IRQHandler+0x14>)
 800db72:	0018      	movs	r0, r3
 800db74:	f005 fc62 	bl	801343c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800db78:	46c0      	nop			@ (mov r8, r8)
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	46c0      	nop			@ (mov r8, r8)
 800db80:	20003158 	.word	0x20003158

0800db84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0
  return 1;
 800db88:	2301      	movs	r3, #1
}
 800db8a:	0018      	movs	r0, r3
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <_kill>:

int _kill(int pid, int sig)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800db9a:	f012 fbd7 	bl	802034c <__errno>
 800db9e:	0003      	movs	r3, r0
 800dba0:	2216      	movs	r2, #22
 800dba2:	601a      	str	r2, [r3, #0]
  return -1;
 800dba4:	2301      	movs	r3, #1
 800dba6:	425b      	negs	r3, r3
}
 800dba8:	0018      	movs	r0, r3
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	b002      	add	sp, #8
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_exit>:

void _exit (int status)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dbb8:	2301      	movs	r3, #1
 800dbba:	425a      	negs	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	0011      	movs	r1, r2
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	f7ff ffe5 	bl	800db90 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dbc6:	46c0      	nop			@ (mov r8, r8)
 800dbc8:	e7fd      	b.n	800dbc6 <_exit+0x16>

0800dbca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b086      	sub	sp, #24
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	60b9      	str	r1, [r7, #8]
 800dbd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	617b      	str	r3, [r7, #20]
 800dbda:	e00a      	b.n	800dbf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dbdc:	e000      	b.n	800dbe0 <_read+0x16>
 800dbde:	bf00      	nop
 800dbe0:	0001      	movs	r1, r0
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	1c5a      	adds	r2, r3, #1
 800dbe6:	60ba      	str	r2, [r7, #8]
 800dbe8:	b2ca      	uxtb	r2, r1
 800dbea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	617b      	str	r3, [r7, #20]
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	dbf0      	blt.n	800dbdc <_read+0x12>
  }

  return len;
 800dbfa:	687b      	ldr	r3, [r7, #4]
}
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	b006      	add	sp, #24
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <_close>:
  }
  return len;
}

int _close(int file)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	425b      	negs	r3, r3
}
 800dc10:	0018      	movs	r0, r3
 800dc12:	46bd      	mov	sp, r7
 800dc14:	b002      	add	sp, #8
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2280      	movs	r2, #128	@ 0x80
 800dc26:	0192      	lsls	r2, r2, #6
 800dc28:	605a      	str	r2, [r3, #4]
  return 0;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	b002      	add	sp, #8
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <_isatty>:

int _isatty(int file)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dc3c:	2301      	movs	r3, #1
}
 800dc3e:	0018      	movs	r0, r3
 800dc40:	46bd      	mov	sp, r7
 800dc42:	b002      	add	sp, #8
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	60f8      	str	r0, [r7, #12]
 800dc4e:	60b9      	str	r1, [r7, #8]
 800dc50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	0018      	movs	r0, r3
 800dc56:	46bd      	mov	sp, r7
 800dc58:	b004      	add	sp, #16
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dc64:	4a14      	ldr	r2, [pc, #80]	@ (800dcb8 <_sbrk+0x5c>)
 800dc66:	4b15      	ldr	r3, [pc, #84]	@ (800dcbc <_sbrk+0x60>)
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dc70:	4b13      	ldr	r3, [pc, #76]	@ (800dcc0 <_sbrk+0x64>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d102      	bne.n	800dc7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dc78:	4b11      	ldr	r3, [pc, #68]	@ (800dcc0 <_sbrk+0x64>)
 800dc7a:	4a12      	ldr	r2, [pc, #72]	@ (800dcc4 <_sbrk+0x68>)
 800dc7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dc7e:	4b10      	ldr	r3, [pc, #64]	@ (800dcc0 <_sbrk+0x64>)
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	18d3      	adds	r3, r2, r3
 800dc86:	693a      	ldr	r2, [r7, #16]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d207      	bcs.n	800dc9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dc8c:	f012 fb5e 	bl	802034c <__errno>
 800dc90:	0003      	movs	r3, r0
 800dc92:	220c      	movs	r2, #12
 800dc94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dc96:	2301      	movs	r3, #1
 800dc98:	425b      	negs	r3, r3
 800dc9a:	e009      	b.n	800dcb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dc9c:	4b08      	ldr	r3, [pc, #32]	@ (800dcc0 <_sbrk+0x64>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dca2:	4b07      	ldr	r3, [pc, #28]	@ (800dcc0 <_sbrk+0x64>)
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	18d2      	adds	r2, r2, r3
 800dcaa:	4b05      	ldr	r3, [pc, #20]	@ (800dcc0 <_sbrk+0x64>)
 800dcac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800dcae:	68fb      	ldr	r3, [r7, #12]
}
 800dcb0:	0018      	movs	r0, r3
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	b006      	add	sp, #24
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20005000 	.word	0x20005000
 800dcbc:	00000400 	.word	0x00000400
 800dcc0:	20002010 	.word	0x20002010
 800dcc4:	200037b8 	.word	0x200037b8

0800dcc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dccc:	46c0      	nop			@ (mov r8, r8)
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcda:	2310      	movs	r3, #16
 800dcdc:	18fb      	adds	r3, r7, r3
 800dcde:	0018      	movs	r0, r3
 800dce0:	2308      	movs	r3, #8
 800dce2:	001a      	movs	r2, r3
 800dce4:	2100      	movs	r1, #0
 800dce6:	f012 fa8d 	bl	8020204 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dcea:	003b      	movs	r3, r7
 800dcec:	0018      	movs	r0, r3
 800dcee:	2310      	movs	r3, #16
 800dcf0:	001a      	movs	r2, r3
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	f012 fa86 	bl	8020204 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dcf8:	4b2e      	ldr	r3, [pc, #184]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dcfa:	2280      	movs	r2, #128	@ 0x80
 800dcfc:	05d2      	lsls	r2, r2, #23
 800dcfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dd00:	4b2c      	ldr	r3, [pc, #176]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd06:	4b2b      	ldr	r3, [pc, #172]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800dd0c:	4b29      	ldr	r3, [pc, #164]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd0e:	4a2a      	ldr	r2, [pc, #168]	@ (800ddb8 <MX_TIM2_Init+0xe4>)
 800dd10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd12:	4b28      	ldr	r3, [pc, #160]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd18:	4b26      	ldr	r3, [pc, #152]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dd1e:	4b25      	ldr	r3, [pc, #148]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd20:	0018      	movs	r0, r3
 800dd22:	f008 fe43 	bl	80169ac <HAL_TIM_PWM_Init>
 800dd26:	1e03      	subs	r3, r0, #0
 800dd28:	d001      	beq.n	800dd2e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800dd2a:	f7fa faef 	bl	800830c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd2e:	2110      	movs	r1, #16
 800dd30:	187b      	adds	r3, r7, r1
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd36:	187b      	adds	r3, r7, r1
 800dd38:	2200      	movs	r2, #0
 800dd3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dd3c:	187a      	adds	r2, r7, r1
 800dd3e:	4b1d      	ldr	r3, [pc, #116]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd40:	0011      	movs	r1, r2
 800dd42:	0018      	movs	r0, r3
 800dd44:	f009 f950 	bl	8016fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800dd48:	1e03      	subs	r3, r0, #0
 800dd4a:	d001      	beq.n	800dd50 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dd4c:	f7fa fade 	bl	800830c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd50:	003b      	movs	r3, r7
 800dd52:	2260      	movs	r2, #96	@ 0x60
 800dd54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dd56:	003b      	movs	r3, r7
 800dd58:	2200      	movs	r2, #0
 800dd5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd5c:	003b      	movs	r3, r7
 800dd5e:	2200      	movs	r2, #0
 800dd60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd62:	003b      	movs	r3, r7
 800dd64:	2200      	movs	r2, #0
 800dd66:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd68:	0039      	movs	r1, r7
 800dd6a:	4b12      	ldr	r3, [pc, #72]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	0018      	movs	r0, r3
 800dd70:	f008 feee 	bl	8016b50 <HAL_TIM_PWM_ConfigChannel>
 800dd74:	1e03      	subs	r3, r0, #0
 800dd76:	d001      	beq.n	800dd7c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800dd78:	f7fa fac8 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dd7c:	0039      	movs	r1, r7
 800dd7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd80:	2208      	movs	r2, #8
 800dd82:	0018      	movs	r0, r3
 800dd84:	f008 fee4 	bl	8016b50 <HAL_TIM_PWM_ConfigChannel>
 800dd88:	1e03      	subs	r3, r0, #0
 800dd8a:	d001      	beq.n	800dd90 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dd8c:	f7fa fabe 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dd90:	0039      	movs	r1, r7
 800dd92:	4b08      	ldr	r3, [pc, #32]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dd94:	220c      	movs	r2, #12
 800dd96:	0018      	movs	r0, r3
 800dd98:	f008 feda 	bl	8016b50 <HAL_TIM_PWM_ConfigChannel>
 800dd9c:	1e03      	subs	r3, r0, #0
 800dd9e:	d001      	beq.n	800dda4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800dda0:	f7fa fab4 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dda4:	4b03      	ldr	r3, [pc, #12]	@ (800ddb4 <MX_TIM2_Init+0xe0>)
 800dda6:	0018      	movs	r0, r3
 800dda8:	f000 f8fe 	bl	800dfa8 <HAL_TIM_MspPostInit>

}
 800ddac:	46c0      	nop			@ (mov r8, r8)
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	b006      	add	sp, #24
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20002014 	.word	0x20002014
 800ddb8:	0000ffff 	.word	0x0000ffff

0800ddbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddc2:	2310      	movs	r3, #16
 800ddc4:	18fb      	adds	r3, r7, r3
 800ddc6:	0018      	movs	r0, r3
 800ddc8:	2308      	movs	r3, #8
 800ddca:	001a      	movs	r2, r3
 800ddcc:	2100      	movs	r1, #0
 800ddce:	f012 fa19 	bl	8020204 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ddd2:	003b      	movs	r3, r7
 800ddd4:	0018      	movs	r0, r3
 800ddd6:	2310      	movs	r3, #16
 800ddd8:	001a      	movs	r2, r3
 800ddda:	2100      	movs	r1, #0
 800dddc:	f012 fa12 	bl	8020204 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dde0:	4b32      	ldr	r3, [pc, #200]	@ (800deac <MX_TIM3_Init+0xf0>)
 800dde2:	4a33      	ldr	r2, [pc, #204]	@ (800deb0 <MX_TIM3_Init+0xf4>)
 800dde4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dde6:	4b31      	ldr	r3, [pc, #196]	@ (800deac <MX_TIM3_Init+0xf0>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddec:	4b2f      	ldr	r3, [pc, #188]	@ (800deac <MX_TIM3_Init+0xf0>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ddf2:	4b2e      	ldr	r3, [pc, #184]	@ (800deac <MX_TIM3_Init+0xf0>)
 800ddf4:	4a2f      	ldr	r2, [pc, #188]	@ (800deb4 <MX_TIM3_Init+0xf8>)
 800ddf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddf8:	4b2c      	ldr	r3, [pc, #176]	@ (800deac <MX_TIM3_Init+0xf0>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddfe:	4b2b      	ldr	r3, [pc, #172]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de00:	2200      	movs	r2, #0
 800de02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800de04:	4b29      	ldr	r3, [pc, #164]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de06:	0018      	movs	r0, r3
 800de08:	f008 fdd0 	bl	80169ac <HAL_TIM_PWM_Init>
 800de0c:	1e03      	subs	r3, r0, #0
 800de0e:	d001      	beq.n	800de14 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800de10:	f7fa fa7c 	bl	800830c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de14:	2110      	movs	r1, #16
 800de16:	187b      	adds	r3, r7, r1
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de1c:	187b      	adds	r3, r7, r1
 800de1e:	2200      	movs	r2, #0
 800de20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800de22:	187a      	adds	r2, r7, r1
 800de24:	4b21      	ldr	r3, [pc, #132]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de26:	0011      	movs	r1, r2
 800de28:	0018      	movs	r0, r3
 800de2a:	f009 f8dd 	bl	8016fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800de2e:	1e03      	subs	r3, r0, #0
 800de30:	d001      	beq.n	800de36 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800de32:	f7fa fa6b 	bl	800830c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de36:	003b      	movs	r3, r7
 800de38:	2260      	movs	r2, #96	@ 0x60
 800de3a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800de3c:	003b      	movs	r3, r7
 800de3e:	2200      	movs	r2, #0
 800de40:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de42:	003b      	movs	r3, r7
 800de44:	2200      	movs	r2, #0
 800de46:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de48:	003b      	movs	r3, r7
 800de4a:	2200      	movs	r2, #0
 800de4c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800de4e:	0039      	movs	r1, r7
 800de50:	4b16      	ldr	r3, [pc, #88]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de52:	2200      	movs	r2, #0
 800de54:	0018      	movs	r0, r3
 800de56:	f008 fe7b 	bl	8016b50 <HAL_TIM_PWM_ConfigChannel>
 800de5a:	1e03      	subs	r3, r0, #0
 800de5c:	d001      	beq.n	800de62 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800de5e:	f7fa fa55 	bl	800830c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800de62:	4b12      	ldr	r3, [pc, #72]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de64:	2104      	movs	r1, #4
 800de66:	0018      	movs	r0, r3
 800de68:	f009 f91c 	bl	80170a4 <HAL_TIMEx_RemapConfig>
 800de6c:	1e03      	subs	r3, r0, #0
 800de6e:	d001      	beq.n	800de74 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800de70:	f7fa fa4c 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800de74:	0039      	movs	r1, r7
 800de76:	4b0d      	ldr	r3, [pc, #52]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de78:	2204      	movs	r2, #4
 800de7a:	0018      	movs	r0, r3
 800de7c:	f008 fe68 	bl	8016b50 <HAL_TIM_PWM_ConfigChannel>
 800de80:	1e03      	subs	r3, r0, #0
 800de82:	d001      	beq.n	800de88 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800de84:	f7fa fa42 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800de88:	0039      	movs	r1, r7
 800de8a:	4b08      	ldr	r3, [pc, #32]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de8c:	2208      	movs	r2, #8
 800de8e:	0018      	movs	r0, r3
 800de90:	f008 fe5e 	bl	8016b50 <HAL_TIM_PWM_ConfigChannel>
 800de94:	1e03      	subs	r3, r0, #0
 800de96:	d001      	beq.n	800de9c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800de98:	f7fa fa38 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800de9c:	4b03      	ldr	r3, [pc, #12]	@ (800deac <MX_TIM3_Init+0xf0>)
 800de9e:	0018      	movs	r0, r3
 800dea0:	f000 f882 	bl	800dfa8 <HAL_TIM_MspPostInit>

}
 800dea4:	46c0      	nop			@ (mov r8, r8)
 800dea6:	46bd      	mov	sp, r7
 800dea8:	b006      	add	sp, #24
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20002054 	.word	0x20002054
 800deb0:	40000400 	.word	0x40000400
 800deb4:	0000ffff 	.word	0x0000ffff

0800deb8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800debe:	003b      	movs	r3, r7
 800dec0:	0018      	movs	r0, r3
 800dec2:	2308      	movs	r3, #8
 800dec4:	001a      	movs	r2, r3
 800dec6:	2100      	movs	r1, #0
 800dec8:	f012 f99c 	bl	8020204 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800decc:	4b15      	ldr	r3, [pc, #84]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800dece:	4a16      	ldr	r2, [pc, #88]	@ (800df28 <MX_TIM6_Init+0x70>)
 800ded0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800ded2:	4b14      	ldr	r3, [pc, #80]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800ded4:	220a      	movs	r2, #10
 800ded6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ded8:	4b12      	ldr	r3, [pc, #72]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800deda:	2200      	movs	r2, #0
 800dedc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800dede:	4b11      	ldr	r3, [pc, #68]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800dee0:	4a12      	ldr	r2, [pc, #72]	@ (800df2c <MX_TIM6_Init+0x74>)
 800dee2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dee4:	4b0f      	ldr	r3, [pc, #60]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800deea:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800deec:	0018      	movs	r0, r3
 800deee:	f008 fcb5 	bl	801685c <HAL_TIM_Base_Init>
 800def2:	1e03      	subs	r3, r0, #0
 800def4:	d001      	beq.n	800defa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800def6:	f7fa fa09 	bl	800830c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800defa:	003b      	movs	r3, r7
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df00:	003b      	movs	r3, r7
 800df02:	2200      	movs	r2, #0
 800df04:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800df06:	003a      	movs	r2, r7
 800df08:	4b06      	ldr	r3, [pc, #24]	@ (800df24 <MX_TIM6_Init+0x6c>)
 800df0a:	0011      	movs	r1, r2
 800df0c:	0018      	movs	r0, r3
 800df0e:	f009 f86b 	bl	8016fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800df12:	1e03      	subs	r3, r0, #0
 800df14:	d001      	beq.n	800df1a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800df16:	f7fa f9f9 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800df1a:	46c0      	nop			@ (mov r8, r8)
 800df1c:	46bd      	mov	sp, r7
 800df1e:	b002      	add	sp, #8
 800df20:	bd80      	pop	{r7, pc}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	20002094 	.word	0x20002094
 800df28:	40001000 	.word	0x40001000
 800df2c:	0000ffff 	.word	0x0000ffff

0800df30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	2380      	movs	r3, #128	@ 0x80
 800df3e:	05db      	lsls	r3, r3, #23
 800df40:	429a      	cmp	r2, r3
 800df42:	d106      	bne.n	800df52 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800df44:	4b0a      	ldr	r3, [pc, #40]	@ (800df70 <HAL_TIM_PWM_MspInit+0x40>)
 800df46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df48:	4b09      	ldr	r3, [pc, #36]	@ (800df70 <HAL_TIM_PWM_MspInit+0x40>)
 800df4a:	2101      	movs	r1, #1
 800df4c:	430a      	orrs	r2, r1
 800df4e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800df50:	e00a      	b.n	800df68 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a07      	ldr	r2, [pc, #28]	@ (800df74 <HAL_TIM_PWM_MspInit+0x44>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d105      	bne.n	800df68 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800df5c:	4b04      	ldr	r3, [pc, #16]	@ (800df70 <HAL_TIM_PWM_MspInit+0x40>)
 800df5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df60:	4b03      	ldr	r3, [pc, #12]	@ (800df70 <HAL_TIM_PWM_MspInit+0x40>)
 800df62:	2102      	movs	r1, #2
 800df64:	430a      	orrs	r2, r1
 800df66:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800df68:	46c0      	nop			@ (mov r8, r8)
 800df6a:	46bd      	mov	sp, r7
 800df6c:	b002      	add	sp, #8
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	40021000 	.word	0x40021000
 800df74:	40000400 	.word	0x40000400

0800df78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a06      	ldr	r2, [pc, #24]	@ (800dfa0 <HAL_TIM_Base_MspInit+0x28>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d105      	bne.n	800df96 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800df8a:	4b06      	ldr	r3, [pc, #24]	@ (800dfa4 <HAL_TIM_Base_MspInit+0x2c>)
 800df8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df8e:	4b05      	ldr	r3, [pc, #20]	@ (800dfa4 <HAL_TIM_Base_MspInit+0x2c>)
 800df90:	2110      	movs	r1, #16
 800df92:	430a      	orrs	r2, r1
 800df94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800df96:	46c0      	nop			@ (mov r8, r8)
 800df98:	46bd      	mov	sp, r7
 800df9a:	b002      	add	sp, #8
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	46c0      	nop			@ (mov r8, r8)
 800dfa0:	40001000 	.word	0x40001000
 800dfa4:	40021000 	.word	0x40021000

0800dfa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800dfa8:	b590      	push	{r4, r7, lr}
 800dfaa:	b08b      	sub	sp, #44	@ 0x2c
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfb0:	2414      	movs	r4, #20
 800dfb2:	193b      	adds	r3, r7, r4
 800dfb4:	0018      	movs	r0, r3
 800dfb6:	2314      	movs	r3, #20
 800dfb8:	001a      	movs	r2, r3
 800dfba:	2100      	movs	r1, #0
 800dfbc:	f012 f922 	bl	8020204 <memset>
  if(timHandle->Instance==TIM2)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	2380      	movs	r3, #128	@ 0x80
 800dfc6:	05db      	lsls	r3, r3, #23
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d123      	bne.n	800e014 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfcc:	4b27      	ldr	r3, [pc, #156]	@ (800e06c <HAL_TIM_MspPostInit+0xc4>)
 800dfce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfd0:	4b26      	ldr	r3, [pc, #152]	@ (800e06c <HAL_TIM_MspPostInit+0xc4>)
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	430a      	orrs	r2, r1
 800dfd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dfd8:	4b24      	ldr	r3, [pc, #144]	@ (800e06c <HAL_TIM_MspPostInit+0xc4>)
 800dfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfdc:	2201      	movs	r2, #1
 800dfde:	4013      	ands	r3, r2
 800dfe0:	613b      	str	r3, [r7, #16]
 800dfe2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800dfe4:	0021      	movs	r1, r4
 800dfe6:	187b      	adds	r3, r7, r1
 800dfe8:	220d      	movs	r2, #13
 800dfea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfec:	187b      	adds	r3, r7, r1
 800dfee:	2202      	movs	r2, #2
 800dff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dff2:	187b      	adds	r3, r7, r1
 800dff4:	2200      	movs	r2, #0
 800dff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dff8:	187b      	adds	r3, r7, r1
 800dffa:	2200      	movs	r2, #0
 800dffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800dffe:	187b      	adds	r3, r7, r1
 800e000:	2202      	movs	r2, #2
 800e002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e004:	187a      	adds	r2, r7, r1
 800e006:	23a0      	movs	r3, #160	@ 0xa0
 800e008:	05db      	lsls	r3, r3, #23
 800e00a:	0011      	movs	r1, r2
 800e00c:	0018      	movs	r0, r3
 800e00e:	f001 ff97 	bl	800ff40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e012:	e027      	b.n	800e064 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a15      	ldr	r2, [pc, #84]	@ (800e070 <HAL_TIM_MspPostInit+0xc8>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d122      	bne.n	800e064 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e01e:	4b13      	ldr	r3, [pc, #76]	@ (800e06c <HAL_TIM_MspPostInit+0xc4>)
 800e020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e022:	4b12      	ldr	r3, [pc, #72]	@ (800e06c <HAL_TIM_MspPostInit+0xc4>)
 800e024:	2104      	movs	r1, #4
 800e026:	430a      	orrs	r2, r1
 800e028:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e02a:	4b10      	ldr	r3, [pc, #64]	@ (800e06c <HAL_TIM_MspPostInit+0xc4>)
 800e02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e02e:	2204      	movs	r2, #4
 800e030:	4013      	ands	r3, r2
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e036:	2114      	movs	r1, #20
 800e038:	187b      	adds	r3, r7, r1
 800e03a:	22e0      	movs	r2, #224	@ 0xe0
 800e03c:	0052      	lsls	r2, r2, #1
 800e03e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e040:	187b      	adds	r3, r7, r1
 800e042:	2202      	movs	r2, #2
 800e044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e046:	187b      	adds	r3, r7, r1
 800e048:	2200      	movs	r2, #0
 800e04a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e04c:	187b      	adds	r3, r7, r1
 800e04e:	2200      	movs	r2, #0
 800e050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e052:	187b      	adds	r3, r7, r1
 800e054:	2202      	movs	r2, #2
 800e056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e058:	187b      	adds	r3, r7, r1
 800e05a:	4a06      	ldr	r2, [pc, #24]	@ (800e074 <HAL_TIM_MspPostInit+0xcc>)
 800e05c:	0019      	movs	r1, r3
 800e05e:	0010      	movs	r0, r2
 800e060:	f001 ff6e 	bl	800ff40 <HAL_GPIO_Init>
}
 800e064:	46c0      	nop			@ (mov r8, r8)
 800e066:	46bd      	mov	sp, r7
 800e068:	b00b      	add	sp, #44	@ 0x2c
 800e06a:	bd90      	pop	{r4, r7, pc}
 800e06c:	40021000 	.word	0x40021000
 800e070:	40000400 	.word	0x40000400
 800e074:	50000800 	.word	0x50000800

0800e078 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e07c:	4b17      	ldr	r3, [pc, #92]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e07e:	4a18      	ldr	r2, [pc, #96]	@ (800e0e0 <MX_LPUART1_UART_Init+0x68>)
 800e080:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e082:	4b16      	ldr	r3, [pc, #88]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e084:	22e1      	movs	r2, #225	@ 0xe1
 800e086:	0252      	lsls	r2, r2, #9
 800e088:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e08a:	4b14      	ldr	r3, [pc, #80]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e090:	4b12      	ldr	r3, [pc, #72]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e092:	2200      	movs	r2, #0
 800e094:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e096:	4b11      	ldr	r3, [pc, #68]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e098:	2200      	movs	r2, #0
 800e09a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e09c:	4b0f      	ldr	r3, [pc, #60]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e09e:	220c      	movs	r2, #12
 800e0a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e0a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e0ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e0b0:	2218      	movs	r2, #24
 800e0b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e0b4:	4b09      	ldr	r3, [pc, #36]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e0b6:	2280      	movs	r2, #128	@ 0x80
 800e0b8:	0212      	lsls	r2, r2, #8
 800e0ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e0bc:	4b07      	ldr	r3, [pc, #28]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e0be:	2280      	movs	r2, #128	@ 0x80
 800e0c0:	0152      	lsls	r2, r2, #5
 800e0c2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e0c4:	4b05      	ldr	r3, [pc, #20]	@ (800e0dc <MX_LPUART1_UART_Init+0x64>)
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	f009 f80a 	bl	80170e0 <HAL_UART_Init>
 800e0cc:	1e03      	subs	r3, r0, #0
 800e0ce:	d001      	beq.n	800e0d4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e0d0:	f7fa f91c 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e0d4:	46c0      	nop			@ (mov r8, r8)
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	46c0      	nop			@ (mov r8, r8)
 800e0dc:	200020d4 	.word	0x200020d4
 800e0e0:	40004800 	.word	0x40004800

0800e0e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e0e8:	4b16      	ldr	r3, [pc, #88]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e0ea:	4a17      	ldr	r2, [pc, #92]	@ (800e148 <MX_USART1_UART_Init+0x64>)
 800e0ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e0ee:	4b15      	ldr	r3, [pc, #84]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e0f0:	22e1      	movs	r2, #225	@ 0xe1
 800e0f2:	0252      	lsls	r2, r2, #9
 800e0f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e0f6:	4b13      	ldr	r3, [pc, #76]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e0fc:	4b11      	ldr	r3, [pc, #68]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e102:	4b10      	ldr	r3, [pc, #64]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e104:	2200      	movs	r2, #0
 800e106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e108:	4b0e      	ldr	r3, [pc, #56]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e10a:	220c      	movs	r2, #12
 800e10c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e10e:	4b0d      	ldr	r3, [pc, #52]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e110:	2200      	movs	r2, #0
 800e112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e114:	4b0b      	ldr	r3, [pc, #44]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e116:	2200      	movs	r2, #0
 800e118:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e11a:	4b0a      	ldr	r3, [pc, #40]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e11c:	2200      	movs	r2, #0
 800e11e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e120:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e122:	2208      	movs	r2, #8
 800e124:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e126:	4b07      	ldr	r3, [pc, #28]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e128:	2280      	movs	r2, #128	@ 0x80
 800e12a:	0212      	lsls	r2, r2, #8
 800e12c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e12e:	4b05      	ldr	r3, [pc, #20]	@ (800e144 <MX_USART1_UART_Init+0x60>)
 800e130:	0018      	movs	r0, r3
 800e132:	f008 ffd5 	bl	80170e0 <HAL_UART_Init>
 800e136:	1e03      	subs	r3, r0, #0
 800e138:	d001      	beq.n	800e13e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e13a:	f7fa f8e7 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e13e:	46c0      	nop			@ (mov r8, r8)
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	2000218c 	.word	0x2000218c
 800e148:	40013800 	.word	0x40013800

0800e14c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e150:	4b14      	ldr	r3, [pc, #80]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e152:	4a15      	ldr	r2, [pc, #84]	@ (800e1a8 <MX_USART4_UART_Init+0x5c>)
 800e154:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e156:	4b13      	ldr	r3, [pc, #76]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e158:	22e1      	movs	r2, #225	@ 0xe1
 800e15a:	0252      	lsls	r2, r2, #9
 800e15c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e15e:	4b11      	ldr	r3, [pc, #68]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e160:	2200      	movs	r2, #0
 800e162:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e164:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e166:	2200      	movs	r2, #0
 800e168:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e16a:	4b0e      	ldr	r3, [pc, #56]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e170:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e172:	220c      	movs	r2, #12
 800e174:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e176:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e178:	2200      	movs	r2, #0
 800e17a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e17c:	4b09      	ldr	r3, [pc, #36]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e17e:	2200      	movs	r2, #0
 800e180:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e182:	4b08      	ldr	r3, [pc, #32]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e184:	2200      	movs	r2, #0
 800e186:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e188:	4b06      	ldr	r3, [pc, #24]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e18e:	4b05      	ldr	r3, [pc, #20]	@ (800e1a4 <MX_USART4_UART_Init+0x58>)
 800e190:	0018      	movs	r0, r3
 800e192:	f008 ffa5 	bl	80170e0 <HAL_UART_Init>
 800e196:	1e03      	subs	r3, r0, #0
 800e198:	d001      	beq.n	800e19e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e19a:	f7fa f8b7 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e19e:	46c0      	nop			@ (mov r8, r8)
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	20002244 	.word	0x20002244
 800e1a8:	40004c00 	.word	0x40004c00

0800e1ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e1ac:	b590      	push	{r4, r7, lr}
 800e1ae:	b08d      	sub	sp, #52	@ 0x34
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1b4:	241c      	movs	r4, #28
 800e1b6:	193b      	adds	r3, r7, r4
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	2314      	movs	r3, #20
 800e1bc:	001a      	movs	r2, r3
 800e1be:	2100      	movs	r1, #0
 800e1c0:	f012 f820 	bl	8020204 <memset>
  if(uartHandle->Instance==LPUART1)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a8b      	ldr	r2, [pc, #556]	@ (800e3f8 <HAL_UART_MspInit+0x24c>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d129      	bne.n	800e222 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e1ce:	4b8b      	ldr	r3, [pc, #556]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e1d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1d2:	4b8a      	ldr	r3, [pc, #552]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e1d4:	2180      	movs	r1, #128	@ 0x80
 800e1d6:	02c9      	lsls	r1, r1, #11
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1dc:	4b87      	ldr	r3, [pc, #540]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1e0:	4b86      	ldr	r3, [pc, #536]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e1e2:	2104      	movs	r1, #4
 800e1e4:	430a      	orrs	r2, r1
 800e1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1e8:	4b84      	ldr	r3, [pc, #528]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ec:	2204      	movs	r2, #4
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	61bb      	str	r3, [r7, #24]
 800e1f2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e1f4:	0021      	movs	r1, r4
 800e1f6:	187b      	adds	r3, r7, r1
 800e1f8:	2203      	movs	r2, #3
 800e1fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1fc:	187b      	adds	r3, r7, r1
 800e1fe:	2202      	movs	r2, #2
 800e200:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e202:	187b      	adds	r3, r7, r1
 800e204:	2200      	movs	r2, #0
 800e206:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e208:	187b      	adds	r3, r7, r1
 800e20a:	2203      	movs	r2, #3
 800e20c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e20e:	187b      	adds	r3, r7, r1
 800e210:	2206      	movs	r2, #6
 800e212:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e214:	187b      	adds	r3, r7, r1
 800e216:	4a7a      	ldr	r2, [pc, #488]	@ (800e400 <HAL_UART_MspInit+0x254>)
 800e218:	0019      	movs	r1, r3
 800e21a:	0010      	movs	r0, r2
 800e21c:	f001 fe90 	bl	800ff40 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e220:	e0e5      	b.n	800e3ee <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a77      	ldr	r2, [pc, #476]	@ (800e404 <HAL_UART_MspInit+0x258>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d133      	bne.n	800e294 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e22c:	4b73      	ldr	r3, [pc, #460]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e22e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e230:	4b72      	ldr	r3, [pc, #456]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e232:	2180      	movs	r1, #128	@ 0x80
 800e234:	01c9      	lsls	r1, r1, #7
 800e236:	430a      	orrs	r2, r1
 800e238:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e23a:	4b70      	ldr	r3, [pc, #448]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e23e:	4b6f      	ldr	r3, [pc, #444]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e240:	2101      	movs	r1, #1
 800e242:	430a      	orrs	r2, r1
 800e244:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e246:	4b6d      	ldr	r3, [pc, #436]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e24a:	2201      	movs	r2, #1
 800e24c:	4013      	ands	r3, r2
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e252:	211c      	movs	r1, #28
 800e254:	187b      	adds	r3, r7, r1
 800e256:	22c0      	movs	r2, #192	@ 0xc0
 800e258:	00d2      	lsls	r2, r2, #3
 800e25a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e25c:	187b      	adds	r3, r7, r1
 800e25e:	2202      	movs	r2, #2
 800e260:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e262:	187b      	adds	r3, r7, r1
 800e264:	2200      	movs	r2, #0
 800e266:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e268:	187b      	adds	r3, r7, r1
 800e26a:	2203      	movs	r2, #3
 800e26c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e26e:	187b      	adds	r3, r7, r1
 800e270:	2204      	movs	r2, #4
 800e272:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e274:	187a      	adds	r2, r7, r1
 800e276:	23a0      	movs	r3, #160	@ 0xa0
 800e278:	05db      	lsls	r3, r3, #23
 800e27a:	0011      	movs	r1, r2
 800e27c:	0018      	movs	r0, r3
 800e27e:	f001 fe5f 	bl	800ff40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e282:	2200      	movs	r2, #0
 800e284:	2100      	movs	r1, #0
 800e286:	201b      	movs	r0, #27
 800e288:	f001 fa08 	bl	800f69c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e28c:	201b      	movs	r0, #27
 800e28e:	f001 fa1a 	bl	800f6c6 <HAL_NVIC_EnableIRQ>
}
 800e292:	e0ac      	b.n	800e3ee <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a5b      	ldr	r2, [pc, #364]	@ (800e408 <HAL_UART_MspInit+0x25c>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d000      	beq.n	800e2a0 <HAL_UART_MspInit+0xf4>
 800e29e:	e0a6      	b.n	800e3ee <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e2a0:	4b56      	ldr	r3, [pc, #344]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2a4:	4b55      	ldr	r3, [pc, #340]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2a6:	2180      	movs	r1, #128	@ 0x80
 800e2a8:	0309      	lsls	r1, r1, #12
 800e2aa:	430a      	orrs	r2, r1
 800e2ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2ae:	4b53      	ldr	r3, [pc, #332]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2b2:	4b52      	ldr	r3, [pc, #328]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	430a      	orrs	r2, r1
 800e2b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e2ba:	4b50      	ldr	r3, [pc, #320]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	613b      	str	r3, [r7, #16]
 800e2c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e2c6:	4b4d      	ldr	r3, [pc, #308]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ca:	4b4c      	ldr	r3, [pc, #304]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2cc:	2104      	movs	r1, #4
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e2d2:	4b4a      	ldr	r3, [pc, #296]	@ (800e3fc <HAL_UART_MspInit+0x250>)
 800e2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d6:	2204      	movs	r2, #4
 800e2d8:	4013      	ands	r3, r2
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e2de:	241c      	movs	r4, #28
 800e2e0:	193b      	adds	r3, r7, r4
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2e6:	193b      	adds	r3, r7, r4
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ec:	193b      	adds	r3, r7, r4
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2f2:	193b      	adds	r3, r7, r4
 800e2f4:	2203      	movs	r2, #3
 800e2f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e2f8:	193b      	adds	r3, r7, r4
 800e2fa:	2206      	movs	r2, #6
 800e2fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2fe:	193a      	adds	r2, r7, r4
 800e300:	23a0      	movs	r3, #160	@ 0xa0
 800e302:	05db      	lsls	r3, r3, #23
 800e304:	0011      	movs	r1, r2
 800e306:	0018      	movs	r0, r3
 800e308:	f001 fe1a 	bl	800ff40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e30c:	0021      	movs	r1, r4
 800e30e:	187b      	adds	r3, r7, r1
 800e310:	2280      	movs	r2, #128	@ 0x80
 800e312:	00d2      	lsls	r2, r2, #3
 800e314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e316:	187b      	adds	r3, r7, r1
 800e318:	2202      	movs	r2, #2
 800e31a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e31c:	187b      	adds	r3, r7, r1
 800e31e:	2200      	movs	r2, #0
 800e320:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e322:	187b      	adds	r3, r7, r1
 800e324:	2203      	movs	r2, #3
 800e326:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e328:	187b      	adds	r3, r7, r1
 800e32a:	2206      	movs	r2, #6
 800e32c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e32e:	187b      	adds	r3, r7, r1
 800e330:	4a33      	ldr	r2, [pc, #204]	@ (800e400 <HAL_UART_MspInit+0x254>)
 800e332:	0019      	movs	r1, r3
 800e334:	0010      	movs	r0, r2
 800e336:	f001 fe03 	bl	800ff40 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e33a:	4b34      	ldr	r3, [pc, #208]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e33c:	4a34      	ldr	r2, [pc, #208]	@ (800e410 <HAL_UART_MspInit+0x264>)
 800e33e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e340:	4b32      	ldr	r3, [pc, #200]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e342:	220c      	movs	r2, #12
 800e344:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e346:	4b31      	ldr	r3, [pc, #196]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e348:	2200      	movs	r2, #0
 800e34a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e34c:	4b2f      	ldr	r3, [pc, #188]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e34e:	2200      	movs	r2, #0
 800e350:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e352:	4b2e      	ldr	r3, [pc, #184]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e354:	2280      	movs	r2, #128	@ 0x80
 800e356:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e358:	4b2c      	ldr	r3, [pc, #176]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e35e:	4b2b      	ldr	r3, [pc, #172]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e360:	2200      	movs	r2, #0
 800e362:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e364:	4b29      	ldr	r3, [pc, #164]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e366:	2220      	movs	r2, #32
 800e368:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e36a:	4b28      	ldr	r3, [pc, #160]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e370:	4b26      	ldr	r3, [pc, #152]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e372:	0018      	movs	r0, r3
 800e374:	f001 f9c8 	bl	800f708 <HAL_DMA_Init>
 800e378:	1e03      	subs	r3, r0, #0
 800e37a:	d001      	beq.n	800e380 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e37c:	f7f9 ffc6 	bl	800830c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a22      	ldr	r2, [pc, #136]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e384:	675a      	str	r2, [r3, #116]	@ 0x74
 800e386:	4b21      	ldr	r3, [pc, #132]	@ (800e40c <HAL_UART_MspInit+0x260>)
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e38c:	4b21      	ldr	r3, [pc, #132]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e38e:	4a22      	ldr	r2, [pc, #136]	@ (800e418 <HAL_UART_MspInit+0x26c>)
 800e390:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e392:	4b20      	ldr	r3, [pc, #128]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e394:	220c      	movs	r2, #12
 800e396:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e398:	4b1e      	ldr	r3, [pc, #120]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e39a:	2210      	movs	r2, #16
 800e39c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e39e:	4b1d      	ldr	r3, [pc, #116]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e3a4:	4b1b      	ldr	r3, [pc, #108]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3a6:	2280      	movs	r2, #128	@ 0x80
 800e3a8:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e3aa:	4b1a      	ldr	r3, [pc, #104]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e3b0:	4b18      	ldr	r3, [pc, #96]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e3b6:	4b17      	ldr	r3, [pc, #92]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e3bc:	4b15      	ldr	r3, [pc, #84]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e3c2:	4b14      	ldr	r3, [pc, #80]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3c4:	0018      	movs	r0, r3
 800e3c6:	f001 f99f 	bl	800f708 <HAL_DMA_Init>
 800e3ca:	1e03      	subs	r3, r0, #0
 800e3cc:	d001      	beq.n	800e3d2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e3ce:	f7f9 ff9d 	bl	800830c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a0f      	ldr	r2, [pc, #60]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3d6:	671a      	str	r2, [r3, #112]	@ 0x70
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e414 <HAL_UART_MspInit+0x268>)
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	200e      	movs	r0, #14
 800e3e4:	f001 f95a 	bl	800f69c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e3e8:	200e      	movs	r0, #14
 800e3ea:	f001 f96c 	bl	800f6c6 <HAL_NVIC_EnableIRQ>
}
 800e3ee:	46c0      	nop			@ (mov r8, r8)
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	b00d      	add	sp, #52	@ 0x34
 800e3f4:	bd90      	pop	{r4, r7, pc}
 800e3f6:	46c0      	nop			@ (mov r8, r8)
 800e3f8:	40004800 	.word	0x40004800
 800e3fc:	40021000 	.word	0x40021000
 800e400:	50000800 	.word	0x50000800
 800e404:	40013800 	.word	0x40013800
 800e408:	40004c00 	.word	0x40004c00
 800e40c:	200022fc 	.word	0x200022fc
 800e410:	4002006c 	.word	0x4002006c
 800e414:	20002344 	.word	0x20002344
 800e418:	40020080 	.word	0x40020080

0800e41c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e424:	f000 fc96 	bl	800ed54 <HAL_GetTick>
 800e428:	0003      	movs	r3, r0
 800e42a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e42c:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a0 <TimestampIsReached+0x84>)
 800e42e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e430:	697a      	ldr	r2, [r7, #20]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d307      	bcc.n	800e448 <TimestampIsReached+0x2c>
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	429a      	cmp	r2, r3
 800e442:	d901      	bls.n	800e448 <TimestampIsReached+0x2c>
 800e444:	2201      	movs	r2, #1
 800e446:	e000      	b.n	800e44a <TimestampIsReached+0x2e>
 800e448:	2200      	movs	r2, #0
 800e44a:	230f      	movs	r3, #15
 800e44c:	18fb      	adds	r3, r7, r3
 800e44e:	701a      	strb	r2, [r3, #0]
 800e450:	781a      	ldrb	r2, [r3, #0]
 800e452:	2101      	movs	r1, #1
 800e454:	400a      	ands	r2, r1
 800e456:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d207      	bcs.n	800e470 <TimestampIsReached+0x54>
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d201      	bcs.n	800e470 <TimestampIsReached+0x54>
 800e46c:	2201      	movs	r2, #1
 800e46e:	e000      	b.n	800e472 <TimestampIsReached+0x56>
 800e470:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e472:	200e      	movs	r0, #14
 800e474:	183b      	adds	r3, r7, r0
 800e476:	701a      	strb	r2, [r3, #0]
 800e478:	781a      	ldrb	r2, [r3, #0]
 800e47a:	2101      	movs	r1, #1
 800e47c:	400a      	ands	r2, r1
 800e47e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e480:	230f      	movs	r3, #15
 800e482:	18fb      	adds	r3, r7, r3
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d103      	bne.n	800e492 <TimestampIsReached+0x76>
 800e48a:	183b      	adds	r3, r7, r0
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e492:	2301      	movs	r3, #1
 800e494:	e000      	b.n	800e498 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e496:	2300      	movs	r3, #0
}
 800e498:	0018      	movs	r0, r3
 800e49a:	46bd      	mov	sp, r7
 800e49c:	b006      	add	sp, #24
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	7fffffff 	.word	0x7fffffff

0800e4a4 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e4ac:	f000 fc52 	bl	800ed54 <HAL_GetTick>
 800e4b0:	0002      	movs	r2, r0
 800e4b2:	4904      	ldr	r1, [pc, #16]	@ (800e4c4 <AddTimestamp+0x20>)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	f011 fd60 	bl	801ff7c <siprintf>
}
 800e4bc:	46c0      	nop			@ (mov r8, r8)
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	b002      	add	sp, #8
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	08024f94 	.word	0x08024f94

0800e4c8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e4c8:	b40c      	push	{r2, r3}
 800e4ca:	b5b0      	push	{r4, r5, r7, lr}
 800e4cc:	b0a4      	sub	sp, #144	@ 0x90
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	0002      	movs	r2, r0
 800e4d2:	6039      	str	r1, [r7, #0]
 800e4d4:	1dfb      	adds	r3, r7, #7
 800e4d6:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e4d8:	4b23      	ldr	r3, [pc, #140]	@ (800e568 <CreateLine+0xa0>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	1dfa      	adds	r2, r7, #7
 800e4de:	7812      	ldrb	r2, [r2, #0]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d839      	bhi.n	800e558 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	4921      	ldr	r1, [pc, #132]	@ (800e56c <CreateLine+0xa4>)
 800e4e8:	240c      	movs	r4, #12
 800e4ea:	193b      	adds	r3, r7, r4
 800e4ec:	0018      	movs	r0, r3
 800e4ee:	f011 fd45 	bl	801ff7c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e4f2:	4b1d      	ldr	r3, [pc, #116]	@ (800e568 <CreateLine+0xa0>)
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d909      	bls.n	800e50e <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e4fa:	193b      	adds	r3, r7, r4
 800e4fc:	0018      	movs	r0, r3
 800e4fe:	f7f1 fe35 	bl	800016c <strlen>
 800e502:	0002      	movs	r2, r0
 800e504:	193b      	adds	r3, r7, r4
 800e506:	189b      	adds	r3, r3, r2
 800e508:	0018      	movs	r0, r3
 800e50a:	f7ff ffcb 	bl	800e4a4 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e50e:	240c      	movs	r4, #12
 800e510:	193b      	adds	r3, r7, r4
 800e512:	0018      	movs	r0, r3
 800e514:	f7f1 fe2a 	bl	800016c <strlen>
 800e518:	0003      	movs	r3, r0
 800e51a:	218c      	movs	r1, #140	@ 0x8c
 800e51c:	187a      	adds	r2, r7, r1
 800e51e:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e520:	239c      	movs	r3, #156	@ 0x9c
 800e522:	2508      	movs	r5, #8
 800e524:	195b      	adds	r3, r3, r5
 800e526:	19db      	adds	r3, r3, r7
 800e528:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e52a:	193a      	adds	r2, r7, r4
 800e52c:	187b      	adds	r3, r7, r1
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	18d0      	adds	r0, r2, r3
 800e532:	187b      	adds	r3, r7, r1
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2280      	movs	r2, #128	@ 0x80
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	0019      	movs	r1, r3
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2298      	movs	r2, #152	@ 0x98
 800e540:	1952      	adds	r2, r2, r5
 800e542:	19d2      	adds	r2, r2, r7
 800e544:	6812      	ldr	r2, [r2, #0]
 800e546:	f011 fdb1 	bl	80200ac <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e54a:	193a      	adds	r2, r7, r4
 800e54c:	4b08      	ldr	r3, [pc, #32]	@ (800e570 <CreateLine+0xa8>)
 800e54e:	0011      	movs	r1, r2
 800e550:	0018      	movs	r0, r3
 800e552:	f011 fca3 	bl	801fe9c <iprintf>
 800e556:	e000      	b.n	800e55a <CreateLine+0x92>
    return;
 800e558:	46c0      	nop			@ (mov r8, r8)
}
 800e55a:	46bd      	mov	sp, r7
 800e55c:	b024      	add	sp, #144	@ 0x90
 800e55e:	bcb0      	pop	{r4, r5, r7}
 800e560:	bc08      	pop	{r3}
 800e562:	b002      	add	sp, #8
 800e564:	4718      	bx	r3
 800e566:	46c0      	nop			@ (mov r8, r8)
 800e568:	200000d8 	.word	0x200000d8
 800e56c:	08024fa0 	.word	0x08024fa0
 800e570:	08024fa4 	.word	0x08024fa4

0800e574 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	b29a      	uxth	r2, r3
 800e584:	68b9      	ldr	r1, [r7, #8]
 800e586:	4804      	ldr	r0, [pc, #16]	@ (800e598 <_write+0x24>)
 800e588:	2364      	movs	r3, #100	@ 0x64
 800e58a:	f008 fe0f 	bl	80171ac <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e58e:	687b      	ldr	r3, [r7, #4]
}
 800e590:	0018      	movs	r0, r3
 800e592:	46bd      	mov	sp, r7
 800e594:	b004      	add	sp, #16
 800e596:	bd80      	pop	{r7, pc}
 800e598:	2000218c 	.word	0x2000218c

0800e59c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	0002      	movs	r2, r0
 800e5a4:	1dfb      	adds	r3, r7, #7
 800e5a6:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e5a8:	4b03      	ldr	r3, [pc, #12]	@ (800e5b8 <SetVerboseLevel+0x1c>)
 800e5aa:	1dfa      	adds	r2, r7, #7
 800e5ac:	7812      	ldrb	r2, [r2, #0]
 800e5ae:	701a      	strb	r2, [r3, #0]
}
 800e5b0:	46c0      	nop			@ (mov r8, r8)
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	b002      	add	sp, #8
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	200000d8 	.word	0x200000d8

0800e5bc <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e5c0:	4b02      	ldr	r3, [pc, #8]	@ (800e5cc <GetVerboseLevel+0x10>)
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	0018      	movs	r0, r3
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	200000d8 	.word	0x200000d8

0800e5d0 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800e614 <BinaryReleaseInfo+0x44>)
 800e5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e618 <BinaryReleaseInfo+0x48>)
 800e5da:	0019      	movs	r1, r3
 800e5dc:	2002      	movs	r0, #2
 800e5de:	f7ff ff73 	bl	800e4c8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e5e2:	480e      	ldr	r0, [pc, #56]	@ (800e61c <BinaryReleaseInfo+0x4c>)
 800e5e4:	4a0e      	ldr	r2, [pc, #56]	@ (800e620 <BinaryReleaseInfo+0x50>)
 800e5e6:	490c      	ldr	r1, [pc, #48]	@ (800e618 <BinaryReleaseInfo+0x48>)
 800e5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e624 <BinaryReleaseInfo+0x54>)
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	0003      	movs	r3, r0
 800e5ee:	2002      	movs	r0, #2
 800e5f0:	f7ff ff6a 	bl	800e4c8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e628 <BinaryReleaseInfo+0x58>)
 800e5f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e62c <BinaryReleaseInfo+0x5c>)
 800e5f8:	4907      	ldr	r1, [pc, #28]	@ (800e618 <BinaryReleaseInfo+0x48>)
 800e5fa:	2002      	movs	r0, #2
 800e5fc:	f7ff ff64 	bl	800e4c8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e600:	4b0b      	ldr	r3, [pc, #44]	@ (800e630 <BinaryReleaseInfo+0x60>)
 800e602:	4a0c      	ldr	r2, [pc, #48]	@ (800e634 <BinaryReleaseInfo+0x64>)
 800e604:	4904      	ldr	r1, [pc, #16]	@ (800e618 <BinaryReleaseInfo+0x48>)
 800e606:	2002      	movs	r0, #2
 800e608:	f7ff ff5e 	bl	800e4c8 <CreateLine>
}
 800e60c:	46c0      	nop			@ (mov r8, r8)
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	46c0      	nop			@ (mov r8, r8)
 800e614:	08024fac 	.word	0x08024fac
 800e618:	08024fd8 	.word	0x08024fd8
 800e61c:	08024fdc 	.word	0x08024fdc
 800e620:	08024fe8 	.word	0x08024fe8
 800e624:	08024ffc 	.word	0x08024ffc
 800e628:	08025008 	.word	0x08025008
 800e62c:	08025014 	.word	0x08025014
 800e630:	0802501c 	.word	0x0802501c
 800e634:	08025024 	.word	0x08025024

0800e638 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	68f9      	ldr	r1, [r7, #12]
 800e64a:	4803      	ldr	r0, [pc, #12]	@ (800e658 <errorHandler+0x20>)
 800e64c:	f011 fc26 	bl	801fe9c <iprintf>
//    while (true)
//    {
//    }
}
 800e650:	46c0      	nop			@ (mov r8, r8)
 800e652:	46bd      	mov	sp, r7
 800e654:	b004      	add	sp, #16
 800e656:	bd80      	pop	{r7, pc}
 800e658:	0802503c 	.word	0x0802503c

0800e65c <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e65c:	b590      	push	{r4, r7, lr}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6039      	str	r1, [r7, #0]
 800e664:	0011      	movs	r1, r2
 800e666:	1dfb      	adds	r3, r7, #7
 800e668:	1c02      	adds	r2, r0, #0
 800e66a:	701a      	strb	r2, [r3, #0]
 800e66c:	1dbb      	adds	r3, r7, #6
 800e66e:	1c0a      	adds	r2, r1, #0
 800e670:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e672:	4b0a      	ldr	r3, [pc, #40]	@ (800e69c <ReadRegister+0x40>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00a      	beq.n	800e690 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e67a:	4b08      	ldr	r3, [pc, #32]	@ (800e69c <ReadRegister+0x40>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	1dba      	adds	r2, r7, #6
 800e680:	7814      	ldrb	r4, [r2, #0]
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	1dfa      	adds	r2, r7, #7
 800e686:	7810      	ldrb	r0, [r2, #0]
 800e688:	0022      	movs	r2, r4
 800e68a:	4798      	blx	r3
 800e68c:	0003      	movs	r3, r0
 800e68e:	e000      	b.n	800e692 <ReadRegister+0x36>
	}
	return false;
 800e690:	2300      	movs	r3, #0
}
 800e692:	0018      	movs	r0, r3
 800e694:	46bd      	mov	sp, r7
 800e696:	b003      	add	sp, #12
 800e698:	bd90      	pop	{r4, r7, pc}
 800e69a:	46c0      	nop			@ (mov r8, r8)
 800e69c:	20002394 	.word	0x20002394

0800e6a0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e6a0:	b590      	push	{r4, r7, lr}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6039      	str	r1, [r7, #0]
 800e6a8:	0011      	movs	r1, r2
 800e6aa:	1dfb      	adds	r3, r7, #7
 800e6ac:	1c02      	adds	r2, r0, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	1dbb      	adds	r3, r7, #6
 800e6b2:	1c0a      	adds	r2, r1, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e0 <WriteRegister+0x40>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e6be:	4b08      	ldr	r3, [pc, #32]	@ (800e6e0 <WriteRegister+0x40>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	1dba      	adds	r2, r7, #6
 800e6c4:	7814      	ldrb	r4, [r2, #0]
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	1dfa      	adds	r2, r7, #7
 800e6ca:	7810      	ldrb	r0, [r2, #0]
 800e6cc:	0022      	movs	r2, r4
 800e6ce:	4798      	blx	r3
 800e6d0:	0003      	movs	r3, r0
 800e6d2:	e000      	b.n	800e6d6 <WriteRegister+0x36>
  }
  return false;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	0018      	movs	r0, r3
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	b003      	add	sp, #12
 800e6dc:	bd90      	pop	{r4, r7, pc}
 800e6de:	46c0      	nop			@ (mov r8, r8)
 800e6e0:	20002398 	.word	0x20002398

0800e6e4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	000a      	movs	r2, r1
 800e6ee:	1cfb      	adds	r3, r7, #3
 800e6f0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e6f2:	230f      	movs	r3, #15
 800e6f4:	18fb      	adds	r3, r7, r3
 800e6f6:	22ff      	movs	r2, #255	@ 0xff
 800e6f8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e6fa:	230e      	movs	r3, #14
 800e6fc:	18fb      	adds	r3, r7, r3
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
 800e702:	e037      	b.n	800e774 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e704:	230e      	movs	r3, #14
 800e706:	18fb      	adds	r3, r7, r3
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	18d3      	adds	r3, r2, r3
 800e70e:	7819      	ldrb	r1, [r3, #0]
 800e710:	220f      	movs	r2, #15
 800e712:	18bb      	adds	r3, r7, r2
 800e714:	18ba      	adds	r2, r7, r2
 800e716:	7812      	ldrb	r2, [r2, #0]
 800e718:	404a      	eors	r2, r1
 800e71a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e71c:	230d      	movs	r3, #13
 800e71e:	18fb      	adds	r3, r7, r3
 800e720:	2200      	movs	r2, #0
 800e722:	701a      	strb	r2, [r3, #0]
 800e724:	e01b      	b.n	800e75e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e726:	210f      	movs	r1, #15
 800e728:	187b      	adds	r3, r7, r1
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	b25b      	sxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	da09      	bge.n	800e746 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e732:	187b      	adds	r3, r7, r1
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	005b      	lsls	r3, r3, #1
 800e738:	b25b      	sxtb	r3, r3
 800e73a:	2231      	movs	r2, #49	@ 0x31
 800e73c:	4053      	eors	r3, r2
 800e73e:	b25a      	sxtb	r2, r3
 800e740:	187b      	adds	r3, r7, r1
 800e742:	701a      	strb	r2, [r3, #0]
 800e744:	e005      	b.n	800e752 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e746:	230f      	movs	r3, #15
 800e748:	18fa      	adds	r2, r7, r3
 800e74a:	18fb      	adds	r3, r7, r3
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	18db      	adds	r3, r3, r3
 800e750:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e752:	210d      	movs	r1, #13
 800e754:	187b      	adds	r3, r7, r1
 800e756:	781a      	ldrb	r2, [r3, #0]
 800e758:	187b      	adds	r3, r7, r1
 800e75a:	3201      	adds	r2, #1
 800e75c:	701a      	strb	r2, [r3, #0]
 800e75e:	230d      	movs	r3, #13
 800e760:	18fb      	adds	r3, r7, r3
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b07      	cmp	r3, #7
 800e766:	d9de      	bls.n	800e726 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e768:	210e      	movs	r1, #14
 800e76a:	187b      	adds	r3, r7, r1
 800e76c:	781a      	ldrb	r2, [r3, #0]
 800e76e:	187b      	adds	r3, r7, r1
 800e770:	3201      	adds	r2, #1
 800e772:	701a      	strb	r2, [r3, #0]
 800e774:	230e      	movs	r3, #14
 800e776:	18fa      	adds	r2, r7, r3
 800e778:	1cfb      	adds	r3, r7, #3
 800e77a:	7812      	ldrb	r2, [r2, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d3c0      	bcc.n	800e704 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e782:	230f      	movs	r3, #15
 800e784:	18fb      	adds	r3, r7, r3
 800e786:	781b      	ldrb	r3, [r3, #0]
}
 800e788:	0018      	movs	r0, r3
 800e78a:	46bd      	mov	sp, r7
 800e78c:	b004      	add	sp, #16
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e79a:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c4 <HIDS_Init+0x34>)
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e7a0:	4b09      	ldr	r3, [pc, #36]	@ (800e7c8 <HIDS_Init+0x38>)
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e7a6:	4b09      	ldr	r3, [pc, #36]	@ (800e7cc <HIDS_Init+0x3c>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	0018      	movs	r0, r3
 800e7ac:	f000 f840 	bl	800e830 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e7b0:	4b07      	ldr	r3, [pc, #28]	@ (800e7d0 <HIDS_Init+0x40>)
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	0018      	movs	r0, r3
 800e7b6:	f000 f82b 	bl	800e810 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e7ba:	46c0      	nop			@ (mov r8, r8)
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	b002      	add	sp, #8
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	46c0      	nop			@ (mov r8, r8)
 800e7c4:	20002394 	.word	0x20002394
 800e7c8:	20002398 	.word	0x20002398
 800e7cc:	200000da 	.word	0x200000da
 800e7d0:	200000d9 	.word	0x200000d9

0800e7d4 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e7d8:	f000 fabc 	bl	800ed54 <HAL_GetTick>
 800e7dc:	0002      	movs	r2, r0
 800e7de:	4b08      	ldr	r3, [pc, #32]	@ (800e800 <HIDS_StartMeasurement+0x2c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	18d2      	adds	r2, r2, r3
 800e7e4:	4b07      	ldr	r3, [pc, #28]	@ (800e804 <HIDS_StartMeasurement+0x30>)
 800e7e6:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e7e8:	4b07      	ldr	r3, [pc, #28]	@ (800e808 <HIDS_StartMeasurement+0x34>)
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	0019      	movs	r1, r3
 800e7ee:	2044      	movs	r0, #68	@ 0x44
 800e7f0:	f7ff ff56 	bl	800e6a0 <WriteRegister>
  MeasurementDone = false;
 800e7f4:	4b05      	ldr	r3, [pc, #20]	@ (800e80c <HIDS_StartMeasurement+0x38>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	701a      	strb	r2, [r3, #0]
}
 800e7fa:	46c0      	nop			@ (mov r8, r8)
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	200000e0 	.word	0x200000e0
 800e804:	200000dc 	.word	0x200000dc
 800e808:	200000da 	.word	0x200000da
 800e80c:	200023aa 	.word	0x200023aa

0800e810 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	0002      	movs	r2, r0
 800e818:	1dfb      	adds	r3, r7, #7
 800e81a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e81c:	4b03      	ldr	r3, [pc, #12]	@ (800e82c <HIDS_SetHeaterMode+0x1c>)
 800e81e:	1dfa      	adds	r2, r7, #7
 800e820:	7812      	ldrb	r2, [r2, #0]
 800e822:	701a      	strb	r2, [r3, #0]
}
 800e824:	46c0      	nop			@ (mov r8, r8)
 800e826:	46bd      	mov	sp, r7
 800e828:	b002      	add	sp, #8
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	200000d9 	.word	0x200000d9

0800e830 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	0002      	movs	r2, r0
 800e838:	1dfb      	adds	r3, r7, #7
 800e83a:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e83c:	4b03      	ldr	r3, [pc, #12]	@ (800e84c <HIDS_SetMeasurementMode+0x1c>)
 800e83e:	1dfa      	adds	r2, r7, #7
 800e840:	7812      	ldrb	r2, [r2, #0]
 800e842:	701a      	strb	r2, [r3, #0]
}
 800e844:	46c0      	nop			@ (mov r8, r8)
 800e846:	46bd      	mov	sp, r7
 800e848:	b002      	add	sp, #8
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	200000da 	.word	0x200000da

0800e850 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e858:	f000 fa7c 	bl	800ed54 <HAL_GetTick>
 800e85c:	0002      	movs	r2, r0
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	18d2      	adds	r2, r2, r3
 800e862:	4b03      	ldr	r3, [pc, #12]	@ (800e870 <setHIDSTimeStamp+0x20>)
 800e864:	601a      	str	r2, [r3, #0]
}
 800e866:	46c0      	nop			@ (mov r8, r8)
 800e868:	46bd      	mov	sp, r7
 800e86a:	b002      	add	sp, #8
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	46c0      	nop			@ (mov r8, r8)
 800e870:	200023ac 	.word	0x200023ac

0800e874 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	210c      	movs	r1, #12
 800e882:	187b      	adds	r3, r7, r1
 800e884:	701a      	strb	r2, [r3, #0]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	785a      	ldrb	r2, [r3, #1]
 800e88a:	187b      	adds	r3, r7, r1
 800e88c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e88e:	240f      	movs	r4, #15
 800e890:	193b      	adds	r3, r7, r4
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	7892      	ldrb	r2, [r2, #2]
 800e896:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e898:	187b      	adds	r3, r7, r1
 800e89a:	2102      	movs	r1, #2
 800e89c:	0018      	movs	r0, r3
 800e89e:	f7ff ff21 	bl	800e6e4 <CalculateCRC>
 800e8a2:	0003      	movs	r3, r0
 800e8a4:	001a      	movs	r2, r3
 800e8a6:	193b      	adds	r3, r7, r4
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d007      	beq.n	800e8be <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e8ae:	4a1a      	ldr	r2, [pc, #104]	@ (800e918 <CheckCRC+0xa4>)
 800e8b0:	4b1a      	ldr	r3, [pc, #104]	@ (800e91c <CheckCRC+0xa8>)
 800e8b2:	0019      	movs	r1, r3
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	f7ff fe07 	bl	800e4c8 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e027      	b.n	800e90e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	78da      	ldrb	r2, [r3, #3]
 800e8c2:	2108      	movs	r1, #8
 800e8c4:	187b      	adds	r3, r7, r1
 800e8c6:	701a      	strb	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	791a      	ldrb	r2, [r3, #4]
 800e8cc:	187b      	adds	r3, r7, r1
 800e8ce:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e8d0:	240e      	movs	r4, #14
 800e8d2:	193b      	adds	r3, r7, r4
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	7952      	ldrb	r2, [r2, #5]
 800e8d8:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e8da:	187b      	adds	r3, r7, r1
 800e8dc:	2102      	movs	r1, #2
 800e8de:	0018      	movs	r0, r3
 800e8e0:	f7ff ff00 	bl	800e6e4 <CalculateCRC>
 800e8e4:	0003      	movs	r3, r0
 800e8e6:	001a      	movs	r2, r3
 800e8e8:	193b      	adds	r3, r7, r4
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d00d      	beq.n	800e90c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e8f0:	4a0b      	ldr	r2, [pc, #44]	@ (800e920 <CheckCRC+0xac>)
 800e8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e91c <CheckCRC+0xa8>)
 800e8f4:	0019      	movs	r1, r3
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	f7ff fde6 	bl	800e4c8 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e8fc:	4a09      	ldr	r2, [pc, #36]	@ (800e924 <CheckCRC+0xb0>)
 800e8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e928 <CheckCRC+0xb4>)
 800e900:	217c      	movs	r1, #124	@ 0x7c
 800e902:	0018      	movs	r0, r3
 800e904:	f7ff fe98 	bl	800e638 <errorHandler>
		return false;
 800e908:	2300      	movs	r3, #0
 800e90a:	e000      	b.n	800e90e <CheckCRC+0x9a>
	}
	return true;
 800e90c:	2301      	movs	r3, #1
}
 800e90e:	0018      	movs	r0, r3
 800e910:	46bd      	mov	sp, r7
 800e912:	b005      	add	sp, #20
 800e914:	bd90      	pop	{r4, r7, pc}
 800e916:	46c0      	nop			@ (mov r8, r8)
 800e918:	08025088 	.word	0x08025088
 800e91c:	080250b0 	.word	0x080250b0
 800e920:	080250b4 	.word	0x080250b4
 800e924:	080250e0 	.word	0x080250e0
 800e928:	08025678 	.word	0x08025678

0800e92c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e932:	1dbb      	adds	r3, r7, #6
 800e934:	2289      	movs	r2, #137	@ 0x89
 800e936:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e938:	1dbb      	adds	r3, r7, #6
 800e93a:	2201      	movs	r2, #1
 800e93c:	0019      	movs	r1, r3
 800e93e:	2044      	movs	r0, #68	@ 0x44
 800e940:	f7ff feae 	bl	800e6a0 <WriteRegister>
	HAL_Delay(30);
 800e944:	201e      	movs	r0, #30
 800e946:	f000 fa0f 	bl	800ed68 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e94a:	4b14      	ldr	r3, [pc, #80]	@ (800e99c <HIDS_DeviceConnected+0x70>)
 800e94c:	2206      	movs	r2, #6
 800e94e:	0019      	movs	r1, r3
 800e950:	2044      	movs	r0, #68	@ 0x44
 800e952:	f7ff fe83 	bl	800e65c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e956:	1dfb      	adds	r3, r7, #7
 800e958:	2200      	movs	r2, #0
 800e95a:	701a      	strb	r2, [r3, #0]
 800e95c:	e011      	b.n	800e982 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e95e:	1dfb      	adds	r3, r7, #7
 800e960:	7818      	ldrb	r0, [r3, #0]
 800e962:	1dfb      	adds	r3, r7, #7
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	4a0d      	ldr	r2, [pc, #52]	@ (800e99c <HIDS_DeviceConnected+0x70>)
 800e968:	5cd3      	ldrb	r3, [r2, r3]
 800e96a:	4a0d      	ldr	r2, [pc, #52]	@ (800e9a0 <HIDS_DeviceConnected+0x74>)
 800e96c:	490d      	ldr	r1, [pc, #52]	@ (800e9a4 <HIDS_DeviceConnected+0x78>)
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	0003      	movs	r3, r0
 800e972:	2002      	movs	r0, #2
 800e974:	f7ff fda8 	bl	800e4c8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e978:	1dfb      	adds	r3, r7, #7
 800e97a:	781a      	ldrb	r2, [r3, #0]
 800e97c:	1dfb      	adds	r3, r7, #7
 800e97e:	3201      	adds	r2, #1
 800e980:	701a      	strb	r2, [r3, #0]
 800e982:	1dfb      	adds	r3, r7, #7
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	2b05      	cmp	r3, #5
 800e988:	d9e9      	bls.n	800e95e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e98a:	4b04      	ldr	r3, [pc, #16]	@ (800e99c <HIDS_DeviceConnected+0x70>)
 800e98c:	0018      	movs	r0, r3
 800e98e:	f7ff ff71 	bl	800e874 <CheckCRC>
 800e992:	0003      	movs	r3, r0
}
 800e994:	0018      	movs	r0, r3
 800e996:	46bd      	mov	sp, r7
 800e998:	b002      	add	sp, #8
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	2000239c 	.word	0x2000239c
 800e9a0:	080250f8 	.word	0x080250f8
 800e9a4:	08025084 	.word	0x08025084

0800e9a8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e9ac:	4b04      	ldr	r3, [pc, #16]	@ (800e9c0 <HIDS_MeasurementReady+0x18>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	0018      	movs	r0, r3
 800e9b2:	f7ff fd33 	bl	800e41c <TimestampIsReached>
 800e9b6:	0003      	movs	r3, r0
}
 800e9b8:	0018      	movs	r0, r3
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	46c0      	nop			@ (mov r8, r8)
 800e9c0:	200000dc 	.word	0x200000dc

0800e9c4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800e9ce:	4b44      	ldr	r3, [pc, #272]	@ (800eae0 <HIDS_GetMeasurementValues+0x11c>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <HIDS_GetMeasurementValues+0x16>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e07d      	b.n	800ead6 <HIDS_GetMeasurementValues+0x112>
  if(!HIDS_MeasurementReady()) return false;
 800e9da:	f7ff ffe5 	bl	800e9a8 <HIDS_MeasurementReady>
 800e9de:	0003      	movs	r3, r0
 800e9e0:	001a      	movs	r2, r3
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	4053      	eors	r3, r2
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <HIDS_GetMeasurementValues+0x2c>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	e072      	b.n	800ead6 <HIDS_GetMeasurementValues+0x112>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e9f0:	4b3c      	ldr	r3, [pc, #240]	@ (800eae4 <HIDS_GetMeasurementValues+0x120>)
 800e9f2:	2206      	movs	r2, #6
 800e9f4:	0019      	movs	r1, r3
 800e9f6:	2044      	movs	r0, #68	@ 0x44
 800e9f8:	f7ff fe30 	bl	800e65c <ReadRegister>
 800e9fc:	0003      	movs	r3, r0
 800e9fe:	001a      	movs	r2, r3
 800ea00:	2301      	movs	r3, #1
 800ea02:	4053      	eors	r3, r2
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d005      	beq.n	800ea16 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800ea0a:	4a37      	ldr	r2, [pc, #220]	@ (800eae8 <HIDS_GetMeasurementValues+0x124>)
 800ea0c:	4b37      	ldr	r3, [pc, #220]	@ (800eaec <HIDS_GetMeasurementValues+0x128>)
 800ea0e:	0019      	movs	r1, r3
 800ea10:	2001      	movs	r0, #1
 800ea12:	f7ff fd59 	bl	800e4c8 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800ea16:	4b33      	ldr	r3, [pc, #204]	@ (800eae4 <HIDS_GetMeasurementValues+0x120>)
 800ea18:	0018      	movs	r0, r3
 800ea1a:	f7ff ff2b 	bl	800e874 <CheckCRC>
 800ea1e:	0003      	movs	r3, r0
 800ea20:	001a      	movs	r2, r3
 800ea22:	2301      	movs	r3, #1
 800ea24:	4053      	eors	r3, r2
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	e052      	b.n	800ead6 <HIDS_GetMeasurementValues+0x112>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ea30:	4b2c      	ldr	r3, [pc, #176]	@ (800eae4 <HIDS_GetMeasurementValues+0x120>)
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	021b      	lsls	r3, r3, #8
 800ea36:	4a2b      	ldr	r2, [pc, #172]	@ (800eae4 <HIDS_GetMeasurementValues+0x120>)
 800ea38:	7852      	ldrb	r2, [r2, #1]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	22af      	movs	r2, #175	@ 0xaf
 800ea3e:	4353      	muls	r3, r2
 800ea40:	0018      	movs	r0, r3
 800ea42:	f7f4 fcbd 	bl	80033c0 <__aeabi_i2d>
 800ea46:	2200      	movs	r2, #0
 800ea48:	4b29      	ldr	r3, [pc, #164]	@ (800eaf0 <HIDS_GetMeasurementValues+0x12c>)
 800ea4a:	f7f3 f9b3 	bl	8001db4 <__aeabi_ddiv>
 800ea4e:	0002      	movs	r2, r0
 800ea50:	000b      	movs	r3, r1
 800ea52:	0010      	movs	r0, r2
 800ea54:	0019      	movs	r1, r3
 800ea56:	f7f4 fd4d 	bl	80034f4 <__aeabi_d2f>
 800ea5a:	1c03      	adds	r3, r0, #0
 800ea5c:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ea5e:	4925      	ldr	r1, [pc, #148]	@ (800eaf4 <HIDS_GetMeasurementValues+0x130>)
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7f2 fbdb 	bl	800121c <__aeabi_fsub>
 800ea66:	1c03      	adds	r3, r0, #0
 800ea68:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ea6a:	4b1e      	ldr	r3, [pc, #120]	@ (800eae4 <HIDS_GetMeasurementValues+0x120>)
 800ea6c:	78db      	ldrb	r3, [r3, #3]
 800ea6e:	021b      	lsls	r3, r3, #8
 800ea70:	4a1c      	ldr	r2, [pc, #112]	@ (800eae4 <HIDS_GetMeasurementValues+0x120>)
 800ea72:	7912      	ldrb	r2, [r2, #4]
 800ea74:	431a      	orrs	r2, r3
 800ea76:	0013      	movs	r3, r2
 800ea78:	015b      	lsls	r3, r3, #5
 800ea7a:	1a9b      	subs	r3, r3, r2
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	189b      	adds	r3, r3, r2
 800ea80:	0018      	movs	r0, r3
 800ea82:	f7f4 fc9d 	bl	80033c0 <__aeabi_i2d>
 800ea86:	2200      	movs	r2, #0
 800ea88:	4b19      	ldr	r3, [pc, #100]	@ (800eaf0 <HIDS_GetMeasurementValues+0x12c>)
 800ea8a:	f7f3 f993 	bl	8001db4 <__aeabi_ddiv>
 800ea8e:	0002      	movs	r2, r0
 800ea90:	000b      	movs	r3, r1
 800ea92:	0010      	movs	r0, r2
 800ea94:	0019      	movs	r1, r3
 800ea96:	f7f4 fd2d 	bl	80034f4 <__aeabi_d2f>
 800ea9a:	1c03      	adds	r3, r0, #0
 800ea9c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ea9e:	4916      	ldr	r1, [pc, #88]	@ (800eaf8 <HIDS_GetMeasurementValues+0x134>)
 800eaa0:	68b8      	ldr	r0, [r7, #8]
 800eaa2:	f7f2 fbbb 	bl	800121c <__aeabi_fsub>
 800eaa6:	1c03      	adds	r3, r0, #0
 800eaa8:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	0011      	movs	r1, r2
 800eabc:	0018      	movs	r0, r3
 800eabe:	f7fd fa35 	bl	800bf2c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	1c11      	adds	r1, r2, #0
 800eac8:	1c18      	adds	r0, r3, #0
 800eaca:	f7f4 ff13 	bl	80038f4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800eace:	4b04      	ldr	r3, [pc, #16]	@ (800eae0 <HIDS_GetMeasurementValues+0x11c>)
 800ead0:	2201      	movs	r2, #1
 800ead2:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ead4:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ead6:	0018      	movs	r0, r3
 800ead8:	46bd      	mov	sp, r7
 800eada:	b004      	add	sp, #16
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	46c0      	nop			@ (mov r8, r8)
 800eae0:	200023aa 	.word	0x200023aa
 800eae4:	200023a4 	.word	0x200023a4
 800eae8:	08025118 	.word	0x08025118
 800eaec:	080250b0 	.word	0x080250b0
 800eaf0:	40efffe0 	.word	0x40efffe0
 800eaf4:	42340000 	.word	0x42340000
 800eaf8:	40c00000 	.word	0x40c00000

0800eafc <ResetHIDSresults>:
void ResetHIDSresults() {
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0
  humid = 0.0;
 800eb00:	4b04      	ldr	r3, [pc, #16]	@ (800eb14 <ResetHIDSresults+0x18>)
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800eb06:	4b04      	ldr	r3, [pc, #16]	@ (800eb18 <ResetHIDSresults+0x1c>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]
}
 800eb0c:	46c0      	nop			@ (mov r8, r8)
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	46c0      	nop			@ (mov r8, r8)
 800eb14:	2000238c 	.word	0x2000238c
 800eb18:	20002390 	.word	0x20002390

0800eb1c <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800eb1c:	b5b0      	push	{r4, r5, r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800eb22:	4b3b      	ldr	r3, [pc, #236]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	2b06      	cmp	r3, #6
 800eb28:	d865      	bhi.n	800ebf6 <HIDS_Upkeep+0xda>
 800eb2a:	009a      	lsls	r2, r3, #2
 800eb2c:	4b39      	ldr	r3, [pc, #228]	@ (800ec14 <HIDS_Upkeep+0xf8>)
 800eb2e:	18d3      	adds	r3, r2, r3
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800eb34:	4a38      	ldr	r2, [pc, #224]	@ (800ec18 <HIDS_Upkeep+0xfc>)
 800eb36:	4b39      	ldr	r3, [pc, #228]	@ (800ec1c <HIDS_Upkeep+0x100>)
 800eb38:	0019      	movs	r1, r3
 800eb3a:	2003      	movs	r0, #3
 800eb3c:	f7ff fcc4 	bl	800e4c8 <CreateLine>
      break;
 800eb40:	e060      	b.n	800ec04 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800eb42:	f7ff ffdb 	bl	800eafc <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800eb46:	4b32      	ldr	r3, [pc, #200]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	701a      	strb	r2, [r3, #0]
      break;
 800eb4c:	e05a      	b.n	800ec04 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800eb4e:	f7fe fc19 	bl	800d384 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800eb52:	f7ff fe3f 	bl	800e7d4 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800eb56:	4b2e      	ldr	r3, [pc, #184]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800eb58:	2202      	movs	r2, #2
 800eb5a:	701a      	strb	r2, [r3, #0]
      break;
 800eb5c:	e052      	b.n	800ec04 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800eb5e:	4a30      	ldr	r2, [pc, #192]	@ (800ec20 <HIDS_Upkeep+0x104>)
 800eb60:	4b30      	ldr	r3, [pc, #192]	@ (800ec24 <HIDS_Upkeep+0x108>)
 800eb62:	0011      	movs	r1, r2
 800eb64:	0018      	movs	r0, r3
 800eb66:	f7ff ff2d 	bl	800e9c4 <HIDS_GetMeasurementValues>
 800eb6a:	1e03      	subs	r3, r0, #0
 800eb6c:	d047      	beq.n	800ebfe <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800eb6e:	4b28      	ldr	r3, [pc, #160]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800eb70:	2203      	movs	r2, #3
 800eb72:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb74:	e043      	b.n	800ebfe <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800eb76:	4b2b      	ldr	r3, [pc, #172]	@ (800ec24 <HIDS_Upkeep+0x108>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	1c18      	adds	r0, r3, #0
 800eb7c:	f7f4 fc72 	bl	8003464 <__aeabi_f2d>
 800eb80:	0004      	movs	r4, r0
 800eb82:	000d      	movs	r5, r1
 800eb84:	4b26      	ldr	r3, [pc, #152]	@ (800ec20 <HIDS_Upkeep+0x104>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	1c18      	adds	r0, r3, #0
 800eb8a:	f7f4 fc6b 	bl	8003464 <__aeabi_f2d>
 800eb8e:	0002      	movs	r2, r0
 800eb90:	000b      	movs	r3, r1
 800eb92:	4825      	ldr	r0, [pc, #148]	@ (800ec28 <HIDS_Upkeep+0x10c>)
 800eb94:	4921      	ldr	r1, [pc, #132]	@ (800ec1c <HIDS_Upkeep+0x100>)
 800eb96:	9202      	str	r2, [sp, #8]
 800eb98:	9303      	str	r3, [sp, #12]
 800eb9a:	9400      	str	r4, [sp, #0]
 800eb9c:	9501      	str	r5, [sp, #4]
 800eb9e:	0002      	movs	r2, r0
 800eba0:	2003      	movs	r0, #3
 800eba2:	f7ff fc91 	bl	800e4c8 <CreateLine>
      setHIDS(temp, humid);
 800eba6:	4b1e      	ldr	r3, [pc, #120]	@ (800ec20 <HIDS_Upkeep+0x104>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	4b1e      	ldr	r3, [pc, #120]	@ (800ec24 <HIDS_Upkeep+0x108>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	1c19      	adds	r1, r3, #0
 800ebb0:	1c10      	adds	r0, r2, #0
 800ebb2:	f7f4 feb3 	bl	800391c <setHIDS>
      ResetMeasurementIndicator();
 800ebb6:	f7fe fbfd 	bl	800d3b4 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800ebba:	f000 f8cb 	bl	800ed54 <HAL_GetTick>
 800ebbe:	0004      	movs	r4, r0
 800ebc0:	f7fe fd36 	bl	800d630 <powerCheck>
 800ebc4:	0003      	movs	r3, r0
 800ebc6:	2b04      	cmp	r3, #4
 800ebc8:	d101      	bne.n	800ebce <HIDS_Upkeep+0xb2>
 800ebca:	4b18      	ldr	r3, [pc, #96]	@ (800ec2c <HIDS_Upkeep+0x110>)
 800ebcc:	e001      	b.n	800ebd2 <HIDS_Upkeep+0xb6>
 800ebce:	23fa      	movs	r3, #250	@ 0xfa
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	191a      	adds	r2, r3, r4
 800ebd4:	4b16      	ldr	r3, [pc, #88]	@ (800ec30 <HIDS_Upkeep+0x114>)
 800ebd6:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800ebd8:	4b0d      	ldr	r3, [pc, #52]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800ebda:	2206      	movs	r2, #6
 800ebdc:	701a      	strb	r2, [r3, #0]
      break;
 800ebde:	e011      	b.n	800ec04 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800ebe0:	4b13      	ldr	r3, [pc, #76]	@ (800ec30 <HIDS_Upkeep+0x114>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f7ff fc19 	bl	800e41c <TimestampIsReached>
 800ebea:	1e03      	subs	r3, r0, #0
 800ebec:	d009      	beq.n	800ec02 <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800ebee:	4b08      	ldr	r3, [pc, #32]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ebf4:	e005      	b.n	800ec02 <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800ebf6:	4b06      	ldr	r3, [pc, #24]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	701a      	strb	r2, [r3, #0]
      break;
 800ebfc:	e002      	b.n	800ec04 <HIDS_Upkeep+0xe8>
      break;
 800ebfe:	46c0      	nop			@ (mov r8, r8)
 800ec00:	e000      	b.n	800ec04 <HIDS_Upkeep+0xe8>
      break;
 800ec02:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800ec04:	4b02      	ldr	r3, [pc, #8]	@ (800ec10 <HIDS_Upkeep+0xf4>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
}
 800ec08:	0018      	movs	r0, r3
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec0e:	46c0      	nop			@ (mov r8, r8)
 800ec10:	200023b0 	.word	0x200023b0
 800ec14:	0802565c 	.word	0x0802565c
 800ec18:	0802514c 	.word	0x0802514c
 800ec1c:	08025180 	.word	0x08025180
 800ec20:	20002390 	.word	0x20002390
 800ec24:	2000238c 	.word	0x2000238c
 800ec28:	08025184 	.word	0x08025184
 800ec2c:	00002710 	.word	0x00002710
 800ec30:	200023ac 	.word	0x200023ac

0800ec34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800ec34:	480d      	ldr	r0, [pc, #52]	@ (800ec6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800ec36:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ec38:	f7ff f846 	bl	800dcc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ec3c:	480c      	ldr	r0, [pc, #48]	@ (800ec70 <LoopForever+0x6>)
  ldr r1, =_edata
 800ec3e:	490d      	ldr	r1, [pc, #52]	@ (800ec74 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ec40:	4a0d      	ldr	r2, [pc, #52]	@ (800ec78 <LoopForever+0xe>)
  movs r3, #0
 800ec42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec44:	e002      	b.n	800ec4c <LoopCopyDataInit>

0800ec46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec4a:	3304      	adds	r3, #4

0800ec4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec50:	d3f9      	bcc.n	800ec46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec52:	4a0a      	ldr	r2, [pc, #40]	@ (800ec7c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ec54:	4c0a      	ldr	r4, [pc, #40]	@ (800ec80 <LoopForever+0x16>)
  movs r3, #0
 800ec56:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec58:	e001      	b.n	800ec5e <LoopFillZerobss>

0800ec5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec5c:	3204      	adds	r2, #4

0800ec5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec60:	d3fb      	bcc.n	800ec5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ec62:	f011 fb79 	bl	8020358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec66:	f7f8 ffff 	bl	8007c68 <main>

0800ec6a <LoopForever>:

LoopForever:
    b LoopForever
 800ec6a:	e7fe      	b.n	800ec6a <LoopForever>
   ldr   r0, =_estack
 800ec6c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800ec70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ec74:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 800ec78:	08025ff8 	.word	0x08025ff8
  ldr r2, =_sbss
 800ec7c:	2000042c 	.word	0x2000042c
  ldr r4, =_ebss
 800ec80:	200037b8 	.word	0x200037b8

0800ec84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec84:	e7fe      	b.n	800ec84 <ADC1_COMP_IRQHandler>
	...

0800ec88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ec8e:	1dfb      	adds	r3, r7, #7
 800ec90:	2200      	movs	r2, #0
 800ec92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ec94:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc4 <HAL_Init+0x3c>)
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc4 <HAL_Init+0x3c>)
 800ec9a:	2140      	movs	r1, #64	@ 0x40
 800ec9c:	430a      	orrs	r2, r1
 800ec9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800eca0:	2003      	movs	r0, #3
 800eca2:	f000 f811 	bl	800ecc8 <HAL_InitTick>
 800eca6:	1e03      	subs	r3, r0, #0
 800eca8:	d003      	beq.n	800ecb2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800ecaa:	1dfb      	adds	r3, r7, #7
 800ecac:	2201      	movs	r2, #1
 800ecae:	701a      	strb	r2, [r3, #0]
 800ecb0:	e001      	b.n	800ecb6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ecb2:	f7fe febd 	bl	800da30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ecb6:	1dfb      	adds	r3, r7, #7
 800ecb8:	781b      	ldrb	r3, [r3, #0]
}
 800ecba:	0018      	movs	r0, r3
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	b002      	add	sp, #8
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	46c0      	nop			@ (mov r8, r8)
 800ecc4:	40022000 	.word	0x40022000

0800ecc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ecc8:	b590      	push	{r4, r7, lr}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ecd0:	4b14      	ldr	r3, [pc, #80]	@ (800ed24 <HAL_InitTick+0x5c>)
 800ecd2:	681c      	ldr	r4, [r3, #0]
 800ecd4:	4b14      	ldr	r3, [pc, #80]	@ (800ed28 <HAL_InitTick+0x60>)
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	0019      	movs	r1, r3
 800ecda:	23fa      	movs	r3, #250	@ 0xfa
 800ecdc:	0098      	lsls	r0, r3, #2
 800ecde:	f7f1 fa61 	bl	80001a4 <__udivsi3>
 800ece2:	0003      	movs	r3, r0
 800ece4:	0019      	movs	r1, r3
 800ece6:	0020      	movs	r0, r4
 800ece8:	f7f1 fa5c 	bl	80001a4 <__udivsi3>
 800ecec:	0003      	movs	r3, r0
 800ecee:	0018      	movs	r0, r3
 800ecf0:	f000 fcfd 	bl	800f6ee <HAL_SYSTICK_Config>
 800ecf4:	1e03      	subs	r3, r0, #0
 800ecf6:	d001      	beq.n	800ecfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	e00f      	b.n	800ed1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d80b      	bhi.n	800ed1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	2301      	movs	r3, #1
 800ed06:	425b      	negs	r3, r3
 800ed08:	2200      	movs	r2, #0
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	f000 fcc6 	bl	800f69c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed10:	4b06      	ldr	r3, [pc, #24]	@ (800ed2c <HAL_InitTick+0x64>)
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	e000      	b.n	800ed1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ed1a:	2301      	movs	r3, #1
}
 800ed1c:	0018      	movs	r0, r3
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	b003      	add	sp, #12
 800ed22:	bd90      	pop	{r4, r7, pc}
 800ed24:	200000d4 	.word	0x200000d4
 800ed28:	200000e8 	.word	0x200000e8
 800ed2c:	200000e4 	.word	0x200000e4

0800ed30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed34:	4b05      	ldr	r3, [pc, #20]	@ (800ed4c <HAL_IncTick+0x1c>)
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	001a      	movs	r2, r3
 800ed3a:	4b05      	ldr	r3, [pc, #20]	@ (800ed50 <HAL_IncTick+0x20>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	18d2      	adds	r2, r2, r3
 800ed40:	4b03      	ldr	r3, [pc, #12]	@ (800ed50 <HAL_IncTick+0x20>)
 800ed42:	601a      	str	r2, [r3, #0]
}
 800ed44:	46c0      	nop			@ (mov r8, r8)
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	46c0      	nop			@ (mov r8, r8)
 800ed4c:	200000e8 	.word	0x200000e8
 800ed50:	200023b4 	.word	0x200023b4

0800ed54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	af00      	add	r7, sp, #0
  return uwTick;
 800ed58:	4b02      	ldr	r3, [pc, #8]	@ (800ed64 <HAL_GetTick+0x10>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
}
 800ed5c:	0018      	movs	r0, r3
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	46c0      	nop			@ (mov r8, r8)
 800ed64:	200023b4 	.word	0x200023b4

0800ed68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ed70:	f7ff fff0 	bl	800ed54 <HAL_GetTick>
 800ed74:	0003      	movs	r3, r0
 800ed76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	d005      	beq.n	800ed8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed82:	4b0a      	ldr	r3, [pc, #40]	@ (800edac <HAL_Delay+0x44>)
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	001a      	movs	r2, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	189b      	adds	r3, r3, r2
 800ed8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ed8e:	46c0      	nop			@ (mov r8, r8)
 800ed90:	f7ff ffe0 	bl	800ed54 <HAL_GetTick>
 800ed94:	0002      	movs	r2, r0
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d8f7      	bhi.n	800ed90 <HAL_Delay+0x28>
  {
  }
}
 800eda0:	46c0      	nop			@ (mov r8, r8)
 800eda2:	46c0      	nop			@ (mov r8, r8)
 800eda4:	46bd      	mov	sp, r7
 800eda6:	b004      	add	sp, #16
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	46c0      	nop			@ (mov r8, r8)
 800edac:	200000e8 	.word	0x200000e8

0800edb0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800edb4:	4b04      	ldr	r3, [pc, #16]	@ (800edc8 <HAL_SuspendTick+0x18>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	4b03      	ldr	r3, [pc, #12]	@ (800edc8 <HAL_SuspendTick+0x18>)
 800edba:	2102      	movs	r1, #2
 800edbc:	438a      	bics	r2, r1
 800edbe:	601a      	str	r2, [r3, #0]
}
 800edc0:	46c0      	nop			@ (mov r8, r8)
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	46c0      	nop			@ (mov r8, r8)
 800edc8:	e000e010 	.word	0xe000e010

0800edcc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800edd0:	4b04      	ldr	r3, [pc, #16]	@ (800ede4 <HAL_ResumeTick+0x18>)
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	4b03      	ldr	r3, [pc, #12]	@ (800ede4 <HAL_ResumeTick+0x18>)
 800edd6:	2102      	movs	r1, #2
 800edd8:	430a      	orrs	r2, r1
 800edda:	601a      	str	r2, [r3, #0]
}
 800eddc:	46c0      	nop			@ (mov r8, r8)
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	46c0      	nop			@ (mov r8, r8)
 800ede4:	e000e010 	.word	0xe000e010

0800ede8 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800edec:	4b02      	ldr	r3, [pc, #8]	@ (800edf8 <HAL_GetUIDw0+0x10>)
 800edee:	681b      	ldr	r3, [r3, #0]
}
 800edf0:	0018      	movs	r0, r3
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	46c0      	nop			@ (mov r8, r8)
 800edf8:	1ff80050 	.word	0x1ff80050

0800edfc <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ee00:	4b02      	ldr	r3, [pc, #8]	@ (800ee0c <HAL_GetUIDw1+0x10>)
 800ee02:	681b      	ldr	r3, [r3, #0]
}
 800ee04:	0018      	movs	r0, r3
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	46c0      	nop			@ (mov r8, r8)
 800ee0c:	1ff80054 	.word	0x1ff80054

0800ee10 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800ee14:	4b02      	ldr	r3, [pc, #8]	@ (800ee20 <HAL_GetUIDw2+0x10>)
 800ee16:	681b      	ldr	r3, [r3, #0]
}
 800ee18:	0018      	movs	r0, r3
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	46c0      	nop			@ (mov r8, r8)
 800ee20:	1ff80064 	.word	0x1ff80064

0800ee24 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	e159      	b.n	800f0ea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10a      	bne.n	800ee54 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2250      	movs	r2, #80	@ 0x50
 800ee48:	2100      	movs	r1, #0
 800ee4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	0018      	movs	r0, r3
 800ee50:	f7f8 f992 	bl	8007178 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee58:	2210      	movs	r2, #16
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	2b10      	cmp	r3, #16
 800ee5e:	d005      	beq.n	800ee6c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	2204      	movs	r2, #4
 800ee68:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ee6a:	d00b      	beq.n	800ee84 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee70:	2210      	movs	r2, #16
 800ee72:	431a      	orrs	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2250      	movs	r2, #80	@ 0x50
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	e132      	b.n	800f0ea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee88:	4a9a      	ldr	r2, [pc, #616]	@ (800f0f4 <HAL_ADC_Init+0x2d0>)
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	2203      	movs	r2, #3
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d108      	bne.n	800eeb4 <HAL_ADC_Init+0x90>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	4013      	ands	r3, r2
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d101      	bne.n	800eeb4 <HAL_ADC_Init+0x90>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e000      	b.n	800eeb6 <HAL_ADC_Init+0x92>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d149      	bne.n	800ef4e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	23c0      	movs	r3, #192	@ 0xc0
 800eec0:	061b      	lsls	r3, r3, #24
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d00b      	beq.n	800eede <HAL_ADC_Init+0xba>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	2380      	movs	r3, #128	@ 0x80
 800eecc:	05db      	lsls	r3, r3, #23
 800eece:	429a      	cmp	r2, r3
 800eed0:	d005      	beq.n	800eede <HAL_ADC_Init+0xba>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	2380      	movs	r3, #128	@ 0x80
 800eed8:	061b      	lsls	r3, r3, #24
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d111      	bne.n	800ef02 <HAL_ADC_Init+0xde>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	691a      	ldr	r2, [r3, #16]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	0092      	lsls	r2, r2, #2
 800eeea:	0892      	lsrs	r2, r2, #2
 800eeec:	611a      	str	r2, [r3, #16]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6919      	ldr	r1, [r3, #16]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	430a      	orrs	r2, r1
 800eefe:	611a      	str	r2, [r3, #16]
 800ef00:	e014      	b.n	800ef2c <HAL_ADC_Init+0x108>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	691a      	ldr	r2, [r3, #16]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	0092      	lsls	r2, r2, #2
 800ef0e:	0892      	lsrs	r2, r2, #2
 800ef10:	611a      	str	r2, [r3, #16]
 800ef12:	4b79      	ldr	r3, [pc, #484]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	4b78      	ldr	r3, [pc, #480]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef18:	4978      	ldr	r1, [pc, #480]	@ (800f0fc <HAL_ADC_Init+0x2d8>)
 800ef1a:	400a      	ands	r2, r1
 800ef1c:	601a      	str	r2, [r3, #0]
 800ef1e:	4b76      	ldr	r3, [pc, #472]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef20:	6819      	ldr	r1, [r3, #0]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	4b74      	ldr	r3, [pc, #464]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef28:	430a      	orrs	r2, r1
 800ef2a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68da      	ldr	r2, [r3, #12]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2118      	movs	r1, #24
 800ef38:	438a      	bics	r2, r1
 800ef3a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68d9      	ldr	r1, [r3, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	689a      	ldr	r2, [r3, #8]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	430a      	orrs	r2, r1
 800ef4c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800ef4e:	4b6a      	ldr	r3, [pc, #424]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	4b69      	ldr	r3, [pc, #420]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef54:	496a      	ldr	r1, [pc, #424]	@ (800f100 <HAL_ADC_Init+0x2dc>)
 800ef56:	400a      	ands	r2, r1
 800ef58:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800ef5a:	4b67      	ldr	r3, [pc, #412]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef5c:	6819      	ldr	r1, [r3, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef62:	065a      	lsls	r2, r3, #25
 800ef64:	4b64      	ldr	r3, [pc, #400]	@ (800f0f8 <HAL_ADC_Init+0x2d4>)
 800ef66:	430a      	orrs	r2, r1
 800ef68:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	689a      	ldr	r2, [r3, #8]
 800ef70:	2380      	movs	r3, #128	@ 0x80
 800ef72:	055b      	lsls	r3, r3, #21
 800ef74:	4013      	ands	r3, r2
 800ef76:	d108      	bne.n	800ef8a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	689a      	ldr	r2, [r3, #8]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2180      	movs	r1, #128	@ 0x80
 800ef84:	0549      	lsls	r1, r1, #21
 800ef86:	430a      	orrs	r2, r1
 800ef88:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68da      	ldr	r2, [r3, #12]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	495b      	ldr	r1, [pc, #364]	@ (800f104 <HAL_ADC_Init+0x2e0>)
 800ef96:	400a      	ands	r2, r1
 800ef98:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68d9      	ldr	r1, [r3, #12]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d101      	bne.n	800efb0 <HAL_ADC_Init+0x18c>
 800efac:	2304      	movs	r3, #4
 800efae:	e000      	b.n	800efb2 <HAL_ADC_Init+0x18e>
 800efb0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800efb2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2020      	movs	r0, #32
 800efb8:	5c1b      	ldrb	r3, [r3, r0]
 800efba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800efbc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	202c      	movs	r0, #44	@ 0x2c
 800efc2:	5c1b      	ldrb	r3, [r3, r0]
 800efc4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800efc6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800efcc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800efd4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	69db      	ldr	r3, [r3, #28]
 800efda:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800efdc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	430a      	orrs	r2, r1
 800efe4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efea:	23c2      	movs	r3, #194	@ 0xc2
 800efec:	33ff      	adds	r3, #255	@ 0xff
 800efee:	429a      	cmp	r2, r3
 800eff0:	d00b      	beq.n	800f00a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	68d9      	ldr	r1, [r3, #12]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f000:	431a      	orrs	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	430a      	orrs	r2, r1
 800f008:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2221      	movs	r2, #33	@ 0x21
 800f00e:	5c9b      	ldrb	r3, [r3, r2]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d11a      	bne.n	800f04a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2220      	movs	r2, #32
 800f018:	5c9b      	ldrb	r3, [r3, r2]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d109      	bne.n	800f032 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68da      	ldr	r2, [r3, #12]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2180      	movs	r1, #128	@ 0x80
 800f02a:	0249      	lsls	r1, r1, #9
 800f02c:	430a      	orrs	r2, r1
 800f02e:	60da      	str	r2, [r3, #12]
 800f030:	e00b      	b.n	800f04a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f036:	2220      	movs	r2, #32
 800f038:	431a      	orrs	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f042:	2201      	movs	r2, #1
 800f044:	431a      	orrs	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d11f      	bne.n	800f092 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	691a      	ldr	r2, [r3, #16]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	492a      	ldr	r1, [pc, #168]	@ (800f108 <HAL_ADC_Init+0x2e4>)
 800f05e:	400a      	ands	r2, r1
 800f060:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6919      	ldr	r1, [r3, #16]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f070:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f076:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	430a      	orrs	r2, r1
 800f07e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	691a      	ldr	r2, [r3, #16]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2101      	movs	r1, #1
 800f08c:	430a      	orrs	r2, r1
 800f08e:	611a      	str	r2, [r3, #16]
 800f090:	e00e      	b.n	800f0b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	691b      	ldr	r3, [r3, #16]
 800f098:	2201      	movs	r2, #1
 800f09a:	4013      	ands	r3, r2
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d107      	bne.n	800f0b0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	691a      	ldr	r2, [r3, #16]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2101      	movs	r1, #1
 800f0ac:	438a      	bics	r2, r1
 800f0ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	695a      	ldr	r2, [r3, #20]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2107      	movs	r1, #7
 800f0bc:	438a      	bics	r2, r1
 800f0be:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6959      	ldr	r1, [r3, #20]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0dc:	2203      	movs	r2, #3
 800f0de:	4393      	bics	r3, r2
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	431a      	orrs	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	0018      	movs	r0, r3
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	b002      	add	sp, #8
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	46c0      	nop			@ (mov r8, r8)
 800f0f4:	fffffefd 	.word	0xfffffefd
 800f0f8:	40012708 	.word	0x40012708
 800f0fc:	ffc3ffff 	.word	0xffc3ffff
 800f100:	fdffffff 	.word	0xfdffffff
 800f104:	fffe0219 	.word	0xfffe0219
 800f108:	fffffc03 	.word	0xfffffc03

0800f10c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f114:	230f      	movs	r3, #15
 800f116:	18fb      	adds	r3, r7, r3
 800f118:	2200      	movs	r2, #0
 800f11a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	2204      	movs	r2, #4
 800f124:	4013      	ands	r3, r2
 800f126:	d138      	bne.n	800f19a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2250      	movs	r2, #80	@ 0x50
 800f12c:	5c9b      	ldrb	r3, [r3, r2]
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d101      	bne.n	800f136 <HAL_ADC_Start+0x2a>
 800f132:	2302      	movs	r3, #2
 800f134:	e038      	b.n	800f1a8 <HAL_ADC_Start+0x9c>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2250      	movs	r2, #80	@ 0x50
 800f13a:	2101      	movs	r1, #1
 800f13c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	69db      	ldr	r3, [r3, #28]
 800f142:	2b01      	cmp	r3, #1
 800f144:	d007      	beq.n	800f156 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f146:	230f      	movs	r3, #15
 800f148:	18fc      	adds	r4, r7, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	0018      	movs	r0, r3
 800f14e:	f000 f95f 	bl	800f410 <ADC_Enable>
 800f152:	0003      	movs	r3, r0
 800f154:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f156:	230f      	movs	r3, #15
 800f158:	18fb      	adds	r3, r7, r3
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d120      	bne.n	800f1a2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f164:	4a12      	ldr	r2, [pc, #72]	@ (800f1b0 <HAL_ADC_Start+0xa4>)
 800f166:	4013      	ands	r3, r2
 800f168:	2280      	movs	r2, #128	@ 0x80
 800f16a:	0052      	lsls	r2, r2, #1
 800f16c:	431a      	orrs	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2200      	movs	r2, #0
 800f176:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2250      	movs	r2, #80	@ 0x50
 800f17c:	2100      	movs	r1, #0
 800f17e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	221c      	movs	r2, #28
 800f186:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	689a      	ldr	r2, [r3, #8]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2104      	movs	r1, #4
 800f194:	430a      	orrs	r2, r1
 800f196:	609a      	str	r2, [r3, #8]
 800f198:	e003      	b.n	800f1a2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f19a:	230f      	movs	r3, #15
 800f19c:	18fb      	adds	r3, r7, r3
 800f19e:	2202      	movs	r2, #2
 800f1a0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f1a2:	230f      	movs	r3, #15
 800f1a4:	18fb      	adds	r3, r7, r3
 800f1a6:	781b      	ldrb	r3, [r3, #0]
}
 800f1a8:	0018      	movs	r0, r3
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	b005      	add	sp, #20
 800f1ae:	bd90      	pop	{r4, r7, pc}
 800f1b0:	fffff0fe 	.word	0xfffff0fe

0800f1b4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	2b08      	cmp	r3, #8
 800f1cc:	d102      	bne.n	800f1d4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f1ce:	2308      	movs	r3, #8
 800f1d0:	60fb      	str	r3, [r7, #12]
 800f1d2:	e014      	b.n	800f1fe <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	4013      	ands	r3, r2
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d10b      	bne.n	800f1fa <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1e6:	2220      	movs	r2, #32
 800f1e8:	431a      	orrs	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2250      	movs	r2, #80	@ 0x50
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e072      	b.n	800f2e0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f1fa:	230c      	movs	r3, #12
 800f1fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f1fe:	f7ff fda9 	bl	800ed54 <HAL_GetTick>
 800f202:	0003      	movs	r3, r0
 800f204:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f206:	e01f      	b.n	800f248 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	3301      	adds	r3, #1
 800f20c:	d01c      	beq.n	800f248 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d007      	beq.n	800f224 <HAL_ADC_PollForConversion+0x70>
 800f214:	f7ff fd9e 	bl	800ed54 <HAL_GetTick>
 800f218:	0002      	movs	r2, r0
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	429a      	cmp	r2, r3
 800f222:	d211      	bcs.n	800f248 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	4013      	ands	r3, r2
 800f22e:	d10b      	bne.n	800f248 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f234:	2204      	movs	r2, #4
 800f236:	431a      	orrs	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2250      	movs	r2, #80	@ 0x50
 800f240:	2100      	movs	r1, #0
 800f242:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f244:	2303      	movs	r3, #3
 800f246:	e04b      	b.n	800f2e0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	4013      	ands	r3, r2
 800f252:	d0d9      	beq.n	800f208 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f258:	2280      	movs	r2, #128	@ 0x80
 800f25a:	0092      	lsls	r2, r2, #2
 800f25c:	431a      	orrs	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68da      	ldr	r2, [r3, #12]
 800f268:	23c0      	movs	r3, #192	@ 0xc0
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	4013      	ands	r3, r2
 800f26e:	d12e      	bne.n	800f2ce <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2220      	movs	r2, #32
 800f274:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f276:	2b00      	cmp	r3, #0
 800f278:	d129      	bne.n	800f2ce <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2208      	movs	r2, #8
 800f282:	4013      	ands	r3, r2
 800f284:	2b08      	cmp	r3, #8
 800f286:	d122      	bne.n	800f2ce <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	2204      	movs	r2, #4
 800f290:	4013      	ands	r3, r2
 800f292:	d110      	bne.n	800f2b6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	685a      	ldr	r2, [r3, #4]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	210c      	movs	r1, #12
 800f2a0:	438a      	bics	r2, r1
 800f2a2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2a8:	4a0f      	ldr	r2, [pc, #60]	@ (800f2e8 <HAL_ADC_PollForConversion+0x134>)
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	431a      	orrs	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f2b4:	e00b      	b.n	800f2ce <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	431a      	orrs	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	699b      	ldr	r3, [r3, #24]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d103      	bne.n	800f2de <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	220c      	movs	r2, #12
 800f2dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	0018      	movs	r0, r3
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	b004      	add	sp, #16
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	fffffefe 	.word	0xfffffefe

0800f2ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	b002      	add	sp, #8
 800f300:	bd80      	pop	{r7, pc}
	...

0800f304 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2250      	movs	r2, #80	@ 0x50
 800f312:	5c9b      	ldrb	r3, [r3, r2]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d101      	bne.n	800f31c <HAL_ADC_ConfigChannel+0x18>
 800f318:	2302      	movs	r3, #2
 800f31a:	e06c      	b.n	800f3f6 <HAL_ADC_ConfigChannel+0xf2>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2250      	movs	r2, #80	@ 0x50
 800f320:	2101      	movs	r1, #1
 800f322:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	2204      	movs	r2, #4
 800f32c:	4013      	ands	r3, r2
 800f32e:	d00b      	beq.n	800f348 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f334:	2220      	movs	r2, #32
 800f336:	431a      	orrs	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2250      	movs	r2, #80	@ 0x50
 800f340:	2100      	movs	r1, #0
 800f342:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f344:	2301      	movs	r3, #1
 800f346:	e056      	b.n	800f3f6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	4a2c      	ldr	r2, [pc, #176]	@ (800f400 <HAL_ADC_ConfigChannel+0xfc>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d028      	beq.n	800f3a4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	035b      	lsls	r3, r3, #13
 800f35e:	0b5a      	lsrs	r2, r3, #13
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	430a      	orrs	r2, r1
 800f366:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	2380      	movs	r3, #128	@ 0x80
 800f36e:	02db      	lsls	r3, r3, #11
 800f370:	4013      	ands	r3, r2
 800f372:	d009      	beq.n	800f388 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f374:	4b23      	ldr	r3, [pc, #140]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	4b22      	ldr	r3, [pc, #136]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f37a:	2180      	movs	r1, #128	@ 0x80
 800f37c:	0409      	lsls	r1, r1, #16
 800f37e:	430a      	orrs	r2, r1
 800f380:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f382:	200a      	movs	r0, #10
 800f384:	f000 f8ac 	bl	800f4e0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	2380      	movs	r3, #128	@ 0x80
 800f38e:	029b      	lsls	r3, r3, #10
 800f390:	4013      	ands	r3, r2
 800f392:	d02b      	beq.n	800f3ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f394:	4b1b      	ldr	r3, [pc, #108]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	4b1a      	ldr	r3, [pc, #104]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f39a:	2180      	movs	r1, #128	@ 0x80
 800f39c:	03c9      	lsls	r1, r1, #15
 800f39e:	430a      	orrs	r2, r1
 800f3a0:	601a      	str	r2, [r3, #0]
 800f3a2:	e023      	b.n	800f3ec <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	035b      	lsls	r3, r3, #13
 800f3b0:	0b5b      	lsrs	r3, r3, #13
 800f3b2:	43d9      	mvns	r1, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	400a      	ands	r2, r1
 800f3ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	2380      	movs	r3, #128	@ 0x80
 800f3c2:	02db      	lsls	r3, r3, #11
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	d005      	beq.n	800f3d4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	4b0d      	ldr	r3, [pc, #52]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f3ce:	490e      	ldr	r1, [pc, #56]	@ (800f408 <HAL_ADC_ConfigChannel+0x104>)
 800f3d0:	400a      	ands	r2, r1
 800f3d2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	2380      	movs	r3, #128	@ 0x80
 800f3da:	029b      	lsls	r3, r3, #10
 800f3dc:	4013      	ands	r3, r2
 800f3de:	d005      	beq.n	800f3ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f3e0:	4b08      	ldr	r3, [pc, #32]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	4b07      	ldr	r3, [pc, #28]	@ (800f404 <HAL_ADC_ConfigChannel+0x100>)
 800f3e6:	4909      	ldr	r1, [pc, #36]	@ (800f40c <HAL_ADC_ConfigChannel+0x108>)
 800f3e8:	400a      	ands	r2, r1
 800f3ea:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2250      	movs	r2, #80	@ 0x50
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	0018      	movs	r0, r3
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	b002      	add	sp, #8
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	46c0      	nop			@ (mov r8, r8)
 800f400:	00001001 	.word	0x00001001
 800f404:	40012708 	.word	0x40012708
 800f408:	ff7fffff 	.word	0xff7fffff
 800f40c:	ffbfffff 	.word	0xffbfffff

0800f410 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f418:	2300      	movs	r3, #0
 800f41a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	2203      	movs	r2, #3
 800f424:	4013      	ands	r3, r2
 800f426:	2b01      	cmp	r3, #1
 800f428:	d108      	bne.n	800f43c <ADC_Enable+0x2c>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2201      	movs	r2, #1
 800f432:	4013      	ands	r3, r2
 800f434:	2b01      	cmp	r3, #1
 800f436:	d101      	bne.n	800f43c <ADC_Enable+0x2c>
 800f438:	2301      	movs	r3, #1
 800f43a:	e000      	b.n	800f43e <ADC_Enable+0x2e>
 800f43c:	2300      	movs	r3, #0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d146      	bne.n	800f4d0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	4a24      	ldr	r2, [pc, #144]	@ (800f4dc <ADC_Enable+0xcc>)
 800f44a:	4013      	ands	r3, r2
 800f44c:	d00d      	beq.n	800f46a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f452:	2210      	movs	r2, #16
 800f454:	431a      	orrs	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f45e:	2201      	movs	r2, #1
 800f460:	431a      	orrs	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e033      	b.n	800f4d2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	689a      	ldr	r2, [r3, #8]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2101      	movs	r1, #1
 800f476:	430a      	orrs	r2, r1
 800f478:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f47a:	2001      	movs	r0, #1
 800f47c:	f000 f830 	bl	800f4e0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f480:	f7ff fc68 	bl	800ed54 <HAL_GetTick>
 800f484:	0003      	movs	r3, r0
 800f486:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f488:	e01b      	b.n	800f4c2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f48a:	f7ff fc63 	bl	800ed54 <HAL_GetTick>
 800f48e:	0002      	movs	r2, r0
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	2b0a      	cmp	r3, #10
 800f496:	d914      	bls.n	800f4c2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d00d      	beq.n	800f4c2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4aa:	2210      	movs	r2, #16
 800f4ac:	431a      	orrs	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	431a      	orrs	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e007      	b.n	800f4d2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d1dc      	bne.n	800f48a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	b004      	add	sp, #16
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	46c0      	nop			@ (mov r8, r8)
 800f4dc:	80000017 	.word	0x80000017

0800f4e0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f4e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f518 <ADC_DelayMicroSecond+0x38>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	490b      	ldr	r1, [pc, #44]	@ (800f51c <ADC_DelayMicroSecond+0x3c>)
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	f7f0 fe58 	bl	80001a4 <__udivsi3>
 800f4f4:	0003      	movs	r3, r0
 800f4f6:	001a      	movs	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4353      	muls	r3, r2
 800f4fc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f4fe:	e002      	b.n	800f506 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	3b01      	subs	r3, #1
 800f504:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1f9      	bne.n	800f500 <ADC_DelayMicroSecond+0x20>
  }
}
 800f50c:	46c0      	nop			@ (mov r8, r8)
 800f50e:	46c0      	nop			@ (mov r8, r8)
 800f510:	46bd      	mov	sp, r7
 800f512:	b004      	add	sp, #16
 800f514:	bd80      	pop	{r7, pc}
 800f516:	46c0      	nop			@ (mov r8, r8)
 800f518:	200000d4 	.word	0x200000d4
 800f51c:	000f4240 	.word	0x000f4240

0800f520 <__NVIC_EnableIRQ>:
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	0002      	movs	r2, r0
 800f528:	1dfb      	adds	r3, r7, #7
 800f52a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f52c:	1dfb      	adds	r3, r7, #7
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b7f      	cmp	r3, #127	@ 0x7f
 800f532:	d809      	bhi.n	800f548 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f534:	1dfb      	adds	r3, r7, #7
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	001a      	movs	r2, r3
 800f53a:	231f      	movs	r3, #31
 800f53c:	401a      	ands	r2, r3
 800f53e:	4b04      	ldr	r3, [pc, #16]	@ (800f550 <__NVIC_EnableIRQ+0x30>)
 800f540:	2101      	movs	r1, #1
 800f542:	4091      	lsls	r1, r2
 800f544:	000a      	movs	r2, r1
 800f546:	601a      	str	r2, [r3, #0]
}
 800f548:	46c0      	nop			@ (mov r8, r8)
 800f54a:	46bd      	mov	sp, r7
 800f54c:	b002      	add	sp, #8
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	e000e100 	.word	0xe000e100

0800f554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f554:	b590      	push	{r4, r7, lr}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	0002      	movs	r2, r0
 800f55c:	6039      	str	r1, [r7, #0]
 800f55e:	1dfb      	adds	r3, r7, #7
 800f560:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f562:	1dfb      	adds	r3, r7, #7
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b7f      	cmp	r3, #127	@ 0x7f
 800f568:	d828      	bhi.n	800f5bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f56a:	4a2f      	ldr	r2, [pc, #188]	@ (800f628 <__NVIC_SetPriority+0xd4>)
 800f56c:	1dfb      	adds	r3, r7, #7
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	b25b      	sxtb	r3, r3
 800f572:	089b      	lsrs	r3, r3, #2
 800f574:	33c0      	adds	r3, #192	@ 0xc0
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	589b      	ldr	r3, [r3, r2]
 800f57a:	1dfa      	adds	r2, r7, #7
 800f57c:	7812      	ldrb	r2, [r2, #0]
 800f57e:	0011      	movs	r1, r2
 800f580:	2203      	movs	r2, #3
 800f582:	400a      	ands	r2, r1
 800f584:	00d2      	lsls	r2, r2, #3
 800f586:	21ff      	movs	r1, #255	@ 0xff
 800f588:	4091      	lsls	r1, r2
 800f58a:	000a      	movs	r2, r1
 800f58c:	43d2      	mvns	r2, r2
 800f58e:	401a      	ands	r2, r3
 800f590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	019b      	lsls	r3, r3, #6
 800f596:	22ff      	movs	r2, #255	@ 0xff
 800f598:	401a      	ands	r2, r3
 800f59a:	1dfb      	adds	r3, r7, #7
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	0018      	movs	r0, r3
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	4003      	ands	r3, r0
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5a8:	481f      	ldr	r0, [pc, #124]	@ (800f628 <__NVIC_SetPriority+0xd4>)
 800f5aa:	1dfb      	adds	r3, r7, #7
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	b25b      	sxtb	r3, r3
 800f5b0:	089b      	lsrs	r3, r3, #2
 800f5b2:	430a      	orrs	r2, r1
 800f5b4:	33c0      	adds	r3, #192	@ 0xc0
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f5ba:	e031      	b.n	800f620 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f62c <__NVIC_SetPriority+0xd8>)
 800f5be:	1dfb      	adds	r3, r7, #7
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	0019      	movs	r1, r3
 800f5c4:	230f      	movs	r3, #15
 800f5c6:	400b      	ands	r3, r1
 800f5c8:	3b08      	subs	r3, #8
 800f5ca:	089b      	lsrs	r3, r3, #2
 800f5cc:	3306      	adds	r3, #6
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	18d3      	adds	r3, r2, r3
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	1dfa      	adds	r2, r7, #7
 800f5d8:	7812      	ldrb	r2, [r2, #0]
 800f5da:	0011      	movs	r1, r2
 800f5dc:	2203      	movs	r2, #3
 800f5de:	400a      	ands	r2, r1
 800f5e0:	00d2      	lsls	r2, r2, #3
 800f5e2:	21ff      	movs	r1, #255	@ 0xff
 800f5e4:	4091      	lsls	r1, r2
 800f5e6:	000a      	movs	r2, r1
 800f5e8:	43d2      	mvns	r2, r2
 800f5ea:	401a      	ands	r2, r3
 800f5ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	019b      	lsls	r3, r3, #6
 800f5f2:	22ff      	movs	r2, #255	@ 0xff
 800f5f4:	401a      	ands	r2, r3
 800f5f6:	1dfb      	adds	r3, r7, #7
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	0018      	movs	r0, r3
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	4003      	ands	r3, r0
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f604:	4809      	ldr	r0, [pc, #36]	@ (800f62c <__NVIC_SetPriority+0xd8>)
 800f606:	1dfb      	adds	r3, r7, #7
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	001c      	movs	r4, r3
 800f60c:	230f      	movs	r3, #15
 800f60e:	4023      	ands	r3, r4
 800f610:	3b08      	subs	r3, #8
 800f612:	089b      	lsrs	r3, r3, #2
 800f614:	430a      	orrs	r2, r1
 800f616:	3306      	adds	r3, #6
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	18c3      	adds	r3, r0, r3
 800f61c:	3304      	adds	r3, #4
 800f61e:	601a      	str	r2, [r3, #0]
}
 800f620:	46c0      	nop			@ (mov r8, r8)
 800f622:	46bd      	mov	sp, r7
 800f624:	b003      	add	sp, #12
 800f626:	bd90      	pop	{r4, r7, pc}
 800f628:	e000e100 	.word	0xe000e100
 800f62c:	e000ed00 	.word	0xe000ed00

0800f630 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f634:	f3bf 8f4f 	dsb	sy
}
 800f638:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f63a:	4b04      	ldr	r3, [pc, #16]	@ (800f64c <__NVIC_SystemReset+0x1c>)
 800f63c:	4a04      	ldr	r2, [pc, #16]	@ (800f650 <__NVIC_SystemReset+0x20>)
 800f63e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f640:	f3bf 8f4f 	dsb	sy
}
 800f644:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f646:	46c0      	nop			@ (mov r8, r8)
 800f648:	e7fd      	b.n	800f646 <__NVIC_SystemReset+0x16>
 800f64a:	46c0      	nop			@ (mov r8, r8)
 800f64c:	e000ed00 	.word	0xe000ed00
 800f650:	05fa0004 	.word	0x05fa0004

0800f654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	1e5a      	subs	r2, r3, #1
 800f660:	2380      	movs	r3, #128	@ 0x80
 800f662:	045b      	lsls	r3, r3, #17
 800f664:	429a      	cmp	r2, r3
 800f666:	d301      	bcc.n	800f66c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f668:	2301      	movs	r3, #1
 800f66a:	e010      	b.n	800f68e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f66c:	4b0a      	ldr	r3, [pc, #40]	@ (800f698 <SysTick_Config+0x44>)
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	3a01      	subs	r2, #1
 800f672:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f674:	2301      	movs	r3, #1
 800f676:	425b      	negs	r3, r3
 800f678:	2103      	movs	r1, #3
 800f67a:	0018      	movs	r0, r3
 800f67c:	f7ff ff6a 	bl	800f554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f680:	4b05      	ldr	r3, [pc, #20]	@ (800f698 <SysTick_Config+0x44>)
 800f682:	2200      	movs	r2, #0
 800f684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f686:	4b04      	ldr	r3, [pc, #16]	@ (800f698 <SysTick_Config+0x44>)
 800f688:	2207      	movs	r2, #7
 800f68a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	0018      	movs	r0, r3
 800f690:	46bd      	mov	sp, r7
 800f692:	b002      	add	sp, #8
 800f694:	bd80      	pop	{r7, pc}
 800f696:	46c0      	nop			@ (mov r8, r8)
 800f698:	e000e010 	.word	0xe000e010

0800f69c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60b9      	str	r1, [r7, #8]
 800f6a4:	607a      	str	r2, [r7, #4]
 800f6a6:	210f      	movs	r1, #15
 800f6a8:	187b      	adds	r3, r7, r1
 800f6aa:	1c02      	adds	r2, r0, #0
 800f6ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	187b      	adds	r3, r7, r1
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	b25b      	sxtb	r3, r3
 800f6b6:	0011      	movs	r1, r2
 800f6b8:	0018      	movs	r0, r3
 800f6ba:	f7ff ff4b 	bl	800f554 <__NVIC_SetPriority>
}
 800f6be:	46c0      	nop			@ (mov r8, r8)
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	b004      	add	sp, #16
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	0002      	movs	r2, r0
 800f6ce:	1dfb      	adds	r3, r7, #7
 800f6d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f6d2:	1dfb      	adds	r3, r7, #7
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	b25b      	sxtb	r3, r3
 800f6d8:	0018      	movs	r0, r3
 800f6da:	f7ff ff21 	bl	800f520 <__NVIC_EnableIRQ>
}
 800f6de:	46c0      	nop			@ (mov r8, r8)
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	b002      	add	sp, #8
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f6ea:	f7ff ffa1 	bl	800f630 <__NVIC_SystemReset>

0800f6ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	0018      	movs	r0, r3
 800f6fa:	f7ff ffab 	bl	800f654 <SysTick_Config>
 800f6fe:	0003      	movs	r3, r0
}
 800f700:	0018      	movs	r0, r3
 800f702:	46bd      	mov	sp, r7
 800f704:	b002      	add	sp, #8
 800f706:	bd80      	pop	{r7, pc}

0800f708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d101      	bne.n	800f71a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f716:	2301      	movs	r3, #1
 800f718:	e061      	b.n	800f7de <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a32      	ldr	r2, [pc, #200]	@ (800f7e8 <HAL_DMA_Init+0xe0>)
 800f720:	4694      	mov	ip, r2
 800f722:	4463      	add	r3, ip
 800f724:	2114      	movs	r1, #20
 800f726:	0018      	movs	r0, r3
 800f728:	f7f0 fd3c 	bl	80001a4 <__udivsi3>
 800f72c:	0003      	movs	r3, r0
 800f72e:	009a      	lsls	r2, r3, #2
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	4a2d      	ldr	r2, [pc, #180]	@ (800f7ec <HAL_DMA_Init+0xe4>)
 800f738:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2225      	movs	r2, #37	@ 0x25
 800f73e:	2102      	movs	r1, #2
 800f740:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	4a28      	ldr	r2, [pc, #160]	@ (800f7f0 <HAL_DMA_Init+0xe8>)
 800f74e:	4013      	ands	r3, r2
 800f750:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f75a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6a1b      	ldr	r3, [r3, #32]
 800f778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	689a      	ldr	r2, [r3, #8]
 800f78c:	2380      	movs	r3, #128	@ 0x80
 800f78e:	01db      	lsls	r3, r3, #7
 800f790:	429a      	cmp	r2, r3
 800f792:	d018      	beq.n	800f7c6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f794:	4b17      	ldr	r3, [pc, #92]	@ (800f7f4 <HAL_DMA_Init+0xec>)
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f79c:	211c      	movs	r1, #28
 800f79e:	400b      	ands	r3, r1
 800f7a0:	210f      	movs	r1, #15
 800f7a2:	4099      	lsls	r1, r3
 800f7a4:	000b      	movs	r3, r1
 800f7a6:	43d9      	mvns	r1, r3
 800f7a8:	4b12      	ldr	r3, [pc, #72]	@ (800f7f4 <HAL_DMA_Init+0xec>)
 800f7aa:	400a      	ands	r2, r1
 800f7ac:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f7ae:	4b11      	ldr	r3, [pc, #68]	@ (800f7f4 <HAL_DMA_Init+0xec>)
 800f7b0:	6819      	ldr	r1, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	685a      	ldr	r2, [r3, #4]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ba:	201c      	movs	r0, #28
 800f7bc:	4003      	ands	r3, r0
 800f7be:	409a      	lsls	r2, r3
 800f7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f7f4 <HAL_DMA_Init+0xec>)
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2225      	movs	r2, #37	@ 0x25
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2224      	movs	r2, #36	@ 0x24
 800f7d8:	2100      	movs	r1, #0
 800f7da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	0018      	movs	r0, r3
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	b004      	add	sp, #16
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	46c0      	nop			@ (mov r8, r8)
 800f7e8:	bffdfff8 	.word	0xbffdfff8
 800f7ec:	40020000 	.word	0x40020000
 800f7f0:	ffff800f 	.word	0xffff800f
 800f7f4:	400200a8 	.word	0x400200a8

0800f7f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
 800f804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f806:	2317      	movs	r3, #23
 800f808:	18fb      	adds	r3, r7, r3
 800f80a:	2200      	movs	r2, #0
 800f80c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2224      	movs	r2, #36	@ 0x24
 800f812:	5c9b      	ldrb	r3, [r3, r2]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d101      	bne.n	800f81c <HAL_DMA_Start_IT+0x24>
 800f818:	2302      	movs	r3, #2
 800f81a:	e04f      	b.n	800f8bc <HAL_DMA_Start_IT+0xc4>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2224      	movs	r2, #36	@ 0x24
 800f820:	2101      	movs	r1, #1
 800f822:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2225      	movs	r2, #37	@ 0x25
 800f828:	5c9b      	ldrb	r3, [r3, r2]
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d13a      	bne.n	800f8a6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2225      	movs	r2, #37	@ 0x25
 800f834:	2102      	movs	r1, #2
 800f836:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2200      	movs	r2, #0
 800f83c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2101      	movs	r1, #1
 800f84a:	438a      	bics	r2, r1
 800f84c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	68b9      	ldr	r1, [r7, #8]
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f000 f976 	bl	800fb46 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d008      	beq.n	800f874 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	210e      	movs	r1, #14
 800f86e:	430a      	orrs	r2, r1
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	e00f      	b.n	800f894 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2104      	movs	r1, #4
 800f880:	438a      	bics	r2, r1
 800f882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	210a      	movs	r1, #10
 800f890:	430a      	orrs	r2, r1
 800f892:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2101      	movs	r1, #1
 800f8a0:	430a      	orrs	r2, r1
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	e007      	b.n	800f8b6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2224      	movs	r2, #36	@ 0x24
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f8ae:	2317      	movs	r3, #23
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f8b6:	2317      	movs	r3, #23
 800f8b8:	18fb      	adds	r3, r7, r3
 800f8ba:	781b      	ldrb	r3, [r3, #0]
}
 800f8bc:	0018      	movs	r0, r3
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	b006      	add	sp, #24
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8cc:	230f      	movs	r3, #15
 800f8ce:	18fb      	adds	r3, r7, r3
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2225      	movs	r2, #37	@ 0x25
 800f8d8:	5c9b      	ldrb	r3, [r3, r2]
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	d008      	beq.n	800f8f2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2204      	movs	r2, #4
 800f8e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2224      	movs	r2, #36	@ 0x24
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e024      	b.n	800f93c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	210e      	movs	r1, #14
 800f8fe:	438a      	bics	r2, r1
 800f900:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2101      	movs	r1, #1
 800f90e:	438a      	bics	r2, r1
 800f910:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f916:	221c      	movs	r2, #28
 800f918:	401a      	ands	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f91e:	2101      	movs	r1, #1
 800f920:	4091      	lsls	r1, r2
 800f922:	000a      	movs	r2, r1
 800f924:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2225      	movs	r2, #37	@ 0x25
 800f92a:	2101      	movs	r1, #1
 800f92c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2224      	movs	r2, #36	@ 0x24
 800f932:	2100      	movs	r1, #0
 800f934:	5499      	strb	r1, [r3, r2]

    return status;
 800f936:	230f      	movs	r3, #15
 800f938:	18fb      	adds	r3, r7, r3
 800f93a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f93c:	0018      	movs	r0, r3
 800f93e:	46bd      	mov	sp, r7
 800f940:	b004      	add	sp, #16
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f94c:	210f      	movs	r1, #15
 800f94e:	187b      	adds	r3, r7, r1
 800f950:	2200      	movs	r2, #0
 800f952:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2225      	movs	r2, #37	@ 0x25
 800f958:	5c9b      	ldrb	r3, [r3, r2]
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d006      	beq.n	800f96e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2204      	movs	r2, #4
 800f964:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f966:	187b      	adds	r3, r7, r1
 800f968:	2201      	movs	r2, #1
 800f96a:	701a      	strb	r2, [r3, #0]
 800f96c:	e02a      	b.n	800f9c4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	210e      	movs	r1, #14
 800f97a:	438a      	bics	r2, r1
 800f97c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2101      	movs	r1, #1
 800f98a:	438a      	bics	r2, r1
 800f98c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f992:	221c      	movs	r2, #28
 800f994:	401a      	ands	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f99a:	2101      	movs	r1, #1
 800f99c:	4091      	lsls	r1, r2
 800f99e:	000a      	movs	r2, r1
 800f9a0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2225      	movs	r2, #37	@ 0x25
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2224      	movs	r2, #36	@ 0x24
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d004      	beq.n	800f9c4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	0010      	movs	r0, r2
 800f9c2:	4798      	blx	r3
    }
  }
  return status;
 800f9c4:	230f      	movs	r3, #15
 800f9c6:	18fb      	adds	r3, r7, r3
 800f9c8:	781b      	ldrb	r3, [r3, #0]
}
 800f9ca:	0018      	movs	r0, r3
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	b004      	add	sp, #16
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ee:	221c      	movs	r2, #28
 800f9f0:	4013      	ands	r3, r2
 800f9f2:	2204      	movs	r2, #4
 800f9f4:	409a      	lsls	r2, r3
 800f9f6:	0013      	movs	r3, r2
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	d026      	beq.n	800fa4c <HAL_DMA_IRQHandler+0x7a>
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2204      	movs	r2, #4
 800fa02:	4013      	ands	r3, r2
 800fa04:	d022      	beq.n	800fa4c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2220      	movs	r2, #32
 800fa0e:	4013      	ands	r3, r2
 800fa10:	d107      	bne.n	800fa22 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2104      	movs	r1, #4
 800fa1e:	438a      	bics	r2, r1
 800fa20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa26:	221c      	movs	r2, #28
 800fa28:	401a      	ands	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa2e:	2104      	movs	r1, #4
 800fa30:	4091      	lsls	r1, r2
 800fa32:	000a      	movs	r2, r1
 800fa34:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d100      	bne.n	800fa40 <HAL_DMA_IRQHandler+0x6e>
 800fa3e:	e071      	b.n	800fb24 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	0010      	movs	r0, r2
 800fa48:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fa4a:	e06b      	b.n	800fb24 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa50:	221c      	movs	r2, #28
 800fa52:	4013      	ands	r3, r2
 800fa54:	2202      	movs	r2, #2
 800fa56:	409a      	lsls	r2, r3
 800fa58:	0013      	movs	r3, r2
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	d02d      	beq.n	800fabc <HAL_DMA_IRQHandler+0xea>
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	2202      	movs	r2, #2
 800fa64:	4013      	ands	r3, r2
 800fa66:	d029      	beq.n	800fabc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2220      	movs	r2, #32
 800fa70:	4013      	ands	r3, r2
 800fa72:	d10b      	bne.n	800fa8c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	210a      	movs	r1, #10
 800fa80:	438a      	bics	r2, r1
 800fa82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2225      	movs	r2, #37	@ 0x25
 800fa88:	2101      	movs	r1, #1
 800fa8a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa90:	221c      	movs	r2, #28
 800fa92:	401a      	ands	r2, r3
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa98:	2102      	movs	r1, #2
 800fa9a:	4091      	lsls	r1, r2
 800fa9c:	000a      	movs	r2, r1
 800fa9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2224      	movs	r2, #36	@ 0x24
 800faa4:	2100      	movs	r1, #0
 800faa6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faac:	2b00      	cmp	r3, #0
 800faae:	d039      	beq.n	800fb24 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	0010      	movs	r0, r2
 800fab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800faba:	e033      	b.n	800fb24 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fac0:	221c      	movs	r2, #28
 800fac2:	4013      	ands	r3, r2
 800fac4:	2208      	movs	r2, #8
 800fac6:	409a      	lsls	r2, r3
 800fac8:	0013      	movs	r3, r2
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	4013      	ands	r3, r2
 800face:	d02a      	beq.n	800fb26 <HAL_DMA_IRQHandler+0x154>
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	2208      	movs	r2, #8
 800fad4:	4013      	ands	r3, r2
 800fad6:	d026      	beq.n	800fb26 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	210e      	movs	r1, #14
 800fae4:	438a      	bics	r2, r1
 800fae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faec:	221c      	movs	r2, #28
 800faee:	401a      	ands	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf4:	2101      	movs	r1, #1
 800faf6:	4091      	lsls	r1, r2
 800faf8:	000a      	movs	r2, r1
 800fafa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2225      	movs	r2, #37	@ 0x25
 800fb06:	2101      	movs	r1, #1
 800fb08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2224      	movs	r2, #36	@ 0x24
 800fb0e:	2100      	movs	r1, #0
 800fb10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d005      	beq.n	800fb26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	0010      	movs	r0, r2
 800fb22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fb24:	46c0      	nop			@ (mov r8, r8)
 800fb26:	46c0      	nop			@ (mov r8, r8)
}
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	b004      	add	sp, #16
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2225      	movs	r2, #37	@ 0x25
 800fb3a:	5c9b      	ldrb	r3, [r3, r2]
 800fb3c:	b2db      	uxtb	r3, r3
}
 800fb3e:	0018      	movs	r0, r3
 800fb40:	46bd      	mov	sp, r7
 800fb42:	b002      	add	sp, #8
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	60f8      	str	r0, [r7, #12]
 800fb4e:	60b9      	str	r1, [r7, #8]
 800fb50:	607a      	str	r2, [r7, #4]
 800fb52:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb58:	221c      	movs	r2, #28
 800fb5a:	401a      	ands	r2, r3
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb60:	2101      	movs	r1, #1
 800fb62:	4091      	lsls	r1, r2
 800fb64:	000a      	movs	r2, r1
 800fb66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	683a      	ldr	r2, [r7, #0]
 800fb6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	2b10      	cmp	r3, #16
 800fb76:	d108      	bne.n	800fb8a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	68ba      	ldr	r2, [r7, #8]
 800fb86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fb88:	e007      	b.n	800fb9a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	60da      	str	r2, [r3, #12]
}
 800fb9a:	46c0      	nop			@ (mov r8, r8)
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	b004      	add	sp, #16
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fbac:	f7ff f8d2 	bl	800ed54 <HAL_GetTick>
 800fbb0:	0003      	movs	r3, r0
 800fbb2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fbb4:	e00f      	b.n	800fbd6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	d00c      	beq.n	800fbd6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d007      	beq.n	800fbd2 <FLASH_WaitForLastOperation+0x2e>
 800fbc2:	f7ff f8c7 	bl	800ed54 <HAL_GetTick>
 800fbc6:	0002      	movs	r2, r0
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d201      	bcs.n	800fbd6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fbd2:	2303      	movs	r3, #3
 800fbd4:	e052      	b.n	800fc7c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fbd6:	4b2b      	ldr	r3, [pc, #172]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	4013      	ands	r3, r2
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d0e9      	beq.n	800fbb6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fbe2:	4b28      	ldr	r3, [pc, #160]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fbe4:	699b      	ldr	r3, [r3, #24]
 800fbe6:	2202      	movs	r2, #2
 800fbe8:	4013      	ands	r3, r2
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d102      	bne.n	800fbf4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fbee:	4b25      	ldr	r3, [pc, #148]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fbf0:	2202      	movs	r2, #2
 800fbf2:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fbf4:	4b23      	ldr	r3, [pc, #140]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fbf6:	699a      	ldr	r2, [r3, #24]
 800fbf8:	2380      	movs	r3, #128	@ 0x80
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	401a      	ands	r2, r3
 800fbfe:	2380      	movs	r3, #128	@ 0x80
 800fc00:	005b      	lsls	r3, r3, #1
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d035      	beq.n	800fc72 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fc06:	4b1f      	ldr	r3, [pc, #124]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fc08:	699a      	ldr	r2, [r3, #24]
 800fc0a:	2380      	movs	r3, #128	@ 0x80
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fc10:	2380      	movs	r3, #128	@ 0x80
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d02c      	beq.n	800fc72 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fc18:	4b1a      	ldr	r3, [pc, #104]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fc1a:	699a      	ldr	r2, [r3, #24]
 800fc1c:	2380      	movs	r3, #128	@ 0x80
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fc22:	2380      	movs	r3, #128	@ 0x80
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d023      	beq.n	800fc72 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fc2a:	4b16      	ldr	r3, [pc, #88]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fc2c:	699a      	ldr	r2, [r3, #24]
 800fc2e:	2380      	movs	r3, #128	@ 0x80
 800fc30:	011b      	lsls	r3, r3, #4
 800fc32:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fc34:	2380      	movs	r3, #128	@ 0x80
 800fc36:	011b      	lsls	r3, r3, #4
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d01a      	beq.n	800fc72 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fc3c:	4b11      	ldr	r3, [pc, #68]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fc3e:	699a      	ldr	r2, [r3, #24]
 800fc40:	2380      	movs	r3, #128	@ 0x80
 800fc42:	019b      	lsls	r3, r3, #6
 800fc44:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fc46:	2380      	movs	r3, #128	@ 0x80
 800fc48:	019b      	lsls	r3, r3, #6
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d011      	beq.n	800fc72 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fc50:	699a      	ldr	r2, [r3, #24]
 800fc52:	2380      	movs	r3, #128	@ 0x80
 800fc54:	029b      	lsls	r3, r3, #10
 800fc56:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fc58:	2380      	movs	r3, #128	@ 0x80
 800fc5a:	029b      	lsls	r3, r3, #10
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d008      	beq.n	800fc72 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fc60:	4b08      	ldr	r3, [pc, #32]	@ (800fc84 <FLASH_WaitForLastOperation+0xe0>)
 800fc62:	699a      	ldr	r2, [r3, #24]
 800fc64:	2380      	movs	r3, #128	@ 0x80
 800fc66:	025b      	lsls	r3, r3, #9
 800fc68:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fc6a:	2380      	movs	r3, #128	@ 0x80
 800fc6c:	025b      	lsls	r3, r3, #9
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d103      	bne.n	800fc7a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fc72:	f000 f809 	bl	800fc88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
 800fc78:	e000      	b.n	800fc7c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	0018      	movs	r0, r3
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	b004      	add	sp, #16
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	40022000 	.word	0x40022000

0800fc88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fc92:	4b49      	ldr	r3, [pc, #292]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fc94:	699a      	ldr	r2, [r3, #24]
 800fc96:	2380      	movs	r3, #128	@ 0x80
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	401a      	ands	r2, r3
 800fc9c:	2380      	movs	r3, #128	@ 0x80
 800fc9e:	005b      	lsls	r3, r3, #1
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d10a      	bne.n	800fcba <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fca4:	4b45      	ldr	r3, [pc, #276]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	2202      	movs	r2, #2
 800fcaa:	431a      	orrs	r2, r3
 800fcac:	4b43      	ldr	r3, [pc, #268]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fcae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2280      	movs	r2, #128	@ 0x80
 800fcb4:	0052      	lsls	r2, r2, #1
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fcba:	4b3f      	ldr	r3, [pc, #252]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fcbc:	699a      	ldr	r2, [r3, #24]
 800fcbe:	2380      	movs	r3, #128	@ 0x80
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	401a      	ands	r2, r3
 800fcc4:	2380      	movs	r3, #128	@ 0x80
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d10a      	bne.n	800fce2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fccc:	4b3b      	ldr	r3, [pc, #236]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fcce:	695b      	ldr	r3, [r3, #20]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	431a      	orrs	r2, r3
 800fcd4:	4b39      	ldr	r3, [pc, #228]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fcd6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2280      	movs	r2, #128	@ 0x80
 800fcdc:	0092      	lsls	r2, r2, #2
 800fcde:	4313      	orrs	r3, r2
 800fce0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fce2:	4b35      	ldr	r3, [pc, #212]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fce4:	699a      	ldr	r2, [r3, #24]
 800fce6:	2380      	movs	r3, #128	@ 0x80
 800fce8:	00db      	lsls	r3, r3, #3
 800fcea:	401a      	ands	r2, r3
 800fcec:	2380      	movs	r3, #128	@ 0x80
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d10a      	bne.n	800fd0a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fcf4:	4b31      	ldr	r3, [pc, #196]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fcf6:	695b      	ldr	r3, [r3, #20]
 800fcf8:	2208      	movs	r2, #8
 800fcfa:	431a      	orrs	r2, r3
 800fcfc:	4b2f      	ldr	r3, [pc, #188]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fcfe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2280      	movs	r2, #128	@ 0x80
 800fd04:	00d2      	lsls	r2, r2, #3
 800fd06:	4313      	orrs	r3, r2
 800fd08:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fd0a:	4b2b      	ldr	r3, [pc, #172]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fd0c:	699a      	ldr	r2, [r3, #24]
 800fd0e:	2380      	movs	r3, #128	@ 0x80
 800fd10:	011b      	lsls	r3, r3, #4
 800fd12:	401a      	ands	r2, r3
 800fd14:	2380      	movs	r3, #128	@ 0x80
 800fd16:	011b      	lsls	r3, r3, #4
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d10a      	bne.n	800fd32 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fd1c:	4b27      	ldr	r3, [pc, #156]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd1e:	695b      	ldr	r3, [r3, #20]
 800fd20:	2204      	movs	r2, #4
 800fd22:	431a      	orrs	r2, r3
 800fd24:	4b25      	ldr	r3, [pc, #148]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd26:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2280      	movs	r2, #128	@ 0x80
 800fd2c:	0112      	lsls	r2, r2, #4
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fd32:	4b21      	ldr	r3, [pc, #132]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fd34:	699a      	ldr	r2, [r3, #24]
 800fd36:	2380      	movs	r3, #128	@ 0x80
 800fd38:	019b      	lsls	r3, r3, #6
 800fd3a:	401a      	ands	r2, r3
 800fd3c:	2380      	movs	r3, #128	@ 0x80
 800fd3e:	019b      	lsls	r3, r3, #6
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d10a      	bne.n	800fd5a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fd44:	4b1d      	ldr	r3, [pc, #116]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	2210      	movs	r2, #16
 800fd4a:	431a      	orrs	r2, r3
 800fd4c:	4b1b      	ldr	r3, [pc, #108]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2280      	movs	r2, #128	@ 0x80
 800fd54:	0192      	lsls	r2, r2, #6
 800fd56:	4313      	orrs	r3, r2
 800fd58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fd5a:	4b17      	ldr	r3, [pc, #92]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fd5c:	699a      	ldr	r2, [r3, #24]
 800fd5e:	2380      	movs	r3, #128	@ 0x80
 800fd60:	029b      	lsls	r3, r3, #10
 800fd62:	401a      	ands	r2, r3
 800fd64:	2380      	movs	r3, #128	@ 0x80
 800fd66:	029b      	lsls	r3, r3, #10
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d109      	bne.n	800fd80 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fd6c:	4b13      	ldr	r3, [pc, #76]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	2220      	movs	r2, #32
 800fd72:	431a      	orrs	r2, r3
 800fd74:	4b11      	ldr	r3, [pc, #68]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd76:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2220      	movs	r2, #32
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fd80:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fd82:	699a      	ldr	r2, [r3, #24]
 800fd84:	2380      	movs	r3, #128	@ 0x80
 800fd86:	025b      	lsls	r3, r3, #9
 800fd88:	401a      	ands	r2, r3
 800fd8a:	2380      	movs	r3, #128	@ 0x80
 800fd8c:	025b      	lsls	r3, r3, #9
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d10a      	bne.n	800fda8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fd92:	4b0a      	ldr	r3, [pc, #40]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd94:	695b      	ldr	r3, [r3, #20]
 800fd96:	2240      	movs	r2, #64	@ 0x40
 800fd98:	431a      	orrs	r2, r3
 800fd9a:	4b08      	ldr	r3, [pc, #32]	@ (800fdbc <FLASH_SetErrorCode+0x134>)
 800fd9c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2280      	movs	r2, #128	@ 0x80
 800fda2:	0252      	lsls	r2, r2, #9
 800fda4:	4313      	orrs	r3, r2
 800fda6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fda8:	4b03      	ldr	r3, [pc, #12]	@ (800fdb8 <FLASH_SetErrorCode+0x130>)
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	619a      	str	r2, [r3, #24]
}  
 800fdae:	46c0      	nop			@ (mov r8, r8)
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	b002      	add	sp, #8
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	46c0      	nop			@ (mov r8, r8)
 800fdb8:	40022000 	.word	0x40022000
 800fdbc:	200023b8 	.word	0x200023b8

0800fdc0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fdc6:	4b12      	ldr	r3, [pc, #72]	@ (800fe10 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	4013      	ands	r3, r2
 800fdce:	d019      	beq.n	800fe04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdd0:	f3ef 8310 	mrs	r3, PRIMASK
 800fdd4:	607b      	str	r3, [r7, #4]
  return(result);
 800fdd6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800fdd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdda:	b672      	cpsid	i
}
 800fddc:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800fdde:	4b0c      	ldr	r3, [pc, #48]	@ (800fe10 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fde0:	4a0c      	ldr	r2, [pc, #48]	@ (800fe14 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800fde2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800fde4:	4b0a      	ldr	r3, [pc, #40]	@ (800fe10 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fde6:	4a0c      	ldr	r2, [pc, #48]	@ (800fe18 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800fde8:	60da      	str	r2, [r3, #12]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	f383 8810 	msr	PRIMASK, r3
}
 800fdf4:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fdf6:	4b06      	ldr	r3, [pc, #24]	@ (800fe10 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	d001      	beq.n	800fe04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	e000      	b.n	800fe06 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	0018      	movs	r0, r3
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	b004      	add	sp, #16
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	46c0      	nop			@ (mov r8, r8)
 800fe10:	40022000 	.word	0x40022000
 800fe14:	89abcdef 	.word	0x89abcdef
 800fe18:	02030405 	.word	0x02030405

0800fe1c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800fe20:	4b04      	ldr	r3, [pc, #16]	@ (800fe34 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fe22:	685a      	ldr	r2, [r3, #4]
 800fe24:	4b03      	ldr	r3, [pc, #12]	@ (800fe34 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fe26:	2101      	movs	r1, #1
 800fe28:	430a      	orrs	r2, r1
 800fe2a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	0018      	movs	r0, r3
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	40022000 	.word	0x40022000

0800fe38 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800fe38:	b5b0      	push	{r4, r5, r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe40:	250f      	movs	r5, #15
 800fe42:	197b      	adds	r3, r7, r5
 800fe44:	2200      	movs	r2, #0
 800fe46:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe48:	197c      	adds	r4, r7, r5
 800fe4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fe88 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fe4c:	0018      	movs	r0, r3
 800fe4e:	f7ff fea9 	bl	800fba4 <FLASH_WaitForLastOperation>
 800fe52:	0003      	movs	r3, r0
 800fe54:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fe56:	0029      	movs	r1, r5
 800fe58:	187b      	adds	r3, r7, r1
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10c      	bne.n	800fe7a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fe60:	4b0a      	ldr	r3, [pc, #40]	@ (800fe8c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe6c:	187c      	adds	r4, r7, r1
 800fe6e:	4b06      	ldr	r3, [pc, #24]	@ (800fe88 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fe70:	0018      	movs	r0, r3
 800fe72:	f7ff fe97 	bl	800fba4 <FLASH_WaitForLastOperation>
 800fe76:	0003      	movs	r3, r0
 800fe78:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800fe7a:	230f      	movs	r3, #15
 800fe7c:	18fb      	adds	r3, r7, r3
 800fe7e:	781b      	ldrb	r3, [r3, #0]
}  
 800fe80:	0018      	movs	r0, r3
 800fe82:	46bd      	mov	sp, r7
 800fe84:	b004      	add	sp, #16
 800fe86:	bdb0      	pop	{r4, r5, r7, pc}
 800fe88:	0000c350 	.word	0x0000c350
 800fe8c:	200023b8 	.word	0x200023b8

0800fe90 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800fe90:	b5b0      	push	{r4, r5, r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe9c:	2317      	movs	r3, #23
 800fe9e:	18fb      	adds	r3, r7, r3
 800fea0:	2201      	movs	r2, #1
 800fea2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fea4:	4b24      	ldr	r3, [pc, #144]	@ (800ff38 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fea6:	7c1b      	ldrb	r3, [r3, #16]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d101      	bne.n	800feb0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800feac:	2302      	movs	r3, #2
 800feae:	e03e      	b.n	800ff2e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800feb0:	4b21      	ldr	r3, [pc, #132]	@ (800ff38 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800feb2:	2201      	movs	r2, #1
 800feb4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800feb6:	2517      	movs	r5, #23
 800feb8:	197c      	adds	r4, r7, r5
 800feba:	4b20      	ldr	r3, [pc, #128]	@ (800ff3c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800febc:	0018      	movs	r0, r3
 800febe:	f7ff fe71 	bl	800fba4 <FLASH_WaitForLastOperation>
 800fec2:	0003      	movs	r3, r0
 800fec4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fec6:	197b      	adds	r3, r7, r5
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d129      	bne.n	800ff22 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fece:	4b1a      	ldr	r3, [pc, #104]	@ (800ff38 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	d103      	bne.n	800fee2 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	e013      	b.n	800ff0a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d104      	bne.n	800fef2 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	b292      	uxth	r2, r2
 800feee:	801a      	strh	r2, [r3, #0]
 800fef0:	e00b      	b.n	800ff0a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d104      	bne.n	800ff02 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	b2d2      	uxtb	r2, r2
 800fefe:	701a      	strb	r2, [r3, #0]
 800ff00:	e003      	b.n	800ff0a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800ff02:	2317      	movs	r3, #23
 800ff04:	18fb      	adds	r3, r7, r3
 800ff06:	2201      	movs	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800ff0a:	2217      	movs	r2, #23
 800ff0c:	18bb      	adds	r3, r7, r2
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d106      	bne.n	800ff22 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ff14:	18bc      	adds	r4, r7, r2
 800ff16:	4b09      	ldr	r3, [pc, #36]	@ (800ff3c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ff18:	0018      	movs	r0, r3
 800ff1a:	f7ff fe43 	bl	800fba4 <FLASH_WaitForLastOperation>
 800ff1e:	0003      	movs	r3, r0
 800ff20:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ff22:	4b05      	ldr	r3, [pc, #20]	@ (800ff38 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	741a      	strb	r2, [r3, #16]

  return status;
 800ff28:	2317      	movs	r3, #23
 800ff2a:	18fb      	adds	r3, r7, r3
 800ff2c:	781b      	ldrb	r3, [r3, #0]
}
 800ff2e:	0018      	movs	r0, r3
 800ff30:	46bd      	mov	sp, r7
 800ff32:	b006      	add	sp, #24
 800ff34:	bdb0      	pop	{r4, r5, r7, pc}
 800ff36:	46c0      	nop			@ (mov r8, r8)
 800ff38:	200023b8 	.word	0x200023b8
 800ff3c:	0000c350 	.word	0x0000c350

0800ff40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800ff52:	2300      	movs	r3, #0
 800ff54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ff56:	e155      	b.n	8010204 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2101      	movs	r1, #1
 800ff5e:	697a      	ldr	r2, [r7, #20]
 800ff60:	4091      	lsls	r1, r2
 800ff62:	000a      	movs	r2, r1
 800ff64:	4013      	ands	r3, r2
 800ff66:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d100      	bne.n	800ff70 <HAL_GPIO_Init+0x30>
 800ff6e:	e146      	b.n	80101fe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	2203      	movs	r2, #3
 800ff76:	4013      	ands	r3, r2
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d005      	beq.n	800ff88 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	2203      	movs	r2, #3
 800ff82:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ff84:	2b02      	cmp	r3, #2
 800ff86:	d130      	bne.n	800ffea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	005b      	lsls	r3, r3, #1
 800ff92:	2203      	movs	r2, #3
 800ff94:	409a      	lsls	r2, r3
 800ff96:	0013      	movs	r3, r2
 800ff98:	43da      	mvns	r2, r3
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	68da      	ldr	r2, [r3, #12]
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	409a      	lsls	r2, r3
 800ffaa:	0013      	movs	r3, r2
 800ffac:	693a      	ldr	r2, [r7, #16]
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	693a      	ldr	r2, [r7, #16]
 800ffb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	409a      	lsls	r2, r3
 800ffc4:	0013      	movs	r3, r2
 800ffc6:	43da      	mvns	r2, r3
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	4013      	ands	r3, r2
 800ffcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	091b      	lsrs	r3, r3, #4
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	401a      	ands	r2, r3
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	409a      	lsls	r2, r3
 800ffdc:	0013      	movs	r3, r2
 800ffde:	693a      	ldr	r2, [r7, #16]
 800ffe0:	4313      	orrs	r3, r2
 800ffe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	693a      	ldr	r2, [r7, #16]
 800ffe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	2203      	movs	r2, #3
 800fff0:	4013      	ands	r3, r2
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d017      	beq.n	8010026 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	2203      	movs	r2, #3
 8010002:	409a      	lsls	r2, r3
 8010004:	0013      	movs	r3, r2
 8010006:	43da      	mvns	r2, r3
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	4013      	ands	r3, r2
 801000c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	689a      	ldr	r2, [r3, #8]
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	409a      	lsls	r2, r3
 8010018:	0013      	movs	r3, r2
 801001a:	693a      	ldr	r2, [r7, #16]
 801001c:	4313      	orrs	r3, r2
 801001e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	693a      	ldr	r2, [r7, #16]
 8010024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	2203      	movs	r2, #3
 801002c:	4013      	ands	r3, r2
 801002e:	2b02      	cmp	r3, #2
 8010030:	d123      	bne.n	801007a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	08da      	lsrs	r2, r3, #3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	3208      	adds	r2, #8
 801003a:	0092      	lsls	r2, r2, #2
 801003c:	58d3      	ldr	r3, [r2, r3]
 801003e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2207      	movs	r2, #7
 8010044:	4013      	ands	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	220f      	movs	r2, #15
 801004a:	409a      	lsls	r2, r3
 801004c:	0013      	movs	r3, r2
 801004e:	43da      	mvns	r2, r3
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	4013      	ands	r3, r2
 8010054:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	691a      	ldr	r2, [r3, #16]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	2107      	movs	r1, #7
 801005e:	400b      	ands	r3, r1
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	409a      	lsls	r2, r3
 8010064:	0013      	movs	r3, r2
 8010066:	693a      	ldr	r2, [r7, #16]
 8010068:	4313      	orrs	r3, r2
 801006a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	08da      	lsrs	r2, r3, #3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	3208      	adds	r2, #8
 8010074:	0092      	lsls	r2, r2, #2
 8010076:	6939      	ldr	r1, [r7, #16]
 8010078:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	005b      	lsls	r3, r3, #1
 8010084:	2203      	movs	r2, #3
 8010086:	409a      	lsls	r2, r3
 8010088:	0013      	movs	r3, r2
 801008a:	43da      	mvns	r2, r3
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	4013      	ands	r3, r2
 8010090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	2203      	movs	r2, #3
 8010098:	401a      	ands	r2, r3
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	005b      	lsls	r3, r3, #1
 801009e:	409a      	lsls	r2, r3
 80100a0:	0013      	movs	r3, r2
 80100a2:	693a      	ldr	r2, [r7, #16]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	693a      	ldr	r2, [r7, #16]
 80100ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	685a      	ldr	r2, [r3, #4]
 80100b2:	23c0      	movs	r3, #192	@ 0xc0
 80100b4:	029b      	lsls	r3, r3, #10
 80100b6:	4013      	ands	r3, r2
 80100b8:	d100      	bne.n	80100bc <HAL_GPIO_Init+0x17c>
 80100ba:	e0a0      	b.n	80101fe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80100bc:	4b57      	ldr	r3, [pc, #348]	@ (801021c <HAL_GPIO_Init+0x2dc>)
 80100be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100c0:	4b56      	ldr	r3, [pc, #344]	@ (801021c <HAL_GPIO_Init+0x2dc>)
 80100c2:	2101      	movs	r1, #1
 80100c4:	430a      	orrs	r2, r1
 80100c6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80100c8:	4a55      	ldr	r2, [pc, #340]	@ (8010220 <HAL_GPIO_Init+0x2e0>)
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	089b      	lsrs	r3, r3, #2
 80100ce:	3302      	adds	r3, #2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	589b      	ldr	r3, [r3, r2]
 80100d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	2203      	movs	r2, #3
 80100da:	4013      	ands	r3, r2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	220f      	movs	r2, #15
 80100e0:	409a      	lsls	r2, r3
 80100e2:	0013      	movs	r3, r2
 80100e4:	43da      	mvns	r2, r3
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	4013      	ands	r3, r2
 80100ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	23a0      	movs	r3, #160	@ 0xa0
 80100f0:	05db      	lsls	r3, r3, #23
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d01f      	beq.n	8010136 <HAL_GPIO_Init+0x1f6>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4a4a      	ldr	r2, [pc, #296]	@ (8010224 <HAL_GPIO_Init+0x2e4>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d019      	beq.n	8010132 <HAL_GPIO_Init+0x1f2>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4a49      	ldr	r2, [pc, #292]	@ (8010228 <HAL_GPIO_Init+0x2e8>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d013      	beq.n	801012e <HAL_GPIO_Init+0x1ee>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a48      	ldr	r2, [pc, #288]	@ (801022c <HAL_GPIO_Init+0x2ec>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d00d      	beq.n	801012a <HAL_GPIO_Init+0x1ea>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4a47      	ldr	r2, [pc, #284]	@ (8010230 <HAL_GPIO_Init+0x2f0>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d007      	beq.n	8010126 <HAL_GPIO_Init+0x1e6>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4a46      	ldr	r2, [pc, #280]	@ (8010234 <HAL_GPIO_Init+0x2f4>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d101      	bne.n	8010122 <HAL_GPIO_Init+0x1e2>
 801011e:	2305      	movs	r3, #5
 8010120:	e00a      	b.n	8010138 <HAL_GPIO_Init+0x1f8>
 8010122:	2306      	movs	r3, #6
 8010124:	e008      	b.n	8010138 <HAL_GPIO_Init+0x1f8>
 8010126:	2304      	movs	r3, #4
 8010128:	e006      	b.n	8010138 <HAL_GPIO_Init+0x1f8>
 801012a:	2303      	movs	r3, #3
 801012c:	e004      	b.n	8010138 <HAL_GPIO_Init+0x1f8>
 801012e:	2302      	movs	r3, #2
 8010130:	e002      	b.n	8010138 <HAL_GPIO_Init+0x1f8>
 8010132:	2301      	movs	r3, #1
 8010134:	e000      	b.n	8010138 <HAL_GPIO_Init+0x1f8>
 8010136:	2300      	movs	r3, #0
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	2103      	movs	r1, #3
 801013c:	400a      	ands	r2, r1
 801013e:	0092      	lsls	r2, r2, #2
 8010140:	4093      	lsls	r3, r2
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	4313      	orrs	r3, r2
 8010146:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010148:	4935      	ldr	r1, [pc, #212]	@ (8010220 <HAL_GPIO_Init+0x2e0>)
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	089b      	lsrs	r3, r3, #2
 801014e:	3302      	adds	r3, #2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010156:	4b38      	ldr	r3, [pc, #224]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	43da      	mvns	r2, r3
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	4013      	ands	r3, r2
 8010164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	685a      	ldr	r2, [r3, #4]
 801016a:	2380      	movs	r3, #128	@ 0x80
 801016c:	035b      	lsls	r3, r3, #13
 801016e:	4013      	ands	r3, r2
 8010170:	d003      	beq.n	801017a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010172:	693a      	ldr	r2, [r7, #16]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	4313      	orrs	r3, r2
 8010178:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801017a:	4b2f      	ldr	r3, [pc, #188]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 801017c:	693a      	ldr	r2, [r7, #16]
 801017e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010180:	4b2d      	ldr	r3, [pc, #180]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	43da      	mvns	r2, r3
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	4013      	ands	r3, r2
 801018e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	2380      	movs	r3, #128	@ 0x80
 8010196:	039b      	lsls	r3, r3, #14
 8010198:	4013      	ands	r3, r2
 801019a:	d003      	beq.n	80101a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801019c:	693a      	ldr	r2, [r7, #16]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	4313      	orrs	r3, r2
 80101a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80101a4:	4b24      	ldr	r3, [pc, #144]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 80101a6:	693a      	ldr	r2, [r7, #16]
 80101a8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80101aa:	4b23      	ldr	r3, [pc, #140]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	43da      	mvns	r2, r3
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	4013      	ands	r3, r2
 80101b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	685a      	ldr	r2, [r3, #4]
 80101be:	2380      	movs	r3, #128	@ 0x80
 80101c0:	029b      	lsls	r3, r3, #10
 80101c2:	4013      	ands	r3, r2
 80101c4:	d003      	beq.n	80101ce <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80101c6:	693a      	ldr	r2, [r7, #16]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80101ce:	4b1a      	ldr	r3, [pc, #104]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80101d4:	4b18      	ldr	r3, [pc, #96]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	43da      	mvns	r2, r3
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	4013      	ands	r3, r2
 80101e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685a      	ldr	r2, [r3, #4]
 80101e8:	2380      	movs	r3, #128	@ 0x80
 80101ea:	025b      	lsls	r3, r3, #9
 80101ec:	4013      	ands	r3, r2
 80101ee:	d003      	beq.n	80101f8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80101f0:	693a      	ldr	r2, [r7, #16]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	4313      	orrs	r3, r2
 80101f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80101f8:	4b0f      	ldr	r3, [pc, #60]	@ (8010238 <HAL_GPIO_Init+0x2f8>)
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	3301      	adds	r3, #1
 8010202:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	40da      	lsrs	r2, r3
 801020c:	1e13      	subs	r3, r2, #0
 801020e:	d000      	beq.n	8010212 <HAL_GPIO_Init+0x2d2>
 8010210:	e6a2      	b.n	800ff58 <HAL_GPIO_Init+0x18>
  }
}
 8010212:	46c0      	nop			@ (mov r8, r8)
 8010214:	46c0      	nop			@ (mov r8, r8)
 8010216:	46bd      	mov	sp, r7
 8010218:	b006      	add	sp, #24
 801021a:	bd80      	pop	{r7, pc}
 801021c:	40021000 	.word	0x40021000
 8010220:	40010000 	.word	0x40010000
 8010224:	50000400 	.word	0x50000400
 8010228:	50000800 	.word	0x50000800
 801022c:	50000c00 	.word	0x50000c00
 8010230:	50001000 	.word	0x50001000
 8010234:	50001c00 	.word	0x50001c00
 8010238:	40010400 	.word	0x40010400

0801023c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	000a      	movs	r2, r1
 8010246:	1cbb      	adds	r3, r7, #2
 8010248:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	1cba      	adds	r2, r7, #2
 8010250:	8812      	ldrh	r2, [r2, #0]
 8010252:	4013      	ands	r3, r2
 8010254:	d004      	beq.n	8010260 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010256:	230f      	movs	r3, #15
 8010258:	18fb      	adds	r3, r7, r3
 801025a:	2201      	movs	r2, #1
 801025c:	701a      	strb	r2, [r3, #0]
 801025e:	e003      	b.n	8010268 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010260:	230f      	movs	r3, #15
 8010262:	18fb      	adds	r3, r7, r3
 8010264:	2200      	movs	r2, #0
 8010266:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010268:	230f      	movs	r3, #15
 801026a:	18fb      	adds	r3, r7, r3
 801026c:	781b      	ldrb	r3, [r3, #0]
}
 801026e:	0018      	movs	r0, r3
 8010270:	46bd      	mov	sp, r7
 8010272:	b004      	add	sp, #16
 8010274:	bd80      	pop	{r7, pc}

08010276 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	0008      	movs	r0, r1
 8010280:	0011      	movs	r1, r2
 8010282:	1cbb      	adds	r3, r7, #2
 8010284:	1c02      	adds	r2, r0, #0
 8010286:	801a      	strh	r2, [r3, #0]
 8010288:	1c7b      	adds	r3, r7, #1
 801028a:	1c0a      	adds	r2, r1, #0
 801028c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801028e:	1c7b      	adds	r3, r7, #1
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d004      	beq.n	80102a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010296:	1cbb      	adds	r3, r7, #2
 8010298:	881a      	ldrh	r2, [r3, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801029e:	e003      	b.n	80102a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80102a0:	1cbb      	adds	r3, r7, #2
 80102a2:	881a      	ldrh	r2, [r3, #0]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80102a8:	46c0      	nop			@ (mov r8, r8)
 80102aa:	46bd      	mov	sp, r7
 80102ac:	b002      	add	sp, #8
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	0002      	movs	r2, r0
 80102b8:	1dbb      	adds	r3, r7, #6
 80102ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80102bc:	4b09      	ldr	r3, [pc, #36]	@ (80102e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	1dba      	adds	r2, r7, #6
 80102c2:	8812      	ldrh	r2, [r2, #0]
 80102c4:	4013      	ands	r3, r2
 80102c6:	d008      	beq.n	80102da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80102c8:	4b06      	ldr	r3, [pc, #24]	@ (80102e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80102ca:	1dba      	adds	r2, r7, #6
 80102cc:	8812      	ldrh	r2, [r2, #0]
 80102ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80102d0:	1dbb      	adds	r3, r7, #6
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	0018      	movs	r0, r3
 80102d6:	f7f7 fffb 	bl	80082d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80102da:	46c0      	nop			@ (mov r8, r8)
 80102dc:	46bd      	mov	sp, r7
 80102de:	b002      	add	sp, #8
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	46c0      	nop			@ (mov r8, r8)
 80102e4:	40010400 	.word	0x40010400

080102e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80102f6:	2301      	movs	r3, #1
 80102f8:	e082      	b.n	8010400 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2241      	movs	r2, #65	@ 0x41
 80102fe:	5c9b      	ldrb	r3, [r3, r2]
 8010300:	b2db      	uxtb	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d107      	bne.n	8010316 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2240      	movs	r2, #64	@ 0x40
 801030a:	2100      	movs	r1, #0
 801030c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	0018      	movs	r0, r3
 8010312:	f7f7 fabb 	bl	800788c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2241      	movs	r2, #65	@ 0x41
 801031a:	2124      	movs	r1, #36	@ 0x24
 801031c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2101      	movs	r1, #1
 801032a:	438a      	bics	r2, r1
 801032c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4934      	ldr	r1, [pc, #208]	@ (8010408 <HAL_I2C_Init+0x120>)
 8010338:	400a      	ands	r2, r1
 801033a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	689a      	ldr	r2, [r3, #8]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4931      	ldr	r1, [pc, #196]	@ (801040c <HAL_I2C_Init+0x124>)
 8010348:	400a      	ands	r2, r1
 801034a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d108      	bne.n	8010366 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	689a      	ldr	r2, [r3, #8]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2180      	movs	r1, #128	@ 0x80
 801035e:	0209      	lsls	r1, r1, #8
 8010360:	430a      	orrs	r2, r1
 8010362:	609a      	str	r2, [r3, #8]
 8010364:	e007      	b.n	8010376 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	689a      	ldr	r2, [r3, #8]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2184      	movs	r1, #132	@ 0x84
 8010370:	0209      	lsls	r1, r1, #8
 8010372:	430a      	orrs	r2, r1
 8010374:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	2b02      	cmp	r3, #2
 801037c:	d104      	bne.n	8010388 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2280      	movs	r2, #128	@ 0x80
 8010384:	0112      	lsls	r2, r2, #4
 8010386:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	685a      	ldr	r2, [r3, #4]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	491f      	ldr	r1, [pc, #124]	@ (8010410 <HAL_I2C_Init+0x128>)
 8010394:	430a      	orrs	r2, r1
 8010396:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	68da      	ldr	r2, [r3, #12]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	491a      	ldr	r1, [pc, #104]	@ (801040c <HAL_I2C_Init+0x124>)
 80103a4:	400a      	ands	r2, r1
 80103a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	691a      	ldr	r2, [r3, #16]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	695b      	ldr	r3, [r3, #20]
 80103b0:	431a      	orrs	r2, r3
 80103b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	699b      	ldr	r3, [r3, #24]
 80103b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	430a      	orrs	r2, r1
 80103c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	69d9      	ldr	r1, [r3, #28]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1a      	ldr	r2, [r3, #32]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	430a      	orrs	r2, r1
 80103d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2101      	movs	r1, #1
 80103de:	430a      	orrs	r2, r1
 80103e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2241      	movs	r2, #65	@ 0x41
 80103ec:	2120      	movs	r1, #32
 80103ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2242      	movs	r2, #66	@ 0x42
 80103fa:	2100      	movs	r1, #0
 80103fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80103fe:	2300      	movs	r3, #0
}
 8010400:	0018      	movs	r0, r3
 8010402:	46bd      	mov	sp, r7
 8010404:	b002      	add	sp, #8
 8010406:	bd80      	pop	{r7, pc}
 8010408:	f0ffffff 	.word	0xf0ffffff
 801040c:	ffff7fff 	.word	0xffff7fff
 8010410:	02008000 	.word	0x02008000

08010414 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010414:	b590      	push	{r4, r7, lr}
 8010416:	b089      	sub	sp, #36	@ 0x24
 8010418:	af02      	add	r7, sp, #8
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	0008      	movs	r0, r1
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	0019      	movs	r1, r3
 8010422:	230a      	movs	r3, #10
 8010424:	18fb      	adds	r3, r7, r3
 8010426:	1c02      	adds	r2, r0, #0
 8010428:	801a      	strh	r2, [r3, #0]
 801042a:	2308      	movs	r3, #8
 801042c:	18fb      	adds	r3, r7, r3
 801042e:	1c0a      	adds	r2, r1, #0
 8010430:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2241      	movs	r2, #65	@ 0x41
 8010436:	5c9b      	ldrb	r3, [r3, r2]
 8010438:	b2db      	uxtb	r3, r3
 801043a:	2b20      	cmp	r3, #32
 801043c:	d000      	beq.n	8010440 <HAL_I2C_Master_Transmit+0x2c>
 801043e:	e0e7      	b.n	8010610 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2240      	movs	r2, #64	@ 0x40
 8010444:	5c9b      	ldrb	r3, [r3, r2]
 8010446:	2b01      	cmp	r3, #1
 8010448:	d101      	bne.n	801044e <HAL_I2C_Master_Transmit+0x3a>
 801044a:	2302      	movs	r3, #2
 801044c:	e0e1      	b.n	8010612 <HAL_I2C_Master_Transmit+0x1fe>
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2240      	movs	r2, #64	@ 0x40
 8010452:	2101      	movs	r1, #1
 8010454:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010456:	f7fe fc7d 	bl	800ed54 <HAL_GetTick>
 801045a:	0003      	movs	r3, r0
 801045c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801045e:	2380      	movs	r3, #128	@ 0x80
 8010460:	0219      	lsls	r1, r3, #8
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	2319      	movs	r3, #25
 801046a:	2201      	movs	r2, #1
 801046c:	f001 ff98 	bl	80123a0 <I2C_WaitOnFlagUntilTimeout>
 8010470:	1e03      	subs	r3, r0, #0
 8010472:	d001      	beq.n	8010478 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010474:	2301      	movs	r3, #1
 8010476:	e0cc      	b.n	8010612 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2241      	movs	r2, #65	@ 0x41
 801047c:	2121      	movs	r1, #33	@ 0x21
 801047e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2242      	movs	r2, #66	@ 0x42
 8010484:	2110      	movs	r1, #16
 8010486:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2200      	movs	r2, #0
 801048c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2208      	movs	r2, #8
 8010498:	18ba      	adds	r2, r7, r2
 801049a:	8812      	ldrh	r2, [r2, #0]
 801049c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2200      	movs	r2, #0
 80104a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	2bff      	cmp	r3, #255	@ 0xff
 80104ac:	d911      	bls.n	80104d2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	22ff      	movs	r2, #255	@ 0xff
 80104b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	2380      	movs	r3, #128	@ 0x80
 80104bc:	045c      	lsls	r4, r3, #17
 80104be:	230a      	movs	r3, #10
 80104c0:	18fb      	adds	r3, r7, r3
 80104c2:	8819      	ldrh	r1, [r3, #0]
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	4b55      	ldr	r3, [pc, #340]	@ (801061c <HAL_I2C_Master_Transmit+0x208>)
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	0023      	movs	r3, r4
 80104cc:	f002 f9ba 	bl	8012844 <I2C_TransferConfig>
 80104d0:	e075      	b.n	80105be <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	2380      	movs	r3, #128	@ 0x80
 80104e4:	049c      	lsls	r4, r3, #18
 80104e6:	230a      	movs	r3, #10
 80104e8:	18fb      	adds	r3, r7, r3
 80104ea:	8819      	ldrh	r1, [r3, #0]
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	4b4b      	ldr	r3, [pc, #300]	@ (801061c <HAL_I2C_Master_Transmit+0x208>)
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	0023      	movs	r3, r4
 80104f4:	f002 f9a6 	bl	8012844 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80104f8:	e061      	b.n	80105be <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80104fa:	697a      	ldr	r2, [r7, #20]
 80104fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	0018      	movs	r0, r3
 8010502:	f001 ff9b 	bl	801243c <I2C_WaitOnTXISFlagUntilTimeout>
 8010506:	1e03      	subs	r3, r0, #0
 8010508:	d001      	beq.n	801050e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801050a:	2301      	movs	r3, #1
 801050c:	e081      	b.n	8010612 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010512:	781a      	ldrb	r2, [r3, #0]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801051e:	1c5a      	adds	r2, r3, #1
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010528:	b29b      	uxth	r3, r3
 801052a:	3b01      	subs	r3, #1
 801052c:	b29a      	uxth	r2, r3
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010536:	3b01      	subs	r3, #1
 8010538:	b29a      	uxth	r2, r3
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010542:	b29b      	uxth	r3, r3
 8010544:	2b00      	cmp	r3, #0
 8010546:	d03a      	beq.n	80105be <HAL_I2C_Master_Transmit+0x1aa>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801054c:	2b00      	cmp	r3, #0
 801054e:	d136      	bne.n	80105be <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	9300      	str	r3, [sp, #0]
 8010558:	0013      	movs	r3, r2
 801055a:	2200      	movs	r2, #0
 801055c:	2180      	movs	r1, #128	@ 0x80
 801055e:	f001 ff1f 	bl	80123a0 <I2C_WaitOnFlagUntilTimeout>
 8010562:	1e03      	subs	r3, r0, #0
 8010564:	d001      	beq.n	801056a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e053      	b.n	8010612 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801056e:	b29b      	uxth	r3, r3
 8010570:	2bff      	cmp	r3, #255	@ 0xff
 8010572:	d911      	bls.n	8010598 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	22ff      	movs	r2, #255	@ 0xff
 8010578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801057e:	b2da      	uxtb	r2, r3
 8010580:	2380      	movs	r3, #128	@ 0x80
 8010582:	045c      	lsls	r4, r3, #17
 8010584:	230a      	movs	r3, #10
 8010586:	18fb      	adds	r3, r7, r3
 8010588:	8819      	ldrh	r1, [r3, #0]
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	2300      	movs	r3, #0
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	0023      	movs	r3, r4
 8010592:	f002 f957 	bl	8012844 <I2C_TransferConfig>
 8010596:	e012      	b.n	80105be <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801059c:	b29a      	uxth	r2, r3
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105a6:	b2da      	uxtb	r2, r3
 80105a8:	2380      	movs	r3, #128	@ 0x80
 80105aa:	049c      	lsls	r4, r3, #18
 80105ac:	230a      	movs	r3, #10
 80105ae:	18fb      	adds	r3, r7, r3
 80105b0:	8819      	ldrh	r1, [r3, #0]
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	2300      	movs	r3, #0
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	0023      	movs	r3, r4
 80105ba:	f002 f943 	bl	8012844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d198      	bne.n	80104fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80105c8:	697a      	ldr	r2, [r7, #20]
 80105ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	0018      	movs	r0, r3
 80105d0:	f001 ff7a 	bl	80124c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80105d4:	1e03      	subs	r3, r0, #0
 80105d6:	d001      	beq.n	80105dc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80105d8:	2301      	movs	r3, #1
 80105da:	e01a      	b.n	8010612 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2220      	movs	r2, #32
 80105e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	490c      	ldr	r1, [pc, #48]	@ (8010620 <HAL_I2C_Master_Transmit+0x20c>)
 80105f0:	400a      	ands	r2, r1
 80105f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2241      	movs	r2, #65	@ 0x41
 80105f8:	2120      	movs	r1, #32
 80105fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2242      	movs	r2, #66	@ 0x42
 8010600:	2100      	movs	r1, #0
 8010602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2240      	movs	r2, #64	@ 0x40
 8010608:	2100      	movs	r1, #0
 801060a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801060c:	2300      	movs	r3, #0
 801060e:	e000      	b.n	8010612 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010610:	2302      	movs	r3, #2
  }
}
 8010612:	0018      	movs	r0, r3
 8010614:	46bd      	mov	sp, r7
 8010616:	b007      	add	sp, #28
 8010618:	bd90      	pop	{r4, r7, pc}
 801061a:	46c0      	nop			@ (mov r8, r8)
 801061c:	80002000 	.word	0x80002000
 8010620:	fe00e800 	.word	0xfe00e800

08010624 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010624:	b590      	push	{r4, r7, lr}
 8010626:	b089      	sub	sp, #36	@ 0x24
 8010628:	af02      	add	r7, sp, #8
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	0008      	movs	r0, r1
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	0019      	movs	r1, r3
 8010632:	230a      	movs	r3, #10
 8010634:	18fb      	adds	r3, r7, r3
 8010636:	1c02      	adds	r2, r0, #0
 8010638:	801a      	strh	r2, [r3, #0]
 801063a:	2308      	movs	r3, #8
 801063c:	18fb      	adds	r3, r7, r3
 801063e:	1c0a      	adds	r2, r1, #0
 8010640:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2241      	movs	r2, #65	@ 0x41
 8010646:	5c9b      	ldrb	r3, [r3, r2]
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b20      	cmp	r3, #32
 801064c:	d000      	beq.n	8010650 <HAL_I2C_Master_Receive+0x2c>
 801064e:	e0e8      	b.n	8010822 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2240      	movs	r2, #64	@ 0x40
 8010654:	5c9b      	ldrb	r3, [r3, r2]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d101      	bne.n	801065e <HAL_I2C_Master_Receive+0x3a>
 801065a:	2302      	movs	r3, #2
 801065c:	e0e2      	b.n	8010824 <HAL_I2C_Master_Receive+0x200>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2240      	movs	r2, #64	@ 0x40
 8010662:	2101      	movs	r1, #1
 8010664:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010666:	f7fe fb75 	bl	800ed54 <HAL_GetTick>
 801066a:	0003      	movs	r3, r0
 801066c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801066e:	2380      	movs	r3, #128	@ 0x80
 8010670:	0219      	lsls	r1, r3, #8
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	2319      	movs	r3, #25
 801067a:	2201      	movs	r2, #1
 801067c:	f001 fe90 	bl	80123a0 <I2C_WaitOnFlagUntilTimeout>
 8010680:	1e03      	subs	r3, r0, #0
 8010682:	d001      	beq.n	8010688 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010684:	2301      	movs	r3, #1
 8010686:	e0cd      	b.n	8010824 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2241      	movs	r2, #65	@ 0x41
 801068c:	2122      	movs	r1, #34	@ 0x22
 801068e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2242      	movs	r2, #66	@ 0x42
 8010694:	2110      	movs	r1, #16
 8010696:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2200      	movs	r2, #0
 801069c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2208      	movs	r2, #8
 80106a8:	18ba      	adds	r2, r7, r2
 80106aa:	8812      	ldrh	r2, [r2, #0]
 80106ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2200      	movs	r2, #0
 80106b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	2bff      	cmp	r3, #255	@ 0xff
 80106bc:	d911      	bls.n	80106e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	22ff      	movs	r2, #255	@ 0xff
 80106c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	2380      	movs	r3, #128	@ 0x80
 80106cc:	045c      	lsls	r4, r3, #17
 80106ce:	230a      	movs	r3, #10
 80106d0:	18fb      	adds	r3, r7, r3
 80106d2:	8819      	ldrh	r1, [r3, #0]
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	4b55      	ldr	r3, [pc, #340]	@ (801082c <HAL_I2C_Master_Receive+0x208>)
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	0023      	movs	r3, r4
 80106dc:	f002 f8b2 	bl	8012844 <I2C_TransferConfig>
 80106e0:	e076      	b.n	80107d0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	2380      	movs	r3, #128	@ 0x80
 80106f4:	049c      	lsls	r4, r3, #18
 80106f6:	230a      	movs	r3, #10
 80106f8:	18fb      	adds	r3, r7, r3
 80106fa:	8819      	ldrh	r1, [r3, #0]
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	4b4b      	ldr	r3, [pc, #300]	@ (801082c <HAL_I2C_Master_Receive+0x208>)
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	0023      	movs	r3, r4
 8010704:	f002 f89e 	bl	8012844 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010708:	e062      	b.n	80107d0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801070a:	697a      	ldr	r2, [r7, #20]
 801070c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	0018      	movs	r0, r3
 8010712:	f001 ff1d 	bl	8012550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010716:	1e03      	subs	r3, r0, #0
 8010718:	d001      	beq.n	801071e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801071a:	2301      	movs	r3, #1
 801071c:	e082      	b.n	8010824 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010728:	b2d2      	uxtb	r2, r2
 801072a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010730:	1c5a      	adds	r2, r3, #1
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801073a:	3b01      	subs	r3, #1
 801073c:	b29a      	uxth	r2, r3
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010746:	b29b      	uxth	r3, r3
 8010748:	3b01      	subs	r3, #1
 801074a:	b29a      	uxth	r2, r3
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010754:	b29b      	uxth	r3, r3
 8010756:	2b00      	cmp	r3, #0
 8010758:	d03a      	beq.n	80107d0 <HAL_I2C_Master_Receive+0x1ac>
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801075e:	2b00      	cmp	r3, #0
 8010760:	d136      	bne.n	80107d0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	9300      	str	r3, [sp, #0]
 801076a:	0013      	movs	r3, r2
 801076c:	2200      	movs	r2, #0
 801076e:	2180      	movs	r1, #128	@ 0x80
 8010770:	f001 fe16 	bl	80123a0 <I2C_WaitOnFlagUntilTimeout>
 8010774:	1e03      	subs	r3, r0, #0
 8010776:	d001      	beq.n	801077c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010778:	2301      	movs	r3, #1
 801077a:	e053      	b.n	8010824 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010780:	b29b      	uxth	r3, r3
 8010782:	2bff      	cmp	r3, #255	@ 0xff
 8010784:	d911      	bls.n	80107aa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	22ff      	movs	r2, #255	@ 0xff
 801078a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010790:	b2da      	uxtb	r2, r3
 8010792:	2380      	movs	r3, #128	@ 0x80
 8010794:	045c      	lsls	r4, r3, #17
 8010796:	230a      	movs	r3, #10
 8010798:	18fb      	adds	r3, r7, r3
 801079a:	8819      	ldrh	r1, [r3, #0]
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	2300      	movs	r3, #0
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	0023      	movs	r3, r4
 80107a4:	f002 f84e 	bl	8012844 <I2C_TransferConfig>
 80107a8:	e012      	b.n	80107d0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	2380      	movs	r3, #128	@ 0x80
 80107bc:	049c      	lsls	r4, r3, #18
 80107be:	230a      	movs	r3, #10
 80107c0:	18fb      	adds	r3, r7, r3
 80107c2:	8819      	ldrh	r1, [r3, #0]
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	2300      	movs	r3, #0
 80107c8:	9300      	str	r3, [sp, #0]
 80107ca:	0023      	movs	r3, r4
 80107cc:	f002 f83a 	bl	8012844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d197      	bne.n	801070a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	0018      	movs	r0, r3
 80107e2:	f001 fe71 	bl	80124c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80107e6:	1e03      	subs	r3, r0, #0
 80107e8:	d001      	beq.n	80107ee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	e01a      	b.n	8010824 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2220      	movs	r2, #32
 80107f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	490b      	ldr	r1, [pc, #44]	@ (8010830 <HAL_I2C_Master_Receive+0x20c>)
 8010802:	400a      	ands	r2, r1
 8010804:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2241      	movs	r2, #65	@ 0x41
 801080a:	2120      	movs	r1, #32
 801080c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2242      	movs	r2, #66	@ 0x42
 8010812:	2100      	movs	r1, #0
 8010814:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2240      	movs	r2, #64	@ 0x40
 801081a:	2100      	movs	r1, #0
 801081c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801081e:	2300      	movs	r3, #0
 8010820:	e000      	b.n	8010824 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010822:	2302      	movs	r3, #2
  }
}
 8010824:	0018      	movs	r0, r3
 8010826:	46bd      	mov	sp, r7
 8010828:	b007      	add	sp, #28
 801082a:	bd90      	pop	{r4, r7, pc}
 801082c:	80002400 	.word	0x80002400
 8010830:	fe00e800 	.word	0xfe00e800

08010834 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010834:	b5b0      	push	{r4, r5, r7, lr}
 8010836:	b088      	sub	sp, #32
 8010838:	af02      	add	r7, sp, #8
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	0008      	movs	r0, r1
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	0019      	movs	r1, r3
 8010842:	230a      	movs	r3, #10
 8010844:	18fb      	adds	r3, r7, r3
 8010846:	1c02      	adds	r2, r0, #0
 8010848:	801a      	strh	r2, [r3, #0]
 801084a:	2308      	movs	r3, #8
 801084c:	18fb      	adds	r3, r7, r3
 801084e:	1c0a      	adds	r2, r1, #0
 8010850:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2241      	movs	r2, #65	@ 0x41
 8010856:	5c9b      	ldrb	r3, [r3, r2]
 8010858:	b2db      	uxtb	r3, r3
 801085a:	2b20      	cmp	r3, #32
 801085c:	d000      	beq.n	8010860 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801085e:	e0dd      	b.n	8010a1c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	699a      	ldr	r2, [r3, #24]
 8010866:	2380      	movs	r3, #128	@ 0x80
 8010868:	021b      	lsls	r3, r3, #8
 801086a:	401a      	ands	r2, r3
 801086c:	2380      	movs	r3, #128	@ 0x80
 801086e:	021b      	lsls	r3, r3, #8
 8010870:	429a      	cmp	r2, r3
 8010872:	d101      	bne.n	8010878 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010874:	2302      	movs	r3, #2
 8010876:	e0d2      	b.n	8010a1e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2240      	movs	r2, #64	@ 0x40
 801087c:	5c9b      	ldrb	r3, [r3, r2]
 801087e:	2b01      	cmp	r3, #1
 8010880:	d101      	bne.n	8010886 <HAL_I2C_Master_Transmit_DMA+0x52>
 8010882:	2302      	movs	r3, #2
 8010884:	e0cb      	b.n	8010a1e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2240      	movs	r2, #64	@ 0x40
 801088a:	2101      	movs	r1, #1
 801088c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2241      	movs	r2, #65	@ 0x41
 8010892:	2121      	movs	r1, #33	@ 0x21
 8010894:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2242      	movs	r2, #66	@ 0x42
 801089a:	2110      	movs	r1, #16
 801089c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2200      	movs	r2, #0
 80108a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2208      	movs	r2, #8
 80108ae:	18ba      	adds	r2, r7, r2
 80108b0:	8812      	ldrh	r2, [r2, #0]
 80108b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4a5c      	ldr	r2, [pc, #368]	@ (8010a28 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80108b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	4a5b      	ldr	r2, [pc, #364]	@ (8010a2c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80108be:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	2bff      	cmp	r3, #255	@ 0xff
 80108c8:	d906      	bls.n	80108d8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	22ff      	movs	r2, #255	@ 0xff
 80108ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80108d0:	2380      	movs	r3, #128	@ 0x80
 80108d2:	045b      	lsls	r3, r3, #17
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	e007      	b.n	80108e8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108dc:	b29a      	uxth	r2, r3
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80108e2:	2380      	movs	r3, #128	@ 0x80
 80108e4:	049b      	lsls	r3, r3, #18
 80108e6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d100      	bne.n	80108f2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80108f0:	e078      	b.n	80109e4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d023      	beq.n	8010942 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108fe:	4a4c      	ldr	r2, [pc, #304]	@ (8010a30 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010900:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010906:	4a4b      	ldr	r2, [pc, #300]	@ (8010a34 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010908:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801090e:	2200      	movs	r2, #0
 8010910:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010916:	2200      	movs	r2, #0
 8010918:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801091e:	6879      	ldr	r1, [r7, #4]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	3328      	adds	r3, #40	@ 0x28
 8010926:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801092c:	2513      	movs	r5, #19
 801092e:	197c      	adds	r4, r7, r5
 8010930:	f7fe ff62 	bl	800f7f8 <HAL_DMA_Start_IT>
 8010934:	0003      	movs	r3, r0
 8010936:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010938:	197b      	adds	r3, r7, r5
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d13d      	bne.n	80109bc <HAL_I2C_Master_Transmit_DMA+0x188>
 8010940:	e013      	b.n	801096a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2241      	movs	r2, #65	@ 0x41
 8010946:	2120      	movs	r1, #32
 8010948:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2242      	movs	r2, #66	@ 0x42
 801094e:	2100      	movs	r1, #0
 8010950:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010956:	2280      	movs	r2, #128	@ 0x80
 8010958:	431a      	orrs	r2, r3
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2240      	movs	r2, #64	@ 0x40
 8010962:	2100      	movs	r1, #0
 8010964:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e059      	b.n	8010a1e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801096e:	b2da      	uxtb	r2, r3
 8010970:	697c      	ldr	r4, [r7, #20]
 8010972:	230a      	movs	r3, #10
 8010974:	18fb      	adds	r3, r7, r3
 8010976:	8819      	ldrh	r1, [r3, #0]
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	4b2f      	ldr	r3, [pc, #188]	@ (8010a38 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801097c:	9300      	str	r3, [sp, #0]
 801097e:	0023      	movs	r3, r4
 8010980:	f001 ff60 	bl	8012844 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010988:	b29a      	uxth	r2, r3
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	b29a      	uxth	r2, r3
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2240      	movs	r2, #64	@ 0x40
 801099a:	2100      	movs	r1, #0
 801099c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2110      	movs	r1, #16
 80109a2:	0018      	movs	r0, r3
 80109a4:	f001 ff88 	bl	80128b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2180      	movs	r1, #128	@ 0x80
 80109b4:	01c9      	lsls	r1, r1, #7
 80109b6:	430a      	orrs	r2, r1
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	e02d      	b.n	8010a18 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2241      	movs	r2, #65	@ 0x41
 80109c0:	2120      	movs	r1, #32
 80109c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2242      	movs	r2, #66	@ 0x42
 80109c8:	2100      	movs	r1, #0
 80109ca:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109d0:	2210      	movs	r2, #16
 80109d2:	431a      	orrs	r2, r3
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2240      	movs	r2, #64	@ 0x40
 80109dc:	2100      	movs	r1, #0
 80109de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80109e0:	2301      	movs	r3, #1
 80109e2:	e01c      	b.n	8010a1e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	4a15      	ldr	r2, [pc, #84]	@ (8010a3c <HAL_I2C_Master_Transmit_DMA+0x208>)
 80109e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	2380      	movs	r3, #128	@ 0x80
 80109f2:	049c      	lsls	r4, r3, #18
 80109f4:	230a      	movs	r3, #10
 80109f6:	18fb      	adds	r3, r7, r3
 80109f8:	8819      	ldrh	r1, [r3, #0]
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	4b0e      	ldr	r3, [pc, #56]	@ (8010a38 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	0023      	movs	r3, r4
 8010a02:	f001 ff1f 	bl	8012844 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2240      	movs	r2, #64	@ 0x40
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2101      	movs	r1, #1
 8010a12:	0018      	movs	r0, r3
 8010a14:	f001 ff50 	bl	80128b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	e000      	b.n	8010a1e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010a1c:	2302      	movs	r3, #2
  }
}
 8010a1e:	0018      	movs	r0, r3
 8010a20:	46bd      	mov	sp, r7
 8010a22:	b006      	add	sp, #24
 8010a24:	bdb0      	pop	{r4, r5, r7, pc}
 8010a26:	46c0      	nop			@ (mov r8, r8)
 8010a28:	ffff0000 	.word	0xffff0000
 8010a2c:	08011239 	.word	0x08011239
 8010a30:	080121f1 	.word	0x080121f1
 8010a34:	08012331 	.word	0x08012331
 8010a38:	80002000 	.word	0x80002000
 8010a3c:	08010de5 	.word	0x08010de5

08010a40 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010a40:	b5b0      	push	{r4, r5, r7, lr}
 8010a42:	b088      	sub	sp, #32
 8010a44:	af02      	add	r7, sp, #8
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	0008      	movs	r0, r1
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	0019      	movs	r1, r3
 8010a4e:	230a      	movs	r3, #10
 8010a50:	18fb      	adds	r3, r7, r3
 8010a52:	1c02      	adds	r2, r0, #0
 8010a54:	801a      	strh	r2, [r3, #0]
 8010a56:	2308      	movs	r3, #8
 8010a58:	18fb      	adds	r3, r7, r3
 8010a5a:	1c0a      	adds	r2, r1, #0
 8010a5c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2241      	movs	r2, #65	@ 0x41
 8010a62:	5c9b      	ldrb	r3, [r3, r2]
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	2b20      	cmp	r3, #32
 8010a68:	d000      	beq.n	8010a6c <HAL_I2C_Master_Receive_DMA+0x2c>
 8010a6a:	e0dd      	b.n	8010c28 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	699a      	ldr	r2, [r3, #24]
 8010a72:	2380      	movs	r3, #128	@ 0x80
 8010a74:	021b      	lsls	r3, r3, #8
 8010a76:	401a      	ands	r2, r3
 8010a78:	2380      	movs	r3, #128	@ 0x80
 8010a7a:	021b      	lsls	r3, r3, #8
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d101      	bne.n	8010a84 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010a80:	2302      	movs	r3, #2
 8010a82:	e0d2      	b.n	8010c2a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2240      	movs	r2, #64	@ 0x40
 8010a88:	5c9b      	ldrb	r3, [r3, r2]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d101      	bne.n	8010a92 <HAL_I2C_Master_Receive_DMA+0x52>
 8010a8e:	2302      	movs	r3, #2
 8010a90:	e0cb      	b.n	8010c2a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2240      	movs	r2, #64	@ 0x40
 8010a96:	2101      	movs	r1, #1
 8010a98:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2241      	movs	r2, #65	@ 0x41
 8010a9e:	2122      	movs	r1, #34	@ 0x22
 8010aa0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2242      	movs	r2, #66	@ 0x42
 8010aa6:	2110      	movs	r1, #16
 8010aa8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2200      	movs	r2, #0
 8010aae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2208      	movs	r2, #8
 8010aba:	18ba      	adds	r2, r7, r2
 8010abc:	8812      	ldrh	r2, [r2, #0]
 8010abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8010c34 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	4a5b      	ldr	r2, [pc, #364]	@ (8010c38 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010aca:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	2bff      	cmp	r3, #255	@ 0xff
 8010ad4:	d906      	bls.n	8010ae4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	22ff      	movs	r2, #255	@ 0xff
 8010ada:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010adc:	2380      	movs	r3, #128	@ 0x80
 8010ade:	045b      	lsls	r3, r3, #17
 8010ae0:	617b      	str	r3, [r7, #20]
 8010ae2:	e007      	b.n	8010af4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010aee:	2380      	movs	r3, #128	@ 0x80
 8010af0:	049b      	lsls	r3, r3, #18
 8010af2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d100      	bne.n	8010afe <HAL_I2C_Master_Receive_DMA+0xbe>
 8010afc:	e078      	b.n	8010bf0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d023      	beq.n	8010b4e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8010c3c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b12:	4a4b      	ldr	r2, [pc, #300]	@ (8010c40 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010b14:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b22:	2200      	movs	r2, #0
 8010b24:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3324      	adds	r3, #36	@ 0x24
 8010b30:	0019      	movs	r1, r3
 8010b32:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010b38:	2513      	movs	r5, #19
 8010b3a:	197c      	adds	r4, r7, r5
 8010b3c:	f7fe fe5c 	bl	800f7f8 <HAL_DMA_Start_IT>
 8010b40:	0003      	movs	r3, r0
 8010b42:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010b44:	197b      	adds	r3, r7, r5
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d13d      	bne.n	8010bc8 <HAL_I2C_Master_Receive_DMA+0x188>
 8010b4c:	e013      	b.n	8010b76 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2241      	movs	r2, #65	@ 0x41
 8010b52:	2120      	movs	r1, #32
 8010b54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2242      	movs	r2, #66	@ 0x42
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b62:	2280      	movs	r2, #128	@ 0x80
 8010b64:	431a      	orrs	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2240      	movs	r2, #64	@ 0x40
 8010b6e:	2100      	movs	r1, #0
 8010b70:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e059      	b.n	8010c2a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	697c      	ldr	r4, [r7, #20]
 8010b7e:	230a      	movs	r3, #10
 8010b80:	18fb      	adds	r3, r7, r3
 8010b82:	8819      	ldrh	r1, [r3, #0]
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	4b2f      	ldr	r3, [pc, #188]	@ (8010c44 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	0023      	movs	r3, r4
 8010b8c:	f001 fe5a 	bl	8012844 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2240      	movs	r2, #64	@ 0x40
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2110      	movs	r1, #16
 8010bae:	0018      	movs	r0, r3
 8010bb0:	f001 fe82 	bl	80128b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2180      	movs	r1, #128	@ 0x80
 8010bc0:	0209      	lsls	r1, r1, #8
 8010bc2:	430a      	orrs	r2, r1
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e02d      	b.n	8010c24 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2241      	movs	r2, #65	@ 0x41
 8010bcc:	2120      	movs	r1, #32
 8010bce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2242      	movs	r2, #66	@ 0x42
 8010bd4:	2100      	movs	r1, #0
 8010bd6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bdc:	2210      	movs	r2, #16
 8010bde:	431a      	orrs	r2, r3
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2240      	movs	r2, #64	@ 0x40
 8010be8:	2100      	movs	r1, #0
 8010bea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010bec:	2301      	movs	r3, #1
 8010bee:	e01c      	b.n	8010c2a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	4a15      	ldr	r2, [pc, #84]	@ (8010c48 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010bf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	2380      	movs	r3, #128	@ 0x80
 8010bfe:	049c      	lsls	r4, r3, #18
 8010c00:	230a      	movs	r3, #10
 8010c02:	18fb      	adds	r3, r7, r3
 8010c04:	8819      	ldrh	r1, [r3, #0]
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	4b0e      	ldr	r3, [pc, #56]	@ (8010c44 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	0023      	movs	r3, r4
 8010c0e:	f001 fe19 	bl	8012844 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2240      	movs	r2, #64	@ 0x40
 8010c16:	2100      	movs	r1, #0
 8010c18:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	0018      	movs	r0, r3
 8010c20:	f001 fe4a 	bl	80128b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010c24:	2300      	movs	r3, #0
 8010c26:	e000      	b.n	8010c2a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010c28:	2302      	movs	r3, #2
  }
}
 8010c2a:	0018      	movs	r0, r3
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	b006      	add	sp, #24
 8010c30:	bdb0      	pop	{r4, r5, r7, pc}
 8010c32:	46c0      	nop			@ (mov r8, r8)
 8010c34:	ffff0000 	.word	0xffff0000
 8010c38:	08011239 	.word	0x08011239
 8010c3c:	08012291 	.word	0x08012291
 8010c40:	08012331 	.word	0x08012331
 8010c44:	80002400 	.word	0x80002400
 8010c48:	08010de5 	.word	0x08010de5

08010c4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d005      	beq.n	8010c78 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	68f9      	ldr	r1, [r7, #12]
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	4798      	blx	r3
  }
}
 8010c78:	46c0      	nop			@ (mov r8, r8)
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	b004      	add	sp, #16
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	699b      	ldr	r3, [r3, #24]
 8010c8e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	2380      	movs	r3, #128	@ 0x80
 8010c9c:	005b      	lsls	r3, r3, #1
 8010c9e:	4013      	ands	r3, r2
 8010ca0:	d00e      	beq.n	8010cc0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	2280      	movs	r2, #128	@ 0x80
 8010ca6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010ca8:	d00a      	beq.n	8010cc0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cae:	2201      	movs	r2, #1
 8010cb0:	431a      	orrs	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2280      	movs	r2, #128	@ 0x80
 8010cbc:	0052      	lsls	r2, r2, #1
 8010cbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010cc0:	697a      	ldr	r2, [r7, #20]
 8010cc2:	2380      	movs	r3, #128	@ 0x80
 8010cc4:	00db      	lsls	r3, r3, #3
 8010cc6:	4013      	ands	r3, r2
 8010cc8:	d00e      	beq.n	8010ce8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	2280      	movs	r2, #128	@ 0x80
 8010cce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010cd0:	d00a      	beq.n	8010ce8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cd6:	2208      	movs	r2, #8
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2280      	movs	r2, #128	@ 0x80
 8010ce4:	00d2      	lsls	r2, r2, #3
 8010ce6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010ce8:	697a      	ldr	r2, [r7, #20]
 8010cea:	2380      	movs	r3, #128	@ 0x80
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4013      	ands	r3, r2
 8010cf0:	d00e      	beq.n	8010d10 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	2280      	movs	r2, #128	@ 0x80
 8010cf6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010cf8:	d00a      	beq.n	8010d10 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cfe:	2202      	movs	r2, #2
 8010d00:	431a      	orrs	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2280      	movs	r2, #128	@ 0x80
 8010d0c:	0092      	lsls	r2, r2, #2
 8010d0e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d14:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	220b      	movs	r2, #11
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	d005      	beq.n	8010d2a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	0011      	movs	r1, r2
 8010d24:	0018      	movs	r0, r3
 8010d26:	f001 f915 	bl	8011f54 <I2C_ITError>
  }
}
 8010d2a:	46c0      	nop			@ (mov r8, r8)
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	b006      	add	sp, #24
 8010d30:	bd80      	pop	{r7, pc}

08010d32 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b082      	sub	sp, #8
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010d3a:	46c0      	nop			@ (mov r8, r8)
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	b002      	add	sp, #8
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b082      	sub	sp, #8
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010d4a:	46c0      	nop			@ (mov r8, r8)
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	b002      	add	sp, #8
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b082      	sub	sp, #8
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010d5a:	46c0      	nop			@ (mov r8, r8)
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	b002      	add	sp, #8
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010d6a:	46c0      	nop			@ (mov r8, r8)
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	b002      	add	sp, #8
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b082      	sub	sp, #8
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
 8010d7a:	0008      	movs	r0, r1
 8010d7c:	0011      	movs	r1, r2
 8010d7e:	1cfb      	adds	r3, r7, #3
 8010d80:	1c02      	adds	r2, r0, #0
 8010d82:	701a      	strb	r2, [r3, #0]
 8010d84:	003b      	movs	r3, r7
 8010d86:	1c0a      	adds	r2, r1, #0
 8010d88:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010d8a:	46c0      	nop			@ (mov r8, r8)
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	b002      	add	sp, #8
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b082      	sub	sp, #8
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010d9a:	46c0      	nop			@ (mov r8, r8)
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	b002      	add	sp, #8
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b082      	sub	sp, #8
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010daa:	46c0      	nop			@ (mov r8, r8)
 8010dac:	46bd      	mov	sp, r7
 8010dae:	b002      	add	sp, #8
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b082      	sub	sp, #8
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010dba:	46c0      	nop			@ (mov r8, r8)
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	b002      	add	sp, #8
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b082      	sub	sp, #8
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010dca:	46c0      	nop			@ (mov r8, r8)
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	b002      	add	sp, #8
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010dda:	46c0      	nop			@ (mov r8, r8)
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	b002      	add	sp, #8
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010de4:	b590      	push	{r4, r7, lr}
 8010de6:	b089      	sub	sp, #36	@ 0x24
 8010de8:	af02      	add	r7, sp, #8
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2240      	movs	r2, #64	@ 0x40
 8010df8:	5c9b      	ldrb	r3, [r3, r2]
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d101      	bne.n	8010e02 <I2C_Master_ISR_IT+0x1e>
 8010dfe:	2302      	movs	r3, #2
 8010e00:	e113      	b.n	801102a <I2C_Master_ISR_IT+0x246>
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2240      	movs	r2, #64	@ 0x40
 8010e06:	2101      	movs	r1, #1
 8010e08:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	2210      	movs	r2, #16
 8010e0e:	4013      	ands	r3, r2
 8010e10:	d012      	beq.n	8010e38 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2210      	movs	r2, #16
 8010e16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010e18:	d00e      	beq.n	8010e38 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2210      	movs	r2, #16
 8010e20:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e26:	2204      	movs	r2, #4
 8010e28:	431a      	orrs	r2, r3
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	0018      	movs	r0, r3
 8010e32:	f001 f9ba 	bl	80121aa <I2C_Flush_TXDR>
 8010e36:	e0e5      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2204      	movs	r2, #4
 8010e3c:	4013      	ands	r3, r2
 8010e3e:	d021      	beq.n	8010e84 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2204      	movs	r2, #4
 8010e44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010e46:	d01d      	beq.n	8010e84 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2204      	movs	r2, #4
 8010e4c:	4393      	bics	r3, r2
 8010e4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e5a:	b2d2      	uxtb	r2, r2
 8010e5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e62:	1c5a      	adds	r2, r3, #1
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010e82:	e0bf      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2202      	movs	r2, #2
 8010e88:	4013      	ands	r3, r2
 8010e8a:	d01c      	beq.n	8010ec6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2202      	movs	r2, #2
 8010e90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010e92:	d018      	beq.n	8010ec6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e98:	781a      	ldrb	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ea4:	1c5a      	adds	r2, r3, #1
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	3b01      	subs	r3, #1
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010ec4:	e09e      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	2280      	movs	r2, #128	@ 0x80
 8010eca:	4013      	ands	r3, r2
 8010ecc:	d100      	bne.n	8010ed0 <I2C_Master_ISR_IT+0xec>
 8010ece:	e069      	b.n	8010fa4 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2240      	movs	r2, #64	@ 0x40
 8010ed4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010ed6:	d065      	beq.n	8010fa4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d04a      	beq.n	8010f78 <I2C_Master_ISR_IT+0x194>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d146      	bne.n	8010f78 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	b29a      	uxth	r2, r3
 8010ef2:	2112      	movs	r1, #18
 8010ef4:	187b      	adds	r3, r7, r1
 8010ef6:	0592      	lsls	r2, r2, #22
 8010ef8:	0d92      	lsrs	r2, r2, #22
 8010efa:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	2bff      	cmp	r3, #255	@ 0xff
 8010f04:	d910      	bls.n	8010f28 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	22ff      	movs	r2, #255	@ 0xff
 8010f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f10:	b2da      	uxtb	r2, r3
 8010f12:	2380      	movs	r3, #128	@ 0x80
 8010f14:	045c      	lsls	r4, r3, #17
 8010f16:	187b      	adds	r3, r7, r1
 8010f18:	8819      	ldrh	r1, [r3, #0]
 8010f1a:	68f8      	ldr	r0, [r7, #12]
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	0023      	movs	r3, r4
 8010f22:	f001 fc8f 	bl	8012844 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f26:	e03c      	b.n	8010fa2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f36:	4a3f      	ldr	r2, [pc, #252]	@ (8011034 <I2C_Master_ISR_IT+0x250>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d00e      	beq.n	8010f5a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f40:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010f46:	2312      	movs	r3, #18
 8010f48:	18fb      	adds	r3, r7, r3
 8010f4a:	8819      	ldrh	r1, [r3, #0]
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	9300      	str	r3, [sp, #0]
 8010f52:	0023      	movs	r3, r4
 8010f54:	f001 fc76 	bl	8012844 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f58:	e023      	b.n	8010fa2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f5e:	b2da      	uxtb	r2, r3
 8010f60:	2380      	movs	r3, #128	@ 0x80
 8010f62:	049c      	lsls	r4, r3, #18
 8010f64:	2312      	movs	r3, #18
 8010f66:	18fb      	adds	r3, r7, r3
 8010f68:	8819      	ldrh	r1, [r3, #0]
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	0023      	movs	r3, r4
 8010f72:	f001 fc67 	bl	8012844 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f76:	e014      	b.n	8010fa2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	685a      	ldr	r2, [r3, #4]
 8010f7e:	2380      	movs	r3, #128	@ 0x80
 8010f80:	049b      	lsls	r3, r3, #18
 8010f82:	401a      	ands	r2, r3
 8010f84:	2380      	movs	r3, #128	@ 0x80
 8010f86:	049b      	lsls	r3, r3, #18
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d004      	beq.n	8010f96 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	0018      	movs	r0, r3
 8010f90:	f000 fcf4 	bl	801197c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010f94:	e036      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2140      	movs	r1, #64	@ 0x40
 8010f9a:	0018      	movs	r0, r3
 8010f9c:	f000 ffda 	bl	8011f54 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010fa0:	e030      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
 8010fa2:	e02f      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	2240      	movs	r2, #64	@ 0x40
 8010fa8:	4013      	ands	r3, r2
 8010faa:	d02b      	beq.n	8011004 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2240      	movs	r2, #64	@ 0x40
 8010fb0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010fb2:	d027      	beq.n	8011004 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d11d      	bne.n	8010ffa <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	685a      	ldr	r2, [r3, #4]
 8010fc4:	2380      	movs	r3, #128	@ 0x80
 8010fc6:	049b      	lsls	r3, r3, #18
 8010fc8:	401a      	ands	r2, r3
 8010fca:	2380      	movs	r3, #128	@ 0x80
 8010fcc:	049b      	lsls	r3, r3, #18
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d018      	beq.n	8011004 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd6:	4a17      	ldr	r2, [pc, #92]	@ (8011034 <I2C_Master_ISR_IT+0x250>)
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d109      	bne.n	8010ff0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	685a      	ldr	r2, [r3, #4]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2180      	movs	r1, #128	@ 0x80
 8010fe8:	01c9      	lsls	r1, r1, #7
 8010fea:	430a      	orrs	r2, r1
 8010fec:	605a      	str	r2, [r3, #4]
 8010fee:	e009      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	0018      	movs	r0, r3
 8010ff4:	f000 fcc2 	bl	801197c <I2C_ITMasterSeqCplt>
 8010ff8:	e004      	b.n	8011004 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2140      	movs	r1, #64	@ 0x40
 8010ffe:	0018      	movs	r0, r3
 8011000:	f000 ffa8 	bl	8011f54 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	2220      	movs	r2, #32
 8011008:	4013      	ands	r3, r2
 801100a:	d009      	beq.n	8011020 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2220      	movs	r2, #32
 8011010:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011012:	d005      	beq.n	8011020 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011014:	697a      	ldr	r2, [r7, #20]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	0011      	movs	r1, r2
 801101a:	0018      	movs	r0, r3
 801101c:	f000 fd54 	bl	8011ac8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2240      	movs	r2, #64	@ 0x40
 8011024:	2100      	movs	r1, #0
 8011026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	0018      	movs	r0, r3
 801102c:	46bd      	mov	sp, r7
 801102e:	b007      	add	sp, #28
 8011030:	bd90      	pop	{r4, r7, pc}
 8011032:	46c0      	nop			@ (mov r8, r8)
 8011034:	ffff0000 	.word	0xffff0000

08011038 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011048:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	2240      	movs	r2, #64	@ 0x40
 8011052:	5c9b      	ldrb	r3, [r3, r2]
 8011054:	2b01      	cmp	r3, #1
 8011056:	d101      	bne.n	801105c <I2C_Slave_ISR_IT+0x24>
 8011058:	2302      	movs	r3, #2
 801105a:	e0e6      	b.n	801122a <I2C_Slave_ISR_IT+0x1f2>
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2240      	movs	r2, #64	@ 0x40
 8011060:	2101      	movs	r1, #1
 8011062:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	2220      	movs	r2, #32
 8011068:	4013      	ands	r3, r2
 801106a:	d009      	beq.n	8011080 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2220      	movs	r2, #32
 8011070:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011072:	d005      	beq.n	8011080 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	0011      	movs	r1, r2
 801107a:	0018      	movs	r0, r3
 801107c:	f000 fdf2 	bl	8011c64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	2210      	movs	r2, #16
 8011084:	4013      	ands	r3, r2
 8011086:	d052      	beq.n	801112e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2210      	movs	r2, #16
 801108c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801108e:	d04e      	beq.n	801112e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011094:	b29b      	uxth	r3, r3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d12d      	bne.n	80110f6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	2241      	movs	r2, #65	@ 0x41
 801109e:	5c9b      	ldrb	r3, [r3, r2]
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	2b28      	cmp	r3, #40	@ 0x28
 80110a4:	d10b      	bne.n	80110be <I2C_Slave_ISR_IT+0x86>
 80110a6:	697a      	ldr	r2, [r7, #20]
 80110a8:	2380      	movs	r3, #128	@ 0x80
 80110aa:	049b      	lsls	r3, r3, #18
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d106      	bne.n	80110be <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	0011      	movs	r1, r2
 80110b6:	0018      	movs	r0, r3
 80110b8:	f000 fef4 	bl	8011ea4 <I2C_ITListenCplt>
 80110bc:	e036      	b.n	801112c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2241      	movs	r2, #65	@ 0x41
 80110c2:	5c9b      	ldrb	r3, [r3, r2]
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	2b29      	cmp	r3, #41	@ 0x29
 80110c8:	d110      	bne.n	80110ec <I2C_Slave_ISR_IT+0xb4>
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	4a59      	ldr	r2, [pc, #356]	@ (8011234 <I2C_Slave_ISR_IT+0x1fc>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d00c      	beq.n	80110ec <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2210      	movs	r2, #16
 80110d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	0018      	movs	r0, r3
 80110de:	f001 f864 	bl	80121aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	0018      	movs	r0, r3
 80110e6:	f000 fc8b 	bl	8011a00 <I2C_ITSlaveSeqCplt>
 80110ea:	e01f      	b.n	801112c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2210      	movs	r2, #16
 80110f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80110f4:	e091      	b.n	801121a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2210      	movs	r2, #16
 80110fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011102:	2204      	movs	r2, #4
 8011104:	431a      	orrs	r2, r3
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d005      	beq.n	801111c <I2C_Slave_ISR_IT+0xe4>
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	2380      	movs	r3, #128	@ 0x80
 8011114:	045b      	lsls	r3, r3, #17
 8011116:	429a      	cmp	r2, r3
 8011118:	d000      	beq.n	801111c <I2C_Slave_ISR_IT+0xe4>
 801111a:	e07e      	b.n	801121a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	0011      	movs	r1, r2
 8011124:	0018      	movs	r0, r3
 8011126:	f000 ff15 	bl	8011f54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801112a:	e076      	b.n	801121a <I2C_Slave_ISR_IT+0x1e2>
 801112c:	e075      	b.n	801121a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	2204      	movs	r2, #4
 8011132:	4013      	ands	r3, r2
 8011134:	d02f      	beq.n	8011196 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2204      	movs	r2, #4
 801113a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801113c:	d02b      	beq.n	8011196 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011142:	b29b      	uxth	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d018      	beq.n	801117a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011152:	b2d2      	uxtb	r2, r2
 8011154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801115a:	1c5a      	adds	r2, r3, #1
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011164:	3b01      	subs	r3, #1
 8011166:	b29a      	uxth	r2, r3
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011170:	b29b      	uxth	r3, r3
 8011172:	3b01      	subs	r3, #1
 8011174:	b29a      	uxth	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801117e:	b29b      	uxth	r3, r3
 8011180:	2b00      	cmp	r3, #0
 8011182:	d14c      	bne.n	801121e <I2C_Slave_ISR_IT+0x1e6>
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	4a2b      	ldr	r2, [pc, #172]	@ (8011234 <I2C_Slave_ISR_IT+0x1fc>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d048      	beq.n	801121e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	0018      	movs	r0, r3
 8011190:	f000 fc36 	bl	8011a00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011194:	e043      	b.n	801121e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	2208      	movs	r2, #8
 801119a:	4013      	ands	r3, r2
 801119c:	d00a      	beq.n	80111b4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2208      	movs	r2, #8
 80111a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80111a4:	d006      	beq.n	80111b4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80111a6:	693a      	ldr	r2, [r7, #16]
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	0011      	movs	r1, r2
 80111ac:	0018      	movs	r0, r3
 80111ae:	f000 fb41 	bl	8011834 <I2C_ITAddrCplt>
 80111b2:	e035      	b.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	2202      	movs	r2, #2
 80111b8:	4013      	ands	r3, r2
 80111ba:	d031      	beq.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2202      	movs	r2, #2
 80111c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80111c2:	d02d      	beq.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d018      	beq.n	8011200 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d2:	781a      	ldrb	r2, [r3, #0]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111de:	1c5a      	adds	r2, r3, #1
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	3b01      	subs	r3, #1
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111f6:	3b01      	subs	r3, #1
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80111fe:	e00f      	b.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	2380      	movs	r3, #128	@ 0x80
 8011204:	045b      	lsls	r3, r3, #17
 8011206:	429a      	cmp	r2, r3
 8011208:	d002      	beq.n	8011210 <I2C_Slave_ISR_IT+0x1d8>
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d107      	bne.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	0018      	movs	r0, r3
 8011214:	f000 fbf4 	bl	8011a00 <I2C_ITSlaveSeqCplt>
 8011218:	e002      	b.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801121a:	46c0      	nop			@ (mov r8, r8)
 801121c:	e000      	b.n	8011220 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801121e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2240      	movs	r2, #64	@ 0x40
 8011224:	2100      	movs	r1, #0
 8011226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	0018      	movs	r0, r3
 801122c:	46bd      	mov	sp, r7
 801122e:	b006      	add	sp, #24
 8011230:	bd80      	pop	{r7, pc}
 8011232:	46c0      	nop			@ (mov r8, r8)
 8011234:	ffff0000 	.word	0xffff0000

08011238 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011238:	b590      	push	{r4, r7, lr}
 801123a:	b089      	sub	sp, #36	@ 0x24
 801123c:	af02      	add	r7, sp, #8
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2240      	movs	r2, #64	@ 0x40
 8011248:	5c9b      	ldrb	r3, [r3, r2]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d101      	bne.n	8011252 <I2C_Master_ISR_DMA+0x1a>
 801124e:	2302      	movs	r3, #2
 8011250:	e0e7      	b.n	8011422 <I2C_Master_ISR_DMA+0x1ea>
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2240      	movs	r2, #64	@ 0x40
 8011256:	2101      	movs	r1, #1
 8011258:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	2210      	movs	r2, #16
 801125e:	4013      	ands	r3, r2
 8011260:	d017      	beq.n	8011292 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2210      	movs	r2, #16
 8011266:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011268:	d013      	beq.n	8011292 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2210      	movs	r2, #16
 8011270:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011276:	2204      	movs	r2, #4
 8011278:	431a      	orrs	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2120      	movs	r1, #32
 8011282:	0018      	movs	r0, r3
 8011284:	f001 fb18 	bl	80128b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	0018      	movs	r0, r3
 801128c:	f000 ff8d 	bl	80121aa <I2C_Flush_TXDR>
 8011290:	e0c2      	b.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	2280      	movs	r2, #128	@ 0x80
 8011296:	4013      	ands	r3, r2
 8011298:	d100      	bne.n	801129c <I2C_Master_ISR_DMA+0x64>
 801129a:	e07c      	b.n	8011396 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2240      	movs	r2, #64	@ 0x40
 80112a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80112a2:	d100      	bne.n	80112a6 <I2C_Master_ISR_DMA+0x6e>
 80112a4:	e077      	b.n	8011396 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	2140      	movs	r1, #64	@ 0x40
 80112b2:	438a      	bics	r2, r1
 80112b4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d055      	beq.n	801136c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	2312      	movs	r3, #18
 80112ca:	18fb      	adds	r3, r7, r3
 80112cc:	0592      	lsls	r2, r2, #22
 80112ce:	0d92      	lsrs	r2, r2, #22
 80112d0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	2bff      	cmp	r3, #255	@ 0xff
 80112da:	d906      	bls.n	80112ea <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	22ff      	movs	r2, #255	@ 0xff
 80112e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80112e2:	2380      	movs	r3, #128	@ 0x80
 80112e4:	045b      	lsls	r3, r3, #17
 80112e6:	617b      	str	r3, [r7, #20]
 80112e8:	e010      	b.n	801130c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f8:	4a4c      	ldr	r2, [pc, #304]	@ (801142c <I2C_Master_ISR_DMA+0x1f4>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d003      	beq.n	8011306 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011302:	617b      	str	r3, [r7, #20]
 8011304:	e002      	b.n	801130c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011306:	2380      	movs	r3, #128	@ 0x80
 8011308:	049b      	lsls	r3, r3, #18
 801130a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011310:	b2da      	uxtb	r2, r3
 8011312:	697c      	ldr	r4, [r7, #20]
 8011314:	2312      	movs	r3, #18
 8011316:	18fb      	adds	r3, r7, r3
 8011318:	8819      	ldrh	r1, [r3, #0]
 801131a:	68f8      	ldr	r0, [r7, #12]
 801131c:	2300      	movs	r3, #0
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	0023      	movs	r3, r4
 8011322:	f001 fa8f 	bl	8012844 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801132a:	b29a      	uxth	r2, r3
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	b29a      	uxth	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2241      	movs	r2, #65	@ 0x41
 801133c:	5c9b      	ldrb	r3, [r3, r2]
 801133e:	b2db      	uxtb	r3, r3
 8011340:	2b22      	cmp	r3, #34	@ 0x22
 8011342:	d109      	bne.n	8011358 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2180      	movs	r1, #128	@ 0x80
 8011350:	0209      	lsls	r1, r1, #8
 8011352:	430a      	orrs	r2, r1
 8011354:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011356:	e05f      	b.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2180      	movs	r1, #128	@ 0x80
 8011364:	01c9      	lsls	r1, r1, #7
 8011366:	430a      	orrs	r2, r1
 8011368:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801136a:	e055      	b.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	2380      	movs	r3, #128	@ 0x80
 8011374:	049b      	lsls	r3, r3, #18
 8011376:	401a      	ands	r2, r3
 8011378:	2380      	movs	r3, #128	@ 0x80
 801137a:	049b      	lsls	r3, r3, #18
 801137c:	429a      	cmp	r2, r3
 801137e:	d004      	beq.n	801138a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	0018      	movs	r0, r3
 8011384:	f000 fafa 	bl	801197c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011388:	e046      	b.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2140      	movs	r1, #64	@ 0x40
 801138e:	0018      	movs	r0, r3
 8011390:	f000 fde0 	bl	8011f54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011394:	e040      	b.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	2240      	movs	r2, #64	@ 0x40
 801139a:	4013      	ands	r3, r2
 801139c:	d02c      	beq.n	80113f8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2240      	movs	r2, #64	@ 0x40
 80113a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80113a4:	d028      	beq.n	80113f8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d11d      	bne.n	80113ec <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	685a      	ldr	r2, [r3, #4]
 80113b6:	2380      	movs	r3, #128	@ 0x80
 80113b8:	049b      	lsls	r3, r3, #18
 80113ba:	401a      	ands	r2, r3
 80113bc:	2380      	movs	r3, #128	@ 0x80
 80113be:	049b      	lsls	r3, r3, #18
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d028      	beq.n	8011416 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113c8:	4a18      	ldr	r2, [pc, #96]	@ (801142c <I2C_Master_ISR_DMA+0x1f4>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d109      	bne.n	80113e2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2180      	movs	r1, #128	@ 0x80
 80113da:	01c9      	lsls	r1, r1, #7
 80113dc:	430a      	orrs	r2, r1
 80113de:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80113e0:	e019      	b.n	8011416 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	0018      	movs	r0, r3
 80113e6:	f000 fac9 	bl	801197c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80113ea:	e014      	b.n	8011416 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2140      	movs	r1, #64	@ 0x40
 80113f0:	0018      	movs	r0, r3
 80113f2:	f000 fdaf 	bl	8011f54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80113f6:	e00e      	b.n	8011416 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	2220      	movs	r2, #32
 80113fc:	4013      	ands	r3, r2
 80113fe:	d00b      	beq.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2220      	movs	r2, #32
 8011404:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011406:	d007      	beq.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011408:	68ba      	ldr	r2, [r7, #8]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	0011      	movs	r1, r2
 801140e:	0018      	movs	r0, r3
 8011410:	f000 fb5a 	bl	8011ac8 <I2C_ITMasterCplt>
 8011414:	e000      	b.n	8011418 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011416:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2240      	movs	r2, #64	@ 0x40
 801141c:	2100      	movs	r1, #0
 801141e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	0018      	movs	r0, r3
 8011424:	46bd      	mov	sp, r7
 8011426:	b007      	add	sp, #28
 8011428:	bd90      	pop	{r4, r7, pc}
 801142a:	46c0      	nop			@ (mov r8, r8)
 801142c:	ffff0000 	.word	0xffff0000

08011430 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011430:	b590      	push	{r4, r7, lr}
 8011432:	b089      	sub	sp, #36	@ 0x24
 8011434:	af02      	add	r7, sp, #8
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801143c:	4b88      	ldr	r3, [pc, #544]	@ (8011660 <I2C_Mem_ISR_DMA+0x230>)
 801143e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2240      	movs	r2, #64	@ 0x40
 8011444:	5c9b      	ldrb	r3, [r3, r2]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d101      	bne.n	801144e <I2C_Mem_ISR_DMA+0x1e>
 801144a:	2302      	movs	r3, #2
 801144c:	e104      	b.n	8011658 <I2C_Mem_ISR_DMA+0x228>
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2240      	movs	r2, #64	@ 0x40
 8011452:	2101      	movs	r1, #1
 8011454:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	2210      	movs	r2, #16
 801145a:	4013      	ands	r3, r2
 801145c:	d017      	beq.n	801148e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2210      	movs	r2, #16
 8011462:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011464:	d013      	beq.n	801148e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2210      	movs	r2, #16
 801146c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011472:	2204      	movs	r2, #4
 8011474:	431a      	orrs	r2, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2120      	movs	r1, #32
 801147e:	0018      	movs	r0, r3
 8011480:	f001 fa1a 	bl	80128b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	0018      	movs	r0, r3
 8011488:	f000 fe8f 	bl	80121aa <I2C_Flush_TXDR>
 801148c:	e0df      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	2202      	movs	r2, #2
 8011492:	4013      	ands	r3, r2
 8011494:	d00d      	beq.n	80114b2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2202      	movs	r2, #2
 801149a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801149c:	d009      	beq.n	80114b2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80114a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2201      	movs	r2, #1
 80114ac:	4252      	negs	r2, r2
 80114ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80114b0:	e0cd      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2280      	movs	r2, #128	@ 0x80
 80114b6:	4013      	ands	r3, r2
 80114b8:	d05e      	beq.n	8011578 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2240      	movs	r2, #64	@ 0x40
 80114be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80114c0:	d05a      	beq.n	8011578 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2110      	movs	r1, #16
 80114c6:	0018      	movs	r0, r3
 80114c8:	f001 f9f6 	bl	80128b8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d04a      	beq.n	801156c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114da:	b29b      	uxth	r3, r3
 80114dc:	2bff      	cmp	r3, #255	@ 0xff
 80114de:	d910      	bls.n	8011502 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	22ff      	movs	r2, #255	@ 0xff
 80114e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114ea:	b299      	uxth	r1, r3
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	2380      	movs	r3, #128	@ 0x80
 80114f4:	045b      	lsls	r3, r3, #17
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	2400      	movs	r4, #0
 80114fa:	9400      	str	r4, [sp, #0]
 80114fc:	f001 f9a2 	bl	8012844 <I2C_TransferConfig>
 8011500:	e011      	b.n	8011526 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011506:	b29a      	uxth	r2, r3
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011510:	b299      	uxth	r1, r3
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011516:	b2da      	uxtb	r2, r3
 8011518:	2380      	movs	r3, #128	@ 0x80
 801151a:	049b      	lsls	r3, r3, #18
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	2400      	movs	r4, #0
 8011520:	9400      	str	r4, [sp, #0]
 8011522:	f001 f98f 	bl	8012844 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801152a:	b29a      	uxth	r2, r3
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	b29a      	uxth	r2, r3
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2241      	movs	r2, #65	@ 0x41
 801153c:	5c9b      	ldrb	r3, [r3, r2]
 801153e:	b2db      	uxtb	r3, r3
 8011540:	2b22      	cmp	r3, #34	@ 0x22
 8011542:	d109      	bne.n	8011558 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2180      	movs	r1, #128	@ 0x80
 8011550:	0209      	lsls	r1, r1, #8
 8011552:	430a      	orrs	r2, r1
 8011554:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011556:	e07a      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2180      	movs	r1, #128	@ 0x80
 8011564:	01c9      	lsls	r1, r1, #7
 8011566:	430a      	orrs	r2, r1
 8011568:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801156a:	e070      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2140      	movs	r1, #64	@ 0x40
 8011570:	0018      	movs	r0, r3
 8011572:	f000 fcef 	bl	8011f54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011576:	e06a      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	2240      	movs	r2, #64	@ 0x40
 801157c:	4013      	ands	r3, r2
 801157e:	d058      	beq.n	8011632 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2240      	movs	r2, #64	@ 0x40
 8011584:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011586:	d054      	beq.n	8011632 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2241      	movs	r2, #65	@ 0x41
 801158c:	5c9b      	ldrb	r3, [r3, r2]
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b22      	cmp	r3, #34	@ 0x22
 8011592:	d101      	bne.n	8011598 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011594:	4b33      	ldr	r3, [pc, #204]	@ (8011664 <I2C_Mem_ISR_DMA+0x234>)
 8011596:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801159c:	b29b      	uxth	r3, r3
 801159e:	2bff      	cmp	r3, #255	@ 0xff
 80115a0:	d911      	bls.n	80115c6 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	22ff      	movs	r2, #255	@ 0xff
 80115a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115ac:	b299      	uxth	r1, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115b2:	b2da      	uxtb	r2, r3
 80115b4:	2380      	movs	r3, #128	@ 0x80
 80115b6:	045c      	lsls	r4, r3, #17
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	0023      	movs	r3, r4
 80115c0:	f001 f940 	bl	8012844 <I2C_TransferConfig>
 80115c4:	e012      	b.n	80115ec <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115d4:	b299      	uxth	r1, r3
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	2380      	movs	r3, #128	@ 0x80
 80115de:	049c      	lsls	r4, r3, #18
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	0023      	movs	r3, r4
 80115e8:	f001 f92c 	bl	8012844 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2241      	movs	r2, #65	@ 0x41
 8011602:	5c9b      	ldrb	r3, [r3, r2]
 8011604:	b2db      	uxtb	r3, r3
 8011606:	2b22      	cmp	r3, #34	@ 0x22
 8011608:	d109      	bne.n	801161e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2180      	movs	r1, #128	@ 0x80
 8011616:	0209      	lsls	r1, r1, #8
 8011618:	430a      	orrs	r2, r1
 801161a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801161c:	e017      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2180      	movs	r1, #128	@ 0x80
 801162a:	01c9      	lsls	r1, r1, #7
 801162c:	430a      	orrs	r2, r1
 801162e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011630:	e00d      	b.n	801164e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2220      	movs	r2, #32
 8011636:	4013      	ands	r3, r2
 8011638:	d009      	beq.n	801164e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2220      	movs	r2, #32
 801163e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011640:	d005      	beq.n	801164e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011642:	68ba      	ldr	r2, [r7, #8]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	0011      	movs	r1, r2
 8011648:	0018      	movs	r0, r3
 801164a:	f000 fa3d 	bl	8011ac8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2240      	movs	r2, #64	@ 0x40
 8011652:	2100      	movs	r1, #0
 8011654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	0018      	movs	r0, r3
 801165a:	46bd      	mov	sp, r7
 801165c:	b007      	add	sp, #28
 801165e:	bd90      	pop	{r4, r7, pc}
 8011660:	80002000 	.word	0x80002000
 8011664:	80002400 	.word	0x80002400

08011668 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b088      	sub	sp, #32
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011678:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801167a:	2300      	movs	r3, #0
 801167c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2240      	movs	r2, #64	@ 0x40
 8011682:	5c9b      	ldrb	r3, [r3, r2]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d101      	bne.n	801168c <I2C_Slave_ISR_DMA+0x24>
 8011688:	2302      	movs	r3, #2
 801168a:	e0cd      	b.n	8011828 <I2C_Slave_ISR_DMA+0x1c0>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2240      	movs	r2, #64	@ 0x40
 8011690:	2101      	movs	r1, #1
 8011692:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	2220      	movs	r2, #32
 8011698:	4013      	ands	r3, r2
 801169a:	d009      	beq.n	80116b0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2220      	movs	r2, #32
 80116a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80116a2:	d005      	beq.n	80116b0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	0011      	movs	r1, r2
 80116aa:	0018      	movs	r0, r3
 80116ac:	f000 fada 	bl	8011c64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2210      	movs	r2, #16
 80116b4:	4013      	ands	r3, r2
 80116b6:	d100      	bne.n	80116ba <I2C_Slave_ISR_DMA+0x52>
 80116b8:	e0a3      	b.n	8011802 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2210      	movs	r2, #16
 80116be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80116c0:	d100      	bne.n	80116c4 <I2C_Slave_ISR_DMA+0x5c>
 80116c2:	e09e      	b.n	8011802 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	2380      	movs	r3, #128	@ 0x80
 80116c8:	01db      	lsls	r3, r3, #7
 80116ca:	4013      	ands	r3, r2
 80116cc:	d105      	bne.n	80116da <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	2380      	movs	r3, #128	@ 0x80
 80116d2:	021b      	lsls	r3, r3, #8
 80116d4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80116d6:	d100      	bne.n	80116da <I2C_Slave_ISR_DMA+0x72>
 80116d8:	e08c      	b.n	80117f4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00c      	beq.n	80116fc <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	2380      	movs	r3, #128	@ 0x80
 80116e6:	021b      	lsls	r3, r3, #8
 80116e8:	4013      	ands	r3, r2
 80116ea:	d007      	beq.n	80116fc <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d101      	bne.n	80116fc <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80116f8:	2301      	movs	r3, #1
 80116fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00c      	beq.n	801171e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	2380      	movs	r3, #128	@ 0x80
 8011708:	01db      	lsls	r3, r3, #7
 801170a:	4013      	ands	r3, r2
 801170c:	d007      	beq.n	801171e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d101      	bne.n	801171e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801171a:	2301      	movs	r3, #1
 801171c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801171e:	69fb      	ldr	r3, [r7, #28]
 8011720:	2b01      	cmp	r3, #1
 8011722:	d12d      	bne.n	8011780 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2241      	movs	r2, #65	@ 0x41
 8011728:	5c9b      	ldrb	r3, [r3, r2]
 801172a:	b2db      	uxtb	r3, r3
 801172c:	2b28      	cmp	r3, #40	@ 0x28
 801172e:	d10b      	bne.n	8011748 <I2C_Slave_ISR_DMA+0xe0>
 8011730:	69ba      	ldr	r2, [r7, #24]
 8011732:	2380      	movs	r3, #128	@ 0x80
 8011734:	049b      	lsls	r3, r3, #18
 8011736:	429a      	cmp	r2, r3
 8011738:	d106      	bne.n	8011748 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801173a:	68ba      	ldr	r2, [r7, #8]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	0011      	movs	r1, r2
 8011740:	0018      	movs	r0, r3
 8011742:	f000 fbaf 	bl	8011ea4 <I2C_ITListenCplt>
 8011746:	e054      	b.n	80117f2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2241      	movs	r2, #65	@ 0x41
 801174c:	5c9b      	ldrb	r3, [r3, r2]
 801174e:	b2db      	uxtb	r3, r3
 8011750:	2b29      	cmp	r3, #41	@ 0x29
 8011752:	d110      	bne.n	8011776 <I2C_Slave_ISR_DMA+0x10e>
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	4a36      	ldr	r2, [pc, #216]	@ (8011830 <I2C_Slave_ISR_DMA+0x1c8>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d00c      	beq.n	8011776 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2210      	movs	r2, #16
 8011762:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	0018      	movs	r0, r3
 8011768:	f000 fd1f 	bl	80121aa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	0018      	movs	r0, r3
 8011770:	f000 f946 	bl	8011a00 <I2C_ITSlaveSeqCplt>
 8011774:	e03d      	b.n	80117f2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	2210      	movs	r2, #16
 801177c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801177e:	e03e      	b.n	80117fe <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	2210      	movs	r2, #16
 8011786:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801178c:	2204      	movs	r2, #4
 801178e:	431a      	orrs	r2, r3
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011794:	2317      	movs	r3, #23
 8011796:	18fb      	adds	r3, r7, r3
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	2141      	movs	r1, #65	@ 0x41
 801179c:	5c52      	ldrb	r2, [r2, r1]
 801179e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d004      	beq.n	80117b0 <I2C_Slave_ISR_DMA+0x148>
 80117a6:	69ba      	ldr	r2, [r7, #24]
 80117a8:	2380      	movs	r3, #128	@ 0x80
 80117aa:	045b      	lsls	r3, r3, #17
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d126      	bne.n	80117fe <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80117b0:	2217      	movs	r2, #23
 80117b2:	18bb      	adds	r3, r7, r2
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	2b21      	cmp	r3, #33	@ 0x21
 80117b8:	d003      	beq.n	80117c2 <I2C_Slave_ISR_DMA+0x15a>
 80117ba:	18bb      	adds	r3, r7, r2
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	2b29      	cmp	r3, #41	@ 0x29
 80117c0:	d103      	bne.n	80117ca <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2221      	movs	r2, #33	@ 0x21
 80117c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80117c8:	e00b      	b.n	80117e2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80117ca:	2217      	movs	r2, #23
 80117cc:	18bb      	adds	r3, r7, r2
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	2b22      	cmp	r3, #34	@ 0x22
 80117d2:	d003      	beq.n	80117dc <I2C_Slave_ISR_DMA+0x174>
 80117d4:	18bb      	adds	r3, r7, r2
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80117da:	d102      	bne.n	80117e2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2222      	movs	r2, #34	@ 0x22
 80117e0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	0011      	movs	r1, r2
 80117ea:	0018      	movs	r0, r3
 80117ec:	f000 fbb2 	bl	8011f54 <I2C_ITError>
      if (treatdmanack == 1U)
 80117f0:	e005      	b.n	80117fe <I2C_Slave_ISR_DMA+0x196>
 80117f2:	e004      	b.n	80117fe <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2210      	movs	r2, #16
 80117fa:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80117fc:	e00f      	b.n	801181e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80117fe:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011800:	e00d      	b.n	801181e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	2208      	movs	r2, #8
 8011806:	4013      	ands	r3, r2
 8011808:	d009      	beq.n	801181e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2208      	movs	r2, #8
 801180e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011810:	d005      	beq.n	801181e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011812:	68ba      	ldr	r2, [r7, #8]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	0011      	movs	r1, r2
 8011818:	0018      	movs	r0, r3
 801181a:	f000 f80b 	bl	8011834 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2240      	movs	r2, #64	@ 0x40
 8011822:	2100      	movs	r1, #0
 8011824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011826:	2300      	movs	r3, #0
}
 8011828:	0018      	movs	r0, r3
 801182a:	46bd      	mov	sp, r7
 801182c:	b008      	add	sp, #32
 801182e:	bd80      	pop	{r7, pc}
 8011830:	ffff0000 	.word	0xffff0000

08011834 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011834:	b5b0      	push	{r4, r5, r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2241      	movs	r2, #65	@ 0x41
 8011842:	5c9b      	ldrb	r3, [r3, r2]
 8011844:	b2db      	uxtb	r3, r3
 8011846:	001a      	movs	r2, r3
 8011848:	2328      	movs	r3, #40	@ 0x28
 801184a:	4013      	ands	r3, r2
 801184c:	2b28      	cmp	r3, #40	@ 0x28
 801184e:	d000      	beq.n	8011852 <I2C_ITAddrCplt+0x1e>
 8011850:	e088      	b.n	8011964 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	699b      	ldr	r3, [r3, #24]
 8011858:	0c1b      	lsrs	r3, r3, #16
 801185a:	b2da      	uxtb	r2, r3
 801185c:	250f      	movs	r5, #15
 801185e:	197b      	adds	r3, r7, r5
 8011860:	2101      	movs	r1, #1
 8011862:	400a      	ands	r2, r1
 8011864:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	699b      	ldr	r3, [r3, #24]
 801186c:	0c1b      	lsrs	r3, r3, #16
 801186e:	b29a      	uxth	r2, r3
 8011870:	200c      	movs	r0, #12
 8011872:	183b      	adds	r3, r7, r0
 8011874:	21fe      	movs	r1, #254	@ 0xfe
 8011876:	400a      	ands	r2, r1
 8011878:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	b29a      	uxth	r2, r3
 8011882:	240a      	movs	r4, #10
 8011884:	193b      	adds	r3, r7, r4
 8011886:	0592      	lsls	r2, r2, #22
 8011888:	0d92      	lsrs	r2, r2, #22
 801188a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	b29a      	uxth	r2, r3
 8011894:	2308      	movs	r3, #8
 8011896:	18fb      	adds	r3, r7, r3
 8011898:	21fe      	movs	r1, #254	@ 0xfe
 801189a:	400a      	ands	r2, r1
 801189c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d148      	bne.n	8011938 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80118a6:	0021      	movs	r1, r4
 80118a8:	187b      	adds	r3, r7, r1
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	09db      	lsrs	r3, r3, #7
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	183b      	adds	r3, r7, r0
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	4053      	eors	r3, r2
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	001a      	movs	r2, r3
 80118ba:	2306      	movs	r3, #6
 80118bc:	4013      	ands	r3, r2
 80118be:	d120      	bne.n	8011902 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80118c0:	183b      	adds	r3, r7, r0
 80118c2:	187a      	adds	r2, r7, r1
 80118c4:	8812      	ldrh	r2, [r2, #0]
 80118c6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d14c      	bne.n	8011974 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2200      	movs	r2, #0
 80118de:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2208      	movs	r2, #8
 80118e6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2240      	movs	r2, #64	@ 0x40
 80118ec:	2100      	movs	r1, #0
 80118ee:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80118f0:	183b      	adds	r3, r7, r0
 80118f2:	881a      	ldrh	r2, [r3, #0]
 80118f4:	197b      	adds	r3, r7, r5
 80118f6:	7819      	ldrb	r1, [r3, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	0018      	movs	r0, r3
 80118fc:	f7ff fa39 	bl	8010d72 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011900:	e038      	b.n	8011974 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011902:	240c      	movs	r4, #12
 8011904:	193b      	adds	r3, r7, r4
 8011906:	2208      	movs	r2, #8
 8011908:	18ba      	adds	r2, r7, r2
 801190a:	8812      	ldrh	r2, [r2, #0]
 801190c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801190e:	2380      	movs	r3, #128	@ 0x80
 8011910:	021a      	lsls	r2, r3, #8
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	0011      	movs	r1, r2
 8011916:	0018      	movs	r0, r3
 8011918:	f001 f85c 	bl	80129d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2240      	movs	r2, #64	@ 0x40
 8011920:	2100      	movs	r1, #0
 8011922:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011924:	193b      	adds	r3, r7, r4
 8011926:	881a      	ldrh	r2, [r3, #0]
 8011928:	230f      	movs	r3, #15
 801192a:	18fb      	adds	r3, r7, r3
 801192c:	7819      	ldrb	r1, [r3, #0]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	0018      	movs	r0, r3
 8011932:	f7ff fa1e 	bl	8010d72 <HAL_I2C_AddrCallback>
}
 8011936:	e01d      	b.n	8011974 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011938:	2380      	movs	r3, #128	@ 0x80
 801193a:	021a      	lsls	r2, r3, #8
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	0011      	movs	r1, r2
 8011940:	0018      	movs	r0, r3
 8011942:	f001 f847 	bl	80129d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2240      	movs	r2, #64	@ 0x40
 801194a:	2100      	movs	r1, #0
 801194c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801194e:	230c      	movs	r3, #12
 8011950:	18fb      	adds	r3, r7, r3
 8011952:	881a      	ldrh	r2, [r3, #0]
 8011954:	230f      	movs	r3, #15
 8011956:	18fb      	adds	r3, r7, r3
 8011958:	7819      	ldrb	r1, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	0018      	movs	r0, r3
 801195e:	f7ff fa08 	bl	8010d72 <HAL_I2C_AddrCallback>
}
 8011962:	e007      	b.n	8011974 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2208      	movs	r2, #8
 801196a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2240      	movs	r2, #64	@ 0x40
 8011970:	2100      	movs	r1, #0
 8011972:	5499      	strb	r1, [r3, r2]
}
 8011974:	46c0      	nop			@ (mov r8, r8)
 8011976:	46bd      	mov	sp, r7
 8011978:	b004      	add	sp, #16
 801197a:	bdb0      	pop	{r4, r5, r7, pc}

0801197c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2242      	movs	r2, #66	@ 0x42
 8011988:	2100      	movs	r1, #0
 801198a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2241      	movs	r2, #65	@ 0x41
 8011990:	5c9b      	ldrb	r3, [r3, r2]
 8011992:	b2db      	uxtb	r3, r3
 8011994:	2b21      	cmp	r3, #33	@ 0x21
 8011996:	d117      	bne.n	80119c8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2241      	movs	r2, #65	@ 0x41
 801199c:	2120      	movs	r1, #32
 801199e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2211      	movs	r2, #17
 80119a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2101      	movs	r1, #1
 80119b0:	0018      	movs	r0, r3
 80119b2:	f001 f80f 	bl	80129d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2240      	movs	r2, #64	@ 0x40
 80119ba:	2100      	movs	r1, #0
 80119bc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	0018      	movs	r0, r3
 80119c2:	f7ff f9b6 	bl	8010d32 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80119c6:	e016      	b.n	80119f6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2241      	movs	r2, #65	@ 0x41
 80119cc:	2120      	movs	r1, #32
 80119ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2212      	movs	r2, #18
 80119d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2102      	movs	r1, #2
 80119e0:	0018      	movs	r0, r3
 80119e2:	f000 fff7 	bl	80129d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2240      	movs	r2, #64	@ 0x40
 80119ea:	2100      	movs	r1, #0
 80119ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	0018      	movs	r0, r3
 80119f2:	f7ff f9a6 	bl	8010d42 <HAL_I2C_MasterRxCpltCallback>
}
 80119f6:	46c0      	nop			@ (mov r8, r8)
 80119f8:	46bd      	mov	sp, r7
 80119fa:	b002      	add	sp, #8
 80119fc:	bd80      	pop	{r7, pc}
	...

08011a00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2242      	movs	r2, #66	@ 0x42
 8011a14:	2100      	movs	r1, #0
 8011a16:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	2380      	movs	r3, #128	@ 0x80
 8011a1c:	01db      	lsls	r3, r3, #7
 8011a1e:	4013      	ands	r3, r2
 8011a20:	d008      	beq.n	8011a34 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4924      	ldr	r1, [pc, #144]	@ (8011ac0 <I2C_ITSlaveSeqCplt+0xc0>)
 8011a2e:	400a      	ands	r2, r1
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	e00c      	b.n	8011a4e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	2380      	movs	r3, #128	@ 0x80
 8011a38:	021b      	lsls	r3, r3, #8
 8011a3a:	4013      	ands	r3, r2
 8011a3c:	d007      	beq.n	8011a4e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	491e      	ldr	r1, [pc, #120]	@ (8011ac4 <I2C_ITSlaveSeqCplt+0xc4>)
 8011a4a:	400a      	ands	r2, r1
 8011a4c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2241      	movs	r2, #65	@ 0x41
 8011a52:	5c9b      	ldrb	r3, [r3, r2]
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	2b29      	cmp	r3, #41	@ 0x29
 8011a58:	d114      	bne.n	8011a84 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2241      	movs	r2, #65	@ 0x41
 8011a5e:	2128      	movs	r1, #40	@ 0x28
 8011a60:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2221      	movs	r2, #33	@ 0x21
 8011a66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2101      	movs	r1, #1
 8011a6c:	0018      	movs	r0, r3
 8011a6e:	f000 ffb1 	bl	80129d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2240      	movs	r2, #64	@ 0x40
 8011a76:	2100      	movs	r1, #0
 8011a78:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	0018      	movs	r0, r3
 8011a7e:	f7ff f968 	bl	8010d52 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011a82:	e019      	b.n	8011ab8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2241      	movs	r2, #65	@ 0x41
 8011a88:	5c9b      	ldrb	r3, [r3, r2]
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a8e:	d113      	bne.n	8011ab8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2241      	movs	r2, #65	@ 0x41
 8011a94:	2128      	movs	r1, #40	@ 0x28
 8011a96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2222      	movs	r2, #34	@ 0x22
 8011a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2102      	movs	r1, #2
 8011aa2:	0018      	movs	r0, r3
 8011aa4:	f000 ff96 	bl	80129d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2240      	movs	r2, #64	@ 0x40
 8011aac:	2100      	movs	r1, #0
 8011aae:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	0018      	movs	r0, r3
 8011ab4:	f7ff f955 	bl	8010d62 <HAL_I2C_SlaveRxCpltCallback>
}
 8011ab8:	46c0      	nop			@ (mov r8, r8)
 8011aba:	46bd      	mov	sp, r7
 8011abc:	b004      	add	sp, #16
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	ffffbfff 	.word	0xffffbfff
 8011ac4:	ffff7fff 	.word	0xffff7fff

08011ac8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2220      	movs	r2, #32
 8011adc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2241      	movs	r2, #65	@ 0x41
 8011ae2:	5c9b      	ldrb	r3, [r3, r2]
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	2b21      	cmp	r3, #33	@ 0x21
 8011ae8:	d108      	bne.n	8011afc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2101      	movs	r1, #1
 8011aee:	0018      	movs	r0, r3
 8011af0:	f000 ff70 	bl	80129d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2211      	movs	r2, #17
 8011af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011afa:	e00d      	b.n	8011b18 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2241      	movs	r2, #65	@ 0x41
 8011b00:	5c9b      	ldrb	r3, [r3, r2]
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b22      	cmp	r3, #34	@ 0x22
 8011b06:	d107      	bne.n	8011b18 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2102      	movs	r1, #2
 8011b0c:	0018      	movs	r0, r3
 8011b0e:	f000 ff61 	bl	80129d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2212      	movs	r2, #18
 8011b16:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	685a      	ldr	r2, [r3, #4]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	494e      	ldr	r1, [pc, #312]	@ (8011c5c <I2C_ITMasterCplt+0x194>)
 8011b24:	400a      	ands	r2, r1
 8011b26:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4a4b      	ldr	r2, [pc, #300]	@ (8011c60 <I2C_ITMasterCplt+0x198>)
 8011b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2210      	movs	r2, #16
 8011b38:	4013      	ands	r3, r2
 8011b3a:	d009      	beq.n	8011b50 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2210      	movs	r2, #16
 8011b42:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b48:	2204      	movs	r2, #4
 8011b4a:	431a      	orrs	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2241      	movs	r2, #65	@ 0x41
 8011b54:	5c9b      	ldrb	r3, [r3, r2]
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	2b60      	cmp	r3, #96	@ 0x60
 8011b5a:	d109      	bne.n	8011b70 <I2C_ITMasterCplt+0xa8>
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	2204      	movs	r2, #4
 8011b60:	4013      	ands	r3, r2
 8011b62:	d005      	beq.n	8011b70 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	0018      	movs	r0, r3
 8011b74:	f000 fb19 	bl	80121aa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b7c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2241      	movs	r2, #65	@ 0x41
 8011b82:	5c9b      	ldrb	r3, [r3, r2]
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b60      	cmp	r3, #96	@ 0x60
 8011b88:	d002      	beq.n	8011b90 <I2C_ITMasterCplt+0xc8>
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d007      	beq.n	8011ba0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	0011      	movs	r1, r2
 8011b98:	0018      	movs	r0, r3
 8011b9a:	f000 f9db 	bl	8011f54 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011b9e:	e058      	b.n	8011c52 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2241      	movs	r2, #65	@ 0x41
 8011ba4:	5c9b      	ldrb	r3, [r3, r2]
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	2b21      	cmp	r3, #33	@ 0x21
 8011baa:	d126      	bne.n	8011bfa <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2241      	movs	r2, #65	@ 0x41
 8011bb0:	2120      	movs	r1, #32
 8011bb2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2242      	movs	r2, #66	@ 0x42
 8011bbe:	5c9b      	ldrb	r3, [r3, r2]
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	2b40      	cmp	r3, #64	@ 0x40
 8011bc4:	d10c      	bne.n	8011be0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2242      	movs	r2, #66	@ 0x42
 8011bca:	2100      	movs	r1, #0
 8011bcc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2240      	movs	r2, #64	@ 0x40
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	0018      	movs	r0, r3
 8011bda:	f7ff f8e2 	bl	8010da2 <HAL_I2C_MemTxCpltCallback>
}
 8011bde:	e038      	b.n	8011c52 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2242      	movs	r2, #66	@ 0x42
 8011be4:	2100      	movs	r1, #0
 8011be6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2240      	movs	r2, #64	@ 0x40
 8011bec:	2100      	movs	r1, #0
 8011bee:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	0018      	movs	r0, r3
 8011bf4:	f7ff f89d 	bl	8010d32 <HAL_I2C_MasterTxCpltCallback>
}
 8011bf8:	e02b      	b.n	8011c52 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2241      	movs	r2, #65	@ 0x41
 8011bfe:	5c9b      	ldrb	r3, [r3, r2]
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	2b22      	cmp	r3, #34	@ 0x22
 8011c04:	d125      	bne.n	8011c52 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2241      	movs	r2, #65	@ 0x41
 8011c0a:	2120      	movs	r1, #32
 8011c0c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2242      	movs	r2, #66	@ 0x42
 8011c18:	5c9b      	ldrb	r3, [r3, r2]
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	2b40      	cmp	r3, #64	@ 0x40
 8011c1e:	d10c      	bne.n	8011c3a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2242      	movs	r2, #66	@ 0x42
 8011c24:	2100      	movs	r1, #0
 8011c26:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2240      	movs	r2, #64	@ 0x40
 8011c2c:	2100      	movs	r1, #0
 8011c2e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	0018      	movs	r0, r3
 8011c34:	f7ff f8bd 	bl	8010db2 <HAL_I2C_MemRxCpltCallback>
}
 8011c38:	e00b      	b.n	8011c52 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2242      	movs	r2, #66	@ 0x42
 8011c3e:	2100      	movs	r1, #0
 8011c40:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2240      	movs	r2, #64	@ 0x40
 8011c46:	2100      	movs	r1, #0
 8011c48:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	0018      	movs	r0, r3
 8011c4e:	f7ff f878 	bl	8010d42 <HAL_I2C_MasterRxCpltCallback>
}
 8011c52:	46c0      	nop			@ (mov r8, r8)
 8011c54:	46bd      	mov	sp, r7
 8011c56:	b006      	add	sp, #24
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	46c0      	nop			@ (mov r8, r8)
 8011c5c:	fe00e800 	.word	0xfe00e800
 8011c60:	ffff0000 	.word	0xffff0000

08011c64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b086      	sub	sp, #24
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011c7a:	200f      	movs	r0, #15
 8011c7c:	183b      	adds	r3, r7, r0
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	2141      	movs	r1, #65	@ 0x41
 8011c82:	5c52      	ldrb	r2, [r2, r1]
 8011c84:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2220      	movs	r2, #32
 8011c8c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011c8e:	183b      	adds	r3, r7, r0
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	2b21      	cmp	r3, #33	@ 0x21
 8011c94:	d003      	beq.n	8011c9e <I2C_ITSlaveCplt+0x3a>
 8011c96:	183b      	adds	r3, r7, r0
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	2b29      	cmp	r3, #41	@ 0x29
 8011c9c:	d109      	bne.n	8011cb2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011c9e:	4a7b      	ldr	r2, [pc, #492]	@ (8011e8c <I2C_ITSlaveCplt+0x228>)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	0011      	movs	r1, r2
 8011ca4:	0018      	movs	r0, r3
 8011ca6:	f000 fe95 	bl	80129d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2221      	movs	r2, #33	@ 0x21
 8011cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cb0:	e011      	b.n	8011cd6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011cb2:	220f      	movs	r2, #15
 8011cb4:	18bb      	adds	r3, r7, r2
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	2b22      	cmp	r3, #34	@ 0x22
 8011cba:	d003      	beq.n	8011cc4 <I2C_ITSlaveCplt+0x60>
 8011cbc:	18bb      	adds	r3, r7, r2
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cc2:	d108      	bne.n	8011cd6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011cc4:	4a72      	ldr	r2, [pc, #456]	@ (8011e90 <I2C_ITSlaveCplt+0x22c>)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	0011      	movs	r1, r2
 8011cca:	0018      	movs	r0, r3
 8011ccc:	f000 fe82 	bl	80129d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2222      	movs	r2, #34	@ 0x22
 8011cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2180      	movs	r1, #128	@ 0x80
 8011ce2:	0209      	lsls	r1, r1, #8
 8011ce4:	430a      	orrs	r2, r1
 8011ce6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	685a      	ldr	r2, [r3, #4]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4968      	ldr	r1, [pc, #416]	@ (8011e94 <I2C_ITSlaveCplt+0x230>)
 8011cf4:	400a      	ands	r2, r1
 8011cf6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	0018      	movs	r0, r3
 8011cfc:	f000 fa55 	bl	80121aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011d00:	693a      	ldr	r2, [r7, #16]
 8011d02:	2380      	movs	r3, #128	@ 0x80
 8011d04:	01db      	lsls	r3, r3, #7
 8011d06:	4013      	ands	r3, r2
 8011d08:	d013      	beq.n	8011d32 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4960      	ldr	r1, [pc, #384]	@ (8011e98 <I2C_ITSlaveCplt+0x234>)
 8011d16:	400a      	ands	r2, r1
 8011d18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d01f      	beq.n	8011d62 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011d30:	e017      	b.n	8011d62 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011d32:	693a      	ldr	r2, [r7, #16]
 8011d34:	2380      	movs	r3, #128	@ 0x80
 8011d36:	021b      	lsls	r3, r3, #8
 8011d38:	4013      	ands	r3, r2
 8011d3a:	d012      	beq.n	8011d62 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4955      	ldr	r1, [pc, #340]	@ (8011e9c <I2C_ITSlaveCplt+0x238>)
 8011d48:	400a      	ands	r2, r1
 8011d4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d006      	beq.n	8011d62 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	b29a      	uxth	r2, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	2204      	movs	r2, #4
 8011d66:	4013      	ands	r3, r2
 8011d68:	d020      	beq.n	8011dac <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	2204      	movs	r2, #4
 8011d6e:	4393      	bics	r3, r2
 8011d70:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d7c:	b2d2      	uxtb	r2, r2
 8011d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d84:	1c5a      	adds	r2, r3, #1
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00c      	beq.n	8011dac <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d96:	3b01      	subs	r3, #1
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	3b01      	subs	r3, #1
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d005      	beq.n	8011dc2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dba:	2204      	movs	r2, #4
 8011dbc:	431a      	orrs	r2, r3
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2242      	movs	r2, #66	@ 0x42
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d013      	beq.n	8011e00 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	0011      	movs	r1, r2
 8011de0:	0018      	movs	r0, r3
 8011de2:	f000 f8b7 	bl	8011f54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2241      	movs	r2, #65	@ 0x41
 8011dea:	5c9b      	ldrb	r3, [r3, r2]
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b28      	cmp	r3, #40	@ 0x28
 8011df0:	d147      	bne.n	8011e82 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	0011      	movs	r1, r2
 8011df8:	0018      	movs	r0, r3
 8011dfa:	f000 f853 	bl	8011ea4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011dfe:	e040      	b.n	8011e82 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e04:	4a26      	ldr	r2, [pc, #152]	@ (8011ea0 <I2C_ITSlaveCplt+0x23c>)
 8011e06:	4293      	cmp	r3, r2
 8011e08:	d016      	beq.n	8011e38 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	0018      	movs	r0, r3
 8011e0e:	f7ff fdf7 	bl	8011a00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	4a22      	ldr	r2, [pc, #136]	@ (8011ea0 <I2C_ITSlaveCplt+0x23c>)
 8011e16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2241      	movs	r2, #65	@ 0x41
 8011e1c:	2120      	movs	r1, #32
 8011e1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2240      	movs	r2, #64	@ 0x40
 8011e2a:	2100      	movs	r1, #0
 8011e2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	0018      	movs	r0, r3
 8011e32:	f7fe ffae 	bl	8010d92 <HAL_I2C_ListenCpltCallback>
}
 8011e36:	e024      	b.n	8011e82 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2241      	movs	r2, #65	@ 0x41
 8011e3c:	5c9b      	ldrb	r3, [r3, r2]
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	2b22      	cmp	r3, #34	@ 0x22
 8011e42:	d10f      	bne.n	8011e64 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2241      	movs	r2, #65	@ 0x41
 8011e48:	2120      	movs	r1, #32
 8011e4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2240      	movs	r2, #64	@ 0x40
 8011e56:	2100      	movs	r1, #0
 8011e58:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	0018      	movs	r0, r3
 8011e5e:	f7fe ff80 	bl	8010d62 <HAL_I2C_SlaveRxCpltCallback>
}
 8011e62:	e00e      	b.n	8011e82 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2241      	movs	r2, #65	@ 0x41
 8011e68:	2120      	movs	r1, #32
 8011e6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2240      	movs	r2, #64	@ 0x40
 8011e76:	2100      	movs	r1, #0
 8011e78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	0018      	movs	r0, r3
 8011e7e:	f7fe ff68 	bl	8010d52 <HAL_I2C_SlaveTxCpltCallback>
}
 8011e82:	46c0      	nop			@ (mov r8, r8)
 8011e84:	46bd      	mov	sp, r7
 8011e86:	b006      	add	sp, #24
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	46c0      	nop			@ (mov r8, r8)
 8011e8c:	00008001 	.word	0x00008001
 8011e90:	00008002 	.word	0x00008002
 8011e94:	fe00e800 	.word	0xfe00e800
 8011e98:	ffffbfff 	.word	0xffffbfff
 8011e9c:	ffff7fff 	.word	0xffff7fff
 8011ea0:	ffff0000 	.word	0xffff0000

08011ea4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	4a26      	ldr	r2, [pc, #152]	@ (8011f4c <I2C_ITListenCplt+0xa8>)
 8011eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2241      	movs	r2, #65	@ 0x41
 8011ebe:	2120      	movs	r1, #32
 8011ec0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2242      	movs	r2, #66	@ 0x42
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	2204      	movs	r2, #4
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	d022      	beq.n	8011f1e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ee2:	b2d2      	uxtb	r2, r2
 8011ee4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d012      	beq.n	8011f1e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011efc:	3b01      	subs	r3, #1
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f16:	2204      	movs	r2, #4
 8011f18:	431a      	orrs	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8011f50 <I2C_ITListenCplt+0xac>)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	0011      	movs	r1, r2
 8011f24:	0018      	movs	r0, r3
 8011f26:	f000 fd55 	bl	80129d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2210      	movs	r2, #16
 8011f30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2240      	movs	r2, #64	@ 0x40
 8011f36:	2100      	movs	r1, #0
 8011f38:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	0018      	movs	r0, r3
 8011f3e:	f7fe ff28 	bl	8010d92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011f42:	46c0      	nop			@ (mov r8, r8)
 8011f44:	46bd      	mov	sp, r7
 8011f46:	b002      	add	sp, #8
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	46c0      	nop			@ (mov r8, r8)
 8011f4c:	ffff0000 	.word	0xffff0000
 8011f50:	00008003 	.word	0x00008003

08011f54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011f5e:	200f      	movs	r0, #15
 8011f60:	183b      	adds	r3, r7, r0
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	2141      	movs	r1, #65	@ 0x41
 8011f66:	5c52      	ldrb	r2, [r2, r1]
 8011f68:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2242      	movs	r2, #66	@ 0x42
 8011f6e:	2100      	movs	r1, #0
 8011f70:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4a72      	ldr	r2, [pc, #456]	@ (8012140 <I2C_ITError+0x1ec>)
 8011f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	431a      	orrs	r2, r3
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011f8a:	183b      	adds	r3, r7, r0
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	2b28      	cmp	r3, #40	@ 0x28
 8011f90:	d007      	beq.n	8011fa2 <I2C_ITError+0x4e>
 8011f92:	183b      	adds	r3, r7, r0
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	2b29      	cmp	r3, #41	@ 0x29
 8011f98:	d003      	beq.n	8011fa2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011f9a:	183b      	adds	r3, r7, r0
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fa0:	d10c      	bne.n	8011fbc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2103      	movs	r1, #3
 8011fa6:	0018      	movs	r0, r3
 8011fa8:	f000 fd14 	bl	80129d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2241      	movs	r2, #65	@ 0x41
 8011fb0:	2128      	movs	r1, #40	@ 0x28
 8011fb2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	4a63      	ldr	r2, [pc, #396]	@ (8012144 <I2C_ITError+0x1f0>)
 8011fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8011fba:	e032      	b.n	8012022 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011fbc:	4a62      	ldr	r2, [pc, #392]	@ (8012148 <I2C_ITError+0x1f4>)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	0011      	movs	r1, r2
 8011fc2:	0018      	movs	r0, r3
 8011fc4:	f000 fd06 	bl	80129d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	0018      	movs	r0, r3
 8011fcc:	f000 f8ed 	bl	80121aa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2241      	movs	r2, #65	@ 0x41
 8011fd4:	5c9b      	ldrb	r3, [r3, r2]
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	2b60      	cmp	r3, #96	@ 0x60
 8011fda:	d01f      	beq.n	801201c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2241      	movs	r2, #65	@ 0x41
 8011fe0:	2120      	movs	r1, #32
 8011fe2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	699b      	ldr	r3, [r3, #24]
 8011fea:	2220      	movs	r2, #32
 8011fec:	4013      	ands	r3, r2
 8011fee:	2b20      	cmp	r3, #32
 8011ff0:	d114      	bne.n	801201c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	699b      	ldr	r3, [r3, #24]
 8011ff8:	2210      	movs	r2, #16
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	2b10      	cmp	r3, #16
 8011ffe:	d109      	bne.n	8012014 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2210      	movs	r2, #16
 8012006:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801200c:	2204      	movs	r2, #4
 801200e:	431a      	orrs	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2220      	movs	r2, #32
 801201a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012026:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801202c:	2b00      	cmp	r3, #0
 801202e:	d03b      	beq.n	80120a8 <I2C_ITError+0x154>
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	2b11      	cmp	r3, #17
 8012034:	d002      	beq.n	801203c <I2C_ITError+0xe8>
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2b21      	cmp	r3, #33	@ 0x21
 801203a:	d135      	bne.n	80120a8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	2380      	movs	r3, #128	@ 0x80
 8012044:	01db      	lsls	r3, r3, #7
 8012046:	401a      	ands	r2, r3
 8012048:	2380      	movs	r3, #128	@ 0x80
 801204a:	01db      	lsls	r3, r3, #7
 801204c:	429a      	cmp	r2, r3
 801204e:	d107      	bne.n	8012060 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	493c      	ldr	r1, [pc, #240]	@ (801214c <I2C_ITError+0x1f8>)
 801205c:	400a      	ands	r2, r1
 801205e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012064:	0018      	movs	r0, r3
 8012066:	f7fd fd62 	bl	800fb2e <HAL_DMA_GetState>
 801206a:	0003      	movs	r3, r0
 801206c:	2b01      	cmp	r3, #1
 801206e:	d016      	beq.n	801209e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012074:	4a36      	ldr	r2, [pc, #216]	@ (8012150 <I2C_ITError+0x1fc>)
 8012076:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2240      	movs	r2, #64	@ 0x40
 801207c:	2100      	movs	r1, #0
 801207e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012084:	0018      	movs	r0, r3
 8012086:	f7fd fc5d 	bl	800f944 <HAL_DMA_Abort_IT>
 801208a:	1e03      	subs	r3, r0, #0
 801208c:	d051      	beq.n	8012132 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012098:	0018      	movs	r0, r3
 801209a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801209c:	e049      	b.n	8012132 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	0018      	movs	r0, r3
 80120a2:	f000 f859 	bl	8012158 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80120a6:	e044      	b.n	8012132 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d03b      	beq.n	8012128 <I2C_ITError+0x1d4>
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	2b12      	cmp	r3, #18
 80120b4:	d002      	beq.n	80120bc <I2C_ITError+0x168>
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	2b22      	cmp	r3, #34	@ 0x22
 80120ba:	d135      	bne.n	8012128 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	2380      	movs	r3, #128	@ 0x80
 80120c4:	021b      	lsls	r3, r3, #8
 80120c6:	401a      	ands	r2, r3
 80120c8:	2380      	movs	r3, #128	@ 0x80
 80120ca:	021b      	lsls	r3, r3, #8
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d107      	bne.n	80120e0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	491e      	ldr	r1, [pc, #120]	@ (8012154 <I2C_ITError+0x200>)
 80120dc:	400a      	ands	r2, r1
 80120de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120e4:	0018      	movs	r0, r3
 80120e6:	f7fd fd22 	bl	800fb2e <HAL_DMA_GetState>
 80120ea:	0003      	movs	r3, r0
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d016      	beq.n	801211e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f4:	4a16      	ldr	r2, [pc, #88]	@ (8012150 <I2C_ITError+0x1fc>)
 80120f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2240      	movs	r2, #64	@ 0x40
 80120fc:	2100      	movs	r1, #0
 80120fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012104:	0018      	movs	r0, r3
 8012106:	f7fd fc1d 	bl	800f944 <HAL_DMA_Abort_IT>
 801210a:	1e03      	subs	r3, r0, #0
 801210c:	d013      	beq.n	8012136 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012118:	0018      	movs	r0, r3
 801211a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801211c:	e00b      	b.n	8012136 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	0018      	movs	r0, r3
 8012122:	f000 f819 	bl	8012158 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012126:	e006      	b.n	8012136 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	0018      	movs	r0, r3
 801212c:	f000 f814 	bl	8012158 <I2C_TreatErrorCallback>
  }
}
 8012130:	e002      	b.n	8012138 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012132:	46c0      	nop			@ (mov r8, r8)
 8012134:	e000      	b.n	8012138 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012136:	46c0      	nop			@ (mov r8, r8)
}
 8012138:	46c0      	nop			@ (mov r8, r8)
 801213a:	46bd      	mov	sp, r7
 801213c:	b004      	add	sp, #16
 801213e:	bd80      	pop	{r7, pc}
 8012140:	ffff0000 	.word	0xffff0000
 8012144:	08011039 	.word	0x08011039
 8012148:	00008003 	.word	0x00008003
 801214c:	ffffbfff 	.word	0xffffbfff
 8012150:	08012363 	.word	0x08012363
 8012154:	ffff7fff 	.word	0xffff7fff

08012158 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2241      	movs	r2, #65	@ 0x41
 8012164:	5c9b      	ldrb	r3, [r3, r2]
 8012166:	b2db      	uxtb	r3, r3
 8012168:	2b60      	cmp	r3, #96	@ 0x60
 801216a:	d10f      	bne.n	801218c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2241      	movs	r2, #65	@ 0x41
 8012170:	2120      	movs	r1, #32
 8012172:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2240      	movs	r2, #64	@ 0x40
 801217e:	2100      	movs	r1, #0
 8012180:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	0018      	movs	r0, r3
 8012186:	f7fe fe24 	bl	8010dd2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801218a:	e00a      	b.n	80121a2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2240      	movs	r2, #64	@ 0x40
 8012196:	2100      	movs	r1, #0
 8012198:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	0018      	movs	r0, r3
 801219e:	f7fe fe10 	bl	8010dc2 <HAL_I2C_ErrorCallback>
}
 80121a2:	46c0      	nop			@ (mov r8, r8)
 80121a4:	46bd      	mov	sp, r7
 80121a6:	b002      	add	sp, #8
 80121a8:	bd80      	pop	{r7, pc}

080121aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b082      	sub	sp, #8
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	2202      	movs	r2, #2
 80121ba:	4013      	ands	r3, r2
 80121bc:	2b02      	cmp	r3, #2
 80121be:	d103      	bne.n	80121c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2200      	movs	r2, #0
 80121c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	699b      	ldr	r3, [r3, #24]
 80121ce:	2201      	movs	r2, #1
 80121d0:	4013      	ands	r3, r2
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d007      	beq.n	80121e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	699a      	ldr	r2, [r3, #24]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2101      	movs	r1, #1
 80121e2:	430a      	orrs	r2, r1
 80121e4:	619a      	str	r2, [r3, #24]
  }
}
 80121e6:	46c0      	nop			@ (mov r8, r8)
 80121e8:	46bd      	mov	sp, r7
 80121ea:	b002      	add	sp, #8
 80121ec:	bd80      	pop	{r7, pc}
	...

080121f0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121fc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	681a      	ldr	r2, [r3, #0]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	4920      	ldr	r1, [pc, #128]	@ (801228c <I2C_DMAMasterTransmitCplt+0x9c>)
 801220a:	400a      	ands	r2, r1
 801220c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012212:	b29b      	uxth	r3, r3
 8012214:	2b00      	cmp	r3, #0
 8012216:	d105      	bne.n	8012224 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2120      	movs	r1, #32
 801221c:	0018      	movs	r0, r3
 801221e:	f000 fb4b 	bl	80128b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012222:	e02e      	b.n	8012282 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801222c:	189a      	adds	r2, r3, r2
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012236:	b29b      	uxth	r3, r3
 8012238:	2bff      	cmp	r3, #255	@ 0xff
 801223a:	d903      	bls.n	8012244 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	22ff      	movs	r2, #255	@ 0xff
 8012240:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012242:	e004      	b.n	801224e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012248:	b29a      	uxth	r2, r3
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012256:	0019      	movs	r1, r3
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	3328      	adds	r3, #40	@ 0x28
 801225e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012264:	f7fd fac8 	bl	800f7f8 <HAL_DMA_Start_IT>
 8012268:	1e03      	subs	r3, r0, #0
 801226a:	d005      	beq.n	8012278 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2110      	movs	r1, #16
 8012270:	0018      	movs	r0, r3
 8012272:	f7ff fe6f 	bl	8011f54 <I2C_ITError>
}
 8012276:	e004      	b.n	8012282 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2140      	movs	r1, #64	@ 0x40
 801227c:	0018      	movs	r0, r3
 801227e:	f000 fb1b 	bl	80128b8 <I2C_Enable_IRQ>
}
 8012282:	46c0      	nop			@ (mov r8, r8)
 8012284:	46bd      	mov	sp, r7
 8012286:	b004      	add	sp, #16
 8012288:	bd80      	pop	{r7, pc}
 801228a:	46c0      	nop			@ (mov r8, r8)
 801228c:	ffffbfff 	.word	0xffffbfff

08012290 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801229c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4920      	ldr	r1, [pc, #128]	@ (801232c <I2C_DMAMasterReceiveCplt+0x9c>)
 80122aa:	400a      	ands	r2, r1
 80122ac:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d105      	bne.n	80122c4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2120      	movs	r1, #32
 80122bc:	0018      	movs	r0, r3
 80122be:	f000 fafb 	bl	80128b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80122c2:	e02e      	b.n	8012322 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80122cc:	189a      	adds	r2, r3, r2
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	2bff      	cmp	r3, #255	@ 0xff
 80122da:	d903      	bls.n	80122e4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	22ff      	movs	r2, #255	@ 0xff
 80122e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80122e2:	e004      	b.n	80122ee <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3324      	adds	r3, #36	@ 0x24
 80122f8:	0019      	movs	r1, r3
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122fe:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012304:	f7fd fa78 	bl	800f7f8 <HAL_DMA_Start_IT>
 8012308:	1e03      	subs	r3, r0, #0
 801230a:	d005      	beq.n	8012318 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2110      	movs	r1, #16
 8012310:	0018      	movs	r0, r3
 8012312:	f7ff fe1f 	bl	8011f54 <I2C_ITError>
}
 8012316:	e004      	b.n	8012322 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2140      	movs	r1, #64	@ 0x40
 801231c:	0018      	movs	r0, r3
 801231e:	f000 facb 	bl	80128b8 <I2C_Enable_IRQ>
}
 8012322:	46c0      	nop			@ (mov r8, r8)
 8012324:	46bd      	mov	sp, r7
 8012326:	b004      	add	sp, #16
 8012328:	bd80      	pop	{r7, pc}
 801232a:	46c0      	nop			@ (mov r8, r8)
 801232c:	ffff7fff 	.word	0xffff7fff

08012330 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801233c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	685a      	ldr	r2, [r3, #4]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2180      	movs	r1, #128	@ 0x80
 801234a:	0209      	lsls	r1, r1, #8
 801234c:	430a      	orrs	r2, r1
 801234e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2110      	movs	r1, #16
 8012354:	0018      	movs	r0, r3
 8012356:	f7ff fdfd 	bl	8011f54 <I2C_ITError>
}
 801235a:	46c0      	nop			@ (mov r8, r8)
 801235c:	46bd      	mov	sp, r7
 801235e:	b004      	add	sp, #16
 8012360:	bd80      	pop	{r7, pc}

08012362 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b084      	sub	sp, #16
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801236e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012374:	2b00      	cmp	r3, #0
 8012376:	d003      	beq.n	8012380 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801237c:	2200      	movs	r2, #0
 801237e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d003      	beq.n	8012390 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801238c:	2200      	movs	r2, #0
 801238e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	0018      	movs	r0, r3
 8012394:	f7ff fee0 	bl	8012158 <I2C_TreatErrorCallback>
}
 8012398:	46c0      	nop			@ (mov r8, r8)
 801239a:	46bd      	mov	sp, r7
 801239c:	b004      	add	sp, #16
 801239e:	bd80      	pop	{r7, pc}

080123a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	603b      	str	r3, [r7, #0]
 80123ac:	1dfb      	adds	r3, r7, #7
 80123ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80123b0:	e030      	b.n	8012414 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	3301      	adds	r3, #1
 80123b6:	d02d      	beq.n	8012414 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123b8:	f7fc fccc 	bl	800ed54 <HAL_GetTick>
 80123bc:	0002      	movs	r2, r0
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d302      	bcc.n	80123ce <I2C_WaitOnFlagUntilTimeout+0x2e>
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d122      	bne.n	8012414 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	699b      	ldr	r3, [r3, #24]
 80123d4:	68ba      	ldr	r2, [r7, #8]
 80123d6:	4013      	ands	r3, r2
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	1ad3      	subs	r3, r2, r3
 80123dc:	425a      	negs	r2, r3
 80123de:	4153      	adcs	r3, r2
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	001a      	movs	r2, r3
 80123e4:	1dfb      	adds	r3, r7, #7
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d113      	bne.n	8012414 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123f0:	2220      	movs	r2, #32
 80123f2:	431a      	orrs	r2, r3
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2241      	movs	r2, #65	@ 0x41
 80123fc:	2120      	movs	r1, #32
 80123fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2242      	movs	r2, #66	@ 0x42
 8012404:	2100      	movs	r1, #0
 8012406:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2240      	movs	r2, #64	@ 0x40
 801240c:	2100      	movs	r1, #0
 801240e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012410:	2301      	movs	r3, #1
 8012412:	e00f      	b.n	8012434 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	699b      	ldr	r3, [r3, #24]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	4013      	ands	r3, r2
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	425a      	negs	r2, r3
 8012424:	4153      	adcs	r3, r2
 8012426:	b2db      	uxtb	r3, r3
 8012428:	001a      	movs	r2, r3
 801242a:	1dfb      	adds	r3, r7, #7
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	429a      	cmp	r2, r3
 8012430:	d0bf      	beq.n	80123b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	0018      	movs	r0, r3
 8012436:	46bd      	mov	sp, r7
 8012438:	b004      	add	sp, #16
 801243a:	bd80      	pop	{r7, pc}

0801243c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012448:	e032      	b.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	68b9      	ldr	r1, [r7, #8]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	0018      	movs	r0, r3
 8012452:	f000 f8ff 	bl	8012654 <I2C_IsErrorOccurred>
 8012456:	1e03      	subs	r3, r0, #0
 8012458:	d001      	beq.n	801245e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801245a:	2301      	movs	r3, #1
 801245c:	e030      	b.n	80124c0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	3301      	adds	r3, #1
 8012462:	d025      	beq.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012464:	f7fc fc76 	bl	800ed54 <HAL_GetTick>
 8012468:	0002      	movs	r2, r0
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	68ba      	ldr	r2, [r7, #8]
 8012470:	429a      	cmp	r2, r3
 8012472:	d302      	bcc.n	801247a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d11a      	bne.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	699b      	ldr	r3, [r3, #24]
 8012480:	2202      	movs	r2, #2
 8012482:	4013      	ands	r3, r2
 8012484:	2b02      	cmp	r3, #2
 8012486:	d013      	beq.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801248c:	2220      	movs	r2, #32
 801248e:	431a      	orrs	r2, r3
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2241      	movs	r2, #65	@ 0x41
 8012498:	2120      	movs	r1, #32
 801249a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2242      	movs	r2, #66	@ 0x42
 80124a0:	2100      	movs	r1, #0
 80124a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2240      	movs	r2, #64	@ 0x40
 80124a8:	2100      	movs	r1, #0
 80124aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80124ac:	2301      	movs	r3, #1
 80124ae:	e007      	b.n	80124c0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	699b      	ldr	r3, [r3, #24]
 80124b6:	2202      	movs	r2, #2
 80124b8:	4013      	ands	r3, r2
 80124ba:	2b02      	cmp	r3, #2
 80124bc:	d1c5      	bne.n	801244a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	0018      	movs	r0, r3
 80124c2:	46bd      	mov	sp, r7
 80124c4:	b004      	add	sp, #16
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80124d4:	e02f      	b.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80124d6:	687a      	ldr	r2, [r7, #4]
 80124d8:	68b9      	ldr	r1, [r7, #8]
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	0018      	movs	r0, r3
 80124de:	f000 f8b9 	bl	8012654 <I2C_IsErrorOccurred>
 80124e2:	1e03      	subs	r3, r0, #0
 80124e4:	d001      	beq.n	80124ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80124e6:	2301      	movs	r3, #1
 80124e8:	e02d      	b.n	8012546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124ea:	f7fc fc33 	bl	800ed54 <HAL_GetTick>
 80124ee:	0002      	movs	r2, r0
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	1ad3      	subs	r3, r2, r3
 80124f4:	68ba      	ldr	r2, [r7, #8]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d302      	bcc.n	8012500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d11a      	bne.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	699b      	ldr	r3, [r3, #24]
 8012506:	2220      	movs	r2, #32
 8012508:	4013      	ands	r3, r2
 801250a:	2b20      	cmp	r3, #32
 801250c:	d013      	beq.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012512:	2220      	movs	r2, #32
 8012514:	431a      	orrs	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2241      	movs	r2, #65	@ 0x41
 801251e:	2120      	movs	r1, #32
 8012520:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2242      	movs	r2, #66	@ 0x42
 8012526:	2100      	movs	r1, #0
 8012528:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2240      	movs	r2, #64	@ 0x40
 801252e:	2100      	movs	r1, #0
 8012530:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012532:	2301      	movs	r3, #1
 8012534:	e007      	b.n	8012546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	699b      	ldr	r3, [r3, #24]
 801253c:	2220      	movs	r2, #32
 801253e:	4013      	ands	r3, r2
 8012540:	2b20      	cmp	r3, #32
 8012542:	d1c8      	bne.n	80124d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012544:	2300      	movs	r3, #0
}
 8012546:	0018      	movs	r0, r3
 8012548:	46bd      	mov	sp, r7
 801254a:	b004      	add	sp, #16
 801254c:	bd80      	pop	{r7, pc}
	...

08012550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801255c:	e06b      	b.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	68b9      	ldr	r1, [r7, #8]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	0018      	movs	r0, r3
 8012566:	f000 f875 	bl	8012654 <I2C_IsErrorOccurred>
 801256a:	1e03      	subs	r3, r0, #0
 801256c:	d001      	beq.n	8012572 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801256e:	2301      	movs	r3, #1
 8012570:	e069      	b.n	8012646 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	699b      	ldr	r3, [r3, #24]
 8012578:	2220      	movs	r2, #32
 801257a:	4013      	ands	r3, r2
 801257c:	2b20      	cmp	r3, #32
 801257e:	d138      	bne.n	80125f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	699b      	ldr	r3, [r3, #24]
 8012586:	2204      	movs	r2, #4
 8012588:	4013      	ands	r3, r2
 801258a:	2b04      	cmp	r3, #4
 801258c:	d105      	bne.n	801259a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012596:	2300      	movs	r3, #0
 8012598:	e055      	b.n	8012646 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	2210      	movs	r2, #16
 80125a2:	4013      	ands	r3, r2
 80125a4:	2b10      	cmp	r3, #16
 80125a6:	d107      	bne.n	80125b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2210      	movs	r2, #16
 80125ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2204      	movs	r2, #4
 80125b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80125b6:	e002      	b.n	80125be <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2200      	movs	r2, #0
 80125bc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	2220      	movs	r2, #32
 80125c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	491f      	ldr	r1, [pc, #124]	@ (8012650 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80125d2:	400a      	ands	r2, r1
 80125d4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2241      	movs	r2, #65	@ 0x41
 80125da:	2120      	movs	r1, #32
 80125dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2242      	movs	r2, #66	@ 0x42
 80125e2:	2100      	movs	r1, #0
 80125e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2240      	movs	r2, #64	@ 0x40
 80125ea:	2100      	movs	r1, #0
 80125ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80125ee:	2301      	movs	r3, #1
 80125f0:	e029      	b.n	8012646 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125f2:	f7fc fbaf 	bl	800ed54 <HAL_GetTick>
 80125f6:	0002      	movs	r2, r0
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	68ba      	ldr	r2, [r7, #8]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d302      	bcc.n	8012608 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d116      	bne.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	699b      	ldr	r3, [r3, #24]
 801260e:	2204      	movs	r2, #4
 8012610:	4013      	ands	r3, r2
 8012612:	2b04      	cmp	r3, #4
 8012614:	d00f      	beq.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801261a:	2220      	movs	r2, #32
 801261c:	431a      	orrs	r2, r3
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2241      	movs	r2, #65	@ 0x41
 8012626:	2120      	movs	r1, #32
 8012628:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2240      	movs	r2, #64	@ 0x40
 801262e:	2100      	movs	r1, #0
 8012630:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012632:	2301      	movs	r3, #1
 8012634:	e007      	b.n	8012646 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	699b      	ldr	r3, [r3, #24]
 801263c:	2204      	movs	r2, #4
 801263e:	4013      	ands	r3, r2
 8012640:	2b04      	cmp	r3, #4
 8012642:	d18c      	bne.n	801255e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012644:	2300      	movs	r3, #0
}
 8012646:	0018      	movs	r0, r3
 8012648:	46bd      	mov	sp, r7
 801264a:	b004      	add	sp, #16
 801264c:	bd80      	pop	{r7, pc}
 801264e:	46c0      	nop			@ (mov r8, r8)
 8012650:	fe00e800 	.word	0xfe00e800

08012654 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08a      	sub	sp, #40	@ 0x28
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012660:	2327      	movs	r3, #39	@ 0x27
 8012662:	18fb      	adds	r3, r7, r3
 8012664:	2200      	movs	r2, #0
 8012666:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	699b      	ldr	r3, [r3, #24]
 801266e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012670:	2300      	movs	r3, #0
 8012672:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	2210      	movs	r2, #16
 801267c:	4013      	ands	r3, r2
 801267e:	d100      	bne.n	8012682 <I2C_IsErrorOccurred+0x2e>
 8012680:	e079      	b.n	8012776 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2210      	movs	r2, #16
 8012688:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801268a:	e057      	b.n	801273c <I2C_IsErrorOccurred+0xe8>
 801268c:	2227      	movs	r2, #39	@ 0x27
 801268e:	18bb      	adds	r3, r7, r2
 8012690:	18ba      	adds	r2, r7, r2
 8012692:	7812      	ldrb	r2, [r2, #0]
 8012694:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	3301      	adds	r3, #1
 801269a:	d04f      	beq.n	801273c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801269c:	f7fc fb5a 	bl	800ed54 <HAL_GetTick>
 80126a0:	0002      	movs	r2, r0
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	68ba      	ldr	r2, [r7, #8]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d302      	bcc.n	80126b2 <I2C_IsErrorOccurred+0x5e>
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d144      	bne.n	801273c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	685a      	ldr	r2, [r3, #4]
 80126b8:	2380      	movs	r3, #128	@ 0x80
 80126ba:	01db      	lsls	r3, r3, #7
 80126bc:	4013      	ands	r3, r2
 80126be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80126c0:	2013      	movs	r0, #19
 80126c2:	183b      	adds	r3, r7, r0
 80126c4:	68fa      	ldr	r2, [r7, #12]
 80126c6:	2142      	movs	r1, #66	@ 0x42
 80126c8:	5c52      	ldrb	r2, [r2, r1]
 80126ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	699a      	ldr	r2, [r3, #24]
 80126d2:	2380      	movs	r3, #128	@ 0x80
 80126d4:	021b      	lsls	r3, r3, #8
 80126d6:	401a      	ands	r2, r3
 80126d8:	2380      	movs	r3, #128	@ 0x80
 80126da:	021b      	lsls	r3, r3, #8
 80126dc:	429a      	cmp	r2, r3
 80126de:	d126      	bne.n	801272e <I2C_IsErrorOccurred+0xda>
 80126e0:	697a      	ldr	r2, [r7, #20]
 80126e2:	2380      	movs	r3, #128	@ 0x80
 80126e4:	01db      	lsls	r3, r3, #7
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d021      	beq.n	801272e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80126ea:	183b      	adds	r3, r7, r0
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	2b20      	cmp	r3, #32
 80126f0:	d01d      	beq.n	801272e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	685a      	ldr	r2, [r3, #4]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2180      	movs	r1, #128	@ 0x80
 80126fe:	01c9      	lsls	r1, r1, #7
 8012700:	430a      	orrs	r2, r1
 8012702:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012704:	f7fc fb26 	bl	800ed54 <HAL_GetTick>
 8012708:	0003      	movs	r3, r0
 801270a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801270c:	e00f      	b.n	801272e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801270e:	f7fc fb21 	bl	800ed54 <HAL_GetTick>
 8012712:	0002      	movs	r2, r0
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	1ad3      	subs	r3, r2, r3
 8012718:	2b19      	cmp	r3, #25
 801271a:	d908      	bls.n	801272e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	2220      	movs	r2, #32
 8012720:	4313      	orrs	r3, r2
 8012722:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012724:	2327      	movs	r3, #39	@ 0x27
 8012726:	18fb      	adds	r3, r7, r3
 8012728:	2201      	movs	r2, #1
 801272a:	701a      	strb	r2, [r3, #0]

              break;
 801272c:	e006      	b.n	801273c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	699b      	ldr	r3, [r3, #24]
 8012734:	2220      	movs	r2, #32
 8012736:	4013      	ands	r3, r2
 8012738:	2b20      	cmp	r3, #32
 801273a:	d1e8      	bne.n	801270e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	699b      	ldr	r3, [r3, #24]
 8012742:	2220      	movs	r2, #32
 8012744:	4013      	ands	r3, r2
 8012746:	2b20      	cmp	r3, #32
 8012748:	d004      	beq.n	8012754 <I2C_IsErrorOccurred+0x100>
 801274a:	2327      	movs	r3, #39	@ 0x27
 801274c:	18fb      	adds	r3, r7, r3
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d09b      	beq.n	801268c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012754:	2327      	movs	r3, #39	@ 0x27
 8012756:	18fb      	adds	r3, r7, r3
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d103      	bne.n	8012766 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2220      	movs	r2, #32
 8012764:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012766:	6a3b      	ldr	r3, [r7, #32]
 8012768:	2204      	movs	r2, #4
 801276a:	4313      	orrs	r3, r2
 801276c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801276e:	2327      	movs	r3, #39	@ 0x27
 8012770:	18fb      	adds	r3, r7, r3
 8012772:	2201      	movs	r2, #1
 8012774:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	699b      	ldr	r3, [r3, #24]
 801277c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801277e:	69ba      	ldr	r2, [r7, #24]
 8012780:	2380      	movs	r3, #128	@ 0x80
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	4013      	ands	r3, r2
 8012786:	d00c      	beq.n	80127a2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012788:	6a3b      	ldr	r3, [r7, #32]
 801278a:	2201      	movs	r2, #1
 801278c:	4313      	orrs	r3, r2
 801278e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	2280      	movs	r2, #128	@ 0x80
 8012796:	0052      	lsls	r2, r2, #1
 8012798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801279a:	2327      	movs	r3, #39	@ 0x27
 801279c:	18fb      	adds	r3, r7, r3
 801279e:	2201      	movs	r2, #1
 80127a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80127a2:	69ba      	ldr	r2, [r7, #24]
 80127a4:	2380      	movs	r3, #128	@ 0x80
 80127a6:	00db      	lsls	r3, r3, #3
 80127a8:	4013      	ands	r3, r2
 80127aa:	d00c      	beq.n	80127c6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80127ac:	6a3b      	ldr	r3, [r7, #32]
 80127ae:	2208      	movs	r2, #8
 80127b0:	4313      	orrs	r3, r2
 80127b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	2280      	movs	r2, #128	@ 0x80
 80127ba:	00d2      	lsls	r2, r2, #3
 80127bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127be:	2327      	movs	r3, #39	@ 0x27
 80127c0:	18fb      	adds	r3, r7, r3
 80127c2:	2201      	movs	r2, #1
 80127c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80127c6:	69ba      	ldr	r2, [r7, #24]
 80127c8:	2380      	movs	r3, #128	@ 0x80
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	4013      	ands	r3, r2
 80127ce:	d00c      	beq.n	80127ea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	2202      	movs	r2, #2
 80127d4:	4313      	orrs	r3, r2
 80127d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2280      	movs	r2, #128	@ 0x80
 80127de:	0092      	lsls	r2, r2, #2
 80127e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127e2:	2327      	movs	r3, #39	@ 0x27
 80127e4:	18fb      	adds	r3, r7, r3
 80127e6:	2201      	movs	r2, #1
 80127e8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80127ea:	2327      	movs	r3, #39	@ 0x27
 80127ec:	18fb      	adds	r3, r7, r3
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d01d      	beq.n	8012830 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	0018      	movs	r0, r3
 80127f8:	f7ff fcd7 	bl	80121aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	685a      	ldr	r2, [r3, #4]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	490e      	ldr	r1, [pc, #56]	@ (8012840 <I2C_IsErrorOccurred+0x1ec>)
 8012808:	400a      	ands	r2, r1
 801280a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012810:	6a3b      	ldr	r3, [r7, #32]
 8012812:	431a      	orrs	r2, r3
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2241      	movs	r2, #65	@ 0x41
 801281c:	2120      	movs	r1, #32
 801281e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2242      	movs	r2, #66	@ 0x42
 8012824:	2100      	movs	r1, #0
 8012826:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2240      	movs	r2, #64	@ 0x40
 801282c:	2100      	movs	r1, #0
 801282e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012830:	2327      	movs	r3, #39	@ 0x27
 8012832:	18fb      	adds	r3, r7, r3
 8012834:	781b      	ldrb	r3, [r3, #0]
}
 8012836:	0018      	movs	r0, r3
 8012838:	46bd      	mov	sp, r7
 801283a:	b00a      	add	sp, #40	@ 0x28
 801283c:	bd80      	pop	{r7, pc}
 801283e:	46c0      	nop			@ (mov r8, r8)
 8012840:	fe00e800 	.word	0xfe00e800

08012844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012844:	b590      	push	{r4, r7, lr}
 8012846:	b087      	sub	sp, #28
 8012848:	af00      	add	r7, sp, #0
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	0008      	movs	r0, r1
 801284e:	0011      	movs	r1, r2
 8012850:	607b      	str	r3, [r7, #4]
 8012852:	240a      	movs	r4, #10
 8012854:	193b      	adds	r3, r7, r4
 8012856:	1c02      	adds	r2, r0, #0
 8012858:	801a      	strh	r2, [r3, #0]
 801285a:	2009      	movs	r0, #9
 801285c:	183b      	adds	r3, r7, r0
 801285e:	1c0a      	adds	r2, r1, #0
 8012860:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012862:	193b      	adds	r3, r7, r4
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	059b      	lsls	r3, r3, #22
 8012868:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801286a:	183b      	adds	r3, r7, r0
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	0419      	lsls	r1, r3, #16
 8012870:	23ff      	movs	r3, #255	@ 0xff
 8012872:	041b      	lsls	r3, r3, #16
 8012874:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012876:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801287c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801287e:	4313      	orrs	r3, r2
 8012880:	005b      	lsls	r3, r3, #1
 8012882:	085b      	lsrs	r3, r3, #1
 8012884:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801288e:	0d51      	lsrs	r1, r2, #21
 8012890:	2280      	movs	r2, #128	@ 0x80
 8012892:	00d2      	lsls	r2, r2, #3
 8012894:	400a      	ands	r2, r1
 8012896:	4907      	ldr	r1, [pc, #28]	@ (80128b4 <I2C_TransferConfig+0x70>)
 8012898:	430a      	orrs	r2, r1
 801289a:	43d2      	mvns	r2, r2
 801289c:	401a      	ands	r2, r3
 801289e:	0011      	movs	r1, r2
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	697a      	ldr	r2, [r7, #20]
 80128a6:	430a      	orrs	r2, r1
 80128a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80128aa:	46c0      	nop			@ (mov r8, r8)
 80128ac:	46bd      	mov	sp, r7
 80128ae:	b007      	add	sp, #28
 80128b0:	bd90      	pop	{r4, r7, pc}
 80128b2:	46c0      	nop			@ (mov r8, r8)
 80128b4:	03ff63ff 	.word	0x03ff63ff

080128b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	000a      	movs	r2, r1
 80128c2:	1cbb      	adds	r3, r7, #2
 80128c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80128c6:	2300      	movs	r3, #0
 80128c8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128ce:	4b3e      	ldr	r3, [pc, #248]	@ (80129c8 <I2C_Enable_IRQ+0x110>)
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d035      	beq.n	8012940 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80128d8:	4b3c      	ldr	r3, [pc, #240]	@ (80129cc <I2C_Enable_IRQ+0x114>)
 80128da:	429a      	cmp	r2, r3
 80128dc:	d030      	beq.n	8012940 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80128e2:	4b3b      	ldr	r3, [pc, #236]	@ (80129d0 <I2C_Enable_IRQ+0x118>)
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d02b      	beq.n	8012940 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80128e8:	1cbb      	adds	r3, r7, #2
 80128ea:	2200      	movs	r2, #0
 80128ec:	5e9b      	ldrsh	r3, [r3, r2]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da03      	bge.n	80128fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	22b8      	movs	r2, #184	@ 0xb8
 80128f6:	4313      	orrs	r3, r2
 80128f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80128fa:	1cbb      	adds	r3, r7, #2
 80128fc:	881b      	ldrh	r3, [r3, #0]
 80128fe:	2201      	movs	r2, #1
 8012900:	4013      	ands	r3, r2
 8012902:	d003      	beq.n	801290c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	22f2      	movs	r2, #242	@ 0xf2
 8012908:	4313      	orrs	r3, r2
 801290a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801290c:	1cbb      	adds	r3, r7, #2
 801290e:	881b      	ldrh	r3, [r3, #0]
 8012910:	2202      	movs	r2, #2
 8012912:	4013      	ands	r3, r2
 8012914:	d003      	beq.n	801291e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	22f4      	movs	r2, #244	@ 0xf4
 801291a:	4313      	orrs	r3, r2
 801291c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801291e:	1cbb      	adds	r3, r7, #2
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	2b10      	cmp	r3, #16
 8012924:	d103      	bne.n	801292e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2290      	movs	r2, #144	@ 0x90
 801292a:	4313      	orrs	r3, r2
 801292c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801292e:	1cbb      	adds	r3, r7, #2
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	2b20      	cmp	r3, #32
 8012934:	d13c      	bne.n	80129b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	2220      	movs	r2, #32
 801293a:	4313      	orrs	r3, r2
 801293c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801293e:	e037      	b.n	80129b0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012940:	1cbb      	adds	r3, r7, #2
 8012942:	2200      	movs	r2, #0
 8012944:	5e9b      	ldrsh	r3, [r3, r2]
 8012946:	2b00      	cmp	r3, #0
 8012948:	da03      	bge.n	8012952 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	22b8      	movs	r2, #184	@ 0xb8
 801294e:	4313      	orrs	r3, r2
 8012950:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012952:	1cbb      	adds	r3, r7, #2
 8012954:	881b      	ldrh	r3, [r3, #0]
 8012956:	2201      	movs	r2, #1
 8012958:	4013      	ands	r3, r2
 801295a:	d003      	beq.n	8012964 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	22f2      	movs	r2, #242	@ 0xf2
 8012960:	4313      	orrs	r3, r2
 8012962:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012964:	1cbb      	adds	r3, r7, #2
 8012966:	881b      	ldrh	r3, [r3, #0]
 8012968:	2202      	movs	r2, #2
 801296a:	4013      	ands	r3, r2
 801296c:	d003      	beq.n	8012976 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	22f4      	movs	r2, #244	@ 0xf4
 8012972:	4313      	orrs	r3, r2
 8012974:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012976:	1cbb      	adds	r3, r7, #2
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	2b10      	cmp	r3, #16
 801297c:	d103      	bne.n	8012986 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2290      	movs	r2, #144	@ 0x90
 8012982:	4313      	orrs	r3, r2
 8012984:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012986:	1cbb      	adds	r3, r7, #2
 8012988:	881b      	ldrh	r3, [r3, #0]
 801298a:	2b20      	cmp	r3, #32
 801298c:	d103      	bne.n	8012996 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2260      	movs	r2, #96	@ 0x60
 8012992:	4313      	orrs	r3, r2
 8012994:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801299a:	4b0d      	ldr	r3, [pc, #52]	@ (80129d0 <I2C_Enable_IRQ+0x118>)
 801299c:	429a      	cmp	r2, r3
 801299e:	d007      	beq.n	80129b0 <I2C_Enable_IRQ+0xf8>
 80129a0:	1cbb      	adds	r3, r7, #2
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	2b40      	cmp	r3, #64	@ 0x40
 80129a6:	d103      	bne.n	80129b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2240      	movs	r2, #64	@ 0x40
 80129ac:	4313      	orrs	r3, r2
 80129ae:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	6819      	ldr	r1, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	430a      	orrs	r2, r1
 80129be:	601a      	str	r2, [r3, #0]
}
 80129c0:	46c0      	nop			@ (mov r8, r8)
 80129c2:	46bd      	mov	sp, r7
 80129c4:	b004      	add	sp, #16
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	08011239 	.word	0x08011239
 80129cc:	08011669 	.word	0x08011669
 80129d0:	08011431 	.word	0x08011431

080129d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	000a      	movs	r2, r1
 80129de:	1cbb      	adds	r3, r7, #2
 80129e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80129e2:	2300      	movs	r3, #0
 80129e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80129e6:	1cbb      	adds	r3, r7, #2
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	2201      	movs	r2, #1
 80129ec:	4013      	ands	r3, r2
 80129ee:	d010      	beq.n	8012a12 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2242      	movs	r2, #66	@ 0x42
 80129f4:	4313      	orrs	r3, r2
 80129f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2241      	movs	r2, #65	@ 0x41
 80129fc:	5c9b      	ldrb	r3, [r3, r2]
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	001a      	movs	r2, r3
 8012a02:	2328      	movs	r3, #40	@ 0x28
 8012a04:	4013      	ands	r3, r2
 8012a06:	2b28      	cmp	r3, #40	@ 0x28
 8012a08:	d003      	beq.n	8012a12 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	22b0      	movs	r2, #176	@ 0xb0
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012a12:	1cbb      	adds	r3, r7, #2
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	2202      	movs	r2, #2
 8012a18:	4013      	ands	r3, r2
 8012a1a:	d010      	beq.n	8012a3e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2244      	movs	r2, #68	@ 0x44
 8012a20:	4313      	orrs	r3, r2
 8012a22:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2241      	movs	r2, #65	@ 0x41
 8012a28:	5c9b      	ldrb	r3, [r3, r2]
 8012a2a:	b2db      	uxtb	r3, r3
 8012a2c:	001a      	movs	r2, r3
 8012a2e:	2328      	movs	r3, #40	@ 0x28
 8012a30:	4013      	ands	r3, r2
 8012a32:	2b28      	cmp	r3, #40	@ 0x28
 8012a34:	d003      	beq.n	8012a3e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	22b0      	movs	r2, #176	@ 0xb0
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a3e:	1cbb      	adds	r3, r7, #2
 8012a40:	2200      	movs	r2, #0
 8012a42:	5e9b      	ldrsh	r3, [r3, r2]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	da03      	bge.n	8012a50 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	22b8      	movs	r2, #184	@ 0xb8
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012a50:	1cbb      	adds	r3, r7, #2
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	2b10      	cmp	r3, #16
 8012a56:	d103      	bne.n	8012a60 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2290      	movs	r2, #144	@ 0x90
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012a60:	1cbb      	adds	r3, r7, #2
 8012a62:	881b      	ldrh	r3, [r3, #0]
 8012a64:	2b20      	cmp	r3, #32
 8012a66:	d103      	bne.n	8012a70 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2220      	movs	r2, #32
 8012a6c:	4313      	orrs	r3, r2
 8012a6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012a70:	1cbb      	adds	r3, r7, #2
 8012a72:	881b      	ldrh	r3, [r3, #0]
 8012a74:	2b40      	cmp	r3, #64	@ 0x40
 8012a76:	d103      	bne.n	8012a80 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2240      	movs	r2, #64	@ 0x40
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	43d9      	mvns	r1, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	400a      	ands	r2, r1
 8012a90:	601a      	str	r2, [r3, #0]
}
 8012a92:	46c0      	nop			@ (mov r8, r8)
 8012a94:	46bd      	mov	sp, r7
 8012a96:	b004      	add	sp, #16
 8012a98:	bd80      	pop	{r7, pc}
	...

08012a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2241      	movs	r2, #65	@ 0x41
 8012aaa:	5c9b      	ldrb	r3, [r3, r2]
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	2b20      	cmp	r3, #32
 8012ab0:	d138      	bne.n	8012b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2240      	movs	r2, #64	@ 0x40
 8012ab6:	5c9b      	ldrb	r3, [r3, r2]
 8012ab8:	2b01      	cmp	r3, #1
 8012aba:	d101      	bne.n	8012ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012abc:	2302      	movs	r3, #2
 8012abe:	e032      	b.n	8012b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2240      	movs	r2, #64	@ 0x40
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2241      	movs	r2, #65	@ 0x41
 8012acc:	2124      	movs	r1, #36	@ 0x24
 8012ace:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2101      	movs	r1, #1
 8012adc:	438a      	bics	r2, r1
 8012ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	4911      	ldr	r1, [pc, #68]	@ (8012b30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012aec:	400a      	ands	r2, r1
 8012aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	6819      	ldr	r1, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	683a      	ldr	r2, [r7, #0]
 8012afc:	430a      	orrs	r2, r1
 8012afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	430a      	orrs	r2, r1
 8012b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2241      	movs	r2, #65	@ 0x41
 8012b14:	2120      	movs	r1, #32
 8012b16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2240      	movs	r2, #64	@ 0x40
 8012b1c:	2100      	movs	r1, #0
 8012b1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012b20:	2300      	movs	r3, #0
 8012b22:	e000      	b.n	8012b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012b24:	2302      	movs	r3, #2
  }
}
 8012b26:	0018      	movs	r0, r3
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	b002      	add	sp, #8
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	46c0      	nop			@ (mov r8, r8)
 8012b30:	ffffefff 	.word	0xffffefff

08012b34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2241      	movs	r2, #65	@ 0x41
 8012b42:	5c9b      	ldrb	r3, [r3, r2]
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b20      	cmp	r3, #32
 8012b48:	d139      	bne.n	8012bbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2240      	movs	r2, #64	@ 0x40
 8012b4e:	5c9b      	ldrb	r3, [r3, r2]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d101      	bne.n	8012b58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012b54:	2302      	movs	r3, #2
 8012b56:	e033      	b.n	8012bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2240      	movs	r2, #64	@ 0x40
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2241      	movs	r2, #65	@ 0x41
 8012b64:	2124      	movs	r1, #36	@ 0x24
 8012b66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2101      	movs	r1, #1
 8012b74:	438a      	bics	r2, r1
 8012b76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	4a11      	ldr	r2, [pc, #68]	@ (8012bc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012b84:	4013      	ands	r3, r2
 8012b86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	021b      	lsls	r3, r3, #8
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	4313      	orrs	r3, r2
 8012b90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	68fa      	ldr	r2, [r7, #12]
 8012b98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	2101      	movs	r1, #1
 8012ba6:	430a      	orrs	r2, r1
 8012ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2241      	movs	r2, #65	@ 0x41
 8012bae:	2120      	movs	r1, #32
 8012bb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2240      	movs	r2, #64	@ 0x40
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	e000      	b.n	8012bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012bbe:	2302      	movs	r3, #2
  }
}
 8012bc0:	0018      	movs	r0, r3
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	b004      	add	sp, #16
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	fffff0ff 	.word	0xfffff0ff

08012bcc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b088      	sub	sp, #32
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d101      	bne.n	8012bde <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e0e1      	b.n	8012da2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2235      	movs	r2, #53	@ 0x35
 8012be2:	5c9b      	ldrb	r3, [r3, r2]
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d107      	bne.n	8012bfa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2234      	movs	r2, #52	@ 0x34
 8012bee:	2100      	movs	r1, #0
 8012bf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	0018      	movs	r0, r3
 8012bf6:	f7f4 ff4b 	bl	8007a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2235      	movs	r2, #53	@ 0x35
 8012bfe:	2102      	movs	r1, #2
 8012c00:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	69da      	ldr	r2, [r3, #28]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4967      	ldr	r1, [pc, #412]	@ (8012dac <HAL_I2S_Init+0x1e0>)
 8012c0e:	400a      	ands	r2, r1
 8012c10:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2202      	movs	r2, #2
 8012c18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	695b      	ldr	r3, [r3, #20]
 8012c1e:	2b02      	cmp	r3, #2
 8012c20:	d073      	beq.n	8012d0a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d102      	bne.n	8012c30 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012c2a:	2310      	movs	r3, #16
 8012c2c:	617b      	str	r3, [r7, #20]
 8012c2e:	e001      	b.n	8012c34 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012c30:	2320      	movs	r3, #32
 8012c32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	2b20      	cmp	r3, #32
 8012c3a:	d802      	bhi.n	8012c42 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012c42:	f002 fed3 	bl	80159ec <HAL_RCC_GetSysClockFreq>
 8012c46:	0003      	movs	r3, r0
 8012c48:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	691a      	ldr	r2, [r3, #16]
 8012c4e:	2380      	movs	r3, #128	@ 0x80
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d131      	bne.n	8012cba <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d016      	beq.n	8012c8c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	0019      	movs	r1, r3
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	f7ed fa9d 	bl	80001a4 <__udivsi3>
 8012c6a:	0003      	movs	r3, r0
 8012c6c:	001a      	movs	r2, r3
 8012c6e:	0013      	movs	r3, r2
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	189b      	adds	r3, r3, r2
 8012c74:	005b      	lsls	r3, r3, #1
 8012c76:	001a      	movs	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	695b      	ldr	r3, [r3, #20]
 8012c7c:	0019      	movs	r1, r3
 8012c7e:	0010      	movs	r0, r2
 8012c80:	f7ed fa90 	bl	80001a4 <__udivsi3>
 8012c84:	0003      	movs	r3, r0
 8012c86:	3305      	adds	r3, #5
 8012c88:	613b      	str	r3, [r7, #16]
 8012c8a:	e02a      	b.n	8012ce2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	00db      	lsls	r3, r3, #3
 8012c90:	0019      	movs	r1, r3
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f7ed fa86 	bl	80001a4 <__udivsi3>
 8012c98:	0003      	movs	r3, r0
 8012c9a:	001a      	movs	r2, r3
 8012c9c:	0013      	movs	r3, r2
 8012c9e:	009b      	lsls	r3, r3, #2
 8012ca0:	189b      	adds	r3, r3, r2
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	001a      	movs	r2, r3
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	695b      	ldr	r3, [r3, #20]
 8012caa:	0019      	movs	r1, r3
 8012cac:	0010      	movs	r0, r2
 8012cae:	f7ed fa79 	bl	80001a4 <__udivsi3>
 8012cb2:	0003      	movs	r3, r0
 8012cb4:	3305      	adds	r3, #5
 8012cb6:	613b      	str	r3, [r7, #16]
 8012cb8:	e013      	b.n	8012ce2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012cba:	6979      	ldr	r1, [r7, #20]
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f7ed fa71 	bl	80001a4 <__udivsi3>
 8012cc2:	0003      	movs	r3, r0
 8012cc4:	001a      	movs	r2, r3
 8012cc6:	0013      	movs	r3, r2
 8012cc8:	009b      	lsls	r3, r3, #2
 8012cca:	189b      	adds	r3, r3, r2
 8012ccc:	005b      	lsls	r3, r3, #1
 8012cce:	001a      	movs	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	695b      	ldr	r3, [r3, #20]
 8012cd4:	0019      	movs	r1, r3
 8012cd6:	0010      	movs	r0, r2
 8012cd8:	f7ed fa64 	bl	80001a4 <__udivsi3>
 8012cdc:	0003      	movs	r3, r0
 8012cde:	3305      	adds	r3, #5
 8012ce0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	210a      	movs	r1, #10
 8012ce6:	0018      	movs	r0, r3
 8012ce8:	f7ed fa5c 	bl	80001a4 <__udivsi3>
 8012cec:	0003      	movs	r3, r0
 8012cee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012cf8:	693a      	ldr	r2, [r7, #16]
 8012cfa:	69bb      	ldr	r3, [r7, #24]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	085b      	lsrs	r3, r3, #1
 8012d00:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	021b      	lsls	r3, r3, #8
 8012d06:	61bb      	str	r3, [r7, #24]
 8012d08:	e003      	b.n	8012d12 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012d0a:	2302      	movs	r3, #2
 8012d0c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d902      	bls.n	8012d1e <HAL_I2S_Init+0x152>
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	2bff      	cmp	r3, #255	@ 0xff
 8012d1c:	d907      	bls.n	8012d2e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d22:	2210      	movs	r2, #16
 8012d24:	431a      	orrs	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	e039      	b.n	8012da2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	691a      	ldr	r2, [r3, #16]
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	431a      	orrs	r2, r3
 8012d36:	0011      	movs	r1, r2
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	69fa      	ldr	r2, [r7, #28]
 8012d3e:	430a      	orrs	r2, r1
 8012d40:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	69db      	ldr	r3, [r3, #28]
 8012d48:	4a18      	ldr	r2, [pc, #96]	@ (8012dac <HAL_I2S_Init+0x1e0>)
 8012d4a:	401a      	ands	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6859      	ldr	r1, [r3, #4]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	4319      	orrs	r1, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	68db      	ldr	r3, [r3, #12]
 8012d5a:	4319      	orrs	r1, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	699b      	ldr	r3, [r3, #24]
 8012d60:	430b      	orrs	r3, r1
 8012d62:	431a      	orrs	r2, r3
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2180      	movs	r1, #128	@ 0x80
 8012d6a:	0109      	lsls	r1, r1, #4
 8012d6c:	430a      	orrs	r2, r1
 8012d6e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	2b30      	cmp	r3, #48	@ 0x30
 8012d76:	d003      	beq.n	8012d80 <HAL_I2S_Init+0x1b4>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	689b      	ldr	r3, [r3, #8]
 8012d7c:	2bb0      	cmp	r3, #176	@ 0xb0
 8012d7e:	d108      	bne.n	8012d92 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	69da      	ldr	r2, [r3, #28]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	2180      	movs	r1, #128	@ 0x80
 8012d8c:	0149      	lsls	r1, r1, #5
 8012d8e:	430a      	orrs	r2, r1
 8012d90:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2200      	movs	r2, #0
 8012d96:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2235      	movs	r2, #53	@ 0x35
 8012d9c:	2101      	movs	r1, #1
 8012d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012da0:	2300      	movs	r3, #0
}
 8012da2:	0018      	movs	r0, r3
 8012da4:	46bd      	mov	sp, r7
 8012da6:	b008      	add	sp, #32
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	46c0      	nop			@ (mov r8, r8)
 8012dac:	fffff040 	.word	0xfffff040

08012db0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	1dbb      	adds	r3, r7, #6
 8012dbc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d003      	beq.n	8012dcc <HAL_I2S_Receive_DMA+0x1c>
 8012dc4:	1dbb      	adds	r3, r7, #6
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e0a6      	b.n	8012f1e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2234      	movs	r2, #52	@ 0x34
 8012dd4:	5c9b      	ldrb	r3, [r3, r2]
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d101      	bne.n	8012de0 <HAL_I2S_Receive_DMA+0x30>
 8012ddc:	2302      	movs	r3, #2
 8012dde:	e09e      	b.n	8012f1e <HAL_I2S_Receive_DMA+0x16e>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2234      	movs	r2, #52	@ 0x34
 8012de4:	2101      	movs	r1, #1
 8012de6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2235      	movs	r2, #53	@ 0x35
 8012dec:	5c9b      	ldrb	r3, [r3, r2]
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d005      	beq.n	8012e00 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2234      	movs	r2, #52	@ 0x34
 8012df8:	2100      	movs	r1, #0
 8012dfa:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	e08e      	b.n	8012f1e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2235      	movs	r2, #53	@ 0x35
 8012e04:	2104      	movs	r1, #4
 8012e06:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	68ba      	ldr	r2, [r7, #8]
 8012e12:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	69db      	ldr	r3, [r3, #28]
 8012e1a:	2207      	movs	r2, #7
 8012e1c:	4013      	ands	r3, r2
 8012e1e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	2b03      	cmp	r3, #3
 8012e24:	d002      	beq.n	8012e2c <HAL_I2S_Receive_DMA+0x7c>
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	2b05      	cmp	r3, #5
 8012e2a:	d10c      	bne.n	8012e46 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012e2c:	1dbb      	adds	r3, r7, #6
 8012e2e:	881b      	ldrh	r3, [r3, #0]
 8012e30:	18db      	adds	r3, r3, r3
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012e38:	1dbb      	adds	r3, r7, #6
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	18db      	adds	r3, r3, r3
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012e44:	e007      	b.n	8012e56 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	1dba      	adds	r2, r7, #6
 8012e4a:	8812      	ldrh	r2, [r2, #0]
 8012e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	1dba      	adds	r2, r7, #6
 8012e52:	8812      	ldrh	r2, [r2, #0]
 8012e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e5a:	4a33      	ldr	r2, [pc, #204]	@ (8012f28 <HAL_I2S_Receive_DMA+0x178>)
 8012e5c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e62:	4a32      	ldr	r2, [pc, #200]	@ (8012f2c <HAL_I2S_Receive_DMA+0x17c>)
 8012e64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e6a:	4a31      	ldr	r2, [pc, #196]	@ (8012f30 <HAL_I2S_Receive_DMA+0x180>)
 8012e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	69da      	ldr	r2, [r3, #28]
 8012e74:	23c0      	movs	r3, #192	@ 0xc0
 8012e76:	009b      	lsls	r3, r3, #2
 8012e78:	401a      	ands	r2, r3
 8012e7a:	23c0      	movs	r3, #192	@ 0xc0
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d10a      	bne.n	8012e98 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012e82:	2300      	movs	r3, #0
 8012e84:	613b      	str	r3, [r7, #16]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	613b      	str	r3, [r7, #16]
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	613b      	str	r3, [r7, #16]
 8012e96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	330c      	adds	r3, #12
 8012ea2:	0019      	movs	r1, r3
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ea8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012eae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012eb0:	f7fc fca2 	bl	800f7f8 <HAL_DMA_Start_IT>
 8012eb4:	1e03      	subs	r3, r0, #0
 8012eb6:	d00f      	beq.n	8012ed8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ebc:	2208      	movs	r2, #8
 8012ebe:	431a      	orrs	r2, r3
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2235      	movs	r2, #53	@ 0x35
 8012ec8:	2101      	movs	r1, #1
 8012eca:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2234      	movs	r2, #52	@ 0x34
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	e022      	b.n	8012f1e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	69da      	ldr	r2, [r3, #28]
 8012ede:	2380      	movs	r3, #128	@ 0x80
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	4013      	ands	r3, r2
 8012ee4:	d108      	bne.n	8012ef8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	69da      	ldr	r2, [r3, #28]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2180      	movs	r1, #128	@ 0x80
 8012ef2:	00c9      	lsls	r1, r1, #3
 8012ef4:	430a      	orrs	r2, r1
 8012ef6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	685b      	ldr	r3, [r3, #4]
 8012efe:	2201      	movs	r2, #1
 8012f00:	4013      	ands	r3, r2
 8012f02:	d107      	bne.n	8012f14 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	685a      	ldr	r2, [r3, #4]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2101      	movs	r1, #1
 8012f10:	430a      	orrs	r2, r1
 8012f12:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2234      	movs	r2, #52	@ 0x34
 8012f18:	2100      	movs	r1, #0
 8012f1a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012f1c:	2300      	movs	r3, #0
}
 8012f1e:	0018      	movs	r0, r3
 8012f20:	46bd      	mov	sp, r7
 8012f22:	b006      	add	sp, #24
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	46c0      	nop			@ (mov r8, r8)
 8012f28:	08013111 	.word	0x08013111
 8012f2c:	080130cd 	.word	0x080130cd
 8012f30:	0801312f 	.word	0x0801312f

08012f34 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b086      	sub	sp, #24
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012f3c:	2317      	movs	r3, #23
 8012f3e:	18fb      	adds	r3, r7, r3
 8012f40:	2200      	movs	r2, #0
 8012f42:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	685a      	ldr	r2, [r3, #4]
 8012f48:	2380      	movs	r3, #128	@ 0x80
 8012f4a:	009b      	lsls	r3, r3, #2
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d003      	beq.n	8012f58 <HAL_I2S_DMAStop+0x24>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d158      	bne.n	801300a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d010      	beq.n	8012f82 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f64:	0018      	movs	r0, r3
 8012f66:	f7fc fcad 	bl	800f8c4 <HAL_DMA_Abort>
 8012f6a:	1e03      	subs	r3, r0, #0
 8012f6c:	d009      	beq.n	8012f82 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f72:	2208      	movs	r2, #8
 8012f74:	431a      	orrs	r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012f7a:	2317      	movs	r3, #23
 8012f7c:	18fb      	adds	r3, r7, r3
 8012f7e:	2201      	movs	r2, #1
 8012f80:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	2364      	movs	r3, #100	@ 0x64
 8012f86:	2201      	movs	r2, #1
 8012f88:	2102      	movs	r1, #2
 8012f8a:	f000 f8f7 	bl	801317c <I2S_WaitFlagStateUntilTimeout>
 8012f8e:	1e03      	subs	r3, r0, #0
 8012f90:	d00d      	beq.n	8012fae <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f96:	2201      	movs	r2, #1
 8012f98:	431a      	orrs	r2, r3
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2235      	movs	r2, #53	@ 0x35
 8012fa2:	2101      	movs	r1, #1
 8012fa4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012fa6:	2317      	movs	r3, #23
 8012fa8:	18fb      	adds	r3, r7, r3
 8012faa:	2201      	movs	r2, #1
 8012fac:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	2364      	movs	r3, #100	@ 0x64
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	2180      	movs	r1, #128	@ 0x80
 8012fb6:	f000 f8e1 	bl	801317c <I2S_WaitFlagStateUntilTimeout>
 8012fba:	1e03      	subs	r3, r0, #0
 8012fbc:	d00d      	beq.n	8012fda <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	431a      	orrs	r2, r3
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2235      	movs	r2, #53	@ 0x35
 8012fce:	2101      	movs	r1, #1
 8012fd0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012fd2:	2317      	movs	r3, #23
 8012fd4:	18fb      	adds	r3, r7, r3
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	69da      	ldr	r2, [r3, #28]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4938      	ldr	r1, [pc, #224]	@ (80130c8 <HAL_I2S_DMAStop+0x194>)
 8012fe6:	400a      	ands	r2, r1
 8012fe8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012fea:	2300      	movs	r3, #0
 8012fec:	613b      	str	r3, [r7, #16]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	689b      	ldr	r3, [r3, #8]
 8012ff4:	613b      	str	r3, [r7, #16]
 8012ff6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2102      	movs	r1, #2
 8013004:	438a      	bics	r2, r1
 8013006:	605a      	str	r2, [r3, #4]
 8013008:	e053      	b.n	80130b2 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	685a      	ldr	r2, [r3, #4]
 801300e:	23c0      	movs	r3, #192	@ 0xc0
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	429a      	cmp	r2, r3
 8013014:	d005      	beq.n	8013022 <HAL_I2S_DMAStop+0xee>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	685a      	ldr	r2, [r3, #4]
 801301a:	2380      	movs	r3, #128	@ 0x80
 801301c:	005b      	lsls	r3, r3, #1
 801301e:	429a      	cmp	r2, r3
 8013020:	d147      	bne.n	80130b2 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013026:	2b00      	cmp	r3, #0
 8013028:	d010      	beq.n	801304c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801302e:	0018      	movs	r0, r3
 8013030:	f7fc fc48 	bl	800f8c4 <HAL_DMA_Abort>
 8013034:	1e03      	subs	r3, r0, #0
 8013036:	d009      	beq.n	801304c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801303c:	2208      	movs	r2, #8
 801303e:	431a      	orrs	r2, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013044:	2317      	movs	r3, #23
 8013046:	18fb      	adds	r3, r7, r3
 8013048:	2201      	movs	r2, #1
 801304a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	69da      	ldr	r2, [r3, #28]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	491c      	ldr	r1, [pc, #112]	@ (80130c8 <HAL_I2S_DMAStop+0x194>)
 8013058:	400a      	ands	r2, r1
 801305a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801305c:	2300      	movs	r3, #0
 801305e:	60fb      	str	r3, [r7, #12]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	60fb      	str	r3, [r7, #12]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	685a      	ldr	r2, [r3, #4]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2101      	movs	r1, #1
 801307e:	438a      	bics	r2, r1
 8013080:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	685a      	ldr	r2, [r3, #4]
 8013086:	2380      	movs	r3, #128	@ 0x80
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	429a      	cmp	r2, r3
 801308c:	d10e      	bne.n	80130ac <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013092:	2240      	movs	r2, #64	@ 0x40
 8013094:	431a      	orrs	r2, r3
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2235      	movs	r2, #53	@ 0x35
 801309e:	2101      	movs	r1, #1
 80130a0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80130a2:	2317      	movs	r3, #23
 80130a4:	18fb      	adds	r3, r7, r3
 80130a6:	2201      	movs	r2, #1
 80130a8:	701a      	strb	r2, [r3, #0]
 80130aa:	e002      	b.n	80130b2 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2235      	movs	r2, #53	@ 0x35
 80130b6:	2101      	movs	r1, #1
 80130b8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80130ba:	2317      	movs	r3, #23
 80130bc:	18fb      	adds	r3, r7, r3
 80130be:	781b      	ldrb	r3, [r3, #0]
}
 80130c0:	0018      	movs	r0, r3
 80130c2:	46bd      	mov	sp, r7
 80130c4:	b006      	add	sp, #24
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	fffffbff 	.word	0xfffffbff

080130cc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130d8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	69db      	ldr	r3, [r3, #28]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10e      	bne.n	8013100 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2101      	movs	r1, #1
 80130ee:	438a      	bics	r2, r1
 80130f0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2200      	movs	r2, #0
 80130f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2235      	movs	r2, #53	@ 0x35
 80130fc:	2101      	movs	r1, #1
 80130fe:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	0018      	movs	r0, r3
 8013104:	f7f9 fa5a 	bl	800c5bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013108:	46c0      	nop			@ (mov r8, r8)
 801310a:	46bd      	mov	sp, r7
 801310c:	b004      	add	sp, #16
 801310e:	bd80      	pop	{r7, pc}

08013110 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801311c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	0018      	movs	r0, r3
 8013122:	f7f9 fa39 	bl	800c598 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013126:	46c0      	nop			@ (mov r8, r8)
 8013128:	46bd      	mov	sp, r7
 801312a:	b004      	add	sp, #16
 801312c:	bd80      	pop	{r7, pc}

0801312e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801312e:	b580      	push	{r7, lr}
 8013130:	b084      	sub	sp, #16
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801313a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	685a      	ldr	r2, [r3, #4]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	2103      	movs	r1, #3
 8013148:	438a      	bics	r2, r1
 801314a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2200      	movs	r2, #0
 8013150:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2200      	movs	r2, #0
 8013156:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2235      	movs	r2, #53	@ 0x35
 801315c:	2101      	movs	r1, #1
 801315e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013164:	2208      	movs	r2, #8
 8013166:	431a      	orrs	r2, r3
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	0018      	movs	r0, r3
 8013170:	f7f9 fa72 	bl	800c658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013174:	46c0      	nop			@ (mov r8, r8)
 8013176:	46bd      	mov	sp, r7
 8013178:	b004      	add	sp, #16
 801317a:	bd80      	pop	{r7, pc}

0801317c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b086      	sub	sp, #24
 8013180:	af00      	add	r7, sp, #0
 8013182:	60f8      	str	r0, [r7, #12]
 8013184:	60b9      	str	r1, [r7, #8]
 8013186:	603b      	str	r3, [r7, #0]
 8013188:	1dfb      	adds	r3, r7, #7
 801318a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801318c:	f7fb fde2 	bl	800ed54 <HAL_GetTick>
 8013190:	0003      	movs	r3, r0
 8013192:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013194:	e017      	b.n	80131c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	3301      	adds	r3, #1
 801319a:	d014      	beq.n	80131c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801319c:	f7fb fdda 	bl	800ed54 <HAL_GetTick>
 80131a0:	0002      	movs	r2, r0
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	1ad3      	subs	r3, r2, r3
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d902      	bls.n	80131b2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d109      	bne.n	80131c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2235      	movs	r2, #53	@ 0x35
 80131b6:	2101      	movs	r1, #1
 80131b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2234      	movs	r2, #52	@ 0x34
 80131be:	2100      	movs	r1, #0
 80131c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80131c2:	2303      	movs	r3, #3
 80131c4:	e00f      	b.n	80131e6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	689b      	ldr	r3, [r3, #8]
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	4013      	ands	r3, r2
 80131d0:	68ba      	ldr	r2, [r7, #8]
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	425a      	negs	r2, r3
 80131d6:	4153      	adcs	r3, r2
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	001a      	movs	r2, r3
 80131dc:	1dfb      	adds	r3, r7, #7
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d1d8      	bne.n	8013196 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80131e4:	2300      	movs	r3, #0
}
 80131e6:	0018      	movs	r0, r3
 80131e8:	46bd      	mov	sp, r7
 80131ea:	b006      	add	sp, #24
 80131ec:	bd80      	pop	{r7, pc}
	...

080131f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80131f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131f2:	b08b      	sub	sp, #44	@ 0x2c
 80131f4:	af06      	add	r7, sp, #24
 80131f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d101      	bne.n	8013202 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80131fe:	2301      	movs	r3, #1
 8013200:	e0f0      	b.n	80133e4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4a79      	ldr	r2, [pc, #484]	@ (80133ec <HAL_PCD_Init+0x1fc>)
 8013206:	5c9b      	ldrb	r3, [r3, r2]
 8013208:	b2db      	uxtb	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	d108      	bne.n	8013220 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	23aa      	movs	r3, #170	@ 0xaa
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	2100      	movs	r1, #0
 8013216:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	0018      	movs	r0, r3
 801321c:	f009 ff4a 	bl	801d0b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a72      	ldr	r2, [pc, #456]	@ (80133ec <HAL_PCD_Init+0x1fc>)
 8013224:	2103      	movs	r1, #3
 8013226:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	0018      	movs	r0, r3
 801322e:	f005 fefd 	bl	801902c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013232:	230f      	movs	r3, #15
 8013234:	18fb      	adds	r3, r7, r3
 8013236:	2200      	movs	r2, #0
 8013238:	701a      	strb	r2, [r3, #0]
 801323a:	e049      	b.n	80132d0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801323c:	200f      	movs	r0, #15
 801323e:	183b      	adds	r3, r7, r0
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	6879      	ldr	r1, [r7, #4]
 8013244:	1c5a      	adds	r2, r3, #1
 8013246:	0013      	movs	r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	189b      	adds	r3, r3, r2
 801324c:	00db      	lsls	r3, r3, #3
 801324e:	18cb      	adds	r3, r1, r3
 8013250:	3301      	adds	r3, #1
 8013252:	2201      	movs	r2, #1
 8013254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013256:	183b      	adds	r3, r7, r0
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	6879      	ldr	r1, [r7, #4]
 801325c:	1c5a      	adds	r2, r3, #1
 801325e:	0013      	movs	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	189b      	adds	r3, r3, r2
 8013264:	00db      	lsls	r3, r3, #3
 8013266:	183a      	adds	r2, r7, r0
 8013268:	7812      	ldrb	r2, [r2, #0]
 801326a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801326c:	183b      	adds	r3, r7, r0
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	1c5a      	adds	r2, r3, #1
 8013274:	0013      	movs	r3, r2
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	189b      	adds	r3, r3, r2
 801327a:	00db      	lsls	r3, r3, #3
 801327c:	18cb      	adds	r3, r1, r3
 801327e:	3303      	adds	r3, #3
 8013280:	2200      	movs	r2, #0
 8013282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013284:	183b      	adds	r3, r7, r0
 8013286:	781a      	ldrb	r2, [r3, #0]
 8013288:	6879      	ldr	r1, [r7, #4]
 801328a:	0013      	movs	r3, r2
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	189b      	adds	r3, r3, r2
 8013290:	00db      	lsls	r3, r3, #3
 8013292:	18cb      	adds	r3, r1, r3
 8013294:	3338      	adds	r3, #56	@ 0x38
 8013296:	2200      	movs	r2, #0
 8013298:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801329a:	183b      	adds	r3, r7, r0
 801329c:	781a      	ldrb	r2, [r3, #0]
 801329e:	6879      	ldr	r1, [r7, #4]
 80132a0:	0013      	movs	r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	189b      	adds	r3, r3, r2
 80132a6:	00db      	lsls	r3, r3, #3
 80132a8:	18cb      	adds	r3, r1, r3
 80132aa:	333c      	adds	r3, #60	@ 0x3c
 80132ac:	2200      	movs	r2, #0
 80132ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80132b0:	183b      	adds	r3, r7, r0
 80132b2:	781a      	ldrb	r2, [r3, #0]
 80132b4:	6879      	ldr	r1, [r7, #4]
 80132b6:	0013      	movs	r3, r2
 80132b8:	009b      	lsls	r3, r3, #2
 80132ba:	189b      	adds	r3, r3, r2
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	18cb      	adds	r3, r1, r3
 80132c0:	3340      	adds	r3, #64	@ 0x40
 80132c2:	2200      	movs	r2, #0
 80132c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80132c6:	183b      	adds	r3, r7, r0
 80132c8:	781a      	ldrb	r2, [r3, #0]
 80132ca:	183b      	adds	r3, r7, r0
 80132cc:	3201      	adds	r2, #1
 80132ce:	701a      	strb	r2, [r3, #0]
 80132d0:	210f      	movs	r1, #15
 80132d2:	187b      	adds	r3, r7, r1
 80132d4:	781a      	ldrb	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d3ae      	bcc.n	801323c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80132de:	187b      	adds	r3, r7, r1
 80132e0:	2200      	movs	r2, #0
 80132e2:	701a      	strb	r2, [r3, #0]
 80132e4:	e056      	b.n	8013394 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80132e6:	240f      	movs	r4, #15
 80132e8:	193b      	adds	r3, r7, r4
 80132ea:	781a      	ldrb	r2, [r3, #0]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	236a      	movs	r3, #106	@ 0x6a
 80132f0:	33ff      	adds	r3, #255	@ 0xff
 80132f2:	0019      	movs	r1, r3
 80132f4:	0013      	movs	r3, r2
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	189b      	adds	r3, r3, r2
 80132fa:	00db      	lsls	r3, r3, #3
 80132fc:	18c3      	adds	r3, r0, r3
 80132fe:	185b      	adds	r3, r3, r1
 8013300:	2200      	movs	r2, #0
 8013302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013304:	193b      	adds	r3, r7, r4
 8013306:	781a      	ldrb	r2, [r3, #0]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	23b4      	movs	r3, #180	@ 0xb4
 801330c:	0059      	lsls	r1, r3, #1
 801330e:	0013      	movs	r3, r2
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	189b      	adds	r3, r3, r2
 8013314:	00db      	lsls	r3, r3, #3
 8013316:	18c3      	adds	r3, r0, r3
 8013318:	185b      	adds	r3, r3, r1
 801331a:	193a      	adds	r2, r7, r4
 801331c:	7812      	ldrb	r2, [r2, #0]
 801331e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013320:	193b      	adds	r3, r7, r4
 8013322:	781a      	ldrb	r2, [r3, #0]
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	236c      	movs	r3, #108	@ 0x6c
 8013328:	33ff      	adds	r3, #255	@ 0xff
 801332a:	0019      	movs	r1, r3
 801332c:	0013      	movs	r3, r2
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	189b      	adds	r3, r3, r2
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	18c3      	adds	r3, r0, r3
 8013336:	185b      	adds	r3, r3, r1
 8013338:	2200      	movs	r2, #0
 801333a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801333c:	193b      	adds	r3, r7, r4
 801333e:	781a      	ldrb	r2, [r3, #0]
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	23bc      	movs	r3, #188	@ 0xbc
 8013344:	0059      	lsls	r1, r3, #1
 8013346:	0013      	movs	r3, r2
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	189b      	adds	r3, r3, r2
 801334c:	00db      	lsls	r3, r3, #3
 801334e:	18c3      	adds	r3, r0, r3
 8013350:	185b      	adds	r3, r3, r1
 8013352:	2200      	movs	r2, #0
 8013354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013356:	193b      	adds	r3, r7, r4
 8013358:	781a      	ldrb	r2, [r3, #0]
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	23be      	movs	r3, #190	@ 0xbe
 801335e:	0059      	lsls	r1, r3, #1
 8013360:	0013      	movs	r3, r2
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	189b      	adds	r3, r3, r2
 8013366:	00db      	lsls	r3, r3, #3
 8013368:	18c3      	adds	r3, r0, r3
 801336a:	185b      	adds	r3, r3, r1
 801336c:	2200      	movs	r2, #0
 801336e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013370:	193b      	adds	r3, r7, r4
 8013372:	781a      	ldrb	r2, [r3, #0]
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	23c0      	movs	r3, #192	@ 0xc0
 8013378:	0059      	lsls	r1, r3, #1
 801337a:	0013      	movs	r3, r2
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	189b      	adds	r3, r3, r2
 8013380:	00db      	lsls	r3, r3, #3
 8013382:	18c3      	adds	r3, r0, r3
 8013384:	185b      	adds	r3, r3, r1
 8013386:	2200      	movs	r2, #0
 8013388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801338a:	193b      	adds	r3, r7, r4
 801338c:	781a      	ldrb	r2, [r3, #0]
 801338e:	193b      	adds	r3, r7, r4
 8013390:	3201      	adds	r2, #1
 8013392:	701a      	strb	r2, [r3, #0]
 8013394:	230f      	movs	r3, #15
 8013396:	18fb      	adds	r3, r7, r3
 8013398:	781a      	ldrb	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d3a1      	bcc.n	80132e6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6818      	ldr	r0, [r3, #0]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	466a      	mov	r2, sp
 80133aa:	0011      	movs	r1, r2
 80133ac:	001a      	movs	r2, r3
 80133ae:	3210      	adds	r2, #16
 80133b0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80133b2:	c170      	stmia	r1!, {r4, r5, r6}
 80133b4:	ca30      	ldmia	r2!, {r4, r5}
 80133b6:	c130      	stmia	r1!, {r4, r5}
 80133b8:	6859      	ldr	r1, [r3, #4]
 80133ba:	689a      	ldr	r2, [r3, #8]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	f005 fe4f 	bl	8019060 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2224      	movs	r2, #36	@ 0x24
 80133c6:	2100      	movs	r1, #0
 80133c8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	4a07      	ldr	r2, [pc, #28]	@ (80133ec <HAL_PCD_Init+0x1fc>)
 80133ce:	2101      	movs	r1, #1
 80133d0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	69db      	ldr	r3, [r3, #28]
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d103      	bne.n	80133e2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	0018      	movs	r0, r3
 80133de:	f001 fd23 	bl	8014e28 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80133e2:	2300      	movs	r3, #0
}
 80133e4:	0018      	movs	r0, r3
 80133e6:	46bd      	mov	sp, r7
 80133e8:	b005      	add	sp, #20
 80133ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133ec:	000002a9 	.word	0x000002a9

080133f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	23aa      	movs	r3, #170	@ 0xaa
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	5cd3      	ldrb	r3, [r2, r3]
 8013400:	2b01      	cmp	r3, #1
 8013402:	d101      	bne.n	8013408 <HAL_PCD_Start+0x18>
 8013404:	2302      	movs	r3, #2
 8013406:	e014      	b.n	8013432 <HAL_PCD_Start+0x42>
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	23aa      	movs	r3, #170	@ 0xaa
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	2101      	movs	r1, #1
 8013410:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	0018      	movs	r0, r3
 8013418:	f005 fdf2 	bl	8019000 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	0018      	movs	r0, r3
 8013422:	f007 fdf5 	bl	801b010 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	23aa      	movs	r3, #170	@ 0xaa
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	2100      	movs	r1, #0
 801342e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013430:	2300      	movs	r3, #0
}
 8013432:	0018      	movs	r0, r3
 8013434:	46bd      	mov	sp, r7
 8013436:	b002      	add	sp, #8
 8013438:	bd80      	pop	{r7, pc}
	...

0801343c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	0018      	movs	r0, r3
 801344a:	f007 fdf7 	bl	801b03c <USB_ReadInterrupts>
 801344e:	0003      	movs	r3, r0
 8013450:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	2380      	movs	r3, #128	@ 0x80
 8013456:	021b      	lsls	r3, r3, #8
 8013458:	4013      	ands	r3, r2
 801345a:	d004      	beq.n	8013466 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	0018      	movs	r0, r3
 8013460:	f000 fb62 	bl	8013b28 <PCD_EP_ISR_Handler>

    return;
 8013464:	e11d      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013466:	68fa      	ldr	r2, [r7, #12]
 8013468:	2380      	movs	r3, #128	@ 0x80
 801346a:	00db      	lsls	r3, r3, #3
 801346c:	4013      	ands	r3, r2
 801346e:	d015      	beq.n	801349c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2244      	movs	r2, #68	@ 0x44
 8013476:	5a9b      	ldrh	r3, [r3, r2]
 8013478:	b29a      	uxth	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	498a      	ldr	r1, [pc, #552]	@ (80136a8 <HAL_PCD_IRQHandler+0x26c>)
 8013480:	400a      	ands	r2, r1
 8013482:	b291      	uxth	r1, r2
 8013484:	2244      	movs	r2, #68	@ 0x44
 8013486:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	0018      	movs	r0, r3
 801348c:	f009 fe95 	bl	801d1ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2100      	movs	r1, #0
 8013494:	0018      	movs	r0, r3
 8013496:	f000 f915 	bl	80136c4 <HAL_PCD_SetAddress>

    return;
 801349a:	e102      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	2380      	movs	r3, #128	@ 0x80
 80134a0:	01db      	lsls	r3, r3, #7
 80134a2:	4013      	ands	r3, r2
 80134a4:	d00c      	beq.n	80134c0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2244      	movs	r2, #68	@ 0x44
 80134ac:	5a9b      	ldrh	r3, [r3, r2]
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	497d      	ldr	r1, [pc, #500]	@ (80136ac <HAL_PCD_IRQHandler+0x270>)
 80134b6:	400a      	ands	r2, r1
 80134b8:	b291      	uxth	r1, r2
 80134ba:	2244      	movs	r2, #68	@ 0x44
 80134bc:	5299      	strh	r1, [r3, r2]

    return;
 80134be:	e0f0      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	2380      	movs	r3, #128	@ 0x80
 80134c4:	019b      	lsls	r3, r3, #6
 80134c6:	4013      	ands	r3, r2
 80134c8:	d00c      	beq.n	80134e4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	2244      	movs	r2, #68	@ 0x44
 80134d0:	5a9b      	ldrh	r3, [r3, r2]
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4975      	ldr	r1, [pc, #468]	@ (80136b0 <HAL_PCD_IRQHandler+0x274>)
 80134da:	400a      	ands	r2, r1
 80134dc:	b291      	uxth	r1, r2
 80134de:	2244      	movs	r2, #68	@ 0x44
 80134e0:	5299      	strh	r1, [r3, r2]

    return;
 80134e2:	e0de      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80134e4:	68fa      	ldr	r2, [r7, #12]
 80134e6:	2380      	movs	r3, #128	@ 0x80
 80134e8:	015b      	lsls	r3, r3, #5
 80134ea:	4013      	ands	r3, r2
 80134ec:	d038      	beq.n	8013560 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2240      	movs	r2, #64	@ 0x40
 80134f4:	5a9b      	ldrh	r3, [r3, r2]
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	2104      	movs	r1, #4
 80134fe:	438a      	bics	r2, r1
 8013500:	b291      	uxth	r1, r2
 8013502:	2240      	movs	r2, #64	@ 0x40
 8013504:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2240      	movs	r2, #64	@ 0x40
 801350c:	5a9b      	ldrh	r3, [r3, r2]
 801350e:	b29a      	uxth	r2, r3
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2108      	movs	r1, #8
 8013516:	438a      	bics	r2, r1
 8013518:	b291      	uxth	r1, r2
 801351a:	2240      	movs	r2, #64	@ 0x40
 801351c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	23b8      	movs	r3, #184	@ 0xb8
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	5cd3      	ldrb	r3, [r2, r3]
 8013526:	2b01      	cmp	r3, #1
 8013528:	d109      	bne.n	801353e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	23b8      	movs	r3, #184	@ 0xb8
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	2100      	movs	r1, #0
 8013532:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2100      	movs	r1, #0
 8013538:	0018      	movs	r0, r3
 801353a:	f001 fc9f 	bl	8014e7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	0018      	movs	r0, r3
 8013542:	f009 fe7b 	bl	801d23c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2244      	movs	r2, #68	@ 0x44
 801354c:	5a9b      	ldrh	r3, [r3, r2]
 801354e:	b29a      	uxth	r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4957      	ldr	r1, [pc, #348]	@ (80136b4 <HAL_PCD_IRQHandler+0x278>)
 8013556:	400a      	ands	r2, r1
 8013558:	b291      	uxth	r1, r2
 801355a:	2244      	movs	r2, #68	@ 0x44
 801355c:	5299      	strh	r1, [r3, r2]

    return;
 801355e:	e0a0      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013560:	68fa      	ldr	r2, [r7, #12]
 8013562:	2380      	movs	r3, #128	@ 0x80
 8013564:	011b      	lsls	r3, r3, #4
 8013566:	4013      	ands	r3, r2
 8013568:	d028      	beq.n	80135bc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2240      	movs	r2, #64	@ 0x40
 8013570:	5a9b      	ldrh	r3, [r3, r2]
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2108      	movs	r1, #8
 801357a:	430a      	orrs	r2, r1
 801357c:	b291      	uxth	r1, r2
 801357e:	2240      	movs	r2, #64	@ 0x40
 8013580:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2244      	movs	r2, #68	@ 0x44
 8013588:	5a9b      	ldrh	r3, [r3, r2]
 801358a:	b29a      	uxth	r2, r3
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4949      	ldr	r1, [pc, #292]	@ (80136b8 <HAL_PCD_IRQHandler+0x27c>)
 8013592:	400a      	ands	r2, r1
 8013594:	b291      	uxth	r1, r2
 8013596:	2244      	movs	r2, #68	@ 0x44
 8013598:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2240      	movs	r2, #64	@ 0x40
 80135a0:	5a9b      	ldrh	r3, [r3, r2]
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2104      	movs	r1, #4
 80135aa:	430a      	orrs	r2, r1
 80135ac:	b291      	uxth	r1, r2
 80135ae:	2240      	movs	r2, #64	@ 0x40
 80135b0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	0018      	movs	r0, r3
 80135b6:	f009 fe25 	bl	801d204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80135ba:	e072      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2280      	movs	r2, #128	@ 0x80
 80135c0:	4013      	ands	r3, r2
 80135c2:	d046      	beq.n	8013652 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2244      	movs	r2, #68	@ 0x44
 80135ca:	5a9b      	ldrh	r3, [r3, r2]
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2180      	movs	r1, #128	@ 0x80
 80135d4:	438a      	bics	r2, r1
 80135d6:	b291      	uxth	r1, r2
 80135d8:	2244      	movs	r2, #68	@ 0x44
 80135da:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	23b8      	movs	r3, #184	@ 0xb8
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	5cd3      	ldrb	r3, [r2, r3]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d12f      	bne.n	8013648 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2240      	movs	r2, #64	@ 0x40
 80135ee:	5a9b      	ldrh	r3, [r3, r2]
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2104      	movs	r1, #4
 80135f8:	430a      	orrs	r2, r1
 80135fa:	b291      	uxth	r1, r2
 80135fc:	2240      	movs	r2, #64	@ 0x40
 80135fe:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2240      	movs	r2, #64	@ 0x40
 8013606:	5a9b      	ldrh	r3, [r3, r2]
 8013608:	b29a      	uxth	r2, r3
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2108      	movs	r1, #8
 8013610:	430a      	orrs	r2, r1
 8013612:	b291      	uxth	r1, r2
 8013614:	2240      	movs	r2, #64	@ 0x40
 8013616:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	23b8      	movs	r3, #184	@ 0xb8
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	2101      	movs	r1, #1
 8013620:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2254      	movs	r2, #84	@ 0x54
 8013628:	5a9b      	ldrh	r3, [r3, r2]
 801362a:	b29b      	uxth	r3, r3
 801362c:	089b      	lsrs	r3, r3, #2
 801362e:	223c      	movs	r2, #60	@ 0x3c
 8013630:	4013      	ands	r3, r2
 8013632:	0019      	movs	r1, r3
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	23b9      	movs	r3, #185	@ 0xb9
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2101      	movs	r1, #1
 8013640:	0018      	movs	r0, r3
 8013642:	f001 fc1b 	bl	8014e7c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013646:	e02c      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	0018      	movs	r0, r3
 801364c:	f009 fdda 	bl	801d204 <HAL_PCD_SuspendCallback>
    return;
 8013650:	e027      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	2380      	movs	r3, #128	@ 0x80
 8013656:	009b      	lsls	r3, r3, #2
 8013658:	4013      	ands	r3, r2
 801365a:	d010      	beq.n	801367e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2244      	movs	r2, #68	@ 0x44
 8013662:	5a9b      	ldrh	r3, [r3, r2]
 8013664:	b29a      	uxth	r2, r3
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	4914      	ldr	r1, [pc, #80]	@ (80136bc <HAL_PCD_IRQHandler+0x280>)
 801366c:	400a      	ands	r2, r1
 801366e:	b291      	uxth	r1, r2
 8013670:	2244      	movs	r2, #68	@ 0x44
 8013672:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	0018      	movs	r0, r3
 8013678:	f009 fd90 	bl	801d19c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801367c:	e011      	b.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801367e:	68fa      	ldr	r2, [r7, #12]
 8013680:	2380      	movs	r3, #128	@ 0x80
 8013682:	005b      	lsls	r3, r3, #1
 8013684:	4013      	ands	r3, r2
 8013686:	d00c      	beq.n	80136a2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2244      	movs	r2, #68	@ 0x44
 801368e:	5a9b      	ldrh	r3, [r3, r2]
 8013690:	b29a      	uxth	r2, r3
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	490a      	ldr	r1, [pc, #40]	@ (80136c0 <HAL_PCD_IRQHandler+0x284>)
 8013698:	400a      	ands	r2, r1
 801369a:	b291      	uxth	r1, r2
 801369c:	2244      	movs	r2, #68	@ 0x44
 801369e:	5299      	strh	r1, [r3, r2]

    return;
 80136a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80136a2:	46bd      	mov	sp, r7
 80136a4:	b004      	add	sp, #16
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	fffffbff 	.word	0xfffffbff
 80136ac:	ffffbfff 	.word	0xffffbfff
 80136b0:	ffffdfff 	.word	0xffffdfff
 80136b4:	ffffefff 	.word	0xffffefff
 80136b8:	fffff7ff 	.word	0xfffff7ff
 80136bc:	fffffdff 	.word	0xfffffdff
 80136c0:	fffffeff 	.word	0xfffffeff

080136c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	000a      	movs	r2, r1
 80136ce:	1cfb      	adds	r3, r7, #3
 80136d0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	23aa      	movs	r3, #170	@ 0xaa
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	5cd3      	ldrb	r3, [r2, r3]
 80136da:	2b01      	cmp	r3, #1
 80136dc:	d101      	bne.n	80136e2 <HAL_PCD_SetAddress+0x1e>
 80136de:	2302      	movs	r3, #2
 80136e0:	e017      	b.n	8013712 <HAL_PCD_SetAddress+0x4e>
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	23aa      	movs	r3, #170	@ 0xaa
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	2101      	movs	r1, #1
 80136ea:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	1cfa      	adds	r2, r7, #3
 80136f0:	2124      	movs	r1, #36	@ 0x24
 80136f2:	7812      	ldrb	r2, [r2, #0]
 80136f4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	1cfb      	adds	r3, r7, #3
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	0019      	movs	r1, r3
 8013700:	0010      	movs	r0, r2
 8013702:	f007 fc71 	bl	801afe8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	23aa      	movs	r3, #170	@ 0xaa
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	2100      	movs	r1, #0
 801370e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013710:	2300      	movs	r3, #0
}
 8013712:	0018      	movs	r0, r3
 8013714:	46bd      	mov	sp, r7
 8013716:	b002      	add	sp, #8
 8013718:	bd80      	pop	{r7, pc}

0801371a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801371a:	b590      	push	{r4, r7, lr}
 801371c:	b085      	sub	sp, #20
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	000c      	movs	r4, r1
 8013724:	0010      	movs	r0, r2
 8013726:	0019      	movs	r1, r3
 8013728:	1cfb      	adds	r3, r7, #3
 801372a:	1c22      	adds	r2, r4, #0
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	003b      	movs	r3, r7
 8013730:	1c02      	adds	r2, r0, #0
 8013732:	801a      	strh	r2, [r3, #0]
 8013734:	1cbb      	adds	r3, r7, #2
 8013736:	1c0a      	adds	r2, r1, #0
 8013738:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801373a:	230b      	movs	r3, #11
 801373c:	18fb      	adds	r3, r7, r3
 801373e:	2200      	movs	r2, #0
 8013740:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013742:	1cfb      	adds	r3, r7, #3
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	b25b      	sxtb	r3, r3
 8013748:	2b00      	cmp	r3, #0
 801374a:	da0f      	bge.n	801376c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801374c:	1cfb      	adds	r3, r7, #3
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2207      	movs	r2, #7
 8013752:	4013      	ands	r3, r2
 8013754:	1c5a      	adds	r2, r3, #1
 8013756:	0013      	movs	r3, r2
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	189b      	adds	r3, r3, r2
 801375c:	00db      	lsls	r3, r3, #3
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	18d3      	adds	r3, r2, r3
 8013762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2201      	movs	r2, #1
 8013768:	705a      	strb	r2, [r3, #1]
 801376a:	e00f      	b.n	801378c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801376c:	1cfb      	adds	r3, r7, #3
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	2207      	movs	r2, #7
 8013772:	401a      	ands	r2, r3
 8013774:	0013      	movs	r3, r2
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	189b      	adds	r3, r3, r2
 801377a:	00db      	lsls	r3, r3, #3
 801377c:	3369      	adds	r3, #105	@ 0x69
 801377e:	33ff      	adds	r3, #255	@ 0xff
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	18d3      	adds	r3, r2, r3
 8013784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2200      	movs	r2, #0
 801378a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801378c:	1cfb      	adds	r3, r7, #3
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	2207      	movs	r2, #7
 8013792:	4013      	ands	r3, r2
 8013794:	b2da      	uxtb	r2, r3
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801379a:	003b      	movs	r3, r7
 801379c:	881a      	ldrh	r2, [r3, #0]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	1cba      	adds	r2, r7, #2
 80137a6:	7812      	ldrb	r2, [r2, #0]
 80137a8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80137aa:	1cbb      	adds	r3, r7, #2
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	2b02      	cmp	r3, #2
 80137b0:	d102      	bne.n	80137b8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	2200      	movs	r2, #0
 80137b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	23aa      	movs	r3, #170	@ 0xaa
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	5cd3      	ldrb	r3, [r2, r3]
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d101      	bne.n	80137c8 <HAL_PCD_EP_Open+0xae>
 80137c4:	2302      	movs	r3, #2
 80137c6:	e013      	b.n	80137f0 <HAL_PCD_EP_Open+0xd6>
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	23aa      	movs	r3, #170	@ 0xaa
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	2101      	movs	r1, #1
 80137d0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	68fa      	ldr	r2, [r7, #12]
 80137d8:	0011      	movs	r1, r2
 80137da:	0018      	movs	r0, r3
 80137dc:	f005 fc68 	bl	80190b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	23aa      	movs	r3, #170	@ 0xaa
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	2100      	movs	r1, #0
 80137e8:	54d1      	strb	r1, [r2, r3]

  return ret;
 80137ea:	230b      	movs	r3, #11
 80137ec:	18fb      	adds	r3, r7, r3
 80137ee:	781b      	ldrb	r3, [r3, #0]
}
 80137f0:	0018      	movs	r0, r3
 80137f2:	46bd      	mov	sp, r7
 80137f4:	b005      	add	sp, #20
 80137f6:	bd90      	pop	{r4, r7, pc}

080137f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b084      	sub	sp, #16
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	000a      	movs	r2, r1
 8013802:	1cfb      	adds	r3, r7, #3
 8013804:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013806:	1cfb      	adds	r3, r7, #3
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	b25b      	sxtb	r3, r3
 801380c:	2b00      	cmp	r3, #0
 801380e:	da0f      	bge.n	8013830 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013810:	1cfb      	adds	r3, r7, #3
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2207      	movs	r2, #7
 8013816:	4013      	ands	r3, r2
 8013818:	1c5a      	adds	r2, r3, #1
 801381a:	0013      	movs	r3, r2
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	189b      	adds	r3, r3, r2
 8013820:	00db      	lsls	r3, r3, #3
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	18d3      	adds	r3, r2, r3
 8013826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2201      	movs	r2, #1
 801382c:	705a      	strb	r2, [r3, #1]
 801382e:	e00f      	b.n	8013850 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013830:	1cfb      	adds	r3, r7, #3
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	2207      	movs	r2, #7
 8013836:	401a      	ands	r2, r3
 8013838:	0013      	movs	r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	189b      	adds	r3, r3, r2
 801383e:	00db      	lsls	r3, r3, #3
 8013840:	3369      	adds	r3, #105	@ 0x69
 8013842:	33ff      	adds	r3, #255	@ 0xff
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	18d3      	adds	r3, r2, r3
 8013848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2200      	movs	r2, #0
 801384e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013850:	1cfb      	adds	r3, r7, #3
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	2207      	movs	r2, #7
 8013856:	4013      	ands	r3, r2
 8013858:	b2da      	uxtb	r2, r3
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	23aa      	movs	r3, #170	@ 0xaa
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	5cd3      	ldrb	r3, [r2, r3]
 8013866:	2b01      	cmp	r3, #1
 8013868:	d101      	bne.n	801386e <HAL_PCD_EP_Close+0x76>
 801386a:	2302      	movs	r3, #2
 801386c:	e011      	b.n	8013892 <HAL_PCD_EP_Close+0x9a>
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	23aa      	movs	r3, #170	@ 0xaa
 8013872:	009b      	lsls	r3, r3, #2
 8013874:	2101      	movs	r1, #1
 8013876:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	0011      	movs	r1, r2
 8013880:	0018      	movs	r0, r3
 8013882:	f005 ffb7 	bl	80197f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	23aa      	movs	r3, #170	@ 0xaa
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	2100      	movs	r1, #0
 801388e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8013890:	2300      	movs	r3, #0
}
 8013892:	0018      	movs	r0, r3
 8013894:	46bd      	mov	sp, r7
 8013896:	b004      	add	sp, #16
 8013898:	bd80      	pop	{r7, pc}

0801389a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801389a:	b580      	push	{r7, lr}
 801389c:	b086      	sub	sp, #24
 801389e:	af00      	add	r7, sp, #0
 80138a0:	60f8      	str	r0, [r7, #12]
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	603b      	str	r3, [r7, #0]
 80138a6:	200b      	movs	r0, #11
 80138a8:	183b      	adds	r3, r7, r0
 80138aa:	1c0a      	adds	r2, r1, #0
 80138ac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80138ae:	0001      	movs	r1, r0
 80138b0:	187b      	adds	r3, r7, r1
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	2207      	movs	r2, #7
 80138b6:	401a      	ands	r2, r3
 80138b8:	0013      	movs	r3, r2
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	189b      	adds	r3, r3, r2
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	3369      	adds	r3, #105	@ 0x69
 80138c2:	33ff      	adds	r3, #255	@ 0xff
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	18d3      	adds	r3, r2, r3
 80138c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	687a      	ldr	r2, [r7, #4]
 80138ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	2200      	movs	r2, #0
 80138da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	2200      	movs	r2, #0
 80138e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80138e2:	187b      	adds	r3, r7, r1
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	2207      	movs	r2, #7
 80138e8:	4013      	ands	r3, r2
 80138ea:	b2da      	uxtb	r2, r3
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	697a      	ldr	r2, [r7, #20]
 80138f6:	0011      	movs	r1, r2
 80138f8:	0018      	movs	r0, r3
 80138fa:	f006 f93b 	bl	8019b74 <USB_EPStartXfer>

  return HAL_OK;
 80138fe:	2300      	movs	r3, #0
}
 8013900:	0018      	movs	r0, r3
 8013902:	46bd      	mov	sp, r7
 8013904:	b006      	add	sp, #24
 8013906:	bd80      	pop	{r7, pc}

08013908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	000a      	movs	r2, r1
 8013912:	1cfb      	adds	r3, r7, #3
 8013914:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013916:	1cfb      	adds	r3, r7, #3
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	2207      	movs	r2, #7
 801391c:	401a      	ands	r2, r3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	23c2      	movs	r3, #194	@ 0xc2
 8013922:	0059      	lsls	r1, r3, #1
 8013924:	0013      	movs	r3, r2
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	189b      	adds	r3, r3, r2
 801392a:	00db      	lsls	r3, r3, #3
 801392c:	18c3      	adds	r3, r0, r3
 801392e:	185b      	adds	r3, r3, r1
 8013930:	681b      	ldr	r3, [r3, #0]
}
 8013932:	0018      	movs	r0, r3
 8013934:	46bd      	mov	sp, r7
 8013936:	b002      	add	sp, #8
 8013938:	bd80      	pop	{r7, pc}

0801393a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801393a:	b580      	push	{r7, lr}
 801393c:	b086      	sub	sp, #24
 801393e:	af00      	add	r7, sp, #0
 8013940:	60f8      	str	r0, [r7, #12]
 8013942:	607a      	str	r2, [r7, #4]
 8013944:	603b      	str	r3, [r7, #0]
 8013946:	200b      	movs	r0, #11
 8013948:	183b      	adds	r3, r7, r0
 801394a:	1c0a      	adds	r2, r1, #0
 801394c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801394e:	183b      	adds	r3, r7, r0
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	2207      	movs	r2, #7
 8013954:	4013      	ands	r3, r2
 8013956:	1c5a      	adds	r2, r3, #1
 8013958:	0013      	movs	r3, r2
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	189b      	adds	r3, r3, r2
 801395e:	00db      	lsls	r3, r3, #3
 8013960:	68fa      	ldr	r2, [r7, #12]
 8013962:	18d3      	adds	r3, r2, r3
 8013964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	687a      	ldr	r2, [r7, #4]
 801396a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	683a      	ldr	r2, [r7, #0]
 8013970:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	2224      	movs	r2, #36	@ 0x24
 8013976:	2101      	movs	r1, #1
 8013978:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	683a      	ldr	r2, [r7, #0]
 801397e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	2200      	movs	r2, #0
 8013984:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	2201      	movs	r2, #1
 801398a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801398c:	183b      	adds	r3, r7, r0
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	2207      	movs	r2, #7
 8013992:	4013      	ands	r3, r2
 8013994:	b2da      	uxtb	r2, r3
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	697a      	ldr	r2, [r7, #20]
 80139a0:	0011      	movs	r1, r2
 80139a2:	0018      	movs	r0, r3
 80139a4:	f006 f8e6 	bl	8019b74 <USB_EPStartXfer>

  return HAL_OK;
 80139a8:	2300      	movs	r3, #0
}
 80139aa:	0018      	movs	r0, r3
 80139ac:	46bd      	mov	sp, r7
 80139ae:	b006      	add	sp, #24
 80139b0:	bd80      	pop	{r7, pc}

080139b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80139b2:	b580      	push	{r7, lr}
 80139b4:	b084      	sub	sp, #16
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
 80139ba:	000a      	movs	r2, r1
 80139bc:	1cfb      	adds	r3, r7, #3
 80139be:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80139c0:	1cfb      	adds	r3, r7, #3
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	2207      	movs	r2, #7
 80139c6:	401a      	ands	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d901      	bls.n	80139d4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80139d0:	2301      	movs	r3, #1
 80139d2:	e046      	b.n	8013a62 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80139d4:	1cfb      	adds	r3, r7, #3
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	b25b      	sxtb	r3, r3
 80139da:	2b00      	cmp	r3, #0
 80139dc:	da0f      	bge.n	80139fe <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80139de:	1cfb      	adds	r3, r7, #3
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	2207      	movs	r2, #7
 80139e4:	4013      	ands	r3, r2
 80139e6:	1c5a      	adds	r2, r3, #1
 80139e8:	0013      	movs	r3, r2
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	189b      	adds	r3, r3, r2
 80139ee:	00db      	lsls	r3, r3, #3
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	18d3      	adds	r3, r2, r3
 80139f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2201      	movs	r2, #1
 80139fa:	705a      	strb	r2, [r3, #1]
 80139fc:	e00d      	b.n	8013a1a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80139fe:	1cfb      	adds	r3, r7, #3
 8013a00:	781a      	ldrb	r2, [r3, #0]
 8013a02:	0013      	movs	r3, r2
 8013a04:	009b      	lsls	r3, r3, #2
 8013a06:	189b      	adds	r3, r3, r2
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	3369      	adds	r3, #105	@ 0x69
 8013a0c:	33ff      	adds	r3, #255	@ 0xff
 8013a0e:	687a      	ldr	r2, [r7, #4]
 8013a10:	18d3      	adds	r3, r2, r3
 8013a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2200      	movs	r2, #0
 8013a18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a20:	1cfb      	adds	r3, r7, #3
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	2207      	movs	r2, #7
 8013a26:	4013      	ands	r3, r2
 8013a28:	b2da      	uxtb	r2, r3
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	23aa      	movs	r3, #170	@ 0xaa
 8013a32:	009b      	lsls	r3, r3, #2
 8013a34:	5cd3      	ldrb	r3, [r2, r3]
 8013a36:	2b01      	cmp	r3, #1
 8013a38:	d101      	bne.n	8013a3e <HAL_PCD_EP_SetStall+0x8c>
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	e011      	b.n	8013a62 <HAL_PCD_EP_SetStall+0xb0>
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	23aa      	movs	r3, #170	@ 0xaa
 8013a42:	009b      	lsls	r3, r3, #2
 8013a44:	2101      	movs	r1, #1
 8013a46:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	0011      	movs	r1, r2
 8013a50:	0018      	movs	r0, r3
 8013a52:	f007 f9c7 	bl	801ade4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	23aa      	movs	r3, #170	@ 0xaa
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	0018      	movs	r0, r3
 8013a64:	46bd      	mov	sp, r7
 8013a66:	b004      	add	sp, #16
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b084      	sub	sp, #16
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
 8013a72:	000a      	movs	r2, r1
 8013a74:	1cfb      	adds	r3, r7, #3
 8013a76:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013a78:	1cfb      	adds	r3, r7, #3
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	220f      	movs	r2, #15
 8013a7e:	401a      	ands	r2, r3
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d901      	bls.n	8013a8c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	e048      	b.n	8013b1e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013a8c:	1cfb      	adds	r3, r7, #3
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	b25b      	sxtb	r3, r3
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	da0f      	bge.n	8013ab6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013a96:	1cfb      	adds	r3, r7, #3
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	2207      	movs	r2, #7
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	1c5a      	adds	r2, r3, #1
 8013aa0:	0013      	movs	r3, r2
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	189b      	adds	r3, r3, r2
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	18d3      	adds	r3, r2, r3
 8013aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	705a      	strb	r2, [r3, #1]
 8013ab4:	e00f      	b.n	8013ad6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013ab6:	1cfb      	adds	r3, r7, #3
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	2207      	movs	r2, #7
 8013abc:	401a      	ands	r2, r3
 8013abe:	0013      	movs	r3, r2
 8013ac0:	009b      	lsls	r3, r3, #2
 8013ac2:	189b      	adds	r3, r3, r2
 8013ac4:	00db      	lsls	r3, r3, #3
 8013ac6:	3369      	adds	r3, #105	@ 0x69
 8013ac8:	33ff      	adds	r3, #255	@ 0xff
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	18d3      	adds	r3, r2, r3
 8013ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013adc:	1cfb      	adds	r3, r7, #3
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	2207      	movs	r2, #7
 8013ae2:	4013      	ands	r3, r2
 8013ae4:	b2da      	uxtb	r2, r3
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	23aa      	movs	r3, #170	@ 0xaa
 8013aee:	009b      	lsls	r3, r3, #2
 8013af0:	5cd3      	ldrb	r3, [r2, r3]
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d101      	bne.n	8013afa <HAL_PCD_EP_ClrStall+0x90>
 8013af6:	2302      	movs	r3, #2
 8013af8:	e011      	b.n	8013b1e <HAL_PCD_EP_ClrStall+0xb4>
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	23aa      	movs	r3, #170	@ 0xaa
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	2101      	movs	r1, #1
 8013b02:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	68fa      	ldr	r2, [r7, #12]
 8013b0a:	0011      	movs	r1, r2
 8013b0c:	0018      	movs	r0, r3
 8013b0e:	f007 f9b9 	bl	801ae84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	23aa      	movs	r3, #170	@ 0xaa
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	2100      	movs	r1, #0
 8013b1a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013b1c:	2300      	movs	r3, #0
}
 8013b1e:	0018      	movs	r0, r3
 8013b20:	46bd      	mov	sp, r7
 8013b22:	b004      	add	sp, #16
 8013b24:	bd80      	pop	{r7, pc}
	...

08013b28 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013b28:	b5b0      	push	{r4, r5, r7, lr}
 8013b2a:	b096      	sub	sp, #88	@ 0x58
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013b30:	f000 fbec 	bl	801430c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681a      	ldr	r2, [r3, #0]
 8013b38:	204e      	movs	r0, #78	@ 0x4e
 8013b3a:	183b      	adds	r3, r7, r0
 8013b3c:	2144      	movs	r1, #68	@ 0x44
 8013b3e:	5a52      	ldrh	r2, [r2, r1]
 8013b40:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013b42:	183b      	adds	r3, r7, r0
 8013b44:	881b      	ldrh	r3, [r3, #0]
 8013b46:	b2da      	uxtb	r2, r3
 8013b48:	244d      	movs	r4, #77	@ 0x4d
 8013b4a:	193b      	adds	r3, r7, r4
 8013b4c:	210f      	movs	r1, #15
 8013b4e:	400a      	ands	r2, r1
 8013b50:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013b52:	193b      	adds	r3, r7, r4
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d000      	beq.n	8013b5c <PCD_EP_ISR_Handler+0x34>
 8013b5a:	e18f      	b.n	8013e7c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013b5c:	183b      	adds	r3, r7, r0
 8013b5e:	881b      	ldrh	r3, [r3, #0]
 8013b60:	2210      	movs	r2, #16
 8013b62:	4013      	ands	r3, r2
 8013b64:	d155      	bne.n	8013c12 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	881b      	ldrh	r3, [r3, #0]
 8013b6c:	b29a      	uxth	r2, r3
 8013b6e:	200e      	movs	r0, #14
 8013b70:	183b      	adds	r3, r7, r0
 8013b72:	49bb      	ldr	r1, [pc, #748]	@ (8013e60 <PCD_EP_ISR_Handler+0x338>)
 8013b74:	400a      	ands	r2, r1
 8013b76:	801a      	strh	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	183a      	adds	r2, r7, r0
 8013b7e:	8812      	ldrh	r2, [r2, #0]
 8013b80:	49b8      	ldr	r1, [pc, #736]	@ (8013e64 <PCD_EP_ISR_Handler+0x33c>)
 8013b82:	430a      	orrs	r2, r1
 8013b84:	b292      	uxth	r2, r2
 8013b86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	3328      	adds	r3, #40	@ 0x28
 8013b8c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	2250      	movs	r2, #80	@ 0x50
 8013b94:	5a9b      	ldrh	r3, [r3, r2]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	001a      	movs	r2, r3
 8013b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	18d2      	adds	r2, r2, r3
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	18d3      	adds	r3, r2, r3
 8013ba8:	4aaf      	ldr	r2, [pc, #700]	@ (8013e68 <PCD_EP_ISR_Handler+0x340>)
 8013baa:	4694      	mov	ip, r2
 8013bac:	4463      	add	r3, ip
 8013bae:	881b      	ldrh	r3, [r3, #0]
 8013bb0:	059b      	lsls	r3, r3, #22
 8013bb2:	0d9a      	lsrs	r2, r3, #22
 8013bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bba:	695a      	ldr	r2, [r3, #20]
 8013bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bbe:	69db      	ldr	r3, [r3, #28]
 8013bc0:	18d2      	adds	r2, r2, r3
 8013bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2100      	movs	r1, #0
 8013bca:	0018      	movs	r0, r3
 8013bcc:	f009 fac8 	bl	801d160 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2224      	movs	r2, #36	@ 0x24
 8013bd4:	5c9b      	ldrb	r3, [r3, r2]
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d101      	bne.n	8013be0 <PCD_EP_ISR_Handler+0xb8>
 8013bdc:	f000 fb96 	bl	801430c <PCD_EP_ISR_Handler+0x7e4>
 8013be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013be2:	699b      	ldr	r3, [r3, #24]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d001      	beq.n	8013bec <PCD_EP_ISR_Handler+0xc4>
 8013be8:	f000 fb90 	bl	801430c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2224      	movs	r2, #36	@ 0x24
 8013bf0:	5c9b      	ldrb	r3, [r3, r2]
 8013bf2:	b2db      	uxtb	r3, r3
 8013bf4:	2280      	movs	r2, #128	@ 0x80
 8013bf6:	4252      	negs	r2, r2
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	b2da      	uxtb	r2, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	0011      	movs	r1, r2
 8013c02:	224c      	movs	r2, #76	@ 0x4c
 8013c04:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2224      	movs	r2, #36	@ 0x24
 8013c0a:	2100      	movs	r1, #0
 8013c0c:	5499      	strb	r1, [r3, r2]
 8013c0e:	f000 fb7d 	bl	801430c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3369      	adds	r3, #105	@ 0x69
 8013c16:	33ff      	adds	r3, #255	@ 0xff
 8013c18:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	214a      	movs	r1, #74	@ 0x4a
 8013c20:	187b      	adds	r3, r7, r1
 8013c22:	8812      	ldrh	r2, [r2, #0]
 8013c24:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013c26:	187b      	adds	r3, r7, r1
 8013c28:	881a      	ldrh	r2, [r3, #0]
 8013c2a:	2380      	movs	r3, #128	@ 0x80
 8013c2c:	011b      	lsls	r3, r3, #4
 8013c2e:	4013      	ands	r3, r2
 8013c30:	d037      	beq.n	8013ca2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2250      	movs	r2, #80	@ 0x50
 8013c38:	5a9b      	ldrh	r3, [r3, r2]
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	001a      	movs	r2, r3
 8013c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	00db      	lsls	r3, r3, #3
 8013c44:	18d2      	adds	r2, r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	18d3      	adds	r3, r2, r3
 8013c4c:	4a87      	ldr	r2, [pc, #540]	@ (8013e6c <PCD_EP_ISR_Handler+0x344>)
 8013c4e:	4694      	mov	ip, r2
 8013c50:	4463      	add	r3, ip
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	059b      	lsls	r3, r3, #22
 8013c56:	0d9a      	lsrs	r2, r3, #22
 8013c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	22ac      	movs	r2, #172	@ 0xac
 8013c64:	0092      	lsls	r2, r2, #2
 8013c66:	1899      	adds	r1, r3, r2
 8013c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	f007 fa3a 	bl	801b0ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	2010      	movs	r0, #16
 8013c80:	183b      	adds	r3, r7, r0
 8013c82:	497b      	ldr	r1, [pc, #492]	@ (8013e70 <PCD_EP_ISR_Handler+0x348>)
 8013c84:	400a      	ands	r2, r1
 8013c86:	801a      	strh	r2, [r3, #0]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	183a      	adds	r2, r7, r0
 8013c8e:	8812      	ldrh	r2, [r2, #0]
 8013c90:	2180      	movs	r1, #128	@ 0x80
 8013c92:	430a      	orrs	r2, r1
 8013c94:	b292      	uxth	r2, r2
 8013c96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	0018      	movs	r0, r3
 8013c9c:	f009 fa2a 	bl	801d0f4 <HAL_PCD_SetupStageCallback>
 8013ca0:	e334      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013ca2:	234a      	movs	r3, #74	@ 0x4a
 8013ca4:	18fb      	adds	r3, r7, r3
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	5e9b      	ldrsh	r3, [r3, r2]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	db00      	blt.n	8013cb0 <PCD_EP_ISR_Handler+0x188>
 8013cae:	e32d      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	881b      	ldrh	r3, [r3, #0]
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	201e      	movs	r0, #30
 8013cba:	183b      	adds	r3, r7, r0
 8013cbc:	496c      	ldr	r1, [pc, #432]	@ (8013e70 <PCD_EP_ISR_Handler+0x348>)
 8013cbe:	400a      	ands	r2, r1
 8013cc0:	801a      	strh	r2, [r3, #0]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	183a      	adds	r2, r7, r0
 8013cc8:	8812      	ldrh	r2, [r2, #0]
 8013cca:	2180      	movs	r1, #128	@ 0x80
 8013ccc:	430a      	orrs	r2, r1
 8013cce:	b292      	uxth	r2, r2
 8013cd0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2250      	movs	r2, #80	@ 0x50
 8013cd8:	5a9b      	ldrh	r3, [r3, r2]
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	001a      	movs	r2, r3
 8013cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	18d2      	adds	r2, r2, r3
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	18d3      	adds	r3, r2, r3
 8013cec:	4a5f      	ldr	r2, [pc, #380]	@ (8013e6c <PCD_EP_ISR_Handler+0x344>)
 8013cee:	4694      	mov	ip, r2
 8013cf0:	4463      	add	r3, ip
 8013cf2:	881b      	ldrh	r3, [r3, #0]
 8013cf4:	059b      	lsls	r3, r3, #22
 8013cf6:	0d9a      	lsrs	r2, r3, #22
 8013cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cfa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cfe:	69db      	ldr	r3, [r3, #28]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d01a      	beq.n	8013d3a <PCD_EP_ISR_Handler+0x212>
 8013d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d016      	beq.n	8013d3a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6818      	ldr	r0, [r3, #0]
 8013d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d12:	6959      	ldr	r1, [r3, #20]
 8013d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	f007 f9e4 	bl	801b0ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d24:	695a      	ldr	r2, [r3, #20]
 8013d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d28:	69db      	ldr	r3, [r3, #28]
 8013d2a:	18d2      	adds	r2, r2, r3
 8013d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2100      	movs	r1, #0
 8013d34:	0018      	movs	r0, r3
 8013d36:	f009 f9f2 	bl	801d11e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	214a      	movs	r1, #74	@ 0x4a
 8013d40:	187b      	adds	r3, r7, r1
 8013d42:	8812      	ldrh	r2, [r2, #0]
 8013d44:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013d46:	187b      	adds	r3, r7, r1
 8013d48:	881a      	ldrh	r2, [r3, #0]
 8013d4a:	2380      	movs	r3, #128	@ 0x80
 8013d4c:	011b      	lsls	r3, r3, #4
 8013d4e:	4013      	ands	r3, r2
 8013d50:	d000      	beq.n	8013d54 <PCD_EP_ISR_Handler+0x22c>
 8013d52:	e2db      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
 8013d54:	187b      	adds	r3, r7, r1
 8013d56:	881a      	ldrh	r2, [r3, #0]
 8013d58:	23c0      	movs	r3, #192	@ 0xc0
 8013d5a:	019b      	lsls	r3, r3, #6
 8013d5c:	401a      	ands	r2, r3
 8013d5e:	23c0      	movs	r3, #192	@ 0xc0
 8013d60:	019b      	lsls	r3, r3, #6
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d100      	bne.n	8013d68 <PCD_EP_ISR_Handler+0x240>
 8013d66:	e2d1      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	61bb      	str	r3, [r7, #24]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2250      	movs	r2, #80	@ 0x50
 8013d74:	5a9b      	ldrh	r3, [r3, r2]
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	001a      	movs	r2, r3
 8013d7a:	69bb      	ldr	r3, [r7, #24]
 8013d7c:	189b      	adds	r3, r3, r2
 8013d7e:	61bb      	str	r3, [r7, #24]
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	4a3a      	ldr	r2, [pc, #232]	@ (8013e6c <PCD_EP_ISR_Handler+0x344>)
 8013d84:	4694      	mov	ip, r2
 8013d86:	4463      	add	r3, ip
 8013d88:	617b      	str	r3, [r7, #20]
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	881b      	ldrh	r3, [r3, #0]
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	059b      	lsls	r3, r3, #22
 8013d92:	0d9b      	lsrs	r3, r3, #22
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	801a      	strh	r2, [r3, #0]
 8013d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d9c:	691b      	ldr	r3, [r3, #16]
 8013d9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013da0:	d91a      	bls.n	8013dd8 <PCD_EP_ISR_Handler+0x2b0>
 8013da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	095b      	lsrs	r3, r3, #5
 8013da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dac:	691b      	ldr	r3, [r3, #16]
 8013dae:	221f      	movs	r2, #31
 8013db0:	4013      	ands	r3, r2
 8013db2:	d102      	bne.n	8013dba <PCD_EP_ISR_Handler+0x292>
 8013db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013db6:	3b01      	subs	r3, #1
 8013db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	b29a      	uxth	r2, r3
 8013dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	029b      	lsls	r3, r3, #10
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	4313      	orrs	r3, r2
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	4a25      	ldr	r2, [pc, #148]	@ (8013e64 <PCD_EP_ISR_Handler+0x33c>)
 8013dce:	4313      	orrs	r3, r2
 8013dd0:	b29a      	uxth	r2, r3
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	801a      	strh	r2, [r3, #0]
 8013dd6:	e023      	b.n	8013e20 <PCD_EP_ISR_Handler+0x2f8>
 8013dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dda:	691b      	ldr	r3, [r3, #16]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d108      	bne.n	8013df2 <PCD_EP_ISR_Handler+0x2ca>
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	881b      	ldrh	r3, [r3, #0]
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	4a1f      	ldr	r2, [pc, #124]	@ (8013e64 <PCD_EP_ISR_Handler+0x33c>)
 8013de8:	4313      	orrs	r3, r2
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	801a      	strh	r2, [r3, #0]
 8013df0:	e016      	b.n	8013e20 <PCD_EP_ISR_Handler+0x2f8>
 8013df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013df4:	691b      	ldr	r3, [r3, #16]
 8013df6:	085b      	lsrs	r3, r3, #1
 8013df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dfc:	691b      	ldr	r3, [r3, #16]
 8013dfe:	2201      	movs	r2, #1
 8013e00:	4013      	ands	r3, r2
 8013e02:	d002      	beq.n	8013e0a <PCD_EP_ISR_Handler+0x2e2>
 8013e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e06:	3301      	adds	r3, #1
 8013e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	029b      	lsls	r3, r3, #10
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	b29a      	uxth	r2, r3
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	881b      	ldrh	r3, [r3, #0]
 8013e26:	b29a      	uxth	r2, r3
 8013e28:	2012      	movs	r0, #18
 8013e2a:	183b      	adds	r3, r7, r0
 8013e2c:	4911      	ldr	r1, [pc, #68]	@ (8013e74 <PCD_EP_ISR_Handler+0x34c>)
 8013e2e:	400a      	ands	r2, r1
 8013e30:	801a      	strh	r2, [r3, #0]
 8013e32:	183b      	adds	r3, r7, r0
 8013e34:	183a      	adds	r2, r7, r0
 8013e36:	8812      	ldrh	r2, [r2, #0]
 8013e38:	2180      	movs	r1, #128	@ 0x80
 8013e3a:	0149      	lsls	r1, r1, #5
 8013e3c:	404a      	eors	r2, r1
 8013e3e:	801a      	strh	r2, [r3, #0]
 8013e40:	183b      	adds	r3, r7, r0
 8013e42:	183a      	adds	r2, r7, r0
 8013e44:	8812      	ldrh	r2, [r2, #0]
 8013e46:	2180      	movs	r1, #128	@ 0x80
 8013e48:	0189      	lsls	r1, r1, #6
 8013e4a:	404a      	eors	r2, r1
 8013e4c:	801a      	strh	r2, [r3, #0]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	183a      	adds	r2, r7, r0
 8013e54:	8812      	ldrh	r2, [r2, #0]
 8013e56:	4908      	ldr	r1, [pc, #32]	@ (8013e78 <PCD_EP_ISR_Handler+0x350>)
 8013e58:	430a      	orrs	r2, r1
 8013e5a:	b292      	uxth	r2, r2
 8013e5c:	801a      	strh	r2, [r3, #0]
 8013e5e:	e255      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
 8013e60:	ffff8f0f 	.word	0xffff8f0f
 8013e64:	ffff8000 	.word	0xffff8000
 8013e68:	00000402 	.word	0x00000402
 8013e6c:	00000406 	.word	0x00000406
 8013e70:	00000f8f 	.word	0x00000f8f
 8013e74:	ffffbf8f 	.word	0xffffbf8f
 8013e78:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	001a      	movs	r2, r3
 8013e82:	204d      	movs	r0, #77	@ 0x4d
 8013e84:	183b      	adds	r3, r7, r0
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	18d2      	adds	r2, r2, r3
 8013e8c:	214a      	movs	r1, #74	@ 0x4a
 8013e8e:	187b      	adds	r3, r7, r1
 8013e90:	8812      	ldrh	r2, [r2, #0]
 8013e92:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013e94:	187b      	adds	r3, r7, r1
 8013e96:	2200      	movs	r2, #0
 8013e98:	5e9b      	ldrsh	r3, [r3, r2]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	db00      	blt.n	8013ea0 <PCD_EP_ISR_Handler+0x378>
 8013e9e:	e0fa      	b.n	8014096 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	001a      	movs	r2, r3
 8013ea6:	183b      	adds	r3, r7, r0
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	18d3      	adds	r3, r2, r3
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	b29a      	uxth	r2, r3
 8013eb2:	2448      	movs	r4, #72	@ 0x48
 8013eb4:	193b      	adds	r3, r7, r4
 8013eb6:	49d1      	ldr	r1, [pc, #836]	@ (80141fc <PCD_EP_ISR_Handler+0x6d4>)
 8013eb8:	400a      	ands	r2, r1
 8013eba:	801a      	strh	r2, [r3, #0]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	001a      	movs	r2, r3
 8013ec2:	183b      	adds	r3, r7, r0
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	18d3      	adds	r3, r2, r3
 8013eca:	193a      	adds	r2, r7, r4
 8013ecc:	8812      	ldrh	r2, [r2, #0]
 8013ece:	2180      	movs	r1, #128	@ 0x80
 8013ed0:	430a      	orrs	r2, r1
 8013ed2:	b292      	uxth	r2, r2
 8013ed4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013ed6:	183b      	adds	r3, r7, r0
 8013ed8:	781a      	ldrb	r2, [r3, #0]
 8013eda:	0013      	movs	r3, r2
 8013edc:	009b      	lsls	r3, r3, #2
 8013ede:	189b      	adds	r3, r3, r2
 8013ee0:	00db      	lsls	r3, r3, #3
 8013ee2:	3369      	adds	r3, #105	@ 0x69
 8013ee4:	33ff      	adds	r3, #255	@ 0xff
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	18d3      	adds	r3, r2, r3
 8013eea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eee:	7b1b      	ldrb	r3, [r3, #12]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d125      	bne.n	8013f40 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	2250      	movs	r2, #80	@ 0x50
 8013efa:	5a9b      	ldrh	r3, [r3, r2]
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	001a      	movs	r2, r3
 8013f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	18d2      	adds	r2, r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	18d3      	adds	r3, r2, r3
 8013f0e:	4abc      	ldr	r2, [pc, #752]	@ (8014200 <PCD_EP_ISR_Handler+0x6d8>)
 8013f10:	4694      	mov	ip, r2
 8013f12:	4463      	add	r3, ip
 8013f14:	881a      	ldrh	r2, [r3, #0]
 8013f16:	2450      	movs	r4, #80	@ 0x50
 8013f18:	193b      	adds	r3, r7, r4
 8013f1a:	0592      	lsls	r2, r2, #22
 8013f1c:	0d92      	lsrs	r2, r2, #22
 8013f1e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013f20:	193b      	adds	r3, r7, r4
 8013f22:	881b      	ldrh	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d100      	bne.n	8013f2a <PCD_EP_ISR_Handler+0x402>
 8013f28:	e08d      	b.n	8014046 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6818      	ldr	r0, [r3, #0]
 8013f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f30:	6959      	ldr	r1, [r3, #20]
 8013f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f34:	88da      	ldrh	r2, [r3, #6]
 8013f36:	193b      	adds	r3, r7, r4
 8013f38:	881b      	ldrh	r3, [r3, #0]
 8013f3a:	f007 f8d6 	bl	801b0ea <USB_ReadPMA>
 8013f3e:	e082      	b.n	8014046 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f42:	78db      	ldrb	r3, [r3, #3]
 8013f44:	2b02      	cmp	r3, #2
 8013f46:	d10c      	bne.n	8013f62 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013f48:	2350      	movs	r3, #80	@ 0x50
 8013f4a:	18fc      	adds	r4, r7, r3
 8013f4c:	234a      	movs	r3, #74	@ 0x4a
 8013f4e:	18fb      	adds	r3, r7, r3
 8013f50:	881a      	ldrh	r2, [r3, #0]
 8013f52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	0018      	movs	r0, r3
 8013f58:	f000 f9ec 	bl	8014334 <HAL_PCD_EP_DB_Receive>
 8013f5c:	0003      	movs	r3, r0
 8013f5e:	8023      	strh	r3, [r4, #0]
 8013f60:	e071      	b.n	8014046 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	001a      	movs	r2, r3
 8013f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	18d3      	adds	r3, r2, r3
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	2052      	movs	r0, #82	@ 0x52
 8013f76:	183b      	adds	r3, r7, r0
 8013f78:	49a2      	ldr	r1, [pc, #648]	@ (8014204 <PCD_EP_ISR_Handler+0x6dc>)
 8013f7a:	400a      	ands	r2, r1
 8013f7c:	801a      	strh	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	001a      	movs	r2, r3
 8013f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	18d3      	adds	r3, r2, r3
 8013f8c:	183a      	adds	r2, r7, r0
 8013f8e:	8812      	ldrh	r2, [r2, #0]
 8013f90:	499d      	ldr	r1, [pc, #628]	@ (8014208 <PCD_EP_ISR_Handler+0x6e0>)
 8013f92:	430a      	orrs	r2, r1
 8013f94:	b292      	uxth	r2, r2
 8013f96:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	001a      	movs	r2, r3
 8013f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	18d3      	adds	r3, r2, r3
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	001a      	movs	r2, r3
 8013fac:	2380      	movs	r3, #128	@ 0x80
 8013fae:	01db      	lsls	r3, r3, #7
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	d024      	beq.n	8013ffe <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2250      	movs	r2, #80	@ 0x50
 8013fba:	5a9b      	ldrh	r3, [r3, r2]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	001a      	movs	r2, r3
 8013fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	00db      	lsls	r3, r3, #3
 8013fc6:	18d2      	adds	r2, r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	18d3      	adds	r3, r2, r3
 8013fce:	4a8f      	ldr	r2, [pc, #572]	@ (801420c <PCD_EP_ISR_Handler+0x6e4>)
 8013fd0:	4694      	mov	ip, r2
 8013fd2:	4463      	add	r3, ip
 8013fd4:	881a      	ldrh	r2, [r3, #0]
 8013fd6:	2450      	movs	r4, #80	@ 0x50
 8013fd8:	193b      	adds	r3, r7, r4
 8013fda:	0592      	lsls	r2, r2, #22
 8013fdc:	0d92      	lsrs	r2, r2, #22
 8013fde:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013fe0:	193b      	adds	r3, r7, r4
 8013fe2:	881b      	ldrh	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d02e      	beq.n	8014046 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6818      	ldr	r0, [r3, #0]
 8013fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fee:	6959      	ldr	r1, [r3, #20]
 8013ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ff2:	891a      	ldrh	r2, [r3, #8]
 8013ff4:	193b      	adds	r3, r7, r4
 8013ff6:	881b      	ldrh	r3, [r3, #0]
 8013ff8:	f007 f877 	bl	801b0ea <USB_ReadPMA>
 8013ffc:	e023      	b.n	8014046 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2250      	movs	r2, #80	@ 0x50
 8014004:	5a9b      	ldrh	r3, [r3, r2]
 8014006:	b29b      	uxth	r3, r3
 8014008:	001a      	movs	r2, r3
 801400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	00db      	lsls	r3, r3, #3
 8014010:	18d2      	adds	r2, r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	18d3      	adds	r3, r2, r3
 8014018:	4a79      	ldr	r2, [pc, #484]	@ (8014200 <PCD_EP_ISR_Handler+0x6d8>)
 801401a:	4694      	mov	ip, r2
 801401c:	4463      	add	r3, ip
 801401e:	881a      	ldrh	r2, [r3, #0]
 8014020:	2450      	movs	r4, #80	@ 0x50
 8014022:	193b      	adds	r3, r7, r4
 8014024:	0592      	lsls	r2, r2, #22
 8014026:	0d92      	lsrs	r2, r2, #22
 8014028:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801402a:	193b      	adds	r3, r7, r4
 801402c:	881b      	ldrh	r3, [r3, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d009      	beq.n	8014046 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6818      	ldr	r0, [r3, #0]
 8014036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014038:	6959      	ldr	r1, [r3, #20]
 801403a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801403c:	895a      	ldrh	r2, [r3, #10]
 801403e:	193b      	adds	r3, r7, r4
 8014040:	881b      	ldrh	r3, [r3, #0]
 8014042:	f007 f852 	bl	801b0ea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8014046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014048:	69da      	ldr	r2, [r3, #28]
 801404a:	2150      	movs	r1, #80	@ 0x50
 801404c:	187b      	adds	r3, r7, r1
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	18d2      	adds	r2, r2, r3
 8014052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014054:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8014056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014058:	695a      	ldr	r2, [r3, #20]
 801405a:	187b      	adds	r3, r7, r1
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	18d2      	adds	r2, r2, r3
 8014060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014062:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8014064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014066:	699b      	ldr	r3, [r3, #24]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d005      	beq.n	8014078 <PCD_EP_ISR_Handler+0x550>
 801406c:	187b      	adds	r3, r7, r1
 801406e:	881a      	ldrh	r2, [r3, #0]
 8014070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014072:	691b      	ldr	r3, [r3, #16]
 8014074:	429a      	cmp	r2, r3
 8014076:	d207      	bcs.n	8014088 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801407a:	781a      	ldrb	r2, [r3, #0]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	0011      	movs	r1, r2
 8014080:	0018      	movs	r0, r3
 8014082:	f009 f84c 	bl	801d11e <HAL_PCD_DataOutStageCallback>
 8014086:	e006      	b.n	8014096 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801408e:	0011      	movs	r1, r2
 8014090:	0018      	movs	r0, r3
 8014092:	f005 fd6f 	bl	8019b74 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014096:	244a      	movs	r4, #74	@ 0x4a
 8014098:	193b      	adds	r3, r7, r4
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	2280      	movs	r2, #128	@ 0x80
 801409e:	4013      	ands	r3, r2
 80140a0:	d100      	bne.n	80140a4 <PCD_EP_ISR_Handler+0x57c>
 80140a2:	e133      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80140a4:	204d      	movs	r0, #77	@ 0x4d
 80140a6:	183b      	adds	r3, r7, r0
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	1c5a      	adds	r2, r3, #1
 80140ac:	0013      	movs	r3, r2
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	189b      	adds	r3, r3, r2
 80140b2:	00db      	lsls	r3, r3, #3
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	18d3      	adds	r3, r2, r3
 80140b8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	001a      	movs	r2, r3
 80140c0:	183b      	adds	r3, r7, r0
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	009b      	lsls	r3, r3, #2
 80140c6:	18d3      	adds	r3, r2, r3
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	2542      	movs	r5, #66	@ 0x42
 80140ce:	197b      	adds	r3, r7, r5
 80140d0:	494f      	ldr	r1, [pc, #316]	@ (8014210 <PCD_EP_ISR_Handler+0x6e8>)
 80140d2:	400a      	ands	r2, r1
 80140d4:	801a      	strh	r2, [r3, #0]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	001a      	movs	r2, r3
 80140dc:	183b      	adds	r3, r7, r0
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	18d3      	adds	r3, r2, r3
 80140e4:	197a      	adds	r2, r7, r5
 80140e6:	8812      	ldrh	r2, [r2, #0]
 80140e8:	494a      	ldr	r1, [pc, #296]	@ (8014214 <PCD_EP_ISR_Handler+0x6ec>)
 80140ea:	430a      	orrs	r2, r1
 80140ec:	b292      	uxth	r2, r2
 80140ee:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80140f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140f2:	78db      	ldrb	r3, [r3, #3]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d000      	beq.n	80140fa <PCD_EP_ISR_Handler+0x5d2>
 80140f8:	e0af      	b.n	801425a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80140fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140fc:	2200      	movs	r2, #0
 80140fe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014102:	7b1b      	ldrb	r3, [r3, #12]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d100      	bne.n	801410a <PCD_EP_ISR_Handler+0x5e2>
 8014108:	e09f      	b.n	801424a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801410a:	193b      	adds	r3, r7, r4
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	2240      	movs	r2, #64	@ 0x40
 8014110:	4013      	ands	r3, r2
 8014112:	d046      	beq.n	80141a2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014116:	785b      	ldrb	r3, [r3, #1]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d125      	bne.n	8014168 <PCD_EP_ISR_Handler+0x640>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	627b      	str	r3, [r7, #36]	@ 0x24
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2250      	movs	r2, #80	@ 0x50
 8014128:	5a9b      	ldrh	r3, [r3, r2]
 801412a:	b29b      	uxth	r3, r3
 801412c:	001a      	movs	r2, r3
 801412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014130:	189b      	adds	r3, r3, r2
 8014132:	627b      	str	r3, [r7, #36]	@ 0x24
 8014134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	00da      	lsls	r2, r3, #3
 801413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801413c:	18d3      	adds	r3, r2, r3
 801413e:	4a33      	ldr	r2, [pc, #204]	@ (801420c <PCD_EP_ISR_Handler+0x6e4>)
 8014140:	4694      	mov	ip, r2
 8014142:	4463      	add	r3, ip
 8014144:	623b      	str	r3, [r7, #32]
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	b29b      	uxth	r3, r3
 801414c:	059b      	lsls	r3, r3, #22
 801414e:	0d9b      	lsrs	r3, r3, #22
 8014150:	b29a      	uxth	r2, r3
 8014152:	6a3b      	ldr	r3, [r7, #32]
 8014154:	801a      	strh	r2, [r3, #0]
 8014156:	6a3b      	ldr	r3, [r7, #32]
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	b29b      	uxth	r3, r3
 801415c:	4a2d      	ldr	r2, [pc, #180]	@ (8014214 <PCD_EP_ISR_Handler+0x6ec>)
 801415e:	4313      	orrs	r3, r2
 8014160:	b29a      	uxth	r2, r3
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	801a      	strh	r2, [r3, #0]
 8014166:	e070      	b.n	801424a <PCD_EP_ISR_Handler+0x722>
 8014168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801416a:	785b      	ldrb	r3, [r3, #1]
 801416c:	2b01      	cmp	r3, #1
 801416e:	d16c      	bne.n	801424a <PCD_EP_ISR_Handler+0x722>
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2250      	movs	r2, #80	@ 0x50
 801417c:	5a9b      	ldrh	r3, [r3, r2]
 801417e:	b29b      	uxth	r3, r3
 8014180:	001a      	movs	r2, r3
 8014182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014184:	189b      	adds	r3, r3, r2
 8014186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	00da      	lsls	r2, r3, #3
 801418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014190:	18d3      	adds	r3, r2, r3
 8014192:	4a1e      	ldr	r2, [pc, #120]	@ (801420c <PCD_EP_ISR_Handler+0x6e4>)
 8014194:	4694      	mov	ip, r2
 8014196:	4463      	add	r3, ip
 8014198:	62bb      	str	r3, [r7, #40]	@ 0x28
 801419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801419c:	2200      	movs	r2, #0
 801419e:	801a      	strh	r2, [r3, #0]
 80141a0:	e053      	b.n	801424a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80141a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141aa:	785b      	ldrb	r3, [r3, #1]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d133      	bne.n	8014218 <PCD_EP_ISR_Handler+0x6f0>
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2250      	movs	r2, #80	@ 0x50
 80141bc:	5a9b      	ldrh	r3, [r3, r2]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	001a      	movs	r2, r3
 80141c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141c4:	189b      	adds	r3, r3, r2
 80141c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80141c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	00da      	lsls	r2, r3, #3
 80141ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141d0:	18d3      	adds	r3, r2, r3
 80141d2:	4a0b      	ldr	r2, [pc, #44]	@ (8014200 <PCD_EP_ISR_Handler+0x6d8>)
 80141d4:	4694      	mov	ip, r2
 80141d6:	4463      	add	r3, ip
 80141d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80141da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141dc:	881b      	ldrh	r3, [r3, #0]
 80141de:	b29b      	uxth	r3, r3
 80141e0:	059b      	lsls	r3, r3, #22
 80141e2:	0d9b      	lsrs	r3, r3, #22
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141e8:	801a      	strh	r2, [r3, #0]
 80141ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ec:	881b      	ldrh	r3, [r3, #0]
 80141ee:	b29b      	uxth	r3, r3
 80141f0:	4a08      	ldr	r2, [pc, #32]	@ (8014214 <PCD_EP_ISR_Handler+0x6ec>)
 80141f2:	4313      	orrs	r3, r2
 80141f4:	b29a      	uxth	r2, r3
 80141f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f8:	801a      	strh	r2, [r3, #0]
 80141fa:	e026      	b.n	801424a <PCD_EP_ISR_Handler+0x722>
 80141fc:	00000f8f 	.word	0x00000f8f
 8014200:	00000406 	.word	0x00000406
 8014204:	ffff8f8f 	.word	0xffff8f8f
 8014208:	ffff80c0 	.word	0xffff80c0
 801420c:	00000402 	.word	0x00000402
 8014210:	ffff8f0f 	.word	0xffff8f0f
 8014214:	ffff8000 	.word	0xffff8000
 8014218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801421a:	785b      	ldrb	r3, [r3, #1]
 801421c:	2b01      	cmp	r3, #1
 801421e:	d114      	bne.n	801424a <PCD_EP_ISR_Handler+0x722>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2250      	movs	r2, #80	@ 0x50
 8014226:	5a9b      	ldrh	r3, [r3, r2]
 8014228:	b29b      	uxth	r3, r3
 801422a:	001a      	movs	r2, r3
 801422c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801422e:	189b      	adds	r3, r3, r2
 8014230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	00da      	lsls	r2, r3, #3
 8014238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801423a:	18d3      	adds	r3, r2, r3
 801423c:	4a3b      	ldr	r2, [pc, #236]	@ (801432c <PCD_EP_ISR_Handler+0x804>)
 801423e:	4694      	mov	ip, r2
 8014240:	4463      	add	r3, ip
 8014242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014246:	2200      	movs	r2, #0
 8014248:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801424c:	781a      	ldrb	r2, [r3, #0]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	0011      	movs	r1, r2
 8014252:	0018      	movs	r0, r3
 8014254:	f008 ff84 	bl	801d160 <HAL_PCD_DataInStageCallback>
 8014258:	e058      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801425a:	234a      	movs	r3, #74	@ 0x4a
 801425c:	18fb      	adds	r3, r7, r3
 801425e:	881a      	ldrh	r2, [r3, #0]
 8014260:	2380      	movs	r3, #128	@ 0x80
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	4013      	ands	r3, r2
 8014266:	d149      	bne.n	80142fc <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2250      	movs	r2, #80	@ 0x50
 801426e:	5a9b      	ldrh	r3, [r3, r2]
 8014270:	b29b      	uxth	r3, r3
 8014272:	001a      	movs	r2, r3
 8014274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	18d2      	adds	r2, r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	18d3      	adds	r3, r2, r3
 8014282:	4a2b      	ldr	r2, [pc, #172]	@ (8014330 <PCD_EP_ISR_Handler+0x808>)
 8014284:	4694      	mov	ip, r2
 8014286:	4463      	add	r3, ip
 8014288:	881a      	ldrh	r2, [r3, #0]
 801428a:	2140      	movs	r1, #64	@ 0x40
 801428c:	187b      	adds	r3, r7, r1
 801428e:	0592      	lsls	r2, r2, #22
 8014290:	0d92      	lsrs	r2, r2, #22
 8014292:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014296:	699a      	ldr	r2, [r3, #24]
 8014298:	187b      	adds	r3, r7, r1
 801429a:	881b      	ldrh	r3, [r3, #0]
 801429c:	429a      	cmp	r2, r3
 801429e:	d907      	bls.n	80142b0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80142a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142a2:	699a      	ldr	r2, [r3, #24]
 80142a4:	187b      	adds	r3, r7, r1
 80142a6:	881b      	ldrh	r3, [r3, #0]
 80142a8:	1ad2      	subs	r2, r2, r3
 80142aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142ac:	619a      	str	r2, [r3, #24]
 80142ae:	e002      	b.n	80142b6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80142b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142b2:	2200      	movs	r2, #0
 80142b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80142b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142b8:	699b      	ldr	r3, [r3, #24]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d107      	bne.n	80142ce <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80142be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142c0:	781a      	ldrb	r2, [r3, #0]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	0011      	movs	r1, r2
 80142c6:	0018      	movs	r0, r3
 80142c8:	f008 ff4a 	bl	801d160 <HAL_PCD_DataInStageCallback>
 80142cc:	e01e      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80142ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142d0:	695a      	ldr	r2, [r3, #20]
 80142d2:	2140      	movs	r1, #64	@ 0x40
 80142d4:	187b      	adds	r3, r7, r1
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	18d2      	adds	r2, r2, r3
 80142da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142dc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80142de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142e0:	69da      	ldr	r2, [r3, #28]
 80142e2:	187b      	adds	r3, r7, r1
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	18d2      	adds	r2, r2, r3
 80142e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142ea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80142f2:	0011      	movs	r1, r2
 80142f4:	0018      	movs	r0, r3
 80142f6:	f005 fc3d 	bl	8019b74 <USB_EPStartXfer>
 80142fa:	e007      	b.n	801430c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80142fc:	234a      	movs	r3, #74	@ 0x4a
 80142fe:	18fb      	adds	r3, r7, r3
 8014300:	881a      	ldrh	r2, [r3, #0]
 8014302:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	0018      	movs	r0, r3
 8014308:	f000 f930 	bl	801456c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2244      	movs	r2, #68	@ 0x44
 8014312:	5a9b      	ldrh	r3, [r3, r2]
 8014314:	b29b      	uxth	r3, r3
 8014316:	b21b      	sxth	r3, r3
 8014318:	2b00      	cmp	r3, #0
 801431a:	da01      	bge.n	8014320 <PCD_EP_ISR_Handler+0x7f8>
 801431c:	f7ff fc0a 	bl	8013b34 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014320:	2300      	movs	r3, #0
}
 8014322:	0018      	movs	r0, r3
 8014324:	46bd      	mov	sp, r7
 8014326:	b016      	add	sp, #88	@ 0x58
 8014328:	bdb0      	pop	{r4, r5, r7, pc}
 801432a:	46c0      	nop			@ (mov r8, r8)
 801432c:	00000406 	.word	0x00000406
 8014330:	00000402 	.word	0x00000402

08014334 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014334:	b590      	push	{r4, r7, lr}
 8014336:	b089      	sub	sp, #36	@ 0x24
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	1dbb      	adds	r3, r7, #6
 8014340:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014342:	1dbb      	adds	r3, r7, #6
 8014344:	881a      	ldrh	r2, [r3, #0]
 8014346:	2380      	movs	r3, #128	@ 0x80
 8014348:	01db      	lsls	r3, r3, #7
 801434a:	4013      	ands	r3, r2
 801434c:	d100      	bne.n	8014350 <HAL_PCD_EP_DB_Receive+0x1c>
 801434e:	e07d      	b.n	801444c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2250      	movs	r2, #80	@ 0x50
 8014356:	5a9b      	ldrh	r3, [r3, r2]
 8014358:	b29b      	uxth	r3, r3
 801435a:	001a      	movs	r2, r3
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	00db      	lsls	r3, r3, #3
 8014362:	18d2      	adds	r2, r2, r3
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	18d3      	adds	r3, r2, r3
 801436a:	4a7a      	ldr	r2, [pc, #488]	@ (8014554 <HAL_PCD_EP_DB_Receive+0x220>)
 801436c:	4694      	mov	ip, r2
 801436e:	4463      	add	r3, ip
 8014370:	881a      	ldrh	r2, [r3, #0]
 8014372:	211a      	movs	r1, #26
 8014374:	187b      	adds	r3, r7, r1
 8014376:	0592      	lsls	r2, r2, #22
 8014378:	0d92      	lsrs	r2, r2, #22
 801437a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	699a      	ldr	r2, [r3, #24]
 8014380:	187b      	adds	r3, r7, r1
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	429a      	cmp	r2, r3
 8014386:	d307      	bcc.n	8014398 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	699a      	ldr	r2, [r3, #24]
 801438c:	187b      	adds	r3, r7, r1
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	1ad2      	subs	r2, r2, r3
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	619a      	str	r2, [r3, #24]
 8014396:	e002      	b.n	801439e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	2200      	movs	r2, #0
 801439c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	699b      	ldr	r3, [r3, #24]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d121      	bne.n	80143ea <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	001a      	movs	r2, r3
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	18d3      	adds	r3, r2, r3
 80143b4:	881b      	ldrh	r3, [r3, #0]
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	2018      	movs	r0, #24
 80143ba:	183b      	adds	r3, r7, r0
 80143bc:	4966      	ldr	r1, [pc, #408]	@ (8014558 <HAL_PCD_EP_DB_Receive+0x224>)
 80143be:	400a      	ands	r2, r1
 80143c0:	801a      	strh	r2, [r3, #0]
 80143c2:	183b      	adds	r3, r7, r0
 80143c4:	183a      	adds	r2, r7, r0
 80143c6:	8812      	ldrh	r2, [r2, #0]
 80143c8:	2180      	movs	r1, #128	@ 0x80
 80143ca:	0189      	lsls	r1, r1, #6
 80143cc:	404a      	eors	r2, r1
 80143ce:	801a      	strh	r2, [r3, #0]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	001a      	movs	r2, r3
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	009b      	lsls	r3, r3, #2
 80143dc:	18d3      	adds	r3, r2, r3
 80143de:	183a      	adds	r2, r7, r0
 80143e0:	8812      	ldrh	r2, [r2, #0]
 80143e2:	495e      	ldr	r1, [pc, #376]	@ (801455c <HAL_PCD_EP_DB_Receive+0x228>)
 80143e4:	430a      	orrs	r2, r1
 80143e6:	b292      	uxth	r2, r2
 80143e8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80143ea:	1dbb      	adds	r3, r7, #6
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	2240      	movs	r2, #64	@ 0x40
 80143f0:	4013      	ands	r3, r2
 80143f2:	d01a      	beq.n	801442a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	001a      	movs	r2, r3
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	18d3      	adds	r3, r2, r3
 8014402:	881b      	ldrh	r3, [r3, #0]
 8014404:	b29a      	uxth	r2, r3
 8014406:	2016      	movs	r0, #22
 8014408:	183b      	adds	r3, r7, r0
 801440a:	4955      	ldr	r1, [pc, #340]	@ (8014560 <HAL_PCD_EP_DB_Receive+0x22c>)
 801440c:	400a      	ands	r2, r1
 801440e:	801a      	strh	r2, [r3, #0]
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	001a      	movs	r2, r3
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	009b      	lsls	r3, r3, #2
 801441c:	18d3      	adds	r3, r2, r3
 801441e:	183a      	adds	r2, r7, r0
 8014420:	8812      	ldrh	r2, [r2, #0]
 8014422:	4950      	ldr	r1, [pc, #320]	@ (8014564 <HAL_PCD_EP_DB_Receive+0x230>)
 8014424:	430a      	orrs	r2, r1
 8014426:	b292      	uxth	r2, r2
 8014428:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801442a:	241a      	movs	r4, #26
 801442c:	193b      	adds	r3, r7, r4
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d100      	bne.n	8014436 <HAL_PCD_EP_DB_Receive+0x102>
 8014434:	e086      	b.n	8014544 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	6818      	ldr	r0, [r3, #0]
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	6959      	ldr	r1, [r3, #20]
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	891a      	ldrh	r2, [r3, #8]
 8014442:	193b      	adds	r3, r7, r4
 8014444:	881b      	ldrh	r3, [r3, #0]
 8014446:	f006 fe50 	bl	801b0ea <USB_ReadPMA>
 801444a:	e07b      	b.n	8014544 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2250      	movs	r2, #80	@ 0x50
 8014452:	5a9b      	ldrh	r3, [r3, r2]
 8014454:	b29b      	uxth	r3, r3
 8014456:	001a      	movs	r2, r3
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	18d2      	adds	r2, r2, r3
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	18d3      	adds	r3, r2, r3
 8014466:	4a40      	ldr	r2, [pc, #256]	@ (8014568 <HAL_PCD_EP_DB_Receive+0x234>)
 8014468:	4694      	mov	ip, r2
 801446a:	4463      	add	r3, ip
 801446c:	881a      	ldrh	r2, [r3, #0]
 801446e:	211a      	movs	r1, #26
 8014470:	187b      	adds	r3, r7, r1
 8014472:	0592      	lsls	r2, r2, #22
 8014474:	0d92      	lsrs	r2, r2, #22
 8014476:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	699a      	ldr	r2, [r3, #24]
 801447c:	187b      	adds	r3, r7, r1
 801447e:	881b      	ldrh	r3, [r3, #0]
 8014480:	429a      	cmp	r2, r3
 8014482:	d307      	bcc.n	8014494 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	699a      	ldr	r2, [r3, #24]
 8014488:	187b      	adds	r3, r7, r1
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	1ad2      	subs	r2, r2, r3
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	619a      	str	r2, [r3, #24]
 8014492:	e002      	b.n	801449a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2200      	movs	r2, #0
 8014498:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	699b      	ldr	r3, [r3, #24]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d121      	bne.n	80144e6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	001a      	movs	r2, r3
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	009b      	lsls	r3, r3, #2
 80144ae:	18d3      	adds	r3, r2, r3
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	201e      	movs	r0, #30
 80144b6:	183b      	adds	r3, r7, r0
 80144b8:	4927      	ldr	r1, [pc, #156]	@ (8014558 <HAL_PCD_EP_DB_Receive+0x224>)
 80144ba:	400a      	ands	r2, r1
 80144bc:	801a      	strh	r2, [r3, #0]
 80144be:	183b      	adds	r3, r7, r0
 80144c0:	183a      	adds	r2, r7, r0
 80144c2:	8812      	ldrh	r2, [r2, #0]
 80144c4:	2180      	movs	r1, #128	@ 0x80
 80144c6:	0189      	lsls	r1, r1, #6
 80144c8:	404a      	eors	r2, r1
 80144ca:	801a      	strh	r2, [r3, #0]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	001a      	movs	r2, r3
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	18d3      	adds	r3, r2, r3
 80144da:	183a      	adds	r2, r7, r0
 80144dc:	8812      	ldrh	r2, [r2, #0]
 80144de:	491f      	ldr	r1, [pc, #124]	@ (801455c <HAL_PCD_EP_DB_Receive+0x228>)
 80144e0:	430a      	orrs	r2, r1
 80144e2:	b292      	uxth	r2, r2
 80144e4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80144e6:	1dbb      	adds	r3, r7, #6
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	2240      	movs	r2, #64	@ 0x40
 80144ec:	4013      	ands	r3, r2
 80144ee:	d11a      	bne.n	8014526 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	001a      	movs	r2, r3
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	18d3      	adds	r3, r2, r3
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	b29a      	uxth	r2, r3
 8014502:	201c      	movs	r0, #28
 8014504:	183b      	adds	r3, r7, r0
 8014506:	4916      	ldr	r1, [pc, #88]	@ (8014560 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014508:	400a      	ands	r2, r1
 801450a:	801a      	strh	r2, [r3, #0]
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	001a      	movs	r2, r3
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	18d3      	adds	r3, r2, r3
 801451a:	183a      	adds	r2, r7, r0
 801451c:	8812      	ldrh	r2, [r2, #0]
 801451e:	4911      	ldr	r1, [pc, #68]	@ (8014564 <HAL_PCD_EP_DB_Receive+0x230>)
 8014520:	430a      	orrs	r2, r1
 8014522:	b292      	uxth	r2, r2
 8014524:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014526:	241a      	movs	r4, #26
 8014528:	193b      	adds	r3, r7, r4
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d009      	beq.n	8014544 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	6818      	ldr	r0, [r3, #0]
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	6959      	ldr	r1, [r3, #20]
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	895a      	ldrh	r2, [r3, #10]
 801453c:	193b      	adds	r3, r7, r4
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	f006 fdd3 	bl	801b0ea <USB_ReadPMA>
    }
  }

  return count;
 8014544:	231a      	movs	r3, #26
 8014546:	18fb      	adds	r3, r7, r3
 8014548:	881b      	ldrh	r3, [r3, #0]
}
 801454a:	0018      	movs	r0, r3
 801454c:	46bd      	mov	sp, r7
 801454e:	b009      	add	sp, #36	@ 0x24
 8014550:	bd90      	pop	{r4, r7, pc}
 8014552:	46c0      	nop			@ (mov r8, r8)
 8014554:	00000402 	.word	0x00000402
 8014558:	ffffbf8f 	.word	0xffffbf8f
 801455c:	ffff8080 	.word	0xffff8080
 8014560:	ffff8f8f 	.word	0xffff8f8f
 8014564:	ffff80c0 	.word	0xffff80c0
 8014568:	00000406 	.word	0x00000406

0801456c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b0a4      	sub	sp, #144	@ 0x90
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	1dbb      	adds	r3, r7, #6
 8014578:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801457a:	1dbb      	adds	r3, r7, #6
 801457c:	881b      	ldrh	r3, [r3, #0]
 801457e:	2240      	movs	r2, #64	@ 0x40
 8014580:	4013      	ands	r3, r2
 8014582:	d100      	bne.n	8014586 <HAL_PCD_EP_DB_Transmit+0x1a>
 8014584:	e1e4      	b.n	8014950 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	2250      	movs	r2, #80	@ 0x50
 801458c:	5a9b      	ldrh	r3, [r3, r2]
 801458e:	b29b      	uxth	r3, r3
 8014590:	001a      	movs	r2, r3
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	00db      	lsls	r3, r3, #3
 8014598:	18d2      	adds	r2, r2, r3
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	18d3      	adds	r3, r2, r3
 80145a0:	4ad0      	ldr	r2, [pc, #832]	@ (80148e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80145a2:	4694      	mov	ip, r2
 80145a4:	4463      	add	r3, ip
 80145a6:	881a      	ldrh	r2, [r3, #0]
 80145a8:	2186      	movs	r1, #134	@ 0x86
 80145aa:	187b      	adds	r3, r7, r1
 80145ac:	0592      	lsls	r2, r2, #22
 80145ae:	0d92      	lsrs	r2, r2, #22
 80145b0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	699a      	ldr	r2, [r3, #24]
 80145b6:	187b      	adds	r3, r7, r1
 80145b8:	881b      	ldrh	r3, [r3, #0]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d907      	bls.n	80145ce <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	699a      	ldr	r2, [r3, #24]
 80145c2:	187b      	adds	r3, r7, r1
 80145c4:	881b      	ldrh	r3, [r3, #0]
 80145c6:	1ad2      	subs	r2, r2, r3
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	619a      	str	r2, [r3, #24]
 80145cc:	e002      	b.n	80145d4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	2200      	movs	r2, #0
 80145d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	699b      	ldr	r3, [r3, #24]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d000      	beq.n	80145de <HAL_PCD_EP_DB_Transmit+0x72>
 80145dc:	e0b5      	b.n	801474a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	785b      	ldrb	r3, [r3, #1]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d125      	bne.n	8014632 <HAL_PCD_EP_DB_Transmit+0xc6>
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2250      	movs	r2, #80	@ 0x50
 80145f2:	5a9b      	ldrh	r3, [r3, r2]
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	001a      	movs	r2, r3
 80145f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145fa:	189b      	adds	r3, r3, r2
 80145fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	00da      	lsls	r2, r3, #3
 8014604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014606:	18d3      	adds	r3, r2, r3
 8014608:	4ab6      	ldr	r2, [pc, #728]	@ (80148e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801460a:	4694      	mov	ip, r2
 801460c:	4463      	add	r3, ip
 801460e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	b29b      	uxth	r3, r3
 8014616:	059b      	lsls	r3, r3, #22
 8014618:	0d9b      	lsrs	r3, r3, #22
 801461a:	b29a      	uxth	r2, r3
 801461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801461e:	801a      	strh	r2, [r3, #0]
 8014620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014622:	881b      	ldrh	r3, [r3, #0]
 8014624:	b29b      	uxth	r3, r3
 8014626:	4ab0      	ldr	r2, [pc, #704]	@ (80148e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014628:	4313      	orrs	r3, r2
 801462a:	b29a      	uxth	r2, r3
 801462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801462e:	801a      	strh	r2, [r3, #0]
 8014630:	e01b      	b.n	801466a <HAL_PCD_EP_DB_Transmit+0xfe>
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	785b      	ldrb	r3, [r3, #1]
 8014636:	2b01      	cmp	r3, #1
 8014638:	d117      	bne.n	801466a <HAL_PCD_EP_DB_Transmit+0xfe>
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2250      	movs	r2, #80	@ 0x50
 8014646:	5a9b      	ldrh	r3, [r3, r2]
 8014648:	b29b      	uxth	r3, r3
 801464a:	001a      	movs	r2, r3
 801464c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801464e:	189b      	adds	r3, r3, r2
 8014650:	637b      	str	r3, [r7, #52]	@ 0x34
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	00da      	lsls	r2, r3, #3
 8014658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801465a:	18d3      	adds	r3, r2, r3
 801465c:	4aa1      	ldr	r2, [pc, #644]	@ (80148e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801465e:	4694      	mov	ip, r2
 8014660:	4463      	add	r3, ip
 8014662:	633b      	str	r3, [r7, #48]	@ 0x30
 8014664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014666:	2200      	movs	r2, #0
 8014668:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	785b      	ldrb	r3, [r3, #1]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d125      	bne.n	80146c4 <HAL_PCD_EP_DB_Transmit+0x158>
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	61fb      	str	r3, [r7, #28]
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2250      	movs	r2, #80	@ 0x50
 8014684:	5a9b      	ldrh	r3, [r3, r2]
 8014686:	b29b      	uxth	r3, r3
 8014688:	001a      	movs	r2, r3
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	189b      	adds	r3, r3, r2
 801468e:	61fb      	str	r3, [r7, #28]
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	00da      	lsls	r2, r3, #3
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	18d3      	adds	r3, r2, r3
 801469a:	4a94      	ldr	r2, [pc, #592]	@ (80148ec <HAL_PCD_EP_DB_Transmit+0x380>)
 801469c:	4694      	mov	ip, r2
 801469e:	4463      	add	r3, ip
 80146a0:	61bb      	str	r3, [r7, #24]
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	059b      	lsls	r3, r3, #22
 80146aa:	0d9b      	lsrs	r3, r3, #22
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	801a      	strh	r2, [r3, #0]
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	4a8b      	ldr	r2, [pc, #556]	@ (80148e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80146ba:	4313      	orrs	r3, r2
 80146bc:	b29a      	uxth	r2, r3
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	801a      	strh	r2, [r3, #0]
 80146c2:	e018      	b.n	80146f6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	785b      	ldrb	r3, [r3, #1]
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d114      	bne.n	80146f6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2250      	movs	r2, #80	@ 0x50
 80146d2:	5a9b      	ldrh	r3, [r3, r2]
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	001a      	movs	r2, r3
 80146d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146da:	189b      	adds	r3, r3, r2
 80146dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	00da      	lsls	r2, r3, #3
 80146e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146e6:	18d3      	adds	r3, r2, r3
 80146e8:	4a80      	ldr	r2, [pc, #512]	@ (80148ec <HAL_PCD_EP_DB_Transmit+0x380>)
 80146ea:	4694      	mov	ip, r2
 80146ec:	4463      	add	r3, ip
 80146ee:	623b      	str	r3, [r7, #32]
 80146f0:	6a3b      	ldr	r3, [r7, #32]
 80146f2:	2200      	movs	r2, #0
 80146f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	781a      	ldrb	r2, [r3, #0]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	0011      	movs	r1, r2
 80146fe:	0018      	movs	r0, r3
 8014700:	f008 fd2e 	bl	801d160 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014704:	1dbb      	adds	r3, r7, #6
 8014706:	881a      	ldrh	r2, [r3, #0]
 8014708:	2380      	movs	r3, #128	@ 0x80
 801470a:	01db      	lsls	r3, r3, #7
 801470c:	4013      	ands	r3, r2
 801470e:	d100      	bne.n	8014712 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014710:	e309      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	001a      	movs	r2, r3
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	18d3      	adds	r3, r2, r3
 8014720:	881b      	ldrh	r3, [r3, #0]
 8014722:	b29a      	uxth	r2, r3
 8014724:	2016      	movs	r0, #22
 8014726:	183b      	adds	r3, r7, r0
 8014728:	4971      	ldr	r1, [pc, #452]	@ (80148f0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801472a:	400a      	ands	r2, r1
 801472c:	801a      	strh	r2, [r3, #0]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	001a      	movs	r2, r3
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	009b      	lsls	r3, r3, #2
 801473a:	18d3      	adds	r3, r2, r3
 801473c:	183a      	adds	r2, r7, r0
 801473e:	8812      	ldrh	r2, [r2, #0]
 8014740:	496c      	ldr	r1, [pc, #432]	@ (80148f4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014742:	430a      	orrs	r2, r1
 8014744:	b292      	uxth	r2, r2
 8014746:	801a      	strh	r2, [r3, #0]
 8014748:	e2ed      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801474a:	1dbb      	adds	r3, r7, #6
 801474c:	881a      	ldrh	r2, [r3, #0]
 801474e:	2380      	movs	r3, #128	@ 0x80
 8014750:	01db      	lsls	r3, r3, #7
 8014752:	4013      	ands	r3, r2
 8014754:	d01a      	beq.n	801478c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	001a      	movs	r2, r3
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	18d3      	adds	r3, r2, r3
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	b29a      	uxth	r2, r3
 8014768:	208a      	movs	r0, #138	@ 0x8a
 801476a:	183b      	adds	r3, r7, r0
 801476c:	4960      	ldr	r1, [pc, #384]	@ (80148f0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801476e:	400a      	ands	r2, r1
 8014770:	801a      	strh	r2, [r3, #0]
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	001a      	movs	r2, r3
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	009b      	lsls	r3, r3, #2
 801477e:	18d3      	adds	r3, r2, r3
 8014780:	183a      	adds	r2, r7, r0
 8014782:	8812      	ldrh	r2, [r2, #0]
 8014784:	495b      	ldr	r1, [pc, #364]	@ (80148f4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014786:	430a      	orrs	r2, r1
 8014788:	b292      	uxth	r2, r2
 801478a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	2224      	movs	r2, #36	@ 0x24
 8014790:	5c9b      	ldrb	r3, [r3, r2]
 8014792:	2b01      	cmp	r3, #1
 8014794:	d000      	beq.n	8014798 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014796:	e2c6      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	695a      	ldr	r2, [r3, #20]
 801479c:	2186      	movs	r1, #134	@ 0x86
 801479e:	187b      	adds	r3, r7, r1
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	18d2      	adds	r2, r2, r3
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	69da      	ldr	r2, [r3, #28]
 80147ac:	187b      	adds	r3, r7, r1
 80147ae:	881b      	ldrh	r3, [r3, #0]
 80147b0:	18d2      	adds	r2, r2, r3
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	6a1a      	ldr	r2, [r3, #32]
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	691b      	ldr	r3, [r3, #16]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d30c      	bcc.n	80147dc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	218c      	movs	r1, #140	@ 0x8c
 80147c8:	187a      	adds	r2, r7, r1
 80147ca:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	6a1a      	ldr	r2, [r3, #32]
 80147d0:	187b      	adds	r3, r7, r1
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	1ad2      	subs	r2, r2, r3
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	621a      	str	r2, [r3, #32]
 80147da:	e01a      	b.n	8014812 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	6a1b      	ldr	r3, [r3, #32]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d10a      	bne.n	80147fa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80147e4:	2386      	movs	r3, #134	@ 0x86
 80147e6:	18fb      	adds	r3, r7, r3
 80147e8:	881b      	ldrh	r3, [r3, #0]
 80147ea:	228c      	movs	r2, #140	@ 0x8c
 80147ec:	18ba      	adds	r2, r7, r2
 80147ee:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	2224      	movs	r2, #36	@ 0x24
 80147f4:	2100      	movs	r1, #0
 80147f6:	5499      	strb	r1, [r3, r2]
 80147f8:	e00b      	b.n	8014812 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	2224      	movs	r2, #36	@ 0x24
 80147fe:	2100      	movs	r1, #0
 8014800:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	6a1b      	ldr	r3, [r3, #32]
 8014806:	228c      	movs	r2, #140	@ 0x8c
 8014808:	18ba      	adds	r2, r7, r2
 801480a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2200      	movs	r2, #0
 8014810:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	785b      	ldrb	r3, [r3, #1]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d000      	beq.n	801481c <HAL_PCD_EP_DB_Transmit+0x2b0>
 801481a:	e06d      	b.n	80148f8 <HAL_PCD_EP_DB_Transmit+0x38c>
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2250      	movs	r2, #80	@ 0x50
 8014828:	5a9b      	ldrh	r3, [r3, r2]
 801482a:	b29b      	uxth	r3, r3
 801482c:	001a      	movs	r2, r3
 801482e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014830:	189b      	adds	r3, r3, r2
 8014832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	00da      	lsls	r2, r3, #3
 801483a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801483c:	18d3      	adds	r3, r2, r3
 801483e:	4a29      	ldr	r2, [pc, #164]	@ (80148e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014840:	4694      	mov	ip, r2
 8014842:	4463      	add	r3, ip
 8014844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	b29b      	uxth	r3, r3
 801484c:	059b      	lsls	r3, r3, #22
 801484e:	0d9b      	lsrs	r3, r3, #22
 8014850:	b29a      	uxth	r2, r3
 8014852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014854:	801a      	strh	r2, [r3, #0]
 8014856:	228c      	movs	r2, #140	@ 0x8c
 8014858:	18bb      	adds	r3, r7, r2
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2b3e      	cmp	r3, #62	@ 0x3e
 801485e:	d91a      	bls.n	8014896 <HAL_PCD_EP_DB_Transmit+0x32a>
 8014860:	18bb      	adds	r3, r7, r2
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	095b      	lsrs	r3, r3, #5
 8014866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014868:	18bb      	adds	r3, r7, r2
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	221f      	movs	r2, #31
 801486e:	4013      	ands	r3, r2
 8014870:	d102      	bne.n	8014878 <HAL_PCD_EP_DB_Transmit+0x30c>
 8014872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014874:	3b01      	subs	r3, #1
 8014876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801487a:	881b      	ldrh	r3, [r3, #0]
 801487c:	b29a      	uxth	r2, r3
 801487e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014880:	b29b      	uxth	r3, r3
 8014882:	029b      	lsls	r3, r3, #10
 8014884:	b29b      	uxth	r3, r3
 8014886:	4313      	orrs	r3, r2
 8014888:	b29b      	uxth	r3, r3
 801488a:	4a17      	ldr	r2, [pc, #92]	@ (80148e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801488c:	4313      	orrs	r3, r2
 801488e:	b29a      	uxth	r2, r3
 8014890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014892:	801a      	strh	r2, [r3, #0]
 8014894:	e04f      	b.n	8014936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014896:	238c      	movs	r3, #140	@ 0x8c
 8014898:	18fb      	adds	r3, r7, r3
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d108      	bne.n	80148b2 <HAL_PCD_EP_DB_Transmit+0x346>
 80148a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148a2:	881b      	ldrh	r3, [r3, #0]
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	4a10      	ldr	r2, [pc, #64]	@ (80148e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80148a8:	4313      	orrs	r3, r2
 80148aa:	b29a      	uxth	r2, r3
 80148ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148ae:	801a      	strh	r2, [r3, #0]
 80148b0:	e041      	b.n	8014936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80148b2:	228c      	movs	r2, #140	@ 0x8c
 80148b4:	18bb      	adds	r3, r7, r2
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	085b      	lsrs	r3, r3, #1
 80148ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80148bc:	18bb      	adds	r3, r7, r2
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2201      	movs	r2, #1
 80148c2:	4013      	ands	r3, r2
 80148c4:	d002      	beq.n	80148cc <HAL_PCD_EP_DB_Transmit+0x360>
 80148c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148c8:	3301      	adds	r3, #1
 80148ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80148cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148ce:	881b      	ldrh	r3, [r3, #0]
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	029b      	lsls	r3, r3, #10
 80148d8:	b29b      	uxth	r3, r3
 80148da:	4313      	orrs	r3, r2
 80148dc:	b29a      	uxth	r2, r3
 80148de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148e0:	801a      	strh	r2, [r3, #0]
 80148e2:	e028      	b.n	8014936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80148e4:	00000402 	.word	0x00000402
 80148e8:	ffff8000 	.word	0xffff8000
 80148ec:	00000406 	.word	0x00000406
 80148f0:	ffff8f8f 	.word	0xffff8f8f
 80148f4:	ffffc080 	.word	0xffffc080
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	785b      	ldrb	r3, [r3, #1]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d11a      	bne.n	8014936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	647b      	str	r3, [r7, #68]	@ 0x44
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2250      	movs	r2, #80	@ 0x50
 801490c:	5a9b      	ldrh	r3, [r3, r2]
 801490e:	b29b      	uxth	r3, r3
 8014910:	001a      	movs	r2, r3
 8014912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014914:	189b      	adds	r3, r3, r2
 8014916:	647b      	str	r3, [r7, #68]	@ 0x44
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	00da      	lsls	r2, r3, #3
 801491e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014920:	18d3      	adds	r3, r2, r3
 8014922:	4adb      	ldr	r2, [pc, #876]	@ (8014c90 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014924:	4694      	mov	ip, r2
 8014926:	4463      	add	r3, ip
 8014928:	643b      	str	r3, [r7, #64]	@ 0x40
 801492a:	238c      	movs	r3, #140	@ 0x8c
 801492c:	18fb      	adds	r3, r7, r3
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	b29a      	uxth	r2, r3
 8014932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014934:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6818      	ldr	r0, [r3, #0]
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	6959      	ldr	r1, [r3, #20]
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	891a      	ldrh	r2, [r3, #8]
 8014942:	238c      	movs	r3, #140	@ 0x8c
 8014944:	18fb      	adds	r3, r7, r3
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	b29b      	uxth	r3, r3
 801494a:	f006 fb85 	bl	801b058 <USB_WritePMA>
 801494e:	e1ea      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2250      	movs	r2, #80	@ 0x50
 8014956:	5a9b      	ldrh	r3, [r3, r2]
 8014958:	b29b      	uxth	r3, r3
 801495a:	001a      	movs	r2, r3
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	18d2      	adds	r2, r2, r3
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	18d3      	adds	r3, r2, r3
 801496a:	4aca      	ldr	r2, [pc, #808]	@ (8014c94 <HAL_PCD_EP_DB_Transmit+0x728>)
 801496c:	4694      	mov	ip, r2
 801496e:	4463      	add	r3, ip
 8014970:	881a      	ldrh	r2, [r3, #0]
 8014972:	2186      	movs	r1, #134	@ 0x86
 8014974:	187b      	adds	r3, r7, r1
 8014976:	0592      	lsls	r2, r2, #22
 8014978:	0d92      	lsrs	r2, r2, #22
 801497a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	699a      	ldr	r2, [r3, #24]
 8014980:	187b      	adds	r3, r7, r1
 8014982:	881b      	ldrh	r3, [r3, #0]
 8014984:	429a      	cmp	r2, r3
 8014986:	d307      	bcc.n	8014998 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	699a      	ldr	r2, [r3, #24]
 801498c:	187b      	adds	r3, r7, r1
 801498e:	881b      	ldrh	r3, [r3, #0]
 8014990:	1ad2      	subs	r2, r2, r3
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	619a      	str	r2, [r3, #24]
 8014996:	e002      	b.n	801499e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	2200      	movs	r2, #0
 801499c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	699b      	ldr	r3, [r3, #24]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d000      	beq.n	80149a8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80149a6:	e0bb      	b.n	8014b20 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	785b      	ldrb	r3, [r3, #1]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d125      	bne.n	80149fc <HAL_PCD_EP_DB_Transmit+0x490>
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2250      	movs	r2, #80	@ 0x50
 80149bc:	5a9b      	ldrh	r3, [r3, r2]
 80149be:	b29b      	uxth	r3, r3
 80149c0:	001a      	movs	r2, r3
 80149c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80149c4:	189b      	adds	r3, r3, r2
 80149c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	00da      	lsls	r2, r3, #3
 80149ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80149d0:	18d3      	adds	r3, r2, r3
 80149d2:	4aaf      	ldr	r2, [pc, #700]	@ (8014c90 <HAL_PCD_EP_DB_Transmit+0x724>)
 80149d4:	4694      	mov	ip, r2
 80149d6:	4463      	add	r3, ip
 80149d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80149da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149dc:	881b      	ldrh	r3, [r3, #0]
 80149de:	b29b      	uxth	r3, r3
 80149e0:	059b      	lsls	r3, r3, #22
 80149e2:	0d9b      	lsrs	r3, r3, #22
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149e8:	801a      	strh	r2, [r3, #0]
 80149ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149ec:	881b      	ldrh	r3, [r3, #0]
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	4aa9      	ldr	r2, [pc, #676]	@ (8014c98 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80149f2:	4313      	orrs	r3, r2
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149f8:	801a      	strh	r2, [r3, #0]
 80149fa:	e01b      	b.n	8014a34 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	785b      	ldrb	r3, [r3, #1]
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d117      	bne.n	8014a34 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	667b      	str	r3, [r7, #100]	@ 0x64
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	2250      	movs	r2, #80	@ 0x50
 8014a10:	5a9b      	ldrh	r3, [r3, r2]
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	001a      	movs	r2, r3
 8014a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014a18:	189b      	adds	r3, r3, r2
 8014a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	00da      	lsls	r2, r3, #3
 8014a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014a24:	18d3      	adds	r3, r2, r3
 8014a26:	4a9a      	ldr	r2, [pc, #616]	@ (8014c90 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014a28:	4694      	mov	ip, r2
 8014a2a:	4463      	add	r3, ip
 8014a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8014a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a30:	2200      	movs	r2, #0
 8014a32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	785b      	ldrb	r3, [r3, #1]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d12b      	bne.n	8014a9a <HAL_PCD_EP_DB_Transmit+0x52e>
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2250      	movs	r2, #80	@ 0x50
 8014a4e:	5a9b      	ldrh	r3, [r3, r2]
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	001a      	movs	r2, r3
 8014a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014a56:	189b      	adds	r3, r3, r2
 8014a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	00da      	lsls	r2, r3, #3
 8014a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014a62:	18d3      	adds	r3, r2, r3
 8014a64:	4a8b      	ldr	r2, [pc, #556]	@ (8014c94 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014a66:	4694      	mov	ip, r2
 8014a68:	4463      	add	r3, ip
 8014a6a:	2180      	movs	r1, #128	@ 0x80
 8014a6c:	187a      	adds	r2, r7, r1
 8014a6e:	6013      	str	r3, [r2, #0]
 8014a70:	187b      	adds	r3, r7, r1
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	881b      	ldrh	r3, [r3, #0]
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	059b      	lsls	r3, r3, #22
 8014a7a:	0d9b      	lsrs	r3, r3, #22
 8014a7c:	b29a      	uxth	r2, r3
 8014a7e:	187b      	adds	r3, r7, r1
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	801a      	strh	r2, [r3, #0]
 8014a84:	187b      	adds	r3, r7, r1
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	4a82      	ldr	r2, [pc, #520]	@ (8014c98 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014a8e:	4313      	orrs	r3, r2
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	187b      	adds	r3, r7, r1
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	801a      	strh	r2, [r3, #0]
 8014a98:	e018      	b.n	8014acc <HAL_PCD_EP_DB_Transmit+0x560>
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	785b      	ldrb	r3, [r3, #1]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d114      	bne.n	8014acc <HAL_PCD_EP_DB_Transmit+0x560>
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	2250      	movs	r2, #80	@ 0x50
 8014aa8:	5a9b      	ldrh	r3, [r3, r2]
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	001a      	movs	r2, r3
 8014aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014ab0:	189b      	adds	r3, r3, r2
 8014ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	00da      	lsls	r2, r3, #3
 8014aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014abc:	18d3      	adds	r3, r2, r3
 8014abe:	4a75      	ldr	r2, [pc, #468]	@ (8014c94 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ac0:	4694      	mov	ip, r2
 8014ac2:	4463      	add	r3, ip
 8014ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8014ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014ac8:	2200      	movs	r2, #0
 8014aca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	781a      	ldrb	r2, [r3, #0]
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	0011      	movs	r1, r2
 8014ad4:	0018      	movs	r0, r3
 8014ad6:	f008 fb43 	bl	801d160 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014ada:	1dbb      	adds	r3, r7, #6
 8014adc:	881a      	ldrh	r2, [r3, #0]
 8014ade:	2380      	movs	r3, #128	@ 0x80
 8014ae0:	01db      	lsls	r3, r3, #7
 8014ae2:	4013      	ands	r3, r2
 8014ae4:	d000      	beq.n	8014ae8 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014ae6:	e11e      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	001a      	movs	r2, r3
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	18d3      	adds	r3, r2, r3
 8014af6:	881b      	ldrh	r3, [r3, #0]
 8014af8:	b29a      	uxth	r2, r3
 8014afa:	2088      	movs	r0, #136	@ 0x88
 8014afc:	183b      	adds	r3, r7, r0
 8014afe:	4967      	ldr	r1, [pc, #412]	@ (8014c9c <HAL_PCD_EP_DB_Transmit+0x730>)
 8014b00:	400a      	ands	r2, r1
 8014b02:	801a      	strh	r2, [r3, #0]
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	001a      	movs	r2, r3
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	18d3      	adds	r3, r2, r3
 8014b12:	183a      	adds	r2, r7, r0
 8014b14:	8812      	ldrh	r2, [r2, #0]
 8014b16:	4962      	ldr	r1, [pc, #392]	@ (8014ca0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014b18:	430a      	orrs	r2, r1
 8014b1a:	b292      	uxth	r2, r2
 8014b1c:	801a      	strh	r2, [r3, #0]
 8014b1e:	e102      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014b20:	1dbb      	adds	r3, r7, #6
 8014b22:	881a      	ldrh	r2, [r3, #0]
 8014b24:	2380      	movs	r3, #128	@ 0x80
 8014b26:	01db      	lsls	r3, r3, #7
 8014b28:	4013      	ands	r3, r2
 8014b2a:	d11a      	bne.n	8014b62 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	001a      	movs	r2, r3
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	18d3      	adds	r3, r2, r3
 8014b3a:	881b      	ldrh	r3, [r3, #0]
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	204e      	movs	r0, #78	@ 0x4e
 8014b40:	183b      	adds	r3, r7, r0
 8014b42:	4956      	ldr	r1, [pc, #344]	@ (8014c9c <HAL_PCD_EP_DB_Transmit+0x730>)
 8014b44:	400a      	ands	r2, r1
 8014b46:	801a      	strh	r2, [r3, #0]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	001a      	movs	r2, r3
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	18d3      	adds	r3, r2, r3
 8014b56:	183a      	adds	r2, r7, r0
 8014b58:	8812      	ldrh	r2, [r2, #0]
 8014b5a:	4951      	ldr	r1, [pc, #324]	@ (8014ca0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014b5c:	430a      	orrs	r2, r1
 8014b5e:	b292      	uxth	r2, r2
 8014b60:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	2224      	movs	r2, #36	@ 0x24
 8014b66:	5c9b      	ldrb	r3, [r3, r2]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d000      	beq.n	8014b6e <HAL_PCD_EP_DB_Transmit+0x602>
 8014b6c:	e0db      	b.n	8014d26 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	695a      	ldr	r2, [r3, #20]
 8014b72:	2186      	movs	r1, #134	@ 0x86
 8014b74:	187b      	adds	r3, r7, r1
 8014b76:	881b      	ldrh	r3, [r3, #0]
 8014b78:	18d2      	adds	r2, r2, r3
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014b7e:	68bb      	ldr	r3, [r7, #8]
 8014b80:	69da      	ldr	r2, [r3, #28]
 8014b82:	187b      	adds	r3, r7, r1
 8014b84:	881b      	ldrh	r3, [r3, #0]
 8014b86:	18d2      	adds	r2, r2, r3
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	6a1a      	ldr	r2, [r3, #32]
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	691b      	ldr	r3, [r3, #16]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d30c      	bcc.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	691b      	ldr	r3, [r3, #16]
 8014b9c:	218c      	movs	r1, #140	@ 0x8c
 8014b9e:	187a      	adds	r2, r7, r1
 8014ba0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	6a1a      	ldr	r2, [r3, #32]
 8014ba6:	187b      	adds	r3, r7, r1
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	1ad2      	subs	r2, r2, r3
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	621a      	str	r2, [r3, #32]
 8014bb0:	e01a      	b.n	8014be8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	6a1b      	ldr	r3, [r3, #32]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d10a      	bne.n	8014bd0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014bba:	2386      	movs	r3, #134	@ 0x86
 8014bbc:	18fb      	adds	r3, r7, r3
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	228c      	movs	r2, #140	@ 0x8c
 8014bc2:	18ba      	adds	r2, r7, r2
 8014bc4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	2224      	movs	r2, #36	@ 0x24
 8014bca:	2100      	movs	r1, #0
 8014bcc:	5499      	strb	r1, [r3, r2]
 8014bce:	e00b      	b.n	8014be8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	6a1b      	ldr	r3, [r3, #32]
 8014bd4:	228c      	movs	r2, #140	@ 0x8c
 8014bd6:	18ba      	adds	r2, r7, r2
 8014bd8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	2224      	movs	r2, #36	@ 0x24
 8014be4:	2100      	movs	r1, #0
 8014be6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	785b      	ldrb	r3, [r3, #1]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d000      	beq.n	8014bf8 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014bf6:	e06e      	b.n	8014cd6 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2250      	movs	r2, #80	@ 0x50
 8014c04:	5a9b      	ldrh	r3, [r3, r2]
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	001a      	movs	r2, r3
 8014c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c0c:	189b      	adds	r3, r3, r2
 8014c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	00da      	lsls	r2, r3, #3
 8014c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c18:	18d3      	adds	r3, r2, r3
 8014c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8014c94 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014c1c:	4694      	mov	ip, r2
 8014c1e:	4463      	add	r3, ip
 8014c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c24:	881b      	ldrh	r3, [r3, #0]
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	059b      	lsls	r3, r3, #22
 8014c2a:	0d9b      	lsrs	r3, r3, #22
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c30:	801a      	strh	r2, [r3, #0]
 8014c32:	228c      	movs	r2, #140	@ 0x8c
 8014c34:	18bb      	adds	r3, r7, r2
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8014c3a:	d91a      	bls.n	8014c72 <HAL_PCD_EP_DB_Transmit+0x706>
 8014c3c:	18bb      	adds	r3, r7, r2
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	095b      	lsrs	r3, r3, #5
 8014c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c44:	18bb      	adds	r3, r7, r2
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	221f      	movs	r2, #31
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	d102      	bne.n	8014c54 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c50:	3b01      	subs	r3, #1
 8014c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c56:	881b      	ldrh	r3, [r3, #0]
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c5c:	b29b      	uxth	r3, r3
 8014c5e:	029b      	lsls	r3, r3, #10
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	4313      	orrs	r3, r2
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	4a0c      	ldr	r2, [pc, #48]	@ (8014c98 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	b29a      	uxth	r2, r3
 8014c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c6e:	801a      	strh	r2, [r3, #0]
 8014c70:	e04d      	b.n	8014d0e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c72:	238c      	movs	r3, #140	@ 0x8c
 8014c74:	18fb      	adds	r3, r7, r3
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d113      	bne.n	8014ca4 <HAL_PCD_EP_DB_Transmit+0x738>
 8014c7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c7e:	881b      	ldrh	r3, [r3, #0]
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	4a05      	ldr	r2, [pc, #20]	@ (8014c98 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014c84:	4313      	orrs	r3, r2
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c8a:	801a      	strh	r2, [r3, #0]
 8014c8c:	e03f      	b.n	8014d0e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c8e:	46c0      	nop			@ (mov r8, r8)
 8014c90:	00000402 	.word	0x00000402
 8014c94:	00000406 	.word	0x00000406
 8014c98:	ffff8000 	.word	0xffff8000
 8014c9c:	ffff8f8f 	.word	0xffff8f8f
 8014ca0:	ffffc080 	.word	0xffffc080
 8014ca4:	228c      	movs	r2, #140	@ 0x8c
 8014ca6:	18bb      	adds	r3, r7, r2
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	085b      	lsrs	r3, r3, #1
 8014cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014cae:	18bb      	adds	r3, r7, r2
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	d002      	beq.n	8014cbe <HAL_PCD_EP_DB_Transmit+0x752>
 8014cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014cba:	3301      	adds	r3, #1
 8014cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014cc0:	881b      	ldrh	r3, [r3, #0]
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	029b      	lsls	r3, r3, #10
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	4313      	orrs	r3, r2
 8014cce:	b29a      	uxth	r2, r3
 8014cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014cd2:	801a      	strh	r2, [r3, #0]
 8014cd4:	e01b      	b.n	8014d0e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	785b      	ldrb	r3, [r3, #1]
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d117      	bne.n	8014d0e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2250      	movs	r2, #80	@ 0x50
 8014ce4:	5a9b      	ldrh	r3, [r3, r2]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	001a      	movs	r2, r3
 8014cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cec:	189b      	adds	r3, r3, r2
 8014cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	00da      	lsls	r2, r3, #3
 8014cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cf8:	18d3      	adds	r3, r2, r3
 8014cfa:	4a21      	ldr	r2, [pc, #132]	@ (8014d80 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014cfc:	4694      	mov	ip, r2
 8014cfe:	4463      	add	r3, ip
 8014d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8014d02:	238c      	movs	r3, #140	@ 0x8c
 8014d04:	18fb      	adds	r3, r7, r3
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	b29a      	uxth	r2, r3
 8014d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	6818      	ldr	r0, [r3, #0]
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	6959      	ldr	r1, [r3, #20]
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	895a      	ldrh	r2, [r3, #10]
 8014d1a:	238c      	movs	r3, #140	@ 0x8c
 8014d1c:	18fb      	adds	r3, r7, r3
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	f006 f999 	bl	801b058 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	001a      	movs	r2, r3
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	18d3      	adds	r3, r2, r3
 8014d34:	881b      	ldrh	r3, [r3, #0]
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	2014      	movs	r0, #20
 8014d3a:	183b      	adds	r3, r7, r0
 8014d3c:	4911      	ldr	r1, [pc, #68]	@ (8014d84 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014d3e:	400a      	ands	r2, r1
 8014d40:	801a      	strh	r2, [r3, #0]
 8014d42:	183b      	adds	r3, r7, r0
 8014d44:	183a      	adds	r2, r7, r0
 8014d46:	8812      	ldrh	r2, [r2, #0]
 8014d48:	2110      	movs	r1, #16
 8014d4a:	404a      	eors	r2, r1
 8014d4c:	801a      	strh	r2, [r3, #0]
 8014d4e:	183b      	adds	r3, r7, r0
 8014d50:	183a      	adds	r2, r7, r0
 8014d52:	8812      	ldrh	r2, [r2, #0]
 8014d54:	2120      	movs	r1, #32
 8014d56:	404a      	eors	r2, r1
 8014d58:	801a      	strh	r2, [r3, #0]
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	001a      	movs	r2, r3
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	18d3      	adds	r3, r2, r3
 8014d68:	183a      	adds	r2, r7, r0
 8014d6a:	8812      	ldrh	r2, [r2, #0]
 8014d6c:	4906      	ldr	r1, [pc, #24]	@ (8014d88 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014d6e:	430a      	orrs	r2, r1
 8014d70:	b292      	uxth	r2, r2
 8014d72:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	0018      	movs	r0, r3
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	b024      	add	sp, #144	@ 0x90
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	46c0      	nop			@ (mov r8, r8)
 8014d80:	00000406 	.word	0x00000406
 8014d84:	ffff8fbf 	.word	0xffff8fbf
 8014d88:	ffff8080 	.word	0xffff8080

08014d8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014d8c:	b590      	push	{r4, r7, lr}
 8014d8e:	b087      	sub	sp, #28
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	0008      	movs	r0, r1
 8014d96:	0011      	movs	r1, r2
 8014d98:	607b      	str	r3, [r7, #4]
 8014d9a:	240a      	movs	r4, #10
 8014d9c:	193b      	adds	r3, r7, r4
 8014d9e:	1c02      	adds	r2, r0, #0
 8014da0:	801a      	strh	r2, [r3, #0]
 8014da2:	2308      	movs	r3, #8
 8014da4:	18fb      	adds	r3, r7, r3
 8014da6:	1c0a      	adds	r2, r1, #0
 8014da8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014daa:	0021      	movs	r1, r4
 8014dac:	187b      	adds	r3, r7, r1
 8014dae:	881b      	ldrh	r3, [r3, #0]
 8014db0:	2280      	movs	r2, #128	@ 0x80
 8014db2:	4013      	ands	r3, r2
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d00c      	beq.n	8014dd4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014dba:	187b      	adds	r3, r7, r1
 8014dbc:	881b      	ldrh	r3, [r3, #0]
 8014dbe:	2207      	movs	r2, #7
 8014dc0:	4013      	ands	r3, r2
 8014dc2:	1c5a      	adds	r2, r3, #1
 8014dc4:	0013      	movs	r3, r2
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	189b      	adds	r3, r3, r2
 8014dca:	00db      	lsls	r3, r3, #3
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	18d3      	adds	r3, r2, r3
 8014dd0:	617b      	str	r3, [r7, #20]
 8014dd2:	e00b      	b.n	8014dec <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014dd4:	230a      	movs	r3, #10
 8014dd6:	18fb      	adds	r3, r7, r3
 8014dd8:	881a      	ldrh	r2, [r3, #0]
 8014dda:	0013      	movs	r3, r2
 8014ddc:	009b      	lsls	r3, r3, #2
 8014dde:	189b      	adds	r3, r3, r2
 8014de0:	00db      	lsls	r3, r3, #3
 8014de2:	3369      	adds	r3, #105	@ 0x69
 8014de4:	33ff      	adds	r3, #255	@ 0xff
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	18d3      	adds	r3, r2, r3
 8014dea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014dec:	2308      	movs	r3, #8
 8014dee:	18fb      	adds	r3, r7, r3
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d107      	bne.n	8014e06 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	b29a      	uxth	r2, r3
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	80da      	strh	r2, [r3, #6]
 8014e04:	e00b      	b.n	8014e1e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	2201      	movs	r2, #1
 8014e0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	0c1b      	lsrs	r3, r3, #16
 8014e18:	b29a      	uxth	r2, r3
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014e1e:	2300      	movs	r3, #0
}
 8014e20:	0018      	movs	r0, r3
 8014e22:	46bd      	mov	sp, r7
 8014e24:	b007      	add	sp, #28
 8014e26:	bd90      	pop	{r4, r7, pc}

08014e28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b084      	sub	sp, #16
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	23ba      	movs	r3, #186	@ 0xba
 8014e3a:	009b      	lsls	r3, r3, #2
 8014e3c:	2101      	movs	r1, #1
 8014e3e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	23b8      	movs	r3, #184	@ 0xb8
 8014e44:	009b      	lsls	r3, r3, #2
 8014e46:	2100      	movs	r1, #0
 8014e48:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2254      	movs	r2, #84	@ 0x54
 8014e4e:	5a9b      	ldrh	r3, [r3, r2]
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	2201      	movs	r2, #1
 8014e54:	4313      	orrs	r3, r2
 8014e56:	b299      	uxth	r1, r3
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	2254      	movs	r2, #84	@ 0x54
 8014e5c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2254      	movs	r2, #84	@ 0x54
 8014e62:	5a9b      	ldrh	r3, [r3, r2]
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	2202      	movs	r2, #2
 8014e68:	4313      	orrs	r3, r2
 8014e6a:	b299      	uxth	r1, r3
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	2254      	movs	r2, #84	@ 0x54
 8014e70:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014e72:	2300      	movs	r3, #0
}
 8014e74:	0018      	movs	r0, r3
 8014e76:	46bd      	mov	sp, r7
 8014e78:	b004      	add	sp, #16
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	000a      	movs	r2, r1
 8014e86:	1cfb      	adds	r3, r7, #3
 8014e88:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014e8a:	46c0      	nop			@ (mov r8, r8)
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	b002      	add	sp, #8
 8014e90:	bd80      	pop	{r7, pc}
	...

08014e94 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014e98:	4b04      	ldr	r3, [pc, #16]	@ (8014eac <HAL_PWR_EnableBkUpAccess+0x18>)
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	4b03      	ldr	r3, [pc, #12]	@ (8014eac <HAL_PWR_EnableBkUpAccess+0x18>)
 8014e9e:	2180      	movs	r1, #128	@ 0x80
 8014ea0:	0049      	lsls	r1, r1, #1
 8014ea2:	430a      	orrs	r2, r1
 8014ea4:	601a      	str	r2, [r3, #0]
}
 8014ea6:	46c0      	nop			@ (mov r8, r8)
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	40007000 	.word	0x40007000

08014eb0 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014eb4:	4b04      	ldr	r3, [pc, #16]	@ (8014ec8 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	4b03      	ldr	r3, [pc, #12]	@ (8014ec8 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014eba:	4904      	ldr	r1, [pc, #16]	@ (8014ecc <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014ebc:	400a      	ands	r2, r1
 8014ebe:	601a      	str	r2, [r3, #0]
}
 8014ec0:	46c0      	nop			@ (mov r8, r8)
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	46c0      	nop			@ (mov r8, r8)
 8014ec8:	40007000 	.word	0x40007000
 8014ecc:	fffffeff 	.word	0xfffffeff

08014ed0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b086      	sub	sp, #24
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	000a      	movs	r2, r1
 8014eda:	1cfb      	adds	r3, r7, #3
 8014edc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014ee2:	4b25      	ldr	r3, [pc, #148]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	2380      	movs	r3, #128	@ 0x80
 8014ee8:	009b      	lsls	r3, r3, #2
 8014eea:	4013      	ands	r3, r2
 8014eec:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014eee:	4b23      	ldr	r3, [pc, #140]	@ (8014f7c <HAL_PWR_EnterSTOPMode+0xac>)
 8014ef0:	6a1b      	ldr	r3, [r3, #32]
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d008      	beq.n	8014f10 <HAL_PWR_EnterSTOPMode+0x40>
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d005      	beq.n	8014f10 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014f04:	4b1c      	ldr	r3, [pc, #112]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	4b1b      	ldr	r3, [pc, #108]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f0a:	491d      	ldr	r1, [pc, #116]	@ (8014f80 <HAL_PWR_EnterSTOPMode+0xb0>)
 8014f0c:	400a      	ands	r2, r1
 8014f0e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014f10:	4b19      	ldr	r3, [pc, #100]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2203      	movs	r2, #3
 8014f1a:	4393      	bics	r3, r2
 8014f1c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014f1e:	697a      	ldr	r2, [r7, #20]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	4313      	orrs	r3, r2
 8014f24:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014f26:	4b14      	ldr	r3, [pc, #80]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f2c:	4b15      	ldr	r3, [pc, #84]	@ (8014f84 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f2e:	691a      	ldr	r2, [r3, #16]
 8014f30:	4b14      	ldr	r3, [pc, #80]	@ (8014f84 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f32:	2104      	movs	r1, #4
 8014f34:	430a      	orrs	r2, r1
 8014f36:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014f38:	1cfb      	adds	r3, r7, #3
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	2b01      	cmp	r3, #1
 8014f3e:	d101      	bne.n	8014f44 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014f40:	bf30      	wfi
 8014f42:	e002      	b.n	8014f4a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014f44:	bf40      	sev
    __WFE();
 8014f46:	bf20      	wfe
    __WFE();
 8014f48:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f84 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f4c:	691a      	ldr	r2, [r3, #16]
 8014f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8014f84 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f50:	2104      	movs	r1, #4
 8014f52:	438a      	bics	r2, r1
 8014f54:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d009      	beq.n	8014f70 <HAL_PWR_EnterSTOPMode+0xa0>
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d006      	beq.n	8014f70 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014f62:	4b05      	ldr	r3, [pc, #20]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f64:	681a      	ldr	r2, [r3, #0]
 8014f66:	4b04      	ldr	r3, [pc, #16]	@ (8014f78 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f68:	2180      	movs	r1, #128	@ 0x80
 8014f6a:	0089      	lsls	r1, r1, #2
 8014f6c:	430a      	orrs	r2, r1
 8014f6e:	601a      	str	r2, [r3, #0]
  }
}
 8014f70:	46c0      	nop			@ (mov r8, r8)
 8014f72:	46bd      	mov	sp, r7
 8014f74:	b006      	add	sp, #24
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	40007000 	.word	0x40007000
 8014f7c:	40010000 	.word	0x40010000
 8014f80:	fffffdff 	.word	0xfffffdff
 8014f84:	e000ed00 	.word	0xe000ed00

08014f88 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014f8c:	4b07      	ldr	r3, [pc, #28]	@ (8014fac <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	4b06      	ldr	r3, [pc, #24]	@ (8014fac <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014f92:	2102      	movs	r1, #2
 8014f94:	430a      	orrs	r2, r1
 8014f96:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f98:	4b05      	ldr	r3, [pc, #20]	@ (8014fb0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014f9a:	691a      	ldr	r2, [r3, #16]
 8014f9c:	4b04      	ldr	r3, [pc, #16]	@ (8014fb0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014f9e:	2104      	movs	r1, #4
 8014fa0:	430a      	orrs	r2, r1
 8014fa2:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014fa4:	bf30      	wfi
}
 8014fa6:	46c0      	nop			@ (mov r8, r8)
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	40007000 	.word	0x40007000
 8014fb0:	e000ed00 	.word	0xe000ed00

08014fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014fb4:	b5b0      	push	{r4, r5, r7, lr}
 8014fb6:	b08a      	sub	sp, #40	@ 0x28
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d102      	bne.n	8014fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	f000 fbbf 	bl	8015746 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014fc8:	4bc9      	ldr	r3, [pc, #804]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	220c      	movs	r2, #12
 8014fce:	4013      	ands	r3, r2
 8014fd0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014fd2:	4bc7      	ldr	r3, [pc, #796]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8014fd4:	68da      	ldr	r2, [r3, #12]
 8014fd6:	2380      	movs	r3, #128	@ 0x80
 8014fd8:	025b      	lsls	r3, r3, #9
 8014fda:	4013      	ands	r3, r2
 8014fdc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	4013      	ands	r3, r2
 8014fe6:	d100      	bne.n	8014fea <HAL_RCC_OscConfig+0x36>
 8014fe8:	e07e      	b.n	80150e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014fea:	69fb      	ldr	r3, [r7, #28]
 8014fec:	2b08      	cmp	r3, #8
 8014fee:	d007      	beq.n	8015000 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014ff0:	69fb      	ldr	r3, [r7, #28]
 8014ff2:	2b0c      	cmp	r3, #12
 8014ff4:	d112      	bne.n	801501c <HAL_RCC_OscConfig+0x68>
 8014ff6:	69ba      	ldr	r2, [r7, #24]
 8014ff8:	2380      	movs	r3, #128	@ 0x80
 8014ffa:	025b      	lsls	r3, r3, #9
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d10d      	bne.n	801501c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015000:	4bbb      	ldr	r3, [pc, #748]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	2380      	movs	r3, #128	@ 0x80
 8015006:	029b      	lsls	r3, r3, #10
 8015008:	4013      	ands	r3, r2
 801500a:	d100      	bne.n	801500e <HAL_RCC_OscConfig+0x5a>
 801500c:	e06b      	b.n	80150e6 <HAL_RCC_OscConfig+0x132>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d167      	bne.n	80150e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8015016:	2301      	movs	r3, #1
 8015018:	f000 fb95 	bl	8015746 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	685a      	ldr	r2, [r3, #4]
 8015020:	2380      	movs	r3, #128	@ 0x80
 8015022:	025b      	lsls	r3, r3, #9
 8015024:	429a      	cmp	r2, r3
 8015026:	d107      	bne.n	8015038 <HAL_RCC_OscConfig+0x84>
 8015028:	4bb1      	ldr	r3, [pc, #708]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	4bb0      	ldr	r3, [pc, #704]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801502e:	2180      	movs	r1, #128	@ 0x80
 8015030:	0249      	lsls	r1, r1, #9
 8015032:	430a      	orrs	r2, r1
 8015034:	601a      	str	r2, [r3, #0]
 8015036:	e027      	b.n	8015088 <HAL_RCC_OscConfig+0xd4>
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685a      	ldr	r2, [r3, #4]
 801503c:	23a0      	movs	r3, #160	@ 0xa0
 801503e:	02db      	lsls	r3, r3, #11
 8015040:	429a      	cmp	r2, r3
 8015042:	d10e      	bne.n	8015062 <HAL_RCC_OscConfig+0xae>
 8015044:	4baa      	ldr	r3, [pc, #680]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	4ba9      	ldr	r3, [pc, #676]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801504a:	2180      	movs	r1, #128	@ 0x80
 801504c:	02c9      	lsls	r1, r1, #11
 801504e:	430a      	orrs	r2, r1
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	4ba7      	ldr	r3, [pc, #668]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015054:	681a      	ldr	r2, [r3, #0]
 8015056:	4ba6      	ldr	r3, [pc, #664]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015058:	2180      	movs	r1, #128	@ 0x80
 801505a:	0249      	lsls	r1, r1, #9
 801505c:	430a      	orrs	r2, r1
 801505e:	601a      	str	r2, [r3, #0]
 8015060:	e012      	b.n	8015088 <HAL_RCC_OscConfig+0xd4>
 8015062:	4ba3      	ldr	r3, [pc, #652]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015064:	681a      	ldr	r2, [r3, #0]
 8015066:	4ba2      	ldr	r3, [pc, #648]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015068:	49a2      	ldr	r1, [pc, #648]	@ (80152f4 <HAL_RCC_OscConfig+0x340>)
 801506a:	400a      	ands	r2, r1
 801506c:	601a      	str	r2, [r3, #0]
 801506e:	4ba0      	ldr	r3, [pc, #640]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	2380      	movs	r3, #128	@ 0x80
 8015074:	025b      	lsls	r3, r3, #9
 8015076:	4013      	ands	r3, r2
 8015078:	60fb      	str	r3, [r7, #12]
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	4b9c      	ldr	r3, [pc, #624]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	4b9b      	ldr	r3, [pc, #620]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015082:	499d      	ldr	r1, [pc, #628]	@ (80152f8 <HAL_RCC_OscConfig+0x344>)
 8015084:	400a      	ands	r2, r1
 8015086:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d015      	beq.n	80150bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015090:	f7f9 fe60 	bl	800ed54 <HAL_GetTick>
 8015094:	0003      	movs	r3, r0
 8015096:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015098:	e009      	b.n	80150ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801509a:	f7f9 fe5b 	bl	800ed54 <HAL_GetTick>
 801509e:	0002      	movs	r2, r0
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	1ad3      	subs	r3, r2, r3
 80150a4:	2b64      	cmp	r3, #100	@ 0x64
 80150a6:	d902      	bls.n	80150ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80150a8:	2303      	movs	r3, #3
 80150aa:	f000 fb4c 	bl	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80150ae:	4b90      	ldr	r3, [pc, #576]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	2380      	movs	r3, #128	@ 0x80
 80150b4:	029b      	lsls	r3, r3, #10
 80150b6:	4013      	ands	r3, r2
 80150b8:	d0ef      	beq.n	801509a <HAL_RCC_OscConfig+0xe6>
 80150ba:	e015      	b.n	80150e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80150bc:	f7f9 fe4a 	bl	800ed54 <HAL_GetTick>
 80150c0:	0003      	movs	r3, r0
 80150c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80150c4:	e008      	b.n	80150d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80150c6:	f7f9 fe45 	bl	800ed54 <HAL_GetTick>
 80150ca:	0002      	movs	r2, r0
 80150cc:	697b      	ldr	r3, [r7, #20]
 80150ce:	1ad3      	subs	r3, r2, r3
 80150d0:	2b64      	cmp	r3, #100	@ 0x64
 80150d2:	d901      	bls.n	80150d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80150d4:	2303      	movs	r3, #3
 80150d6:	e336      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80150d8:	4b85      	ldr	r3, [pc, #532]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	2380      	movs	r3, #128	@ 0x80
 80150de:	029b      	lsls	r3, r3, #10
 80150e0:	4013      	ands	r3, r2
 80150e2:	d1f0      	bne.n	80150c6 <HAL_RCC_OscConfig+0x112>
 80150e4:	e000      	b.n	80150e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80150e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2202      	movs	r2, #2
 80150ee:	4013      	ands	r3, r2
 80150f0:	d100      	bne.n	80150f4 <HAL_RCC_OscConfig+0x140>
 80150f2:	e099      	b.n	8015228 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	68db      	ldr	r3, [r3, #12]
 80150f8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80150fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150fc:	2220      	movs	r2, #32
 80150fe:	4013      	ands	r3, r2
 8015100:	d009      	beq.n	8015116 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8015102:	4b7b      	ldr	r3, [pc, #492]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	4b7a      	ldr	r3, [pc, #488]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015108:	2120      	movs	r1, #32
 801510a:	430a      	orrs	r2, r1
 801510c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015110:	2220      	movs	r2, #32
 8015112:	4393      	bics	r3, r2
 8015114:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	2b04      	cmp	r3, #4
 801511a:	d005      	beq.n	8015128 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801511c:	69fb      	ldr	r3, [r7, #28]
 801511e:	2b0c      	cmp	r3, #12
 8015120:	d13e      	bne.n	80151a0 <HAL_RCC_OscConfig+0x1ec>
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d13b      	bne.n	80151a0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015128:	4b71      	ldr	r3, [pc, #452]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2204      	movs	r2, #4
 801512e:	4013      	ands	r3, r2
 8015130:	d004      	beq.n	801513c <HAL_RCC_OscConfig+0x188>
 8015132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015134:	2b00      	cmp	r3, #0
 8015136:	d101      	bne.n	801513c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015138:	2301      	movs	r3, #1
 801513a:	e304      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801513c:	4b6c      	ldr	r3, [pc, #432]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	4a6e      	ldr	r2, [pc, #440]	@ (80152fc <HAL_RCC_OscConfig+0x348>)
 8015142:	4013      	ands	r3, r2
 8015144:	0019      	movs	r1, r3
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	691b      	ldr	r3, [r3, #16]
 801514a:	021a      	lsls	r2, r3, #8
 801514c:	4b68      	ldr	r3, [pc, #416]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801514e:	430a      	orrs	r2, r1
 8015150:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015152:	4b67      	ldr	r3, [pc, #412]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2209      	movs	r2, #9
 8015158:	4393      	bics	r3, r2
 801515a:	0019      	movs	r1, r3
 801515c:	4b64      	ldr	r3, [pc, #400]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801515e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015160:	430a      	orrs	r2, r1
 8015162:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015164:	f000 fc42 	bl	80159ec <HAL_RCC_GetSysClockFreq>
 8015168:	0001      	movs	r1, r0
 801516a:	4b61      	ldr	r3, [pc, #388]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	091b      	lsrs	r3, r3, #4
 8015170:	220f      	movs	r2, #15
 8015172:	4013      	ands	r3, r2
 8015174:	4a62      	ldr	r2, [pc, #392]	@ (8015300 <HAL_RCC_OscConfig+0x34c>)
 8015176:	5cd3      	ldrb	r3, [r2, r3]
 8015178:	000a      	movs	r2, r1
 801517a:	40da      	lsrs	r2, r3
 801517c:	4b61      	ldr	r3, [pc, #388]	@ (8015304 <HAL_RCC_OscConfig+0x350>)
 801517e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8015180:	4b61      	ldr	r3, [pc, #388]	@ (8015308 <HAL_RCC_OscConfig+0x354>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2513      	movs	r5, #19
 8015186:	197c      	adds	r4, r7, r5
 8015188:	0018      	movs	r0, r3
 801518a:	f7f9 fd9d 	bl	800ecc8 <HAL_InitTick>
 801518e:	0003      	movs	r3, r0
 8015190:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8015192:	197b      	adds	r3, r7, r5
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d046      	beq.n	8015228 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801519a:	197b      	adds	r3, r7, r5
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	e2d2      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80151a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d027      	beq.n	80151f6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80151a6:	4b52      	ldr	r3, [pc, #328]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	2209      	movs	r2, #9
 80151ac:	4393      	bics	r3, r2
 80151ae:	0019      	movs	r1, r3
 80151b0:	4b4f      	ldr	r3, [pc, #316]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151b4:	430a      	orrs	r2, r1
 80151b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151b8:	f7f9 fdcc 	bl	800ed54 <HAL_GetTick>
 80151bc:	0003      	movs	r3, r0
 80151be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80151c0:	e008      	b.n	80151d4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80151c2:	f7f9 fdc7 	bl	800ed54 <HAL_GetTick>
 80151c6:	0002      	movs	r2, r0
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	1ad3      	subs	r3, r2, r3
 80151cc:	2b02      	cmp	r3, #2
 80151ce:	d901      	bls.n	80151d4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80151d0:	2303      	movs	r3, #3
 80151d2:	e2b8      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80151d4:	4b46      	ldr	r3, [pc, #280]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2204      	movs	r2, #4
 80151da:	4013      	ands	r3, r2
 80151dc:	d0f1      	beq.n	80151c2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80151de:	4b44      	ldr	r3, [pc, #272]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	4a46      	ldr	r2, [pc, #280]	@ (80152fc <HAL_RCC_OscConfig+0x348>)
 80151e4:	4013      	ands	r3, r2
 80151e6:	0019      	movs	r1, r3
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	691b      	ldr	r3, [r3, #16]
 80151ec:	021a      	lsls	r2, r3, #8
 80151ee:	4b40      	ldr	r3, [pc, #256]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151f0:	430a      	orrs	r2, r1
 80151f2:	605a      	str	r2, [r3, #4]
 80151f4:	e018      	b.n	8015228 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80151f6:	4b3e      	ldr	r3, [pc, #248]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	4b3d      	ldr	r3, [pc, #244]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80151fc:	2101      	movs	r1, #1
 80151fe:	438a      	bics	r2, r1
 8015200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015202:	f7f9 fda7 	bl	800ed54 <HAL_GetTick>
 8015206:	0003      	movs	r3, r0
 8015208:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801520a:	e008      	b.n	801521e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801520c:	f7f9 fda2 	bl	800ed54 <HAL_GetTick>
 8015210:	0002      	movs	r2, r0
 8015212:	697b      	ldr	r3, [r7, #20]
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	2b02      	cmp	r3, #2
 8015218:	d901      	bls.n	801521e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801521a:	2303      	movs	r3, #3
 801521c:	e293      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801521e:	4b34      	ldr	r3, [pc, #208]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2204      	movs	r2, #4
 8015224:	4013      	ands	r3, r2
 8015226:	d1f1      	bne.n	801520c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2210      	movs	r2, #16
 801522e:	4013      	ands	r3, r2
 8015230:	d100      	bne.n	8015234 <HAL_RCC_OscConfig+0x280>
 8015232:	e0a2      	b.n	801537a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015234:	69fb      	ldr	r3, [r7, #28]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d140      	bne.n	80152bc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801523a:	4b2d      	ldr	r3, [pc, #180]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	2380      	movs	r3, #128	@ 0x80
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	4013      	ands	r3, r2
 8015244:	d005      	beq.n	8015252 <HAL_RCC_OscConfig+0x29e>
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	69db      	ldr	r3, [r3, #28]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d101      	bne.n	8015252 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801524e:	2301      	movs	r3, #1
 8015250:	e279      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015252:	4b27      	ldr	r3, [pc, #156]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	4a2d      	ldr	r2, [pc, #180]	@ (801530c <HAL_RCC_OscConfig+0x358>)
 8015258:	4013      	ands	r3, r2
 801525a:	0019      	movs	r1, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015260:	4b23      	ldr	r3, [pc, #140]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015262:	430a      	orrs	r2, r1
 8015264:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015266:	4b22      	ldr	r3, [pc, #136]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	021b      	lsls	r3, r3, #8
 801526c:	0a19      	lsrs	r1, r3, #8
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6a1b      	ldr	r3, [r3, #32]
 8015272:	061a      	lsls	r2, r3, #24
 8015274:	4b1e      	ldr	r3, [pc, #120]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 8015276:	430a      	orrs	r2, r1
 8015278:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801527e:	0b5b      	lsrs	r3, r3, #13
 8015280:	3301      	adds	r3, #1
 8015282:	2280      	movs	r2, #128	@ 0x80
 8015284:	0212      	lsls	r2, r2, #8
 8015286:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015288:	4b19      	ldr	r3, [pc, #100]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	091b      	lsrs	r3, r3, #4
 801528e:	210f      	movs	r1, #15
 8015290:	400b      	ands	r3, r1
 8015292:	491b      	ldr	r1, [pc, #108]	@ (8015300 <HAL_RCC_OscConfig+0x34c>)
 8015294:	5ccb      	ldrb	r3, [r1, r3]
 8015296:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015298:	4b1a      	ldr	r3, [pc, #104]	@ (8015304 <HAL_RCC_OscConfig+0x350>)
 801529a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801529c:	4b1a      	ldr	r3, [pc, #104]	@ (8015308 <HAL_RCC_OscConfig+0x354>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2513      	movs	r5, #19
 80152a2:	197c      	adds	r4, r7, r5
 80152a4:	0018      	movs	r0, r3
 80152a6:	f7f9 fd0f 	bl	800ecc8 <HAL_InitTick>
 80152aa:	0003      	movs	r3, r0
 80152ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80152ae:	197b      	adds	r3, r7, r5
 80152b0:	781b      	ldrb	r3, [r3, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d061      	beq.n	801537a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80152b6:	197b      	adds	r3, r7, r5
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	e244      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	69db      	ldr	r3, [r3, #28]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d040      	beq.n	8015346 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80152c4:	4b0a      	ldr	r3, [pc, #40]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80152c6:	681a      	ldr	r2, [r3, #0]
 80152c8:	4b09      	ldr	r3, [pc, #36]	@ (80152f0 <HAL_RCC_OscConfig+0x33c>)
 80152ca:	2180      	movs	r1, #128	@ 0x80
 80152cc:	0049      	lsls	r1, r1, #1
 80152ce:	430a      	orrs	r2, r1
 80152d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80152d2:	f7f9 fd3f 	bl	800ed54 <HAL_GetTick>
 80152d6:	0003      	movs	r3, r0
 80152d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80152da:	e019      	b.n	8015310 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80152dc:	f7f9 fd3a 	bl	800ed54 <HAL_GetTick>
 80152e0:	0002      	movs	r2, r0
 80152e2:	697b      	ldr	r3, [r7, #20]
 80152e4:	1ad3      	subs	r3, r2, r3
 80152e6:	2b02      	cmp	r3, #2
 80152e8:	d912      	bls.n	8015310 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80152ea:	2303      	movs	r3, #3
 80152ec:	e22b      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
 80152ee:	46c0      	nop			@ (mov r8, r8)
 80152f0:	40021000 	.word	0x40021000
 80152f4:	fffeffff 	.word	0xfffeffff
 80152f8:	fffbffff 	.word	0xfffbffff
 80152fc:	ffffe0ff 	.word	0xffffe0ff
 8015300:	08025638 	.word	0x08025638
 8015304:	200000d4 	.word	0x200000d4
 8015308:	200000e4 	.word	0x200000e4
 801530c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015310:	4bca      	ldr	r3, [pc, #808]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	2380      	movs	r3, #128	@ 0x80
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	4013      	ands	r3, r2
 801531a:	d0df      	beq.n	80152dc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801531c:	4bc7      	ldr	r3, [pc, #796]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	4ac7      	ldr	r2, [pc, #796]	@ (8015640 <HAL_RCC_OscConfig+0x68c>)
 8015322:	4013      	ands	r3, r2
 8015324:	0019      	movs	r1, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801532a:	4bc4      	ldr	r3, [pc, #784]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801532c:	430a      	orrs	r2, r1
 801532e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015330:	4bc2      	ldr	r3, [pc, #776]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	021b      	lsls	r3, r3, #8
 8015336:	0a19      	lsrs	r1, r3, #8
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6a1b      	ldr	r3, [r3, #32]
 801533c:	061a      	lsls	r2, r3, #24
 801533e:	4bbf      	ldr	r3, [pc, #764]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015340:	430a      	orrs	r2, r1
 8015342:	605a      	str	r2, [r3, #4]
 8015344:	e019      	b.n	801537a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015346:	4bbd      	ldr	r3, [pc, #756]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	4bbc      	ldr	r3, [pc, #752]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801534c:	49bd      	ldr	r1, [pc, #756]	@ (8015644 <HAL_RCC_OscConfig+0x690>)
 801534e:	400a      	ands	r2, r1
 8015350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015352:	f7f9 fcff 	bl	800ed54 <HAL_GetTick>
 8015356:	0003      	movs	r3, r0
 8015358:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801535a:	e008      	b.n	801536e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801535c:	f7f9 fcfa 	bl	800ed54 <HAL_GetTick>
 8015360:	0002      	movs	r2, r0
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	1ad3      	subs	r3, r2, r3
 8015366:	2b02      	cmp	r3, #2
 8015368:	d901      	bls.n	801536e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801536a:	2303      	movs	r3, #3
 801536c:	e1eb      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801536e:	4bb3      	ldr	r3, [pc, #716]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015370:	681a      	ldr	r2, [r3, #0]
 8015372:	2380      	movs	r3, #128	@ 0x80
 8015374:	009b      	lsls	r3, r3, #2
 8015376:	4013      	ands	r3, r2
 8015378:	d1f0      	bne.n	801535c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2208      	movs	r2, #8
 8015380:	4013      	ands	r3, r2
 8015382:	d036      	beq.n	80153f2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	695b      	ldr	r3, [r3, #20]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d019      	beq.n	80153c0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801538c:	4bab      	ldr	r3, [pc, #684]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801538e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015390:	4baa      	ldr	r3, [pc, #680]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015392:	2101      	movs	r1, #1
 8015394:	430a      	orrs	r2, r1
 8015396:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015398:	f7f9 fcdc 	bl	800ed54 <HAL_GetTick>
 801539c:	0003      	movs	r3, r0
 801539e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80153a0:	e008      	b.n	80153b4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80153a2:	f7f9 fcd7 	bl	800ed54 <HAL_GetTick>
 80153a6:	0002      	movs	r2, r0
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	1ad3      	subs	r3, r2, r3
 80153ac:	2b02      	cmp	r3, #2
 80153ae:	d901      	bls.n	80153b4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80153b0:	2303      	movs	r3, #3
 80153b2:	e1c8      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80153b4:	4ba1      	ldr	r3, [pc, #644]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80153b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153b8:	2202      	movs	r2, #2
 80153ba:	4013      	ands	r3, r2
 80153bc:	d0f1      	beq.n	80153a2 <HAL_RCC_OscConfig+0x3ee>
 80153be:	e018      	b.n	80153f2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80153c0:	4b9e      	ldr	r3, [pc, #632]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80153c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153c4:	4b9d      	ldr	r3, [pc, #628]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80153c6:	2101      	movs	r1, #1
 80153c8:	438a      	bics	r2, r1
 80153ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80153cc:	f7f9 fcc2 	bl	800ed54 <HAL_GetTick>
 80153d0:	0003      	movs	r3, r0
 80153d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80153d4:	e008      	b.n	80153e8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80153d6:	f7f9 fcbd 	bl	800ed54 <HAL_GetTick>
 80153da:	0002      	movs	r2, r0
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	2b02      	cmp	r3, #2
 80153e2:	d901      	bls.n	80153e8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80153e4:	2303      	movs	r3, #3
 80153e6:	e1ae      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80153e8:	4b94      	ldr	r3, [pc, #592]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80153ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153ec:	2202      	movs	r2, #2
 80153ee:	4013      	ands	r3, r2
 80153f0:	d1f1      	bne.n	80153d6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2204      	movs	r2, #4
 80153f8:	4013      	ands	r3, r2
 80153fa:	d100      	bne.n	80153fe <HAL_RCC_OscConfig+0x44a>
 80153fc:	e0ae      	b.n	801555c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80153fe:	2023      	movs	r0, #35	@ 0x23
 8015400:	183b      	adds	r3, r7, r0
 8015402:	2200      	movs	r2, #0
 8015404:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015406:	4b8d      	ldr	r3, [pc, #564]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801540a:	2380      	movs	r3, #128	@ 0x80
 801540c:	055b      	lsls	r3, r3, #21
 801540e:	4013      	ands	r3, r2
 8015410:	d109      	bne.n	8015426 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015412:	4b8a      	ldr	r3, [pc, #552]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015416:	4b89      	ldr	r3, [pc, #548]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015418:	2180      	movs	r1, #128	@ 0x80
 801541a:	0549      	lsls	r1, r1, #21
 801541c:	430a      	orrs	r2, r1
 801541e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015420:	183b      	adds	r3, r7, r0
 8015422:	2201      	movs	r2, #1
 8015424:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015426:	4b88      	ldr	r3, [pc, #544]	@ (8015648 <HAL_RCC_OscConfig+0x694>)
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	2380      	movs	r3, #128	@ 0x80
 801542c:	005b      	lsls	r3, r3, #1
 801542e:	4013      	ands	r3, r2
 8015430:	d11a      	bne.n	8015468 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015432:	4b85      	ldr	r3, [pc, #532]	@ (8015648 <HAL_RCC_OscConfig+0x694>)
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	4b84      	ldr	r3, [pc, #528]	@ (8015648 <HAL_RCC_OscConfig+0x694>)
 8015438:	2180      	movs	r1, #128	@ 0x80
 801543a:	0049      	lsls	r1, r1, #1
 801543c:	430a      	orrs	r2, r1
 801543e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015440:	f7f9 fc88 	bl	800ed54 <HAL_GetTick>
 8015444:	0003      	movs	r3, r0
 8015446:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015448:	e008      	b.n	801545c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801544a:	f7f9 fc83 	bl	800ed54 <HAL_GetTick>
 801544e:	0002      	movs	r2, r0
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	1ad3      	subs	r3, r2, r3
 8015454:	2b64      	cmp	r3, #100	@ 0x64
 8015456:	d901      	bls.n	801545c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015458:	2303      	movs	r3, #3
 801545a:	e174      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801545c:	4b7a      	ldr	r3, [pc, #488]	@ (8015648 <HAL_RCC_OscConfig+0x694>)
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	2380      	movs	r3, #128	@ 0x80
 8015462:	005b      	lsls	r3, r3, #1
 8015464:	4013      	ands	r3, r2
 8015466:	d0f0      	beq.n	801544a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	689a      	ldr	r2, [r3, #8]
 801546c:	2380      	movs	r3, #128	@ 0x80
 801546e:	005b      	lsls	r3, r3, #1
 8015470:	429a      	cmp	r2, r3
 8015472:	d107      	bne.n	8015484 <HAL_RCC_OscConfig+0x4d0>
 8015474:	4b71      	ldr	r3, [pc, #452]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015478:	4b70      	ldr	r3, [pc, #448]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801547a:	2180      	movs	r1, #128	@ 0x80
 801547c:	0049      	lsls	r1, r1, #1
 801547e:	430a      	orrs	r2, r1
 8015480:	651a      	str	r2, [r3, #80]	@ 0x50
 8015482:	e031      	b.n	80154e8 <HAL_RCC_OscConfig+0x534>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10c      	bne.n	80154a6 <HAL_RCC_OscConfig+0x4f2>
 801548c:	4b6b      	ldr	r3, [pc, #428]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801548e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015490:	4b6a      	ldr	r3, [pc, #424]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015492:	496c      	ldr	r1, [pc, #432]	@ (8015644 <HAL_RCC_OscConfig+0x690>)
 8015494:	400a      	ands	r2, r1
 8015496:	651a      	str	r2, [r3, #80]	@ 0x50
 8015498:	4b68      	ldr	r3, [pc, #416]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801549a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801549c:	4b67      	ldr	r3, [pc, #412]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801549e:	496b      	ldr	r1, [pc, #428]	@ (801564c <HAL_RCC_OscConfig+0x698>)
 80154a0:	400a      	ands	r2, r1
 80154a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80154a4:	e020      	b.n	80154e8 <HAL_RCC_OscConfig+0x534>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	689a      	ldr	r2, [r3, #8]
 80154aa:	23a0      	movs	r3, #160	@ 0xa0
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d10e      	bne.n	80154d0 <HAL_RCC_OscConfig+0x51c>
 80154b2:	4b62      	ldr	r3, [pc, #392]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154b6:	4b61      	ldr	r3, [pc, #388]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154b8:	2180      	movs	r1, #128	@ 0x80
 80154ba:	00c9      	lsls	r1, r1, #3
 80154bc:	430a      	orrs	r2, r1
 80154be:	651a      	str	r2, [r3, #80]	@ 0x50
 80154c0:	4b5e      	ldr	r3, [pc, #376]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154c4:	4b5d      	ldr	r3, [pc, #372]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154c6:	2180      	movs	r1, #128	@ 0x80
 80154c8:	0049      	lsls	r1, r1, #1
 80154ca:	430a      	orrs	r2, r1
 80154cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80154ce:	e00b      	b.n	80154e8 <HAL_RCC_OscConfig+0x534>
 80154d0:	4b5a      	ldr	r3, [pc, #360]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154d4:	4b59      	ldr	r3, [pc, #356]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154d6:	495b      	ldr	r1, [pc, #364]	@ (8015644 <HAL_RCC_OscConfig+0x690>)
 80154d8:	400a      	ands	r2, r1
 80154da:	651a      	str	r2, [r3, #80]	@ 0x50
 80154dc:	4b57      	ldr	r3, [pc, #348]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154e0:	4b56      	ldr	r3, [pc, #344]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80154e2:	495a      	ldr	r1, [pc, #360]	@ (801564c <HAL_RCC_OscConfig+0x698>)
 80154e4:	400a      	ands	r2, r1
 80154e6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	689b      	ldr	r3, [r3, #8]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d015      	beq.n	801551c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80154f0:	f7f9 fc30 	bl	800ed54 <HAL_GetTick>
 80154f4:	0003      	movs	r3, r0
 80154f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80154f8:	e009      	b.n	801550e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80154fa:	f7f9 fc2b 	bl	800ed54 <HAL_GetTick>
 80154fe:	0002      	movs	r2, r0
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	1ad3      	subs	r3, r2, r3
 8015504:	4a52      	ldr	r2, [pc, #328]	@ (8015650 <HAL_RCC_OscConfig+0x69c>)
 8015506:	4293      	cmp	r3, r2
 8015508:	d901      	bls.n	801550e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801550a:	2303      	movs	r3, #3
 801550c:	e11b      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801550e:	4b4b      	ldr	r3, [pc, #300]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015512:	2380      	movs	r3, #128	@ 0x80
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4013      	ands	r3, r2
 8015518:	d0ef      	beq.n	80154fa <HAL_RCC_OscConfig+0x546>
 801551a:	e014      	b.n	8015546 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801551c:	f7f9 fc1a 	bl	800ed54 <HAL_GetTick>
 8015520:	0003      	movs	r3, r0
 8015522:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015524:	e009      	b.n	801553a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015526:	f7f9 fc15 	bl	800ed54 <HAL_GetTick>
 801552a:	0002      	movs	r2, r0
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	1ad3      	subs	r3, r2, r3
 8015530:	4a47      	ldr	r2, [pc, #284]	@ (8015650 <HAL_RCC_OscConfig+0x69c>)
 8015532:	4293      	cmp	r3, r2
 8015534:	d901      	bls.n	801553a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015536:	2303      	movs	r3, #3
 8015538:	e105      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801553a:	4b40      	ldr	r3, [pc, #256]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801553c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801553e:	2380      	movs	r3, #128	@ 0x80
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	4013      	ands	r3, r2
 8015544:	d1ef      	bne.n	8015526 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015546:	2323      	movs	r3, #35	@ 0x23
 8015548:	18fb      	adds	r3, r7, r3
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	2b01      	cmp	r3, #1
 801554e:	d105      	bne.n	801555c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015550:	4b3a      	ldr	r3, [pc, #232]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015554:	4b39      	ldr	r3, [pc, #228]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015556:	493f      	ldr	r1, [pc, #252]	@ (8015654 <HAL_RCC_OscConfig+0x6a0>)
 8015558:	400a      	ands	r2, r1
 801555a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2220      	movs	r2, #32
 8015562:	4013      	ands	r3, r2
 8015564:	d049      	beq.n	80155fa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	699b      	ldr	r3, [r3, #24]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d026      	beq.n	80155bc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801556e:	4b33      	ldr	r3, [pc, #204]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015570:	689a      	ldr	r2, [r3, #8]
 8015572:	4b32      	ldr	r3, [pc, #200]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015574:	2101      	movs	r1, #1
 8015576:	430a      	orrs	r2, r1
 8015578:	609a      	str	r2, [r3, #8]
 801557a:	4b30      	ldr	r3, [pc, #192]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801557c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801557e:	4b2f      	ldr	r3, [pc, #188]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015580:	2101      	movs	r1, #1
 8015582:	430a      	orrs	r2, r1
 8015584:	635a      	str	r2, [r3, #52]	@ 0x34
 8015586:	4b34      	ldr	r3, [pc, #208]	@ (8015658 <HAL_RCC_OscConfig+0x6a4>)
 8015588:	6a1a      	ldr	r2, [r3, #32]
 801558a:	4b33      	ldr	r3, [pc, #204]	@ (8015658 <HAL_RCC_OscConfig+0x6a4>)
 801558c:	2180      	movs	r1, #128	@ 0x80
 801558e:	0189      	lsls	r1, r1, #6
 8015590:	430a      	orrs	r2, r1
 8015592:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015594:	f7f9 fbde 	bl	800ed54 <HAL_GetTick>
 8015598:	0003      	movs	r3, r0
 801559a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801559c:	e008      	b.n	80155b0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801559e:	f7f9 fbd9 	bl	800ed54 <HAL_GetTick>
 80155a2:	0002      	movs	r2, r0
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	1ad3      	subs	r3, r2, r3
 80155a8:	2b02      	cmp	r3, #2
 80155aa:	d901      	bls.n	80155b0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80155ac:	2303      	movs	r3, #3
 80155ae:	e0ca      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80155b0:	4b22      	ldr	r3, [pc, #136]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80155b2:	689b      	ldr	r3, [r3, #8]
 80155b4:	2202      	movs	r2, #2
 80155b6:	4013      	ands	r3, r2
 80155b8:	d0f1      	beq.n	801559e <HAL_RCC_OscConfig+0x5ea>
 80155ba:	e01e      	b.n	80155fa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80155bc:	4b1f      	ldr	r3, [pc, #124]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80155be:	689a      	ldr	r2, [r3, #8]
 80155c0:	4b1e      	ldr	r3, [pc, #120]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80155c2:	2101      	movs	r1, #1
 80155c4:	438a      	bics	r2, r1
 80155c6:	609a      	str	r2, [r3, #8]
 80155c8:	4b23      	ldr	r3, [pc, #140]	@ (8015658 <HAL_RCC_OscConfig+0x6a4>)
 80155ca:	6a1a      	ldr	r2, [r3, #32]
 80155cc:	4b22      	ldr	r3, [pc, #136]	@ (8015658 <HAL_RCC_OscConfig+0x6a4>)
 80155ce:	4923      	ldr	r1, [pc, #140]	@ (801565c <HAL_RCC_OscConfig+0x6a8>)
 80155d0:	400a      	ands	r2, r1
 80155d2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155d4:	f7f9 fbbe 	bl	800ed54 <HAL_GetTick>
 80155d8:	0003      	movs	r3, r0
 80155da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80155dc:	e008      	b.n	80155f0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80155de:	f7f9 fbb9 	bl	800ed54 <HAL_GetTick>
 80155e2:	0002      	movs	r2, r0
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	1ad3      	subs	r3, r2, r3
 80155e8:	2b02      	cmp	r3, #2
 80155ea:	d901      	bls.n	80155f0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80155ec:	2303      	movs	r3, #3
 80155ee:	e0aa      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80155f0:	4b12      	ldr	r3, [pc, #72]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 80155f2:	689b      	ldr	r3, [r3, #8]
 80155f4:	2202      	movs	r2, #2
 80155f6:	4013      	ands	r3, r2
 80155f8:	d1f1      	bne.n	80155de <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d100      	bne.n	8015604 <HAL_RCC_OscConfig+0x650>
 8015602:	e09f      	b.n	8015744 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015604:	69fb      	ldr	r3, [r7, #28]
 8015606:	2b0c      	cmp	r3, #12
 8015608:	d100      	bne.n	801560c <HAL_RCC_OscConfig+0x658>
 801560a:	e078      	b.n	80156fe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015610:	2b02      	cmp	r3, #2
 8015612:	d159      	bne.n	80156c8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015614:	4b09      	ldr	r3, [pc, #36]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	4b08      	ldr	r3, [pc, #32]	@ (801563c <HAL_RCC_OscConfig+0x688>)
 801561a:	4911      	ldr	r1, [pc, #68]	@ (8015660 <HAL_RCC_OscConfig+0x6ac>)
 801561c:	400a      	ands	r2, r1
 801561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015620:	f7f9 fb98 	bl	800ed54 <HAL_GetTick>
 8015624:	0003      	movs	r3, r0
 8015626:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015628:	e01c      	b.n	8015664 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801562a:	f7f9 fb93 	bl	800ed54 <HAL_GetTick>
 801562e:	0002      	movs	r2, r0
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	1ad3      	subs	r3, r2, r3
 8015634:	2b02      	cmp	r3, #2
 8015636:	d915      	bls.n	8015664 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015638:	2303      	movs	r3, #3
 801563a:	e084      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
 801563c:	40021000 	.word	0x40021000
 8015640:	ffff1fff 	.word	0xffff1fff
 8015644:	fffffeff 	.word	0xfffffeff
 8015648:	40007000 	.word	0x40007000
 801564c:	fffffbff 	.word	0xfffffbff
 8015650:	00001388 	.word	0x00001388
 8015654:	efffffff 	.word	0xefffffff
 8015658:	40010000 	.word	0x40010000
 801565c:	ffffdfff 	.word	0xffffdfff
 8015660:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015664:	4b3a      	ldr	r3, [pc, #232]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 8015666:	681a      	ldr	r2, [r3, #0]
 8015668:	2380      	movs	r3, #128	@ 0x80
 801566a:	049b      	lsls	r3, r3, #18
 801566c:	4013      	ands	r3, r2
 801566e:	d1dc      	bne.n	801562a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015670:	4b37      	ldr	r3, [pc, #220]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	4a37      	ldr	r2, [pc, #220]	@ (8015754 <HAL_RCC_OscConfig+0x7a0>)
 8015676:	4013      	ands	r3, r2
 8015678:	0019      	movs	r1, r3
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015682:	431a      	orrs	r2, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015688:	431a      	orrs	r2, r3
 801568a:	4b31      	ldr	r3, [pc, #196]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 801568c:	430a      	orrs	r2, r1
 801568e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015690:	4b2f      	ldr	r3, [pc, #188]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 8015692:	681a      	ldr	r2, [r3, #0]
 8015694:	4b2e      	ldr	r3, [pc, #184]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 8015696:	2180      	movs	r1, #128	@ 0x80
 8015698:	0449      	lsls	r1, r1, #17
 801569a:	430a      	orrs	r2, r1
 801569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801569e:	f7f9 fb59 	bl	800ed54 <HAL_GetTick>
 80156a2:	0003      	movs	r3, r0
 80156a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80156a6:	e008      	b.n	80156ba <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80156a8:	f7f9 fb54 	bl	800ed54 <HAL_GetTick>
 80156ac:	0002      	movs	r2, r0
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	1ad3      	subs	r3, r2, r3
 80156b2:	2b02      	cmp	r3, #2
 80156b4:	d901      	bls.n	80156ba <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80156b6:	2303      	movs	r3, #3
 80156b8:	e045      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80156ba:	4b25      	ldr	r3, [pc, #148]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	2380      	movs	r3, #128	@ 0x80
 80156c0:	049b      	lsls	r3, r3, #18
 80156c2:	4013      	ands	r3, r2
 80156c4:	d0f0      	beq.n	80156a8 <HAL_RCC_OscConfig+0x6f4>
 80156c6:	e03d      	b.n	8015744 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80156c8:	4b21      	ldr	r3, [pc, #132]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	4b20      	ldr	r3, [pc, #128]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 80156ce:	4922      	ldr	r1, [pc, #136]	@ (8015758 <HAL_RCC_OscConfig+0x7a4>)
 80156d0:	400a      	ands	r2, r1
 80156d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156d4:	f7f9 fb3e 	bl	800ed54 <HAL_GetTick>
 80156d8:	0003      	movs	r3, r0
 80156da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80156dc:	e008      	b.n	80156f0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80156de:	f7f9 fb39 	bl	800ed54 <HAL_GetTick>
 80156e2:	0002      	movs	r2, r0
 80156e4:	697b      	ldr	r3, [r7, #20]
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	2b02      	cmp	r3, #2
 80156ea:	d901      	bls.n	80156f0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80156ec:	2303      	movs	r3, #3
 80156ee:	e02a      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80156f0:	4b17      	ldr	r3, [pc, #92]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	2380      	movs	r3, #128	@ 0x80
 80156f6:	049b      	lsls	r3, r3, #18
 80156f8:	4013      	ands	r3, r2
 80156fa:	d1f0      	bne.n	80156de <HAL_RCC_OscConfig+0x72a>
 80156fc:	e022      	b.n	8015744 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015702:	2b01      	cmp	r3, #1
 8015704:	d101      	bne.n	801570a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015706:	2301      	movs	r3, #1
 8015708:	e01d      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801570a:	4b11      	ldr	r3, [pc, #68]	@ (8015750 <HAL_RCC_OscConfig+0x79c>)
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015710:	69ba      	ldr	r2, [r7, #24]
 8015712:	2380      	movs	r3, #128	@ 0x80
 8015714:	025b      	lsls	r3, r3, #9
 8015716:	401a      	ands	r2, r3
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801571c:	429a      	cmp	r2, r3
 801571e:	d10f      	bne.n	8015740 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015720:	69ba      	ldr	r2, [r7, #24]
 8015722:	23f0      	movs	r3, #240	@ 0xf0
 8015724:	039b      	lsls	r3, r3, #14
 8015726:	401a      	ands	r2, r3
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801572c:	429a      	cmp	r2, r3
 801572e:	d107      	bne.n	8015740 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015730:	69ba      	ldr	r2, [r7, #24]
 8015732:	23c0      	movs	r3, #192	@ 0xc0
 8015734:	041b      	lsls	r3, r3, #16
 8015736:	401a      	ands	r2, r3
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801573c:	429a      	cmp	r2, r3
 801573e:	d001      	beq.n	8015744 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015740:	2301      	movs	r3, #1
 8015742:	e000      	b.n	8015746 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015744:	2300      	movs	r3, #0
}
 8015746:	0018      	movs	r0, r3
 8015748:	46bd      	mov	sp, r7
 801574a:	b00a      	add	sp, #40	@ 0x28
 801574c:	bdb0      	pop	{r4, r5, r7, pc}
 801574e:	46c0      	nop			@ (mov r8, r8)
 8015750:	40021000 	.word	0x40021000
 8015754:	ff02ffff 	.word	0xff02ffff
 8015758:	feffffff 	.word	0xfeffffff

0801575c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801575c:	b5b0      	push	{r4, r5, r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d101      	bne.n	8015770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801576c:	2301      	movs	r3, #1
 801576e:	e128      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015770:	4b96      	ldr	r3, [pc, #600]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2201      	movs	r2, #1
 8015776:	4013      	ands	r3, r2
 8015778:	683a      	ldr	r2, [r7, #0]
 801577a:	429a      	cmp	r2, r3
 801577c:	d91e      	bls.n	80157bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801577e:	4b93      	ldr	r3, [pc, #588]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2201      	movs	r2, #1
 8015784:	4393      	bics	r3, r2
 8015786:	0019      	movs	r1, r3
 8015788:	4b90      	ldr	r3, [pc, #576]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 801578a:	683a      	ldr	r2, [r7, #0]
 801578c:	430a      	orrs	r2, r1
 801578e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015790:	f7f9 fae0 	bl	800ed54 <HAL_GetTick>
 8015794:	0003      	movs	r3, r0
 8015796:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015798:	e009      	b.n	80157ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801579a:	f7f9 fadb 	bl	800ed54 <HAL_GetTick>
 801579e:	0002      	movs	r2, r0
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	1ad3      	subs	r3, r2, r3
 80157a4:	4a8a      	ldr	r2, [pc, #552]	@ (80159d0 <HAL_RCC_ClockConfig+0x274>)
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d901      	bls.n	80157ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80157aa:	2303      	movs	r3, #3
 80157ac:	e109      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80157ae:	4b87      	ldr	r3, [pc, #540]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2201      	movs	r2, #1
 80157b4:	4013      	ands	r3, r2
 80157b6:	683a      	ldr	r2, [r7, #0]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d1ee      	bne.n	801579a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	2202      	movs	r2, #2
 80157c2:	4013      	ands	r3, r2
 80157c4:	d009      	beq.n	80157da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80157c6:	4b83      	ldr	r3, [pc, #524]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 80157c8:	68db      	ldr	r3, [r3, #12]
 80157ca:	22f0      	movs	r2, #240	@ 0xf0
 80157cc:	4393      	bics	r3, r2
 80157ce:	0019      	movs	r1, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	689a      	ldr	r2, [r3, #8]
 80157d4:	4b7f      	ldr	r3, [pc, #508]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 80157d6:	430a      	orrs	r2, r1
 80157d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2201      	movs	r2, #1
 80157e0:	4013      	ands	r3, r2
 80157e2:	d100      	bne.n	80157e6 <HAL_RCC_ClockConfig+0x8a>
 80157e4:	e089      	b.n	80158fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	2b02      	cmp	r3, #2
 80157ec:	d107      	bne.n	80157fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80157ee:	4b79      	ldr	r3, [pc, #484]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 80157f0:	681a      	ldr	r2, [r3, #0]
 80157f2:	2380      	movs	r3, #128	@ 0x80
 80157f4:	029b      	lsls	r3, r3, #10
 80157f6:	4013      	ands	r3, r2
 80157f8:	d120      	bne.n	801583c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80157fa:	2301      	movs	r3, #1
 80157fc:	e0e1      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	2b03      	cmp	r3, #3
 8015804:	d107      	bne.n	8015816 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015806:	4b73      	ldr	r3, [pc, #460]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	2380      	movs	r3, #128	@ 0x80
 801580c:	049b      	lsls	r3, r3, #18
 801580e:	4013      	ands	r3, r2
 8015810:	d114      	bne.n	801583c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	e0d5      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d106      	bne.n	801582c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801581e:	4b6d      	ldr	r3, [pc, #436]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	2204      	movs	r2, #4
 8015824:	4013      	ands	r3, r2
 8015826:	d109      	bne.n	801583c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015828:	2301      	movs	r3, #1
 801582a:	e0ca      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801582c:	4b69      	ldr	r3, [pc, #420]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 801582e:	681a      	ldr	r2, [r3, #0]
 8015830:	2380      	movs	r3, #128	@ 0x80
 8015832:	009b      	lsls	r3, r3, #2
 8015834:	4013      	ands	r3, r2
 8015836:	d101      	bne.n	801583c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015838:	2301      	movs	r3, #1
 801583a:	e0c2      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801583c:	4b65      	ldr	r3, [pc, #404]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	2203      	movs	r2, #3
 8015842:	4393      	bics	r3, r2
 8015844:	0019      	movs	r1, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	685a      	ldr	r2, [r3, #4]
 801584a:	4b62      	ldr	r3, [pc, #392]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 801584c:	430a      	orrs	r2, r1
 801584e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015850:	f7f9 fa80 	bl	800ed54 <HAL_GetTick>
 8015854:	0003      	movs	r3, r0
 8015856:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	685b      	ldr	r3, [r3, #4]
 801585c:	2b02      	cmp	r3, #2
 801585e:	d111      	bne.n	8015884 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015860:	e009      	b.n	8015876 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015862:	f7f9 fa77 	bl	800ed54 <HAL_GetTick>
 8015866:	0002      	movs	r2, r0
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	4a58      	ldr	r2, [pc, #352]	@ (80159d0 <HAL_RCC_ClockConfig+0x274>)
 801586e:	4293      	cmp	r3, r2
 8015870:	d901      	bls.n	8015876 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8015872:	2303      	movs	r3, #3
 8015874:	e0a5      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015876:	4b57      	ldr	r3, [pc, #348]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015878:	68db      	ldr	r3, [r3, #12]
 801587a:	220c      	movs	r2, #12
 801587c:	4013      	ands	r3, r2
 801587e:	2b08      	cmp	r3, #8
 8015880:	d1ef      	bne.n	8015862 <HAL_RCC_ClockConfig+0x106>
 8015882:	e03a      	b.n	80158fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	2b03      	cmp	r3, #3
 801588a:	d111      	bne.n	80158b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801588c:	e009      	b.n	80158a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801588e:	f7f9 fa61 	bl	800ed54 <HAL_GetTick>
 8015892:	0002      	movs	r2, r0
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	4a4d      	ldr	r2, [pc, #308]	@ (80159d0 <HAL_RCC_ClockConfig+0x274>)
 801589a:	4293      	cmp	r3, r2
 801589c:	d901      	bls.n	80158a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801589e:	2303      	movs	r3, #3
 80158a0:	e08f      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80158a2:	4b4c      	ldr	r3, [pc, #304]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	220c      	movs	r2, #12
 80158a8:	4013      	ands	r3, r2
 80158aa:	2b0c      	cmp	r3, #12
 80158ac:	d1ef      	bne.n	801588e <HAL_RCC_ClockConfig+0x132>
 80158ae:	e024      	b.n	80158fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	2b01      	cmp	r3, #1
 80158b6:	d11b      	bne.n	80158f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80158b8:	e009      	b.n	80158ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158ba:	f7f9 fa4b 	bl	800ed54 <HAL_GetTick>
 80158be:	0002      	movs	r2, r0
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	1ad3      	subs	r3, r2, r3
 80158c4:	4a42      	ldr	r2, [pc, #264]	@ (80159d0 <HAL_RCC_ClockConfig+0x274>)
 80158c6:	4293      	cmp	r3, r2
 80158c8:	d901      	bls.n	80158ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80158ca:	2303      	movs	r3, #3
 80158cc:	e079      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80158ce:	4b41      	ldr	r3, [pc, #260]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 80158d0:	68db      	ldr	r3, [r3, #12]
 80158d2:	220c      	movs	r2, #12
 80158d4:	4013      	ands	r3, r2
 80158d6:	2b04      	cmp	r3, #4
 80158d8:	d1ef      	bne.n	80158ba <HAL_RCC_ClockConfig+0x15e>
 80158da:	e00e      	b.n	80158fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158dc:	f7f9 fa3a 	bl	800ed54 <HAL_GetTick>
 80158e0:	0002      	movs	r2, r0
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	1ad3      	subs	r3, r2, r3
 80158e6:	4a3a      	ldr	r2, [pc, #232]	@ (80159d0 <HAL_RCC_ClockConfig+0x274>)
 80158e8:	4293      	cmp	r3, r2
 80158ea:	d901      	bls.n	80158f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80158ec:	2303      	movs	r3, #3
 80158ee:	e068      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80158f0:	4b38      	ldr	r3, [pc, #224]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	220c      	movs	r2, #12
 80158f6:	4013      	ands	r3, r2
 80158f8:	d1f0      	bne.n	80158dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80158fa:	4b34      	ldr	r3, [pc, #208]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2201      	movs	r2, #1
 8015900:	4013      	ands	r3, r2
 8015902:	683a      	ldr	r2, [r7, #0]
 8015904:	429a      	cmp	r2, r3
 8015906:	d21e      	bcs.n	8015946 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015908:	4b30      	ldr	r3, [pc, #192]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2201      	movs	r2, #1
 801590e:	4393      	bics	r3, r2
 8015910:	0019      	movs	r1, r3
 8015912:	4b2e      	ldr	r3, [pc, #184]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 8015914:	683a      	ldr	r2, [r7, #0]
 8015916:	430a      	orrs	r2, r1
 8015918:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801591a:	f7f9 fa1b 	bl	800ed54 <HAL_GetTick>
 801591e:	0003      	movs	r3, r0
 8015920:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015922:	e009      	b.n	8015938 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015924:	f7f9 fa16 	bl	800ed54 <HAL_GetTick>
 8015928:	0002      	movs	r2, r0
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	1ad3      	subs	r3, r2, r3
 801592e:	4a28      	ldr	r2, [pc, #160]	@ (80159d0 <HAL_RCC_ClockConfig+0x274>)
 8015930:	4293      	cmp	r3, r2
 8015932:	d901      	bls.n	8015938 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015934:	2303      	movs	r3, #3
 8015936:	e044      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015938:	4b24      	ldr	r3, [pc, #144]	@ (80159cc <HAL_RCC_ClockConfig+0x270>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2201      	movs	r2, #1
 801593e:	4013      	ands	r3, r2
 8015940:	683a      	ldr	r2, [r7, #0]
 8015942:	429a      	cmp	r2, r3
 8015944:	d1ee      	bne.n	8015924 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	2204      	movs	r2, #4
 801594c:	4013      	ands	r3, r2
 801594e:	d009      	beq.n	8015964 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015950:	4b20      	ldr	r3, [pc, #128]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015952:	68db      	ldr	r3, [r3, #12]
 8015954:	4a20      	ldr	r2, [pc, #128]	@ (80159d8 <HAL_RCC_ClockConfig+0x27c>)
 8015956:	4013      	ands	r3, r2
 8015958:	0019      	movs	r1, r3
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	68da      	ldr	r2, [r3, #12]
 801595e:	4b1d      	ldr	r3, [pc, #116]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015960:	430a      	orrs	r2, r1
 8015962:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	2208      	movs	r2, #8
 801596a:	4013      	ands	r3, r2
 801596c:	d00a      	beq.n	8015984 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801596e:	4b19      	ldr	r3, [pc, #100]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015970:	68db      	ldr	r3, [r3, #12]
 8015972:	4a1a      	ldr	r2, [pc, #104]	@ (80159dc <HAL_RCC_ClockConfig+0x280>)
 8015974:	4013      	ands	r3, r2
 8015976:	0019      	movs	r1, r3
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	691b      	ldr	r3, [r3, #16]
 801597c:	00da      	lsls	r2, r3, #3
 801597e:	4b15      	ldr	r3, [pc, #84]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 8015980:	430a      	orrs	r2, r1
 8015982:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015984:	f000 f832 	bl	80159ec <HAL_RCC_GetSysClockFreq>
 8015988:	0001      	movs	r1, r0
 801598a:	4b12      	ldr	r3, [pc, #72]	@ (80159d4 <HAL_RCC_ClockConfig+0x278>)
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	091b      	lsrs	r3, r3, #4
 8015990:	220f      	movs	r2, #15
 8015992:	4013      	ands	r3, r2
 8015994:	4a12      	ldr	r2, [pc, #72]	@ (80159e0 <HAL_RCC_ClockConfig+0x284>)
 8015996:	5cd3      	ldrb	r3, [r2, r3]
 8015998:	000a      	movs	r2, r1
 801599a:	40da      	lsrs	r2, r3
 801599c:	4b11      	ldr	r3, [pc, #68]	@ (80159e4 <HAL_RCC_ClockConfig+0x288>)
 801599e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80159a0:	4b11      	ldr	r3, [pc, #68]	@ (80159e8 <HAL_RCC_ClockConfig+0x28c>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	250b      	movs	r5, #11
 80159a6:	197c      	adds	r4, r7, r5
 80159a8:	0018      	movs	r0, r3
 80159aa:	f7f9 f98d 	bl	800ecc8 <HAL_InitTick>
 80159ae:	0003      	movs	r3, r0
 80159b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80159b2:	197b      	adds	r3, r7, r5
 80159b4:	781b      	ldrb	r3, [r3, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d002      	beq.n	80159c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80159ba:	197b      	adds	r3, r7, r5
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	e000      	b.n	80159c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80159c0:	2300      	movs	r3, #0
}
 80159c2:	0018      	movs	r0, r3
 80159c4:	46bd      	mov	sp, r7
 80159c6:	b004      	add	sp, #16
 80159c8:	bdb0      	pop	{r4, r5, r7, pc}
 80159ca:	46c0      	nop			@ (mov r8, r8)
 80159cc:	40022000 	.word	0x40022000
 80159d0:	00001388 	.word	0x00001388
 80159d4:	40021000 	.word	0x40021000
 80159d8:	fffff8ff 	.word	0xfffff8ff
 80159dc:	ffffc7ff 	.word	0xffffc7ff
 80159e0:	08025638 	.word	0x08025638
 80159e4:	200000d4 	.word	0x200000d4
 80159e8:	200000e4 	.word	0x200000e4

080159ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80159ec:	b5b0      	push	{r4, r5, r7, lr}
 80159ee:	b08e      	sub	sp, #56	@ 0x38
 80159f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80159f2:	4b4c      	ldr	r3, [pc, #304]	@ (8015b24 <HAL_RCC_GetSysClockFreq+0x138>)
 80159f4:	68db      	ldr	r3, [r3, #12]
 80159f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80159f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159fa:	230c      	movs	r3, #12
 80159fc:	4013      	ands	r3, r2
 80159fe:	2b0c      	cmp	r3, #12
 8015a00:	d014      	beq.n	8015a2c <HAL_RCC_GetSysClockFreq+0x40>
 8015a02:	d900      	bls.n	8015a06 <HAL_RCC_GetSysClockFreq+0x1a>
 8015a04:	e07b      	b.n	8015afe <HAL_RCC_GetSysClockFreq+0x112>
 8015a06:	2b04      	cmp	r3, #4
 8015a08:	d002      	beq.n	8015a10 <HAL_RCC_GetSysClockFreq+0x24>
 8015a0a:	2b08      	cmp	r3, #8
 8015a0c:	d00b      	beq.n	8015a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8015a0e:	e076      	b.n	8015afe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015a10:	4b44      	ldr	r3, [pc, #272]	@ (8015b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2210      	movs	r2, #16
 8015a16:	4013      	ands	r3, r2
 8015a18:	d002      	beq.n	8015a20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015a1a:	4b43      	ldr	r3, [pc, #268]	@ (8015b28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015a1c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015a1e:	e07c      	b.n	8015b1a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015a20:	4b42      	ldr	r3, [pc, #264]	@ (8015b2c <HAL_RCC_GetSysClockFreq+0x140>)
 8015a22:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a24:	e079      	b.n	8015b1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015a26:	4b42      	ldr	r3, [pc, #264]	@ (8015b30 <HAL_RCC_GetSysClockFreq+0x144>)
 8015a28:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a2a:	e076      	b.n	8015b1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a2e:	0c9a      	lsrs	r2, r3, #18
 8015a30:	230f      	movs	r3, #15
 8015a32:	401a      	ands	r2, r3
 8015a34:	4b3f      	ldr	r3, [pc, #252]	@ (8015b34 <HAL_RCC_GetSysClockFreq+0x148>)
 8015a36:	5c9b      	ldrb	r3, [r3, r2]
 8015a38:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3c:	0d9a      	lsrs	r2, r3, #22
 8015a3e:	2303      	movs	r3, #3
 8015a40:	4013      	ands	r3, r2
 8015a42:	3301      	adds	r3, #1
 8015a44:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015a46:	4b37      	ldr	r3, [pc, #220]	@ (8015b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a48:	68da      	ldr	r2, [r3, #12]
 8015a4a:	2380      	movs	r3, #128	@ 0x80
 8015a4c:	025b      	lsls	r3, r3, #9
 8015a4e:	4013      	ands	r3, r2
 8015a50:	d01a      	beq.n	8015a88 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a54:	61bb      	str	r3, [r7, #24]
 8015a56:	2300      	movs	r3, #0
 8015a58:	61fb      	str	r3, [r7, #28]
 8015a5a:	4a35      	ldr	r2, [pc, #212]	@ (8015b30 <HAL_RCC_GetSysClockFreq+0x144>)
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	69b8      	ldr	r0, [r7, #24]
 8015a60:	69f9      	ldr	r1, [r7, #28]
 8015a62:	f7ea fdad 	bl	80005c0 <__aeabi_lmul>
 8015a66:	0002      	movs	r2, r0
 8015a68:	000b      	movs	r3, r1
 8015a6a:	0010      	movs	r0, r2
 8015a6c:	0019      	movs	r1, r3
 8015a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a70:	613b      	str	r3, [r7, #16]
 8015a72:	2300      	movs	r3, #0
 8015a74:	617b      	str	r3, [r7, #20]
 8015a76:	693a      	ldr	r2, [r7, #16]
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	f7ea fd81 	bl	8000580 <__aeabi_uldivmod>
 8015a7e:	0002      	movs	r2, r0
 8015a80:	000b      	movs	r3, r1
 8015a82:	0013      	movs	r3, r2
 8015a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8015a86:	e037      	b.n	8015af8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015a88:	4b26      	ldr	r3, [pc, #152]	@ (8015b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2210      	movs	r2, #16
 8015a8e:	4013      	ands	r3, r2
 8015a90:	d01a      	beq.n	8015ac8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a94:	60bb      	str	r3, [r7, #8]
 8015a96:	2300      	movs	r3, #0
 8015a98:	60fb      	str	r3, [r7, #12]
 8015a9a:	4a23      	ldr	r2, [pc, #140]	@ (8015b28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	68b8      	ldr	r0, [r7, #8]
 8015aa0:	68f9      	ldr	r1, [r7, #12]
 8015aa2:	f7ea fd8d 	bl	80005c0 <__aeabi_lmul>
 8015aa6:	0002      	movs	r2, r0
 8015aa8:	000b      	movs	r3, r1
 8015aaa:	0010      	movs	r0, r2
 8015aac:	0019      	movs	r1, r3
 8015aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab0:	603b      	str	r3, [r7, #0]
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	607b      	str	r3, [r7, #4]
 8015ab6:	683a      	ldr	r2, [r7, #0]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f7ea fd61 	bl	8000580 <__aeabi_uldivmod>
 8015abe:	0002      	movs	r2, r0
 8015ac0:	000b      	movs	r3, r1
 8015ac2:	0013      	movs	r3, r2
 8015ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ac6:	e017      	b.n	8015af8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aca:	0018      	movs	r0, r3
 8015acc:	2300      	movs	r3, #0
 8015ace:	0019      	movs	r1, r3
 8015ad0:	4a16      	ldr	r2, [pc, #88]	@ (8015b2c <HAL_RCC_GetSysClockFreq+0x140>)
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	f7ea fd74 	bl	80005c0 <__aeabi_lmul>
 8015ad8:	0002      	movs	r2, r0
 8015ada:	000b      	movs	r3, r1
 8015adc:	0010      	movs	r0, r2
 8015ade:	0019      	movs	r1, r3
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ae2:	001c      	movs	r4, r3
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	001d      	movs	r5, r3
 8015ae8:	0022      	movs	r2, r4
 8015aea:	002b      	movs	r3, r5
 8015aec:	f7ea fd48 	bl	8000580 <__aeabi_uldivmod>
 8015af0:	0002      	movs	r2, r0
 8015af2:	000b      	movs	r3, r1
 8015af4:	0013      	movs	r3, r2
 8015af6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015afa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015afc:	e00d      	b.n	8015b1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015afe:	4b09      	ldr	r3, [pc, #36]	@ (8015b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	0b5b      	lsrs	r3, r3, #13
 8015b04:	2207      	movs	r2, #7
 8015b06:	4013      	ands	r3, r2
 8015b08:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015b0a:	6a3b      	ldr	r3, [r7, #32]
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	2280      	movs	r2, #128	@ 0x80
 8015b10:	0212      	lsls	r2, r2, #8
 8015b12:	409a      	lsls	r2, r3
 8015b14:	0013      	movs	r3, r2
 8015b16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015b18:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015b1c:	0018      	movs	r0, r3
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	b00e      	add	sp, #56	@ 0x38
 8015b22:	bdb0      	pop	{r4, r5, r7, pc}
 8015b24:	40021000 	.word	0x40021000
 8015b28:	003d0900 	.word	0x003d0900
 8015b2c:	00f42400 	.word	0x00f42400
 8015b30:	007a1200 	.word	0x007a1200
 8015b34:	08025650 	.word	0x08025650

08015b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015b3c:	4b02      	ldr	r3, [pc, #8]	@ (8015b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8015b3e:	681b      	ldr	r3, [r3, #0]
}
 8015b40:	0018      	movs	r0, r3
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	46c0      	nop			@ (mov r8, r8)
 8015b48:	200000d4 	.word	0x200000d4

08015b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015b50:	f7ff fff2 	bl	8015b38 <HAL_RCC_GetHCLKFreq>
 8015b54:	0001      	movs	r1, r0
 8015b56:	4b06      	ldr	r3, [pc, #24]	@ (8015b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	0a1b      	lsrs	r3, r3, #8
 8015b5c:	2207      	movs	r2, #7
 8015b5e:	4013      	ands	r3, r2
 8015b60:	4a04      	ldr	r2, [pc, #16]	@ (8015b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015b62:	5cd3      	ldrb	r3, [r2, r3]
 8015b64:	40d9      	lsrs	r1, r3
 8015b66:	000b      	movs	r3, r1
}
 8015b68:	0018      	movs	r0, r3
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	46c0      	nop			@ (mov r8, r8)
 8015b70:	40021000 	.word	0x40021000
 8015b74:	08025648 	.word	0x08025648

08015b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015b7c:	f7ff ffdc 	bl	8015b38 <HAL_RCC_GetHCLKFreq>
 8015b80:	0001      	movs	r1, r0
 8015b82:	4b06      	ldr	r3, [pc, #24]	@ (8015b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	0adb      	lsrs	r3, r3, #11
 8015b88:	2207      	movs	r2, #7
 8015b8a:	4013      	ands	r3, r2
 8015b8c:	4a04      	ldr	r2, [pc, #16]	@ (8015ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015b8e:	5cd3      	ldrb	r3, [r2, r3]
 8015b90:	40d9      	lsrs	r1, r3
 8015b92:	000b      	movs	r3, r1
}
 8015b94:	0018      	movs	r0, r3
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	46c0      	nop			@ (mov r8, r8)
 8015b9c:	40021000 	.word	0x40021000
 8015ba0:	08025648 	.word	0x08025648

08015ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b086      	sub	sp, #24
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015bac:	2017      	movs	r0, #23
 8015bae:	183b      	adds	r3, r7, r0
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	2220      	movs	r2, #32
 8015bba:	4013      	ands	r3, r2
 8015bbc:	d100      	bne.n	8015bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015bbe:	e0c7      	b.n	8015d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015bc0:	4b9b      	ldr	r3, [pc, #620]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bc4:	2380      	movs	r3, #128	@ 0x80
 8015bc6:	055b      	lsls	r3, r3, #21
 8015bc8:	4013      	ands	r3, r2
 8015bca:	d109      	bne.n	8015be0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015bcc:	4b98      	ldr	r3, [pc, #608]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bd0:	4b97      	ldr	r3, [pc, #604]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bd2:	2180      	movs	r1, #128	@ 0x80
 8015bd4:	0549      	lsls	r1, r1, #21
 8015bd6:	430a      	orrs	r2, r1
 8015bd8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015bda:	183b      	adds	r3, r7, r0
 8015bdc:	2201      	movs	r2, #1
 8015bde:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015be0:	4b94      	ldr	r3, [pc, #592]	@ (8015e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	2380      	movs	r3, #128	@ 0x80
 8015be6:	005b      	lsls	r3, r3, #1
 8015be8:	4013      	ands	r3, r2
 8015bea:	d11a      	bne.n	8015c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015bec:	4b91      	ldr	r3, [pc, #580]	@ (8015e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	4b90      	ldr	r3, [pc, #576]	@ (8015e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015bf2:	2180      	movs	r1, #128	@ 0x80
 8015bf4:	0049      	lsls	r1, r1, #1
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015bfa:	f7f9 f8ab 	bl	800ed54 <HAL_GetTick>
 8015bfe:	0003      	movs	r3, r0
 8015c00:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015c02:	e008      	b.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015c04:	f7f9 f8a6 	bl	800ed54 <HAL_GetTick>
 8015c08:	0002      	movs	r2, r0
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	1ad3      	subs	r3, r2, r3
 8015c0e:	2b64      	cmp	r3, #100	@ 0x64
 8015c10:	d901      	bls.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015c12:	2303      	movs	r3, #3
 8015c14:	e107      	b.n	8015e26 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015c16:	4b87      	ldr	r3, [pc, #540]	@ (8015e34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	2380      	movs	r3, #128	@ 0x80
 8015c1c:	005b      	lsls	r3, r3, #1
 8015c1e:	4013      	ands	r3, r2
 8015c20:	d0f0      	beq.n	8015c04 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015c22:	4b83      	ldr	r3, [pc, #524]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c24:	681a      	ldr	r2, [r3, #0]
 8015c26:	23c0      	movs	r3, #192	@ 0xc0
 8015c28:	039b      	lsls	r3, r3, #14
 8015c2a:	4013      	ands	r3, r2
 8015c2c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	685a      	ldr	r2, [r3, #4]
 8015c32:	23c0      	movs	r3, #192	@ 0xc0
 8015c34:	039b      	lsls	r3, r3, #14
 8015c36:	4013      	ands	r3, r2
 8015c38:	68fa      	ldr	r2, [r7, #12]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d013      	beq.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	685a      	ldr	r2, [r3, #4]
 8015c42:	23c0      	movs	r3, #192	@ 0xc0
 8015c44:	029b      	lsls	r3, r3, #10
 8015c46:	401a      	ands	r2, r3
 8015c48:	23c0      	movs	r3, #192	@ 0xc0
 8015c4a:	029b      	lsls	r3, r3, #10
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d10a      	bne.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015c50:	4b77      	ldr	r3, [pc, #476]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	2380      	movs	r3, #128	@ 0x80
 8015c56:	029b      	lsls	r3, r3, #10
 8015c58:	401a      	ands	r2, r3
 8015c5a:	2380      	movs	r3, #128	@ 0x80
 8015c5c:	029b      	lsls	r3, r3, #10
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	d101      	bne.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015c62:	2301      	movs	r3, #1
 8015c64:	e0df      	b.n	8015e26 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015c66:	4b72      	ldr	r3, [pc, #456]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c6a:	23c0      	movs	r3, #192	@ 0xc0
 8015c6c:	029b      	lsls	r3, r3, #10
 8015c6e:	4013      	ands	r3, r2
 8015c70:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d03b      	beq.n	8015cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	685a      	ldr	r2, [r3, #4]
 8015c7c:	23c0      	movs	r3, #192	@ 0xc0
 8015c7e:	029b      	lsls	r3, r3, #10
 8015c80:	4013      	ands	r3, r2
 8015c82:	68fa      	ldr	r2, [r7, #12]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d033      	beq.n	8015cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2220      	movs	r2, #32
 8015c8e:	4013      	ands	r3, r2
 8015c90:	d02e      	beq.n	8015cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015c92:	4b67      	ldr	r3, [pc, #412]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c96:	4a68      	ldr	r2, [pc, #416]	@ (8015e38 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015c98:	4013      	ands	r3, r2
 8015c9a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015c9c:	4b64      	ldr	r3, [pc, #400]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ca0:	4b63      	ldr	r3, [pc, #396]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ca2:	2180      	movs	r1, #128	@ 0x80
 8015ca4:	0309      	lsls	r1, r1, #12
 8015ca6:	430a      	orrs	r2, r1
 8015ca8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015caa:	4b61      	ldr	r3, [pc, #388]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015cae:	4b60      	ldr	r3, [pc, #384]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cb0:	4962      	ldr	r1, [pc, #392]	@ (8015e3c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015cb2:	400a      	ands	r2, r1
 8015cb4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cb8:	68fa      	ldr	r2, [r7, #12]
 8015cba:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015cbc:	68fa      	ldr	r2, [r7, #12]
 8015cbe:	2380      	movs	r3, #128	@ 0x80
 8015cc0:	005b      	lsls	r3, r3, #1
 8015cc2:	4013      	ands	r3, r2
 8015cc4:	d014      	beq.n	8015cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cc6:	f7f9 f845 	bl	800ed54 <HAL_GetTick>
 8015cca:	0003      	movs	r3, r0
 8015ccc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015cce:	e009      	b.n	8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015cd0:	f7f9 f840 	bl	800ed54 <HAL_GetTick>
 8015cd4:	0002      	movs	r2, r0
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	1ad3      	subs	r3, r2, r3
 8015cda:	4a59      	ldr	r2, [pc, #356]	@ (8015e40 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015cdc:	4293      	cmp	r3, r2
 8015cde:	d901      	bls.n	8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015ce0:	2303      	movs	r3, #3
 8015ce2:	e0a0      	b.n	8015e26 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015ce4:	4b52      	ldr	r3, [pc, #328]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ce8:	2380      	movs	r3, #128	@ 0x80
 8015cea:	009b      	lsls	r3, r3, #2
 8015cec:	4013      	ands	r3, r2
 8015cee:	d0ef      	beq.n	8015cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2220      	movs	r2, #32
 8015cf6:	4013      	ands	r3, r2
 8015cf8:	d01f      	beq.n	8015d3a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	685a      	ldr	r2, [r3, #4]
 8015cfe:	23c0      	movs	r3, #192	@ 0xc0
 8015d00:	029b      	lsls	r3, r3, #10
 8015d02:	401a      	ands	r2, r3
 8015d04:	23c0      	movs	r3, #192	@ 0xc0
 8015d06:	029b      	lsls	r3, r3, #10
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d10c      	bne.n	8015d26 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015d0c:	4b48      	ldr	r3, [pc, #288]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	4a4c      	ldr	r2, [pc, #304]	@ (8015e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015d12:	4013      	ands	r3, r2
 8015d14:	0019      	movs	r1, r3
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	685a      	ldr	r2, [r3, #4]
 8015d1a:	23c0      	movs	r3, #192	@ 0xc0
 8015d1c:	039b      	lsls	r3, r3, #14
 8015d1e:	401a      	ands	r2, r3
 8015d20:	4b43      	ldr	r3, [pc, #268]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d22:	430a      	orrs	r2, r1
 8015d24:	601a      	str	r2, [r3, #0]
 8015d26:	4b42      	ldr	r3, [pc, #264]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	685a      	ldr	r2, [r3, #4]
 8015d2e:	23c0      	movs	r3, #192	@ 0xc0
 8015d30:	029b      	lsls	r3, r3, #10
 8015d32:	401a      	ands	r2, r3
 8015d34:	4b3e      	ldr	r3, [pc, #248]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d36:	430a      	orrs	r2, r1
 8015d38:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015d3a:	2317      	movs	r3, #23
 8015d3c:	18fb      	adds	r3, r7, r3
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	2b01      	cmp	r3, #1
 8015d42:	d105      	bne.n	8015d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015d44:	4b3a      	ldr	r3, [pc, #232]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d48:	4b39      	ldr	r3, [pc, #228]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d4a:	493f      	ldr	r1, [pc, #252]	@ (8015e48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015d4c:	400a      	ands	r2, r1
 8015d4e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	2201      	movs	r2, #1
 8015d56:	4013      	ands	r3, r2
 8015d58:	d009      	beq.n	8015d6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015d5a:	4b35      	ldr	r3, [pc, #212]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d5e:	2203      	movs	r2, #3
 8015d60:	4393      	bics	r3, r2
 8015d62:	0019      	movs	r1, r3
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	689a      	ldr	r2, [r3, #8]
 8015d68:	4b31      	ldr	r3, [pc, #196]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d6a:	430a      	orrs	r2, r1
 8015d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	2202      	movs	r2, #2
 8015d74:	4013      	ands	r3, r2
 8015d76:	d009      	beq.n	8015d8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015d78:	4b2d      	ldr	r3, [pc, #180]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d7c:	220c      	movs	r2, #12
 8015d7e:	4393      	bics	r3, r2
 8015d80:	0019      	movs	r1, r3
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	68da      	ldr	r2, [r3, #12]
 8015d86:	4b2a      	ldr	r3, [pc, #168]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d88:	430a      	orrs	r2, r1
 8015d8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2204      	movs	r2, #4
 8015d92:	4013      	ands	r3, r2
 8015d94:	d009      	beq.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015d96:	4b26      	ldr	r3, [pc, #152]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8015e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015d9c:	4013      	ands	r3, r2
 8015d9e:	0019      	movs	r1, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	691a      	ldr	r2, [r3, #16]
 8015da4:	4b22      	ldr	r3, [pc, #136]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015da6:	430a      	orrs	r2, r1
 8015da8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	2208      	movs	r2, #8
 8015db0:	4013      	ands	r3, r2
 8015db2:	d009      	beq.n	8015dc8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015db4:	4b1e      	ldr	r3, [pc, #120]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015db8:	4a25      	ldr	r2, [pc, #148]	@ (8015e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015dba:	4013      	ands	r3, r2
 8015dbc:	0019      	movs	r1, r3
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	695a      	ldr	r2, [r3, #20]
 8015dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dc4:	430a      	orrs	r2, r1
 8015dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	2380      	movs	r3, #128	@ 0x80
 8015dce:	005b      	lsls	r3, r3, #1
 8015dd0:	4013      	ands	r3, r2
 8015dd2:	d009      	beq.n	8015de8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015dd4:	4b16      	ldr	r3, [pc, #88]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015dd8:	4a17      	ldr	r2, [pc, #92]	@ (8015e38 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015dda:	4013      	ands	r3, r2
 8015ddc:	0019      	movs	r1, r3
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	699a      	ldr	r2, [r3, #24]
 8015de2:	4b13      	ldr	r3, [pc, #76]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015de4:	430a      	orrs	r2, r1
 8015de6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	2240      	movs	r2, #64	@ 0x40
 8015dee:	4013      	ands	r3, r2
 8015df0:	d009      	beq.n	8015e06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015df2:	4b0f      	ldr	r3, [pc, #60]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015df6:	4a17      	ldr	r2, [pc, #92]	@ (8015e54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015df8:	4013      	ands	r3, r2
 8015dfa:	0019      	movs	r1, r3
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a1a      	ldr	r2, [r3, #32]
 8015e00:	4b0b      	ldr	r3, [pc, #44]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e02:	430a      	orrs	r2, r1
 8015e04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2280      	movs	r2, #128	@ 0x80
 8015e0c:	4013      	ands	r3, r2
 8015e0e:	d009      	beq.n	8015e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015e10:	4b07      	ldr	r3, [pc, #28]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e14:	4a10      	ldr	r2, [pc, #64]	@ (8015e58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015e16:	4013      	ands	r3, r2
 8015e18:	0019      	movs	r1, r3
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	69da      	ldr	r2, [r3, #28]
 8015e1e:	4b04      	ldr	r3, [pc, #16]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e20:	430a      	orrs	r2, r1
 8015e22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015e24:	2300      	movs	r3, #0
}
 8015e26:	0018      	movs	r0, r3
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	b006      	add	sp, #24
 8015e2c:	bd80      	pop	{r7, pc}
 8015e2e:	46c0      	nop			@ (mov r8, r8)
 8015e30:	40021000 	.word	0x40021000
 8015e34:	40007000 	.word	0x40007000
 8015e38:	fffcffff 	.word	0xfffcffff
 8015e3c:	fff7ffff 	.word	0xfff7ffff
 8015e40:	00001388 	.word	0x00001388
 8015e44:	ffcfffff 	.word	0xffcfffff
 8015e48:	efffffff 	.word	0xefffffff
 8015e4c:	fffff3ff 	.word	0xfffff3ff
 8015e50:	ffffcfff 	.word	0xffffcfff
 8015e54:	fbffffff 	.word	0xfbffffff
 8015e58:	fff3ffff 	.word	0xfff3ffff

08015e5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015e5c:	b5b0      	push	{r4, r5, r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015e64:	230f      	movs	r3, #15
 8015e66:	18fb      	adds	r3, r7, r3
 8015e68:	2201      	movs	r2, #1
 8015e6a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d101      	bne.n	8015e76 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015e72:	2301      	movs	r3, #1
 8015e74:	e088      	b.n	8015f88 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2221      	movs	r2, #33	@ 0x21
 8015e7a:	5c9b      	ldrb	r3, [r3, r2]
 8015e7c:	b2db      	uxtb	r3, r3
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d107      	bne.n	8015e92 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2220      	movs	r2, #32
 8015e86:	2100      	movs	r1, #0
 8015e88:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	0018      	movs	r0, r3
 8015e8e:	f7f3 f8b7 	bl	8009000 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	2221      	movs	r2, #33	@ 0x21
 8015e96:	2102      	movs	r1, #2
 8015e98:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	2210      	movs	r2, #16
 8015ea2:	4013      	ands	r3, r2
 8015ea4:	2b10      	cmp	r3, #16
 8015ea6:	d05f      	beq.n	8015f68 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	22ca      	movs	r2, #202	@ 0xca
 8015eae:	625a      	str	r2, [r3, #36]	@ 0x24
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	2253      	movs	r2, #83	@ 0x53
 8015eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015eb8:	250f      	movs	r5, #15
 8015eba:	197c      	adds	r4, r7, r5
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	0018      	movs	r0, r3
 8015ec0:	f000 fa7c 	bl	80163bc <RTC_EnterInitMode>
 8015ec4:	0003      	movs	r3, r0
 8015ec6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015ec8:	0028      	movs	r0, r5
 8015eca:	183b      	adds	r3, r7, r0
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d12c      	bne.n	8015f2c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	689a      	ldr	r2, [r3, #8]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	492c      	ldr	r1, [pc, #176]	@ (8015f90 <HAL_RTC_Init+0x134>)
 8015ede:	400a      	ands	r2, r1
 8015ee0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	6899      	ldr	r1, [r3, #8]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	685a      	ldr	r2, [r3, #4]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	691b      	ldr	r3, [r3, #16]
 8015ef0:	431a      	orrs	r2, r3
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	699b      	ldr	r3, [r3, #24]
 8015ef6:	431a      	orrs	r2, r3
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	430a      	orrs	r2, r1
 8015efe:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	68d2      	ldr	r2, [r2, #12]
 8015f08:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	6919      	ldr	r1, [r3, #16]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	689b      	ldr	r3, [r3, #8]
 8015f14:	041a      	lsls	r2, r3, #16
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	430a      	orrs	r2, r1
 8015f1c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015f1e:	183c      	adds	r4, r7, r0
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	0018      	movs	r0, r3
 8015f24:	f000 fa8e 	bl	8016444 <RTC_ExitInitMode>
 8015f28:	0003      	movs	r3, r0
 8015f2a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015f2c:	230f      	movs	r3, #15
 8015f2e:	18fb      	adds	r3, r7, r3
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d113      	bne.n	8015f5e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	2103      	movs	r1, #3
 8015f42:	438a      	bics	r2, r1
 8015f44:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	69da      	ldr	r2, [r3, #28]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	695b      	ldr	r3, [r3, #20]
 8015f54:	431a      	orrs	r2, r3
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	430a      	orrs	r2, r1
 8015f5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	22ff      	movs	r2, #255	@ 0xff
 8015f64:	625a      	str	r2, [r3, #36]	@ 0x24
 8015f66:	e003      	b.n	8015f70 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015f68:	230f      	movs	r3, #15
 8015f6a:	18fb      	adds	r3, r7, r3
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015f70:	230f      	movs	r3, #15
 8015f72:	18fb      	adds	r3, r7, r3
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d103      	bne.n	8015f82 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2221      	movs	r2, #33	@ 0x21
 8015f7e:	2101      	movs	r1, #1
 8015f80:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015f82:	230f      	movs	r3, #15
 8015f84:	18fb      	adds	r3, r7, r3
 8015f86:	781b      	ldrb	r3, [r3, #0]
}
 8015f88:	0018      	movs	r0, r3
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	b004      	add	sp, #16
 8015f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8015f90:	ff8fffbf 	.word	0xff8fffbf

08015f94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015f94:	b5b0      	push	{r4, r5, r7, lr}
 8015f96:	b086      	sub	sp, #24
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	60f8      	str	r0, [r7, #12]
 8015f9c:	60b9      	str	r1, [r7, #8]
 8015f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	2220      	movs	r2, #32
 8015fa8:	5c9b      	ldrb	r3, [r3, r2]
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	d101      	bne.n	8015fb2 <HAL_RTC_SetTime+0x1e>
 8015fae:	2302      	movs	r3, #2
 8015fb0:	e092      	b.n	80160d8 <HAL_RTC_SetTime+0x144>
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	2220      	movs	r2, #32
 8015fb6:	2101      	movs	r1, #1
 8015fb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2221      	movs	r2, #33	@ 0x21
 8015fbe:	2102      	movs	r1, #2
 8015fc0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d125      	bne.n	8016014 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	689b      	ldr	r3, [r3, #8]
 8015fce:	2240      	movs	r2, #64	@ 0x40
 8015fd0:	4013      	ands	r3, r2
 8015fd2:	d102      	bne.n	8015fda <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	0018      	movs	r0, r3
 8015fe0:	f000 fa5a 	bl	8016498 <RTC_ByteToBcd2>
 8015fe4:	0003      	movs	r3, r0
 8015fe6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	785b      	ldrb	r3, [r3, #1]
 8015fec:	0018      	movs	r0, r3
 8015fee:	f000 fa53 	bl	8016498 <RTC_ByteToBcd2>
 8015ff2:	0003      	movs	r3, r0
 8015ff4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015ff6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	789b      	ldrb	r3, [r3, #2]
 8015ffc:	0018      	movs	r0, r3
 8015ffe:	f000 fa4b 	bl	8016498 <RTC_ByteToBcd2>
 8016002:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016004:	0022      	movs	r2, r4
 8016006:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	78db      	ldrb	r3, [r3, #3]
 801600c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801600e:	4313      	orrs	r3, r2
 8016010:	617b      	str	r3, [r7, #20]
 8016012:	e017      	b.n	8016044 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	689b      	ldr	r3, [r3, #8]
 801601a:	2240      	movs	r2, #64	@ 0x40
 801601c:	4013      	ands	r3, r2
 801601e:	d102      	bne.n	8016026 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	2200      	movs	r2, #0
 8016024:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	785b      	ldrb	r3, [r3, #1]
 8016030:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016032:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016038:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	78db      	ldrb	r3, [r3, #3]
 801603e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016040:	4313      	orrs	r3, r2
 8016042:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	22ca      	movs	r2, #202	@ 0xca
 801604a:	625a      	str	r2, [r3, #36]	@ 0x24
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	2253      	movs	r2, #83	@ 0x53
 8016052:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016054:	2513      	movs	r5, #19
 8016056:	197c      	adds	r4, r7, r5
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	0018      	movs	r0, r3
 801605c:	f000 f9ae 	bl	80163bc <RTC_EnterInitMode>
 8016060:	0003      	movs	r3, r0
 8016062:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016064:	0028      	movs	r0, r5
 8016066:	183b      	adds	r3, r7, r0
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d120      	bne.n	80160b0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	697a      	ldr	r2, [r7, #20]
 8016074:	491a      	ldr	r1, [pc, #104]	@ (80160e0 <HAL_RTC_SetTime+0x14c>)
 8016076:	400a      	ands	r2, r1
 8016078:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	689a      	ldr	r2, [r3, #8]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	4917      	ldr	r1, [pc, #92]	@ (80160e4 <HAL_RTC_SetTime+0x150>)
 8016086:	400a      	ands	r2, r1
 8016088:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	6899      	ldr	r1, [r3, #8]
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	68da      	ldr	r2, [r3, #12]
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	691b      	ldr	r3, [r3, #16]
 8016098:	431a      	orrs	r2, r3
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	430a      	orrs	r2, r1
 80160a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80160a2:	183c      	adds	r4, r7, r0
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	0018      	movs	r0, r3
 80160a8:	f000 f9cc 	bl	8016444 <RTC_ExitInitMode>
 80160ac:	0003      	movs	r3, r0
 80160ae:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80160b0:	2313      	movs	r3, #19
 80160b2:	18fb      	adds	r3, r7, r3
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d103      	bne.n	80160c2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2221      	movs	r2, #33	@ 0x21
 80160be:	2101      	movs	r1, #1
 80160c0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	22ff      	movs	r2, #255	@ 0xff
 80160c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2220      	movs	r2, #32
 80160ce:	2100      	movs	r1, #0
 80160d0:	5499      	strb	r1, [r3, r2]

  return status;
 80160d2:	2313      	movs	r3, #19
 80160d4:	18fb      	adds	r3, r7, r3
 80160d6:	781b      	ldrb	r3, [r3, #0]
}
 80160d8:	0018      	movs	r0, r3
 80160da:	46bd      	mov	sp, r7
 80160dc:	b006      	add	sp, #24
 80160de:	bdb0      	pop	{r4, r5, r7, pc}
 80160e0:	007f7f7f 	.word	0x007f7f7f
 80160e4:	fffbffff 	.word	0xfffbffff

080160e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b086      	sub	sp, #24
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	60f8      	str	r0, [r7, #12]
 80160f0:	60b9      	str	r1, [r7, #8]
 80160f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80160f4:	2300      	movs	r3, #0
 80160f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	691b      	ldr	r3, [r3, #16]
 8016108:	045b      	lsls	r3, r3, #17
 801610a:	0c5a      	lsrs	r2, r3, #17
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	4a22      	ldr	r2, [pc, #136]	@ (80161a0 <HAL_RTC_GetTime+0xb8>)
 8016118:	4013      	ands	r3, r2
 801611a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	0c1b      	lsrs	r3, r3, #16
 8016120:	b2db      	uxtb	r3, r3
 8016122:	223f      	movs	r2, #63	@ 0x3f
 8016124:	4013      	ands	r3, r2
 8016126:	b2da      	uxtb	r2, r3
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	0a1b      	lsrs	r3, r3, #8
 8016130:	b2db      	uxtb	r3, r3
 8016132:	227f      	movs	r2, #127	@ 0x7f
 8016134:	4013      	ands	r3, r2
 8016136:	b2da      	uxtb	r2, r3
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	b2db      	uxtb	r3, r3
 8016140:	227f      	movs	r2, #127	@ 0x7f
 8016142:	4013      	ands	r3, r2
 8016144:	b2da      	uxtb	r2, r3
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	0d9b      	lsrs	r3, r3, #22
 801614e:	b2db      	uxtb	r3, r3
 8016150:	2201      	movs	r2, #1
 8016152:	4013      	ands	r3, r2
 8016154:	b2da      	uxtb	r2, r3
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d11a      	bne.n	8016196 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	0018      	movs	r0, r3
 8016166:	f000 f9b8 	bl	80164da <RTC_Bcd2ToByte>
 801616a:	0003      	movs	r3, r0
 801616c:	001a      	movs	r2, r3
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	785b      	ldrb	r3, [r3, #1]
 8016176:	0018      	movs	r0, r3
 8016178:	f000 f9af 	bl	80164da <RTC_Bcd2ToByte>
 801617c:	0003      	movs	r3, r0
 801617e:	001a      	movs	r2, r3
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	789b      	ldrb	r3, [r3, #2]
 8016188:	0018      	movs	r0, r3
 801618a:	f000 f9a6 	bl	80164da <RTC_Bcd2ToByte>
 801618e:	0003      	movs	r3, r0
 8016190:	001a      	movs	r2, r3
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016196:	2300      	movs	r3, #0
}
 8016198:	0018      	movs	r0, r3
 801619a:	46bd      	mov	sp, r7
 801619c:	b006      	add	sp, #24
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	007f7f7f 	.word	0x007f7f7f

080161a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80161a4:	b5b0      	push	{r4, r5, r7, lr}
 80161a6:	b086      	sub	sp, #24
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80161b0:	2300      	movs	r3, #0
 80161b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2220      	movs	r2, #32
 80161b8:	5c9b      	ldrb	r3, [r3, r2]
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d101      	bne.n	80161c2 <HAL_RTC_SetDate+0x1e>
 80161be:	2302      	movs	r3, #2
 80161c0:	e07e      	b.n	80162c0 <HAL_RTC_SetDate+0x11c>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2220      	movs	r2, #32
 80161c6:	2101      	movs	r1, #1
 80161c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2221      	movs	r2, #33	@ 0x21
 80161ce:	2102      	movs	r1, #2
 80161d0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d10e      	bne.n	80161f6 <HAL_RTC_SetDate+0x52>
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	785b      	ldrb	r3, [r3, #1]
 80161dc:	001a      	movs	r2, r3
 80161de:	2310      	movs	r3, #16
 80161e0:	4013      	ands	r3, r2
 80161e2:	d008      	beq.n	80161f6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	785b      	ldrb	r3, [r3, #1]
 80161e8:	2210      	movs	r2, #16
 80161ea:	4393      	bics	r3, r2
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	330a      	adds	r3, #10
 80161f0:	b2da      	uxtb	r2, r3
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d11c      	bne.n	8016236 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	78db      	ldrb	r3, [r3, #3]
 8016200:	0018      	movs	r0, r3
 8016202:	f000 f949 	bl	8016498 <RTC_ByteToBcd2>
 8016206:	0003      	movs	r3, r0
 8016208:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	785b      	ldrb	r3, [r3, #1]
 801620e:	0018      	movs	r0, r3
 8016210:	f000 f942 	bl	8016498 <RTC_ByteToBcd2>
 8016214:	0003      	movs	r3, r0
 8016216:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016218:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	789b      	ldrb	r3, [r3, #2]
 801621e:	0018      	movs	r0, r3
 8016220:	f000 f93a 	bl	8016498 <RTC_ByteToBcd2>
 8016224:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016226:	0022      	movs	r2, r4
 8016228:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016230:	4313      	orrs	r3, r2
 8016232:	617b      	str	r3, [r7, #20]
 8016234:	e00e      	b.n	8016254 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016236:	68bb      	ldr	r3, [r7, #8]
 8016238:	78db      	ldrb	r3, [r3, #3]
 801623a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	785b      	ldrb	r3, [r3, #1]
 8016240:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016242:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016244:	68ba      	ldr	r2, [r7, #8]
 8016246:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016248:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	781b      	ldrb	r3, [r3, #0]
 801624e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016250:	4313      	orrs	r3, r2
 8016252:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	22ca      	movs	r2, #202	@ 0xca
 801625a:	625a      	str	r2, [r3, #36]	@ 0x24
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	2253      	movs	r2, #83	@ 0x53
 8016262:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016264:	2513      	movs	r5, #19
 8016266:	197c      	adds	r4, r7, r5
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	0018      	movs	r0, r3
 801626c:	f000 f8a6 	bl	80163bc <RTC_EnterInitMode>
 8016270:	0003      	movs	r3, r0
 8016272:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016274:	0028      	movs	r0, r5
 8016276:	183b      	adds	r3, r7, r0
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d10c      	bne.n	8016298 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	697a      	ldr	r2, [r7, #20]
 8016284:	4910      	ldr	r1, [pc, #64]	@ (80162c8 <HAL_RTC_SetDate+0x124>)
 8016286:	400a      	ands	r2, r1
 8016288:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801628a:	183c      	adds	r4, r7, r0
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	0018      	movs	r0, r3
 8016290:	f000 f8d8 	bl	8016444 <RTC_ExitInitMode>
 8016294:	0003      	movs	r3, r0
 8016296:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016298:	2313      	movs	r3, #19
 801629a:	18fb      	adds	r3, r7, r3
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d103      	bne.n	80162aa <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2221      	movs	r2, #33	@ 0x21
 80162a6:	2101      	movs	r1, #1
 80162a8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	22ff      	movs	r2, #255	@ 0xff
 80162b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2220      	movs	r2, #32
 80162b6:	2100      	movs	r1, #0
 80162b8:	5499      	strb	r1, [r3, r2]

  return status;
 80162ba:	2313      	movs	r3, #19
 80162bc:	18fb      	adds	r3, r7, r3
 80162be:	781b      	ldrb	r3, [r3, #0]
}
 80162c0:	0018      	movs	r0, r3
 80162c2:	46bd      	mov	sp, r7
 80162c4:	b006      	add	sp, #24
 80162c6:	bdb0      	pop	{r4, r5, r7, pc}
 80162c8:	00ffff3f 	.word	0x00ffff3f

080162cc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b086      	sub	sp, #24
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	60f8      	str	r0, [r7, #12]
 80162d4:	60b9      	str	r1, [r7, #8]
 80162d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80162d8:	2300      	movs	r3, #0
 80162da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	4a21      	ldr	r2, [pc, #132]	@ (8016368 <HAL_RTC_GetDate+0x9c>)
 80162e4:	4013      	ands	r3, r2
 80162e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	0c1b      	lsrs	r3, r3, #16
 80162ec:	b2da      	uxtb	r2, r3
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80162f2:	697b      	ldr	r3, [r7, #20]
 80162f4:	0a1b      	lsrs	r3, r3, #8
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	221f      	movs	r2, #31
 80162fa:	4013      	ands	r3, r2
 80162fc:	b2da      	uxtb	r2, r3
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8016302:	697b      	ldr	r3, [r7, #20]
 8016304:	b2db      	uxtb	r3, r3
 8016306:	223f      	movs	r2, #63	@ 0x3f
 8016308:	4013      	ands	r3, r2
 801630a:	b2da      	uxtb	r2, r3
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	0b5b      	lsrs	r3, r3, #13
 8016314:	b2db      	uxtb	r3, r3
 8016316:	2207      	movs	r2, #7
 8016318:	4013      	ands	r3, r2
 801631a:	b2da      	uxtb	r2, r3
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d11a      	bne.n	801635c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	78db      	ldrb	r3, [r3, #3]
 801632a:	0018      	movs	r0, r3
 801632c:	f000 f8d5 	bl	80164da <RTC_Bcd2ToByte>
 8016330:	0003      	movs	r3, r0
 8016332:	001a      	movs	r2, r3
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	785b      	ldrb	r3, [r3, #1]
 801633c:	0018      	movs	r0, r3
 801633e:	f000 f8cc 	bl	80164da <RTC_Bcd2ToByte>
 8016342:	0003      	movs	r3, r0
 8016344:	001a      	movs	r2, r3
 8016346:	68bb      	ldr	r3, [r7, #8]
 8016348:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	789b      	ldrb	r3, [r3, #2]
 801634e:	0018      	movs	r0, r3
 8016350:	f000 f8c3 	bl	80164da <RTC_Bcd2ToByte>
 8016354:	0003      	movs	r3, r0
 8016356:	001a      	movs	r2, r3
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801635c:	2300      	movs	r3, #0
}
 801635e:	0018      	movs	r0, r3
 8016360:	46bd      	mov	sp, r7
 8016362:	b006      	add	sp, #24
 8016364:	bd80      	pop	{r7, pc}
 8016366:	46c0      	nop			@ (mov r8, r8)
 8016368:	00ffff3f 	.word	0x00ffff3f

0801636c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b084      	sub	sp, #16
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016374:	2300      	movs	r3, #0
 8016376:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	4a0e      	ldr	r2, [pc, #56]	@ (80163b8 <HAL_RTC_WaitForSynchro+0x4c>)
 801637e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016380:	f7f8 fce8 	bl	800ed54 <HAL_GetTick>
 8016384:	0003      	movs	r3, r0
 8016386:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016388:	e00a      	b.n	80163a0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801638a:	f7f8 fce3 	bl	800ed54 <HAL_GetTick>
 801638e:	0002      	movs	r2, r0
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	1ad2      	subs	r2, r2, r3
 8016394:	23fa      	movs	r3, #250	@ 0xfa
 8016396:	009b      	lsls	r3, r3, #2
 8016398:	429a      	cmp	r2, r3
 801639a:	d901      	bls.n	80163a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801639c:	2303      	movs	r3, #3
 801639e:	e006      	b.n	80163ae <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	68db      	ldr	r3, [r3, #12]
 80163a6:	2220      	movs	r2, #32
 80163a8:	4013      	ands	r3, r2
 80163aa:	d0ee      	beq.n	801638a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80163ac:	2300      	movs	r3, #0
}
 80163ae:	0018      	movs	r0, r3
 80163b0:	46bd      	mov	sp, r7
 80163b2:	b004      	add	sp, #16
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	46c0      	nop			@ (mov r8, r8)
 80163b8:	0001ff5f 	.word	0x0001ff5f

080163bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b084      	sub	sp, #16
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80163c4:	2300      	movs	r3, #0
 80163c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80163c8:	230f      	movs	r3, #15
 80163ca:	18fb      	adds	r3, r7, r3
 80163cc:	2200      	movs	r2, #0
 80163ce:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	68db      	ldr	r3, [r3, #12]
 80163d6:	2240      	movs	r2, #64	@ 0x40
 80163d8:	4013      	ands	r3, r2
 80163da:	d12c      	bne.n	8016436 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	68da      	ldr	r2, [r3, #12]
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2180      	movs	r1, #128	@ 0x80
 80163e8:	430a      	orrs	r2, r1
 80163ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80163ec:	f7f8 fcb2 	bl	800ed54 <HAL_GetTick>
 80163f0:	0003      	movs	r3, r0
 80163f2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80163f4:	e014      	b.n	8016420 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80163f6:	f7f8 fcad 	bl	800ed54 <HAL_GetTick>
 80163fa:	0002      	movs	r2, r0
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	1ad2      	subs	r2, r2, r3
 8016400:	200f      	movs	r0, #15
 8016402:	183b      	adds	r3, r7, r0
 8016404:	1839      	adds	r1, r7, r0
 8016406:	7809      	ldrb	r1, [r1, #0]
 8016408:	7019      	strb	r1, [r3, #0]
 801640a:	23fa      	movs	r3, #250	@ 0xfa
 801640c:	009b      	lsls	r3, r3, #2
 801640e:	429a      	cmp	r2, r3
 8016410:	d906      	bls.n	8016420 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2221      	movs	r2, #33	@ 0x21
 8016416:	2104      	movs	r1, #4
 8016418:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801641a:	183b      	adds	r3, r7, r0
 801641c:	2201      	movs	r2, #1
 801641e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	68db      	ldr	r3, [r3, #12]
 8016426:	2240      	movs	r2, #64	@ 0x40
 8016428:	4013      	ands	r3, r2
 801642a:	d104      	bne.n	8016436 <RTC_EnterInitMode+0x7a>
 801642c:	230f      	movs	r3, #15
 801642e:	18fb      	adds	r3, r7, r3
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	2b01      	cmp	r3, #1
 8016434:	d1df      	bne.n	80163f6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016436:	230f      	movs	r3, #15
 8016438:	18fb      	adds	r3, r7, r3
 801643a:	781b      	ldrb	r3, [r3, #0]
}
 801643c:	0018      	movs	r0, r3
 801643e:	46bd      	mov	sp, r7
 8016440:	b004      	add	sp, #16
 8016442:	bd80      	pop	{r7, pc}

08016444 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016444:	b590      	push	{r4, r7, lr}
 8016446:	b085      	sub	sp, #20
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801644c:	240f      	movs	r4, #15
 801644e:	193b      	adds	r3, r7, r4
 8016450:	2200      	movs	r2, #0
 8016452:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	68da      	ldr	r2, [r3, #12]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2180      	movs	r1, #128	@ 0x80
 8016460:	438a      	bics	r2, r1
 8016462:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	689b      	ldr	r3, [r3, #8]
 801646a:	2220      	movs	r2, #32
 801646c:	4013      	ands	r3, r2
 801646e:	d10c      	bne.n	801648a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	0018      	movs	r0, r3
 8016474:	f7ff ff7a 	bl	801636c <HAL_RTC_WaitForSynchro>
 8016478:	1e03      	subs	r3, r0, #0
 801647a:	d006      	beq.n	801648a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2221      	movs	r2, #33	@ 0x21
 8016480:	2104      	movs	r1, #4
 8016482:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016484:	193b      	adds	r3, r7, r4
 8016486:	2201      	movs	r2, #1
 8016488:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801648a:	230f      	movs	r3, #15
 801648c:	18fb      	adds	r3, r7, r3
 801648e:	781b      	ldrb	r3, [r3, #0]
}
 8016490:	0018      	movs	r0, r3
 8016492:	46bd      	mov	sp, r7
 8016494:	b005      	add	sp, #20
 8016496:	bd90      	pop	{r4, r7, pc}

08016498 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b084      	sub	sp, #16
 801649c:	af00      	add	r7, sp, #0
 801649e:	0002      	movs	r2, r0
 80164a0:	1dfb      	adds	r3, r7, #7
 80164a2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80164a4:	2300      	movs	r3, #0
 80164a6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80164a8:	e007      	b.n	80164ba <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	3301      	adds	r3, #1
 80164ae:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80164b0:	1dfb      	adds	r3, r7, #7
 80164b2:	1dfa      	adds	r2, r7, #7
 80164b4:	7812      	ldrb	r2, [r2, #0]
 80164b6:	3a0a      	subs	r2, #10
 80164b8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80164ba:	1dfb      	adds	r3, r7, #7
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	2b09      	cmp	r3, #9
 80164c0:	d8f3      	bhi.n	80164aa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	b2db      	uxtb	r3, r3
 80164c6:	011b      	lsls	r3, r3, #4
 80164c8:	b2da      	uxtb	r2, r3
 80164ca:	1dfb      	adds	r3, r7, #7
 80164cc:	781b      	ldrb	r3, [r3, #0]
 80164ce:	4313      	orrs	r3, r2
 80164d0:	b2db      	uxtb	r3, r3
}
 80164d2:	0018      	movs	r0, r3
 80164d4:	46bd      	mov	sp, r7
 80164d6:	b004      	add	sp, #16
 80164d8:	bd80      	pop	{r7, pc}

080164da <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b084      	sub	sp, #16
 80164de:	af00      	add	r7, sp, #0
 80164e0:	0002      	movs	r2, r0
 80164e2:	1dfb      	adds	r3, r7, #7
 80164e4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80164e6:	2300      	movs	r3, #0
 80164e8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80164ea:	1dfb      	adds	r3, r7, #7
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	091b      	lsrs	r3, r3, #4
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	001a      	movs	r2, r3
 80164f4:	0013      	movs	r3, r2
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	189b      	adds	r3, r3, r2
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	b2da      	uxtb	r2, r3
 8016502:	1dfb      	adds	r3, r7, #7
 8016504:	781b      	ldrb	r3, [r3, #0]
 8016506:	210f      	movs	r1, #15
 8016508:	400b      	ands	r3, r1
 801650a:	b2db      	uxtb	r3, r3
 801650c:	18d3      	adds	r3, r2, r3
 801650e:	b2db      	uxtb	r3, r3
}
 8016510:	0018      	movs	r0, r3
 8016512:	46bd      	mov	sp, r7
 8016514:	b004      	add	sp, #16
 8016516:	bd80      	pop	{r7, pc}

08016518 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af00      	add	r7, sp, #0
 801651e:	60f8      	str	r0, [r7, #12]
 8016520:	60b9      	str	r1, [r7, #8]
 8016522:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016524:	4b64      	ldr	r3, [pc, #400]	@ (80166b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	22fa      	movs	r2, #250	@ 0xfa
 801652a:	01d1      	lsls	r1, r2, #7
 801652c:	0018      	movs	r0, r3
 801652e:	f7e9 fe39 	bl	80001a4 <__udivsi3>
 8016532:	0003      	movs	r3, r0
 8016534:	001a      	movs	r2, r3
 8016536:	0013      	movs	r3, r2
 8016538:	015b      	lsls	r3, r3, #5
 801653a:	1a9b      	subs	r3, r3, r2
 801653c:	009b      	lsls	r3, r3, #2
 801653e:	189b      	adds	r3, r3, r2
 8016540:	00db      	lsls	r3, r3, #3
 8016542:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2220      	movs	r2, #32
 8016548:	5c9b      	ldrb	r3, [r3, r2]
 801654a:	2b01      	cmp	r3, #1
 801654c:	d101      	bne.n	8016552 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801654e:	2302      	movs	r3, #2
 8016550:	e0ad      	b.n	80166ae <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2220      	movs	r2, #32
 8016556:	2101      	movs	r1, #1
 8016558:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	2221      	movs	r2, #33	@ 0x21
 801655e:	2102      	movs	r1, #2
 8016560:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	22ca      	movs	r2, #202	@ 0xca
 8016568:	625a      	str	r2, [r3, #36]	@ 0x24
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2253      	movs	r2, #83	@ 0x53
 8016570:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	689a      	ldr	r2, [r3, #8]
 8016578:	2380      	movs	r3, #128	@ 0x80
 801657a:	00db      	lsls	r3, r3, #3
 801657c:	4013      	ands	r3, r2
 801657e:	d019      	beq.n	80165b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	3b01      	subs	r3, #1
 8016584:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d10d      	bne.n	80165a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	22ff      	movs	r2, #255	@ 0xff
 8016592:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2221      	movs	r2, #33	@ 0x21
 8016598:	2103      	movs	r1, #3
 801659a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2220      	movs	r2, #32
 80165a0:	2100      	movs	r1, #0
 80165a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80165a4:	2303      	movs	r3, #3
 80165a6:	e082      	b.n	80166ae <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	2204      	movs	r2, #4
 80165b0:	4013      	ands	r3, r2
 80165b2:	d1e5      	bne.n	8016580 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	689a      	ldr	r2, [r3, #8]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	493f      	ldr	r1, [pc, #252]	@ (80166bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80165c0:	400a      	ands	r2, r1
 80165c2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	22ff      	movs	r2, #255	@ 0xff
 80165cc:	401a      	ands	r2, r3
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	493b      	ldr	r1, [pc, #236]	@ (80166c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80165d4:	430a      	orrs	r2, r1
 80165d6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80165d8:	4b37      	ldr	r3, [pc, #220]	@ (80166b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	22fa      	movs	r2, #250	@ 0xfa
 80165de:	01d1      	lsls	r1, r2, #7
 80165e0:	0018      	movs	r0, r3
 80165e2:	f7e9 fddf 	bl	80001a4 <__udivsi3>
 80165e6:	0003      	movs	r3, r0
 80165e8:	001a      	movs	r2, r3
 80165ea:	0013      	movs	r3, r2
 80165ec:	015b      	lsls	r3, r3, #5
 80165ee:	1a9b      	subs	r3, r3, r2
 80165f0:	009b      	lsls	r3, r3, #2
 80165f2:	189b      	adds	r3, r3, r2
 80165f4:	00db      	lsls	r3, r3, #3
 80165f6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	3b01      	subs	r3, #1
 80165fc:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d10d      	bne.n	8016620 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	22ff      	movs	r2, #255	@ 0xff
 801660a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	2221      	movs	r2, #33	@ 0x21
 8016610:	2103      	movs	r1, #3
 8016612:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	2220      	movs	r2, #32
 8016618:	2100      	movs	r1, #0
 801661a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801661c:	2303      	movs	r3, #3
 801661e:	e046      	b.n	80166ae <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	2204      	movs	r2, #4
 8016628:	4013      	ands	r3, r2
 801662a:	d0e5      	beq.n	80165f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	689a      	ldr	r2, [r3, #8]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	2107      	movs	r1, #7
 8016638:	438a      	bics	r2, r1
 801663a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	6899      	ldr	r1, [r3, #8]
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	430a      	orrs	r2, r1
 801664a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	68ba      	ldr	r2, [r7, #8]
 8016652:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8016654:	4b1b      	ldr	r3, [pc, #108]	@ (80166c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016656:	681a      	ldr	r2, [r3, #0]
 8016658:	4b1a      	ldr	r3, [pc, #104]	@ (80166c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801665a:	2180      	movs	r1, #128	@ 0x80
 801665c:	0349      	lsls	r1, r1, #13
 801665e:	430a      	orrs	r2, r1
 8016660:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8016662:	4b18      	ldr	r3, [pc, #96]	@ (80166c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016664:	689a      	ldr	r2, [r3, #8]
 8016666:	4b17      	ldr	r3, [pc, #92]	@ (80166c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016668:	2180      	movs	r1, #128	@ 0x80
 801666a:	0349      	lsls	r1, r1, #13
 801666c:	430a      	orrs	r2, r1
 801666e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	689a      	ldr	r2, [r3, #8]
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2180      	movs	r1, #128	@ 0x80
 801667c:	01c9      	lsls	r1, r1, #7
 801667e:	430a      	orrs	r2, r1
 8016680:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	689a      	ldr	r2, [r3, #8]
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	2180      	movs	r1, #128	@ 0x80
 801668e:	00c9      	lsls	r1, r1, #3
 8016690:	430a      	orrs	r2, r1
 8016692:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	22ff      	movs	r2, #255	@ 0xff
 801669a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2221      	movs	r2, #33	@ 0x21
 80166a0:	2101      	movs	r1, #1
 80166a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	2220      	movs	r2, #32
 80166a8:	2100      	movs	r1, #0
 80166aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80166ac:	2300      	movs	r3, #0
}
 80166ae:	0018      	movs	r0, r3
 80166b0:	46bd      	mov	sp, r7
 80166b2:	b006      	add	sp, #24
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	46c0      	nop			@ (mov r8, r8)
 80166b8:	200000d4 	.word	0x200000d4
 80166bc:	fffffbff 	.word	0xfffffbff
 80166c0:	fffffb7f 	.word	0xfffffb7f
 80166c4:	40010400 	.word	0x40010400

080166c8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b084      	sub	sp, #16
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80166d0:	2300      	movs	r3, #0
 80166d2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2220      	movs	r2, #32
 80166d8:	5c9b      	ldrb	r3, [r3, r2]
 80166da:	2b01      	cmp	r3, #1
 80166dc:	d101      	bne.n	80166e2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80166de:	2302      	movs	r3, #2
 80166e0:	e04e      	b.n	8016780 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2220      	movs	r2, #32
 80166e6:	2101      	movs	r1, #1
 80166e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2221      	movs	r2, #33	@ 0x21
 80166ee:	2102      	movs	r1, #2
 80166f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	22ca      	movs	r2, #202	@ 0xca
 80166f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	2253      	movs	r2, #83	@ 0x53
 8016700:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	689a      	ldr	r2, [r3, #8]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	491e      	ldr	r1, [pc, #120]	@ (8016788 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801670e:	400a      	ands	r2, r1
 8016710:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	689a      	ldr	r2, [r3, #8]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	491b      	ldr	r1, [pc, #108]	@ (801678c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801671e:	400a      	ands	r2, r1
 8016720:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016722:	f7f8 fb17 	bl	800ed54 <HAL_GetTick>
 8016726:	0003      	movs	r3, r0
 8016728:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801672a:	e016      	b.n	801675a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801672c:	f7f8 fb12 	bl	800ed54 <HAL_GetTick>
 8016730:	0002      	movs	r2, r0
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	1ad2      	subs	r2, r2, r3
 8016736:	23fa      	movs	r3, #250	@ 0xfa
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	429a      	cmp	r2, r3
 801673c:	d90d      	bls.n	801675a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	22ff      	movs	r2, #255	@ 0xff
 8016744:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2221      	movs	r2, #33	@ 0x21
 801674a:	2103      	movs	r1, #3
 801674c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2220      	movs	r2, #32
 8016752:	2100      	movs	r1, #0
 8016754:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016756:	2303      	movs	r3, #3
 8016758:	e012      	b.n	8016780 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	68db      	ldr	r3, [r3, #12]
 8016760:	2204      	movs	r2, #4
 8016762:	4013      	ands	r3, r2
 8016764:	d0e2      	beq.n	801672c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	22ff      	movs	r2, #255	@ 0xff
 801676c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2221      	movs	r2, #33	@ 0x21
 8016772:	2101      	movs	r1, #1
 8016774:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	2220      	movs	r2, #32
 801677a:	2100      	movs	r1, #0
 801677c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801677e:	2300      	movs	r3, #0
}
 8016780:	0018      	movs	r0, r3
 8016782:	46bd      	mov	sp, r7
 8016784:	b004      	add	sp, #16
 8016786:	bd80      	pop	{r7, pc}
 8016788:	fffffbff 	.word	0xfffffbff
 801678c:	ffffbfff 	.word	0xffffbfff

08016790 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016798:	4b13      	ldr	r3, [pc, #76]	@ (80167e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801679a:	2280      	movs	r2, #128	@ 0x80
 801679c:	0352      	lsls	r2, r2, #13
 801679e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	689a      	ldr	r2, [r3, #8]
 80167a6:	2380      	movs	r3, #128	@ 0x80
 80167a8:	01db      	lsls	r3, r3, #7
 80167aa:	4013      	ands	r3, r2
 80167ac:	d014      	beq.n	80167d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	68da      	ldr	r2, [r3, #12]
 80167b4:	2380      	movs	r3, #128	@ 0x80
 80167b6:	00db      	lsls	r3, r3, #3
 80167b8:	4013      	ands	r3, r2
 80167ba:	d00d      	beq.n	80167d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	68db      	ldr	r3, [r3, #12]
 80167c2:	22ff      	movs	r2, #255	@ 0xff
 80167c4:	401a      	ands	r2, r3
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4908      	ldr	r1, [pc, #32]	@ (80167ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80167cc:	430a      	orrs	r2, r1
 80167ce:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	0018      	movs	r0, r3
 80167d4:	f000 f80c 	bl	80167f0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2221      	movs	r2, #33	@ 0x21
 80167dc:	2101      	movs	r1, #1
 80167de:	5499      	strb	r1, [r3, r2]
}
 80167e0:	46c0      	nop			@ (mov r8, r8)
 80167e2:	46bd      	mov	sp, r7
 80167e4:	b002      	add	sp, #8
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	40010400 	.word	0x40010400
 80167ec:	fffffb7f 	.word	0xfffffb7f

080167f0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b082      	sub	sp, #8
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80167f8:	46c0      	nop			@ (mov r8, r8)
 80167fa:	46bd      	mov	sp, r7
 80167fc:	b002      	add	sp, #8
 80167fe:	bd80      	pop	{r7, pc}

08016800 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b086      	sub	sp, #24
 8016804:	af00      	add	r7, sp, #0
 8016806:	60f8      	str	r0, [r7, #12]
 8016808:	60b9      	str	r1, [r7, #8]
 801680a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801680c:	2300      	movs	r3, #0
 801680e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	3350      	adds	r3, #80	@ 0x50
 8016816:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	697a      	ldr	r2, [r7, #20]
 801681e:	18d3      	adds	r3, r2, r3
 8016820:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8016822:	697b      	ldr	r3, [r7, #20]
 8016824:	687a      	ldr	r2, [r7, #4]
 8016826:	601a      	str	r2, [r3, #0]
}
 8016828:	46c0      	nop			@ (mov r8, r8)
 801682a:	46bd      	mov	sp, r7
 801682c:	b006      	add	sp, #24
 801682e:	bd80      	pop	{r7, pc}

08016830 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b084      	sub	sp, #16
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801683a:	2300      	movs	r3, #0
 801683c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	3350      	adds	r3, #80	@ 0x50
 8016844:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	68fa      	ldr	r2, [r7, #12]
 801684c:	18d3      	adds	r3, r2, r3
 801684e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	681b      	ldr	r3, [r3, #0]
}
 8016854:	0018      	movs	r0, r3
 8016856:	46bd      	mov	sp, r7
 8016858:	b004      	add	sp, #16
 801685a:	bd80      	pop	{r7, pc}

0801685c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d101      	bne.n	801686e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801686a:	2301      	movs	r3, #1
 801686c:	e032      	b.n	80168d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2239      	movs	r2, #57	@ 0x39
 8016872:	5c9b      	ldrb	r3, [r3, r2]
 8016874:	b2db      	uxtb	r3, r3
 8016876:	2b00      	cmp	r3, #0
 8016878:	d107      	bne.n	801688a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2238      	movs	r2, #56	@ 0x38
 801687e:	2100      	movs	r1, #0
 8016880:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	0018      	movs	r0, r3
 8016886:	f7f7 fb77 	bl	800df78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2239      	movs	r2, #57	@ 0x39
 801688e:	2102      	movs	r1, #2
 8016890:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681a      	ldr	r2, [r3, #0]
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	3304      	adds	r3, #4
 801689a:	0019      	movs	r1, r3
 801689c:	0010      	movs	r0, r2
 801689e:	f000 fa1d 	bl	8016cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	223e      	movs	r2, #62	@ 0x3e
 80168a6:	2101      	movs	r1, #1
 80168a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	223a      	movs	r2, #58	@ 0x3a
 80168ae:	2101      	movs	r1, #1
 80168b0:	5499      	strb	r1, [r3, r2]
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	223b      	movs	r2, #59	@ 0x3b
 80168b6:	2101      	movs	r1, #1
 80168b8:	5499      	strb	r1, [r3, r2]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	223c      	movs	r2, #60	@ 0x3c
 80168be:	2101      	movs	r1, #1
 80168c0:	5499      	strb	r1, [r3, r2]
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	223d      	movs	r2, #61	@ 0x3d
 80168c6:	2101      	movs	r1, #1
 80168c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2239      	movs	r2, #57	@ 0x39
 80168ce:	2101      	movs	r1, #1
 80168d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80168d2:	2300      	movs	r3, #0
}
 80168d4:	0018      	movs	r0, r3
 80168d6:	46bd      	mov	sp, r7
 80168d8:	b002      	add	sp, #8
 80168da:	bd80      	pop	{r7, pc}

080168dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2239      	movs	r2, #57	@ 0x39
 80168e8:	5c9b      	ldrb	r3, [r3, r2]
 80168ea:	b2db      	uxtb	r3, r3
 80168ec:	2b01      	cmp	r3, #1
 80168ee:	d001      	beq.n	80168f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80168f0:	2301      	movs	r3, #1
 80168f2:	e033      	b.n	801695c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2239      	movs	r2, #57	@ 0x39
 80168f8:	2102      	movs	r1, #2
 80168fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	2380      	movs	r3, #128	@ 0x80
 8016902:	05db      	lsls	r3, r3, #23
 8016904:	429a      	cmp	r2, r3
 8016906:	d00e      	beq.n	8016926 <HAL_TIM_Base_Start+0x4a>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	4a15      	ldr	r2, [pc, #84]	@ (8016964 <HAL_TIM_Base_Start+0x88>)
 801690e:	4293      	cmp	r3, r2
 8016910:	d009      	beq.n	8016926 <HAL_TIM_Base_Start+0x4a>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4a14      	ldr	r2, [pc, #80]	@ (8016968 <HAL_TIM_Base_Start+0x8c>)
 8016918:	4293      	cmp	r3, r2
 801691a:	d004      	beq.n	8016926 <HAL_TIM_Base_Start+0x4a>
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a12      	ldr	r2, [pc, #72]	@ (801696c <HAL_TIM_Base_Start+0x90>)
 8016922:	4293      	cmp	r3, r2
 8016924:	d111      	bne.n	801694a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	689b      	ldr	r3, [r3, #8]
 801692c:	2207      	movs	r2, #7
 801692e:	4013      	ands	r3, r2
 8016930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	2b06      	cmp	r3, #6
 8016936:	d010      	beq.n	801695a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	681a      	ldr	r2, [r3, #0]
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2101      	movs	r1, #1
 8016944:	430a      	orrs	r2, r1
 8016946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016948:	e007      	b.n	801695a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	681a      	ldr	r2, [r3, #0]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	2101      	movs	r1, #1
 8016956:	430a      	orrs	r2, r1
 8016958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801695a:	2300      	movs	r3, #0
}
 801695c:	0018      	movs	r0, r3
 801695e:	46bd      	mov	sp, r7
 8016960:	b004      	add	sp, #16
 8016962:	bd80      	pop	{r7, pc}
 8016964:	40000400 	.word	0x40000400
 8016968:	40010800 	.word	0x40010800
 801696c:	40011400 	.word	0x40011400

08016970 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	6a1b      	ldr	r3, [r3, #32]
 801697e:	4a0a      	ldr	r2, [pc, #40]	@ (80169a8 <HAL_TIM_Base_Stop+0x38>)
 8016980:	4013      	ands	r3, r2
 8016982:	d107      	bne.n	8016994 <HAL_TIM_Base_Stop+0x24>
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2101      	movs	r1, #1
 8016990:	438a      	bics	r2, r1
 8016992:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2239      	movs	r2, #57	@ 0x39
 8016998:	2101      	movs	r1, #1
 801699a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801699c:	2300      	movs	r3, #0
}
 801699e:	0018      	movs	r0, r3
 80169a0:	46bd      	mov	sp, r7
 80169a2:	b002      	add	sp, #8
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	46c0      	nop			@ (mov r8, r8)
 80169a8:	00001111 	.word	0x00001111

080169ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d101      	bne.n	80169be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80169ba:	2301      	movs	r3, #1
 80169bc:	e032      	b.n	8016a24 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2239      	movs	r2, #57	@ 0x39
 80169c2:	5c9b      	ldrb	r3, [r3, r2]
 80169c4:	b2db      	uxtb	r3, r3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d107      	bne.n	80169da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2238      	movs	r2, #56	@ 0x38
 80169ce:	2100      	movs	r1, #0
 80169d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	0018      	movs	r0, r3
 80169d6:	f7f7 faab 	bl	800df30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2239      	movs	r2, #57	@ 0x39
 80169de:	2102      	movs	r1, #2
 80169e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681a      	ldr	r2, [r3, #0]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	3304      	adds	r3, #4
 80169ea:	0019      	movs	r1, r3
 80169ec:	0010      	movs	r0, r2
 80169ee:	f000 f975 	bl	8016cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	223e      	movs	r2, #62	@ 0x3e
 80169f6:	2101      	movs	r1, #1
 80169f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	223a      	movs	r2, #58	@ 0x3a
 80169fe:	2101      	movs	r1, #1
 8016a00:	5499      	strb	r1, [r3, r2]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	223b      	movs	r2, #59	@ 0x3b
 8016a06:	2101      	movs	r1, #1
 8016a08:	5499      	strb	r1, [r3, r2]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	223c      	movs	r2, #60	@ 0x3c
 8016a0e:	2101      	movs	r1, #1
 8016a10:	5499      	strb	r1, [r3, r2]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	223d      	movs	r2, #61	@ 0x3d
 8016a16:	2101      	movs	r1, #1
 8016a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2239      	movs	r2, #57	@ 0x39
 8016a1e:	2101      	movs	r1, #1
 8016a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	0018      	movs	r0, r3
 8016a26:	46bd      	mov	sp, r7
 8016a28:	b002      	add	sp, #8
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d108      	bne.n	8016a4e <HAL_TIM_PWM_Start+0x22>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	223a      	movs	r2, #58	@ 0x3a
 8016a40:	5c9b      	ldrb	r3, [r3, r2]
 8016a42:	b2db      	uxtb	r3, r3
 8016a44:	3b01      	subs	r3, #1
 8016a46:	1e5a      	subs	r2, r3, #1
 8016a48:	4193      	sbcs	r3, r2
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	e01f      	b.n	8016a8e <HAL_TIM_PWM_Start+0x62>
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	2b04      	cmp	r3, #4
 8016a52:	d108      	bne.n	8016a66 <HAL_TIM_PWM_Start+0x3a>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	223b      	movs	r2, #59	@ 0x3b
 8016a58:	5c9b      	ldrb	r3, [r3, r2]
 8016a5a:	b2db      	uxtb	r3, r3
 8016a5c:	3b01      	subs	r3, #1
 8016a5e:	1e5a      	subs	r2, r3, #1
 8016a60:	4193      	sbcs	r3, r2
 8016a62:	b2db      	uxtb	r3, r3
 8016a64:	e013      	b.n	8016a8e <HAL_TIM_PWM_Start+0x62>
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	2b08      	cmp	r3, #8
 8016a6a:	d108      	bne.n	8016a7e <HAL_TIM_PWM_Start+0x52>
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	223c      	movs	r2, #60	@ 0x3c
 8016a70:	5c9b      	ldrb	r3, [r3, r2]
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	3b01      	subs	r3, #1
 8016a76:	1e5a      	subs	r2, r3, #1
 8016a78:	4193      	sbcs	r3, r2
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	e007      	b.n	8016a8e <HAL_TIM_PWM_Start+0x62>
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	223d      	movs	r2, #61	@ 0x3d
 8016a82:	5c9b      	ldrb	r3, [r3, r2]
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	3b01      	subs	r3, #1
 8016a88:	1e5a      	subs	r2, r3, #1
 8016a8a:	4193      	sbcs	r3, r2
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d001      	beq.n	8016a96 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016a92:	2301      	movs	r3, #1
 8016a94:	e052      	b.n	8016b3c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d104      	bne.n	8016aa6 <HAL_TIM_PWM_Start+0x7a>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	223a      	movs	r2, #58	@ 0x3a
 8016aa0:	2102      	movs	r1, #2
 8016aa2:	5499      	strb	r1, [r3, r2]
 8016aa4:	e013      	b.n	8016ace <HAL_TIM_PWM_Start+0xa2>
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	2b04      	cmp	r3, #4
 8016aaa:	d104      	bne.n	8016ab6 <HAL_TIM_PWM_Start+0x8a>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	223b      	movs	r2, #59	@ 0x3b
 8016ab0:	2102      	movs	r1, #2
 8016ab2:	5499      	strb	r1, [r3, r2]
 8016ab4:	e00b      	b.n	8016ace <HAL_TIM_PWM_Start+0xa2>
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	2b08      	cmp	r3, #8
 8016aba:	d104      	bne.n	8016ac6 <HAL_TIM_PWM_Start+0x9a>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	223c      	movs	r2, #60	@ 0x3c
 8016ac0:	2102      	movs	r1, #2
 8016ac2:	5499      	strb	r1, [r3, r2]
 8016ac4:	e003      	b.n	8016ace <HAL_TIM_PWM_Start+0xa2>
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	223d      	movs	r2, #61	@ 0x3d
 8016aca:	2102      	movs	r1, #2
 8016acc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	6839      	ldr	r1, [r7, #0]
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	0018      	movs	r0, r3
 8016ad8:	f000 fa62 	bl	8016fa0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681a      	ldr	r2, [r3, #0]
 8016ae0:	2380      	movs	r3, #128	@ 0x80
 8016ae2:	05db      	lsls	r3, r3, #23
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d00e      	beq.n	8016b06 <HAL_TIM_PWM_Start+0xda>
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	4a15      	ldr	r2, [pc, #84]	@ (8016b44 <HAL_TIM_PWM_Start+0x118>)
 8016aee:	4293      	cmp	r3, r2
 8016af0:	d009      	beq.n	8016b06 <HAL_TIM_PWM_Start+0xda>
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	4a14      	ldr	r2, [pc, #80]	@ (8016b48 <HAL_TIM_PWM_Start+0x11c>)
 8016af8:	4293      	cmp	r3, r2
 8016afa:	d004      	beq.n	8016b06 <HAL_TIM_PWM_Start+0xda>
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4a12      	ldr	r2, [pc, #72]	@ (8016b4c <HAL_TIM_PWM_Start+0x120>)
 8016b02:	4293      	cmp	r3, r2
 8016b04:	d111      	bne.n	8016b2a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	689b      	ldr	r3, [r3, #8]
 8016b0c:	2207      	movs	r2, #7
 8016b0e:	4013      	ands	r3, r2
 8016b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2b06      	cmp	r3, #6
 8016b16:	d010      	beq.n	8016b3a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	2101      	movs	r1, #1
 8016b24:	430a      	orrs	r2, r1
 8016b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b28:	e007      	b.n	8016b3a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	681a      	ldr	r2, [r3, #0]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	2101      	movs	r1, #1
 8016b36:	430a      	orrs	r2, r1
 8016b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016b3a:	2300      	movs	r3, #0
}
 8016b3c:	0018      	movs	r0, r3
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	b004      	add	sp, #16
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	40000400 	.word	0x40000400
 8016b48:	40010800 	.word	0x40010800
 8016b4c:	40011400 	.word	0x40011400

08016b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b086      	sub	sp, #24
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	60f8      	str	r0, [r7, #12]
 8016b58:	60b9      	str	r1, [r7, #8]
 8016b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b5c:	2317      	movs	r3, #23
 8016b5e:	18fb      	adds	r3, r7, r3
 8016b60:	2200      	movs	r2, #0
 8016b62:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2238      	movs	r2, #56	@ 0x38
 8016b68:	5c9b      	ldrb	r3, [r3, r2]
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d101      	bne.n	8016b72 <HAL_TIM_PWM_ConfigChannel+0x22>
 8016b6e:	2302      	movs	r3, #2
 8016b70:	e0ad      	b.n	8016cce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	2238      	movs	r2, #56	@ 0x38
 8016b76:	2101      	movs	r1, #1
 8016b78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2b0c      	cmp	r3, #12
 8016b7e:	d100      	bne.n	8016b82 <HAL_TIM_PWM_ConfigChannel+0x32>
 8016b80:	e076      	b.n	8016c70 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2b0c      	cmp	r3, #12
 8016b86:	d900      	bls.n	8016b8a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016b88:	e095      	b.n	8016cb6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2b08      	cmp	r3, #8
 8016b8e:	d04e      	beq.n	8016c2e <HAL_TIM_PWM_ConfigChannel+0xde>
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	2b08      	cmp	r3, #8
 8016b94:	d900      	bls.n	8016b98 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016b96:	e08e      	b.n	8016cb6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d003      	beq.n	8016ba6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2b04      	cmp	r3, #4
 8016ba2:	d021      	beq.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016ba4:	e087      	b.n	8016cb6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	68ba      	ldr	r2, [r7, #8]
 8016bac:	0011      	movs	r1, r2
 8016bae:	0018      	movs	r0, r3
 8016bb0:	f000 f8f2 	bl	8016d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	699a      	ldr	r2, [r3, #24]
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2108      	movs	r1, #8
 8016bc0:	430a      	orrs	r2, r1
 8016bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	699a      	ldr	r2, [r3, #24]
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	2104      	movs	r1, #4
 8016bd0:	438a      	bics	r2, r1
 8016bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	6999      	ldr	r1, [r3, #24]
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	68da      	ldr	r2, [r3, #12]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	430a      	orrs	r2, r1
 8016be4:	619a      	str	r2, [r3, #24]
      break;
 8016be6:	e06b      	b.n	8016cc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	68ba      	ldr	r2, [r7, #8]
 8016bee:	0011      	movs	r1, r2
 8016bf0:	0018      	movs	r0, r3
 8016bf2:	f000 f90d 	bl	8016e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	699a      	ldr	r2, [r3, #24]
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2180      	movs	r1, #128	@ 0x80
 8016c02:	0109      	lsls	r1, r1, #4
 8016c04:	430a      	orrs	r2, r1
 8016c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	699a      	ldr	r2, [r3, #24]
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	4931      	ldr	r1, [pc, #196]	@ (8016cd8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016c14:	400a      	ands	r2, r1
 8016c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	6999      	ldr	r1, [r3, #24]
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	021a      	lsls	r2, r3, #8
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	430a      	orrs	r2, r1
 8016c2a:	619a      	str	r2, [r3, #24]
      break;
 8016c2c:	e048      	b.n	8016cc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	68ba      	ldr	r2, [r7, #8]
 8016c34:	0011      	movs	r1, r2
 8016c36:	0018      	movs	r0, r3
 8016c38:	f000 f92c 	bl	8016e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	69da      	ldr	r2, [r3, #28]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2108      	movs	r1, #8
 8016c48:	430a      	orrs	r2, r1
 8016c4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	69da      	ldr	r2, [r3, #28]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	2104      	movs	r1, #4
 8016c58:	438a      	bics	r2, r1
 8016c5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	69d9      	ldr	r1, [r3, #28]
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	68da      	ldr	r2, [r3, #12]
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	430a      	orrs	r2, r1
 8016c6c:	61da      	str	r2, [r3, #28]
      break;
 8016c6e:	e027      	b.n	8016cc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	68ba      	ldr	r2, [r7, #8]
 8016c76:	0011      	movs	r1, r2
 8016c78:	0018      	movs	r0, r3
 8016c7a:	f000 f94b 	bl	8016f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	69da      	ldr	r2, [r3, #28]
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2180      	movs	r1, #128	@ 0x80
 8016c8a:	0109      	lsls	r1, r1, #4
 8016c8c:	430a      	orrs	r2, r1
 8016c8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	69da      	ldr	r2, [r3, #28]
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	490f      	ldr	r1, [pc, #60]	@ (8016cd8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016c9c:	400a      	ands	r2, r1
 8016c9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	69d9      	ldr	r1, [r3, #28]
 8016ca6:	68bb      	ldr	r3, [r7, #8]
 8016ca8:	68db      	ldr	r3, [r3, #12]
 8016caa:	021a      	lsls	r2, r3, #8
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	430a      	orrs	r2, r1
 8016cb2:	61da      	str	r2, [r3, #28]
      break;
 8016cb4:	e004      	b.n	8016cc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016cb6:	2317      	movs	r3, #23
 8016cb8:	18fb      	adds	r3, r7, r3
 8016cba:	2201      	movs	r2, #1
 8016cbc:	701a      	strb	r2, [r3, #0]
      break;
 8016cbe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	2238      	movs	r2, #56	@ 0x38
 8016cc4:	2100      	movs	r1, #0
 8016cc6:	5499      	strb	r1, [r3, r2]

  return status;
 8016cc8:	2317      	movs	r3, #23
 8016cca:	18fb      	adds	r3, r7, r3
 8016ccc:	781b      	ldrb	r3, [r3, #0]
}
 8016cce:	0018      	movs	r0, r3
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	b006      	add	sp, #24
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	46c0      	nop			@ (mov r8, r8)
 8016cd8:	fffffbff 	.word	0xfffffbff

08016cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b084      	sub	sp, #16
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016cec:	687a      	ldr	r2, [r7, #4]
 8016cee:	2380      	movs	r3, #128	@ 0x80
 8016cf0:	05db      	lsls	r3, r3, #23
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d00b      	beq.n	8016d0e <TIM_Base_SetConfig+0x32>
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	4a23      	ldr	r2, [pc, #140]	@ (8016d88 <TIM_Base_SetConfig+0xac>)
 8016cfa:	4293      	cmp	r3, r2
 8016cfc:	d007      	beq.n	8016d0e <TIM_Base_SetConfig+0x32>
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	4a22      	ldr	r2, [pc, #136]	@ (8016d8c <TIM_Base_SetConfig+0xb0>)
 8016d02:	4293      	cmp	r3, r2
 8016d04:	d003      	beq.n	8016d0e <TIM_Base_SetConfig+0x32>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	4a21      	ldr	r2, [pc, #132]	@ (8016d90 <TIM_Base_SetConfig+0xb4>)
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	d108      	bne.n	8016d20 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	2270      	movs	r2, #112	@ 0x70
 8016d12:	4393      	bics	r3, r2
 8016d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	68fa      	ldr	r2, [r7, #12]
 8016d1c:	4313      	orrs	r3, r2
 8016d1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	2380      	movs	r3, #128	@ 0x80
 8016d24:	05db      	lsls	r3, r3, #23
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d00b      	beq.n	8016d42 <TIM_Base_SetConfig+0x66>
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	4a16      	ldr	r2, [pc, #88]	@ (8016d88 <TIM_Base_SetConfig+0xac>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d007      	beq.n	8016d42 <TIM_Base_SetConfig+0x66>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	4a15      	ldr	r2, [pc, #84]	@ (8016d8c <TIM_Base_SetConfig+0xb0>)
 8016d36:	4293      	cmp	r3, r2
 8016d38:	d003      	beq.n	8016d42 <TIM_Base_SetConfig+0x66>
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	4a14      	ldr	r2, [pc, #80]	@ (8016d90 <TIM_Base_SetConfig+0xb4>)
 8016d3e:	4293      	cmp	r3, r2
 8016d40:	d108      	bne.n	8016d54 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	4a13      	ldr	r2, [pc, #76]	@ (8016d94 <TIM_Base_SetConfig+0xb8>)
 8016d46:	4013      	ands	r3, r2
 8016d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	68fa      	ldr	r2, [r7, #12]
 8016d50:	4313      	orrs	r3, r2
 8016d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	2280      	movs	r2, #128	@ 0x80
 8016d58:	4393      	bics	r3, r2
 8016d5a:	001a      	movs	r2, r3
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	691b      	ldr	r3, [r3, #16]
 8016d60:	4313      	orrs	r3, r2
 8016d62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	68fa      	ldr	r2, [r7, #12]
 8016d68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	689a      	ldr	r2, [r3, #8]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016d72:	683b      	ldr	r3, [r7, #0]
 8016d74:	681a      	ldr	r2, [r3, #0]
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	615a      	str	r2, [r3, #20]
}
 8016d80:	46c0      	nop			@ (mov r8, r8)
 8016d82:	46bd      	mov	sp, r7
 8016d84:	b004      	add	sp, #16
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	40000400 	.word	0x40000400
 8016d8c:	40010800 	.word	0x40010800
 8016d90:	40011400 	.word	0x40011400
 8016d94:	fffffcff 	.word	0xfffffcff

08016d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b086      	sub	sp, #24
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
 8016da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6a1b      	ldr	r3, [r3, #32]
 8016da6:	2201      	movs	r2, #1
 8016da8:	4393      	bics	r3, r2
 8016daa:	001a      	movs	r2, r3
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	6a1b      	ldr	r3, [r3, #32]
 8016db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	699b      	ldr	r3, [r3, #24]
 8016dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	2270      	movs	r2, #112	@ 0x70
 8016dc6:	4393      	bics	r3, r2
 8016dc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	2203      	movs	r2, #3
 8016dce:	4393      	bics	r3, r2
 8016dd0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	68fa      	ldr	r2, [r7, #12]
 8016dd8:	4313      	orrs	r3, r2
 8016dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	2202      	movs	r2, #2
 8016de0:	4393      	bics	r3, r2
 8016de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	689b      	ldr	r3, [r3, #8]
 8016de8:	697a      	ldr	r2, [r7, #20]
 8016dea:	4313      	orrs	r3, r2
 8016dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	693a      	ldr	r2, [r7, #16]
 8016df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	68fa      	ldr	r2, [r7, #12]
 8016df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	685a      	ldr	r2, [r3, #4]
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	697a      	ldr	r2, [r7, #20]
 8016e06:	621a      	str	r2, [r3, #32]
}
 8016e08:	46c0      	nop			@ (mov r8, r8)
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	b006      	add	sp, #24
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
 8016e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	6a1b      	ldr	r3, [r3, #32]
 8016e1e:	2210      	movs	r2, #16
 8016e20:	4393      	bics	r3, r2
 8016e22:	001a      	movs	r2, r3
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6a1b      	ldr	r3, [r3, #32]
 8016e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	699b      	ldr	r3, [r3, #24]
 8016e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	4a13      	ldr	r2, [pc, #76]	@ (8016e8c <TIM_OC2_SetConfig+0x7c>)
 8016e3e:	4013      	ands	r3, r2
 8016e40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	4a12      	ldr	r2, [pc, #72]	@ (8016e90 <TIM_OC2_SetConfig+0x80>)
 8016e46:	4013      	ands	r3, r2
 8016e48:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	021b      	lsls	r3, r3, #8
 8016e50:	68fa      	ldr	r2, [r7, #12]
 8016e52:	4313      	orrs	r3, r2
 8016e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016e56:	697b      	ldr	r3, [r7, #20]
 8016e58:	2220      	movs	r2, #32
 8016e5a:	4393      	bics	r3, r2
 8016e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	689b      	ldr	r3, [r3, #8]
 8016e62:	011b      	lsls	r3, r3, #4
 8016e64:	697a      	ldr	r2, [r7, #20]
 8016e66:	4313      	orrs	r3, r2
 8016e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	693a      	ldr	r2, [r7, #16]
 8016e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	68fa      	ldr	r2, [r7, #12]
 8016e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	685a      	ldr	r2, [r3, #4]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	697a      	ldr	r2, [r7, #20]
 8016e82:	621a      	str	r2, [r3, #32]
}
 8016e84:	46c0      	nop			@ (mov r8, r8)
 8016e86:	46bd      	mov	sp, r7
 8016e88:	b006      	add	sp, #24
 8016e8a:	bd80      	pop	{r7, pc}
 8016e8c:	ffff8fff 	.word	0xffff8fff
 8016e90:	fffffcff 	.word	0xfffffcff

08016e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b086      	sub	sp, #24
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6a1b      	ldr	r3, [r3, #32]
 8016ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8016f0c <TIM_OC3_SetConfig+0x78>)
 8016ea4:	401a      	ands	r2, r3
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6a1b      	ldr	r3, [r3, #32]
 8016eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	69db      	ldr	r3, [r3, #28]
 8016eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	2270      	movs	r2, #112	@ 0x70
 8016ec0:	4393      	bics	r3, r2
 8016ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	2203      	movs	r2, #3
 8016ec8:	4393      	bics	r3, r2
 8016eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	68fa      	ldr	r2, [r7, #12]
 8016ed2:	4313      	orrs	r3, r2
 8016ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8016f10 <TIM_OC3_SetConfig+0x7c>)
 8016eda:	4013      	ands	r3, r2
 8016edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	021b      	lsls	r3, r3, #8
 8016ee4:	697a      	ldr	r2, [r7, #20]
 8016ee6:	4313      	orrs	r3, r2
 8016ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	693a      	ldr	r2, [r7, #16]
 8016eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	68fa      	ldr	r2, [r7, #12]
 8016ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	685a      	ldr	r2, [r3, #4]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	697a      	ldr	r2, [r7, #20]
 8016f02:	621a      	str	r2, [r3, #32]
}
 8016f04:	46c0      	nop			@ (mov r8, r8)
 8016f06:	46bd      	mov	sp, r7
 8016f08:	b006      	add	sp, #24
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	fffffeff 	.word	0xfffffeff
 8016f10:	fffffdff 	.word	0xfffffdff

08016f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b086      	sub	sp, #24
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	6a1b      	ldr	r3, [r3, #32]
 8016f22:	4a1b      	ldr	r2, [pc, #108]	@ (8016f90 <TIM_OC4_SetConfig+0x7c>)
 8016f24:	401a      	ands	r2, r3
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6a1b      	ldr	r3, [r3, #32]
 8016f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	69db      	ldr	r3, [r3, #28]
 8016f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	4a15      	ldr	r2, [pc, #84]	@ (8016f94 <TIM_OC4_SetConfig+0x80>)
 8016f40:	4013      	ands	r3, r2
 8016f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	4a14      	ldr	r2, [pc, #80]	@ (8016f98 <TIM_OC4_SetConfig+0x84>)
 8016f48:	4013      	ands	r3, r2
 8016f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	021b      	lsls	r3, r3, #8
 8016f52:	68fa      	ldr	r2, [r7, #12]
 8016f54:	4313      	orrs	r3, r2
 8016f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	4a10      	ldr	r2, [pc, #64]	@ (8016f9c <TIM_OC4_SetConfig+0x88>)
 8016f5c:	4013      	ands	r3, r2
 8016f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	689b      	ldr	r3, [r3, #8]
 8016f64:	031b      	lsls	r3, r3, #12
 8016f66:	697a      	ldr	r2, [r7, #20]
 8016f68:	4313      	orrs	r3, r2
 8016f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	693a      	ldr	r2, [r7, #16]
 8016f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	68fa      	ldr	r2, [r7, #12]
 8016f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	685a      	ldr	r2, [r3, #4]
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	697a      	ldr	r2, [r7, #20]
 8016f84:	621a      	str	r2, [r3, #32]
}
 8016f86:	46c0      	nop			@ (mov r8, r8)
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	b006      	add	sp, #24
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	46c0      	nop			@ (mov r8, r8)
 8016f90:	ffffefff 	.word	0xffffefff
 8016f94:	ffff8fff 	.word	0xffff8fff
 8016f98:	fffffcff 	.word	0xfffffcff
 8016f9c:	ffffdfff 	.word	0xffffdfff

08016fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b086      	sub	sp, #24
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	221f      	movs	r2, #31
 8016fb0:	4013      	ands	r3, r2
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	409a      	lsls	r2, r3
 8016fb6:	0013      	movs	r3, r2
 8016fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	6a1b      	ldr	r3, [r3, #32]
 8016fbe:	697a      	ldr	r2, [r7, #20]
 8016fc0:	43d2      	mvns	r2, r2
 8016fc2:	401a      	ands	r2, r3
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	6a1a      	ldr	r2, [r3, #32]
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	211f      	movs	r1, #31
 8016fd0:	400b      	ands	r3, r1
 8016fd2:	6879      	ldr	r1, [r7, #4]
 8016fd4:	4099      	lsls	r1, r3
 8016fd6:	000b      	movs	r3, r1
 8016fd8:	431a      	orrs	r2, r3
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	621a      	str	r2, [r3, #32]
}
 8016fde:	46c0      	nop			@ (mov r8, r8)
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	b006      	add	sp, #24
 8016fe4:	bd80      	pop	{r7, pc}
	...

08016fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b084      	sub	sp, #16
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2238      	movs	r2, #56	@ 0x38
 8016ff6:	5c9b      	ldrb	r3, [r3, r2]
 8016ff8:	2b01      	cmp	r3, #1
 8016ffa:	d101      	bne.n	8017000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016ffc:	2302      	movs	r3, #2
 8016ffe:	e047      	b.n	8017090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2238      	movs	r2, #56	@ 0x38
 8017004:	2101      	movs	r1, #1
 8017006:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	2239      	movs	r2, #57	@ 0x39
 801700c:	2102      	movs	r1, #2
 801700e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	685b      	ldr	r3, [r3, #4]
 8017016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	689b      	ldr	r3, [r3, #8]
 801701e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2270      	movs	r2, #112	@ 0x70
 8017024:	4393      	bics	r3, r2
 8017026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	68fa      	ldr	r2, [r7, #12]
 801702e:	4313      	orrs	r3, r2
 8017030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	2380      	movs	r3, #128	@ 0x80
 8017040:	05db      	lsls	r3, r3, #23
 8017042:	429a      	cmp	r2, r3
 8017044:	d00e      	beq.n	8017064 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	4a13      	ldr	r2, [pc, #76]	@ (8017098 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801704c:	4293      	cmp	r3, r2
 801704e:	d009      	beq.n	8017064 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	4a11      	ldr	r2, [pc, #68]	@ (801709c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8017056:	4293      	cmp	r3, r2
 8017058:	d004      	beq.n	8017064 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	4a10      	ldr	r2, [pc, #64]	@ (80170a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017060:	4293      	cmp	r3, r2
 8017062:	d10c      	bne.n	801707e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	2280      	movs	r2, #128	@ 0x80
 8017068:	4393      	bics	r3, r2
 801706a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	68ba      	ldr	r2, [r7, #8]
 8017072:	4313      	orrs	r3, r2
 8017074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	68ba      	ldr	r2, [r7, #8]
 801707c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2239      	movs	r2, #57	@ 0x39
 8017082:	2101      	movs	r1, #1
 8017084:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2238      	movs	r2, #56	@ 0x38
 801708a:	2100      	movs	r1, #0
 801708c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801708e:	2300      	movs	r3, #0
}
 8017090:	0018      	movs	r0, r3
 8017092:	46bd      	mov	sp, r7
 8017094:	b004      	add	sp, #16
 8017096:	bd80      	pop	{r7, pc}
 8017098:	40000400 	.word	0x40000400
 801709c:	40010800 	.word	0x40010800
 80170a0:	40011400 	.word	0x40011400

080170a4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2238      	movs	r2, #56	@ 0x38
 80170b2:	5c9b      	ldrb	r3, [r3, r2]
 80170b4:	2b01      	cmp	r3, #1
 80170b6:	d101      	bne.n	80170bc <HAL_TIMEx_RemapConfig+0x18>
 80170b8:	2302      	movs	r3, #2
 80170ba:	e00c      	b.n	80170d6 <HAL_TIMEx_RemapConfig+0x32>
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2238      	movs	r2, #56	@ 0x38
 80170c0:	2101      	movs	r1, #1
 80170c2:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	2238      	movs	r2, #56	@ 0x38
 80170d0:	2100      	movs	r1, #0
 80170d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80170d4:	2300      	movs	r3, #0
}
 80170d6:	0018      	movs	r0, r3
 80170d8:	46bd      	mov	sp, r7
 80170da:	b002      	add	sp, #8
 80170dc:	bd80      	pop	{r7, pc}
	...

080170e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d101      	bne.n	80170f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80170ee:	2301      	movs	r3, #1
 80170f0:	e053      	b.n	801719a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d116      	bne.n	8017128 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2278      	movs	r2, #120	@ 0x78
 80170fe:	2100      	movs	r1, #0
 8017100:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	0018      	movs	r0, r3
 8017106:	f000 fd65 	bl	8017bd4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	22b0      	movs	r2, #176	@ 0xb0
 801710e:	589b      	ldr	r3, [r3, r2]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d103      	bne.n	801711c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	21b0      	movs	r1, #176	@ 0xb0
 8017118:	4a22      	ldr	r2, [pc, #136]	@ (80171a4 <HAL_UART_Init+0xc4>)
 801711a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	22b0      	movs	r2, #176	@ 0xb0
 8017120:	589b      	ldr	r3, [r3, r2]
 8017122:	687a      	ldr	r2, [r7, #4]
 8017124:	0010      	movs	r0, r2
 8017126:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2224      	movs	r2, #36	@ 0x24
 801712c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	2101      	movs	r1, #1
 801713a:	438a      	bics	r2, r1
 801713c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	0018      	movs	r0, r3
 8017142:	f000 fd8b 	bl	8017c5c <UART_SetConfig>
 8017146:	0003      	movs	r3, r0
 8017148:	2b01      	cmp	r3, #1
 801714a:	d101      	bne.n	8017150 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801714c:	2301      	movs	r3, #1
 801714e:	e024      	b.n	801719a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017154:	2b00      	cmp	r3, #0
 8017156:	d003      	beq.n	8017160 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	0018      	movs	r0, r3
 801715c:	f001 f81c 	bl	8018198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	685a      	ldr	r2, [r3, #4]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	490f      	ldr	r1, [pc, #60]	@ (80171a8 <HAL_UART_Init+0xc8>)
 801716c:	400a      	ands	r2, r1
 801716e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	689a      	ldr	r2, [r3, #8]
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	212a      	movs	r1, #42	@ 0x2a
 801717c:	438a      	bics	r2, r1
 801717e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	681a      	ldr	r2, [r3, #0]
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	2101      	movs	r1, #1
 801718c:	430a      	orrs	r2, r1
 801718e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	0018      	movs	r0, r3
 8017194:	f001 f8b4 	bl	8018300 <UART_CheckIdleState>
 8017198:	0003      	movs	r3, r0
}
 801719a:	0018      	movs	r0, r3
 801719c:	46bd      	mov	sp, r7
 801719e:	b002      	add	sp, #8
 80171a0:	bd80      	pop	{r7, pc}
 80171a2:	46c0      	nop			@ (mov r8, r8)
 80171a4:	0800e1ad 	.word	0x0800e1ad
 80171a8:	ffffb7ff 	.word	0xffffb7ff

080171ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b08a      	sub	sp, #40	@ 0x28
 80171b0:	af02      	add	r7, sp, #8
 80171b2:	60f8      	str	r0, [r7, #12]
 80171b4:	60b9      	str	r1, [r7, #8]
 80171b6:	603b      	str	r3, [r7, #0]
 80171b8:	1dbb      	adds	r3, r7, #6
 80171ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80171c0:	2b20      	cmp	r3, #32
 80171c2:	d000      	beq.n	80171c6 <HAL_UART_Transmit+0x1a>
 80171c4:	e08c      	b.n	80172e0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d003      	beq.n	80171d4 <HAL_UART_Transmit+0x28>
 80171cc:	1dbb      	adds	r3, r7, #6
 80171ce:	881b      	ldrh	r3, [r3, #0]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d101      	bne.n	80171d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80171d4:	2301      	movs	r3, #1
 80171d6:	e084      	b.n	80172e2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	689a      	ldr	r2, [r3, #8]
 80171dc:	2380      	movs	r3, #128	@ 0x80
 80171de:	015b      	lsls	r3, r3, #5
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d109      	bne.n	80171f8 <HAL_UART_Transmit+0x4c>
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	691b      	ldr	r3, [r3, #16]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d105      	bne.n	80171f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	2201      	movs	r2, #1
 80171f0:	4013      	ands	r3, r2
 80171f2:	d001      	beq.n	80171f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80171f4:	2301      	movs	r3, #1
 80171f6:	e074      	b.n	80172e2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	2284      	movs	r2, #132	@ 0x84
 80171fc:	2100      	movs	r1, #0
 80171fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	2221      	movs	r2, #33	@ 0x21
 8017204:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017206:	f7f7 fda5 	bl	800ed54 <HAL_GetTick>
 801720a:	0003      	movs	r3, r0
 801720c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	1dba      	adds	r2, r7, #6
 8017212:	2150      	movs	r1, #80	@ 0x50
 8017214:	8812      	ldrh	r2, [r2, #0]
 8017216:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	1dba      	adds	r2, r7, #6
 801721c:	2152      	movs	r1, #82	@ 0x52
 801721e:	8812      	ldrh	r2, [r2, #0]
 8017220:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	689a      	ldr	r2, [r3, #8]
 8017226:	2380      	movs	r3, #128	@ 0x80
 8017228:	015b      	lsls	r3, r3, #5
 801722a:	429a      	cmp	r2, r3
 801722c:	d108      	bne.n	8017240 <HAL_UART_Transmit+0x94>
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	691b      	ldr	r3, [r3, #16]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d104      	bne.n	8017240 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017236:	2300      	movs	r3, #0
 8017238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801723a:	68bb      	ldr	r3, [r7, #8]
 801723c:	61bb      	str	r3, [r7, #24]
 801723e:	e003      	b.n	8017248 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017244:	2300      	movs	r3, #0
 8017246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017248:	e02f      	b.n	80172aa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801724a:	697a      	ldr	r2, [r7, #20]
 801724c:	68f8      	ldr	r0, [r7, #12]
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	9300      	str	r3, [sp, #0]
 8017252:	0013      	movs	r3, r2
 8017254:	2200      	movs	r2, #0
 8017256:	2180      	movs	r1, #128	@ 0x80
 8017258:	f001 f8fa 	bl	8018450 <UART_WaitOnFlagUntilTimeout>
 801725c:	1e03      	subs	r3, r0, #0
 801725e:	d004      	beq.n	801726a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	2220      	movs	r2, #32
 8017264:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8017266:	2303      	movs	r3, #3
 8017268:	e03b      	b.n	80172e2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d10b      	bne.n	8017288 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017270:	69bb      	ldr	r3, [r7, #24]
 8017272:	881b      	ldrh	r3, [r3, #0]
 8017274:	001a      	movs	r2, r3
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	05d2      	lsls	r2, r2, #23
 801727c:	0dd2      	lsrs	r2, r2, #23
 801727e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017280:	69bb      	ldr	r3, [r7, #24]
 8017282:	3302      	adds	r3, #2
 8017284:	61bb      	str	r3, [r7, #24]
 8017286:	e007      	b.n	8017298 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017288:	69fb      	ldr	r3, [r7, #28]
 801728a:	781a      	ldrb	r2, [r3, #0]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017292:	69fb      	ldr	r3, [r7, #28]
 8017294:	3301      	adds	r3, #1
 8017296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	2252      	movs	r2, #82	@ 0x52
 801729c:	5a9b      	ldrh	r3, [r3, r2]
 801729e:	b29b      	uxth	r3, r3
 80172a0:	3b01      	subs	r3, #1
 80172a2:	b299      	uxth	r1, r3
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	2252      	movs	r2, #82	@ 0x52
 80172a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	2252      	movs	r2, #82	@ 0x52
 80172ae:	5a9b      	ldrh	r3, [r3, r2]
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d1c9      	bne.n	801724a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80172b6:	697a      	ldr	r2, [r7, #20]
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	9300      	str	r3, [sp, #0]
 80172be:	0013      	movs	r3, r2
 80172c0:	2200      	movs	r2, #0
 80172c2:	2140      	movs	r1, #64	@ 0x40
 80172c4:	f001 f8c4 	bl	8018450 <UART_WaitOnFlagUntilTimeout>
 80172c8:	1e03      	subs	r3, r0, #0
 80172ca:	d004      	beq.n	80172d6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	2220      	movs	r2, #32
 80172d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80172d2:	2303      	movs	r3, #3
 80172d4:	e005      	b.n	80172e2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	2220      	movs	r2, #32
 80172da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80172dc:	2300      	movs	r3, #0
 80172de:	e000      	b.n	80172e2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80172e0:	2302      	movs	r3, #2
  }
}
 80172e2:	0018      	movs	r0, r3
 80172e4:	46bd      	mov	sp, r7
 80172e6:	b008      	add	sp, #32
 80172e8:	bd80      	pop	{r7, pc}
	...

080172ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b088      	sub	sp, #32
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	60b9      	str	r1, [r7, #8]
 80172f6:	1dbb      	adds	r3, r7, #6
 80172f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	2280      	movs	r2, #128	@ 0x80
 80172fe:	589b      	ldr	r3, [r3, r2]
 8017300:	2b20      	cmp	r3, #32
 8017302:	d14a      	bne.n	801739a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017304:	68bb      	ldr	r3, [r7, #8]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d003      	beq.n	8017312 <HAL_UART_Receive_IT+0x26>
 801730a:	1dbb      	adds	r3, r7, #6
 801730c:	881b      	ldrh	r3, [r3, #0]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d101      	bne.n	8017316 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017312:	2301      	movs	r3, #1
 8017314:	e042      	b.n	801739c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	689a      	ldr	r2, [r3, #8]
 801731a:	2380      	movs	r3, #128	@ 0x80
 801731c:	015b      	lsls	r3, r3, #5
 801731e:	429a      	cmp	r2, r3
 8017320:	d109      	bne.n	8017336 <HAL_UART_Receive_IT+0x4a>
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	691b      	ldr	r3, [r3, #16]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d105      	bne.n	8017336 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	2201      	movs	r2, #1
 801732e:	4013      	ands	r3, r2
 8017330:	d001      	beq.n	8017336 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017332:	2301      	movs	r3, #1
 8017334:	e032      	b.n	801739c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	2200      	movs	r2, #0
 801733a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	4a18      	ldr	r2, [pc, #96]	@ (80173a4 <HAL_UART_Receive_IT+0xb8>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d020      	beq.n	8017388 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	685a      	ldr	r2, [r3, #4]
 801734c:	2380      	movs	r3, #128	@ 0x80
 801734e:	041b      	lsls	r3, r3, #16
 8017350:	4013      	ands	r3, r2
 8017352:	d019      	beq.n	8017388 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017354:	f3ef 8310 	mrs	r3, PRIMASK
 8017358:	613b      	str	r3, [r7, #16]
  return(result);
 801735a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801735c:	61fb      	str	r3, [r7, #28]
 801735e:	2301      	movs	r3, #1
 8017360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	f383 8810 	msr	PRIMASK, r3
}
 8017368:	46c0      	nop			@ (mov r8, r8)
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	2180      	movs	r1, #128	@ 0x80
 8017376:	04c9      	lsls	r1, r1, #19
 8017378:	430a      	orrs	r2, r1
 801737a:	601a      	str	r2, [r3, #0]
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017380:	69bb      	ldr	r3, [r7, #24]
 8017382:	f383 8810 	msr	PRIMASK, r3
}
 8017386:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017388:	1dbb      	adds	r3, r7, #6
 801738a:	881a      	ldrh	r2, [r3, #0]
 801738c:	68b9      	ldr	r1, [r7, #8]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	0018      	movs	r0, r3
 8017392:	f001 f8c7 	bl	8018524 <UART_Start_Receive_IT>
 8017396:	0003      	movs	r3, r0
 8017398:	e000      	b.n	801739c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801739a:	2302      	movs	r3, #2
  }
}
 801739c:	0018      	movs	r0, r3
 801739e:	46bd      	mov	sp, r7
 80173a0:	b008      	add	sp, #32
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	40004800 	.word	0x40004800

080173a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b088      	sub	sp, #32
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	1dbb      	adds	r3, r7, #6
 80173b4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80173ba:	2b20      	cmp	r3, #32
 80173bc:	d000      	beq.n	80173c0 <HAL_UART_Transmit_DMA+0x18>
 80173be:	e077      	b.n	80174b0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d003      	beq.n	80173ce <HAL_UART_Transmit_DMA+0x26>
 80173c6:	1dbb      	adds	r3, r7, #6
 80173c8:	881b      	ldrh	r3, [r3, #0]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d101      	bne.n	80173d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80173ce:	2301      	movs	r3, #1
 80173d0:	e06f      	b.n	80174b2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	689a      	ldr	r2, [r3, #8]
 80173d6:	2380      	movs	r3, #128	@ 0x80
 80173d8:	015b      	lsls	r3, r3, #5
 80173da:	429a      	cmp	r2, r3
 80173dc:	d109      	bne.n	80173f2 <HAL_UART_Transmit_DMA+0x4a>
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	691b      	ldr	r3, [r3, #16]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d105      	bne.n	80173f2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80173e6:	68bb      	ldr	r3, [r7, #8]
 80173e8:	2201      	movs	r2, #1
 80173ea:	4013      	ands	r3, r2
 80173ec:	d001      	beq.n	80173f2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80173ee:	2301      	movs	r3, #1
 80173f0:	e05f      	b.n	80174b2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	68ba      	ldr	r2, [r7, #8]
 80173f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	1dba      	adds	r2, r7, #6
 80173fc:	2150      	movs	r1, #80	@ 0x50
 80173fe:	8812      	ldrh	r2, [r2, #0]
 8017400:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	1dba      	adds	r2, r7, #6
 8017406:	2152      	movs	r1, #82	@ 0x52
 8017408:	8812      	ldrh	r2, [r2, #0]
 801740a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	2284      	movs	r2, #132	@ 0x84
 8017410:	2100      	movs	r1, #0
 8017412:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	2221      	movs	r2, #33	@ 0x21
 8017418:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801741e:	2b00      	cmp	r3, #0
 8017420:	d027      	beq.n	8017472 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017426:	4a25      	ldr	r2, [pc, #148]	@ (80174bc <HAL_UART_Transmit_DMA+0x114>)
 8017428:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801742e:	4a24      	ldr	r2, [pc, #144]	@ (80174c0 <HAL_UART_Transmit_DMA+0x118>)
 8017430:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017436:	4a23      	ldr	r2, [pc, #140]	@ (80174c4 <HAL_UART_Transmit_DMA+0x11c>)
 8017438:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801743e:	2200      	movs	r2, #0
 8017440:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801744a:	0019      	movs	r1, r3
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	3328      	adds	r3, #40	@ 0x28
 8017452:	001a      	movs	r2, r3
 8017454:	1dbb      	adds	r3, r7, #6
 8017456:	881b      	ldrh	r3, [r3, #0]
 8017458:	f7f8 f9ce 	bl	800f7f8 <HAL_DMA_Start_IT>
 801745c:	1e03      	subs	r3, r0, #0
 801745e:	d008      	beq.n	8017472 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	2284      	movs	r2, #132	@ 0x84
 8017464:	2110      	movs	r1, #16
 8017466:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	2220      	movs	r2, #32
 801746c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801746e:	2301      	movs	r3, #1
 8017470:	e01f      	b.n	80174b2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2240      	movs	r2, #64	@ 0x40
 8017478:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801747a:	f3ef 8310 	mrs	r3, PRIMASK
 801747e:	613b      	str	r3, [r7, #16]
  return(result);
 8017480:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017482:	61fb      	str	r3, [r7, #28]
 8017484:	2301      	movs	r3, #1
 8017486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	f383 8810 	msr	PRIMASK, r3
}
 801748e:	46c0      	nop			@ (mov r8, r8)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	689a      	ldr	r2, [r3, #8]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2180      	movs	r1, #128	@ 0x80
 801749c:	430a      	orrs	r2, r1
 801749e:	609a      	str	r2, [r3, #8]
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174a4:	69bb      	ldr	r3, [r7, #24]
 80174a6:	f383 8810 	msr	PRIMASK, r3
}
 80174aa:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80174ac:	2300      	movs	r3, #0
 80174ae:	e000      	b.n	80174b2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80174b0:	2302      	movs	r3, #2
  }
}
 80174b2:	0018      	movs	r0, r3
 80174b4:	46bd      	mov	sp, r7
 80174b6:	b008      	add	sp, #32
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	46c0      	nop			@ (mov r8, r8)
 80174bc:	08018909 	.word	0x08018909
 80174c0:	080189a5 	.word	0x080189a5
 80174c4:	08018b45 	.word	0x08018b45

080174c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b088      	sub	sp, #32
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	60f8      	str	r0, [r7, #12]
 80174d0:	60b9      	str	r1, [r7, #8]
 80174d2:	1dbb      	adds	r3, r7, #6
 80174d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	2280      	movs	r2, #128	@ 0x80
 80174da:	589b      	ldr	r3, [r3, r2]
 80174dc:	2b20      	cmp	r3, #32
 80174de:	d14a      	bne.n	8017576 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d003      	beq.n	80174ee <HAL_UART_Receive_DMA+0x26>
 80174e6:	1dbb      	adds	r3, r7, #6
 80174e8:	881b      	ldrh	r3, [r3, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d101      	bne.n	80174f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80174ee:	2301      	movs	r3, #1
 80174f0:	e042      	b.n	8017578 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	689a      	ldr	r2, [r3, #8]
 80174f6:	2380      	movs	r3, #128	@ 0x80
 80174f8:	015b      	lsls	r3, r3, #5
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d109      	bne.n	8017512 <HAL_UART_Receive_DMA+0x4a>
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	691b      	ldr	r3, [r3, #16]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d105      	bne.n	8017512 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017506:	68bb      	ldr	r3, [r7, #8]
 8017508:	2201      	movs	r2, #1
 801750a:	4013      	ands	r3, r2
 801750c:	d001      	beq.n	8017512 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801750e:	2301      	movs	r3, #1
 8017510:	e032      	b.n	8017578 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	2200      	movs	r2, #0
 8017516:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	4a18      	ldr	r2, [pc, #96]	@ (8017580 <HAL_UART_Receive_DMA+0xb8>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d020      	beq.n	8017564 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	685a      	ldr	r2, [r3, #4]
 8017528:	2380      	movs	r3, #128	@ 0x80
 801752a:	041b      	lsls	r3, r3, #16
 801752c:	4013      	ands	r3, r2
 801752e:	d019      	beq.n	8017564 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017530:	f3ef 8310 	mrs	r3, PRIMASK
 8017534:	613b      	str	r3, [r7, #16]
  return(result);
 8017536:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017538:	61fb      	str	r3, [r7, #28]
 801753a:	2301      	movs	r3, #1
 801753c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	f383 8810 	msr	PRIMASK, r3
}
 8017544:	46c0      	nop			@ (mov r8, r8)
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	681a      	ldr	r2, [r3, #0]
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2180      	movs	r1, #128	@ 0x80
 8017552:	04c9      	lsls	r1, r1, #19
 8017554:	430a      	orrs	r2, r1
 8017556:	601a      	str	r2, [r3, #0]
 8017558:	69fb      	ldr	r3, [r7, #28]
 801755a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801755c:	69bb      	ldr	r3, [r7, #24]
 801755e:	f383 8810 	msr	PRIMASK, r3
}
 8017562:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017564:	1dbb      	adds	r3, r7, #6
 8017566:	881a      	ldrh	r2, [r3, #0]
 8017568:	68b9      	ldr	r1, [r7, #8]
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	0018      	movs	r0, r3
 801756e:	f001 f8a3 	bl	80186b8 <UART_Start_Receive_DMA>
 8017572:	0003      	movs	r3, r0
 8017574:	e000      	b.n	8017578 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017576:	2302      	movs	r3, #2
  }
}
 8017578:	0018      	movs	r0, r3
 801757a:	46bd      	mov	sp, r7
 801757c:	b008      	add	sp, #32
 801757e:	bd80      	pop	{r7, pc}
 8017580:	40004800 	.word	0x40004800

08017584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017584:	b590      	push	{r4, r7, lr}
 8017586:	b0ab      	sub	sp, #172	@ 0xac
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	69db      	ldr	r3, [r3, #28]
 8017592:	22a4      	movs	r2, #164	@ 0xa4
 8017594:	18b9      	adds	r1, r7, r2
 8017596:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	20a0      	movs	r0, #160	@ 0xa0
 80175a0:	1839      	adds	r1, r7, r0
 80175a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	689b      	ldr	r3, [r3, #8]
 80175aa:	219c      	movs	r1, #156	@ 0x9c
 80175ac:	1879      	adds	r1, r7, r1
 80175ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80175b0:	0011      	movs	r1, r2
 80175b2:	18bb      	adds	r3, r7, r2
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	4a9c      	ldr	r2, [pc, #624]	@ (8017828 <HAL_UART_IRQHandler+0x2a4>)
 80175b8:	4013      	ands	r3, r2
 80175ba:	2298      	movs	r2, #152	@ 0x98
 80175bc:	18bc      	adds	r4, r7, r2
 80175be:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80175c0:	18bb      	adds	r3, r7, r2
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d114      	bne.n	80175f2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80175c8:	187b      	adds	r3, r7, r1
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	2220      	movs	r2, #32
 80175ce:	4013      	ands	r3, r2
 80175d0:	d00f      	beq.n	80175f2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80175d2:	183b      	adds	r3, r7, r0
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	2220      	movs	r2, #32
 80175d8:	4013      	ands	r3, r2
 80175da:	d00a      	beq.n	80175f2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d100      	bne.n	80175e6 <HAL_UART_IRQHandler+0x62>
 80175e4:	e2aa      	b.n	8017b3c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175ea:	687a      	ldr	r2, [r7, #4]
 80175ec:	0010      	movs	r0, r2
 80175ee:	4798      	blx	r3
      }
      return;
 80175f0:	e2a4      	b.n	8017b3c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80175f2:	2398      	movs	r3, #152	@ 0x98
 80175f4:	18fb      	adds	r3, r7, r3
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d100      	bne.n	80175fe <HAL_UART_IRQHandler+0x7a>
 80175fc:	e11a      	b.n	8017834 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80175fe:	239c      	movs	r3, #156	@ 0x9c
 8017600:	18fb      	adds	r3, r7, r3
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2201      	movs	r2, #1
 8017606:	4013      	ands	r3, r2
 8017608:	d106      	bne.n	8017618 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801760a:	23a0      	movs	r3, #160	@ 0xa0
 801760c:	18fb      	adds	r3, r7, r3
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	4a86      	ldr	r2, [pc, #536]	@ (801782c <HAL_UART_IRQHandler+0x2a8>)
 8017612:	4013      	ands	r3, r2
 8017614:	d100      	bne.n	8017618 <HAL_UART_IRQHandler+0x94>
 8017616:	e10d      	b.n	8017834 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017618:	23a4      	movs	r3, #164	@ 0xa4
 801761a:	18fb      	adds	r3, r7, r3
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	2201      	movs	r2, #1
 8017620:	4013      	ands	r3, r2
 8017622:	d012      	beq.n	801764a <HAL_UART_IRQHandler+0xc6>
 8017624:	23a0      	movs	r3, #160	@ 0xa0
 8017626:	18fb      	adds	r3, r7, r3
 8017628:	681a      	ldr	r2, [r3, #0]
 801762a:	2380      	movs	r3, #128	@ 0x80
 801762c:	005b      	lsls	r3, r3, #1
 801762e:	4013      	ands	r3, r2
 8017630:	d00b      	beq.n	801764a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2201      	movs	r2, #1
 8017638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	2284      	movs	r2, #132	@ 0x84
 801763e:	589b      	ldr	r3, [r3, r2]
 8017640:	2201      	movs	r2, #1
 8017642:	431a      	orrs	r2, r3
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2184      	movs	r1, #132	@ 0x84
 8017648:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801764a:	23a4      	movs	r3, #164	@ 0xa4
 801764c:	18fb      	adds	r3, r7, r3
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2202      	movs	r2, #2
 8017652:	4013      	ands	r3, r2
 8017654:	d011      	beq.n	801767a <HAL_UART_IRQHandler+0xf6>
 8017656:	239c      	movs	r3, #156	@ 0x9c
 8017658:	18fb      	adds	r3, r7, r3
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	2201      	movs	r2, #1
 801765e:	4013      	ands	r3, r2
 8017660:	d00b      	beq.n	801767a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	2202      	movs	r2, #2
 8017668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2284      	movs	r2, #132	@ 0x84
 801766e:	589b      	ldr	r3, [r3, r2]
 8017670:	2204      	movs	r2, #4
 8017672:	431a      	orrs	r2, r3
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2184      	movs	r1, #132	@ 0x84
 8017678:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801767a:	23a4      	movs	r3, #164	@ 0xa4
 801767c:	18fb      	adds	r3, r7, r3
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	2204      	movs	r2, #4
 8017682:	4013      	ands	r3, r2
 8017684:	d011      	beq.n	80176aa <HAL_UART_IRQHandler+0x126>
 8017686:	239c      	movs	r3, #156	@ 0x9c
 8017688:	18fb      	adds	r3, r7, r3
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	2201      	movs	r2, #1
 801768e:	4013      	ands	r3, r2
 8017690:	d00b      	beq.n	80176aa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	2204      	movs	r2, #4
 8017698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	2284      	movs	r2, #132	@ 0x84
 801769e:	589b      	ldr	r3, [r3, r2]
 80176a0:	2202      	movs	r2, #2
 80176a2:	431a      	orrs	r2, r3
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2184      	movs	r1, #132	@ 0x84
 80176a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80176aa:	23a4      	movs	r3, #164	@ 0xa4
 80176ac:	18fb      	adds	r3, r7, r3
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2208      	movs	r2, #8
 80176b2:	4013      	ands	r3, r2
 80176b4:	d017      	beq.n	80176e6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80176b6:	23a0      	movs	r3, #160	@ 0xa0
 80176b8:	18fb      	adds	r3, r7, r3
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	2220      	movs	r2, #32
 80176be:	4013      	ands	r3, r2
 80176c0:	d105      	bne.n	80176ce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80176c2:	239c      	movs	r3, #156	@ 0x9c
 80176c4:	18fb      	adds	r3, r7, r3
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	2201      	movs	r2, #1
 80176ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80176cc:	d00b      	beq.n	80176e6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	2208      	movs	r2, #8
 80176d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2284      	movs	r2, #132	@ 0x84
 80176da:	589b      	ldr	r3, [r3, r2]
 80176dc:	2208      	movs	r2, #8
 80176de:	431a      	orrs	r2, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2184      	movs	r1, #132	@ 0x84
 80176e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80176e6:	23a4      	movs	r3, #164	@ 0xa4
 80176e8:	18fb      	adds	r3, r7, r3
 80176ea:	681a      	ldr	r2, [r3, #0]
 80176ec:	2380      	movs	r3, #128	@ 0x80
 80176ee:	011b      	lsls	r3, r3, #4
 80176f0:	4013      	ands	r3, r2
 80176f2:	d013      	beq.n	801771c <HAL_UART_IRQHandler+0x198>
 80176f4:	23a0      	movs	r3, #160	@ 0xa0
 80176f6:	18fb      	adds	r3, r7, r3
 80176f8:	681a      	ldr	r2, [r3, #0]
 80176fa:	2380      	movs	r3, #128	@ 0x80
 80176fc:	04db      	lsls	r3, r3, #19
 80176fe:	4013      	ands	r3, r2
 8017700:	d00c      	beq.n	801771c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2280      	movs	r2, #128	@ 0x80
 8017708:	0112      	lsls	r2, r2, #4
 801770a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	2284      	movs	r2, #132	@ 0x84
 8017710:	589b      	ldr	r3, [r3, r2]
 8017712:	2220      	movs	r2, #32
 8017714:	431a      	orrs	r2, r3
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2184      	movs	r1, #132	@ 0x84
 801771a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2284      	movs	r2, #132	@ 0x84
 8017720:	589b      	ldr	r3, [r3, r2]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d100      	bne.n	8017728 <HAL_UART_IRQHandler+0x1a4>
 8017726:	e20b      	b.n	8017b40 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017728:	23a4      	movs	r3, #164	@ 0xa4
 801772a:	18fb      	adds	r3, r7, r3
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2220      	movs	r2, #32
 8017730:	4013      	ands	r3, r2
 8017732:	d00e      	beq.n	8017752 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017734:	23a0      	movs	r3, #160	@ 0xa0
 8017736:	18fb      	adds	r3, r7, r3
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	2220      	movs	r2, #32
 801773c:	4013      	ands	r3, r2
 801773e:	d008      	beq.n	8017752 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017744:	2b00      	cmp	r3, #0
 8017746:	d004      	beq.n	8017752 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801774c:	687a      	ldr	r2, [r7, #4]
 801774e:	0010      	movs	r0, r2
 8017750:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	2284      	movs	r2, #132	@ 0x84
 8017756:	589b      	ldr	r3, [r3, r2]
 8017758:	2194      	movs	r1, #148	@ 0x94
 801775a:	187a      	adds	r2, r7, r1
 801775c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	689b      	ldr	r3, [r3, #8]
 8017764:	2240      	movs	r2, #64	@ 0x40
 8017766:	4013      	ands	r3, r2
 8017768:	2b40      	cmp	r3, #64	@ 0x40
 801776a:	d004      	beq.n	8017776 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801776c:	187b      	adds	r3, r7, r1
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	2228      	movs	r2, #40	@ 0x28
 8017772:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017774:	d04b      	beq.n	801780e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	0018      	movs	r0, r3
 801777a:	f001 f861 	bl	8018840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	2240      	movs	r2, #64	@ 0x40
 8017786:	4013      	ands	r3, r2
 8017788:	2b40      	cmp	r3, #64	@ 0x40
 801778a:	d139      	bne.n	8017800 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801778c:	f3ef 8310 	mrs	r3, PRIMASK
 8017790:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017794:	2090      	movs	r0, #144	@ 0x90
 8017796:	183a      	adds	r2, r7, r0
 8017798:	6013      	str	r3, [r2, #0]
 801779a:	2301      	movs	r3, #1
 801779c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801779e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80177a0:	f383 8810 	msr	PRIMASK, r3
}
 80177a4:	46c0      	nop			@ (mov r8, r8)
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	689a      	ldr	r2, [r3, #8]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2140      	movs	r1, #64	@ 0x40
 80177b2:	438a      	bics	r2, r1
 80177b4:	609a      	str	r2, [r3, #8]
 80177b6:	183b      	adds	r3, r7, r0
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80177be:	f383 8810 	msr	PRIMASK, r3
}
 80177c2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d012      	beq.n	80177f2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177d0:	4a17      	ldr	r2, [pc, #92]	@ (8017830 <HAL_UART_IRQHandler+0x2ac>)
 80177d2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177d8:	0018      	movs	r0, r3
 80177da:	f7f8 f8b3 	bl	800f944 <HAL_DMA_Abort_IT>
 80177de:	1e03      	subs	r3, r0, #0
 80177e0:	d020      	beq.n	8017824 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177ec:	0018      	movs	r0, r3
 80177ee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177f0:	e018      	b.n	8017824 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	2298      	movs	r2, #152	@ 0x98
 80177f6:	589b      	ldr	r3, [r3, r2]
 80177f8:	687a      	ldr	r2, [r7, #4]
 80177fa:	0010      	movs	r0, r2
 80177fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177fe:	e011      	b.n	8017824 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2298      	movs	r2, #152	@ 0x98
 8017804:	589b      	ldr	r3, [r3, r2]
 8017806:	687a      	ldr	r2, [r7, #4]
 8017808:	0010      	movs	r0, r2
 801780a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801780c:	e00a      	b.n	8017824 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	2298      	movs	r2, #152	@ 0x98
 8017812:	589b      	ldr	r3, [r3, r2]
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	0010      	movs	r0, r2
 8017818:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	2284      	movs	r2, #132	@ 0x84
 801781e:	2100      	movs	r1, #0
 8017820:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8017822:	e18d      	b.n	8017b40 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017824:	46c0      	nop			@ (mov r8, r8)
    return;
 8017826:	e18b      	b.n	8017b40 <HAL_UART_IRQHandler+0x5bc>
 8017828:	0000080f 	.word	0x0000080f
 801782c:	04000120 	.word	0x04000120
 8017830:	08018bcd 	.word	0x08018bcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017838:	2b01      	cmp	r3, #1
 801783a:	d000      	beq.n	801783e <HAL_UART_IRQHandler+0x2ba>
 801783c:	e13d      	b.n	8017aba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801783e:	23a4      	movs	r3, #164	@ 0xa4
 8017840:	18fb      	adds	r3, r7, r3
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2210      	movs	r2, #16
 8017846:	4013      	ands	r3, r2
 8017848:	d100      	bne.n	801784c <HAL_UART_IRQHandler+0x2c8>
 801784a:	e136      	b.n	8017aba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801784c:	23a0      	movs	r3, #160	@ 0xa0
 801784e:	18fb      	adds	r3, r7, r3
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	2210      	movs	r2, #16
 8017854:	4013      	ands	r3, r2
 8017856:	d100      	bne.n	801785a <HAL_UART_IRQHandler+0x2d6>
 8017858:	e12f      	b.n	8017aba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2210      	movs	r2, #16
 8017860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	689b      	ldr	r3, [r3, #8]
 8017868:	2240      	movs	r2, #64	@ 0x40
 801786a:	4013      	ands	r3, r2
 801786c:	2b40      	cmp	r3, #64	@ 0x40
 801786e:	d000      	beq.n	8017872 <HAL_UART_IRQHandler+0x2ee>
 8017870:	e0a2      	b.n	80179b8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	685a      	ldr	r2, [r3, #4]
 801787a:	217e      	movs	r1, #126	@ 0x7e
 801787c:	187b      	adds	r3, r7, r1
 801787e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017880:	187b      	adds	r3, r7, r1
 8017882:	881b      	ldrh	r3, [r3, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d100      	bne.n	801788a <HAL_UART_IRQHandler+0x306>
 8017888:	e15c      	b.n	8017b44 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2258      	movs	r2, #88	@ 0x58
 801788e:	5a9b      	ldrh	r3, [r3, r2]
 8017890:	187a      	adds	r2, r7, r1
 8017892:	8812      	ldrh	r2, [r2, #0]
 8017894:	429a      	cmp	r2, r3
 8017896:	d300      	bcc.n	801789a <HAL_UART_IRQHandler+0x316>
 8017898:	e154      	b.n	8017b44 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	187a      	adds	r2, r7, r1
 801789e:	215a      	movs	r1, #90	@ 0x5a
 80178a0:	8812      	ldrh	r2, [r2, #0]
 80178a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	2220      	movs	r2, #32
 80178ae:	4013      	ands	r3, r2
 80178b0:	d16f      	bne.n	8017992 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178b2:	f3ef 8310 	mrs	r3, PRIMASK
 80178b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80178b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80178ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80178bc:	2301      	movs	r3, #1
 80178be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178c2:	f383 8810 	msr	PRIMASK, r3
}
 80178c6:	46c0      	nop			@ (mov r8, r8)
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	681a      	ldr	r2, [r3, #0]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	49a0      	ldr	r1, [pc, #640]	@ (8017b54 <HAL_UART_IRQHandler+0x5d0>)
 80178d4:	400a      	ands	r2, r1
 80178d6:	601a      	str	r2, [r3, #0]
 80178d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80178da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178de:	f383 8810 	msr	PRIMASK, r3
}
 80178e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178e4:	f3ef 8310 	mrs	r3, PRIMASK
 80178e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80178ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80178ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80178ee:	2301      	movs	r3, #1
 80178f0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80178f4:	f383 8810 	msr	PRIMASK, r3
}
 80178f8:	46c0      	nop			@ (mov r8, r8)
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	689a      	ldr	r2, [r3, #8]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2101      	movs	r1, #1
 8017906:	438a      	bics	r2, r1
 8017908:	609a      	str	r2, [r3, #8]
 801790a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801790c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801790e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017910:	f383 8810 	msr	PRIMASK, r3
}
 8017914:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017916:	f3ef 8310 	mrs	r3, PRIMASK
 801791a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801791c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801791e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017920:	2301      	movs	r3, #1
 8017922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017926:	f383 8810 	msr	PRIMASK, r3
}
 801792a:	46c0      	nop			@ (mov r8, r8)
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	689a      	ldr	r2, [r3, #8]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	2140      	movs	r1, #64	@ 0x40
 8017938:	438a      	bics	r2, r1
 801793a:	609a      	str	r2, [r3, #8]
 801793c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801793e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017942:	f383 8810 	msr	PRIMASK, r3
}
 8017946:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2280      	movs	r2, #128	@ 0x80
 801794c:	2120      	movs	r1, #32
 801794e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	2200      	movs	r2, #0
 8017954:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017956:	f3ef 8310 	mrs	r3, PRIMASK
 801795a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801795c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801795e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017960:	2301      	movs	r3, #1
 8017962:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017966:	f383 8810 	msr	PRIMASK, r3
}
 801796a:	46c0      	nop			@ (mov r8, r8)
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	681a      	ldr	r2, [r3, #0]
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2110      	movs	r1, #16
 8017978:	438a      	bics	r2, r1
 801797a:	601a      	str	r2, [r3, #0]
 801797c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801797e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017982:	f383 8810 	msr	PRIMASK, r3
}
 8017986:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801798c:	0018      	movs	r0, r3
 801798e:	f7f7 ff99 	bl	800f8c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	2202      	movs	r2, #2
 8017996:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	22ac      	movs	r2, #172	@ 0xac
 801799c:	589b      	ldr	r3, [r3, r2]
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	2158      	movs	r1, #88	@ 0x58
 80179a2:	5a51      	ldrh	r1, [r2, r1]
 80179a4:	687a      	ldr	r2, [r7, #4]
 80179a6:	205a      	movs	r0, #90	@ 0x5a
 80179a8:	5a12      	ldrh	r2, [r2, r0]
 80179aa:	b292      	uxth	r2, r2
 80179ac:	1a8a      	subs	r2, r1, r2
 80179ae:	b291      	uxth	r1, r2
 80179b0:	687a      	ldr	r2, [r7, #4]
 80179b2:	0010      	movs	r0, r2
 80179b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80179b6:	e0c5      	b.n	8017b44 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2258      	movs	r2, #88	@ 0x58
 80179bc:	5a99      	ldrh	r1, [r3, r2]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	225a      	movs	r2, #90	@ 0x5a
 80179c2:	5a9b      	ldrh	r3, [r3, r2]
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	208e      	movs	r0, #142	@ 0x8e
 80179c8:	183b      	adds	r3, r7, r0
 80179ca:	1a8a      	subs	r2, r1, r2
 80179cc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	225a      	movs	r2, #90	@ 0x5a
 80179d2:	5a9b      	ldrh	r3, [r3, r2]
 80179d4:	b29b      	uxth	r3, r3
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d100      	bne.n	80179dc <HAL_UART_IRQHandler+0x458>
 80179da:	e0b5      	b.n	8017b48 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80179dc:	183b      	adds	r3, r7, r0
 80179de:	881b      	ldrh	r3, [r3, #0]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d100      	bne.n	80179e6 <HAL_UART_IRQHandler+0x462>
 80179e4:	e0b0      	b.n	8017b48 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179e6:	f3ef 8310 	mrs	r3, PRIMASK
 80179ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80179ec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80179ee:	2488      	movs	r4, #136	@ 0x88
 80179f0:	193a      	adds	r2, r7, r4
 80179f2:	6013      	str	r3, [r2, #0]
 80179f4:	2301      	movs	r3, #1
 80179f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179f8:	693b      	ldr	r3, [r7, #16]
 80179fa:	f383 8810 	msr	PRIMASK, r3
}
 80179fe:	46c0      	nop			@ (mov r8, r8)
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	681a      	ldr	r2, [r3, #0]
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	4953      	ldr	r1, [pc, #332]	@ (8017b58 <HAL_UART_IRQHandler+0x5d4>)
 8017a0c:	400a      	ands	r2, r1
 8017a0e:	601a      	str	r2, [r3, #0]
 8017a10:	193b      	adds	r3, r7, r4
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a16:	697b      	ldr	r3, [r7, #20]
 8017a18:	f383 8810 	msr	PRIMASK, r3
}
 8017a1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8017a22:	61bb      	str	r3, [r7, #24]
  return(result);
 8017a24:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a26:	2484      	movs	r4, #132	@ 0x84
 8017a28:	193a      	adds	r2, r7, r4
 8017a2a:	6013      	str	r3, [r2, #0]
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a30:	69fb      	ldr	r3, [r7, #28]
 8017a32:	f383 8810 	msr	PRIMASK, r3
}
 8017a36:	46c0      	nop			@ (mov r8, r8)
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	689a      	ldr	r2, [r3, #8]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2101      	movs	r1, #1
 8017a44:	438a      	bics	r2, r1
 8017a46:	609a      	str	r2, [r3, #8]
 8017a48:	193b      	adds	r3, r7, r4
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a4e:	6a3b      	ldr	r3, [r7, #32]
 8017a50:	f383 8810 	msr	PRIMASK, r3
}
 8017a54:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2280      	movs	r2, #128	@ 0x80
 8017a5a:	2120      	movs	r1, #32
 8017a5c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	2200      	movs	r2, #0
 8017a62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2200      	movs	r2, #0
 8017a68:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8017a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a72:	2480      	movs	r4, #128	@ 0x80
 8017a74:	193a      	adds	r2, r7, r4
 8017a76:	6013      	str	r3, [r2, #0]
 8017a78:	2301      	movs	r3, #1
 8017a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7e:	f383 8810 	msr	PRIMASK, r3
}
 8017a82:	46c0      	nop			@ (mov r8, r8)
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2110      	movs	r1, #16
 8017a90:	438a      	bics	r2, r1
 8017a92:	601a      	str	r2, [r3, #0]
 8017a94:	193b      	adds	r3, r7, r4
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a9c:	f383 8810 	msr	PRIMASK, r3
}
 8017aa0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2202      	movs	r2, #2
 8017aa6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	22ac      	movs	r2, #172	@ 0xac
 8017aac:	589b      	ldr	r3, [r3, r2]
 8017aae:	183a      	adds	r2, r7, r0
 8017ab0:	8811      	ldrh	r1, [r2, #0]
 8017ab2:	687a      	ldr	r2, [r7, #4]
 8017ab4:	0010      	movs	r0, r2
 8017ab6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017ab8:	e046      	b.n	8017b48 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017aba:	23a4      	movs	r3, #164	@ 0xa4
 8017abc:	18fb      	adds	r3, r7, r3
 8017abe:	681a      	ldr	r2, [r3, #0]
 8017ac0:	2380      	movs	r3, #128	@ 0x80
 8017ac2:	035b      	lsls	r3, r3, #13
 8017ac4:	4013      	ands	r3, r2
 8017ac6:	d012      	beq.n	8017aee <HAL_UART_IRQHandler+0x56a>
 8017ac8:	239c      	movs	r3, #156	@ 0x9c
 8017aca:	18fb      	adds	r3, r7, r3
 8017acc:	681a      	ldr	r2, [r3, #0]
 8017ace:	2380      	movs	r3, #128	@ 0x80
 8017ad0:	03db      	lsls	r3, r3, #15
 8017ad2:	4013      	ands	r3, r2
 8017ad4:	d00b      	beq.n	8017aee <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	2280      	movs	r2, #128	@ 0x80
 8017adc:	0352      	lsls	r2, r2, #13
 8017ade:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	22a8      	movs	r2, #168	@ 0xa8
 8017ae4:	589b      	ldr	r3, [r3, r2]
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	0010      	movs	r0, r2
 8017aea:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017aec:	e02f      	b.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017aee:	23a4      	movs	r3, #164	@ 0xa4
 8017af0:	18fb      	adds	r3, r7, r3
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2280      	movs	r2, #128	@ 0x80
 8017af6:	4013      	ands	r3, r2
 8017af8:	d00f      	beq.n	8017b1a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017afa:	23a0      	movs	r3, #160	@ 0xa0
 8017afc:	18fb      	adds	r3, r7, r3
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	2280      	movs	r2, #128	@ 0x80
 8017b02:	4013      	ands	r3, r2
 8017b04:	d009      	beq.n	8017b1a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d01e      	beq.n	8017b4c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b12:	687a      	ldr	r2, [r7, #4]
 8017b14:	0010      	movs	r0, r2
 8017b16:	4798      	blx	r3
    }
    return;
 8017b18:	e018      	b.n	8017b4c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017b1a:	23a4      	movs	r3, #164	@ 0xa4
 8017b1c:	18fb      	adds	r3, r7, r3
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	2240      	movs	r2, #64	@ 0x40
 8017b22:	4013      	ands	r3, r2
 8017b24:	d013      	beq.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
 8017b26:	23a0      	movs	r3, #160	@ 0xa0
 8017b28:	18fb      	adds	r3, r7, r3
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	2240      	movs	r2, #64	@ 0x40
 8017b2e:	4013      	ands	r3, r2
 8017b30:	d00d      	beq.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	0018      	movs	r0, r3
 8017b36:	f001 f862 	bl	8018bfe <UART_EndTransmit_IT>
    return;
 8017b3a:	e008      	b.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017b3c:	46c0      	nop			@ (mov r8, r8)
 8017b3e:	e006      	b.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017b40:	46c0      	nop			@ (mov r8, r8)
 8017b42:	e004      	b.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017b44:	46c0      	nop			@ (mov r8, r8)
 8017b46:	e002      	b.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017b48:	46c0      	nop			@ (mov r8, r8)
 8017b4a:	e000      	b.n	8017b4e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017b4c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	b02b      	add	sp, #172	@ 0xac
 8017b52:	bd90      	pop	{r4, r7, pc}
 8017b54:	fffffeff 	.word	0xfffffeff
 8017b58:	fffffedf 	.word	0xfffffedf

08017b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017b64:	46c0      	nop			@ (mov r8, r8)
 8017b66:	46bd      	mov	sp, r7
 8017b68:	b002      	add	sp, #8
 8017b6a:	bd80      	pop	{r7, pc}

08017b6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b082      	sub	sp, #8
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017b74:	46c0      	nop			@ (mov r8, r8)
 8017b76:	46bd      	mov	sp, r7
 8017b78:	b002      	add	sp, #8
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b082      	sub	sp, #8
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017b84:	46c0      	nop			@ (mov r8, r8)
 8017b86:	46bd      	mov	sp, r7
 8017b88:	b002      	add	sp, #8
 8017b8a:	bd80      	pop	{r7, pc}

08017b8c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b082      	sub	sp, #8
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017b94:	46c0      	nop			@ (mov r8, r8)
 8017b96:	46bd      	mov	sp, r7
 8017b98:	b002      	add	sp, #8
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017ba4:	46c0      	nop			@ (mov r8, r8)
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	b002      	add	sp, #8
 8017baa:	bd80      	pop	{r7, pc}

08017bac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017bb4:	46c0      	nop			@ (mov r8, r8)
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	b002      	add	sp, #8
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b082      	sub	sp, #8
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
 8017bc4:	000a      	movs	r2, r1
 8017bc6:	1cbb      	adds	r3, r7, #2
 8017bc8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017bca:	46c0      	nop			@ (mov r8, r8)
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	b002      	add	sp, #8
 8017bd0:	bd80      	pop	{r7, pc}
	...

08017bd4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2188      	movs	r1, #136	@ 0x88
 8017be0:	4a14      	ldr	r2, [pc, #80]	@ (8017c34 <UART_InitCallbacksToDefault+0x60>)
 8017be2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	218c      	movs	r1, #140	@ 0x8c
 8017be8:	4a13      	ldr	r2, [pc, #76]	@ (8017c38 <UART_InitCallbacksToDefault+0x64>)
 8017bea:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2190      	movs	r1, #144	@ 0x90
 8017bf0:	4a12      	ldr	r2, [pc, #72]	@ (8017c3c <UART_InitCallbacksToDefault+0x68>)
 8017bf2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2194      	movs	r1, #148	@ 0x94
 8017bf8:	4a11      	ldr	r2, [pc, #68]	@ (8017c40 <UART_InitCallbacksToDefault+0x6c>)
 8017bfa:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2198      	movs	r1, #152	@ 0x98
 8017c00:	4a10      	ldr	r2, [pc, #64]	@ (8017c44 <UART_InitCallbacksToDefault+0x70>)
 8017c02:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	219c      	movs	r1, #156	@ 0x9c
 8017c08:	4a0f      	ldr	r2, [pc, #60]	@ (8017c48 <UART_InitCallbacksToDefault+0x74>)
 8017c0a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	21a0      	movs	r1, #160	@ 0xa0
 8017c10:	4a0e      	ldr	r2, [pc, #56]	@ (8017c4c <UART_InitCallbacksToDefault+0x78>)
 8017c12:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	21a4      	movs	r1, #164	@ 0xa4
 8017c18:	4a0d      	ldr	r2, [pc, #52]	@ (8017c50 <UART_InitCallbacksToDefault+0x7c>)
 8017c1a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	21a8      	movs	r1, #168	@ 0xa8
 8017c20:	4a0c      	ldr	r2, [pc, #48]	@ (8017c54 <UART_InitCallbacksToDefault+0x80>)
 8017c22:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	21ac      	movs	r1, #172	@ 0xac
 8017c28:	4a0b      	ldr	r2, [pc, #44]	@ (8017c58 <UART_InitCallbacksToDefault+0x84>)
 8017c2a:	505a      	str	r2, [r3, r1]

}
 8017c2c:	46c0      	nop			@ (mov r8, r8)
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	b002      	add	sp, #8
 8017c32:	bd80      	pop	{r7, pc}
 8017c34:	08017b6d 	.word	0x08017b6d
 8017c38:	08017b5d 	.word	0x08017b5d
 8017c3c:	08017b7d 	.word	0x08017b7d
 8017c40:	0800829d 	.word	0x0800829d
 8017c44:	08003ced 	.word	0x08003ced
 8017c48:	08017b8d 	.word	0x08017b8d
 8017c4c:	08017b9d 	.word	0x08017b9d
 8017c50:	08017bad 	.word	0x08017bad
 8017c54:	08018ff1 	.word	0x08018ff1
 8017c58:	08017bbd 	.word	0x08017bbd

08017c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017c5c:	b5b0      	push	{r4, r5, r7, lr}
 8017c5e:	b08e      	sub	sp, #56	@ 0x38
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017c64:	231a      	movs	r3, #26
 8017c66:	2218      	movs	r2, #24
 8017c68:	189b      	adds	r3, r3, r2
 8017c6a:	19db      	adds	r3, r3, r7
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017c70:	69fb      	ldr	r3, [r7, #28]
 8017c72:	689a      	ldr	r2, [r3, #8]
 8017c74:	69fb      	ldr	r3, [r7, #28]
 8017c76:	691b      	ldr	r3, [r3, #16]
 8017c78:	431a      	orrs	r2, r3
 8017c7a:	69fb      	ldr	r3, [r7, #28]
 8017c7c:	695b      	ldr	r3, [r3, #20]
 8017c7e:	431a      	orrs	r2, r3
 8017c80:	69fb      	ldr	r3, [r7, #28]
 8017c82:	69db      	ldr	r3, [r3, #28]
 8017c84:	4313      	orrs	r3, r2
 8017c86:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017c88:	69fb      	ldr	r3, [r7, #28]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	4ac3      	ldr	r2, [pc, #780]	@ (8017f9c <UART_SetConfig+0x340>)
 8017c90:	4013      	ands	r3, r2
 8017c92:	0019      	movs	r1, r3
 8017c94:	69fb      	ldr	r3, [r7, #28]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c9a:	430a      	orrs	r2, r1
 8017c9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017c9e:	69fb      	ldr	r3, [r7, #28]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	4abe      	ldr	r2, [pc, #760]	@ (8017fa0 <UART_SetConfig+0x344>)
 8017ca6:	4013      	ands	r3, r2
 8017ca8:	0019      	movs	r1, r3
 8017caa:	69fb      	ldr	r3, [r7, #28]
 8017cac:	68da      	ldr	r2, [r3, #12]
 8017cae:	69fb      	ldr	r3, [r7, #28]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	430a      	orrs	r2, r1
 8017cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017cb6:	69fb      	ldr	r3, [r7, #28]
 8017cb8:	699b      	ldr	r3, [r3, #24]
 8017cba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017cbc:	69fb      	ldr	r3, [r7, #28]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	4ab8      	ldr	r2, [pc, #736]	@ (8017fa4 <UART_SetConfig+0x348>)
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	d004      	beq.n	8017cd0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017cc6:	69fb      	ldr	r3, [r7, #28]
 8017cc8:	6a1b      	ldr	r3, [r3, #32]
 8017cca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017ccc:	4313      	orrs	r3, r2
 8017cce:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017cd0:	69fb      	ldr	r3, [r7, #28]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	689b      	ldr	r3, [r3, #8]
 8017cd6:	4ab4      	ldr	r2, [pc, #720]	@ (8017fa8 <UART_SetConfig+0x34c>)
 8017cd8:	4013      	ands	r3, r2
 8017cda:	0019      	movs	r1, r3
 8017cdc:	69fb      	ldr	r3, [r7, #28]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017ce2:	430a      	orrs	r2, r1
 8017ce4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017ce6:	69fb      	ldr	r3, [r7, #28]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	4ab0      	ldr	r2, [pc, #704]	@ (8017fac <UART_SetConfig+0x350>)
 8017cec:	4293      	cmp	r3, r2
 8017cee:	d131      	bne.n	8017d54 <UART_SetConfig+0xf8>
 8017cf0:	4baf      	ldr	r3, [pc, #700]	@ (8017fb0 <UART_SetConfig+0x354>)
 8017cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017cf4:	2203      	movs	r2, #3
 8017cf6:	4013      	ands	r3, r2
 8017cf8:	2b03      	cmp	r3, #3
 8017cfa:	d01d      	beq.n	8017d38 <UART_SetConfig+0xdc>
 8017cfc:	d823      	bhi.n	8017d46 <UART_SetConfig+0xea>
 8017cfe:	2b02      	cmp	r3, #2
 8017d00:	d00c      	beq.n	8017d1c <UART_SetConfig+0xc0>
 8017d02:	d820      	bhi.n	8017d46 <UART_SetConfig+0xea>
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d002      	beq.n	8017d0e <UART_SetConfig+0xb2>
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d00e      	beq.n	8017d2a <UART_SetConfig+0xce>
 8017d0c:	e01b      	b.n	8017d46 <UART_SetConfig+0xea>
 8017d0e:	231b      	movs	r3, #27
 8017d10:	2218      	movs	r2, #24
 8017d12:	189b      	adds	r3, r3, r2
 8017d14:	19db      	adds	r3, r3, r7
 8017d16:	2201      	movs	r2, #1
 8017d18:	701a      	strb	r2, [r3, #0]
 8017d1a:	e0b4      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d1c:	231b      	movs	r3, #27
 8017d1e:	2218      	movs	r2, #24
 8017d20:	189b      	adds	r3, r3, r2
 8017d22:	19db      	adds	r3, r3, r7
 8017d24:	2202      	movs	r2, #2
 8017d26:	701a      	strb	r2, [r3, #0]
 8017d28:	e0ad      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d2a:	231b      	movs	r3, #27
 8017d2c:	2218      	movs	r2, #24
 8017d2e:	189b      	adds	r3, r3, r2
 8017d30:	19db      	adds	r3, r3, r7
 8017d32:	2204      	movs	r2, #4
 8017d34:	701a      	strb	r2, [r3, #0]
 8017d36:	e0a6      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d38:	231b      	movs	r3, #27
 8017d3a:	2218      	movs	r2, #24
 8017d3c:	189b      	adds	r3, r3, r2
 8017d3e:	19db      	adds	r3, r3, r7
 8017d40:	2208      	movs	r2, #8
 8017d42:	701a      	strb	r2, [r3, #0]
 8017d44:	e09f      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d46:	231b      	movs	r3, #27
 8017d48:	2218      	movs	r2, #24
 8017d4a:	189b      	adds	r3, r3, r2
 8017d4c:	19db      	adds	r3, r3, r7
 8017d4e:	2210      	movs	r2, #16
 8017d50:	701a      	strb	r2, [r3, #0]
 8017d52:	e098      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d54:	69fb      	ldr	r3, [r7, #28]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4a96      	ldr	r2, [pc, #600]	@ (8017fb4 <UART_SetConfig+0x358>)
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d131      	bne.n	8017dc2 <UART_SetConfig+0x166>
 8017d5e:	4b94      	ldr	r3, [pc, #592]	@ (8017fb0 <UART_SetConfig+0x354>)
 8017d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017d62:	220c      	movs	r2, #12
 8017d64:	4013      	ands	r3, r2
 8017d66:	2b0c      	cmp	r3, #12
 8017d68:	d01d      	beq.n	8017da6 <UART_SetConfig+0x14a>
 8017d6a:	d823      	bhi.n	8017db4 <UART_SetConfig+0x158>
 8017d6c:	2b08      	cmp	r3, #8
 8017d6e:	d00c      	beq.n	8017d8a <UART_SetConfig+0x12e>
 8017d70:	d820      	bhi.n	8017db4 <UART_SetConfig+0x158>
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d002      	beq.n	8017d7c <UART_SetConfig+0x120>
 8017d76:	2b04      	cmp	r3, #4
 8017d78:	d00e      	beq.n	8017d98 <UART_SetConfig+0x13c>
 8017d7a:	e01b      	b.n	8017db4 <UART_SetConfig+0x158>
 8017d7c:	231b      	movs	r3, #27
 8017d7e:	2218      	movs	r2, #24
 8017d80:	189b      	adds	r3, r3, r2
 8017d82:	19db      	adds	r3, r3, r7
 8017d84:	2200      	movs	r2, #0
 8017d86:	701a      	strb	r2, [r3, #0]
 8017d88:	e07d      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d8a:	231b      	movs	r3, #27
 8017d8c:	2218      	movs	r2, #24
 8017d8e:	189b      	adds	r3, r3, r2
 8017d90:	19db      	adds	r3, r3, r7
 8017d92:	2202      	movs	r2, #2
 8017d94:	701a      	strb	r2, [r3, #0]
 8017d96:	e076      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017d98:	231b      	movs	r3, #27
 8017d9a:	2218      	movs	r2, #24
 8017d9c:	189b      	adds	r3, r3, r2
 8017d9e:	19db      	adds	r3, r3, r7
 8017da0:	2204      	movs	r2, #4
 8017da2:	701a      	strb	r2, [r3, #0]
 8017da4:	e06f      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017da6:	231b      	movs	r3, #27
 8017da8:	2218      	movs	r2, #24
 8017daa:	189b      	adds	r3, r3, r2
 8017dac:	19db      	adds	r3, r3, r7
 8017dae:	2208      	movs	r2, #8
 8017db0:	701a      	strb	r2, [r3, #0]
 8017db2:	e068      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017db4:	231b      	movs	r3, #27
 8017db6:	2218      	movs	r2, #24
 8017db8:	189b      	adds	r3, r3, r2
 8017dba:	19db      	adds	r3, r3, r7
 8017dbc:	2210      	movs	r2, #16
 8017dbe:	701a      	strb	r2, [r3, #0]
 8017dc0:	e061      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017dc2:	69fb      	ldr	r3, [r7, #28]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8017fb8 <UART_SetConfig+0x35c>)
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d106      	bne.n	8017dda <UART_SetConfig+0x17e>
 8017dcc:	231b      	movs	r3, #27
 8017dce:	2218      	movs	r2, #24
 8017dd0:	189b      	adds	r3, r3, r2
 8017dd2:	19db      	adds	r3, r3, r7
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	701a      	strb	r2, [r3, #0]
 8017dd8:	e055      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	4a77      	ldr	r2, [pc, #476]	@ (8017fbc <UART_SetConfig+0x360>)
 8017de0:	4293      	cmp	r3, r2
 8017de2:	d106      	bne.n	8017df2 <UART_SetConfig+0x196>
 8017de4:	231b      	movs	r3, #27
 8017de6:	2218      	movs	r2, #24
 8017de8:	189b      	adds	r3, r3, r2
 8017dea:	19db      	adds	r3, r3, r7
 8017dec:	2200      	movs	r2, #0
 8017dee:	701a      	strb	r2, [r3, #0]
 8017df0:	e049      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	4a6b      	ldr	r2, [pc, #428]	@ (8017fa4 <UART_SetConfig+0x348>)
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	d13e      	bne.n	8017e7a <UART_SetConfig+0x21e>
 8017dfc:	4b6c      	ldr	r3, [pc, #432]	@ (8017fb0 <UART_SetConfig+0x354>)
 8017dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017e00:	23c0      	movs	r3, #192	@ 0xc0
 8017e02:	011b      	lsls	r3, r3, #4
 8017e04:	4013      	ands	r3, r2
 8017e06:	22c0      	movs	r2, #192	@ 0xc0
 8017e08:	0112      	lsls	r2, r2, #4
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d027      	beq.n	8017e5e <UART_SetConfig+0x202>
 8017e0e:	22c0      	movs	r2, #192	@ 0xc0
 8017e10:	0112      	lsls	r2, r2, #4
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d82a      	bhi.n	8017e6c <UART_SetConfig+0x210>
 8017e16:	2280      	movs	r2, #128	@ 0x80
 8017e18:	0112      	lsls	r2, r2, #4
 8017e1a:	4293      	cmp	r3, r2
 8017e1c:	d011      	beq.n	8017e42 <UART_SetConfig+0x1e6>
 8017e1e:	2280      	movs	r2, #128	@ 0x80
 8017e20:	0112      	lsls	r2, r2, #4
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d822      	bhi.n	8017e6c <UART_SetConfig+0x210>
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d004      	beq.n	8017e34 <UART_SetConfig+0x1d8>
 8017e2a:	2280      	movs	r2, #128	@ 0x80
 8017e2c:	00d2      	lsls	r2, r2, #3
 8017e2e:	4293      	cmp	r3, r2
 8017e30:	d00e      	beq.n	8017e50 <UART_SetConfig+0x1f4>
 8017e32:	e01b      	b.n	8017e6c <UART_SetConfig+0x210>
 8017e34:	231b      	movs	r3, #27
 8017e36:	2218      	movs	r2, #24
 8017e38:	189b      	adds	r3, r3, r2
 8017e3a:	19db      	adds	r3, r3, r7
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	701a      	strb	r2, [r3, #0]
 8017e40:	e021      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017e42:	231b      	movs	r3, #27
 8017e44:	2218      	movs	r2, #24
 8017e46:	189b      	adds	r3, r3, r2
 8017e48:	19db      	adds	r3, r3, r7
 8017e4a:	2202      	movs	r2, #2
 8017e4c:	701a      	strb	r2, [r3, #0]
 8017e4e:	e01a      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017e50:	231b      	movs	r3, #27
 8017e52:	2218      	movs	r2, #24
 8017e54:	189b      	adds	r3, r3, r2
 8017e56:	19db      	adds	r3, r3, r7
 8017e58:	2204      	movs	r2, #4
 8017e5a:	701a      	strb	r2, [r3, #0]
 8017e5c:	e013      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017e5e:	231b      	movs	r3, #27
 8017e60:	2218      	movs	r2, #24
 8017e62:	189b      	adds	r3, r3, r2
 8017e64:	19db      	adds	r3, r3, r7
 8017e66:	2208      	movs	r2, #8
 8017e68:	701a      	strb	r2, [r3, #0]
 8017e6a:	e00c      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017e6c:	231b      	movs	r3, #27
 8017e6e:	2218      	movs	r2, #24
 8017e70:	189b      	adds	r3, r3, r2
 8017e72:	19db      	adds	r3, r3, r7
 8017e74:	2210      	movs	r2, #16
 8017e76:	701a      	strb	r2, [r3, #0]
 8017e78:	e005      	b.n	8017e86 <UART_SetConfig+0x22a>
 8017e7a:	231b      	movs	r3, #27
 8017e7c:	2218      	movs	r2, #24
 8017e7e:	189b      	adds	r3, r3, r2
 8017e80:	19db      	adds	r3, r3, r7
 8017e82:	2210      	movs	r2, #16
 8017e84:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017e86:	69fb      	ldr	r3, [r7, #28]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a46      	ldr	r2, [pc, #280]	@ (8017fa4 <UART_SetConfig+0x348>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d000      	beq.n	8017e92 <UART_SetConfig+0x236>
 8017e90:	e09a      	b.n	8017fc8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017e92:	231b      	movs	r3, #27
 8017e94:	2218      	movs	r2, #24
 8017e96:	189b      	adds	r3, r3, r2
 8017e98:	19db      	adds	r3, r3, r7
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	2b08      	cmp	r3, #8
 8017e9e:	d01d      	beq.n	8017edc <UART_SetConfig+0x280>
 8017ea0:	dc20      	bgt.n	8017ee4 <UART_SetConfig+0x288>
 8017ea2:	2b04      	cmp	r3, #4
 8017ea4:	d015      	beq.n	8017ed2 <UART_SetConfig+0x276>
 8017ea6:	dc1d      	bgt.n	8017ee4 <UART_SetConfig+0x288>
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d002      	beq.n	8017eb2 <UART_SetConfig+0x256>
 8017eac:	2b02      	cmp	r3, #2
 8017eae:	d005      	beq.n	8017ebc <UART_SetConfig+0x260>
 8017eb0:	e018      	b.n	8017ee4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017eb2:	f7fd fe4b 	bl	8015b4c <HAL_RCC_GetPCLK1Freq>
 8017eb6:	0003      	movs	r3, r0
 8017eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017eba:	e01c      	b.n	8017ef6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8017fb0 <UART_SetConfig+0x354>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	2210      	movs	r2, #16
 8017ec2:	4013      	ands	r3, r2
 8017ec4:	d002      	beq.n	8017ecc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8017fc0 <UART_SetConfig+0x364>)
 8017ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017eca:	e014      	b.n	8017ef6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8017fc4 <UART_SetConfig+0x368>)
 8017ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ed0:	e011      	b.n	8017ef6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017ed2:	f7fd fd8b 	bl	80159ec <HAL_RCC_GetSysClockFreq>
 8017ed6:	0003      	movs	r3, r0
 8017ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017eda:	e00c      	b.n	8017ef6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017edc:	2380      	movs	r3, #128	@ 0x80
 8017ede:	021b      	lsls	r3, r3, #8
 8017ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ee2:	e008      	b.n	8017ef6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017ee8:	231a      	movs	r3, #26
 8017eea:	2218      	movs	r2, #24
 8017eec:	189b      	adds	r3, r3, r2
 8017eee:	19db      	adds	r3, r3, r7
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	701a      	strb	r2, [r3, #0]
        break;
 8017ef4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d100      	bne.n	8017efe <UART_SetConfig+0x2a2>
 8017efc:	e133      	b.n	8018166 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	685a      	ldr	r2, [r3, #4]
 8017f02:	0013      	movs	r3, r2
 8017f04:	005b      	lsls	r3, r3, #1
 8017f06:	189b      	adds	r3, r3, r2
 8017f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	d305      	bcc.n	8017f1a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017f0e:	69fb      	ldr	r3, [r7, #28]
 8017f10:	685b      	ldr	r3, [r3, #4]
 8017f12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d906      	bls.n	8017f28 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017f1a:	231a      	movs	r3, #26
 8017f1c:	2218      	movs	r2, #24
 8017f1e:	189b      	adds	r3, r3, r2
 8017f20:	19db      	adds	r3, r3, r7
 8017f22:	2201      	movs	r2, #1
 8017f24:	701a      	strb	r2, [r3, #0]
 8017f26:	e11e      	b.n	8018166 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f2a:	613b      	str	r3, [r7, #16]
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	617b      	str	r3, [r7, #20]
 8017f30:	6939      	ldr	r1, [r7, #16]
 8017f32:	697a      	ldr	r2, [r7, #20]
 8017f34:	000b      	movs	r3, r1
 8017f36:	0e1b      	lsrs	r3, r3, #24
 8017f38:	0010      	movs	r0, r2
 8017f3a:	0205      	lsls	r5, r0, #8
 8017f3c:	431d      	orrs	r5, r3
 8017f3e:	000b      	movs	r3, r1
 8017f40:	021c      	lsls	r4, r3, #8
 8017f42:	69fb      	ldr	r3, [r7, #28]
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	085b      	lsrs	r3, r3, #1
 8017f48:	60bb      	str	r3, [r7, #8]
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	60fb      	str	r3, [r7, #12]
 8017f4e:	68b8      	ldr	r0, [r7, #8]
 8017f50:	68f9      	ldr	r1, [r7, #12]
 8017f52:	1900      	adds	r0, r0, r4
 8017f54:	4169      	adcs	r1, r5
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	685b      	ldr	r3, [r3, #4]
 8017f5a:	603b      	str	r3, [r7, #0]
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	607b      	str	r3, [r7, #4]
 8017f60:	683a      	ldr	r2, [r7, #0]
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f7e8 fb0c 	bl	8000580 <__aeabi_uldivmod>
 8017f68:	0002      	movs	r2, r0
 8017f6a:	000b      	movs	r3, r1
 8017f6c:	0013      	movs	r3, r2
 8017f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f72:	23c0      	movs	r3, #192	@ 0xc0
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d309      	bcc.n	8017f8e <UART_SetConfig+0x332>
 8017f7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f7c:	2380      	movs	r3, #128	@ 0x80
 8017f7e:	035b      	lsls	r3, r3, #13
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d204      	bcs.n	8017f8e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017f84:	69fb      	ldr	r3, [r7, #28]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f8a:	60da      	str	r2, [r3, #12]
 8017f8c:	e0eb      	b.n	8018166 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017f8e:	231a      	movs	r3, #26
 8017f90:	2218      	movs	r2, #24
 8017f92:	189b      	adds	r3, r3, r2
 8017f94:	19db      	adds	r3, r3, r7
 8017f96:	2201      	movs	r2, #1
 8017f98:	701a      	strb	r2, [r3, #0]
 8017f9a:	e0e4      	b.n	8018166 <UART_SetConfig+0x50a>
 8017f9c:	efff69f3 	.word	0xefff69f3
 8017fa0:	ffffcfff 	.word	0xffffcfff
 8017fa4:	40004800 	.word	0x40004800
 8017fa8:	fffff4ff 	.word	0xfffff4ff
 8017fac:	40013800 	.word	0x40013800
 8017fb0:	40021000 	.word	0x40021000
 8017fb4:	40004400 	.word	0x40004400
 8017fb8:	40004c00 	.word	0x40004c00
 8017fbc:	40005000 	.word	0x40005000
 8017fc0:	003d0900 	.word	0x003d0900
 8017fc4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017fc8:	69fb      	ldr	r3, [r7, #28]
 8017fca:	69da      	ldr	r2, [r3, #28]
 8017fcc:	2380      	movs	r3, #128	@ 0x80
 8017fce:	021b      	lsls	r3, r3, #8
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d000      	beq.n	8017fd6 <UART_SetConfig+0x37a>
 8017fd4:	e070      	b.n	80180b8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017fd6:	231b      	movs	r3, #27
 8017fd8:	2218      	movs	r2, #24
 8017fda:	189b      	adds	r3, r3, r2
 8017fdc:	19db      	adds	r3, r3, r7
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b08      	cmp	r3, #8
 8017fe2:	d822      	bhi.n	801802a <UART_SetConfig+0x3ce>
 8017fe4:	009a      	lsls	r2, r3, #2
 8017fe6:	4b67      	ldr	r3, [pc, #412]	@ (8018184 <UART_SetConfig+0x528>)
 8017fe8:	18d3      	adds	r3, r2, r3
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017fee:	f7fd fdad 	bl	8015b4c <HAL_RCC_GetPCLK1Freq>
 8017ff2:	0003      	movs	r3, r0
 8017ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ff6:	e021      	b.n	801803c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017ff8:	f7fd fdbe 	bl	8015b78 <HAL_RCC_GetPCLK2Freq>
 8017ffc:	0003      	movs	r3, r0
 8017ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018000:	e01c      	b.n	801803c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018002:	4b61      	ldr	r3, [pc, #388]	@ (8018188 <UART_SetConfig+0x52c>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	2210      	movs	r2, #16
 8018008:	4013      	ands	r3, r2
 801800a:	d002      	beq.n	8018012 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801800c:	4b5f      	ldr	r3, [pc, #380]	@ (801818c <UART_SetConfig+0x530>)
 801800e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018010:	e014      	b.n	801803c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8018012:	4b5f      	ldr	r3, [pc, #380]	@ (8018190 <UART_SetConfig+0x534>)
 8018014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018016:	e011      	b.n	801803c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018018:	f7fd fce8 	bl	80159ec <HAL_RCC_GetSysClockFreq>
 801801c:	0003      	movs	r3, r0
 801801e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018020:	e00c      	b.n	801803c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018022:	2380      	movs	r3, #128	@ 0x80
 8018024:	021b      	lsls	r3, r3, #8
 8018026:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018028:	e008      	b.n	801803c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801802a:	2300      	movs	r3, #0
 801802c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801802e:	231a      	movs	r3, #26
 8018030:	2218      	movs	r2, #24
 8018032:	189b      	adds	r3, r3, r2
 8018034:	19db      	adds	r3, r3, r7
 8018036:	2201      	movs	r2, #1
 8018038:	701a      	strb	r2, [r3, #0]
        break;
 801803a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801803c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801803e:	2b00      	cmp	r3, #0
 8018040:	d100      	bne.n	8018044 <UART_SetConfig+0x3e8>
 8018042:	e090      	b.n	8018166 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018046:	005a      	lsls	r2, r3, #1
 8018048:	69fb      	ldr	r3, [r7, #28]
 801804a:	685b      	ldr	r3, [r3, #4]
 801804c:	085b      	lsrs	r3, r3, #1
 801804e:	18d2      	adds	r2, r2, r3
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	685b      	ldr	r3, [r3, #4]
 8018054:	0019      	movs	r1, r3
 8018056:	0010      	movs	r0, r2
 8018058:	f7e8 f8a4 	bl	80001a4 <__udivsi3>
 801805c:	0003      	movs	r3, r0
 801805e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018062:	2b0f      	cmp	r3, #15
 8018064:	d921      	bls.n	80180aa <UART_SetConfig+0x44e>
 8018066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018068:	2380      	movs	r3, #128	@ 0x80
 801806a:	025b      	lsls	r3, r3, #9
 801806c:	429a      	cmp	r2, r3
 801806e:	d21c      	bcs.n	80180aa <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018072:	b29a      	uxth	r2, r3
 8018074:	200e      	movs	r0, #14
 8018076:	2418      	movs	r4, #24
 8018078:	1903      	adds	r3, r0, r4
 801807a:	19db      	adds	r3, r3, r7
 801807c:	210f      	movs	r1, #15
 801807e:	438a      	bics	r2, r1
 8018080:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018084:	085b      	lsrs	r3, r3, #1
 8018086:	b29b      	uxth	r3, r3
 8018088:	2207      	movs	r2, #7
 801808a:	4013      	ands	r3, r2
 801808c:	b299      	uxth	r1, r3
 801808e:	1903      	adds	r3, r0, r4
 8018090:	19db      	adds	r3, r3, r7
 8018092:	1902      	adds	r2, r0, r4
 8018094:	19d2      	adds	r2, r2, r7
 8018096:	8812      	ldrh	r2, [r2, #0]
 8018098:	430a      	orrs	r2, r1
 801809a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801809c:	69fb      	ldr	r3, [r7, #28]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	1902      	adds	r2, r0, r4
 80180a2:	19d2      	adds	r2, r2, r7
 80180a4:	8812      	ldrh	r2, [r2, #0]
 80180a6:	60da      	str	r2, [r3, #12]
 80180a8:	e05d      	b.n	8018166 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80180aa:	231a      	movs	r3, #26
 80180ac:	2218      	movs	r2, #24
 80180ae:	189b      	adds	r3, r3, r2
 80180b0:	19db      	adds	r3, r3, r7
 80180b2:	2201      	movs	r2, #1
 80180b4:	701a      	strb	r2, [r3, #0]
 80180b6:	e056      	b.n	8018166 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80180b8:	231b      	movs	r3, #27
 80180ba:	2218      	movs	r2, #24
 80180bc:	189b      	adds	r3, r3, r2
 80180be:	19db      	adds	r3, r3, r7
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	2b08      	cmp	r3, #8
 80180c4:	d822      	bhi.n	801810c <UART_SetConfig+0x4b0>
 80180c6:	009a      	lsls	r2, r3, #2
 80180c8:	4b32      	ldr	r3, [pc, #200]	@ (8018194 <UART_SetConfig+0x538>)
 80180ca:	18d3      	adds	r3, r2, r3
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80180d0:	f7fd fd3c 	bl	8015b4c <HAL_RCC_GetPCLK1Freq>
 80180d4:	0003      	movs	r3, r0
 80180d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180d8:	e021      	b.n	801811e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80180da:	f7fd fd4d 	bl	8015b78 <HAL_RCC_GetPCLK2Freq>
 80180de:	0003      	movs	r3, r0
 80180e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180e2:	e01c      	b.n	801811e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80180e4:	4b28      	ldr	r3, [pc, #160]	@ (8018188 <UART_SetConfig+0x52c>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2210      	movs	r2, #16
 80180ea:	4013      	ands	r3, r2
 80180ec:	d002      	beq.n	80180f4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80180ee:	4b27      	ldr	r3, [pc, #156]	@ (801818c <UART_SetConfig+0x530>)
 80180f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80180f2:	e014      	b.n	801811e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80180f4:	4b26      	ldr	r3, [pc, #152]	@ (8018190 <UART_SetConfig+0x534>)
 80180f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180f8:	e011      	b.n	801811e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80180fa:	f7fd fc77 	bl	80159ec <HAL_RCC_GetSysClockFreq>
 80180fe:	0003      	movs	r3, r0
 8018100:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018102:	e00c      	b.n	801811e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018104:	2380      	movs	r3, #128	@ 0x80
 8018106:	021b      	lsls	r3, r3, #8
 8018108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801810a:	e008      	b.n	801811e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801810c:	2300      	movs	r3, #0
 801810e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018110:	231a      	movs	r3, #26
 8018112:	2218      	movs	r2, #24
 8018114:	189b      	adds	r3, r3, r2
 8018116:	19db      	adds	r3, r3, r7
 8018118:	2201      	movs	r2, #1
 801811a:	701a      	strb	r2, [r3, #0]
        break;
 801811c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801811e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018120:	2b00      	cmp	r3, #0
 8018122:	d020      	beq.n	8018166 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018124:	69fb      	ldr	r3, [r7, #28]
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	085a      	lsrs	r2, r3, #1
 801812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801812c:	18d2      	adds	r2, r2, r3
 801812e:	69fb      	ldr	r3, [r7, #28]
 8018130:	685b      	ldr	r3, [r3, #4]
 8018132:	0019      	movs	r1, r3
 8018134:	0010      	movs	r0, r2
 8018136:	f7e8 f835 	bl	80001a4 <__udivsi3>
 801813a:	0003      	movs	r3, r0
 801813c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018140:	2b0f      	cmp	r3, #15
 8018142:	d90a      	bls.n	801815a <UART_SetConfig+0x4fe>
 8018144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018146:	2380      	movs	r3, #128	@ 0x80
 8018148:	025b      	lsls	r3, r3, #9
 801814a:	429a      	cmp	r2, r3
 801814c:	d205      	bcs.n	801815a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018150:	b29a      	uxth	r2, r3
 8018152:	69fb      	ldr	r3, [r7, #28]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	60da      	str	r2, [r3, #12]
 8018158:	e005      	b.n	8018166 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801815a:	231a      	movs	r3, #26
 801815c:	2218      	movs	r2, #24
 801815e:	189b      	adds	r3, r3, r2
 8018160:	19db      	adds	r3, r3, r7
 8018162:	2201      	movs	r2, #1
 8018164:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018166:	69fb      	ldr	r3, [r7, #28]
 8018168:	2200      	movs	r2, #0
 801816a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801816c:	69fb      	ldr	r3, [r7, #28]
 801816e:	2200      	movs	r2, #0
 8018170:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018172:	231a      	movs	r3, #26
 8018174:	2218      	movs	r2, #24
 8018176:	189b      	adds	r3, r3, r2
 8018178:	19db      	adds	r3, r3, r7
 801817a:	781b      	ldrb	r3, [r3, #0]
}
 801817c:	0018      	movs	r0, r3
 801817e:	46bd      	mov	sp, r7
 8018180:	b00e      	add	sp, #56	@ 0x38
 8018182:	bdb0      	pop	{r4, r5, r7, pc}
 8018184:	08025684 	.word	0x08025684
 8018188:	40021000 	.word	0x40021000
 801818c:	003d0900 	.word	0x003d0900
 8018190:	00f42400 	.word	0x00f42400
 8018194:	080256a8 	.word	0x080256a8

08018198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181a4:	2201      	movs	r2, #1
 80181a6:	4013      	ands	r3, r2
 80181a8:	d00b      	beq.n	80181c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	4a4a      	ldr	r2, [pc, #296]	@ (80182dc <UART_AdvFeatureConfig+0x144>)
 80181b2:	4013      	ands	r3, r2
 80181b4:	0019      	movs	r1, r3
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	430a      	orrs	r2, r1
 80181c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181c6:	2202      	movs	r2, #2
 80181c8:	4013      	ands	r3, r2
 80181ca:	d00b      	beq.n	80181e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	685b      	ldr	r3, [r3, #4]
 80181d2:	4a43      	ldr	r2, [pc, #268]	@ (80182e0 <UART_AdvFeatureConfig+0x148>)
 80181d4:	4013      	ands	r3, r2
 80181d6:	0019      	movs	r1, r3
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	430a      	orrs	r2, r1
 80181e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181e8:	2204      	movs	r2, #4
 80181ea:	4013      	ands	r3, r2
 80181ec:	d00b      	beq.n	8018206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	685b      	ldr	r3, [r3, #4]
 80181f4:	4a3b      	ldr	r2, [pc, #236]	@ (80182e4 <UART_AdvFeatureConfig+0x14c>)
 80181f6:	4013      	ands	r3, r2
 80181f8:	0019      	movs	r1, r3
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	430a      	orrs	r2, r1
 8018204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801820a:	2208      	movs	r2, #8
 801820c:	4013      	ands	r3, r2
 801820e:	d00b      	beq.n	8018228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	4a34      	ldr	r2, [pc, #208]	@ (80182e8 <UART_AdvFeatureConfig+0x150>)
 8018218:	4013      	ands	r3, r2
 801821a:	0019      	movs	r1, r3
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	430a      	orrs	r2, r1
 8018226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801822c:	2210      	movs	r2, #16
 801822e:	4013      	ands	r3, r2
 8018230:	d00b      	beq.n	801824a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	689b      	ldr	r3, [r3, #8]
 8018238:	4a2c      	ldr	r2, [pc, #176]	@ (80182ec <UART_AdvFeatureConfig+0x154>)
 801823a:	4013      	ands	r3, r2
 801823c:	0019      	movs	r1, r3
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	430a      	orrs	r2, r1
 8018248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801824e:	2220      	movs	r2, #32
 8018250:	4013      	ands	r3, r2
 8018252:	d00b      	beq.n	801826c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	689b      	ldr	r3, [r3, #8]
 801825a:	4a25      	ldr	r2, [pc, #148]	@ (80182f0 <UART_AdvFeatureConfig+0x158>)
 801825c:	4013      	ands	r3, r2
 801825e:	0019      	movs	r1, r3
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	430a      	orrs	r2, r1
 801826a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018270:	2240      	movs	r2, #64	@ 0x40
 8018272:	4013      	ands	r3, r2
 8018274:	d01d      	beq.n	80182b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	4a1d      	ldr	r2, [pc, #116]	@ (80182f4 <UART_AdvFeatureConfig+0x15c>)
 801827e:	4013      	ands	r3, r2
 8018280:	0019      	movs	r1, r3
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	430a      	orrs	r2, r1
 801828c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018292:	2380      	movs	r3, #128	@ 0x80
 8018294:	035b      	lsls	r3, r3, #13
 8018296:	429a      	cmp	r2, r3
 8018298:	d10b      	bne.n	80182b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	4a15      	ldr	r2, [pc, #84]	@ (80182f8 <UART_AdvFeatureConfig+0x160>)
 80182a2:	4013      	ands	r3, r2
 80182a4:	0019      	movs	r1, r3
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	430a      	orrs	r2, r1
 80182b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182b6:	2280      	movs	r2, #128	@ 0x80
 80182b8:	4013      	ands	r3, r2
 80182ba:	d00b      	beq.n	80182d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	4a0e      	ldr	r2, [pc, #56]	@ (80182fc <UART_AdvFeatureConfig+0x164>)
 80182c4:	4013      	ands	r3, r2
 80182c6:	0019      	movs	r1, r3
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	430a      	orrs	r2, r1
 80182d2:	605a      	str	r2, [r3, #4]
  }
}
 80182d4:	46c0      	nop			@ (mov r8, r8)
 80182d6:	46bd      	mov	sp, r7
 80182d8:	b002      	add	sp, #8
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	fffdffff 	.word	0xfffdffff
 80182e0:	fffeffff 	.word	0xfffeffff
 80182e4:	fffbffff 	.word	0xfffbffff
 80182e8:	ffff7fff 	.word	0xffff7fff
 80182ec:	ffffefff 	.word	0xffffefff
 80182f0:	ffffdfff 	.word	0xffffdfff
 80182f4:	ffefffff 	.word	0xffefffff
 80182f8:	ff9fffff 	.word	0xff9fffff
 80182fc:	fff7ffff 	.word	0xfff7ffff

08018300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b092      	sub	sp, #72	@ 0x48
 8018304:	af02      	add	r7, sp, #8
 8018306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2284      	movs	r2, #132	@ 0x84
 801830c:	2100      	movs	r1, #0
 801830e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018310:	f7f6 fd20 	bl	800ed54 <HAL_GetTick>
 8018314:	0003      	movs	r3, r0
 8018316:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2208      	movs	r2, #8
 8018320:	4013      	ands	r3, r2
 8018322:	2b08      	cmp	r3, #8
 8018324:	d12c      	bne.n	8018380 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018328:	2280      	movs	r2, #128	@ 0x80
 801832a:	0391      	lsls	r1, r2, #14
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	4a46      	ldr	r2, [pc, #280]	@ (8018448 <UART_CheckIdleState+0x148>)
 8018330:	9200      	str	r2, [sp, #0]
 8018332:	2200      	movs	r2, #0
 8018334:	f000 f88c 	bl	8018450 <UART_WaitOnFlagUntilTimeout>
 8018338:	1e03      	subs	r3, r0, #0
 801833a:	d021      	beq.n	8018380 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801833c:	f3ef 8310 	mrs	r3, PRIMASK
 8018340:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018344:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018346:	2301      	movs	r3, #1
 8018348:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801834c:	f383 8810 	msr	PRIMASK, r3
}
 8018350:	46c0      	nop			@ (mov r8, r8)
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	681a      	ldr	r2, [r3, #0]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	2180      	movs	r1, #128	@ 0x80
 801835e:	438a      	bics	r2, r1
 8018360:	601a      	str	r2, [r3, #0]
 8018362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018368:	f383 8810 	msr	PRIMASK, r3
}
 801836c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	2220      	movs	r2, #32
 8018372:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2278      	movs	r2, #120	@ 0x78
 8018378:	2100      	movs	r1, #0
 801837a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801837c:	2303      	movs	r3, #3
 801837e:	e05f      	b.n	8018440 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	2204      	movs	r2, #4
 8018388:	4013      	ands	r3, r2
 801838a:	2b04      	cmp	r3, #4
 801838c:	d146      	bne.n	801841c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801838e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018390:	2280      	movs	r2, #128	@ 0x80
 8018392:	03d1      	lsls	r1, r2, #15
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	4a2c      	ldr	r2, [pc, #176]	@ (8018448 <UART_CheckIdleState+0x148>)
 8018398:	9200      	str	r2, [sp, #0]
 801839a:	2200      	movs	r2, #0
 801839c:	f000 f858 	bl	8018450 <UART_WaitOnFlagUntilTimeout>
 80183a0:	1e03      	subs	r3, r0, #0
 80183a2:	d03b      	beq.n	801841c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183a4:	f3ef 8310 	mrs	r3, PRIMASK
 80183a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80183aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80183ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80183ae:	2301      	movs	r3, #1
 80183b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	f383 8810 	msr	PRIMASK, r3
}
 80183b8:	46c0      	nop			@ (mov r8, r8)
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	681a      	ldr	r2, [r3, #0]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	4921      	ldr	r1, [pc, #132]	@ (801844c <UART_CheckIdleState+0x14c>)
 80183c6:	400a      	ands	r2, r1
 80183c8:	601a      	str	r2, [r3, #0]
 80183ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	f383 8810 	msr	PRIMASK, r3
}
 80183d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183d6:	f3ef 8310 	mrs	r3, PRIMASK
 80183da:	61bb      	str	r3, [r7, #24]
  return(result);
 80183dc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80183de:	633b      	str	r3, [r7, #48]	@ 0x30
 80183e0:	2301      	movs	r3, #1
 80183e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183e4:	69fb      	ldr	r3, [r7, #28]
 80183e6:	f383 8810 	msr	PRIMASK, r3
}
 80183ea:	46c0      	nop			@ (mov r8, r8)
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	689a      	ldr	r2, [r3, #8]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	2101      	movs	r1, #1
 80183f8:	438a      	bics	r2, r1
 80183fa:	609a      	str	r2, [r3, #8]
 80183fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018400:	6a3b      	ldr	r3, [r7, #32]
 8018402:	f383 8810 	msr	PRIMASK, r3
}
 8018406:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2280      	movs	r2, #128	@ 0x80
 801840c:	2120      	movs	r1, #32
 801840e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2278      	movs	r2, #120	@ 0x78
 8018414:	2100      	movs	r1, #0
 8018416:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018418:	2303      	movs	r3, #3
 801841a:	e011      	b.n	8018440 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2220      	movs	r2, #32
 8018420:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2280      	movs	r2, #128	@ 0x80
 8018426:	2120      	movs	r1, #32
 8018428:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2200      	movs	r2, #0
 801842e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2200      	movs	r2, #0
 8018434:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	2278      	movs	r2, #120	@ 0x78
 801843a:	2100      	movs	r1, #0
 801843c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801843e:	2300      	movs	r3, #0
}
 8018440:	0018      	movs	r0, r3
 8018442:	46bd      	mov	sp, r7
 8018444:	b010      	add	sp, #64	@ 0x40
 8018446:	bd80      	pop	{r7, pc}
 8018448:	01ffffff 	.word	0x01ffffff
 801844c:	fffffedf 	.word	0xfffffedf

08018450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b084      	sub	sp, #16
 8018454:	af00      	add	r7, sp, #0
 8018456:	60f8      	str	r0, [r7, #12]
 8018458:	60b9      	str	r1, [r7, #8]
 801845a:	603b      	str	r3, [r7, #0]
 801845c:	1dfb      	adds	r3, r7, #7
 801845e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018460:	e04b      	b.n	80184fa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018462:	69bb      	ldr	r3, [r7, #24]
 8018464:	3301      	adds	r3, #1
 8018466:	d048      	beq.n	80184fa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018468:	f7f6 fc74 	bl	800ed54 <HAL_GetTick>
 801846c:	0002      	movs	r2, r0
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	1ad3      	subs	r3, r2, r3
 8018472:	69ba      	ldr	r2, [r7, #24]
 8018474:	429a      	cmp	r2, r3
 8018476:	d302      	bcc.n	801847e <UART_WaitOnFlagUntilTimeout+0x2e>
 8018478:	69bb      	ldr	r3, [r7, #24]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d101      	bne.n	8018482 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801847e:	2303      	movs	r3, #3
 8018480:	e04b      	b.n	801851a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	2204      	movs	r2, #4
 801848a:	4013      	ands	r3, r2
 801848c:	d035      	beq.n	80184fa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	69db      	ldr	r3, [r3, #28]
 8018494:	2208      	movs	r2, #8
 8018496:	4013      	ands	r3, r2
 8018498:	2b08      	cmp	r3, #8
 801849a:	d111      	bne.n	80184c0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	2208      	movs	r2, #8
 80184a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	0018      	movs	r0, r3
 80184a8:	f000 f9ca 	bl	8018840 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	2284      	movs	r2, #132	@ 0x84
 80184b0:	2108      	movs	r1, #8
 80184b2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	2278      	movs	r2, #120	@ 0x78
 80184b8:	2100      	movs	r1, #0
 80184ba:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80184bc:	2301      	movs	r3, #1
 80184be:	e02c      	b.n	801851a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	69da      	ldr	r2, [r3, #28]
 80184c6:	2380      	movs	r3, #128	@ 0x80
 80184c8:	011b      	lsls	r3, r3, #4
 80184ca:	401a      	ands	r2, r3
 80184cc:	2380      	movs	r3, #128	@ 0x80
 80184ce:	011b      	lsls	r3, r3, #4
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d112      	bne.n	80184fa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	2280      	movs	r2, #128	@ 0x80
 80184da:	0112      	lsls	r2, r2, #4
 80184dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	0018      	movs	r0, r3
 80184e2:	f000 f9ad 	bl	8018840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	2284      	movs	r2, #132	@ 0x84
 80184ea:	2120      	movs	r1, #32
 80184ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	2278      	movs	r2, #120	@ 0x78
 80184f2:	2100      	movs	r1, #0
 80184f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80184f6:	2303      	movs	r3, #3
 80184f8:	e00f      	b.n	801851a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	69db      	ldr	r3, [r3, #28]
 8018500:	68ba      	ldr	r2, [r7, #8]
 8018502:	4013      	ands	r3, r2
 8018504:	68ba      	ldr	r2, [r7, #8]
 8018506:	1ad3      	subs	r3, r2, r3
 8018508:	425a      	negs	r2, r3
 801850a:	4153      	adcs	r3, r2
 801850c:	b2db      	uxtb	r3, r3
 801850e:	001a      	movs	r2, r3
 8018510:	1dfb      	adds	r3, r7, #7
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	429a      	cmp	r2, r3
 8018516:	d0a4      	beq.n	8018462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018518:	2300      	movs	r3, #0
}
 801851a:	0018      	movs	r0, r3
 801851c:	46bd      	mov	sp, r7
 801851e:	b004      	add	sp, #16
 8018520:	bd80      	pop	{r7, pc}
	...

08018524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b090      	sub	sp, #64	@ 0x40
 8018528:	af00      	add	r7, sp, #0
 801852a:	60f8      	str	r0, [r7, #12]
 801852c:	60b9      	str	r1, [r7, #8]
 801852e:	1dbb      	adds	r3, r7, #6
 8018530:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	68ba      	ldr	r2, [r7, #8]
 8018536:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	1dba      	adds	r2, r7, #6
 801853c:	2158      	movs	r1, #88	@ 0x58
 801853e:	8812      	ldrh	r2, [r2, #0]
 8018540:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	1dba      	adds	r2, r7, #6
 8018546:	215a      	movs	r1, #90	@ 0x5a
 8018548:	8812      	ldrh	r2, [r2, #0]
 801854a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2200      	movs	r2, #0
 8018550:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	689a      	ldr	r2, [r3, #8]
 8018556:	2380      	movs	r3, #128	@ 0x80
 8018558:	015b      	lsls	r3, r3, #5
 801855a:	429a      	cmp	r2, r3
 801855c:	d10d      	bne.n	801857a <UART_Start_Receive_IT+0x56>
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	691b      	ldr	r3, [r3, #16]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d104      	bne.n	8018570 <UART_Start_Receive_IT+0x4c>
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	225c      	movs	r2, #92	@ 0x5c
 801856a:	4950      	ldr	r1, [pc, #320]	@ (80186ac <UART_Start_Receive_IT+0x188>)
 801856c:	5299      	strh	r1, [r3, r2]
 801856e:	e02e      	b.n	80185ce <UART_Start_Receive_IT+0xaa>
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	225c      	movs	r2, #92	@ 0x5c
 8018574:	21ff      	movs	r1, #255	@ 0xff
 8018576:	5299      	strh	r1, [r3, r2]
 8018578:	e029      	b.n	80185ce <UART_Start_Receive_IT+0xaa>
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	689b      	ldr	r3, [r3, #8]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d10d      	bne.n	801859e <UART_Start_Receive_IT+0x7a>
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	691b      	ldr	r3, [r3, #16]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d104      	bne.n	8018594 <UART_Start_Receive_IT+0x70>
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	225c      	movs	r2, #92	@ 0x5c
 801858e:	21ff      	movs	r1, #255	@ 0xff
 8018590:	5299      	strh	r1, [r3, r2]
 8018592:	e01c      	b.n	80185ce <UART_Start_Receive_IT+0xaa>
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	225c      	movs	r2, #92	@ 0x5c
 8018598:	217f      	movs	r1, #127	@ 0x7f
 801859a:	5299      	strh	r1, [r3, r2]
 801859c:	e017      	b.n	80185ce <UART_Start_Receive_IT+0xaa>
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	689a      	ldr	r2, [r3, #8]
 80185a2:	2380      	movs	r3, #128	@ 0x80
 80185a4:	055b      	lsls	r3, r3, #21
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d10d      	bne.n	80185c6 <UART_Start_Receive_IT+0xa2>
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	691b      	ldr	r3, [r3, #16]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d104      	bne.n	80185bc <UART_Start_Receive_IT+0x98>
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	225c      	movs	r2, #92	@ 0x5c
 80185b6:	217f      	movs	r1, #127	@ 0x7f
 80185b8:	5299      	strh	r1, [r3, r2]
 80185ba:	e008      	b.n	80185ce <UART_Start_Receive_IT+0xaa>
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	225c      	movs	r2, #92	@ 0x5c
 80185c0:	213f      	movs	r1, #63	@ 0x3f
 80185c2:	5299      	strh	r1, [r3, r2]
 80185c4:	e003      	b.n	80185ce <UART_Start_Receive_IT+0xaa>
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	225c      	movs	r2, #92	@ 0x5c
 80185ca:	2100      	movs	r1, #0
 80185cc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	2284      	movs	r2, #132	@ 0x84
 80185d2:	2100      	movs	r1, #0
 80185d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	2280      	movs	r2, #128	@ 0x80
 80185da:	2122      	movs	r1, #34	@ 0x22
 80185dc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185de:	f3ef 8310 	mrs	r3, PRIMASK
 80185e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80185e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80185e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80185e8:	2301      	movs	r3, #1
 80185ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185ee:	f383 8810 	msr	PRIMASK, r3
}
 80185f2:	46c0      	nop			@ (mov r8, r8)
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	689a      	ldr	r2, [r3, #8]
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	2101      	movs	r1, #1
 8018600:	430a      	orrs	r2, r1
 8018602:	609a      	str	r2, [r3, #8]
 8018604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018606:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801860a:	f383 8810 	msr	PRIMASK, r3
}
 801860e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	689a      	ldr	r2, [r3, #8]
 8018614:	2380      	movs	r3, #128	@ 0x80
 8018616:	015b      	lsls	r3, r3, #5
 8018618:	429a      	cmp	r2, r3
 801861a:	d107      	bne.n	801862c <UART_Start_Receive_IT+0x108>
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	691b      	ldr	r3, [r3, #16]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d103      	bne.n	801862c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	4a22      	ldr	r2, [pc, #136]	@ (80186b0 <UART_Start_Receive_IT+0x18c>)
 8018628:	669a      	str	r2, [r3, #104]	@ 0x68
 801862a:	e002      	b.n	8018632 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	4a21      	ldr	r2, [pc, #132]	@ (80186b4 <UART_Start_Receive_IT+0x190>)
 8018630:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	691b      	ldr	r3, [r3, #16]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d019      	beq.n	801866e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801863a:	f3ef 8310 	mrs	r3, PRIMASK
 801863e:	61fb      	str	r3, [r7, #28]
  return(result);
 8018640:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8018642:	637b      	str	r3, [r7, #52]	@ 0x34
 8018644:	2301      	movs	r3, #1
 8018646:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018648:	6a3b      	ldr	r3, [r7, #32]
 801864a:	f383 8810 	msr	PRIMASK, r3
}
 801864e:	46c0      	nop			@ (mov r8, r8)
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	681a      	ldr	r2, [r3, #0]
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	2190      	movs	r1, #144	@ 0x90
 801865c:	0049      	lsls	r1, r1, #1
 801865e:	430a      	orrs	r2, r1
 8018660:	601a      	str	r2, [r3, #0]
 8018662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018664:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018668:	f383 8810 	msr	PRIMASK, r3
}
 801866c:	e018      	b.n	80186a0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801866e:	f3ef 8310 	mrs	r3, PRIMASK
 8018672:	613b      	str	r3, [r7, #16]
  return(result);
 8018674:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018676:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018678:	2301      	movs	r3, #1
 801867a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	f383 8810 	msr	PRIMASK, r3
}
 8018682:	46c0      	nop			@ (mov r8, r8)
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	2120      	movs	r1, #32
 8018690:	430a      	orrs	r2, r1
 8018692:	601a      	str	r2, [r3, #0]
 8018694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018696:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018698:	69bb      	ldr	r3, [r7, #24]
 801869a:	f383 8810 	msr	PRIMASK, r3
}
 801869e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80186a0:	2300      	movs	r3, #0
}
 80186a2:	0018      	movs	r0, r3
 80186a4:	46bd      	mov	sp, r7
 80186a6:	b010      	add	sp, #64	@ 0x40
 80186a8:	bd80      	pop	{r7, pc}
 80186aa:	46c0      	nop			@ (mov r8, r8)
 80186ac:	000001ff 	.word	0x000001ff
 80186b0:	08018e25 	.word	0x08018e25
 80186b4:	08018c59 	.word	0x08018c59

080186b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b090      	sub	sp, #64	@ 0x40
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	1dbb      	adds	r3, r7, #6
 80186c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	68ba      	ldr	r2, [r7, #8]
 80186ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	1dba      	adds	r2, r7, #6
 80186d0:	2158      	movs	r1, #88	@ 0x58
 80186d2:	8812      	ldrh	r2, [r2, #0]
 80186d4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	2284      	movs	r2, #132	@ 0x84
 80186da:	2100      	movs	r1, #0
 80186dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	2280      	movs	r2, #128	@ 0x80
 80186e2:	2122      	movs	r1, #34	@ 0x22
 80186e4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d028      	beq.n	8018740 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186f2:	4a3e      	ldr	r2, [pc, #248]	@ (80187ec <UART_Start_Receive_DMA+0x134>)
 80186f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186fa:	4a3d      	ldr	r2, [pc, #244]	@ (80187f0 <UART_Start_Receive_DMA+0x138>)
 80186fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018702:	4a3c      	ldr	r2, [pc, #240]	@ (80187f4 <UART_Start_Receive_DMA+0x13c>)
 8018704:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801870a:	2200      	movs	r2, #0
 801870c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	3324      	adds	r3, #36	@ 0x24
 8018718:	0019      	movs	r1, r3
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801871e:	001a      	movs	r2, r3
 8018720:	1dbb      	adds	r3, r7, #6
 8018722:	881b      	ldrh	r3, [r3, #0]
 8018724:	f7f7 f868 	bl	800f7f8 <HAL_DMA_Start_IT>
 8018728:	1e03      	subs	r3, r0, #0
 801872a:	d009      	beq.n	8018740 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2284      	movs	r2, #132	@ 0x84
 8018730:	2110      	movs	r1, #16
 8018732:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	2280      	movs	r2, #128	@ 0x80
 8018738:	2120      	movs	r1, #32
 801873a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801873c:	2301      	movs	r3, #1
 801873e:	e050      	b.n	80187e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	691b      	ldr	r3, [r3, #16]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d019      	beq.n	801877c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018748:	f3ef 8310 	mrs	r3, PRIMASK
 801874c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018752:	2301      	movs	r3, #1
 8018754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018758:	f383 8810 	msr	PRIMASK, r3
}
 801875c:	46c0      	nop			@ (mov r8, r8)
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	2180      	movs	r1, #128	@ 0x80
 801876a:	0049      	lsls	r1, r1, #1
 801876c:	430a      	orrs	r2, r1
 801876e:	601a      	str	r2, [r3, #0]
 8018770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018772:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018776:	f383 8810 	msr	PRIMASK, r3
}
 801877a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801877c:	f3ef 8310 	mrs	r3, PRIMASK
 8018780:	613b      	str	r3, [r7, #16]
  return(result);
 8018782:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018784:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018786:	2301      	movs	r3, #1
 8018788:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	f383 8810 	msr	PRIMASK, r3
}
 8018790:	46c0      	nop			@ (mov r8, r8)
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	689a      	ldr	r2, [r3, #8]
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	2101      	movs	r1, #1
 801879e:	430a      	orrs	r2, r1
 80187a0:	609a      	str	r2, [r3, #8]
 80187a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187a6:	69bb      	ldr	r3, [r7, #24]
 80187a8:	f383 8810 	msr	PRIMASK, r3
}
 80187ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187ae:	f3ef 8310 	mrs	r3, PRIMASK
 80187b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80187b4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80187b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80187b8:	2301      	movs	r3, #1
 80187ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187bc:	6a3b      	ldr	r3, [r7, #32]
 80187be:	f383 8810 	msr	PRIMASK, r3
}
 80187c2:	46c0      	nop			@ (mov r8, r8)
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	689a      	ldr	r2, [r3, #8]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	2140      	movs	r1, #64	@ 0x40
 80187d0:	430a      	orrs	r2, r1
 80187d2:	609a      	str	r2, [r3, #8]
 80187d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187da:	f383 8810 	msr	PRIMASK, r3
}
 80187de:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80187e0:	2300      	movs	r3, #0
}
 80187e2:	0018      	movs	r0, r3
 80187e4:	46bd      	mov	sp, r7
 80187e6:	b010      	add	sp, #64	@ 0x40
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	46c0      	nop			@ (mov r8, r8)
 80187ec:	080189c9 	.word	0x080189c9
 80187f0:	08018afd 	.word	0x08018afd
 80187f4:	08018b45 	.word	0x08018b45

080187f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b086      	sub	sp, #24
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018800:	f3ef 8310 	mrs	r3, PRIMASK
 8018804:	60bb      	str	r3, [r7, #8]
  return(result);
 8018806:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018808:	617b      	str	r3, [r7, #20]
 801880a:	2301      	movs	r3, #1
 801880c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	f383 8810 	msr	PRIMASK, r3
}
 8018814:	46c0      	nop			@ (mov r8, r8)
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	681a      	ldr	r2, [r3, #0]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	21c0      	movs	r1, #192	@ 0xc0
 8018822:	438a      	bics	r2, r1
 8018824:	601a      	str	r2, [r3, #0]
 8018826:	697b      	ldr	r3, [r7, #20]
 8018828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	f383 8810 	msr	PRIMASK, r3
}
 8018830:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	2220      	movs	r2, #32
 8018836:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018838:	46c0      	nop			@ (mov r8, r8)
 801883a:	46bd      	mov	sp, r7
 801883c:	b006      	add	sp, #24
 801883e:	bd80      	pop	{r7, pc}

08018840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b08e      	sub	sp, #56	@ 0x38
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018848:	f3ef 8310 	mrs	r3, PRIMASK
 801884c:	617b      	str	r3, [r7, #20]
  return(result);
 801884e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018850:	637b      	str	r3, [r7, #52]	@ 0x34
 8018852:	2301      	movs	r3, #1
 8018854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018856:	69bb      	ldr	r3, [r7, #24]
 8018858:	f383 8810 	msr	PRIMASK, r3
}
 801885c:	46c0      	nop			@ (mov r8, r8)
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	681a      	ldr	r2, [r3, #0]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4926      	ldr	r1, [pc, #152]	@ (8018904 <UART_EndRxTransfer+0xc4>)
 801886a:	400a      	ands	r2, r1
 801886c:	601a      	str	r2, [r3, #0]
 801886e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018872:	69fb      	ldr	r3, [r7, #28]
 8018874:	f383 8810 	msr	PRIMASK, r3
}
 8018878:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801887a:	f3ef 8310 	mrs	r3, PRIMASK
 801887e:	623b      	str	r3, [r7, #32]
  return(result);
 8018880:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018882:	633b      	str	r3, [r7, #48]	@ 0x30
 8018884:	2301      	movs	r3, #1
 8018886:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801888a:	f383 8810 	msr	PRIMASK, r3
}
 801888e:	46c0      	nop			@ (mov r8, r8)
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	689a      	ldr	r2, [r3, #8]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	2101      	movs	r1, #1
 801889c:	438a      	bics	r2, r1
 801889e:	609a      	str	r2, [r3, #8]
 80188a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188a6:	f383 8810 	msr	PRIMASK, r3
}
 80188aa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d118      	bne.n	80188e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188b4:	f3ef 8310 	mrs	r3, PRIMASK
 80188b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80188ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80188be:	2301      	movs	r3, #1
 80188c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	f383 8810 	msr	PRIMASK, r3
}
 80188c8:	46c0      	nop			@ (mov r8, r8)
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	681a      	ldr	r2, [r3, #0]
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	2110      	movs	r1, #16
 80188d6:	438a      	bics	r2, r1
 80188d8:	601a      	str	r2, [r3, #0]
 80188da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188de:	693b      	ldr	r3, [r7, #16]
 80188e0:	f383 8810 	msr	PRIMASK, r3
}
 80188e4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	2280      	movs	r2, #128	@ 0x80
 80188ea:	2120      	movs	r1, #32
 80188ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2200      	movs	r2, #0
 80188f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2200      	movs	r2, #0
 80188f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80188fa:	46c0      	nop			@ (mov r8, r8)
 80188fc:	46bd      	mov	sp, r7
 80188fe:	b00e      	add	sp, #56	@ 0x38
 8018900:	bd80      	pop	{r7, pc}
 8018902:	46c0      	nop			@ (mov r8, r8)
 8018904:	fffffedf 	.word	0xfffffedf

08018908 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b08c      	sub	sp, #48	@ 0x30
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018914:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	2220      	movs	r2, #32
 801891e:	4013      	ands	r3, r2
 8018920:	d135      	bne.n	801898e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018924:	2252      	movs	r2, #82	@ 0x52
 8018926:	2100      	movs	r1, #0
 8018928:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801892a:	f3ef 8310 	mrs	r3, PRIMASK
 801892e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018930:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018934:	2301      	movs	r3, #1
 8018936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	f383 8810 	msr	PRIMASK, r3
}
 801893e:	46c0      	nop			@ (mov r8, r8)
 8018940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	689a      	ldr	r2, [r3, #8]
 8018946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	2180      	movs	r1, #128	@ 0x80
 801894c:	438a      	bics	r2, r1
 801894e:	609a      	str	r2, [r3, #8]
 8018950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018954:	697b      	ldr	r3, [r7, #20]
 8018956:	f383 8810 	msr	PRIMASK, r3
}
 801895a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801895c:	f3ef 8310 	mrs	r3, PRIMASK
 8018960:	61bb      	str	r3, [r7, #24]
  return(result);
 8018962:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018964:	627b      	str	r3, [r7, #36]	@ 0x24
 8018966:	2301      	movs	r3, #1
 8018968:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801896a:	69fb      	ldr	r3, [r7, #28]
 801896c:	f383 8810 	msr	PRIMASK, r3
}
 8018970:	46c0      	nop			@ (mov r8, r8)
 8018972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	681a      	ldr	r2, [r3, #0]
 8018978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2140      	movs	r1, #64	@ 0x40
 801897e:	430a      	orrs	r2, r1
 8018980:	601a      	str	r2, [r3, #0]
 8018982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018984:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018986:	6a3b      	ldr	r3, [r7, #32]
 8018988:	f383 8810 	msr	PRIMASK, r3
}
 801898c:	e006      	b.n	801899c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018990:	228c      	movs	r2, #140	@ 0x8c
 8018992:	589b      	ldr	r3, [r3, r2]
 8018994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018996:	0010      	movs	r0, r2
 8018998:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801899a:	46c0      	nop			@ (mov r8, r8)
 801899c:	46c0      	nop			@ (mov r8, r8)
 801899e:	46bd      	mov	sp, r7
 80189a0:	b00c      	add	sp, #48	@ 0x30
 80189a2:	bd80      	pop	{r7, pc}

080189a4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	2288      	movs	r2, #136	@ 0x88
 80189b6:	589b      	ldr	r3, [r3, r2]
 80189b8:	68fa      	ldr	r2, [r7, #12]
 80189ba:	0010      	movs	r0, r2
 80189bc:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80189be:	46c0      	nop			@ (mov r8, r8)
 80189c0:	46bd      	mov	sp, r7
 80189c2:	b004      	add	sp, #16
 80189c4:	bd80      	pop	{r7, pc}
	...

080189c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b094      	sub	sp, #80	@ 0x50
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	2220      	movs	r2, #32
 80189de:	4013      	ands	r3, r2
 80189e0:	d16f      	bne.n	8018ac2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80189e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189e4:	225a      	movs	r2, #90	@ 0x5a
 80189e6:	2100      	movs	r1, #0
 80189e8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189ea:	f3ef 8310 	mrs	r3, PRIMASK
 80189ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80189f0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80189f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80189f4:	2301      	movs	r3, #1
 80189f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189f8:	69fb      	ldr	r3, [r7, #28]
 80189fa:	f383 8810 	msr	PRIMASK, r3
}
 80189fe:	46c0      	nop			@ (mov r8, r8)
 8018a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	681a      	ldr	r2, [r3, #0]
 8018a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	493b      	ldr	r1, [pc, #236]	@ (8018af8 <UART_DMAReceiveCplt+0x130>)
 8018a0c:	400a      	ands	r2, r1
 8018a0e:	601a      	str	r2, [r3, #0]
 8018a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a14:	6a3b      	ldr	r3, [r7, #32]
 8018a16:	f383 8810 	msr	PRIMASK, r3
}
 8018a1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8018a20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8018a26:	2301      	movs	r3, #1
 8018a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a2c:	f383 8810 	msr	PRIMASK, r3
}
 8018a30:	46c0      	nop			@ (mov r8, r8)
 8018a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	689a      	ldr	r2, [r3, #8]
 8018a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2101      	movs	r1, #1
 8018a3e:	438a      	bics	r2, r1
 8018a40:	609a      	str	r2, [r3, #8]
 8018a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a48:	f383 8810 	msr	PRIMASK, r3
}
 8018a4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8018a52:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8018a58:	2301      	movs	r3, #1
 8018a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a5e:	f383 8810 	msr	PRIMASK, r3
}
 8018a62:	46c0      	nop			@ (mov r8, r8)
 8018a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	689a      	ldr	r2, [r3, #8]
 8018a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	2140      	movs	r1, #64	@ 0x40
 8018a70:	438a      	bics	r2, r1
 8018a72:	609a      	str	r2, [r3, #8]
 8018a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a7a:	f383 8810 	msr	PRIMASK, r3
}
 8018a7e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a82:	2280      	movs	r2, #128	@ 0x80
 8018a84:	2120      	movs	r1, #32
 8018a86:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a8c:	2b01      	cmp	r3, #1
 8018a8e:	d118      	bne.n	8018ac2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a90:	f3ef 8310 	mrs	r3, PRIMASK
 8018a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a96:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a9e:	693b      	ldr	r3, [r7, #16]
 8018aa0:	f383 8810 	msr	PRIMASK, r3
}
 8018aa4:	46c0      	nop			@ (mov r8, r8)
 8018aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	681a      	ldr	r2, [r3, #0]
 8018aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	2110      	movs	r1, #16
 8018ab2:	438a      	bics	r2, r1
 8018ab4:	601a      	str	r2, [r3, #0]
 8018ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018aba:	697b      	ldr	r3, [r7, #20]
 8018abc:	f383 8810 	msr	PRIMASK, r3
}
 8018ac0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018acc:	2b01      	cmp	r3, #1
 8018ace:	d109      	bne.n	8018ae4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ad2:	22ac      	movs	r2, #172	@ 0xac
 8018ad4:	589b      	ldr	r3, [r3, r2]
 8018ad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018ad8:	2158      	movs	r1, #88	@ 0x58
 8018ada:	5a51      	ldrh	r1, [r2, r1]
 8018adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018ade:	0010      	movs	r0, r2
 8018ae0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018ae2:	e005      	b.n	8018af0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ae6:	2294      	movs	r2, #148	@ 0x94
 8018ae8:	589b      	ldr	r3, [r3, r2]
 8018aea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018aec:	0010      	movs	r0, r2
 8018aee:	4798      	blx	r3
}
 8018af0:	46c0      	nop			@ (mov r8, r8)
 8018af2:	46bd      	mov	sp, r7
 8018af4:	b014      	add	sp, #80	@ 0x50
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	fffffeff 	.word	0xfffffeff

08018afc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b084      	sub	sp, #16
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b08:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	2201      	movs	r2, #1
 8018b0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018b14:	2b01      	cmp	r3, #1
 8018b16:	d10b      	bne.n	8018b30 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	22ac      	movs	r2, #172	@ 0xac
 8018b1c:	589b      	ldr	r3, [r3, r2]
 8018b1e:	68fa      	ldr	r2, [r7, #12]
 8018b20:	2158      	movs	r1, #88	@ 0x58
 8018b22:	5a52      	ldrh	r2, [r2, r1]
 8018b24:	0852      	lsrs	r2, r2, #1
 8018b26:	b291      	uxth	r1, r2
 8018b28:	68fa      	ldr	r2, [r7, #12]
 8018b2a:	0010      	movs	r0, r2
 8018b2c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018b2e:	e005      	b.n	8018b3c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	2290      	movs	r2, #144	@ 0x90
 8018b34:	589b      	ldr	r3, [r3, r2]
 8018b36:	68fa      	ldr	r2, [r7, #12]
 8018b38:	0010      	movs	r0, r2
 8018b3a:	4798      	blx	r3
}
 8018b3c:	46c0      	nop			@ (mov r8, r8)
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	b004      	add	sp, #16
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b086      	sub	sp, #24
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018b56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	2280      	movs	r2, #128	@ 0x80
 8018b5c:	589b      	ldr	r3, [r3, r2]
 8018b5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	689b      	ldr	r3, [r3, #8]
 8018b66:	2280      	movs	r2, #128	@ 0x80
 8018b68:	4013      	ands	r3, r2
 8018b6a:	2b80      	cmp	r3, #128	@ 0x80
 8018b6c:	d10a      	bne.n	8018b84 <UART_DMAError+0x40>
 8018b6e:	693b      	ldr	r3, [r7, #16]
 8018b70:	2b21      	cmp	r3, #33	@ 0x21
 8018b72:	d107      	bne.n	8018b84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	2252      	movs	r2, #82	@ 0x52
 8018b78:	2100      	movs	r1, #0
 8018b7a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018b7c:	697b      	ldr	r3, [r7, #20]
 8018b7e:	0018      	movs	r0, r3
 8018b80:	f7ff fe3a 	bl	80187f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	689b      	ldr	r3, [r3, #8]
 8018b8a:	2240      	movs	r2, #64	@ 0x40
 8018b8c:	4013      	ands	r3, r2
 8018b8e:	2b40      	cmp	r3, #64	@ 0x40
 8018b90:	d10a      	bne.n	8018ba8 <UART_DMAError+0x64>
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2b22      	cmp	r3, #34	@ 0x22
 8018b96:	d107      	bne.n	8018ba8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	225a      	movs	r2, #90	@ 0x5a
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	0018      	movs	r0, r3
 8018ba4:	f7ff fe4c 	bl	8018840 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	2284      	movs	r2, #132	@ 0x84
 8018bac:	589b      	ldr	r3, [r3, r2]
 8018bae:	2210      	movs	r2, #16
 8018bb0:	431a      	orrs	r2, r3
 8018bb2:	697b      	ldr	r3, [r7, #20]
 8018bb4:	2184      	movs	r1, #132	@ 0x84
 8018bb6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	2298      	movs	r2, #152	@ 0x98
 8018bbc:	589b      	ldr	r3, [r3, r2]
 8018bbe:	697a      	ldr	r2, [r7, #20]
 8018bc0:	0010      	movs	r0, r2
 8018bc2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018bc4:	46c0      	nop			@ (mov r8, r8)
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	b006      	add	sp, #24
 8018bca:	bd80      	pop	{r7, pc}

08018bcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b084      	sub	sp, #16
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	225a      	movs	r2, #90	@ 0x5a
 8018bde:	2100      	movs	r1, #0
 8018be0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	2252      	movs	r2, #82	@ 0x52
 8018be6:	2100      	movs	r1, #0
 8018be8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	2298      	movs	r2, #152	@ 0x98
 8018bee:	589b      	ldr	r3, [r3, r2]
 8018bf0:	68fa      	ldr	r2, [r7, #12]
 8018bf2:	0010      	movs	r0, r2
 8018bf4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018bf6:	46c0      	nop			@ (mov r8, r8)
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	b004      	add	sp, #16
 8018bfc:	bd80      	pop	{r7, pc}

08018bfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018bfe:	b580      	push	{r7, lr}
 8018c00:	b086      	sub	sp, #24
 8018c02:	af00      	add	r7, sp, #0
 8018c04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c06:	f3ef 8310 	mrs	r3, PRIMASK
 8018c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018c0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018c0e:	617b      	str	r3, [r7, #20]
 8018c10:	2301      	movs	r3, #1
 8018c12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	f383 8810 	msr	PRIMASK, r3
}
 8018c1a:	46c0      	nop			@ (mov r8, r8)
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	681a      	ldr	r2, [r3, #0]
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	2140      	movs	r1, #64	@ 0x40
 8018c28:	438a      	bics	r2, r1
 8018c2a:	601a      	str	r2, [r3, #0]
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c30:	693b      	ldr	r3, [r7, #16]
 8018c32:	f383 8810 	msr	PRIMASK, r3
}
 8018c36:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2220      	movs	r2, #32
 8018c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	2200      	movs	r2, #0
 8018c42:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	228c      	movs	r2, #140	@ 0x8c
 8018c48:	589b      	ldr	r3, [r3, r2]
 8018c4a:	687a      	ldr	r2, [r7, #4]
 8018c4c:	0010      	movs	r0, r2
 8018c4e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018c50:	46c0      	nop			@ (mov r8, r8)
 8018c52:	46bd      	mov	sp, r7
 8018c54:	b006      	add	sp, #24
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b094      	sub	sp, #80	@ 0x50
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018c60:	204e      	movs	r0, #78	@ 0x4e
 8018c62:	183b      	adds	r3, r7, r0
 8018c64:	687a      	ldr	r2, [r7, #4]
 8018c66:	215c      	movs	r1, #92	@ 0x5c
 8018c68:	5a52      	ldrh	r2, [r2, r1]
 8018c6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2280      	movs	r2, #128	@ 0x80
 8018c70:	589b      	ldr	r3, [r3, r2]
 8018c72:	2b22      	cmp	r3, #34	@ 0x22
 8018c74:	d000      	beq.n	8018c78 <UART_RxISR_8BIT+0x20>
 8018c76:	e0c2      	b.n	8018dfe <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018c7e:	214c      	movs	r1, #76	@ 0x4c
 8018c80:	187b      	adds	r3, r7, r1
 8018c82:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018c84:	187b      	adds	r3, r7, r1
 8018c86:	881b      	ldrh	r3, [r3, #0]
 8018c88:	b2da      	uxtb	r2, r3
 8018c8a:	183b      	adds	r3, r7, r0
 8018c8c:	881b      	ldrh	r3, [r3, #0]
 8018c8e:	b2d9      	uxtb	r1, r3
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c94:	400a      	ands	r2, r1
 8018c96:	b2d2      	uxtb	r2, r2
 8018c98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c9e:	1c5a      	adds	r2, r3, #1
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	225a      	movs	r2, #90	@ 0x5a
 8018ca8:	5a9b      	ldrh	r3, [r3, r2]
 8018caa:	b29b      	uxth	r3, r3
 8018cac:	3b01      	subs	r3, #1
 8018cae:	b299      	uxth	r1, r3
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	225a      	movs	r2, #90	@ 0x5a
 8018cb4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	225a      	movs	r2, #90	@ 0x5a
 8018cba:	5a9b      	ldrh	r3, [r3, r2]
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d000      	beq.n	8018cc4 <UART_RxISR_8BIT+0x6c>
 8018cc2:	e0a4      	b.n	8018e0e <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8018cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018cce:	2301      	movs	r3, #1
 8018cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cd4:	f383 8810 	msr	PRIMASK, r3
}
 8018cd8:	46c0      	nop			@ (mov r8, r8)
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	681a      	ldr	r2, [r3, #0]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	494c      	ldr	r1, [pc, #304]	@ (8018e18 <UART_RxISR_8BIT+0x1c0>)
 8018ce6:	400a      	ands	r2, r1
 8018ce8:	601a      	str	r2, [r3, #0]
 8018cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cf0:	f383 8810 	msr	PRIMASK, r3
}
 8018cf4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8018cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8018d00:	2301      	movs	r3, #1
 8018d02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d06:	f383 8810 	msr	PRIMASK, r3
}
 8018d0a:	46c0      	nop			@ (mov r8, r8)
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	689a      	ldr	r2, [r3, #8]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	2101      	movs	r1, #1
 8018d18:	438a      	bics	r2, r1
 8018d1a:	609a      	str	r2, [r3, #8]
 8018d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d22:	f383 8810 	msr	PRIMASK, r3
}
 8018d26:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	2280      	movs	r2, #128	@ 0x80
 8018d2c:	2120      	movs	r1, #32
 8018d2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2200      	movs	r2, #0
 8018d34:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2200      	movs	r2, #0
 8018d3a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	4a36      	ldr	r2, [pc, #216]	@ (8018e1c <UART_RxISR_8BIT+0x1c4>)
 8018d42:	4293      	cmp	r3, r2
 8018d44:	d01f      	beq.n	8018d86 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	685a      	ldr	r2, [r3, #4]
 8018d4c:	2380      	movs	r3, #128	@ 0x80
 8018d4e:	041b      	lsls	r3, r3, #16
 8018d50:	4013      	ands	r3, r2
 8018d52:	d018      	beq.n	8018d86 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d54:	f3ef 8310 	mrs	r3, PRIMASK
 8018d58:	61bb      	str	r3, [r7, #24]
  return(result);
 8018d5a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8018d5e:	2301      	movs	r3, #1
 8018d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d62:	69fb      	ldr	r3, [r7, #28]
 8018d64:	f383 8810 	msr	PRIMASK, r3
}
 8018d68:	46c0      	nop			@ (mov r8, r8)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	681a      	ldr	r2, [r3, #0]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	492a      	ldr	r1, [pc, #168]	@ (8018e20 <UART_RxISR_8BIT+0x1c8>)
 8018d76:	400a      	ands	r2, r1
 8018d78:	601a      	str	r2, [r3, #0]
 8018d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018d7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d7e:	6a3b      	ldr	r3, [r7, #32]
 8018d80:	f383 8810 	msr	PRIMASK, r3
}
 8018d84:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d8a:	2b01      	cmp	r3, #1
 8018d8c:	d130      	bne.n	8018df0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2200      	movs	r2, #0
 8018d92:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d94:	f3ef 8310 	mrs	r3, PRIMASK
 8018d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8018d9a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018d9e:	2301      	movs	r3, #1
 8018da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018da2:	693b      	ldr	r3, [r7, #16]
 8018da4:	f383 8810 	msr	PRIMASK, r3
}
 8018da8:	46c0      	nop			@ (mov r8, r8)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	681a      	ldr	r2, [r3, #0]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	2110      	movs	r1, #16
 8018db6:	438a      	bics	r2, r1
 8018db8:	601a      	str	r2, [r3, #0]
 8018dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018dbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	f383 8810 	msr	PRIMASK, r3
}
 8018dc4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	69db      	ldr	r3, [r3, #28]
 8018dcc:	2210      	movs	r2, #16
 8018dce:	4013      	ands	r3, r2
 8018dd0:	2b10      	cmp	r3, #16
 8018dd2:	d103      	bne.n	8018ddc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	2210      	movs	r2, #16
 8018dda:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	22ac      	movs	r2, #172	@ 0xac
 8018de0:	589b      	ldr	r3, [r3, r2]
 8018de2:	687a      	ldr	r2, [r7, #4]
 8018de4:	2158      	movs	r1, #88	@ 0x58
 8018de6:	5a51      	ldrh	r1, [r2, r1]
 8018de8:	687a      	ldr	r2, [r7, #4]
 8018dea:	0010      	movs	r0, r2
 8018dec:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018dee:	e00e      	b.n	8018e0e <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2294      	movs	r2, #148	@ 0x94
 8018df4:	589b      	ldr	r3, [r3, r2]
 8018df6:	687a      	ldr	r2, [r7, #4]
 8018df8:	0010      	movs	r0, r2
 8018dfa:	4798      	blx	r3
}
 8018dfc:	e007      	b.n	8018e0e <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	699a      	ldr	r2, [r3, #24]
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	2108      	movs	r1, #8
 8018e0a:	430a      	orrs	r2, r1
 8018e0c:	619a      	str	r2, [r3, #24]
}
 8018e0e:	46c0      	nop			@ (mov r8, r8)
 8018e10:	46bd      	mov	sp, r7
 8018e12:	b014      	add	sp, #80	@ 0x50
 8018e14:	bd80      	pop	{r7, pc}
 8018e16:	46c0      	nop			@ (mov r8, r8)
 8018e18:	fffffedf 	.word	0xfffffedf
 8018e1c:	40004800 	.word	0x40004800
 8018e20:	fbffffff 	.word	0xfbffffff

08018e24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b094      	sub	sp, #80	@ 0x50
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018e2c:	204e      	movs	r0, #78	@ 0x4e
 8018e2e:	183b      	adds	r3, r7, r0
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	215c      	movs	r1, #92	@ 0x5c
 8018e34:	5a52      	ldrh	r2, [r2, r1]
 8018e36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	2280      	movs	r2, #128	@ 0x80
 8018e3c:	589b      	ldr	r3, [r3, r2]
 8018e3e:	2b22      	cmp	r3, #34	@ 0x22
 8018e40:	d000      	beq.n	8018e44 <UART_RxISR_16BIT+0x20>
 8018e42:	e0c2      	b.n	8018fca <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018e4a:	214c      	movs	r1, #76	@ 0x4c
 8018e4c:	187b      	adds	r3, r7, r1
 8018e4e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e54:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018e56:	187b      	adds	r3, r7, r1
 8018e58:	183a      	adds	r2, r7, r0
 8018e5a:	881b      	ldrh	r3, [r3, #0]
 8018e5c:	8812      	ldrh	r2, [r2, #0]
 8018e5e:	4013      	ands	r3, r2
 8018e60:	b29a      	uxth	r2, r3
 8018e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e6a:	1c9a      	adds	r2, r3, #2
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	225a      	movs	r2, #90	@ 0x5a
 8018e74:	5a9b      	ldrh	r3, [r3, r2]
 8018e76:	b29b      	uxth	r3, r3
 8018e78:	3b01      	subs	r3, #1
 8018e7a:	b299      	uxth	r1, r3
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	225a      	movs	r2, #90	@ 0x5a
 8018e80:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	225a      	movs	r2, #90	@ 0x5a
 8018e86:	5a9b      	ldrh	r3, [r3, r2]
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d000      	beq.n	8018e90 <UART_RxISR_16BIT+0x6c>
 8018e8e:	e0a4      	b.n	8018fda <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e90:	f3ef 8310 	mrs	r3, PRIMASK
 8018e94:	623b      	str	r3, [r7, #32]
  return(result);
 8018e96:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e9a:	2301      	movs	r3, #1
 8018e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea0:	f383 8810 	msr	PRIMASK, r3
}
 8018ea4:	46c0      	nop			@ (mov r8, r8)
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	681a      	ldr	r2, [r3, #0]
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	494c      	ldr	r1, [pc, #304]	@ (8018fe4 <UART_RxISR_16BIT+0x1c0>)
 8018eb2:	400a      	ands	r2, r1
 8018eb4:	601a      	str	r2, [r3, #0]
 8018eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ebc:	f383 8810 	msr	PRIMASK, r3
}
 8018ec0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8018ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ecc:	2301      	movs	r3, #1
 8018ece:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ed2:	f383 8810 	msr	PRIMASK, r3
}
 8018ed6:	46c0      	nop			@ (mov r8, r8)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	689a      	ldr	r2, [r3, #8]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	2101      	movs	r1, #1
 8018ee4:	438a      	bics	r2, r1
 8018ee6:	609a      	str	r2, [r3, #8]
 8018ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018eea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018eee:	f383 8810 	msr	PRIMASK, r3
}
 8018ef2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2280      	movs	r2, #128	@ 0x80
 8018ef8:	2120      	movs	r1, #32
 8018efa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2200      	movs	r2, #0
 8018f00:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2200      	movs	r2, #0
 8018f06:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	4a36      	ldr	r2, [pc, #216]	@ (8018fe8 <UART_RxISR_16BIT+0x1c4>)
 8018f0e:	4293      	cmp	r3, r2
 8018f10:	d01f      	beq.n	8018f52 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	685a      	ldr	r2, [r3, #4]
 8018f18:	2380      	movs	r3, #128	@ 0x80
 8018f1a:	041b      	lsls	r3, r3, #16
 8018f1c:	4013      	ands	r3, r2
 8018f1e:	d018      	beq.n	8018f52 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f20:	f3ef 8310 	mrs	r3, PRIMASK
 8018f24:	617b      	str	r3, [r7, #20]
  return(result);
 8018f26:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f2e:	69bb      	ldr	r3, [r7, #24]
 8018f30:	f383 8810 	msr	PRIMASK, r3
}
 8018f34:	46c0      	nop			@ (mov r8, r8)
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	681a      	ldr	r2, [r3, #0]
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	492a      	ldr	r1, [pc, #168]	@ (8018fec <UART_RxISR_16BIT+0x1c8>)
 8018f42:	400a      	ands	r2, r1
 8018f44:	601a      	str	r2, [r3, #0]
 8018f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f4a:	69fb      	ldr	r3, [r7, #28]
 8018f4c:	f383 8810 	msr	PRIMASK, r3
}
 8018f50:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d130      	bne.n	8018fbc <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f60:	f3ef 8310 	mrs	r3, PRIMASK
 8018f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f66:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f6a:	2301      	movs	r3, #1
 8018f6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	f383 8810 	msr	PRIMASK, r3
}
 8018f74:	46c0      	nop			@ (mov r8, r8)
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	681a      	ldr	r2, [r3, #0]
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	2110      	movs	r1, #16
 8018f82:	438a      	bics	r2, r1
 8018f84:	601a      	str	r2, [r3, #0]
 8018f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	f383 8810 	msr	PRIMASK, r3
}
 8018f90:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	69db      	ldr	r3, [r3, #28]
 8018f98:	2210      	movs	r2, #16
 8018f9a:	4013      	ands	r3, r2
 8018f9c:	2b10      	cmp	r3, #16
 8018f9e:	d103      	bne.n	8018fa8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	2210      	movs	r2, #16
 8018fa6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	22ac      	movs	r2, #172	@ 0xac
 8018fac:	589b      	ldr	r3, [r3, r2]
 8018fae:	687a      	ldr	r2, [r7, #4]
 8018fb0:	2158      	movs	r1, #88	@ 0x58
 8018fb2:	5a51      	ldrh	r1, [r2, r1]
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	0010      	movs	r0, r2
 8018fb8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018fba:	e00e      	b.n	8018fda <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2294      	movs	r2, #148	@ 0x94
 8018fc0:	589b      	ldr	r3, [r3, r2]
 8018fc2:	687a      	ldr	r2, [r7, #4]
 8018fc4:	0010      	movs	r0, r2
 8018fc6:	4798      	blx	r3
}
 8018fc8:	e007      	b.n	8018fda <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	699a      	ldr	r2, [r3, #24]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	2108      	movs	r1, #8
 8018fd6:	430a      	orrs	r2, r1
 8018fd8:	619a      	str	r2, [r3, #24]
}
 8018fda:	46c0      	nop			@ (mov r8, r8)
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	b014      	add	sp, #80	@ 0x50
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	46c0      	nop			@ (mov r8, r8)
 8018fe4:	fffffedf 	.word	0xfffffedf
 8018fe8:	40004800 	.word	0x40004800
 8018fec:	fbffffff 	.word	0xfbffffff

08018ff0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b082      	sub	sp, #8
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018ff8:	46c0      	nop			@ (mov r8, r8)
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	b002      	add	sp, #8
 8018ffe:	bd80      	pop	{r7, pc}

08019000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b084      	sub	sp, #16
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2244      	movs	r2, #68	@ 0x44
 801900c:	2100      	movs	r1, #0
 801900e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019010:	4b05      	ldr	r3, [pc, #20]	@ (8019028 <USB_EnableGlobalInt+0x28>)
 8019012:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	b299      	uxth	r1, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	2240      	movs	r2, #64	@ 0x40
 801901c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801901e:	2300      	movs	r3, #0
}
 8019020:	0018      	movs	r0, r3
 8019022:	46bd      	mov	sp, r7
 8019024:	b004      	add	sp, #16
 8019026:	bd80      	pop	{r7, pc}
 8019028:	0000bf80 	.word	0x0000bf80

0801902c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019034:	4b09      	ldr	r3, [pc, #36]	@ (801905c <USB_DisableGlobalInt+0x30>)
 8019036:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2240      	movs	r2, #64	@ 0x40
 801903c:	5a9b      	ldrh	r3, [r3, r2]
 801903e:	b29b      	uxth	r3, r3
 8019040:	68fa      	ldr	r2, [r7, #12]
 8019042:	b292      	uxth	r2, r2
 8019044:	43d2      	mvns	r2, r2
 8019046:	b292      	uxth	r2, r2
 8019048:	4013      	ands	r3, r2
 801904a:	b299      	uxth	r1, r3
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2240      	movs	r2, #64	@ 0x40
 8019050:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019052:	2300      	movs	r3, #0
}
 8019054:	0018      	movs	r0, r3
 8019056:	46bd      	mov	sp, r7
 8019058:	b004      	add	sp, #16
 801905a:	bd80      	pop	{r7, pc}
 801905c:	0000bf80 	.word	0x0000bf80

08019060 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019060:	b084      	sub	sp, #16
 8019062:	b590      	push	{r4, r7, lr}
 8019064:	b083      	sub	sp, #12
 8019066:	af00      	add	r7, sp, #0
 8019068:	6078      	str	r0, [r7, #4]
 801906a:	2004      	movs	r0, #4
 801906c:	2410      	movs	r4, #16
 801906e:	1900      	adds	r0, r0, r4
 8019070:	2408      	movs	r4, #8
 8019072:	46a4      	mov	ip, r4
 8019074:	44bc      	add	ip, r7
 8019076:	4460      	add	r0, ip
 8019078:	6001      	str	r1, [r0, #0]
 801907a:	6042      	str	r2, [r0, #4]
 801907c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2240      	movs	r2, #64	@ 0x40
 8019082:	2101      	movs	r1, #1
 8019084:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2240      	movs	r2, #64	@ 0x40
 801908a:	2100      	movs	r1, #0
 801908c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2244      	movs	r2, #68	@ 0x44
 8019092:	2100      	movs	r1, #0
 8019094:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2250      	movs	r2, #80	@ 0x50
 801909a:	2100      	movs	r1, #0
 801909c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801909e:	2300      	movs	r3, #0
}
 80190a0:	0018      	movs	r0, r3
 80190a2:	46bd      	mov	sp, r7
 80190a4:	b003      	add	sp, #12
 80190a6:	bc90      	pop	{r4, r7}
 80190a8:	bc08      	pop	{r3}
 80190aa:	b004      	add	sp, #16
 80190ac:	4718      	bx	r3
	...

080190b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b09c      	sub	sp, #112	@ 0x70
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
 80190b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80190ba:	236f      	movs	r3, #111	@ 0x6f
 80190bc:	18fb      	adds	r3, r7, r3
 80190be:	2200      	movs	r2, #0
 80190c0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80190c2:	687a      	ldr	r2, [r7, #4]
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	009b      	lsls	r3, r3, #2
 80190ca:	18d3      	adds	r3, r2, r3
 80190cc:	881b      	ldrh	r3, [r3, #0]
 80190ce:	b29a      	uxth	r2, r3
 80190d0:	236c      	movs	r3, #108	@ 0x6c
 80190d2:	18fb      	adds	r3, r7, r3
 80190d4:	49a3      	ldr	r1, [pc, #652]	@ (8019364 <USB_ActivateEndpoint+0x2b4>)
 80190d6:	400a      	ands	r2, r1
 80190d8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	78db      	ldrb	r3, [r3, #3]
 80190de:	2b03      	cmp	r3, #3
 80190e0:	d017      	beq.n	8019112 <USB_ActivateEndpoint+0x62>
 80190e2:	dc28      	bgt.n	8019136 <USB_ActivateEndpoint+0x86>
 80190e4:	2b02      	cmp	r3, #2
 80190e6:	d00e      	beq.n	8019106 <USB_ActivateEndpoint+0x56>
 80190e8:	dc25      	bgt.n	8019136 <USB_ActivateEndpoint+0x86>
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d002      	beq.n	80190f4 <USB_ActivateEndpoint+0x44>
 80190ee:	2b01      	cmp	r3, #1
 80190f0:	d018      	beq.n	8019124 <USB_ActivateEndpoint+0x74>
 80190f2:	e020      	b.n	8019136 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80190f4:	226c      	movs	r2, #108	@ 0x6c
 80190f6:	18bb      	adds	r3, r7, r2
 80190f8:	18ba      	adds	r2, r7, r2
 80190fa:	8812      	ldrh	r2, [r2, #0]
 80190fc:	2180      	movs	r1, #128	@ 0x80
 80190fe:	0089      	lsls	r1, r1, #2
 8019100:	430a      	orrs	r2, r1
 8019102:	801a      	strh	r2, [r3, #0]
      break;
 8019104:	e01c      	b.n	8019140 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019106:	226c      	movs	r2, #108	@ 0x6c
 8019108:	18bb      	adds	r3, r7, r2
 801910a:	18ba      	adds	r2, r7, r2
 801910c:	8812      	ldrh	r2, [r2, #0]
 801910e:	801a      	strh	r2, [r3, #0]
      break;
 8019110:	e016      	b.n	8019140 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019112:	226c      	movs	r2, #108	@ 0x6c
 8019114:	18bb      	adds	r3, r7, r2
 8019116:	18ba      	adds	r2, r7, r2
 8019118:	8812      	ldrh	r2, [r2, #0]
 801911a:	21c0      	movs	r1, #192	@ 0xc0
 801911c:	00c9      	lsls	r1, r1, #3
 801911e:	430a      	orrs	r2, r1
 8019120:	801a      	strh	r2, [r3, #0]
      break;
 8019122:	e00d      	b.n	8019140 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019124:	226c      	movs	r2, #108	@ 0x6c
 8019126:	18bb      	adds	r3, r7, r2
 8019128:	18ba      	adds	r2, r7, r2
 801912a:	8812      	ldrh	r2, [r2, #0]
 801912c:	2180      	movs	r1, #128	@ 0x80
 801912e:	00c9      	lsls	r1, r1, #3
 8019130:	430a      	orrs	r2, r1
 8019132:	801a      	strh	r2, [r3, #0]
      break;
 8019134:	e004      	b.n	8019140 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019136:	236f      	movs	r3, #111	@ 0x6f
 8019138:	18fb      	adds	r3, r7, r3
 801913a:	2201      	movs	r2, #1
 801913c:	701a      	strb	r2, [r3, #0]
      break;
 801913e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	781b      	ldrb	r3, [r3, #0]
 8019146:	009b      	lsls	r3, r3, #2
 8019148:	18d3      	adds	r3, r2, r3
 801914a:	226c      	movs	r2, #108	@ 0x6c
 801914c:	18ba      	adds	r2, r7, r2
 801914e:	8812      	ldrh	r2, [r2, #0]
 8019150:	4985      	ldr	r1, [pc, #532]	@ (8019368 <USB_ActivateEndpoint+0x2b8>)
 8019152:	430a      	orrs	r2, r1
 8019154:	b292      	uxth	r2, r2
 8019156:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019158:	687a      	ldr	r2, [r7, #4]
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	781b      	ldrb	r3, [r3, #0]
 801915e:	009b      	lsls	r3, r3, #2
 8019160:	18d3      	adds	r3, r2, r3
 8019162:	881b      	ldrh	r3, [r3, #0]
 8019164:	b29b      	uxth	r3, r3
 8019166:	b21b      	sxth	r3, r3
 8019168:	4a80      	ldr	r2, [pc, #512]	@ (801936c <USB_ActivateEndpoint+0x2bc>)
 801916a:	4013      	ands	r3, r2
 801916c:	b21a      	sxth	r2, r3
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	b21b      	sxth	r3, r3
 8019174:	4313      	orrs	r3, r2
 8019176:	b21a      	sxth	r2, r3
 8019178:	2166      	movs	r1, #102	@ 0x66
 801917a:	187b      	adds	r3, r7, r1
 801917c:	801a      	strh	r2, [r3, #0]
 801917e:	687a      	ldr	r2, [r7, #4]
 8019180:	683b      	ldr	r3, [r7, #0]
 8019182:	781b      	ldrb	r3, [r3, #0]
 8019184:	009b      	lsls	r3, r3, #2
 8019186:	18d3      	adds	r3, r2, r3
 8019188:	187a      	adds	r2, r7, r1
 801918a:	8812      	ldrh	r2, [r2, #0]
 801918c:	4976      	ldr	r1, [pc, #472]	@ (8019368 <USB_ActivateEndpoint+0x2b8>)
 801918e:	430a      	orrs	r2, r1
 8019190:	b292      	uxth	r2, r2
 8019192:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	7b1b      	ldrb	r3, [r3, #12]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d000      	beq.n	801919e <USB_ActivateEndpoint+0xee>
 801919c:	e178      	b.n	8019490 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801919e:	683b      	ldr	r3, [r7, #0]
 80191a0:	785b      	ldrb	r3, [r3, #1]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d100      	bne.n	80191a8 <USB_ActivateEndpoint+0xf8>
 80191a6:	e07a      	b.n	801929e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	61bb      	str	r3, [r7, #24]
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	2250      	movs	r2, #80	@ 0x50
 80191b0:	5a9b      	ldrh	r3, [r3, r2]
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	001a      	movs	r2, r3
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	189b      	adds	r3, r3, r2
 80191ba:	61bb      	str	r3, [r7, #24]
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	00da      	lsls	r2, r3, #3
 80191c2:	69bb      	ldr	r3, [r7, #24]
 80191c4:	18d3      	adds	r3, r2, r3
 80191c6:	2280      	movs	r2, #128	@ 0x80
 80191c8:	00d2      	lsls	r2, r2, #3
 80191ca:	4694      	mov	ip, r2
 80191cc:	4463      	add	r3, ip
 80191ce:	617b      	str	r3, [r7, #20]
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	88db      	ldrh	r3, [r3, #6]
 80191d4:	085b      	lsrs	r3, r3, #1
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	18db      	adds	r3, r3, r3
 80191da:	b29a      	uxth	r2, r3
 80191dc:	697b      	ldr	r3, [r7, #20]
 80191de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80191e0:	687a      	ldr	r2, [r7, #4]
 80191e2:	683b      	ldr	r3, [r7, #0]
 80191e4:	781b      	ldrb	r3, [r3, #0]
 80191e6:	009b      	lsls	r3, r3, #2
 80191e8:	18d2      	adds	r2, r2, r3
 80191ea:	2112      	movs	r1, #18
 80191ec:	187b      	adds	r3, r7, r1
 80191ee:	8812      	ldrh	r2, [r2, #0]
 80191f0:	801a      	strh	r2, [r3, #0]
 80191f2:	187b      	adds	r3, r7, r1
 80191f4:	881b      	ldrh	r3, [r3, #0]
 80191f6:	2240      	movs	r2, #64	@ 0x40
 80191f8:	4013      	ands	r3, r2
 80191fa:	d016      	beq.n	801922a <USB_ActivateEndpoint+0x17a>
 80191fc:	687a      	ldr	r2, [r7, #4]
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	009b      	lsls	r3, r3, #2
 8019204:	18d3      	adds	r3, r2, r3
 8019206:	881b      	ldrh	r3, [r3, #0]
 8019208:	b29a      	uxth	r2, r3
 801920a:	2010      	movs	r0, #16
 801920c:	183b      	adds	r3, r7, r0
 801920e:	4957      	ldr	r1, [pc, #348]	@ (801936c <USB_ActivateEndpoint+0x2bc>)
 8019210:	400a      	ands	r2, r1
 8019212:	801a      	strh	r2, [r3, #0]
 8019214:	687a      	ldr	r2, [r7, #4]
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	781b      	ldrb	r3, [r3, #0]
 801921a:	009b      	lsls	r3, r3, #2
 801921c:	18d3      	adds	r3, r2, r3
 801921e:	183a      	adds	r2, r7, r0
 8019220:	8812      	ldrh	r2, [r2, #0]
 8019222:	4953      	ldr	r1, [pc, #332]	@ (8019370 <USB_ActivateEndpoint+0x2c0>)
 8019224:	430a      	orrs	r2, r1
 8019226:	b292      	uxth	r2, r2
 8019228:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	78db      	ldrb	r3, [r3, #3]
 801922e:	2b01      	cmp	r3, #1
 8019230:	d01d      	beq.n	801926e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019232:	687a      	ldr	r2, [r7, #4]
 8019234:	683b      	ldr	r3, [r7, #0]
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	009b      	lsls	r3, r3, #2
 801923a:	18d3      	adds	r3, r2, r3
 801923c:	881b      	ldrh	r3, [r3, #0]
 801923e:	b29a      	uxth	r2, r3
 8019240:	200c      	movs	r0, #12
 8019242:	183b      	adds	r3, r7, r0
 8019244:	494b      	ldr	r1, [pc, #300]	@ (8019374 <USB_ActivateEndpoint+0x2c4>)
 8019246:	400a      	ands	r2, r1
 8019248:	801a      	strh	r2, [r3, #0]
 801924a:	183b      	adds	r3, r7, r0
 801924c:	183a      	adds	r2, r7, r0
 801924e:	8812      	ldrh	r2, [r2, #0]
 8019250:	2120      	movs	r1, #32
 8019252:	404a      	eors	r2, r1
 8019254:	801a      	strh	r2, [r3, #0]
 8019256:	687a      	ldr	r2, [r7, #4]
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	009b      	lsls	r3, r3, #2
 801925e:	18d3      	adds	r3, r2, r3
 8019260:	183a      	adds	r2, r7, r0
 8019262:	8812      	ldrh	r2, [r2, #0]
 8019264:	4940      	ldr	r1, [pc, #256]	@ (8019368 <USB_ActivateEndpoint+0x2b8>)
 8019266:	430a      	orrs	r2, r1
 8019268:	b292      	uxth	r2, r2
 801926a:	801a      	strh	r2, [r3, #0]
 801926c:	e2b4      	b.n	80197d8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801926e:	687a      	ldr	r2, [r7, #4]
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	781b      	ldrb	r3, [r3, #0]
 8019274:	009b      	lsls	r3, r3, #2
 8019276:	18d3      	adds	r3, r2, r3
 8019278:	881b      	ldrh	r3, [r3, #0]
 801927a:	b29a      	uxth	r2, r3
 801927c:	200e      	movs	r0, #14
 801927e:	183b      	adds	r3, r7, r0
 8019280:	493c      	ldr	r1, [pc, #240]	@ (8019374 <USB_ActivateEndpoint+0x2c4>)
 8019282:	400a      	ands	r2, r1
 8019284:	801a      	strh	r2, [r3, #0]
 8019286:	687a      	ldr	r2, [r7, #4]
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	009b      	lsls	r3, r3, #2
 801928e:	18d3      	adds	r3, r2, r3
 8019290:	183a      	adds	r2, r7, r0
 8019292:	8812      	ldrh	r2, [r2, #0]
 8019294:	4934      	ldr	r1, [pc, #208]	@ (8019368 <USB_ActivateEndpoint+0x2b8>)
 8019296:	430a      	orrs	r2, r1
 8019298:	b292      	uxth	r2, r2
 801929a:	801a      	strh	r2, [r3, #0]
 801929c:	e29c      	b.n	80197d8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	2250      	movs	r2, #80	@ 0x50
 80192a6:	5a9b      	ldrh	r3, [r3, r2]
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	001a      	movs	r2, r3
 80192ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192ae:	189b      	adds	r3, r3, r2
 80192b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	781b      	ldrb	r3, [r3, #0]
 80192b6:	00da      	lsls	r2, r3, #3
 80192b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192ba:	18d3      	adds	r3, r2, r3
 80192bc:	4a2e      	ldr	r2, [pc, #184]	@ (8019378 <USB_ActivateEndpoint+0x2c8>)
 80192be:	4694      	mov	ip, r2
 80192c0:	4463      	add	r3, ip
 80192c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	88db      	ldrh	r3, [r3, #6]
 80192c8:	085b      	lsrs	r3, r3, #1
 80192ca:	b29b      	uxth	r3, r3
 80192cc:	18db      	adds	r3, r3, r3
 80192ce:	b29a      	uxth	r2, r3
 80192d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2250      	movs	r2, #80	@ 0x50
 80192dc:	5a9b      	ldrh	r3, [r3, r2]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	001a      	movs	r2, r3
 80192e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192e4:	189b      	adds	r3, r3, r2
 80192e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192e8:	683b      	ldr	r3, [r7, #0]
 80192ea:	781b      	ldrb	r3, [r3, #0]
 80192ec:	00da      	lsls	r2, r3, #3
 80192ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192f0:	18d3      	adds	r3, r2, r3
 80192f2:	4a22      	ldr	r2, [pc, #136]	@ (801937c <USB_ActivateEndpoint+0x2cc>)
 80192f4:	4694      	mov	ip, r2
 80192f6:	4463      	add	r3, ip
 80192f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80192fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192fc:	881b      	ldrh	r3, [r3, #0]
 80192fe:	b29b      	uxth	r3, r3
 8019300:	059b      	lsls	r3, r3, #22
 8019302:	0d9b      	lsrs	r3, r3, #22
 8019304:	b29a      	uxth	r2, r3
 8019306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019308:	801a      	strh	r2, [r3, #0]
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	691b      	ldr	r3, [r3, #16]
 801930e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019310:	d91a      	bls.n	8019348 <USB_ActivateEndpoint+0x298>
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	691b      	ldr	r3, [r3, #16]
 8019316:	095b      	lsrs	r3, r3, #5
 8019318:	66bb      	str	r3, [r7, #104]	@ 0x68
 801931a:	683b      	ldr	r3, [r7, #0]
 801931c:	691b      	ldr	r3, [r3, #16]
 801931e:	221f      	movs	r2, #31
 8019320:	4013      	ands	r3, r2
 8019322:	d102      	bne.n	801932a <USB_ActivateEndpoint+0x27a>
 8019324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019326:	3b01      	subs	r3, #1
 8019328:	66bb      	str	r3, [r7, #104]	@ 0x68
 801932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801932c:	881b      	ldrh	r3, [r3, #0]
 801932e:	b29a      	uxth	r2, r3
 8019330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019332:	b29b      	uxth	r3, r3
 8019334:	029b      	lsls	r3, r3, #10
 8019336:	b29b      	uxth	r3, r3
 8019338:	4313      	orrs	r3, r2
 801933a:	b29b      	uxth	r3, r3
 801933c:	4a10      	ldr	r2, [pc, #64]	@ (8019380 <USB_ActivateEndpoint+0x2d0>)
 801933e:	4313      	orrs	r3, r2
 8019340:	b29a      	uxth	r2, r3
 8019342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019344:	801a      	strh	r2, [r3, #0]
 8019346:	e034      	b.n	80193b2 <USB_ActivateEndpoint+0x302>
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	691b      	ldr	r3, [r3, #16]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d119      	bne.n	8019384 <USB_ActivateEndpoint+0x2d4>
 8019350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019352:	881b      	ldrh	r3, [r3, #0]
 8019354:	b29b      	uxth	r3, r3
 8019356:	4a0a      	ldr	r2, [pc, #40]	@ (8019380 <USB_ActivateEndpoint+0x2d0>)
 8019358:	4313      	orrs	r3, r2
 801935a:	b29a      	uxth	r2, r3
 801935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801935e:	801a      	strh	r2, [r3, #0]
 8019360:	e027      	b.n	80193b2 <USB_ActivateEndpoint+0x302>
 8019362:	46c0      	nop			@ (mov r8, r8)
 8019364:	ffff898f 	.word	0xffff898f
 8019368:	ffff8080 	.word	0xffff8080
 801936c:	ffff8f8f 	.word	0xffff8f8f
 8019370:	ffff80c0 	.word	0xffff80c0
 8019374:	ffff8fbf 	.word	0xffff8fbf
 8019378:	00000404 	.word	0x00000404
 801937c:	00000406 	.word	0x00000406
 8019380:	ffff8000 	.word	0xffff8000
 8019384:	683b      	ldr	r3, [r7, #0]
 8019386:	691b      	ldr	r3, [r3, #16]
 8019388:	085b      	lsrs	r3, r3, #1
 801938a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	691b      	ldr	r3, [r3, #16]
 8019390:	2201      	movs	r2, #1
 8019392:	4013      	ands	r3, r2
 8019394:	d002      	beq.n	801939c <USB_ActivateEndpoint+0x2ec>
 8019396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019398:	3301      	adds	r3, #1
 801939a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	b29a      	uxth	r2, r3
 80193a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	029b      	lsls	r3, r3, #10
 80193a8:	b29b      	uxth	r3, r3
 80193aa:	4313      	orrs	r3, r2
 80193ac:	b29a      	uxth	r2, r3
 80193ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80193b2:	687a      	ldr	r2, [r7, #4]
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	009b      	lsls	r3, r3, #2
 80193ba:	18d2      	adds	r2, r2, r3
 80193bc:	2122      	movs	r1, #34	@ 0x22
 80193be:	187b      	adds	r3, r7, r1
 80193c0:	8812      	ldrh	r2, [r2, #0]
 80193c2:	801a      	strh	r2, [r3, #0]
 80193c4:	187b      	adds	r3, r7, r1
 80193c6:	881a      	ldrh	r2, [r3, #0]
 80193c8:	2380      	movs	r3, #128	@ 0x80
 80193ca:	01db      	lsls	r3, r3, #7
 80193cc:	4013      	ands	r3, r2
 80193ce:	d016      	beq.n	80193fe <USB_ActivateEndpoint+0x34e>
 80193d0:	687a      	ldr	r2, [r7, #4]
 80193d2:	683b      	ldr	r3, [r7, #0]
 80193d4:	781b      	ldrb	r3, [r3, #0]
 80193d6:	009b      	lsls	r3, r3, #2
 80193d8:	18d3      	adds	r3, r2, r3
 80193da:	881b      	ldrh	r3, [r3, #0]
 80193dc:	b29a      	uxth	r2, r3
 80193de:	2020      	movs	r0, #32
 80193e0:	183b      	adds	r3, r7, r0
 80193e2:	49dd      	ldr	r1, [pc, #884]	@ (8019758 <USB_ActivateEndpoint+0x6a8>)
 80193e4:	400a      	ands	r2, r1
 80193e6:	801a      	strh	r2, [r3, #0]
 80193e8:	687a      	ldr	r2, [r7, #4]
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	781b      	ldrb	r3, [r3, #0]
 80193ee:	009b      	lsls	r3, r3, #2
 80193f0:	18d3      	adds	r3, r2, r3
 80193f2:	183a      	adds	r2, r7, r0
 80193f4:	8812      	ldrh	r2, [r2, #0]
 80193f6:	49d9      	ldr	r1, [pc, #868]	@ (801975c <USB_ActivateEndpoint+0x6ac>)
 80193f8:	430a      	orrs	r2, r1
 80193fa:	b292      	uxth	r2, r2
 80193fc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d125      	bne.n	8019452 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019406:	687a      	ldr	r2, [r7, #4]
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	009b      	lsls	r3, r3, #2
 801940e:	18d3      	adds	r3, r2, r3
 8019410:	881b      	ldrh	r3, [r3, #0]
 8019412:	b29a      	uxth	r2, r3
 8019414:	201c      	movs	r0, #28
 8019416:	183b      	adds	r3, r7, r0
 8019418:	49d1      	ldr	r1, [pc, #836]	@ (8019760 <USB_ActivateEndpoint+0x6b0>)
 801941a:	400a      	ands	r2, r1
 801941c:	801a      	strh	r2, [r3, #0]
 801941e:	183b      	adds	r3, r7, r0
 8019420:	183a      	adds	r2, r7, r0
 8019422:	8812      	ldrh	r2, [r2, #0]
 8019424:	2180      	movs	r1, #128	@ 0x80
 8019426:	0149      	lsls	r1, r1, #5
 8019428:	404a      	eors	r2, r1
 801942a:	801a      	strh	r2, [r3, #0]
 801942c:	183b      	adds	r3, r7, r0
 801942e:	183a      	adds	r2, r7, r0
 8019430:	8812      	ldrh	r2, [r2, #0]
 8019432:	2180      	movs	r1, #128	@ 0x80
 8019434:	0189      	lsls	r1, r1, #6
 8019436:	404a      	eors	r2, r1
 8019438:	801a      	strh	r2, [r3, #0]
 801943a:	687a      	ldr	r2, [r7, #4]
 801943c:	683b      	ldr	r3, [r7, #0]
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	18d3      	adds	r3, r2, r3
 8019444:	183a      	adds	r2, r7, r0
 8019446:	8812      	ldrh	r2, [r2, #0]
 8019448:	49c6      	ldr	r1, [pc, #792]	@ (8019764 <USB_ActivateEndpoint+0x6b4>)
 801944a:	430a      	orrs	r2, r1
 801944c:	b292      	uxth	r2, r2
 801944e:	801a      	strh	r2, [r3, #0]
 8019450:	e1c2      	b.n	80197d8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	009b      	lsls	r3, r3, #2
 801945a:	18d3      	adds	r3, r2, r3
 801945c:	881b      	ldrh	r3, [r3, #0]
 801945e:	b29a      	uxth	r2, r3
 8019460:	201e      	movs	r0, #30
 8019462:	183b      	adds	r3, r7, r0
 8019464:	49be      	ldr	r1, [pc, #760]	@ (8019760 <USB_ActivateEndpoint+0x6b0>)
 8019466:	400a      	ands	r2, r1
 8019468:	801a      	strh	r2, [r3, #0]
 801946a:	183b      	adds	r3, r7, r0
 801946c:	183a      	adds	r2, r7, r0
 801946e:	8812      	ldrh	r2, [r2, #0]
 8019470:	2180      	movs	r1, #128	@ 0x80
 8019472:	0189      	lsls	r1, r1, #6
 8019474:	404a      	eors	r2, r1
 8019476:	801a      	strh	r2, [r3, #0]
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	009b      	lsls	r3, r3, #2
 8019480:	18d3      	adds	r3, r2, r3
 8019482:	183a      	adds	r2, r7, r0
 8019484:	8812      	ldrh	r2, [r2, #0]
 8019486:	49b7      	ldr	r1, [pc, #732]	@ (8019764 <USB_ActivateEndpoint+0x6b4>)
 8019488:	430a      	orrs	r2, r1
 801948a:	b292      	uxth	r2, r2
 801948c:	801a      	strh	r2, [r3, #0]
 801948e:	e1a3      	b.n	80197d8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8019490:	683b      	ldr	r3, [r7, #0]
 8019492:	78db      	ldrb	r3, [r3, #3]
 8019494:	2b02      	cmp	r3, #2
 8019496:	d117      	bne.n	80194c8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019498:	687a      	ldr	r2, [r7, #4]
 801949a:	683b      	ldr	r3, [r7, #0]
 801949c:	781b      	ldrb	r3, [r3, #0]
 801949e:	009b      	lsls	r3, r3, #2
 80194a0:	18d3      	adds	r3, r2, r3
 80194a2:	881b      	ldrh	r3, [r3, #0]
 80194a4:	b29a      	uxth	r2, r3
 80194a6:	2062      	movs	r0, #98	@ 0x62
 80194a8:	183b      	adds	r3, r7, r0
 80194aa:	49ab      	ldr	r1, [pc, #684]	@ (8019758 <USB_ActivateEndpoint+0x6a8>)
 80194ac:	400a      	ands	r2, r1
 80194ae:	801a      	strh	r2, [r3, #0]
 80194b0:	687a      	ldr	r2, [r7, #4]
 80194b2:	683b      	ldr	r3, [r7, #0]
 80194b4:	781b      	ldrb	r3, [r3, #0]
 80194b6:	009b      	lsls	r3, r3, #2
 80194b8:	18d3      	adds	r3, r2, r3
 80194ba:	183a      	adds	r2, r7, r0
 80194bc:	8812      	ldrh	r2, [r2, #0]
 80194be:	49aa      	ldr	r1, [pc, #680]	@ (8019768 <USB_ActivateEndpoint+0x6b8>)
 80194c0:	430a      	orrs	r2, r1
 80194c2:	b292      	uxth	r2, r2
 80194c4:	801a      	strh	r2, [r3, #0]
 80194c6:	e016      	b.n	80194f6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80194c8:	687a      	ldr	r2, [r7, #4]
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	781b      	ldrb	r3, [r3, #0]
 80194ce:	009b      	lsls	r3, r3, #2
 80194d0:	18d3      	adds	r3, r2, r3
 80194d2:	881b      	ldrh	r3, [r3, #0]
 80194d4:	b29a      	uxth	r2, r3
 80194d6:	2064      	movs	r0, #100	@ 0x64
 80194d8:	183b      	adds	r3, r7, r0
 80194da:	49a4      	ldr	r1, [pc, #656]	@ (801976c <USB_ActivateEndpoint+0x6bc>)
 80194dc:	400a      	ands	r2, r1
 80194de:	801a      	strh	r2, [r3, #0]
 80194e0:	687a      	ldr	r2, [r7, #4]
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	781b      	ldrb	r3, [r3, #0]
 80194e6:	009b      	lsls	r3, r3, #2
 80194e8:	18d3      	adds	r3, r2, r3
 80194ea:	183a      	adds	r2, r7, r0
 80194ec:	8812      	ldrh	r2, [r2, #0]
 80194ee:	499d      	ldr	r1, [pc, #628]	@ (8019764 <USB_ActivateEndpoint+0x6b4>)
 80194f0:	430a      	orrs	r2, r1
 80194f2:	b292      	uxth	r2, r2
 80194f4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	2250      	movs	r2, #80	@ 0x50
 80194fe:	5a9b      	ldrh	r3, [r3, r2]
 8019500:	b29b      	uxth	r3, r3
 8019502:	001a      	movs	r2, r3
 8019504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019506:	189b      	adds	r3, r3, r2
 8019508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801950a:	683b      	ldr	r3, [r7, #0]
 801950c:	781b      	ldrb	r3, [r3, #0]
 801950e:	00da      	lsls	r2, r3, #3
 8019510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019512:	18d3      	adds	r3, r2, r3
 8019514:	2280      	movs	r2, #128	@ 0x80
 8019516:	00d2      	lsls	r2, r2, #3
 8019518:	4694      	mov	ip, r2
 801951a:	4463      	add	r3, ip
 801951c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	891b      	ldrh	r3, [r3, #8]
 8019522:	085b      	lsrs	r3, r3, #1
 8019524:	b29b      	uxth	r3, r3
 8019526:	18db      	adds	r3, r3, r3
 8019528:	b29a      	uxth	r2, r3
 801952a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801952c:	801a      	strh	r2, [r3, #0]
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	657b      	str	r3, [r7, #84]	@ 0x54
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2250      	movs	r2, #80	@ 0x50
 8019536:	5a9b      	ldrh	r3, [r3, r2]
 8019538:	b29b      	uxth	r3, r3
 801953a:	001a      	movs	r2, r3
 801953c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801953e:	189b      	adds	r3, r3, r2
 8019540:	657b      	str	r3, [r7, #84]	@ 0x54
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	781b      	ldrb	r3, [r3, #0]
 8019546:	00da      	lsls	r2, r3, #3
 8019548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801954a:	18d3      	adds	r3, r2, r3
 801954c:	4a88      	ldr	r2, [pc, #544]	@ (8019770 <USB_ActivateEndpoint+0x6c0>)
 801954e:	4694      	mov	ip, r2
 8019550:	4463      	add	r3, ip
 8019552:	653b      	str	r3, [r7, #80]	@ 0x50
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	895b      	ldrh	r3, [r3, #10]
 8019558:	085b      	lsrs	r3, r3, #1
 801955a:	b29b      	uxth	r3, r3
 801955c:	18db      	adds	r3, r3, r3
 801955e:	b29a      	uxth	r2, r3
 8019560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019562:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	785b      	ldrb	r3, [r3, #1]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d000      	beq.n	801956e <USB_ActivateEndpoint+0x4be>
 801956c:	e087      	b.n	801967e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	683b      	ldr	r3, [r7, #0]
 8019572:	781b      	ldrb	r3, [r3, #0]
 8019574:	009b      	lsls	r3, r3, #2
 8019576:	18d2      	adds	r2, r2, r3
 8019578:	2140      	movs	r1, #64	@ 0x40
 801957a:	187b      	adds	r3, r7, r1
 801957c:	8812      	ldrh	r2, [r2, #0]
 801957e:	801a      	strh	r2, [r3, #0]
 8019580:	187b      	adds	r3, r7, r1
 8019582:	881a      	ldrh	r2, [r3, #0]
 8019584:	2380      	movs	r3, #128	@ 0x80
 8019586:	01db      	lsls	r3, r3, #7
 8019588:	4013      	ands	r3, r2
 801958a:	d016      	beq.n	80195ba <USB_ActivateEndpoint+0x50a>
 801958c:	687a      	ldr	r2, [r7, #4]
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	009b      	lsls	r3, r3, #2
 8019594:	18d3      	adds	r3, r2, r3
 8019596:	881b      	ldrh	r3, [r3, #0]
 8019598:	b29a      	uxth	r2, r3
 801959a:	203e      	movs	r0, #62	@ 0x3e
 801959c:	183b      	adds	r3, r7, r0
 801959e:	496e      	ldr	r1, [pc, #440]	@ (8019758 <USB_ActivateEndpoint+0x6a8>)
 80195a0:	400a      	ands	r2, r1
 80195a2:	801a      	strh	r2, [r3, #0]
 80195a4:	687a      	ldr	r2, [r7, #4]
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	781b      	ldrb	r3, [r3, #0]
 80195aa:	009b      	lsls	r3, r3, #2
 80195ac:	18d3      	adds	r3, r2, r3
 80195ae:	183a      	adds	r2, r7, r0
 80195b0:	8812      	ldrh	r2, [r2, #0]
 80195b2:	496a      	ldr	r1, [pc, #424]	@ (801975c <USB_ActivateEndpoint+0x6ac>)
 80195b4:	430a      	orrs	r2, r1
 80195b6:	b292      	uxth	r2, r2
 80195b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80195ba:	687a      	ldr	r2, [r7, #4]
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	781b      	ldrb	r3, [r3, #0]
 80195c0:	009b      	lsls	r3, r3, #2
 80195c2:	18d2      	adds	r2, r2, r3
 80195c4:	213c      	movs	r1, #60	@ 0x3c
 80195c6:	187b      	adds	r3, r7, r1
 80195c8:	8812      	ldrh	r2, [r2, #0]
 80195ca:	801a      	strh	r2, [r3, #0]
 80195cc:	187b      	adds	r3, r7, r1
 80195ce:	881b      	ldrh	r3, [r3, #0]
 80195d0:	2240      	movs	r2, #64	@ 0x40
 80195d2:	4013      	ands	r3, r2
 80195d4:	d016      	beq.n	8019604 <USB_ActivateEndpoint+0x554>
 80195d6:	687a      	ldr	r2, [r7, #4]
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	781b      	ldrb	r3, [r3, #0]
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	18d3      	adds	r3, r2, r3
 80195e0:	881b      	ldrh	r3, [r3, #0]
 80195e2:	b29a      	uxth	r2, r3
 80195e4:	203a      	movs	r0, #58	@ 0x3a
 80195e6:	183b      	adds	r3, r7, r0
 80195e8:	495b      	ldr	r1, [pc, #364]	@ (8019758 <USB_ActivateEndpoint+0x6a8>)
 80195ea:	400a      	ands	r2, r1
 80195ec:	801a      	strh	r2, [r3, #0]
 80195ee:	687a      	ldr	r2, [r7, #4]
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	781b      	ldrb	r3, [r3, #0]
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	18d3      	adds	r3, r2, r3
 80195f8:	183a      	adds	r2, r7, r0
 80195fa:	8812      	ldrh	r2, [r2, #0]
 80195fc:	495d      	ldr	r1, [pc, #372]	@ (8019774 <USB_ActivateEndpoint+0x6c4>)
 80195fe:	430a      	orrs	r2, r1
 8019600:	b292      	uxth	r2, r2
 8019602:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019604:	687a      	ldr	r2, [r7, #4]
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	781b      	ldrb	r3, [r3, #0]
 801960a:	009b      	lsls	r3, r3, #2
 801960c:	18d3      	adds	r3, r2, r3
 801960e:	881b      	ldrh	r3, [r3, #0]
 8019610:	b29a      	uxth	r2, r3
 8019612:	2038      	movs	r0, #56	@ 0x38
 8019614:	183b      	adds	r3, r7, r0
 8019616:	4952      	ldr	r1, [pc, #328]	@ (8019760 <USB_ActivateEndpoint+0x6b0>)
 8019618:	400a      	ands	r2, r1
 801961a:	801a      	strh	r2, [r3, #0]
 801961c:	183b      	adds	r3, r7, r0
 801961e:	183a      	adds	r2, r7, r0
 8019620:	8812      	ldrh	r2, [r2, #0]
 8019622:	2180      	movs	r1, #128	@ 0x80
 8019624:	0149      	lsls	r1, r1, #5
 8019626:	404a      	eors	r2, r1
 8019628:	801a      	strh	r2, [r3, #0]
 801962a:	183b      	adds	r3, r7, r0
 801962c:	183a      	adds	r2, r7, r0
 801962e:	8812      	ldrh	r2, [r2, #0]
 8019630:	2180      	movs	r1, #128	@ 0x80
 8019632:	0189      	lsls	r1, r1, #6
 8019634:	404a      	eors	r2, r1
 8019636:	801a      	strh	r2, [r3, #0]
 8019638:	687a      	ldr	r2, [r7, #4]
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	781b      	ldrb	r3, [r3, #0]
 801963e:	009b      	lsls	r3, r3, #2
 8019640:	18d3      	adds	r3, r2, r3
 8019642:	183a      	adds	r2, r7, r0
 8019644:	8812      	ldrh	r2, [r2, #0]
 8019646:	4947      	ldr	r1, [pc, #284]	@ (8019764 <USB_ActivateEndpoint+0x6b4>)
 8019648:	430a      	orrs	r2, r1
 801964a:	b292      	uxth	r2, r2
 801964c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	009b      	lsls	r3, r3, #2
 8019656:	18d3      	adds	r3, r2, r3
 8019658:	881b      	ldrh	r3, [r3, #0]
 801965a:	b29a      	uxth	r2, r3
 801965c:	2036      	movs	r0, #54	@ 0x36
 801965e:	183b      	adds	r3, r7, r0
 8019660:	4945      	ldr	r1, [pc, #276]	@ (8019778 <USB_ActivateEndpoint+0x6c8>)
 8019662:	400a      	ands	r2, r1
 8019664:	801a      	strh	r2, [r3, #0]
 8019666:	687a      	ldr	r2, [r7, #4]
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	009b      	lsls	r3, r3, #2
 801966e:	18d3      	adds	r3, r2, r3
 8019670:	183a      	adds	r2, r7, r0
 8019672:	8812      	ldrh	r2, [r2, #0]
 8019674:	493b      	ldr	r1, [pc, #236]	@ (8019764 <USB_ActivateEndpoint+0x6b4>)
 8019676:	430a      	orrs	r2, r1
 8019678:	b292      	uxth	r2, r2
 801967a:	801a      	strh	r2, [r3, #0]
 801967c:	e0ac      	b.n	80197d8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801967e:	687a      	ldr	r2, [r7, #4]
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	781b      	ldrb	r3, [r3, #0]
 8019684:	009b      	lsls	r3, r3, #2
 8019686:	18d2      	adds	r2, r2, r3
 8019688:	214e      	movs	r1, #78	@ 0x4e
 801968a:	187b      	adds	r3, r7, r1
 801968c:	8812      	ldrh	r2, [r2, #0]
 801968e:	801a      	strh	r2, [r3, #0]
 8019690:	187b      	adds	r3, r7, r1
 8019692:	881a      	ldrh	r2, [r3, #0]
 8019694:	2380      	movs	r3, #128	@ 0x80
 8019696:	01db      	lsls	r3, r3, #7
 8019698:	4013      	ands	r3, r2
 801969a:	d016      	beq.n	80196ca <USB_ActivateEndpoint+0x61a>
 801969c:	687a      	ldr	r2, [r7, #4]
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	18d3      	adds	r3, r2, r3
 80196a6:	881b      	ldrh	r3, [r3, #0]
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	204c      	movs	r0, #76	@ 0x4c
 80196ac:	183b      	adds	r3, r7, r0
 80196ae:	492a      	ldr	r1, [pc, #168]	@ (8019758 <USB_ActivateEndpoint+0x6a8>)
 80196b0:	400a      	ands	r2, r1
 80196b2:	801a      	strh	r2, [r3, #0]
 80196b4:	687a      	ldr	r2, [r7, #4]
 80196b6:	683b      	ldr	r3, [r7, #0]
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	009b      	lsls	r3, r3, #2
 80196bc:	18d3      	adds	r3, r2, r3
 80196be:	183a      	adds	r2, r7, r0
 80196c0:	8812      	ldrh	r2, [r2, #0]
 80196c2:	4926      	ldr	r1, [pc, #152]	@ (801975c <USB_ActivateEndpoint+0x6ac>)
 80196c4:	430a      	orrs	r2, r1
 80196c6:	b292      	uxth	r2, r2
 80196c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80196ca:	687a      	ldr	r2, [r7, #4]
 80196cc:	683b      	ldr	r3, [r7, #0]
 80196ce:	781b      	ldrb	r3, [r3, #0]
 80196d0:	009b      	lsls	r3, r3, #2
 80196d2:	18d2      	adds	r2, r2, r3
 80196d4:	214a      	movs	r1, #74	@ 0x4a
 80196d6:	187b      	adds	r3, r7, r1
 80196d8:	8812      	ldrh	r2, [r2, #0]
 80196da:	801a      	strh	r2, [r3, #0]
 80196dc:	187b      	adds	r3, r7, r1
 80196de:	881b      	ldrh	r3, [r3, #0]
 80196e0:	2240      	movs	r2, #64	@ 0x40
 80196e2:	4013      	ands	r3, r2
 80196e4:	d016      	beq.n	8019714 <USB_ActivateEndpoint+0x664>
 80196e6:	687a      	ldr	r2, [r7, #4]
 80196e8:	683b      	ldr	r3, [r7, #0]
 80196ea:	781b      	ldrb	r3, [r3, #0]
 80196ec:	009b      	lsls	r3, r3, #2
 80196ee:	18d3      	adds	r3, r2, r3
 80196f0:	881b      	ldrh	r3, [r3, #0]
 80196f2:	b29a      	uxth	r2, r3
 80196f4:	2048      	movs	r0, #72	@ 0x48
 80196f6:	183b      	adds	r3, r7, r0
 80196f8:	4917      	ldr	r1, [pc, #92]	@ (8019758 <USB_ActivateEndpoint+0x6a8>)
 80196fa:	400a      	ands	r2, r1
 80196fc:	801a      	strh	r2, [r3, #0]
 80196fe:	687a      	ldr	r2, [r7, #4]
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	18d3      	adds	r3, r2, r3
 8019708:	183a      	adds	r2, r7, r0
 801970a:	8812      	ldrh	r2, [r2, #0]
 801970c:	4919      	ldr	r1, [pc, #100]	@ (8019774 <USB_ActivateEndpoint+0x6c4>)
 801970e:	430a      	orrs	r2, r1
 8019710:	b292      	uxth	r2, r2
 8019712:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019714:	683b      	ldr	r3, [r7, #0]
 8019716:	78db      	ldrb	r3, [r3, #3]
 8019718:	2b01      	cmp	r3, #1
 801971a:	d02f      	beq.n	801977c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801971c:	687a      	ldr	r2, [r7, #4]
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	18d3      	adds	r3, r2, r3
 8019726:	881b      	ldrh	r3, [r3, #0]
 8019728:	b29a      	uxth	r2, r3
 801972a:	2044      	movs	r0, #68	@ 0x44
 801972c:	183b      	adds	r3, r7, r0
 801972e:	4912      	ldr	r1, [pc, #72]	@ (8019778 <USB_ActivateEndpoint+0x6c8>)
 8019730:	400a      	ands	r2, r1
 8019732:	801a      	strh	r2, [r3, #0]
 8019734:	183b      	adds	r3, r7, r0
 8019736:	183a      	adds	r2, r7, r0
 8019738:	8812      	ldrh	r2, [r2, #0]
 801973a:	2120      	movs	r1, #32
 801973c:	404a      	eors	r2, r1
 801973e:	801a      	strh	r2, [r3, #0]
 8019740:	687a      	ldr	r2, [r7, #4]
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	781b      	ldrb	r3, [r3, #0]
 8019746:	009b      	lsls	r3, r3, #2
 8019748:	18d3      	adds	r3, r2, r3
 801974a:	183a      	adds	r2, r7, r0
 801974c:	8812      	ldrh	r2, [r2, #0]
 801974e:	4905      	ldr	r1, [pc, #20]	@ (8019764 <USB_ActivateEndpoint+0x6b4>)
 8019750:	430a      	orrs	r2, r1
 8019752:	b292      	uxth	r2, r2
 8019754:	801a      	strh	r2, [r3, #0]
 8019756:	e028      	b.n	80197aa <USB_ActivateEndpoint+0x6fa>
 8019758:	ffff8f8f 	.word	0xffff8f8f
 801975c:	ffffc080 	.word	0xffffc080
 8019760:	ffffbf8f 	.word	0xffffbf8f
 8019764:	ffff8080 	.word	0xffff8080
 8019768:	ffff8180 	.word	0xffff8180
 801976c:	ffff8e8f 	.word	0xffff8e8f
 8019770:	00000404 	.word	0x00000404
 8019774:	ffff80c0 	.word	0xffff80c0
 8019778:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801977c:	687a      	ldr	r2, [r7, #4]
 801977e:	683b      	ldr	r3, [r7, #0]
 8019780:	781b      	ldrb	r3, [r3, #0]
 8019782:	009b      	lsls	r3, r3, #2
 8019784:	18d3      	adds	r3, r2, r3
 8019786:	881b      	ldrh	r3, [r3, #0]
 8019788:	b29a      	uxth	r2, r3
 801978a:	2046      	movs	r0, #70	@ 0x46
 801978c:	183b      	adds	r3, r7, r0
 801978e:	4916      	ldr	r1, [pc, #88]	@ (80197e8 <USB_ActivateEndpoint+0x738>)
 8019790:	400a      	ands	r2, r1
 8019792:	801a      	strh	r2, [r3, #0]
 8019794:	687a      	ldr	r2, [r7, #4]
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	781b      	ldrb	r3, [r3, #0]
 801979a:	009b      	lsls	r3, r3, #2
 801979c:	18d3      	adds	r3, r2, r3
 801979e:	183a      	adds	r2, r7, r0
 80197a0:	8812      	ldrh	r2, [r2, #0]
 80197a2:	4912      	ldr	r1, [pc, #72]	@ (80197ec <USB_ActivateEndpoint+0x73c>)
 80197a4:	430a      	orrs	r2, r1
 80197a6:	b292      	uxth	r2, r2
 80197a8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80197aa:	687a      	ldr	r2, [r7, #4]
 80197ac:	683b      	ldr	r3, [r7, #0]
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	009b      	lsls	r3, r3, #2
 80197b2:	18d3      	adds	r3, r2, r3
 80197b4:	881b      	ldrh	r3, [r3, #0]
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	2042      	movs	r0, #66	@ 0x42
 80197ba:	183b      	adds	r3, r7, r0
 80197bc:	490c      	ldr	r1, [pc, #48]	@ (80197f0 <USB_ActivateEndpoint+0x740>)
 80197be:	400a      	ands	r2, r1
 80197c0:	801a      	strh	r2, [r3, #0]
 80197c2:	687a      	ldr	r2, [r7, #4]
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	781b      	ldrb	r3, [r3, #0]
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	18d3      	adds	r3, r2, r3
 80197cc:	183a      	adds	r2, r7, r0
 80197ce:	8812      	ldrh	r2, [r2, #0]
 80197d0:	4906      	ldr	r1, [pc, #24]	@ (80197ec <USB_ActivateEndpoint+0x73c>)
 80197d2:	430a      	orrs	r2, r1
 80197d4:	b292      	uxth	r2, r2
 80197d6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80197d8:	236f      	movs	r3, #111	@ 0x6f
 80197da:	18fb      	adds	r3, r7, r3
 80197dc:	781b      	ldrb	r3, [r3, #0]
}
 80197de:	0018      	movs	r0, r3
 80197e0:	46bd      	mov	sp, r7
 80197e2:	b01c      	add	sp, #112	@ 0x70
 80197e4:	bd80      	pop	{r7, pc}
 80197e6:	46c0      	nop			@ (mov r8, r8)
 80197e8:	ffff8fbf 	.word	0xffff8fbf
 80197ec:	ffff8080 	.word	0xffff8080
 80197f0:	ffffbf8f 	.word	0xffffbf8f

080197f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b08c      	sub	sp, #48	@ 0x30
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	7b1b      	ldrb	r3, [r3, #12]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d000      	beq.n	8019808 <USB_DeactivateEndpoint+0x14>
 8019806:	e07e      	b.n	8019906 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	785b      	ldrb	r3, [r3, #1]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d03c      	beq.n	801988a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	683b      	ldr	r3, [r7, #0]
 8019814:	781b      	ldrb	r3, [r3, #0]
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	18d2      	adds	r2, r2, r3
 801981a:	210c      	movs	r1, #12
 801981c:	187b      	adds	r3, r7, r1
 801981e:	8812      	ldrh	r2, [r2, #0]
 8019820:	801a      	strh	r2, [r3, #0]
 8019822:	187b      	adds	r3, r7, r1
 8019824:	881b      	ldrh	r3, [r3, #0]
 8019826:	2240      	movs	r2, #64	@ 0x40
 8019828:	4013      	ands	r3, r2
 801982a:	d016      	beq.n	801985a <USB_DeactivateEndpoint+0x66>
 801982c:	687a      	ldr	r2, [r7, #4]
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	009b      	lsls	r3, r3, #2
 8019834:	18d3      	adds	r3, r2, r3
 8019836:	881b      	ldrh	r3, [r3, #0]
 8019838:	b29a      	uxth	r2, r3
 801983a:	200a      	movs	r0, #10
 801983c:	183b      	adds	r3, r7, r0
 801983e:	49c7      	ldr	r1, [pc, #796]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 8019840:	400a      	ands	r2, r1
 8019842:	801a      	strh	r2, [r3, #0]
 8019844:	687a      	ldr	r2, [r7, #4]
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	009b      	lsls	r3, r3, #2
 801984c:	18d3      	adds	r3, r2, r3
 801984e:	183a      	adds	r2, r7, r0
 8019850:	8812      	ldrh	r2, [r2, #0]
 8019852:	49c3      	ldr	r1, [pc, #780]	@ (8019b60 <USB_DeactivateEndpoint+0x36c>)
 8019854:	430a      	orrs	r2, r1
 8019856:	b292      	uxth	r2, r2
 8019858:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801985a:	687a      	ldr	r2, [r7, #4]
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	781b      	ldrb	r3, [r3, #0]
 8019860:	009b      	lsls	r3, r3, #2
 8019862:	18d3      	adds	r3, r2, r3
 8019864:	881b      	ldrh	r3, [r3, #0]
 8019866:	b29a      	uxth	r2, r3
 8019868:	2008      	movs	r0, #8
 801986a:	183b      	adds	r3, r7, r0
 801986c:	49bd      	ldr	r1, [pc, #756]	@ (8019b64 <USB_DeactivateEndpoint+0x370>)
 801986e:	400a      	ands	r2, r1
 8019870:	801a      	strh	r2, [r3, #0]
 8019872:	687a      	ldr	r2, [r7, #4]
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	009b      	lsls	r3, r3, #2
 801987a:	18d3      	adds	r3, r2, r3
 801987c:	183a      	adds	r2, r7, r0
 801987e:	8812      	ldrh	r2, [r2, #0]
 8019880:	49b9      	ldr	r1, [pc, #740]	@ (8019b68 <USB_DeactivateEndpoint+0x374>)
 8019882:	430a      	orrs	r2, r1
 8019884:	b292      	uxth	r2, r2
 8019886:	801a      	strh	r2, [r3, #0]
 8019888:	e163      	b.n	8019b52 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801988a:	687a      	ldr	r2, [r7, #4]
 801988c:	683b      	ldr	r3, [r7, #0]
 801988e:	781b      	ldrb	r3, [r3, #0]
 8019890:	009b      	lsls	r3, r3, #2
 8019892:	18d2      	adds	r2, r2, r3
 8019894:	2112      	movs	r1, #18
 8019896:	187b      	adds	r3, r7, r1
 8019898:	8812      	ldrh	r2, [r2, #0]
 801989a:	801a      	strh	r2, [r3, #0]
 801989c:	187b      	adds	r3, r7, r1
 801989e:	881a      	ldrh	r2, [r3, #0]
 80198a0:	2380      	movs	r3, #128	@ 0x80
 80198a2:	01db      	lsls	r3, r3, #7
 80198a4:	4013      	ands	r3, r2
 80198a6:	d016      	beq.n	80198d6 <USB_DeactivateEndpoint+0xe2>
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	683b      	ldr	r3, [r7, #0]
 80198ac:	781b      	ldrb	r3, [r3, #0]
 80198ae:	009b      	lsls	r3, r3, #2
 80198b0:	18d3      	adds	r3, r2, r3
 80198b2:	881b      	ldrh	r3, [r3, #0]
 80198b4:	b29a      	uxth	r2, r3
 80198b6:	2010      	movs	r0, #16
 80198b8:	183b      	adds	r3, r7, r0
 80198ba:	49a8      	ldr	r1, [pc, #672]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 80198bc:	400a      	ands	r2, r1
 80198be:	801a      	strh	r2, [r3, #0]
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	781b      	ldrb	r3, [r3, #0]
 80198c6:	009b      	lsls	r3, r3, #2
 80198c8:	18d3      	adds	r3, r2, r3
 80198ca:	183a      	adds	r2, r7, r0
 80198cc:	8812      	ldrh	r2, [r2, #0]
 80198ce:	49a7      	ldr	r1, [pc, #668]	@ (8019b6c <USB_DeactivateEndpoint+0x378>)
 80198d0:	430a      	orrs	r2, r1
 80198d2:	b292      	uxth	r2, r2
 80198d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80198d6:	687a      	ldr	r2, [r7, #4]
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	009b      	lsls	r3, r3, #2
 80198de:	18d3      	adds	r3, r2, r3
 80198e0:	881b      	ldrh	r3, [r3, #0]
 80198e2:	b29a      	uxth	r2, r3
 80198e4:	200e      	movs	r0, #14
 80198e6:	183b      	adds	r3, r7, r0
 80198e8:	49a1      	ldr	r1, [pc, #644]	@ (8019b70 <USB_DeactivateEndpoint+0x37c>)
 80198ea:	400a      	ands	r2, r1
 80198ec:	801a      	strh	r2, [r3, #0]
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	683b      	ldr	r3, [r7, #0]
 80198f2:	781b      	ldrb	r3, [r3, #0]
 80198f4:	009b      	lsls	r3, r3, #2
 80198f6:	18d3      	adds	r3, r2, r3
 80198f8:	183a      	adds	r2, r7, r0
 80198fa:	8812      	ldrh	r2, [r2, #0]
 80198fc:	499a      	ldr	r1, [pc, #616]	@ (8019b68 <USB_DeactivateEndpoint+0x374>)
 80198fe:	430a      	orrs	r2, r1
 8019900:	b292      	uxth	r2, r2
 8019902:	801a      	strh	r2, [r3, #0]
 8019904:	e125      	b.n	8019b52 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	785b      	ldrb	r3, [r3, #1]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d000      	beq.n	8019910 <USB_DeactivateEndpoint+0x11c>
 801990e:	e090      	b.n	8019a32 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019910:	687a      	ldr	r2, [r7, #4]
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	009b      	lsls	r3, r3, #2
 8019918:	18d2      	adds	r2, r2, r3
 801991a:	2120      	movs	r1, #32
 801991c:	187b      	adds	r3, r7, r1
 801991e:	8812      	ldrh	r2, [r2, #0]
 8019920:	801a      	strh	r2, [r3, #0]
 8019922:	187b      	adds	r3, r7, r1
 8019924:	881a      	ldrh	r2, [r3, #0]
 8019926:	2380      	movs	r3, #128	@ 0x80
 8019928:	01db      	lsls	r3, r3, #7
 801992a:	4013      	ands	r3, r2
 801992c:	d016      	beq.n	801995c <USB_DeactivateEndpoint+0x168>
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	009b      	lsls	r3, r3, #2
 8019936:	18d3      	adds	r3, r2, r3
 8019938:	881b      	ldrh	r3, [r3, #0]
 801993a:	b29a      	uxth	r2, r3
 801993c:	201e      	movs	r0, #30
 801993e:	183b      	adds	r3, r7, r0
 8019940:	4986      	ldr	r1, [pc, #536]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 8019942:	400a      	ands	r2, r1
 8019944:	801a      	strh	r2, [r3, #0]
 8019946:	687a      	ldr	r2, [r7, #4]
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	781b      	ldrb	r3, [r3, #0]
 801994c:	009b      	lsls	r3, r3, #2
 801994e:	18d3      	adds	r3, r2, r3
 8019950:	183a      	adds	r2, r7, r0
 8019952:	8812      	ldrh	r2, [r2, #0]
 8019954:	4985      	ldr	r1, [pc, #532]	@ (8019b6c <USB_DeactivateEndpoint+0x378>)
 8019956:	430a      	orrs	r2, r1
 8019958:	b292      	uxth	r2, r2
 801995a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801995c:	687a      	ldr	r2, [r7, #4]
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	781b      	ldrb	r3, [r3, #0]
 8019962:	009b      	lsls	r3, r3, #2
 8019964:	18d2      	adds	r2, r2, r3
 8019966:	211c      	movs	r1, #28
 8019968:	187b      	adds	r3, r7, r1
 801996a:	8812      	ldrh	r2, [r2, #0]
 801996c:	801a      	strh	r2, [r3, #0]
 801996e:	187b      	adds	r3, r7, r1
 8019970:	881b      	ldrh	r3, [r3, #0]
 8019972:	2240      	movs	r2, #64	@ 0x40
 8019974:	4013      	ands	r3, r2
 8019976:	d016      	beq.n	80199a6 <USB_DeactivateEndpoint+0x1b2>
 8019978:	687a      	ldr	r2, [r7, #4]
 801997a:	683b      	ldr	r3, [r7, #0]
 801997c:	781b      	ldrb	r3, [r3, #0]
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	18d3      	adds	r3, r2, r3
 8019982:	881b      	ldrh	r3, [r3, #0]
 8019984:	b29a      	uxth	r2, r3
 8019986:	201a      	movs	r0, #26
 8019988:	183b      	adds	r3, r7, r0
 801998a:	4974      	ldr	r1, [pc, #464]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 801998c:	400a      	ands	r2, r1
 801998e:	801a      	strh	r2, [r3, #0]
 8019990:	687a      	ldr	r2, [r7, #4]
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	781b      	ldrb	r3, [r3, #0]
 8019996:	009b      	lsls	r3, r3, #2
 8019998:	18d3      	adds	r3, r2, r3
 801999a:	183a      	adds	r2, r7, r0
 801999c:	8812      	ldrh	r2, [r2, #0]
 801999e:	4970      	ldr	r1, [pc, #448]	@ (8019b60 <USB_DeactivateEndpoint+0x36c>)
 80199a0:	430a      	orrs	r2, r1
 80199a2:	b292      	uxth	r2, r2
 80199a4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	683b      	ldr	r3, [r7, #0]
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	009b      	lsls	r3, r3, #2
 80199ae:	18d3      	adds	r3, r2, r3
 80199b0:	881b      	ldrh	r3, [r3, #0]
 80199b2:	b29a      	uxth	r2, r3
 80199b4:	2018      	movs	r0, #24
 80199b6:	183b      	adds	r3, r7, r0
 80199b8:	4968      	ldr	r1, [pc, #416]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 80199ba:	400a      	ands	r2, r1
 80199bc:	801a      	strh	r2, [r3, #0]
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	009b      	lsls	r3, r3, #2
 80199c6:	18d3      	adds	r3, r2, r3
 80199c8:	183a      	adds	r2, r7, r0
 80199ca:	8812      	ldrh	r2, [r2, #0]
 80199cc:	4964      	ldr	r1, [pc, #400]	@ (8019b60 <USB_DeactivateEndpoint+0x36c>)
 80199ce:	430a      	orrs	r2, r1
 80199d0:	b292      	uxth	r2, r2
 80199d2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	781b      	ldrb	r3, [r3, #0]
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	18d3      	adds	r3, r2, r3
 80199de:	881b      	ldrh	r3, [r3, #0]
 80199e0:	b29a      	uxth	r2, r3
 80199e2:	2016      	movs	r0, #22
 80199e4:	183b      	adds	r3, r7, r0
 80199e6:	4962      	ldr	r1, [pc, #392]	@ (8019b70 <USB_DeactivateEndpoint+0x37c>)
 80199e8:	400a      	ands	r2, r1
 80199ea:	801a      	strh	r2, [r3, #0]
 80199ec:	687a      	ldr	r2, [r7, #4]
 80199ee:	683b      	ldr	r3, [r7, #0]
 80199f0:	781b      	ldrb	r3, [r3, #0]
 80199f2:	009b      	lsls	r3, r3, #2
 80199f4:	18d3      	adds	r3, r2, r3
 80199f6:	183a      	adds	r2, r7, r0
 80199f8:	8812      	ldrh	r2, [r2, #0]
 80199fa:	495b      	ldr	r1, [pc, #364]	@ (8019b68 <USB_DeactivateEndpoint+0x374>)
 80199fc:	430a      	orrs	r2, r1
 80199fe:	b292      	uxth	r2, r2
 8019a00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019a02:	687a      	ldr	r2, [r7, #4]
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	781b      	ldrb	r3, [r3, #0]
 8019a08:	009b      	lsls	r3, r3, #2
 8019a0a:	18d3      	adds	r3, r2, r3
 8019a0c:	881b      	ldrh	r3, [r3, #0]
 8019a0e:	b29a      	uxth	r2, r3
 8019a10:	2014      	movs	r0, #20
 8019a12:	183b      	adds	r3, r7, r0
 8019a14:	4953      	ldr	r1, [pc, #332]	@ (8019b64 <USB_DeactivateEndpoint+0x370>)
 8019a16:	400a      	ands	r2, r1
 8019a18:	801a      	strh	r2, [r3, #0]
 8019a1a:	687a      	ldr	r2, [r7, #4]
 8019a1c:	683b      	ldr	r3, [r7, #0]
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	009b      	lsls	r3, r3, #2
 8019a22:	18d3      	adds	r3, r2, r3
 8019a24:	183a      	adds	r2, r7, r0
 8019a26:	8812      	ldrh	r2, [r2, #0]
 8019a28:	494f      	ldr	r1, [pc, #316]	@ (8019b68 <USB_DeactivateEndpoint+0x374>)
 8019a2a:	430a      	orrs	r2, r1
 8019a2c:	b292      	uxth	r2, r2
 8019a2e:	801a      	strh	r2, [r3, #0]
 8019a30:	e08f      	b.n	8019b52 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a32:	687a      	ldr	r2, [r7, #4]
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	009b      	lsls	r3, r3, #2
 8019a3a:	18d2      	adds	r2, r2, r3
 8019a3c:	212e      	movs	r1, #46	@ 0x2e
 8019a3e:	187b      	adds	r3, r7, r1
 8019a40:	8812      	ldrh	r2, [r2, #0]
 8019a42:	801a      	strh	r2, [r3, #0]
 8019a44:	187b      	adds	r3, r7, r1
 8019a46:	881a      	ldrh	r2, [r3, #0]
 8019a48:	2380      	movs	r3, #128	@ 0x80
 8019a4a:	01db      	lsls	r3, r3, #7
 8019a4c:	4013      	ands	r3, r2
 8019a4e:	d016      	beq.n	8019a7e <USB_DeactivateEndpoint+0x28a>
 8019a50:	687a      	ldr	r2, [r7, #4]
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	781b      	ldrb	r3, [r3, #0]
 8019a56:	009b      	lsls	r3, r3, #2
 8019a58:	18d3      	adds	r3, r2, r3
 8019a5a:	881b      	ldrh	r3, [r3, #0]
 8019a5c:	b29a      	uxth	r2, r3
 8019a5e:	202c      	movs	r0, #44	@ 0x2c
 8019a60:	183b      	adds	r3, r7, r0
 8019a62:	493e      	ldr	r1, [pc, #248]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 8019a64:	400a      	ands	r2, r1
 8019a66:	801a      	strh	r2, [r3, #0]
 8019a68:	687a      	ldr	r2, [r7, #4]
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	009b      	lsls	r3, r3, #2
 8019a70:	18d3      	adds	r3, r2, r3
 8019a72:	183a      	adds	r2, r7, r0
 8019a74:	8812      	ldrh	r2, [r2, #0]
 8019a76:	493d      	ldr	r1, [pc, #244]	@ (8019b6c <USB_DeactivateEndpoint+0x378>)
 8019a78:	430a      	orrs	r2, r1
 8019a7a:	b292      	uxth	r2, r2
 8019a7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019a7e:	687a      	ldr	r2, [r7, #4]
 8019a80:	683b      	ldr	r3, [r7, #0]
 8019a82:	781b      	ldrb	r3, [r3, #0]
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	18d2      	adds	r2, r2, r3
 8019a88:	212a      	movs	r1, #42	@ 0x2a
 8019a8a:	187b      	adds	r3, r7, r1
 8019a8c:	8812      	ldrh	r2, [r2, #0]
 8019a8e:	801a      	strh	r2, [r3, #0]
 8019a90:	187b      	adds	r3, r7, r1
 8019a92:	881b      	ldrh	r3, [r3, #0]
 8019a94:	2240      	movs	r2, #64	@ 0x40
 8019a96:	4013      	ands	r3, r2
 8019a98:	d016      	beq.n	8019ac8 <USB_DeactivateEndpoint+0x2d4>
 8019a9a:	687a      	ldr	r2, [r7, #4]
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	781b      	ldrb	r3, [r3, #0]
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	18d3      	adds	r3, r2, r3
 8019aa4:	881b      	ldrh	r3, [r3, #0]
 8019aa6:	b29a      	uxth	r2, r3
 8019aa8:	2028      	movs	r0, #40	@ 0x28
 8019aaa:	183b      	adds	r3, r7, r0
 8019aac:	492b      	ldr	r1, [pc, #172]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 8019aae:	400a      	ands	r2, r1
 8019ab0:	801a      	strh	r2, [r3, #0]
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	009b      	lsls	r3, r3, #2
 8019aba:	18d3      	adds	r3, r2, r3
 8019abc:	183a      	adds	r2, r7, r0
 8019abe:	8812      	ldrh	r2, [r2, #0]
 8019ac0:	4927      	ldr	r1, [pc, #156]	@ (8019b60 <USB_DeactivateEndpoint+0x36c>)
 8019ac2:	430a      	orrs	r2, r1
 8019ac4:	b292      	uxth	r2, r2
 8019ac6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019ac8:	687a      	ldr	r2, [r7, #4]
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	18d3      	adds	r3, r2, r3
 8019ad2:	881b      	ldrh	r3, [r3, #0]
 8019ad4:	b29a      	uxth	r2, r3
 8019ad6:	2026      	movs	r0, #38	@ 0x26
 8019ad8:	183b      	adds	r3, r7, r0
 8019ada:	4920      	ldr	r1, [pc, #128]	@ (8019b5c <USB_DeactivateEndpoint+0x368>)
 8019adc:	400a      	ands	r2, r1
 8019ade:	801a      	strh	r2, [r3, #0]
 8019ae0:	687a      	ldr	r2, [r7, #4]
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	009b      	lsls	r3, r3, #2
 8019ae8:	18d3      	adds	r3, r2, r3
 8019aea:	183a      	adds	r2, r7, r0
 8019aec:	8812      	ldrh	r2, [r2, #0]
 8019aee:	491f      	ldr	r1, [pc, #124]	@ (8019b6c <USB_DeactivateEndpoint+0x378>)
 8019af0:	430a      	orrs	r2, r1
 8019af2:	b292      	uxth	r2, r2
 8019af4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019af6:	687a      	ldr	r2, [r7, #4]
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	781b      	ldrb	r3, [r3, #0]
 8019afc:	009b      	lsls	r3, r3, #2
 8019afe:	18d3      	adds	r3, r2, r3
 8019b00:	881b      	ldrh	r3, [r3, #0]
 8019b02:	b29a      	uxth	r2, r3
 8019b04:	2024      	movs	r0, #36	@ 0x24
 8019b06:	183b      	adds	r3, r7, r0
 8019b08:	4916      	ldr	r1, [pc, #88]	@ (8019b64 <USB_DeactivateEndpoint+0x370>)
 8019b0a:	400a      	ands	r2, r1
 8019b0c:	801a      	strh	r2, [r3, #0]
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	683b      	ldr	r3, [r7, #0]
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	009b      	lsls	r3, r3, #2
 8019b16:	18d3      	adds	r3, r2, r3
 8019b18:	183a      	adds	r2, r7, r0
 8019b1a:	8812      	ldrh	r2, [r2, #0]
 8019b1c:	4912      	ldr	r1, [pc, #72]	@ (8019b68 <USB_DeactivateEndpoint+0x374>)
 8019b1e:	430a      	orrs	r2, r1
 8019b20:	b292      	uxth	r2, r2
 8019b22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019b24:	687a      	ldr	r2, [r7, #4]
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	781b      	ldrb	r3, [r3, #0]
 8019b2a:	009b      	lsls	r3, r3, #2
 8019b2c:	18d3      	adds	r3, r2, r3
 8019b2e:	881b      	ldrh	r3, [r3, #0]
 8019b30:	b29a      	uxth	r2, r3
 8019b32:	2022      	movs	r0, #34	@ 0x22
 8019b34:	183b      	adds	r3, r7, r0
 8019b36:	490e      	ldr	r1, [pc, #56]	@ (8019b70 <USB_DeactivateEndpoint+0x37c>)
 8019b38:	400a      	ands	r2, r1
 8019b3a:	801a      	strh	r2, [r3, #0]
 8019b3c:	687a      	ldr	r2, [r7, #4]
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	18d3      	adds	r3, r2, r3
 8019b46:	183a      	adds	r2, r7, r0
 8019b48:	8812      	ldrh	r2, [r2, #0]
 8019b4a:	4907      	ldr	r1, [pc, #28]	@ (8019b68 <USB_DeactivateEndpoint+0x374>)
 8019b4c:	430a      	orrs	r2, r1
 8019b4e:	b292      	uxth	r2, r2
 8019b50:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019b52:	2300      	movs	r3, #0
}
 8019b54:	0018      	movs	r0, r3
 8019b56:	46bd      	mov	sp, r7
 8019b58:	b00c      	add	sp, #48	@ 0x30
 8019b5a:	bd80      	pop	{r7, pc}
 8019b5c:	ffff8f8f 	.word	0xffff8f8f
 8019b60:	ffff80c0 	.word	0xffff80c0
 8019b64:	ffff8fbf 	.word	0xffff8fbf
 8019b68:	ffff8080 	.word	0xffff8080
 8019b6c:	ffffc080 	.word	0xffffc080
 8019b70:	ffffbf8f 	.word	0xffffbf8f

08019b74 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019b74:	b590      	push	{r4, r7, lr}
 8019b76:	b0c3      	sub	sp, #268	@ 0x10c
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
 8019b7c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	785b      	ldrb	r3, [r3, #1]
 8019b82:	2b01      	cmp	r3, #1
 8019b84:	d001      	beq.n	8019b8a <USB_EPStartXfer+0x16>
 8019b86:	f000 fd2d 	bl	801a5e4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	699a      	ldr	r2, [r3, #24]
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	691b      	ldr	r3, [r3, #16]
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d905      	bls.n	8019ba2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019b96:	683b      	ldr	r3, [r7, #0]
 8019b98:	691b      	ldr	r3, [r3, #16]
 8019b9a:	1d7a      	adds	r2, r7, #5
 8019b9c:	32ff      	adds	r2, #255	@ 0xff
 8019b9e:	6013      	str	r3, [r2, #0]
 8019ba0:	e004      	b.n	8019bac <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019ba2:	683b      	ldr	r3, [r7, #0]
 8019ba4:	699b      	ldr	r3, [r3, #24]
 8019ba6:	1d7a      	adds	r2, r7, #5
 8019ba8:	32ff      	adds	r2, #255	@ 0xff
 8019baa:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	7b1b      	ldrb	r3, [r3, #12]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d125      	bne.n	8019c00 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	6959      	ldr	r1, [r3, #20]
 8019bb8:	683b      	ldr	r3, [r7, #0]
 8019bba:	88da      	ldrh	r2, [r3, #6]
 8019bbc:	1d7b      	adds	r3, r7, #5
 8019bbe:	33ff      	adds	r3, #255	@ 0xff
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	f001 fa47 	bl	801b058 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	613b      	str	r3, [r7, #16]
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	2250      	movs	r2, #80	@ 0x50
 8019bd2:	5a9b      	ldrh	r3, [r3, r2]
 8019bd4:	b29b      	uxth	r3, r3
 8019bd6:	001a      	movs	r2, r3
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	189b      	adds	r3, r3, r2
 8019bdc:	613b      	str	r3, [r7, #16]
 8019bde:	683b      	ldr	r3, [r7, #0]
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	00da      	lsls	r2, r3, #3
 8019be4:	693b      	ldr	r3, [r7, #16]
 8019be6:	18d3      	adds	r3, r2, r3
 8019be8:	4ad7      	ldr	r2, [pc, #860]	@ (8019f48 <USB_EPStartXfer+0x3d4>)
 8019bea:	4694      	mov	ip, r2
 8019bec:	4463      	add	r3, ip
 8019bee:	60fb      	str	r3, [r7, #12]
 8019bf0:	1d7b      	adds	r3, r7, #5
 8019bf2:	33ff      	adds	r3, #255	@ 0xff
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	b29a      	uxth	r2, r3
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	801a      	strh	r2, [r3, #0]
 8019bfc:	f000 fccd 	bl	801a59a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019c00:	683b      	ldr	r3, [r7, #0]
 8019c02:	78db      	ldrb	r3, [r3, #3]
 8019c04:	2b02      	cmp	r3, #2
 8019c06:	d000      	beq.n	8019c0a <USB_EPStartXfer+0x96>
 8019c08:	e362      	b.n	801a2d0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	6a1a      	ldr	r2, [r3, #32]
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	691b      	ldr	r3, [r3, #16]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d800      	bhi.n	8019c18 <USB_EPStartXfer+0xa4>
 8019c16:	e309      	b.n	801a22c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019c18:	687a      	ldr	r2, [r7, #4]
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	009b      	lsls	r3, r3, #2
 8019c20:	18d3      	adds	r3, r2, r3
 8019c22:	881b      	ldrh	r3, [r3, #0]
 8019c24:	b29a      	uxth	r2, r3
 8019c26:	2056      	movs	r0, #86	@ 0x56
 8019c28:	183b      	adds	r3, r7, r0
 8019c2a:	49c8      	ldr	r1, [pc, #800]	@ (8019f4c <USB_EPStartXfer+0x3d8>)
 8019c2c:	400a      	ands	r2, r1
 8019c2e:	801a      	strh	r2, [r3, #0]
 8019c30:	687a      	ldr	r2, [r7, #4]
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	009b      	lsls	r3, r3, #2
 8019c38:	18d3      	adds	r3, r2, r3
 8019c3a:	183a      	adds	r2, r7, r0
 8019c3c:	8812      	ldrh	r2, [r2, #0]
 8019c3e:	49c4      	ldr	r1, [pc, #784]	@ (8019f50 <USB_EPStartXfer+0x3dc>)
 8019c40:	430a      	orrs	r2, r1
 8019c42:	b292      	uxth	r2, r2
 8019c44:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	6a1a      	ldr	r2, [r3, #32]
 8019c4a:	1d7b      	adds	r3, r7, #5
 8019c4c:	33ff      	adds	r3, #255	@ 0xff
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	1ad2      	subs	r2, r2, r3
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019c56:	687a      	ldr	r2, [r7, #4]
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	009b      	lsls	r3, r3, #2
 8019c5e:	18d3      	adds	r3, r2, r3
 8019c60:	881b      	ldrh	r3, [r3, #0]
 8019c62:	b29b      	uxth	r3, r3
 8019c64:	001a      	movs	r2, r3
 8019c66:	2340      	movs	r3, #64	@ 0x40
 8019c68:	4013      	ands	r3, r2
 8019c6a:	d100      	bne.n	8019c6e <USB_EPStartXfer+0xfa>
 8019c6c:	e176      	b.n	8019f5c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	785b      	ldrb	r3, [r3, #1]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d000      	beq.n	8019c7c <USB_EPStartXfer+0x108>
 8019c7a:	e074      	b.n	8019d66 <USB_EPStartXfer+0x1f2>
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2250      	movs	r2, #80	@ 0x50
 8019c84:	5a9b      	ldrh	r3, [r3, r2]
 8019c86:	b29b      	uxth	r3, r3
 8019c88:	001a      	movs	r2, r3
 8019c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c8c:	189b      	adds	r3, r3, r2
 8019c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	781b      	ldrb	r3, [r3, #0]
 8019c94:	00da      	lsls	r2, r3, #3
 8019c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c98:	18d3      	adds	r3, r2, r3
 8019c9a:	4aae      	ldr	r2, [pc, #696]	@ (8019f54 <USB_EPStartXfer+0x3e0>)
 8019c9c:	4694      	mov	ip, r2
 8019c9e:	4463      	add	r3, ip
 8019ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ca4:	881b      	ldrh	r3, [r3, #0]
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	059b      	lsls	r3, r3, #22
 8019caa:	0d9b      	lsrs	r3, r3, #22
 8019cac:	b29a      	uxth	r2, r3
 8019cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cb0:	801a      	strh	r2, [r3, #0]
 8019cb2:	1d7b      	adds	r3, r7, #5
 8019cb4:	33ff      	adds	r3, #255	@ 0xff
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8019cba:	d924      	bls.n	8019d06 <USB_EPStartXfer+0x192>
 8019cbc:	1d7b      	adds	r3, r7, #5
 8019cbe:	33ff      	adds	r3, #255	@ 0xff
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	095b      	lsrs	r3, r3, #5
 8019cc4:	1c7a      	adds	r2, r7, #1
 8019cc6:	32ff      	adds	r2, #255	@ 0xff
 8019cc8:	6013      	str	r3, [r2, #0]
 8019cca:	1d7b      	adds	r3, r7, #5
 8019ccc:	33ff      	adds	r3, #255	@ 0xff
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	221f      	movs	r2, #31
 8019cd2:	4013      	ands	r3, r2
 8019cd4:	d106      	bne.n	8019ce4 <USB_EPStartXfer+0x170>
 8019cd6:	1c7b      	adds	r3, r7, #1
 8019cd8:	33ff      	adds	r3, #255	@ 0xff
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	3b01      	subs	r3, #1
 8019cde:	1c7a      	adds	r2, r7, #1
 8019ce0:	32ff      	adds	r2, #255	@ 0xff
 8019ce2:	6013      	str	r3, [r2, #0]
 8019ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ce6:	881b      	ldrh	r3, [r3, #0]
 8019ce8:	b29a      	uxth	r2, r3
 8019cea:	1c7b      	adds	r3, r7, #1
 8019cec:	33ff      	adds	r3, #255	@ 0xff
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	029b      	lsls	r3, r3, #10
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	4313      	orrs	r3, r2
 8019cf8:	b29b      	uxth	r3, r3
 8019cfa:	4a97      	ldr	r2, [pc, #604]	@ (8019f58 <USB_EPStartXfer+0x3e4>)
 8019cfc:	4313      	orrs	r3, r2
 8019cfe:	b29a      	uxth	r2, r3
 8019d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d02:	801a      	strh	r2, [r3, #0]
 8019d04:	e04a      	b.n	8019d9c <USB_EPStartXfer+0x228>
 8019d06:	1d7b      	adds	r3, r7, #5
 8019d08:	33ff      	adds	r3, #255	@ 0xff
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d108      	bne.n	8019d22 <USB_EPStartXfer+0x1ae>
 8019d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d12:	881b      	ldrh	r3, [r3, #0]
 8019d14:	b29b      	uxth	r3, r3
 8019d16:	4a90      	ldr	r2, [pc, #576]	@ (8019f58 <USB_EPStartXfer+0x3e4>)
 8019d18:	4313      	orrs	r3, r2
 8019d1a:	b29a      	uxth	r2, r3
 8019d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d1e:	801a      	strh	r2, [r3, #0]
 8019d20:	e03c      	b.n	8019d9c <USB_EPStartXfer+0x228>
 8019d22:	1d7b      	adds	r3, r7, #5
 8019d24:	33ff      	adds	r3, #255	@ 0xff
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	085b      	lsrs	r3, r3, #1
 8019d2a:	1c7a      	adds	r2, r7, #1
 8019d2c:	32ff      	adds	r2, #255	@ 0xff
 8019d2e:	6013      	str	r3, [r2, #0]
 8019d30:	1d7b      	adds	r3, r7, #5
 8019d32:	33ff      	adds	r3, #255	@ 0xff
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	2201      	movs	r2, #1
 8019d38:	4013      	ands	r3, r2
 8019d3a:	d006      	beq.n	8019d4a <USB_EPStartXfer+0x1d6>
 8019d3c:	1c7b      	adds	r3, r7, #1
 8019d3e:	33ff      	adds	r3, #255	@ 0xff
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	3301      	adds	r3, #1
 8019d44:	1c7a      	adds	r2, r7, #1
 8019d46:	32ff      	adds	r2, #255	@ 0xff
 8019d48:	6013      	str	r3, [r2, #0]
 8019d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d4c:	881b      	ldrh	r3, [r3, #0]
 8019d4e:	b29a      	uxth	r2, r3
 8019d50:	1c7b      	adds	r3, r7, #1
 8019d52:	33ff      	adds	r3, #255	@ 0xff
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	029b      	lsls	r3, r3, #10
 8019d5a:	b29b      	uxth	r3, r3
 8019d5c:	4313      	orrs	r3, r2
 8019d5e:	b29a      	uxth	r2, r3
 8019d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d62:	801a      	strh	r2, [r3, #0]
 8019d64:	e01a      	b.n	8019d9c <USB_EPStartXfer+0x228>
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	785b      	ldrb	r3, [r3, #1]
 8019d6a:	2b01      	cmp	r3, #1
 8019d6c:	d116      	bne.n	8019d9c <USB_EPStartXfer+0x228>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	2250      	movs	r2, #80	@ 0x50
 8019d72:	5a9b      	ldrh	r3, [r3, r2]
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	001a      	movs	r2, r3
 8019d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d7a:	189b      	adds	r3, r3, r2
 8019d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	781b      	ldrb	r3, [r3, #0]
 8019d82:	00da      	lsls	r2, r3, #3
 8019d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d86:	18d3      	adds	r3, r2, r3
 8019d88:	4a72      	ldr	r2, [pc, #456]	@ (8019f54 <USB_EPStartXfer+0x3e0>)
 8019d8a:	4694      	mov	ip, r2
 8019d8c:	4463      	add	r3, ip
 8019d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d90:	1d7b      	adds	r3, r7, #5
 8019d92:	33ff      	adds	r3, #255	@ 0xff
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	b29a      	uxth	r2, r3
 8019d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019d9c:	2076      	movs	r0, #118	@ 0x76
 8019d9e:	183b      	adds	r3, r7, r0
 8019da0:	683a      	ldr	r2, [r7, #0]
 8019da2:	8952      	ldrh	r2, [r2, #10]
 8019da4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	6959      	ldr	r1, [r3, #20]
 8019daa:	1d7b      	adds	r3, r7, #5
 8019dac:	33ff      	adds	r3, #255	@ 0xff
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	b29c      	uxth	r4, r3
 8019db2:	183b      	adds	r3, r7, r0
 8019db4:	881a      	ldrh	r2, [r3, #0]
 8019db6:	6878      	ldr	r0, [r7, #4]
 8019db8:	0023      	movs	r3, r4
 8019dba:	f001 f94d 	bl	801b058 <USB_WritePMA>
            ep->xfer_buff += len;
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	695a      	ldr	r2, [r3, #20]
 8019dc2:	1d7b      	adds	r3, r7, #5
 8019dc4:	33ff      	adds	r3, #255	@ 0xff
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	18d2      	adds	r2, r2, r3
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	6a1a      	ldr	r2, [r3, #32]
 8019dd2:	683b      	ldr	r3, [r7, #0]
 8019dd4:	691b      	ldr	r3, [r3, #16]
 8019dd6:	429a      	cmp	r2, r3
 8019dd8:	d908      	bls.n	8019dec <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	6a1a      	ldr	r2, [r3, #32]
 8019dde:	1d7b      	adds	r3, r7, #5
 8019de0:	33ff      	adds	r3, #255	@ 0xff
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	1ad2      	subs	r2, r2, r3
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	621a      	str	r2, [r3, #32]
 8019dea:	e007      	b.n	8019dfc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	6a1b      	ldr	r3, [r3, #32]
 8019df0:	1d7a      	adds	r2, r7, #5
 8019df2:	32ff      	adds	r2, #255	@ 0xff
 8019df4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	2200      	movs	r2, #0
 8019dfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019dfc:	683b      	ldr	r3, [r7, #0]
 8019dfe:	785b      	ldrb	r3, [r3, #1]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d000      	beq.n	8019e06 <USB_EPStartXfer+0x292>
 8019e04:	e070      	b.n	8019ee8 <USB_EPStartXfer+0x374>
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	61bb      	str	r3, [r7, #24]
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	2250      	movs	r2, #80	@ 0x50
 8019e0e:	5a9b      	ldrh	r3, [r3, r2]
 8019e10:	b29b      	uxth	r3, r3
 8019e12:	001a      	movs	r2, r3
 8019e14:	69bb      	ldr	r3, [r7, #24]
 8019e16:	189b      	adds	r3, r3, r2
 8019e18:	61bb      	str	r3, [r7, #24]
 8019e1a:	683b      	ldr	r3, [r7, #0]
 8019e1c:	781b      	ldrb	r3, [r3, #0]
 8019e1e:	00da      	lsls	r2, r3, #3
 8019e20:	69bb      	ldr	r3, [r7, #24]
 8019e22:	18d3      	adds	r3, r2, r3
 8019e24:	4a48      	ldr	r2, [pc, #288]	@ (8019f48 <USB_EPStartXfer+0x3d4>)
 8019e26:	4694      	mov	ip, r2
 8019e28:	4463      	add	r3, ip
 8019e2a:	617b      	str	r3, [r7, #20]
 8019e2c:	697b      	ldr	r3, [r7, #20]
 8019e2e:	881b      	ldrh	r3, [r3, #0]
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	059b      	lsls	r3, r3, #22
 8019e34:	0d9b      	lsrs	r3, r3, #22
 8019e36:	b29a      	uxth	r2, r3
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	801a      	strh	r2, [r3, #0]
 8019e3c:	1d7b      	adds	r3, r7, #5
 8019e3e:	33ff      	adds	r3, #255	@ 0xff
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e44:	d922      	bls.n	8019e8c <USB_EPStartXfer+0x318>
 8019e46:	1d7b      	adds	r3, r7, #5
 8019e48:	33ff      	adds	r3, #255	@ 0xff
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	095b      	lsrs	r3, r3, #5
 8019e4e:	21fc      	movs	r1, #252	@ 0xfc
 8019e50:	187a      	adds	r2, r7, r1
 8019e52:	6013      	str	r3, [r2, #0]
 8019e54:	1d7b      	adds	r3, r7, #5
 8019e56:	33ff      	adds	r3, #255	@ 0xff
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	221f      	movs	r2, #31
 8019e5c:	4013      	ands	r3, r2
 8019e5e:	d104      	bne.n	8019e6a <USB_EPStartXfer+0x2f6>
 8019e60:	187b      	adds	r3, r7, r1
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	3b01      	subs	r3, #1
 8019e66:	187a      	adds	r2, r7, r1
 8019e68:	6013      	str	r3, [r2, #0]
 8019e6a:	697b      	ldr	r3, [r7, #20]
 8019e6c:	881b      	ldrh	r3, [r3, #0]
 8019e6e:	b29a      	uxth	r2, r3
 8019e70:	23fc      	movs	r3, #252	@ 0xfc
 8019e72:	18fb      	adds	r3, r7, r3
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	029b      	lsls	r3, r3, #10
 8019e7a:	b29b      	uxth	r3, r3
 8019e7c:	4313      	orrs	r3, r2
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	4a35      	ldr	r2, [pc, #212]	@ (8019f58 <USB_EPStartXfer+0x3e4>)
 8019e82:	4313      	orrs	r3, r2
 8019e84:	b29a      	uxth	r2, r3
 8019e86:	697b      	ldr	r3, [r7, #20]
 8019e88:	801a      	strh	r2, [r3, #0]
 8019e8a:	e04a      	b.n	8019f22 <USB_EPStartXfer+0x3ae>
 8019e8c:	1d7b      	adds	r3, r7, #5
 8019e8e:	33ff      	adds	r3, #255	@ 0xff
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d108      	bne.n	8019ea8 <USB_EPStartXfer+0x334>
 8019e96:	697b      	ldr	r3, [r7, #20]
 8019e98:	881b      	ldrh	r3, [r3, #0]
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8019f58 <USB_EPStartXfer+0x3e4>)
 8019e9e:	4313      	orrs	r3, r2
 8019ea0:	b29a      	uxth	r2, r3
 8019ea2:	697b      	ldr	r3, [r7, #20]
 8019ea4:	801a      	strh	r2, [r3, #0]
 8019ea6:	e03c      	b.n	8019f22 <USB_EPStartXfer+0x3ae>
 8019ea8:	1d7b      	adds	r3, r7, #5
 8019eaa:	33ff      	adds	r3, #255	@ 0xff
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	085b      	lsrs	r3, r3, #1
 8019eb0:	21fc      	movs	r1, #252	@ 0xfc
 8019eb2:	187a      	adds	r2, r7, r1
 8019eb4:	6013      	str	r3, [r2, #0]
 8019eb6:	1d7b      	adds	r3, r7, #5
 8019eb8:	33ff      	adds	r3, #255	@ 0xff
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2201      	movs	r2, #1
 8019ebe:	4013      	ands	r3, r2
 8019ec0:	d004      	beq.n	8019ecc <USB_EPStartXfer+0x358>
 8019ec2:	187b      	adds	r3, r7, r1
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	3301      	adds	r3, #1
 8019ec8:	187a      	adds	r2, r7, r1
 8019eca:	6013      	str	r3, [r2, #0]
 8019ecc:	697b      	ldr	r3, [r7, #20]
 8019ece:	881b      	ldrh	r3, [r3, #0]
 8019ed0:	b29a      	uxth	r2, r3
 8019ed2:	23fc      	movs	r3, #252	@ 0xfc
 8019ed4:	18fb      	adds	r3, r7, r3
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	b29b      	uxth	r3, r3
 8019eda:	029b      	lsls	r3, r3, #10
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	4313      	orrs	r3, r2
 8019ee0:	b29a      	uxth	r2, r3
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	801a      	strh	r2, [r3, #0]
 8019ee6:	e01c      	b.n	8019f22 <USB_EPStartXfer+0x3ae>
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	785b      	ldrb	r3, [r3, #1]
 8019eec:	2b01      	cmp	r3, #1
 8019eee:	d118      	bne.n	8019f22 <USB_EPStartXfer+0x3ae>
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	623b      	str	r3, [r7, #32]
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	2250      	movs	r2, #80	@ 0x50
 8019ef8:	5a9b      	ldrh	r3, [r3, r2]
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	001a      	movs	r2, r3
 8019efe:	6a3b      	ldr	r3, [r7, #32]
 8019f00:	189b      	adds	r3, r3, r2
 8019f02:	623b      	str	r3, [r7, #32]
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	781b      	ldrb	r3, [r3, #0]
 8019f08:	00da      	lsls	r2, r3, #3
 8019f0a:	6a3b      	ldr	r3, [r7, #32]
 8019f0c:	18d3      	adds	r3, r2, r3
 8019f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8019f48 <USB_EPStartXfer+0x3d4>)
 8019f10:	4694      	mov	ip, r2
 8019f12:	4463      	add	r3, ip
 8019f14:	61fb      	str	r3, [r7, #28]
 8019f16:	1d7b      	adds	r3, r7, #5
 8019f18:	33ff      	adds	r3, #255	@ 0xff
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	b29a      	uxth	r2, r3
 8019f1e:	69fb      	ldr	r3, [r7, #28]
 8019f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019f22:	2076      	movs	r0, #118	@ 0x76
 8019f24:	183b      	adds	r3, r7, r0
 8019f26:	683a      	ldr	r2, [r7, #0]
 8019f28:	8912      	ldrh	r2, [r2, #8]
 8019f2a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	6959      	ldr	r1, [r3, #20]
 8019f30:	1d7b      	adds	r3, r7, #5
 8019f32:	33ff      	adds	r3, #255	@ 0xff
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	b29c      	uxth	r4, r3
 8019f38:	183b      	adds	r3, r7, r0
 8019f3a:	881a      	ldrh	r2, [r3, #0]
 8019f3c:	6878      	ldr	r0, [r7, #4]
 8019f3e:	0023      	movs	r3, r4
 8019f40:	f001 f88a 	bl	801b058 <USB_WritePMA>
 8019f44:	e329      	b.n	801a59a <USB_EPStartXfer+0xa26>
 8019f46:	46c0      	nop			@ (mov r8, r8)
 8019f48:	00000402 	.word	0x00000402
 8019f4c:	ffff8f8f 	.word	0xffff8f8f
 8019f50:	ffff8180 	.word	0xffff8180
 8019f54:	00000406 	.word	0x00000406
 8019f58:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	785b      	ldrb	r3, [r3, #1]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d000      	beq.n	8019f66 <USB_EPStartXfer+0x3f2>
 8019f64:	e070      	b.n	801a048 <USB_EPStartXfer+0x4d4>
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	2250      	movs	r2, #80	@ 0x50
 8019f6e:	5a9b      	ldrh	r3, [r3, r2]
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	001a      	movs	r2, r3
 8019f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f76:	189b      	adds	r3, r3, r2
 8019f78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	781b      	ldrb	r3, [r3, #0]
 8019f7e:	00da      	lsls	r2, r3, #3
 8019f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f82:	18d3      	adds	r3, r2, r3
 8019f84:	4acd      	ldr	r2, [pc, #820]	@ (801a2bc <USB_EPStartXfer+0x748>)
 8019f86:	4694      	mov	ip, r2
 8019f88:	4463      	add	r3, ip
 8019f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8019f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f8e:	881b      	ldrh	r3, [r3, #0]
 8019f90:	b29b      	uxth	r3, r3
 8019f92:	059b      	lsls	r3, r3, #22
 8019f94:	0d9b      	lsrs	r3, r3, #22
 8019f96:	b29a      	uxth	r2, r3
 8019f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f9a:	801a      	strh	r2, [r3, #0]
 8019f9c:	1d7b      	adds	r3, r7, #5
 8019f9e:	33ff      	adds	r3, #255	@ 0xff
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fa4:	d922      	bls.n	8019fec <USB_EPStartXfer+0x478>
 8019fa6:	1d7b      	adds	r3, r7, #5
 8019fa8:	33ff      	adds	r3, #255	@ 0xff
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	095b      	lsrs	r3, r3, #5
 8019fae:	21f8      	movs	r1, #248	@ 0xf8
 8019fb0:	187a      	adds	r2, r7, r1
 8019fb2:	6013      	str	r3, [r2, #0]
 8019fb4:	1d7b      	adds	r3, r7, #5
 8019fb6:	33ff      	adds	r3, #255	@ 0xff
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	221f      	movs	r2, #31
 8019fbc:	4013      	ands	r3, r2
 8019fbe:	d104      	bne.n	8019fca <USB_EPStartXfer+0x456>
 8019fc0:	187b      	adds	r3, r7, r1
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	3b01      	subs	r3, #1
 8019fc6:	187a      	adds	r2, r7, r1
 8019fc8:	6013      	str	r3, [r2, #0]
 8019fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fcc:	881b      	ldrh	r3, [r3, #0]
 8019fce:	b29a      	uxth	r2, r3
 8019fd0:	23f8      	movs	r3, #248	@ 0xf8
 8019fd2:	18fb      	adds	r3, r7, r3
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	b29b      	uxth	r3, r3
 8019fd8:	029b      	lsls	r3, r3, #10
 8019fda:	b29b      	uxth	r3, r3
 8019fdc:	4313      	orrs	r3, r2
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	4ab7      	ldr	r2, [pc, #732]	@ (801a2c0 <USB_EPStartXfer+0x74c>)
 8019fe2:	4313      	orrs	r3, r2
 8019fe4:	b29a      	uxth	r2, r3
 8019fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fe8:	801a      	strh	r2, [r3, #0]
 8019fea:	e04a      	b.n	801a082 <USB_EPStartXfer+0x50e>
 8019fec:	1d7b      	adds	r3, r7, #5
 8019fee:	33ff      	adds	r3, #255	@ 0xff
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d108      	bne.n	801a008 <USB_EPStartXfer+0x494>
 8019ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ff8:	881b      	ldrh	r3, [r3, #0]
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	4ab0      	ldr	r2, [pc, #704]	@ (801a2c0 <USB_EPStartXfer+0x74c>)
 8019ffe:	4313      	orrs	r3, r2
 801a000:	b29a      	uxth	r2, r3
 801a002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a004:	801a      	strh	r2, [r3, #0]
 801a006:	e03c      	b.n	801a082 <USB_EPStartXfer+0x50e>
 801a008:	1d7b      	adds	r3, r7, #5
 801a00a:	33ff      	adds	r3, #255	@ 0xff
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	085b      	lsrs	r3, r3, #1
 801a010:	21f8      	movs	r1, #248	@ 0xf8
 801a012:	187a      	adds	r2, r7, r1
 801a014:	6013      	str	r3, [r2, #0]
 801a016:	1d7b      	adds	r3, r7, #5
 801a018:	33ff      	adds	r3, #255	@ 0xff
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	2201      	movs	r2, #1
 801a01e:	4013      	ands	r3, r2
 801a020:	d004      	beq.n	801a02c <USB_EPStartXfer+0x4b8>
 801a022:	187b      	adds	r3, r7, r1
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	3301      	adds	r3, #1
 801a028:	187a      	adds	r2, r7, r1
 801a02a:	6013      	str	r3, [r2, #0]
 801a02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a02e:	881b      	ldrh	r3, [r3, #0]
 801a030:	b29a      	uxth	r2, r3
 801a032:	23f8      	movs	r3, #248	@ 0xf8
 801a034:	18fb      	adds	r3, r7, r3
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	b29b      	uxth	r3, r3
 801a03a:	029b      	lsls	r3, r3, #10
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	4313      	orrs	r3, r2
 801a040:	b29a      	uxth	r2, r3
 801a042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a044:	801a      	strh	r2, [r3, #0]
 801a046:	e01c      	b.n	801a082 <USB_EPStartXfer+0x50e>
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	785b      	ldrb	r3, [r3, #1]
 801a04c:	2b01      	cmp	r3, #1
 801a04e:	d118      	bne.n	801a082 <USB_EPStartXfer+0x50e>
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	653b      	str	r3, [r7, #80]	@ 0x50
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	2250      	movs	r2, #80	@ 0x50
 801a058:	5a9b      	ldrh	r3, [r3, r2]
 801a05a:	b29b      	uxth	r3, r3
 801a05c:	001a      	movs	r2, r3
 801a05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a060:	189b      	adds	r3, r3, r2
 801a062:	653b      	str	r3, [r7, #80]	@ 0x50
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	781b      	ldrb	r3, [r3, #0]
 801a068:	00da      	lsls	r2, r3, #3
 801a06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a06c:	18d3      	adds	r3, r2, r3
 801a06e:	4a93      	ldr	r2, [pc, #588]	@ (801a2bc <USB_EPStartXfer+0x748>)
 801a070:	4694      	mov	ip, r2
 801a072:	4463      	add	r3, ip
 801a074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a076:	1d7b      	adds	r3, r7, #5
 801a078:	33ff      	adds	r3, #255	@ 0xff
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	b29a      	uxth	r2, r3
 801a07e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a080:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a082:	2076      	movs	r0, #118	@ 0x76
 801a084:	183b      	adds	r3, r7, r0
 801a086:	683a      	ldr	r2, [r7, #0]
 801a088:	8912      	ldrh	r2, [r2, #8]
 801a08a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	6959      	ldr	r1, [r3, #20]
 801a090:	1d7b      	adds	r3, r7, #5
 801a092:	33ff      	adds	r3, #255	@ 0xff
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	b29c      	uxth	r4, r3
 801a098:	183b      	adds	r3, r7, r0
 801a09a:	881a      	ldrh	r2, [r3, #0]
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	0023      	movs	r3, r4
 801a0a0:	f000 ffda 	bl	801b058 <USB_WritePMA>
            ep->xfer_buff += len;
 801a0a4:	683b      	ldr	r3, [r7, #0]
 801a0a6:	695a      	ldr	r2, [r3, #20]
 801a0a8:	1d7b      	adds	r3, r7, #5
 801a0aa:	33ff      	adds	r3, #255	@ 0xff
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	18d2      	adds	r2, r2, r3
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	6a1a      	ldr	r2, [r3, #32]
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	691b      	ldr	r3, [r3, #16]
 801a0bc:	429a      	cmp	r2, r3
 801a0be:	d908      	bls.n	801a0d2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a0c0:	683b      	ldr	r3, [r7, #0]
 801a0c2:	6a1a      	ldr	r2, [r3, #32]
 801a0c4:	1d7b      	adds	r3, r7, #5
 801a0c6:	33ff      	adds	r3, #255	@ 0xff
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	1ad2      	subs	r2, r2, r3
 801a0cc:	683b      	ldr	r3, [r7, #0]
 801a0ce:	621a      	str	r2, [r3, #32]
 801a0d0:	e007      	b.n	801a0e2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a0d2:	683b      	ldr	r3, [r7, #0]
 801a0d4:	6a1b      	ldr	r3, [r3, #32]
 801a0d6:	1d7a      	adds	r2, r7, #5
 801a0d8:	32ff      	adds	r2, #255	@ 0xff
 801a0da:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a0dc:	683b      	ldr	r3, [r7, #0]
 801a0de:	2200      	movs	r2, #0
 801a0e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	643b      	str	r3, [r7, #64]	@ 0x40
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	785b      	ldrb	r3, [r3, #1]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d000      	beq.n	801a0f0 <USB_EPStartXfer+0x57c>
 801a0ee:	e070      	b.n	801a1d2 <USB_EPStartXfer+0x65e>
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2250      	movs	r2, #80	@ 0x50
 801a0f8:	5a9b      	ldrh	r3, [r3, r2]
 801a0fa:	b29b      	uxth	r3, r3
 801a0fc:	001a      	movs	r2, r3
 801a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a100:	189b      	adds	r3, r3, r2
 801a102:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	781b      	ldrb	r3, [r3, #0]
 801a108:	00da      	lsls	r2, r3, #3
 801a10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a10c:	18d3      	adds	r3, r2, r3
 801a10e:	4a6d      	ldr	r2, [pc, #436]	@ (801a2c4 <USB_EPStartXfer+0x750>)
 801a110:	4694      	mov	ip, r2
 801a112:	4463      	add	r3, ip
 801a114:	637b      	str	r3, [r7, #52]	@ 0x34
 801a116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a118:	881b      	ldrh	r3, [r3, #0]
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	059b      	lsls	r3, r3, #22
 801a11e:	0d9b      	lsrs	r3, r3, #22
 801a120:	b29a      	uxth	r2, r3
 801a122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a124:	801a      	strh	r2, [r3, #0]
 801a126:	1d7b      	adds	r3, r7, #5
 801a128:	33ff      	adds	r3, #255	@ 0xff
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a12e:	d922      	bls.n	801a176 <USB_EPStartXfer+0x602>
 801a130:	1d7b      	adds	r3, r7, #5
 801a132:	33ff      	adds	r3, #255	@ 0xff
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	095b      	lsrs	r3, r3, #5
 801a138:	21f4      	movs	r1, #244	@ 0xf4
 801a13a:	187a      	adds	r2, r7, r1
 801a13c:	6013      	str	r3, [r2, #0]
 801a13e:	1d7b      	adds	r3, r7, #5
 801a140:	33ff      	adds	r3, #255	@ 0xff
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	221f      	movs	r2, #31
 801a146:	4013      	ands	r3, r2
 801a148:	d104      	bne.n	801a154 <USB_EPStartXfer+0x5e0>
 801a14a:	187b      	adds	r3, r7, r1
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	3b01      	subs	r3, #1
 801a150:	187a      	adds	r2, r7, r1
 801a152:	6013      	str	r3, [r2, #0]
 801a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a156:	881b      	ldrh	r3, [r3, #0]
 801a158:	b29a      	uxth	r2, r3
 801a15a:	23f4      	movs	r3, #244	@ 0xf4
 801a15c:	18fb      	adds	r3, r7, r3
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	b29b      	uxth	r3, r3
 801a162:	029b      	lsls	r3, r3, #10
 801a164:	b29b      	uxth	r3, r3
 801a166:	4313      	orrs	r3, r2
 801a168:	b29b      	uxth	r3, r3
 801a16a:	4a55      	ldr	r2, [pc, #340]	@ (801a2c0 <USB_EPStartXfer+0x74c>)
 801a16c:	4313      	orrs	r3, r2
 801a16e:	b29a      	uxth	r2, r3
 801a170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a172:	801a      	strh	r2, [r3, #0]
 801a174:	e048      	b.n	801a208 <USB_EPStartXfer+0x694>
 801a176:	1d7b      	adds	r3, r7, #5
 801a178:	33ff      	adds	r3, #255	@ 0xff
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d108      	bne.n	801a192 <USB_EPStartXfer+0x61e>
 801a180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a182:	881b      	ldrh	r3, [r3, #0]
 801a184:	b29b      	uxth	r3, r3
 801a186:	4a4e      	ldr	r2, [pc, #312]	@ (801a2c0 <USB_EPStartXfer+0x74c>)
 801a188:	4313      	orrs	r3, r2
 801a18a:	b29a      	uxth	r2, r3
 801a18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a18e:	801a      	strh	r2, [r3, #0]
 801a190:	e03a      	b.n	801a208 <USB_EPStartXfer+0x694>
 801a192:	1d7b      	adds	r3, r7, #5
 801a194:	33ff      	adds	r3, #255	@ 0xff
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	085b      	lsrs	r3, r3, #1
 801a19a:	21f4      	movs	r1, #244	@ 0xf4
 801a19c:	187a      	adds	r2, r7, r1
 801a19e:	6013      	str	r3, [r2, #0]
 801a1a0:	1d7b      	adds	r3, r7, #5
 801a1a2:	33ff      	adds	r3, #255	@ 0xff
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	2201      	movs	r2, #1
 801a1a8:	4013      	ands	r3, r2
 801a1aa:	d004      	beq.n	801a1b6 <USB_EPStartXfer+0x642>
 801a1ac:	187b      	adds	r3, r7, r1
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	187a      	adds	r2, r7, r1
 801a1b4:	6013      	str	r3, [r2, #0]
 801a1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1b8:	881b      	ldrh	r3, [r3, #0]
 801a1ba:	b29a      	uxth	r2, r3
 801a1bc:	23f4      	movs	r3, #244	@ 0xf4
 801a1be:	18fb      	adds	r3, r7, r3
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	029b      	lsls	r3, r3, #10
 801a1c6:	b29b      	uxth	r3, r3
 801a1c8:	4313      	orrs	r3, r2
 801a1ca:	b29a      	uxth	r2, r3
 801a1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1ce:	801a      	strh	r2, [r3, #0]
 801a1d0:	e01a      	b.n	801a208 <USB_EPStartXfer+0x694>
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	785b      	ldrb	r3, [r3, #1]
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d116      	bne.n	801a208 <USB_EPStartXfer+0x694>
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	2250      	movs	r2, #80	@ 0x50
 801a1de:	5a9b      	ldrh	r3, [r3, r2]
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	001a      	movs	r2, r3
 801a1e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a1e6:	189b      	adds	r3, r3, r2
 801a1e8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	00da      	lsls	r2, r3, #3
 801a1f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a1f2:	18d3      	adds	r3, r2, r3
 801a1f4:	4a33      	ldr	r2, [pc, #204]	@ (801a2c4 <USB_EPStartXfer+0x750>)
 801a1f6:	4694      	mov	ip, r2
 801a1f8:	4463      	add	r3, ip
 801a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a1fc:	1d7b      	adds	r3, r7, #5
 801a1fe:	33ff      	adds	r3, #255	@ 0xff
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	b29a      	uxth	r2, r3
 801a204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a206:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a208:	2076      	movs	r0, #118	@ 0x76
 801a20a:	183b      	adds	r3, r7, r0
 801a20c:	683a      	ldr	r2, [r7, #0]
 801a20e:	8952      	ldrh	r2, [r2, #10]
 801a210:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	6959      	ldr	r1, [r3, #20]
 801a216:	1d7b      	adds	r3, r7, #5
 801a218:	33ff      	adds	r3, #255	@ 0xff
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	b29c      	uxth	r4, r3
 801a21e:	183b      	adds	r3, r7, r0
 801a220:	881a      	ldrh	r2, [r3, #0]
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	0023      	movs	r3, r4
 801a226:	f000 ff17 	bl	801b058 <USB_WritePMA>
 801a22a:	e1b6      	b.n	801a59a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	6a1b      	ldr	r3, [r3, #32]
 801a230:	1d7a      	adds	r2, r7, #5
 801a232:	32ff      	adds	r2, #255	@ 0xff
 801a234:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a236:	687a      	ldr	r2, [r7, #4]
 801a238:	683b      	ldr	r3, [r7, #0]
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	009b      	lsls	r3, r3, #2
 801a23e:	18d3      	adds	r3, r2, r3
 801a240:	881b      	ldrh	r3, [r3, #0]
 801a242:	b29a      	uxth	r2, r3
 801a244:	2062      	movs	r0, #98	@ 0x62
 801a246:	183b      	adds	r3, r7, r0
 801a248:	491f      	ldr	r1, [pc, #124]	@ (801a2c8 <USB_EPStartXfer+0x754>)
 801a24a:	400a      	ands	r2, r1
 801a24c:	801a      	strh	r2, [r3, #0]
 801a24e:	687a      	ldr	r2, [r7, #4]
 801a250:	683b      	ldr	r3, [r7, #0]
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	009b      	lsls	r3, r3, #2
 801a256:	18d3      	adds	r3, r2, r3
 801a258:	183a      	adds	r2, r7, r0
 801a25a:	8812      	ldrh	r2, [r2, #0]
 801a25c:	491b      	ldr	r1, [pc, #108]	@ (801a2cc <USB_EPStartXfer+0x758>)
 801a25e:	430a      	orrs	r2, r1
 801a260:	b292      	uxth	r2, r2
 801a262:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2250      	movs	r2, #80	@ 0x50
 801a26c:	5a9b      	ldrh	r3, [r3, r2]
 801a26e:	b29b      	uxth	r3, r3
 801a270:	001a      	movs	r2, r3
 801a272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a274:	189b      	adds	r3, r3, r2
 801a276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a278:	683b      	ldr	r3, [r7, #0]
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	00da      	lsls	r2, r3, #3
 801a27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a280:	18d3      	adds	r3, r2, r3
 801a282:	4a0e      	ldr	r2, [pc, #56]	@ (801a2bc <USB_EPStartXfer+0x748>)
 801a284:	4694      	mov	ip, r2
 801a286:	4463      	add	r3, ip
 801a288:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a28a:	1d7b      	adds	r3, r7, #5
 801a28c:	33ff      	adds	r3, #255	@ 0xff
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	b29a      	uxth	r2, r3
 801a292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a294:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a296:	2076      	movs	r0, #118	@ 0x76
 801a298:	183b      	adds	r3, r7, r0
 801a29a:	683a      	ldr	r2, [r7, #0]
 801a29c:	8912      	ldrh	r2, [r2, #8]
 801a29e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a2a0:	683b      	ldr	r3, [r7, #0]
 801a2a2:	6959      	ldr	r1, [r3, #20]
 801a2a4:	1d7b      	adds	r3, r7, #5
 801a2a6:	33ff      	adds	r3, #255	@ 0xff
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	b29c      	uxth	r4, r3
 801a2ac:	183b      	adds	r3, r7, r0
 801a2ae:	881a      	ldrh	r2, [r3, #0]
 801a2b0:	6878      	ldr	r0, [r7, #4]
 801a2b2:	0023      	movs	r3, r4
 801a2b4:	f000 fed0 	bl	801b058 <USB_WritePMA>
 801a2b8:	e16f      	b.n	801a59a <USB_EPStartXfer+0xa26>
 801a2ba:	46c0      	nop			@ (mov r8, r8)
 801a2bc:	00000402 	.word	0x00000402
 801a2c0:	ffff8000 	.word	0xffff8000
 801a2c4:	00000406 	.word	0x00000406
 801a2c8:	ffff8e8f 	.word	0xffff8e8f
 801a2cc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	6a1a      	ldr	r2, [r3, #32]
 801a2d4:	1d7b      	adds	r3, r7, #5
 801a2d6:	33ff      	adds	r3, #255	@ 0xff
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	1ad2      	subs	r2, r2, r3
 801a2dc:	683b      	ldr	r3, [r7, #0]
 801a2de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a2e0:	687a      	ldr	r2, [r7, #4]
 801a2e2:	683b      	ldr	r3, [r7, #0]
 801a2e4:	781b      	ldrb	r3, [r3, #0]
 801a2e6:	009b      	lsls	r3, r3, #2
 801a2e8:	18d3      	adds	r3, r2, r3
 801a2ea:	881b      	ldrh	r3, [r3, #0]
 801a2ec:	b29b      	uxth	r3, r3
 801a2ee:	001a      	movs	r2, r3
 801a2f0:	2340      	movs	r3, #64	@ 0x40
 801a2f2:	4013      	ands	r3, r2
 801a2f4:	d100      	bne.n	801a2f8 <USB_EPStartXfer+0x784>
 801a2f6:	e0a4      	b.n	801a442 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	673b      	str	r3, [r7, #112]	@ 0x70
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	785b      	ldrb	r3, [r3, #1]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d000      	beq.n	801a306 <USB_EPStartXfer+0x792>
 801a304:	e070      	b.n	801a3e8 <USB_EPStartXfer+0x874>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2250      	movs	r2, #80	@ 0x50
 801a30e:	5a9b      	ldrh	r3, [r3, r2]
 801a310:	b29b      	uxth	r3, r3
 801a312:	001a      	movs	r2, r3
 801a314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a316:	189b      	adds	r3, r3, r2
 801a318:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	781b      	ldrb	r3, [r3, #0]
 801a31e:	00da      	lsls	r2, r3, #3
 801a320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a322:	18d3      	adds	r3, r2, r3
 801a324:	4abc      	ldr	r2, [pc, #752]	@ (801a618 <USB_EPStartXfer+0xaa4>)
 801a326:	4694      	mov	ip, r2
 801a328:	4463      	add	r3, ip
 801a32a:	667b      	str	r3, [r7, #100]	@ 0x64
 801a32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a32e:	881b      	ldrh	r3, [r3, #0]
 801a330:	b29b      	uxth	r3, r3
 801a332:	059b      	lsls	r3, r3, #22
 801a334:	0d9b      	lsrs	r3, r3, #22
 801a336:	b29a      	uxth	r2, r3
 801a338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a33a:	801a      	strh	r2, [r3, #0]
 801a33c:	1d7b      	adds	r3, r7, #5
 801a33e:	33ff      	adds	r3, #255	@ 0xff
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2b3e      	cmp	r3, #62	@ 0x3e
 801a344:	d922      	bls.n	801a38c <USB_EPStartXfer+0x818>
 801a346:	1d7b      	adds	r3, r7, #5
 801a348:	33ff      	adds	r3, #255	@ 0xff
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	095b      	lsrs	r3, r3, #5
 801a34e:	21f0      	movs	r1, #240	@ 0xf0
 801a350:	187a      	adds	r2, r7, r1
 801a352:	6013      	str	r3, [r2, #0]
 801a354:	1d7b      	adds	r3, r7, #5
 801a356:	33ff      	adds	r3, #255	@ 0xff
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	221f      	movs	r2, #31
 801a35c:	4013      	ands	r3, r2
 801a35e:	d104      	bne.n	801a36a <USB_EPStartXfer+0x7f6>
 801a360:	187b      	adds	r3, r7, r1
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	3b01      	subs	r3, #1
 801a366:	187a      	adds	r2, r7, r1
 801a368:	6013      	str	r3, [r2, #0]
 801a36a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a36c:	881b      	ldrh	r3, [r3, #0]
 801a36e:	b29a      	uxth	r2, r3
 801a370:	23f0      	movs	r3, #240	@ 0xf0
 801a372:	18fb      	adds	r3, r7, r3
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	b29b      	uxth	r3, r3
 801a378:	029b      	lsls	r3, r3, #10
 801a37a:	b29b      	uxth	r3, r3
 801a37c:	4313      	orrs	r3, r2
 801a37e:	b29b      	uxth	r3, r3
 801a380:	4aa6      	ldr	r2, [pc, #664]	@ (801a61c <USB_EPStartXfer+0xaa8>)
 801a382:	4313      	orrs	r3, r2
 801a384:	b29a      	uxth	r2, r3
 801a386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a388:	801a      	strh	r2, [r3, #0]
 801a38a:	e048      	b.n	801a41e <USB_EPStartXfer+0x8aa>
 801a38c:	1d7b      	adds	r3, r7, #5
 801a38e:	33ff      	adds	r3, #255	@ 0xff
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d108      	bne.n	801a3a8 <USB_EPStartXfer+0x834>
 801a396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a398:	881b      	ldrh	r3, [r3, #0]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	4a9f      	ldr	r2, [pc, #636]	@ (801a61c <USB_EPStartXfer+0xaa8>)
 801a39e:	4313      	orrs	r3, r2
 801a3a0:	b29a      	uxth	r2, r3
 801a3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a3a4:	801a      	strh	r2, [r3, #0]
 801a3a6:	e03a      	b.n	801a41e <USB_EPStartXfer+0x8aa>
 801a3a8:	1d7b      	adds	r3, r7, #5
 801a3aa:	33ff      	adds	r3, #255	@ 0xff
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	085b      	lsrs	r3, r3, #1
 801a3b0:	21f0      	movs	r1, #240	@ 0xf0
 801a3b2:	187a      	adds	r2, r7, r1
 801a3b4:	6013      	str	r3, [r2, #0]
 801a3b6:	1d7b      	adds	r3, r7, #5
 801a3b8:	33ff      	adds	r3, #255	@ 0xff
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	2201      	movs	r2, #1
 801a3be:	4013      	ands	r3, r2
 801a3c0:	d004      	beq.n	801a3cc <USB_EPStartXfer+0x858>
 801a3c2:	187b      	adds	r3, r7, r1
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	187a      	adds	r2, r7, r1
 801a3ca:	6013      	str	r3, [r2, #0]
 801a3cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a3ce:	881b      	ldrh	r3, [r3, #0]
 801a3d0:	b29a      	uxth	r2, r3
 801a3d2:	23f0      	movs	r3, #240	@ 0xf0
 801a3d4:	18fb      	adds	r3, r7, r3
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	029b      	lsls	r3, r3, #10
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	4313      	orrs	r3, r2
 801a3e0:	b29a      	uxth	r2, r3
 801a3e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a3e4:	801a      	strh	r2, [r3, #0]
 801a3e6:	e01a      	b.n	801a41e <USB_EPStartXfer+0x8aa>
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	785b      	ldrb	r3, [r3, #1]
 801a3ec:	2b01      	cmp	r3, #1
 801a3ee:	d116      	bne.n	801a41e <USB_EPStartXfer+0x8aa>
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	2250      	movs	r2, #80	@ 0x50
 801a3f4:	5a9b      	ldrh	r3, [r3, r2]
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	001a      	movs	r2, r3
 801a3fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a3fc:	189b      	adds	r3, r3, r2
 801a3fe:	673b      	str	r3, [r7, #112]	@ 0x70
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	781b      	ldrb	r3, [r3, #0]
 801a404:	00da      	lsls	r2, r3, #3
 801a406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a408:	18d3      	adds	r3, r2, r3
 801a40a:	4a83      	ldr	r2, [pc, #524]	@ (801a618 <USB_EPStartXfer+0xaa4>)
 801a40c:	4694      	mov	ip, r2
 801a40e:	4463      	add	r3, ip
 801a410:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a412:	1d7b      	adds	r3, r7, #5
 801a414:	33ff      	adds	r3, #255	@ 0xff
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	b29a      	uxth	r2, r3
 801a41a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a41c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a41e:	2076      	movs	r0, #118	@ 0x76
 801a420:	183b      	adds	r3, r7, r0
 801a422:	683a      	ldr	r2, [r7, #0]
 801a424:	8952      	ldrh	r2, [r2, #10]
 801a426:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a428:	683b      	ldr	r3, [r7, #0]
 801a42a:	6959      	ldr	r1, [r3, #20]
 801a42c:	1d7b      	adds	r3, r7, #5
 801a42e:	33ff      	adds	r3, #255	@ 0xff
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	b29c      	uxth	r4, r3
 801a434:	183b      	adds	r3, r7, r0
 801a436:	881a      	ldrh	r2, [r3, #0]
 801a438:	6878      	ldr	r0, [r7, #4]
 801a43a:	0023      	movs	r3, r4
 801a43c:	f000 fe0c 	bl	801b058 <USB_WritePMA>
 801a440:	e0ab      	b.n	801a59a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a442:	683b      	ldr	r3, [r7, #0]
 801a444:	785b      	ldrb	r3, [r3, #1]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d000      	beq.n	801a44c <USB_EPStartXfer+0x8d8>
 801a44a:	e070      	b.n	801a52e <USB_EPStartXfer+0x9ba>
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2250      	movs	r2, #80	@ 0x50
 801a454:	5a9b      	ldrh	r3, [r3, r2]
 801a456:	b29b      	uxth	r3, r3
 801a458:	001a      	movs	r2, r3
 801a45a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a45c:	189b      	adds	r3, r3, r2
 801a45e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	00da      	lsls	r2, r3, #3
 801a466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a468:	18d3      	adds	r3, r2, r3
 801a46a:	4a6d      	ldr	r2, [pc, #436]	@ (801a620 <USB_EPStartXfer+0xaac>)
 801a46c:	4694      	mov	ip, r2
 801a46e:	4463      	add	r3, ip
 801a470:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a474:	881b      	ldrh	r3, [r3, #0]
 801a476:	b29b      	uxth	r3, r3
 801a478:	059b      	lsls	r3, r3, #22
 801a47a:	0d9b      	lsrs	r3, r3, #22
 801a47c:	b29a      	uxth	r2, r3
 801a47e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a480:	801a      	strh	r2, [r3, #0]
 801a482:	1d7b      	adds	r3, r7, #5
 801a484:	33ff      	adds	r3, #255	@ 0xff
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	2b3e      	cmp	r3, #62	@ 0x3e
 801a48a:	d922      	bls.n	801a4d2 <USB_EPStartXfer+0x95e>
 801a48c:	1d7b      	adds	r3, r7, #5
 801a48e:	33ff      	adds	r3, #255	@ 0xff
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	095b      	lsrs	r3, r3, #5
 801a494:	21ec      	movs	r1, #236	@ 0xec
 801a496:	187a      	adds	r2, r7, r1
 801a498:	6013      	str	r3, [r2, #0]
 801a49a:	1d7b      	adds	r3, r7, #5
 801a49c:	33ff      	adds	r3, #255	@ 0xff
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	221f      	movs	r2, #31
 801a4a2:	4013      	ands	r3, r2
 801a4a4:	d104      	bne.n	801a4b0 <USB_EPStartXfer+0x93c>
 801a4a6:	187b      	adds	r3, r7, r1
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	3b01      	subs	r3, #1
 801a4ac:	187a      	adds	r2, r7, r1
 801a4ae:	6013      	str	r3, [r2, #0]
 801a4b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4b2:	881b      	ldrh	r3, [r3, #0]
 801a4b4:	b29a      	uxth	r2, r3
 801a4b6:	23ec      	movs	r3, #236	@ 0xec
 801a4b8:	18fb      	adds	r3, r7, r3
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	029b      	lsls	r3, r3, #10
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	4313      	orrs	r3, r2
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	4a55      	ldr	r2, [pc, #340]	@ (801a61c <USB_EPStartXfer+0xaa8>)
 801a4c8:	4313      	orrs	r3, r2
 801a4ca:	b29a      	uxth	r2, r3
 801a4cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4ce:	801a      	strh	r2, [r3, #0]
 801a4d0:	e052      	b.n	801a578 <USB_EPStartXfer+0xa04>
 801a4d2:	1d7b      	adds	r3, r7, #5
 801a4d4:	33ff      	adds	r3, #255	@ 0xff
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d108      	bne.n	801a4ee <USB_EPStartXfer+0x97a>
 801a4dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4de:	881b      	ldrh	r3, [r3, #0]
 801a4e0:	b29b      	uxth	r3, r3
 801a4e2:	4a4e      	ldr	r2, [pc, #312]	@ (801a61c <USB_EPStartXfer+0xaa8>)
 801a4e4:	4313      	orrs	r3, r2
 801a4e6:	b29a      	uxth	r2, r3
 801a4e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4ea:	801a      	strh	r2, [r3, #0]
 801a4ec:	e044      	b.n	801a578 <USB_EPStartXfer+0xa04>
 801a4ee:	1d7b      	adds	r3, r7, #5
 801a4f0:	33ff      	adds	r3, #255	@ 0xff
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	085b      	lsrs	r3, r3, #1
 801a4f6:	21ec      	movs	r1, #236	@ 0xec
 801a4f8:	187a      	adds	r2, r7, r1
 801a4fa:	6013      	str	r3, [r2, #0]
 801a4fc:	1d7b      	adds	r3, r7, #5
 801a4fe:	33ff      	adds	r3, #255	@ 0xff
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	2201      	movs	r2, #1
 801a504:	4013      	ands	r3, r2
 801a506:	d004      	beq.n	801a512 <USB_EPStartXfer+0x99e>
 801a508:	187b      	adds	r3, r7, r1
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	3301      	adds	r3, #1
 801a50e:	187a      	adds	r2, r7, r1
 801a510:	6013      	str	r3, [r2, #0]
 801a512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a514:	881b      	ldrh	r3, [r3, #0]
 801a516:	b29a      	uxth	r2, r3
 801a518:	23ec      	movs	r3, #236	@ 0xec
 801a51a:	18fb      	adds	r3, r7, r3
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	b29b      	uxth	r3, r3
 801a520:	029b      	lsls	r3, r3, #10
 801a522:	b29b      	uxth	r3, r3
 801a524:	4313      	orrs	r3, r2
 801a526:	b29a      	uxth	r2, r3
 801a528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a52a:	801a      	strh	r2, [r3, #0]
 801a52c:	e024      	b.n	801a578 <USB_EPStartXfer+0xa04>
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	785b      	ldrb	r3, [r3, #1]
 801a532:	2b01      	cmp	r3, #1
 801a534:	d120      	bne.n	801a578 <USB_EPStartXfer+0xa04>
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	2184      	movs	r1, #132	@ 0x84
 801a53a:	187a      	adds	r2, r7, r1
 801a53c:	6013      	str	r3, [r2, #0]
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	2250      	movs	r2, #80	@ 0x50
 801a542:	5a9b      	ldrh	r3, [r3, r2]
 801a544:	b29b      	uxth	r3, r3
 801a546:	001a      	movs	r2, r3
 801a548:	187b      	adds	r3, r7, r1
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	189b      	adds	r3, r3, r2
 801a54e:	187a      	adds	r2, r7, r1
 801a550:	6013      	str	r3, [r2, #0]
 801a552:	683b      	ldr	r3, [r7, #0]
 801a554:	781b      	ldrb	r3, [r3, #0]
 801a556:	00da      	lsls	r2, r3, #3
 801a558:	187b      	adds	r3, r7, r1
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	18d3      	adds	r3, r2, r3
 801a55e:	4a30      	ldr	r2, [pc, #192]	@ (801a620 <USB_EPStartXfer+0xaac>)
 801a560:	4694      	mov	ip, r2
 801a562:	4463      	add	r3, ip
 801a564:	2180      	movs	r1, #128	@ 0x80
 801a566:	187a      	adds	r2, r7, r1
 801a568:	6013      	str	r3, [r2, #0]
 801a56a:	1d7b      	adds	r3, r7, #5
 801a56c:	33ff      	adds	r3, #255	@ 0xff
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	b29a      	uxth	r2, r3
 801a572:	187b      	adds	r3, r7, r1
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a578:	2076      	movs	r0, #118	@ 0x76
 801a57a:	183b      	adds	r3, r7, r0
 801a57c:	683a      	ldr	r2, [r7, #0]
 801a57e:	8912      	ldrh	r2, [r2, #8]
 801a580:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	6959      	ldr	r1, [r3, #20]
 801a586:	1d7b      	adds	r3, r7, #5
 801a588:	33ff      	adds	r3, #255	@ 0xff
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	b29c      	uxth	r4, r3
 801a58e:	183b      	adds	r3, r7, r0
 801a590:	881a      	ldrh	r2, [r3, #0]
 801a592:	6878      	ldr	r0, [r7, #4]
 801a594:	0023      	movs	r3, r4
 801a596:	f000 fd5f 	bl	801b058 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a59a:	687a      	ldr	r2, [r7, #4]
 801a59c:	683b      	ldr	r3, [r7, #0]
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	009b      	lsls	r3, r3, #2
 801a5a2:	18d3      	adds	r3, r2, r3
 801a5a4:	881b      	ldrh	r3, [r3, #0]
 801a5a6:	b29a      	uxth	r2, r3
 801a5a8:	200a      	movs	r0, #10
 801a5aa:	183b      	adds	r3, r7, r0
 801a5ac:	491d      	ldr	r1, [pc, #116]	@ (801a624 <USB_EPStartXfer+0xab0>)
 801a5ae:	400a      	ands	r2, r1
 801a5b0:	801a      	strh	r2, [r3, #0]
 801a5b2:	183b      	adds	r3, r7, r0
 801a5b4:	183a      	adds	r2, r7, r0
 801a5b6:	8812      	ldrh	r2, [r2, #0]
 801a5b8:	2110      	movs	r1, #16
 801a5ba:	404a      	eors	r2, r1
 801a5bc:	801a      	strh	r2, [r3, #0]
 801a5be:	183b      	adds	r3, r7, r0
 801a5c0:	183a      	adds	r2, r7, r0
 801a5c2:	8812      	ldrh	r2, [r2, #0]
 801a5c4:	2120      	movs	r1, #32
 801a5c6:	404a      	eors	r2, r1
 801a5c8:	801a      	strh	r2, [r3, #0]
 801a5ca:	687a      	ldr	r2, [r7, #4]
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	781b      	ldrb	r3, [r3, #0]
 801a5d0:	009b      	lsls	r3, r3, #2
 801a5d2:	18d3      	adds	r3, r2, r3
 801a5d4:	183a      	adds	r2, r7, r0
 801a5d6:	8812      	ldrh	r2, [r2, #0]
 801a5d8:	4913      	ldr	r1, [pc, #76]	@ (801a628 <USB_EPStartXfer+0xab4>)
 801a5da:	430a      	orrs	r2, r1
 801a5dc:	b292      	uxth	r2, r2
 801a5de:	801a      	strh	r2, [r3, #0]
 801a5e0:	f000 fbf4 	bl	801adcc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	7b1b      	ldrb	r3, [r3, #12]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d000      	beq.n	801a5ee <USB_EPStartXfer+0xa7a>
 801a5ec:	e0a9      	b.n	801a742 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	699a      	ldr	r2, [r3, #24]
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	691b      	ldr	r3, [r3, #16]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d918      	bls.n	801a62c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	691b      	ldr	r3, [r3, #16]
 801a5fe:	1d7a      	adds	r2, r7, #5
 801a600:	32ff      	adds	r2, #255	@ 0xff
 801a602:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a604:	683b      	ldr	r3, [r7, #0]
 801a606:	699a      	ldr	r2, [r3, #24]
 801a608:	1d7b      	adds	r3, r7, #5
 801a60a:	33ff      	adds	r3, #255	@ 0xff
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	1ad2      	subs	r2, r2, r3
 801a610:	683b      	ldr	r3, [r7, #0]
 801a612:	619a      	str	r2, [r3, #24]
 801a614:	e012      	b.n	801a63c <USB_EPStartXfer+0xac8>
 801a616:	46c0      	nop			@ (mov r8, r8)
 801a618:	00000406 	.word	0x00000406
 801a61c:	ffff8000 	.word	0xffff8000
 801a620:	00000402 	.word	0x00000402
 801a624:	ffff8fbf 	.word	0xffff8fbf
 801a628:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	699b      	ldr	r3, [r3, #24]
 801a630:	1d7a      	adds	r2, r7, #5
 801a632:	32ff      	adds	r2, #255	@ 0xff
 801a634:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	2200      	movs	r2, #0
 801a63a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2190      	movs	r1, #144	@ 0x90
 801a640:	187a      	adds	r2, r7, r1
 801a642:	6013      	str	r3, [r2, #0]
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	2250      	movs	r2, #80	@ 0x50
 801a648:	5a9b      	ldrh	r3, [r3, r2]
 801a64a:	b29b      	uxth	r3, r3
 801a64c:	001a      	movs	r2, r3
 801a64e:	187b      	adds	r3, r7, r1
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	189b      	adds	r3, r3, r2
 801a654:	187a      	adds	r2, r7, r1
 801a656:	6013      	str	r3, [r2, #0]
 801a658:	683b      	ldr	r3, [r7, #0]
 801a65a:	781b      	ldrb	r3, [r3, #0]
 801a65c:	00da      	lsls	r2, r3, #3
 801a65e:	187b      	adds	r3, r7, r1
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	18d3      	adds	r3, r2, r3
 801a664:	4acf      	ldr	r2, [pc, #828]	@ (801a9a4 <USB_EPStartXfer+0xe30>)
 801a666:	4694      	mov	ip, r2
 801a668:	4463      	add	r3, ip
 801a66a:	218c      	movs	r1, #140	@ 0x8c
 801a66c:	187a      	adds	r2, r7, r1
 801a66e:	6013      	str	r3, [r2, #0]
 801a670:	187b      	adds	r3, r7, r1
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	881b      	ldrh	r3, [r3, #0]
 801a676:	b29b      	uxth	r3, r3
 801a678:	059b      	lsls	r3, r3, #22
 801a67a:	0d9b      	lsrs	r3, r3, #22
 801a67c:	b29a      	uxth	r2, r3
 801a67e:	187b      	adds	r3, r7, r1
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	801a      	strh	r2, [r3, #0]
 801a684:	1d7b      	adds	r3, r7, #5
 801a686:	33ff      	adds	r3, #255	@ 0xff
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	2b3e      	cmp	r3, #62	@ 0x3e
 801a68c:	d925      	bls.n	801a6da <USB_EPStartXfer+0xb66>
 801a68e:	1d7b      	adds	r3, r7, #5
 801a690:	33ff      	adds	r3, #255	@ 0xff
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	095b      	lsrs	r3, r3, #5
 801a696:	21e8      	movs	r1, #232	@ 0xe8
 801a698:	187a      	adds	r2, r7, r1
 801a69a:	6013      	str	r3, [r2, #0]
 801a69c:	1d7b      	adds	r3, r7, #5
 801a69e:	33ff      	adds	r3, #255	@ 0xff
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	221f      	movs	r2, #31
 801a6a4:	4013      	ands	r3, r2
 801a6a6:	d104      	bne.n	801a6b2 <USB_EPStartXfer+0xb3e>
 801a6a8:	187b      	adds	r3, r7, r1
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	3b01      	subs	r3, #1
 801a6ae:	187a      	adds	r2, r7, r1
 801a6b0:	6013      	str	r3, [r2, #0]
 801a6b2:	218c      	movs	r1, #140	@ 0x8c
 801a6b4:	187b      	adds	r3, r7, r1
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	881b      	ldrh	r3, [r3, #0]
 801a6ba:	b29a      	uxth	r2, r3
 801a6bc:	23e8      	movs	r3, #232	@ 0xe8
 801a6be:	18fb      	adds	r3, r7, r3
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	b29b      	uxth	r3, r3
 801a6c4:	029b      	lsls	r3, r3, #10
 801a6c6:	b29b      	uxth	r3, r3
 801a6c8:	4313      	orrs	r3, r2
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	4ab6      	ldr	r2, [pc, #728]	@ (801a9a8 <USB_EPStartXfer+0xe34>)
 801a6ce:	4313      	orrs	r3, r2
 801a6d0:	b29a      	uxth	r2, r3
 801a6d2:	187b      	adds	r3, r7, r1
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	801a      	strh	r2, [r3, #0]
 801a6d8:	e353      	b.n	801ad82 <USB_EPStartXfer+0x120e>
 801a6da:	1d7b      	adds	r3, r7, #5
 801a6dc:	33ff      	adds	r3, #255	@ 0xff
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d10b      	bne.n	801a6fc <USB_EPStartXfer+0xb88>
 801a6e4:	218c      	movs	r1, #140	@ 0x8c
 801a6e6:	187b      	adds	r3, r7, r1
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	881b      	ldrh	r3, [r3, #0]
 801a6ec:	b29b      	uxth	r3, r3
 801a6ee:	4aae      	ldr	r2, [pc, #696]	@ (801a9a8 <USB_EPStartXfer+0xe34>)
 801a6f0:	4313      	orrs	r3, r2
 801a6f2:	b29a      	uxth	r2, r3
 801a6f4:	187b      	adds	r3, r7, r1
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	801a      	strh	r2, [r3, #0]
 801a6fa:	e342      	b.n	801ad82 <USB_EPStartXfer+0x120e>
 801a6fc:	1d7b      	adds	r3, r7, #5
 801a6fe:	33ff      	adds	r3, #255	@ 0xff
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	085b      	lsrs	r3, r3, #1
 801a704:	21e8      	movs	r1, #232	@ 0xe8
 801a706:	187a      	adds	r2, r7, r1
 801a708:	6013      	str	r3, [r2, #0]
 801a70a:	1d7b      	adds	r3, r7, #5
 801a70c:	33ff      	adds	r3, #255	@ 0xff
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	2201      	movs	r2, #1
 801a712:	4013      	ands	r3, r2
 801a714:	d004      	beq.n	801a720 <USB_EPStartXfer+0xbac>
 801a716:	187b      	adds	r3, r7, r1
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	3301      	adds	r3, #1
 801a71c:	187a      	adds	r2, r7, r1
 801a71e:	6013      	str	r3, [r2, #0]
 801a720:	218c      	movs	r1, #140	@ 0x8c
 801a722:	187b      	adds	r3, r7, r1
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	881b      	ldrh	r3, [r3, #0]
 801a728:	b29a      	uxth	r2, r3
 801a72a:	23e8      	movs	r3, #232	@ 0xe8
 801a72c:	18fb      	adds	r3, r7, r3
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	b29b      	uxth	r3, r3
 801a732:	029b      	lsls	r3, r3, #10
 801a734:	b29b      	uxth	r3, r3
 801a736:	4313      	orrs	r3, r2
 801a738:	b29a      	uxth	r2, r3
 801a73a:	187b      	adds	r3, r7, r1
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	801a      	strh	r2, [r3, #0]
 801a740:	e31f      	b.n	801ad82 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	78db      	ldrb	r3, [r3, #3]
 801a746:	2b02      	cmp	r3, #2
 801a748:	d000      	beq.n	801a74c <USB_EPStartXfer+0xbd8>
 801a74a:	e191      	b.n	801aa70 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	785b      	ldrb	r3, [r3, #1]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d000      	beq.n	801a756 <USB_EPStartXfer+0xbe2>
 801a754:	e07c      	b.n	801a850 <USB_EPStartXfer+0xcdc>
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	21ac      	movs	r1, #172	@ 0xac
 801a75a:	187a      	adds	r2, r7, r1
 801a75c:	6013      	str	r3, [r2, #0]
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	2250      	movs	r2, #80	@ 0x50
 801a762:	5a9b      	ldrh	r3, [r3, r2]
 801a764:	b29b      	uxth	r3, r3
 801a766:	001a      	movs	r2, r3
 801a768:	187b      	adds	r3, r7, r1
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	189b      	adds	r3, r3, r2
 801a76e:	187a      	adds	r2, r7, r1
 801a770:	6013      	str	r3, [r2, #0]
 801a772:	683b      	ldr	r3, [r7, #0]
 801a774:	781b      	ldrb	r3, [r3, #0]
 801a776:	00da      	lsls	r2, r3, #3
 801a778:	187b      	adds	r3, r7, r1
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	18d3      	adds	r3, r2, r3
 801a77e:	4a8b      	ldr	r2, [pc, #556]	@ (801a9ac <USB_EPStartXfer+0xe38>)
 801a780:	4694      	mov	ip, r2
 801a782:	4463      	add	r3, ip
 801a784:	21a8      	movs	r1, #168	@ 0xa8
 801a786:	187a      	adds	r2, r7, r1
 801a788:	6013      	str	r3, [r2, #0]
 801a78a:	187b      	adds	r3, r7, r1
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	881b      	ldrh	r3, [r3, #0]
 801a790:	b29b      	uxth	r3, r3
 801a792:	059b      	lsls	r3, r3, #22
 801a794:	0d9b      	lsrs	r3, r3, #22
 801a796:	b29a      	uxth	r2, r3
 801a798:	187b      	adds	r3, r7, r1
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	801a      	strh	r2, [r3, #0]
 801a79e:	683b      	ldr	r3, [r7, #0]
 801a7a0:	691b      	ldr	r3, [r3, #16]
 801a7a2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a7a4:	d923      	bls.n	801a7ee <USB_EPStartXfer+0xc7a>
 801a7a6:	683b      	ldr	r3, [r7, #0]
 801a7a8:	691b      	ldr	r3, [r3, #16]
 801a7aa:	095b      	lsrs	r3, r3, #5
 801a7ac:	21e4      	movs	r1, #228	@ 0xe4
 801a7ae:	187a      	adds	r2, r7, r1
 801a7b0:	6013      	str	r3, [r2, #0]
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	691b      	ldr	r3, [r3, #16]
 801a7b6:	221f      	movs	r2, #31
 801a7b8:	4013      	ands	r3, r2
 801a7ba:	d104      	bne.n	801a7c6 <USB_EPStartXfer+0xc52>
 801a7bc:	187b      	adds	r3, r7, r1
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	3b01      	subs	r3, #1
 801a7c2:	187a      	adds	r2, r7, r1
 801a7c4:	6013      	str	r3, [r2, #0]
 801a7c6:	21a8      	movs	r1, #168	@ 0xa8
 801a7c8:	187b      	adds	r3, r7, r1
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	881b      	ldrh	r3, [r3, #0]
 801a7ce:	b29a      	uxth	r2, r3
 801a7d0:	23e4      	movs	r3, #228	@ 0xe4
 801a7d2:	18fb      	adds	r3, r7, r3
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	b29b      	uxth	r3, r3
 801a7d8:	029b      	lsls	r3, r3, #10
 801a7da:	b29b      	uxth	r3, r3
 801a7dc:	4313      	orrs	r3, r2
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	4a71      	ldr	r2, [pc, #452]	@ (801a9a8 <USB_EPStartXfer+0xe34>)
 801a7e2:	4313      	orrs	r3, r2
 801a7e4:	b29a      	uxth	r2, r3
 801a7e6:	187b      	adds	r3, r7, r1
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	801a      	strh	r2, [r3, #0]
 801a7ec:	e054      	b.n	801a898 <USB_EPStartXfer+0xd24>
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	691b      	ldr	r3, [r3, #16]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d10b      	bne.n	801a80e <USB_EPStartXfer+0xc9a>
 801a7f6:	21a8      	movs	r1, #168	@ 0xa8
 801a7f8:	187b      	adds	r3, r7, r1
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	881b      	ldrh	r3, [r3, #0]
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	4a69      	ldr	r2, [pc, #420]	@ (801a9a8 <USB_EPStartXfer+0xe34>)
 801a802:	4313      	orrs	r3, r2
 801a804:	b29a      	uxth	r2, r3
 801a806:	187b      	adds	r3, r7, r1
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	801a      	strh	r2, [r3, #0]
 801a80c:	e044      	b.n	801a898 <USB_EPStartXfer+0xd24>
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	691b      	ldr	r3, [r3, #16]
 801a812:	085b      	lsrs	r3, r3, #1
 801a814:	21e4      	movs	r1, #228	@ 0xe4
 801a816:	187a      	adds	r2, r7, r1
 801a818:	6013      	str	r3, [r2, #0]
 801a81a:	683b      	ldr	r3, [r7, #0]
 801a81c:	691b      	ldr	r3, [r3, #16]
 801a81e:	2201      	movs	r2, #1
 801a820:	4013      	ands	r3, r2
 801a822:	d004      	beq.n	801a82e <USB_EPStartXfer+0xcba>
 801a824:	187b      	adds	r3, r7, r1
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	3301      	adds	r3, #1
 801a82a:	187a      	adds	r2, r7, r1
 801a82c:	6013      	str	r3, [r2, #0]
 801a82e:	21a8      	movs	r1, #168	@ 0xa8
 801a830:	187b      	adds	r3, r7, r1
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	881b      	ldrh	r3, [r3, #0]
 801a836:	b29a      	uxth	r2, r3
 801a838:	23e4      	movs	r3, #228	@ 0xe4
 801a83a:	18fb      	adds	r3, r7, r3
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	b29b      	uxth	r3, r3
 801a840:	029b      	lsls	r3, r3, #10
 801a842:	b29b      	uxth	r3, r3
 801a844:	4313      	orrs	r3, r2
 801a846:	b29a      	uxth	r2, r3
 801a848:	187b      	adds	r3, r7, r1
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	801a      	strh	r2, [r3, #0]
 801a84e:	e023      	b.n	801a898 <USB_EPStartXfer+0xd24>
 801a850:	683b      	ldr	r3, [r7, #0]
 801a852:	785b      	ldrb	r3, [r3, #1]
 801a854:	2b01      	cmp	r3, #1
 801a856:	d11f      	bne.n	801a898 <USB_EPStartXfer+0xd24>
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	21b4      	movs	r1, #180	@ 0xb4
 801a85c:	187a      	adds	r2, r7, r1
 801a85e:	6013      	str	r3, [r2, #0]
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	2250      	movs	r2, #80	@ 0x50
 801a864:	5a9b      	ldrh	r3, [r3, r2]
 801a866:	b29b      	uxth	r3, r3
 801a868:	001a      	movs	r2, r3
 801a86a:	187b      	adds	r3, r7, r1
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	189b      	adds	r3, r3, r2
 801a870:	187a      	adds	r2, r7, r1
 801a872:	6013      	str	r3, [r2, #0]
 801a874:	683b      	ldr	r3, [r7, #0]
 801a876:	781b      	ldrb	r3, [r3, #0]
 801a878:	00da      	lsls	r2, r3, #3
 801a87a:	187b      	adds	r3, r7, r1
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	18d3      	adds	r3, r2, r3
 801a880:	4a4a      	ldr	r2, [pc, #296]	@ (801a9ac <USB_EPStartXfer+0xe38>)
 801a882:	4694      	mov	ip, r2
 801a884:	4463      	add	r3, ip
 801a886:	21b0      	movs	r1, #176	@ 0xb0
 801a888:	187a      	adds	r2, r7, r1
 801a88a:	6013      	str	r3, [r2, #0]
 801a88c:	683b      	ldr	r3, [r7, #0]
 801a88e:	691b      	ldr	r3, [r3, #16]
 801a890:	b29a      	uxth	r2, r3
 801a892:	187b      	adds	r3, r7, r1
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	801a      	strh	r2, [r3, #0]
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	22a4      	movs	r2, #164	@ 0xa4
 801a89c:	18ba      	adds	r2, r7, r2
 801a89e:	6013      	str	r3, [r2, #0]
 801a8a0:	683b      	ldr	r3, [r7, #0]
 801a8a2:	785b      	ldrb	r3, [r3, #1]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d000      	beq.n	801a8aa <USB_EPStartXfer+0xd36>
 801a8a8:	e082      	b.n	801a9b0 <USB_EPStartXfer+0xe3c>
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	219c      	movs	r1, #156	@ 0x9c
 801a8ae:	187a      	adds	r2, r7, r1
 801a8b0:	6013      	str	r3, [r2, #0]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2250      	movs	r2, #80	@ 0x50
 801a8b6:	5a9b      	ldrh	r3, [r3, r2]
 801a8b8:	b29b      	uxth	r3, r3
 801a8ba:	001a      	movs	r2, r3
 801a8bc:	187b      	adds	r3, r7, r1
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	189b      	adds	r3, r3, r2
 801a8c2:	187a      	adds	r2, r7, r1
 801a8c4:	6013      	str	r3, [r2, #0]
 801a8c6:	683b      	ldr	r3, [r7, #0]
 801a8c8:	781b      	ldrb	r3, [r3, #0]
 801a8ca:	00da      	lsls	r2, r3, #3
 801a8cc:	187b      	adds	r3, r7, r1
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	18d3      	adds	r3, r2, r3
 801a8d2:	4a34      	ldr	r2, [pc, #208]	@ (801a9a4 <USB_EPStartXfer+0xe30>)
 801a8d4:	4694      	mov	ip, r2
 801a8d6:	4463      	add	r3, ip
 801a8d8:	2198      	movs	r1, #152	@ 0x98
 801a8da:	187a      	adds	r2, r7, r1
 801a8dc:	6013      	str	r3, [r2, #0]
 801a8de:	187b      	adds	r3, r7, r1
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	881b      	ldrh	r3, [r3, #0]
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	059b      	lsls	r3, r3, #22
 801a8e8:	0d9b      	lsrs	r3, r3, #22
 801a8ea:	b29a      	uxth	r2, r3
 801a8ec:	187b      	adds	r3, r7, r1
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	801a      	strh	r2, [r3, #0]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	691b      	ldr	r3, [r3, #16]
 801a8f6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a8f8:	d923      	bls.n	801a942 <USB_EPStartXfer+0xdce>
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	691b      	ldr	r3, [r3, #16]
 801a8fe:	095b      	lsrs	r3, r3, #5
 801a900:	21e0      	movs	r1, #224	@ 0xe0
 801a902:	187a      	adds	r2, r7, r1
 801a904:	6013      	str	r3, [r2, #0]
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	691b      	ldr	r3, [r3, #16]
 801a90a:	221f      	movs	r2, #31
 801a90c:	4013      	ands	r3, r2
 801a90e:	d104      	bne.n	801a91a <USB_EPStartXfer+0xda6>
 801a910:	187b      	adds	r3, r7, r1
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	3b01      	subs	r3, #1
 801a916:	187a      	adds	r2, r7, r1
 801a918:	6013      	str	r3, [r2, #0]
 801a91a:	2198      	movs	r1, #152	@ 0x98
 801a91c:	187b      	adds	r3, r7, r1
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	881b      	ldrh	r3, [r3, #0]
 801a922:	b29a      	uxth	r2, r3
 801a924:	23e0      	movs	r3, #224	@ 0xe0
 801a926:	18fb      	adds	r3, r7, r3
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	029b      	lsls	r3, r3, #10
 801a92e:	b29b      	uxth	r3, r3
 801a930:	4313      	orrs	r3, r2
 801a932:	b29b      	uxth	r3, r3
 801a934:	4a1c      	ldr	r2, [pc, #112]	@ (801a9a8 <USB_EPStartXfer+0xe34>)
 801a936:	4313      	orrs	r3, r2
 801a938:	b29a      	uxth	r2, r3
 801a93a:	187b      	adds	r3, r7, r1
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	801a      	strh	r2, [r3, #0]
 801a940:	e057      	b.n	801a9f2 <USB_EPStartXfer+0xe7e>
 801a942:	683b      	ldr	r3, [r7, #0]
 801a944:	691b      	ldr	r3, [r3, #16]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d10b      	bne.n	801a962 <USB_EPStartXfer+0xdee>
 801a94a:	2198      	movs	r1, #152	@ 0x98
 801a94c:	187b      	adds	r3, r7, r1
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	881b      	ldrh	r3, [r3, #0]
 801a952:	b29b      	uxth	r3, r3
 801a954:	4a14      	ldr	r2, [pc, #80]	@ (801a9a8 <USB_EPStartXfer+0xe34>)
 801a956:	4313      	orrs	r3, r2
 801a958:	b29a      	uxth	r2, r3
 801a95a:	187b      	adds	r3, r7, r1
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	801a      	strh	r2, [r3, #0]
 801a960:	e047      	b.n	801a9f2 <USB_EPStartXfer+0xe7e>
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	691b      	ldr	r3, [r3, #16]
 801a966:	085b      	lsrs	r3, r3, #1
 801a968:	21e0      	movs	r1, #224	@ 0xe0
 801a96a:	187a      	adds	r2, r7, r1
 801a96c:	6013      	str	r3, [r2, #0]
 801a96e:	683b      	ldr	r3, [r7, #0]
 801a970:	691b      	ldr	r3, [r3, #16]
 801a972:	2201      	movs	r2, #1
 801a974:	4013      	ands	r3, r2
 801a976:	d004      	beq.n	801a982 <USB_EPStartXfer+0xe0e>
 801a978:	187b      	adds	r3, r7, r1
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	3301      	adds	r3, #1
 801a97e:	187a      	adds	r2, r7, r1
 801a980:	6013      	str	r3, [r2, #0]
 801a982:	2198      	movs	r1, #152	@ 0x98
 801a984:	187b      	adds	r3, r7, r1
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	881b      	ldrh	r3, [r3, #0]
 801a98a:	b29a      	uxth	r2, r3
 801a98c:	23e0      	movs	r3, #224	@ 0xe0
 801a98e:	18fb      	adds	r3, r7, r3
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	b29b      	uxth	r3, r3
 801a994:	029b      	lsls	r3, r3, #10
 801a996:	b29b      	uxth	r3, r3
 801a998:	4313      	orrs	r3, r2
 801a99a:	b29a      	uxth	r2, r3
 801a99c:	187b      	adds	r3, r7, r1
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	801a      	strh	r2, [r3, #0]
 801a9a2:	e026      	b.n	801a9f2 <USB_EPStartXfer+0xe7e>
 801a9a4:	00000406 	.word	0x00000406
 801a9a8:	ffff8000 	.word	0xffff8000
 801a9ac:	00000402 	.word	0x00000402
 801a9b0:	683b      	ldr	r3, [r7, #0]
 801a9b2:	785b      	ldrb	r3, [r3, #1]
 801a9b4:	2b01      	cmp	r3, #1
 801a9b6:	d11c      	bne.n	801a9f2 <USB_EPStartXfer+0xe7e>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2250      	movs	r2, #80	@ 0x50
 801a9bc:	5a9b      	ldrh	r3, [r3, r2]
 801a9be:	b29b      	uxth	r3, r3
 801a9c0:	001a      	movs	r2, r3
 801a9c2:	21a4      	movs	r1, #164	@ 0xa4
 801a9c4:	187b      	adds	r3, r7, r1
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	189b      	adds	r3, r3, r2
 801a9ca:	187a      	adds	r2, r7, r1
 801a9cc:	6013      	str	r3, [r2, #0]
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	781b      	ldrb	r3, [r3, #0]
 801a9d2:	00da      	lsls	r2, r3, #3
 801a9d4:	187b      	adds	r3, r7, r1
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	18d3      	adds	r3, r2, r3
 801a9da:	4ad2      	ldr	r2, [pc, #840]	@ (801ad24 <USB_EPStartXfer+0x11b0>)
 801a9dc:	4694      	mov	ip, r2
 801a9de:	4463      	add	r3, ip
 801a9e0:	21a0      	movs	r1, #160	@ 0xa0
 801a9e2:	187a      	adds	r2, r7, r1
 801a9e4:	6013      	str	r3, [r2, #0]
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	691b      	ldr	r3, [r3, #16]
 801a9ea:	b29a      	uxth	r2, r3
 801a9ec:	187b      	adds	r3, r7, r1
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a9f2:	683b      	ldr	r3, [r7, #0]
 801a9f4:	69db      	ldr	r3, [r3, #28]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d100      	bne.n	801a9fc <USB_EPStartXfer+0xe88>
 801a9fa:	e1c2      	b.n	801ad82 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a9fc:	687a      	ldr	r2, [r7, #4]
 801a9fe:	683b      	ldr	r3, [r7, #0]
 801aa00:	781b      	ldrb	r3, [r3, #0]
 801aa02:	009b      	lsls	r3, r3, #2
 801aa04:	18d2      	adds	r2, r2, r3
 801aa06:	2196      	movs	r1, #150	@ 0x96
 801aa08:	187b      	adds	r3, r7, r1
 801aa0a:	8812      	ldrh	r2, [r2, #0]
 801aa0c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801aa0e:	187b      	adds	r3, r7, r1
 801aa10:	881a      	ldrh	r2, [r3, #0]
 801aa12:	2380      	movs	r3, #128	@ 0x80
 801aa14:	01db      	lsls	r3, r3, #7
 801aa16:	4013      	ands	r3, r2
 801aa18:	d004      	beq.n	801aa24 <USB_EPStartXfer+0xeb0>
 801aa1a:	187b      	adds	r3, r7, r1
 801aa1c:	881b      	ldrh	r3, [r3, #0]
 801aa1e:	2240      	movs	r2, #64	@ 0x40
 801aa20:	4013      	ands	r3, r2
 801aa22:	d10d      	bne.n	801aa40 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801aa24:	2196      	movs	r1, #150	@ 0x96
 801aa26:	187b      	adds	r3, r7, r1
 801aa28:	881a      	ldrh	r2, [r3, #0]
 801aa2a:	2380      	movs	r3, #128	@ 0x80
 801aa2c:	01db      	lsls	r3, r3, #7
 801aa2e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801aa30:	d000      	beq.n	801aa34 <USB_EPStartXfer+0xec0>
 801aa32:	e1a6      	b.n	801ad82 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801aa34:	187b      	adds	r3, r7, r1
 801aa36:	881b      	ldrh	r3, [r3, #0]
 801aa38:	2240      	movs	r2, #64	@ 0x40
 801aa3a:	4013      	ands	r3, r2
 801aa3c:	d000      	beq.n	801aa40 <USB_EPStartXfer+0xecc>
 801aa3e:	e1a0      	b.n	801ad82 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801aa40:	687a      	ldr	r2, [r7, #4]
 801aa42:	683b      	ldr	r3, [r7, #0]
 801aa44:	781b      	ldrb	r3, [r3, #0]
 801aa46:	009b      	lsls	r3, r3, #2
 801aa48:	18d3      	adds	r3, r2, r3
 801aa4a:	881b      	ldrh	r3, [r3, #0]
 801aa4c:	b29a      	uxth	r2, r3
 801aa4e:	2094      	movs	r0, #148	@ 0x94
 801aa50:	183b      	adds	r3, r7, r0
 801aa52:	49b5      	ldr	r1, [pc, #724]	@ (801ad28 <USB_EPStartXfer+0x11b4>)
 801aa54:	400a      	ands	r2, r1
 801aa56:	801a      	strh	r2, [r3, #0]
 801aa58:	687a      	ldr	r2, [r7, #4]
 801aa5a:	683b      	ldr	r3, [r7, #0]
 801aa5c:	781b      	ldrb	r3, [r3, #0]
 801aa5e:	009b      	lsls	r3, r3, #2
 801aa60:	18d3      	adds	r3, r2, r3
 801aa62:	183a      	adds	r2, r7, r0
 801aa64:	8812      	ldrh	r2, [r2, #0]
 801aa66:	49b1      	ldr	r1, [pc, #708]	@ (801ad2c <USB_EPStartXfer+0x11b8>)
 801aa68:	430a      	orrs	r2, r1
 801aa6a:	b292      	uxth	r2, r2
 801aa6c:	801a      	strh	r2, [r3, #0]
 801aa6e:	e188      	b.n	801ad82 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	78db      	ldrb	r3, [r3, #3]
 801aa74:	2b01      	cmp	r3, #1
 801aa76:	d000      	beq.n	801aa7a <USB_EPStartXfer+0xf06>
 801aa78:	e181      	b.n	801ad7e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801aa7a:	683b      	ldr	r3, [r7, #0]
 801aa7c:	699a      	ldr	r2, [r3, #24]
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	691b      	ldr	r3, [r3, #16]
 801aa82:	429a      	cmp	r2, r3
 801aa84:	d90d      	bls.n	801aaa2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	691b      	ldr	r3, [r3, #16]
 801aa8a:	1d7a      	adds	r2, r7, #5
 801aa8c:	32ff      	adds	r2, #255	@ 0xff
 801aa8e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	699a      	ldr	r2, [r3, #24]
 801aa94:	1d7b      	adds	r3, r7, #5
 801aa96:	33ff      	adds	r3, #255	@ 0xff
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	1ad2      	subs	r2, r2, r3
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	619a      	str	r2, [r3, #24]
 801aaa0:	e007      	b.n	801aab2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	699b      	ldr	r3, [r3, #24]
 801aaa6:	1d7a      	adds	r2, r7, #5
 801aaa8:	32ff      	adds	r2, #255	@ 0xff
 801aaaa:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	2200      	movs	r2, #0
 801aab0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801aab2:	683b      	ldr	r3, [r7, #0]
 801aab4:	785b      	ldrb	r3, [r3, #1]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d000      	beq.n	801aabc <USB_EPStartXfer+0xf48>
 801aaba:	e082      	b.n	801abc2 <USB_EPStartXfer+0x104e>
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	21cc      	movs	r1, #204	@ 0xcc
 801aac0:	187a      	adds	r2, r7, r1
 801aac2:	6013      	str	r3, [r2, #0]
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	2250      	movs	r2, #80	@ 0x50
 801aac8:	5a9b      	ldrh	r3, [r3, r2]
 801aaca:	b29b      	uxth	r3, r3
 801aacc:	001a      	movs	r2, r3
 801aace:	187b      	adds	r3, r7, r1
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	189b      	adds	r3, r3, r2
 801aad4:	187a      	adds	r2, r7, r1
 801aad6:	6013      	str	r3, [r2, #0]
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	781b      	ldrb	r3, [r3, #0]
 801aadc:	00da      	lsls	r2, r3, #3
 801aade:	187b      	adds	r3, r7, r1
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	18d3      	adds	r3, r2, r3
 801aae4:	4a92      	ldr	r2, [pc, #584]	@ (801ad30 <USB_EPStartXfer+0x11bc>)
 801aae6:	4694      	mov	ip, r2
 801aae8:	4463      	add	r3, ip
 801aaea:	21c8      	movs	r1, #200	@ 0xc8
 801aaec:	187a      	adds	r2, r7, r1
 801aaee:	6013      	str	r3, [r2, #0]
 801aaf0:	187b      	adds	r3, r7, r1
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	881b      	ldrh	r3, [r3, #0]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	059b      	lsls	r3, r3, #22
 801aafa:	0d9b      	lsrs	r3, r3, #22
 801aafc:	b29a      	uxth	r2, r3
 801aafe:	187b      	adds	r3, r7, r1
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	801a      	strh	r2, [r3, #0]
 801ab04:	1d7b      	adds	r3, r7, #5
 801ab06:	33ff      	adds	r3, #255	@ 0xff
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab0c:	d925      	bls.n	801ab5a <USB_EPStartXfer+0xfe6>
 801ab0e:	1d7b      	adds	r3, r7, #5
 801ab10:	33ff      	adds	r3, #255	@ 0xff
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	095b      	lsrs	r3, r3, #5
 801ab16:	21dc      	movs	r1, #220	@ 0xdc
 801ab18:	187a      	adds	r2, r7, r1
 801ab1a:	6013      	str	r3, [r2, #0]
 801ab1c:	1d7b      	adds	r3, r7, #5
 801ab1e:	33ff      	adds	r3, #255	@ 0xff
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	221f      	movs	r2, #31
 801ab24:	4013      	ands	r3, r2
 801ab26:	d104      	bne.n	801ab32 <USB_EPStartXfer+0xfbe>
 801ab28:	187b      	adds	r3, r7, r1
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	3b01      	subs	r3, #1
 801ab2e:	187a      	adds	r2, r7, r1
 801ab30:	6013      	str	r3, [r2, #0]
 801ab32:	21c8      	movs	r1, #200	@ 0xc8
 801ab34:	187b      	adds	r3, r7, r1
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	881b      	ldrh	r3, [r3, #0]
 801ab3a:	b29a      	uxth	r2, r3
 801ab3c:	23dc      	movs	r3, #220	@ 0xdc
 801ab3e:	18fb      	adds	r3, r7, r3
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	b29b      	uxth	r3, r3
 801ab44:	029b      	lsls	r3, r3, #10
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	4313      	orrs	r3, r2
 801ab4a:	b29b      	uxth	r3, r3
 801ab4c:	4a79      	ldr	r2, [pc, #484]	@ (801ad34 <USB_EPStartXfer+0x11c0>)
 801ab4e:	4313      	orrs	r3, r2
 801ab50:	b29a      	uxth	r2, r3
 801ab52:	187b      	adds	r3, r7, r1
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	801a      	strh	r2, [r3, #0]
 801ab58:	e058      	b.n	801ac0c <USB_EPStartXfer+0x1098>
 801ab5a:	1d7b      	adds	r3, r7, #5
 801ab5c:	33ff      	adds	r3, #255	@ 0xff
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d10b      	bne.n	801ab7c <USB_EPStartXfer+0x1008>
 801ab64:	21c8      	movs	r1, #200	@ 0xc8
 801ab66:	187b      	adds	r3, r7, r1
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	881b      	ldrh	r3, [r3, #0]
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	4a71      	ldr	r2, [pc, #452]	@ (801ad34 <USB_EPStartXfer+0x11c0>)
 801ab70:	4313      	orrs	r3, r2
 801ab72:	b29a      	uxth	r2, r3
 801ab74:	187b      	adds	r3, r7, r1
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	801a      	strh	r2, [r3, #0]
 801ab7a:	e047      	b.n	801ac0c <USB_EPStartXfer+0x1098>
 801ab7c:	1d7b      	adds	r3, r7, #5
 801ab7e:	33ff      	adds	r3, #255	@ 0xff
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	085b      	lsrs	r3, r3, #1
 801ab84:	21dc      	movs	r1, #220	@ 0xdc
 801ab86:	187a      	adds	r2, r7, r1
 801ab88:	6013      	str	r3, [r2, #0]
 801ab8a:	1d7b      	adds	r3, r7, #5
 801ab8c:	33ff      	adds	r3, #255	@ 0xff
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	2201      	movs	r2, #1
 801ab92:	4013      	ands	r3, r2
 801ab94:	d004      	beq.n	801aba0 <USB_EPStartXfer+0x102c>
 801ab96:	187b      	adds	r3, r7, r1
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	187a      	adds	r2, r7, r1
 801ab9e:	6013      	str	r3, [r2, #0]
 801aba0:	21c8      	movs	r1, #200	@ 0xc8
 801aba2:	187b      	adds	r3, r7, r1
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	881b      	ldrh	r3, [r3, #0]
 801aba8:	b29a      	uxth	r2, r3
 801abaa:	23dc      	movs	r3, #220	@ 0xdc
 801abac:	18fb      	adds	r3, r7, r3
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	b29b      	uxth	r3, r3
 801abb2:	029b      	lsls	r3, r3, #10
 801abb4:	b29b      	uxth	r3, r3
 801abb6:	4313      	orrs	r3, r2
 801abb8:	b29a      	uxth	r2, r3
 801abba:	187b      	adds	r3, r7, r1
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	801a      	strh	r2, [r3, #0]
 801abc0:	e024      	b.n	801ac0c <USB_EPStartXfer+0x1098>
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	785b      	ldrb	r3, [r3, #1]
 801abc6:	2b01      	cmp	r3, #1
 801abc8:	d120      	bne.n	801ac0c <USB_EPStartXfer+0x1098>
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	21d4      	movs	r1, #212	@ 0xd4
 801abce:	187a      	adds	r2, r7, r1
 801abd0:	6013      	str	r3, [r2, #0]
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2250      	movs	r2, #80	@ 0x50
 801abd6:	5a9b      	ldrh	r3, [r3, r2]
 801abd8:	b29b      	uxth	r3, r3
 801abda:	001a      	movs	r2, r3
 801abdc:	187b      	adds	r3, r7, r1
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	189b      	adds	r3, r3, r2
 801abe2:	187a      	adds	r2, r7, r1
 801abe4:	6013      	str	r3, [r2, #0]
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	781b      	ldrb	r3, [r3, #0]
 801abea:	00da      	lsls	r2, r3, #3
 801abec:	187b      	adds	r3, r7, r1
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	18d3      	adds	r3, r2, r3
 801abf2:	4a4f      	ldr	r2, [pc, #316]	@ (801ad30 <USB_EPStartXfer+0x11bc>)
 801abf4:	4694      	mov	ip, r2
 801abf6:	4463      	add	r3, ip
 801abf8:	21d0      	movs	r1, #208	@ 0xd0
 801abfa:	187a      	adds	r2, r7, r1
 801abfc:	6013      	str	r3, [r2, #0]
 801abfe:	1d7b      	adds	r3, r7, #5
 801ac00:	33ff      	adds	r3, #255	@ 0xff
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	b29a      	uxth	r2, r3
 801ac06:	187b      	adds	r3, r7, r1
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	801a      	strh	r2, [r3, #0]
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	22c4      	movs	r2, #196	@ 0xc4
 801ac10:	18ba      	adds	r2, r7, r2
 801ac12:	6013      	str	r3, [r2, #0]
 801ac14:	683b      	ldr	r3, [r7, #0]
 801ac16:	785b      	ldrb	r3, [r3, #1]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d000      	beq.n	801ac1e <USB_EPStartXfer+0x10aa>
 801ac1c:	e08c      	b.n	801ad38 <USB_EPStartXfer+0x11c4>
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	21bc      	movs	r1, #188	@ 0xbc
 801ac22:	187a      	adds	r2, r7, r1
 801ac24:	6013      	str	r3, [r2, #0]
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	2250      	movs	r2, #80	@ 0x50
 801ac2a:	5a9b      	ldrh	r3, [r3, r2]
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	001a      	movs	r2, r3
 801ac30:	187b      	adds	r3, r7, r1
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	189b      	adds	r3, r3, r2
 801ac36:	187a      	adds	r2, r7, r1
 801ac38:	6013      	str	r3, [r2, #0]
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	781b      	ldrb	r3, [r3, #0]
 801ac3e:	00da      	lsls	r2, r3, #3
 801ac40:	187b      	adds	r3, r7, r1
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	18d3      	adds	r3, r2, r3
 801ac46:	4a37      	ldr	r2, [pc, #220]	@ (801ad24 <USB_EPStartXfer+0x11b0>)
 801ac48:	4694      	mov	ip, r2
 801ac4a:	4463      	add	r3, ip
 801ac4c:	21b8      	movs	r1, #184	@ 0xb8
 801ac4e:	187a      	adds	r2, r7, r1
 801ac50:	6013      	str	r3, [r2, #0]
 801ac52:	187b      	adds	r3, r7, r1
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	881b      	ldrh	r3, [r3, #0]
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	059b      	lsls	r3, r3, #22
 801ac5c:	0d9b      	lsrs	r3, r3, #22
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	187b      	adds	r3, r7, r1
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	801a      	strh	r2, [r3, #0]
 801ac66:	1d7b      	adds	r3, r7, #5
 801ac68:	33ff      	adds	r3, #255	@ 0xff
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac6e:	d925      	bls.n	801acbc <USB_EPStartXfer+0x1148>
 801ac70:	1d7b      	adds	r3, r7, #5
 801ac72:	33ff      	adds	r3, #255	@ 0xff
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	095b      	lsrs	r3, r3, #5
 801ac78:	21d8      	movs	r1, #216	@ 0xd8
 801ac7a:	187a      	adds	r2, r7, r1
 801ac7c:	6013      	str	r3, [r2, #0]
 801ac7e:	1d7b      	adds	r3, r7, #5
 801ac80:	33ff      	adds	r3, #255	@ 0xff
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	221f      	movs	r2, #31
 801ac86:	4013      	ands	r3, r2
 801ac88:	d104      	bne.n	801ac94 <USB_EPStartXfer+0x1120>
 801ac8a:	187b      	adds	r3, r7, r1
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	3b01      	subs	r3, #1
 801ac90:	187a      	adds	r2, r7, r1
 801ac92:	6013      	str	r3, [r2, #0]
 801ac94:	21b8      	movs	r1, #184	@ 0xb8
 801ac96:	187b      	adds	r3, r7, r1
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	881b      	ldrh	r3, [r3, #0]
 801ac9c:	b29a      	uxth	r2, r3
 801ac9e:	23d8      	movs	r3, #216	@ 0xd8
 801aca0:	18fb      	adds	r3, r7, r3
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	b29b      	uxth	r3, r3
 801aca6:	029b      	lsls	r3, r3, #10
 801aca8:	b29b      	uxth	r3, r3
 801acaa:	4313      	orrs	r3, r2
 801acac:	b29b      	uxth	r3, r3
 801acae:	4a21      	ldr	r2, [pc, #132]	@ (801ad34 <USB_EPStartXfer+0x11c0>)
 801acb0:	4313      	orrs	r3, r2
 801acb2:	b29a      	uxth	r2, r3
 801acb4:	187b      	adds	r3, r7, r1
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	801a      	strh	r2, [r3, #0]
 801acba:	e062      	b.n	801ad82 <USB_EPStartXfer+0x120e>
 801acbc:	1d7b      	adds	r3, r7, #5
 801acbe:	33ff      	adds	r3, #255	@ 0xff
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d10b      	bne.n	801acde <USB_EPStartXfer+0x116a>
 801acc6:	21b8      	movs	r1, #184	@ 0xb8
 801acc8:	187b      	adds	r3, r7, r1
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	881b      	ldrh	r3, [r3, #0]
 801acce:	b29b      	uxth	r3, r3
 801acd0:	4a18      	ldr	r2, [pc, #96]	@ (801ad34 <USB_EPStartXfer+0x11c0>)
 801acd2:	4313      	orrs	r3, r2
 801acd4:	b29a      	uxth	r2, r3
 801acd6:	187b      	adds	r3, r7, r1
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	801a      	strh	r2, [r3, #0]
 801acdc:	e051      	b.n	801ad82 <USB_EPStartXfer+0x120e>
 801acde:	1d7b      	adds	r3, r7, #5
 801ace0:	33ff      	adds	r3, #255	@ 0xff
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	085b      	lsrs	r3, r3, #1
 801ace6:	21d8      	movs	r1, #216	@ 0xd8
 801ace8:	187a      	adds	r2, r7, r1
 801acea:	6013      	str	r3, [r2, #0]
 801acec:	1d7b      	adds	r3, r7, #5
 801acee:	33ff      	adds	r3, #255	@ 0xff
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	2201      	movs	r2, #1
 801acf4:	4013      	ands	r3, r2
 801acf6:	d004      	beq.n	801ad02 <USB_EPStartXfer+0x118e>
 801acf8:	187b      	adds	r3, r7, r1
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	3301      	adds	r3, #1
 801acfe:	187a      	adds	r2, r7, r1
 801ad00:	6013      	str	r3, [r2, #0]
 801ad02:	21b8      	movs	r1, #184	@ 0xb8
 801ad04:	187b      	adds	r3, r7, r1
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	881b      	ldrh	r3, [r3, #0]
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	23d8      	movs	r3, #216	@ 0xd8
 801ad0e:	18fb      	adds	r3, r7, r3
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	029b      	lsls	r3, r3, #10
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	4313      	orrs	r3, r2
 801ad1a:	b29a      	uxth	r2, r3
 801ad1c:	187b      	adds	r3, r7, r1
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	801a      	strh	r2, [r3, #0]
 801ad22:	e02e      	b.n	801ad82 <USB_EPStartXfer+0x120e>
 801ad24:	00000406 	.word	0x00000406
 801ad28:	ffff8f8f 	.word	0xffff8f8f
 801ad2c:	ffff80c0 	.word	0xffff80c0
 801ad30:	00000402 	.word	0x00000402
 801ad34:	ffff8000 	.word	0xffff8000
 801ad38:	683b      	ldr	r3, [r7, #0]
 801ad3a:	785b      	ldrb	r3, [r3, #1]
 801ad3c:	2b01      	cmp	r3, #1
 801ad3e:	d120      	bne.n	801ad82 <USB_EPStartXfer+0x120e>
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	2250      	movs	r2, #80	@ 0x50
 801ad44:	5a9b      	ldrh	r3, [r3, r2]
 801ad46:	b29b      	uxth	r3, r3
 801ad48:	001a      	movs	r2, r3
 801ad4a:	21c4      	movs	r1, #196	@ 0xc4
 801ad4c:	187b      	adds	r3, r7, r1
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	189b      	adds	r3, r3, r2
 801ad52:	187a      	adds	r2, r7, r1
 801ad54:	6013      	str	r3, [r2, #0]
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	781b      	ldrb	r3, [r3, #0]
 801ad5a:	00da      	lsls	r2, r3, #3
 801ad5c:	187b      	adds	r3, r7, r1
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	18d3      	adds	r3, r2, r3
 801ad62:	4a1d      	ldr	r2, [pc, #116]	@ (801add8 <USB_EPStartXfer+0x1264>)
 801ad64:	4694      	mov	ip, r2
 801ad66:	4463      	add	r3, ip
 801ad68:	21c0      	movs	r1, #192	@ 0xc0
 801ad6a:	187a      	adds	r2, r7, r1
 801ad6c:	6013      	str	r3, [r2, #0]
 801ad6e:	1d7b      	adds	r3, r7, #5
 801ad70:	33ff      	adds	r3, #255	@ 0xff
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	187b      	adds	r3, r7, r1
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	801a      	strh	r2, [r3, #0]
 801ad7c:	e001      	b.n	801ad82 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801ad7e:	2301      	movs	r3, #1
 801ad80:	e025      	b.n	801adce <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ad82:	687a      	ldr	r2, [r7, #4]
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	009b      	lsls	r3, r3, #2
 801ad8a:	18d3      	adds	r3, r2, r3
 801ad8c:	881b      	ldrh	r3, [r3, #0]
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	208a      	movs	r0, #138	@ 0x8a
 801ad92:	183b      	adds	r3, r7, r0
 801ad94:	4911      	ldr	r1, [pc, #68]	@ (801addc <USB_EPStartXfer+0x1268>)
 801ad96:	400a      	ands	r2, r1
 801ad98:	801a      	strh	r2, [r3, #0]
 801ad9a:	183b      	adds	r3, r7, r0
 801ad9c:	183a      	adds	r2, r7, r0
 801ad9e:	8812      	ldrh	r2, [r2, #0]
 801ada0:	2180      	movs	r1, #128	@ 0x80
 801ada2:	0149      	lsls	r1, r1, #5
 801ada4:	404a      	eors	r2, r1
 801ada6:	801a      	strh	r2, [r3, #0]
 801ada8:	183b      	adds	r3, r7, r0
 801adaa:	183a      	adds	r2, r7, r0
 801adac:	8812      	ldrh	r2, [r2, #0]
 801adae:	2180      	movs	r1, #128	@ 0x80
 801adb0:	0189      	lsls	r1, r1, #6
 801adb2:	404a      	eors	r2, r1
 801adb4:	801a      	strh	r2, [r3, #0]
 801adb6:	687a      	ldr	r2, [r7, #4]
 801adb8:	683b      	ldr	r3, [r7, #0]
 801adba:	781b      	ldrb	r3, [r3, #0]
 801adbc:	009b      	lsls	r3, r3, #2
 801adbe:	18d3      	adds	r3, r2, r3
 801adc0:	183a      	adds	r2, r7, r0
 801adc2:	8812      	ldrh	r2, [r2, #0]
 801adc4:	4906      	ldr	r1, [pc, #24]	@ (801ade0 <USB_EPStartXfer+0x126c>)
 801adc6:	430a      	orrs	r2, r1
 801adc8:	b292      	uxth	r2, r2
 801adca:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801adcc:	2300      	movs	r3, #0
}
 801adce:	0018      	movs	r0, r3
 801add0:	46bd      	mov	sp, r7
 801add2:	b043      	add	sp, #268	@ 0x10c
 801add4:	bd90      	pop	{r4, r7, pc}
 801add6:	46c0      	nop			@ (mov r8, r8)
 801add8:	00000406 	.word	0x00000406
 801addc:	ffffbf8f 	.word	0xffffbf8f
 801ade0:	ffff8080 	.word	0xffff8080

0801ade4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b084      	sub	sp, #16
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
 801adec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	785b      	ldrb	r3, [r3, #1]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d01d      	beq.n	801ae32 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801adf6:	687a      	ldr	r2, [r7, #4]
 801adf8:	683b      	ldr	r3, [r7, #0]
 801adfa:	781b      	ldrb	r3, [r3, #0]
 801adfc:	009b      	lsls	r3, r3, #2
 801adfe:	18d3      	adds	r3, r2, r3
 801ae00:	881b      	ldrh	r3, [r3, #0]
 801ae02:	b29a      	uxth	r2, r3
 801ae04:	200c      	movs	r0, #12
 801ae06:	183b      	adds	r3, r7, r0
 801ae08:	491b      	ldr	r1, [pc, #108]	@ (801ae78 <USB_EPSetStall+0x94>)
 801ae0a:	400a      	ands	r2, r1
 801ae0c:	801a      	strh	r2, [r3, #0]
 801ae0e:	183b      	adds	r3, r7, r0
 801ae10:	183a      	adds	r2, r7, r0
 801ae12:	8812      	ldrh	r2, [r2, #0]
 801ae14:	2110      	movs	r1, #16
 801ae16:	404a      	eors	r2, r1
 801ae18:	801a      	strh	r2, [r3, #0]
 801ae1a:	687a      	ldr	r2, [r7, #4]
 801ae1c:	683b      	ldr	r3, [r7, #0]
 801ae1e:	781b      	ldrb	r3, [r3, #0]
 801ae20:	009b      	lsls	r3, r3, #2
 801ae22:	18d3      	adds	r3, r2, r3
 801ae24:	183a      	adds	r2, r7, r0
 801ae26:	8812      	ldrh	r2, [r2, #0]
 801ae28:	4914      	ldr	r1, [pc, #80]	@ (801ae7c <USB_EPSetStall+0x98>)
 801ae2a:	430a      	orrs	r2, r1
 801ae2c:	b292      	uxth	r2, r2
 801ae2e:	801a      	strh	r2, [r3, #0]
 801ae30:	e01d      	b.n	801ae6e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801ae32:	687a      	ldr	r2, [r7, #4]
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	009b      	lsls	r3, r3, #2
 801ae3a:	18d3      	adds	r3, r2, r3
 801ae3c:	881b      	ldrh	r3, [r3, #0]
 801ae3e:	b29a      	uxth	r2, r3
 801ae40:	200e      	movs	r0, #14
 801ae42:	183b      	adds	r3, r7, r0
 801ae44:	490e      	ldr	r1, [pc, #56]	@ (801ae80 <USB_EPSetStall+0x9c>)
 801ae46:	400a      	ands	r2, r1
 801ae48:	801a      	strh	r2, [r3, #0]
 801ae4a:	183b      	adds	r3, r7, r0
 801ae4c:	183a      	adds	r2, r7, r0
 801ae4e:	8812      	ldrh	r2, [r2, #0]
 801ae50:	2180      	movs	r1, #128	@ 0x80
 801ae52:	0149      	lsls	r1, r1, #5
 801ae54:	404a      	eors	r2, r1
 801ae56:	801a      	strh	r2, [r3, #0]
 801ae58:	687a      	ldr	r2, [r7, #4]
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	009b      	lsls	r3, r3, #2
 801ae60:	18d3      	adds	r3, r2, r3
 801ae62:	183a      	adds	r2, r7, r0
 801ae64:	8812      	ldrh	r2, [r2, #0]
 801ae66:	4905      	ldr	r1, [pc, #20]	@ (801ae7c <USB_EPSetStall+0x98>)
 801ae68:	430a      	orrs	r2, r1
 801ae6a:	b292      	uxth	r2, r2
 801ae6c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ae6e:	2300      	movs	r3, #0
}
 801ae70:	0018      	movs	r0, r3
 801ae72:	46bd      	mov	sp, r7
 801ae74:	b004      	add	sp, #16
 801ae76:	bd80      	pop	{r7, pc}
 801ae78:	ffff8fbf 	.word	0xffff8fbf
 801ae7c:	ffff8080 	.word	0xffff8080
 801ae80:	ffffbf8f 	.word	0xffffbf8f

0801ae84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b086      	sub	sp, #24
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
 801ae8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ae8e:	683b      	ldr	r3, [r7, #0]
 801ae90:	7b1b      	ldrb	r3, [r3, #12]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d000      	beq.n	801ae98 <USB_EPClearStall+0x14>
 801ae96:	e095      	b.n	801afc4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801ae98:	683b      	ldr	r3, [r7, #0]
 801ae9a:	785b      	ldrb	r3, [r3, #1]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d046      	beq.n	801af2e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801aea0:	687a      	ldr	r2, [r7, #4]
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	781b      	ldrb	r3, [r3, #0]
 801aea6:	009b      	lsls	r3, r3, #2
 801aea8:	18d2      	adds	r2, r2, r3
 801aeaa:	2110      	movs	r1, #16
 801aeac:	187b      	adds	r3, r7, r1
 801aeae:	8812      	ldrh	r2, [r2, #0]
 801aeb0:	801a      	strh	r2, [r3, #0]
 801aeb2:	187b      	adds	r3, r7, r1
 801aeb4:	881b      	ldrh	r3, [r3, #0]
 801aeb6:	2240      	movs	r2, #64	@ 0x40
 801aeb8:	4013      	ands	r3, r2
 801aeba:	d016      	beq.n	801aeea <USB_EPClearStall+0x66>
 801aebc:	687a      	ldr	r2, [r7, #4]
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	009b      	lsls	r3, r3, #2
 801aec4:	18d3      	adds	r3, r2, r3
 801aec6:	881b      	ldrh	r3, [r3, #0]
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	200e      	movs	r0, #14
 801aecc:	183b      	adds	r3, r7, r0
 801aece:	4940      	ldr	r1, [pc, #256]	@ (801afd0 <USB_EPClearStall+0x14c>)
 801aed0:	400a      	ands	r2, r1
 801aed2:	801a      	strh	r2, [r3, #0]
 801aed4:	687a      	ldr	r2, [r7, #4]
 801aed6:	683b      	ldr	r3, [r7, #0]
 801aed8:	781b      	ldrb	r3, [r3, #0]
 801aeda:	009b      	lsls	r3, r3, #2
 801aedc:	18d3      	adds	r3, r2, r3
 801aede:	183a      	adds	r2, r7, r0
 801aee0:	8812      	ldrh	r2, [r2, #0]
 801aee2:	493c      	ldr	r1, [pc, #240]	@ (801afd4 <USB_EPClearStall+0x150>)
 801aee4:	430a      	orrs	r2, r1
 801aee6:	b292      	uxth	r2, r2
 801aee8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	78db      	ldrb	r3, [r3, #3]
 801aeee:	2b01      	cmp	r3, #1
 801aef0:	d068      	beq.n	801afc4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801aef2:	687a      	ldr	r2, [r7, #4]
 801aef4:	683b      	ldr	r3, [r7, #0]
 801aef6:	781b      	ldrb	r3, [r3, #0]
 801aef8:	009b      	lsls	r3, r3, #2
 801aefa:	18d3      	adds	r3, r2, r3
 801aefc:	881b      	ldrh	r3, [r3, #0]
 801aefe:	b29a      	uxth	r2, r3
 801af00:	200c      	movs	r0, #12
 801af02:	183b      	adds	r3, r7, r0
 801af04:	4934      	ldr	r1, [pc, #208]	@ (801afd8 <USB_EPClearStall+0x154>)
 801af06:	400a      	ands	r2, r1
 801af08:	801a      	strh	r2, [r3, #0]
 801af0a:	183b      	adds	r3, r7, r0
 801af0c:	183a      	adds	r2, r7, r0
 801af0e:	8812      	ldrh	r2, [r2, #0]
 801af10:	2120      	movs	r1, #32
 801af12:	404a      	eors	r2, r1
 801af14:	801a      	strh	r2, [r3, #0]
 801af16:	687a      	ldr	r2, [r7, #4]
 801af18:	683b      	ldr	r3, [r7, #0]
 801af1a:	781b      	ldrb	r3, [r3, #0]
 801af1c:	009b      	lsls	r3, r3, #2
 801af1e:	18d3      	adds	r3, r2, r3
 801af20:	183a      	adds	r2, r7, r0
 801af22:	8812      	ldrh	r2, [r2, #0]
 801af24:	492d      	ldr	r1, [pc, #180]	@ (801afdc <USB_EPClearStall+0x158>)
 801af26:	430a      	orrs	r2, r1
 801af28:	b292      	uxth	r2, r2
 801af2a:	801a      	strh	r2, [r3, #0]
 801af2c:	e04a      	b.n	801afc4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801af2e:	687a      	ldr	r2, [r7, #4]
 801af30:	683b      	ldr	r3, [r7, #0]
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	009b      	lsls	r3, r3, #2
 801af36:	18d2      	adds	r2, r2, r3
 801af38:	2116      	movs	r1, #22
 801af3a:	187b      	adds	r3, r7, r1
 801af3c:	8812      	ldrh	r2, [r2, #0]
 801af3e:	801a      	strh	r2, [r3, #0]
 801af40:	187b      	adds	r3, r7, r1
 801af42:	881a      	ldrh	r2, [r3, #0]
 801af44:	2380      	movs	r3, #128	@ 0x80
 801af46:	01db      	lsls	r3, r3, #7
 801af48:	4013      	ands	r3, r2
 801af4a:	d016      	beq.n	801af7a <USB_EPClearStall+0xf6>
 801af4c:	687a      	ldr	r2, [r7, #4]
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	781b      	ldrb	r3, [r3, #0]
 801af52:	009b      	lsls	r3, r3, #2
 801af54:	18d3      	adds	r3, r2, r3
 801af56:	881b      	ldrh	r3, [r3, #0]
 801af58:	b29a      	uxth	r2, r3
 801af5a:	2014      	movs	r0, #20
 801af5c:	183b      	adds	r3, r7, r0
 801af5e:	491c      	ldr	r1, [pc, #112]	@ (801afd0 <USB_EPClearStall+0x14c>)
 801af60:	400a      	ands	r2, r1
 801af62:	801a      	strh	r2, [r3, #0]
 801af64:	687a      	ldr	r2, [r7, #4]
 801af66:	683b      	ldr	r3, [r7, #0]
 801af68:	781b      	ldrb	r3, [r3, #0]
 801af6a:	009b      	lsls	r3, r3, #2
 801af6c:	18d3      	adds	r3, r2, r3
 801af6e:	183a      	adds	r2, r7, r0
 801af70:	8812      	ldrh	r2, [r2, #0]
 801af72:	491b      	ldr	r1, [pc, #108]	@ (801afe0 <USB_EPClearStall+0x15c>)
 801af74:	430a      	orrs	r2, r1
 801af76:	b292      	uxth	r2, r2
 801af78:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801af7a:	687a      	ldr	r2, [r7, #4]
 801af7c:	683b      	ldr	r3, [r7, #0]
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	009b      	lsls	r3, r3, #2
 801af82:	18d3      	adds	r3, r2, r3
 801af84:	881b      	ldrh	r3, [r3, #0]
 801af86:	b29a      	uxth	r2, r3
 801af88:	2012      	movs	r0, #18
 801af8a:	183b      	adds	r3, r7, r0
 801af8c:	4915      	ldr	r1, [pc, #84]	@ (801afe4 <USB_EPClearStall+0x160>)
 801af8e:	400a      	ands	r2, r1
 801af90:	801a      	strh	r2, [r3, #0]
 801af92:	183b      	adds	r3, r7, r0
 801af94:	183a      	adds	r2, r7, r0
 801af96:	8812      	ldrh	r2, [r2, #0]
 801af98:	2180      	movs	r1, #128	@ 0x80
 801af9a:	0149      	lsls	r1, r1, #5
 801af9c:	404a      	eors	r2, r1
 801af9e:	801a      	strh	r2, [r3, #0]
 801afa0:	183b      	adds	r3, r7, r0
 801afa2:	183a      	adds	r2, r7, r0
 801afa4:	8812      	ldrh	r2, [r2, #0]
 801afa6:	2180      	movs	r1, #128	@ 0x80
 801afa8:	0189      	lsls	r1, r1, #6
 801afaa:	404a      	eors	r2, r1
 801afac:	801a      	strh	r2, [r3, #0]
 801afae:	687a      	ldr	r2, [r7, #4]
 801afb0:	683b      	ldr	r3, [r7, #0]
 801afb2:	781b      	ldrb	r3, [r3, #0]
 801afb4:	009b      	lsls	r3, r3, #2
 801afb6:	18d3      	adds	r3, r2, r3
 801afb8:	183a      	adds	r2, r7, r0
 801afba:	8812      	ldrh	r2, [r2, #0]
 801afbc:	4907      	ldr	r1, [pc, #28]	@ (801afdc <USB_EPClearStall+0x158>)
 801afbe:	430a      	orrs	r2, r1
 801afc0:	b292      	uxth	r2, r2
 801afc2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801afc4:	2300      	movs	r3, #0
}
 801afc6:	0018      	movs	r0, r3
 801afc8:	46bd      	mov	sp, r7
 801afca:	b006      	add	sp, #24
 801afcc:	bd80      	pop	{r7, pc}
 801afce:	46c0      	nop			@ (mov r8, r8)
 801afd0:	ffff8f8f 	.word	0xffff8f8f
 801afd4:	ffff80c0 	.word	0xffff80c0
 801afd8:	ffff8fbf 	.word	0xffff8fbf
 801afdc:	ffff8080 	.word	0xffff8080
 801afe0:	ffffc080 	.word	0xffffc080
 801afe4:	ffffbf8f 	.word	0xffffbf8f

0801afe8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b082      	sub	sp, #8
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
 801aff0:	000a      	movs	r2, r1
 801aff2:	1cfb      	adds	r3, r7, #3
 801aff4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801aff6:	1cfb      	adds	r3, r7, #3
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d103      	bne.n	801b006 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	224c      	movs	r2, #76	@ 0x4c
 801b002:	2180      	movs	r1, #128	@ 0x80
 801b004:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b006:	2300      	movs	r3, #0
}
 801b008:	0018      	movs	r0, r3
 801b00a:	46bd      	mov	sp, r7
 801b00c:	b002      	add	sp, #8
 801b00e:	bd80      	pop	{r7, pc}

0801b010 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2258      	movs	r2, #88	@ 0x58
 801b01c:	5a9b      	ldrh	r3, [r3, r2]
 801b01e:	b29b      	uxth	r3, r3
 801b020:	4a05      	ldr	r2, [pc, #20]	@ (801b038 <USB_DevConnect+0x28>)
 801b022:	4313      	orrs	r3, r2
 801b024:	b299      	uxth	r1, r3
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	2258      	movs	r2, #88	@ 0x58
 801b02a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b02c:	2300      	movs	r3, #0
}
 801b02e:	0018      	movs	r0, r3
 801b030:	46bd      	mov	sp, r7
 801b032:	b002      	add	sp, #8
 801b034:	bd80      	pop	{r7, pc}
 801b036:	46c0      	nop			@ (mov r8, r8)
 801b038:	ffff8000 	.word	0xffff8000

0801b03c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b084      	sub	sp, #16
 801b040:	af00      	add	r7, sp, #0
 801b042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	2244      	movs	r2, #68	@ 0x44
 801b048:	5a9b      	ldrh	r3, [r3, r2]
 801b04a:	b29b      	uxth	r3, r3
 801b04c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b04e:	68fb      	ldr	r3, [r7, #12]
}
 801b050:	0018      	movs	r0, r3
 801b052:	46bd      	mov	sp, r7
 801b054:	b004      	add	sp, #16
 801b056:	bd80      	pop	{r7, pc}

0801b058 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b08a      	sub	sp, #40	@ 0x28
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	60f8      	str	r0, [r7, #12]
 801b060:	60b9      	str	r1, [r7, #8]
 801b062:	0019      	movs	r1, r3
 801b064:	1dbb      	adds	r3, r7, #6
 801b066:	801a      	strh	r2, [r3, #0]
 801b068:	1d3b      	adds	r3, r7, #4
 801b06a:	1c0a      	adds	r2, r1, #0
 801b06c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b06e:	1d3b      	adds	r3, r7, #4
 801b070:	881b      	ldrh	r3, [r3, #0]
 801b072:	3301      	adds	r3, #1
 801b074:	085b      	lsrs	r3, r3, #1
 801b076:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b07c:	68bb      	ldr	r3, [r7, #8]
 801b07e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b080:	1dbb      	adds	r3, r7, #6
 801b082:	881a      	ldrh	r2, [r3, #0]
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	18d3      	adds	r3, r2, r3
 801b088:	2280      	movs	r2, #128	@ 0x80
 801b08a:	00d2      	lsls	r2, r2, #3
 801b08c:	4694      	mov	ip, r2
 801b08e:	4463      	add	r3, ip
 801b090:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b092:	69bb      	ldr	r3, [r7, #24]
 801b094:	627b      	str	r3, [r7, #36]	@ 0x24
 801b096:	e020      	b.n	801b0da <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b098:	69fb      	ldr	r3, [r7, #28]
 801b09a:	781a      	ldrb	r2, [r3, #0]
 801b09c:	2112      	movs	r1, #18
 801b09e:	187b      	adds	r3, r7, r1
 801b0a0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b0a2:	69fb      	ldr	r3, [r7, #28]
 801b0a4:	3301      	adds	r3, #1
 801b0a6:	781b      	ldrb	r3, [r3, #0]
 801b0a8:	021b      	lsls	r3, r3, #8
 801b0aa:	b21a      	sxth	r2, r3
 801b0ac:	187b      	adds	r3, r7, r1
 801b0ae:	2000      	movs	r0, #0
 801b0b0:	5e1b      	ldrsh	r3, [r3, r0]
 801b0b2:	4313      	orrs	r3, r2
 801b0b4:	b21a      	sxth	r2, r3
 801b0b6:	187b      	adds	r3, r7, r1
 801b0b8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b0ba:	6a3b      	ldr	r3, [r7, #32]
 801b0bc:	187a      	adds	r2, r7, r1
 801b0be:	8812      	ldrh	r2, [r2, #0]
 801b0c0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b0c2:	6a3b      	ldr	r3, [r7, #32]
 801b0c4:	3302      	adds	r3, #2
 801b0c6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b0c8:	69fb      	ldr	r3, [r7, #28]
 801b0ca:	3301      	adds	r3, #1
 801b0cc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b0ce:	69fb      	ldr	r3, [r7, #28]
 801b0d0:	3301      	adds	r3, #1
 801b0d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0d6:	3b01      	subs	r3, #1
 801b0d8:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d1db      	bne.n	801b098 <USB_WritePMA+0x40>
  }
}
 801b0e0:	46c0      	nop			@ (mov r8, r8)
 801b0e2:	46c0      	nop			@ (mov r8, r8)
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	b00a      	add	sp, #40	@ 0x28
 801b0e8:	bd80      	pop	{r7, pc}

0801b0ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b0ea:	b580      	push	{r7, lr}
 801b0ec:	b08a      	sub	sp, #40	@ 0x28
 801b0ee:	af00      	add	r7, sp, #0
 801b0f0:	60f8      	str	r0, [r7, #12]
 801b0f2:	60b9      	str	r1, [r7, #8]
 801b0f4:	0019      	movs	r1, r3
 801b0f6:	1dbb      	adds	r3, r7, #6
 801b0f8:	801a      	strh	r2, [r3, #0]
 801b0fa:	1d3b      	adds	r3, r7, #4
 801b0fc:	1c0a      	adds	r2, r1, #0
 801b0fe:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b100:	1d3b      	adds	r3, r7, #4
 801b102:	881b      	ldrh	r3, [r3, #0]
 801b104:	085b      	lsrs	r3, r3, #1
 801b106:	b29b      	uxth	r3, r3
 801b108:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b10e:	68bb      	ldr	r3, [r7, #8]
 801b110:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b112:	1dbb      	adds	r3, r7, #6
 801b114:	881a      	ldrh	r2, [r3, #0]
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	18d3      	adds	r3, r2, r3
 801b11a:	2280      	movs	r2, #128	@ 0x80
 801b11c:	00d2      	lsls	r2, r2, #3
 801b11e:	4694      	mov	ip, r2
 801b120:	4463      	add	r3, ip
 801b122:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b124:	69bb      	ldr	r3, [r7, #24]
 801b126:	627b      	str	r3, [r7, #36]	@ 0x24
 801b128:	e018      	b.n	801b15c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b12a:	6a3b      	ldr	r3, [r7, #32]
 801b12c:	881b      	ldrh	r3, [r3, #0]
 801b12e:	b29b      	uxth	r3, r3
 801b130:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b132:	6a3b      	ldr	r3, [r7, #32]
 801b134:	3302      	adds	r3, #2
 801b136:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b138:	693b      	ldr	r3, [r7, #16]
 801b13a:	b2da      	uxtb	r2, r3
 801b13c:	69fb      	ldr	r3, [r7, #28]
 801b13e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b140:	69fb      	ldr	r3, [r7, #28]
 801b142:	3301      	adds	r3, #1
 801b144:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b146:	693b      	ldr	r3, [r7, #16]
 801b148:	0a1b      	lsrs	r3, r3, #8
 801b14a:	b2da      	uxtb	r2, r3
 801b14c:	69fb      	ldr	r3, [r7, #28]
 801b14e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b150:	69fb      	ldr	r3, [r7, #28]
 801b152:	3301      	adds	r3, #1
 801b154:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b158:	3b01      	subs	r3, #1
 801b15a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d1e3      	bne.n	801b12a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b162:	1d3b      	adds	r3, r7, #4
 801b164:	881b      	ldrh	r3, [r3, #0]
 801b166:	2201      	movs	r2, #1
 801b168:	4013      	ands	r3, r2
 801b16a:	b29b      	uxth	r3, r3
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d007      	beq.n	801b180 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b170:	6a3b      	ldr	r3, [r7, #32]
 801b172:	881b      	ldrh	r3, [r3, #0]
 801b174:	b29b      	uxth	r3, r3
 801b176:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b178:	693b      	ldr	r3, [r7, #16]
 801b17a:	b2da      	uxtb	r2, r3
 801b17c:	69fb      	ldr	r3, [r7, #28]
 801b17e:	701a      	strb	r2, [r3, #0]
  }
}
 801b180:	46c0      	nop			@ (mov r8, r8)
 801b182:	46bd      	mov	sp, r7
 801b184:	b00a      	add	sp, #40	@ 0x28
 801b186:	bd80      	pop	{r7, pc}

0801b188 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b084      	sub	sp, #16
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
 801b190:	000a      	movs	r2, r1
 801b192:	1cfb      	adds	r3, r7, #3
 801b194:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b196:	230f      	movs	r3, #15
 801b198:	18fb      	adds	r3, r7, r3
 801b19a:	2200      	movs	r2, #0
 801b19c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	7c1b      	ldrb	r3, [r3, #16]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d116      	bne.n	801b1d4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b1a6:	2380      	movs	r3, #128	@ 0x80
 801b1a8:	009b      	lsls	r3, r3, #2
 801b1aa:	6878      	ldr	r0, [r7, #4]
 801b1ac:	2202      	movs	r2, #2
 801b1ae:	2181      	movs	r1, #129	@ 0x81
 801b1b0:	f002 f8eb 	bl	801d38a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	2201      	movs	r2, #1
 801b1b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b1ba:	2380      	movs	r3, #128	@ 0x80
 801b1bc:	009b      	lsls	r3, r3, #2
 801b1be:	6878      	ldr	r0, [r7, #4]
 801b1c0:	2202      	movs	r2, #2
 801b1c2:	2101      	movs	r1, #1
 801b1c4:	f002 f8e1 	bl	801d38a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b1c8:	687a      	ldr	r2, [r7, #4]
 801b1ca:	23b6      	movs	r3, #182	@ 0xb6
 801b1cc:	005b      	lsls	r3, r3, #1
 801b1ce:	2101      	movs	r1, #1
 801b1d0:	50d1      	str	r1, [r2, r3]
 801b1d2:	e013      	b.n	801b1fc <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	2340      	movs	r3, #64	@ 0x40
 801b1d8:	2202      	movs	r2, #2
 801b1da:	2181      	movs	r1, #129	@ 0x81
 801b1dc:	f002 f8d5 	bl	801d38a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	2201      	movs	r2, #1
 801b1e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b1e6:	6878      	ldr	r0, [r7, #4]
 801b1e8:	2340      	movs	r3, #64	@ 0x40
 801b1ea:	2202      	movs	r2, #2
 801b1ec:	2101      	movs	r1, #1
 801b1ee:	f002 f8cc 	bl	801d38a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b1f2:	687a      	ldr	r2, [r7, #4]
 801b1f4:	23b6      	movs	r3, #182	@ 0xb6
 801b1f6:	005b      	lsls	r3, r3, #1
 801b1f8:	2101      	movs	r1, #1
 801b1fa:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b1fc:	6878      	ldr	r0, [r7, #4]
 801b1fe:	2308      	movs	r3, #8
 801b200:	2203      	movs	r2, #3
 801b202:	2182      	movs	r1, #130	@ 0x82
 801b204:	f002 f8c1 	bl	801d38a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	2201      	movs	r2, #1
 801b20c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b20e:	2387      	movs	r3, #135	@ 0x87
 801b210:	009b      	lsls	r3, r3, #2
 801b212:	0018      	movs	r0, r3
 801b214:	f002 fa52 	bl	801d6bc <USBD_static_malloc>
 801b218:	0001      	movs	r1, r0
 801b21a:	687a      	ldr	r2, [r7, #4]
 801b21c:	23ae      	movs	r3, #174	@ 0xae
 801b21e:	009b      	lsls	r3, r3, #2
 801b220:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b222:	687a      	ldr	r2, [r7, #4]
 801b224:	23ae      	movs	r3, #174	@ 0xae
 801b226:	009b      	lsls	r3, r3, #2
 801b228:	58d3      	ldr	r3, [r2, r3]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d104      	bne.n	801b238 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b22e:	230f      	movs	r3, #15
 801b230:	18fb      	adds	r3, r7, r3
 801b232:	2201      	movs	r2, #1
 801b234:	701a      	strb	r2, [r3, #0]
 801b236:	e02c      	b.n	801b292 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b238:	687a      	ldr	r2, [r7, #4]
 801b23a:	23ae      	movs	r3, #174	@ 0xae
 801b23c:	009b      	lsls	r3, r3, #2
 801b23e:	58d3      	ldr	r3, [r2, r3]
 801b240:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	23af      	movs	r3, #175	@ 0xaf
 801b246:	009b      	lsls	r3, r3, #2
 801b248:	58d3      	ldr	r3, [r2, r3]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b24e:	68ba      	ldr	r2, [r7, #8]
 801b250:	2385      	movs	r3, #133	@ 0x85
 801b252:	009b      	lsls	r3, r3, #2
 801b254:	2100      	movs	r1, #0
 801b256:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b258:	68ba      	ldr	r2, [r7, #8]
 801b25a:	2386      	movs	r3, #134	@ 0x86
 801b25c:	009b      	lsls	r3, r3, #2
 801b25e:	2100      	movs	r1, #0
 801b260:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	7c1b      	ldrb	r3, [r3, #16]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d10a      	bne.n	801b280 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b26a:	68ba      	ldr	r2, [r7, #8]
 801b26c:	2381      	movs	r3, #129	@ 0x81
 801b26e:	009b      	lsls	r3, r3, #2
 801b270:	58d2      	ldr	r2, [r2, r3]
 801b272:	2380      	movs	r3, #128	@ 0x80
 801b274:	009b      	lsls	r3, r3, #2
 801b276:	6878      	ldr	r0, [r7, #4]
 801b278:	2101      	movs	r1, #1
 801b27a:	f002 f9d1 	bl	801d620 <USBD_LL_PrepareReceive>
 801b27e:	e008      	b.n	801b292 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b280:	68ba      	ldr	r2, [r7, #8]
 801b282:	2381      	movs	r3, #129	@ 0x81
 801b284:	009b      	lsls	r3, r3, #2
 801b286:	58d2      	ldr	r2, [r2, r3]
 801b288:	6878      	ldr	r0, [r7, #4]
 801b28a:	2340      	movs	r3, #64	@ 0x40
 801b28c:	2101      	movs	r1, #1
 801b28e:	f002 f9c7 	bl	801d620 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b292:	230f      	movs	r3, #15
 801b294:	18fb      	adds	r3, r7, r3
 801b296:	781b      	ldrb	r3, [r3, #0]
}
 801b298:	0018      	movs	r0, r3
 801b29a:	46bd      	mov	sp, r7
 801b29c:	b004      	add	sp, #16
 801b29e:	bd80      	pop	{r7, pc}

0801b2a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b084      	sub	sp, #16
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
 801b2a8:	000a      	movs	r2, r1
 801b2aa:	1cfb      	adds	r3, r7, #3
 801b2ac:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b2ae:	230f      	movs	r3, #15
 801b2b0:	18fb      	adds	r3, r7, r3
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	2181      	movs	r1, #129	@ 0x81
 801b2ba:	0018      	movs	r0, r3
 801b2bc:	f002 f89c 	bl	801d3f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	2101      	movs	r1, #1
 801b2ca:	0018      	movs	r0, r3
 801b2cc:	f002 f894 	bl	801d3f8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b2d0:	687a      	ldr	r2, [r7, #4]
 801b2d2:	23b6      	movs	r3, #182	@ 0xb6
 801b2d4:	005b      	lsls	r3, r3, #1
 801b2d6:	2100      	movs	r1, #0
 801b2d8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	2182      	movs	r1, #130	@ 0x82
 801b2de:	0018      	movs	r0, r3
 801b2e0:	f002 f88a 	bl	801d3f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b2ea:	687a      	ldr	r2, [r7, #4]
 801b2ec:	23ae      	movs	r3, #174	@ 0xae
 801b2ee:	009b      	lsls	r3, r3, #2
 801b2f0:	58d3      	ldr	r3, [r2, r3]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d011      	beq.n	801b31a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b2f6:	687a      	ldr	r2, [r7, #4]
 801b2f8:	23af      	movs	r3, #175	@ 0xaf
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	58d3      	ldr	r3, [r2, r3]
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b302:	687a      	ldr	r2, [r7, #4]
 801b304:	23ae      	movs	r3, #174	@ 0xae
 801b306:	009b      	lsls	r3, r3, #2
 801b308:	58d3      	ldr	r3, [r2, r3]
 801b30a:	0018      	movs	r0, r3
 801b30c:	f002 f9e2 	bl	801d6d4 <USBD_static_free>
    pdev->pClassData = NULL;
 801b310:	687a      	ldr	r2, [r7, #4]
 801b312:	23ae      	movs	r3, #174	@ 0xae
 801b314:	009b      	lsls	r3, r3, #2
 801b316:	2100      	movs	r1, #0
 801b318:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b31a:	230f      	movs	r3, #15
 801b31c:	18fb      	adds	r3, r7, r3
 801b31e:	781b      	ldrb	r3, [r3, #0]
}
 801b320:	0018      	movs	r0, r3
 801b322:	46bd      	mov	sp, r7
 801b324:	b004      	add	sp, #16
 801b326:	bd80      	pop	{r7, pc}

0801b328 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b086      	sub	sp, #24
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
 801b330:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b332:	687a      	ldr	r2, [r7, #4]
 801b334:	23ae      	movs	r3, #174	@ 0xae
 801b336:	009b      	lsls	r3, r3, #2
 801b338:	58d3      	ldr	r3, [r2, r3]
 801b33a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b33c:	230f      	movs	r3, #15
 801b33e:	18fb      	adds	r3, r7, r3
 801b340:	2200      	movs	r2, #0
 801b342:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b344:	230c      	movs	r3, #12
 801b346:	18fb      	adds	r3, r7, r3
 801b348:	2200      	movs	r2, #0
 801b34a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b34c:	2317      	movs	r3, #23
 801b34e:	18fb      	adds	r3, r7, r3
 801b350:	2200      	movs	r2, #0
 801b352:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b354:	683b      	ldr	r3, [r7, #0]
 801b356:	781b      	ldrb	r3, [r3, #0]
 801b358:	001a      	movs	r2, r3
 801b35a:	2360      	movs	r3, #96	@ 0x60
 801b35c:	4013      	ands	r3, r2
 801b35e:	d03d      	beq.n	801b3dc <USBD_CDC_Setup+0xb4>
 801b360:	2b20      	cmp	r3, #32
 801b362:	d000      	beq.n	801b366 <USBD_CDC_Setup+0x3e>
 801b364:	e094      	b.n	801b490 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	88db      	ldrh	r3, [r3, #6]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d02b      	beq.n	801b3c6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	781b      	ldrb	r3, [r3, #0]
 801b372:	b25b      	sxtb	r3, r3
 801b374:	2b00      	cmp	r3, #0
 801b376:	da12      	bge.n	801b39e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b378:	687a      	ldr	r2, [r7, #4]
 801b37a:	23af      	movs	r3, #175	@ 0xaf
 801b37c:	009b      	lsls	r3, r3, #2
 801b37e:	58d3      	ldr	r3, [r2, r3]
 801b380:	689b      	ldr	r3, [r3, #8]
 801b382:	683a      	ldr	r2, [r7, #0]
 801b384:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b386:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b388:	683a      	ldr	r2, [r7, #0]
 801b38a:	88d2      	ldrh	r2, [r2, #6]
 801b38c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b38e:	6939      	ldr	r1, [r7, #16]
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	88da      	ldrh	r2, [r3, #6]
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	0018      	movs	r0, r3
 801b398:	f001 fbaf 	bl	801cafa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b39c:	e083      	b.n	801b4a6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	7859      	ldrb	r1, [r3, #1]
 801b3a2:	693a      	ldr	r2, [r7, #16]
 801b3a4:	2380      	movs	r3, #128	@ 0x80
 801b3a6:	009b      	lsls	r3, r3, #2
 801b3a8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b3aa:	683b      	ldr	r3, [r7, #0]
 801b3ac:	88db      	ldrh	r3, [r3, #6]
 801b3ae:	b2d9      	uxtb	r1, r3
 801b3b0:	693b      	ldr	r3, [r7, #16]
 801b3b2:	4a40      	ldr	r2, [pc, #256]	@ (801b4b4 <USBD_CDC_Setup+0x18c>)
 801b3b4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b3b6:	6939      	ldr	r1, [r7, #16]
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	88da      	ldrh	r2, [r3, #6]
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	0018      	movs	r0, r3
 801b3c0:	f001 fbce 	bl	801cb60 <USBD_CtlPrepareRx>
      break;
 801b3c4:	e06f      	b.n	801b4a6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b3c6:	687a      	ldr	r2, [r7, #4]
 801b3c8:	23af      	movs	r3, #175	@ 0xaf
 801b3ca:	009b      	lsls	r3, r3, #2
 801b3cc:	58d3      	ldr	r3, [r2, r3]
 801b3ce:	689b      	ldr	r3, [r3, #8]
 801b3d0:	683a      	ldr	r2, [r7, #0]
 801b3d2:	7850      	ldrb	r0, [r2, #1]
 801b3d4:	6839      	ldr	r1, [r7, #0]
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	4798      	blx	r3
      break;
 801b3da:	e064      	b.n	801b4a6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b3dc:	683b      	ldr	r3, [r7, #0]
 801b3de:	785b      	ldrb	r3, [r3, #1]
 801b3e0:	2b0b      	cmp	r3, #11
 801b3e2:	d037      	beq.n	801b454 <USBD_CDC_Setup+0x12c>
 801b3e4:	dc47      	bgt.n	801b476 <USBD_CDC_Setup+0x14e>
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d002      	beq.n	801b3f0 <USBD_CDC_Setup+0xc8>
 801b3ea:	2b0a      	cmp	r3, #10
 801b3ec:	d019      	beq.n	801b422 <USBD_CDC_Setup+0xfa>
 801b3ee:	e042      	b.n	801b476 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3f0:	687a      	ldr	r2, [r7, #4]
 801b3f2:	23a7      	movs	r3, #167	@ 0xa7
 801b3f4:	009b      	lsls	r3, r3, #2
 801b3f6:	5cd3      	ldrb	r3, [r2, r3]
 801b3f8:	2b03      	cmp	r3, #3
 801b3fa:	d107      	bne.n	801b40c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b3fc:	230c      	movs	r3, #12
 801b3fe:	18f9      	adds	r1, r7, r3
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	2202      	movs	r2, #2
 801b404:	0018      	movs	r0, r3
 801b406:	f001 fb78 	bl	801cafa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b40a:	e040      	b.n	801b48e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b40c:	683a      	ldr	r2, [r7, #0]
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	0011      	movs	r1, r2
 801b412:	0018      	movs	r0, r3
 801b414:	f001 faf3 	bl	801c9fe <USBD_CtlError>
            ret = USBD_FAIL;
 801b418:	2317      	movs	r3, #23
 801b41a:	18fb      	adds	r3, r7, r3
 801b41c:	2202      	movs	r2, #2
 801b41e:	701a      	strb	r2, [r3, #0]
          break;
 801b420:	e035      	b.n	801b48e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	23a7      	movs	r3, #167	@ 0xa7
 801b426:	009b      	lsls	r3, r3, #2
 801b428:	5cd3      	ldrb	r3, [r2, r3]
 801b42a:	2b03      	cmp	r3, #3
 801b42c:	d107      	bne.n	801b43e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b42e:	230f      	movs	r3, #15
 801b430:	18f9      	adds	r1, r7, r3
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	2201      	movs	r2, #1
 801b436:	0018      	movs	r0, r3
 801b438:	f001 fb5f 	bl	801cafa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b43c:	e027      	b.n	801b48e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b43e:	683a      	ldr	r2, [r7, #0]
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	0011      	movs	r1, r2
 801b444:	0018      	movs	r0, r3
 801b446:	f001 fada 	bl	801c9fe <USBD_CtlError>
            ret = USBD_FAIL;
 801b44a:	2317      	movs	r3, #23
 801b44c:	18fb      	adds	r3, r7, r3
 801b44e:	2202      	movs	r2, #2
 801b450:	701a      	strb	r2, [r3, #0]
          break;
 801b452:	e01c      	b.n	801b48e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b454:	687a      	ldr	r2, [r7, #4]
 801b456:	23a7      	movs	r3, #167	@ 0xa7
 801b458:	009b      	lsls	r3, r3, #2
 801b45a:	5cd3      	ldrb	r3, [r2, r3]
 801b45c:	2b03      	cmp	r3, #3
 801b45e:	d015      	beq.n	801b48c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b460:	683a      	ldr	r2, [r7, #0]
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	0011      	movs	r1, r2
 801b466:	0018      	movs	r0, r3
 801b468:	f001 fac9 	bl	801c9fe <USBD_CtlError>
            ret = USBD_FAIL;
 801b46c:	2317      	movs	r3, #23
 801b46e:	18fb      	adds	r3, r7, r3
 801b470:	2202      	movs	r2, #2
 801b472:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b474:	e00a      	b.n	801b48c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b476:	683a      	ldr	r2, [r7, #0]
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	0011      	movs	r1, r2
 801b47c:	0018      	movs	r0, r3
 801b47e:	f001 fabe 	bl	801c9fe <USBD_CtlError>
          ret = USBD_FAIL;
 801b482:	2317      	movs	r3, #23
 801b484:	18fb      	adds	r3, r7, r3
 801b486:	2202      	movs	r2, #2
 801b488:	701a      	strb	r2, [r3, #0]
          break;
 801b48a:	e000      	b.n	801b48e <USBD_CDC_Setup+0x166>
          break;
 801b48c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b48e:	e00a      	b.n	801b4a6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b490:	683a      	ldr	r2, [r7, #0]
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	0011      	movs	r1, r2
 801b496:	0018      	movs	r0, r3
 801b498:	f001 fab1 	bl	801c9fe <USBD_CtlError>
      ret = USBD_FAIL;
 801b49c:	2317      	movs	r3, #23
 801b49e:	18fb      	adds	r3, r7, r3
 801b4a0:	2202      	movs	r2, #2
 801b4a2:	701a      	strb	r2, [r3, #0]
      break;
 801b4a4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b4a6:	2317      	movs	r3, #23
 801b4a8:	18fb      	adds	r3, r7, r3
 801b4aa:	781b      	ldrb	r3, [r3, #0]
}
 801b4ac:	0018      	movs	r0, r3
 801b4ae:	46bd      	mov	sp, r7
 801b4b0:	b006      	add	sp, #24
 801b4b2:	bd80      	pop	{r7, pc}
 801b4b4:	00000201 	.word	0x00000201

0801b4b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b084      	sub	sp, #16
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
 801b4c0:	000a      	movs	r2, r1
 801b4c2:	1cfb      	adds	r3, r7, #3
 801b4c4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b4c6:	687a      	ldr	r2, [r7, #4]
 801b4c8:	23ae      	movs	r3, #174	@ 0xae
 801b4ca:	009b      	lsls	r3, r3, #2
 801b4cc:	58d3      	ldr	r3, [r2, r3]
 801b4ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b4d0:	687a      	ldr	r2, [r7, #4]
 801b4d2:	23b0      	movs	r3, #176	@ 0xb0
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	58d3      	ldr	r3, [r2, r3]
 801b4d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b4da:	687a      	ldr	r2, [r7, #4]
 801b4dc:	23ae      	movs	r3, #174	@ 0xae
 801b4de:	009b      	lsls	r3, r3, #2
 801b4e0:	58d3      	ldr	r3, [r2, r3]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d03e      	beq.n	801b564 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b4e6:	1cfb      	adds	r3, r7, #3
 801b4e8:	781a      	ldrb	r2, [r3, #0]
 801b4ea:	6879      	ldr	r1, [r7, #4]
 801b4ec:	0013      	movs	r3, r2
 801b4ee:	009b      	lsls	r3, r3, #2
 801b4f0:	189b      	adds	r3, r3, r2
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	18cb      	adds	r3, r1, r3
 801b4f6:	331c      	adds	r3, #28
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d02b      	beq.n	801b556 <USBD_CDC_DataIn+0x9e>
 801b4fe:	1cfb      	adds	r3, r7, #3
 801b500:	781a      	ldrb	r2, [r3, #0]
 801b502:	6879      	ldr	r1, [r7, #4]
 801b504:	0013      	movs	r3, r2
 801b506:	009b      	lsls	r3, r3, #2
 801b508:	189b      	adds	r3, r3, r2
 801b50a:	009b      	lsls	r3, r3, #2
 801b50c:	18cb      	adds	r3, r1, r3
 801b50e:	331c      	adds	r3, #28
 801b510:	6818      	ldr	r0, [r3, #0]
 801b512:	1cfb      	adds	r3, r7, #3
 801b514:	781a      	ldrb	r2, [r3, #0]
 801b516:	68b9      	ldr	r1, [r7, #8]
 801b518:	0013      	movs	r3, r2
 801b51a:	009b      	lsls	r3, r3, #2
 801b51c:	189b      	adds	r3, r3, r2
 801b51e:	00db      	lsls	r3, r3, #3
 801b520:	18cb      	adds	r3, r1, r3
 801b522:	3338      	adds	r3, #56	@ 0x38
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	0019      	movs	r1, r3
 801b528:	f7e4 fec2 	bl	80002b0 <__aeabi_uidivmod>
 801b52c:	1e0b      	subs	r3, r1, #0
 801b52e:	d112      	bne.n	801b556 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b530:	1cfb      	adds	r3, r7, #3
 801b532:	781a      	ldrb	r2, [r3, #0]
 801b534:	6879      	ldr	r1, [r7, #4]
 801b536:	0013      	movs	r3, r2
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	189b      	adds	r3, r3, r2
 801b53c:	009b      	lsls	r3, r3, #2
 801b53e:	18cb      	adds	r3, r1, r3
 801b540:	331c      	adds	r3, #28
 801b542:	2200      	movs	r2, #0
 801b544:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b546:	1cfb      	adds	r3, r7, #3
 801b548:	7819      	ldrb	r1, [r3, #0]
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	2300      	movs	r3, #0
 801b54e:	2200      	movs	r2, #0
 801b550:	f002 f82f 	bl	801d5b2 <USBD_LL_Transmit>
 801b554:	e004      	b.n	801b560 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b556:	68fa      	ldr	r2, [r7, #12]
 801b558:	2385      	movs	r3, #133	@ 0x85
 801b55a:	009b      	lsls	r3, r3, #2
 801b55c:	2100      	movs	r1, #0
 801b55e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b560:	2300      	movs	r3, #0
 801b562:	e000      	b.n	801b566 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b564:	2302      	movs	r3, #2
  }
}
 801b566:	0018      	movs	r0, r3
 801b568:	46bd      	mov	sp, r7
 801b56a:	b004      	add	sp, #16
 801b56c:	bd80      	pop	{r7, pc}

0801b56e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b56e:	b580      	push	{r7, lr}
 801b570:	b084      	sub	sp, #16
 801b572:	af00      	add	r7, sp, #0
 801b574:	6078      	str	r0, [r7, #4]
 801b576:	000a      	movs	r2, r1
 801b578:	1cfb      	adds	r3, r7, #3
 801b57a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b57c:	687a      	ldr	r2, [r7, #4]
 801b57e:	23ae      	movs	r3, #174	@ 0xae
 801b580:	009b      	lsls	r3, r3, #2
 801b582:	58d3      	ldr	r3, [r2, r3]
 801b584:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b586:	1cfb      	adds	r3, r7, #3
 801b588:	781a      	ldrb	r2, [r3, #0]
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	0011      	movs	r1, r2
 801b58e:	0018      	movs	r0, r3
 801b590:	f002 f87d 	bl	801d68e <USBD_LL_GetRxDataSize>
 801b594:	0001      	movs	r1, r0
 801b596:	68fa      	ldr	r2, [r7, #12]
 801b598:	2383      	movs	r3, #131	@ 0x83
 801b59a:	009b      	lsls	r3, r3, #2
 801b59c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b59e:	687a      	ldr	r2, [r7, #4]
 801b5a0:	23ae      	movs	r3, #174	@ 0xae
 801b5a2:	009b      	lsls	r3, r3, #2
 801b5a4:	58d3      	ldr	r3, [r2, r3]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d011      	beq.n	801b5ce <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	23af      	movs	r3, #175	@ 0xaf
 801b5ae:	009b      	lsls	r3, r3, #2
 801b5b0:	58d3      	ldr	r3, [r2, r3]
 801b5b2:	68da      	ldr	r2, [r3, #12]
 801b5b4:	68f9      	ldr	r1, [r7, #12]
 801b5b6:	2381      	movs	r3, #129	@ 0x81
 801b5b8:	009b      	lsls	r3, r3, #2
 801b5ba:	58c8      	ldr	r0, [r1, r3]
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	2183      	movs	r1, #131	@ 0x83
 801b5c0:	0089      	lsls	r1, r1, #2
 801b5c2:	468c      	mov	ip, r1
 801b5c4:	4463      	add	r3, ip
 801b5c6:	0019      	movs	r1, r3
 801b5c8:	4790      	blx	r2

    return USBD_OK;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	e000      	b.n	801b5d0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b5ce:	2302      	movs	r3, #2
  }
}
 801b5d0:	0018      	movs	r0, r3
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	b004      	add	sp, #16
 801b5d6:	bd80      	pop	{r7, pc}

0801b5d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b5d8:	b590      	push	{r4, r7, lr}
 801b5da:	b085      	sub	sp, #20
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b5e0:	687a      	ldr	r2, [r7, #4]
 801b5e2:	23ae      	movs	r3, #174	@ 0xae
 801b5e4:	009b      	lsls	r3, r3, #2
 801b5e6:	58d3      	ldr	r3, [r2, r3]
 801b5e8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b5ea:	687a      	ldr	r2, [r7, #4]
 801b5ec:	23af      	movs	r3, #175	@ 0xaf
 801b5ee:	009b      	lsls	r3, r3, #2
 801b5f0:	58d3      	ldr	r3, [r2, r3]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d018      	beq.n	801b628 <USBD_CDC_EP0_RxReady+0x50>
 801b5f6:	68fa      	ldr	r2, [r7, #12]
 801b5f8:	2380      	movs	r3, #128	@ 0x80
 801b5fa:	009b      	lsls	r3, r3, #2
 801b5fc:	5cd3      	ldrb	r3, [r2, r3]
 801b5fe:	2bff      	cmp	r3, #255	@ 0xff
 801b600:	d012      	beq.n	801b628 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b602:	687a      	ldr	r2, [r7, #4]
 801b604:	23af      	movs	r3, #175	@ 0xaf
 801b606:	009b      	lsls	r3, r3, #2
 801b608:	58d3      	ldr	r3, [r2, r3]
 801b60a:	689b      	ldr	r3, [r3, #8]
 801b60c:	68f9      	ldr	r1, [r7, #12]
 801b60e:	2280      	movs	r2, #128	@ 0x80
 801b610:	0092      	lsls	r2, r2, #2
 801b612:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b614:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b616:	68fa      	ldr	r2, [r7, #12]
 801b618:	4c06      	ldr	r4, [pc, #24]	@ (801b634 <USBD_CDC_EP0_RxReady+0x5c>)
 801b61a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b61c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b61e:	68fa      	ldr	r2, [r7, #12]
 801b620:	2380      	movs	r3, #128	@ 0x80
 801b622:	009b      	lsls	r3, r3, #2
 801b624:	21ff      	movs	r1, #255	@ 0xff
 801b626:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b628:	2300      	movs	r3, #0
}
 801b62a:	0018      	movs	r0, r3
 801b62c:	46bd      	mov	sp, r7
 801b62e:	b005      	add	sp, #20
 801b630:	bd90      	pop	{r4, r7, pc}
 801b632:	46c0      	nop			@ (mov r8, r8)
 801b634:	00000201 	.word	0x00000201

0801b638 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b082      	sub	sp, #8
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	2243      	movs	r2, #67	@ 0x43
 801b644:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b646:	4b02      	ldr	r3, [pc, #8]	@ (801b650 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b648:	0018      	movs	r0, r3
 801b64a:	46bd      	mov	sp, r7
 801b64c:	b002      	add	sp, #8
 801b64e:	bd80      	pop	{r7, pc}
 801b650:	20000174 	.word	0x20000174

0801b654 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b082      	sub	sp, #8
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	2243      	movs	r2, #67	@ 0x43
 801b660:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b662:	4b02      	ldr	r3, [pc, #8]	@ (801b66c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b664:	0018      	movs	r0, r3
 801b666:	46bd      	mov	sp, r7
 801b668:	b002      	add	sp, #8
 801b66a:	bd80      	pop	{r7, pc}
 801b66c:	20000130 	.word	0x20000130

0801b670 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b082      	sub	sp, #8
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	2243      	movs	r2, #67	@ 0x43
 801b67c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b67e:	4b02      	ldr	r3, [pc, #8]	@ (801b688 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b680:	0018      	movs	r0, r3
 801b682:	46bd      	mov	sp, r7
 801b684:	b002      	add	sp, #8
 801b686:	bd80      	pop	{r7, pc}
 801b688:	200001b8 	.word	0x200001b8

0801b68c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b082      	sub	sp, #8
 801b690:	af00      	add	r7, sp, #0
 801b692:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	220a      	movs	r2, #10
 801b698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b69a:	4b02      	ldr	r3, [pc, #8]	@ (801b6a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b69c:	0018      	movs	r0, r3
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	b002      	add	sp, #8
 801b6a2:	bd80      	pop	{r7, pc}
 801b6a4:	200000ec 	.word	0x200000ec

0801b6a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b084      	sub	sp, #16
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
 801b6b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b6b2:	200f      	movs	r0, #15
 801b6b4:	183b      	adds	r3, r7, r0
 801b6b6:	2202      	movs	r2, #2
 801b6b8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d007      	beq.n	801b6d0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b6c0:	687a      	ldr	r2, [r7, #4]
 801b6c2:	23af      	movs	r3, #175	@ 0xaf
 801b6c4:	009b      	lsls	r3, r3, #2
 801b6c6:	6839      	ldr	r1, [r7, #0]
 801b6c8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b6ca:	183b      	adds	r3, r7, r0
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b6d0:	230f      	movs	r3, #15
 801b6d2:	18fb      	adds	r3, r7, r3
 801b6d4:	781b      	ldrb	r3, [r3, #0]
}
 801b6d6:	0018      	movs	r0, r3
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	b004      	add	sp, #16
 801b6dc:	bd80      	pop	{r7, pc}

0801b6de <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b6de:	b580      	push	{r7, lr}
 801b6e0:	b086      	sub	sp, #24
 801b6e2:	af00      	add	r7, sp, #0
 801b6e4:	60f8      	str	r0, [r7, #12]
 801b6e6:	60b9      	str	r1, [r7, #8]
 801b6e8:	1dbb      	adds	r3, r7, #6
 801b6ea:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6ec:	68fa      	ldr	r2, [r7, #12]
 801b6ee:	23ae      	movs	r3, #174	@ 0xae
 801b6f0:	009b      	lsls	r3, r3, #2
 801b6f2:	58d3      	ldr	r3, [r2, r3]
 801b6f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b6f6:	697a      	ldr	r2, [r7, #20]
 801b6f8:	2382      	movs	r3, #130	@ 0x82
 801b6fa:	009b      	lsls	r3, r3, #2
 801b6fc:	68b9      	ldr	r1, [r7, #8]
 801b6fe:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b700:	1dbb      	adds	r3, r7, #6
 801b702:	8819      	ldrh	r1, [r3, #0]
 801b704:	697a      	ldr	r2, [r7, #20]
 801b706:	2384      	movs	r3, #132	@ 0x84
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b70c:	2300      	movs	r3, #0
}
 801b70e:	0018      	movs	r0, r3
 801b710:	46bd      	mov	sp, r7
 801b712:	b006      	add	sp, #24
 801b714:	bd80      	pop	{r7, pc}

0801b716 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b716:	b580      	push	{r7, lr}
 801b718:	b084      	sub	sp, #16
 801b71a:	af00      	add	r7, sp, #0
 801b71c:	6078      	str	r0, [r7, #4]
 801b71e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b720:	687a      	ldr	r2, [r7, #4]
 801b722:	23ae      	movs	r3, #174	@ 0xae
 801b724:	009b      	lsls	r3, r3, #2
 801b726:	58d3      	ldr	r3, [r2, r3]
 801b728:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b72a:	68fa      	ldr	r2, [r7, #12]
 801b72c:	2381      	movs	r3, #129	@ 0x81
 801b72e:	009b      	lsls	r3, r3, #2
 801b730:	6839      	ldr	r1, [r7, #0]
 801b732:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b734:	2300      	movs	r3, #0
}
 801b736:	0018      	movs	r0, r3
 801b738:	46bd      	mov	sp, r7
 801b73a:	b004      	add	sp, #16
 801b73c:	bd80      	pop	{r7, pc}

0801b73e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b73e:	b580      	push	{r7, lr}
 801b740:	b084      	sub	sp, #16
 801b742:	af00      	add	r7, sp, #0
 801b744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b746:	687a      	ldr	r2, [r7, #4]
 801b748:	23ae      	movs	r3, #174	@ 0xae
 801b74a:	009b      	lsls	r3, r3, #2
 801b74c:	58d3      	ldr	r3, [r2, r3]
 801b74e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b750:	687a      	ldr	r2, [r7, #4]
 801b752:	23ae      	movs	r3, #174	@ 0xae
 801b754:	009b      	lsls	r3, r3, #2
 801b756:	58d3      	ldr	r3, [r2, r3]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d022      	beq.n	801b7a2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b75c:	68fa      	ldr	r2, [r7, #12]
 801b75e:	2385      	movs	r3, #133	@ 0x85
 801b760:	009b      	lsls	r3, r3, #2
 801b762:	58d3      	ldr	r3, [r2, r3]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d11a      	bne.n	801b79e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b768:	68fa      	ldr	r2, [r7, #12]
 801b76a:	2385      	movs	r3, #133	@ 0x85
 801b76c:	009b      	lsls	r3, r3, #2
 801b76e:	2101      	movs	r1, #1
 801b770:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b772:	68fa      	ldr	r2, [r7, #12]
 801b774:	2384      	movs	r3, #132	@ 0x84
 801b776:	009b      	lsls	r3, r3, #2
 801b778:	58d2      	ldr	r2, [r2, r3]
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b77e:	68fa      	ldr	r2, [r7, #12]
 801b780:	2382      	movs	r3, #130	@ 0x82
 801b782:	009b      	lsls	r3, r3, #2
 801b784:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b786:	68fa      	ldr	r2, [r7, #12]
 801b788:	2384      	movs	r3, #132	@ 0x84
 801b78a:	009b      	lsls	r3, r3, #2
 801b78c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b78e:	b29b      	uxth	r3, r3
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	000a      	movs	r2, r1
 801b794:	2181      	movs	r1, #129	@ 0x81
 801b796:	f001 ff0c 	bl	801d5b2 <USBD_LL_Transmit>

      return USBD_OK;
 801b79a:	2300      	movs	r3, #0
 801b79c:	e002      	b.n	801b7a4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b79e:	2301      	movs	r3, #1
 801b7a0:	e000      	b.n	801b7a4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b7a2:	2302      	movs	r3, #2
  }
}
 801b7a4:	0018      	movs	r0, r3
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	b004      	add	sp, #16
 801b7aa:	bd80      	pop	{r7, pc}

0801b7ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b084      	sub	sp, #16
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b7b4:	687a      	ldr	r2, [r7, #4]
 801b7b6:	23ae      	movs	r3, #174	@ 0xae
 801b7b8:	009b      	lsls	r3, r3, #2
 801b7ba:	58d3      	ldr	r3, [r2, r3]
 801b7bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b7be:	687a      	ldr	r2, [r7, #4]
 801b7c0:	23ae      	movs	r3, #174	@ 0xae
 801b7c2:	009b      	lsls	r3, r3, #2
 801b7c4:	58d3      	ldr	r3, [r2, r3]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d019      	beq.n	801b7fe <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	7c1b      	ldrb	r3, [r3, #16]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d10a      	bne.n	801b7e8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b7d2:	68fa      	ldr	r2, [r7, #12]
 801b7d4:	2381      	movs	r3, #129	@ 0x81
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	58d2      	ldr	r2, [r2, r3]
 801b7da:	2380      	movs	r3, #128	@ 0x80
 801b7dc:	009b      	lsls	r3, r3, #2
 801b7de:	6878      	ldr	r0, [r7, #4]
 801b7e0:	2101      	movs	r1, #1
 801b7e2:	f001 ff1d 	bl	801d620 <USBD_LL_PrepareReceive>
 801b7e6:	e008      	b.n	801b7fa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b7e8:	68fa      	ldr	r2, [r7, #12]
 801b7ea:	2381      	movs	r3, #129	@ 0x81
 801b7ec:	009b      	lsls	r3, r3, #2
 801b7ee:	58d2      	ldr	r2, [r2, r3]
 801b7f0:	6878      	ldr	r0, [r7, #4]
 801b7f2:	2340      	movs	r3, #64	@ 0x40
 801b7f4:	2101      	movs	r1, #1
 801b7f6:	f001 ff13 	bl	801d620 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	e000      	b.n	801b800 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b7fe:	2302      	movs	r3, #2
  }
}
 801b800:	0018      	movs	r0, r3
 801b802:	46bd      	mov	sp, r7
 801b804:	b004      	add	sp, #16
 801b806:	bd80      	pop	{r7, pc}

0801b808 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b084      	sub	sp, #16
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	60f8      	str	r0, [r7, #12]
 801b810:	60b9      	str	r1, [r7, #8]
 801b812:	1dfb      	adds	r3, r7, #7
 801b814:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d101      	bne.n	801b820 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b81c:	2302      	movs	r3, #2
 801b81e:	e020      	b.n	801b862 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b820:	68fa      	ldr	r2, [r7, #12]
 801b822:	23ad      	movs	r3, #173	@ 0xad
 801b824:	009b      	lsls	r3, r3, #2
 801b826:	58d3      	ldr	r3, [r2, r3]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d004      	beq.n	801b836 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b82c:	68fa      	ldr	r2, [r7, #12]
 801b82e:	23ad      	movs	r3, #173	@ 0xad
 801b830:	009b      	lsls	r3, r3, #2
 801b832:	2100      	movs	r1, #0
 801b834:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b836:	68bb      	ldr	r3, [r7, #8]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d004      	beq.n	801b846 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b83c:	68fa      	ldr	r2, [r7, #12]
 801b83e:	23ac      	movs	r3, #172	@ 0xac
 801b840:	009b      	lsls	r3, r3, #2
 801b842:	68b9      	ldr	r1, [r7, #8]
 801b844:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b846:	68fa      	ldr	r2, [r7, #12]
 801b848:	23a7      	movs	r3, #167	@ 0xa7
 801b84a:	009b      	lsls	r3, r3, #2
 801b84c:	2101      	movs	r1, #1
 801b84e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	1dfa      	adds	r2, r7, #7
 801b854:	7812      	ldrb	r2, [r2, #0]
 801b856:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	0018      	movs	r0, r3
 801b85c:	f001 fd0c 	bl	801d278 <USBD_LL_Init>

  return USBD_OK;
 801b860:	2300      	movs	r3, #0
}
 801b862:	0018      	movs	r0, r3
 801b864:	46bd      	mov	sp, r7
 801b866:	b004      	add	sp, #16
 801b868:	bd80      	pop	{r7, pc}

0801b86a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b86a:	b580      	push	{r7, lr}
 801b86c:	b084      	sub	sp, #16
 801b86e:	af00      	add	r7, sp, #0
 801b870:	6078      	str	r0, [r7, #4]
 801b872:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b874:	200f      	movs	r0, #15
 801b876:	183b      	adds	r3, r7, r0
 801b878:	2200      	movs	r2, #0
 801b87a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b87c:	683b      	ldr	r3, [r7, #0]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d008      	beq.n	801b894 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b882:	687a      	ldr	r2, [r7, #4]
 801b884:	23ad      	movs	r3, #173	@ 0xad
 801b886:	009b      	lsls	r3, r3, #2
 801b888:	6839      	ldr	r1, [r7, #0]
 801b88a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b88c:	183b      	adds	r3, r7, r0
 801b88e:	2200      	movs	r2, #0
 801b890:	701a      	strb	r2, [r3, #0]
 801b892:	e003      	b.n	801b89c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b894:	230f      	movs	r3, #15
 801b896:	18fb      	adds	r3, r7, r3
 801b898:	2202      	movs	r2, #2
 801b89a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b89c:	230f      	movs	r3, #15
 801b89e:	18fb      	adds	r3, r7, r3
 801b8a0:	781b      	ldrb	r3, [r3, #0]
}
 801b8a2:	0018      	movs	r0, r3
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	b004      	add	sp, #16
 801b8a8:	bd80      	pop	{r7, pc}

0801b8aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b8aa:	b580      	push	{r7, lr}
 801b8ac:	b082      	sub	sp, #8
 801b8ae:	af00      	add	r7, sp, #0
 801b8b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	0018      	movs	r0, r3
 801b8b6:	f001 fd43 	bl	801d340 <USBD_LL_Start>

  return USBD_OK;
 801b8ba:	2300      	movs	r3, #0
}
 801b8bc:	0018      	movs	r0, r3
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	b002      	add	sp, #8
 801b8c2:	bd80      	pop	{r7, pc}

0801b8c4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b082      	sub	sp, #8
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b8cc:	2300      	movs	r3, #0
}
 801b8ce:	0018      	movs	r0, r3
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	b002      	add	sp, #8
 801b8d4:	bd80      	pop	{r7, pc}

0801b8d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b8d6:	b590      	push	{r4, r7, lr}
 801b8d8:	b085      	sub	sp, #20
 801b8da:	af00      	add	r7, sp, #0
 801b8dc:	6078      	str	r0, [r7, #4]
 801b8de:	000a      	movs	r2, r1
 801b8e0:	1cfb      	adds	r3, r7, #3
 801b8e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b8e4:	240f      	movs	r4, #15
 801b8e6:	193b      	adds	r3, r7, r4
 801b8e8:	2202      	movs	r2, #2
 801b8ea:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b8ec:	687a      	ldr	r2, [r7, #4]
 801b8ee:	23ad      	movs	r3, #173	@ 0xad
 801b8f0:	009b      	lsls	r3, r3, #2
 801b8f2:	58d3      	ldr	r3, [r2, r3]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d00e      	beq.n	801b916 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b8f8:	687a      	ldr	r2, [r7, #4]
 801b8fa:	23ad      	movs	r3, #173	@ 0xad
 801b8fc:	009b      	lsls	r3, r3, #2
 801b8fe:	58d3      	ldr	r3, [r2, r3]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	1cfa      	adds	r2, r7, #3
 801b904:	7811      	ldrb	r1, [r2, #0]
 801b906:	687a      	ldr	r2, [r7, #4]
 801b908:	0010      	movs	r0, r2
 801b90a:	4798      	blx	r3
 801b90c:	1e03      	subs	r3, r0, #0
 801b90e:	d102      	bne.n	801b916 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b910:	193b      	adds	r3, r7, r4
 801b912:	2200      	movs	r2, #0
 801b914:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b916:	230f      	movs	r3, #15
 801b918:	18fb      	adds	r3, r7, r3
 801b91a:	781b      	ldrb	r3, [r3, #0]
}
 801b91c:	0018      	movs	r0, r3
 801b91e:	46bd      	mov	sp, r7
 801b920:	b005      	add	sp, #20
 801b922:	bd90      	pop	{r4, r7, pc}

0801b924 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b082      	sub	sp, #8
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
 801b92c:	000a      	movs	r2, r1
 801b92e:	1cfb      	adds	r3, r7, #3
 801b930:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b932:	687a      	ldr	r2, [r7, #4]
 801b934:	23ad      	movs	r3, #173	@ 0xad
 801b936:	009b      	lsls	r3, r3, #2
 801b938:	58d3      	ldr	r3, [r2, r3]
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	1cfa      	adds	r2, r7, #3
 801b93e:	7811      	ldrb	r1, [r2, #0]
 801b940:	687a      	ldr	r2, [r7, #4]
 801b942:	0010      	movs	r0, r2
 801b944:	4798      	blx	r3

  return USBD_OK;
 801b946:	2300      	movs	r3, #0
}
 801b948:	0018      	movs	r0, r3
 801b94a:	46bd      	mov	sp, r7
 801b94c:	b002      	add	sp, #8
 801b94e:	bd80      	pop	{r7, pc}

0801b950 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b082      	sub	sp, #8
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
 801b958:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	22aa      	movs	r2, #170	@ 0xaa
 801b95e:	0092      	lsls	r2, r2, #2
 801b960:	4694      	mov	ip, r2
 801b962:	4463      	add	r3, ip
 801b964:	683a      	ldr	r2, [r7, #0]
 801b966:	0011      	movs	r1, r2
 801b968:	0018      	movs	r0, r3
 801b96a:	f001 f810 	bl	801c98e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b96e:	687a      	ldr	r2, [r7, #4]
 801b970:	23a5      	movs	r3, #165	@ 0xa5
 801b972:	009b      	lsls	r3, r3, #2
 801b974:	2101      	movs	r1, #1
 801b976:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	4a23      	ldr	r2, [pc, #140]	@ (801ba08 <USBD_LL_SetupStage+0xb8>)
 801b97c:	5a9b      	ldrh	r3, [r3, r2]
 801b97e:	0019      	movs	r1, r3
 801b980:	687a      	ldr	r2, [r7, #4]
 801b982:	23a6      	movs	r3, #166	@ 0xa6
 801b984:	009b      	lsls	r3, r3, #2
 801b986:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b988:	687a      	ldr	r2, [r7, #4]
 801b98a:	23aa      	movs	r3, #170	@ 0xaa
 801b98c:	009b      	lsls	r3, r3, #2
 801b98e:	5cd3      	ldrb	r3, [r2, r3]
 801b990:	001a      	movs	r2, r3
 801b992:	231f      	movs	r3, #31
 801b994:	4013      	ands	r3, r2
 801b996:	2b02      	cmp	r3, #2
 801b998:	d019      	beq.n	801b9ce <USBD_LL_SetupStage+0x7e>
 801b99a:	d822      	bhi.n	801b9e2 <USBD_LL_SetupStage+0x92>
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d002      	beq.n	801b9a6 <USBD_LL_SetupStage+0x56>
 801b9a0:	2b01      	cmp	r3, #1
 801b9a2:	d00a      	beq.n	801b9ba <USBD_LL_SetupStage+0x6a>
 801b9a4:	e01d      	b.n	801b9e2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	22aa      	movs	r2, #170	@ 0xaa
 801b9aa:	0092      	lsls	r2, r2, #2
 801b9ac:	189a      	adds	r2, r3, r2
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	0011      	movs	r1, r2
 801b9b2:	0018      	movs	r0, r3
 801b9b4:	f000 fa10 	bl	801bdd8 <USBD_StdDevReq>
      break;
 801b9b8:	e020      	b.n	801b9fc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	22aa      	movs	r2, #170	@ 0xaa
 801b9be:	0092      	lsls	r2, r2, #2
 801b9c0:	189a      	adds	r2, r3, r2
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	0011      	movs	r1, r2
 801b9c6:	0018      	movs	r0, r3
 801b9c8:	f000 fa78 	bl	801bebc <USBD_StdItfReq>
      break;
 801b9cc:	e016      	b.n	801b9fc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	22aa      	movs	r2, #170	@ 0xaa
 801b9d2:	0092      	lsls	r2, r2, #2
 801b9d4:	189a      	adds	r2, r3, r2
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	0011      	movs	r1, r2
 801b9da:	0018      	movs	r0, r3
 801b9dc:	f000 fac5 	bl	801bf6a <USBD_StdEPReq>
      break;
 801b9e0:	e00c      	b.n	801b9fc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b9e2:	687a      	ldr	r2, [r7, #4]
 801b9e4:	23aa      	movs	r3, #170	@ 0xaa
 801b9e6:	009b      	lsls	r3, r3, #2
 801b9e8:	5cd3      	ldrb	r3, [r2, r3]
 801b9ea:	227f      	movs	r2, #127	@ 0x7f
 801b9ec:	4393      	bics	r3, r2
 801b9ee:	b2da      	uxtb	r2, r3
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	0011      	movs	r1, r2
 801b9f4:	0018      	movs	r0, r3
 801b9f6:	f001 fd2a 	bl	801d44e <USBD_LL_StallEP>
      break;
 801b9fa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b9fc:	2300      	movs	r3, #0
}
 801b9fe:	0018      	movs	r0, r3
 801ba00:	46bd      	mov	sp, r7
 801ba02:	b002      	add	sp, #8
 801ba04:	bd80      	pop	{r7, pc}
 801ba06:	46c0      	nop			@ (mov r8, r8)
 801ba08:	000002ae 	.word	0x000002ae

0801ba0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b086      	sub	sp, #24
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	60f8      	str	r0, [r7, #12]
 801ba14:	607a      	str	r2, [r7, #4]
 801ba16:	200b      	movs	r0, #11
 801ba18:	183b      	adds	r3, r7, r0
 801ba1a:	1c0a      	adds	r2, r1, #0
 801ba1c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ba1e:	183b      	adds	r3, r7, r0
 801ba20:	781b      	ldrb	r3, [r3, #0]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d154      	bne.n	801bad0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	3355      	adds	r3, #85	@ 0x55
 801ba2a:	33ff      	adds	r3, #255	@ 0xff
 801ba2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801ba2e:	68fa      	ldr	r2, [r7, #12]
 801ba30:	23a5      	movs	r3, #165	@ 0xa5
 801ba32:	009b      	lsls	r3, r3, #2
 801ba34:	58d3      	ldr	r3, [r2, r3]
 801ba36:	2b03      	cmp	r3, #3
 801ba38:	d139      	bne.n	801baae <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	68da      	ldr	r2, [r3, #12]
 801ba3e:	697b      	ldr	r3, [r7, #20]
 801ba40:	691b      	ldr	r3, [r3, #16]
 801ba42:	429a      	cmp	r2, r3
 801ba44:	d919      	bls.n	801ba7a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801ba46:	697b      	ldr	r3, [r7, #20]
 801ba48:	68da      	ldr	r2, [r3, #12]
 801ba4a:	697b      	ldr	r3, [r7, #20]
 801ba4c:	691b      	ldr	r3, [r3, #16]
 801ba4e:	1ad2      	subs	r2, r2, r3
 801ba50:	697b      	ldr	r3, [r7, #20]
 801ba52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ba54:	697b      	ldr	r3, [r7, #20]
 801ba56:	68da      	ldr	r2, [r3, #12]
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ba5c:	429a      	cmp	r2, r3
 801ba5e:	d203      	bcs.n	801ba68 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ba60:	697b      	ldr	r3, [r7, #20]
 801ba62:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801ba64:	b29b      	uxth	r3, r3
 801ba66:	e002      	b.n	801ba6e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ba68:	697b      	ldr	r3, [r7, #20]
 801ba6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ba6c:	b29b      	uxth	r3, r3
 801ba6e:	6879      	ldr	r1, [r7, #4]
 801ba70:	68f8      	ldr	r0, [r7, #12]
 801ba72:	001a      	movs	r2, r3
 801ba74:	f001 f898 	bl	801cba8 <USBD_CtlContinueRx>
 801ba78:	e045      	b.n	801bb06 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ba7a:	68fa      	ldr	r2, [r7, #12]
 801ba7c:	23ad      	movs	r3, #173	@ 0xad
 801ba7e:	009b      	lsls	r3, r3, #2
 801ba80:	58d3      	ldr	r3, [r2, r3]
 801ba82:	691b      	ldr	r3, [r3, #16]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d00d      	beq.n	801baa4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ba88:	68fa      	ldr	r2, [r7, #12]
 801ba8a:	23a7      	movs	r3, #167	@ 0xa7
 801ba8c:	009b      	lsls	r3, r3, #2
 801ba8e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ba90:	2b03      	cmp	r3, #3
 801ba92:	d107      	bne.n	801baa4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801ba94:	68fa      	ldr	r2, [r7, #12]
 801ba96:	23ad      	movs	r3, #173	@ 0xad
 801ba98:	009b      	lsls	r3, r3, #2
 801ba9a:	58d3      	ldr	r3, [r2, r3]
 801ba9c:	691b      	ldr	r3, [r3, #16]
 801ba9e:	68fa      	ldr	r2, [r7, #12]
 801baa0:	0010      	movs	r0, r2
 801baa2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	0018      	movs	r0, r3
 801baa8:	f001 f891 	bl	801cbce <USBD_CtlSendStatus>
 801baac:	e02b      	b.n	801bb06 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801baae:	68fa      	ldr	r2, [r7, #12]
 801bab0:	23a5      	movs	r3, #165	@ 0xa5
 801bab2:	009b      	lsls	r3, r3, #2
 801bab4:	58d3      	ldr	r3, [r2, r3]
 801bab6:	2b05      	cmp	r3, #5
 801bab8:	d125      	bne.n	801bb06 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801baba:	68fa      	ldr	r2, [r7, #12]
 801babc:	23a5      	movs	r3, #165	@ 0xa5
 801babe:	009b      	lsls	r3, r3, #2
 801bac0:	2100      	movs	r1, #0
 801bac2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	2100      	movs	r1, #0
 801bac8:	0018      	movs	r0, r3
 801baca:	f001 fcc0 	bl	801d44e <USBD_LL_StallEP>
 801bace:	e01a      	b.n	801bb06 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bad0:	68fa      	ldr	r2, [r7, #12]
 801bad2:	23ad      	movs	r3, #173	@ 0xad
 801bad4:	009b      	lsls	r3, r3, #2
 801bad6:	58d3      	ldr	r3, [r2, r3]
 801bad8:	699b      	ldr	r3, [r3, #24]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d011      	beq.n	801bb02 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bade:	68fa      	ldr	r2, [r7, #12]
 801bae0:	23a7      	movs	r3, #167	@ 0xa7
 801bae2:	009b      	lsls	r3, r3, #2
 801bae4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bae6:	2b03      	cmp	r3, #3
 801bae8:	d10b      	bne.n	801bb02 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801baea:	68fa      	ldr	r2, [r7, #12]
 801baec:	23ad      	movs	r3, #173	@ 0xad
 801baee:	009b      	lsls	r3, r3, #2
 801baf0:	58d3      	ldr	r3, [r2, r3]
 801baf2:	699b      	ldr	r3, [r3, #24]
 801baf4:	220b      	movs	r2, #11
 801baf6:	18ba      	adds	r2, r7, r2
 801baf8:	7811      	ldrb	r1, [r2, #0]
 801bafa:	68fa      	ldr	r2, [r7, #12]
 801bafc:	0010      	movs	r0, r2
 801bafe:	4798      	blx	r3
 801bb00:	e001      	b.n	801bb06 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bb02:	2302      	movs	r3, #2
 801bb04:	e000      	b.n	801bb08 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bb06:	2300      	movs	r3, #0
}
 801bb08:	0018      	movs	r0, r3
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	b006      	add	sp, #24
 801bb0e:	bd80      	pop	{r7, pc}

0801bb10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b086      	sub	sp, #24
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	60f8      	str	r0, [r7, #12]
 801bb18:	607a      	str	r2, [r7, #4]
 801bb1a:	200b      	movs	r0, #11
 801bb1c:	183b      	adds	r3, r7, r0
 801bb1e:	1c0a      	adds	r2, r1, #0
 801bb20:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bb22:	183b      	adds	r3, r7, r0
 801bb24:	781b      	ldrb	r3, [r3, #0]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d000      	beq.n	801bb2c <USBD_LL_DataInStage+0x1c>
 801bb2a:	e08e      	b.n	801bc4a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	3314      	adds	r3, #20
 801bb30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bb32:	68fa      	ldr	r2, [r7, #12]
 801bb34:	23a5      	movs	r3, #165	@ 0xa5
 801bb36:	009b      	lsls	r3, r3, #2
 801bb38:	58d3      	ldr	r3, [r2, r3]
 801bb3a:	2b02      	cmp	r3, #2
 801bb3c:	d164      	bne.n	801bc08 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	68da      	ldr	r2, [r3, #12]
 801bb42:	697b      	ldr	r3, [r7, #20]
 801bb44:	691b      	ldr	r3, [r3, #16]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d915      	bls.n	801bb76 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bb4a:	697b      	ldr	r3, [r7, #20]
 801bb4c:	68da      	ldr	r2, [r3, #12]
 801bb4e:	697b      	ldr	r3, [r7, #20]
 801bb50:	691b      	ldr	r3, [r3, #16]
 801bb52:	1ad2      	subs	r2, r2, r3
 801bb54:	697b      	ldr	r3, [r7, #20]
 801bb56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bb58:	697b      	ldr	r3, [r7, #20]
 801bb5a:	68db      	ldr	r3, [r3, #12]
 801bb5c:	b29a      	uxth	r2, r3
 801bb5e:	6879      	ldr	r1, [r7, #4]
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	0018      	movs	r0, r3
 801bb64:	f000 ffe9 	bl	801cb3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bb68:	68f8      	ldr	r0, [r7, #12]
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	2100      	movs	r1, #0
 801bb70:	f001 fd56 	bl	801d620 <USBD_LL_PrepareReceive>
 801bb74:	e059      	b.n	801bc2a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bb76:	697b      	ldr	r3, [r7, #20]
 801bb78:	689a      	ldr	r2, [r3, #8]
 801bb7a:	697b      	ldr	r3, [r7, #20]
 801bb7c:	691b      	ldr	r3, [r3, #16]
 801bb7e:	0019      	movs	r1, r3
 801bb80:	0010      	movs	r0, r2
 801bb82:	f7e4 fb95 	bl	80002b0 <__aeabi_uidivmod>
 801bb86:	1e0b      	subs	r3, r1, #0
 801bb88:	d11f      	bne.n	801bbca <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bb8a:	697b      	ldr	r3, [r7, #20]
 801bb8c:	689a      	ldr	r2, [r3, #8]
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d319      	bcc.n	801bbca <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bb96:	697b      	ldr	r3, [r7, #20]
 801bb98:	689a      	ldr	r2, [r3, #8]
 801bb9a:	68f9      	ldr	r1, [r7, #12]
 801bb9c:	23a6      	movs	r3, #166	@ 0xa6
 801bb9e:	009b      	lsls	r3, r3, #2
 801bba0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d211      	bcs.n	801bbca <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	2200      	movs	r2, #0
 801bbaa:	2100      	movs	r1, #0
 801bbac:	0018      	movs	r0, r3
 801bbae:	f000 ffc4 	bl	801cb3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bbb2:	68fa      	ldr	r2, [r7, #12]
 801bbb4:	23a6      	movs	r3, #166	@ 0xa6
 801bbb6:	009b      	lsls	r3, r3, #2
 801bbb8:	2100      	movs	r1, #0
 801bbba:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bbbc:	68f8      	ldr	r0, [r7, #12]
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	2100      	movs	r1, #0
 801bbc4:	f001 fd2c 	bl	801d620 <USBD_LL_PrepareReceive>
 801bbc8:	e02f      	b.n	801bc2a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bbca:	68fa      	ldr	r2, [r7, #12]
 801bbcc:	23ad      	movs	r3, #173	@ 0xad
 801bbce:	009b      	lsls	r3, r3, #2
 801bbd0:	58d3      	ldr	r3, [r2, r3]
 801bbd2:	68db      	ldr	r3, [r3, #12]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d00d      	beq.n	801bbf4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bbd8:	68fa      	ldr	r2, [r7, #12]
 801bbda:	23a7      	movs	r3, #167	@ 0xa7
 801bbdc:	009b      	lsls	r3, r3, #2
 801bbde:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bbe0:	2b03      	cmp	r3, #3
 801bbe2:	d107      	bne.n	801bbf4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bbe4:	68fa      	ldr	r2, [r7, #12]
 801bbe6:	23ad      	movs	r3, #173	@ 0xad
 801bbe8:	009b      	lsls	r3, r3, #2
 801bbea:	58d3      	ldr	r3, [r2, r3]
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	68fa      	ldr	r2, [r7, #12]
 801bbf0:	0010      	movs	r0, r2
 801bbf2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	2180      	movs	r1, #128	@ 0x80
 801bbf8:	0018      	movs	r0, r3
 801bbfa:	f001 fc28 	bl	801d44e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	0018      	movs	r0, r3
 801bc02:	f000 fff8 	bl	801cbf6 <USBD_CtlReceiveStatus>
 801bc06:	e010      	b.n	801bc2a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bc08:	68fa      	ldr	r2, [r7, #12]
 801bc0a:	23a5      	movs	r3, #165	@ 0xa5
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	58d3      	ldr	r3, [r2, r3]
 801bc10:	2b04      	cmp	r3, #4
 801bc12:	d005      	beq.n	801bc20 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bc14:	68fa      	ldr	r2, [r7, #12]
 801bc16:	23a5      	movs	r3, #165	@ 0xa5
 801bc18:	009b      	lsls	r3, r3, #2
 801bc1a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d104      	bne.n	801bc2a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	2180      	movs	r1, #128	@ 0x80
 801bc24:	0018      	movs	r0, r3
 801bc26:	f001 fc12 	bl	801d44e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bc2a:	68fa      	ldr	r2, [r7, #12]
 801bc2c:	23a8      	movs	r3, #168	@ 0xa8
 801bc2e:	009b      	lsls	r3, r3, #2
 801bc30:	5cd3      	ldrb	r3, [r2, r3]
 801bc32:	2b01      	cmp	r3, #1
 801bc34:	d124      	bne.n	801bc80 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	0018      	movs	r0, r3
 801bc3a:	f7ff fe43 	bl	801b8c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bc3e:	68fa      	ldr	r2, [r7, #12]
 801bc40:	23a8      	movs	r3, #168	@ 0xa8
 801bc42:	009b      	lsls	r3, r3, #2
 801bc44:	2100      	movs	r1, #0
 801bc46:	54d1      	strb	r1, [r2, r3]
 801bc48:	e01a      	b.n	801bc80 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bc4a:	68fa      	ldr	r2, [r7, #12]
 801bc4c:	23ad      	movs	r3, #173	@ 0xad
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	58d3      	ldr	r3, [r2, r3]
 801bc52:	695b      	ldr	r3, [r3, #20]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d011      	beq.n	801bc7c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bc58:	68fa      	ldr	r2, [r7, #12]
 801bc5a:	23a7      	movs	r3, #167	@ 0xa7
 801bc5c:	009b      	lsls	r3, r3, #2
 801bc5e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bc60:	2b03      	cmp	r3, #3
 801bc62:	d10b      	bne.n	801bc7c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bc64:	68fa      	ldr	r2, [r7, #12]
 801bc66:	23ad      	movs	r3, #173	@ 0xad
 801bc68:	009b      	lsls	r3, r3, #2
 801bc6a:	58d3      	ldr	r3, [r2, r3]
 801bc6c:	695b      	ldr	r3, [r3, #20]
 801bc6e:	220b      	movs	r2, #11
 801bc70:	18ba      	adds	r2, r7, r2
 801bc72:	7811      	ldrb	r1, [r2, #0]
 801bc74:	68fa      	ldr	r2, [r7, #12]
 801bc76:	0010      	movs	r0, r2
 801bc78:	4798      	blx	r3
 801bc7a:	e001      	b.n	801bc80 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bc7c:	2302      	movs	r3, #2
 801bc7e:	e000      	b.n	801bc82 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bc80:	2300      	movs	r3, #0
}
 801bc82:	0018      	movs	r0, r3
 801bc84:	46bd      	mov	sp, r7
 801bc86:	b006      	add	sp, #24
 801bc88:	bd80      	pop	{r7, pc}

0801bc8a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bc8a:	b580      	push	{r7, lr}
 801bc8c:	b082      	sub	sp, #8
 801bc8e:	af00      	add	r7, sp, #0
 801bc90:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bc92:	6878      	ldr	r0, [r7, #4]
 801bc94:	2340      	movs	r3, #64	@ 0x40
 801bc96:	2200      	movs	r2, #0
 801bc98:	2100      	movs	r1, #0
 801bc9a:	f001 fb76 	bl	801d38a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bc9e:	687a      	ldr	r2, [r7, #4]
 801bca0:	23ac      	movs	r3, #172	@ 0xac
 801bca2:	005b      	lsls	r3, r3, #1
 801bca4:	2101      	movs	r1, #1
 801bca6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bca8:	687a      	ldr	r2, [r7, #4]
 801bcaa:	23b2      	movs	r3, #178	@ 0xb2
 801bcac:	005b      	lsls	r3, r3, #1
 801bcae:	2140      	movs	r1, #64	@ 0x40
 801bcb0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bcb2:	6878      	ldr	r0, [r7, #4]
 801bcb4:	2340      	movs	r3, #64	@ 0x40
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	2180      	movs	r1, #128	@ 0x80
 801bcba:	f001 fb66 	bl	801d38a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	2201      	movs	r2, #1
 801bcc2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2240      	movs	r2, #64	@ 0x40
 801bcc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	23a7      	movs	r3, #167	@ 0xa7
 801bcce:	009b      	lsls	r3, r3, #2
 801bcd0:	2101      	movs	r1, #1
 801bcd2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801bcd4:	687a      	ldr	r2, [r7, #4]
 801bcd6:	23a5      	movs	r3, #165	@ 0xa5
 801bcd8:	009b      	lsls	r3, r3, #2
 801bcda:	2100      	movs	r1, #0
 801bcdc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	2200      	movs	r2, #0
 801bce2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	23a9      	movs	r3, #169	@ 0xa9
 801bce8:	009b      	lsls	r3, r3, #2
 801bcea:	2100      	movs	r1, #0
 801bcec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801bcee:	687a      	ldr	r2, [r7, #4]
 801bcf0:	23ae      	movs	r3, #174	@ 0xae
 801bcf2:	009b      	lsls	r3, r3, #2
 801bcf4:	58d3      	ldr	r3, [r2, r3]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d00a      	beq.n	801bd10 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801bcfa:	687a      	ldr	r2, [r7, #4]
 801bcfc:	23ad      	movs	r3, #173	@ 0xad
 801bcfe:	009b      	lsls	r3, r3, #2
 801bd00:	58d3      	ldr	r3, [r2, r3]
 801bd02:	685a      	ldr	r2, [r3, #4]
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	685b      	ldr	r3, [r3, #4]
 801bd08:	b2d9      	uxtb	r1, r3
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	0018      	movs	r0, r3
 801bd0e:	4790      	blx	r2
  }

  return USBD_OK;
 801bd10:	2300      	movs	r3, #0
}
 801bd12:	0018      	movs	r0, r3
 801bd14:	46bd      	mov	sp, r7
 801bd16:	b002      	add	sp, #8
 801bd18:	bd80      	pop	{r7, pc}

0801bd1a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bd1a:	b580      	push	{r7, lr}
 801bd1c:	b082      	sub	sp, #8
 801bd1e:	af00      	add	r7, sp, #0
 801bd20:	6078      	str	r0, [r7, #4]
 801bd22:	000a      	movs	r2, r1
 801bd24:	1cfb      	adds	r3, r7, #3
 801bd26:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	1cfa      	adds	r2, r7, #3
 801bd2c:	7812      	ldrb	r2, [r2, #0]
 801bd2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bd30:	2300      	movs	r3, #0
}
 801bd32:	0018      	movs	r0, r3
 801bd34:	46bd      	mov	sp, r7
 801bd36:	b002      	add	sp, #8
 801bd38:	bd80      	pop	{r7, pc}
	...

0801bd3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	b082      	sub	sp, #8
 801bd40:	af00      	add	r7, sp, #0
 801bd42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bd44:	687a      	ldr	r2, [r7, #4]
 801bd46:	23a7      	movs	r3, #167	@ 0xa7
 801bd48:	009b      	lsls	r3, r3, #2
 801bd4a:	5cd1      	ldrb	r1, [r2, r3]
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	4a06      	ldr	r2, [pc, #24]	@ (801bd68 <USBD_LL_Suspend+0x2c>)
 801bd50:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bd52:	687a      	ldr	r2, [r7, #4]
 801bd54:	23a7      	movs	r3, #167	@ 0xa7
 801bd56:	009b      	lsls	r3, r3, #2
 801bd58:	2104      	movs	r1, #4
 801bd5a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bd5c:	2300      	movs	r3, #0
}
 801bd5e:	0018      	movs	r0, r3
 801bd60:	46bd      	mov	sp, r7
 801bd62:	b002      	add	sp, #8
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	46c0      	nop			@ (mov r8, r8)
 801bd68:	0000029d 	.word	0x0000029d

0801bd6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b082      	sub	sp, #8
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bd74:	687a      	ldr	r2, [r7, #4]
 801bd76:	23a7      	movs	r3, #167	@ 0xa7
 801bd78:	009b      	lsls	r3, r3, #2
 801bd7a:	5cd3      	ldrb	r3, [r2, r3]
 801bd7c:	2b04      	cmp	r3, #4
 801bd7e:	d106      	bne.n	801bd8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	4a05      	ldr	r2, [pc, #20]	@ (801bd98 <USBD_LL_Resume+0x2c>)
 801bd84:	5c99      	ldrb	r1, [r3, r2]
 801bd86:	687a      	ldr	r2, [r7, #4]
 801bd88:	23a7      	movs	r3, #167	@ 0xa7
 801bd8a:	009b      	lsls	r3, r3, #2
 801bd8c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bd8e:	2300      	movs	r3, #0
}
 801bd90:	0018      	movs	r0, r3
 801bd92:	46bd      	mov	sp, r7
 801bd94:	b002      	add	sp, #8
 801bd96:	bd80      	pop	{r7, pc}
 801bd98:	0000029d 	.word	0x0000029d

0801bd9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	b082      	sub	sp, #8
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bda4:	687a      	ldr	r2, [r7, #4]
 801bda6:	23a7      	movs	r3, #167	@ 0xa7
 801bda8:	009b      	lsls	r3, r3, #2
 801bdaa:	5cd3      	ldrb	r3, [r2, r3]
 801bdac:	2b03      	cmp	r3, #3
 801bdae:	d10e      	bne.n	801bdce <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bdb0:	687a      	ldr	r2, [r7, #4]
 801bdb2:	23ad      	movs	r3, #173	@ 0xad
 801bdb4:	009b      	lsls	r3, r3, #2
 801bdb6:	58d3      	ldr	r3, [r2, r3]
 801bdb8:	69db      	ldr	r3, [r3, #28]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d007      	beq.n	801bdce <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bdbe:	687a      	ldr	r2, [r7, #4]
 801bdc0:	23ad      	movs	r3, #173	@ 0xad
 801bdc2:	009b      	lsls	r3, r3, #2
 801bdc4:	58d3      	ldr	r3, [r2, r3]
 801bdc6:	69db      	ldr	r3, [r3, #28]
 801bdc8:	687a      	ldr	r2, [r7, #4]
 801bdca:	0010      	movs	r0, r2
 801bdcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bdce:	2300      	movs	r3, #0
}
 801bdd0:	0018      	movs	r0, r3
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	b002      	add	sp, #8
 801bdd6:	bd80      	pop	{r7, pc}

0801bdd8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b084      	sub	sp, #16
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
 801bde0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bde2:	230f      	movs	r3, #15
 801bde4:	18fb      	adds	r3, r7, r3
 801bde6:	2200      	movs	r2, #0
 801bde8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bdea:	683b      	ldr	r3, [r7, #0]
 801bdec:	781b      	ldrb	r3, [r3, #0]
 801bdee:	001a      	movs	r2, r3
 801bdf0:	2360      	movs	r3, #96	@ 0x60
 801bdf2:	4013      	ands	r3, r2
 801bdf4:	2b40      	cmp	r3, #64	@ 0x40
 801bdf6:	d004      	beq.n	801be02 <USBD_StdDevReq+0x2a>
 801bdf8:	d84f      	bhi.n	801be9a <USBD_StdDevReq+0xc2>
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d00b      	beq.n	801be16 <USBD_StdDevReq+0x3e>
 801bdfe:	2b20      	cmp	r3, #32
 801be00:	d14b      	bne.n	801be9a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	23ad      	movs	r3, #173	@ 0xad
 801be06:	009b      	lsls	r3, r3, #2
 801be08:	58d3      	ldr	r3, [r2, r3]
 801be0a:	689b      	ldr	r3, [r3, #8]
 801be0c:	6839      	ldr	r1, [r7, #0]
 801be0e:	687a      	ldr	r2, [r7, #4]
 801be10:	0010      	movs	r0, r2
 801be12:	4798      	blx	r3
      break;
 801be14:	e048      	b.n	801bea8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	785b      	ldrb	r3, [r3, #1]
 801be1a:	2b09      	cmp	r3, #9
 801be1c:	d835      	bhi.n	801be8a <USBD_StdDevReq+0xb2>
 801be1e:	009a      	lsls	r2, r3, #2
 801be20:	4b25      	ldr	r3, [pc, #148]	@ (801beb8 <USBD_StdDevReq+0xe0>)
 801be22:	18d3      	adds	r3, r2, r3
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801be28:	683a      	ldr	r2, [r7, #0]
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	0011      	movs	r1, r2
 801be2e:	0018      	movs	r0, r3
 801be30:	f000 fa52 	bl	801c2d8 <USBD_GetDescriptor>
          break;
 801be34:	e030      	b.n	801be98 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801be36:	683a      	ldr	r2, [r7, #0]
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	0011      	movs	r1, r2
 801be3c:	0018      	movs	r0, r3
 801be3e:	f000 fbfd 	bl	801c63c <USBD_SetAddress>
          break;
 801be42:	e029      	b.n	801be98 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801be44:	683a      	ldr	r2, [r7, #0]
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	0011      	movs	r1, r2
 801be4a:	0018      	movs	r0, r3
 801be4c:	f000 fc4a 	bl	801c6e4 <USBD_SetConfig>
          break;
 801be50:	e022      	b.n	801be98 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801be52:	683a      	ldr	r2, [r7, #0]
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	0011      	movs	r1, r2
 801be58:	0018      	movs	r0, r3
 801be5a:	f000 fce7 	bl	801c82c <USBD_GetConfig>
          break;
 801be5e:	e01b      	b.n	801be98 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801be60:	683a      	ldr	r2, [r7, #0]
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	0011      	movs	r1, r2
 801be66:	0018      	movs	r0, r3
 801be68:	f000 fd1b 	bl	801c8a2 <USBD_GetStatus>
          break;
 801be6c:	e014      	b.n	801be98 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801be6e:	683a      	ldr	r2, [r7, #0]
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	0011      	movs	r1, r2
 801be74:	0018      	movs	r0, r3
 801be76:	f000 fd4e 	bl	801c916 <USBD_SetFeature>
          break;
 801be7a:	e00d      	b.n	801be98 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801be7c:	683a      	ldr	r2, [r7, #0]
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	0011      	movs	r1, r2
 801be82:	0018      	movs	r0, r3
 801be84:	f000 fd5d 	bl	801c942 <USBD_ClrFeature>
          break;
 801be88:	e006      	b.n	801be98 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801be8a:	683a      	ldr	r2, [r7, #0]
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	0011      	movs	r1, r2
 801be90:	0018      	movs	r0, r3
 801be92:	f000 fdb4 	bl	801c9fe <USBD_CtlError>
          break;
 801be96:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801be98:	e006      	b.n	801bea8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801be9a:	683a      	ldr	r2, [r7, #0]
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	0011      	movs	r1, r2
 801bea0:	0018      	movs	r0, r3
 801bea2:	f000 fdac 	bl	801c9fe <USBD_CtlError>
      break;
 801bea6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bea8:	230f      	movs	r3, #15
 801beaa:	18fb      	adds	r3, r7, r3
 801beac:	781b      	ldrb	r3, [r3, #0]
}
 801beae:	0018      	movs	r0, r3
 801beb0:	46bd      	mov	sp, r7
 801beb2:	b004      	add	sp, #16
 801beb4:	bd80      	pop	{r7, pc}
 801beb6:	46c0      	nop			@ (mov r8, r8)
 801beb8:	080256cc 	.word	0x080256cc

0801bebc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801bebc:	b5b0      	push	{r4, r5, r7, lr}
 801bebe:	b084      	sub	sp, #16
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bec6:	230f      	movs	r3, #15
 801bec8:	18fb      	adds	r3, r7, r3
 801beca:	2200      	movs	r2, #0
 801becc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bece:	683b      	ldr	r3, [r7, #0]
 801bed0:	781b      	ldrb	r3, [r3, #0]
 801bed2:	001a      	movs	r2, r3
 801bed4:	2360      	movs	r3, #96	@ 0x60
 801bed6:	4013      	ands	r3, r2
 801bed8:	2b40      	cmp	r3, #64	@ 0x40
 801beda:	d004      	beq.n	801bee6 <USBD_StdItfReq+0x2a>
 801bedc:	d839      	bhi.n	801bf52 <USBD_StdItfReq+0x96>
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d001      	beq.n	801bee6 <USBD_StdItfReq+0x2a>
 801bee2:	2b20      	cmp	r3, #32
 801bee4:	d135      	bne.n	801bf52 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801bee6:	687a      	ldr	r2, [r7, #4]
 801bee8:	23a7      	movs	r3, #167	@ 0xa7
 801beea:	009b      	lsls	r3, r3, #2
 801beec:	5cd3      	ldrb	r3, [r2, r3]
 801beee:	3b01      	subs	r3, #1
 801bef0:	2b02      	cmp	r3, #2
 801bef2:	d825      	bhi.n	801bf40 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801bef4:	683b      	ldr	r3, [r7, #0]
 801bef6:	889b      	ldrh	r3, [r3, #4]
 801bef8:	b2db      	uxtb	r3, r3
 801befa:	2b01      	cmp	r3, #1
 801befc:	d819      	bhi.n	801bf32 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801befe:	687a      	ldr	r2, [r7, #4]
 801bf00:	23ad      	movs	r3, #173	@ 0xad
 801bf02:	009b      	lsls	r3, r3, #2
 801bf04:	58d3      	ldr	r3, [r2, r3]
 801bf06:	689b      	ldr	r3, [r3, #8]
 801bf08:	250f      	movs	r5, #15
 801bf0a:	197c      	adds	r4, r7, r5
 801bf0c:	6839      	ldr	r1, [r7, #0]
 801bf0e:	687a      	ldr	r2, [r7, #4]
 801bf10:	0010      	movs	r0, r2
 801bf12:	4798      	blx	r3
 801bf14:	0003      	movs	r3, r0
 801bf16:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801bf18:	683b      	ldr	r3, [r7, #0]
 801bf1a:	88db      	ldrh	r3, [r3, #6]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d116      	bne.n	801bf4e <USBD_StdItfReq+0x92>
 801bf20:	197b      	adds	r3, r7, r5
 801bf22:	781b      	ldrb	r3, [r3, #0]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d112      	bne.n	801bf4e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	0018      	movs	r0, r3
 801bf2c:	f000 fe4f 	bl	801cbce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801bf30:	e00d      	b.n	801bf4e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801bf32:	683a      	ldr	r2, [r7, #0]
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	0011      	movs	r1, r2
 801bf38:	0018      	movs	r0, r3
 801bf3a:	f000 fd60 	bl	801c9fe <USBD_CtlError>
          break;
 801bf3e:	e006      	b.n	801bf4e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801bf40:	683a      	ldr	r2, [r7, #0]
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	0011      	movs	r1, r2
 801bf46:	0018      	movs	r0, r3
 801bf48:	f000 fd59 	bl	801c9fe <USBD_CtlError>
          break;
 801bf4c:	e000      	b.n	801bf50 <USBD_StdItfReq+0x94>
          break;
 801bf4e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bf50:	e006      	b.n	801bf60 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801bf52:	683a      	ldr	r2, [r7, #0]
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	0011      	movs	r1, r2
 801bf58:	0018      	movs	r0, r3
 801bf5a:	f000 fd50 	bl	801c9fe <USBD_CtlError>
      break;
 801bf5e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bf60:	2300      	movs	r3, #0
}
 801bf62:	0018      	movs	r0, r3
 801bf64:	46bd      	mov	sp, r7
 801bf66:	b004      	add	sp, #16
 801bf68:	bdb0      	pop	{r4, r5, r7, pc}

0801bf6a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801bf6a:	b5b0      	push	{r4, r5, r7, lr}
 801bf6c:	b084      	sub	sp, #16
 801bf6e:	af00      	add	r7, sp, #0
 801bf70:	6078      	str	r0, [r7, #4]
 801bf72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801bf74:	230f      	movs	r3, #15
 801bf76:	18fb      	adds	r3, r7, r3
 801bf78:	2200      	movs	r2, #0
 801bf7a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801bf7c:	683b      	ldr	r3, [r7, #0]
 801bf7e:	889a      	ldrh	r2, [r3, #4]
 801bf80:	230e      	movs	r3, #14
 801bf82:	18fb      	adds	r3, r7, r3
 801bf84:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	781b      	ldrb	r3, [r3, #0]
 801bf8a:	001a      	movs	r2, r3
 801bf8c:	2360      	movs	r3, #96	@ 0x60
 801bf8e:	4013      	ands	r3, r2
 801bf90:	2b40      	cmp	r3, #64	@ 0x40
 801bf92:	d006      	beq.n	801bfa2 <USBD_StdEPReq+0x38>
 801bf94:	d900      	bls.n	801bf98 <USBD_StdEPReq+0x2e>
 801bf96:	e190      	b.n	801c2ba <USBD_StdEPReq+0x350>
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d00c      	beq.n	801bfb6 <USBD_StdEPReq+0x4c>
 801bf9c:	2b20      	cmp	r3, #32
 801bf9e:	d000      	beq.n	801bfa2 <USBD_StdEPReq+0x38>
 801bfa0:	e18b      	b.n	801c2ba <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bfa2:	687a      	ldr	r2, [r7, #4]
 801bfa4:	23ad      	movs	r3, #173	@ 0xad
 801bfa6:	009b      	lsls	r3, r3, #2
 801bfa8:	58d3      	ldr	r3, [r2, r3]
 801bfaa:	689b      	ldr	r3, [r3, #8]
 801bfac:	6839      	ldr	r1, [r7, #0]
 801bfae:	687a      	ldr	r2, [r7, #4]
 801bfb0:	0010      	movs	r0, r2
 801bfb2:	4798      	blx	r3
      break;
 801bfb4:	e188      	b.n	801c2c8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801bfb6:	683b      	ldr	r3, [r7, #0]
 801bfb8:	781b      	ldrb	r3, [r3, #0]
 801bfba:	001a      	movs	r2, r3
 801bfbc:	2360      	movs	r3, #96	@ 0x60
 801bfbe:	4013      	ands	r3, r2
 801bfc0:	2b20      	cmp	r3, #32
 801bfc2:	d10f      	bne.n	801bfe4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801bfc4:	687a      	ldr	r2, [r7, #4]
 801bfc6:	23ad      	movs	r3, #173	@ 0xad
 801bfc8:	009b      	lsls	r3, r3, #2
 801bfca:	58d3      	ldr	r3, [r2, r3]
 801bfcc:	689b      	ldr	r3, [r3, #8]
 801bfce:	250f      	movs	r5, #15
 801bfd0:	197c      	adds	r4, r7, r5
 801bfd2:	6839      	ldr	r1, [r7, #0]
 801bfd4:	687a      	ldr	r2, [r7, #4]
 801bfd6:	0010      	movs	r0, r2
 801bfd8:	4798      	blx	r3
 801bfda:	0003      	movs	r3, r0
 801bfdc:	7023      	strb	r3, [r4, #0]

        return ret;
 801bfde:	197b      	adds	r3, r7, r5
 801bfe0:	781b      	ldrb	r3, [r3, #0]
 801bfe2:	e174      	b.n	801c2ce <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801bfe4:	683b      	ldr	r3, [r7, #0]
 801bfe6:	785b      	ldrb	r3, [r3, #1]
 801bfe8:	2b03      	cmp	r3, #3
 801bfea:	d007      	beq.n	801bffc <USBD_StdEPReq+0x92>
 801bfec:	dd00      	ble.n	801bff0 <USBD_StdEPReq+0x86>
 801bfee:	e15c      	b.n	801c2aa <USBD_StdEPReq+0x340>
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d100      	bne.n	801bff6 <USBD_StdEPReq+0x8c>
 801bff4:	e092      	b.n	801c11c <USBD_StdEPReq+0x1b2>
 801bff6:	2b01      	cmp	r3, #1
 801bff8:	d04b      	beq.n	801c092 <USBD_StdEPReq+0x128>
 801bffa:	e156      	b.n	801c2aa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801bffc:	687a      	ldr	r2, [r7, #4]
 801bffe:	23a7      	movs	r3, #167	@ 0xa7
 801c000:	009b      	lsls	r3, r3, #2
 801c002:	5cd3      	ldrb	r3, [r2, r3]
 801c004:	2b02      	cmp	r3, #2
 801c006:	d002      	beq.n	801c00e <USBD_StdEPReq+0xa4>
 801c008:	2b03      	cmp	r3, #3
 801c00a:	d01d      	beq.n	801c048 <USBD_StdEPReq+0xde>
 801c00c:	e039      	b.n	801c082 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c00e:	220e      	movs	r2, #14
 801c010:	18bb      	adds	r3, r7, r2
 801c012:	781b      	ldrb	r3, [r3, #0]
 801c014:	2b00      	cmp	r3, #0
 801c016:	d010      	beq.n	801c03a <USBD_StdEPReq+0xd0>
 801c018:	18bb      	adds	r3, r7, r2
 801c01a:	781b      	ldrb	r3, [r3, #0]
 801c01c:	2b80      	cmp	r3, #128	@ 0x80
 801c01e:	d00c      	beq.n	801c03a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c020:	18bb      	adds	r3, r7, r2
 801c022:	781a      	ldrb	r2, [r3, #0]
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	0011      	movs	r1, r2
 801c028:	0018      	movs	r0, r3
 801c02a:	f001 fa10 	bl	801d44e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	2180      	movs	r1, #128	@ 0x80
 801c032:	0018      	movs	r0, r3
 801c034:	f001 fa0b 	bl	801d44e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c038:	e02a      	b.n	801c090 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c03a:	683a      	ldr	r2, [r7, #0]
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	0011      	movs	r1, r2
 801c040:	0018      	movs	r0, r3
 801c042:	f000 fcdc 	bl	801c9fe <USBD_CtlError>
              break;
 801c046:	e023      	b.n	801c090 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c048:	683b      	ldr	r3, [r7, #0]
 801c04a:	885b      	ldrh	r3, [r3, #2]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d113      	bne.n	801c078 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c050:	220e      	movs	r2, #14
 801c052:	18bb      	adds	r3, r7, r2
 801c054:	781b      	ldrb	r3, [r3, #0]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d00e      	beq.n	801c078 <USBD_StdEPReq+0x10e>
 801c05a:	18bb      	adds	r3, r7, r2
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	2b80      	cmp	r3, #128	@ 0x80
 801c060:	d00a      	beq.n	801c078 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c062:	683b      	ldr	r3, [r7, #0]
 801c064:	88db      	ldrh	r3, [r3, #6]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d106      	bne.n	801c078 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c06a:	18bb      	adds	r3, r7, r2
 801c06c:	781a      	ldrb	r2, [r3, #0]
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	0011      	movs	r1, r2
 801c072:	0018      	movs	r0, r3
 801c074:	f001 f9eb 	bl	801d44e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	0018      	movs	r0, r3
 801c07c:	f000 fda7 	bl	801cbce <USBD_CtlSendStatus>

              break;
 801c080:	e006      	b.n	801c090 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c082:	683a      	ldr	r2, [r7, #0]
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	0011      	movs	r1, r2
 801c088:	0018      	movs	r0, r3
 801c08a:	f000 fcb8 	bl	801c9fe <USBD_CtlError>
              break;
 801c08e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c090:	e112      	b.n	801c2b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c092:	687a      	ldr	r2, [r7, #4]
 801c094:	23a7      	movs	r3, #167	@ 0xa7
 801c096:	009b      	lsls	r3, r3, #2
 801c098:	5cd3      	ldrb	r3, [r2, r3]
 801c09a:	2b02      	cmp	r3, #2
 801c09c:	d002      	beq.n	801c0a4 <USBD_StdEPReq+0x13a>
 801c09e:	2b03      	cmp	r3, #3
 801c0a0:	d01d      	beq.n	801c0de <USBD_StdEPReq+0x174>
 801c0a2:	e032      	b.n	801c10a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c0a4:	220e      	movs	r2, #14
 801c0a6:	18bb      	adds	r3, r7, r2
 801c0a8:	781b      	ldrb	r3, [r3, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d010      	beq.n	801c0d0 <USBD_StdEPReq+0x166>
 801c0ae:	18bb      	adds	r3, r7, r2
 801c0b0:	781b      	ldrb	r3, [r3, #0]
 801c0b2:	2b80      	cmp	r3, #128	@ 0x80
 801c0b4:	d00c      	beq.n	801c0d0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c0b6:	18bb      	adds	r3, r7, r2
 801c0b8:	781a      	ldrb	r2, [r3, #0]
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	0011      	movs	r1, r2
 801c0be:	0018      	movs	r0, r3
 801c0c0:	f001 f9c5 	bl	801d44e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	2180      	movs	r1, #128	@ 0x80
 801c0c8:	0018      	movs	r0, r3
 801c0ca:	f001 f9c0 	bl	801d44e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c0ce:	e024      	b.n	801c11a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c0d0:	683a      	ldr	r2, [r7, #0]
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	0011      	movs	r1, r2
 801c0d6:	0018      	movs	r0, r3
 801c0d8:	f000 fc91 	bl	801c9fe <USBD_CtlError>
              break;
 801c0dc:	e01d      	b.n	801c11a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c0de:	683b      	ldr	r3, [r7, #0]
 801c0e0:	885b      	ldrh	r3, [r3, #2]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d118      	bne.n	801c118 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c0e6:	210e      	movs	r1, #14
 801c0e8:	187b      	adds	r3, r7, r1
 801c0ea:	781b      	ldrb	r3, [r3, #0]
 801c0ec:	227f      	movs	r2, #127	@ 0x7f
 801c0ee:	4013      	ands	r3, r2
 801c0f0:	d006      	beq.n	801c100 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c0f2:	187b      	adds	r3, r7, r1
 801c0f4:	781a      	ldrb	r2, [r3, #0]
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	0011      	movs	r1, r2
 801c0fa:	0018      	movs	r0, r3
 801c0fc:	f001 f9d2 	bl	801d4a4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	0018      	movs	r0, r3
 801c104:	f000 fd63 	bl	801cbce <USBD_CtlSendStatus>
              }
              break;
 801c108:	e006      	b.n	801c118 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c10a:	683a      	ldr	r2, [r7, #0]
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	0011      	movs	r1, r2
 801c110:	0018      	movs	r0, r3
 801c112:	f000 fc74 	bl	801c9fe <USBD_CtlError>
              break;
 801c116:	e000      	b.n	801c11a <USBD_StdEPReq+0x1b0>
              break;
 801c118:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c11a:	e0cd      	b.n	801c2b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c11c:	687a      	ldr	r2, [r7, #4]
 801c11e:	23a7      	movs	r3, #167	@ 0xa7
 801c120:	009b      	lsls	r3, r3, #2
 801c122:	5cd3      	ldrb	r3, [r2, r3]
 801c124:	2b02      	cmp	r3, #2
 801c126:	d002      	beq.n	801c12e <USBD_StdEPReq+0x1c4>
 801c128:	2b03      	cmp	r3, #3
 801c12a:	d03c      	beq.n	801c1a6 <USBD_StdEPReq+0x23c>
 801c12c:	e0b5      	b.n	801c29a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c12e:	220e      	movs	r2, #14
 801c130:	18bb      	adds	r3, r7, r2
 801c132:	781b      	ldrb	r3, [r3, #0]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d00a      	beq.n	801c14e <USBD_StdEPReq+0x1e4>
 801c138:	18bb      	adds	r3, r7, r2
 801c13a:	781b      	ldrb	r3, [r3, #0]
 801c13c:	2b80      	cmp	r3, #128	@ 0x80
 801c13e:	d006      	beq.n	801c14e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c140:	683a      	ldr	r2, [r7, #0]
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	0011      	movs	r1, r2
 801c146:	0018      	movs	r0, r3
 801c148:	f000 fc59 	bl	801c9fe <USBD_CtlError>
                break;
 801c14c:	e0ac      	b.n	801c2a8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c14e:	220e      	movs	r2, #14
 801c150:	18bb      	adds	r3, r7, r2
 801c152:	781b      	ldrb	r3, [r3, #0]
 801c154:	b25b      	sxtb	r3, r3
 801c156:	2b00      	cmp	r3, #0
 801c158:	da0c      	bge.n	801c174 <USBD_StdEPReq+0x20a>
 801c15a:	18bb      	adds	r3, r7, r2
 801c15c:	781b      	ldrb	r3, [r3, #0]
 801c15e:	227f      	movs	r2, #127	@ 0x7f
 801c160:	401a      	ands	r2, r3
 801c162:	0013      	movs	r3, r2
 801c164:	009b      	lsls	r3, r3, #2
 801c166:	189b      	adds	r3, r3, r2
 801c168:	009b      	lsls	r3, r3, #2
 801c16a:	3310      	adds	r3, #16
 801c16c:	687a      	ldr	r2, [r7, #4]
 801c16e:	18d3      	adds	r3, r2, r3
 801c170:	3304      	adds	r3, #4
 801c172:	e00d      	b.n	801c190 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c174:	230e      	movs	r3, #14
 801c176:	18fb      	adds	r3, r7, r3
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	227f      	movs	r2, #127	@ 0x7f
 801c17c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c17e:	0013      	movs	r3, r2
 801c180:	009b      	lsls	r3, r3, #2
 801c182:	189b      	adds	r3, r3, r2
 801c184:	009b      	lsls	r3, r3, #2
 801c186:	3351      	adds	r3, #81	@ 0x51
 801c188:	33ff      	adds	r3, #255	@ 0xff
 801c18a:	687a      	ldr	r2, [r7, #4]
 801c18c:	18d3      	adds	r3, r2, r3
 801c18e:	3304      	adds	r3, #4
 801c190:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c192:	68bb      	ldr	r3, [r7, #8]
 801c194:	2200      	movs	r2, #0
 801c196:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c198:	68b9      	ldr	r1, [r7, #8]
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	2202      	movs	r2, #2
 801c19e:	0018      	movs	r0, r3
 801c1a0:	f000 fcab 	bl	801cafa <USBD_CtlSendData>
              break;
 801c1a4:	e080      	b.n	801c2a8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c1a6:	220e      	movs	r2, #14
 801c1a8:	18bb      	adds	r3, r7, r2
 801c1aa:	781b      	ldrb	r3, [r3, #0]
 801c1ac:	b25b      	sxtb	r3, r3
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	da14      	bge.n	801c1dc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c1b2:	18bb      	adds	r3, r7, r2
 801c1b4:	781b      	ldrb	r3, [r3, #0]
 801c1b6:	220f      	movs	r2, #15
 801c1b8:	401a      	ands	r2, r3
 801c1ba:	6879      	ldr	r1, [r7, #4]
 801c1bc:	0013      	movs	r3, r2
 801c1be:	009b      	lsls	r3, r3, #2
 801c1c0:	189b      	adds	r3, r3, r2
 801c1c2:	009b      	lsls	r3, r3, #2
 801c1c4:	18cb      	adds	r3, r1, r3
 801c1c6:	3318      	adds	r3, #24
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d11e      	bne.n	801c20c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c1ce:	683a      	ldr	r2, [r7, #0]
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	0011      	movs	r1, r2
 801c1d4:	0018      	movs	r0, r3
 801c1d6:	f000 fc12 	bl	801c9fe <USBD_CtlError>
                  break;
 801c1da:	e065      	b.n	801c2a8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c1dc:	230e      	movs	r3, #14
 801c1de:	18fb      	adds	r3, r7, r3
 801c1e0:	781b      	ldrb	r3, [r3, #0]
 801c1e2:	220f      	movs	r2, #15
 801c1e4:	401a      	ands	r2, r3
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	23ac      	movs	r3, #172	@ 0xac
 801c1ea:	0059      	lsls	r1, r3, #1
 801c1ec:	0013      	movs	r3, r2
 801c1ee:	009b      	lsls	r3, r3, #2
 801c1f0:	189b      	adds	r3, r3, r2
 801c1f2:	009b      	lsls	r3, r3, #2
 801c1f4:	18c3      	adds	r3, r0, r3
 801c1f6:	185b      	adds	r3, r3, r1
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d106      	bne.n	801c20c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c1fe:	683a      	ldr	r2, [r7, #0]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	0011      	movs	r1, r2
 801c204:	0018      	movs	r0, r3
 801c206:	f000 fbfa 	bl	801c9fe <USBD_CtlError>
                  break;
 801c20a:	e04d      	b.n	801c2a8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c20c:	220e      	movs	r2, #14
 801c20e:	18bb      	adds	r3, r7, r2
 801c210:	781b      	ldrb	r3, [r3, #0]
 801c212:	b25b      	sxtb	r3, r3
 801c214:	2b00      	cmp	r3, #0
 801c216:	da0c      	bge.n	801c232 <USBD_StdEPReq+0x2c8>
 801c218:	18bb      	adds	r3, r7, r2
 801c21a:	781b      	ldrb	r3, [r3, #0]
 801c21c:	227f      	movs	r2, #127	@ 0x7f
 801c21e:	401a      	ands	r2, r3
 801c220:	0013      	movs	r3, r2
 801c222:	009b      	lsls	r3, r3, #2
 801c224:	189b      	adds	r3, r3, r2
 801c226:	009b      	lsls	r3, r3, #2
 801c228:	3310      	adds	r3, #16
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	18d3      	adds	r3, r2, r3
 801c22e:	3304      	adds	r3, #4
 801c230:	e00d      	b.n	801c24e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c232:	230e      	movs	r3, #14
 801c234:	18fb      	adds	r3, r7, r3
 801c236:	781b      	ldrb	r3, [r3, #0]
 801c238:	227f      	movs	r2, #127	@ 0x7f
 801c23a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c23c:	0013      	movs	r3, r2
 801c23e:	009b      	lsls	r3, r3, #2
 801c240:	189b      	adds	r3, r3, r2
 801c242:	009b      	lsls	r3, r3, #2
 801c244:	3351      	adds	r3, #81	@ 0x51
 801c246:	33ff      	adds	r3, #255	@ 0xff
 801c248:	687a      	ldr	r2, [r7, #4]
 801c24a:	18d3      	adds	r3, r2, r3
 801c24c:	3304      	adds	r3, #4
 801c24e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c250:	220e      	movs	r2, #14
 801c252:	18bb      	adds	r3, r7, r2
 801c254:	781b      	ldrb	r3, [r3, #0]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d003      	beq.n	801c262 <USBD_StdEPReq+0x2f8>
 801c25a:	18bb      	adds	r3, r7, r2
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	2b80      	cmp	r3, #128	@ 0x80
 801c260:	d103      	bne.n	801c26a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	2200      	movs	r2, #0
 801c266:	601a      	str	r2, [r3, #0]
 801c268:	e010      	b.n	801c28c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c26a:	230e      	movs	r3, #14
 801c26c:	18fb      	adds	r3, r7, r3
 801c26e:	781a      	ldrb	r2, [r3, #0]
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	0011      	movs	r1, r2
 801c274:	0018      	movs	r0, r3
 801c276:	f001 f940 	bl	801d4fa <USBD_LL_IsStallEP>
 801c27a:	1e03      	subs	r3, r0, #0
 801c27c:	d003      	beq.n	801c286 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c27e:	68bb      	ldr	r3, [r7, #8]
 801c280:	2201      	movs	r2, #1
 801c282:	601a      	str	r2, [r3, #0]
 801c284:	e002      	b.n	801c28c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c286:	68bb      	ldr	r3, [r7, #8]
 801c288:	2200      	movs	r2, #0
 801c28a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c28c:	68b9      	ldr	r1, [r7, #8]
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2202      	movs	r2, #2
 801c292:	0018      	movs	r0, r3
 801c294:	f000 fc31 	bl	801cafa <USBD_CtlSendData>
              break;
 801c298:	e006      	b.n	801c2a8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c29a:	683a      	ldr	r2, [r7, #0]
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	0011      	movs	r1, r2
 801c2a0:	0018      	movs	r0, r3
 801c2a2:	f000 fbac 	bl	801c9fe <USBD_CtlError>
              break;
 801c2a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c2a8:	e006      	b.n	801c2b8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c2aa:	683a      	ldr	r2, [r7, #0]
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	0011      	movs	r1, r2
 801c2b0:	0018      	movs	r0, r3
 801c2b2:	f000 fba4 	bl	801c9fe <USBD_CtlError>
          break;
 801c2b6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c2b8:	e006      	b.n	801c2c8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c2ba:	683a      	ldr	r2, [r7, #0]
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	0011      	movs	r1, r2
 801c2c0:	0018      	movs	r0, r3
 801c2c2:	f000 fb9c 	bl	801c9fe <USBD_CtlError>
      break;
 801c2c6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c2c8:	230f      	movs	r3, #15
 801c2ca:	18fb      	adds	r3, r7, r3
 801c2cc:	781b      	ldrb	r3, [r3, #0]
}
 801c2ce:	0018      	movs	r0, r3
 801c2d0:	46bd      	mov	sp, r7
 801c2d2:	b004      	add	sp, #16
 801c2d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c2d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c2d8:	b580      	push	{r7, lr}
 801c2da:	b084      	sub	sp, #16
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	6078      	str	r0, [r7, #4]
 801c2e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c2e2:	2308      	movs	r3, #8
 801c2e4:	18fb      	adds	r3, r7, r3
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c2ee:	230b      	movs	r3, #11
 801c2f0:	18fb      	adds	r3, r7, r3
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c2f6:	683b      	ldr	r3, [r7, #0]
 801c2f8:	885b      	ldrh	r3, [r3, #2]
 801c2fa:	0a1b      	lsrs	r3, r3, #8
 801c2fc:	b29b      	uxth	r3, r3
 801c2fe:	2b07      	cmp	r3, #7
 801c300:	d900      	bls.n	801c304 <USBD_GetDescriptor+0x2c>
 801c302:	e159      	b.n	801c5b8 <USBD_GetDescriptor+0x2e0>
 801c304:	009a      	lsls	r2, r3, #2
 801c306:	4bcb      	ldr	r3, [pc, #812]	@ (801c634 <USBD_GetDescriptor+0x35c>)
 801c308:	18d3      	adds	r3, r2, r3
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c30e:	687a      	ldr	r2, [r7, #4]
 801c310:	23ac      	movs	r3, #172	@ 0xac
 801c312:	009b      	lsls	r3, r3, #2
 801c314:	58d3      	ldr	r3, [r2, r3]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	687a      	ldr	r2, [r7, #4]
 801c31a:	7c12      	ldrb	r2, [r2, #16]
 801c31c:	2108      	movs	r1, #8
 801c31e:	1879      	adds	r1, r7, r1
 801c320:	0010      	movs	r0, r2
 801c322:	4798      	blx	r3
 801c324:	0003      	movs	r3, r0
 801c326:	60fb      	str	r3, [r7, #12]
      break;
 801c328:	e153      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	7c1b      	ldrb	r3, [r3, #16]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d10f      	bne.n	801c352 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c332:	687a      	ldr	r2, [r7, #4]
 801c334:	23ad      	movs	r3, #173	@ 0xad
 801c336:	009b      	lsls	r3, r3, #2
 801c338:	58d3      	ldr	r3, [r2, r3]
 801c33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c33c:	2208      	movs	r2, #8
 801c33e:	18ba      	adds	r2, r7, r2
 801c340:	0010      	movs	r0, r2
 801c342:	4798      	blx	r3
 801c344:	0003      	movs	r3, r0
 801c346:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	3301      	adds	r3, #1
 801c34c:	2202      	movs	r2, #2
 801c34e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c350:	e13f      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c352:	687a      	ldr	r2, [r7, #4]
 801c354:	23ad      	movs	r3, #173	@ 0xad
 801c356:	009b      	lsls	r3, r3, #2
 801c358:	58d3      	ldr	r3, [r2, r3]
 801c35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c35c:	2208      	movs	r2, #8
 801c35e:	18ba      	adds	r2, r7, r2
 801c360:	0010      	movs	r0, r2
 801c362:	4798      	blx	r3
 801c364:	0003      	movs	r3, r0
 801c366:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	3301      	adds	r3, #1
 801c36c:	2202      	movs	r2, #2
 801c36e:	701a      	strb	r2, [r3, #0]
      break;
 801c370:	e12f      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	885b      	ldrh	r3, [r3, #2]
 801c376:	b2db      	uxtb	r3, r3
 801c378:	2b05      	cmp	r3, #5
 801c37a:	d900      	bls.n	801c37e <USBD_GetDescriptor+0xa6>
 801c37c:	e0d0      	b.n	801c520 <USBD_GetDescriptor+0x248>
 801c37e:	009a      	lsls	r2, r3, #2
 801c380:	4bad      	ldr	r3, [pc, #692]	@ (801c638 <USBD_GetDescriptor+0x360>)
 801c382:	18d3      	adds	r3, r2, r3
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c388:	687a      	ldr	r2, [r7, #4]
 801c38a:	23ac      	movs	r3, #172	@ 0xac
 801c38c:	009b      	lsls	r3, r3, #2
 801c38e:	58d3      	ldr	r3, [r2, r3]
 801c390:	685b      	ldr	r3, [r3, #4]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d00d      	beq.n	801c3b2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c396:	687a      	ldr	r2, [r7, #4]
 801c398:	23ac      	movs	r3, #172	@ 0xac
 801c39a:	009b      	lsls	r3, r3, #2
 801c39c:	58d3      	ldr	r3, [r2, r3]
 801c39e:	685b      	ldr	r3, [r3, #4]
 801c3a0:	687a      	ldr	r2, [r7, #4]
 801c3a2:	7c12      	ldrb	r2, [r2, #16]
 801c3a4:	2108      	movs	r1, #8
 801c3a6:	1879      	adds	r1, r7, r1
 801c3a8:	0010      	movs	r0, r2
 801c3aa:	4798      	blx	r3
 801c3ac:	0003      	movs	r3, r0
 801c3ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3b0:	e0c3      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3b2:	683a      	ldr	r2, [r7, #0]
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	0011      	movs	r1, r2
 801c3b8:	0018      	movs	r0, r3
 801c3ba:	f000 fb20 	bl	801c9fe <USBD_CtlError>
            err++;
 801c3be:	210b      	movs	r1, #11
 801c3c0:	187b      	adds	r3, r7, r1
 801c3c2:	781a      	ldrb	r2, [r3, #0]
 801c3c4:	187b      	adds	r3, r7, r1
 801c3c6:	3201      	adds	r2, #1
 801c3c8:	701a      	strb	r2, [r3, #0]
          break;
 801c3ca:	e0b6      	b.n	801c53a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c3cc:	687a      	ldr	r2, [r7, #4]
 801c3ce:	23ac      	movs	r3, #172	@ 0xac
 801c3d0:	009b      	lsls	r3, r3, #2
 801c3d2:	58d3      	ldr	r3, [r2, r3]
 801c3d4:	689b      	ldr	r3, [r3, #8]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d00d      	beq.n	801c3f6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c3da:	687a      	ldr	r2, [r7, #4]
 801c3dc:	23ac      	movs	r3, #172	@ 0xac
 801c3de:	009b      	lsls	r3, r3, #2
 801c3e0:	58d3      	ldr	r3, [r2, r3]
 801c3e2:	689b      	ldr	r3, [r3, #8]
 801c3e4:	687a      	ldr	r2, [r7, #4]
 801c3e6:	7c12      	ldrb	r2, [r2, #16]
 801c3e8:	2108      	movs	r1, #8
 801c3ea:	1879      	adds	r1, r7, r1
 801c3ec:	0010      	movs	r0, r2
 801c3ee:	4798      	blx	r3
 801c3f0:	0003      	movs	r3, r0
 801c3f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3f4:	e0a1      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3f6:	683a      	ldr	r2, [r7, #0]
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	0011      	movs	r1, r2
 801c3fc:	0018      	movs	r0, r3
 801c3fe:	f000 fafe 	bl	801c9fe <USBD_CtlError>
            err++;
 801c402:	210b      	movs	r1, #11
 801c404:	187b      	adds	r3, r7, r1
 801c406:	781a      	ldrb	r2, [r3, #0]
 801c408:	187b      	adds	r3, r7, r1
 801c40a:	3201      	adds	r2, #1
 801c40c:	701a      	strb	r2, [r3, #0]
          break;
 801c40e:	e094      	b.n	801c53a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c410:	687a      	ldr	r2, [r7, #4]
 801c412:	23ac      	movs	r3, #172	@ 0xac
 801c414:	009b      	lsls	r3, r3, #2
 801c416:	58d3      	ldr	r3, [r2, r3]
 801c418:	68db      	ldr	r3, [r3, #12]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d00d      	beq.n	801c43a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c41e:	687a      	ldr	r2, [r7, #4]
 801c420:	23ac      	movs	r3, #172	@ 0xac
 801c422:	009b      	lsls	r3, r3, #2
 801c424:	58d3      	ldr	r3, [r2, r3]
 801c426:	68db      	ldr	r3, [r3, #12]
 801c428:	687a      	ldr	r2, [r7, #4]
 801c42a:	7c12      	ldrb	r2, [r2, #16]
 801c42c:	2108      	movs	r1, #8
 801c42e:	1879      	adds	r1, r7, r1
 801c430:	0010      	movs	r0, r2
 801c432:	4798      	blx	r3
 801c434:	0003      	movs	r3, r0
 801c436:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c438:	e07f      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c43a:	683a      	ldr	r2, [r7, #0]
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	0011      	movs	r1, r2
 801c440:	0018      	movs	r0, r3
 801c442:	f000 fadc 	bl	801c9fe <USBD_CtlError>
            err++;
 801c446:	210b      	movs	r1, #11
 801c448:	187b      	adds	r3, r7, r1
 801c44a:	781a      	ldrb	r2, [r3, #0]
 801c44c:	187b      	adds	r3, r7, r1
 801c44e:	3201      	adds	r2, #1
 801c450:	701a      	strb	r2, [r3, #0]
          break;
 801c452:	e072      	b.n	801c53a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c454:	687a      	ldr	r2, [r7, #4]
 801c456:	23ac      	movs	r3, #172	@ 0xac
 801c458:	009b      	lsls	r3, r3, #2
 801c45a:	58d3      	ldr	r3, [r2, r3]
 801c45c:	691b      	ldr	r3, [r3, #16]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d00d      	beq.n	801c47e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c462:	687a      	ldr	r2, [r7, #4]
 801c464:	23ac      	movs	r3, #172	@ 0xac
 801c466:	009b      	lsls	r3, r3, #2
 801c468:	58d3      	ldr	r3, [r2, r3]
 801c46a:	691b      	ldr	r3, [r3, #16]
 801c46c:	687a      	ldr	r2, [r7, #4]
 801c46e:	7c12      	ldrb	r2, [r2, #16]
 801c470:	2108      	movs	r1, #8
 801c472:	1879      	adds	r1, r7, r1
 801c474:	0010      	movs	r0, r2
 801c476:	4798      	blx	r3
 801c478:	0003      	movs	r3, r0
 801c47a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c47c:	e05d      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c47e:	683a      	ldr	r2, [r7, #0]
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	0011      	movs	r1, r2
 801c484:	0018      	movs	r0, r3
 801c486:	f000 faba 	bl	801c9fe <USBD_CtlError>
            err++;
 801c48a:	210b      	movs	r1, #11
 801c48c:	187b      	adds	r3, r7, r1
 801c48e:	781a      	ldrb	r2, [r3, #0]
 801c490:	187b      	adds	r3, r7, r1
 801c492:	3201      	adds	r2, #1
 801c494:	701a      	strb	r2, [r3, #0]
          break;
 801c496:	e050      	b.n	801c53a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c498:	687a      	ldr	r2, [r7, #4]
 801c49a:	23ac      	movs	r3, #172	@ 0xac
 801c49c:	009b      	lsls	r3, r3, #2
 801c49e:	58d3      	ldr	r3, [r2, r3]
 801c4a0:	695b      	ldr	r3, [r3, #20]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d00d      	beq.n	801c4c2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c4a6:	687a      	ldr	r2, [r7, #4]
 801c4a8:	23ac      	movs	r3, #172	@ 0xac
 801c4aa:	009b      	lsls	r3, r3, #2
 801c4ac:	58d3      	ldr	r3, [r2, r3]
 801c4ae:	695b      	ldr	r3, [r3, #20]
 801c4b0:	687a      	ldr	r2, [r7, #4]
 801c4b2:	7c12      	ldrb	r2, [r2, #16]
 801c4b4:	2108      	movs	r1, #8
 801c4b6:	1879      	adds	r1, r7, r1
 801c4b8:	0010      	movs	r0, r2
 801c4ba:	4798      	blx	r3
 801c4bc:	0003      	movs	r3, r0
 801c4be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c4c0:	e03b      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c4c2:	683a      	ldr	r2, [r7, #0]
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	0011      	movs	r1, r2
 801c4c8:	0018      	movs	r0, r3
 801c4ca:	f000 fa98 	bl	801c9fe <USBD_CtlError>
            err++;
 801c4ce:	210b      	movs	r1, #11
 801c4d0:	187b      	adds	r3, r7, r1
 801c4d2:	781a      	ldrb	r2, [r3, #0]
 801c4d4:	187b      	adds	r3, r7, r1
 801c4d6:	3201      	adds	r2, #1
 801c4d8:	701a      	strb	r2, [r3, #0]
          break;
 801c4da:	e02e      	b.n	801c53a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c4dc:	687a      	ldr	r2, [r7, #4]
 801c4de:	23ac      	movs	r3, #172	@ 0xac
 801c4e0:	009b      	lsls	r3, r3, #2
 801c4e2:	58d3      	ldr	r3, [r2, r3]
 801c4e4:	699b      	ldr	r3, [r3, #24]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d00d      	beq.n	801c506 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c4ea:	687a      	ldr	r2, [r7, #4]
 801c4ec:	23ac      	movs	r3, #172	@ 0xac
 801c4ee:	009b      	lsls	r3, r3, #2
 801c4f0:	58d3      	ldr	r3, [r2, r3]
 801c4f2:	699b      	ldr	r3, [r3, #24]
 801c4f4:	687a      	ldr	r2, [r7, #4]
 801c4f6:	7c12      	ldrb	r2, [r2, #16]
 801c4f8:	2108      	movs	r1, #8
 801c4fa:	1879      	adds	r1, r7, r1
 801c4fc:	0010      	movs	r0, r2
 801c4fe:	4798      	blx	r3
 801c500:	0003      	movs	r3, r0
 801c502:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c504:	e019      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c506:	683a      	ldr	r2, [r7, #0]
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	0011      	movs	r1, r2
 801c50c:	0018      	movs	r0, r3
 801c50e:	f000 fa76 	bl	801c9fe <USBD_CtlError>
            err++;
 801c512:	210b      	movs	r1, #11
 801c514:	187b      	adds	r3, r7, r1
 801c516:	781a      	ldrb	r2, [r3, #0]
 801c518:	187b      	adds	r3, r7, r1
 801c51a:	3201      	adds	r2, #1
 801c51c:	701a      	strb	r2, [r3, #0]
          break;
 801c51e:	e00c      	b.n	801c53a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c520:	683a      	ldr	r2, [r7, #0]
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	0011      	movs	r1, r2
 801c526:	0018      	movs	r0, r3
 801c528:	f000 fa69 	bl	801c9fe <USBD_CtlError>
          err++;
 801c52c:	210b      	movs	r1, #11
 801c52e:	187b      	adds	r3, r7, r1
 801c530:	781a      	ldrb	r2, [r3, #0]
 801c532:	187b      	adds	r3, r7, r1
 801c534:	3201      	adds	r2, #1
 801c536:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c538:	e04b      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>
 801c53a:	e04a      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	7c1b      	ldrb	r3, [r3, #16]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d10b      	bne.n	801c55c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c544:	687a      	ldr	r2, [r7, #4]
 801c546:	23ad      	movs	r3, #173	@ 0xad
 801c548:	009b      	lsls	r3, r3, #2
 801c54a:	58d3      	ldr	r3, [r2, r3]
 801c54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c54e:	2208      	movs	r2, #8
 801c550:	18ba      	adds	r2, r7, r2
 801c552:	0010      	movs	r0, r2
 801c554:	4798      	blx	r3
 801c556:	0003      	movs	r3, r0
 801c558:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c55a:	e03a      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c55c:	683a      	ldr	r2, [r7, #0]
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	0011      	movs	r1, r2
 801c562:	0018      	movs	r0, r3
 801c564:	f000 fa4b 	bl	801c9fe <USBD_CtlError>
        err++;
 801c568:	210b      	movs	r1, #11
 801c56a:	187b      	adds	r3, r7, r1
 801c56c:	781a      	ldrb	r2, [r3, #0]
 801c56e:	187b      	adds	r3, r7, r1
 801c570:	3201      	adds	r2, #1
 801c572:	701a      	strb	r2, [r3, #0]
      break;
 801c574:	e02d      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	7c1b      	ldrb	r3, [r3, #16]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d10f      	bne.n	801c59e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c57e:	687a      	ldr	r2, [r7, #4]
 801c580:	23ad      	movs	r3, #173	@ 0xad
 801c582:	009b      	lsls	r3, r3, #2
 801c584:	58d3      	ldr	r3, [r2, r3]
 801c586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c588:	2208      	movs	r2, #8
 801c58a:	18ba      	adds	r2, r7, r2
 801c58c:	0010      	movs	r0, r2
 801c58e:	4798      	blx	r3
 801c590:	0003      	movs	r3, r0
 801c592:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	3301      	adds	r3, #1
 801c598:	2207      	movs	r2, #7
 801c59a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c59c:	e019      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c59e:	683a      	ldr	r2, [r7, #0]
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	0011      	movs	r1, r2
 801c5a4:	0018      	movs	r0, r3
 801c5a6:	f000 fa2a 	bl	801c9fe <USBD_CtlError>
        err++;
 801c5aa:	210b      	movs	r1, #11
 801c5ac:	187b      	adds	r3, r7, r1
 801c5ae:	781a      	ldrb	r2, [r3, #0]
 801c5b0:	187b      	adds	r3, r7, r1
 801c5b2:	3201      	adds	r2, #1
 801c5b4:	701a      	strb	r2, [r3, #0]
      break;
 801c5b6:	e00c      	b.n	801c5d2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c5b8:	683a      	ldr	r2, [r7, #0]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	0011      	movs	r1, r2
 801c5be:	0018      	movs	r0, r3
 801c5c0:	f000 fa1d 	bl	801c9fe <USBD_CtlError>
      err++;
 801c5c4:	210b      	movs	r1, #11
 801c5c6:	187b      	adds	r3, r7, r1
 801c5c8:	781a      	ldrb	r2, [r3, #0]
 801c5ca:	187b      	adds	r3, r7, r1
 801c5cc:	3201      	adds	r2, #1
 801c5ce:	701a      	strb	r2, [r3, #0]
      break;
 801c5d0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c5d2:	230b      	movs	r3, #11
 801c5d4:	18fb      	adds	r3, r7, r3
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d127      	bne.n	801c62c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c5dc:	2108      	movs	r1, #8
 801c5de:	187b      	adds	r3, r7, r1
 801c5e0:	881b      	ldrh	r3, [r3, #0]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d019      	beq.n	801c61a <USBD_GetDescriptor+0x342>
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	88db      	ldrh	r3, [r3, #6]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d015      	beq.n	801c61a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c5ee:	683b      	ldr	r3, [r7, #0]
 801c5f0:	88da      	ldrh	r2, [r3, #6]
 801c5f2:	187b      	adds	r3, r7, r1
 801c5f4:	881b      	ldrh	r3, [r3, #0]
 801c5f6:	1c18      	adds	r0, r3, #0
 801c5f8:	1c11      	adds	r1, r2, #0
 801c5fa:	b28a      	uxth	r2, r1
 801c5fc:	b283      	uxth	r3, r0
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d900      	bls.n	801c604 <USBD_GetDescriptor+0x32c>
 801c602:	1c01      	adds	r1, r0, #0
 801c604:	b28a      	uxth	r2, r1
 801c606:	2108      	movs	r1, #8
 801c608:	187b      	adds	r3, r7, r1
 801c60a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c60c:	187b      	adds	r3, r7, r1
 801c60e:	881a      	ldrh	r2, [r3, #0]
 801c610:	68f9      	ldr	r1, [r7, #12]
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	0018      	movs	r0, r3
 801c616:	f000 fa70 	bl	801cafa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	88db      	ldrh	r3, [r3, #6]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d105      	bne.n	801c62e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	0018      	movs	r0, r3
 801c626:	f000 fad2 	bl	801cbce <USBD_CtlSendStatus>
 801c62a:	e000      	b.n	801c62e <USBD_GetDescriptor+0x356>
    return;
 801c62c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c62e:	46bd      	mov	sp, r7
 801c630:	b004      	add	sp, #16
 801c632:	bd80      	pop	{r7, pc}
 801c634:	080256f4 	.word	0x080256f4
 801c638:	08025714 	.word	0x08025714

0801c63c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c63c:	b590      	push	{r4, r7, lr}
 801c63e:	b085      	sub	sp, #20
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
 801c644:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	889b      	ldrh	r3, [r3, #4]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d13d      	bne.n	801c6ca <USBD_SetAddress+0x8e>
 801c64e:	683b      	ldr	r3, [r7, #0]
 801c650:	88db      	ldrh	r3, [r3, #6]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d139      	bne.n	801c6ca <USBD_SetAddress+0x8e>
 801c656:	683b      	ldr	r3, [r7, #0]
 801c658:	885b      	ldrh	r3, [r3, #2]
 801c65a:	2b7f      	cmp	r3, #127	@ 0x7f
 801c65c:	d835      	bhi.n	801c6ca <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c65e:	683b      	ldr	r3, [r7, #0]
 801c660:	885b      	ldrh	r3, [r3, #2]
 801c662:	b2da      	uxtb	r2, r3
 801c664:	230f      	movs	r3, #15
 801c666:	18fb      	adds	r3, r7, r3
 801c668:	217f      	movs	r1, #127	@ 0x7f
 801c66a:	400a      	ands	r2, r1
 801c66c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c66e:	687a      	ldr	r2, [r7, #4]
 801c670:	23a7      	movs	r3, #167	@ 0xa7
 801c672:	009b      	lsls	r3, r3, #2
 801c674:	5cd3      	ldrb	r3, [r2, r3]
 801c676:	2b03      	cmp	r3, #3
 801c678:	d106      	bne.n	801c688 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c67a:	683a      	ldr	r2, [r7, #0]
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	0011      	movs	r1, r2
 801c680:	0018      	movs	r0, r3
 801c682:	f000 f9bc 	bl	801c9fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c686:	e027      	b.n	801c6d8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	240f      	movs	r4, #15
 801c68c:	193a      	adds	r2, r7, r4
 801c68e:	4914      	ldr	r1, [pc, #80]	@ (801c6e0 <USBD_SetAddress+0xa4>)
 801c690:	7812      	ldrb	r2, [r2, #0]
 801c692:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c694:	193b      	adds	r3, r7, r4
 801c696:	781a      	ldrb	r2, [r3, #0]
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	0011      	movs	r1, r2
 801c69c:	0018      	movs	r0, r3
 801c69e:	f000 ff5d 	bl	801d55c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	0018      	movs	r0, r3
 801c6a6:	f000 fa92 	bl	801cbce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c6aa:	193b      	adds	r3, r7, r4
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d005      	beq.n	801c6be <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c6b2:	687a      	ldr	r2, [r7, #4]
 801c6b4:	23a7      	movs	r3, #167	@ 0xa7
 801c6b6:	009b      	lsls	r3, r3, #2
 801c6b8:	2102      	movs	r1, #2
 801c6ba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6bc:	e00c      	b.n	801c6d8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c6be:	687a      	ldr	r2, [r7, #4]
 801c6c0:	23a7      	movs	r3, #167	@ 0xa7
 801c6c2:	009b      	lsls	r3, r3, #2
 801c6c4:	2101      	movs	r1, #1
 801c6c6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6c8:	e006      	b.n	801c6d8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c6ca:	683a      	ldr	r2, [r7, #0]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	0011      	movs	r1, r2
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f000 f994 	bl	801c9fe <USBD_CtlError>
  }
}
 801c6d6:	46c0      	nop			@ (mov r8, r8)
 801c6d8:	46c0      	nop			@ (mov r8, r8)
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	b005      	add	sp, #20
 801c6de:	bd90      	pop	{r4, r7, pc}
 801c6e0:	0000029e 	.word	0x0000029e

0801c6e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b082      	sub	sp, #8
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c6ee:	683b      	ldr	r3, [r7, #0]
 801c6f0:	885b      	ldrh	r3, [r3, #2]
 801c6f2:	b2da      	uxtb	r2, r3
 801c6f4:	4b4c      	ldr	r3, [pc, #304]	@ (801c828 <USBD_SetConfig+0x144>)
 801c6f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c6f8:	4b4b      	ldr	r3, [pc, #300]	@ (801c828 <USBD_SetConfig+0x144>)
 801c6fa:	781b      	ldrb	r3, [r3, #0]
 801c6fc:	2b01      	cmp	r3, #1
 801c6fe:	d906      	bls.n	801c70e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c700:	683a      	ldr	r2, [r7, #0]
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	0011      	movs	r1, r2
 801c706:	0018      	movs	r0, r3
 801c708:	f000 f979 	bl	801c9fe <USBD_CtlError>
 801c70c:	e088      	b.n	801c820 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c70e:	687a      	ldr	r2, [r7, #4]
 801c710:	23a7      	movs	r3, #167	@ 0xa7
 801c712:	009b      	lsls	r3, r3, #2
 801c714:	5cd3      	ldrb	r3, [r2, r3]
 801c716:	2b02      	cmp	r3, #2
 801c718:	d002      	beq.n	801c720 <USBD_SetConfig+0x3c>
 801c71a:	2b03      	cmp	r3, #3
 801c71c:	d029      	beq.n	801c772 <USBD_SetConfig+0x8e>
 801c71e:	e071      	b.n	801c804 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c720:	4b41      	ldr	r3, [pc, #260]	@ (801c828 <USBD_SetConfig+0x144>)
 801c722:	781b      	ldrb	r3, [r3, #0]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d01f      	beq.n	801c768 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c728:	4b3f      	ldr	r3, [pc, #252]	@ (801c828 <USBD_SetConfig+0x144>)
 801c72a:	781b      	ldrb	r3, [r3, #0]
 801c72c:	001a      	movs	r2, r3
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c732:	687a      	ldr	r2, [r7, #4]
 801c734:	23a7      	movs	r3, #167	@ 0xa7
 801c736:	009b      	lsls	r3, r3, #2
 801c738:	2103      	movs	r1, #3
 801c73a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c73c:	4b3a      	ldr	r3, [pc, #232]	@ (801c828 <USBD_SetConfig+0x144>)
 801c73e:	781a      	ldrb	r2, [r3, #0]
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	0011      	movs	r1, r2
 801c744:	0018      	movs	r0, r3
 801c746:	f7ff f8c6 	bl	801b8d6 <USBD_SetClassConfig>
 801c74a:	0003      	movs	r3, r0
 801c74c:	2b02      	cmp	r3, #2
 801c74e:	d106      	bne.n	801c75e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c750:	683a      	ldr	r2, [r7, #0]
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	0011      	movs	r1, r2
 801c756:	0018      	movs	r0, r3
 801c758:	f000 f951 	bl	801c9fe <USBD_CtlError>
            return;
 801c75c:	e060      	b.n	801c820 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	0018      	movs	r0, r3
 801c762:	f000 fa34 	bl	801cbce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c766:	e05b      	b.n	801c820 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	0018      	movs	r0, r3
 801c76c:	f000 fa2f 	bl	801cbce <USBD_CtlSendStatus>
        break;
 801c770:	e056      	b.n	801c820 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c772:	4b2d      	ldr	r3, [pc, #180]	@ (801c828 <USBD_SetConfig+0x144>)
 801c774:	781b      	ldrb	r3, [r3, #0]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d115      	bne.n	801c7a6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c77a:	687a      	ldr	r2, [r7, #4]
 801c77c:	23a7      	movs	r3, #167	@ 0xa7
 801c77e:	009b      	lsls	r3, r3, #2
 801c780:	2102      	movs	r1, #2
 801c782:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c784:	4b28      	ldr	r3, [pc, #160]	@ (801c828 <USBD_SetConfig+0x144>)
 801c786:	781b      	ldrb	r3, [r3, #0]
 801c788:	001a      	movs	r2, r3
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c78e:	4b26      	ldr	r3, [pc, #152]	@ (801c828 <USBD_SetConfig+0x144>)
 801c790:	781a      	ldrb	r2, [r3, #0]
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	0011      	movs	r1, r2
 801c796:	0018      	movs	r0, r3
 801c798:	f7ff f8c4 	bl	801b924 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	0018      	movs	r0, r3
 801c7a0:	f000 fa15 	bl	801cbce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c7a4:	e03c      	b.n	801c820 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c7a6:	4b20      	ldr	r3, [pc, #128]	@ (801c828 <USBD_SetConfig+0x144>)
 801c7a8:	781b      	ldrb	r3, [r3, #0]
 801c7aa:	001a      	movs	r2, r3
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	685b      	ldr	r3, [r3, #4]
 801c7b0:	429a      	cmp	r2, r3
 801c7b2:	d022      	beq.n	801c7fa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	685b      	ldr	r3, [r3, #4]
 801c7b8:	b2da      	uxtb	r2, r3
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	0011      	movs	r1, r2
 801c7be:	0018      	movs	r0, r3
 801c7c0:	f7ff f8b0 	bl	801b924 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c7c4:	4b18      	ldr	r3, [pc, #96]	@ (801c828 <USBD_SetConfig+0x144>)
 801c7c6:	781b      	ldrb	r3, [r3, #0]
 801c7c8:	001a      	movs	r2, r3
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c7ce:	4b16      	ldr	r3, [pc, #88]	@ (801c828 <USBD_SetConfig+0x144>)
 801c7d0:	781a      	ldrb	r2, [r3, #0]
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	0011      	movs	r1, r2
 801c7d6:	0018      	movs	r0, r3
 801c7d8:	f7ff f87d 	bl	801b8d6 <USBD_SetClassConfig>
 801c7dc:	0003      	movs	r3, r0
 801c7de:	2b02      	cmp	r3, #2
 801c7e0:	d106      	bne.n	801c7f0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c7e2:	683a      	ldr	r2, [r7, #0]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	0011      	movs	r1, r2
 801c7e8:	0018      	movs	r0, r3
 801c7ea:	f000 f908 	bl	801c9fe <USBD_CtlError>
            return;
 801c7ee:	e017      	b.n	801c820 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	0018      	movs	r0, r3
 801c7f4:	f000 f9eb 	bl	801cbce <USBD_CtlSendStatus>
        break;
 801c7f8:	e012      	b.n	801c820 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	0018      	movs	r0, r3
 801c7fe:	f000 f9e6 	bl	801cbce <USBD_CtlSendStatus>
        break;
 801c802:	e00d      	b.n	801c820 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c804:	683a      	ldr	r2, [r7, #0]
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	0011      	movs	r1, r2
 801c80a:	0018      	movs	r0, r3
 801c80c:	f000 f8f7 	bl	801c9fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c810:	4b05      	ldr	r3, [pc, #20]	@ (801c828 <USBD_SetConfig+0x144>)
 801c812:	781a      	ldrb	r2, [r3, #0]
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	0011      	movs	r1, r2
 801c818:	0018      	movs	r0, r3
 801c81a:	f7ff f883 	bl	801b924 <USBD_ClrClassConfig>
        break;
 801c81e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c820:	46bd      	mov	sp, r7
 801c822:	b002      	add	sp, #8
 801c824:	bd80      	pop	{r7, pc}
 801c826:	46c0      	nop			@ (mov r8, r8)
 801c828:	200023d0 	.word	0x200023d0

0801c82c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b082      	sub	sp, #8
 801c830:	af00      	add	r7, sp, #0
 801c832:	6078      	str	r0, [r7, #4]
 801c834:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	88db      	ldrh	r3, [r3, #6]
 801c83a:	2b01      	cmp	r3, #1
 801c83c:	d006      	beq.n	801c84c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c83e:	683a      	ldr	r2, [r7, #0]
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	0011      	movs	r1, r2
 801c844:	0018      	movs	r0, r3
 801c846:	f000 f8da 	bl	801c9fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c84a:	e026      	b.n	801c89a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c84c:	687a      	ldr	r2, [r7, #4]
 801c84e:	23a7      	movs	r3, #167	@ 0xa7
 801c850:	009b      	lsls	r3, r3, #2
 801c852:	5cd3      	ldrb	r3, [r2, r3]
 801c854:	2b02      	cmp	r3, #2
 801c856:	dc02      	bgt.n	801c85e <USBD_GetConfig+0x32>
 801c858:	2b00      	cmp	r3, #0
 801c85a:	dc03      	bgt.n	801c864 <USBD_GetConfig+0x38>
 801c85c:	e016      	b.n	801c88c <USBD_GetConfig+0x60>
 801c85e:	2b03      	cmp	r3, #3
 801c860:	d00c      	beq.n	801c87c <USBD_GetConfig+0x50>
 801c862:	e013      	b.n	801c88c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	2200      	movs	r2, #0
 801c868:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	3308      	adds	r3, #8
 801c86e:	0019      	movs	r1, r3
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	2201      	movs	r2, #1
 801c874:	0018      	movs	r0, r3
 801c876:	f000 f940 	bl	801cafa <USBD_CtlSendData>
        break;
 801c87a:	e00e      	b.n	801c89a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	1d19      	adds	r1, r3, #4
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	2201      	movs	r2, #1
 801c884:	0018      	movs	r0, r3
 801c886:	f000 f938 	bl	801cafa <USBD_CtlSendData>
        break;
 801c88a:	e006      	b.n	801c89a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c88c:	683a      	ldr	r2, [r7, #0]
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	0011      	movs	r1, r2
 801c892:	0018      	movs	r0, r3
 801c894:	f000 f8b3 	bl	801c9fe <USBD_CtlError>
        break;
 801c898:	46c0      	nop			@ (mov r8, r8)
}
 801c89a:	46c0      	nop			@ (mov r8, r8)
 801c89c:	46bd      	mov	sp, r7
 801c89e:	b002      	add	sp, #8
 801c8a0:	bd80      	pop	{r7, pc}

0801c8a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c8a2:	b580      	push	{r7, lr}
 801c8a4:	b082      	sub	sp, #8
 801c8a6:	af00      	add	r7, sp, #0
 801c8a8:	6078      	str	r0, [r7, #4]
 801c8aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c8ac:	687a      	ldr	r2, [r7, #4]
 801c8ae:	23a7      	movs	r3, #167	@ 0xa7
 801c8b0:	009b      	lsls	r3, r3, #2
 801c8b2:	5cd3      	ldrb	r3, [r2, r3]
 801c8b4:	3b01      	subs	r3, #1
 801c8b6:	2b02      	cmp	r3, #2
 801c8b8:	d822      	bhi.n	801c900 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c8ba:	683b      	ldr	r3, [r7, #0]
 801c8bc:	88db      	ldrh	r3, [r3, #6]
 801c8be:	2b02      	cmp	r3, #2
 801c8c0:	d006      	beq.n	801c8d0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c8c2:	683a      	ldr	r2, [r7, #0]
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	0011      	movs	r1, r2
 801c8c8:	0018      	movs	r0, r3
 801c8ca:	f000 f898 	bl	801c9fe <USBD_CtlError>
        break;
 801c8ce:	e01e      	b.n	801c90e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	2201      	movs	r2, #1
 801c8d4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c8d6:	687a      	ldr	r2, [r7, #4]
 801c8d8:	23a9      	movs	r3, #169	@ 0xa9
 801c8da:	009b      	lsls	r3, r3, #2
 801c8dc:	58d3      	ldr	r3, [r2, r3]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d005      	beq.n	801c8ee <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	68db      	ldr	r3, [r3, #12]
 801c8e6:	2202      	movs	r2, #2
 801c8e8:	431a      	orrs	r2, r3
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	330c      	adds	r3, #12
 801c8f2:	0019      	movs	r1, r3
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	2202      	movs	r2, #2
 801c8f8:	0018      	movs	r0, r3
 801c8fa:	f000 f8fe 	bl	801cafa <USBD_CtlSendData>
      break;
 801c8fe:	e006      	b.n	801c90e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c900:	683a      	ldr	r2, [r7, #0]
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	0011      	movs	r1, r2
 801c906:	0018      	movs	r0, r3
 801c908:	f000 f879 	bl	801c9fe <USBD_CtlError>
      break;
 801c90c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c90e:	46c0      	nop			@ (mov r8, r8)
 801c910:	46bd      	mov	sp, r7
 801c912:	b002      	add	sp, #8
 801c914:	bd80      	pop	{r7, pc}

0801c916 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c916:	b580      	push	{r7, lr}
 801c918:	b082      	sub	sp, #8
 801c91a:	af00      	add	r7, sp, #0
 801c91c:	6078      	str	r0, [r7, #4]
 801c91e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	885b      	ldrh	r3, [r3, #2]
 801c924:	2b01      	cmp	r3, #1
 801c926:	d108      	bne.n	801c93a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c928:	687a      	ldr	r2, [r7, #4]
 801c92a:	23a9      	movs	r3, #169	@ 0xa9
 801c92c:	009b      	lsls	r3, r3, #2
 801c92e:	2101      	movs	r1, #1
 801c930:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	0018      	movs	r0, r3
 801c936:	f000 f94a 	bl	801cbce <USBD_CtlSendStatus>
  }
}
 801c93a:	46c0      	nop			@ (mov r8, r8)
 801c93c:	46bd      	mov	sp, r7
 801c93e:	b002      	add	sp, #8
 801c940:	bd80      	pop	{r7, pc}

0801c942 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c942:	b580      	push	{r7, lr}
 801c944:	b082      	sub	sp, #8
 801c946:	af00      	add	r7, sp, #0
 801c948:	6078      	str	r0, [r7, #4]
 801c94a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c94c:	687a      	ldr	r2, [r7, #4]
 801c94e:	23a7      	movs	r3, #167	@ 0xa7
 801c950:	009b      	lsls	r3, r3, #2
 801c952:	5cd3      	ldrb	r3, [r2, r3]
 801c954:	3b01      	subs	r3, #1
 801c956:	2b02      	cmp	r3, #2
 801c958:	d80d      	bhi.n	801c976 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c95a:	683b      	ldr	r3, [r7, #0]
 801c95c:	885b      	ldrh	r3, [r3, #2]
 801c95e:	2b01      	cmp	r3, #1
 801c960:	d110      	bne.n	801c984 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c962:	687a      	ldr	r2, [r7, #4]
 801c964:	23a9      	movs	r3, #169	@ 0xa9
 801c966:	009b      	lsls	r3, r3, #2
 801c968:	2100      	movs	r1, #0
 801c96a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	0018      	movs	r0, r3
 801c970:	f000 f92d 	bl	801cbce <USBD_CtlSendStatus>
      }
      break;
 801c974:	e006      	b.n	801c984 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c976:	683a      	ldr	r2, [r7, #0]
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	0011      	movs	r1, r2
 801c97c:	0018      	movs	r0, r3
 801c97e:	f000 f83e 	bl	801c9fe <USBD_CtlError>
      break;
 801c982:	e000      	b.n	801c986 <USBD_ClrFeature+0x44>
      break;
 801c984:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c986:	46c0      	nop			@ (mov r8, r8)
 801c988:	46bd      	mov	sp, r7
 801c98a:	b002      	add	sp, #8
 801c98c:	bd80      	pop	{r7, pc}

0801c98e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c98e:	b580      	push	{r7, lr}
 801c990:	b082      	sub	sp, #8
 801c992:	af00      	add	r7, sp, #0
 801c994:	6078      	str	r0, [r7, #4]
 801c996:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	781a      	ldrb	r2, [r3, #0]
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c9a0:	683b      	ldr	r3, [r7, #0]
 801c9a2:	785a      	ldrb	r2, [r3, #1]
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c9a8:	683b      	ldr	r3, [r7, #0]
 801c9aa:	3302      	adds	r3, #2
 801c9ac:	781b      	ldrb	r3, [r3, #0]
 801c9ae:	001a      	movs	r2, r3
 801c9b0:	683b      	ldr	r3, [r7, #0]
 801c9b2:	3303      	adds	r3, #3
 801c9b4:	781b      	ldrb	r3, [r3, #0]
 801c9b6:	021b      	lsls	r3, r3, #8
 801c9b8:	b29b      	uxth	r3, r3
 801c9ba:	18d3      	adds	r3, r2, r3
 801c9bc:	b29a      	uxth	r2, r3
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c9c2:	683b      	ldr	r3, [r7, #0]
 801c9c4:	3304      	adds	r3, #4
 801c9c6:	781b      	ldrb	r3, [r3, #0]
 801c9c8:	001a      	movs	r2, r3
 801c9ca:	683b      	ldr	r3, [r7, #0]
 801c9cc:	3305      	adds	r3, #5
 801c9ce:	781b      	ldrb	r3, [r3, #0]
 801c9d0:	021b      	lsls	r3, r3, #8
 801c9d2:	b29b      	uxth	r3, r3
 801c9d4:	18d3      	adds	r3, r2, r3
 801c9d6:	b29a      	uxth	r2, r3
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c9dc:	683b      	ldr	r3, [r7, #0]
 801c9de:	3306      	adds	r3, #6
 801c9e0:	781b      	ldrb	r3, [r3, #0]
 801c9e2:	001a      	movs	r2, r3
 801c9e4:	683b      	ldr	r3, [r7, #0]
 801c9e6:	3307      	adds	r3, #7
 801c9e8:	781b      	ldrb	r3, [r3, #0]
 801c9ea:	021b      	lsls	r3, r3, #8
 801c9ec:	b29b      	uxth	r3, r3
 801c9ee:	18d3      	adds	r3, r2, r3
 801c9f0:	b29a      	uxth	r2, r3
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	80da      	strh	r2, [r3, #6]

}
 801c9f6:	46c0      	nop			@ (mov r8, r8)
 801c9f8:	46bd      	mov	sp, r7
 801c9fa:	b002      	add	sp, #8
 801c9fc:	bd80      	pop	{r7, pc}

0801c9fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c9fe:	b580      	push	{r7, lr}
 801ca00:	b082      	sub	sp, #8
 801ca02:	af00      	add	r7, sp, #0
 801ca04:	6078      	str	r0, [r7, #4]
 801ca06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2180      	movs	r1, #128	@ 0x80
 801ca0c:	0018      	movs	r0, r3
 801ca0e:	f000 fd1e 	bl	801d44e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	2100      	movs	r1, #0
 801ca16:	0018      	movs	r0, r3
 801ca18:	f000 fd19 	bl	801d44e <USBD_LL_StallEP>
}
 801ca1c:	46c0      	nop			@ (mov r8, r8)
 801ca1e:	46bd      	mov	sp, r7
 801ca20:	b002      	add	sp, #8
 801ca22:	bd80      	pop	{r7, pc}

0801ca24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801ca24:	b590      	push	{r4, r7, lr}
 801ca26:	b087      	sub	sp, #28
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	60f8      	str	r0, [r7, #12]
 801ca2c:	60b9      	str	r1, [r7, #8]
 801ca2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801ca30:	2417      	movs	r4, #23
 801ca32:	193b      	adds	r3, r7, r4
 801ca34:	2200      	movs	r2, #0
 801ca36:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801ca38:	68fb      	ldr	r3, [r7, #12]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d03c      	beq.n	801cab8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	0018      	movs	r0, r3
 801ca42:	f000 f83d 	bl	801cac0 <USBD_GetLen>
 801ca46:	0003      	movs	r3, r0
 801ca48:	3301      	adds	r3, #1
 801ca4a:	b29b      	uxth	r3, r3
 801ca4c:	18db      	adds	r3, r3, r3
 801ca4e:	b29a      	uxth	r2, r3
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801ca54:	193b      	adds	r3, r7, r4
 801ca56:	781b      	ldrb	r3, [r3, #0]
 801ca58:	193a      	adds	r2, r7, r4
 801ca5a:	1c59      	adds	r1, r3, #1
 801ca5c:	7011      	strb	r1, [r2, #0]
 801ca5e:	001a      	movs	r2, r3
 801ca60:	68bb      	ldr	r3, [r7, #8]
 801ca62:	189b      	adds	r3, r3, r2
 801ca64:	687a      	ldr	r2, [r7, #4]
 801ca66:	7812      	ldrb	r2, [r2, #0]
 801ca68:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801ca6a:	193b      	adds	r3, r7, r4
 801ca6c:	781b      	ldrb	r3, [r3, #0]
 801ca6e:	193a      	adds	r2, r7, r4
 801ca70:	1c59      	adds	r1, r3, #1
 801ca72:	7011      	strb	r1, [r2, #0]
 801ca74:	001a      	movs	r2, r3
 801ca76:	68bb      	ldr	r3, [r7, #8]
 801ca78:	189b      	adds	r3, r3, r2
 801ca7a:	2203      	movs	r2, #3
 801ca7c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801ca7e:	e017      	b.n	801cab0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	1c5a      	adds	r2, r3, #1
 801ca84:	60fa      	str	r2, [r7, #12]
 801ca86:	2417      	movs	r4, #23
 801ca88:	193a      	adds	r2, r7, r4
 801ca8a:	7812      	ldrb	r2, [r2, #0]
 801ca8c:	1939      	adds	r1, r7, r4
 801ca8e:	1c50      	adds	r0, r2, #1
 801ca90:	7008      	strb	r0, [r1, #0]
 801ca92:	0011      	movs	r1, r2
 801ca94:	68ba      	ldr	r2, [r7, #8]
 801ca96:	1852      	adds	r2, r2, r1
 801ca98:	781b      	ldrb	r3, [r3, #0]
 801ca9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801ca9c:	193b      	adds	r3, r7, r4
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	193a      	adds	r2, r7, r4
 801caa2:	1c59      	adds	r1, r3, #1
 801caa4:	7011      	strb	r1, [r2, #0]
 801caa6:	001a      	movs	r2, r3
 801caa8:	68bb      	ldr	r3, [r7, #8]
 801caaa:	189b      	adds	r3, r3, r2
 801caac:	2200      	movs	r2, #0
 801caae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	781b      	ldrb	r3, [r3, #0]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d1e3      	bne.n	801ca80 <USBD_GetString+0x5c>
    }
  }
}
 801cab8:	46c0      	nop			@ (mov r8, r8)
 801caba:	46bd      	mov	sp, r7
 801cabc:	b007      	add	sp, #28
 801cabe:	bd90      	pop	{r4, r7, pc}

0801cac0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cac0:	b580      	push	{r7, lr}
 801cac2:	b084      	sub	sp, #16
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cac8:	230f      	movs	r3, #15
 801caca:	18fb      	adds	r3, r7, r3
 801cacc:	2200      	movs	r2, #0
 801cace:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cad0:	e008      	b.n	801cae4 <USBD_GetLen+0x24>
  {
    len++;
 801cad2:	210f      	movs	r1, #15
 801cad4:	187b      	adds	r3, r7, r1
 801cad6:	781a      	ldrb	r2, [r3, #0]
 801cad8:	187b      	adds	r3, r7, r1
 801cada:	3201      	adds	r2, #1
 801cadc:	701a      	strb	r2, [r3, #0]
    buf++;
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	3301      	adds	r3, #1
 801cae2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	781b      	ldrb	r3, [r3, #0]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d1f2      	bne.n	801cad2 <USBD_GetLen+0x12>
  }

  return len;
 801caec:	230f      	movs	r3, #15
 801caee:	18fb      	adds	r3, r7, r3
 801caf0:	781b      	ldrb	r3, [r3, #0]
}
 801caf2:	0018      	movs	r0, r3
 801caf4:	46bd      	mov	sp, r7
 801caf6:	b004      	add	sp, #16
 801caf8:	bd80      	pop	{r7, pc}

0801cafa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cafa:	b580      	push	{r7, lr}
 801cafc:	b084      	sub	sp, #16
 801cafe:	af00      	add	r7, sp, #0
 801cb00:	60f8      	str	r0, [r7, #12]
 801cb02:	60b9      	str	r1, [r7, #8]
 801cb04:	1dbb      	adds	r3, r7, #6
 801cb06:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cb08:	68fa      	ldr	r2, [r7, #12]
 801cb0a:	23a5      	movs	r3, #165	@ 0xa5
 801cb0c:	009b      	lsls	r3, r3, #2
 801cb0e:	2102      	movs	r1, #2
 801cb10:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cb12:	1dbb      	adds	r3, r7, #6
 801cb14:	881a      	ldrh	r2, [r3, #0]
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801cb1a:	1dbb      	adds	r3, r7, #6
 801cb1c:	881a      	ldrh	r2, [r3, #0]
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cb22:	1dbb      	adds	r3, r7, #6
 801cb24:	881b      	ldrh	r3, [r3, #0]
 801cb26:	68ba      	ldr	r2, [r7, #8]
 801cb28:	68f8      	ldr	r0, [r7, #12]
 801cb2a:	2100      	movs	r1, #0
 801cb2c:	f000 fd41 	bl	801d5b2 <USBD_LL_Transmit>

  return USBD_OK;
 801cb30:	2300      	movs	r3, #0
}
 801cb32:	0018      	movs	r0, r3
 801cb34:	46bd      	mov	sp, r7
 801cb36:	b004      	add	sp, #16
 801cb38:	bd80      	pop	{r7, pc}

0801cb3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cb3a:	b580      	push	{r7, lr}
 801cb3c:	b084      	sub	sp, #16
 801cb3e:	af00      	add	r7, sp, #0
 801cb40:	60f8      	str	r0, [r7, #12]
 801cb42:	60b9      	str	r1, [r7, #8]
 801cb44:	1dbb      	adds	r3, r7, #6
 801cb46:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cb48:	1dbb      	adds	r3, r7, #6
 801cb4a:	881b      	ldrh	r3, [r3, #0]
 801cb4c:	68ba      	ldr	r2, [r7, #8]
 801cb4e:	68f8      	ldr	r0, [r7, #12]
 801cb50:	2100      	movs	r1, #0
 801cb52:	f000 fd2e 	bl	801d5b2 <USBD_LL_Transmit>

  return USBD_OK;
 801cb56:	2300      	movs	r3, #0
}
 801cb58:	0018      	movs	r0, r3
 801cb5a:	46bd      	mov	sp, r7
 801cb5c:	b004      	add	sp, #16
 801cb5e:	bd80      	pop	{r7, pc}

0801cb60 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b084      	sub	sp, #16
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	60f8      	str	r0, [r7, #12]
 801cb68:	60b9      	str	r1, [r7, #8]
 801cb6a:	1dbb      	adds	r3, r7, #6
 801cb6c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801cb6e:	68fa      	ldr	r2, [r7, #12]
 801cb70:	23a5      	movs	r3, #165	@ 0xa5
 801cb72:	009b      	lsls	r3, r3, #2
 801cb74:	2103      	movs	r1, #3
 801cb76:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cb78:	1dbb      	adds	r3, r7, #6
 801cb7a:	8819      	ldrh	r1, [r3, #0]
 801cb7c:	68fa      	ldr	r2, [r7, #12]
 801cb7e:	23ae      	movs	r3, #174	@ 0xae
 801cb80:	005b      	lsls	r3, r3, #1
 801cb82:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cb84:	1dbb      	adds	r3, r7, #6
 801cb86:	8819      	ldrh	r1, [r3, #0]
 801cb88:	68fa      	ldr	r2, [r7, #12]
 801cb8a:	23b0      	movs	r3, #176	@ 0xb0
 801cb8c:	005b      	lsls	r3, r3, #1
 801cb8e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cb90:	1dbb      	adds	r3, r7, #6
 801cb92:	881b      	ldrh	r3, [r3, #0]
 801cb94:	68ba      	ldr	r2, [r7, #8]
 801cb96:	68f8      	ldr	r0, [r7, #12]
 801cb98:	2100      	movs	r1, #0
 801cb9a:	f000 fd41 	bl	801d620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb9e:	2300      	movs	r3, #0
}
 801cba0:	0018      	movs	r0, r3
 801cba2:	46bd      	mov	sp, r7
 801cba4:	b004      	add	sp, #16
 801cba6:	bd80      	pop	{r7, pc}

0801cba8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b084      	sub	sp, #16
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	60f8      	str	r0, [r7, #12]
 801cbb0:	60b9      	str	r1, [r7, #8]
 801cbb2:	1dbb      	adds	r3, r7, #6
 801cbb4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cbb6:	1dbb      	adds	r3, r7, #6
 801cbb8:	881b      	ldrh	r3, [r3, #0]
 801cbba:	68ba      	ldr	r2, [r7, #8]
 801cbbc:	68f8      	ldr	r0, [r7, #12]
 801cbbe:	2100      	movs	r1, #0
 801cbc0:	f000 fd2e 	bl	801d620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cbc4:	2300      	movs	r3, #0
}
 801cbc6:	0018      	movs	r0, r3
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	b004      	add	sp, #16
 801cbcc:	bd80      	pop	{r7, pc}

0801cbce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cbce:	b580      	push	{r7, lr}
 801cbd0:	b082      	sub	sp, #8
 801cbd2:	af00      	add	r7, sp, #0
 801cbd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	23a5      	movs	r3, #165	@ 0xa5
 801cbda:	009b      	lsls	r3, r3, #2
 801cbdc:	2104      	movs	r1, #4
 801cbde:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cbe0:	6878      	ldr	r0, [r7, #4]
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	2100      	movs	r1, #0
 801cbe8:	f000 fce3 	bl	801d5b2 <USBD_LL_Transmit>

  return USBD_OK;
 801cbec:	2300      	movs	r3, #0
}
 801cbee:	0018      	movs	r0, r3
 801cbf0:	46bd      	mov	sp, r7
 801cbf2:	b002      	add	sp, #8
 801cbf4:	bd80      	pop	{r7, pc}

0801cbf6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cbf6:	b580      	push	{r7, lr}
 801cbf8:	b082      	sub	sp, #8
 801cbfa:	af00      	add	r7, sp, #0
 801cbfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cbfe:	687a      	ldr	r2, [r7, #4]
 801cc00:	23a5      	movs	r3, #165	@ 0xa5
 801cc02:	009b      	lsls	r3, r3, #2
 801cc04:	2105      	movs	r1, #5
 801cc06:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cc08:	6878      	ldr	r0, [r7, #4]
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	2100      	movs	r1, #0
 801cc10:	f000 fd06 	bl	801d620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cc14:	2300      	movs	r3, #0
}
 801cc16:	0018      	movs	r0, r3
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	b002      	add	sp, #8
 801cc1c:	bd80      	pop	{r7, pc}
	...

0801cc20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cc24:	4914      	ldr	r1, [pc, #80]	@ (801cc78 <MX_USB_DEVICE_Init+0x58>)
 801cc26:	4b15      	ldr	r3, [pc, #84]	@ (801cc7c <MX_USB_DEVICE_Init+0x5c>)
 801cc28:	2200      	movs	r2, #0
 801cc2a:	0018      	movs	r0, r3
 801cc2c:	f7fe fdec 	bl	801b808 <USBD_Init>
 801cc30:	1e03      	subs	r3, r0, #0
 801cc32:	d001      	beq.n	801cc38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cc34:	f7eb fb6a 	bl	800830c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cc38:	4a11      	ldr	r2, [pc, #68]	@ (801cc80 <MX_USB_DEVICE_Init+0x60>)
 801cc3a:	4b10      	ldr	r3, [pc, #64]	@ (801cc7c <MX_USB_DEVICE_Init+0x5c>)
 801cc3c:	0011      	movs	r1, r2
 801cc3e:	0018      	movs	r0, r3
 801cc40:	f7fe fe13 	bl	801b86a <USBD_RegisterClass>
 801cc44:	1e03      	subs	r3, r0, #0
 801cc46:	d001      	beq.n	801cc4c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cc48:	f7eb fb60 	bl	800830c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cc4c:	4a0d      	ldr	r2, [pc, #52]	@ (801cc84 <MX_USB_DEVICE_Init+0x64>)
 801cc4e:	4b0b      	ldr	r3, [pc, #44]	@ (801cc7c <MX_USB_DEVICE_Init+0x5c>)
 801cc50:	0011      	movs	r1, r2
 801cc52:	0018      	movs	r0, r3
 801cc54:	f7fe fd28 	bl	801b6a8 <USBD_CDC_RegisterInterface>
 801cc58:	1e03      	subs	r3, r0, #0
 801cc5a:	d001      	beq.n	801cc60 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cc5c:	f7eb fb56 	bl	800830c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cc60:	4b06      	ldr	r3, [pc, #24]	@ (801cc7c <MX_USB_DEVICE_Init+0x5c>)
 801cc62:	0018      	movs	r0, r3
 801cc64:	f7fe fe21 	bl	801b8aa <USBD_Start>
 801cc68:	1e03      	subs	r3, r0, #0
 801cc6a:	d001      	beq.n	801cc70 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cc6c:	f7eb fb4e 	bl	800830c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cc70:	46c0      	nop			@ (mov r8, r8)
 801cc72:	46bd      	mov	sp, r7
 801cc74:	bd80      	pop	{r7, pc}
 801cc76:	46c0      	nop			@ (mov r8, r8)
 801cc78:	2000020c 	.word	0x2000020c
 801cc7c:	200023d4 	.word	0x200023d4
 801cc80:	200000f8 	.word	0x200000f8
 801cc84:	200001fc 	.word	0x200001fc

0801cc88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cc8c:	4907      	ldr	r1, [pc, #28]	@ (801ccac <CDC_Init_FS+0x24>)
 801cc8e:	4b08      	ldr	r3, [pc, #32]	@ (801ccb0 <CDC_Init_FS+0x28>)
 801cc90:	2200      	movs	r2, #0
 801cc92:	0018      	movs	r0, r3
 801cc94:	f7fe fd23 	bl	801b6de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cc98:	4a06      	ldr	r2, [pc, #24]	@ (801ccb4 <CDC_Init_FS+0x2c>)
 801cc9a:	4b05      	ldr	r3, [pc, #20]	@ (801ccb0 <CDC_Init_FS+0x28>)
 801cc9c:	0011      	movs	r1, r2
 801cc9e:	0018      	movs	r0, r3
 801cca0:	f7fe fd39 	bl	801b716 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cca4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cca6:	0018      	movs	r0, r3
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bd80      	pop	{r7, pc}
 801ccac:	20002b58 	.word	0x20002b58
 801ccb0:	200023d4 	.word	0x200023d4
 801ccb4:	20002758 	.word	0x20002758

0801ccb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ccbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ccbe:	0018      	movs	r0, r3
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}

0801ccc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b082      	sub	sp, #8
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6039      	str	r1, [r7, #0]
 801cccc:	0011      	movs	r1, r2
 801ccce:	1dfb      	adds	r3, r7, #7
 801ccd0:	1c02      	adds	r2, r0, #0
 801ccd2:	701a      	strb	r2, [r3, #0]
 801ccd4:	1d3b      	adds	r3, r7, #4
 801ccd6:	1c0a      	adds	r2, r1, #0
 801ccd8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ccda:	1dfb      	adds	r3, r7, #7
 801ccdc:	781b      	ldrb	r3, [r3, #0]
 801ccde:	2b23      	cmp	r3, #35	@ 0x23
 801cce0:	d804      	bhi.n	801ccec <CDC_Control_FS+0x28>
 801cce2:	009a      	lsls	r2, r3, #2
 801cce4:	4b04      	ldr	r3, [pc, #16]	@ (801ccf8 <CDC_Control_FS+0x34>)
 801cce6:	18d3      	adds	r3, r2, r3
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ccec:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801ccee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ccf0:	0018      	movs	r0, r3
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	b002      	add	sp, #8
 801ccf6:	bd80      	pop	{r7, pc}
 801ccf8:	0802572c 	.word	0x0802572c

0801ccfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b082      	sub	sp, #8
 801cd00:	af00      	add	r7, sp, #0
 801cd02:	6078      	str	r0, [r7, #4]
 801cd04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801cd06:	4b12      	ldr	r3, [pc, #72]	@ (801cd50 <CDC_Receive_FS+0x54>)
 801cd08:	781b      	ldrb	r3, [r3, #0]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d013      	beq.n	801cd36 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	b29a      	uxth	r2, r3
 801cd14:	2301      	movs	r3, #1
 801cd16:	425b      	negs	r3, r3
 801cd18:	6879      	ldr	r1, [r7, #4]
 801cd1a:	480e      	ldr	r0, [pc, #56]	@ (801cd54 <CDC_Receive_FS+0x58>)
 801cd1c:	f7fa fa46 	bl	80171ac <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cd20:	687a      	ldr	r2, [r7, #4]
 801cd22:	4b0d      	ldr	r3, [pc, #52]	@ (801cd58 <CDC_Receive_FS+0x5c>)
 801cd24:	0011      	movs	r1, r2
 801cd26:	0018      	movs	r0, r3
 801cd28:	f7fe fcf5 	bl	801b716 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd2c:	4b0a      	ldr	r3, [pc, #40]	@ (801cd58 <CDC_Receive_FS+0x5c>)
 801cd2e:	0018      	movs	r0, r3
 801cd30:	f7fe fd3c 	bl	801b7ac <USBD_CDC_ReceivePacket>
 801cd34:	e006      	b.n	801cd44 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801cd36:	683b      	ldr	r3, [r7, #0]
 801cd38:	681a      	ldr	r2, [r3, #0]
 801cd3a:	4b08      	ldr	r3, [pc, #32]	@ (801cd5c <CDC_Receive_FS+0x60>)
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	18d2      	adds	r2, r2, r3
 801cd40:	4b06      	ldr	r3, [pc, #24]	@ (801cd5c <CDC_Receive_FS+0x60>)
 801cd42:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801cd44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cd46:	0018      	movs	r0, r3
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	b002      	add	sp, #8
 801cd4c:	bd80      	pop	{r7, pc}
 801cd4e:	46c0      	nop			@ (mov r8, r8)
 801cd50:	20002698 	.word	0x20002698
 801cd54:	2000269c 	.word	0x2000269c
 801cd58:	200023d4 	.word	0x200023d4
 801cd5c:	20002754 	.word	0x20002754

0801cd60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cd60:	b5b0      	push	{r4, r5, r7, lr}
 801cd62:	b084      	sub	sp, #16
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	000a      	movs	r2, r1
 801cd6a:	1cbb      	adds	r3, r7, #2
 801cd6c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801cd6e:	230f      	movs	r3, #15
 801cd70:	18fb      	adds	r3, r7, r3
 801cd72:	2200      	movs	r2, #0
 801cd74:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cd76:	4a11      	ldr	r2, [pc, #68]	@ (801cdbc <CDC_Transmit_FS+0x5c>)
 801cd78:	23ae      	movs	r3, #174	@ 0xae
 801cd7a:	009b      	lsls	r3, r3, #2
 801cd7c:	58d3      	ldr	r3, [r2, r3]
 801cd7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cd80:	68ba      	ldr	r2, [r7, #8]
 801cd82:	2385      	movs	r3, #133	@ 0x85
 801cd84:	009b      	lsls	r3, r3, #2
 801cd86:	58d3      	ldr	r3, [r2, r3]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d001      	beq.n	801cd90 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801cd8c:	2301      	movs	r3, #1
 801cd8e:	e010      	b.n	801cdb2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cd90:	1cbb      	adds	r3, r7, #2
 801cd92:	881a      	ldrh	r2, [r3, #0]
 801cd94:	6879      	ldr	r1, [r7, #4]
 801cd96:	4b09      	ldr	r3, [pc, #36]	@ (801cdbc <CDC_Transmit_FS+0x5c>)
 801cd98:	0018      	movs	r0, r3
 801cd9a:	f7fe fca0 	bl	801b6de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cd9e:	250f      	movs	r5, #15
 801cda0:	197c      	adds	r4, r7, r5
 801cda2:	4b06      	ldr	r3, [pc, #24]	@ (801cdbc <CDC_Transmit_FS+0x5c>)
 801cda4:	0018      	movs	r0, r3
 801cda6:	f7fe fcca 	bl	801b73e <USBD_CDC_TransmitPacket>
 801cdaa:	0003      	movs	r3, r0
 801cdac:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cdae:	197b      	adds	r3, r7, r5
 801cdb0:	781b      	ldrb	r3, [r3, #0]
}
 801cdb2:	0018      	movs	r0, r3
 801cdb4:	46bd      	mov	sp, r7
 801cdb6:	b004      	add	sp, #16
 801cdb8:	bdb0      	pop	{r4, r5, r7, pc}
 801cdba:	46c0      	nop			@ (mov r8, r8)
 801cdbc:	200023d4 	.word	0x200023d4

0801cdc0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cdc4:	4b02      	ldr	r3, [pc, #8]	@ (801cdd0 <EnableESPProg+0x10>)
 801cdc6:	2201      	movs	r2, #1
 801cdc8:	701a      	strb	r2, [r3, #0]
}
 801cdca:	46c0      	nop			@ (mov r8, r8)
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}
 801cdd0:	20002698 	.word	0x20002698

0801cdd4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cdd8:	4b01      	ldr	r3, [pc, #4]	@ (801cde0 <GetUsbRxPointer+0xc>)
}
 801cdda:	0018      	movs	r0, r3
 801cddc:	46bd      	mov	sp, r7
 801cdde:	bd80      	pop	{r7, pc}
 801cde0:	20002758 	.word	0x20002758

0801cde4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cde8:	4b07      	ldr	r3, [pc, #28]	@ (801ce08 <ResetUsbRxDataSize+0x24>)
 801cdea:	2200      	movs	r2, #0
 801cdec:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cdee:	4a07      	ldr	r2, [pc, #28]	@ (801ce0c <ResetUsbRxDataSize+0x28>)
 801cdf0:	4b07      	ldr	r3, [pc, #28]	@ (801ce10 <ResetUsbRxDataSize+0x2c>)
 801cdf2:	0011      	movs	r1, r2
 801cdf4:	0018      	movs	r0, r3
 801cdf6:	f7fe fc8e 	bl	801b716 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cdfa:	4b05      	ldr	r3, [pc, #20]	@ (801ce10 <ResetUsbRxDataSize+0x2c>)
 801cdfc:	0018      	movs	r0, r3
 801cdfe:	f7fe fcd5 	bl	801b7ac <USBD_CDC_ReceivePacket>
}
 801ce02:	46c0      	nop			@ (mov r8, r8)
 801ce04:	46bd      	mov	sp, r7
 801ce06:	bd80      	pop	{r7, pc}
 801ce08:	20002754 	.word	0x20002754
 801ce0c:	20002758 	.word	0x20002758
 801ce10:	200023d4 	.word	0x200023d4

0801ce14 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801ce14:	b580      	push	{r7, lr}
 801ce16:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801ce18:	4b02      	ldr	r3, [pc, #8]	@ (801ce24 <GetUsbRxDataSize+0x10>)
 801ce1a:	681b      	ldr	r3, [r3, #0]
}
 801ce1c:	0018      	movs	r0, r3
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	bd80      	pop	{r7, pc}
 801ce22:	46c0      	nop			@ (mov r8, r8)
 801ce24:	20002754 	.word	0x20002754

0801ce28 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801ce28:	b580      	push	{r7, lr}
 801ce2a:	b082      	sub	sp, #8
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801ce30:	687a      	ldr	r2, [r7, #4]
 801ce32:	4b07      	ldr	r3, [pc, #28]	@ (801ce50 <GetUsbRxNextChunk+0x28>)
 801ce34:	18d2      	adds	r2, r2, r3
 801ce36:	4b07      	ldr	r3, [pc, #28]	@ (801ce54 <GetUsbRxNextChunk+0x2c>)
 801ce38:	0011      	movs	r1, r2
 801ce3a:	0018      	movs	r0, r3
 801ce3c:	f7fe fc6b 	bl	801b716 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ce40:	4b04      	ldr	r3, [pc, #16]	@ (801ce54 <GetUsbRxNextChunk+0x2c>)
 801ce42:	0018      	movs	r0, r3
 801ce44:	f7fe fcb2 	bl	801b7ac <USBD_CDC_ReceivePacket>
}
 801ce48:	46c0      	nop			@ (mov r8, r8)
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	b002      	add	sp, #8
 801ce4e:	bd80      	pop	{r7, pc}
 801ce50:	20002758 	.word	0x20002758
 801ce54:	200023d4 	.word	0x200023d4

0801ce58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce58:	b580      	push	{r7, lr}
 801ce5a:	b082      	sub	sp, #8
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	0002      	movs	r2, r0
 801ce60:	6039      	str	r1, [r7, #0]
 801ce62:	1dfb      	adds	r3, r7, #7
 801ce64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	2212      	movs	r2, #18
 801ce6a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ce6c:	4b02      	ldr	r3, [pc, #8]	@ (801ce78 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ce6e:	0018      	movs	r0, r3
 801ce70:	46bd      	mov	sp, r7
 801ce72:	b002      	add	sp, #8
 801ce74:	bd80      	pop	{r7, pc}
 801ce76:	46c0      	nop			@ (mov r8, r8)
 801ce78:	20000228 	.word	0x20000228

0801ce7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b082      	sub	sp, #8
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	0002      	movs	r2, r0
 801ce84:	6039      	str	r1, [r7, #0]
 801ce86:	1dfb      	adds	r3, r7, #7
 801ce88:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ce8a:	683b      	ldr	r3, [r7, #0]
 801ce8c:	2204      	movs	r2, #4
 801ce8e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ce90:	4b02      	ldr	r3, [pc, #8]	@ (801ce9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ce92:	0018      	movs	r0, r3
 801ce94:	46bd      	mov	sp, r7
 801ce96:	b002      	add	sp, #8
 801ce98:	bd80      	pop	{r7, pc}
 801ce9a:	46c0      	nop			@ (mov r8, r8)
 801ce9c:	2000023c 	.word	0x2000023c

0801cea0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b082      	sub	sp, #8
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	0002      	movs	r2, r0
 801cea8:	6039      	str	r1, [r7, #0]
 801ceaa:	1dfb      	adds	r3, r7, #7
 801ceac:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ceae:	1dfb      	adds	r3, r7, #7
 801ceb0:	781b      	ldrb	r3, [r3, #0]
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d106      	bne.n	801cec4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ceb6:	683a      	ldr	r2, [r7, #0]
 801ceb8:	4908      	ldr	r1, [pc, #32]	@ (801cedc <USBD_FS_ProductStrDescriptor+0x3c>)
 801ceba:	4b09      	ldr	r3, [pc, #36]	@ (801cee0 <USBD_FS_ProductStrDescriptor+0x40>)
 801cebc:	0018      	movs	r0, r3
 801cebe:	f7ff fdb1 	bl	801ca24 <USBD_GetString>
 801cec2:	e005      	b.n	801ced0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cec4:	683a      	ldr	r2, [r7, #0]
 801cec6:	4905      	ldr	r1, [pc, #20]	@ (801cedc <USBD_FS_ProductStrDescriptor+0x3c>)
 801cec8:	4b05      	ldr	r3, [pc, #20]	@ (801cee0 <USBD_FS_ProductStrDescriptor+0x40>)
 801ceca:	0018      	movs	r0, r3
 801cecc:	f7ff fdaa 	bl	801ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ced0:	4b02      	ldr	r3, [pc, #8]	@ (801cedc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801ced2:	0018      	movs	r0, r3
 801ced4:	46bd      	mov	sp, r7
 801ced6:	b002      	add	sp, #8
 801ced8:	bd80      	pop	{r7, pc}
 801ceda:	46c0      	nop			@ (mov r8, r8)
 801cedc:	20002f58 	.word	0x20002f58
 801cee0:	080251b8 	.word	0x080251b8

0801cee4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b082      	sub	sp, #8
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	0002      	movs	r2, r0
 801ceec:	6039      	str	r1, [r7, #0]
 801ceee:	1dfb      	adds	r3, r7, #7
 801cef0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cef2:	683a      	ldr	r2, [r7, #0]
 801cef4:	4904      	ldr	r1, [pc, #16]	@ (801cf08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cef6:	4b05      	ldr	r3, [pc, #20]	@ (801cf0c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801cef8:	0018      	movs	r0, r3
 801cefa:	f7ff fd93 	bl	801ca24 <USBD_GetString>
  return USBD_StrDesc;
 801cefe:	4b02      	ldr	r3, [pc, #8]	@ (801cf08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801cf00:	0018      	movs	r0, r3
 801cf02:	46bd      	mov	sp, r7
 801cf04:	b002      	add	sp, #8
 801cf06:	bd80      	pop	{r7, pc}
 801cf08:	20002f58 	.word	0x20002f58
 801cf0c:	080251d0 	.word	0x080251d0

0801cf10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b082      	sub	sp, #8
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	0002      	movs	r2, r0
 801cf18:	6039      	str	r1, [r7, #0]
 801cf1a:	1dfb      	adds	r3, r7, #7
 801cf1c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cf1e:	683b      	ldr	r3, [r7, #0]
 801cf20:	221a      	movs	r2, #26
 801cf22:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cf24:	f000 f84c 	bl	801cfc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cf28:	4b02      	ldr	r3, [pc, #8]	@ (801cf34 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801cf2a:	0018      	movs	r0, r3
 801cf2c:	46bd      	mov	sp, r7
 801cf2e:	b002      	add	sp, #8
 801cf30:	bd80      	pop	{r7, pc}
 801cf32:	46c0      	nop			@ (mov r8, r8)
 801cf34:	20000240 	.word	0x20000240

0801cf38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf38:	b580      	push	{r7, lr}
 801cf3a:	b082      	sub	sp, #8
 801cf3c:	af00      	add	r7, sp, #0
 801cf3e:	0002      	movs	r2, r0
 801cf40:	6039      	str	r1, [r7, #0]
 801cf42:	1dfb      	adds	r3, r7, #7
 801cf44:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801cf46:	1dfb      	adds	r3, r7, #7
 801cf48:	781b      	ldrb	r3, [r3, #0]
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d106      	bne.n	801cf5c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf4e:	683a      	ldr	r2, [r7, #0]
 801cf50:	4908      	ldr	r1, [pc, #32]	@ (801cf74 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cf52:	4b09      	ldr	r3, [pc, #36]	@ (801cf78 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cf54:	0018      	movs	r0, r3
 801cf56:	f7ff fd65 	bl	801ca24 <USBD_GetString>
 801cf5a:	e005      	b.n	801cf68 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf5c:	683a      	ldr	r2, [r7, #0]
 801cf5e:	4905      	ldr	r1, [pc, #20]	@ (801cf74 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cf60:	4b05      	ldr	r3, [pc, #20]	@ (801cf78 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cf62:	0018      	movs	r0, r3
 801cf64:	f7ff fd5e 	bl	801ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf68:	4b02      	ldr	r3, [pc, #8]	@ (801cf74 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801cf6a:	0018      	movs	r0, r3
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	b002      	add	sp, #8
 801cf70:	bd80      	pop	{r7, pc}
 801cf72:	46c0      	nop			@ (mov r8, r8)
 801cf74:	20002f58 	.word	0x20002f58
 801cf78:	080251e4 	.word	0x080251e4

0801cf7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b082      	sub	sp, #8
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	0002      	movs	r2, r0
 801cf84:	6039      	str	r1, [r7, #0]
 801cf86:	1dfb      	adds	r3, r7, #7
 801cf88:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cf8a:	1dfb      	adds	r3, r7, #7
 801cf8c:	781b      	ldrb	r3, [r3, #0]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d106      	bne.n	801cfa0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf92:	683a      	ldr	r2, [r7, #0]
 801cf94:	4908      	ldr	r1, [pc, #32]	@ (801cfb8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cf96:	4b09      	ldr	r3, [pc, #36]	@ (801cfbc <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cf98:	0018      	movs	r0, r3
 801cf9a:	f7ff fd43 	bl	801ca24 <USBD_GetString>
 801cf9e:	e005      	b.n	801cfac <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cfa0:	683a      	ldr	r2, [r7, #0]
 801cfa2:	4905      	ldr	r1, [pc, #20]	@ (801cfb8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cfa4:	4b05      	ldr	r3, [pc, #20]	@ (801cfbc <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cfa6:	0018      	movs	r0, r3
 801cfa8:	f7ff fd3c 	bl	801ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cfac:	4b02      	ldr	r3, [pc, #8]	@ (801cfb8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801cfae:	0018      	movs	r0, r3
 801cfb0:	46bd      	mov	sp, r7
 801cfb2:	b002      	add	sp, #8
 801cfb4:	bd80      	pop	{r7, pc}
 801cfb6:	46c0      	nop			@ (mov r8, r8)
 801cfb8:	20002f58 	.word	0x20002f58
 801cfbc:	080251f0 	.word	0x080251f0

0801cfc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b084      	sub	sp, #16
 801cfc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cfc6:	4b10      	ldr	r3, [pc, #64]	@ (801d008 <Get_SerialNum+0x48>)
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cfcc:	4b0f      	ldr	r3, [pc, #60]	@ (801d00c <Get_SerialNum+0x4c>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cfd2:	4b0f      	ldr	r3, [pc, #60]	@ (801d010 <Get_SerialNum+0x50>)
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cfd8:	68fa      	ldr	r2, [r7, #12]
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	18d3      	adds	r3, r2, r3
 801cfde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d00b      	beq.n	801cffe <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cfe6:	490b      	ldr	r1, [pc, #44]	@ (801d014 <Get_SerialNum+0x54>)
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	2208      	movs	r2, #8
 801cfec:	0018      	movs	r0, r3
 801cfee:	f000 f815 	bl	801d01c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cff2:	4909      	ldr	r1, [pc, #36]	@ (801d018 <Get_SerialNum+0x58>)
 801cff4:	68bb      	ldr	r3, [r7, #8]
 801cff6:	2204      	movs	r2, #4
 801cff8:	0018      	movs	r0, r3
 801cffa:	f000 f80f 	bl	801d01c <IntToUnicode>
  }
}
 801cffe:	46c0      	nop			@ (mov r8, r8)
 801d000:	46bd      	mov	sp, r7
 801d002:	b004      	add	sp, #16
 801d004:	bd80      	pop	{r7, pc}
 801d006:	46c0      	nop			@ (mov r8, r8)
 801d008:	1ff80050 	.word	0x1ff80050
 801d00c:	1ff80054 	.word	0x1ff80054
 801d010:	1ff80058 	.word	0x1ff80058
 801d014:	20000242 	.word	0x20000242
 801d018:	20000252 	.word	0x20000252

0801d01c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b086      	sub	sp, #24
 801d020:	af00      	add	r7, sp, #0
 801d022:	60f8      	str	r0, [r7, #12]
 801d024:	60b9      	str	r1, [r7, #8]
 801d026:	1dfb      	adds	r3, r7, #7
 801d028:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d02a:	2117      	movs	r1, #23
 801d02c:	187b      	adds	r3, r7, r1
 801d02e:	2200      	movs	r2, #0
 801d030:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d032:	187b      	adds	r3, r7, r1
 801d034:	2200      	movs	r2, #0
 801d036:	701a      	strb	r2, [r3, #0]
 801d038:	e02f      	b.n	801d09a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	0f1b      	lsrs	r3, r3, #28
 801d03e:	2b09      	cmp	r3, #9
 801d040:	d80d      	bhi.n	801d05e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	0f1b      	lsrs	r3, r3, #28
 801d046:	b2da      	uxtb	r2, r3
 801d048:	2317      	movs	r3, #23
 801d04a:	18fb      	adds	r3, r7, r3
 801d04c:	781b      	ldrb	r3, [r3, #0]
 801d04e:	005b      	lsls	r3, r3, #1
 801d050:	0019      	movs	r1, r3
 801d052:	68bb      	ldr	r3, [r7, #8]
 801d054:	185b      	adds	r3, r3, r1
 801d056:	3230      	adds	r2, #48	@ 0x30
 801d058:	b2d2      	uxtb	r2, r2
 801d05a:	701a      	strb	r2, [r3, #0]
 801d05c:	e00c      	b.n	801d078 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	0f1b      	lsrs	r3, r3, #28
 801d062:	b2da      	uxtb	r2, r3
 801d064:	2317      	movs	r3, #23
 801d066:	18fb      	adds	r3, r7, r3
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	005b      	lsls	r3, r3, #1
 801d06c:	0019      	movs	r1, r3
 801d06e:	68bb      	ldr	r3, [r7, #8]
 801d070:	185b      	adds	r3, r3, r1
 801d072:	3237      	adds	r2, #55	@ 0x37
 801d074:	b2d2      	uxtb	r2, r2
 801d076:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d078:	68fb      	ldr	r3, [r7, #12]
 801d07a:	011b      	lsls	r3, r3, #4
 801d07c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d07e:	2117      	movs	r1, #23
 801d080:	187b      	adds	r3, r7, r1
 801d082:	781b      	ldrb	r3, [r3, #0]
 801d084:	005b      	lsls	r3, r3, #1
 801d086:	3301      	adds	r3, #1
 801d088:	68ba      	ldr	r2, [r7, #8]
 801d08a:	18d3      	adds	r3, r2, r3
 801d08c:	2200      	movs	r2, #0
 801d08e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d090:	187b      	adds	r3, r7, r1
 801d092:	781a      	ldrb	r2, [r3, #0]
 801d094:	187b      	adds	r3, r7, r1
 801d096:	3201      	adds	r2, #1
 801d098:	701a      	strb	r2, [r3, #0]
 801d09a:	2317      	movs	r3, #23
 801d09c:	18fa      	adds	r2, r7, r3
 801d09e:	1dfb      	adds	r3, r7, #7
 801d0a0:	7812      	ldrb	r2, [r2, #0]
 801d0a2:	781b      	ldrb	r3, [r3, #0]
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d3c8      	bcc.n	801d03a <IntToUnicode+0x1e>
  }
}
 801d0a8:	46c0      	nop			@ (mov r8, r8)
 801d0aa:	46c0      	nop			@ (mov r8, r8)
 801d0ac:	46bd      	mov	sp, r7
 801d0ae:	b006      	add	sp, #24
 801d0b0:	bd80      	pop	{r7, pc}
	...

0801d0b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d0b4:	b580      	push	{r7, lr}
 801d0b6:	b082      	sub	sp, #8
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	4a0a      	ldr	r2, [pc, #40]	@ (801d0ec <HAL_PCD_MspInit+0x38>)
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d10e      	bne.n	801d0e4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d0c6:	4b0a      	ldr	r3, [pc, #40]	@ (801d0f0 <HAL_PCD_MspInit+0x3c>)
 801d0c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d0ca:	4b09      	ldr	r3, [pc, #36]	@ (801d0f0 <HAL_PCD_MspInit+0x3c>)
 801d0cc:	2180      	movs	r1, #128	@ 0x80
 801d0ce:	0409      	lsls	r1, r1, #16
 801d0d0:	430a      	orrs	r2, r1
 801d0d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	2100      	movs	r1, #0
 801d0d8:	201f      	movs	r0, #31
 801d0da:	f7f2 fadf 	bl	800f69c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d0de:	201f      	movs	r0, #31
 801d0e0:	f7f2 faf1 	bl	800f6c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d0e4:	46c0      	nop			@ (mov r8, r8)
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	b002      	add	sp, #8
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	40005c00 	.word	0x40005c00
 801d0f0:	40021000 	.word	0x40021000

0801d0f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b082      	sub	sp, #8
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d0fc:	687a      	ldr	r2, [r7, #4]
 801d0fe:	23bc      	movs	r3, #188	@ 0xbc
 801d100:	009b      	lsls	r3, r3, #2
 801d102:	58d2      	ldr	r2, [r2, r3]
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	21ac      	movs	r1, #172	@ 0xac
 801d108:	0089      	lsls	r1, r1, #2
 801d10a:	468c      	mov	ip, r1
 801d10c:	4463      	add	r3, ip
 801d10e:	0019      	movs	r1, r3
 801d110:	0010      	movs	r0, r2
 801d112:	f7fe fc1d 	bl	801b950 <USBD_LL_SetupStage>
}
 801d116:	46c0      	nop			@ (mov r8, r8)
 801d118:	46bd      	mov	sp, r7
 801d11a:	b002      	add	sp, #8
 801d11c:	bd80      	pop	{r7, pc}

0801d11e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d11e:	b590      	push	{r4, r7, lr}
 801d120:	b083      	sub	sp, #12
 801d122:	af00      	add	r7, sp, #0
 801d124:	6078      	str	r0, [r7, #4]
 801d126:	000a      	movs	r2, r1
 801d128:	1cfb      	adds	r3, r7, #3
 801d12a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d12c:	687a      	ldr	r2, [r7, #4]
 801d12e:	23bc      	movs	r3, #188	@ 0xbc
 801d130:	009b      	lsls	r3, r3, #2
 801d132:	58d4      	ldr	r4, [r2, r3]
 801d134:	1cfb      	adds	r3, r7, #3
 801d136:	781a      	ldrb	r2, [r3, #0]
 801d138:	6878      	ldr	r0, [r7, #4]
 801d13a:	23be      	movs	r3, #190	@ 0xbe
 801d13c:	0059      	lsls	r1, r3, #1
 801d13e:	0013      	movs	r3, r2
 801d140:	009b      	lsls	r3, r3, #2
 801d142:	189b      	adds	r3, r3, r2
 801d144:	00db      	lsls	r3, r3, #3
 801d146:	18c3      	adds	r3, r0, r3
 801d148:	185b      	adds	r3, r3, r1
 801d14a:	681a      	ldr	r2, [r3, #0]
 801d14c:	1cfb      	adds	r3, r7, #3
 801d14e:	781b      	ldrb	r3, [r3, #0]
 801d150:	0019      	movs	r1, r3
 801d152:	0020      	movs	r0, r4
 801d154:	f7fe fc5a 	bl	801ba0c <USBD_LL_DataOutStage>
}
 801d158:	46c0      	nop			@ (mov r8, r8)
 801d15a:	46bd      	mov	sp, r7
 801d15c:	b003      	add	sp, #12
 801d15e:	bd90      	pop	{r4, r7, pc}

0801d160 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d160:	b580      	push	{r7, lr}
 801d162:	b082      	sub	sp, #8
 801d164:	af00      	add	r7, sp, #0
 801d166:	6078      	str	r0, [r7, #4]
 801d168:	000a      	movs	r2, r1
 801d16a:	1cfb      	adds	r3, r7, #3
 801d16c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d16e:	687a      	ldr	r2, [r7, #4]
 801d170:	23bc      	movs	r3, #188	@ 0xbc
 801d172:	009b      	lsls	r3, r3, #2
 801d174:	58d0      	ldr	r0, [r2, r3]
 801d176:	1cfb      	adds	r3, r7, #3
 801d178:	781a      	ldrb	r2, [r3, #0]
 801d17a:	6879      	ldr	r1, [r7, #4]
 801d17c:	0013      	movs	r3, r2
 801d17e:	009b      	lsls	r3, r3, #2
 801d180:	189b      	adds	r3, r3, r2
 801d182:	00db      	lsls	r3, r3, #3
 801d184:	18cb      	adds	r3, r1, r3
 801d186:	333c      	adds	r3, #60	@ 0x3c
 801d188:	681a      	ldr	r2, [r3, #0]
 801d18a:	1cfb      	adds	r3, r7, #3
 801d18c:	781b      	ldrb	r3, [r3, #0]
 801d18e:	0019      	movs	r1, r3
 801d190:	f7fe fcbe 	bl	801bb10 <USBD_LL_DataInStage>
}
 801d194:	46c0      	nop			@ (mov r8, r8)
 801d196:	46bd      	mov	sp, r7
 801d198:	b002      	add	sp, #8
 801d19a:	bd80      	pop	{r7, pc}

0801d19c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b082      	sub	sp, #8
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d1a4:	687a      	ldr	r2, [r7, #4]
 801d1a6:	23bc      	movs	r3, #188	@ 0xbc
 801d1a8:	009b      	lsls	r3, r3, #2
 801d1aa:	58d3      	ldr	r3, [r2, r3]
 801d1ac:	0018      	movs	r0, r3
 801d1ae:	f7fe fdf5 	bl	801bd9c <USBD_LL_SOF>
}
 801d1b2:	46c0      	nop			@ (mov r8, r8)
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	b002      	add	sp, #8
 801d1b8:	bd80      	pop	{r7, pc}

0801d1ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1ba:	b580      	push	{r7, lr}
 801d1bc:	b084      	sub	sp, #16
 801d1be:	af00      	add	r7, sp, #0
 801d1c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d1c2:	230f      	movs	r3, #15
 801d1c4:	18fb      	adds	r3, r7, r3
 801d1c6:	2201      	movs	r2, #1
 801d1c8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	689b      	ldr	r3, [r3, #8]
 801d1ce:	2b02      	cmp	r3, #2
 801d1d0:	d001      	beq.n	801d1d6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d1d2:	f7eb f89b 	bl	800830c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d1d6:	687a      	ldr	r2, [r7, #4]
 801d1d8:	23bc      	movs	r3, #188	@ 0xbc
 801d1da:	009b      	lsls	r3, r3, #2
 801d1dc:	58d2      	ldr	r2, [r2, r3]
 801d1de:	230f      	movs	r3, #15
 801d1e0:	18fb      	adds	r3, r7, r3
 801d1e2:	781b      	ldrb	r3, [r3, #0]
 801d1e4:	0019      	movs	r1, r3
 801d1e6:	0010      	movs	r0, r2
 801d1e8:	f7fe fd97 	bl	801bd1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d1ec:	687a      	ldr	r2, [r7, #4]
 801d1ee:	23bc      	movs	r3, #188	@ 0xbc
 801d1f0:	009b      	lsls	r3, r3, #2
 801d1f2:	58d3      	ldr	r3, [r2, r3]
 801d1f4:	0018      	movs	r0, r3
 801d1f6:	f7fe fd48 	bl	801bc8a <USBD_LL_Reset>
}
 801d1fa:	46c0      	nop			@ (mov r8, r8)
 801d1fc:	46bd      	mov	sp, r7
 801d1fe:	b004      	add	sp, #16
 801d200:	bd80      	pop	{r7, pc}
	...

0801d204 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b082      	sub	sp, #8
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d20c:	687a      	ldr	r2, [r7, #4]
 801d20e:	23bc      	movs	r3, #188	@ 0xbc
 801d210:	009b      	lsls	r3, r3, #2
 801d212:	58d3      	ldr	r3, [r2, r3]
 801d214:	0018      	movs	r0, r3
 801d216:	f7fe fd91 	bl	801bd3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	699b      	ldr	r3, [r3, #24]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d005      	beq.n	801d22e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d222:	4b05      	ldr	r3, [pc, #20]	@ (801d238 <HAL_PCD_SuspendCallback+0x34>)
 801d224:	691a      	ldr	r2, [r3, #16]
 801d226:	4b04      	ldr	r3, [pc, #16]	@ (801d238 <HAL_PCD_SuspendCallback+0x34>)
 801d228:	2106      	movs	r1, #6
 801d22a:	430a      	orrs	r2, r1
 801d22c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d22e:	46c0      	nop			@ (mov r8, r8)
 801d230:	46bd      	mov	sp, r7
 801d232:	b002      	add	sp, #8
 801d234:	bd80      	pop	{r7, pc}
 801d236:	46c0      	nop			@ (mov r8, r8)
 801d238:	e000ed00 	.word	0xe000ed00

0801d23c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b082      	sub	sp, #8
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	699b      	ldr	r3, [r3, #24]
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d007      	beq.n	801d25c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d24c:	4b09      	ldr	r3, [pc, #36]	@ (801d274 <HAL_PCD_ResumeCallback+0x38>)
 801d24e:	691a      	ldr	r2, [r3, #16]
 801d250:	4b08      	ldr	r3, [pc, #32]	@ (801d274 <HAL_PCD_ResumeCallback+0x38>)
 801d252:	2106      	movs	r1, #6
 801d254:	438a      	bics	r2, r1
 801d256:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d258:	f000 fa44 	bl	801d6e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d25c:	687a      	ldr	r2, [r7, #4]
 801d25e:	23bc      	movs	r3, #188	@ 0xbc
 801d260:	009b      	lsls	r3, r3, #2
 801d262:	58d3      	ldr	r3, [r2, r3]
 801d264:	0018      	movs	r0, r3
 801d266:	f7fe fd81 	bl	801bd6c <USBD_LL_Resume>
}
 801d26a:	46c0      	nop			@ (mov r8, r8)
 801d26c:	46bd      	mov	sp, r7
 801d26e:	b002      	add	sp, #8
 801d270:	bd80      	pop	{r7, pc}
 801d272:	46c0      	nop			@ (mov r8, r8)
 801d274:	e000ed00 	.word	0xe000ed00

0801d278 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b082      	sub	sp, #8
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d280:	4a2d      	ldr	r2, [pc, #180]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d282:	23bc      	movs	r3, #188	@ 0xbc
 801d284:	009b      	lsls	r3, r3, #2
 801d286:	6879      	ldr	r1, [r7, #4]
 801d288:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d28a:	687a      	ldr	r2, [r7, #4]
 801d28c:	23b0      	movs	r3, #176	@ 0xb0
 801d28e:	009b      	lsls	r3, r3, #2
 801d290:	4929      	ldr	r1, [pc, #164]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d292:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d294:	4b28      	ldr	r3, [pc, #160]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d296:	4a29      	ldr	r2, [pc, #164]	@ (801d33c <USBD_LL_Init+0xc4>)
 801d298:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d29a:	4b27      	ldr	r3, [pc, #156]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d29c:	2208      	movs	r2, #8
 801d29e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d2a0:	4b25      	ldr	r3, [pc, #148]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d2a2:	2202      	movs	r2, #2
 801d2a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d2a6:	4b24      	ldr	r3, [pc, #144]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d2a8:	2202      	movs	r2, #2
 801d2aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d2ac:	4b22      	ldr	r3, [pc, #136]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d2b2:	4b21      	ldr	r3, [pc, #132]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d2b4:	2200      	movs	r2, #0
 801d2b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d2b8:	4b1f      	ldr	r3, [pc, #124]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d2ba:	2200      	movs	r2, #0
 801d2bc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d2be:	4b1e      	ldr	r3, [pc, #120]	@ (801d338 <USBD_LL_Init+0xc0>)
 801d2c0:	0018      	movs	r0, r3
 801d2c2:	f7f5 ff95 	bl	80131f0 <HAL_PCD_Init>
 801d2c6:	1e03      	subs	r3, r0, #0
 801d2c8:	d001      	beq.n	801d2ce <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d2ca:	f7eb f81f 	bl	800830c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d2ce:	687a      	ldr	r2, [r7, #4]
 801d2d0:	23b0      	movs	r3, #176	@ 0xb0
 801d2d2:	009b      	lsls	r3, r3, #2
 801d2d4:	58d0      	ldr	r0, [r2, r3]
 801d2d6:	2318      	movs	r3, #24
 801d2d8:	2200      	movs	r2, #0
 801d2da:	2100      	movs	r1, #0
 801d2dc:	f7f7 fd56 	bl	8014d8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d2e0:	687a      	ldr	r2, [r7, #4]
 801d2e2:	23b0      	movs	r3, #176	@ 0xb0
 801d2e4:	009b      	lsls	r3, r3, #2
 801d2e6:	58d0      	ldr	r0, [r2, r3]
 801d2e8:	2358      	movs	r3, #88	@ 0x58
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	2180      	movs	r1, #128	@ 0x80
 801d2ee:	f7f7 fd4d 	bl	8014d8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d2f2:	687a      	ldr	r2, [r7, #4]
 801d2f4:	23b0      	movs	r3, #176	@ 0xb0
 801d2f6:	009b      	lsls	r3, r3, #2
 801d2f8:	58d0      	ldr	r0, [r2, r3]
 801d2fa:	23c0      	movs	r3, #192	@ 0xc0
 801d2fc:	2200      	movs	r2, #0
 801d2fe:	2181      	movs	r1, #129	@ 0x81
 801d300:	f7f7 fd44 	bl	8014d8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d304:	687a      	ldr	r2, [r7, #4]
 801d306:	23b0      	movs	r3, #176	@ 0xb0
 801d308:	009b      	lsls	r3, r3, #2
 801d30a:	58d0      	ldr	r0, [r2, r3]
 801d30c:	2388      	movs	r3, #136	@ 0x88
 801d30e:	005b      	lsls	r3, r3, #1
 801d310:	2200      	movs	r2, #0
 801d312:	2101      	movs	r1, #1
 801d314:	f7f7 fd3a 	bl	8014d8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d318:	687a      	ldr	r2, [r7, #4]
 801d31a:	23b0      	movs	r3, #176	@ 0xb0
 801d31c:	009b      	lsls	r3, r3, #2
 801d31e:	58d0      	ldr	r0, [r2, r3]
 801d320:	2380      	movs	r3, #128	@ 0x80
 801d322:	005b      	lsls	r3, r3, #1
 801d324:	2200      	movs	r2, #0
 801d326:	2182      	movs	r1, #130	@ 0x82
 801d328:	f7f7 fd30 	bl	8014d8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d32c:	2300      	movs	r3, #0
}
 801d32e:	0018      	movs	r0, r3
 801d330:	46bd      	mov	sp, r7
 801d332:	b002      	add	sp, #8
 801d334:	bd80      	pop	{r7, pc}
 801d336:	46c0      	nop			@ (mov r8, r8)
 801d338:	20003158 	.word	0x20003158
 801d33c:	40005c00 	.word	0x40005c00

0801d340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d340:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d342:	b085      	sub	sp, #20
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d348:	210f      	movs	r1, #15
 801d34a:	187b      	adds	r3, r7, r1
 801d34c:	2200      	movs	r2, #0
 801d34e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d350:	260e      	movs	r6, #14
 801d352:	19bb      	adds	r3, r7, r6
 801d354:	2200      	movs	r2, #0
 801d356:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d358:	687a      	ldr	r2, [r7, #4]
 801d35a:	23b0      	movs	r3, #176	@ 0xb0
 801d35c:	009b      	lsls	r3, r3, #2
 801d35e:	58d3      	ldr	r3, [r2, r3]
 801d360:	000d      	movs	r5, r1
 801d362:	187c      	adds	r4, r7, r1
 801d364:	0018      	movs	r0, r3
 801d366:	f7f6 f843 	bl	80133f0 <HAL_PCD_Start>
 801d36a:	0003      	movs	r3, r0
 801d36c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d36e:	19bc      	adds	r4, r7, r6
 801d370:	197b      	adds	r3, r7, r5
 801d372:	781b      	ldrb	r3, [r3, #0]
 801d374:	0018      	movs	r0, r3
 801d376:	f000 f9bc 	bl	801d6f2 <USBD_Get_USB_Status>
 801d37a:	0003      	movs	r3, r0
 801d37c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d37e:	19bb      	adds	r3, r7, r6
 801d380:	781b      	ldrb	r3, [r3, #0]
}
 801d382:	0018      	movs	r0, r3
 801d384:	46bd      	mov	sp, r7
 801d386:	b005      	add	sp, #20
 801d388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d38a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d38a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d38c:	b085      	sub	sp, #20
 801d38e:	af00      	add	r7, sp, #0
 801d390:	6078      	str	r0, [r7, #4]
 801d392:	000c      	movs	r4, r1
 801d394:	0010      	movs	r0, r2
 801d396:	0019      	movs	r1, r3
 801d398:	1cfb      	adds	r3, r7, #3
 801d39a:	1c22      	adds	r2, r4, #0
 801d39c:	701a      	strb	r2, [r3, #0]
 801d39e:	1cbb      	adds	r3, r7, #2
 801d3a0:	1c02      	adds	r2, r0, #0
 801d3a2:	701a      	strb	r2, [r3, #0]
 801d3a4:	003b      	movs	r3, r7
 801d3a6:	1c0a      	adds	r2, r1, #0
 801d3a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3aa:	260f      	movs	r6, #15
 801d3ac:	19bb      	adds	r3, r7, r6
 801d3ae:	2200      	movs	r2, #0
 801d3b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3b2:	250e      	movs	r5, #14
 801d3b4:	197b      	adds	r3, r7, r5
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d3ba:	687a      	ldr	r2, [r7, #4]
 801d3bc:	23b0      	movs	r3, #176	@ 0xb0
 801d3be:	009b      	lsls	r3, r3, #2
 801d3c0:	58d0      	ldr	r0, [r2, r3]
 801d3c2:	19bc      	adds	r4, r7, r6
 801d3c4:	1cbb      	adds	r3, r7, #2
 801d3c6:	781d      	ldrb	r5, [r3, #0]
 801d3c8:	003b      	movs	r3, r7
 801d3ca:	881a      	ldrh	r2, [r3, #0]
 801d3cc:	1cfb      	adds	r3, r7, #3
 801d3ce:	7819      	ldrb	r1, [r3, #0]
 801d3d0:	002b      	movs	r3, r5
 801d3d2:	f7f6 f9a2 	bl	801371a <HAL_PCD_EP_Open>
 801d3d6:	0003      	movs	r3, r0
 801d3d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3da:	250e      	movs	r5, #14
 801d3dc:	197c      	adds	r4, r7, r5
 801d3de:	19bb      	adds	r3, r7, r6
 801d3e0:	781b      	ldrb	r3, [r3, #0]
 801d3e2:	0018      	movs	r0, r3
 801d3e4:	f000 f985 	bl	801d6f2 <USBD_Get_USB_Status>
 801d3e8:	0003      	movs	r3, r0
 801d3ea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d3ec:	197b      	adds	r3, r7, r5
 801d3ee:	781b      	ldrb	r3, [r3, #0]
}
 801d3f0:	0018      	movs	r0, r3
 801d3f2:	46bd      	mov	sp, r7
 801d3f4:	b005      	add	sp, #20
 801d3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d3f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3fa:	b085      	sub	sp, #20
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	000a      	movs	r2, r1
 801d402:	1cfb      	adds	r3, r7, #3
 801d404:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d406:	210f      	movs	r1, #15
 801d408:	187b      	adds	r3, r7, r1
 801d40a:	2200      	movs	r2, #0
 801d40c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d40e:	260e      	movs	r6, #14
 801d410:	19bb      	adds	r3, r7, r6
 801d412:	2200      	movs	r2, #0
 801d414:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d416:	687a      	ldr	r2, [r7, #4]
 801d418:	23b0      	movs	r3, #176	@ 0xb0
 801d41a:	009b      	lsls	r3, r3, #2
 801d41c:	58d2      	ldr	r2, [r2, r3]
 801d41e:	000d      	movs	r5, r1
 801d420:	187c      	adds	r4, r7, r1
 801d422:	1cfb      	adds	r3, r7, #3
 801d424:	781b      	ldrb	r3, [r3, #0]
 801d426:	0019      	movs	r1, r3
 801d428:	0010      	movs	r0, r2
 801d42a:	f7f6 f9e5 	bl	80137f8 <HAL_PCD_EP_Close>
 801d42e:	0003      	movs	r3, r0
 801d430:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d432:	19bc      	adds	r4, r7, r6
 801d434:	197b      	adds	r3, r7, r5
 801d436:	781b      	ldrb	r3, [r3, #0]
 801d438:	0018      	movs	r0, r3
 801d43a:	f000 f95a 	bl	801d6f2 <USBD_Get_USB_Status>
 801d43e:	0003      	movs	r3, r0
 801d440:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d442:	19bb      	adds	r3, r7, r6
 801d444:	781b      	ldrb	r3, [r3, #0]
}
 801d446:	0018      	movs	r0, r3
 801d448:	46bd      	mov	sp, r7
 801d44a:	b005      	add	sp, #20
 801d44c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d44e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d450:	b085      	sub	sp, #20
 801d452:	af00      	add	r7, sp, #0
 801d454:	6078      	str	r0, [r7, #4]
 801d456:	000a      	movs	r2, r1
 801d458:	1cfb      	adds	r3, r7, #3
 801d45a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d45c:	210f      	movs	r1, #15
 801d45e:	187b      	adds	r3, r7, r1
 801d460:	2200      	movs	r2, #0
 801d462:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d464:	260e      	movs	r6, #14
 801d466:	19bb      	adds	r3, r7, r6
 801d468:	2200      	movs	r2, #0
 801d46a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d46c:	687a      	ldr	r2, [r7, #4]
 801d46e:	23b0      	movs	r3, #176	@ 0xb0
 801d470:	009b      	lsls	r3, r3, #2
 801d472:	58d2      	ldr	r2, [r2, r3]
 801d474:	000d      	movs	r5, r1
 801d476:	187c      	adds	r4, r7, r1
 801d478:	1cfb      	adds	r3, r7, #3
 801d47a:	781b      	ldrb	r3, [r3, #0]
 801d47c:	0019      	movs	r1, r3
 801d47e:	0010      	movs	r0, r2
 801d480:	f7f6 fa97 	bl	80139b2 <HAL_PCD_EP_SetStall>
 801d484:	0003      	movs	r3, r0
 801d486:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d488:	19bc      	adds	r4, r7, r6
 801d48a:	197b      	adds	r3, r7, r5
 801d48c:	781b      	ldrb	r3, [r3, #0]
 801d48e:	0018      	movs	r0, r3
 801d490:	f000 f92f 	bl	801d6f2 <USBD_Get_USB_Status>
 801d494:	0003      	movs	r3, r0
 801d496:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d498:	19bb      	adds	r3, r7, r6
 801d49a:	781b      	ldrb	r3, [r3, #0]
}
 801d49c:	0018      	movs	r0, r3
 801d49e:	46bd      	mov	sp, r7
 801d4a0:	b005      	add	sp, #20
 801d4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4a6:	b085      	sub	sp, #20
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	6078      	str	r0, [r7, #4]
 801d4ac:	000a      	movs	r2, r1
 801d4ae:	1cfb      	adds	r3, r7, #3
 801d4b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4b2:	210f      	movs	r1, #15
 801d4b4:	187b      	adds	r3, r7, r1
 801d4b6:	2200      	movs	r2, #0
 801d4b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4ba:	260e      	movs	r6, #14
 801d4bc:	19bb      	adds	r3, r7, r6
 801d4be:	2200      	movs	r2, #0
 801d4c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d4c2:	687a      	ldr	r2, [r7, #4]
 801d4c4:	23b0      	movs	r3, #176	@ 0xb0
 801d4c6:	009b      	lsls	r3, r3, #2
 801d4c8:	58d2      	ldr	r2, [r2, r3]
 801d4ca:	000d      	movs	r5, r1
 801d4cc:	187c      	adds	r4, r7, r1
 801d4ce:	1cfb      	adds	r3, r7, #3
 801d4d0:	781b      	ldrb	r3, [r3, #0]
 801d4d2:	0019      	movs	r1, r3
 801d4d4:	0010      	movs	r0, r2
 801d4d6:	f7f6 fac8 	bl	8013a6a <HAL_PCD_EP_ClrStall>
 801d4da:	0003      	movs	r3, r0
 801d4dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4de:	19bc      	adds	r4, r7, r6
 801d4e0:	197b      	adds	r3, r7, r5
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	0018      	movs	r0, r3
 801d4e6:	f000 f904 	bl	801d6f2 <USBD_Get_USB_Status>
 801d4ea:	0003      	movs	r3, r0
 801d4ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4ee:	19bb      	adds	r3, r7, r6
 801d4f0:	781b      	ldrb	r3, [r3, #0]
}
 801d4f2:	0018      	movs	r0, r3
 801d4f4:	46bd      	mov	sp, r7
 801d4f6:	b005      	add	sp, #20
 801d4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4fa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d4fa:	b580      	push	{r7, lr}
 801d4fc:	b084      	sub	sp, #16
 801d4fe:	af00      	add	r7, sp, #0
 801d500:	6078      	str	r0, [r7, #4]
 801d502:	000a      	movs	r2, r1
 801d504:	1cfb      	adds	r3, r7, #3
 801d506:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d508:	687a      	ldr	r2, [r7, #4]
 801d50a:	23b0      	movs	r3, #176	@ 0xb0
 801d50c:	009b      	lsls	r3, r3, #2
 801d50e:	58d3      	ldr	r3, [r2, r3]
 801d510:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d512:	1cfb      	adds	r3, r7, #3
 801d514:	781b      	ldrb	r3, [r3, #0]
 801d516:	b25b      	sxtb	r3, r3
 801d518:	2b00      	cmp	r3, #0
 801d51a:	da0d      	bge.n	801d538 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d51c:	1cfb      	adds	r3, r7, #3
 801d51e:	781b      	ldrb	r3, [r3, #0]
 801d520:	227f      	movs	r2, #127	@ 0x7f
 801d522:	4013      	ands	r3, r2
 801d524:	68f9      	ldr	r1, [r7, #12]
 801d526:	1c5a      	adds	r2, r3, #1
 801d528:	0013      	movs	r3, r2
 801d52a:	009b      	lsls	r3, r3, #2
 801d52c:	189b      	adds	r3, r3, r2
 801d52e:	00db      	lsls	r3, r3, #3
 801d530:	18cb      	adds	r3, r1, r3
 801d532:	3302      	adds	r3, #2
 801d534:	781b      	ldrb	r3, [r3, #0]
 801d536:	e00d      	b.n	801d554 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d538:	1cfb      	adds	r3, r7, #3
 801d53a:	781b      	ldrb	r3, [r3, #0]
 801d53c:	227f      	movs	r2, #127	@ 0x7f
 801d53e:	401a      	ands	r2, r3
 801d540:	68f8      	ldr	r0, [r7, #12]
 801d542:	23b5      	movs	r3, #181	@ 0xb5
 801d544:	0059      	lsls	r1, r3, #1
 801d546:	0013      	movs	r3, r2
 801d548:	009b      	lsls	r3, r3, #2
 801d54a:	189b      	adds	r3, r3, r2
 801d54c:	00db      	lsls	r3, r3, #3
 801d54e:	18c3      	adds	r3, r0, r3
 801d550:	185b      	adds	r3, r3, r1
 801d552:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d554:	0018      	movs	r0, r3
 801d556:	46bd      	mov	sp, r7
 801d558:	b004      	add	sp, #16
 801d55a:	bd80      	pop	{r7, pc}

0801d55c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d55e:	b085      	sub	sp, #20
 801d560:	af00      	add	r7, sp, #0
 801d562:	6078      	str	r0, [r7, #4]
 801d564:	000a      	movs	r2, r1
 801d566:	1cfb      	adds	r3, r7, #3
 801d568:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d56a:	210f      	movs	r1, #15
 801d56c:	187b      	adds	r3, r7, r1
 801d56e:	2200      	movs	r2, #0
 801d570:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d572:	260e      	movs	r6, #14
 801d574:	19bb      	adds	r3, r7, r6
 801d576:	2200      	movs	r2, #0
 801d578:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d57a:	687a      	ldr	r2, [r7, #4]
 801d57c:	23b0      	movs	r3, #176	@ 0xb0
 801d57e:	009b      	lsls	r3, r3, #2
 801d580:	58d2      	ldr	r2, [r2, r3]
 801d582:	000d      	movs	r5, r1
 801d584:	187c      	adds	r4, r7, r1
 801d586:	1cfb      	adds	r3, r7, #3
 801d588:	781b      	ldrb	r3, [r3, #0]
 801d58a:	0019      	movs	r1, r3
 801d58c:	0010      	movs	r0, r2
 801d58e:	f7f6 f899 	bl	80136c4 <HAL_PCD_SetAddress>
 801d592:	0003      	movs	r3, r0
 801d594:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d596:	19bc      	adds	r4, r7, r6
 801d598:	197b      	adds	r3, r7, r5
 801d59a:	781b      	ldrb	r3, [r3, #0]
 801d59c:	0018      	movs	r0, r3
 801d59e:	f000 f8a8 	bl	801d6f2 <USBD_Get_USB_Status>
 801d5a2:	0003      	movs	r3, r0
 801d5a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d5a6:	19bb      	adds	r3, r7, r6
 801d5a8:	781b      	ldrb	r3, [r3, #0]
}
 801d5aa:	0018      	movs	r0, r3
 801d5ac:	46bd      	mov	sp, r7
 801d5ae:	b005      	add	sp, #20
 801d5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d5b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5b4:	b087      	sub	sp, #28
 801d5b6:	af00      	add	r7, sp, #0
 801d5b8:	60f8      	str	r0, [r7, #12]
 801d5ba:	0008      	movs	r0, r1
 801d5bc:	607a      	str	r2, [r7, #4]
 801d5be:	0019      	movs	r1, r3
 801d5c0:	230b      	movs	r3, #11
 801d5c2:	18fb      	adds	r3, r7, r3
 801d5c4:	1c02      	adds	r2, r0, #0
 801d5c6:	701a      	strb	r2, [r3, #0]
 801d5c8:	2408      	movs	r4, #8
 801d5ca:	193b      	adds	r3, r7, r4
 801d5cc:	1c0a      	adds	r2, r1, #0
 801d5ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5d0:	2117      	movs	r1, #23
 801d5d2:	187b      	adds	r3, r7, r1
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5d8:	2516      	movs	r5, #22
 801d5da:	197b      	adds	r3, r7, r5
 801d5dc:	2200      	movs	r2, #0
 801d5de:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d5e0:	68fa      	ldr	r2, [r7, #12]
 801d5e2:	23b0      	movs	r3, #176	@ 0xb0
 801d5e4:	009b      	lsls	r3, r3, #2
 801d5e6:	58d0      	ldr	r0, [r2, r3]
 801d5e8:	193b      	adds	r3, r7, r4
 801d5ea:	881d      	ldrh	r5, [r3, #0]
 801d5ec:	000e      	movs	r6, r1
 801d5ee:	187c      	adds	r4, r7, r1
 801d5f0:	687a      	ldr	r2, [r7, #4]
 801d5f2:	230b      	movs	r3, #11
 801d5f4:	18fb      	adds	r3, r7, r3
 801d5f6:	7819      	ldrb	r1, [r3, #0]
 801d5f8:	002b      	movs	r3, r5
 801d5fa:	f7f6 f99e 	bl	801393a <HAL_PCD_EP_Transmit>
 801d5fe:	0003      	movs	r3, r0
 801d600:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d602:	2516      	movs	r5, #22
 801d604:	197c      	adds	r4, r7, r5
 801d606:	19bb      	adds	r3, r7, r6
 801d608:	781b      	ldrb	r3, [r3, #0]
 801d60a:	0018      	movs	r0, r3
 801d60c:	f000 f871 	bl	801d6f2 <USBD_Get_USB_Status>
 801d610:	0003      	movs	r3, r0
 801d612:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d614:	197b      	adds	r3, r7, r5
 801d616:	781b      	ldrb	r3, [r3, #0]
}
 801d618:	0018      	movs	r0, r3
 801d61a:	46bd      	mov	sp, r7
 801d61c:	b007      	add	sp, #28
 801d61e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d620 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d620:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d622:	b087      	sub	sp, #28
 801d624:	af00      	add	r7, sp, #0
 801d626:	60f8      	str	r0, [r7, #12]
 801d628:	0008      	movs	r0, r1
 801d62a:	607a      	str	r2, [r7, #4]
 801d62c:	0019      	movs	r1, r3
 801d62e:	230b      	movs	r3, #11
 801d630:	18fb      	adds	r3, r7, r3
 801d632:	1c02      	adds	r2, r0, #0
 801d634:	701a      	strb	r2, [r3, #0]
 801d636:	2408      	movs	r4, #8
 801d638:	193b      	adds	r3, r7, r4
 801d63a:	1c0a      	adds	r2, r1, #0
 801d63c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d63e:	2117      	movs	r1, #23
 801d640:	187b      	adds	r3, r7, r1
 801d642:	2200      	movs	r2, #0
 801d644:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d646:	2516      	movs	r5, #22
 801d648:	197b      	adds	r3, r7, r5
 801d64a:	2200      	movs	r2, #0
 801d64c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d64e:	68fa      	ldr	r2, [r7, #12]
 801d650:	23b0      	movs	r3, #176	@ 0xb0
 801d652:	009b      	lsls	r3, r3, #2
 801d654:	58d0      	ldr	r0, [r2, r3]
 801d656:	193b      	adds	r3, r7, r4
 801d658:	881d      	ldrh	r5, [r3, #0]
 801d65a:	000e      	movs	r6, r1
 801d65c:	187c      	adds	r4, r7, r1
 801d65e:	687a      	ldr	r2, [r7, #4]
 801d660:	230b      	movs	r3, #11
 801d662:	18fb      	adds	r3, r7, r3
 801d664:	7819      	ldrb	r1, [r3, #0]
 801d666:	002b      	movs	r3, r5
 801d668:	f7f6 f917 	bl	801389a <HAL_PCD_EP_Receive>
 801d66c:	0003      	movs	r3, r0
 801d66e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d670:	2516      	movs	r5, #22
 801d672:	197c      	adds	r4, r7, r5
 801d674:	19bb      	adds	r3, r7, r6
 801d676:	781b      	ldrb	r3, [r3, #0]
 801d678:	0018      	movs	r0, r3
 801d67a:	f000 f83a 	bl	801d6f2 <USBD_Get_USB_Status>
 801d67e:	0003      	movs	r3, r0
 801d680:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d682:	197b      	adds	r3, r7, r5
 801d684:	781b      	ldrb	r3, [r3, #0]
}
 801d686:	0018      	movs	r0, r3
 801d688:	46bd      	mov	sp, r7
 801d68a:	b007      	add	sp, #28
 801d68c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d68e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d68e:	b580      	push	{r7, lr}
 801d690:	b082      	sub	sp, #8
 801d692:	af00      	add	r7, sp, #0
 801d694:	6078      	str	r0, [r7, #4]
 801d696:	000a      	movs	r2, r1
 801d698:	1cfb      	adds	r3, r7, #3
 801d69a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d69c:	687a      	ldr	r2, [r7, #4]
 801d69e:	23b0      	movs	r3, #176	@ 0xb0
 801d6a0:	009b      	lsls	r3, r3, #2
 801d6a2:	58d2      	ldr	r2, [r2, r3]
 801d6a4:	1cfb      	adds	r3, r7, #3
 801d6a6:	781b      	ldrb	r3, [r3, #0]
 801d6a8:	0019      	movs	r1, r3
 801d6aa:	0010      	movs	r0, r2
 801d6ac:	f7f6 f92c 	bl	8013908 <HAL_PCD_EP_GetRxCount>
 801d6b0:	0003      	movs	r3, r0
}
 801d6b2:	0018      	movs	r0, r3
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	b002      	add	sp, #8
 801d6b8:	bd80      	pop	{r7, pc}
	...

0801d6bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b082      	sub	sp, #8
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d6c4:	4b02      	ldr	r3, [pc, #8]	@ (801d6d0 <USBD_static_malloc+0x14>)
}
 801d6c6:	0018      	movs	r0, r3
 801d6c8:	46bd      	mov	sp, r7
 801d6ca:	b002      	add	sp, #8
 801d6cc:	bd80      	pop	{r7, pc}
 801d6ce:	46c0      	nop			@ (mov r8, r8)
 801d6d0:	2000344c 	.word	0x2000344c

0801d6d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	b082      	sub	sp, #8
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]

}
 801d6dc:	46c0      	nop			@ (mov r8, r8)
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	b002      	add	sp, #8
 801d6e2:	bd80      	pop	{r7, pc}

0801d6e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d6e8:	f7ea fcca 	bl	8008080 <SystemClock_Config>
}
 801d6ec:	46c0      	nop			@ (mov r8, r8)
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}

0801d6f2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d6f2:	b580      	push	{r7, lr}
 801d6f4:	b084      	sub	sp, #16
 801d6f6:	af00      	add	r7, sp, #0
 801d6f8:	0002      	movs	r2, r0
 801d6fa:	1dfb      	adds	r3, r7, #7
 801d6fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6fe:	230f      	movs	r3, #15
 801d700:	18fb      	adds	r3, r7, r3
 801d702:	2200      	movs	r2, #0
 801d704:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d706:	1dfb      	adds	r3, r7, #7
 801d708:	781b      	ldrb	r3, [r3, #0]
 801d70a:	2b03      	cmp	r3, #3
 801d70c:	d017      	beq.n	801d73e <USBD_Get_USB_Status+0x4c>
 801d70e:	dc1b      	bgt.n	801d748 <USBD_Get_USB_Status+0x56>
 801d710:	2b02      	cmp	r3, #2
 801d712:	d00f      	beq.n	801d734 <USBD_Get_USB_Status+0x42>
 801d714:	dc18      	bgt.n	801d748 <USBD_Get_USB_Status+0x56>
 801d716:	2b00      	cmp	r3, #0
 801d718:	d002      	beq.n	801d720 <USBD_Get_USB_Status+0x2e>
 801d71a:	2b01      	cmp	r3, #1
 801d71c:	d005      	beq.n	801d72a <USBD_Get_USB_Status+0x38>
 801d71e:	e013      	b.n	801d748 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d720:	230f      	movs	r3, #15
 801d722:	18fb      	adds	r3, r7, r3
 801d724:	2200      	movs	r2, #0
 801d726:	701a      	strb	r2, [r3, #0]
    break;
 801d728:	e013      	b.n	801d752 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d72a:	230f      	movs	r3, #15
 801d72c:	18fb      	adds	r3, r7, r3
 801d72e:	2202      	movs	r2, #2
 801d730:	701a      	strb	r2, [r3, #0]
    break;
 801d732:	e00e      	b.n	801d752 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d734:	230f      	movs	r3, #15
 801d736:	18fb      	adds	r3, r7, r3
 801d738:	2201      	movs	r2, #1
 801d73a:	701a      	strb	r2, [r3, #0]
    break;
 801d73c:	e009      	b.n	801d752 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d73e:	230f      	movs	r3, #15
 801d740:	18fb      	adds	r3, r7, r3
 801d742:	2202      	movs	r2, #2
 801d744:	701a      	strb	r2, [r3, #0]
    break;
 801d746:	e004      	b.n	801d752 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d748:	230f      	movs	r3, #15
 801d74a:	18fb      	adds	r3, r7, r3
 801d74c:	2202      	movs	r2, #2
 801d74e:	701a      	strb	r2, [r3, #0]
    break;
 801d750:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d752:	230f      	movs	r3, #15
 801d754:	18fb      	adds	r3, r7, r3
 801d756:	781b      	ldrb	r3, [r3, #0]
}
 801d758:	0018      	movs	r0, r3
 801d75a:	46bd      	mov	sp, r7
 801d75c:	b004      	add	sp, #16
 801d75e:	bd80      	pop	{r7, pc}

0801d760 <arm_cfft_radix4by2_q31>:
 801d760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d762:	465f      	mov	r7, fp
 801d764:	4656      	mov	r6, sl
 801d766:	464d      	mov	r5, r9
 801d768:	4644      	mov	r4, r8
 801d76a:	000b      	movs	r3, r1
 801d76c:	b4f0      	push	{r4, r5, r6, r7}
 801d76e:	085b      	lsrs	r3, r3, #1
 801d770:	b08f      	sub	sp, #60	@ 0x3c
 801d772:	910a      	str	r1, [sp, #40]	@ 0x28
 801d774:	0007      	movs	r7, r0
 801d776:	9009      	str	r0, [sp, #36]	@ 0x24
 801d778:	0011      	movs	r1, r2
 801d77a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d77c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d100      	bne.n	801d784 <arm_cfft_radix4by2_q31+0x24>
 801d782:	e0a0      	b.n	801d8c6 <arm_cfft_radix4by2_q31+0x166>
 801d784:	0002      	movs	r2, r0
 801d786:	00db      	lsls	r3, r3, #3
 801d788:	3204      	adds	r2, #4
 801d78a:	4691      	mov	r9, r2
 801d78c:	4698      	mov	r8, r3
 801d78e:	000a      	movs	r2, r1
 801d790:	464e      	mov	r6, r9
 801d792:	4442      	add	r2, r8
 801d794:	4699      	mov	r9, r3
 801d796:	4688      	mov	r8, r1
 801d798:	9208      	str	r2, [sp, #32]
 801d79a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d79c:	4643      	mov	r3, r8
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	469b      	mov	fp, r3
 801d7a2:	4643      	mov	r3, r8
 801d7a4:	685b      	ldr	r3, [r3, #4]
 801d7a6:	469a      	mov	sl, r3
 801d7a8:	683b      	ldr	r3, [r7, #0]
 801d7aa:	109c      	asrs	r4, r3, #2
 801d7ac:	464b      	mov	r3, r9
 801d7ae:	58fb      	ldr	r3, [r7, r3]
 801d7b0:	109a      	asrs	r2, r3, #2
 801d7b2:	18a3      	adds	r3, r4, r2
 801d7b4:	603b      	str	r3, [r7, #0]
 801d7b6:	6833      	ldr	r3, [r6, #0]
 801d7b8:	1aa4      	subs	r4, r4, r2
 801d7ba:	109d      	asrs	r5, r3, #2
 801d7bc:	464b      	mov	r3, r9
 801d7be:	58f3      	ldr	r3, [r6, r3]
 801d7c0:	17e2      	asrs	r2, r4, #31
 801d7c2:	109b      	asrs	r3, r3, #2
 801d7c4:	18e9      	adds	r1, r5, r3
 801d7c6:	6031      	str	r1, [r6, #0]
 801d7c8:	0011      	movs	r1, r2
 801d7ca:	465a      	mov	r2, fp
 801d7cc:	17d2      	asrs	r2, r2, #31
 801d7ce:	0010      	movs	r0, r2
 801d7d0:	4652      	mov	r2, sl
 801d7d2:	1aed      	subs	r5, r5, r3
 801d7d4:	17eb      	asrs	r3, r5, #31
 801d7d6:	17d2      	asrs	r2, r2, #31
 801d7d8:	9307      	str	r3, [sp, #28]
 801d7da:	9204      	str	r2, [sp, #16]
 801d7dc:	0003      	movs	r3, r0
 801d7de:	465a      	mov	r2, fp
 801d7e0:	9006      	str	r0, [sp, #24]
 801d7e2:	0020      	movs	r0, r4
 801d7e4:	9105      	str	r1, [sp, #20]
 801d7e6:	f7e2 feeb 	bl	80005c0 <__aeabi_lmul>
 801d7ea:	2280      	movs	r2, #128	@ 0x80
 801d7ec:	2300      	movs	r3, #0
 801d7ee:	0612      	lsls	r2, r2, #24
 801d7f0:	1880      	adds	r0, r0, r2
 801d7f2:	4159      	adcs	r1, r3
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	9101      	str	r1, [sp, #4]
 801d7f8:	9300      	str	r3, [sp, #0]
 801d7fa:	4652      	mov	r2, sl
 801d7fc:	9b04      	ldr	r3, [sp, #16]
 801d7fe:	0028      	movs	r0, r5
 801d800:	17e9      	asrs	r1, r5, #31
 801d802:	f7e2 fedd 	bl	80005c0 <__aeabi_lmul>
 801d806:	9a00      	ldr	r2, [sp, #0]
 801d808:	9b01      	ldr	r3, [sp, #4]
 801d80a:	1880      	adds	r0, r0, r2
 801d80c:	4159      	adcs	r1, r3
 801d80e:	2280      	movs	r2, #128	@ 0x80
 801d810:	2300      	movs	r3, #0
 801d812:	0612      	lsls	r2, r2, #24
 801d814:	1880      	adds	r0, r0, r2
 801d816:	4159      	adcs	r1, r3
 801d818:	464a      	mov	r2, r9
 801d81a:	004b      	lsls	r3, r1, #1
 801d81c:	50bb      	str	r3, [r7, r2]
 801d81e:	4658      	mov	r0, fp
 801d820:	002a      	movs	r2, r5
 801d822:	9b07      	ldr	r3, [sp, #28]
 801d824:	9906      	ldr	r1, [sp, #24]
 801d826:	f7e2 fecb 	bl	80005c0 <__aeabi_lmul>
 801d82a:	2280      	movs	r2, #128	@ 0x80
 801d82c:	2300      	movs	r3, #0
 801d82e:	0612      	lsls	r2, r2, #24
 801d830:	1880      	adds	r0, r0, r2
 801d832:	4159      	adcs	r1, r3
 801d834:	2000      	movs	r0, #0
 801d836:	9103      	str	r1, [sp, #12]
 801d838:	9002      	str	r0, [sp, #8]
 801d83a:	4652      	mov	r2, sl
 801d83c:	9b04      	ldr	r3, [sp, #16]
 801d83e:	0020      	movs	r0, r4
 801d840:	9905      	ldr	r1, [sp, #20]
 801d842:	f7e2 febd 	bl	80005c0 <__aeabi_lmul>
 801d846:	9a02      	ldr	r2, [sp, #8]
 801d848:	9b03      	ldr	r3, [sp, #12]
 801d84a:	1a12      	subs	r2, r2, r0
 801d84c:	418b      	sbcs	r3, r1
 801d84e:	2080      	movs	r0, #128	@ 0x80
 801d850:	2100      	movs	r1, #0
 801d852:	0600      	lsls	r0, r0, #24
 801d854:	1812      	adds	r2, r2, r0
 801d856:	414b      	adcs	r3, r1
 801d858:	464a      	mov	r2, r9
 801d85a:	005b      	lsls	r3, r3, #1
 801d85c:	50b3      	str	r3, [r6, r2]
 801d85e:	2308      	movs	r3, #8
 801d860:	469c      	mov	ip, r3
 801d862:	9b08      	ldr	r3, [sp, #32]
 801d864:	44e0      	add	r8, ip
 801d866:	3708      	adds	r7, #8
 801d868:	3608      	adds	r6, #8
 801d86a:	4598      	cmp	r8, r3
 801d86c:	d196      	bne.n	801d79c <arm_cfft_radix4by2_q31+0x3c>
 801d86e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d870:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d872:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d874:	2302      	movs	r3, #2
 801d876:	003a      	movs	r2, r7
 801d878:	0029      	movs	r1, r5
 801d87a:	0020      	movs	r0, r4
 801d87c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d87e:	f000 f957 	bl	801db30 <arm_radix4_butterfly_q31>
 801d882:	46a4      	mov	ip, r4
 801d884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d886:	2302      	movs	r3, #2
 801d888:	0088      	lsls	r0, r1, #2
 801d88a:	4460      	add	r0, ip
 801d88c:	003a      	movs	r2, r7
 801d88e:	0029      	movs	r1, r5
 801d890:	f000 f94e 	bl	801db30 <arm_radix4_butterfly_q31>
 801d894:	46a4      	mov	ip, r4
 801d896:	0128      	lsls	r0, r5, #4
 801d898:	4460      	add	r0, ip
 801d89a:	6833      	ldr	r3, [r6, #0]
 801d89c:	005b      	lsls	r3, r3, #1
 801d89e:	6033      	str	r3, [r6, #0]
 801d8a0:	6873      	ldr	r3, [r6, #4]
 801d8a2:	005b      	lsls	r3, r3, #1
 801d8a4:	6073      	str	r3, [r6, #4]
 801d8a6:	68b3      	ldr	r3, [r6, #8]
 801d8a8:	005b      	lsls	r3, r3, #1
 801d8aa:	60b3      	str	r3, [r6, #8]
 801d8ac:	68f3      	ldr	r3, [r6, #12]
 801d8ae:	005b      	lsls	r3, r3, #1
 801d8b0:	60f3      	str	r3, [r6, #12]
 801d8b2:	3610      	adds	r6, #16
 801d8b4:	42b0      	cmp	r0, r6
 801d8b6:	d1f0      	bne.n	801d89a <arm_cfft_radix4by2_q31+0x13a>
 801d8b8:	b00f      	add	sp, #60	@ 0x3c
 801d8ba:	bc3c      	pop	{r2, r3, r4, r5}
 801d8bc:	4690      	mov	r8, r2
 801d8be:	4699      	mov	r9, r3
 801d8c0:	46a2      	mov	sl, r4
 801d8c2:	46ab      	mov	fp, r5
 801d8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8c6:	2302      	movs	r3, #2
 801d8c8:	2100      	movs	r1, #0
 801d8ca:	0015      	movs	r5, r2
 801d8cc:	f000 f930 	bl	801db30 <arm_radix4_butterfly_q31>
 801d8d0:	46bc      	mov	ip, r7
 801d8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8d4:	002a      	movs	r2, r5
 801d8d6:	0098      	lsls	r0, r3, #2
 801d8d8:	4460      	add	r0, ip
 801d8da:	2302      	movs	r3, #2
 801d8dc:	2100      	movs	r1, #0
 801d8de:	f000 f927 	bl	801db30 <arm_radix4_butterfly_q31>
 801d8e2:	e7e9      	b.n	801d8b8 <arm_cfft_radix4by2_q31+0x158>

0801d8e4 <arm_cfft_radix4by2_inverse_q31>:
 801d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8e6:	465f      	mov	r7, fp
 801d8e8:	4656      	mov	r6, sl
 801d8ea:	464d      	mov	r5, r9
 801d8ec:	4644      	mov	r4, r8
 801d8ee:	000b      	movs	r3, r1
 801d8f0:	b4f0      	push	{r4, r5, r6, r7}
 801d8f2:	085b      	lsrs	r3, r3, #1
 801d8f4:	b08f      	sub	sp, #60	@ 0x3c
 801d8f6:	910a      	str	r1, [sp, #40]	@ 0x28
 801d8f8:	0007      	movs	r7, r0
 801d8fa:	9009      	str	r0, [sp, #36]	@ 0x24
 801d8fc:	0011      	movs	r1, r2
 801d8fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d900:	930c      	str	r3, [sp, #48]	@ 0x30
 801d902:	2b00      	cmp	r3, #0
 801d904:	d100      	bne.n	801d908 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d906:	e0a0      	b.n	801da4a <arm_cfft_radix4by2_inverse_q31+0x166>
 801d908:	0002      	movs	r2, r0
 801d90a:	00db      	lsls	r3, r3, #3
 801d90c:	3204      	adds	r2, #4
 801d90e:	4691      	mov	r9, r2
 801d910:	4698      	mov	r8, r3
 801d912:	000a      	movs	r2, r1
 801d914:	464e      	mov	r6, r9
 801d916:	4442      	add	r2, r8
 801d918:	4699      	mov	r9, r3
 801d91a:	4688      	mov	r8, r1
 801d91c:	9208      	str	r2, [sp, #32]
 801d91e:	900d      	str	r0, [sp, #52]	@ 0x34
 801d920:	4643      	mov	r3, r8
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	469b      	mov	fp, r3
 801d926:	4643      	mov	r3, r8
 801d928:	685b      	ldr	r3, [r3, #4]
 801d92a:	469a      	mov	sl, r3
 801d92c:	683b      	ldr	r3, [r7, #0]
 801d92e:	109c      	asrs	r4, r3, #2
 801d930:	464b      	mov	r3, r9
 801d932:	58fb      	ldr	r3, [r7, r3]
 801d934:	109a      	asrs	r2, r3, #2
 801d936:	18a3      	adds	r3, r4, r2
 801d938:	603b      	str	r3, [r7, #0]
 801d93a:	6833      	ldr	r3, [r6, #0]
 801d93c:	1aa4      	subs	r4, r4, r2
 801d93e:	109d      	asrs	r5, r3, #2
 801d940:	464b      	mov	r3, r9
 801d942:	58f3      	ldr	r3, [r6, r3]
 801d944:	17e2      	asrs	r2, r4, #31
 801d946:	109b      	asrs	r3, r3, #2
 801d948:	18e9      	adds	r1, r5, r3
 801d94a:	6031      	str	r1, [r6, #0]
 801d94c:	0011      	movs	r1, r2
 801d94e:	465a      	mov	r2, fp
 801d950:	17d2      	asrs	r2, r2, #31
 801d952:	0010      	movs	r0, r2
 801d954:	4652      	mov	r2, sl
 801d956:	1aed      	subs	r5, r5, r3
 801d958:	17eb      	asrs	r3, r5, #31
 801d95a:	17d2      	asrs	r2, r2, #31
 801d95c:	9307      	str	r3, [sp, #28]
 801d95e:	9204      	str	r2, [sp, #16]
 801d960:	0003      	movs	r3, r0
 801d962:	465a      	mov	r2, fp
 801d964:	9006      	str	r0, [sp, #24]
 801d966:	0020      	movs	r0, r4
 801d968:	9105      	str	r1, [sp, #20]
 801d96a:	f7e2 fe29 	bl	80005c0 <__aeabi_lmul>
 801d96e:	2280      	movs	r2, #128	@ 0x80
 801d970:	2300      	movs	r3, #0
 801d972:	0612      	lsls	r2, r2, #24
 801d974:	1880      	adds	r0, r0, r2
 801d976:	4159      	adcs	r1, r3
 801d978:	2300      	movs	r3, #0
 801d97a:	9101      	str	r1, [sp, #4]
 801d97c:	9300      	str	r3, [sp, #0]
 801d97e:	4652      	mov	r2, sl
 801d980:	9b04      	ldr	r3, [sp, #16]
 801d982:	0028      	movs	r0, r5
 801d984:	17e9      	asrs	r1, r5, #31
 801d986:	f7e2 fe1b 	bl	80005c0 <__aeabi_lmul>
 801d98a:	9a00      	ldr	r2, [sp, #0]
 801d98c:	9b01      	ldr	r3, [sp, #4]
 801d98e:	1a12      	subs	r2, r2, r0
 801d990:	418b      	sbcs	r3, r1
 801d992:	2080      	movs	r0, #128	@ 0x80
 801d994:	2100      	movs	r1, #0
 801d996:	0600      	lsls	r0, r0, #24
 801d998:	1812      	adds	r2, r2, r0
 801d99a:	414b      	adcs	r3, r1
 801d99c:	464a      	mov	r2, r9
 801d99e:	005b      	lsls	r3, r3, #1
 801d9a0:	50bb      	str	r3, [r7, r2]
 801d9a2:	4658      	mov	r0, fp
 801d9a4:	002a      	movs	r2, r5
 801d9a6:	9b07      	ldr	r3, [sp, #28]
 801d9a8:	9906      	ldr	r1, [sp, #24]
 801d9aa:	f7e2 fe09 	bl	80005c0 <__aeabi_lmul>
 801d9ae:	2280      	movs	r2, #128	@ 0x80
 801d9b0:	2300      	movs	r3, #0
 801d9b2:	0612      	lsls	r2, r2, #24
 801d9b4:	1880      	adds	r0, r0, r2
 801d9b6:	4159      	adcs	r1, r3
 801d9b8:	2000      	movs	r0, #0
 801d9ba:	9103      	str	r1, [sp, #12]
 801d9bc:	9002      	str	r0, [sp, #8]
 801d9be:	4652      	mov	r2, sl
 801d9c0:	9b04      	ldr	r3, [sp, #16]
 801d9c2:	0020      	movs	r0, r4
 801d9c4:	9905      	ldr	r1, [sp, #20]
 801d9c6:	f7e2 fdfb 	bl	80005c0 <__aeabi_lmul>
 801d9ca:	9b02      	ldr	r3, [sp, #8]
 801d9cc:	9c03      	ldr	r4, [sp, #12]
 801d9ce:	18c0      	adds	r0, r0, r3
 801d9d0:	4161      	adcs	r1, r4
 801d9d2:	2380      	movs	r3, #128	@ 0x80
 801d9d4:	2400      	movs	r4, #0
 801d9d6:	061b      	lsls	r3, r3, #24
 801d9d8:	18c0      	adds	r0, r0, r3
 801d9da:	4161      	adcs	r1, r4
 801d9dc:	464a      	mov	r2, r9
 801d9de:	004b      	lsls	r3, r1, #1
 801d9e0:	50b3      	str	r3, [r6, r2]
 801d9e2:	2308      	movs	r3, #8
 801d9e4:	469c      	mov	ip, r3
 801d9e6:	9b08      	ldr	r3, [sp, #32]
 801d9e8:	44e0      	add	r8, ip
 801d9ea:	3708      	adds	r7, #8
 801d9ec:	3608      	adds	r6, #8
 801d9ee:	4598      	cmp	r8, r3
 801d9f0:	d196      	bne.n	801d920 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d9f2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d9f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d9f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d9f8:	2302      	movs	r3, #2
 801d9fa:	003a      	movs	r2, r7
 801d9fc:	0029      	movs	r1, r5
 801d9fe:	0020      	movs	r0, r4
 801da00:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801da02:	f000 fb3b 	bl	801e07c <arm_radix4_butterfly_inverse_q31>
 801da06:	46a4      	mov	ip, r4
 801da08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801da0a:	2302      	movs	r3, #2
 801da0c:	0088      	lsls	r0, r1, #2
 801da0e:	4460      	add	r0, ip
 801da10:	003a      	movs	r2, r7
 801da12:	0029      	movs	r1, r5
 801da14:	f000 fb32 	bl	801e07c <arm_radix4_butterfly_inverse_q31>
 801da18:	46a4      	mov	ip, r4
 801da1a:	0128      	lsls	r0, r5, #4
 801da1c:	4460      	add	r0, ip
 801da1e:	6833      	ldr	r3, [r6, #0]
 801da20:	005b      	lsls	r3, r3, #1
 801da22:	6033      	str	r3, [r6, #0]
 801da24:	6873      	ldr	r3, [r6, #4]
 801da26:	005b      	lsls	r3, r3, #1
 801da28:	6073      	str	r3, [r6, #4]
 801da2a:	68b3      	ldr	r3, [r6, #8]
 801da2c:	005b      	lsls	r3, r3, #1
 801da2e:	60b3      	str	r3, [r6, #8]
 801da30:	68f3      	ldr	r3, [r6, #12]
 801da32:	005b      	lsls	r3, r3, #1
 801da34:	60f3      	str	r3, [r6, #12]
 801da36:	3610      	adds	r6, #16
 801da38:	42b0      	cmp	r0, r6
 801da3a:	d1f0      	bne.n	801da1e <arm_cfft_radix4by2_inverse_q31+0x13a>
 801da3c:	b00f      	add	sp, #60	@ 0x3c
 801da3e:	bc3c      	pop	{r2, r3, r4, r5}
 801da40:	4690      	mov	r8, r2
 801da42:	4699      	mov	r9, r3
 801da44:	46a2      	mov	sl, r4
 801da46:	46ab      	mov	fp, r5
 801da48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da4a:	2302      	movs	r3, #2
 801da4c:	2100      	movs	r1, #0
 801da4e:	0015      	movs	r5, r2
 801da50:	f000 fb14 	bl	801e07c <arm_radix4_butterfly_inverse_q31>
 801da54:	46bc      	mov	ip, r7
 801da56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da58:	002a      	movs	r2, r5
 801da5a:	0098      	lsls	r0, r3, #2
 801da5c:	4460      	add	r0, ip
 801da5e:	2302      	movs	r3, #2
 801da60:	2100      	movs	r1, #0
 801da62:	f000 fb0b 	bl	801e07c <arm_radix4_butterfly_inverse_q31>
 801da66:	e7e9      	b.n	801da3c <arm_cfft_radix4by2_inverse_q31+0x158>

0801da68 <arm_cfft_q31>:
 801da68:	b570      	push	{r4, r5, r6, lr}
 801da6a:	001e      	movs	r6, r3
 801da6c:	2380      	movs	r3, #128	@ 0x80
 801da6e:	000d      	movs	r5, r1
 801da70:	0004      	movs	r4, r0
 801da72:	8801      	ldrh	r1, [r0, #0]
 801da74:	005b      	lsls	r3, r3, #1
 801da76:	2a01      	cmp	r2, #1
 801da78:	d028      	beq.n	801dacc <arm_cfft_q31+0x64>
 801da7a:	4299      	cmp	r1, r3
 801da7c:	d020      	beq.n	801dac0 <arm_cfft_q31+0x58>
 801da7e:	d812      	bhi.n	801daa6 <arm_cfft_q31+0x3e>
 801da80:	2920      	cmp	r1, #32
 801da82:	d004      	beq.n	801da8e <arm_cfft_q31+0x26>
 801da84:	d949      	bls.n	801db1a <arm_cfft_q31+0xb2>
 801da86:	2940      	cmp	r1, #64	@ 0x40
 801da88:	d01a      	beq.n	801dac0 <arm_cfft_q31+0x58>
 801da8a:	2980      	cmp	r1, #128	@ 0x80
 801da8c:	d103      	bne.n	801da96 <arm_cfft_q31+0x2e>
 801da8e:	6862      	ldr	r2, [r4, #4]
 801da90:	0028      	movs	r0, r5
 801da92:	f7ff fe65 	bl	801d760 <arm_cfft_radix4by2_q31>
 801da96:	2e00      	cmp	r6, #0
 801da98:	d004      	beq.n	801daa4 <arm_cfft_q31+0x3c>
 801da9a:	68a2      	ldr	r2, [r4, #8]
 801da9c:	89a1      	ldrh	r1, [r4, #12]
 801da9e:	0028      	movs	r0, r5
 801daa0:	f7e2 fb32 	bl	8000108 <arm_bitreversal_32>
 801daa4:	bd70      	pop	{r4, r5, r6, pc}
 801daa6:	2380      	movs	r3, #128	@ 0x80
 801daa8:	00db      	lsls	r3, r3, #3
 801daaa:	4299      	cmp	r1, r3
 801daac:	d008      	beq.n	801dac0 <arm_cfft_q31+0x58>
 801daae:	d92f      	bls.n	801db10 <arm_cfft_q31+0xa8>
 801dab0:	2380      	movs	r3, #128	@ 0x80
 801dab2:	011b      	lsls	r3, r3, #4
 801dab4:	4299      	cmp	r1, r3
 801dab6:	d0ea      	beq.n	801da8e <arm_cfft_q31+0x26>
 801dab8:	2380      	movs	r3, #128	@ 0x80
 801daba:	015b      	lsls	r3, r3, #5
 801dabc:	4299      	cmp	r1, r3
 801dabe:	d1ea      	bne.n	801da96 <arm_cfft_q31+0x2e>
 801dac0:	2301      	movs	r3, #1
 801dac2:	6862      	ldr	r2, [r4, #4]
 801dac4:	0028      	movs	r0, r5
 801dac6:	f000 f833 	bl	801db30 <arm_radix4_butterfly_q31>
 801daca:	e7e4      	b.n	801da96 <arm_cfft_q31+0x2e>
 801dacc:	4299      	cmp	r1, r3
 801dace:	d019      	beq.n	801db04 <arm_cfft_q31+0x9c>
 801dad0:	d80b      	bhi.n	801daea <arm_cfft_q31+0x82>
 801dad2:	2920      	cmp	r1, #32
 801dad4:	d004      	beq.n	801dae0 <arm_cfft_q31+0x78>
 801dad6:	d928      	bls.n	801db2a <arm_cfft_q31+0xc2>
 801dad8:	2940      	cmp	r1, #64	@ 0x40
 801dada:	d013      	beq.n	801db04 <arm_cfft_q31+0x9c>
 801dadc:	2980      	cmp	r1, #128	@ 0x80
 801dade:	d1da      	bne.n	801da96 <arm_cfft_q31+0x2e>
 801dae0:	6862      	ldr	r2, [r4, #4]
 801dae2:	0028      	movs	r0, r5
 801dae4:	f7ff fefe 	bl	801d8e4 <arm_cfft_radix4by2_inverse_q31>
 801dae8:	e7d5      	b.n	801da96 <arm_cfft_q31+0x2e>
 801daea:	2380      	movs	r3, #128	@ 0x80
 801daec:	00db      	lsls	r3, r3, #3
 801daee:	4299      	cmp	r1, r3
 801daf0:	d008      	beq.n	801db04 <arm_cfft_q31+0x9c>
 801daf2:	d915      	bls.n	801db20 <arm_cfft_q31+0xb8>
 801daf4:	2380      	movs	r3, #128	@ 0x80
 801daf6:	011b      	lsls	r3, r3, #4
 801daf8:	4299      	cmp	r1, r3
 801dafa:	d0f1      	beq.n	801dae0 <arm_cfft_q31+0x78>
 801dafc:	2380      	movs	r3, #128	@ 0x80
 801dafe:	015b      	lsls	r3, r3, #5
 801db00:	4299      	cmp	r1, r3
 801db02:	d1c8      	bne.n	801da96 <arm_cfft_q31+0x2e>
 801db04:	2301      	movs	r3, #1
 801db06:	6862      	ldr	r2, [r4, #4]
 801db08:	0028      	movs	r0, r5
 801db0a:	f000 fab7 	bl	801e07c <arm_radix4_butterfly_inverse_q31>
 801db0e:	e7c2      	b.n	801da96 <arm_cfft_q31+0x2e>
 801db10:	2380      	movs	r3, #128	@ 0x80
 801db12:	009b      	lsls	r3, r3, #2
 801db14:	4299      	cmp	r1, r3
 801db16:	d0ba      	beq.n	801da8e <arm_cfft_q31+0x26>
 801db18:	e7bd      	b.n	801da96 <arm_cfft_q31+0x2e>
 801db1a:	2910      	cmp	r1, #16
 801db1c:	d1bb      	bne.n	801da96 <arm_cfft_q31+0x2e>
 801db1e:	e7cf      	b.n	801dac0 <arm_cfft_q31+0x58>
 801db20:	2380      	movs	r3, #128	@ 0x80
 801db22:	009b      	lsls	r3, r3, #2
 801db24:	4299      	cmp	r1, r3
 801db26:	d0db      	beq.n	801dae0 <arm_cfft_q31+0x78>
 801db28:	e7b5      	b.n	801da96 <arm_cfft_q31+0x2e>
 801db2a:	2910      	cmp	r1, #16
 801db2c:	d1b3      	bne.n	801da96 <arm_cfft_q31+0x2e>
 801db2e:	e7e9      	b.n	801db04 <arm_cfft_q31+0x9c>

0801db30 <arm_radix4_butterfly_q31>:
 801db30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db32:	464d      	mov	r5, r9
 801db34:	4644      	mov	r4, r8
 801db36:	465f      	mov	r7, fp
 801db38:	4656      	mov	r6, sl
 801db3a:	469c      	mov	ip, r3
 801db3c:	b4f0      	push	{r4, r5, r6, r7}
 801db3e:	b0a7      	sub	sp, #156	@ 0x9c
 801db40:	9114      	str	r1, [sp, #80]	@ 0x50
 801db42:	0889      	lsrs	r1, r1, #2
 801db44:	9310      	str	r3, [sp, #64]	@ 0x40
 801db46:	00cb      	lsls	r3, r1, #3
 801db48:	0015      	movs	r5, r2
 801db4a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801db4c:	18c2      	adds	r2, r0, r3
 801db4e:	000c      	movs	r4, r1
 801db50:	469a      	mov	sl, r3
 801db52:	9124      	str	r1, [sp, #144]	@ 0x90
 801db54:	18d1      	adds	r1, r2, r3
 801db56:	4663      	mov	r3, ip
 801db58:	468b      	mov	fp, r1
 801db5a:	0119      	lsls	r1, r3, #4
 801db5c:	910d      	str	r1, [sp, #52]	@ 0x34
 801db5e:	00d9      	lsls	r1, r3, #3
 801db60:	005b      	lsls	r3, r3, #1
 801db62:	4463      	add	r3, ip
 801db64:	910e      	str	r1, [sp, #56]	@ 0x38
 801db66:	00d9      	lsls	r1, r3, #3
 801db68:	465b      	mov	r3, fp
 801db6a:	44da      	add	sl, fp
 801db6c:	4690      	mov	r8, r2
 801db6e:	4683      	mov	fp, r0
 801db70:	4699      	mov	r9, r3
 801db72:	9022      	str	r0, [sp, #136]	@ 0x88
 801db74:	9025      	str	r0, [sp, #148]	@ 0x94
 801db76:	910f      	str	r1, [sp, #60]	@ 0x3c
 801db78:	9502      	str	r5, [sp, #8]
 801db7a:	9500      	str	r5, [sp, #0]
 801db7c:	9501      	str	r5, [sp, #4]
 801db7e:	9407      	str	r4, [sp, #28]
 801db80:	465b      	mov	r3, fp
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	4642      	mov	r2, r8
 801db86:	111c      	asrs	r4, r3, #4
 801db88:	464b      	mov	r3, r9
 801db8a:	4658      	mov	r0, fp
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	6812      	ldr	r2, [r2, #0]
 801db90:	111b      	asrs	r3, r3, #4
 801db92:	18e7      	adds	r7, r4, r3
 801db94:	1ae3      	subs	r3, r4, r3
 801db96:	1114      	asrs	r4, r2, #4
 801db98:	4652      	mov	r2, sl
 801db9a:	6840      	ldr	r0, [r0, #4]
 801db9c:	6812      	ldr	r2, [r2, #0]
 801db9e:	1105      	asrs	r5, r0, #4
 801dba0:	4648      	mov	r0, r9
 801dba2:	9303      	str	r3, [sp, #12]
 801dba4:	1113      	asrs	r3, r2, #4
 801dba6:	18e2      	adds	r2, r4, r3
 801dba8:	465c      	mov	r4, fp
 801dbaa:	6840      	ldr	r0, [r0, #4]
 801dbac:	1103      	asrs	r3, r0, #4
 801dbae:	18ee      	adds	r6, r5, r3
 801dbb0:	1ae8      	subs	r0, r5, r3
 801dbb2:	18bb      	adds	r3, r7, r2
 801dbb4:	6023      	str	r3, [r4, #0]
 801dbb6:	4644      	mov	r4, r8
 801dbb8:	6864      	ldr	r4, [r4, #4]
 801dbba:	9004      	str	r0, [sp, #16]
 801dbbc:	1125      	asrs	r5, r4, #4
 801dbbe:	4654      	mov	r4, sl
 801dbc0:	6864      	ldr	r4, [r4, #4]
 801dbc2:	1123      	asrs	r3, r4, #4
 801dbc4:	465c      	mov	r4, fp
 801dbc6:	18eb      	adds	r3, r5, r3
 801dbc8:	18f1      	adds	r1, r6, r3
 801dbca:	6061      	str	r1, [r4, #4]
 801dbcc:	4655      	mov	r5, sl
 801dbce:	4644      	mov	r4, r8
 801dbd0:	686d      	ldr	r5, [r5, #4]
 801dbd2:	6864      	ldr	r4, [r4, #4]
 801dbd4:	1129      	asrs	r1, r5, #4
 801dbd6:	1124      	asrs	r4, r4, #4
 801dbd8:	1a64      	subs	r4, r4, r1
 801dbda:	4641      	mov	r1, r8
 801dbdc:	6809      	ldr	r1, [r1, #0]
 801dbde:	9405      	str	r4, [sp, #20]
 801dbe0:	1108      	asrs	r0, r1, #4
 801dbe2:	4651      	mov	r1, sl
 801dbe4:	6809      	ldr	r1, [r1, #0]
 801dbe6:	1abc      	subs	r4, r7, r2
 801dbe8:	1109      	asrs	r1, r1, #4
 801dbea:	1a41      	subs	r1, r0, r1
 801dbec:	17e2      	asrs	r2, r4, #31
 801dbee:	9106      	str	r1, [sp, #24]
 801dbf0:	0011      	movs	r1, r2
 801dbf2:	9a01      	ldr	r2, [sp, #4]
 801dbf4:	9108      	str	r1, [sp, #32]
 801dbf6:	6817      	ldr	r7, [r2, #0]
 801dbf8:	17fd      	asrs	r5, r7, #31
 801dbfa:	0028      	movs	r0, r5
 801dbfc:	1af5      	subs	r5, r6, r3
 801dbfe:	17ee      	asrs	r6, r5, #31
 801dc00:	960a      	str	r6, [sp, #40]	@ 0x28
 801dc02:	6856      	ldr	r6, [r2, #4]
 801dc04:	9009      	str	r0, [sp, #36]	@ 0x24
 801dc06:	17f3      	asrs	r3, r6, #31
 801dc08:	003a      	movs	r2, r7
 801dc0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dc0c:	0003      	movs	r3, r0
 801dc0e:	0020      	movs	r0, r4
 801dc10:	f7e2 fcd6 	bl	80005c0 <__aeabi_lmul>
 801dc14:	0032      	movs	r2, r6
 801dc16:	17f3      	asrs	r3, r6, #31
 801dc18:	910c      	str	r1, [sp, #48]	@ 0x30
 801dc1a:	0028      	movs	r0, r5
 801dc1c:	17e9      	asrs	r1, r5, #31
 801dc1e:	f7e2 fccf 	bl	80005c0 <__aeabi_lmul>
 801dc22:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dc24:	002a      	movs	r2, r5
 801dc26:	4684      	mov	ip, r0
 801dc28:	4640      	mov	r0, r8
 801dc2a:	4461      	add	r1, ip
 801dc2c:	0049      	lsls	r1, r1, #1
 801dc2e:	6001      	str	r1, [r0, #0]
 801dc30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc34:	0038      	movs	r0, r7
 801dc36:	f7e2 fcc3 	bl	80005c0 <__aeabi_lmul>
 801dc3a:	0032      	movs	r2, r6
 801dc3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc3e:	000d      	movs	r5, r1
 801dc40:	0020      	movs	r0, r4
 801dc42:	9908      	ldr	r1, [sp, #32]
 801dc44:	f7e2 fcbc 	bl	80005c0 <__aeabi_lmul>
 801dc48:	4646      	mov	r6, r8
 801dc4a:	1a6d      	subs	r5, r5, r1
 801dc4c:	006d      	lsls	r5, r5, #1
 801dc4e:	6075      	str	r5, [r6, #4]
 801dc50:	9903      	ldr	r1, [sp, #12]
 801dc52:	9d05      	ldr	r5, [sp, #20]
 801dc54:	000c      	movs	r4, r1
 801dc56:	46ac      	mov	ip, r5
 801dc58:	4464      	add	r4, ip
 801dc5a:	17e6      	asrs	r6, r4, #31
 801dc5c:	0031      	movs	r1, r6
 801dc5e:	9b00      	ldr	r3, [sp, #0]
 801dc60:	9804      	ldr	r0, [sp, #16]
 801dc62:	681e      	ldr	r6, [r3, #0]
 801dc64:	17f7      	asrs	r7, r6, #31
 801dc66:	9709      	str	r7, [sp, #36]	@ 0x24
 801dc68:	9f06      	ldr	r7, [sp, #24]
 801dc6a:	0032      	movs	r2, r6
 801dc6c:	1bc7      	subs	r7, r0, r7
 801dc6e:	17fd      	asrs	r5, r7, #31
 801dc70:	950a      	str	r5, [sp, #40]	@ 0x28
 801dc72:	685d      	ldr	r5, [r3, #4]
 801dc74:	17f3      	asrs	r3, r6, #31
 801dc76:	17e8      	asrs	r0, r5, #31
 801dc78:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dc7a:	0020      	movs	r0, r4
 801dc7c:	9108      	str	r1, [sp, #32]
 801dc7e:	f7e2 fc9f 	bl	80005c0 <__aeabi_lmul>
 801dc82:	002a      	movs	r2, r5
 801dc84:	17eb      	asrs	r3, r5, #31
 801dc86:	910c      	str	r1, [sp, #48]	@ 0x30
 801dc88:	0038      	movs	r0, r7
 801dc8a:	17f9      	asrs	r1, r7, #31
 801dc8c:	f7e2 fc98 	bl	80005c0 <__aeabi_lmul>
 801dc90:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dc92:	003a      	movs	r2, r7
 801dc94:	4684      	mov	ip, r0
 801dc96:	4648      	mov	r0, r9
 801dc98:	4461      	add	r1, ip
 801dc9a:	0049      	lsls	r1, r1, #1
 801dc9c:	6001      	str	r1, [r0, #0]
 801dc9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dca0:	0030      	movs	r0, r6
 801dca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dca4:	f7e2 fc8c 	bl	80005c0 <__aeabi_lmul>
 801dca8:	002a      	movs	r2, r5
 801dcaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dcac:	000e      	movs	r6, r1
 801dcae:	0020      	movs	r0, r4
 801dcb0:	9908      	ldr	r1, [sp, #32]
 801dcb2:	f7e2 fc85 	bl	80005c0 <__aeabi_lmul>
 801dcb6:	464c      	mov	r4, r9
 801dcb8:	9d05      	ldr	r5, [sp, #20]
 801dcba:	1a76      	subs	r6, r6, r1
 801dcbc:	9903      	ldr	r1, [sp, #12]
 801dcbe:	0076      	lsls	r6, r6, #1
 801dcc0:	6066      	str	r6, [r4, #4]
 801dcc2:	1b4c      	subs	r4, r1, r5
 801dcc4:	9e06      	ldr	r6, [sp, #24]
 801dcc6:	17e1      	asrs	r1, r4, #31
 801dcc8:	9103      	str	r1, [sp, #12]
 801dcca:	9902      	ldr	r1, [sp, #8]
 801dccc:	46b4      	mov	ip, r6
 801dcce:	680f      	ldr	r7, [r1, #0]
 801dcd0:	9804      	ldr	r0, [sp, #16]
 801dcd2:	17fd      	asrs	r5, r7, #31
 801dcd4:	002b      	movs	r3, r5
 801dcd6:	684e      	ldr	r6, [r1, #4]
 801dcd8:	4460      	add	r0, ip
 801dcda:	0005      	movs	r5, r0
 801dcdc:	17c0      	asrs	r0, r0, #31
 801dcde:	9005      	str	r0, [sp, #20]
 801dce0:	17f0      	asrs	r0, r6, #31
 801dce2:	9006      	str	r0, [sp, #24]
 801dce4:	003a      	movs	r2, r7
 801dce6:	0020      	movs	r0, r4
 801dce8:	17e1      	asrs	r1, r4, #31
 801dcea:	9304      	str	r3, [sp, #16]
 801dcec:	f7e2 fc68 	bl	80005c0 <__aeabi_lmul>
 801dcf0:	0032      	movs	r2, r6
 801dcf2:	9108      	str	r1, [sp, #32]
 801dcf4:	17f3      	asrs	r3, r6, #31
 801dcf6:	0028      	movs	r0, r5
 801dcf8:	17e9      	asrs	r1, r5, #31
 801dcfa:	f7e2 fc61 	bl	80005c0 <__aeabi_lmul>
 801dcfe:	9808      	ldr	r0, [sp, #32]
 801dd00:	002a      	movs	r2, r5
 801dd02:	4684      	mov	ip, r0
 801dd04:	4650      	mov	r0, sl
 801dd06:	4461      	add	r1, ip
 801dd08:	0049      	lsls	r1, r1, #1
 801dd0a:	6001      	str	r1, [r0, #0]
 801dd0c:	9b05      	ldr	r3, [sp, #20]
 801dd0e:	9904      	ldr	r1, [sp, #16]
 801dd10:	0038      	movs	r0, r7
 801dd12:	f7e2 fc55 	bl	80005c0 <__aeabi_lmul>
 801dd16:	0020      	movs	r0, r4
 801dd18:	2408      	movs	r4, #8
 801dd1a:	000d      	movs	r5, r1
 801dd1c:	0032      	movs	r2, r6
 801dd1e:	9b06      	ldr	r3, [sp, #24]
 801dd20:	9903      	ldr	r1, [sp, #12]
 801dd22:	f7e2 fc4d 	bl	80005c0 <__aeabi_lmul>
 801dd26:	46a4      	mov	ip, r4
 801dd28:	4650      	mov	r0, sl
 801dd2a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dd2c:	44e3      	add	fp, ip
 801dd2e:	44e0      	add	r8, ip
 801dd30:	44e1      	add	r9, ip
 801dd32:	44e2      	add	sl, ip
 801dd34:	46a4      	mov	ip, r4
 801dd36:	1a6d      	subs	r5, r5, r1
 801dd38:	006d      	lsls	r5, r5, #1
 801dd3a:	9a01      	ldr	r2, [sp, #4]
 801dd3c:	6045      	str	r5, [r0, #4]
 801dd3e:	9807      	ldr	r0, [sp, #28]
 801dd40:	4462      	add	r2, ip
 801dd42:	3801      	subs	r0, #1
 801dd44:	9201      	str	r2, [sp, #4]
 801dd46:	9007      	str	r0, [sp, #28]
 801dd48:	9b00      	ldr	r3, [sp, #0]
 801dd4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd4c:	9902      	ldr	r1, [sp, #8]
 801dd4e:	4694      	mov	ip, r2
 801dd50:	4463      	add	r3, ip
 801dd52:	9300      	str	r3, [sp, #0]
 801dd54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd56:	469c      	mov	ip, r3
 801dd58:	4461      	add	r1, ip
 801dd5a:	9102      	str	r1, [sp, #8]
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	d000      	beq.n	801dd62 <arm_radix4_butterfly_q31+0x232>
 801dd60:	e70e      	b.n	801db80 <arm_radix4_butterfly_q31+0x50>
 801dd62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dd64:	009b      	lsls	r3, r3, #2
 801dd66:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dd68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd6a:	9320      	str	r3, [sp, #128]	@ 0x80
 801dd6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dd6e:	2b04      	cmp	r3, #4
 801dd70:	d800      	bhi.n	801dd74 <arm_radix4_butterfly_q31+0x244>
 801dd72:	e180      	b.n	801e076 <arm_radix4_butterfly_q31+0x546>
 801dd74:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dd76:	0893      	lsrs	r3, r2, #2
 801dd78:	1e59      	subs	r1, r3, #1
 801dd7a:	9321      	str	r3, [sp, #132]	@ 0x84
 801dd7c:	00db      	lsls	r3, r3, #3
 801dd7e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dd80:	00d3      	lsls	r3, r2, #3
 801dd82:	9300      	str	r3, [sp, #0]
 801dd84:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dd86:	911a      	str	r1, [sp, #104]	@ 0x68
 801dd88:	00da      	lsls	r2, r3, #3
 801dd8a:	921e      	str	r2, [sp, #120]	@ 0x78
 801dd8c:	011a      	lsls	r2, r3, #4
 801dd8e:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd90:	001a      	movs	r2, r3
 801dd92:	4694      	mov	ip, r2
 801dd94:	005b      	lsls	r3, r3, #1
 801dd96:	4463      	add	r3, ip
 801dd98:	00db      	lsls	r3, r3, #3
 801dd9a:	931c      	str	r3, [sp, #112]	@ 0x70
 801dd9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dd9e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dda0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dda2:	9318      	str	r3, [sp, #96]	@ 0x60
 801dda4:	9319      	str	r3, [sp, #100]	@ 0x64
 801dda6:	9316      	str	r3, [sp, #88]	@ 0x58
 801dda8:	2300      	movs	r3, #0
 801ddaa:	9315      	str	r3, [sp, #84]	@ 0x54
 801ddac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ddae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ddb0:	681a      	ldr	r2, [r3, #0]
 801ddb2:	685b      	ldr	r3, [r3, #4]
 801ddb4:	9205      	str	r2, [sp, #20]
 801ddb6:	9306      	str	r3, [sp, #24]
 801ddb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ddba:	468c      	mov	ip, r1
 801ddbc:	681a      	ldr	r2, [r3, #0]
 801ddbe:	685b      	ldr	r3, [r3, #4]
 801ddc0:	9207      	str	r2, [sp, #28]
 801ddc2:	9308      	str	r3, [sp, #32]
 801ddc4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ddc6:	681a      	ldr	r2, [r3, #0]
 801ddc8:	685b      	ldr	r3, [r3, #4]
 801ddca:	9209      	str	r2, [sp, #36]	@ 0x24
 801ddcc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ddce:	930a      	str	r3, [sp, #40]	@ 0x28
 801ddd0:	0013      	movs	r3, r2
 801ddd2:	4463      	add	r3, ip
 801ddd4:	4698      	mov	r8, r3
 801ddd6:	0013      	movs	r3, r2
 801ddd8:	4442      	add	r2, r8
 801ddda:	4691      	mov	r9, r2
 801dddc:	001a      	movs	r2, r3
 801ddde:	444a      	add	r2, r9
 801dde0:	4692      	mov	sl, r2
 801dde2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dde4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dde6:	4293      	cmp	r3, r2
 801dde8:	d800      	bhi.n	801ddec <arm_radix4_butterfly_q31+0x2bc>
 801ddea:	e0dd      	b.n	801dfa8 <arm_radix4_butterfly_q31+0x478>
 801ddec:	4694      	mov	ip, r2
 801ddee:	468b      	mov	fp, r1
 801ddf0:	4644      	mov	r4, r8
 801ddf2:	4655      	mov	r5, sl
 801ddf4:	9b07      	ldr	r3, [sp, #28]
 801ddf6:	17db      	asrs	r3, r3, #31
 801ddf8:	930c      	str	r3, [sp, #48]	@ 0x30
 801ddfa:	9b08      	ldr	r3, [sp, #32]
 801ddfc:	17db      	asrs	r3, r3, #31
 801ddfe:	930d      	str	r3, [sp, #52]	@ 0x34
 801de00:	9b05      	ldr	r3, [sp, #20]
 801de02:	17db      	asrs	r3, r3, #31
 801de04:	930e      	str	r3, [sp, #56]	@ 0x38
 801de06:	9b06      	ldr	r3, [sp, #24]
 801de08:	17db      	asrs	r3, r3, #31
 801de0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801de0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de0e:	17db      	asrs	r3, r3, #31
 801de10:	9310      	str	r3, [sp, #64]	@ 0x40
 801de12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de14:	17db      	asrs	r3, r3, #31
 801de16:	9311      	str	r3, [sp, #68]	@ 0x44
 801de18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801de1a:	4463      	add	r3, ip
 801de1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de1e:	465b      	mov	r3, fp
 801de20:	4659      	mov	r1, fp
 801de22:	681a      	ldr	r2, [r3, #0]
 801de24:	464b      	mov	r3, r9
 801de26:	684f      	ldr	r7, [r1, #4]
 801de28:	4649      	mov	r1, r9
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	18d6      	adds	r6, r2, r3
 801de2e:	1ad3      	subs	r3, r2, r3
 801de30:	9301      	str	r3, [sp, #4]
 801de32:	684b      	ldr	r3, [r1, #4]
 801de34:	18f8      	adds	r0, r7, r3
 801de36:	1af9      	subs	r1, r7, r3
 801de38:	6827      	ldr	r7, [r4, #0]
 801de3a:	9102      	str	r1, [sp, #8]
 801de3c:	003a      	movs	r2, r7
 801de3e:	682f      	ldr	r7, [r5, #0]
 801de40:	46bc      	mov	ip, r7
 801de42:	465f      	mov	r7, fp
 801de44:	4462      	add	r2, ip
 801de46:	18b3      	adds	r3, r6, r2
 801de48:	109b      	asrs	r3, r3, #2
 801de4a:	603b      	str	r3, [r7, #0]
 801de4c:	6867      	ldr	r7, [r4, #4]
 801de4e:	1ab6      	subs	r6, r6, r2
 801de50:	46b8      	mov	r8, r7
 801de52:	686f      	ldr	r7, [r5, #4]
 801de54:	17f2      	asrs	r2, r6, #31
 801de56:	46bc      	mov	ip, r7
 801de58:	44e0      	add	r8, ip
 801de5a:	4643      	mov	r3, r8
 801de5c:	465f      	mov	r7, fp
 801de5e:	18c1      	adds	r1, r0, r3
 801de60:	1089      	asrs	r1, r1, #2
 801de62:	6079      	str	r1, [r7, #4]
 801de64:	9900      	ldr	r1, [sp, #0]
 801de66:	4690      	mov	r8, r2
 801de68:	468c      	mov	ip, r1
 801de6a:	6867      	ldr	r7, [r4, #4]
 801de6c:	6869      	ldr	r1, [r5, #4]
 801de6e:	44e3      	add	fp, ip
 801de70:	1a7f      	subs	r7, r7, r1
 801de72:	9703      	str	r7, [sp, #12]
 801de74:	6829      	ldr	r1, [r5, #0]
 801de76:	6827      	ldr	r7, [r4, #0]
 801de78:	1a7f      	subs	r7, r7, r1
 801de7a:	9704      	str	r7, [sp, #16]
 801de7c:	1ac7      	subs	r7, r0, r3
 801de7e:	17fa      	asrs	r2, r7, #31
 801de80:	4692      	mov	sl, r2
 801de82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de84:	9a07      	ldr	r2, [sp, #28]
 801de86:	0030      	movs	r0, r6
 801de88:	4641      	mov	r1, r8
 801de8a:	f7e2 fb99 	bl	80005c0 <__aeabi_lmul>
 801de8e:	9a08      	ldr	r2, [sp, #32]
 801de90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de92:	9112      	str	r1, [sp, #72]	@ 0x48
 801de94:	0038      	movs	r0, r7
 801de96:	4651      	mov	r1, sl
 801de98:	f7e2 fb92 	bl	80005c0 <__aeabi_lmul>
 801de9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801de9e:	9a07      	ldr	r2, [sp, #28]
 801dea0:	4684      	mov	ip, r0
 801dea2:	4461      	add	r1, ip
 801dea4:	1049      	asrs	r1, r1, #1
 801dea6:	6021      	str	r1, [r4, #0]
 801dea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deaa:	0038      	movs	r0, r7
 801deac:	4651      	mov	r1, sl
 801deae:	f7e2 fb87 	bl	80005c0 <__aeabi_lmul>
 801deb2:	9a08      	ldr	r2, [sp, #32]
 801deb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801deb6:	000f      	movs	r7, r1
 801deb8:	0030      	movs	r0, r6
 801deba:	4641      	mov	r1, r8
 801debc:	f7e2 fb80 	bl	80005c0 <__aeabi_lmul>
 801dec0:	9b00      	ldr	r3, [sp, #0]
 801dec2:	9a01      	ldr	r2, [sp, #4]
 801dec4:	469c      	mov	ip, r3
 801dec6:	9803      	ldr	r0, [sp, #12]
 801dec8:	1a7f      	subs	r7, r7, r1
 801deca:	107f      	asrs	r7, r7, #1
 801decc:	6067      	str	r7, [r4, #4]
 801dece:	0016      	movs	r6, r2
 801ded0:	4464      	add	r4, ip
 801ded2:	4684      	mov	ip, r0
 801ded4:	4466      	add	r6, ip
 801ded6:	17f2      	asrs	r2, r6, #31
 801ded8:	4690      	mov	r8, r2
 801deda:	9902      	ldr	r1, [sp, #8]
 801dedc:	9f04      	ldr	r7, [sp, #16]
 801dede:	0030      	movs	r0, r6
 801dee0:	1bcf      	subs	r7, r1, r7
 801dee2:	17fa      	asrs	r2, r7, #31
 801dee4:	4692      	mov	sl, r2
 801dee6:	4641      	mov	r1, r8
 801dee8:	9a05      	ldr	r2, [sp, #20]
 801deea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801deec:	f7e2 fb68 	bl	80005c0 <__aeabi_lmul>
 801def0:	9a06      	ldr	r2, [sp, #24]
 801def2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801def4:	9112      	str	r1, [sp, #72]	@ 0x48
 801def6:	0038      	movs	r0, r7
 801def8:	4651      	mov	r1, sl
 801defa:	f7e2 fb61 	bl	80005c0 <__aeabi_lmul>
 801defe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801df00:	9a05      	ldr	r2, [sp, #20]
 801df02:	4684      	mov	ip, r0
 801df04:	4648      	mov	r0, r9
 801df06:	4461      	add	r1, ip
 801df08:	1049      	asrs	r1, r1, #1
 801df0a:	6001      	str	r1, [r0, #0]
 801df0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df0e:	0038      	movs	r0, r7
 801df10:	4651      	mov	r1, sl
 801df12:	f7e2 fb55 	bl	80005c0 <__aeabi_lmul>
 801df16:	9a06      	ldr	r2, [sp, #24]
 801df18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df1a:	000f      	movs	r7, r1
 801df1c:	0030      	movs	r0, r6
 801df1e:	4641      	mov	r1, r8
 801df20:	f7e2 fb4e 	bl	80005c0 <__aeabi_lmul>
 801df24:	464e      	mov	r6, r9
 801df26:	9a00      	ldr	r2, [sp, #0]
 801df28:	9b01      	ldr	r3, [sp, #4]
 801df2a:	4694      	mov	ip, r2
 801df2c:	9803      	ldr	r0, [sp, #12]
 801df2e:	1a7f      	subs	r7, r7, r1
 801df30:	107f      	asrs	r7, r7, #1
 801df32:	6077      	str	r7, [r6, #4]
 801df34:	1a1e      	subs	r6, r3, r0
 801df36:	9b04      	ldr	r3, [sp, #16]
 801df38:	44e1      	add	r9, ip
 801df3a:	469c      	mov	ip, r3
 801df3c:	17f0      	asrs	r0, r6, #31
 801df3e:	4680      	mov	r8, r0
 801df40:	9902      	ldr	r1, [sp, #8]
 801df42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df44:	4461      	add	r1, ip
 801df46:	17cb      	asrs	r3, r1, #31
 801df48:	000f      	movs	r7, r1
 801df4a:	469a      	mov	sl, r3
 801df4c:	0030      	movs	r0, r6
 801df4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df50:	4641      	mov	r1, r8
 801df52:	f7e2 fb35 	bl	80005c0 <__aeabi_lmul>
 801df56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801df58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df5a:	9101      	str	r1, [sp, #4]
 801df5c:	0038      	movs	r0, r7
 801df5e:	4651      	mov	r1, sl
 801df60:	f7e2 fb2e 	bl	80005c0 <__aeabi_lmul>
 801df64:	9801      	ldr	r0, [sp, #4]
 801df66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df68:	4684      	mov	ip, r0
 801df6a:	4461      	add	r1, ip
 801df6c:	1049      	asrs	r1, r1, #1
 801df6e:	6029      	str	r1, [r5, #0]
 801df70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df72:	0038      	movs	r0, r7
 801df74:	4651      	mov	r1, sl
 801df76:	f7e2 fb23 	bl	80005c0 <__aeabi_lmul>
 801df7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df7c:	000f      	movs	r7, r1
 801df7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801df80:	0030      	movs	r0, r6
 801df82:	4641      	mov	r1, r8
 801df84:	f7e2 fb1c 	bl	80005c0 <__aeabi_lmul>
 801df88:	1a7f      	subs	r7, r7, r1
 801df8a:	107f      	asrs	r7, r7, #1
 801df8c:	606f      	str	r7, [r5, #4]
 801df8e:	9a00      	ldr	r2, [sp, #0]
 801df90:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801df92:	4694      	mov	ip, r2
 801df94:	4465      	add	r5, ip
 801df96:	468c      	mov	ip, r1
 801df98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801df9a:	0013      	movs	r3, r2
 801df9c:	4462      	add	r2, ip
 801df9e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dfa0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dfa2:	429a      	cmp	r2, r3
 801dfa4:	d900      	bls.n	801dfa8 <arm_radix4_butterfly_q31+0x478>
 801dfa6:	e73a      	b.n	801de1e <arm_radix4_butterfly_q31+0x2ee>
 801dfa8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dfaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dfac:	468c      	mov	ip, r1
 801dfae:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801dfb0:	4462      	add	r2, ip
 801dfb2:	468c      	mov	ip, r1
 801dfb4:	9216      	str	r2, [sp, #88]	@ 0x58
 801dfb6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801dfb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dfba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dfbc:	4462      	add	r2, ip
 801dfbe:	468c      	mov	ip, r1
 801dfc0:	9219      	str	r2, [sp, #100]	@ 0x64
 801dfc2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dfc4:	3301      	adds	r3, #1
 801dfc6:	4462      	add	r2, ip
 801dfc8:	9218      	str	r2, [sp, #96]	@ 0x60
 801dfca:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801dfcc:	9315      	str	r3, [sp, #84]	@ 0x54
 801dfce:	3208      	adds	r2, #8
 801dfd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801dfd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dfd4:	4293      	cmp	r3, r2
 801dfd6:	d800      	bhi.n	801dfda <arm_radix4_butterfly_q31+0x4aa>
 801dfd8:	e6e8      	b.n	801ddac <arm_radix4_butterfly_q31+0x27c>
 801dfda:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dfdc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801dfde:	009b      	lsls	r3, r3, #2
 801dfe0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dfe2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dfe4:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dfe6:	089b      	lsrs	r3, r3, #2
 801dfe8:	9320      	str	r3, [sp, #128]	@ 0x80
 801dfea:	2b04      	cmp	r3, #4
 801dfec:	d900      	bls.n	801dff0 <arm_radix4_butterfly_q31+0x4c0>
 801dfee:	e6c1      	b.n	801dd74 <arm_radix4_butterfly_q31+0x244>
 801dff0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dff2:	469a      	mov	sl, r3
 801dff4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dff6:	691c      	ldr	r4, [r3, #16]
 801dff8:	685a      	ldr	r2, [r3, #4]
 801dffa:	46a1      	mov	r9, r4
 801dffc:	4690      	mov	r8, r2
 801dffe:	6819      	ldr	r1, [r3, #0]
 801e000:	689a      	ldr	r2, [r3, #8]
 801e002:	699f      	ldr	r7, [r3, #24]
 801e004:	188d      	adds	r5, r1, r2
 801e006:	444d      	add	r5, r9
 801e008:	19ed      	adds	r5, r5, r7
 801e00a:	69de      	ldr	r6, [r3, #28]
 801e00c:	601d      	str	r5, [r3, #0]
 801e00e:	4645      	mov	r5, r8
 801e010:	46b4      	mov	ip, r6
 801e012:	68d8      	ldr	r0, [r3, #12]
 801e014:	695c      	ldr	r4, [r3, #20]
 801e016:	182d      	adds	r5, r5, r0
 801e018:	192d      	adds	r5, r5, r4
 801e01a:	4465      	add	r5, ip
 801e01c:	605d      	str	r5, [r3, #4]
 801e01e:	1a8d      	subs	r5, r1, r2
 801e020:	444d      	add	r5, r9
 801e022:	1bed      	subs	r5, r5, r7
 801e024:	609d      	str	r5, [r3, #8]
 801e026:	4645      	mov	r5, r8
 801e028:	1a2d      	subs	r5, r5, r0
 801e02a:	192d      	adds	r5, r5, r4
 801e02c:	1bad      	subs	r5, r5, r6
 801e02e:	464e      	mov	r6, r9
 801e030:	60dd      	str	r5, [r3, #12]
 801e032:	180d      	adds	r5, r1, r0
 801e034:	1bad      	subs	r5, r5, r6
 801e036:	4666      	mov	r6, ip
 801e038:	1bad      	subs	r5, r5, r6
 801e03a:	611d      	str	r5, [r3, #16]
 801e03c:	4645      	mov	r5, r8
 801e03e:	1aad      	subs	r5, r5, r2
 801e040:	4442      	add	r2, r8
 801e042:	1b12      	subs	r2, r2, r4
 801e044:	1bd2      	subs	r2, r2, r7
 801e046:	1a08      	subs	r0, r1, r0
 801e048:	61da      	str	r2, [r3, #28]
 801e04a:	4649      	mov	r1, r9
 801e04c:	2201      	movs	r2, #1
 801e04e:	1a41      	subs	r1, r0, r1
 801e050:	4252      	negs	r2, r2
 801e052:	4461      	add	r1, ip
 801e054:	4694      	mov	ip, r2
 801e056:	44e2      	add	sl, ip
 801e058:	4652      	mov	r2, sl
 801e05a:	1b2d      	subs	r5, r5, r4
 801e05c:	19ed      	adds	r5, r5, r7
 801e05e:	615d      	str	r5, [r3, #20]
 801e060:	6199      	str	r1, [r3, #24]
 801e062:	3320      	adds	r3, #32
 801e064:	2a00      	cmp	r2, #0
 801e066:	d1c6      	bne.n	801dff6 <arm_radix4_butterfly_q31+0x4c6>
 801e068:	b027      	add	sp, #156	@ 0x9c
 801e06a:	bc3c      	pop	{r2, r3, r4, r5}
 801e06c:	4690      	mov	r8, r2
 801e06e:	4699      	mov	r9, r3
 801e070:	46a2      	mov	sl, r4
 801e072:	46ab      	mov	fp, r5
 801e074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e076:	469a      	mov	sl, r3
 801e078:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e07a:	e7bc      	b.n	801dff6 <arm_radix4_butterfly_q31+0x4c6>

0801e07c <arm_radix4_butterfly_inverse_q31>:
 801e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e07e:	464d      	mov	r5, r9
 801e080:	4644      	mov	r4, r8
 801e082:	465f      	mov	r7, fp
 801e084:	4656      	mov	r6, sl
 801e086:	b4f0      	push	{r4, r5, r6, r7}
 801e088:	b0a7      	sub	sp, #156	@ 0x9c
 801e08a:	469c      	mov	ip, r3
 801e08c:	9114      	str	r1, [sp, #80]	@ 0x50
 801e08e:	0889      	lsrs	r1, r1, #2
 801e090:	9310      	str	r3, [sp, #64]	@ 0x40
 801e092:	00cb      	lsls	r3, r1, #3
 801e094:	0015      	movs	r5, r2
 801e096:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e098:	18c2      	adds	r2, r0, r3
 801e09a:	000c      	movs	r4, r1
 801e09c:	9124      	str	r1, [sp, #144]	@ 0x90
 801e09e:	18d1      	adds	r1, r2, r3
 801e0a0:	468b      	mov	fp, r1
 801e0a2:	469a      	mov	sl, r3
 801e0a4:	4663      	mov	r3, ip
 801e0a6:	44da      	add	sl, fp
 801e0a8:	46d0      	mov	r8, sl
 801e0aa:	4681      	mov	r9, r0
 801e0ac:	4692      	mov	sl, r2
 801e0ae:	0119      	lsls	r1, r3, #4
 801e0b0:	910d      	str	r1, [sp, #52]	@ 0x34
 801e0b2:	00d9      	lsls	r1, r3, #3
 801e0b4:	005b      	lsls	r3, r3, #1
 801e0b6:	4463      	add	r3, ip
 801e0b8:	910e      	str	r1, [sp, #56]	@ 0x38
 801e0ba:	00d9      	lsls	r1, r3, #3
 801e0bc:	9022      	str	r0, [sp, #136]	@ 0x88
 801e0be:	9025      	str	r0, [sp, #148]	@ 0x94
 801e0c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e0c2:	9502      	str	r5, [sp, #8]
 801e0c4:	9500      	str	r5, [sp, #0]
 801e0c6:	9501      	str	r5, [sp, #4]
 801e0c8:	9409      	str	r4, [sp, #36]	@ 0x24
 801e0ca:	464b      	mov	r3, r9
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	4652      	mov	r2, sl
 801e0d0:	111c      	asrs	r4, r3, #4
 801e0d2:	465b      	mov	r3, fp
 801e0d4:	4648      	mov	r0, r9
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	6812      	ldr	r2, [r2, #0]
 801e0da:	6840      	ldr	r0, [r0, #4]
 801e0dc:	111b      	asrs	r3, r3, #4
 801e0de:	18e7      	adds	r7, r4, r3
 801e0e0:	1ae3      	subs	r3, r4, r3
 801e0e2:	1114      	asrs	r4, r2, #4
 801e0e4:	4642      	mov	r2, r8
 801e0e6:	1105      	asrs	r5, r0, #4
 801e0e8:	4658      	mov	r0, fp
 801e0ea:	6812      	ldr	r2, [r2, #0]
 801e0ec:	6840      	ldr	r0, [r0, #4]
 801e0ee:	9303      	str	r3, [sp, #12]
 801e0f0:	1113      	asrs	r3, r2, #4
 801e0f2:	18e2      	adds	r2, r4, r3
 801e0f4:	1103      	asrs	r3, r0, #4
 801e0f6:	18ee      	adds	r6, r5, r3
 801e0f8:	1ae8      	subs	r0, r5, r3
 801e0fa:	464d      	mov	r5, r9
 801e0fc:	18bb      	adds	r3, r7, r2
 801e0fe:	602b      	str	r3, [r5, #0]
 801e100:	4641      	mov	r1, r8
 801e102:	4655      	mov	r5, sl
 801e104:	6849      	ldr	r1, [r1, #4]
 801e106:	686d      	ldr	r5, [r5, #4]
 801e108:	110b      	asrs	r3, r1, #4
 801e10a:	112d      	asrs	r5, r5, #4
 801e10c:	18eb      	adds	r3, r5, r3
 801e10e:	464d      	mov	r5, r9
 801e110:	18f1      	adds	r1, r6, r3
 801e112:	6069      	str	r1, [r5, #4]
 801e114:	4655      	mov	r5, sl
 801e116:	686d      	ldr	r5, [r5, #4]
 801e118:	9004      	str	r0, [sp, #16]
 801e11a:	112c      	asrs	r4, r5, #4
 801e11c:	4645      	mov	r5, r8
 801e11e:	686d      	ldr	r5, [r5, #4]
 801e120:	1129      	asrs	r1, r5, #4
 801e122:	1a65      	subs	r5, r4, r1
 801e124:	4651      	mov	r1, sl
 801e126:	6809      	ldr	r1, [r1, #0]
 801e128:	1abc      	subs	r4, r7, r2
 801e12a:	1108      	asrs	r0, r1, #4
 801e12c:	4641      	mov	r1, r8
 801e12e:	17e2      	asrs	r2, r4, #31
 801e130:	6809      	ldr	r1, [r1, #0]
 801e132:	9207      	str	r2, [sp, #28]
 801e134:	9a01      	ldr	r2, [sp, #4]
 801e136:	1109      	asrs	r1, r1, #4
 801e138:	6817      	ldr	r7, [r2, #0]
 801e13a:	1a41      	subs	r1, r0, r1
 801e13c:	9106      	str	r1, [sp, #24]
 801e13e:	0039      	movs	r1, r7
 801e140:	17ff      	asrs	r7, r7, #31
 801e142:	0038      	movs	r0, r7
 801e144:	9505      	str	r5, [sp, #20]
 801e146:	1af5      	subs	r5, r6, r3
 801e148:	17ef      	asrs	r7, r5, #31
 801e14a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e14c:	6857      	ldr	r7, [r2, #4]
 801e14e:	0003      	movs	r3, r0
 801e150:	17fe      	asrs	r6, r7, #31
 801e152:	000a      	movs	r2, r1
 801e154:	9108      	str	r1, [sp, #32]
 801e156:	900a      	str	r0, [sp, #40]	@ 0x28
 801e158:	17e1      	asrs	r1, r4, #31
 801e15a:	0020      	movs	r0, r4
 801e15c:	960c      	str	r6, [sp, #48]	@ 0x30
 801e15e:	f7e2 fa2f 	bl	80005c0 <__aeabi_lmul>
 801e162:	003a      	movs	r2, r7
 801e164:	17fb      	asrs	r3, r7, #31
 801e166:	000e      	movs	r6, r1
 801e168:	0028      	movs	r0, r5
 801e16a:	17e9      	asrs	r1, r5, #31
 801e16c:	f7e2 fa28 	bl	80005c0 <__aeabi_lmul>
 801e170:	4653      	mov	r3, sl
 801e172:	1a76      	subs	r6, r6, r1
 801e174:	0076      	lsls	r6, r6, #1
 801e176:	601e      	str	r6, [r3, #0]
 801e178:	002a      	movs	r2, r5
 801e17a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e17c:	9808      	ldr	r0, [sp, #32]
 801e17e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e180:	f7e2 fa1e 	bl	80005c0 <__aeabi_lmul>
 801e184:	003a      	movs	r2, r7
 801e186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e188:	000d      	movs	r5, r1
 801e18a:	0020      	movs	r0, r4
 801e18c:	9907      	ldr	r1, [sp, #28]
 801e18e:	f7e2 fa17 	bl	80005c0 <__aeabi_lmul>
 801e192:	4657      	mov	r7, sl
 801e194:	186d      	adds	r5, r5, r1
 801e196:	006d      	lsls	r5, r5, #1
 801e198:	607d      	str	r5, [r7, #4]
 801e19a:	9b03      	ldr	r3, [sp, #12]
 801e19c:	9e06      	ldr	r6, [sp, #24]
 801e19e:	9d05      	ldr	r5, [sp, #20]
 801e1a0:	46b4      	mov	ip, r6
 801e1a2:	1b5d      	subs	r5, r3, r5
 801e1a4:	9b00      	ldr	r3, [sp, #0]
 801e1a6:	17ef      	asrs	r7, r5, #31
 801e1a8:	0039      	movs	r1, r7
 801e1aa:	681f      	ldr	r7, [r3, #0]
 801e1ac:	17fc      	asrs	r4, r7, #31
 801e1ae:	0020      	movs	r0, r4
 801e1b0:	9c04      	ldr	r4, [sp, #16]
 801e1b2:	4464      	add	r4, ip
 801e1b4:	17e6      	asrs	r6, r4, #31
 801e1b6:	9407      	str	r4, [sp, #28]
 801e1b8:	9608      	str	r6, [sp, #32]
 801e1ba:	685e      	ldr	r6, [r3, #4]
 801e1bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e1be:	17f2      	asrs	r2, r6, #31
 801e1c0:	0003      	movs	r3, r0
 801e1c2:	920c      	str	r2, [sp, #48]	@ 0x30
 801e1c4:	0028      	movs	r0, r5
 801e1c6:	003a      	movs	r2, r7
 801e1c8:	910a      	str	r1, [sp, #40]	@ 0x28
 801e1ca:	f7e2 f9f9 	bl	80005c0 <__aeabi_lmul>
 801e1ce:	0032      	movs	r2, r6
 801e1d0:	17f3      	asrs	r3, r6, #31
 801e1d2:	9807      	ldr	r0, [sp, #28]
 801e1d4:	000c      	movs	r4, r1
 801e1d6:	9908      	ldr	r1, [sp, #32]
 801e1d8:	f7e2 f9f2 	bl	80005c0 <__aeabi_lmul>
 801e1dc:	4658      	mov	r0, fp
 801e1de:	1a64      	subs	r4, r4, r1
 801e1e0:	0064      	lsls	r4, r4, #1
 801e1e2:	9a07      	ldr	r2, [sp, #28]
 801e1e4:	6004      	str	r4, [r0, #0]
 801e1e6:	9b08      	ldr	r3, [sp, #32]
 801e1e8:	0038      	movs	r0, r7
 801e1ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e1ec:	f7e2 f9e8 	bl	80005c0 <__aeabi_lmul>
 801e1f0:	0032      	movs	r2, r6
 801e1f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e1f4:	000c      	movs	r4, r1
 801e1f6:	0028      	movs	r0, r5
 801e1f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e1fa:	f7e2 f9e1 	bl	80005c0 <__aeabi_lmul>
 801e1fe:	9d05      	ldr	r5, [sp, #20]
 801e200:	465f      	mov	r7, fp
 801e202:	46ac      	mov	ip, r5
 801e204:	1864      	adds	r4, r4, r1
 801e206:	9903      	ldr	r1, [sp, #12]
 801e208:	0064      	lsls	r4, r4, #1
 801e20a:	4461      	add	r1, ip
 801e20c:	607c      	str	r4, [r7, #4]
 801e20e:	000c      	movs	r4, r1
 801e210:	17c9      	asrs	r1, r1, #31
 801e212:	9105      	str	r1, [sp, #20]
 801e214:	9902      	ldr	r1, [sp, #8]
 801e216:	9804      	ldr	r0, [sp, #16]
 801e218:	680d      	ldr	r5, [r1, #0]
 801e21a:	9e06      	ldr	r6, [sp, #24]
 801e21c:	002b      	movs	r3, r5
 801e21e:	17ed      	asrs	r5, r5, #31
 801e220:	684f      	ldr	r7, [r1, #4]
 801e222:	9503      	str	r5, [sp, #12]
 801e224:	1b85      	subs	r5, r0, r6
 801e226:	17e8      	asrs	r0, r5, #31
 801e228:	001a      	movs	r2, r3
 801e22a:	9006      	str	r0, [sp, #24]
 801e22c:	17fe      	asrs	r6, r7, #31
 801e22e:	9304      	str	r3, [sp, #16]
 801e230:	0020      	movs	r0, r4
 801e232:	9b03      	ldr	r3, [sp, #12]
 801e234:	17e1      	asrs	r1, r4, #31
 801e236:	9607      	str	r6, [sp, #28]
 801e238:	f7e2 f9c2 	bl	80005c0 <__aeabi_lmul>
 801e23c:	003a      	movs	r2, r7
 801e23e:	000e      	movs	r6, r1
 801e240:	17fb      	asrs	r3, r7, #31
 801e242:	0028      	movs	r0, r5
 801e244:	17e9      	asrs	r1, r5, #31
 801e246:	f7e2 f9bb 	bl	80005c0 <__aeabi_lmul>
 801e24a:	4640      	mov	r0, r8
 801e24c:	1a76      	subs	r6, r6, r1
 801e24e:	0076      	lsls	r6, r6, #1
 801e250:	002a      	movs	r2, r5
 801e252:	9b06      	ldr	r3, [sp, #24]
 801e254:	6006      	str	r6, [r0, #0]
 801e256:	9903      	ldr	r1, [sp, #12]
 801e258:	9804      	ldr	r0, [sp, #16]
 801e25a:	f7e2 f9b1 	bl	80005c0 <__aeabi_lmul>
 801e25e:	0020      	movs	r0, r4
 801e260:	2408      	movs	r4, #8
 801e262:	9b07      	ldr	r3, [sp, #28]
 801e264:	000d      	movs	r5, r1
 801e266:	003a      	movs	r2, r7
 801e268:	9905      	ldr	r1, [sp, #20]
 801e26a:	f7e2 f9a9 	bl	80005c0 <__aeabi_lmul>
 801e26e:	4640      	mov	r0, r8
 801e270:	46a4      	mov	ip, r4
 801e272:	186d      	adds	r5, r5, r1
 801e274:	006d      	lsls	r5, r5, #1
 801e276:	6045      	str	r5, [r0, #4]
 801e278:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e27a:	44e1      	add	r9, ip
 801e27c:	3801      	subs	r0, #1
 801e27e:	9009      	str	r0, [sp, #36]	@ 0x24
 801e280:	9a01      	ldr	r2, [sp, #4]
 801e282:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e284:	44e2      	add	sl, ip
 801e286:	44e3      	add	fp, ip
 801e288:	44e0      	add	r8, ip
 801e28a:	46a4      	mov	ip, r4
 801e28c:	4462      	add	r2, ip
 801e28e:	9201      	str	r2, [sp, #4]
 801e290:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e292:	9b00      	ldr	r3, [sp, #0]
 801e294:	4694      	mov	ip, r2
 801e296:	4463      	add	r3, ip
 801e298:	9300      	str	r3, [sp, #0]
 801e29a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e29c:	9902      	ldr	r1, [sp, #8]
 801e29e:	469c      	mov	ip, r3
 801e2a0:	4461      	add	r1, ip
 801e2a2:	9102      	str	r1, [sp, #8]
 801e2a4:	2800      	cmp	r0, #0
 801e2a6:	d000      	beq.n	801e2aa <arm_radix4_butterfly_inverse_q31+0x22e>
 801e2a8:	e70f      	b.n	801e0ca <arm_radix4_butterfly_inverse_q31+0x4e>
 801e2aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e2ac:	009b      	lsls	r3, r3, #2
 801e2ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e2b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e2b2:	9320      	str	r3, [sp, #128]	@ 0x80
 801e2b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e2b6:	2b04      	cmp	r3, #4
 801e2b8:	d800      	bhi.n	801e2bc <arm_radix4_butterfly_inverse_q31+0x240>
 801e2ba:	e17c      	b.n	801e5b6 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e2bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e2be:	0893      	lsrs	r3, r2, #2
 801e2c0:	1e59      	subs	r1, r3, #1
 801e2c2:	9321      	str	r3, [sp, #132]	@ 0x84
 801e2c4:	00db      	lsls	r3, r3, #3
 801e2c6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e2c8:	00d3      	lsls	r3, r2, #3
 801e2ca:	9300      	str	r3, [sp, #0]
 801e2cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e2ce:	911a      	str	r1, [sp, #104]	@ 0x68
 801e2d0:	00da      	lsls	r2, r3, #3
 801e2d2:	921e      	str	r2, [sp, #120]	@ 0x78
 801e2d4:	011a      	lsls	r2, r3, #4
 801e2d6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e2d8:	001a      	movs	r2, r3
 801e2da:	4694      	mov	ip, r2
 801e2dc:	005b      	lsls	r3, r3, #1
 801e2de:	4463      	add	r3, ip
 801e2e0:	00db      	lsls	r3, r3, #3
 801e2e2:	931c      	str	r3, [sp, #112]	@ 0x70
 801e2e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e2e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e2e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2ea:	9318      	str	r3, [sp, #96]	@ 0x60
 801e2ec:	9319      	str	r3, [sp, #100]	@ 0x64
 801e2ee:	9316      	str	r3, [sp, #88]	@ 0x58
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	9315      	str	r3, [sp, #84]	@ 0x54
 801e2f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e2f6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e2f8:	681a      	ldr	r2, [r3, #0]
 801e2fa:	685b      	ldr	r3, [r3, #4]
 801e2fc:	9205      	str	r2, [sp, #20]
 801e2fe:	9306      	str	r3, [sp, #24]
 801e300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e302:	468c      	mov	ip, r1
 801e304:	681a      	ldr	r2, [r3, #0]
 801e306:	685b      	ldr	r3, [r3, #4]
 801e308:	9207      	str	r2, [sp, #28]
 801e30a:	9308      	str	r3, [sp, #32]
 801e30c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e30e:	681a      	ldr	r2, [r3, #0]
 801e310:	685b      	ldr	r3, [r3, #4]
 801e312:	9209      	str	r2, [sp, #36]	@ 0x24
 801e314:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e316:	930a      	str	r3, [sp, #40]	@ 0x28
 801e318:	0013      	movs	r3, r2
 801e31a:	4463      	add	r3, ip
 801e31c:	4698      	mov	r8, r3
 801e31e:	0013      	movs	r3, r2
 801e320:	4442      	add	r2, r8
 801e322:	4691      	mov	r9, r2
 801e324:	001a      	movs	r2, r3
 801e326:	444a      	add	r2, r9
 801e328:	4692      	mov	sl, r2
 801e32a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e32c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e32e:	4293      	cmp	r3, r2
 801e330:	d800      	bhi.n	801e334 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e332:	e0d9      	b.n	801e4e8 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e334:	4694      	mov	ip, r2
 801e336:	4644      	mov	r4, r8
 801e338:	4655      	mov	r5, sl
 801e33a:	4688      	mov	r8, r1
 801e33c:	9b07      	ldr	r3, [sp, #28]
 801e33e:	17db      	asrs	r3, r3, #31
 801e340:	930c      	str	r3, [sp, #48]	@ 0x30
 801e342:	9b08      	ldr	r3, [sp, #32]
 801e344:	17db      	asrs	r3, r3, #31
 801e346:	930d      	str	r3, [sp, #52]	@ 0x34
 801e348:	9b05      	ldr	r3, [sp, #20]
 801e34a:	17db      	asrs	r3, r3, #31
 801e34c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e34e:	9b06      	ldr	r3, [sp, #24]
 801e350:	17db      	asrs	r3, r3, #31
 801e352:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e356:	17db      	asrs	r3, r3, #31
 801e358:	9310      	str	r3, [sp, #64]	@ 0x40
 801e35a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e35c:	17db      	asrs	r3, r3, #31
 801e35e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e360:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e362:	4463      	add	r3, ip
 801e364:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e366:	4643      	mov	r3, r8
 801e368:	4641      	mov	r1, r8
 801e36a:	681a      	ldr	r2, [r3, #0]
 801e36c:	464b      	mov	r3, r9
 801e36e:	684f      	ldr	r7, [r1, #4]
 801e370:	4649      	mov	r1, r9
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	18d6      	adds	r6, r2, r3
 801e376:	1ad3      	subs	r3, r2, r3
 801e378:	9301      	str	r3, [sp, #4]
 801e37a:	684b      	ldr	r3, [r1, #4]
 801e37c:	1af9      	subs	r1, r7, r3
 801e37e:	9102      	str	r1, [sp, #8]
 801e380:	6829      	ldr	r1, [r5, #0]
 801e382:	18f8      	adds	r0, r7, r3
 801e384:	468c      	mov	ip, r1
 801e386:	6827      	ldr	r7, [r4, #0]
 801e388:	4467      	add	r7, ip
 801e38a:	003a      	movs	r2, r7
 801e38c:	19f3      	adds	r3, r6, r7
 801e38e:	4647      	mov	r7, r8
 801e390:	109b      	asrs	r3, r3, #2
 801e392:	603b      	str	r3, [r7, #0]
 801e394:	6869      	ldr	r1, [r5, #4]
 801e396:	6867      	ldr	r7, [r4, #4]
 801e398:	468c      	mov	ip, r1
 801e39a:	4467      	add	r7, ip
 801e39c:	003b      	movs	r3, r7
 801e39e:	19c1      	adds	r1, r0, r7
 801e3a0:	4647      	mov	r7, r8
 801e3a2:	1ab6      	subs	r6, r6, r2
 801e3a4:	1089      	asrs	r1, r1, #2
 801e3a6:	6079      	str	r1, [r7, #4]
 801e3a8:	17f2      	asrs	r2, r6, #31
 801e3aa:	9900      	ldr	r1, [sp, #0]
 801e3ac:	4692      	mov	sl, r2
 801e3ae:	468c      	mov	ip, r1
 801e3b0:	6867      	ldr	r7, [r4, #4]
 801e3b2:	6869      	ldr	r1, [r5, #4]
 801e3b4:	44e0      	add	r8, ip
 801e3b6:	1a7f      	subs	r7, r7, r1
 801e3b8:	9703      	str	r7, [sp, #12]
 801e3ba:	6821      	ldr	r1, [r4, #0]
 801e3bc:	682f      	ldr	r7, [r5, #0]
 801e3be:	1bc9      	subs	r1, r1, r7
 801e3c0:	1ac7      	subs	r7, r0, r3
 801e3c2:	17fa      	asrs	r2, r7, #31
 801e3c4:	4693      	mov	fp, r2
 801e3c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3c8:	9a07      	ldr	r2, [sp, #28]
 801e3ca:	9104      	str	r1, [sp, #16]
 801e3cc:	0030      	movs	r0, r6
 801e3ce:	4651      	mov	r1, sl
 801e3d0:	f7e2 f8f6 	bl	80005c0 <__aeabi_lmul>
 801e3d4:	9a08      	ldr	r2, [sp, #32]
 801e3d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3d8:	9112      	str	r1, [sp, #72]	@ 0x48
 801e3da:	0038      	movs	r0, r7
 801e3dc:	4659      	mov	r1, fp
 801e3de:	f7e2 f8ef 	bl	80005c0 <__aeabi_lmul>
 801e3e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e3e4:	9a07      	ldr	r2, [sp, #28]
 801e3e6:	1a41      	subs	r1, r0, r1
 801e3e8:	1049      	asrs	r1, r1, #1
 801e3ea:	6021      	str	r1, [r4, #0]
 801e3ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3ee:	0038      	movs	r0, r7
 801e3f0:	4659      	mov	r1, fp
 801e3f2:	f7e2 f8e5 	bl	80005c0 <__aeabi_lmul>
 801e3f6:	9a08      	ldr	r2, [sp, #32]
 801e3f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3fa:	000f      	movs	r7, r1
 801e3fc:	0030      	movs	r0, r6
 801e3fe:	4651      	mov	r1, sl
 801e400:	f7e2 f8de 	bl	80005c0 <__aeabi_lmul>
 801e404:	9b00      	ldr	r3, [sp, #0]
 801e406:	187f      	adds	r7, r7, r1
 801e408:	469c      	mov	ip, r3
 801e40a:	107f      	asrs	r7, r7, #1
 801e40c:	6067      	str	r7, [r4, #4]
 801e40e:	9a01      	ldr	r2, [sp, #4]
 801e410:	9f03      	ldr	r7, [sp, #12]
 801e412:	9802      	ldr	r0, [sp, #8]
 801e414:	1bd7      	subs	r7, r2, r7
 801e416:	17fe      	asrs	r6, r7, #31
 801e418:	0031      	movs	r1, r6
 801e41a:	9e04      	ldr	r6, [sp, #16]
 801e41c:	4682      	mov	sl, r0
 801e41e:	4464      	add	r4, ip
 801e420:	46b4      	mov	ip, r6
 801e422:	44e2      	add	sl, ip
 801e424:	4652      	mov	r2, sl
 801e426:	17d2      	asrs	r2, r2, #31
 801e428:	4693      	mov	fp, r2
 801e42a:	0038      	movs	r0, r7
 801e42c:	9a05      	ldr	r2, [sp, #20]
 801e42e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e430:	9112      	str	r1, [sp, #72]	@ 0x48
 801e432:	f7e2 f8c5 	bl	80005c0 <__aeabi_lmul>
 801e436:	9a06      	ldr	r2, [sp, #24]
 801e438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e43a:	000e      	movs	r6, r1
 801e43c:	4650      	mov	r0, sl
 801e43e:	4659      	mov	r1, fp
 801e440:	f7e2 f8be 	bl	80005c0 <__aeabi_lmul>
 801e444:	4648      	mov	r0, r9
 801e446:	1a76      	subs	r6, r6, r1
 801e448:	1076      	asrs	r6, r6, #1
 801e44a:	6006      	str	r6, [r0, #0]
 801e44c:	9a05      	ldr	r2, [sp, #20]
 801e44e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e450:	4650      	mov	r0, sl
 801e452:	4659      	mov	r1, fp
 801e454:	f7e2 f8b4 	bl	80005c0 <__aeabi_lmul>
 801e458:	9a06      	ldr	r2, [sp, #24]
 801e45a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e45c:	000e      	movs	r6, r1
 801e45e:	0038      	movs	r0, r7
 801e460:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e462:	f7e2 f8ad 	bl	80005c0 <__aeabi_lmul>
 801e466:	9a00      	ldr	r2, [sp, #0]
 801e468:	9f03      	ldr	r7, [sp, #12]
 801e46a:	4694      	mov	ip, r2
 801e46c:	1876      	adds	r6, r6, r1
 801e46e:	4649      	mov	r1, r9
 801e470:	44e1      	add	r9, ip
 801e472:	46bc      	mov	ip, r7
 801e474:	9b01      	ldr	r3, [sp, #4]
 801e476:	1076      	asrs	r6, r6, #1
 801e478:	4463      	add	r3, ip
 801e47a:	17df      	asrs	r7, r3, #31
 801e47c:	604e      	str	r6, [r1, #4]
 801e47e:	46ba      	mov	sl, r7
 801e480:	001e      	movs	r6, r3
 801e482:	9802      	ldr	r0, [sp, #8]
 801e484:	9b04      	ldr	r3, [sp, #16]
 801e486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e488:	1ac7      	subs	r7, r0, r3
 801e48a:	17fb      	asrs	r3, r7, #31
 801e48c:	469b      	mov	fp, r3
 801e48e:	0030      	movs	r0, r6
 801e490:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e492:	4651      	mov	r1, sl
 801e494:	f7e2 f894 	bl	80005c0 <__aeabi_lmul>
 801e498:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e49a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e49c:	9101      	str	r1, [sp, #4]
 801e49e:	0038      	movs	r0, r7
 801e4a0:	4659      	mov	r1, fp
 801e4a2:	f7e2 f88d 	bl	80005c0 <__aeabi_lmul>
 801e4a6:	9801      	ldr	r0, [sp, #4]
 801e4a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e4aa:	1a41      	subs	r1, r0, r1
 801e4ac:	1049      	asrs	r1, r1, #1
 801e4ae:	6029      	str	r1, [r5, #0]
 801e4b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e4b2:	0038      	movs	r0, r7
 801e4b4:	4659      	mov	r1, fp
 801e4b6:	f7e2 f883 	bl	80005c0 <__aeabi_lmul>
 801e4ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e4bc:	000f      	movs	r7, r1
 801e4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4c0:	0030      	movs	r0, r6
 801e4c2:	4651      	mov	r1, sl
 801e4c4:	f7e2 f87c 	bl	80005c0 <__aeabi_lmul>
 801e4c8:	187f      	adds	r7, r7, r1
 801e4ca:	107f      	asrs	r7, r7, #1
 801e4cc:	606f      	str	r7, [r5, #4]
 801e4ce:	9a00      	ldr	r2, [sp, #0]
 801e4d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e4d2:	4694      	mov	ip, r2
 801e4d4:	4465      	add	r5, ip
 801e4d6:	468c      	mov	ip, r1
 801e4d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e4da:	0013      	movs	r3, r2
 801e4dc:	4462      	add	r2, ip
 801e4de:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e4e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e4e2:	429a      	cmp	r2, r3
 801e4e4:	d900      	bls.n	801e4e8 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e4e6:	e73e      	b.n	801e366 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e4e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e4ec:	468c      	mov	ip, r1
 801e4ee:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e4f0:	4462      	add	r2, ip
 801e4f2:	468c      	mov	ip, r1
 801e4f4:	9216      	str	r2, [sp, #88]	@ 0x58
 801e4f6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e4f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e4fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e4fc:	4462      	add	r2, ip
 801e4fe:	468c      	mov	ip, r1
 801e500:	9219      	str	r2, [sp, #100]	@ 0x64
 801e502:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e504:	3301      	adds	r3, #1
 801e506:	4462      	add	r2, ip
 801e508:	9218      	str	r2, [sp, #96]	@ 0x60
 801e50a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e50c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e50e:	3208      	adds	r2, #8
 801e510:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e512:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e514:	4293      	cmp	r3, r2
 801e516:	d800      	bhi.n	801e51a <arm_radix4_butterfly_inverse_q31+0x49e>
 801e518:	e6ec      	b.n	801e2f4 <arm_radix4_butterfly_inverse_q31+0x278>
 801e51a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e51c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e51e:	009b      	lsls	r3, r3, #2
 801e520:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e522:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e524:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e526:	089b      	lsrs	r3, r3, #2
 801e528:	9320      	str	r3, [sp, #128]	@ 0x80
 801e52a:	2b04      	cmp	r3, #4
 801e52c:	d900      	bls.n	801e530 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e52e:	e6c5      	b.n	801e2bc <arm_radix4_butterfly_inverse_q31+0x240>
 801e530:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e532:	469a      	mov	sl, r3
 801e534:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e536:	681a      	ldr	r2, [r3, #0]
 801e538:	6918      	ldr	r0, [r3, #16]
 801e53a:	4691      	mov	r9, r2
 801e53c:	464c      	mov	r4, r9
 801e53e:	4680      	mov	r8, r0
 801e540:	69de      	ldr	r6, [r3, #28]
 801e542:	689d      	ldr	r5, [r3, #8]
 801e544:	46b4      	mov	ip, r6
 801e546:	6998      	ldr	r0, [r3, #24]
 801e548:	1964      	adds	r4, r4, r5
 801e54a:	6859      	ldr	r1, [r3, #4]
 801e54c:	68da      	ldr	r2, [r3, #12]
 801e54e:	4444      	add	r4, r8
 801e550:	695f      	ldr	r7, [r3, #20]
 801e552:	1824      	adds	r4, r4, r0
 801e554:	601c      	str	r4, [r3, #0]
 801e556:	188c      	adds	r4, r1, r2
 801e558:	19e4      	adds	r4, r4, r7
 801e55a:	4464      	add	r4, ip
 801e55c:	605c      	str	r4, [r3, #4]
 801e55e:	464c      	mov	r4, r9
 801e560:	1b64      	subs	r4, r4, r5
 801e562:	4444      	add	r4, r8
 801e564:	1a24      	subs	r4, r4, r0
 801e566:	609c      	str	r4, [r3, #8]
 801e568:	1a8c      	subs	r4, r1, r2
 801e56a:	19e4      	adds	r4, r4, r7
 801e56c:	1ba4      	subs	r4, r4, r6
 801e56e:	60dc      	str	r4, [r3, #12]
 801e570:	464c      	mov	r4, r9
 801e572:	4646      	mov	r6, r8
 801e574:	1aa4      	subs	r4, r4, r2
 801e576:	1ba4      	subs	r4, r4, r6
 801e578:	4464      	add	r4, ip
 801e57a:	611c      	str	r4, [r3, #16]
 801e57c:	194c      	adds	r4, r1, r5
 801e57e:	1be4      	subs	r4, r4, r7
 801e580:	1a24      	subs	r4, r4, r0
 801e582:	615c      	str	r4, [r3, #20]
 801e584:	4644      	mov	r4, r8
 801e586:	4666      	mov	r6, ip
 801e588:	444a      	add	r2, r9
 801e58a:	1b12      	subs	r2, r2, r4
 801e58c:	1b92      	subs	r2, r2, r6
 801e58e:	619a      	str	r2, [r3, #24]
 801e590:	1b4a      	subs	r2, r1, r5
 801e592:	1bd1      	subs	r1, r2, r7
 801e594:	2201      	movs	r2, #1
 801e596:	4252      	negs	r2, r2
 801e598:	4694      	mov	ip, r2
 801e59a:	44e2      	add	sl, ip
 801e59c:	4652      	mov	r2, sl
 801e59e:	1809      	adds	r1, r1, r0
 801e5a0:	61d9      	str	r1, [r3, #28]
 801e5a2:	3320      	adds	r3, #32
 801e5a4:	2a00      	cmp	r2, #0
 801e5a6:	d1c6      	bne.n	801e536 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e5a8:	b027      	add	sp, #156	@ 0x9c
 801e5aa:	bc3c      	pop	{r2, r3, r4, r5}
 801e5ac:	4690      	mov	r8, r2
 801e5ae:	4699      	mov	r9, r3
 801e5b0:	46a2      	mov	sl, r4
 801e5b2:	46ab      	mov	fp, r5
 801e5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5b6:	469a      	mov	sl, r3
 801e5b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e5ba:	e7bc      	b.n	801e536 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e5bc <arm_cmplx_mag_squared_q31>:
 801e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5be:	464f      	mov	r7, r9
 801e5c0:	4646      	mov	r6, r8
 801e5c2:	0004      	movs	r4, r0
 801e5c4:	b4c0      	push	{r6, r7}
 801e5c6:	0016      	movs	r6, r2
 801e5c8:	000f      	movs	r7, r1
 801e5ca:	2a00      	cmp	r2, #0
 801e5cc:	d018      	beq.n	801e600 <arm_cmplx_mag_squared_q31+0x44>
 801e5ce:	6823      	ldr	r3, [r4, #0]
 801e5d0:	6822      	ldr	r2, [r4, #0]
 801e5d2:	17d9      	asrs	r1, r3, #31
 801e5d4:	6863      	ldr	r3, [r4, #4]
 801e5d6:	0010      	movs	r0, r2
 801e5d8:	4698      	mov	r8, r3
 801e5da:	17db      	asrs	r3, r3, #31
 801e5dc:	4699      	mov	r9, r3
 801e5de:	000b      	movs	r3, r1
 801e5e0:	f7e1 ffee 	bl	80005c0 <__aeabi_lmul>
 801e5e4:	4642      	mov	r2, r8
 801e5e6:	104d      	asrs	r5, r1, #1
 801e5e8:	464b      	mov	r3, r9
 801e5ea:	4640      	mov	r0, r8
 801e5ec:	4649      	mov	r1, r9
 801e5ee:	f7e1 ffe7 	bl	80005c0 <__aeabi_lmul>
 801e5f2:	1049      	asrs	r1, r1, #1
 801e5f4:	1869      	adds	r1, r5, r1
 801e5f6:	3e01      	subs	r6, #1
 801e5f8:	c702      	stmia	r7!, {r1}
 801e5fa:	3408      	adds	r4, #8
 801e5fc:	2e00      	cmp	r6, #0
 801e5fe:	d1e6      	bne.n	801e5ce <arm_cmplx_mag_squared_q31+0x12>
 801e600:	bc0c      	pop	{r2, r3}
 801e602:	4690      	mov	r8, r2
 801e604:	4699      	mov	r9, r3
 801e606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e608 <arm_mult_q31>:
 801e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e60a:	4646      	mov	r6, r8
 801e60c:	464f      	mov	r7, r9
 801e60e:	4690      	mov	r8, r2
 801e610:	b4c0      	push	{r6, r7}
 801e612:	001d      	movs	r5, r3
 801e614:	0006      	movs	r6, r0
 801e616:	000f      	movs	r7, r1
 801e618:	2400      	movs	r4, #0
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d020      	beq.n	801e660 <arm_mult_q31+0x58>
 801e61e:	4b12      	ldr	r3, [pc, #72]	@ (801e668 <arm_mult_q31+0x60>)
 801e620:	4699      	mov	r9, r3
 801e622:	e007      	b.n	801e634 <arm_mult_q31+0x2c>
 801e624:	464b      	mov	r3, r9
 801e626:	4059      	eors	r1, r3
 801e628:	4643      	mov	r3, r8
 801e62a:	3d01      	subs	r5, #1
 801e62c:	5119      	str	r1, [r3, r4]
 801e62e:	3404      	adds	r4, #4
 801e630:	2d00      	cmp	r5, #0
 801e632:	d015      	beq.n	801e660 <arm_mult_q31+0x58>
 801e634:	5933      	ldr	r3, [r6, r4]
 801e636:	593a      	ldr	r2, [r7, r4]
 801e638:	17d9      	asrs	r1, r3, #31
 801e63a:	593b      	ldr	r3, [r7, r4]
 801e63c:	5930      	ldr	r0, [r6, r4]
 801e63e:	17db      	asrs	r3, r3, #31
 801e640:	f7e1 ffbe 	bl	80005c0 <__aeabi_lmul>
 801e644:	004b      	lsls	r3, r1, #1
 801e646:	0fc0      	lsrs	r0, r0, #31
 801e648:	4318      	orrs	r0, r3
 801e64a:	17c9      	asrs	r1, r1, #31
 801e64c:	17c3      	asrs	r3, r0, #31
 801e64e:	428b      	cmp	r3, r1
 801e650:	d1e8      	bne.n	801e624 <arm_mult_q31+0x1c>
 801e652:	0001      	movs	r1, r0
 801e654:	4643      	mov	r3, r8
 801e656:	3d01      	subs	r5, #1
 801e658:	5119      	str	r1, [r3, r4]
 801e65a:	3404      	adds	r4, #4
 801e65c:	2d00      	cmp	r5, #0
 801e65e:	d1e9      	bne.n	801e634 <arm_mult_q31+0x2c>
 801e660:	bc0c      	pop	{r2, r3}
 801e662:	4690      	mov	r8, r2
 801e664:	4699      	mov	r9, r3
 801e666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e668:	7fffffff 	.word	0x7fffffff

0801e66c <arm_add_q31>:
 801e66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e66e:	465f      	mov	r7, fp
 801e670:	4656      	mov	r6, sl
 801e672:	464d      	mov	r5, r9
 801e674:	4644      	mov	r4, r8
 801e676:	b4f0      	push	{r4, r5, r6, r7}
 801e678:	4693      	mov	fp, r2
 801e67a:	b083      	sub	sp, #12
 801e67c:	4681      	mov	r9, r0
 801e67e:	468a      	mov	sl, r1
 801e680:	4698      	mov	r8, r3
 801e682:	2200      	movs	r2, #0
 801e684:	2b00      	cmp	r3, #0
 801e686:	d020      	beq.n	801e6ca <arm_add_q31+0x5e>
 801e688:	4649      	mov	r1, r9
 801e68a:	4653      	mov	r3, sl
 801e68c:	588e      	ldr	r6, [r1, r2]
 801e68e:	589b      	ldr	r3, [r3, r2]
 801e690:	17f7      	asrs	r7, r6, #31
 801e692:	001c      	movs	r4, r3
 801e694:	0030      	movs	r0, r6
 801e696:	0039      	movs	r1, r7
 801e698:	17dd      	asrs	r5, r3, #31
 801e69a:	46b4      	mov	ip, r6
 801e69c:	1900      	adds	r0, r0, r4
 801e69e:	4169      	adcs	r1, r5
 801e6a0:	4463      	add	r3, ip
 801e6a2:	9000      	str	r0, [sp, #0]
 801e6a4:	9101      	str	r1, [sp, #4]
 801e6a6:	17d9      	asrs	r1, r3, #31
 801e6a8:	468c      	mov	ip, r1
 801e6aa:	9901      	ldr	r1, [sp, #4]
 801e6ac:	458c      	cmp	ip, r1
 801e6ae:	d002      	beq.n	801e6b6 <arm_add_q31+0x4a>
 801e6b0:	17cb      	asrs	r3, r1, #31
 801e6b2:	4909      	ldr	r1, [pc, #36]	@ (801e6d8 <arm_add_q31+0x6c>)
 801e6b4:	404b      	eors	r3, r1
 801e6b6:	4659      	mov	r1, fp
 801e6b8:	508b      	str	r3, [r1, r2]
 801e6ba:	2301      	movs	r3, #1
 801e6bc:	425b      	negs	r3, r3
 801e6be:	469c      	mov	ip, r3
 801e6c0:	44e0      	add	r8, ip
 801e6c2:	4643      	mov	r3, r8
 801e6c4:	3204      	adds	r2, #4
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d1de      	bne.n	801e688 <arm_add_q31+0x1c>
 801e6ca:	b003      	add	sp, #12
 801e6cc:	bc3c      	pop	{r2, r3, r4, r5}
 801e6ce:	4690      	mov	r8, r2
 801e6d0:	4699      	mov	r9, r3
 801e6d2:	46a2      	mov	sl, r4
 801e6d4:	46ab      	mov	fp, r5
 801e6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6d8:	7fffffff 	.word	0x7fffffff

0801e6dc <atof>:
 801e6dc:	b510      	push	{r4, lr}
 801e6de:	2100      	movs	r1, #0
 801e6e0:	f000 fe12 	bl	801f308 <strtod>
 801e6e4:	bd10      	pop	{r4, pc}

0801e6e6 <atoi>:
 801e6e6:	b510      	push	{r4, lr}
 801e6e8:	220a      	movs	r2, #10
 801e6ea:	2100      	movs	r1, #0
 801e6ec:	f000 fea4 	bl	801f438 <strtol>
 801e6f0:	bd10      	pop	{r4, pc}
	...

0801e6f4 <sulp>:
 801e6f4:	b570      	push	{r4, r5, r6, lr}
 801e6f6:	0016      	movs	r6, r2
 801e6f8:	000d      	movs	r5, r1
 801e6fa:	f003 fcf3 	bl	80220e4 <__ulp>
 801e6fe:	2e00      	cmp	r6, #0
 801e700:	d00d      	beq.n	801e71e <sulp+0x2a>
 801e702:	236b      	movs	r3, #107	@ 0x6b
 801e704:	006a      	lsls	r2, r5, #1
 801e706:	0d52      	lsrs	r2, r2, #21
 801e708:	1a9b      	subs	r3, r3, r2
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	dd07      	ble.n	801e71e <sulp+0x2a>
 801e70e:	2400      	movs	r4, #0
 801e710:	4a03      	ldr	r2, [pc, #12]	@ (801e720 <sulp+0x2c>)
 801e712:	051b      	lsls	r3, r3, #20
 801e714:	189d      	adds	r5, r3, r2
 801e716:	002b      	movs	r3, r5
 801e718:	0022      	movs	r2, r4
 801e71a:	f7e3 ff8f 	bl	800263c <__aeabi_dmul>
 801e71e:	bd70      	pop	{r4, r5, r6, pc}
 801e720:	3ff00000 	.word	0x3ff00000

0801e724 <_strtod_l>:
 801e724:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e726:	b0a3      	sub	sp, #140	@ 0x8c
 801e728:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e72a:	2200      	movs	r2, #0
 801e72c:	2600      	movs	r6, #0
 801e72e:	2700      	movs	r7, #0
 801e730:	9005      	str	r0, [sp, #20]
 801e732:	9109      	str	r1, [sp, #36]	@ 0x24
 801e734:	921e      	str	r2, [sp, #120]	@ 0x78
 801e736:	911d      	str	r1, [sp, #116]	@ 0x74
 801e738:	780a      	ldrb	r2, [r1, #0]
 801e73a:	2a2b      	cmp	r2, #43	@ 0x2b
 801e73c:	d053      	beq.n	801e7e6 <_strtod_l+0xc2>
 801e73e:	d83f      	bhi.n	801e7c0 <_strtod_l+0x9c>
 801e740:	2a0d      	cmp	r2, #13
 801e742:	d839      	bhi.n	801e7b8 <_strtod_l+0x94>
 801e744:	2a08      	cmp	r2, #8
 801e746:	d839      	bhi.n	801e7bc <_strtod_l+0x98>
 801e748:	2a00      	cmp	r2, #0
 801e74a:	d042      	beq.n	801e7d2 <_strtod_l+0xae>
 801e74c:	2200      	movs	r2, #0
 801e74e:	9212      	str	r2, [sp, #72]	@ 0x48
 801e750:	2100      	movs	r1, #0
 801e752:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e754:	910c      	str	r1, [sp, #48]	@ 0x30
 801e756:	782a      	ldrb	r2, [r5, #0]
 801e758:	2a30      	cmp	r2, #48	@ 0x30
 801e75a:	d000      	beq.n	801e75e <_strtod_l+0x3a>
 801e75c:	e083      	b.n	801e866 <_strtod_l+0x142>
 801e75e:	786a      	ldrb	r2, [r5, #1]
 801e760:	3120      	adds	r1, #32
 801e762:	438a      	bics	r2, r1
 801e764:	2a58      	cmp	r2, #88	@ 0x58
 801e766:	d000      	beq.n	801e76a <_strtod_l+0x46>
 801e768:	e073      	b.n	801e852 <_strtod_l+0x12e>
 801e76a:	9302      	str	r3, [sp, #8]
 801e76c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e76e:	4a95      	ldr	r2, [pc, #596]	@ (801e9c4 <_strtod_l+0x2a0>)
 801e770:	9301      	str	r3, [sp, #4]
 801e772:	ab1e      	add	r3, sp, #120	@ 0x78
 801e774:	9300      	str	r3, [sp, #0]
 801e776:	9805      	ldr	r0, [sp, #20]
 801e778:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e77a:	a91d      	add	r1, sp, #116	@ 0x74
 801e77c:	f002 fd62 	bl	8021244 <__gethex>
 801e780:	230f      	movs	r3, #15
 801e782:	0002      	movs	r2, r0
 801e784:	401a      	ands	r2, r3
 801e786:	0004      	movs	r4, r0
 801e788:	9206      	str	r2, [sp, #24]
 801e78a:	4218      	tst	r0, r3
 801e78c:	d005      	beq.n	801e79a <_strtod_l+0x76>
 801e78e:	2a06      	cmp	r2, #6
 801e790:	d12b      	bne.n	801e7ea <_strtod_l+0xc6>
 801e792:	2300      	movs	r3, #0
 801e794:	3501      	adds	r5, #1
 801e796:	951d      	str	r5, [sp, #116]	@ 0x74
 801e798:	9312      	str	r3, [sp, #72]	@ 0x48
 801e79a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d002      	beq.n	801e7a6 <_strtod_l+0x82>
 801e7a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e7a4:	6013      	str	r3, [r2, #0]
 801e7a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d019      	beq.n	801e7e0 <_strtod_l+0xbc>
 801e7ac:	2380      	movs	r3, #128	@ 0x80
 801e7ae:	0030      	movs	r0, r6
 801e7b0:	061b      	lsls	r3, r3, #24
 801e7b2:	18f9      	adds	r1, r7, r3
 801e7b4:	b023      	add	sp, #140	@ 0x8c
 801e7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7b8:	2a20      	cmp	r2, #32
 801e7ba:	d1c7      	bne.n	801e74c <_strtod_l+0x28>
 801e7bc:	3101      	adds	r1, #1
 801e7be:	e7ba      	b.n	801e736 <_strtod_l+0x12>
 801e7c0:	2a2d      	cmp	r2, #45	@ 0x2d
 801e7c2:	d1c3      	bne.n	801e74c <_strtod_l+0x28>
 801e7c4:	3a2c      	subs	r2, #44	@ 0x2c
 801e7c6:	9212      	str	r2, [sp, #72]	@ 0x48
 801e7c8:	1c4a      	adds	r2, r1, #1
 801e7ca:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7cc:	784a      	ldrb	r2, [r1, #1]
 801e7ce:	2a00      	cmp	r2, #0
 801e7d0:	d1be      	bne.n	801e750 <_strtod_l+0x2c>
 801e7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7d4:	931d      	str	r3, [sp, #116]	@ 0x74
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	9312      	str	r3, [sp, #72]	@ 0x48
 801e7da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d1df      	bne.n	801e7a0 <_strtod_l+0x7c>
 801e7e0:	0030      	movs	r0, r6
 801e7e2:	0039      	movs	r1, r7
 801e7e4:	e7e6      	b.n	801e7b4 <_strtod_l+0x90>
 801e7e6:	2200      	movs	r2, #0
 801e7e8:	e7ed      	b.n	801e7c6 <_strtod_l+0xa2>
 801e7ea:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e7ec:	2a00      	cmp	r2, #0
 801e7ee:	d007      	beq.n	801e800 <_strtod_l+0xdc>
 801e7f0:	2135      	movs	r1, #53	@ 0x35
 801e7f2:	a820      	add	r0, sp, #128	@ 0x80
 801e7f4:	f003 fd6c 	bl	80222d0 <__copybits>
 801e7f8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e7fa:	9805      	ldr	r0, [sp, #20]
 801e7fc:	f003 f926 	bl	8021a4c <_Bfree>
 801e800:	9806      	ldr	r0, [sp, #24]
 801e802:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e804:	3801      	subs	r0, #1
 801e806:	2804      	cmp	r0, #4
 801e808:	d806      	bhi.n	801e818 <_strtod_l+0xf4>
 801e80a:	f7e1 fcb7 	bl	800017c <__gnu_thumb1_case_uqi>
 801e80e:	0312      	.short	0x0312
 801e810:	1e1c      	.short	0x1e1c
 801e812:	12          	.byte	0x12
 801e813:	00          	.byte	0x00
 801e814:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e816:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e818:	05e4      	lsls	r4, r4, #23
 801e81a:	d502      	bpl.n	801e822 <_strtod_l+0xfe>
 801e81c:	2380      	movs	r3, #128	@ 0x80
 801e81e:	061b      	lsls	r3, r3, #24
 801e820:	431f      	orrs	r7, r3
 801e822:	4b69      	ldr	r3, [pc, #420]	@ (801e9c8 <_strtod_l+0x2a4>)
 801e824:	423b      	tst	r3, r7
 801e826:	d1b8      	bne.n	801e79a <_strtod_l+0x76>
 801e828:	f001 fd90 	bl	802034c <__errno>
 801e82c:	2322      	movs	r3, #34	@ 0x22
 801e82e:	6003      	str	r3, [r0, #0]
 801e830:	e7b3      	b.n	801e79a <_strtod_l+0x76>
 801e832:	4966      	ldr	r1, [pc, #408]	@ (801e9cc <_strtod_l+0x2a8>)
 801e834:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e836:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e838:	400a      	ands	r2, r1
 801e83a:	4965      	ldr	r1, [pc, #404]	@ (801e9d0 <_strtod_l+0x2ac>)
 801e83c:	185b      	adds	r3, r3, r1
 801e83e:	051b      	lsls	r3, r3, #20
 801e840:	431a      	orrs	r2, r3
 801e842:	0017      	movs	r7, r2
 801e844:	e7e8      	b.n	801e818 <_strtod_l+0xf4>
 801e846:	4f60      	ldr	r7, [pc, #384]	@ (801e9c8 <_strtod_l+0x2a4>)
 801e848:	e7e6      	b.n	801e818 <_strtod_l+0xf4>
 801e84a:	2601      	movs	r6, #1
 801e84c:	4f61      	ldr	r7, [pc, #388]	@ (801e9d4 <_strtod_l+0x2b0>)
 801e84e:	4276      	negs	r6, r6
 801e850:	e7e2      	b.n	801e818 <_strtod_l+0xf4>
 801e852:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e854:	1c5a      	adds	r2, r3, #1
 801e856:	921d      	str	r2, [sp, #116]	@ 0x74
 801e858:	785b      	ldrb	r3, [r3, #1]
 801e85a:	2b30      	cmp	r3, #48	@ 0x30
 801e85c:	d0f9      	beq.n	801e852 <_strtod_l+0x12e>
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d09b      	beq.n	801e79a <_strtod_l+0x76>
 801e862:	2301      	movs	r3, #1
 801e864:	930c      	str	r3, [sp, #48]	@ 0x30
 801e866:	2500      	movs	r5, #0
 801e868:	220a      	movs	r2, #10
 801e86a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e86c:	950d      	str	r5, [sp, #52]	@ 0x34
 801e86e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e870:	9508      	str	r5, [sp, #32]
 801e872:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e874:	7804      	ldrb	r4, [r0, #0]
 801e876:	0023      	movs	r3, r4
 801e878:	3b30      	subs	r3, #48	@ 0x30
 801e87a:	b2d9      	uxtb	r1, r3
 801e87c:	2909      	cmp	r1, #9
 801e87e:	d927      	bls.n	801e8d0 <_strtod_l+0x1ac>
 801e880:	2201      	movs	r2, #1
 801e882:	4955      	ldr	r1, [pc, #340]	@ (801e9d8 <_strtod_l+0x2b4>)
 801e884:	f001 fcd4 	bl	8020230 <strncmp>
 801e888:	2800      	cmp	r0, #0
 801e88a:	d031      	beq.n	801e8f0 <_strtod_l+0x1cc>
 801e88c:	2000      	movs	r0, #0
 801e88e:	0023      	movs	r3, r4
 801e890:	4684      	mov	ip, r0
 801e892:	9a08      	ldr	r2, [sp, #32]
 801e894:	900e      	str	r0, [sp, #56]	@ 0x38
 801e896:	9206      	str	r2, [sp, #24]
 801e898:	2220      	movs	r2, #32
 801e89a:	0019      	movs	r1, r3
 801e89c:	4391      	bics	r1, r2
 801e89e:	000a      	movs	r2, r1
 801e8a0:	2100      	movs	r1, #0
 801e8a2:	9107      	str	r1, [sp, #28]
 801e8a4:	2a45      	cmp	r2, #69	@ 0x45
 801e8a6:	d000      	beq.n	801e8aa <_strtod_l+0x186>
 801e8a8:	e0c0      	b.n	801ea2c <_strtod_l+0x308>
 801e8aa:	9b06      	ldr	r3, [sp, #24]
 801e8ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e8ae:	4303      	orrs	r3, r0
 801e8b0:	4313      	orrs	r3, r2
 801e8b2:	428b      	cmp	r3, r1
 801e8b4:	d08d      	beq.n	801e7d2 <_strtod_l+0xae>
 801e8b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8ba:	3301      	adds	r3, #1
 801e8bc:	931d      	str	r3, [sp, #116]	@ 0x74
 801e8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8c0:	785b      	ldrb	r3, [r3, #1]
 801e8c2:	2b2b      	cmp	r3, #43	@ 0x2b
 801e8c4:	d070      	beq.n	801e9a8 <_strtod_l+0x284>
 801e8c6:	000c      	movs	r4, r1
 801e8c8:	2b2d      	cmp	r3, #45	@ 0x2d
 801e8ca:	d173      	bne.n	801e9b4 <_strtod_l+0x290>
 801e8cc:	2401      	movs	r4, #1
 801e8ce:	e06c      	b.n	801e9aa <_strtod_l+0x286>
 801e8d0:	9908      	ldr	r1, [sp, #32]
 801e8d2:	2908      	cmp	r1, #8
 801e8d4:	dc09      	bgt.n	801e8ea <_strtod_l+0x1c6>
 801e8d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e8d8:	4351      	muls	r1, r2
 801e8da:	185b      	adds	r3, r3, r1
 801e8dc:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8de:	9b08      	ldr	r3, [sp, #32]
 801e8e0:	3001      	adds	r0, #1
 801e8e2:	3301      	adds	r3, #1
 801e8e4:	9308      	str	r3, [sp, #32]
 801e8e6:	901d      	str	r0, [sp, #116]	@ 0x74
 801e8e8:	e7c3      	b.n	801e872 <_strtod_l+0x14e>
 801e8ea:	4355      	muls	r5, r2
 801e8ec:	195d      	adds	r5, r3, r5
 801e8ee:	e7f6      	b.n	801e8de <_strtod_l+0x1ba>
 801e8f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8f2:	1c5a      	adds	r2, r3, #1
 801e8f4:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8f6:	9a08      	ldr	r2, [sp, #32]
 801e8f8:	785b      	ldrb	r3, [r3, #1]
 801e8fa:	2a00      	cmp	r2, #0
 801e8fc:	d03a      	beq.n	801e974 <_strtod_l+0x250>
 801e8fe:	900e      	str	r0, [sp, #56]	@ 0x38
 801e900:	9206      	str	r2, [sp, #24]
 801e902:	001a      	movs	r2, r3
 801e904:	3a30      	subs	r2, #48	@ 0x30
 801e906:	2a09      	cmp	r2, #9
 801e908:	d912      	bls.n	801e930 <_strtod_l+0x20c>
 801e90a:	2201      	movs	r2, #1
 801e90c:	4694      	mov	ip, r2
 801e90e:	e7c3      	b.n	801e898 <_strtod_l+0x174>
 801e910:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e912:	3001      	adds	r0, #1
 801e914:	1c5a      	adds	r2, r3, #1
 801e916:	921d      	str	r2, [sp, #116]	@ 0x74
 801e918:	785b      	ldrb	r3, [r3, #1]
 801e91a:	2b30      	cmp	r3, #48	@ 0x30
 801e91c:	d0f8      	beq.n	801e910 <_strtod_l+0x1ec>
 801e91e:	001a      	movs	r2, r3
 801e920:	3a31      	subs	r2, #49	@ 0x31
 801e922:	2a08      	cmp	r2, #8
 801e924:	d83b      	bhi.n	801e99e <_strtod_l+0x27a>
 801e926:	900e      	str	r0, [sp, #56]	@ 0x38
 801e928:	2000      	movs	r0, #0
 801e92a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e92c:	9006      	str	r0, [sp, #24]
 801e92e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e930:	001a      	movs	r2, r3
 801e932:	1c41      	adds	r1, r0, #1
 801e934:	3a30      	subs	r2, #48	@ 0x30
 801e936:	2b30      	cmp	r3, #48	@ 0x30
 801e938:	d016      	beq.n	801e968 <_strtod_l+0x244>
 801e93a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e93c:	185b      	adds	r3, r3, r1
 801e93e:	930e      	str	r3, [sp, #56]	@ 0x38
 801e940:	9b06      	ldr	r3, [sp, #24]
 801e942:	210a      	movs	r1, #10
 801e944:	469c      	mov	ip, r3
 801e946:	4484      	add	ip, r0
 801e948:	459c      	cmp	ip, r3
 801e94a:	d115      	bne.n	801e978 <_strtod_l+0x254>
 801e94c:	9906      	ldr	r1, [sp, #24]
 801e94e:	9b06      	ldr	r3, [sp, #24]
 801e950:	3101      	adds	r1, #1
 801e952:	1809      	adds	r1, r1, r0
 801e954:	181b      	adds	r3, r3, r0
 801e956:	9106      	str	r1, [sp, #24]
 801e958:	2b08      	cmp	r3, #8
 801e95a:	dc19      	bgt.n	801e990 <_strtod_l+0x26c>
 801e95c:	230a      	movs	r3, #10
 801e95e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e960:	434b      	muls	r3, r1
 801e962:	2100      	movs	r1, #0
 801e964:	18d3      	adds	r3, r2, r3
 801e966:	930d      	str	r3, [sp, #52]	@ 0x34
 801e968:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e96a:	0008      	movs	r0, r1
 801e96c:	1c5a      	adds	r2, r3, #1
 801e96e:	921d      	str	r2, [sp, #116]	@ 0x74
 801e970:	785b      	ldrb	r3, [r3, #1]
 801e972:	e7c6      	b.n	801e902 <_strtod_l+0x1de>
 801e974:	9808      	ldr	r0, [sp, #32]
 801e976:	e7d0      	b.n	801e91a <_strtod_l+0x1f6>
 801e978:	1c5c      	adds	r4, r3, #1
 801e97a:	2b08      	cmp	r3, #8
 801e97c:	dc04      	bgt.n	801e988 <_strtod_l+0x264>
 801e97e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e980:	434b      	muls	r3, r1
 801e982:	930d      	str	r3, [sp, #52]	@ 0x34
 801e984:	0023      	movs	r3, r4
 801e986:	e7df      	b.n	801e948 <_strtod_l+0x224>
 801e988:	2c10      	cmp	r4, #16
 801e98a:	dcfb      	bgt.n	801e984 <_strtod_l+0x260>
 801e98c:	434d      	muls	r5, r1
 801e98e:	e7f9      	b.n	801e984 <_strtod_l+0x260>
 801e990:	2100      	movs	r1, #0
 801e992:	2b0f      	cmp	r3, #15
 801e994:	dce8      	bgt.n	801e968 <_strtod_l+0x244>
 801e996:	230a      	movs	r3, #10
 801e998:	435d      	muls	r5, r3
 801e99a:	1955      	adds	r5, r2, r5
 801e99c:	e7e4      	b.n	801e968 <_strtod_l+0x244>
 801e99e:	2200      	movs	r2, #0
 801e9a0:	920e      	str	r2, [sp, #56]	@ 0x38
 801e9a2:	9206      	str	r2, [sp, #24]
 801e9a4:	3201      	adds	r2, #1
 801e9a6:	e7b1      	b.n	801e90c <_strtod_l+0x1e8>
 801e9a8:	2400      	movs	r4, #0
 801e9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9ac:	3302      	adds	r3, #2
 801e9ae:	931d      	str	r3, [sp, #116]	@ 0x74
 801e9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9b2:	789b      	ldrb	r3, [r3, #2]
 801e9b4:	001a      	movs	r2, r3
 801e9b6:	3a30      	subs	r2, #48	@ 0x30
 801e9b8:	2a09      	cmp	r2, #9
 801e9ba:	d913      	bls.n	801e9e4 <_strtod_l+0x2c0>
 801e9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e9be:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9c0:	2200      	movs	r2, #0
 801e9c2:	e032      	b.n	801ea2a <_strtod_l+0x306>
 801e9c4:	08025bc4 	.word	0x08025bc4
 801e9c8:	7ff00000 	.word	0x7ff00000
 801e9cc:	ffefffff 	.word	0xffefffff
 801e9d0:	00000433 	.word	0x00000433
 801e9d4:	7fffffff 	.word	0x7fffffff
 801e9d8:	08025bac 	.word	0x08025bac
 801e9dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9de:	1c5a      	adds	r2, r3, #1
 801e9e0:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9e2:	785b      	ldrb	r3, [r3, #1]
 801e9e4:	2b30      	cmp	r3, #48	@ 0x30
 801e9e6:	d0f9      	beq.n	801e9dc <_strtod_l+0x2b8>
 801e9e8:	2200      	movs	r2, #0
 801e9ea:	9207      	str	r2, [sp, #28]
 801e9ec:	001a      	movs	r2, r3
 801e9ee:	3a31      	subs	r2, #49	@ 0x31
 801e9f0:	2a08      	cmp	r2, #8
 801e9f2:	d81b      	bhi.n	801ea2c <_strtod_l+0x308>
 801e9f4:	3b30      	subs	r3, #48	@ 0x30
 801e9f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801e9f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9fa:	9307      	str	r3, [sp, #28]
 801e9fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9fe:	1c59      	adds	r1, r3, #1
 801ea00:	911d      	str	r1, [sp, #116]	@ 0x74
 801ea02:	785b      	ldrb	r3, [r3, #1]
 801ea04:	001a      	movs	r2, r3
 801ea06:	3a30      	subs	r2, #48	@ 0x30
 801ea08:	2a09      	cmp	r2, #9
 801ea0a:	d93a      	bls.n	801ea82 <_strtod_l+0x35e>
 801ea0c:	9a07      	ldr	r2, [sp, #28]
 801ea0e:	1a8a      	subs	r2, r1, r2
 801ea10:	49b4      	ldr	r1, [pc, #720]	@ (801ece4 <_strtod_l+0x5c0>)
 801ea12:	9107      	str	r1, [sp, #28]
 801ea14:	2a08      	cmp	r2, #8
 801ea16:	dc04      	bgt.n	801ea22 <_strtod_l+0x2fe>
 801ea18:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ea1a:	9207      	str	r2, [sp, #28]
 801ea1c:	428a      	cmp	r2, r1
 801ea1e:	dd00      	ble.n	801ea22 <_strtod_l+0x2fe>
 801ea20:	9107      	str	r1, [sp, #28]
 801ea22:	2c00      	cmp	r4, #0
 801ea24:	d002      	beq.n	801ea2c <_strtod_l+0x308>
 801ea26:	9a07      	ldr	r2, [sp, #28]
 801ea28:	4252      	negs	r2, r2
 801ea2a:	9207      	str	r2, [sp, #28]
 801ea2c:	9a06      	ldr	r2, [sp, #24]
 801ea2e:	2a00      	cmp	r2, #0
 801ea30:	d14d      	bne.n	801eace <_strtod_l+0x3aa>
 801ea32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea34:	4310      	orrs	r0, r2
 801ea36:	d000      	beq.n	801ea3a <_strtod_l+0x316>
 801ea38:	e6af      	b.n	801e79a <_strtod_l+0x76>
 801ea3a:	4662      	mov	r2, ip
 801ea3c:	2a00      	cmp	r2, #0
 801ea3e:	d000      	beq.n	801ea42 <_strtod_l+0x31e>
 801ea40:	e6c7      	b.n	801e7d2 <_strtod_l+0xae>
 801ea42:	2b69      	cmp	r3, #105	@ 0x69
 801ea44:	d027      	beq.n	801ea96 <_strtod_l+0x372>
 801ea46:	dc23      	bgt.n	801ea90 <_strtod_l+0x36c>
 801ea48:	2b49      	cmp	r3, #73	@ 0x49
 801ea4a:	d024      	beq.n	801ea96 <_strtod_l+0x372>
 801ea4c:	2b4e      	cmp	r3, #78	@ 0x4e
 801ea4e:	d000      	beq.n	801ea52 <_strtod_l+0x32e>
 801ea50:	e6bf      	b.n	801e7d2 <_strtod_l+0xae>
 801ea52:	49a5      	ldr	r1, [pc, #660]	@ (801ece8 <_strtod_l+0x5c4>)
 801ea54:	a81d      	add	r0, sp, #116	@ 0x74
 801ea56:	f002 fe2b 	bl	80216b0 <__match>
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	d100      	bne.n	801ea60 <_strtod_l+0x33c>
 801ea5e:	e6b8      	b.n	801e7d2 <_strtod_l+0xae>
 801ea60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea62:	781b      	ldrb	r3, [r3, #0]
 801ea64:	2b28      	cmp	r3, #40	@ 0x28
 801ea66:	d12c      	bne.n	801eac2 <_strtod_l+0x39e>
 801ea68:	49a0      	ldr	r1, [pc, #640]	@ (801ecec <_strtod_l+0x5c8>)
 801ea6a:	aa20      	add	r2, sp, #128	@ 0x80
 801ea6c:	a81d      	add	r0, sp, #116	@ 0x74
 801ea6e:	f002 fe33 	bl	80216d8 <__hexnan>
 801ea72:	2805      	cmp	r0, #5
 801ea74:	d125      	bne.n	801eac2 <_strtod_l+0x39e>
 801ea76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ea78:	4a9d      	ldr	r2, [pc, #628]	@ (801ecf0 <_strtod_l+0x5cc>)
 801ea7a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ea7c:	431a      	orrs	r2, r3
 801ea7e:	0017      	movs	r7, r2
 801ea80:	e68b      	b.n	801e79a <_strtod_l+0x76>
 801ea82:	220a      	movs	r2, #10
 801ea84:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ea86:	434a      	muls	r2, r1
 801ea88:	18d2      	adds	r2, r2, r3
 801ea8a:	3a30      	subs	r2, #48	@ 0x30
 801ea8c:	9210      	str	r2, [sp, #64]	@ 0x40
 801ea8e:	e7b5      	b.n	801e9fc <_strtod_l+0x2d8>
 801ea90:	2b6e      	cmp	r3, #110	@ 0x6e
 801ea92:	d0de      	beq.n	801ea52 <_strtod_l+0x32e>
 801ea94:	e69d      	b.n	801e7d2 <_strtod_l+0xae>
 801ea96:	4997      	ldr	r1, [pc, #604]	@ (801ecf4 <_strtod_l+0x5d0>)
 801ea98:	a81d      	add	r0, sp, #116	@ 0x74
 801ea9a:	f002 fe09 	bl	80216b0 <__match>
 801ea9e:	2800      	cmp	r0, #0
 801eaa0:	d100      	bne.n	801eaa4 <_strtod_l+0x380>
 801eaa2:	e696      	b.n	801e7d2 <_strtod_l+0xae>
 801eaa4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eaa6:	4994      	ldr	r1, [pc, #592]	@ (801ecf8 <_strtod_l+0x5d4>)
 801eaa8:	3b01      	subs	r3, #1
 801eaaa:	a81d      	add	r0, sp, #116	@ 0x74
 801eaac:	931d      	str	r3, [sp, #116]	@ 0x74
 801eaae:	f002 fdff 	bl	80216b0 <__match>
 801eab2:	2800      	cmp	r0, #0
 801eab4:	d102      	bne.n	801eabc <_strtod_l+0x398>
 801eab6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eab8:	3301      	adds	r3, #1
 801eaba:	931d      	str	r3, [sp, #116]	@ 0x74
 801eabc:	2600      	movs	r6, #0
 801eabe:	4f8c      	ldr	r7, [pc, #560]	@ (801ecf0 <_strtod_l+0x5cc>)
 801eac0:	e66b      	b.n	801e79a <_strtod_l+0x76>
 801eac2:	488e      	ldr	r0, [pc, #568]	@ (801ecfc <_strtod_l+0x5d8>)
 801eac4:	f001 fc84 	bl	80203d0 <nan>
 801eac8:	0006      	movs	r6, r0
 801eaca:	000f      	movs	r7, r1
 801eacc:	e665      	b.n	801e79a <_strtod_l+0x76>
 801eace:	9b07      	ldr	r3, [sp, #28]
 801ead0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ead2:	1a9b      	subs	r3, r3, r2
 801ead4:	930c      	str	r3, [sp, #48]	@ 0x30
 801ead6:	9b08      	ldr	r3, [sp, #32]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d101      	bne.n	801eae0 <_strtod_l+0x3bc>
 801eadc:	9b06      	ldr	r3, [sp, #24]
 801eade:	9308      	str	r3, [sp, #32]
 801eae0:	9c06      	ldr	r4, [sp, #24]
 801eae2:	2c10      	cmp	r4, #16
 801eae4:	dd00      	ble.n	801eae8 <_strtod_l+0x3c4>
 801eae6:	2410      	movs	r4, #16
 801eae8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801eaea:	f7e4 fc97 	bl	800341c <__aeabi_ui2d>
 801eaee:	9b06      	ldr	r3, [sp, #24]
 801eaf0:	0006      	movs	r6, r0
 801eaf2:	000f      	movs	r7, r1
 801eaf4:	2b09      	cmp	r3, #9
 801eaf6:	dc13      	bgt.n	801eb20 <_strtod_l+0x3fc>
 801eaf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d100      	bne.n	801eb00 <_strtod_l+0x3dc>
 801eafe:	e64c      	b.n	801e79a <_strtod_l+0x76>
 801eb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	dc00      	bgt.n	801eb08 <_strtod_l+0x3e4>
 801eb06:	e07e      	b.n	801ec06 <_strtod_l+0x4e2>
 801eb08:	2b16      	cmp	r3, #22
 801eb0a:	dc63      	bgt.n	801ebd4 <_strtod_l+0x4b0>
 801eb0c:	497c      	ldr	r1, [pc, #496]	@ (801ed00 <_strtod_l+0x5dc>)
 801eb0e:	00db      	lsls	r3, r3, #3
 801eb10:	18c9      	adds	r1, r1, r3
 801eb12:	0032      	movs	r2, r6
 801eb14:	6808      	ldr	r0, [r1, #0]
 801eb16:	6849      	ldr	r1, [r1, #4]
 801eb18:	003b      	movs	r3, r7
 801eb1a:	f7e3 fd8f 	bl	800263c <__aeabi_dmul>
 801eb1e:	e7d3      	b.n	801eac8 <_strtod_l+0x3a4>
 801eb20:	0022      	movs	r2, r4
 801eb22:	4b77      	ldr	r3, [pc, #476]	@ (801ed00 <_strtod_l+0x5dc>)
 801eb24:	3a09      	subs	r2, #9
 801eb26:	00d2      	lsls	r2, r2, #3
 801eb28:	189b      	adds	r3, r3, r2
 801eb2a:	681a      	ldr	r2, [r3, #0]
 801eb2c:	685b      	ldr	r3, [r3, #4]
 801eb2e:	f7e3 fd85 	bl	800263c <__aeabi_dmul>
 801eb32:	0006      	movs	r6, r0
 801eb34:	0028      	movs	r0, r5
 801eb36:	000f      	movs	r7, r1
 801eb38:	f7e4 fc70 	bl	800341c <__aeabi_ui2d>
 801eb3c:	000b      	movs	r3, r1
 801eb3e:	0002      	movs	r2, r0
 801eb40:	0039      	movs	r1, r7
 801eb42:	0030      	movs	r0, r6
 801eb44:	f7e2 fdd2 	bl	80016ec <__aeabi_dadd>
 801eb48:	9b06      	ldr	r3, [sp, #24]
 801eb4a:	0006      	movs	r6, r0
 801eb4c:	000f      	movs	r7, r1
 801eb4e:	2b0f      	cmp	r3, #15
 801eb50:	ddd2      	ble.n	801eaf8 <_strtod_l+0x3d4>
 801eb52:	9b06      	ldr	r3, [sp, #24]
 801eb54:	1b1c      	subs	r4, r3, r4
 801eb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb58:	18e4      	adds	r4, r4, r3
 801eb5a:	2c00      	cmp	r4, #0
 801eb5c:	dc00      	bgt.n	801eb60 <_strtod_l+0x43c>
 801eb5e:	e09b      	b.n	801ec98 <_strtod_l+0x574>
 801eb60:	220f      	movs	r2, #15
 801eb62:	0023      	movs	r3, r4
 801eb64:	4013      	ands	r3, r2
 801eb66:	4214      	tst	r4, r2
 801eb68:	d00a      	beq.n	801eb80 <_strtod_l+0x45c>
 801eb6a:	4965      	ldr	r1, [pc, #404]	@ (801ed00 <_strtod_l+0x5dc>)
 801eb6c:	00db      	lsls	r3, r3, #3
 801eb6e:	18c9      	adds	r1, r1, r3
 801eb70:	0032      	movs	r2, r6
 801eb72:	6808      	ldr	r0, [r1, #0]
 801eb74:	6849      	ldr	r1, [r1, #4]
 801eb76:	003b      	movs	r3, r7
 801eb78:	f7e3 fd60 	bl	800263c <__aeabi_dmul>
 801eb7c:	0006      	movs	r6, r0
 801eb7e:	000f      	movs	r7, r1
 801eb80:	230f      	movs	r3, #15
 801eb82:	439c      	bics	r4, r3
 801eb84:	d073      	beq.n	801ec6e <_strtod_l+0x54a>
 801eb86:	3326      	adds	r3, #38	@ 0x26
 801eb88:	33ff      	adds	r3, #255	@ 0xff
 801eb8a:	429c      	cmp	r4, r3
 801eb8c:	dd4b      	ble.n	801ec26 <_strtod_l+0x502>
 801eb8e:	2300      	movs	r3, #0
 801eb90:	9306      	str	r3, [sp, #24]
 801eb92:	9307      	str	r3, [sp, #28]
 801eb94:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb96:	9308      	str	r3, [sp, #32]
 801eb98:	2322      	movs	r3, #34	@ 0x22
 801eb9a:	2600      	movs	r6, #0
 801eb9c:	9a05      	ldr	r2, [sp, #20]
 801eb9e:	4f54      	ldr	r7, [pc, #336]	@ (801ecf0 <_strtod_l+0x5cc>)
 801eba0:	6013      	str	r3, [r2, #0]
 801eba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eba4:	42b3      	cmp	r3, r6
 801eba6:	d100      	bne.n	801ebaa <_strtod_l+0x486>
 801eba8:	e5f7      	b.n	801e79a <_strtod_l+0x76>
 801ebaa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ebac:	9805      	ldr	r0, [sp, #20]
 801ebae:	f002 ff4d 	bl	8021a4c <_Bfree>
 801ebb2:	9908      	ldr	r1, [sp, #32]
 801ebb4:	9805      	ldr	r0, [sp, #20]
 801ebb6:	f002 ff49 	bl	8021a4c <_Bfree>
 801ebba:	9907      	ldr	r1, [sp, #28]
 801ebbc:	9805      	ldr	r0, [sp, #20]
 801ebbe:	f002 ff45 	bl	8021a4c <_Bfree>
 801ebc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ebc4:	9805      	ldr	r0, [sp, #20]
 801ebc6:	f002 ff41 	bl	8021a4c <_Bfree>
 801ebca:	9906      	ldr	r1, [sp, #24]
 801ebcc:	9805      	ldr	r0, [sp, #20]
 801ebce:	f002 ff3d 	bl	8021a4c <_Bfree>
 801ebd2:	e5e2      	b.n	801e79a <_strtod_l+0x76>
 801ebd4:	2325      	movs	r3, #37	@ 0x25
 801ebd6:	9a06      	ldr	r2, [sp, #24]
 801ebd8:	1a9b      	subs	r3, r3, r2
 801ebda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ebdc:	4293      	cmp	r3, r2
 801ebde:	dbb8      	blt.n	801eb52 <_strtod_l+0x42e>
 801ebe0:	240f      	movs	r4, #15
 801ebe2:	9b06      	ldr	r3, [sp, #24]
 801ebe4:	4d46      	ldr	r5, [pc, #280]	@ (801ed00 <_strtod_l+0x5dc>)
 801ebe6:	1ae4      	subs	r4, r4, r3
 801ebe8:	00e1      	lsls	r1, r4, #3
 801ebea:	1869      	adds	r1, r5, r1
 801ebec:	0032      	movs	r2, r6
 801ebee:	6808      	ldr	r0, [r1, #0]
 801ebf0:	6849      	ldr	r1, [r1, #4]
 801ebf2:	003b      	movs	r3, r7
 801ebf4:	f7e3 fd22 	bl	800263c <__aeabi_dmul>
 801ebf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebfa:	1b1c      	subs	r4, r3, r4
 801ebfc:	00e4      	lsls	r4, r4, #3
 801ebfe:	192d      	adds	r5, r5, r4
 801ec00:	682a      	ldr	r2, [r5, #0]
 801ec02:	686b      	ldr	r3, [r5, #4]
 801ec04:	e789      	b.n	801eb1a <_strtod_l+0x3f6>
 801ec06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec08:	3316      	adds	r3, #22
 801ec0a:	dba2      	blt.n	801eb52 <_strtod_l+0x42e>
 801ec0c:	9907      	ldr	r1, [sp, #28]
 801ec0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec10:	4b3b      	ldr	r3, [pc, #236]	@ (801ed00 <_strtod_l+0x5dc>)
 801ec12:	1a52      	subs	r2, r2, r1
 801ec14:	00d2      	lsls	r2, r2, #3
 801ec16:	189b      	adds	r3, r3, r2
 801ec18:	0030      	movs	r0, r6
 801ec1a:	681a      	ldr	r2, [r3, #0]
 801ec1c:	685b      	ldr	r3, [r3, #4]
 801ec1e:	0039      	movs	r1, r7
 801ec20:	f7e3 f8c8 	bl	8001db4 <__aeabi_ddiv>
 801ec24:	e750      	b.n	801eac8 <_strtod_l+0x3a4>
 801ec26:	2300      	movs	r3, #0
 801ec28:	0030      	movs	r0, r6
 801ec2a:	0039      	movs	r1, r7
 801ec2c:	4d35      	ldr	r5, [pc, #212]	@ (801ed04 <_strtod_l+0x5e0>)
 801ec2e:	1124      	asrs	r4, r4, #4
 801ec30:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec32:	2c01      	cmp	r4, #1
 801ec34:	dc1e      	bgt.n	801ec74 <_strtod_l+0x550>
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d001      	beq.n	801ec3e <_strtod_l+0x51a>
 801ec3a:	0006      	movs	r6, r0
 801ec3c:	000f      	movs	r7, r1
 801ec3e:	4b32      	ldr	r3, [pc, #200]	@ (801ed08 <_strtod_l+0x5e4>)
 801ec40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec42:	18ff      	adds	r7, r7, r3
 801ec44:	4b2f      	ldr	r3, [pc, #188]	@ (801ed04 <_strtod_l+0x5e0>)
 801ec46:	00d5      	lsls	r5, r2, #3
 801ec48:	195d      	adds	r5, r3, r5
 801ec4a:	0032      	movs	r2, r6
 801ec4c:	6828      	ldr	r0, [r5, #0]
 801ec4e:	6869      	ldr	r1, [r5, #4]
 801ec50:	003b      	movs	r3, r7
 801ec52:	f7e3 fcf3 	bl	800263c <__aeabi_dmul>
 801ec56:	4b26      	ldr	r3, [pc, #152]	@ (801ecf0 <_strtod_l+0x5cc>)
 801ec58:	4a2c      	ldr	r2, [pc, #176]	@ (801ed0c <_strtod_l+0x5e8>)
 801ec5a:	0006      	movs	r6, r0
 801ec5c:	400b      	ands	r3, r1
 801ec5e:	4293      	cmp	r3, r2
 801ec60:	d895      	bhi.n	801eb8e <_strtod_l+0x46a>
 801ec62:	4a2b      	ldr	r2, [pc, #172]	@ (801ed10 <_strtod_l+0x5ec>)
 801ec64:	4293      	cmp	r3, r2
 801ec66:	d913      	bls.n	801ec90 <_strtod_l+0x56c>
 801ec68:	2601      	movs	r6, #1
 801ec6a:	4f2a      	ldr	r7, [pc, #168]	@ (801ed14 <_strtod_l+0x5f0>)
 801ec6c:	4276      	negs	r6, r6
 801ec6e:	2300      	movs	r3, #0
 801ec70:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec72:	e086      	b.n	801ed82 <_strtod_l+0x65e>
 801ec74:	2201      	movs	r2, #1
 801ec76:	4214      	tst	r4, r2
 801ec78:	d004      	beq.n	801ec84 <_strtod_l+0x560>
 801ec7a:	682a      	ldr	r2, [r5, #0]
 801ec7c:	686b      	ldr	r3, [r5, #4]
 801ec7e:	f7e3 fcdd 	bl	800263c <__aeabi_dmul>
 801ec82:	2301      	movs	r3, #1
 801ec84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec86:	1064      	asrs	r4, r4, #1
 801ec88:	3201      	adds	r2, #1
 801ec8a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec8c:	3508      	adds	r5, #8
 801ec8e:	e7d0      	b.n	801ec32 <_strtod_l+0x50e>
 801ec90:	23d4      	movs	r3, #212	@ 0xd4
 801ec92:	049b      	lsls	r3, r3, #18
 801ec94:	18cf      	adds	r7, r1, r3
 801ec96:	e7ea      	b.n	801ec6e <_strtod_l+0x54a>
 801ec98:	2c00      	cmp	r4, #0
 801ec9a:	d0e8      	beq.n	801ec6e <_strtod_l+0x54a>
 801ec9c:	4264      	negs	r4, r4
 801ec9e:	230f      	movs	r3, #15
 801eca0:	0022      	movs	r2, r4
 801eca2:	401a      	ands	r2, r3
 801eca4:	421c      	tst	r4, r3
 801eca6:	d00a      	beq.n	801ecbe <_strtod_l+0x59a>
 801eca8:	4b15      	ldr	r3, [pc, #84]	@ (801ed00 <_strtod_l+0x5dc>)
 801ecaa:	00d2      	lsls	r2, r2, #3
 801ecac:	189b      	adds	r3, r3, r2
 801ecae:	0030      	movs	r0, r6
 801ecb0:	681a      	ldr	r2, [r3, #0]
 801ecb2:	685b      	ldr	r3, [r3, #4]
 801ecb4:	0039      	movs	r1, r7
 801ecb6:	f7e3 f87d 	bl	8001db4 <__aeabi_ddiv>
 801ecba:	0006      	movs	r6, r0
 801ecbc:	000f      	movs	r7, r1
 801ecbe:	1124      	asrs	r4, r4, #4
 801ecc0:	d0d5      	beq.n	801ec6e <_strtod_l+0x54a>
 801ecc2:	2c1f      	cmp	r4, #31
 801ecc4:	dd28      	ble.n	801ed18 <_strtod_l+0x5f4>
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	9306      	str	r3, [sp, #24]
 801ecca:	9307      	str	r3, [sp, #28]
 801eccc:	930d      	str	r3, [sp, #52]	@ 0x34
 801ecce:	9308      	str	r3, [sp, #32]
 801ecd0:	2322      	movs	r3, #34	@ 0x22
 801ecd2:	9a05      	ldr	r2, [sp, #20]
 801ecd4:	2600      	movs	r6, #0
 801ecd6:	6013      	str	r3, [r2, #0]
 801ecd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecda:	2700      	movs	r7, #0
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d000      	beq.n	801ece2 <_strtod_l+0x5be>
 801ece0:	e763      	b.n	801ebaa <_strtod_l+0x486>
 801ece2:	e55a      	b.n	801e79a <_strtod_l+0x76>
 801ece4:	00004e1f 	.word	0x00004e1f
 801ece8:	08025d0e 	.word	0x08025d0e
 801ecec:	08025bb0 	.word	0x08025bb0
 801ecf0:	7ff00000 	.word	0x7ff00000
 801ecf4:	08025d06 	.word	0x08025d06
 801ecf8:	08025d40 	.word	0x08025d40
 801ecfc:	08025fcc 	.word	0x08025fcc
 801ed00:	08025eb8 	.word	0x08025eb8
 801ed04:	08025e90 	.word	0x08025e90
 801ed08:	fcb00000 	.word	0xfcb00000
 801ed0c:	7ca00000 	.word	0x7ca00000
 801ed10:	7c900000 	.word	0x7c900000
 801ed14:	7fefffff 	.word	0x7fefffff
 801ed18:	2310      	movs	r3, #16
 801ed1a:	0022      	movs	r2, r4
 801ed1c:	401a      	ands	r2, r3
 801ed1e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ed20:	421c      	tst	r4, r3
 801ed22:	d001      	beq.n	801ed28 <_strtod_l+0x604>
 801ed24:	335a      	adds	r3, #90	@ 0x5a
 801ed26:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed28:	0030      	movs	r0, r6
 801ed2a:	0039      	movs	r1, r7
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	4dbf      	ldr	r5, [pc, #764]	@ (801f02c <_strtod_l+0x908>)
 801ed30:	2201      	movs	r2, #1
 801ed32:	4214      	tst	r4, r2
 801ed34:	d004      	beq.n	801ed40 <_strtod_l+0x61c>
 801ed36:	682a      	ldr	r2, [r5, #0]
 801ed38:	686b      	ldr	r3, [r5, #4]
 801ed3a:	f7e3 fc7f 	bl	800263c <__aeabi_dmul>
 801ed3e:	2301      	movs	r3, #1
 801ed40:	1064      	asrs	r4, r4, #1
 801ed42:	3508      	adds	r5, #8
 801ed44:	2c00      	cmp	r4, #0
 801ed46:	d1f3      	bne.n	801ed30 <_strtod_l+0x60c>
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d001      	beq.n	801ed50 <_strtod_l+0x62c>
 801ed4c:	0006      	movs	r6, r0
 801ed4e:	000f      	movs	r7, r1
 801ed50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d00d      	beq.n	801ed72 <_strtod_l+0x64e>
 801ed56:	236b      	movs	r3, #107	@ 0x6b
 801ed58:	007a      	lsls	r2, r7, #1
 801ed5a:	0d52      	lsrs	r2, r2, #21
 801ed5c:	0039      	movs	r1, r7
 801ed5e:	1a9b      	subs	r3, r3, r2
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	dd06      	ble.n	801ed72 <_strtod_l+0x64e>
 801ed64:	2b1f      	cmp	r3, #31
 801ed66:	dd5a      	ble.n	801ee1e <_strtod_l+0x6fa>
 801ed68:	2600      	movs	r6, #0
 801ed6a:	2b34      	cmp	r3, #52	@ 0x34
 801ed6c:	dd50      	ble.n	801ee10 <_strtod_l+0x6ec>
 801ed6e:	27dc      	movs	r7, #220	@ 0xdc
 801ed70:	04bf      	lsls	r7, r7, #18
 801ed72:	2200      	movs	r2, #0
 801ed74:	2300      	movs	r3, #0
 801ed76:	0030      	movs	r0, r6
 801ed78:	0039      	movs	r1, r7
 801ed7a:	f7e1 fb99 	bl	80004b0 <__aeabi_dcmpeq>
 801ed7e:	2800      	cmp	r0, #0
 801ed80:	d1a1      	bne.n	801ecc6 <_strtod_l+0x5a2>
 801ed82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed84:	9a08      	ldr	r2, [sp, #32]
 801ed86:	9300      	str	r3, [sp, #0]
 801ed88:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed8a:	9b06      	ldr	r3, [sp, #24]
 801ed8c:	9805      	ldr	r0, [sp, #20]
 801ed8e:	f002 fec5 	bl	8021b1c <__s2b>
 801ed92:	900d      	str	r0, [sp, #52]	@ 0x34
 801ed94:	2800      	cmp	r0, #0
 801ed96:	d100      	bne.n	801ed9a <_strtod_l+0x676>
 801ed98:	e6f9      	b.n	801eb8e <_strtod_l+0x46a>
 801ed9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed9c:	9907      	ldr	r1, [sp, #28]
 801ed9e:	17da      	asrs	r2, r3, #31
 801eda0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eda2:	1a5b      	subs	r3, r3, r1
 801eda4:	401a      	ands	r2, r3
 801eda6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eda8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801edaa:	43db      	mvns	r3, r3
 801edac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801edae:	17db      	asrs	r3, r3, #31
 801edb0:	401a      	ands	r2, r3
 801edb2:	2300      	movs	r3, #0
 801edb4:	921a      	str	r2, [sp, #104]	@ 0x68
 801edb6:	9306      	str	r3, [sp, #24]
 801edb8:	9307      	str	r3, [sp, #28]
 801edba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edbc:	9805      	ldr	r0, [sp, #20]
 801edbe:	6859      	ldr	r1, [r3, #4]
 801edc0:	f002 fe00 	bl	80219c4 <_Balloc>
 801edc4:	9008      	str	r0, [sp, #32]
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d100      	bne.n	801edcc <_strtod_l+0x6a8>
 801edca:	e6e5      	b.n	801eb98 <_strtod_l+0x474>
 801edcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edce:	300c      	adds	r0, #12
 801edd0:	0019      	movs	r1, r3
 801edd2:	691a      	ldr	r2, [r3, #16]
 801edd4:	310c      	adds	r1, #12
 801edd6:	3202      	adds	r2, #2
 801edd8:	0092      	lsls	r2, r2, #2
 801edda:	f001 faef 	bl	80203bc <memcpy>
 801edde:	ab20      	add	r3, sp, #128	@ 0x80
 801ede0:	9301      	str	r3, [sp, #4]
 801ede2:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ede4:	9300      	str	r3, [sp, #0]
 801ede6:	0032      	movs	r2, r6
 801ede8:	003b      	movs	r3, r7
 801edea:	9805      	ldr	r0, [sp, #20]
 801edec:	9610      	str	r6, [sp, #64]	@ 0x40
 801edee:	9711      	str	r7, [sp, #68]	@ 0x44
 801edf0:	f003 f9e4 	bl	80221bc <__d2b>
 801edf4:	901e      	str	r0, [sp, #120]	@ 0x78
 801edf6:	2800      	cmp	r0, #0
 801edf8:	d100      	bne.n	801edfc <_strtod_l+0x6d8>
 801edfa:	e6cd      	b.n	801eb98 <_strtod_l+0x474>
 801edfc:	2101      	movs	r1, #1
 801edfe:	9805      	ldr	r0, [sp, #20]
 801ee00:	f002 ff28 	bl	8021c54 <__i2b>
 801ee04:	9007      	str	r0, [sp, #28]
 801ee06:	2800      	cmp	r0, #0
 801ee08:	d10e      	bne.n	801ee28 <_strtod_l+0x704>
 801ee0a:	2300      	movs	r3, #0
 801ee0c:	9307      	str	r3, [sp, #28]
 801ee0e:	e6c3      	b.n	801eb98 <_strtod_l+0x474>
 801ee10:	234b      	movs	r3, #75	@ 0x4b
 801ee12:	1a9a      	subs	r2, r3, r2
 801ee14:	3b4c      	subs	r3, #76	@ 0x4c
 801ee16:	4093      	lsls	r3, r2
 801ee18:	4019      	ands	r1, r3
 801ee1a:	000f      	movs	r7, r1
 801ee1c:	e7a9      	b.n	801ed72 <_strtod_l+0x64e>
 801ee1e:	2201      	movs	r2, #1
 801ee20:	4252      	negs	r2, r2
 801ee22:	409a      	lsls	r2, r3
 801ee24:	4016      	ands	r6, r2
 801ee26:	e7a4      	b.n	801ed72 <_strtod_l+0x64e>
 801ee28:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ee2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ee2c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ee2e:	1ad4      	subs	r4, r2, r3
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	db01      	blt.n	801ee38 <_strtod_l+0x714>
 801ee34:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ee36:	195d      	adds	r5, r3, r5
 801ee38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ee3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ee3c:	1a5b      	subs	r3, r3, r1
 801ee3e:	2136      	movs	r1, #54	@ 0x36
 801ee40:	189b      	adds	r3, r3, r2
 801ee42:	1a8a      	subs	r2, r1, r2
 801ee44:	497a      	ldr	r1, [pc, #488]	@ (801f030 <_strtod_l+0x90c>)
 801ee46:	2001      	movs	r0, #1
 801ee48:	468c      	mov	ip, r1
 801ee4a:	2100      	movs	r1, #0
 801ee4c:	3b01      	subs	r3, #1
 801ee4e:	9116      	str	r1, [sp, #88]	@ 0x58
 801ee50:	9014      	str	r0, [sp, #80]	@ 0x50
 801ee52:	4563      	cmp	r3, ip
 801ee54:	da06      	bge.n	801ee64 <_strtod_l+0x740>
 801ee56:	4661      	mov	r1, ip
 801ee58:	1ac9      	subs	r1, r1, r3
 801ee5a:	1a52      	subs	r2, r2, r1
 801ee5c:	291f      	cmp	r1, #31
 801ee5e:	dc3f      	bgt.n	801eee0 <_strtod_l+0x7bc>
 801ee60:	4088      	lsls	r0, r1
 801ee62:	9014      	str	r0, [sp, #80]	@ 0x50
 801ee64:	18ab      	adds	r3, r5, r2
 801ee66:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee68:	18a4      	adds	r4, r4, r2
 801ee6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee6e:	191c      	adds	r4, r3, r4
 801ee70:	002b      	movs	r3, r5
 801ee72:	4295      	cmp	r5, r2
 801ee74:	dd00      	ble.n	801ee78 <_strtod_l+0x754>
 801ee76:	0013      	movs	r3, r2
 801ee78:	42a3      	cmp	r3, r4
 801ee7a:	dd00      	ble.n	801ee7e <_strtod_l+0x75a>
 801ee7c:	0023      	movs	r3, r4
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	dd04      	ble.n	801ee8c <_strtod_l+0x768>
 801ee82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee84:	1ae4      	subs	r4, r4, r3
 801ee86:	1ad2      	subs	r2, r2, r3
 801ee88:	920e      	str	r2, [sp, #56]	@ 0x38
 801ee8a:	1aed      	subs	r5, r5, r3
 801ee8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	dd16      	ble.n	801eec0 <_strtod_l+0x79c>
 801ee92:	001a      	movs	r2, r3
 801ee94:	9907      	ldr	r1, [sp, #28]
 801ee96:	9805      	ldr	r0, [sp, #20]
 801ee98:	f002 ffa6 	bl	8021de8 <__pow5mult>
 801ee9c:	9007      	str	r0, [sp, #28]
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	d0b3      	beq.n	801ee0a <_strtod_l+0x6e6>
 801eea2:	0001      	movs	r1, r0
 801eea4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801eea6:	9805      	ldr	r0, [sp, #20]
 801eea8:	f002 feec 	bl	8021c84 <__multiply>
 801eeac:	9013      	str	r0, [sp, #76]	@ 0x4c
 801eeae:	2800      	cmp	r0, #0
 801eeb0:	d100      	bne.n	801eeb4 <_strtod_l+0x790>
 801eeb2:	e671      	b.n	801eb98 <_strtod_l+0x474>
 801eeb4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eeb6:	9805      	ldr	r0, [sp, #20]
 801eeb8:	f002 fdc8 	bl	8021a4c <_Bfree>
 801eebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eebe:	931e      	str	r3, [sp, #120]	@ 0x78
 801eec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	dc12      	bgt.n	801eeec <_strtod_l+0x7c8>
 801eec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	dd18      	ble.n	801eefe <_strtod_l+0x7da>
 801eecc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801eece:	9908      	ldr	r1, [sp, #32]
 801eed0:	9805      	ldr	r0, [sp, #20]
 801eed2:	f002 ff89 	bl	8021de8 <__pow5mult>
 801eed6:	9008      	str	r0, [sp, #32]
 801eed8:	2800      	cmp	r0, #0
 801eeda:	d110      	bne.n	801eefe <_strtod_l+0x7da>
 801eedc:	2300      	movs	r3, #0
 801eede:	e65a      	b.n	801eb96 <_strtod_l+0x472>
 801eee0:	4954      	ldr	r1, [pc, #336]	@ (801f034 <_strtod_l+0x910>)
 801eee2:	1acb      	subs	r3, r1, r3
 801eee4:	0001      	movs	r1, r0
 801eee6:	4099      	lsls	r1, r3
 801eee8:	9116      	str	r1, [sp, #88]	@ 0x58
 801eeea:	e7ba      	b.n	801ee62 <_strtod_l+0x73e>
 801eeec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eeee:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eef0:	9805      	ldr	r0, [sp, #20]
 801eef2:	f002 ffd5 	bl	8021ea0 <__lshift>
 801eef6:	901e      	str	r0, [sp, #120]	@ 0x78
 801eef8:	2800      	cmp	r0, #0
 801eefa:	d1e4      	bne.n	801eec6 <_strtod_l+0x7a2>
 801eefc:	e64c      	b.n	801eb98 <_strtod_l+0x474>
 801eefe:	2c00      	cmp	r4, #0
 801ef00:	dd07      	ble.n	801ef12 <_strtod_l+0x7ee>
 801ef02:	0022      	movs	r2, r4
 801ef04:	9908      	ldr	r1, [sp, #32]
 801ef06:	9805      	ldr	r0, [sp, #20]
 801ef08:	f002 ffca 	bl	8021ea0 <__lshift>
 801ef0c:	9008      	str	r0, [sp, #32]
 801ef0e:	2800      	cmp	r0, #0
 801ef10:	d0e4      	beq.n	801eedc <_strtod_l+0x7b8>
 801ef12:	2d00      	cmp	r5, #0
 801ef14:	dd08      	ble.n	801ef28 <_strtod_l+0x804>
 801ef16:	002a      	movs	r2, r5
 801ef18:	9907      	ldr	r1, [sp, #28]
 801ef1a:	9805      	ldr	r0, [sp, #20]
 801ef1c:	f002 ffc0 	bl	8021ea0 <__lshift>
 801ef20:	9007      	str	r0, [sp, #28]
 801ef22:	2800      	cmp	r0, #0
 801ef24:	d100      	bne.n	801ef28 <_strtod_l+0x804>
 801ef26:	e637      	b.n	801eb98 <_strtod_l+0x474>
 801ef28:	9a08      	ldr	r2, [sp, #32]
 801ef2a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ef2c:	9805      	ldr	r0, [sp, #20]
 801ef2e:	f003 f83f 	bl	8021fb0 <__mdiff>
 801ef32:	9006      	str	r0, [sp, #24]
 801ef34:	2800      	cmp	r0, #0
 801ef36:	d100      	bne.n	801ef3a <_strtod_l+0x816>
 801ef38:	e62e      	b.n	801eb98 <_strtod_l+0x474>
 801ef3a:	68c3      	ldr	r3, [r0, #12]
 801ef3c:	9907      	ldr	r1, [sp, #28]
 801ef3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ef40:	2300      	movs	r3, #0
 801ef42:	60c3      	str	r3, [r0, #12]
 801ef44:	f003 f818 	bl	8021f78 <__mcmp>
 801ef48:	2800      	cmp	r0, #0
 801ef4a:	da3b      	bge.n	801efc4 <_strtod_l+0x8a0>
 801ef4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef4e:	4333      	orrs	r3, r6
 801ef50:	d167      	bne.n	801f022 <_strtod_l+0x8fe>
 801ef52:	033b      	lsls	r3, r7, #12
 801ef54:	d165      	bne.n	801f022 <_strtod_l+0x8fe>
 801ef56:	22d6      	movs	r2, #214	@ 0xd6
 801ef58:	4b37      	ldr	r3, [pc, #220]	@ (801f038 <_strtod_l+0x914>)
 801ef5a:	04d2      	lsls	r2, r2, #19
 801ef5c:	403b      	ands	r3, r7
 801ef5e:	4293      	cmp	r3, r2
 801ef60:	d95f      	bls.n	801f022 <_strtod_l+0x8fe>
 801ef62:	9b06      	ldr	r3, [sp, #24]
 801ef64:	695b      	ldr	r3, [r3, #20]
 801ef66:	2b00      	cmp	r3, #0
 801ef68:	d103      	bne.n	801ef72 <_strtod_l+0x84e>
 801ef6a:	9b06      	ldr	r3, [sp, #24]
 801ef6c:	691b      	ldr	r3, [r3, #16]
 801ef6e:	2b01      	cmp	r3, #1
 801ef70:	dd57      	ble.n	801f022 <_strtod_l+0x8fe>
 801ef72:	9906      	ldr	r1, [sp, #24]
 801ef74:	2201      	movs	r2, #1
 801ef76:	9805      	ldr	r0, [sp, #20]
 801ef78:	f002 ff92 	bl	8021ea0 <__lshift>
 801ef7c:	9907      	ldr	r1, [sp, #28]
 801ef7e:	9006      	str	r0, [sp, #24]
 801ef80:	f002 fffa 	bl	8021f78 <__mcmp>
 801ef84:	2800      	cmp	r0, #0
 801ef86:	dd4c      	ble.n	801f022 <_strtod_l+0x8fe>
 801ef88:	4b2b      	ldr	r3, [pc, #172]	@ (801f038 <_strtod_l+0x914>)
 801ef8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef8c:	403b      	ands	r3, r7
 801ef8e:	2a00      	cmp	r2, #0
 801ef90:	d074      	beq.n	801f07c <_strtod_l+0x958>
 801ef92:	22d6      	movs	r2, #214	@ 0xd6
 801ef94:	04d2      	lsls	r2, r2, #19
 801ef96:	4293      	cmp	r3, r2
 801ef98:	d870      	bhi.n	801f07c <_strtod_l+0x958>
 801ef9a:	22dc      	movs	r2, #220	@ 0xdc
 801ef9c:	0492      	lsls	r2, r2, #18
 801ef9e:	4293      	cmp	r3, r2
 801efa0:	d800      	bhi.n	801efa4 <_strtod_l+0x880>
 801efa2:	e695      	b.n	801ecd0 <_strtod_l+0x5ac>
 801efa4:	0030      	movs	r0, r6
 801efa6:	0039      	movs	r1, r7
 801efa8:	4b24      	ldr	r3, [pc, #144]	@ (801f03c <_strtod_l+0x918>)
 801efaa:	2200      	movs	r2, #0
 801efac:	f7e3 fb46 	bl	800263c <__aeabi_dmul>
 801efb0:	4b21      	ldr	r3, [pc, #132]	@ (801f038 <_strtod_l+0x914>)
 801efb2:	0006      	movs	r6, r0
 801efb4:	000f      	movs	r7, r1
 801efb6:	420b      	tst	r3, r1
 801efb8:	d000      	beq.n	801efbc <_strtod_l+0x898>
 801efba:	e5f6      	b.n	801ebaa <_strtod_l+0x486>
 801efbc:	2322      	movs	r3, #34	@ 0x22
 801efbe:	9a05      	ldr	r2, [sp, #20]
 801efc0:	6013      	str	r3, [r2, #0]
 801efc2:	e5f2      	b.n	801ebaa <_strtod_l+0x486>
 801efc4:	970e      	str	r7, [sp, #56]	@ 0x38
 801efc6:	2800      	cmp	r0, #0
 801efc8:	d175      	bne.n	801f0b6 <_strtod_l+0x992>
 801efca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801efcc:	033b      	lsls	r3, r7, #12
 801efce:	0b1b      	lsrs	r3, r3, #12
 801efd0:	2a00      	cmp	r2, #0
 801efd2:	d039      	beq.n	801f048 <_strtod_l+0x924>
 801efd4:	4a1a      	ldr	r2, [pc, #104]	@ (801f040 <_strtod_l+0x91c>)
 801efd6:	4293      	cmp	r3, r2
 801efd8:	d138      	bne.n	801f04c <_strtod_l+0x928>
 801efda:	2101      	movs	r1, #1
 801efdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efde:	4249      	negs	r1, r1
 801efe0:	0032      	movs	r2, r6
 801efe2:	0008      	movs	r0, r1
 801efe4:	2b00      	cmp	r3, #0
 801efe6:	d00b      	beq.n	801f000 <_strtod_l+0x8dc>
 801efe8:	24d4      	movs	r4, #212	@ 0xd4
 801efea:	4b13      	ldr	r3, [pc, #76]	@ (801f038 <_strtod_l+0x914>)
 801efec:	0008      	movs	r0, r1
 801efee:	403b      	ands	r3, r7
 801eff0:	04e4      	lsls	r4, r4, #19
 801eff2:	42a3      	cmp	r3, r4
 801eff4:	d804      	bhi.n	801f000 <_strtod_l+0x8dc>
 801eff6:	306c      	adds	r0, #108	@ 0x6c
 801eff8:	0d1b      	lsrs	r3, r3, #20
 801effa:	1ac3      	subs	r3, r0, r3
 801effc:	4099      	lsls	r1, r3
 801effe:	0008      	movs	r0, r1
 801f000:	4282      	cmp	r2, r0
 801f002:	d123      	bne.n	801f04c <_strtod_l+0x928>
 801f004:	4b0f      	ldr	r3, [pc, #60]	@ (801f044 <_strtod_l+0x920>)
 801f006:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f008:	4299      	cmp	r1, r3
 801f00a:	d102      	bne.n	801f012 <_strtod_l+0x8ee>
 801f00c:	3201      	adds	r2, #1
 801f00e:	d100      	bne.n	801f012 <_strtod_l+0x8ee>
 801f010:	e5c2      	b.n	801eb98 <_strtod_l+0x474>
 801f012:	4b09      	ldr	r3, [pc, #36]	@ (801f038 <_strtod_l+0x914>)
 801f014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f016:	2600      	movs	r6, #0
 801f018:	401a      	ands	r2, r3
 801f01a:	0013      	movs	r3, r2
 801f01c:	2280      	movs	r2, #128	@ 0x80
 801f01e:	0352      	lsls	r2, r2, #13
 801f020:	189f      	adds	r7, r3, r2
 801f022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f024:	2b00      	cmp	r3, #0
 801f026:	d1bd      	bne.n	801efa4 <_strtod_l+0x880>
 801f028:	e5bf      	b.n	801ebaa <_strtod_l+0x486>
 801f02a:	46c0      	nop			@ (mov r8, r8)
 801f02c:	08025bd8 	.word	0x08025bd8
 801f030:	fffffc02 	.word	0xfffffc02
 801f034:	fffffbe2 	.word	0xfffffbe2
 801f038:	7ff00000 	.word	0x7ff00000
 801f03c:	39500000 	.word	0x39500000
 801f040:	000fffff 	.word	0x000fffff
 801f044:	7fefffff 	.word	0x7fefffff
 801f048:	4333      	orrs	r3, r6
 801f04a:	d09d      	beq.n	801ef88 <_strtod_l+0x864>
 801f04c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d01c      	beq.n	801f08c <_strtod_l+0x968>
 801f052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f054:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f056:	4213      	tst	r3, r2
 801f058:	d0e3      	beq.n	801f022 <_strtod_l+0x8fe>
 801f05a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f05c:	0030      	movs	r0, r6
 801f05e:	0039      	movs	r1, r7
 801f060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f062:	2b00      	cmp	r3, #0
 801f064:	d016      	beq.n	801f094 <_strtod_l+0x970>
 801f066:	f7ff fb45 	bl	801e6f4 <sulp>
 801f06a:	0002      	movs	r2, r0
 801f06c:	000b      	movs	r3, r1
 801f06e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f070:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f072:	f7e2 fb3b 	bl	80016ec <__aeabi_dadd>
 801f076:	0006      	movs	r6, r0
 801f078:	000f      	movs	r7, r1
 801f07a:	e7d2      	b.n	801f022 <_strtod_l+0x8fe>
 801f07c:	2601      	movs	r6, #1
 801f07e:	4a92      	ldr	r2, [pc, #584]	@ (801f2c8 <_strtod_l+0xba4>)
 801f080:	4276      	negs	r6, r6
 801f082:	189b      	adds	r3, r3, r2
 801f084:	4a91      	ldr	r2, [pc, #580]	@ (801f2cc <_strtod_l+0xba8>)
 801f086:	431a      	orrs	r2, r3
 801f088:	0017      	movs	r7, r2
 801f08a:	e7ca      	b.n	801f022 <_strtod_l+0x8fe>
 801f08c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f08e:	4233      	tst	r3, r6
 801f090:	d0c7      	beq.n	801f022 <_strtod_l+0x8fe>
 801f092:	e7e2      	b.n	801f05a <_strtod_l+0x936>
 801f094:	f7ff fb2e 	bl	801e6f4 <sulp>
 801f098:	0002      	movs	r2, r0
 801f09a:	000b      	movs	r3, r1
 801f09c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f09e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f0a0:	f7e3 fd94 	bl	8002bcc <__aeabi_dsub>
 801f0a4:	2200      	movs	r2, #0
 801f0a6:	2300      	movs	r3, #0
 801f0a8:	0006      	movs	r6, r0
 801f0aa:	000f      	movs	r7, r1
 801f0ac:	f7e1 fa00 	bl	80004b0 <__aeabi_dcmpeq>
 801f0b0:	2800      	cmp	r0, #0
 801f0b2:	d0b6      	beq.n	801f022 <_strtod_l+0x8fe>
 801f0b4:	e60c      	b.n	801ecd0 <_strtod_l+0x5ac>
 801f0b6:	9907      	ldr	r1, [sp, #28]
 801f0b8:	9806      	ldr	r0, [sp, #24]
 801f0ba:	f003 f8df 	bl	802227c <__ratio>
 801f0be:	2380      	movs	r3, #128	@ 0x80
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	05db      	lsls	r3, r3, #23
 801f0c4:	0004      	movs	r4, r0
 801f0c6:	000d      	movs	r5, r1
 801f0c8:	f7e1 fa02 	bl	80004d0 <__aeabi_dcmple>
 801f0cc:	2800      	cmp	r0, #0
 801f0ce:	d06c      	beq.n	801f1aa <_strtod_l+0xa86>
 801f0d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d177      	bne.n	801f1c6 <_strtod_l+0xaa2>
 801f0d6:	2e00      	cmp	r6, #0
 801f0d8:	d157      	bne.n	801f18a <_strtod_l+0xa66>
 801f0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0dc:	031b      	lsls	r3, r3, #12
 801f0de:	d15a      	bne.n	801f196 <_strtod_l+0xa72>
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	0020      	movs	r0, r4
 801f0e4:	0029      	movs	r1, r5
 801f0e6:	4b7a      	ldr	r3, [pc, #488]	@ (801f2d0 <_strtod_l+0xbac>)
 801f0e8:	f7e1 f9e8 	bl	80004bc <__aeabi_dcmplt>
 801f0ec:	2800      	cmp	r0, #0
 801f0ee:	d159      	bne.n	801f1a4 <_strtod_l+0xa80>
 801f0f0:	0020      	movs	r0, r4
 801f0f2:	0029      	movs	r1, r5
 801f0f4:	2200      	movs	r2, #0
 801f0f6:	4b77      	ldr	r3, [pc, #476]	@ (801f2d4 <_strtod_l+0xbb0>)
 801f0f8:	f7e3 faa0 	bl	800263c <__aeabi_dmul>
 801f0fc:	0004      	movs	r4, r0
 801f0fe:	000d      	movs	r5, r1
 801f100:	2380      	movs	r3, #128	@ 0x80
 801f102:	061b      	lsls	r3, r3, #24
 801f104:	18eb      	adds	r3, r5, r3
 801f106:	940a      	str	r4, [sp, #40]	@ 0x28
 801f108:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f10a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f10c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f10e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f110:	9315      	str	r3, [sp, #84]	@ 0x54
 801f112:	4a71      	ldr	r2, [pc, #452]	@ (801f2d8 <_strtod_l+0xbb4>)
 801f114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f116:	4013      	ands	r3, r2
 801f118:	9316      	str	r3, [sp, #88]	@ 0x58
 801f11a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f11c:	4b6f      	ldr	r3, [pc, #444]	@ (801f2dc <_strtod_l+0xbb8>)
 801f11e:	429a      	cmp	r2, r3
 801f120:	d000      	beq.n	801f124 <_strtod_l+0xa00>
 801f122:	e087      	b.n	801f234 <_strtod_l+0xb10>
 801f124:	4a6e      	ldr	r2, [pc, #440]	@ (801f2e0 <_strtod_l+0xbbc>)
 801f126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f128:	4694      	mov	ip, r2
 801f12a:	4463      	add	r3, ip
 801f12c:	001f      	movs	r7, r3
 801f12e:	0030      	movs	r0, r6
 801f130:	0019      	movs	r1, r3
 801f132:	f002 ffd7 	bl	80220e4 <__ulp>
 801f136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f13a:	f7e3 fa7f 	bl	800263c <__aeabi_dmul>
 801f13e:	0032      	movs	r2, r6
 801f140:	003b      	movs	r3, r7
 801f142:	f7e2 fad3 	bl	80016ec <__aeabi_dadd>
 801f146:	4a64      	ldr	r2, [pc, #400]	@ (801f2d8 <_strtod_l+0xbb4>)
 801f148:	4b66      	ldr	r3, [pc, #408]	@ (801f2e4 <_strtod_l+0xbc0>)
 801f14a:	0006      	movs	r6, r0
 801f14c:	400a      	ands	r2, r1
 801f14e:	429a      	cmp	r2, r3
 801f150:	d940      	bls.n	801f1d4 <_strtod_l+0xab0>
 801f152:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f154:	4a64      	ldr	r2, [pc, #400]	@ (801f2e8 <_strtod_l+0xbc4>)
 801f156:	4293      	cmp	r3, r2
 801f158:	d103      	bne.n	801f162 <_strtod_l+0xa3e>
 801f15a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f15c:	3301      	adds	r3, #1
 801f15e:	d100      	bne.n	801f162 <_strtod_l+0xa3e>
 801f160:	e51a      	b.n	801eb98 <_strtod_l+0x474>
 801f162:	2601      	movs	r6, #1
 801f164:	4f60      	ldr	r7, [pc, #384]	@ (801f2e8 <_strtod_l+0xbc4>)
 801f166:	4276      	negs	r6, r6
 801f168:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f16a:	9805      	ldr	r0, [sp, #20]
 801f16c:	f002 fc6e 	bl	8021a4c <_Bfree>
 801f170:	9908      	ldr	r1, [sp, #32]
 801f172:	9805      	ldr	r0, [sp, #20]
 801f174:	f002 fc6a 	bl	8021a4c <_Bfree>
 801f178:	9907      	ldr	r1, [sp, #28]
 801f17a:	9805      	ldr	r0, [sp, #20]
 801f17c:	f002 fc66 	bl	8021a4c <_Bfree>
 801f180:	9906      	ldr	r1, [sp, #24]
 801f182:	9805      	ldr	r0, [sp, #20]
 801f184:	f002 fc62 	bl	8021a4c <_Bfree>
 801f188:	e617      	b.n	801edba <_strtod_l+0x696>
 801f18a:	2e01      	cmp	r6, #1
 801f18c:	d103      	bne.n	801f196 <_strtod_l+0xa72>
 801f18e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f190:	2b00      	cmp	r3, #0
 801f192:	d100      	bne.n	801f196 <_strtod_l+0xa72>
 801f194:	e59c      	b.n	801ecd0 <_strtod_l+0x5ac>
 801f196:	2300      	movs	r3, #0
 801f198:	4c54      	ldr	r4, [pc, #336]	@ (801f2ec <_strtod_l+0xbc8>)
 801f19a:	4d4d      	ldr	r5, [pc, #308]	@ (801f2d0 <_strtod_l+0xbac>)
 801f19c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f19e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f1a0:	2400      	movs	r4, #0
 801f1a2:	e7b2      	b.n	801f10a <_strtod_l+0x9e6>
 801f1a4:	2400      	movs	r4, #0
 801f1a6:	4d4b      	ldr	r5, [pc, #300]	@ (801f2d4 <_strtod_l+0xbb0>)
 801f1a8:	e7aa      	b.n	801f100 <_strtod_l+0x9dc>
 801f1aa:	0020      	movs	r0, r4
 801f1ac:	0029      	movs	r1, r5
 801f1ae:	4b49      	ldr	r3, [pc, #292]	@ (801f2d4 <_strtod_l+0xbb0>)
 801f1b0:	2200      	movs	r2, #0
 801f1b2:	f7e3 fa43 	bl	800263c <__aeabi_dmul>
 801f1b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1b8:	0004      	movs	r4, r0
 801f1ba:	000d      	movs	r5, r1
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d09f      	beq.n	801f100 <_strtod_l+0x9dc>
 801f1c0:	940a      	str	r4, [sp, #40]	@ 0x28
 801f1c2:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f1c4:	e7a1      	b.n	801f10a <_strtod_l+0x9e6>
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	4c41      	ldr	r4, [pc, #260]	@ (801f2d0 <_strtod_l+0xbac>)
 801f1ca:	0025      	movs	r5, r4
 801f1cc:	930a      	str	r3, [sp, #40]	@ 0x28
 801f1ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f1d0:	001c      	movs	r4, r3
 801f1d2:	e79a      	b.n	801f10a <_strtod_l+0x9e6>
 801f1d4:	23d4      	movs	r3, #212	@ 0xd4
 801f1d6:	049b      	lsls	r3, r3, #18
 801f1d8:	18cf      	adds	r7, r1, r3
 801f1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1dc:	9710      	str	r7, [sp, #64]	@ 0x40
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d1c2      	bne.n	801f168 <_strtod_l+0xa44>
 801f1e2:	4b3d      	ldr	r3, [pc, #244]	@ (801f2d8 <_strtod_l+0xbb4>)
 801f1e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1e6:	403b      	ands	r3, r7
 801f1e8:	429a      	cmp	r2, r3
 801f1ea:	d1bd      	bne.n	801f168 <_strtod_l+0xa44>
 801f1ec:	0020      	movs	r0, r4
 801f1ee:	0029      	movs	r1, r5
 801f1f0:	f7e1 fa4a 	bl	8000688 <__aeabi_d2lz>
 801f1f4:	f7e1 fa82 	bl	80006fc <__aeabi_l2d>
 801f1f8:	0002      	movs	r2, r0
 801f1fa:	000b      	movs	r3, r1
 801f1fc:	0020      	movs	r0, r4
 801f1fe:	0029      	movs	r1, r5
 801f200:	f7e3 fce4 	bl	8002bcc <__aeabi_dsub>
 801f204:	033c      	lsls	r4, r7, #12
 801f206:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f208:	0b24      	lsrs	r4, r4, #12
 801f20a:	4334      	orrs	r4, r6
 801f20c:	900e      	str	r0, [sp, #56]	@ 0x38
 801f20e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f210:	4a37      	ldr	r2, [pc, #220]	@ (801f2f0 <_strtod_l+0xbcc>)
 801f212:	431c      	orrs	r4, r3
 801f214:	d052      	beq.n	801f2bc <_strtod_l+0xb98>
 801f216:	4b37      	ldr	r3, [pc, #220]	@ (801f2f4 <_strtod_l+0xbd0>)
 801f218:	f7e1 f950 	bl	80004bc <__aeabi_dcmplt>
 801f21c:	2800      	cmp	r0, #0
 801f21e:	d000      	beq.n	801f222 <_strtod_l+0xafe>
 801f220:	e4c3      	b.n	801ebaa <_strtod_l+0x486>
 801f222:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f224:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f226:	4a34      	ldr	r2, [pc, #208]	@ (801f2f8 <_strtod_l+0xbd4>)
 801f228:	4b2a      	ldr	r3, [pc, #168]	@ (801f2d4 <_strtod_l+0xbb0>)
 801f22a:	f7e1 f95b 	bl	80004e4 <__aeabi_dcmpgt>
 801f22e:	2800      	cmp	r0, #0
 801f230:	d09a      	beq.n	801f168 <_strtod_l+0xa44>
 801f232:	e4ba      	b.n	801ebaa <_strtod_l+0x486>
 801f234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f236:	2b00      	cmp	r3, #0
 801f238:	d02a      	beq.n	801f290 <_strtod_l+0xb6c>
 801f23a:	23d4      	movs	r3, #212	@ 0xd4
 801f23c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f23e:	04db      	lsls	r3, r3, #19
 801f240:	429a      	cmp	r2, r3
 801f242:	d825      	bhi.n	801f290 <_strtod_l+0xb6c>
 801f244:	0020      	movs	r0, r4
 801f246:	0029      	movs	r1, r5
 801f248:	4a2c      	ldr	r2, [pc, #176]	@ (801f2fc <_strtod_l+0xbd8>)
 801f24a:	4b2d      	ldr	r3, [pc, #180]	@ (801f300 <_strtod_l+0xbdc>)
 801f24c:	f7e1 f940 	bl	80004d0 <__aeabi_dcmple>
 801f250:	2800      	cmp	r0, #0
 801f252:	d016      	beq.n	801f282 <_strtod_l+0xb5e>
 801f254:	0020      	movs	r0, r4
 801f256:	0029      	movs	r1, r5
 801f258:	f7e1 f9f8 	bl	800064c <__aeabi_d2uiz>
 801f25c:	2800      	cmp	r0, #0
 801f25e:	d100      	bne.n	801f262 <_strtod_l+0xb3e>
 801f260:	3001      	adds	r0, #1
 801f262:	f7e4 f8db 	bl	800341c <__aeabi_ui2d>
 801f266:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f268:	0004      	movs	r4, r0
 801f26a:	000d      	movs	r5, r1
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d122      	bne.n	801f2b6 <_strtod_l+0xb92>
 801f270:	2380      	movs	r3, #128	@ 0x80
 801f272:	061b      	lsls	r3, r3, #24
 801f274:	18cb      	adds	r3, r1, r3
 801f276:	9018      	str	r0, [sp, #96]	@ 0x60
 801f278:	9319      	str	r3, [sp, #100]	@ 0x64
 801f27a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f27c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f27e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f280:	9315      	str	r3, [sp, #84]	@ 0x54
 801f282:	22d6      	movs	r2, #214	@ 0xd6
 801f284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f286:	04d2      	lsls	r2, r2, #19
 801f288:	189b      	adds	r3, r3, r2
 801f28a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f28c:	1a9b      	subs	r3, r3, r2
 801f28e:	9315      	str	r3, [sp, #84]	@ 0x54
 801f290:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f292:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f294:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f296:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f298:	f002 ff24 	bl	80220e4 <__ulp>
 801f29c:	0002      	movs	r2, r0
 801f29e:	000b      	movs	r3, r1
 801f2a0:	0030      	movs	r0, r6
 801f2a2:	0039      	movs	r1, r7
 801f2a4:	f7e3 f9ca 	bl	800263c <__aeabi_dmul>
 801f2a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f2aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f2ac:	f7e2 fa1e 	bl	80016ec <__aeabi_dadd>
 801f2b0:	0006      	movs	r6, r0
 801f2b2:	000f      	movs	r7, r1
 801f2b4:	e791      	b.n	801f1da <_strtod_l+0xab6>
 801f2b6:	9418      	str	r4, [sp, #96]	@ 0x60
 801f2b8:	9519      	str	r5, [sp, #100]	@ 0x64
 801f2ba:	e7de      	b.n	801f27a <_strtod_l+0xb56>
 801f2bc:	4b11      	ldr	r3, [pc, #68]	@ (801f304 <_strtod_l+0xbe0>)
 801f2be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f2c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f2c2:	f7e1 f8fb 	bl	80004bc <__aeabi_dcmplt>
 801f2c6:	e7b2      	b.n	801f22e <_strtod_l+0xb0a>
 801f2c8:	fff00000 	.word	0xfff00000
 801f2cc:	000fffff 	.word	0x000fffff
 801f2d0:	3ff00000 	.word	0x3ff00000
 801f2d4:	3fe00000 	.word	0x3fe00000
 801f2d8:	7ff00000 	.word	0x7ff00000
 801f2dc:	7fe00000 	.word	0x7fe00000
 801f2e0:	fcb00000 	.word	0xfcb00000
 801f2e4:	7c9fffff 	.word	0x7c9fffff
 801f2e8:	7fefffff 	.word	0x7fefffff
 801f2ec:	bff00000 	.word	0xbff00000
 801f2f0:	94a03595 	.word	0x94a03595
 801f2f4:	3fdfffff 	.word	0x3fdfffff
 801f2f8:	35afe535 	.word	0x35afe535
 801f2fc:	ffc00000 	.word	0xffc00000
 801f300:	41dfffff 	.word	0x41dfffff
 801f304:	3fcfffff 	.word	0x3fcfffff

0801f308 <strtod>:
 801f308:	b510      	push	{r4, lr}
 801f30a:	4c04      	ldr	r4, [pc, #16]	@ (801f31c <strtod+0x14>)
 801f30c:	000a      	movs	r2, r1
 801f30e:	0001      	movs	r1, r0
 801f310:	4b03      	ldr	r3, [pc, #12]	@ (801f320 <strtod+0x18>)
 801f312:	6820      	ldr	r0, [r4, #0]
 801f314:	f7ff fa06 	bl	801e724 <_strtod_l>
 801f318:	bd10      	pop	{r4, pc}
 801f31a:	46c0      	nop			@ (mov r8, r8)
 801f31c:	200003d4 	.word	0x200003d4
 801f320:	20000268 	.word	0x20000268

0801f324 <_strtol_l.constprop.0>:
 801f324:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f326:	b085      	sub	sp, #20
 801f328:	0017      	movs	r7, r2
 801f32a:	001e      	movs	r6, r3
 801f32c:	9003      	str	r0, [sp, #12]
 801f32e:	9101      	str	r1, [sp, #4]
 801f330:	2b24      	cmp	r3, #36	@ 0x24
 801f332:	d844      	bhi.n	801f3be <_strtol_l.constprop.0+0x9a>
 801f334:	000c      	movs	r4, r1
 801f336:	2b01      	cmp	r3, #1
 801f338:	d041      	beq.n	801f3be <_strtol_l.constprop.0+0x9a>
 801f33a:	4b3d      	ldr	r3, [pc, #244]	@ (801f430 <_strtol_l.constprop.0+0x10c>)
 801f33c:	2208      	movs	r2, #8
 801f33e:	469c      	mov	ip, r3
 801f340:	0023      	movs	r3, r4
 801f342:	4661      	mov	r1, ip
 801f344:	781d      	ldrb	r5, [r3, #0]
 801f346:	3401      	adds	r4, #1
 801f348:	5d48      	ldrb	r0, [r1, r5]
 801f34a:	0001      	movs	r1, r0
 801f34c:	4011      	ands	r1, r2
 801f34e:	4210      	tst	r0, r2
 801f350:	d1f6      	bne.n	801f340 <_strtol_l.constprop.0+0x1c>
 801f352:	2d2d      	cmp	r5, #45	@ 0x2d
 801f354:	d13a      	bne.n	801f3cc <_strtol_l.constprop.0+0xa8>
 801f356:	7825      	ldrb	r5, [r4, #0]
 801f358:	1c9c      	adds	r4, r3, #2
 801f35a:	2301      	movs	r3, #1
 801f35c:	9300      	str	r3, [sp, #0]
 801f35e:	2210      	movs	r2, #16
 801f360:	0033      	movs	r3, r6
 801f362:	4393      	bics	r3, r2
 801f364:	d109      	bne.n	801f37a <_strtol_l.constprop.0+0x56>
 801f366:	2d30      	cmp	r5, #48	@ 0x30
 801f368:	d136      	bne.n	801f3d8 <_strtol_l.constprop.0+0xb4>
 801f36a:	2120      	movs	r1, #32
 801f36c:	7823      	ldrb	r3, [r4, #0]
 801f36e:	438b      	bics	r3, r1
 801f370:	2b58      	cmp	r3, #88	@ 0x58
 801f372:	d131      	bne.n	801f3d8 <_strtol_l.constprop.0+0xb4>
 801f374:	0016      	movs	r6, r2
 801f376:	7865      	ldrb	r5, [r4, #1]
 801f378:	3402      	adds	r4, #2
 801f37a:	4a2e      	ldr	r2, [pc, #184]	@ (801f434 <_strtol_l.constprop.0+0x110>)
 801f37c:	9b00      	ldr	r3, [sp, #0]
 801f37e:	4694      	mov	ip, r2
 801f380:	4463      	add	r3, ip
 801f382:	0031      	movs	r1, r6
 801f384:	0018      	movs	r0, r3
 801f386:	9302      	str	r3, [sp, #8]
 801f388:	f7e0 ff92 	bl	80002b0 <__aeabi_uidivmod>
 801f38c:	2200      	movs	r2, #0
 801f38e:	4684      	mov	ip, r0
 801f390:	0010      	movs	r0, r2
 801f392:	002b      	movs	r3, r5
 801f394:	3b30      	subs	r3, #48	@ 0x30
 801f396:	2b09      	cmp	r3, #9
 801f398:	d825      	bhi.n	801f3e6 <_strtol_l.constprop.0+0xc2>
 801f39a:	001d      	movs	r5, r3
 801f39c:	42ae      	cmp	r6, r5
 801f39e:	dd31      	ble.n	801f404 <_strtol_l.constprop.0+0xe0>
 801f3a0:	1c53      	adds	r3, r2, #1
 801f3a2:	d009      	beq.n	801f3b8 <_strtol_l.constprop.0+0x94>
 801f3a4:	2201      	movs	r2, #1
 801f3a6:	4252      	negs	r2, r2
 801f3a8:	4584      	cmp	ip, r0
 801f3aa:	d305      	bcc.n	801f3b8 <_strtol_l.constprop.0+0x94>
 801f3ac:	d101      	bne.n	801f3b2 <_strtol_l.constprop.0+0x8e>
 801f3ae:	42a9      	cmp	r1, r5
 801f3b0:	db25      	blt.n	801f3fe <_strtol_l.constprop.0+0xda>
 801f3b2:	2201      	movs	r2, #1
 801f3b4:	4370      	muls	r0, r6
 801f3b6:	1828      	adds	r0, r5, r0
 801f3b8:	7825      	ldrb	r5, [r4, #0]
 801f3ba:	3401      	adds	r4, #1
 801f3bc:	e7e9      	b.n	801f392 <_strtol_l.constprop.0+0x6e>
 801f3be:	f000 ffc5 	bl	802034c <__errno>
 801f3c2:	2316      	movs	r3, #22
 801f3c4:	6003      	str	r3, [r0, #0]
 801f3c6:	2000      	movs	r0, #0
 801f3c8:	b005      	add	sp, #20
 801f3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3cc:	9100      	str	r1, [sp, #0]
 801f3ce:	2d2b      	cmp	r5, #43	@ 0x2b
 801f3d0:	d1c5      	bne.n	801f35e <_strtol_l.constprop.0+0x3a>
 801f3d2:	7825      	ldrb	r5, [r4, #0]
 801f3d4:	1c9c      	adds	r4, r3, #2
 801f3d6:	e7c2      	b.n	801f35e <_strtol_l.constprop.0+0x3a>
 801f3d8:	2e00      	cmp	r6, #0
 801f3da:	d1ce      	bne.n	801f37a <_strtol_l.constprop.0+0x56>
 801f3dc:	3608      	adds	r6, #8
 801f3de:	2d30      	cmp	r5, #48	@ 0x30
 801f3e0:	d0cb      	beq.n	801f37a <_strtol_l.constprop.0+0x56>
 801f3e2:	3602      	adds	r6, #2
 801f3e4:	e7c9      	b.n	801f37a <_strtol_l.constprop.0+0x56>
 801f3e6:	002b      	movs	r3, r5
 801f3e8:	3b41      	subs	r3, #65	@ 0x41
 801f3ea:	2b19      	cmp	r3, #25
 801f3ec:	d801      	bhi.n	801f3f2 <_strtol_l.constprop.0+0xce>
 801f3ee:	3d37      	subs	r5, #55	@ 0x37
 801f3f0:	e7d4      	b.n	801f39c <_strtol_l.constprop.0+0x78>
 801f3f2:	002b      	movs	r3, r5
 801f3f4:	3b61      	subs	r3, #97	@ 0x61
 801f3f6:	2b19      	cmp	r3, #25
 801f3f8:	d804      	bhi.n	801f404 <_strtol_l.constprop.0+0xe0>
 801f3fa:	3d57      	subs	r5, #87	@ 0x57
 801f3fc:	e7ce      	b.n	801f39c <_strtol_l.constprop.0+0x78>
 801f3fe:	2201      	movs	r2, #1
 801f400:	4252      	negs	r2, r2
 801f402:	e7d9      	b.n	801f3b8 <_strtol_l.constprop.0+0x94>
 801f404:	1c53      	adds	r3, r2, #1
 801f406:	d108      	bne.n	801f41a <_strtol_l.constprop.0+0xf6>
 801f408:	2322      	movs	r3, #34	@ 0x22
 801f40a:	9a03      	ldr	r2, [sp, #12]
 801f40c:	9802      	ldr	r0, [sp, #8]
 801f40e:	6013      	str	r3, [r2, #0]
 801f410:	2f00      	cmp	r7, #0
 801f412:	d0d9      	beq.n	801f3c8 <_strtol_l.constprop.0+0xa4>
 801f414:	1e63      	subs	r3, r4, #1
 801f416:	9301      	str	r3, [sp, #4]
 801f418:	e007      	b.n	801f42a <_strtol_l.constprop.0+0x106>
 801f41a:	9b00      	ldr	r3, [sp, #0]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	d000      	beq.n	801f422 <_strtol_l.constprop.0+0xfe>
 801f420:	4240      	negs	r0, r0
 801f422:	2f00      	cmp	r7, #0
 801f424:	d0d0      	beq.n	801f3c8 <_strtol_l.constprop.0+0xa4>
 801f426:	2a00      	cmp	r2, #0
 801f428:	d1f4      	bne.n	801f414 <_strtol_l.constprop.0+0xf0>
 801f42a:	9b01      	ldr	r3, [sp, #4]
 801f42c:	603b      	str	r3, [r7, #0]
 801f42e:	e7cb      	b.n	801f3c8 <_strtol_l.constprop.0+0xa4>
 801f430:	08025c01 	.word	0x08025c01
 801f434:	7fffffff 	.word	0x7fffffff

0801f438 <strtol>:
 801f438:	b510      	push	{r4, lr}
 801f43a:	4c04      	ldr	r4, [pc, #16]	@ (801f44c <strtol+0x14>)
 801f43c:	0013      	movs	r3, r2
 801f43e:	000a      	movs	r2, r1
 801f440:	0001      	movs	r1, r0
 801f442:	6820      	ldr	r0, [r4, #0]
 801f444:	f7ff ff6e 	bl	801f324 <_strtol_l.constprop.0>
 801f448:	bd10      	pop	{r4, pc}
 801f44a:	46c0      	nop			@ (mov r8, r8)
 801f44c:	200003d4 	.word	0x200003d4

0801f450 <__cvt>:
 801f450:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f452:	001f      	movs	r7, r3
 801f454:	2300      	movs	r3, #0
 801f456:	0016      	movs	r6, r2
 801f458:	b08b      	sub	sp, #44	@ 0x2c
 801f45a:	429f      	cmp	r7, r3
 801f45c:	da04      	bge.n	801f468 <__cvt+0x18>
 801f45e:	2180      	movs	r1, #128	@ 0x80
 801f460:	0609      	lsls	r1, r1, #24
 801f462:	187b      	adds	r3, r7, r1
 801f464:	001f      	movs	r7, r3
 801f466:	232d      	movs	r3, #45	@ 0x2d
 801f468:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f46a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f46c:	7013      	strb	r3, [r2, #0]
 801f46e:	2320      	movs	r3, #32
 801f470:	2203      	movs	r2, #3
 801f472:	439d      	bics	r5, r3
 801f474:	2d46      	cmp	r5, #70	@ 0x46
 801f476:	d007      	beq.n	801f488 <__cvt+0x38>
 801f478:	002b      	movs	r3, r5
 801f47a:	3b45      	subs	r3, #69	@ 0x45
 801f47c:	4259      	negs	r1, r3
 801f47e:	414b      	adcs	r3, r1
 801f480:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f482:	3a01      	subs	r2, #1
 801f484:	18cb      	adds	r3, r1, r3
 801f486:	9310      	str	r3, [sp, #64]	@ 0x40
 801f488:	ab09      	add	r3, sp, #36	@ 0x24
 801f48a:	9304      	str	r3, [sp, #16]
 801f48c:	ab08      	add	r3, sp, #32
 801f48e:	9303      	str	r3, [sp, #12]
 801f490:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f492:	9200      	str	r2, [sp, #0]
 801f494:	9302      	str	r3, [sp, #8]
 801f496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f498:	0032      	movs	r2, r6
 801f49a:	9301      	str	r3, [sp, #4]
 801f49c:	003b      	movs	r3, r7
 801f49e:	f001 f82b 	bl	80204f8 <_dtoa_r>
 801f4a2:	0004      	movs	r4, r0
 801f4a4:	2d47      	cmp	r5, #71	@ 0x47
 801f4a6:	d11b      	bne.n	801f4e0 <__cvt+0x90>
 801f4a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f4aa:	07db      	lsls	r3, r3, #31
 801f4ac:	d511      	bpl.n	801f4d2 <__cvt+0x82>
 801f4ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f4b0:	18c3      	adds	r3, r0, r3
 801f4b2:	9307      	str	r3, [sp, #28]
 801f4b4:	2200      	movs	r2, #0
 801f4b6:	2300      	movs	r3, #0
 801f4b8:	0030      	movs	r0, r6
 801f4ba:	0039      	movs	r1, r7
 801f4bc:	f7e0 fff8 	bl	80004b0 <__aeabi_dcmpeq>
 801f4c0:	2800      	cmp	r0, #0
 801f4c2:	d001      	beq.n	801f4c8 <__cvt+0x78>
 801f4c4:	9b07      	ldr	r3, [sp, #28]
 801f4c6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4c8:	2230      	movs	r2, #48	@ 0x30
 801f4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4cc:	9907      	ldr	r1, [sp, #28]
 801f4ce:	428b      	cmp	r3, r1
 801f4d0:	d320      	bcc.n	801f514 <__cvt+0xc4>
 801f4d2:	0020      	movs	r0, r4
 801f4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f4d8:	1b1b      	subs	r3, r3, r4
 801f4da:	6013      	str	r3, [r2, #0]
 801f4dc:	b00b      	add	sp, #44	@ 0x2c
 801f4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f4e2:	18c3      	adds	r3, r0, r3
 801f4e4:	9307      	str	r3, [sp, #28]
 801f4e6:	2d46      	cmp	r5, #70	@ 0x46
 801f4e8:	d1e4      	bne.n	801f4b4 <__cvt+0x64>
 801f4ea:	7803      	ldrb	r3, [r0, #0]
 801f4ec:	2b30      	cmp	r3, #48	@ 0x30
 801f4ee:	d10c      	bne.n	801f50a <__cvt+0xba>
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	2300      	movs	r3, #0
 801f4f4:	0030      	movs	r0, r6
 801f4f6:	0039      	movs	r1, r7
 801f4f8:	f7e0 ffda 	bl	80004b0 <__aeabi_dcmpeq>
 801f4fc:	2800      	cmp	r0, #0
 801f4fe:	d104      	bne.n	801f50a <__cvt+0xba>
 801f500:	2301      	movs	r3, #1
 801f502:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f504:	1a9b      	subs	r3, r3, r2
 801f506:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f508:	6013      	str	r3, [r2, #0]
 801f50a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f50c:	9a07      	ldr	r2, [sp, #28]
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	18d3      	adds	r3, r2, r3
 801f512:	e7ce      	b.n	801f4b2 <__cvt+0x62>
 801f514:	1c59      	adds	r1, r3, #1
 801f516:	9109      	str	r1, [sp, #36]	@ 0x24
 801f518:	701a      	strb	r2, [r3, #0]
 801f51a:	e7d6      	b.n	801f4ca <__cvt+0x7a>

0801f51c <__exponent>:
 801f51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f51e:	232b      	movs	r3, #43	@ 0x2b
 801f520:	0005      	movs	r5, r0
 801f522:	000c      	movs	r4, r1
 801f524:	b085      	sub	sp, #20
 801f526:	7002      	strb	r2, [r0, #0]
 801f528:	2900      	cmp	r1, #0
 801f52a:	da01      	bge.n	801f530 <__exponent+0x14>
 801f52c:	424c      	negs	r4, r1
 801f52e:	3302      	adds	r3, #2
 801f530:	706b      	strb	r3, [r5, #1]
 801f532:	2c09      	cmp	r4, #9
 801f534:	dd2c      	ble.n	801f590 <__exponent+0x74>
 801f536:	ab02      	add	r3, sp, #8
 801f538:	1dde      	adds	r6, r3, #7
 801f53a:	0020      	movs	r0, r4
 801f53c:	210a      	movs	r1, #10
 801f53e:	f7e0 ffa1 	bl	8000484 <__aeabi_idivmod>
 801f542:	0037      	movs	r7, r6
 801f544:	3130      	adds	r1, #48	@ 0x30
 801f546:	3e01      	subs	r6, #1
 801f548:	0020      	movs	r0, r4
 801f54a:	7031      	strb	r1, [r6, #0]
 801f54c:	210a      	movs	r1, #10
 801f54e:	9401      	str	r4, [sp, #4]
 801f550:	f7e0 feb2 	bl	80002b8 <__divsi3>
 801f554:	9b01      	ldr	r3, [sp, #4]
 801f556:	0004      	movs	r4, r0
 801f558:	2b63      	cmp	r3, #99	@ 0x63
 801f55a:	dcee      	bgt.n	801f53a <__exponent+0x1e>
 801f55c:	1eba      	subs	r2, r7, #2
 801f55e:	1ca8      	adds	r0, r5, #2
 801f560:	0001      	movs	r1, r0
 801f562:	0013      	movs	r3, r2
 801f564:	3430      	adds	r4, #48	@ 0x30
 801f566:	7014      	strb	r4, [r2, #0]
 801f568:	ac02      	add	r4, sp, #8
 801f56a:	3407      	adds	r4, #7
 801f56c:	429c      	cmp	r4, r3
 801f56e:	d80a      	bhi.n	801f586 <__exponent+0x6a>
 801f570:	2300      	movs	r3, #0
 801f572:	42a2      	cmp	r2, r4
 801f574:	d803      	bhi.n	801f57e <__exponent+0x62>
 801f576:	3309      	adds	r3, #9
 801f578:	aa02      	add	r2, sp, #8
 801f57a:	189b      	adds	r3, r3, r2
 801f57c:	1bdb      	subs	r3, r3, r7
 801f57e:	18c0      	adds	r0, r0, r3
 801f580:	1b40      	subs	r0, r0, r5
 801f582:	b005      	add	sp, #20
 801f584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f586:	781c      	ldrb	r4, [r3, #0]
 801f588:	3301      	adds	r3, #1
 801f58a:	700c      	strb	r4, [r1, #0]
 801f58c:	3101      	adds	r1, #1
 801f58e:	e7eb      	b.n	801f568 <__exponent+0x4c>
 801f590:	2330      	movs	r3, #48	@ 0x30
 801f592:	18e4      	adds	r4, r4, r3
 801f594:	70ab      	strb	r3, [r5, #2]
 801f596:	1d28      	adds	r0, r5, #4
 801f598:	70ec      	strb	r4, [r5, #3]
 801f59a:	e7f1      	b.n	801f580 <__exponent+0x64>

0801f59c <_printf_float>:
 801f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f59e:	b097      	sub	sp, #92	@ 0x5c
 801f5a0:	000d      	movs	r5, r1
 801f5a2:	920a      	str	r2, [sp, #40]	@ 0x28
 801f5a4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f5a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f5a8:	9009      	str	r0, [sp, #36]	@ 0x24
 801f5aa:	f000 fe7d 	bl	80202a8 <_localeconv_r>
 801f5ae:	6803      	ldr	r3, [r0, #0]
 801f5b0:	0018      	movs	r0, r3
 801f5b2:	930d      	str	r3, [sp, #52]	@ 0x34
 801f5b4:	f7e0 fdda 	bl	800016c <strlen>
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f5bc:	9314      	str	r3, [sp, #80]	@ 0x50
 801f5be:	7e2b      	ldrb	r3, [r5, #24]
 801f5c0:	2207      	movs	r2, #7
 801f5c2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f5c4:	682b      	ldr	r3, [r5, #0]
 801f5c6:	930e      	str	r3, [sp, #56]	@ 0x38
 801f5c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f5ca:	6823      	ldr	r3, [r4, #0]
 801f5cc:	05c9      	lsls	r1, r1, #23
 801f5ce:	d545      	bpl.n	801f65c <_printf_float+0xc0>
 801f5d0:	189b      	adds	r3, r3, r2
 801f5d2:	4393      	bics	r3, r2
 801f5d4:	001a      	movs	r2, r3
 801f5d6:	3208      	adds	r2, #8
 801f5d8:	6022      	str	r2, [r4, #0]
 801f5da:	2201      	movs	r2, #1
 801f5dc:	681e      	ldr	r6, [r3, #0]
 801f5de:	685f      	ldr	r7, [r3, #4]
 801f5e0:	007b      	lsls	r3, r7, #1
 801f5e2:	085b      	lsrs	r3, r3, #1
 801f5e4:	9311      	str	r3, [sp, #68]	@ 0x44
 801f5e6:	9610      	str	r6, [sp, #64]	@ 0x40
 801f5e8:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f5ea:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f5ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f5ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f5f0:	4ba7      	ldr	r3, [pc, #668]	@ (801f890 <_printf_float+0x2f4>)
 801f5f2:	4252      	negs	r2, r2
 801f5f4:	f7e3 fe86 	bl	8003304 <__aeabi_dcmpun>
 801f5f8:	2800      	cmp	r0, #0
 801f5fa:	d131      	bne.n	801f660 <_printf_float+0xc4>
 801f5fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f5fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f600:	2201      	movs	r2, #1
 801f602:	4ba3      	ldr	r3, [pc, #652]	@ (801f890 <_printf_float+0x2f4>)
 801f604:	4252      	negs	r2, r2
 801f606:	f7e0 ff63 	bl	80004d0 <__aeabi_dcmple>
 801f60a:	2800      	cmp	r0, #0
 801f60c:	d128      	bne.n	801f660 <_printf_float+0xc4>
 801f60e:	2200      	movs	r2, #0
 801f610:	2300      	movs	r3, #0
 801f612:	0030      	movs	r0, r6
 801f614:	0039      	movs	r1, r7
 801f616:	f7e0 ff51 	bl	80004bc <__aeabi_dcmplt>
 801f61a:	2800      	cmp	r0, #0
 801f61c:	d003      	beq.n	801f626 <_printf_float+0x8a>
 801f61e:	002b      	movs	r3, r5
 801f620:	222d      	movs	r2, #45	@ 0x2d
 801f622:	3343      	adds	r3, #67	@ 0x43
 801f624:	701a      	strb	r2, [r3, #0]
 801f626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f628:	4f9a      	ldr	r7, [pc, #616]	@ (801f894 <_printf_float+0x2f8>)
 801f62a:	2b47      	cmp	r3, #71	@ 0x47
 801f62c:	d900      	bls.n	801f630 <_printf_float+0x94>
 801f62e:	4f9a      	ldr	r7, [pc, #616]	@ (801f898 <_printf_float+0x2fc>)
 801f630:	2303      	movs	r3, #3
 801f632:	2400      	movs	r4, #0
 801f634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f636:	612b      	str	r3, [r5, #16]
 801f638:	3301      	adds	r3, #1
 801f63a:	439a      	bics	r2, r3
 801f63c:	602a      	str	r2, [r5, #0]
 801f63e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f640:	0029      	movs	r1, r5
 801f642:	9300      	str	r3, [sp, #0]
 801f644:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f648:	aa15      	add	r2, sp, #84	@ 0x54
 801f64a:	f000 f9e5 	bl	801fa18 <_printf_common>
 801f64e:	3001      	adds	r0, #1
 801f650:	d000      	beq.n	801f654 <_printf_float+0xb8>
 801f652:	e09f      	b.n	801f794 <_printf_float+0x1f8>
 801f654:	2001      	movs	r0, #1
 801f656:	4240      	negs	r0, r0
 801f658:	b017      	add	sp, #92	@ 0x5c
 801f65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f65c:	3307      	adds	r3, #7
 801f65e:	e7b8      	b.n	801f5d2 <_printf_float+0x36>
 801f660:	0032      	movs	r2, r6
 801f662:	003b      	movs	r3, r7
 801f664:	0030      	movs	r0, r6
 801f666:	0039      	movs	r1, r7
 801f668:	f7e3 fe4c 	bl	8003304 <__aeabi_dcmpun>
 801f66c:	2800      	cmp	r0, #0
 801f66e:	d00b      	beq.n	801f688 <_printf_float+0xec>
 801f670:	2f00      	cmp	r7, #0
 801f672:	da03      	bge.n	801f67c <_printf_float+0xe0>
 801f674:	002b      	movs	r3, r5
 801f676:	222d      	movs	r2, #45	@ 0x2d
 801f678:	3343      	adds	r3, #67	@ 0x43
 801f67a:	701a      	strb	r2, [r3, #0]
 801f67c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f67e:	4f87      	ldr	r7, [pc, #540]	@ (801f89c <_printf_float+0x300>)
 801f680:	2b47      	cmp	r3, #71	@ 0x47
 801f682:	d9d5      	bls.n	801f630 <_printf_float+0x94>
 801f684:	4f86      	ldr	r7, [pc, #536]	@ (801f8a0 <_printf_float+0x304>)
 801f686:	e7d3      	b.n	801f630 <_printf_float+0x94>
 801f688:	2220      	movs	r2, #32
 801f68a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f68c:	686b      	ldr	r3, [r5, #4]
 801f68e:	4394      	bics	r4, r2
 801f690:	1c5a      	adds	r2, r3, #1
 801f692:	d146      	bne.n	801f722 <_printf_float+0x186>
 801f694:	3307      	adds	r3, #7
 801f696:	606b      	str	r3, [r5, #4]
 801f698:	2380      	movs	r3, #128	@ 0x80
 801f69a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f69c:	00db      	lsls	r3, r3, #3
 801f69e:	4313      	orrs	r3, r2
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	602b      	str	r3, [r5, #0]
 801f6a4:	9206      	str	r2, [sp, #24]
 801f6a6:	aa14      	add	r2, sp, #80	@ 0x50
 801f6a8:	9205      	str	r2, [sp, #20]
 801f6aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f6ac:	a90a      	add	r1, sp, #40	@ 0x28
 801f6ae:	9204      	str	r2, [sp, #16]
 801f6b0:	aa13      	add	r2, sp, #76	@ 0x4c
 801f6b2:	9203      	str	r2, [sp, #12]
 801f6b4:	2223      	movs	r2, #35	@ 0x23
 801f6b6:	1852      	adds	r2, r2, r1
 801f6b8:	9202      	str	r2, [sp, #8]
 801f6ba:	9301      	str	r3, [sp, #4]
 801f6bc:	686b      	ldr	r3, [r5, #4]
 801f6be:	0032      	movs	r2, r6
 801f6c0:	9300      	str	r3, [sp, #0]
 801f6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6c4:	003b      	movs	r3, r7
 801f6c6:	f7ff fec3 	bl	801f450 <__cvt>
 801f6ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f6cc:	0007      	movs	r7, r0
 801f6ce:	2c47      	cmp	r4, #71	@ 0x47
 801f6d0:	d12d      	bne.n	801f72e <_printf_float+0x192>
 801f6d2:	1cd3      	adds	r3, r2, #3
 801f6d4:	db02      	blt.n	801f6dc <_printf_float+0x140>
 801f6d6:	686b      	ldr	r3, [r5, #4]
 801f6d8:	429a      	cmp	r2, r3
 801f6da:	dd48      	ble.n	801f76e <_printf_float+0x1d2>
 801f6dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f6e0:	3b02      	subs	r3, #2
 801f6e2:	b2db      	uxtb	r3, r3
 801f6e4:	930c      	str	r3, [sp, #48]	@ 0x30
 801f6e6:	0028      	movs	r0, r5
 801f6e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f6ea:	3901      	subs	r1, #1
 801f6ec:	3050      	adds	r0, #80	@ 0x50
 801f6ee:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f6f0:	f7ff ff14 	bl	801f51c <__exponent>
 801f6f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f6f6:	0004      	movs	r4, r0
 801f6f8:	1813      	adds	r3, r2, r0
 801f6fa:	612b      	str	r3, [r5, #16]
 801f6fc:	2a01      	cmp	r2, #1
 801f6fe:	dc02      	bgt.n	801f706 <_printf_float+0x16a>
 801f700:	682a      	ldr	r2, [r5, #0]
 801f702:	07d2      	lsls	r2, r2, #31
 801f704:	d501      	bpl.n	801f70a <_printf_float+0x16e>
 801f706:	3301      	adds	r3, #1
 801f708:	612b      	str	r3, [r5, #16]
 801f70a:	2323      	movs	r3, #35	@ 0x23
 801f70c:	aa0a      	add	r2, sp, #40	@ 0x28
 801f70e:	189b      	adds	r3, r3, r2
 801f710:	781b      	ldrb	r3, [r3, #0]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d100      	bne.n	801f718 <_printf_float+0x17c>
 801f716:	e792      	b.n	801f63e <_printf_float+0xa2>
 801f718:	002b      	movs	r3, r5
 801f71a:	222d      	movs	r2, #45	@ 0x2d
 801f71c:	3343      	adds	r3, #67	@ 0x43
 801f71e:	701a      	strb	r2, [r3, #0]
 801f720:	e78d      	b.n	801f63e <_printf_float+0xa2>
 801f722:	2c47      	cmp	r4, #71	@ 0x47
 801f724:	d1b8      	bne.n	801f698 <_printf_float+0xfc>
 801f726:	2b00      	cmp	r3, #0
 801f728:	d1b6      	bne.n	801f698 <_printf_float+0xfc>
 801f72a:	3301      	adds	r3, #1
 801f72c:	e7b3      	b.n	801f696 <_printf_float+0xfa>
 801f72e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f730:	0011      	movs	r1, r2
 801f732:	2b65      	cmp	r3, #101	@ 0x65
 801f734:	d9d7      	bls.n	801f6e6 <_printf_float+0x14a>
 801f736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f738:	2b66      	cmp	r3, #102	@ 0x66
 801f73a:	d11a      	bne.n	801f772 <_printf_float+0x1d6>
 801f73c:	686b      	ldr	r3, [r5, #4]
 801f73e:	2a00      	cmp	r2, #0
 801f740:	dd09      	ble.n	801f756 <_printf_float+0x1ba>
 801f742:	612a      	str	r2, [r5, #16]
 801f744:	2b00      	cmp	r3, #0
 801f746:	d102      	bne.n	801f74e <_printf_float+0x1b2>
 801f748:	6829      	ldr	r1, [r5, #0]
 801f74a:	07c9      	lsls	r1, r1, #31
 801f74c:	d50b      	bpl.n	801f766 <_printf_float+0x1ca>
 801f74e:	3301      	adds	r3, #1
 801f750:	189b      	adds	r3, r3, r2
 801f752:	612b      	str	r3, [r5, #16]
 801f754:	e007      	b.n	801f766 <_printf_float+0x1ca>
 801f756:	2b00      	cmp	r3, #0
 801f758:	d103      	bne.n	801f762 <_printf_float+0x1c6>
 801f75a:	2201      	movs	r2, #1
 801f75c:	6829      	ldr	r1, [r5, #0]
 801f75e:	4211      	tst	r1, r2
 801f760:	d000      	beq.n	801f764 <_printf_float+0x1c8>
 801f762:	1c9a      	adds	r2, r3, #2
 801f764:	612a      	str	r2, [r5, #16]
 801f766:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f768:	2400      	movs	r4, #0
 801f76a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f76c:	e7cd      	b.n	801f70a <_printf_float+0x16e>
 801f76e:	2367      	movs	r3, #103	@ 0x67
 801f770:	930c      	str	r3, [sp, #48]	@ 0x30
 801f772:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f774:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f776:	4299      	cmp	r1, r3
 801f778:	db06      	blt.n	801f788 <_printf_float+0x1ec>
 801f77a:	682b      	ldr	r3, [r5, #0]
 801f77c:	6129      	str	r1, [r5, #16]
 801f77e:	07db      	lsls	r3, r3, #31
 801f780:	d5f1      	bpl.n	801f766 <_printf_float+0x1ca>
 801f782:	3101      	adds	r1, #1
 801f784:	6129      	str	r1, [r5, #16]
 801f786:	e7ee      	b.n	801f766 <_printf_float+0x1ca>
 801f788:	2201      	movs	r2, #1
 801f78a:	2900      	cmp	r1, #0
 801f78c:	dce0      	bgt.n	801f750 <_printf_float+0x1b4>
 801f78e:	1892      	adds	r2, r2, r2
 801f790:	1a52      	subs	r2, r2, r1
 801f792:	e7dd      	b.n	801f750 <_printf_float+0x1b4>
 801f794:	682a      	ldr	r2, [r5, #0]
 801f796:	0553      	lsls	r3, r2, #21
 801f798:	d408      	bmi.n	801f7ac <_printf_float+0x210>
 801f79a:	692b      	ldr	r3, [r5, #16]
 801f79c:	003a      	movs	r2, r7
 801f79e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7a4:	47a0      	blx	r4
 801f7a6:	3001      	adds	r0, #1
 801f7a8:	d129      	bne.n	801f7fe <_printf_float+0x262>
 801f7aa:	e753      	b.n	801f654 <_printf_float+0xb8>
 801f7ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7ae:	2b65      	cmp	r3, #101	@ 0x65
 801f7b0:	d800      	bhi.n	801f7b4 <_printf_float+0x218>
 801f7b2:	e0da      	b.n	801f96a <_printf_float+0x3ce>
 801f7b4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f7b6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f7b8:	2200      	movs	r2, #0
 801f7ba:	2300      	movs	r3, #0
 801f7bc:	f7e0 fe78 	bl	80004b0 <__aeabi_dcmpeq>
 801f7c0:	2800      	cmp	r0, #0
 801f7c2:	d033      	beq.n	801f82c <_printf_float+0x290>
 801f7c4:	2301      	movs	r3, #1
 801f7c6:	4a37      	ldr	r2, [pc, #220]	@ (801f8a4 <_printf_float+0x308>)
 801f7c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7ce:	47a0      	blx	r4
 801f7d0:	3001      	adds	r0, #1
 801f7d2:	d100      	bne.n	801f7d6 <_printf_float+0x23a>
 801f7d4:	e73e      	b.n	801f654 <_printf_float+0xb8>
 801f7d6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f7d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7da:	42b3      	cmp	r3, r6
 801f7dc:	db02      	blt.n	801f7e4 <_printf_float+0x248>
 801f7de:	682b      	ldr	r3, [r5, #0]
 801f7e0:	07db      	lsls	r3, r3, #31
 801f7e2:	d50c      	bpl.n	801f7fe <_printf_float+0x262>
 801f7e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f7ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7ee:	47a0      	blx	r4
 801f7f0:	2400      	movs	r4, #0
 801f7f2:	3001      	adds	r0, #1
 801f7f4:	d100      	bne.n	801f7f8 <_printf_float+0x25c>
 801f7f6:	e72d      	b.n	801f654 <_printf_float+0xb8>
 801f7f8:	1e73      	subs	r3, r6, #1
 801f7fa:	42a3      	cmp	r3, r4
 801f7fc:	dc0a      	bgt.n	801f814 <_printf_float+0x278>
 801f7fe:	682b      	ldr	r3, [r5, #0]
 801f800:	079b      	lsls	r3, r3, #30
 801f802:	d500      	bpl.n	801f806 <_printf_float+0x26a>
 801f804:	e105      	b.n	801fa12 <_printf_float+0x476>
 801f806:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f808:	68e8      	ldr	r0, [r5, #12]
 801f80a:	4298      	cmp	r0, r3
 801f80c:	db00      	blt.n	801f810 <_printf_float+0x274>
 801f80e:	e723      	b.n	801f658 <_printf_float+0xbc>
 801f810:	0018      	movs	r0, r3
 801f812:	e721      	b.n	801f658 <_printf_float+0xbc>
 801f814:	002a      	movs	r2, r5
 801f816:	2301      	movs	r3, #1
 801f818:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f81c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f81e:	321a      	adds	r2, #26
 801f820:	47b8      	blx	r7
 801f822:	3001      	adds	r0, #1
 801f824:	d100      	bne.n	801f828 <_printf_float+0x28c>
 801f826:	e715      	b.n	801f654 <_printf_float+0xb8>
 801f828:	3401      	adds	r4, #1
 801f82a:	e7e5      	b.n	801f7f8 <_printf_float+0x25c>
 801f82c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f82e:	2b00      	cmp	r3, #0
 801f830:	dc3a      	bgt.n	801f8a8 <_printf_float+0x30c>
 801f832:	2301      	movs	r3, #1
 801f834:	4a1b      	ldr	r2, [pc, #108]	@ (801f8a4 <_printf_float+0x308>)
 801f836:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f838:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f83a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f83c:	47a0      	blx	r4
 801f83e:	3001      	adds	r0, #1
 801f840:	d100      	bne.n	801f844 <_printf_float+0x2a8>
 801f842:	e707      	b.n	801f654 <_printf_float+0xb8>
 801f844:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f846:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f848:	4333      	orrs	r3, r6
 801f84a:	d102      	bne.n	801f852 <_printf_float+0x2b6>
 801f84c:	682b      	ldr	r3, [r5, #0]
 801f84e:	07db      	lsls	r3, r3, #31
 801f850:	d5d5      	bpl.n	801f7fe <_printf_float+0x262>
 801f852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f856:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f858:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f85a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f85c:	47a0      	blx	r4
 801f85e:	2300      	movs	r3, #0
 801f860:	3001      	adds	r0, #1
 801f862:	d100      	bne.n	801f866 <_printf_float+0x2ca>
 801f864:	e6f6      	b.n	801f654 <_printf_float+0xb8>
 801f866:	930c      	str	r3, [sp, #48]	@ 0x30
 801f868:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f86a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f86c:	425b      	negs	r3, r3
 801f86e:	4293      	cmp	r3, r2
 801f870:	dc01      	bgt.n	801f876 <_printf_float+0x2da>
 801f872:	0033      	movs	r3, r6
 801f874:	e792      	b.n	801f79c <_printf_float+0x200>
 801f876:	002a      	movs	r2, r5
 801f878:	2301      	movs	r3, #1
 801f87a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f87c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f87e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f880:	321a      	adds	r2, #26
 801f882:	47a0      	blx	r4
 801f884:	3001      	adds	r0, #1
 801f886:	d100      	bne.n	801f88a <_printf_float+0x2ee>
 801f888:	e6e4      	b.n	801f654 <_printf_float+0xb8>
 801f88a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f88c:	3301      	adds	r3, #1
 801f88e:	e7ea      	b.n	801f866 <_printf_float+0x2ca>
 801f890:	7fefffff 	.word	0x7fefffff
 801f894:	08025d01 	.word	0x08025d01
 801f898:	08025d05 	.word	0x08025d05
 801f89c:	08025d09 	.word	0x08025d09
 801f8a0:	08025d0d 	.word	0x08025d0d
 801f8a4:	08025d11 	.word	0x08025d11
 801f8a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f8aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f8ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8ae:	429e      	cmp	r6, r3
 801f8b0:	dd00      	ble.n	801f8b4 <_printf_float+0x318>
 801f8b2:	001e      	movs	r6, r3
 801f8b4:	2e00      	cmp	r6, #0
 801f8b6:	dc31      	bgt.n	801f91c <_printf_float+0x380>
 801f8b8:	43f3      	mvns	r3, r6
 801f8ba:	2400      	movs	r4, #0
 801f8bc:	17db      	asrs	r3, r3, #31
 801f8be:	4033      	ands	r3, r6
 801f8c0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f8c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8c6:	1af3      	subs	r3, r6, r3
 801f8c8:	42a3      	cmp	r3, r4
 801f8ca:	dc30      	bgt.n	801f92e <_printf_float+0x392>
 801f8cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8d0:	429a      	cmp	r2, r3
 801f8d2:	dc38      	bgt.n	801f946 <_printf_float+0x3aa>
 801f8d4:	682b      	ldr	r3, [r5, #0]
 801f8d6:	07db      	lsls	r3, r3, #31
 801f8d8:	d435      	bmi.n	801f946 <_printf_float+0x3aa>
 801f8da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f8dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8e0:	1b9b      	subs	r3, r3, r6
 801f8e2:	1b14      	subs	r4, r2, r4
 801f8e4:	429c      	cmp	r4, r3
 801f8e6:	dd00      	ble.n	801f8ea <_printf_float+0x34e>
 801f8e8:	001c      	movs	r4, r3
 801f8ea:	2c00      	cmp	r4, #0
 801f8ec:	dc34      	bgt.n	801f958 <_printf_float+0x3bc>
 801f8ee:	43e3      	mvns	r3, r4
 801f8f0:	2600      	movs	r6, #0
 801f8f2:	17db      	asrs	r3, r3, #31
 801f8f4:	401c      	ands	r4, r3
 801f8f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8fa:	1ad3      	subs	r3, r2, r3
 801f8fc:	1b1b      	subs	r3, r3, r4
 801f8fe:	42b3      	cmp	r3, r6
 801f900:	dc00      	bgt.n	801f904 <_printf_float+0x368>
 801f902:	e77c      	b.n	801f7fe <_printf_float+0x262>
 801f904:	002a      	movs	r2, r5
 801f906:	2301      	movs	r3, #1
 801f908:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f90a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f90c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f90e:	321a      	adds	r2, #26
 801f910:	47b8      	blx	r7
 801f912:	3001      	adds	r0, #1
 801f914:	d100      	bne.n	801f918 <_printf_float+0x37c>
 801f916:	e69d      	b.n	801f654 <_printf_float+0xb8>
 801f918:	3601      	adds	r6, #1
 801f91a:	e7ec      	b.n	801f8f6 <_printf_float+0x35a>
 801f91c:	0033      	movs	r3, r6
 801f91e:	003a      	movs	r2, r7
 801f920:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f924:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f926:	47a0      	blx	r4
 801f928:	3001      	adds	r0, #1
 801f92a:	d1c5      	bne.n	801f8b8 <_printf_float+0x31c>
 801f92c:	e692      	b.n	801f654 <_printf_float+0xb8>
 801f92e:	002a      	movs	r2, r5
 801f930:	2301      	movs	r3, #1
 801f932:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f934:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f936:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f938:	321a      	adds	r2, #26
 801f93a:	47b0      	blx	r6
 801f93c:	3001      	adds	r0, #1
 801f93e:	d100      	bne.n	801f942 <_printf_float+0x3a6>
 801f940:	e688      	b.n	801f654 <_printf_float+0xb8>
 801f942:	3401      	adds	r4, #1
 801f944:	e7bd      	b.n	801f8c2 <_printf_float+0x326>
 801f946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f94a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f94c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f94e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f950:	47a0      	blx	r4
 801f952:	3001      	adds	r0, #1
 801f954:	d1c1      	bne.n	801f8da <_printf_float+0x33e>
 801f956:	e67d      	b.n	801f654 <_printf_float+0xb8>
 801f958:	19ba      	adds	r2, r7, r6
 801f95a:	0023      	movs	r3, r4
 801f95c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f95e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f960:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f962:	47b0      	blx	r6
 801f964:	3001      	adds	r0, #1
 801f966:	d1c2      	bne.n	801f8ee <_printf_float+0x352>
 801f968:	e674      	b.n	801f654 <_printf_float+0xb8>
 801f96a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f96c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f96e:	2b01      	cmp	r3, #1
 801f970:	dc02      	bgt.n	801f978 <_printf_float+0x3dc>
 801f972:	2301      	movs	r3, #1
 801f974:	421a      	tst	r2, r3
 801f976:	d039      	beq.n	801f9ec <_printf_float+0x450>
 801f978:	2301      	movs	r3, #1
 801f97a:	003a      	movs	r2, r7
 801f97c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f980:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f982:	47b0      	blx	r6
 801f984:	3001      	adds	r0, #1
 801f986:	d100      	bne.n	801f98a <_printf_float+0x3ee>
 801f988:	e664      	b.n	801f654 <_printf_float+0xb8>
 801f98a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f98c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f98e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f990:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f992:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f994:	47b0      	blx	r6
 801f996:	3001      	adds	r0, #1
 801f998:	d100      	bne.n	801f99c <_printf_float+0x400>
 801f99a:	e65b      	b.n	801f654 <_printf_float+0xb8>
 801f99c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f99e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f9a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9a2:	2200      	movs	r2, #0
 801f9a4:	3b01      	subs	r3, #1
 801f9a6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9a8:	2300      	movs	r3, #0
 801f9aa:	f7e0 fd81 	bl	80004b0 <__aeabi_dcmpeq>
 801f9ae:	2800      	cmp	r0, #0
 801f9b0:	d11a      	bne.n	801f9e8 <_printf_float+0x44c>
 801f9b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9b4:	1c7a      	adds	r2, r7, #1
 801f9b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f9bc:	47b0      	blx	r6
 801f9be:	3001      	adds	r0, #1
 801f9c0:	d10e      	bne.n	801f9e0 <_printf_float+0x444>
 801f9c2:	e647      	b.n	801f654 <_printf_float+0xb8>
 801f9c4:	002a      	movs	r2, r5
 801f9c6:	2301      	movs	r3, #1
 801f9c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f9ce:	321a      	adds	r2, #26
 801f9d0:	47b8      	blx	r7
 801f9d2:	3001      	adds	r0, #1
 801f9d4:	d100      	bne.n	801f9d8 <_printf_float+0x43c>
 801f9d6:	e63d      	b.n	801f654 <_printf_float+0xb8>
 801f9d8:	3601      	adds	r6, #1
 801f9da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9dc:	429e      	cmp	r6, r3
 801f9de:	dbf1      	blt.n	801f9c4 <_printf_float+0x428>
 801f9e0:	002a      	movs	r2, r5
 801f9e2:	0023      	movs	r3, r4
 801f9e4:	3250      	adds	r2, #80	@ 0x50
 801f9e6:	e6da      	b.n	801f79e <_printf_float+0x202>
 801f9e8:	2600      	movs	r6, #0
 801f9ea:	e7f6      	b.n	801f9da <_printf_float+0x43e>
 801f9ec:	003a      	movs	r2, r7
 801f9ee:	e7e2      	b.n	801f9b6 <_printf_float+0x41a>
 801f9f0:	002a      	movs	r2, r5
 801f9f2:	2301      	movs	r3, #1
 801f9f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f9fa:	3219      	adds	r2, #25
 801f9fc:	47b0      	blx	r6
 801f9fe:	3001      	adds	r0, #1
 801fa00:	d100      	bne.n	801fa04 <_printf_float+0x468>
 801fa02:	e627      	b.n	801f654 <_printf_float+0xb8>
 801fa04:	3401      	adds	r4, #1
 801fa06:	68eb      	ldr	r3, [r5, #12]
 801fa08:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fa0a:	1a9b      	subs	r3, r3, r2
 801fa0c:	42a3      	cmp	r3, r4
 801fa0e:	dcef      	bgt.n	801f9f0 <_printf_float+0x454>
 801fa10:	e6f9      	b.n	801f806 <_printf_float+0x26a>
 801fa12:	2400      	movs	r4, #0
 801fa14:	e7f7      	b.n	801fa06 <_printf_float+0x46a>
 801fa16:	46c0      	nop			@ (mov r8, r8)

0801fa18 <_printf_common>:
 801fa18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa1a:	0016      	movs	r6, r2
 801fa1c:	9301      	str	r3, [sp, #4]
 801fa1e:	688a      	ldr	r2, [r1, #8]
 801fa20:	690b      	ldr	r3, [r1, #16]
 801fa22:	000c      	movs	r4, r1
 801fa24:	9000      	str	r0, [sp, #0]
 801fa26:	4293      	cmp	r3, r2
 801fa28:	da00      	bge.n	801fa2c <_printf_common+0x14>
 801fa2a:	0013      	movs	r3, r2
 801fa2c:	0022      	movs	r2, r4
 801fa2e:	6033      	str	r3, [r6, #0]
 801fa30:	3243      	adds	r2, #67	@ 0x43
 801fa32:	7812      	ldrb	r2, [r2, #0]
 801fa34:	2a00      	cmp	r2, #0
 801fa36:	d001      	beq.n	801fa3c <_printf_common+0x24>
 801fa38:	3301      	adds	r3, #1
 801fa3a:	6033      	str	r3, [r6, #0]
 801fa3c:	6823      	ldr	r3, [r4, #0]
 801fa3e:	069b      	lsls	r3, r3, #26
 801fa40:	d502      	bpl.n	801fa48 <_printf_common+0x30>
 801fa42:	6833      	ldr	r3, [r6, #0]
 801fa44:	3302      	adds	r3, #2
 801fa46:	6033      	str	r3, [r6, #0]
 801fa48:	6822      	ldr	r2, [r4, #0]
 801fa4a:	2306      	movs	r3, #6
 801fa4c:	0015      	movs	r5, r2
 801fa4e:	401d      	ands	r5, r3
 801fa50:	421a      	tst	r2, r3
 801fa52:	d027      	beq.n	801faa4 <_printf_common+0x8c>
 801fa54:	0023      	movs	r3, r4
 801fa56:	3343      	adds	r3, #67	@ 0x43
 801fa58:	781b      	ldrb	r3, [r3, #0]
 801fa5a:	1e5a      	subs	r2, r3, #1
 801fa5c:	4193      	sbcs	r3, r2
 801fa5e:	6822      	ldr	r2, [r4, #0]
 801fa60:	0692      	lsls	r2, r2, #26
 801fa62:	d430      	bmi.n	801fac6 <_printf_common+0xae>
 801fa64:	0022      	movs	r2, r4
 801fa66:	9901      	ldr	r1, [sp, #4]
 801fa68:	9800      	ldr	r0, [sp, #0]
 801fa6a:	9d08      	ldr	r5, [sp, #32]
 801fa6c:	3243      	adds	r2, #67	@ 0x43
 801fa6e:	47a8      	blx	r5
 801fa70:	3001      	adds	r0, #1
 801fa72:	d025      	beq.n	801fac0 <_printf_common+0xa8>
 801fa74:	2206      	movs	r2, #6
 801fa76:	6823      	ldr	r3, [r4, #0]
 801fa78:	2500      	movs	r5, #0
 801fa7a:	4013      	ands	r3, r2
 801fa7c:	2b04      	cmp	r3, #4
 801fa7e:	d105      	bne.n	801fa8c <_printf_common+0x74>
 801fa80:	6833      	ldr	r3, [r6, #0]
 801fa82:	68e5      	ldr	r5, [r4, #12]
 801fa84:	1aed      	subs	r5, r5, r3
 801fa86:	43eb      	mvns	r3, r5
 801fa88:	17db      	asrs	r3, r3, #31
 801fa8a:	401d      	ands	r5, r3
 801fa8c:	68a3      	ldr	r3, [r4, #8]
 801fa8e:	6922      	ldr	r2, [r4, #16]
 801fa90:	4293      	cmp	r3, r2
 801fa92:	dd01      	ble.n	801fa98 <_printf_common+0x80>
 801fa94:	1a9b      	subs	r3, r3, r2
 801fa96:	18ed      	adds	r5, r5, r3
 801fa98:	2600      	movs	r6, #0
 801fa9a:	42b5      	cmp	r5, r6
 801fa9c:	d120      	bne.n	801fae0 <_printf_common+0xc8>
 801fa9e:	2000      	movs	r0, #0
 801faa0:	e010      	b.n	801fac4 <_printf_common+0xac>
 801faa2:	3501      	adds	r5, #1
 801faa4:	68e3      	ldr	r3, [r4, #12]
 801faa6:	6832      	ldr	r2, [r6, #0]
 801faa8:	1a9b      	subs	r3, r3, r2
 801faaa:	42ab      	cmp	r3, r5
 801faac:	ddd2      	ble.n	801fa54 <_printf_common+0x3c>
 801faae:	0022      	movs	r2, r4
 801fab0:	2301      	movs	r3, #1
 801fab2:	9901      	ldr	r1, [sp, #4]
 801fab4:	9800      	ldr	r0, [sp, #0]
 801fab6:	9f08      	ldr	r7, [sp, #32]
 801fab8:	3219      	adds	r2, #25
 801faba:	47b8      	blx	r7
 801fabc:	3001      	adds	r0, #1
 801fabe:	d1f0      	bne.n	801faa2 <_printf_common+0x8a>
 801fac0:	2001      	movs	r0, #1
 801fac2:	4240      	negs	r0, r0
 801fac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fac6:	2030      	movs	r0, #48	@ 0x30
 801fac8:	18e1      	adds	r1, r4, r3
 801faca:	3143      	adds	r1, #67	@ 0x43
 801facc:	7008      	strb	r0, [r1, #0]
 801face:	0021      	movs	r1, r4
 801fad0:	1c5a      	adds	r2, r3, #1
 801fad2:	3145      	adds	r1, #69	@ 0x45
 801fad4:	7809      	ldrb	r1, [r1, #0]
 801fad6:	18a2      	adds	r2, r4, r2
 801fad8:	3243      	adds	r2, #67	@ 0x43
 801fada:	3302      	adds	r3, #2
 801fadc:	7011      	strb	r1, [r2, #0]
 801fade:	e7c1      	b.n	801fa64 <_printf_common+0x4c>
 801fae0:	0022      	movs	r2, r4
 801fae2:	2301      	movs	r3, #1
 801fae4:	9901      	ldr	r1, [sp, #4]
 801fae6:	9800      	ldr	r0, [sp, #0]
 801fae8:	9f08      	ldr	r7, [sp, #32]
 801faea:	321a      	adds	r2, #26
 801faec:	47b8      	blx	r7
 801faee:	3001      	adds	r0, #1
 801faf0:	d0e6      	beq.n	801fac0 <_printf_common+0xa8>
 801faf2:	3601      	adds	r6, #1
 801faf4:	e7d1      	b.n	801fa9a <_printf_common+0x82>
	...

0801faf8 <_printf_i>:
 801faf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fafa:	b08b      	sub	sp, #44	@ 0x2c
 801fafc:	9206      	str	r2, [sp, #24]
 801fafe:	000a      	movs	r2, r1
 801fb00:	3243      	adds	r2, #67	@ 0x43
 801fb02:	9307      	str	r3, [sp, #28]
 801fb04:	9005      	str	r0, [sp, #20]
 801fb06:	9203      	str	r2, [sp, #12]
 801fb08:	7e0a      	ldrb	r2, [r1, #24]
 801fb0a:	000c      	movs	r4, r1
 801fb0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fb0e:	2a78      	cmp	r2, #120	@ 0x78
 801fb10:	d809      	bhi.n	801fb26 <_printf_i+0x2e>
 801fb12:	2a62      	cmp	r2, #98	@ 0x62
 801fb14:	d80b      	bhi.n	801fb2e <_printf_i+0x36>
 801fb16:	2a00      	cmp	r2, #0
 801fb18:	d100      	bne.n	801fb1c <_printf_i+0x24>
 801fb1a:	e0bc      	b.n	801fc96 <_printf_i+0x19e>
 801fb1c:	497b      	ldr	r1, [pc, #492]	@ (801fd0c <_printf_i+0x214>)
 801fb1e:	9104      	str	r1, [sp, #16]
 801fb20:	2a58      	cmp	r2, #88	@ 0x58
 801fb22:	d100      	bne.n	801fb26 <_printf_i+0x2e>
 801fb24:	e090      	b.n	801fc48 <_printf_i+0x150>
 801fb26:	0025      	movs	r5, r4
 801fb28:	3542      	adds	r5, #66	@ 0x42
 801fb2a:	702a      	strb	r2, [r5, #0]
 801fb2c:	e022      	b.n	801fb74 <_printf_i+0x7c>
 801fb2e:	0010      	movs	r0, r2
 801fb30:	3863      	subs	r0, #99	@ 0x63
 801fb32:	2815      	cmp	r0, #21
 801fb34:	d8f7      	bhi.n	801fb26 <_printf_i+0x2e>
 801fb36:	f7e0 fb2b 	bl	8000190 <__gnu_thumb1_case_shi>
 801fb3a:	0016      	.short	0x0016
 801fb3c:	fff6001f 	.word	0xfff6001f
 801fb40:	fff6fff6 	.word	0xfff6fff6
 801fb44:	001ffff6 	.word	0x001ffff6
 801fb48:	fff6fff6 	.word	0xfff6fff6
 801fb4c:	fff6fff6 	.word	0xfff6fff6
 801fb50:	003600a1 	.word	0x003600a1
 801fb54:	fff60080 	.word	0xfff60080
 801fb58:	00b2fff6 	.word	0x00b2fff6
 801fb5c:	0036fff6 	.word	0x0036fff6
 801fb60:	fff6fff6 	.word	0xfff6fff6
 801fb64:	0084      	.short	0x0084
 801fb66:	0025      	movs	r5, r4
 801fb68:	681a      	ldr	r2, [r3, #0]
 801fb6a:	3542      	adds	r5, #66	@ 0x42
 801fb6c:	1d11      	adds	r1, r2, #4
 801fb6e:	6019      	str	r1, [r3, #0]
 801fb70:	6813      	ldr	r3, [r2, #0]
 801fb72:	702b      	strb	r3, [r5, #0]
 801fb74:	2301      	movs	r3, #1
 801fb76:	e0a0      	b.n	801fcba <_printf_i+0x1c2>
 801fb78:	6818      	ldr	r0, [r3, #0]
 801fb7a:	6809      	ldr	r1, [r1, #0]
 801fb7c:	1d02      	adds	r2, r0, #4
 801fb7e:	060d      	lsls	r5, r1, #24
 801fb80:	d50b      	bpl.n	801fb9a <_printf_i+0xa2>
 801fb82:	6806      	ldr	r6, [r0, #0]
 801fb84:	601a      	str	r2, [r3, #0]
 801fb86:	2e00      	cmp	r6, #0
 801fb88:	da03      	bge.n	801fb92 <_printf_i+0x9a>
 801fb8a:	232d      	movs	r3, #45	@ 0x2d
 801fb8c:	9a03      	ldr	r2, [sp, #12]
 801fb8e:	4276      	negs	r6, r6
 801fb90:	7013      	strb	r3, [r2, #0]
 801fb92:	4b5e      	ldr	r3, [pc, #376]	@ (801fd0c <_printf_i+0x214>)
 801fb94:	270a      	movs	r7, #10
 801fb96:	9304      	str	r3, [sp, #16]
 801fb98:	e018      	b.n	801fbcc <_printf_i+0xd4>
 801fb9a:	6806      	ldr	r6, [r0, #0]
 801fb9c:	601a      	str	r2, [r3, #0]
 801fb9e:	0649      	lsls	r1, r1, #25
 801fba0:	d5f1      	bpl.n	801fb86 <_printf_i+0x8e>
 801fba2:	b236      	sxth	r6, r6
 801fba4:	e7ef      	b.n	801fb86 <_printf_i+0x8e>
 801fba6:	6808      	ldr	r0, [r1, #0]
 801fba8:	6819      	ldr	r1, [r3, #0]
 801fbaa:	c940      	ldmia	r1!, {r6}
 801fbac:	0605      	lsls	r5, r0, #24
 801fbae:	d402      	bmi.n	801fbb6 <_printf_i+0xbe>
 801fbb0:	0640      	lsls	r0, r0, #25
 801fbb2:	d500      	bpl.n	801fbb6 <_printf_i+0xbe>
 801fbb4:	b2b6      	uxth	r6, r6
 801fbb6:	6019      	str	r1, [r3, #0]
 801fbb8:	4b54      	ldr	r3, [pc, #336]	@ (801fd0c <_printf_i+0x214>)
 801fbba:	270a      	movs	r7, #10
 801fbbc:	9304      	str	r3, [sp, #16]
 801fbbe:	2a6f      	cmp	r2, #111	@ 0x6f
 801fbc0:	d100      	bne.n	801fbc4 <_printf_i+0xcc>
 801fbc2:	3f02      	subs	r7, #2
 801fbc4:	0023      	movs	r3, r4
 801fbc6:	2200      	movs	r2, #0
 801fbc8:	3343      	adds	r3, #67	@ 0x43
 801fbca:	701a      	strb	r2, [r3, #0]
 801fbcc:	6863      	ldr	r3, [r4, #4]
 801fbce:	60a3      	str	r3, [r4, #8]
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	db03      	blt.n	801fbdc <_printf_i+0xe4>
 801fbd4:	2104      	movs	r1, #4
 801fbd6:	6822      	ldr	r2, [r4, #0]
 801fbd8:	438a      	bics	r2, r1
 801fbda:	6022      	str	r2, [r4, #0]
 801fbdc:	2e00      	cmp	r6, #0
 801fbde:	d102      	bne.n	801fbe6 <_printf_i+0xee>
 801fbe0:	9d03      	ldr	r5, [sp, #12]
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d00c      	beq.n	801fc00 <_printf_i+0x108>
 801fbe6:	9d03      	ldr	r5, [sp, #12]
 801fbe8:	0030      	movs	r0, r6
 801fbea:	0039      	movs	r1, r7
 801fbec:	f7e0 fb60 	bl	80002b0 <__aeabi_uidivmod>
 801fbf0:	9b04      	ldr	r3, [sp, #16]
 801fbf2:	3d01      	subs	r5, #1
 801fbf4:	5c5b      	ldrb	r3, [r3, r1]
 801fbf6:	702b      	strb	r3, [r5, #0]
 801fbf8:	0033      	movs	r3, r6
 801fbfa:	0006      	movs	r6, r0
 801fbfc:	429f      	cmp	r7, r3
 801fbfe:	d9f3      	bls.n	801fbe8 <_printf_i+0xf0>
 801fc00:	2f08      	cmp	r7, #8
 801fc02:	d109      	bne.n	801fc18 <_printf_i+0x120>
 801fc04:	6823      	ldr	r3, [r4, #0]
 801fc06:	07db      	lsls	r3, r3, #31
 801fc08:	d506      	bpl.n	801fc18 <_printf_i+0x120>
 801fc0a:	6862      	ldr	r2, [r4, #4]
 801fc0c:	6923      	ldr	r3, [r4, #16]
 801fc0e:	429a      	cmp	r2, r3
 801fc10:	dc02      	bgt.n	801fc18 <_printf_i+0x120>
 801fc12:	2330      	movs	r3, #48	@ 0x30
 801fc14:	3d01      	subs	r5, #1
 801fc16:	702b      	strb	r3, [r5, #0]
 801fc18:	9b03      	ldr	r3, [sp, #12]
 801fc1a:	1b5b      	subs	r3, r3, r5
 801fc1c:	6123      	str	r3, [r4, #16]
 801fc1e:	9b07      	ldr	r3, [sp, #28]
 801fc20:	0021      	movs	r1, r4
 801fc22:	9300      	str	r3, [sp, #0]
 801fc24:	9805      	ldr	r0, [sp, #20]
 801fc26:	9b06      	ldr	r3, [sp, #24]
 801fc28:	aa09      	add	r2, sp, #36	@ 0x24
 801fc2a:	f7ff fef5 	bl	801fa18 <_printf_common>
 801fc2e:	3001      	adds	r0, #1
 801fc30:	d148      	bne.n	801fcc4 <_printf_i+0x1cc>
 801fc32:	2001      	movs	r0, #1
 801fc34:	4240      	negs	r0, r0
 801fc36:	b00b      	add	sp, #44	@ 0x2c
 801fc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc3a:	2220      	movs	r2, #32
 801fc3c:	6809      	ldr	r1, [r1, #0]
 801fc3e:	430a      	orrs	r2, r1
 801fc40:	6022      	str	r2, [r4, #0]
 801fc42:	2278      	movs	r2, #120	@ 0x78
 801fc44:	4932      	ldr	r1, [pc, #200]	@ (801fd10 <_printf_i+0x218>)
 801fc46:	9104      	str	r1, [sp, #16]
 801fc48:	0021      	movs	r1, r4
 801fc4a:	3145      	adds	r1, #69	@ 0x45
 801fc4c:	700a      	strb	r2, [r1, #0]
 801fc4e:	6819      	ldr	r1, [r3, #0]
 801fc50:	6822      	ldr	r2, [r4, #0]
 801fc52:	c940      	ldmia	r1!, {r6}
 801fc54:	0610      	lsls	r0, r2, #24
 801fc56:	d402      	bmi.n	801fc5e <_printf_i+0x166>
 801fc58:	0650      	lsls	r0, r2, #25
 801fc5a:	d500      	bpl.n	801fc5e <_printf_i+0x166>
 801fc5c:	b2b6      	uxth	r6, r6
 801fc5e:	6019      	str	r1, [r3, #0]
 801fc60:	07d3      	lsls	r3, r2, #31
 801fc62:	d502      	bpl.n	801fc6a <_printf_i+0x172>
 801fc64:	2320      	movs	r3, #32
 801fc66:	4313      	orrs	r3, r2
 801fc68:	6023      	str	r3, [r4, #0]
 801fc6a:	2e00      	cmp	r6, #0
 801fc6c:	d001      	beq.n	801fc72 <_printf_i+0x17a>
 801fc6e:	2710      	movs	r7, #16
 801fc70:	e7a8      	b.n	801fbc4 <_printf_i+0xcc>
 801fc72:	2220      	movs	r2, #32
 801fc74:	6823      	ldr	r3, [r4, #0]
 801fc76:	4393      	bics	r3, r2
 801fc78:	6023      	str	r3, [r4, #0]
 801fc7a:	e7f8      	b.n	801fc6e <_printf_i+0x176>
 801fc7c:	681a      	ldr	r2, [r3, #0]
 801fc7e:	680d      	ldr	r5, [r1, #0]
 801fc80:	1d10      	adds	r0, r2, #4
 801fc82:	6949      	ldr	r1, [r1, #20]
 801fc84:	6018      	str	r0, [r3, #0]
 801fc86:	6813      	ldr	r3, [r2, #0]
 801fc88:	062e      	lsls	r6, r5, #24
 801fc8a:	d501      	bpl.n	801fc90 <_printf_i+0x198>
 801fc8c:	6019      	str	r1, [r3, #0]
 801fc8e:	e002      	b.n	801fc96 <_printf_i+0x19e>
 801fc90:	066d      	lsls	r5, r5, #25
 801fc92:	d5fb      	bpl.n	801fc8c <_printf_i+0x194>
 801fc94:	8019      	strh	r1, [r3, #0]
 801fc96:	2300      	movs	r3, #0
 801fc98:	9d03      	ldr	r5, [sp, #12]
 801fc9a:	6123      	str	r3, [r4, #16]
 801fc9c:	e7bf      	b.n	801fc1e <_printf_i+0x126>
 801fc9e:	681a      	ldr	r2, [r3, #0]
 801fca0:	1d11      	adds	r1, r2, #4
 801fca2:	6019      	str	r1, [r3, #0]
 801fca4:	6815      	ldr	r5, [r2, #0]
 801fca6:	2100      	movs	r1, #0
 801fca8:	0028      	movs	r0, r5
 801fcaa:	6862      	ldr	r2, [r4, #4]
 801fcac:	f000 fb7b 	bl	80203a6 <memchr>
 801fcb0:	2800      	cmp	r0, #0
 801fcb2:	d001      	beq.n	801fcb8 <_printf_i+0x1c0>
 801fcb4:	1b40      	subs	r0, r0, r5
 801fcb6:	6060      	str	r0, [r4, #4]
 801fcb8:	6863      	ldr	r3, [r4, #4]
 801fcba:	6123      	str	r3, [r4, #16]
 801fcbc:	2300      	movs	r3, #0
 801fcbe:	9a03      	ldr	r2, [sp, #12]
 801fcc0:	7013      	strb	r3, [r2, #0]
 801fcc2:	e7ac      	b.n	801fc1e <_printf_i+0x126>
 801fcc4:	002a      	movs	r2, r5
 801fcc6:	6923      	ldr	r3, [r4, #16]
 801fcc8:	9906      	ldr	r1, [sp, #24]
 801fcca:	9805      	ldr	r0, [sp, #20]
 801fccc:	9d07      	ldr	r5, [sp, #28]
 801fcce:	47a8      	blx	r5
 801fcd0:	3001      	adds	r0, #1
 801fcd2:	d0ae      	beq.n	801fc32 <_printf_i+0x13a>
 801fcd4:	6823      	ldr	r3, [r4, #0]
 801fcd6:	079b      	lsls	r3, r3, #30
 801fcd8:	d415      	bmi.n	801fd06 <_printf_i+0x20e>
 801fcda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcdc:	68e0      	ldr	r0, [r4, #12]
 801fcde:	4298      	cmp	r0, r3
 801fce0:	daa9      	bge.n	801fc36 <_printf_i+0x13e>
 801fce2:	0018      	movs	r0, r3
 801fce4:	e7a7      	b.n	801fc36 <_printf_i+0x13e>
 801fce6:	0022      	movs	r2, r4
 801fce8:	2301      	movs	r3, #1
 801fcea:	9906      	ldr	r1, [sp, #24]
 801fcec:	9805      	ldr	r0, [sp, #20]
 801fcee:	9e07      	ldr	r6, [sp, #28]
 801fcf0:	3219      	adds	r2, #25
 801fcf2:	47b0      	blx	r6
 801fcf4:	3001      	adds	r0, #1
 801fcf6:	d09c      	beq.n	801fc32 <_printf_i+0x13a>
 801fcf8:	3501      	adds	r5, #1
 801fcfa:	68e3      	ldr	r3, [r4, #12]
 801fcfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fcfe:	1a9b      	subs	r3, r3, r2
 801fd00:	42ab      	cmp	r3, r5
 801fd02:	dcf0      	bgt.n	801fce6 <_printf_i+0x1ee>
 801fd04:	e7e9      	b.n	801fcda <_printf_i+0x1e2>
 801fd06:	2500      	movs	r5, #0
 801fd08:	e7f7      	b.n	801fcfa <_printf_i+0x202>
 801fd0a:	46c0      	nop			@ (mov r8, r8)
 801fd0c:	08025d13 	.word	0x08025d13
 801fd10:	08025d24 	.word	0x08025d24

0801fd14 <std>:
 801fd14:	2300      	movs	r3, #0
 801fd16:	b510      	push	{r4, lr}
 801fd18:	0004      	movs	r4, r0
 801fd1a:	6003      	str	r3, [r0, #0]
 801fd1c:	6043      	str	r3, [r0, #4]
 801fd1e:	6083      	str	r3, [r0, #8]
 801fd20:	8181      	strh	r1, [r0, #12]
 801fd22:	6643      	str	r3, [r0, #100]	@ 0x64
 801fd24:	81c2      	strh	r2, [r0, #14]
 801fd26:	6103      	str	r3, [r0, #16]
 801fd28:	6143      	str	r3, [r0, #20]
 801fd2a:	6183      	str	r3, [r0, #24]
 801fd2c:	0019      	movs	r1, r3
 801fd2e:	2208      	movs	r2, #8
 801fd30:	305c      	adds	r0, #92	@ 0x5c
 801fd32:	f000 fa67 	bl	8020204 <memset>
 801fd36:	4b0b      	ldr	r3, [pc, #44]	@ (801fd64 <std+0x50>)
 801fd38:	6224      	str	r4, [r4, #32]
 801fd3a:	6263      	str	r3, [r4, #36]	@ 0x24
 801fd3c:	4b0a      	ldr	r3, [pc, #40]	@ (801fd68 <std+0x54>)
 801fd3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fd40:	4b0a      	ldr	r3, [pc, #40]	@ (801fd6c <std+0x58>)
 801fd42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fd44:	4b0a      	ldr	r3, [pc, #40]	@ (801fd70 <std+0x5c>)
 801fd46:	6323      	str	r3, [r4, #48]	@ 0x30
 801fd48:	4b0a      	ldr	r3, [pc, #40]	@ (801fd74 <std+0x60>)
 801fd4a:	429c      	cmp	r4, r3
 801fd4c:	d005      	beq.n	801fd5a <std+0x46>
 801fd4e:	4b0a      	ldr	r3, [pc, #40]	@ (801fd78 <std+0x64>)
 801fd50:	429c      	cmp	r4, r3
 801fd52:	d002      	beq.n	801fd5a <std+0x46>
 801fd54:	4b09      	ldr	r3, [pc, #36]	@ (801fd7c <std+0x68>)
 801fd56:	429c      	cmp	r4, r3
 801fd58:	d103      	bne.n	801fd62 <std+0x4e>
 801fd5a:	0020      	movs	r0, r4
 801fd5c:	3058      	adds	r0, #88	@ 0x58
 801fd5e:	f000 fb1f 	bl	80203a0 <__retarget_lock_init_recursive>
 801fd62:	bd10      	pop	{r4, pc}
 801fd64:	0801ffbd 	.word	0x0801ffbd
 801fd68:	0801ffe5 	.word	0x0801ffe5
 801fd6c:	0802001d 	.word	0x0802001d
 801fd70:	08020049 	.word	0x08020049
 801fd74:	2000366c 	.word	0x2000366c
 801fd78:	200036d4 	.word	0x200036d4
 801fd7c:	2000373c 	.word	0x2000373c

0801fd80 <stdio_exit_handler>:
 801fd80:	b510      	push	{r4, lr}
 801fd82:	4a03      	ldr	r2, [pc, #12]	@ (801fd90 <stdio_exit_handler+0x10>)
 801fd84:	4903      	ldr	r1, [pc, #12]	@ (801fd94 <stdio_exit_handler+0x14>)
 801fd86:	4804      	ldr	r0, [pc, #16]	@ (801fd98 <stdio_exit_handler+0x18>)
 801fd88:	f000 f86c 	bl	801fe64 <_fwalk_sglue>
 801fd8c:	bd10      	pop	{r4, pc}
 801fd8e:	46c0      	nop			@ (mov r8, r8)
 801fd90:	2000025c 	.word	0x2000025c
 801fd94:	080229c5 	.word	0x080229c5
 801fd98:	200003d8 	.word	0x200003d8

0801fd9c <cleanup_stdio>:
 801fd9c:	6841      	ldr	r1, [r0, #4]
 801fd9e:	4b0b      	ldr	r3, [pc, #44]	@ (801fdcc <cleanup_stdio+0x30>)
 801fda0:	b510      	push	{r4, lr}
 801fda2:	0004      	movs	r4, r0
 801fda4:	4299      	cmp	r1, r3
 801fda6:	d001      	beq.n	801fdac <cleanup_stdio+0x10>
 801fda8:	f002 fe0c 	bl	80229c4 <_fflush_r>
 801fdac:	68a1      	ldr	r1, [r4, #8]
 801fdae:	4b08      	ldr	r3, [pc, #32]	@ (801fdd0 <cleanup_stdio+0x34>)
 801fdb0:	4299      	cmp	r1, r3
 801fdb2:	d002      	beq.n	801fdba <cleanup_stdio+0x1e>
 801fdb4:	0020      	movs	r0, r4
 801fdb6:	f002 fe05 	bl	80229c4 <_fflush_r>
 801fdba:	68e1      	ldr	r1, [r4, #12]
 801fdbc:	4b05      	ldr	r3, [pc, #20]	@ (801fdd4 <cleanup_stdio+0x38>)
 801fdbe:	4299      	cmp	r1, r3
 801fdc0:	d002      	beq.n	801fdc8 <cleanup_stdio+0x2c>
 801fdc2:	0020      	movs	r0, r4
 801fdc4:	f002 fdfe 	bl	80229c4 <_fflush_r>
 801fdc8:	bd10      	pop	{r4, pc}
 801fdca:	46c0      	nop			@ (mov r8, r8)
 801fdcc:	2000366c 	.word	0x2000366c
 801fdd0:	200036d4 	.word	0x200036d4
 801fdd4:	2000373c 	.word	0x2000373c

0801fdd8 <global_stdio_init.part.0>:
 801fdd8:	b510      	push	{r4, lr}
 801fdda:	4b09      	ldr	r3, [pc, #36]	@ (801fe00 <global_stdio_init.part.0+0x28>)
 801fddc:	4a09      	ldr	r2, [pc, #36]	@ (801fe04 <global_stdio_init.part.0+0x2c>)
 801fdde:	2104      	movs	r1, #4
 801fde0:	601a      	str	r2, [r3, #0]
 801fde2:	4809      	ldr	r0, [pc, #36]	@ (801fe08 <global_stdio_init.part.0+0x30>)
 801fde4:	2200      	movs	r2, #0
 801fde6:	f7ff ff95 	bl	801fd14 <std>
 801fdea:	2201      	movs	r2, #1
 801fdec:	2109      	movs	r1, #9
 801fdee:	4807      	ldr	r0, [pc, #28]	@ (801fe0c <global_stdio_init.part.0+0x34>)
 801fdf0:	f7ff ff90 	bl	801fd14 <std>
 801fdf4:	2202      	movs	r2, #2
 801fdf6:	2112      	movs	r1, #18
 801fdf8:	4805      	ldr	r0, [pc, #20]	@ (801fe10 <global_stdio_init.part.0+0x38>)
 801fdfa:	f7ff ff8b 	bl	801fd14 <std>
 801fdfe:	bd10      	pop	{r4, pc}
 801fe00:	200037a4 	.word	0x200037a4
 801fe04:	0801fd81 	.word	0x0801fd81
 801fe08:	2000366c 	.word	0x2000366c
 801fe0c:	200036d4 	.word	0x200036d4
 801fe10:	2000373c 	.word	0x2000373c

0801fe14 <__sfp_lock_acquire>:
 801fe14:	b510      	push	{r4, lr}
 801fe16:	4802      	ldr	r0, [pc, #8]	@ (801fe20 <__sfp_lock_acquire+0xc>)
 801fe18:	f000 fac3 	bl	80203a2 <__retarget_lock_acquire_recursive>
 801fe1c:	bd10      	pop	{r4, pc}
 801fe1e:	46c0      	nop			@ (mov r8, r8)
 801fe20:	200037ad 	.word	0x200037ad

0801fe24 <__sfp_lock_release>:
 801fe24:	b510      	push	{r4, lr}
 801fe26:	4802      	ldr	r0, [pc, #8]	@ (801fe30 <__sfp_lock_release+0xc>)
 801fe28:	f000 fabc 	bl	80203a4 <__retarget_lock_release_recursive>
 801fe2c:	bd10      	pop	{r4, pc}
 801fe2e:	46c0      	nop			@ (mov r8, r8)
 801fe30:	200037ad 	.word	0x200037ad

0801fe34 <__sinit>:
 801fe34:	b510      	push	{r4, lr}
 801fe36:	0004      	movs	r4, r0
 801fe38:	f7ff ffec 	bl	801fe14 <__sfp_lock_acquire>
 801fe3c:	6a23      	ldr	r3, [r4, #32]
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d002      	beq.n	801fe48 <__sinit+0x14>
 801fe42:	f7ff ffef 	bl	801fe24 <__sfp_lock_release>
 801fe46:	bd10      	pop	{r4, pc}
 801fe48:	4b04      	ldr	r3, [pc, #16]	@ (801fe5c <__sinit+0x28>)
 801fe4a:	6223      	str	r3, [r4, #32]
 801fe4c:	4b04      	ldr	r3, [pc, #16]	@ (801fe60 <__sinit+0x2c>)
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d1f6      	bne.n	801fe42 <__sinit+0xe>
 801fe54:	f7ff ffc0 	bl	801fdd8 <global_stdio_init.part.0>
 801fe58:	e7f3      	b.n	801fe42 <__sinit+0xe>
 801fe5a:	46c0      	nop			@ (mov r8, r8)
 801fe5c:	0801fd9d 	.word	0x0801fd9d
 801fe60:	200037a4 	.word	0x200037a4

0801fe64 <_fwalk_sglue>:
 801fe64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fe66:	0014      	movs	r4, r2
 801fe68:	2600      	movs	r6, #0
 801fe6a:	9000      	str	r0, [sp, #0]
 801fe6c:	9101      	str	r1, [sp, #4]
 801fe6e:	68a5      	ldr	r5, [r4, #8]
 801fe70:	6867      	ldr	r7, [r4, #4]
 801fe72:	3f01      	subs	r7, #1
 801fe74:	d504      	bpl.n	801fe80 <_fwalk_sglue+0x1c>
 801fe76:	6824      	ldr	r4, [r4, #0]
 801fe78:	2c00      	cmp	r4, #0
 801fe7a:	d1f8      	bne.n	801fe6e <_fwalk_sglue+0xa>
 801fe7c:	0030      	movs	r0, r6
 801fe7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fe80:	89ab      	ldrh	r3, [r5, #12]
 801fe82:	2b01      	cmp	r3, #1
 801fe84:	d908      	bls.n	801fe98 <_fwalk_sglue+0x34>
 801fe86:	220e      	movs	r2, #14
 801fe88:	5eab      	ldrsh	r3, [r5, r2]
 801fe8a:	3301      	adds	r3, #1
 801fe8c:	d004      	beq.n	801fe98 <_fwalk_sglue+0x34>
 801fe8e:	0029      	movs	r1, r5
 801fe90:	9800      	ldr	r0, [sp, #0]
 801fe92:	9b01      	ldr	r3, [sp, #4]
 801fe94:	4798      	blx	r3
 801fe96:	4306      	orrs	r6, r0
 801fe98:	3568      	adds	r5, #104	@ 0x68
 801fe9a:	e7ea      	b.n	801fe72 <_fwalk_sglue+0xe>

0801fe9c <iprintf>:
 801fe9c:	b40f      	push	{r0, r1, r2, r3}
 801fe9e:	b507      	push	{r0, r1, r2, lr}
 801fea0:	4905      	ldr	r1, [pc, #20]	@ (801feb8 <iprintf+0x1c>)
 801fea2:	ab04      	add	r3, sp, #16
 801fea4:	6808      	ldr	r0, [r1, #0]
 801fea6:	cb04      	ldmia	r3!, {r2}
 801fea8:	6881      	ldr	r1, [r0, #8]
 801feaa:	9301      	str	r3, [sp, #4]
 801feac:	f002 fbe8 	bl	8022680 <_vfiprintf_r>
 801feb0:	b003      	add	sp, #12
 801feb2:	bc08      	pop	{r3}
 801feb4:	b004      	add	sp, #16
 801feb6:	4718      	bx	r3
 801feb8:	200003d4 	.word	0x200003d4

0801febc <_puts_r>:
 801febc:	6a03      	ldr	r3, [r0, #32]
 801febe:	b570      	push	{r4, r5, r6, lr}
 801fec0:	0005      	movs	r5, r0
 801fec2:	000e      	movs	r6, r1
 801fec4:	6884      	ldr	r4, [r0, #8]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d101      	bne.n	801fece <_puts_r+0x12>
 801feca:	f7ff ffb3 	bl	801fe34 <__sinit>
 801fece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fed0:	07db      	lsls	r3, r3, #31
 801fed2:	d405      	bmi.n	801fee0 <_puts_r+0x24>
 801fed4:	89a3      	ldrh	r3, [r4, #12]
 801fed6:	059b      	lsls	r3, r3, #22
 801fed8:	d402      	bmi.n	801fee0 <_puts_r+0x24>
 801feda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fedc:	f000 fa61 	bl	80203a2 <__retarget_lock_acquire_recursive>
 801fee0:	89a3      	ldrh	r3, [r4, #12]
 801fee2:	071b      	lsls	r3, r3, #28
 801fee4:	d502      	bpl.n	801feec <_puts_r+0x30>
 801fee6:	6923      	ldr	r3, [r4, #16]
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d11f      	bne.n	801ff2c <_puts_r+0x70>
 801feec:	0021      	movs	r1, r4
 801feee:	0028      	movs	r0, r5
 801fef0:	f000 f92a 	bl	8020148 <__swsetup_r>
 801fef4:	2800      	cmp	r0, #0
 801fef6:	d019      	beq.n	801ff2c <_puts_r+0x70>
 801fef8:	2501      	movs	r5, #1
 801fefa:	426d      	negs	r5, r5
 801fefc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fefe:	07db      	lsls	r3, r3, #31
 801ff00:	d405      	bmi.n	801ff0e <_puts_r+0x52>
 801ff02:	89a3      	ldrh	r3, [r4, #12]
 801ff04:	059b      	lsls	r3, r3, #22
 801ff06:	d402      	bmi.n	801ff0e <_puts_r+0x52>
 801ff08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ff0a:	f000 fa4b 	bl	80203a4 <__retarget_lock_release_recursive>
 801ff0e:	0028      	movs	r0, r5
 801ff10:	bd70      	pop	{r4, r5, r6, pc}
 801ff12:	3601      	adds	r6, #1
 801ff14:	60a3      	str	r3, [r4, #8]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	da04      	bge.n	801ff24 <_puts_r+0x68>
 801ff1a:	69a2      	ldr	r2, [r4, #24]
 801ff1c:	429a      	cmp	r2, r3
 801ff1e:	dc16      	bgt.n	801ff4e <_puts_r+0x92>
 801ff20:	290a      	cmp	r1, #10
 801ff22:	d014      	beq.n	801ff4e <_puts_r+0x92>
 801ff24:	6823      	ldr	r3, [r4, #0]
 801ff26:	1c5a      	adds	r2, r3, #1
 801ff28:	6022      	str	r2, [r4, #0]
 801ff2a:	7019      	strb	r1, [r3, #0]
 801ff2c:	68a3      	ldr	r3, [r4, #8]
 801ff2e:	7831      	ldrb	r1, [r6, #0]
 801ff30:	3b01      	subs	r3, #1
 801ff32:	2900      	cmp	r1, #0
 801ff34:	d1ed      	bne.n	801ff12 <_puts_r+0x56>
 801ff36:	60a3      	str	r3, [r4, #8]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	da0f      	bge.n	801ff5c <_puts_r+0xa0>
 801ff3c:	0022      	movs	r2, r4
 801ff3e:	0028      	movs	r0, r5
 801ff40:	310a      	adds	r1, #10
 801ff42:	f000 f8bf 	bl	80200c4 <__swbuf_r>
 801ff46:	3001      	adds	r0, #1
 801ff48:	d0d6      	beq.n	801fef8 <_puts_r+0x3c>
 801ff4a:	250a      	movs	r5, #10
 801ff4c:	e7d6      	b.n	801fefc <_puts_r+0x40>
 801ff4e:	0022      	movs	r2, r4
 801ff50:	0028      	movs	r0, r5
 801ff52:	f000 f8b7 	bl	80200c4 <__swbuf_r>
 801ff56:	3001      	adds	r0, #1
 801ff58:	d1e8      	bne.n	801ff2c <_puts_r+0x70>
 801ff5a:	e7cd      	b.n	801fef8 <_puts_r+0x3c>
 801ff5c:	6823      	ldr	r3, [r4, #0]
 801ff5e:	1c5a      	adds	r2, r3, #1
 801ff60:	6022      	str	r2, [r4, #0]
 801ff62:	220a      	movs	r2, #10
 801ff64:	701a      	strb	r2, [r3, #0]
 801ff66:	e7f0      	b.n	801ff4a <_puts_r+0x8e>

0801ff68 <puts>:
 801ff68:	b510      	push	{r4, lr}
 801ff6a:	4b03      	ldr	r3, [pc, #12]	@ (801ff78 <puts+0x10>)
 801ff6c:	0001      	movs	r1, r0
 801ff6e:	6818      	ldr	r0, [r3, #0]
 801ff70:	f7ff ffa4 	bl	801febc <_puts_r>
 801ff74:	bd10      	pop	{r4, pc}
 801ff76:	46c0      	nop			@ (mov r8, r8)
 801ff78:	200003d4 	.word	0x200003d4

0801ff7c <siprintf>:
 801ff7c:	b40e      	push	{r1, r2, r3}
 801ff7e:	b500      	push	{lr}
 801ff80:	490b      	ldr	r1, [pc, #44]	@ (801ffb0 <siprintf+0x34>)
 801ff82:	b09c      	sub	sp, #112	@ 0x70
 801ff84:	ab1d      	add	r3, sp, #116	@ 0x74
 801ff86:	9002      	str	r0, [sp, #8]
 801ff88:	9006      	str	r0, [sp, #24]
 801ff8a:	9107      	str	r1, [sp, #28]
 801ff8c:	9104      	str	r1, [sp, #16]
 801ff8e:	4809      	ldr	r0, [pc, #36]	@ (801ffb4 <siprintf+0x38>)
 801ff90:	4909      	ldr	r1, [pc, #36]	@ (801ffb8 <siprintf+0x3c>)
 801ff92:	cb04      	ldmia	r3!, {r2}
 801ff94:	9105      	str	r1, [sp, #20]
 801ff96:	6800      	ldr	r0, [r0, #0]
 801ff98:	a902      	add	r1, sp, #8
 801ff9a:	9301      	str	r3, [sp, #4]
 801ff9c:	f002 fa4a 	bl	8022434 <_svfiprintf_r>
 801ffa0:	2200      	movs	r2, #0
 801ffa2:	9b02      	ldr	r3, [sp, #8]
 801ffa4:	701a      	strb	r2, [r3, #0]
 801ffa6:	b01c      	add	sp, #112	@ 0x70
 801ffa8:	bc08      	pop	{r3}
 801ffaa:	b003      	add	sp, #12
 801ffac:	4718      	bx	r3
 801ffae:	46c0      	nop			@ (mov r8, r8)
 801ffb0:	7fffffff 	.word	0x7fffffff
 801ffb4:	200003d4 	.word	0x200003d4
 801ffb8:	ffff0208 	.word	0xffff0208

0801ffbc <__sread>:
 801ffbc:	b570      	push	{r4, r5, r6, lr}
 801ffbe:	000c      	movs	r4, r1
 801ffc0:	250e      	movs	r5, #14
 801ffc2:	5f49      	ldrsh	r1, [r1, r5]
 801ffc4:	f000 f99a 	bl	80202fc <_read_r>
 801ffc8:	2800      	cmp	r0, #0
 801ffca:	db03      	blt.n	801ffd4 <__sread+0x18>
 801ffcc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ffce:	181b      	adds	r3, r3, r0
 801ffd0:	6563      	str	r3, [r4, #84]	@ 0x54
 801ffd2:	bd70      	pop	{r4, r5, r6, pc}
 801ffd4:	89a3      	ldrh	r3, [r4, #12]
 801ffd6:	4a02      	ldr	r2, [pc, #8]	@ (801ffe0 <__sread+0x24>)
 801ffd8:	4013      	ands	r3, r2
 801ffda:	81a3      	strh	r3, [r4, #12]
 801ffdc:	e7f9      	b.n	801ffd2 <__sread+0x16>
 801ffde:	46c0      	nop			@ (mov r8, r8)
 801ffe0:	ffffefff 	.word	0xffffefff

0801ffe4 <__swrite>:
 801ffe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffe6:	001f      	movs	r7, r3
 801ffe8:	898b      	ldrh	r3, [r1, #12]
 801ffea:	0005      	movs	r5, r0
 801ffec:	000c      	movs	r4, r1
 801ffee:	0016      	movs	r6, r2
 801fff0:	05db      	lsls	r3, r3, #23
 801fff2:	d505      	bpl.n	8020000 <__swrite+0x1c>
 801fff4:	230e      	movs	r3, #14
 801fff6:	5ec9      	ldrsh	r1, [r1, r3]
 801fff8:	2200      	movs	r2, #0
 801fffa:	2302      	movs	r3, #2
 801fffc:	f000 f96a 	bl	80202d4 <_lseek_r>
 8020000:	89a3      	ldrh	r3, [r4, #12]
 8020002:	4a05      	ldr	r2, [pc, #20]	@ (8020018 <__swrite+0x34>)
 8020004:	0028      	movs	r0, r5
 8020006:	4013      	ands	r3, r2
 8020008:	81a3      	strh	r3, [r4, #12]
 802000a:	0032      	movs	r2, r6
 802000c:	230e      	movs	r3, #14
 802000e:	5ee1      	ldrsh	r1, [r4, r3]
 8020010:	003b      	movs	r3, r7
 8020012:	f000 f987 	bl	8020324 <_write_r>
 8020016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020018:	ffffefff 	.word	0xffffefff

0802001c <__sseek>:
 802001c:	b570      	push	{r4, r5, r6, lr}
 802001e:	000c      	movs	r4, r1
 8020020:	250e      	movs	r5, #14
 8020022:	5f49      	ldrsh	r1, [r1, r5]
 8020024:	f000 f956 	bl	80202d4 <_lseek_r>
 8020028:	89a3      	ldrh	r3, [r4, #12]
 802002a:	1c42      	adds	r2, r0, #1
 802002c:	d103      	bne.n	8020036 <__sseek+0x1a>
 802002e:	4a05      	ldr	r2, [pc, #20]	@ (8020044 <__sseek+0x28>)
 8020030:	4013      	ands	r3, r2
 8020032:	81a3      	strh	r3, [r4, #12]
 8020034:	bd70      	pop	{r4, r5, r6, pc}
 8020036:	2280      	movs	r2, #128	@ 0x80
 8020038:	0152      	lsls	r2, r2, #5
 802003a:	4313      	orrs	r3, r2
 802003c:	81a3      	strh	r3, [r4, #12]
 802003e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020040:	e7f8      	b.n	8020034 <__sseek+0x18>
 8020042:	46c0      	nop			@ (mov r8, r8)
 8020044:	ffffefff 	.word	0xffffefff

08020048 <__sclose>:
 8020048:	b510      	push	{r4, lr}
 802004a:	230e      	movs	r3, #14
 802004c:	5ec9      	ldrsh	r1, [r1, r3]
 802004e:	f000 f92f 	bl	80202b0 <_close_r>
 8020052:	bd10      	pop	{r4, pc}

08020054 <_vsniprintf_r>:
 8020054:	b530      	push	{r4, r5, lr}
 8020056:	0014      	movs	r4, r2
 8020058:	0005      	movs	r5, r0
 802005a:	001a      	movs	r2, r3
 802005c:	b09b      	sub	sp, #108	@ 0x6c
 802005e:	2c00      	cmp	r4, #0
 8020060:	da05      	bge.n	802006e <_vsniprintf_r+0x1a>
 8020062:	238b      	movs	r3, #139	@ 0x8b
 8020064:	6003      	str	r3, [r0, #0]
 8020066:	2001      	movs	r0, #1
 8020068:	4240      	negs	r0, r0
 802006a:	b01b      	add	sp, #108	@ 0x6c
 802006c:	bd30      	pop	{r4, r5, pc}
 802006e:	2382      	movs	r3, #130	@ 0x82
 8020070:	4668      	mov	r0, sp
 8020072:	009b      	lsls	r3, r3, #2
 8020074:	8183      	strh	r3, [r0, #12]
 8020076:	2300      	movs	r3, #0
 8020078:	9100      	str	r1, [sp, #0]
 802007a:	9104      	str	r1, [sp, #16]
 802007c:	429c      	cmp	r4, r3
 802007e:	d000      	beq.n	8020082 <_vsniprintf_r+0x2e>
 8020080:	1e63      	subs	r3, r4, #1
 8020082:	9302      	str	r3, [sp, #8]
 8020084:	9305      	str	r3, [sp, #20]
 8020086:	2301      	movs	r3, #1
 8020088:	4669      	mov	r1, sp
 802008a:	425b      	negs	r3, r3
 802008c:	81cb      	strh	r3, [r1, #14]
 802008e:	0028      	movs	r0, r5
 8020090:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020092:	f002 f9cf 	bl	8022434 <_svfiprintf_r>
 8020096:	1c43      	adds	r3, r0, #1
 8020098:	da01      	bge.n	802009e <_vsniprintf_r+0x4a>
 802009a:	238b      	movs	r3, #139	@ 0x8b
 802009c:	602b      	str	r3, [r5, #0]
 802009e:	2c00      	cmp	r4, #0
 80200a0:	d0e3      	beq.n	802006a <_vsniprintf_r+0x16>
 80200a2:	2200      	movs	r2, #0
 80200a4:	9b00      	ldr	r3, [sp, #0]
 80200a6:	701a      	strb	r2, [r3, #0]
 80200a8:	e7df      	b.n	802006a <_vsniprintf_r+0x16>
	...

080200ac <vsniprintf>:
 80200ac:	b513      	push	{r0, r1, r4, lr}
 80200ae:	4c04      	ldr	r4, [pc, #16]	@ (80200c0 <vsniprintf+0x14>)
 80200b0:	9300      	str	r3, [sp, #0]
 80200b2:	0013      	movs	r3, r2
 80200b4:	000a      	movs	r2, r1
 80200b6:	0001      	movs	r1, r0
 80200b8:	6820      	ldr	r0, [r4, #0]
 80200ba:	f7ff ffcb 	bl	8020054 <_vsniprintf_r>
 80200be:	bd16      	pop	{r1, r2, r4, pc}
 80200c0:	200003d4 	.word	0x200003d4

080200c4 <__swbuf_r>:
 80200c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200c6:	0006      	movs	r6, r0
 80200c8:	000d      	movs	r5, r1
 80200ca:	0014      	movs	r4, r2
 80200cc:	2800      	cmp	r0, #0
 80200ce:	d004      	beq.n	80200da <__swbuf_r+0x16>
 80200d0:	6a03      	ldr	r3, [r0, #32]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d101      	bne.n	80200da <__swbuf_r+0x16>
 80200d6:	f7ff fead 	bl	801fe34 <__sinit>
 80200da:	69a3      	ldr	r3, [r4, #24]
 80200dc:	60a3      	str	r3, [r4, #8]
 80200de:	89a3      	ldrh	r3, [r4, #12]
 80200e0:	071b      	lsls	r3, r3, #28
 80200e2:	d502      	bpl.n	80200ea <__swbuf_r+0x26>
 80200e4:	6923      	ldr	r3, [r4, #16]
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d109      	bne.n	80200fe <__swbuf_r+0x3a>
 80200ea:	0021      	movs	r1, r4
 80200ec:	0030      	movs	r0, r6
 80200ee:	f000 f82b 	bl	8020148 <__swsetup_r>
 80200f2:	2800      	cmp	r0, #0
 80200f4:	d003      	beq.n	80200fe <__swbuf_r+0x3a>
 80200f6:	2501      	movs	r5, #1
 80200f8:	426d      	negs	r5, r5
 80200fa:	0028      	movs	r0, r5
 80200fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80200fe:	6923      	ldr	r3, [r4, #16]
 8020100:	6820      	ldr	r0, [r4, #0]
 8020102:	b2ef      	uxtb	r7, r5
 8020104:	1ac0      	subs	r0, r0, r3
 8020106:	6963      	ldr	r3, [r4, #20]
 8020108:	b2ed      	uxtb	r5, r5
 802010a:	4283      	cmp	r3, r0
 802010c:	dc05      	bgt.n	802011a <__swbuf_r+0x56>
 802010e:	0021      	movs	r1, r4
 8020110:	0030      	movs	r0, r6
 8020112:	f002 fc57 	bl	80229c4 <_fflush_r>
 8020116:	2800      	cmp	r0, #0
 8020118:	d1ed      	bne.n	80200f6 <__swbuf_r+0x32>
 802011a:	68a3      	ldr	r3, [r4, #8]
 802011c:	3001      	adds	r0, #1
 802011e:	3b01      	subs	r3, #1
 8020120:	60a3      	str	r3, [r4, #8]
 8020122:	6823      	ldr	r3, [r4, #0]
 8020124:	1c5a      	adds	r2, r3, #1
 8020126:	6022      	str	r2, [r4, #0]
 8020128:	701f      	strb	r7, [r3, #0]
 802012a:	6963      	ldr	r3, [r4, #20]
 802012c:	4283      	cmp	r3, r0
 802012e:	d004      	beq.n	802013a <__swbuf_r+0x76>
 8020130:	89a3      	ldrh	r3, [r4, #12]
 8020132:	07db      	lsls	r3, r3, #31
 8020134:	d5e1      	bpl.n	80200fa <__swbuf_r+0x36>
 8020136:	2d0a      	cmp	r5, #10
 8020138:	d1df      	bne.n	80200fa <__swbuf_r+0x36>
 802013a:	0021      	movs	r1, r4
 802013c:	0030      	movs	r0, r6
 802013e:	f002 fc41 	bl	80229c4 <_fflush_r>
 8020142:	2800      	cmp	r0, #0
 8020144:	d0d9      	beq.n	80200fa <__swbuf_r+0x36>
 8020146:	e7d6      	b.n	80200f6 <__swbuf_r+0x32>

08020148 <__swsetup_r>:
 8020148:	4b2d      	ldr	r3, [pc, #180]	@ (8020200 <__swsetup_r+0xb8>)
 802014a:	b570      	push	{r4, r5, r6, lr}
 802014c:	0005      	movs	r5, r0
 802014e:	6818      	ldr	r0, [r3, #0]
 8020150:	000c      	movs	r4, r1
 8020152:	2800      	cmp	r0, #0
 8020154:	d004      	beq.n	8020160 <__swsetup_r+0x18>
 8020156:	6a03      	ldr	r3, [r0, #32]
 8020158:	2b00      	cmp	r3, #0
 802015a:	d101      	bne.n	8020160 <__swsetup_r+0x18>
 802015c:	f7ff fe6a 	bl	801fe34 <__sinit>
 8020160:	230c      	movs	r3, #12
 8020162:	5ee2      	ldrsh	r2, [r4, r3]
 8020164:	0713      	lsls	r3, r2, #28
 8020166:	d423      	bmi.n	80201b0 <__swsetup_r+0x68>
 8020168:	06d3      	lsls	r3, r2, #27
 802016a:	d407      	bmi.n	802017c <__swsetup_r+0x34>
 802016c:	2309      	movs	r3, #9
 802016e:	602b      	str	r3, [r5, #0]
 8020170:	2340      	movs	r3, #64	@ 0x40
 8020172:	2001      	movs	r0, #1
 8020174:	4313      	orrs	r3, r2
 8020176:	81a3      	strh	r3, [r4, #12]
 8020178:	4240      	negs	r0, r0
 802017a:	e03a      	b.n	80201f2 <__swsetup_r+0xaa>
 802017c:	0752      	lsls	r2, r2, #29
 802017e:	d513      	bpl.n	80201a8 <__swsetup_r+0x60>
 8020180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020182:	2900      	cmp	r1, #0
 8020184:	d008      	beq.n	8020198 <__swsetup_r+0x50>
 8020186:	0023      	movs	r3, r4
 8020188:	3344      	adds	r3, #68	@ 0x44
 802018a:	4299      	cmp	r1, r3
 802018c:	d002      	beq.n	8020194 <__swsetup_r+0x4c>
 802018e:	0028      	movs	r0, r5
 8020190:	f000 ffa6 	bl	80210e0 <_free_r>
 8020194:	2300      	movs	r3, #0
 8020196:	6363      	str	r3, [r4, #52]	@ 0x34
 8020198:	2224      	movs	r2, #36	@ 0x24
 802019a:	89a3      	ldrh	r3, [r4, #12]
 802019c:	4393      	bics	r3, r2
 802019e:	81a3      	strh	r3, [r4, #12]
 80201a0:	2300      	movs	r3, #0
 80201a2:	6063      	str	r3, [r4, #4]
 80201a4:	6923      	ldr	r3, [r4, #16]
 80201a6:	6023      	str	r3, [r4, #0]
 80201a8:	2308      	movs	r3, #8
 80201aa:	89a2      	ldrh	r2, [r4, #12]
 80201ac:	4313      	orrs	r3, r2
 80201ae:	81a3      	strh	r3, [r4, #12]
 80201b0:	6923      	ldr	r3, [r4, #16]
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d10b      	bne.n	80201ce <__swsetup_r+0x86>
 80201b6:	21a0      	movs	r1, #160	@ 0xa0
 80201b8:	2280      	movs	r2, #128	@ 0x80
 80201ba:	89a3      	ldrh	r3, [r4, #12]
 80201bc:	0089      	lsls	r1, r1, #2
 80201be:	0092      	lsls	r2, r2, #2
 80201c0:	400b      	ands	r3, r1
 80201c2:	4293      	cmp	r3, r2
 80201c4:	d003      	beq.n	80201ce <__swsetup_r+0x86>
 80201c6:	0021      	movs	r1, r4
 80201c8:	0028      	movs	r0, r5
 80201ca:	f002 fc51 	bl	8022a70 <__smakebuf_r>
 80201ce:	230c      	movs	r3, #12
 80201d0:	5ee2      	ldrsh	r2, [r4, r3]
 80201d2:	2101      	movs	r1, #1
 80201d4:	0013      	movs	r3, r2
 80201d6:	400b      	ands	r3, r1
 80201d8:	420a      	tst	r2, r1
 80201da:	d00b      	beq.n	80201f4 <__swsetup_r+0xac>
 80201dc:	2300      	movs	r3, #0
 80201de:	60a3      	str	r3, [r4, #8]
 80201e0:	6963      	ldr	r3, [r4, #20]
 80201e2:	425b      	negs	r3, r3
 80201e4:	61a3      	str	r3, [r4, #24]
 80201e6:	2000      	movs	r0, #0
 80201e8:	6923      	ldr	r3, [r4, #16]
 80201ea:	4283      	cmp	r3, r0
 80201ec:	d101      	bne.n	80201f2 <__swsetup_r+0xaa>
 80201ee:	0613      	lsls	r3, r2, #24
 80201f0:	d4be      	bmi.n	8020170 <__swsetup_r+0x28>
 80201f2:	bd70      	pop	{r4, r5, r6, pc}
 80201f4:	0791      	lsls	r1, r2, #30
 80201f6:	d400      	bmi.n	80201fa <__swsetup_r+0xb2>
 80201f8:	6963      	ldr	r3, [r4, #20]
 80201fa:	60a3      	str	r3, [r4, #8]
 80201fc:	e7f3      	b.n	80201e6 <__swsetup_r+0x9e>
 80201fe:	46c0      	nop			@ (mov r8, r8)
 8020200:	200003d4 	.word	0x200003d4

08020204 <memset>:
 8020204:	0003      	movs	r3, r0
 8020206:	1882      	adds	r2, r0, r2
 8020208:	4293      	cmp	r3, r2
 802020a:	d100      	bne.n	802020e <memset+0xa>
 802020c:	4770      	bx	lr
 802020e:	7019      	strb	r1, [r3, #0]
 8020210:	3301      	adds	r3, #1
 8020212:	e7f9      	b.n	8020208 <memset+0x4>

08020214 <strchr>:
 8020214:	b2c9      	uxtb	r1, r1
 8020216:	7803      	ldrb	r3, [r0, #0]
 8020218:	2b00      	cmp	r3, #0
 802021a:	d004      	beq.n	8020226 <strchr+0x12>
 802021c:	428b      	cmp	r3, r1
 802021e:	d100      	bne.n	8020222 <strchr+0xe>
 8020220:	4770      	bx	lr
 8020222:	3001      	adds	r0, #1
 8020224:	e7f7      	b.n	8020216 <strchr+0x2>
 8020226:	424b      	negs	r3, r1
 8020228:	4159      	adcs	r1, r3
 802022a:	4249      	negs	r1, r1
 802022c:	4008      	ands	r0, r1
 802022e:	e7f7      	b.n	8020220 <strchr+0xc>

08020230 <strncmp>:
 8020230:	b530      	push	{r4, r5, lr}
 8020232:	0005      	movs	r5, r0
 8020234:	1e10      	subs	r0, r2, #0
 8020236:	d00b      	beq.n	8020250 <strncmp+0x20>
 8020238:	2400      	movs	r4, #0
 802023a:	3a01      	subs	r2, #1
 802023c:	5d2b      	ldrb	r3, [r5, r4]
 802023e:	5d08      	ldrb	r0, [r1, r4]
 8020240:	4283      	cmp	r3, r0
 8020242:	d104      	bne.n	802024e <strncmp+0x1e>
 8020244:	42a2      	cmp	r2, r4
 8020246:	d002      	beq.n	802024e <strncmp+0x1e>
 8020248:	3401      	adds	r4, #1
 802024a:	2b00      	cmp	r3, #0
 802024c:	d1f6      	bne.n	802023c <strncmp+0xc>
 802024e:	1a18      	subs	r0, r3, r0
 8020250:	bd30      	pop	{r4, r5, pc}

08020252 <strncpy>:
 8020252:	0003      	movs	r3, r0
 8020254:	b530      	push	{r4, r5, lr}
 8020256:	001d      	movs	r5, r3
 8020258:	2a00      	cmp	r2, #0
 802025a:	d006      	beq.n	802026a <strncpy+0x18>
 802025c:	780c      	ldrb	r4, [r1, #0]
 802025e:	3a01      	subs	r2, #1
 8020260:	3301      	adds	r3, #1
 8020262:	702c      	strb	r4, [r5, #0]
 8020264:	3101      	adds	r1, #1
 8020266:	2c00      	cmp	r4, #0
 8020268:	d1f5      	bne.n	8020256 <strncpy+0x4>
 802026a:	2100      	movs	r1, #0
 802026c:	189a      	adds	r2, r3, r2
 802026e:	4293      	cmp	r3, r2
 8020270:	d100      	bne.n	8020274 <strncpy+0x22>
 8020272:	bd30      	pop	{r4, r5, pc}
 8020274:	7019      	strb	r1, [r3, #0]
 8020276:	3301      	adds	r3, #1
 8020278:	e7f9      	b.n	802026e <strncpy+0x1c>

0802027a <strstr>:
 802027a:	780a      	ldrb	r2, [r1, #0]
 802027c:	b530      	push	{r4, r5, lr}
 802027e:	2a00      	cmp	r2, #0
 8020280:	d10c      	bne.n	802029c <strstr+0x22>
 8020282:	bd30      	pop	{r4, r5, pc}
 8020284:	429a      	cmp	r2, r3
 8020286:	d108      	bne.n	802029a <strstr+0x20>
 8020288:	2301      	movs	r3, #1
 802028a:	5ccc      	ldrb	r4, [r1, r3]
 802028c:	2c00      	cmp	r4, #0
 802028e:	d0f8      	beq.n	8020282 <strstr+0x8>
 8020290:	5cc5      	ldrb	r5, [r0, r3]
 8020292:	42a5      	cmp	r5, r4
 8020294:	d101      	bne.n	802029a <strstr+0x20>
 8020296:	3301      	adds	r3, #1
 8020298:	e7f7      	b.n	802028a <strstr+0x10>
 802029a:	3001      	adds	r0, #1
 802029c:	7803      	ldrb	r3, [r0, #0]
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d1f0      	bne.n	8020284 <strstr+0xa>
 80202a2:	0018      	movs	r0, r3
 80202a4:	e7ed      	b.n	8020282 <strstr+0x8>
	...

080202a8 <_localeconv_r>:
 80202a8:	4800      	ldr	r0, [pc, #0]	@ (80202ac <_localeconv_r+0x4>)
 80202aa:	4770      	bx	lr
 80202ac:	20000358 	.word	0x20000358

080202b0 <_close_r>:
 80202b0:	2300      	movs	r3, #0
 80202b2:	b570      	push	{r4, r5, r6, lr}
 80202b4:	4d06      	ldr	r5, [pc, #24]	@ (80202d0 <_close_r+0x20>)
 80202b6:	0004      	movs	r4, r0
 80202b8:	0008      	movs	r0, r1
 80202ba:	602b      	str	r3, [r5, #0]
 80202bc:	f7ed fca2 	bl	800dc04 <_close>
 80202c0:	1c43      	adds	r3, r0, #1
 80202c2:	d103      	bne.n	80202cc <_close_r+0x1c>
 80202c4:	682b      	ldr	r3, [r5, #0]
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d000      	beq.n	80202cc <_close_r+0x1c>
 80202ca:	6023      	str	r3, [r4, #0]
 80202cc:	bd70      	pop	{r4, r5, r6, pc}
 80202ce:	46c0      	nop			@ (mov r8, r8)
 80202d0:	200037a8 	.word	0x200037a8

080202d4 <_lseek_r>:
 80202d4:	b570      	push	{r4, r5, r6, lr}
 80202d6:	0004      	movs	r4, r0
 80202d8:	0008      	movs	r0, r1
 80202da:	0011      	movs	r1, r2
 80202dc:	001a      	movs	r2, r3
 80202de:	2300      	movs	r3, #0
 80202e0:	4d05      	ldr	r5, [pc, #20]	@ (80202f8 <_lseek_r+0x24>)
 80202e2:	602b      	str	r3, [r5, #0]
 80202e4:	f7ed fcaf 	bl	800dc46 <_lseek>
 80202e8:	1c43      	adds	r3, r0, #1
 80202ea:	d103      	bne.n	80202f4 <_lseek_r+0x20>
 80202ec:	682b      	ldr	r3, [r5, #0]
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d000      	beq.n	80202f4 <_lseek_r+0x20>
 80202f2:	6023      	str	r3, [r4, #0]
 80202f4:	bd70      	pop	{r4, r5, r6, pc}
 80202f6:	46c0      	nop			@ (mov r8, r8)
 80202f8:	200037a8 	.word	0x200037a8

080202fc <_read_r>:
 80202fc:	b570      	push	{r4, r5, r6, lr}
 80202fe:	0004      	movs	r4, r0
 8020300:	0008      	movs	r0, r1
 8020302:	0011      	movs	r1, r2
 8020304:	001a      	movs	r2, r3
 8020306:	2300      	movs	r3, #0
 8020308:	4d05      	ldr	r5, [pc, #20]	@ (8020320 <_read_r+0x24>)
 802030a:	602b      	str	r3, [r5, #0]
 802030c:	f7ed fc5d 	bl	800dbca <_read>
 8020310:	1c43      	adds	r3, r0, #1
 8020312:	d103      	bne.n	802031c <_read_r+0x20>
 8020314:	682b      	ldr	r3, [r5, #0]
 8020316:	2b00      	cmp	r3, #0
 8020318:	d000      	beq.n	802031c <_read_r+0x20>
 802031a:	6023      	str	r3, [r4, #0]
 802031c:	bd70      	pop	{r4, r5, r6, pc}
 802031e:	46c0      	nop			@ (mov r8, r8)
 8020320:	200037a8 	.word	0x200037a8

08020324 <_write_r>:
 8020324:	b570      	push	{r4, r5, r6, lr}
 8020326:	0004      	movs	r4, r0
 8020328:	0008      	movs	r0, r1
 802032a:	0011      	movs	r1, r2
 802032c:	001a      	movs	r2, r3
 802032e:	2300      	movs	r3, #0
 8020330:	4d05      	ldr	r5, [pc, #20]	@ (8020348 <_write_r+0x24>)
 8020332:	602b      	str	r3, [r5, #0]
 8020334:	f7ee f91e 	bl	800e574 <_write>
 8020338:	1c43      	adds	r3, r0, #1
 802033a:	d103      	bne.n	8020344 <_write_r+0x20>
 802033c:	682b      	ldr	r3, [r5, #0]
 802033e:	2b00      	cmp	r3, #0
 8020340:	d000      	beq.n	8020344 <_write_r+0x20>
 8020342:	6023      	str	r3, [r4, #0]
 8020344:	bd70      	pop	{r4, r5, r6, pc}
 8020346:	46c0      	nop			@ (mov r8, r8)
 8020348:	200037a8 	.word	0x200037a8

0802034c <__errno>:
 802034c:	4b01      	ldr	r3, [pc, #4]	@ (8020354 <__errno+0x8>)
 802034e:	6818      	ldr	r0, [r3, #0]
 8020350:	4770      	bx	lr
 8020352:	46c0      	nop			@ (mov r8, r8)
 8020354:	200003d4 	.word	0x200003d4

08020358 <__libc_init_array>:
 8020358:	b570      	push	{r4, r5, r6, lr}
 802035a:	2600      	movs	r6, #0
 802035c:	4c0c      	ldr	r4, [pc, #48]	@ (8020390 <__libc_init_array+0x38>)
 802035e:	4d0d      	ldr	r5, [pc, #52]	@ (8020394 <__libc_init_array+0x3c>)
 8020360:	1b64      	subs	r4, r4, r5
 8020362:	10a4      	asrs	r4, r4, #2
 8020364:	42a6      	cmp	r6, r4
 8020366:	d109      	bne.n	802037c <__libc_init_array+0x24>
 8020368:	2600      	movs	r6, #0
 802036a:	f002 fee9 	bl	8023140 <_init>
 802036e:	4c0a      	ldr	r4, [pc, #40]	@ (8020398 <__libc_init_array+0x40>)
 8020370:	4d0a      	ldr	r5, [pc, #40]	@ (802039c <__libc_init_array+0x44>)
 8020372:	1b64      	subs	r4, r4, r5
 8020374:	10a4      	asrs	r4, r4, #2
 8020376:	42a6      	cmp	r6, r4
 8020378:	d105      	bne.n	8020386 <__libc_init_array+0x2e>
 802037a:	bd70      	pop	{r4, r5, r6, pc}
 802037c:	00b3      	lsls	r3, r6, #2
 802037e:	58eb      	ldr	r3, [r5, r3]
 8020380:	4798      	blx	r3
 8020382:	3601      	adds	r6, #1
 8020384:	e7ee      	b.n	8020364 <__libc_init_array+0xc>
 8020386:	00b3      	lsls	r3, r6, #2
 8020388:	58eb      	ldr	r3, [r5, r3]
 802038a:	4798      	blx	r3
 802038c:	3601      	adds	r6, #1
 802038e:	e7f2      	b.n	8020376 <__libc_init_array+0x1e>
 8020390:	08025ff0 	.word	0x08025ff0
 8020394:	08025ff0 	.word	0x08025ff0
 8020398:	08025ff4 	.word	0x08025ff4
 802039c:	08025ff0 	.word	0x08025ff0

080203a0 <__retarget_lock_init_recursive>:
 80203a0:	4770      	bx	lr

080203a2 <__retarget_lock_acquire_recursive>:
 80203a2:	4770      	bx	lr

080203a4 <__retarget_lock_release_recursive>:
 80203a4:	4770      	bx	lr

080203a6 <memchr>:
 80203a6:	b2c9      	uxtb	r1, r1
 80203a8:	1882      	adds	r2, r0, r2
 80203aa:	4290      	cmp	r0, r2
 80203ac:	d101      	bne.n	80203b2 <memchr+0xc>
 80203ae:	2000      	movs	r0, #0
 80203b0:	4770      	bx	lr
 80203b2:	7803      	ldrb	r3, [r0, #0]
 80203b4:	428b      	cmp	r3, r1
 80203b6:	d0fb      	beq.n	80203b0 <memchr+0xa>
 80203b8:	3001      	adds	r0, #1
 80203ba:	e7f6      	b.n	80203aa <memchr+0x4>

080203bc <memcpy>:
 80203bc:	2300      	movs	r3, #0
 80203be:	b510      	push	{r4, lr}
 80203c0:	429a      	cmp	r2, r3
 80203c2:	d100      	bne.n	80203c6 <memcpy+0xa>
 80203c4:	bd10      	pop	{r4, pc}
 80203c6:	5ccc      	ldrb	r4, [r1, r3]
 80203c8:	54c4      	strb	r4, [r0, r3]
 80203ca:	3301      	adds	r3, #1
 80203cc:	e7f8      	b.n	80203c0 <memcpy+0x4>
	...

080203d0 <nan>:
 80203d0:	2000      	movs	r0, #0
 80203d2:	4901      	ldr	r1, [pc, #4]	@ (80203d8 <nan+0x8>)
 80203d4:	4770      	bx	lr
 80203d6:	46c0      	nop			@ (mov r8, r8)
 80203d8:	7ff80000 	.word	0x7ff80000

080203dc <quorem>:
 80203dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203de:	6902      	ldr	r2, [r0, #16]
 80203e0:	690f      	ldr	r7, [r1, #16]
 80203e2:	b087      	sub	sp, #28
 80203e4:	0006      	movs	r6, r0
 80203e6:	000b      	movs	r3, r1
 80203e8:	2000      	movs	r0, #0
 80203ea:	9102      	str	r1, [sp, #8]
 80203ec:	42ba      	cmp	r2, r7
 80203ee:	db6d      	blt.n	80204cc <quorem+0xf0>
 80203f0:	3f01      	subs	r7, #1
 80203f2:	00bc      	lsls	r4, r7, #2
 80203f4:	3314      	adds	r3, #20
 80203f6:	9305      	str	r3, [sp, #20]
 80203f8:	191b      	adds	r3, r3, r4
 80203fa:	9303      	str	r3, [sp, #12]
 80203fc:	0033      	movs	r3, r6
 80203fe:	3314      	adds	r3, #20
 8020400:	191c      	adds	r4, r3, r4
 8020402:	9301      	str	r3, [sp, #4]
 8020404:	6823      	ldr	r3, [r4, #0]
 8020406:	9304      	str	r3, [sp, #16]
 8020408:	9b03      	ldr	r3, [sp, #12]
 802040a:	9804      	ldr	r0, [sp, #16]
 802040c:	681d      	ldr	r5, [r3, #0]
 802040e:	3501      	adds	r5, #1
 8020410:	0029      	movs	r1, r5
 8020412:	f7df fec7 	bl	80001a4 <__udivsi3>
 8020416:	9b04      	ldr	r3, [sp, #16]
 8020418:	9000      	str	r0, [sp, #0]
 802041a:	42ab      	cmp	r3, r5
 802041c:	d32b      	bcc.n	8020476 <quorem+0x9a>
 802041e:	9b05      	ldr	r3, [sp, #20]
 8020420:	9d01      	ldr	r5, [sp, #4]
 8020422:	469c      	mov	ip, r3
 8020424:	2300      	movs	r3, #0
 8020426:	9305      	str	r3, [sp, #20]
 8020428:	9304      	str	r3, [sp, #16]
 802042a:	4662      	mov	r2, ip
 802042c:	ca08      	ldmia	r2!, {r3}
 802042e:	6828      	ldr	r0, [r5, #0]
 8020430:	4694      	mov	ip, r2
 8020432:	9a00      	ldr	r2, [sp, #0]
 8020434:	b299      	uxth	r1, r3
 8020436:	4351      	muls	r1, r2
 8020438:	9a05      	ldr	r2, [sp, #20]
 802043a:	0c1b      	lsrs	r3, r3, #16
 802043c:	1889      	adds	r1, r1, r2
 802043e:	9a00      	ldr	r2, [sp, #0]
 8020440:	4353      	muls	r3, r2
 8020442:	0c0a      	lsrs	r2, r1, #16
 8020444:	189b      	adds	r3, r3, r2
 8020446:	0c1a      	lsrs	r2, r3, #16
 8020448:	b289      	uxth	r1, r1
 802044a:	9205      	str	r2, [sp, #20]
 802044c:	b282      	uxth	r2, r0
 802044e:	1a52      	subs	r2, r2, r1
 8020450:	9904      	ldr	r1, [sp, #16]
 8020452:	0c00      	lsrs	r0, r0, #16
 8020454:	1852      	adds	r2, r2, r1
 8020456:	b29b      	uxth	r3, r3
 8020458:	1411      	asrs	r1, r2, #16
 802045a:	1ac3      	subs	r3, r0, r3
 802045c:	185b      	adds	r3, r3, r1
 802045e:	1419      	asrs	r1, r3, #16
 8020460:	b292      	uxth	r2, r2
 8020462:	041b      	lsls	r3, r3, #16
 8020464:	431a      	orrs	r2, r3
 8020466:	9b03      	ldr	r3, [sp, #12]
 8020468:	9104      	str	r1, [sp, #16]
 802046a:	c504      	stmia	r5!, {r2}
 802046c:	4563      	cmp	r3, ip
 802046e:	d2dc      	bcs.n	802042a <quorem+0x4e>
 8020470:	6823      	ldr	r3, [r4, #0]
 8020472:	2b00      	cmp	r3, #0
 8020474:	d030      	beq.n	80204d8 <quorem+0xfc>
 8020476:	0030      	movs	r0, r6
 8020478:	9902      	ldr	r1, [sp, #8]
 802047a:	f001 fd7d 	bl	8021f78 <__mcmp>
 802047e:	2800      	cmp	r0, #0
 8020480:	db23      	blt.n	80204ca <quorem+0xee>
 8020482:	0034      	movs	r4, r6
 8020484:	2500      	movs	r5, #0
 8020486:	9902      	ldr	r1, [sp, #8]
 8020488:	3414      	adds	r4, #20
 802048a:	3114      	adds	r1, #20
 802048c:	6823      	ldr	r3, [r4, #0]
 802048e:	c901      	ldmia	r1!, {r0}
 8020490:	9302      	str	r3, [sp, #8]
 8020492:	466b      	mov	r3, sp
 8020494:	891b      	ldrh	r3, [r3, #8]
 8020496:	b282      	uxth	r2, r0
 8020498:	1a9a      	subs	r2, r3, r2
 802049a:	9b02      	ldr	r3, [sp, #8]
 802049c:	1952      	adds	r2, r2, r5
 802049e:	0c00      	lsrs	r0, r0, #16
 80204a0:	0c1b      	lsrs	r3, r3, #16
 80204a2:	1a1b      	subs	r3, r3, r0
 80204a4:	1410      	asrs	r0, r2, #16
 80204a6:	181b      	adds	r3, r3, r0
 80204a8:	141d      	asrs	r5, r3, #16
 80204aa:	b292      	uxth	r2, r2
 80204ac:	041b      	lsls	r3, r3, #16
 80204ae:	431a      	orrs	r2, r3
 80204b0:	9b03      	ldr	r3, [sp, #12]
 80204b2:	c404      	stmia	r4!, {r2}
 80204b4:	428b      	cmp	r3, r1
 80204b6:	d2e9      	bcs.n	802048c <quorem+0xb0>
 80204b8:	9a01      	ldr	r2, [sp, #4]
 80204ba:	00bb      	lsls	r3, r7, #2
 80204bc:	18d3      	adds	r3, r2, r3
 80204be:	681a      	ldr	r2, [r3, #0]
 80204c0:	2a00      	cmp	r2, #0
 80204c2:	d013      	beq.n	80204ec <quorem+0x110>
 80204c4:	9b00      	ldr	r3, [sp, #0]
 80204c6:	3301      	adds	r3, #1
 80204c8:	9300      	str	r3, [sp, #0]
 80204ca:	9800      	ldr	r0, [sp, #0]
 80204cc:	b007      	add	sp, #28
 80204ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204d0:	6823      	ldr	r3, [r4, #0]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d104      	bne.n	80204e0 <quorem+0x104>
 80204d6:	3f01      	subs	r7, #1
 80204d8:	9b01      	ldr	r3, [sp, #4]
 80204da:	3c04      	subs	r4, #4
 80204dc:	42a3      	cmp	r3, r4
 80204de:	d3f7      	bcc.n	80204d0 <quorem+0xf4>
 80204e0:	6137      	str	r7, [r6, #16]
 80204e2:	e7c8      	b.n	8020476 <quorem+0x9a>
 80204e4:	681a      	ldr	r2, [r3, #0]
 80204e6:	2a00      	cmp	r2, #0
 80204e8:	d104      	bne.n	80204f4 <quorem+0x118>
 80204ea:	3f01      	subs	r7, #1
 80204ec:	9a01      	ldr	r2, [sp, #4]
 80204ee:	3b04      	subs	r3, #4
 80204f0:	429a      	cmp	r2, r3
 80204f2:	d3f7      	bcc.n	80204e4 <quorem+0x108>
 80204f4:	6137      	str	r7, [r6, #16]
 80204f6:	e7e5      	b.n	80204c4 <quorem+0xe8>

080204f8 <_dtoa_r>:
 80204f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204fa:	0014      	movs	r4, r2
 80204fc:	001d      	movs	r5, r3
 80204fe:	69c6      	ldr	r6, [r0, #28]
 8020500:	b09d      	sub	sp, #116	@ 0x74
 8020502:	940a      	str	r4, [sp, #40]	@ 0x28
 8020504:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020506:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020508:	9003      	str	r0, [sp, #12]
 802050a:	2e00      	cmp	r6, #0
 802050c:	d10f      	bne.n	802052e <_dtoa_r+0x36>
 802050e:	2010      	movs	r0, #16
 8020510:	f001 f98a 	bl	8021828 <malloc>
 8020514:	9b03      	ldr	r3, [sp, #12]
 8020516:	1e02      	subs	r2, r0, #0
 8020518:	61d8      	str	r0, [r3, #28]
 802051a:	d104      	bne.n	8020526 <_dtoa_r+0x2e>
 802051c:	21ef      	movs	r1, #239	@ 0xef
 802051e:	4bc7      	ldr	r3, [pc, #796]	@ (802083c <_dtoa_r+0x344>)
 8020520:	48c7      	ldr	r0, [pc, #796]	@ (8020840 <_dtoa_r+0x348>)
 8020522:	f002 fb2f 	bl	8022b84 <__assert_func>
 8020526:	6046      	str	r6, [r0, #4]
 8020528:	6086      	str	r6, [r0, #8]
 802052a:	6006      	str	r6, [r0, #0]
 802052c:	60c6      	str	r6, [r0, #12]
 802052e:	9b03      	ldr	r3, [sp, #12]
 8020530:	69db      	ldr	r3, [r3, #28]
 8020532:	6819      	ldr	r1, [r3, #0]
 8020534:	2900      	cmp	r1, #0
 8020536:	d00b      	beq.n	8020550 <_dtoa_r+0x58>
 8020538:	685a      	ldr	r2, [r3, #4]
 802053a:	2301      	movs	r3, #1
 802053c:	4093      	lsls	r3, r2
 802053e:	604a      	str	r2, [r1, #4]
 8020540:	608b      	str	r3, [r1, #8]
 8020542:	9803      	ldr	r0, [sp, #12]
 8020544:	f001 fa82 	bl	8021a4c <_Bfree>
 8020548:	2200      	movs	r2, #0
 802054a:	9b03      	ldr	r3, [sp, #12]
 802054c:	69db      	ldr	r3, [r3, #28]
 802054e:	601a      	str	r2, [r3, #0]
 8020550:	2d00      	cmp	r5, #0
 8020552:	da1e      	bge.n	8020592 <_dtoa_r+0x9a>
 8020554:	2301      	movs	r3, #1
 8020556:	603b      	str	r3, [r7, #0]
 8020558:	006b      	lsls	r3, r5, #1
 802055a:	085b      	lsrs	r3, r3, #1
 802055c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802055e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020560:	4bb8      	ldr	r3, [pc, #736]	@ (8020844 <_dtoa_r+0x34c>)
 8020562:	4ab8      	ldr	r2, [pc, #736]	@ (8020844 <_dtoa_r+0x34c>)
 8020564:	403b      	ands	r3, r7
 8020566:	4293      	cmp	r3, r2
 8020568:	d116      	bne.n	8020598 <_dtoa_r+0xa0>
 802056a:	4bb7      	ldr	r3, [pc, #732]	@ (8020848 <_dtoa_r+0x350>)
 802056c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802056e:	6013      	str	r3, [r2, #0]
 8020570:	033b      	lsls	r3, r7, #12
 8020572:	0b1b      	lsrs	r3, r3, #12
 8020574:	4323      	orrs	r3, r4
 8020576:	d101      	bne.n	802057c <_dtoa_r+0x84>
 8020578:	f000 fd83 	bl	8021082 <_dtoa_r+0xb8a>
 802057c:	4bb3      	ldr	r3, [pc, #716]	@ (802084c <_dtoa_r+0x354>)
 802057e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020580:	9308      	str	r3, [sp, #32]
 8020582:	2a00      	cmp	r2, #0
 8020584:	d002      	beq.n	802058c <_dtoa_r+0x94>
 8020586:	4bb2      	ldr	r3, [pc, #712]	@ (8020850 <_dtoa_r+0x358>)
 8020588:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802058a:	6013      	str	r3, [r2, #0]
 802058c:	9808      	ldr	r0, [sp, #32]
 802058e:	b01d      	add	sp, #116	@ 0x74
 8020590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020592:	2300      	movs	r3, #0
 8020594:	603b      	str	r3, [r7, #0]
 8020596:	e7e2      	b.n	802055e <_dtoa_r+0x66>
 8020598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802059a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802059c:	9212      	str	r2, [sp, #72]	@ 0x48
 802059e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80205a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80205a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80205a4:	2200      	movs	r2, #0
 80205a6:	2300      	movs	r3, #0
 80205a8:	f7df ff82 	bl	80004b0 <__aeabi_dcmpeq>
 80205ac:	1e06      	subs	r6, r0, #0
 80205ae:	d00b      	beq.n	80205c8 <_dtoa_r+0xd0>
 80205b0:	2301      	movs	r3, #1
 80205b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80205b4:	6013      	str	r3, [r2, #0]
 80205b6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	d002      	beq.n	80205c2 <_dtoa_r+0xca>
 80205bc:	4ba5      	ldr	r3, [pc, #660]	@ (8020854 <_dtoa_r+0x35c>)
 80205be:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80205c0:	6013      	str	r3, [r2, #0]
 80205c2:	4ba5      	ldr	r3, [pc, #660]	@ (8020858 <_dtoa_r+0x360>)
 80205c4:	9308      	str	r3, [sp, #32]
 80205c6:	e7e1      	b.n	802058c <_dtoa_r+0x94>
 80205c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80205ca:	9301      	str	r3, [sp, #4]
 80205cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80205ce:	9300      	str	r3, [sp, #0]
 80205d0:	9803      	ldr	r0, [sp, #12]
 80205d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80205d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80205d6:	f001 fdf1 	bl	80221bc <__d2b>
 80205da:	007a      	lsls	r2, r7, #1
 80205dc:	9005      	str	r0, [sp, #20]
 80205de:	0d52      	lsrs	r2, r2, #21
 80205e0:	d100      	bne.n	80205e4 <_dtoa_r+0xec>
 80205e2:	e07b      	b.n	80206dc <_dtoa_r+0x1e4>
 80205e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80205e6:	9618      	str	r6, [sp, #96]	@ 0x60
 80205e8:	0319      	lsls	r1, r3, #12
 80205ea:	4b9c      	ldr	r3, [pc, #624]	@ (802085c <_dtoa_r+0x364>)
 80205ec:	0b09      	lsrs	r1, r1, #12
 80205ee:	430b      	orrs	r3, r1
 80205f0:	499b      	ldr	r1, [pc, #620]	@ (8020860 <_dtoa_r+0x368>)
 80205f2:	1857      	adds	r7, r2, r1
 80205f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80205f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80205f8:	0019      	movs	r1, r3
 80205fa:	2200      	movs	r2, #0
 80205fc:	4b99      	ldr	r3, [pc, #612]	@ (8020864 <_dtoa_r+0x36c>)
 80205fe:	f7e2 fae5 	bl	8002bcc <__aeabi_dsub>
 8020602:	4a99      	ldr	r2, [pc, #612]	@ (8020868 <_dtoa_r+0x370>)
 8020604:	4b99      	ldr	r3, [pc, #612]	@ (802086c <_dtoa_r+0x374>)
 8020606:	f7e2 f819 	bl	800263c <__aeabi_dmul>
 802060a:	4a99      	ldr	r2, [pc, #612]	@ (8020870 <_dtoa_r+0x378>)
 802060c:	4b99      	ldr	r3, [pc, #612]	@ (8020874 <_dtoa_r+0x37c>)
 802060e:	f7e1 f86d 	bl	80016ec <__aeabi_dadd>
 8020612:	0004      	movs	r4, r0
 8020614:	0038      	movs	r0, r7
 8020616:	000d      	movs	r5, r1
 8020618:	f7e2 fed2 	bl	80033c0 <__aeabi_i2d>
 802061c:	4a96      	ldr	r2, [pc, #600]	@ (8020878 <_dtoa_r+0x380>)
 802061e:	4b97      	ldr	r3, [pc, #604]	@ (802087c <_dtoa_r+0x384>)
 8020620:	f7e2 f80c 	bl	800263c <__aeabi_dmul>
 8020624:	0002      	movs	r2, r0
 8020626:	000b      	movs	r3, r1
 8020628:	0020      	movs	r0, r4
 802062a:	0029      	movs	r1, r5
 802062c:	f7e1 f85e 	bl	80016ec <__aeabi_dadd>
 8020630:	0004      	movs	r4, r0
 8020632:	000d      	movs	r5, r1
 8020634:	f7e2 fe88 	bl	8003348 <__aeabi_d2iz>
 8020638:	2200      	movs	r2, #0
 802063a:	9004      	str	r0, [sp, #16]
 802063c:	2300      	movs	r3, #0
 802063e:	0020      	movs	r0, r4
 8020640:	0029      	movs	r1, r5
 8020642:	f7df ff3b 	bl	80004bc <__aeabi_dcmplt>
 8020646:	2800      	cmp	r0, #0
 8020648:	d00b      	beq.n	8020662 <_dtoa_r+0x16a>
 802064a:	9804      	ldr	r0, [sp, #16]
 802064c:	f7e2 feb8 	bl	80033c0 <__aeabi_i2d>
 8020650:	002b      	movs	r3, r5
 8020652:	0022      	movs	r2, r4
 8020654:	f7df ff2c 	bl	80004b0 <__aeabi_dcmpeq>
 8020658:	4243      	negs	r3, r0
 802065a:	4158      	adcs	r0, r3
 802065c:	9b04      	ldr	r3, [sp, #16]
 802065e:	1a1b      	subs	r3, r3, r0
 8020660:	9304      	str	r3, [sp, #16]
 8020662:	2301      	movs	r3, #1
 8020664:	9315      	str	r3, [sp, #84]	@ 0x54
 8020666:	9b04      	ldr	r3, [sp, #16]
 8020668:	2b16      	cmp	r3, #22
 802066a:	d810      	bhi.n	802068e <_dtoa_r+0x196>
 802066c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802066e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020670:	9a04      	ldr	r2, [sp, #16]
 8020672:	4b83      	ldr	r3, [pc, #524]	@ (8020880 <_dtoa_r+0x388>)
 8020674:	00d2      	lsls	r2, r2, #3
 8020676:	189b      	adds	r3, r3, r2
 8020678:	681a      	ldr	r2, [r3, #0]
 802067a:	685b      	ldr	r3, [r3, #4]
 802067c:	f7df ff1e 	bl	80004bc <__aeabi_dcmplt>
 8020680:	2800      	cmp	r0, #0
 8020682:	d047      	beq.n	8020714 <_dtoa_r+0x21c>
 8020684:	9b04      	ldr	r3, [sp, #16]
 8020686:	3b01      	subs	r3, #1
 8020688:	9304      	str	r3, [sp, #16]
 802068a:	2300      	movs	r3, #0
 802068c:	9315      	str	r3, [sp, #84]	@ 0x54
 802068e:	2200      	movs	r2, #0
 8020690:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020692:	9206      	str	r2, [sp, #24]
 8020694:	1bdb      	subs	r3, r3, r7
 8020696:	1e5a      	subs	r2, r3, #1
 8020698:	d53e      	bpl.n	8020718 <_dtoa_r+0x220>
 802069a:	2201      	movs	r2, #1
 802069c:	1ad3      	subs	r3, r2, r3
 802069e:	9306      	str	r3, [sp, #24]
 80206a0:	2300      	movs	r3, #0
 80206a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80206a4:	9b04      	ldr	r3, [sp, #16]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	db38      	blt.n	802071c <_dtoa_r+0x224>
 80206aa:	9a04      	ldr	r2, [sp, #16]
 80206ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80206ae:	4694      	mov	ip, r2
 80206b0:	4463      	add	r3, ip
 80206b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80206b4:	2300      	movs	r3, #0
 80206b6:	9214      	str	r2, [sp, #80]	@ 0x50
 80206b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206bc:	2401      	movs	r4, #1
 80206be:	2b09      	cmp	r3, #9
 80206c0:	d867      	bhi.n	8020792 <_dtoa_r+0x29a>
 80206c2:	2b05      	cmp	r3, #5
 80206c4:	dd02      	ble.n	80206cc <_dtoa_r+0x1d4>
 80206c6:	2400      	movs	r4, #0
 80206c8:	3b04      	subs	r3, #4
 80206ca:	9322      	str	r3, [sp, #136]	@ 0x88
 80206cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206ce:	1e98      	subs	r0, r3, #2
 80206d0:	2803      	cmp	r0, #3
 80206d2:	d867      	bhi.n	80207a4 <_dtoa_r+0x2ac>
 80206d4:	f7df fd52 	bl	800017c <__gnu_thumb1_case_uqi>
 80206d8:	5b383a2b 	.word	0x5b383a2b
 80206dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80206de:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80206e0:	18f6      	adds	r6, r6, r3
 80206e2:	4b68      	ldr	r3, [pc, #416]	@ (8020884 <_dtoa_r+0x38c>)
 80206e4:	18f2      	adds	r2, r6, r3
 80206e6:	2a20      	cmp	r2, #32
 80206e8:	dd0f      	ble.n	802070a <_dtoa_r+0x212>
 80206ea:	2340      	movs	r3, #64	@ 0x40
 80206ec:	1a9b      	subs	r3, r3, r2
 80206ee:	409f      	lsls	r7, r3
 80206f0:	4b65      	ldr	r3, [pc, #404]	@ (8020888 <_dtoa_r+0x390>)
 80206f2:	0038      	movs	r0, r7
 80206f4:	18f3      	adds	r3, r6, r3
 80206f6:	40dc      	lsrs	r4, r3
 80206f8:	4320      	orrs	r0, r4
 80206fa:	f7e2 fe8f 	bl	800341c <__aeabi_ui2d>
 80206fe:	2201      	movs	r2, #1
 8020700:	4b62      	ldr	r3, [pc, #392]	@ (802088c <_dtoa_r+0x394>)
 8020702:	1e77      	subs	r7, r6, #1
 8020704:	18cb      	adds	r3, r1, r3
 8020706:	9218      	str	r2, [sp, #96]	@ 0x60
 8020708:	e776      	b.n	80205f8 <_dtoa_r+0x100>
 802070a:	2320      	movs	r3, #32
 802070c:	0020      	movs	r0, r4
 802070e:	1a9b      	subs	r3, r3, r2
 8020710:	4098      	lsls	r0, r3
 8020712:	e7f2      	b.n	80206fa <_dtoa_r+0x202>
 8020714:	9015      	str	r0, [sp, #84]	@ 0x54
 8020716:	e7ba      	b.n	802068e <_dtoa_r+0x196>
 8020718:	920d      	str	r2, [sp, #52]	@ 0x34
 802071a:	e7c3      	b.n	80206a4 <_dtoa_r+0x1ac>
 802071c:	9b06      	ldr	r3, [sp, #24]
 802071e:	9a04      	ldr	r2, [sp, #16]
 8020720:	1a9b      	subs	r3, r3, r2
 8020722:	9306      	str	r3, [sp, #24]
 8020724:	4253      	negs	r3, r2
 8020726:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020728:	2300      	movs	r3, #0
 802072a:	9314      	str	r3, [sp, #80]	@ 0x50
 802072c:	e7c5      	b.n	80206ba <_dtoa_r+0x1c2>
 802072e:	2300      	movs	r3, #0
 8020730:	9310      	str	r3, [sp, #64]	@ 0x40
 8020732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020734:	930e      	str	r3, [sp, #56]	@ 0x38
 8020736:	9309      	str	r3, [sp, #36]	@ 0x24
 8020738:	2b00      	cmp	r3, #0
 802073a:	dc13      	bgt.n	8020764 <_dtoa_r+0x26c>
 802073c:	2301      	movs	r3, #1
 802073e:	001a      	movs	r2, r3
 8020740:	930e      	str	r3, [sp, #56]	@ 0x38
 8020742:	9309      	str	r3, [sp, #36]	@ 0x24
 8020744:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020746:	e00d      	b.n	8020764 <_dtoa_r+0x26c>
 8020748:	2301      	movs	r3, #1
 802074a:	e7f1      	b.n	8020730 <_dtoa_r+0x238>
 802074c:	2300      	movs	r3, #0
 802074e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020750:	9310      	str	r3, [sp, #64]	@ 0x40
 8020752:	4694      	mov	ip, r2
 8020754:	9b04      	ldr	r3, [sp, #16]
 8020756:	4463      	add	r3, ip
 8020758:	930e      	str	r3, [sp, #56]	@ 0x38
 802075a:	3301      	adds	r3, #1
 802075c:	9309      	str	r3, [sp, #36]	@ 0x24
 802075e:	2b00      	cmp	r3, #0
 8020760:	dc00      	bgt.n	8020764 <_dtoa_r+0x26c>
 8020762:	2301      	movs	r3, #1
 8020764:	9a03      	ldr	r2, [sp, #12]
 8020766:	2100      	movs	r1, #0
 8020768:	69d0      	ldr	r0, [r2, #28]
 802076a:	2204      	movs	r2, #4
 802076c:	0015      	movs	r5, r2
 802076e:	3514      	adds	r5, #20
 8020770:	429d      	cmp	r5, r3
 8020772:	d91b      	bls.n	80207ac <_dtoa_r+0x2b4>
 8020774:	6041      	str	r1, [r0, #4]
 8020776:	9803      	ldr	r0, [sp, #12]
 8020778:	f001 f924 	bl	80219c4 <_Balloc>
 802077c:	9008      	str	r0, [sp, #32]
 802077e:	2800      	cmp	r0, #0
 8020780:	d117      	bne.n	80207b2 <_dtoa_r+0x2ba>
 8020782:	21b0      	movs	r1, #176	@ 0xb0
 8020784:	4b42      	ldr	r3, [pc, #264]	@ (8020890 <_dtoa_r+0x398>)
 8020786:	482e      	ldr	r0, [pc, #184]	@ (8020840 <_dtoa_r+0x348>)
 8020788:	9a08      	ldr	r2, [sp, #32]
 802078a:	31ff      	adds	r1, #255	@ 0xff
 802078c:	e6c9      	b.n	8020522 <_dtoa_r+0x2a>
 802078e:	2301      	movs	r3, #1
 8020790:	e7dd      	b.n	802074e <_dtoa_r+0x256>
 8020792:	2300      	movs	r3, #0
 8020794:	9410      	str	r4, [sp, #64]	@ 0x40
 8020796:	9322      	str	r3, [sp, #136]	@ 0x88
 8020798:	3b01      	subs	r3, #1
 802079a:	930e      	str	r3, [sp, #56]	@ 0x38
 802079c:	9309      	str	r3, [sp, #36]	@ 0x24
 802079e:	2200      	movs	r2, #0
 80207a0:	3313      	adds	r3, #19
 80207a2:	e7cf      	b.n	8020744 <_dtoa_r+0x24c>
 80207a4:	2301      	movs	r3, #1
 80207a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80207a8:	3b02      	subs	r3, #2
 80207aa:	e7f6      	b.n	802079a <_dtoa_r+0x2a2>
 80207ac:	3101      	adds	r1, #1
 80207ae:	0052      	lsls	r2, r2, #1
 80207b0:	e7dc      	b.n	802076c <_dtoa_r+0x274>
 80207b2:	9b03      	ldr	r3, [sp, #12]
 80207b4:	9a08      	ldr	r2, [sp, #32]
 80207b6:	69db      	ldr	r3, [r3, #28]
 80207b8:	601a      	str	r2, [r3, #0]
 80207ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207bc:	2b0e      	cmp	r3, #14
 80207be:	d900      	bls.n	80207c2 <_dtoa_r+0x2ca>
 80207c0:	e0d9      	b.n	8020976 <_dtoa_r+0x47e>
 80207c2:	2c00      	cmp	r4, #0
 80207c4:	d100      	bne.n	80207c8 <_dtoa_r+0x2d0>
 80207c6:	e0d6      	b.n	8020976 <_dtoa_r+0x47e>
 80207c8:	9b04      	ldr	r3, [sp, #16]
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	dd64      	ble.n	8020898 <_dtoa_r+0x3a0>
 80207ce:	210f      	movs	r1, #15
 80207d0:	9a04      	ldr	r2, [sp, #16]
 80207d2:	4b2b      	ldr	r3, [pc, #172]	@ (8020880 <_dtoa_r+0x388>)
 80207d4:	400a      	ands	r2, r1
 80207d6:	00d2      	lsls	r2, r2, #3
 80207d8:	189b      	adds	r3, r3, r2
 80207da:	681e      	ldr	r6, [r3, #0]
 80207dc:	685f      	ldr	r7, [r3, #4]
 80207de:	9b04      	ldr	r3, [sp, #16]
 80207e0:	2402      	movs	r4, #2
 80207e2:	111d      	asrs	r5, r3, #4
 80207e4:	05db      	lsls	r3, r3, #23
 80207e6:	d50a      	bpl.n	80207fe <_dtoa_r+0x306>
 80207e8:	4b2a      	ldr	r3, [pc, #168]	@ (8020894 <_dtoa_r+0x39c>)
 80207ea:	400d      	ands	r5, r1
 80207ec:	6a1a      	ldr	r2, [r3, #32]
 80207ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80207f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80207f4:	f7e1 fade 	bl	8001db4 <__aeabi_ddiv>
 80207f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80207fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207fc:	3401      	adds	r4, #1
 80207fe:	4b25      	ldr	r3, [pc, #148]	@ (8020894 <_dtoa_r+0x39c>)
 8020800:	930c      	str	r3, [sp, #48]	@ 0x30
 8020802:	2d00      	cmp	r5, #0
 8020804:	d108      	bne.n	8020818 <_dtoa_r+0x320>
 8020806:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802080a:	0032      	movs	r2, r6
 802080c:	003b      	movs	r3, r7
 802080e:	f7e1 fad1 	bl	8001db4 <__aeabi_ddiv>
 8020812:	900a      	str	r0, [sp, #40]	@ 0x28
 8020814:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020816:	e05a      	b.n	80208ce <_dtoa_r+0x3d6>
 8020818:	2301      	movs	r3, #1
 802081a:	421d      	tst	r5, r3
 802081c:	d009      	beq.n	8020832 <_dtoa_r+0x33a>
 802081e:	18e4      	adds	r4, r4, r3
 8020820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020822:	0030      	movs	r0, r6
 8020824:	681a      	ldr	r2, [r3, #0]
 8020826:	685b      	ldr	r3, [r3, #4]
 8020828:	0039      	movs	r1, r7
 802082a:	f7e1 ff07 	bl	800263c <__aeabi_dmul>
 802082e:	0006      	movs	r6, r0
 8020830:	000f      	movs	r7, r1
 8020832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020834:	106d      	asrs	r5, r5, #1
 8020836:	3308      	adds	r3, #8
 8020838:	e7e2      	b.n	8020800 <_dtoa_r+0x308>
 802083a:	46c0      	nop			@ (mov r8, r8)
 802083c:	08025d4a 	.word	0x08025d4a
 8020840:	08025d61 	.word	0x08025d61
 8020844:	7ff00000 	.word	0x7ff00000
 8020848:	0000270f 	.word	0x0000270f
 802084c:	08025d46 	.word	0x08025d46
 8020850:	08025d49 	.word	0x08025d49
 8020854:	08025d12 	.word	0x08025d12
 8020858:	08025d11 	.word	0x08025d11
 802085c:	3ff00000 	.word	0x3ff00000
 8020860:	fffffc01 	.word	0xfffffc01
 8020864:	3ff80000 	.word	0x3ff80000
 8020868:	636f4361 	.word	0x636f4361
 802086c:	3fd287a7 	.word	0x3fd287a7
 8020870:	8b60c8b3 	.word	0x8b60c8b3
 8020874:	3fc68a28 	.word	0x3fc68a28
 8020878:	509f79fb 	.word	0x509f79fb
 802087c:	3fd34413 	.word	0x3fd34413
 8020880:	08025eb8 	.word	0x08025eb8
 8020884:	00000432 	.word	0x00000432
 8020888:	00000412 	.word	0x00000412
 802088c:	fe100000 	.word	0xfe100000
 8020890:	08025db9 	.word	0x08025db9
 8020894:	08025e90 	.word	0x08025e90
 8020898:	9b04      	ldr	r3, [sp, #16]
 802089a:	2402      	movs	r4, #2
 802089c:	2b00      	cmp	r3, #0
 802089e:	d016      	beq.n	80208ce <_dtoa_r+0x3d6>
 80208a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80208a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80208a4:	220f      	movs	r2, #15
 80208a6:	425d      	negs	r5, r3
 80208a8:	402a      	ands	r2, r5
 80208aa:	4bd7      	ldr	r3, [pc, #860]	@ (8020c08 <_dtoa_r+0x710>)
 80208ac:	00d2      	lsls	r2, r2, #3
 80208ae:	189b      	adds	r3, r3, r2
 80208b0:	681a      	ldr	r2, [r3, #0]
 80208b2:	685b      	ldr	r3, [r3, #4]
 80208b4:	f7e1 fec2 	bl	800263c <__aeabi_dmul>
 80208b8:	2701      	movs	r7, #1
 80208ba:	2300      	movs	r3, #0
 80208bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80208be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80208c0:	4ed2      	ldr	r6, [pc, #840]	@ (8020c0c <_dtoa_r+0x714>)
 80208c2:	112d      	asrs	r5, r5, #4
 80208c4:	2d00      	cmp	r5, #0
 80208c6:	d000      	beq.n	80208ca <_dtoa_r+0x3d2>
 80208c8:	e0ba      	b.n	8020a40 <_dtoa_r+0x548>
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d1a1      	bne.n	8020812 <_dtoa_r+0x31a>
 80208ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80208d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80208d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	d100      	bne.n	80208da <_dtoa_r+0x3e2>
 80208d8:	e0bd      	b.n	8020a56 <_dtoa_r+0x55e>
 80208da:	2200      	movs	r2, #0
 80208dc:	0030      	movs	r0, r6
 80208de:	0039      	movs	r1, r7
 80208e0:	4bcb      	ldr	r3, [pc, #812]	@ (8020c10 <_dtoa_r+0x718>)
 80208e2:	f7df fdeb 	bl	80004bc <__aeabi_dcmplt>
 80208e6:	2800      	cmp	r0, #0
 80208e8:	d100      	bne.n	80208ec <_dtoa_r+0x3f4>
 80208ea:	e0b4      	b.n	8020a56 <_dtoa_r+0x55e>
 80208ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	d100      	bne.n	80208f4 <_dtoa_r+0x3fc>
 80208f2:	e0b0      	b.n	8020a56 <_dtoa_r+0x55e>
 80208f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	dd39      	ble.n	802096e <_dtoa_r+0x476>
 80208fa:	9b04      	ldr	r3, [sp, #16]
 80208fc:	2200      	movs	r2, #0
 80208fe:	3b01      	subs	r3, #1
 8020900:	930c      	str	r3, [sp, #48]	@ 0x30
 8020902:	0030      	movs	r0, r6
 8020904:	4bc3      	ldr	r3, [pc, #780]	@ (8020c14 <_dtoa_r+0x71c>)
 8020906:	0039      	movs	r1, r7
 8020908:	f7e1 fe98 	bl	800263c <__aeabi_dmul>
 802090c:	900a      	str	r0, [sp, #40]	@ 0x28
 802090e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020912:	3401      	adds	r4, #1
 8020914:	0020      	movs	r0, r4
 8020916:	9311      	str	r3, [sp, #68]	@ 0x44
 8020918:	f7e2 fd52 	bl	80033c0 <__aeabi_i2d>
 802091c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802091e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020920:	f7e1 fe8c 	bl	800263c <__aeabi_dmul>
 8020924:	4bbc      	ldr	r3, [pc, #752]	@ (8020c18 <_dtoa_r+0x720>)
 8020926:	2200      	movs	r2, #0
 8020928:	f7e0 fee0 	bl	80016ec <__aeabi_dadd>
 802092c:	4bbb      	ldr	r3, [pc, #748]	@ (8020c1c <_dtoa_r+0x724>)
 802092e:	0006      	movs	r6, r0
 8020930:	18cf      	adds	r7, r1, r3
 8020932:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020934:	2b00      	cmp	r3, #0
 8020936:	d000      	beq.n	802093a <_dtoa_r+0x442>
 8020938:	e091      	b.n	8020a5e <_dtoa_r+0x566>
 802093a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802093c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802093e:	2200      	movs	r2, #0
 8020940:	4bb7      	ldr	r3, [pc, #732]	@ (8020c20 <_dtoa_r+0x728>)
 8020942:	f7e2 f943 	bl	8002bcc <__aeabi_dsub>
 8020946:	0032      	movs	r2, r6
 8020948:	003b      	movs	r3, r7
 802094a:	0004      	movs	r4, r0
 802094c:	000d      	movs	r5, r1
 802094e:	f7df fdc9 	bl	80004e4 <__aeabi_dcmpgt>
 8020952:	2800      	cmp	r0, #0
 8020954:	d000      	beq.n	8020958 <_dtoa_r+0x460>
 8020956:	e29d      	b.n	8020e94 <_dtoa_r+0x99c>
 8020958:	2180      	movs	r1, #128	@ 0x80
 802095a:	0609      	lsls	r1, r1, #24
 802095c:	187b      	adds	r3, r7, r1
 802095e:	0032      	movs	r2, r6
 8020960:	0020      	movs	r0, r4
 8020962:	0029      	movs	r1, r5
 8020964:	f7df fdaa 	bl	80004bc <__aeabi_dcmplt>
 8020968:	2800      	cmp	r0, #0
 802096a:	d000      	beq.n	802096e <_dtoa_r+0x476>
 802096c:	e130      	b.n	8020bd0 <_dtoa_r+0x6d8>
 802096e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020970:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020972:	930a      	str	r3, [sp, #40]	@ 0x28
 8020974:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020976:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020978:	2b00      	cmp	r3, #0
 802097a:	da00      	bge.n	802097e <_dtoa_r+0x486>
 802097c:	e177      	b.n	8020c6e <_dtoa_r+0x776>
 802097e:	9a04      	ldr	r2, [sp, #16]
 8020980:	2a0e      	cmp	r2, #14
 8020982:	dd00      	ble.n	8020986 <_dtoa_r+0x48e>
 8020984:	e173      	b.n	8020c6e <_dtoa_r+0x776>
 8020986:	4ba0      	ldr	r3, [pc, #640]	@ (8020c08 <_dtoa_r+0x710>)
 8020988:	00d2      	lsls	r2, r2, #3
 802098a:	189b      	adds	r3, r3, r2
 802098c:	685c      	ldr	r4, [r3, #4]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	9306      	str	r3, [sp, #24]
 8020992:	9407      	str	r4, [sp, #28]
 8020994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020996:	2b00      	cmp	r3, #0
 8020998:	da03      	bge.n	80209a2 <_dtoa_r+0x4aa>
 802099a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802099c:	2b00      	cmp	r3, #0
 802099e:	dc00      	bgt.n	80209a2 <_dtoa_r+0x4aa>
 80209a0:	e106      	b.n	8020bb0 <_dtoa_r+0x6b8>
 80209a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80209a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80209a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209a8:	9d08      	ldr	r5, [sp, #32]
 80209aa:	3b01      	subs	r3, #1
 80209ac:	195b      	adds	r3, r3, r5
 80209ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80209b0:	9a06      	ldr	r2, [sp, #24]
 80209b2:	9b07      	ldr	r3, [sp, #28]
 80209b4:	0030      	movs	r0, r6
 80209b6:	0039      	movs	r1, r7
 80209b8:	f7e1 f9fc 	bl	8001db4 <__aeabi_ddiv>
 80209bc:	f7e2 fcc4 	bl	8003348 <__aeabi_d2iz>
 80209c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80209c2:	f7e2 fcfd 	bl	80033c0 <__aeabi_i2d>
 80209c6:	9a06      	ldr	r2, [sp, #24]
 80209c8:	9b07      	ldr	r3, [sp, #28]
 80209ca:	f7e1 fe37 	bl	800263c <__aeabi_dmul>
 80209ce:	0002      	movs	r2, r0
 80209d0:	000b      	movs	r3, r1
 80209d2:	0030      	movs	r0, r6
 80209d4:	0039      	movs	r1, r7
 80209d6:	f7e2 f8f9 	bl	8002bcc <__aeabi_dsub>
 80209da:	002b      	movs	r3, r5
 80209dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80209de:	3501      	adds	r5, #1
 80209e0:	3230      	adds	r2, #48	@ 0x30
 80209e2:	701a      	strb	r2, [r3, #0]
 80209e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80209e6:	002c      	movs	r4, r5
 80209e8:	429a      	cmp	r2, r3
 80209ea:	d000      	beq.n	80209ee <_dtoa_r+0x4f6>
 80209ec:	e131      	b.n	8020c52 <_dtoa_r+0x75a>
 80209ee:	0002      	movs	r2, r0
 80209f0:	000b      	movs	r3, r1
 80209f2:	f7e0 fe7b 	bl	80016ec <__aeabi_dadd>
 80209f6:	9a06      	ldr	r2, [sp, #24]
 80209f8:	9b07      	ldr	r3, [sp, #28]
 80209fa:	0006      	movs	r6, r0
 80209fc:	000f      	movs	r7, r1
 80209fe:	f7df fd71 	bl	80004e4 <__aeabi_dcmpgt>
 8020a02:	2800      	cmp	r0, #0
 8020a04:	d000      	beq.n	8020a08 <_dtoa_r+0x510>
 8020a06:	e10f      	b.n	8020c28 <_dtoa_r+0x730>
 8020a08:	9a06      	ldr	r2, [sp, #24]
 8020a0a:	9b07      	ldr	r3, [sp, #28]
 8020a0c:	0030      	movs	r0, r6
 8020a0e:	0039      	movs	r1, r7
 8020a10:	f7df fd4e 	bl	80004b0 <__aeabi_dcmpeq>
 8020a14:	2800      	cmp	r0, #0
 8020a16:	d003      	beq.n	8020a20 <_dtoa_r+0x528>
 8020a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a1a:	07dd      	lsls	r5, r3, #31
 8020a1c:	d500      	bpl.n	8020a20 <_dtoa_r+0x528>
 8020a1e:	e103      	b.n	8020c28 <_dtoa_r+0x730>
 8020a20:	9905      	ldr	r1, [sp, #20]
 8020a22:	9803      	ldr	r0, [sp, #12]
 8020a24:	f001 f812 	bl	8021a4c <_Bfree>
 8020a28:	2300      	movs	r3, #0
 8020a2a:	7023      	strb	r3, [r4, #0]
 8020a2c:	9b04      	ldr	r3, [sp, #16]
 8020a2e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020a30:	3301      	adds	r3, #1
 8020a32:	6013      	str	r3, [r2, #0]
 8020a34:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d100      	bne.n	8020a3c <_dtoa_r+0x544>
 8020a3a:	e5a7      	b.n	802058c <_dtoa_r+0x94>
 8020a3c:	601c      	str	r4, [r3, #0]
 8020a3e:	e5a5      	b.n	802058c <_dtoa_r+0x94>
 8020a40:	423d      	tst	r5, r7
 8020a42:	d005      	beq.n	8020a50 <_dtoa_r+0x558>
 8020a44:	6832      	ldr	r2, [r6, #0]
 8020a46:	6873      	ldr	r3, [r6, #4]
 8020a48:	f7e1 fdf8 	bl	800263c <__aeabi_dmul>
 8020a4c:	003b      	movs	r3, r7
 8020a4e:	3401      	adds	r4, #1
 8020a50:	106d      	asrs	r5, r5, #1
 8020a52:	3608      	adds	r6, #8
 8020a54:	e736      	b.n	80208c4 <_dtoa_r+0x3cc>
 8020a56:	9b04      	ldr	r3, [sp, #16]
 8020a58:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a5c:	e75a      	b.n	8020914 <_dtoa_r+0x41c>
 8020a5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a60:	4b69      	ldr	r3, [pc, #420]	@ (8020c08 <_dtoa_r+0x710>)
 8020a62:	3a01      	subs	r2, #1
 8020a64:	00d2      	lsls	r2, r2, #3
 8020a66:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020a68:	189b      	adds	r3, r3, r2
 8020a6a:	681a      	ldr	r2, [r3, #0]
 8020a6c:	685b      	ldr	r3, [r3, #4]
 8020a6e:	2900      	cmp	r1, #0
 8020a70:	d04c      	beq.n	8020b0c <_dtoa_r+0x614>
 8020a72:	2000      	movs	r0, #0
 8020a74:	496b      	ldr	r1, [pc, #428]	@ (8020c24 <_dtoa_r+0x72c>)
 8020a76:	f7e1 f99d 	bl	8001db4 <__aeabi_ddiv>
 8020a7a:	0032      	movs	r2, r6
 8020a7c:	003b      	movs	r3, r7
 8020a7e:	f7e2 f8a5 	bl	8002bcc <__aeabi_dsub>
 8020a82:	9a08      	ldr	r2, [sp, #32]
 8020a84:	0006      	movs	r6, r0
 8020a86:	4694      	mov	ip, r2
 8020a88:	000f      	movs	r7, r1
 8020a8a:	9b08      	ldr	r3, [sp, #32]
 8020a8c:	9316      	str	r3, [sp, #88]	@ 0x58
 8020a8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a90:	4463      	add	r3, ip
 8020a92:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a96:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a98:	f7e2 fc56 	bl	8003348 <__aeabi_d2iz>
 8020a9c:	0005      	movs	r5, r0
 8020a9e:	f7e2 fc8f 	bl	80033c0 <__aeabi_i2d>
 8020aa2:	0002      	movs	r2, r0
 8020aa4:	000b      	movs	r3, r1
 8020aa6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020aa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020aaa:	f7e2 f88f 	bl	8002bcc <__aeabi_dsub>
 8020aae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020ab0:	3530      	adds	r5, #48	@ 0x30
 8020ab2:	1c5c      	adds	r4, r3, #1
 8020ab4:	701d      	strb	r5, [r3, #0]
 8020ab6:	0032      	movs	r2, r6
 8020ab8:	003b      	movs	r3, r7
 8020aba:	900a      	str	r0, [sp, #40]	@ 0x28
 8020abc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020abe:	f7df fcfd 	bl	80004bc <__aeabi_dcmplt>
 8020ac2:	2800      	cmp	r0, #0
 8020ac4:	d16a      	bne.n	8020b9c <_dtoa_r+0x6a4>
 8020ac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020ac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020aca:	2000      	movs	r0, #0
 8020acc:	4950      	ldr	r1, [pc, #320]	@ (8020c10 <_dtoa_r+0x718>)
 8020ace:	f7e2 f87d 	bl	8002bcc <__aeabi_dsub>
 8020ad2:	0032      	movs	r2, r6
 8020ad4:	003b      	movs	r3, r7
 8020ad6:	f7df fcf1 	bl	80004bc <__aeabi_dcmplt>
 8020ada:	2800      	cmp	r0, #0
 8020adc:	d000      	beq.n	8020ae0 <_dtoa_r+0x5e8>
 8020ade:	e0a5      	b.n	8020c2c <_dtoa_r+0x734>
 8020ae0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020ae2:	42a3      	cmp	r3, r4
 8020ae4:	d100      	bne.n	8020ae8 <_dtoa_r+0x5f0>
 8020ae6:	e742      	b.n	802096e <_dtoa_r+0x476>
 8020ae8:	2200      	movs	r2, #0
 8020aea:	0030      	movs	r0, r6
 8020aec:	0039      	movs	r1, r7
 8020aee:	4b49      	ldr	r3, [pc, #292]	@ (8020c14 <_dtoa_r+0x71c>)
 8020af0:	f7e1 fda4 	bl	800263c <__aeabi_dmul>
 8020af4:	2200      	movs	r2, #0
 8020af6:	0006      	movs	r6, r0
 8020af8:	000f      	movs	r7, r1
 8020afa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020afe:	4b45      	ldr	r3, [pc, #276]	@ (8020c14 <_dtoa_r+0x71c>)
 8020b00:	f7e1 fd9c 	bl	800263c <__aeabi_dmul>
 8020b04:	9416      	str	r4, [sp, #88]	@ 0x58
 8020b06:	900a      	str	r0, [sp, #40]	@ 0x28
 8020b08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b0a:	e7c3      	b.n	8020a94 <_dtoa_r+0x59c>
 8020b0c:	0030      	movs	r0, r6
 8020b0e:	0039      	movs	r1, r7
 8020b10:	f7e1 fd94 	bl	800263c <__aeabi_dmul>
 8020b14:	9d08      	ldr	r5, [sp, #32]
 8020b16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b18:	002b      	movs	r3, r5
 8020b1a:	4694      	mov	ip, r2
 8020b1c:	9016      	str	r0, [sp, #88]	@ 0x58
 8020b1e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020b20:	4463      	add	r3, ip
 8020b22:	9319      	str	r3, [sp, #100]	@ 0x64
 8020b24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020b26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020b28:	f7e2 fc0e 	bl	8003348 <__aeabi_d2iz>
 8020b2c:	0004      	movs	r4, r0
 8020b2e:	f7e2 fc47 	bl	80033c0 <__aeabi_i2d>
 8020b32:	000b      	movs	r3, r1
 8020b34:	0002      	movs	r2, r0
 8020b36:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020b3a:	f7e2 f847 	bl	8002bcc <__aeabi_dsub>
 8020b3e:	3430      	adds	r4, #48	@ 0x30
 8020b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020b42:	702c      	strb	r4, [r5, #0]
 8020b44:	3501      	adds	r5, #1
 8020b46:	0006      	movs	r6, r0
 8020b48:	000f      	movs	r7, r1
 8020b4a:	42ab      	cmp	r3, r5
 8020b4c:	d129      	bne.n	8020ba2 <_dtoa_r+0x6aa>
 8020b4e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020b50:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020b52:	9b08      	ldr	r3, [sp, #32]
 8020b54:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020b56:	469c      	mov	ip, r3
 8020b58:	2200      	movs	r2, #0
 8020b5a:	4b32      	ldr	r3, [pc, #200]	@ (8020c24 <_dtoa_r+0x72c>)
 8020b5c:	4464      	add	r4, ip
 8020b5e:	f7e0 fdc5 	bl	80016ec <__aeabi_dadd>
 8020b62:	0002      	movs	r2, r0
 8020b64:	000b      	movs	r3, r1
 8020b66:	0030      	movs	r0, r6
 8020b68:	0039      	movs	r1, r7
 8020b6a:	f7df fcbb 	bl	80004e4 <__aeabi_dcmpgt>
 8020b6e:	2800      	cmp	r0, #0
 8020b70:	d15c      	bne.n	8020c2c <_dtoa_r+0x734>
 8020b72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020b74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020b76:	2000      	movs	r0, #0
 8020b78:	492a      	ldr	r1, [pc, #168]	@ (8020c24 <_dtoa_r+0x72c>)
 8020b7a:	f7e2 f827 	bl	8002bcc <__aeabi_dsub>
 8020b7e:	0002      	movs	r2, r0
 8020b80:	000b      	movs	r3, r1
 8020b82:	0030      	movs	r0, r6
 8020b84:	0039      	movs	r1, r7
 8020b86:	f7df fc99 	bl	80004bc <__aeabi_dcmplt>
 8020b8a:	2800      	cmp	r0, #0
 8020b8c:	d100      	bne.n	8020b90 <_dtoa_r+0x698>
 8020b8e:	e6ee      	b.n	802096e <_dtoa_r+0x476>
 8020b90:	0023      	movs	r3, r4
 8020b92:	3c01      	subs	r4, #1
 8020b94:	7822      	ldrb	r2, [r4, #0]
 8020b96:	2a30      	cmp	r2, #48	@ 0x30
 8020b98:	d0fa      	beq.n	8020b90 <_dtoa_r+0x698>
 8020b9a:	001c      	movs	r4, r3
 8020b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b9e:	9304      	str	r3, [sp, #16]
 8020ba0:	e73e      	b.n	8020a20 <_dtoa_r+0x528>
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8020c14 <_dtoa_r+0x71c>)
 8020ba6:	f7e1 fd49 	bl	800263c <__aeabi_dmul>
 8020baa:	900a      	str	r0, [sp, #40]	@ 0x28
 8020bac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020bae:	e7b9      	b.n	8020b24 <_dtoa_r+0x62c>
 8020bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d10c      	bne.n	8020bd0 <_dtoa_r+0x6d8>
 8020bb6:	9806      	ldr	r0, [sp, #24]
 8020bb8:	9907      	ldr	r1, [sp, #28]
 8020bba:	2200      	movs	r2, #0
 8020bbc:	4b18      	ldr	r3, [pc, #96]	@ (8020c20 <_dtoa_r+0x728>)
 8020bbe:	f7e1 fd3d 	bl	800263c <__aeabi_dmul>
 8020bc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020bc6:	f7df fc97 	bl	80004f8 <__aeabi_dcmpge>
 8020bca:	2800      	cmp	r0, #0
 8020bcc:	d100      	bne.n	8020bd0 <_dtoa_r+0x6d8>
 8020bce:	e164      	b.n	8020e9a <_dtoa_r+0x9a2>
 8020bd0:	2600      	movs	r6, #0
 8020bd2:	0037      	movs	r7, r6
 8020bd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020bd6:	9c08      	ldr	r4, [sp, #32]
 8020bd8:	43db      	mvns	r3, r3
 8020bda:	930c      	str	r3, [sp, #48]	@ 0x30
 8020bdc:	2300      	movs	r3, #0
 8020bde:	9304      	str	r3, [sp, #16]
 8020be0:	0031      	movs	r1, r6
 8020be2:	9803      	ldr	r0, [sp, #12]
 8020be4:	f000 ff32 	bl	8021a4c <_Bfree>
 8020be8:	2f00      	cmp	r7, #0
 8020bea:	d0d7      	beq.n	8020b9c <_dtoa_r+0x6a4>
 8020bec:	9b04      	ldr	r3, [sp, #16]
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	d005      	beq.n	8020bfe <_dtoa_r+0x706>
 8020bf2:	42bb      	cmp	r3, r7
 8020bf4:	d003      	beq.n	8020bfe <_dtoa_r+0x706>
 8020bf6:	0019      	movs	r1, r3
 8020bf8:	9803      	ldr	r0, [sp, #12]
 8020bfa:	f000 ff27 	bl	8021a4c <_Bfree>
 8020bfe:	0039      	movs	r1, r7
 8020c00:	9803      	ldr	r0, [sp, #12]
 8020c02:	f000 ff23 	bl	8021a4c <_Bfree>
 8020c06:	e7c9      	b.n	8020b9c <_dtoa_r+0x6a4>
 8020c08:	08025eb8 	.word	0x08025eb8
 8020c0c:	08025e90 	.word	0x08025e90
 8020c10:	3ff00000 	.word	0x3ff00000
 8020c14:	40240000 	.word	0x40240000
 8020c18:	401c0000 	.word	0x401c0000
 8020c1c:	fcc00000 	.word	0xfcc00000
 8020c20:	40140000 	.word	0x40140000
 8020c24:	3fe00000 	.word	0x3fe00000
 8020c28:	9b04      	ldr	r3, [sp, #16]
 8020c2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020c2c:	0023      	movs	r3, r4
 8020c2e:	001c      	movs	r4, r3
 8020c30:	3b01      	subs	r3, #1
 8020c32:	781a      	ldrb	r2, [r3, #0]
 8020c34:	2a39      	cmp	r2, #57	@ 0x39
 8020c36:	d108      	bne.n	8020c4a <_dtoa_r+0x752>
 8020c38:	9a08      	ldr	r2, [sp, #32]
 8020c3a:	429a      	cmp	r2, r3
 8020c3c:	d1f7      	bne.n	8020c2e <_dtoa_r+0x736>
 8020c3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020c40:	9908      	ldr	r1, [sp, #32]
 8020c42:	3201      	adds	r2, #1
 8020c44:	920c      	str	r2, [sp, #48]	@ 0x30
 8020c46:	2230      	movs	r2, #48	@ 0x30
 8020c48:	700a      	strb	r2, [r1, #0]
 8020c4a:	781a      	ldrb	r2, [r3, #0]
 8020c4c:	3201      	adds	r2, #1
 8020c4e:	701a      	strb	r2, [r3, #0]
 8020c50:	e7a4      	b.n	8020b9c <_dtoa_r+0x6a4>
 8020c52:	2200      	movs	r2, #0
 8020c54:	4bc6      	ldr	r3, [pc, #792]	@ (8020f70 <_dtoa_r+0xa78>)
 8020c56:	f7e1 fcf1 	bl	800263c <__aeabi_dmul>
 8020c5a:	2200      	movs	r2, #0
 8020c5c:	2300      	movs	r3, #0
 8020c5e:	0006      	movs	r6, r0
 8020c60:	000f      	movs	r7, r1
 8020c62:	f7df fc25 	bl	80004b0 <__aeabi_dcmpeq>
 8020c66:	2800      	cmp	r0, #0
 8020c68:	d100      	bne.n	8020c6c <_dtoa_r+0x774>
 8020c6a:	e6a1      	b.n	80209b0 <_dtoa_r+0x4b8>
 8020c6c:	e6d8      	b.n	8020a20 <_dtoa_r+0x528>
 8020c6e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020c70:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020c72:	9c06      	ldr	r4, [sp, #24]
 8020c74:	2f00      	cmp	r7, #0
 8020c76:	d014      	beq.n	8020ca2 <_dtoa_r+0x7aa>
 8020c78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020c7a:	2a01      	cmp	r2, #1
 8020c7c:	dd00      	ble.n	8020c80 <_dtoa_r+0x788>
 8020c7e:	e0c8      	b.n	8020e12 <_dtoa_r+0x91a>
 8020c80:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020c82:	2a00      	cmp	r2, #0
 8020c84:	d100      	bne.n	8020c88 <_dtoa_r+0x790>
 8020c86:	e0be      	b.n	8020e06 <_dtoa_r+0x90e>
 8020c88:	4aba      	ldr	r2, [pc, #744]	@ (8020f74 <_dtoa_r+0xa7c>)
 8020c8a:	189b      	adds	r3, r3, r2
 8020c8c:	9a06      	ldr	r2, [sp, #24]
 8020c8e:	2101      	movs	r1, #1
 8020c90:	18d2      	adds	r2, r2, r3
 8020c92:	9206      	str	r2, [sp, #24]
 8020c94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c96:	9803      	ldr	r0, [sp, #12]
 8020c98:	18d3      	adds	r3, r2, r3
 8020c9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c9c:	f000 ffda 	bl	8021c54 <__i2b>
 8020ca0:	0007      	movs	r7, r0
 8020ca2:	2c00      	cmp	r4, #0
 8020ca4:	d00e      	beq.n	8020cc4 <_dtoa_r+0x7cc>
 8020ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	dd0b      	ble.n	8020cc4 <_dtoa_r+0x7cc>
 8020cac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020cae:	0023      	movs	r3, r4
 8020cb0:	4294      	cmp	r4, r2
 8020cb2:	dd00      	ble.n	8020cb6 <_dtoa_r+0x7be>
 8020cb4:	0013      	movs	r3, r2
 8020cb6:	9a06      	ldr	r2, [sp, #24]
 8020cb8:	1ae4      	subs	r4, r4, r3
 8020cba:	1ad2      	subs	r2, r2, r3
 8020cbc:	9206      	str	r2, [sp, #24]
 8020cbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020cc0:	1ad3      	subs	r3, r2, r3
 8020cc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	d01f      	beq.n	8020d0a <_dtoa_r+0x812>
 8020cca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d100      	bne.n	8020cd2 <_dtoa_r+0x7da>
 8020cd0:	e0b5      	b.n	8020e3e <_dtoa_r+0x946>
 8020cd2:	2d00      	cmp	r5, #0
 8020cd4:	d010      	beq.n	8020cf8 <_dtoa_r+0x800>
 8020cd6:	0039      	movs	r1, r7
 8020cd8:	002a      	movs	r2, r5
 8020cda:	9803      	ldr	r0, [sp, #12]
 8020cdc:	f001 f884 	bl	8021de8 <__pow5mult>
 8020ce0:	9a05      	ldr	r2, [sp, #20]
 8020ce2:	0001      	movs	r1, r0
 8020ce4:	0007      	movs	r7, r0
 8020ce6:	9803      	ldr	r0, [sp, #12]
 8020ce8:	f000 ffcc 	bl	8021c84 <__multiply>
 8020cec:	0006      	movs	r6, r0
 8020cee:	9905      	ldr	r1, [sp, #20]
 8020cf0:	9803      	ldr	r0, [sp, #12]
 8020cf2:	f000 feab 	bl	8021a4c <_Bfree>
 8020cf6:	9605      	str	r6, [sp, #20]
 8020cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cfa:	1b5a      	subs	r2, r3, r5
 8020cfc:	42ab      	cmp	r3, r5
 8020cfe:	d004      	beq.n	8020d0a <_dtoa_r+0x812>
 8020d00:	9905      	ldr	r1, [sp, #20]
 8020d02:	9803      	ldr	r0, [sp, #12]
 8020d04:	f001 f870 	bl	8021de8 <__pow5mult>
 8020d08:	9005      	str	r0, [sp, #20]
 8020d0a:	2101      	movs	r1, #1
 8020d0c:	9803      	ldr	r0, [sp, #12]
 8020d0e:	f000 ffa1 	bl	8021c54 <__i2b>
 8020d12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d14:	0006      	movs	r6, r0
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d100      	bne.n	8020d1c <_dtoa_r+0x824>
 8020d1a:	e1bc      	b.n	8021096 <_dtoa_r+0xb9e>
 8020d1c:	001a      	movs	r2, r3
 8020d1e:	0001      	movs	r1, r0
 8020d20:	9803      	ldr	r0, [sp, #12]
 8020d22:	f001 f861 	bl	8021de8 <__pow5mult>
 8020d26:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020d28:	0006      	movs	r6, r0
 8020d2a:	2500      	movs	r5, #0
 8020d2c:	2b01      	cmp	r3, #1
 8020d2e:	dc16      	bgt.n	8020d5e <_dtoa_r+0x866>
 8020d30:	2500      	movs	r5, #0
 8020d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d34:	42ab      	cmp	r3, r5
 8020d36:	d10e      	bne.n	8020d56 <_dtoa_r+0x85e>
 8020d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d3a:	031b      	lsls	r3, r3, #12
 8020d3c:	42ab      	cmp	r3, r5
 8020d3e:	d10a      	bne.n	8020d56 <_dtoa_r+0x85e>
 8020d40:	4b8d      	ldr	r3, [pc, #564]	@ (8020f78 <_dtoa_r+0xa80>)
 8020d42:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020d44:	4213      	tst	r3, r2
 8020d46:	d006      	beq.n	8020d56 <_dtoa_r+0x85e>
 8020d48:	9b06      	ldr	r3, [sp, #24]
 8020d4a:	3501      	adds	r5, #1
 8020d4c:	3301      	adds	r3, #1
 8020d4e:	9306      	str	r3, [sp, #24]
 8020d50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d52:	3301      	adds	r3, #1
 8020d54:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d58:	2001      	movs	r0, #1
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d008      	beq.n	8020d70 <_dtoa_r+0x878>
 8020d5e:	6933      	ldr	r3, [r6, #16]
 8020d60:	3303      	adds	r3, #3
 8020d62:	009b      	lsls	r3, r3, #2
 8020d64:	18f3      	adds	r3, r6, r3
 8020d66:	6858      	ldr	r0, [r3, #4]
 8020d68:	f000 ff24 	bl	8021bb4 <__hi0bits>
 8020d6c:	2320      	movs	r3, #32
 8020d6e:	1a18      	subs	r0, r3, r0
 8020d70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d72:	1818      	adds	r0, r3, r0
 8020d74:	0002      	movs	r2, r0
 8020d76:	231f      	movs	r3, #31
 8020d78:	401a      	ands	r2, r3
 8020d7a:	4218      	tst	r0, r3
 8020d7c:	d065      	beq.n	8020e4a <_dtoa_r+0x952>
 8020d7e:	3301      	adds	r3, #1
 8020d80:	1a9b      	subs	r3, r3, r2
 8020d82:	2b04      	cmp	r3, #4
 8020d84:	dd5d      	ble.n	8020e42 <_dtoa_r+0x94a>
 8020d86:	231c      	movs	r3, #28
 8020d88:	1a9b      	subs	r3, r3, r2
 8020d8a:	9a06      	ldr	r2, [sp, #24]
 8020d8c:	18e4      	adds	r4, r4, r3
 8020d8e:	18d2      	adds	r2, r2, r3
 8020d90:	9206      	str	r2, [sp, #24]
 8020d92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020d94:	18d3      	adds	r3, r2, r3
 8020d96:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d98:	9b06      	ldr	r3, [sp, #24]
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	dd05      	ble.n	8020daa <_dtoa_r+0x8b2>
 8020d9e:	001a      	movs	r2, r3
 8020da0:	9905      	ldr	r1, [sp, #20]
 8020da2:	9803      	ldr	r0, [sp, #12]
 8020da4:	f001 f87c 	bl	8021ea0 <__lshift>
 8020da8:	9005      	str	r0, [sp, #20]
 8020daa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	dd05      	ble.n	8020dbc <_dtoa_r+0x8c4>
 8020db0:	0031      	movs	r1, r6
 8020db2:	001a      	movs	r2, r3
 8020db4:	9803      	ldr	r0, [sp, #12]
 8020db6:	f001 f873 	bl	8021ea0 <__lshift>
 8020dba:	0006      	movs	r6, r0
 8020dbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	d045      	beq.n	8020e4e <_dtoa_r+0x956>
 8020dc2:	0031      	movs	r1, r6
 8020dc4:	9805      	ldr	r0, [sp, #20]
 8020dc6:	f001 f8d7 	bl	8021f78 <__mcmp>
 8020dca:	2800      	cmp	r0, #0
 8020dcc:	da3f      	bge.n	8020e4e <_dtoa_r+0x956>
 8020dce:	9b04      	ldr	r3, [sp, #16]
 8020dd0:	220a      	movs	r2, #10
 8020dd2:	3b01      	subs	r3, #1
 8020dd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020dd6:	9905      	ldr	r1, [sp, #20]
 8020dd8:	2300      	movs	r3, #0
 8020dda:	9803      	ldr	r0, [sp, #12]
 8020ddc:	f000 fe5a 	bl	8021a94 <__multadd>
 8020de0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020de2:	9005      	str	r0, [sp, #20]
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d100      	bne.n	8020dea <_dtoa_r+0x8f2>
 8020de8:	e15c      	b.n	80210a4 <_dtoa_r+0xbac>
 8020dea:	2300      	movs	r3, #0
 8020dec:	0039      	movs	r1, r7
 8020dee:	220a      	movs	r2, #10
 8020df0:	9803      	ldr	r0, [sp, #12]
 8020df2:	f000 fe4f 	bl	8021a94 <__multadd>
 8020df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020df8:	0007      	movs	r7, r0
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	dc55      	bgt.n	8020eaa <_dtoa_r+0x9b2>
 8020dfe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e00:	2b02      	cmp	r3, #2
 8020e02:	dc2d      	bgt.n	8020e60 <_dtoa_r+0x968>
 8020e04:	e051      	b.n	8020eaa <_dtoa_r+0x9b2>
 8020e06:	2336      	movs	r3, #54	@ 0x36
 8020e08:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020e0a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020e0c:	9c06      	ldr	r4, [sp, #24]
 8020e0e:	1a9b      	subs	r3, r3, r2
 8020e10:	e73c      	b.n	8020c8c <_dtoa_r+0x794>
 8020e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e14:	1e5d      	subs	r5, r3, #1
 8020e16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e18:	42ab      	cmp	r3, r5
 8020e1a:	db08      	blt.n	8020e2e <_dtoa_r+0x936>
 8020e1c:	1b5d      	subs	r5, r3, r5
 8020e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e20:	9c06      	ldr	r4, [sp, #24]
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	db00      	blt.n	8020e28 <_dtoa_r+0x930>
 8020e26:	e731      	b.n	8020c8c <_dtoa_r+0x794>
 8020e28:	1ae4      	subs	r4, r4, r3
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	e72e      	b.n	8020c8c <_dtoa_r+0x794>
 8020e2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020e32:	1aeb      	subs	r3, r5, r3
 8020e34:	18d3      	adds	r3, r2, r3
 8020e36:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020e38:	9314      	str	r3, [sp, #80]	@ 0x50
 8020e3a:	2500      	movs	r5, #0
 8020e3c:	e7ef      	b.n	8020e1e <_dtoa_r+0x926>
 8020e3e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020e40:	e75e      	b.n	8020d00 <_dtoa_r+0x808>
 8020e42:	2b04      	cmp	r3, #4
 8020e44:	d0a8      	beq.n	8020d98 <_dtoa_r+0x8a0>
 8020e46:	331c      	adds	r3, #28
 8020e48:	e79f      	b.n	8020d8a <_dtoa_r+0x892>
 8020e4a:	0013      	movs	r3, r2
 8020e4c:	e7fb      	b.n	8020e46 <_dtoa_r+0x94e>
 8020e4e:	9b04      	ldr	r3, [sp, #16]
 8020e50:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e54:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	dc23      	bgt.n	8020ea2 <_dtoa_r+0x9aa>
 8020e5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e5c:	2b02      	cmp	r3, #2
 8020e5e:	dd20      	ble.n	8020ea2 <_dtoa_r+0x9aa>
 8020e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d000      	beq.n	8020e68 <_dtoa_r+0x970>
 8020e66:	e6b5      	b.n	8020bd4 <_dtoa_r+0x6dc>
 8020e68:	0031      	movs	r1, r6
 8020e6a:	2205      	movs	r2, #5
 8020e6c:	9803      	ldr	r0, [sp, #12]
 8020e6e:	f000 fe11 	bl	8021a94 <__multadd>
 8020e72:	0006      	movs	r6, r0
 8020e74:	0001      	movs	r1, r0
 8020e76:	9805      	ldr	r0, [sp, #20]
 8020e78:	f001 f87e 	bl	8021f78 <__mcmp>
 8020e7c:	2800      	cmp	r0, #0
 8020e7e:	dc00      	bgt.n	8020e82 <_dtoa_r+0x98a>
 8020e80:	e6a8      	b.n	8020bd4 <_dtoa_r+0x6dc>
 8020e82:	9b08      	ldr	r3, [sp, #32]
 8020e84:	9a08      	ldr	r2, [sp, #32]
 8020e86:	1c5c      	adds	r4, r3, #1
 8020e88:	2331      	movs	r3, #49	@ 0x31
 8020e8a:	7013      	strb	r3, [r2, #0]
 8020e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e8e:	3301      	adds	r3, #1
 8020e90:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e92:	e6a3      	b.n	8020bdc <_dtoa_r+0x6e4>
 8020e94:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020e96:	0037      	movs	r7, r6
 8020e98:	e7f3      	b.n	8020e82 <_dtoa_r+0x98a>
 8020e9a:	9b04      	ldr	r3, [sp, #16]
 8020e9c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020e9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ea0:	e7f9      	b.n	8020e96 <_dtoa_r+0x99e>
 8020ea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d100      	bne.n	8020eaa <_dtoa_r+0x9b2>
 8020ea8:	e100      	b.n	80210ac <_dtoa_r+0xbb4>
 8020eaa:	2c00      	cmp	r4, #0
 8020eac:	dd05      	ble.n	8020eba <_dtoa_r+0x9c2>
 8020eae:	0039      	movs	r1, r7
 8020eb0:	0022      	movs	r2, r4
 8020eb2:	9803      	ldr	r0, [sp, #12]
 8020eb4:	f000 fff4 	bl	8021ea0 <__lshift>
 8020eb8:	0007      	movs	r7, r0
 8020eba:	0038      	movs	r0, r7
 8020ebc:	2d00      	cmp	r5, #0
 8020ebe:	d018      	beq.n	8020ef2 <_dtoa_r+0x9fa>
 8020ec0:	6879      	ldr	r1, [r7, #4]
 8020ec2:	9803      	ldr	r0, [sp, #12]
 8020ec4:	f000 fd7e 	bl	80219c4 <_Balloc>
 8020ec8:	1e04      	subs	r4, r0, #0
 8020eca:	d105      	bne.n	8020ed8 <_dtoa_r+0x9e0>
 8020ecc:	0022      	movs	r2, r4
 8020ece:	4b2b      	ldr	r3, [pc, #172]	@ (8020f7c <_dtoa_r+0xa84>)
 8020ed0:	482b      	ldr	r0, [pc, #172]	@ (8020f80 <_dtoa_r+0xa88>)
 8020ed2:	492c      	ldr	r1, [pc, #176]	@ (8020f84 <_dtoa_r+0xa8c>)
 8020ed4:	f7ff fb25 	bl	8020522 <_dtoa_r+0x2a>
 8020ed8:	0039      	movs	r1, r7
 8020eda:	693a      	ldr	r2, [r7, #16]
 8020edc:	310c      	adds	r1, #12
 8020ede:	3202      	adds	r2, #2
 8020ee0:	0092      	lsls	r2, r2, #2
 8020ee2:	300c      	adds	r0, #12
 8020ee4:	f7ff fa6a 	bl	80203bc <memcpy>
 8020ee8:	2201      	movs	r2, #1
 8020eea:	0021      	movs	r1, r4
 8020eec:	9803      	ldr	r0, [sp, #12]
 8020eee:	f000 ffd7 	bl	8021ea0 <__lshift>
 8020ef2:	9b08      	ldr	r3, [sp, #32]
 8020ef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ef6:	9306      	str	r3, [sp, #24]
 8020ef8:	3b01      	subs	r3, #1
 8020efa:	189b      	adds	r3, r3, r2
 8020efc:	2201      	movs	r2, #1
 8020efe:	9704      	str	r7, [sp, #16]
 8020f00:	0007      	movs	r7, r0
 8020f02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020f06:	4013      	ands	r3, r2
 8020f08:	930e      	str	r3, [sp, #56]	@ 0x38
 8020f0a:	0031      	movs	r1, r6
 8020f0c:	9805      	ldr	r0, [sp, #20]
 8020f0e:	f7ff fa65 	bl	80203dc <quorem>
 8020f12:	9904      	ldr	r1, [sp, #16]
 8020f14:	0005      	movs	r5, r0
 8020f16:	900a      	str	r0, [sp, #40]	@ 0x28
 8020f18:	9805      	ldr	r0, [sp, #20]
 8020f1a:	f001 f82d 	bl	8021f78 <__mcmp>
 8020f1e:	003a      	movs	r2, r7
 8020f20:	900d      	str	r0, [sp, #52]	@ 0x34
 8020f22:	0031      	movs	r1, r6
 8020f24:	9803      	ldr	r0, [sp, #12]
 8020f26:	f001 f843 	bl	8021fb0 <__mdiff>
 8020f2a:	2201      	movs	r2, #1
 8020f2c:	68c3      	ldr	r3, [r0, #12]
 8020f2e:	0004      	movs	r4, r0
 8020f30:	3530      	adds	r5, #48	@ 0x30
 8020f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d104      	bne.n	8020f42 <_dtoa_r+0xa4a>
 8020f38:	0001      	movs	r1, r0
 8020f3a:	9805      	ldr	r0, [sp, #20]
 8020f3c:	f001 f81c 	bl	8021f78 <__mcmp>
 8020f40:	9009      	str	r0, [sp, #36]	@ 0x24
 8020f42:	0021      	movs	r1, r4
 8020f44:	9803      	ldr	r0, [sp, #12]
 8020f46:	f000 fd81 	bl	8021a4c <_Bfree>
 8020f4a:	9b06      	ldr	r3, [sp, #24]
 8020f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020f4e:	1c5c      	adds	r4, r3, #1
 8020f50:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020f52:	4313      	orrs	r3, r2
 8020f54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f56:	4313      	orrs	r3, r2
 8020f58:	d116      	bne.n	8020f88 <_dtoa_r+0xa90>
 8020f5a:	2d39      	cmp	r5, #57	@ 0x39
 8020f5c:	d02f      	beq.n	8020fbe <_dtoa_r+0xac6>
 8020f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	dd01      	ble.n	8020f68 <_dtoa_r+0xa70>
 8020f64:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020f66:	3531      	adds	r5, #49	@ 0x31
 8020f68:	9b06      	ldr	r3, [sp, #24]
 8020f6a:	701d      	strb	r5, [r3, #0]
 8020f6c:	e638      	b.n	8020be0 <_dtoa_r+0x6e8>
 8020f6e:	46c0      	nop			@ (mov r8, r8)
 8020f70:	40240000 	.word	0x40240000
 8020f74:	00000433 	.word	0x00000433
 8020f78:	7ff00000 	.word	0x7ff00000
 8020f7c:	08025db9 	.word	0x08025db9
 8020f80:	08025d61 	.word	0x08025d61
 8020f84:	000002ef 	.word	0x000002ef
 8020f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	db04      	blt.n	8020f98 <_dtoa_r+0xaa0>
 8020f8e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020f90:	4313      	orrs	r3, r2
 8020f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f94:	4313      	orrs	r3, r2
 8020f96:	d11e      	bne.n	8020fd6 <_dtoa_r+0xade>
 8020f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f9a:	2b00      	cmp	r3, #0
 8020f9c:	dde4      	ble.n	8020f68 <_dtoa_r+0xa70>
 8020f9e:	9905      	ldr	r1, [sp, #20]
 8020fa0:	2201      	movs	r2, #1
 8020fa2:	9803      	ldr	r0, [sp, #12]
 8020fa4:	f000 ff7c 	bl	8021ea0 <__lshift>
 8020fa8:	0031      	movs	r1, r6
 8020faa:	9005      	str	r0, [sp, #20]
 8020fac:	f000 ffe4 	bl	8021f78 <__mcmp>
 8020fb0:	2800      	cmp	r0, #0
 8020fb2:	dc02      	bgt.n	8020fba <_dtoa_r+0xac2>
 8020fb4:	d1d8      	bne.n	8020f68 <_dtoa_r+0xa70>
 8020fb6:	07eb      	lsls	r3, r5, #31
 8020fb8:	d5d6      	bpl.n	8020f68 <_dtoa_r+0xa70>
 8020fba:	2d39      	cmp	r5, #57	@ 0x39
 8020fbc:	d1d2      	bne.n	8020f64 <_dtoa_r+0xa6c>
 8020fbe:	2339      	movs	r3, #57	@ 0x39
 8020fc0:	9a06      	ldr	r2, [sp, #24]
 8020fc2:	7013      	strb	r3, [r2, #0]
 8020fc4:	0023      	movs	r3, r4
 8020fc6:	001c      	movs	r4, r3
 8020fc8:	3b01      	subs	r3, #1
 8020fca:	781a      	ldrb	r2, [r3, #0]
 8020fcc:	2a39      	cmp	r2, #57	@ 0x39
 8020fce:	d04f      	beq.n	8021070 <_dtoa_r+0xb78>
 8020fd0:	3201      	adds	r2, #1
 8020fd2:	701a      	strb	r2, [r3, #0]
 8020fd4:	e604      	b.n	8020be0 <_dtoa_r+0x6e8>
 8020fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	dd03      	ble.n	8020fe4 <_dtoa_r+0xaec>
 8020fdc:	2d39      	cmp	r5, #57	@ 0x39
 8020fde:	d0ee      	beq.n	8020fbe <_dtoa_r+0xac6>
 8020fe0:	3501      	adds	r5, #1
 8020fe2:	e7c1      	b.n	8020f68 <_dtoa_r+0xa70>
 8020fe4:	9b06      	ldr	r3, [sp, #24]
 8020fe6:	9a06      	ldr	r2, [sp, #24]
 8020fe8:	701d      	strb	r5, [r3, #0]
 8020fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020fec:	4293      	cmp	r3, r2
 8020fee:	d02a      	beq.n	8021046 <_dtoa_r+0xb4e>
 8020ff0:	2300      	movs	r3, #0
 8020ff2:	220a      	movs	r2, #10
 8020ff4:	9905      	ldr	r1, [sp, #20]
 8020ff6:	9803      	ldr	r0, [sp, #12]
 8020ff8:	f000 fd4c 	bl	8021a94 <__multadd>
 8020ffc:	9b04      	ldr	r3, [sp, #16]
 8020ffe:	9005      	str	r0, [sp, #20]
 8021000:	42bb      	cmp	r3, r7
 8021002:	d109      	bne.n	8021018 <_dtoa_r+0xb20>
 8021004:	2300      	movs	r3, #0
 8021006:	220a      	movs	r2, #10
 8021008:	9904      	ldr	r1, [sp, #16]
 802100a:	9803      	ldr	r0, [sp, #12]
 802100c:	f000 fd42 	bl	8021a94 <__multadd>
 8021010:	9004      	str	r0, [sp, #16]
 8021012:	0007      	movs	r7, r0
 8021014:	9406      	str	r4, [sp, #24]
 8021016:	e778      	b.n	8020f0a <_dtoa_r+0xa12>
 8021018:	9904      	ldr	r1, [sp, #16]
 802101a:	2300      	movs	r3, #0
 802101c:	220a      	movs	r2, #10
 802101e:	9803      	ldr	r0, [sp, #12]
 8021020:	f000 fd38 	bl	8021a94 <__multadd>
 8021024:	2300      	movs	r3, #0
 8021026:	9004      	str	r0, [sp, #16]
 8021028:	220a      	movs	r2, #10
 802102a:	0039      	movs	r1, r7
 802102c:	9803      	ldr	r0, [sp, #12]
 802102e:	f000 fd31 	bl	8021a94 <__multadd>
 8021032:	e7ee      	b.n	8021012 <_dtoa_r+0xb1a>
 8021034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021036:	2401      	movs	r4, #1
 8021038:	2b00      	cmp	r3, #0
 802103a:	dd00      	ble.n	802103e <_dtoa_r+0xb46>
 802103c:	001c      	movs	r4, r3
 802103e:	9b08      	ldr	r3, [sp, #32]
 8021040:	191c      	adds	r4, r3, r4
 8021042:	2300      	movs	r3, #0
 8021044:	9304      	str	r3, [sp, #16]
 8021046:	9905      	ldr	r1, [sp, #20]
 8021048:	2201      	movs	r2, #1
 802104a:	9803      	ldr	r0, [sp, #12]
 802104c:	f000 ff28 	bl	8021ea0 <__lshift>
 8021050:	0031      	movs	r1, r6
 8021052:	9005      	str	r0, [sp, #20]
 8021054:	f000 ff90 	bl	8021f78 <__mcmp>
 8021058:	2800      	cmp	r0, #0
 802105a:	dcb3      	bgt.n	8020fc4 <_dtoa_r+0xacc>
 802105c:	d101      	bne.n	8021062 <_dtoa_r+0xb6a>
 802105e:	07ed      	lsls	r5, r5, #31
 8021060:	d4b0      	bmi.n	8020fc4 <_dtoa_r+0xacc>
 8021062:	0023      	movs	r3, r4
 8021064:	001c      	movs	r4, r3
 8021066:	3b01      	subs	r3, #1
 8021068:	781a      	ldrb	r2, [r3, #0]
 802106a:	2a30      	cmp	r2, #48	@ 0x30
 802106c:	d0fa      	beq.n	8021064 <_dtoa_r+0xb6c>
 802106e:	e5b7      	b.n	8020be0 <_dtoa_r+0x6e8>
 8021070:	9a08      	ldr	r2, [sp, #32]
 8021072:	429a      	cmp	r2, r3
 8021074:	d1a7      	bne.n	8020fc6 <_dtoa_r+0xace>
 8021076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021078:	3301      	adds	r3, #1
 802107a:	930c      	str	r3, [sp, #48]	@ 0x30
 802107c:	2331      	movs	r3, #49	@ 0x31
 802107e:	7013      	strb	r3, [r2, #0]
 8021080:	e5ae      	b.n	8020be0 <_dtoa_r+0x6e8>
 8021082:	4b15      	ldr	r3, [pc, #84]	@ (80210d8 <_dtoa_r+0xbe0>)
 8021084:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021086:	9308      	str	r3, [sp, #32]
 8021088:	4b14      	ldr	r3, [pc, #80]	@ (80210dc <_dtoa_r+0xbe4>)
 802108a:	2a00      	cmp	r2, #0
 802108c:	d001      	beq.n	8021092 <_dtoa_r+0xb9a>
 802108e:	f7ff fa7b 	bl	8020588 <_dtoa_r+0x90>
 8021092:	f7ff fa7b 	bl	802058c <_dtoa_r+0x94>
 8021096:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021098:	2b01      	cmp	r3, #1
 802109a:	dc00      	bgt.n	802109e <_dtoa_r+0xba6>
 802109c:	e648      	b.n	8020d30 <_dtoa_r+0x838>
 802109e:	2001      	movs	r0, #1
 80210a0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80210a2:	e665      	b.n	8020d70 <_dtoa_r+0x878>
 80210a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	dc00      	bgt.n	80210ac <_dtoa_r+0xbb4>
 80210aa:	e6d6      	b.n	8020e5a <_dtoa_r+0x962>
 80210ac:	2400      	movs	r4, #0
 80210ae:	0031      	movs	r1, r6
 80210b0:	9805      	ldr	r0, [sp, #20]
 80210b2:	f7ff f993 	bl	80203dc <quorem>
 80210b6:	9b08      	ldr	r3, [sp, #32]
 80210b8:	3030      	adds	r0, #48	@ 0x30
 80210ba:	5518      	strb	r0, [r3, r4]
 80210bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210be:	3401      	adds	r4, #1
 80210c0:	0005      	movs	r5, r0
 80210c2:	429c      	cmp	r4, r3
 80210c4:	dab6      	bge.n	8021034 <_dtoa_r+0xb3c>
 80210c6:	2300      	movs	r3, #0
 80210c8:	220a      	movs	r2, #10
 80210ca:	9905      	ldr	r1, [sp, #20]
 80210cc:	9803      	ldr	r0, [sp, #12]
 80210ce:	f000 fce1 	bl	8021a94 <__multadd>
 80210d2:	9005      	str	r0, [sp, #20]
 80210d4:	e7eb      	b.n	80210ae <_dtoa_r+0xbb6>
 80210d6:	46c0      	nop			@ (mov r8, r8)
 80210d8:	08025d3d 	.word	0x08025d3d
 80210dc:	08025d45 	.word	0x08025d45

080210e0 <_free_r>:
 80210e0:	b570      	push	{r4, r5, r6, lr}
 80210e2:	0005      	movs	r5, r0
 80210e4:	1e0c      	subs	r4, r1, #0
 80210e6:	d010      	beq.n	802110a <_free_r+0x2a>
 80210e8:	3c04      	subs	r4, #4
 80210ea:	6823      	ldr	r3, [r4, #0]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	da00      	bge.n	80210f2 <_free_r+0x12>
 80210f0:	18e4      	adds	r4, r4, r3
 80210f2:	0028      	movs	r0, r5
 80210f4:	f000 fc56 	bl	80219a4 <__malloc_lock>
 80210f8:	4a1d      	ldr	r2, [pc, #116]	@ (8021170 <_free_r+0x90>)
 80210fa:	6813      	ldr	r3, [r2, #0]
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d105      	bne.n	802110c <_free_r+0x2c>
 8021100:	6063      	str	r3, [r4, #4]
 8021102:	6014      	str	r4, [r2, #0]
 8021104:	0028      	movs	r0, r5
 8021106:	f000 fc55 	bl	80219b4 <__malloc_unlock>
 802110a:	bd70      	pop	{r4, r5, r6, pc}
 802110c:	42a3      	cmp	r3, r4
 802110e:	d908      	bls.n	8021122 <_free_r+0x42>
 8021110:	6820      	ldr	r0, [r4, #0]
 8021112:	1821      	adds	r1, r4, r0
 8021114:	428b      	cmp	r3, r1
 8021116:	d1f3      	bne.n	8021100 <_free_r+0x20>
 8021118:	6819      	ldr	r1, [r3, #0]
 802111a:	685b      	ldr	r3, [r3, #4]
 802111c:	1809      	adds	r1, r1, r0
 802111e:	6021      	str	r1, [r4, #0]
 8021120:	e7ee      	b.n	8021100 <_free_r+0x20>
 8021122:	001a      	movs	r2, r3
 8021124:	685b      	ldr	r3, [r3, #4]
 8021126:	2b00      	cmp	r3, #0
 8021128:	d001      	beq.n	802112e <_free_r+0x4e>
 802112a:	42a3      	cmp	r3, r4
 802112c:	d9f9      	bls.n	8021122 <_free_r+0x42>
 802112e:	6811      	ldr	r1, [r2, #0]
 8021130:	1850      	adds	r0, r2, r1
 8021132:	42a0      	cmp	r0, r4
 8021134:	d10b      	bne.n	802114e <_free_r+0x6e>
 8021136:	6820      	ldr	r0, [r4, #0]
 8021138:	1809      	adds	r1, r1, r0
 802113a:	1850      	adds	r0, r2, r1
 802113c:	6011      	str	r1, [r2, #0]
 802113e:	4283      	cmp	r3, r0
 8021140:	d1e0      	bne.n	8021104 <_free_r+0x24>
 8021142:	6818      	ldr	r0, [r3, #0]
 8021144:	685b      	ldr	r3, [r3, #4]
 8021146:	1841      	adds	r1, r0, r1
 8021148:	6011      	str	r1, [r2, #0]
 802114a:	6053      	str	r3, [r2, #4]
 802114c:	e7da      	b.n	8021104 <_free_r+0x24>
 802114e:	42a0      	cmp	r0, r4
 8021150:	d902      	bls.n	8021158 <_free_r+0x78>
 8021152:	230c      	movs	r3, #12
 8021154:	602b      	str	r3, [r5, #0]
 8021156:	e7d5      	b.n	8021104 <_free_r+0x24>
 8021158:	6820      	ldr	r0, [r4, #0]
 802115a:	1821      	adds	r1, r4, r0
 802115c:	428b      	cmp	r3, r1
 802115e:	d103      	bne.n	8021168 <_free_r+0x88>
 8021160:	6819      	ldr	r1, [r3, #0]
 8021162:	685b      	ldr	r3, [r3, #4]
 8021164:	1809      	adds	r1, r1, r0
 8021166:	6021      	str	r1, [r4, #0]
 8021168:	6063      	str	r3, [r4, #4]
 802116a:	6054      	str	r4, [r2, #4]
 802116c:	e7ca      	b.n	8021104 <_free_r+0x24>
 802116e:	46c0      	nop			@ (mov r8, r8)
 8021170:	200037b4 	.word	0x200037b4

08021174 <rshift>:
 8021174:	0002      	movs	r2, r0
 8021176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021178:	6904      	ldr	r4, [r0, #16]
 802117a:	b085      	sub	sp, #20
 802117c:	3214      	adds	r2, #20
 802117e:	114b      	asrs	r3, r1, #5
 8021180:	0016      	movs	r6, r2
 8021182:	9302      	str	r3, [sp, #8]
 8021184:	429c      	cmp	r4, r3
 8021186:	dd31      	ble.n	80211ec <rshift+0x78>
 8021188:	261f      	movs	r6, #31
 802118a:	000f      	movs	r7, r1
 802118c:	009b      	lsls	r3, r3, #2
 802118e:	00a5      	lsls	r5, r4, #2
 8021190:	18d3      	adds	r3, r2, r3
 8021192:	4037      	ands	r7, r6
 8021194:	1955      	adds	r5, r2, r5
 8021196:	9300      	str	r3, [sp, #0]
 8021198:	9701      	str	r7, [sp, #4]
 802119a:	4231      	tst	r1, r6
 802119c:	d10d      	bne.n	80211ba <rshift+0x46>
 802119e:	0016      	movs	r6, r2
 80211a0:	0019      	movs	r1, r3
 80211a2:	428d      	cmp	r5, r1
 80211a4:	d836      	bhi.n	8021214 <rshift+0xa0>
 80211a6:	9b00      	ldr	r3, [sp, #0]
 80211a8:	2600      	movs	r6, #0
 80211aa:	3b03      	subs	r3, #3
 80211ac:	429d      	cmp	r5, r3
 80211ae:	d302      	bcc.n	80211b6 <rshift+0x42>
 80211b0:	9b02      	ldr	r3, [sp, #8]
 80211b2:	1ae4      	subs	r4, r4, r3
 80211b4:	00a6      	lsls	r6, r4, #2
 80211b6:	1996      	adds	r6, r2, r6
 80211b8:	e018      	b.n	80211ec <rshift+0x78>
 80211ba:	2120      	movs	r1, #32
 80211bc:	9e01      	ldr	r6, [sp, #4]
 80211be:	9f01      	ldr	r7, [sp, #4]
 80211c0:	1b89      	subs	r1, r1, r6
 80211c2:	9e00      	ldr	r6, [sp, #0]
 80211c4:	9103      	str	r1, [sp, #12]
 80211c6:	ce02      	ldmia	r6!, {r1}
 80211c8:	4694      	mov	ip, r2
 80211ca:	40f9      	lsrs	r1, r7
 80211cc:	42b5      	cmp	r5, r6
 80211ce:	d816      	bhi.n	80211fe <rshift+0x8a>
 80211d0:	9b00      	ldr	r3, [sp, #0]
 80211d2:	2600      	movs	r6, #0
 80211d4:	3301      	adds	r3, #1
 80211d6:	429d      	cmp	r5, r3
 80211d8:	d303      	bcc.n	80211e2 <rshift+0x6e>
 80211da:	9b02      	ldr	r3, [sp, #8]
 80211dc:	1ae4      	subs	r4, r4, r3
 80211de:	00a6      	lsls	r6, r4, #2
 80211e0:	3e04      	subs	r6, #4
 80211e2:	1996      	adds	r6, r2, r6
 80211e4:	6031      	str	r1, [r6, #0]
 80211e6:	2900      	cmp	r1, #0
 80211e8:	d000      	beq.n	80211ec <rshift+0x78>
 80211ea:	3604      	adds	r6, #4
 80211ec:	1ab1      	subs	r1, r6, r2
 80211ee:	1089      	asrs	r1, r1, #2
 80211f0:	6101      	str	r1, [r0, #16]
 80211f2:	4296      	cmp	r6, r2
 80211f4:	d101      	bne.n	80211fa <rshift+0x86>
 80211f6:	2300      	movs	r3, #0
 80211f8:	6143      	str	r3, [r0, #20]
 80211fa:	b005      	add	sp, #20
 80211fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211fe:	6837      	ldr	r7, [r6, #0]
 8021200:	9b03      	ldr	r3, [sp, #12]
 8021202:	409f      	lsls	r7, r3
 8021204:	430f      	orrs	r7, r1
 8021206:	4661      	mov	r1, ip
 8021208:	c180      	stmia	r1!, {r7}
 802120a:	468c      	mov	ip, r1
 802120c:	9b01      	ldr	r3, [sp, #4]
 802120e:	ce02      	ldmia	r6!, {r1}
 8021210:	40d9      	lsrs	r1, r3
 8021212:	e7db      	b.n	80211cc <rshift+0x58>
 8021214:	c980      	ldmia	r1!, {r7}
 8021216:	c680      	stmia	r6!, {r7}
 8021218:	e7c3      	b.n	80211a2 <rshift+0x2e>

0802121a <__hexdig_fun>:
 802121a:	0002      	movs	r2, r0
 802121c:	3a30      	subs	r2, #48	@ 0x30
 802121e:	0003      	movs	r3, r0
 8021220:	2a09      	cmp	r2, #9
 8021222:	d802      	bhi.n	802122a <__hexdig_fun+0x10>
 8021224:	3b20      	subs	r3, #32
 8021226:	b2d8      	uxtb	r0, r3
 8021228:	4770      	bx	lr
 802122a:	0002      	movs	r2, r0
 802122c:	3a61      	subs	r2, #97	@ 0x61
 802122e:	2a05      	cmp	r2, #5
 8021230:	d801      	bhi.n	8021236 <__hexdig_fun+0x1c>
 8021232:	3b47      	subs	r3, #71	@ 0x47
 8021234:	e7f7      	b.n	8021226 <__hexdig_fun+0xc>
 8021236:	001a      	movs	r2, r3
 8021238:	3a41      	subs	r2, #65	@ 0x41
 802123a:	2000      	movs	r0, #0
 802123c:	2a05      	cmp	r2, #5
 802123e:	d8f3      	bhi.n	8021228 <__hexdig_fun+0xe>
 8021240:	3b27      	subs	r3, #39	@ 0x27
 8021242:	e7f0      	b.n	8021226 <__hexdig_fun+0xc>

08021244 <__gethex>:
 8021244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021246:	b089      	sub	sp, #36	@ 0x24
 8021248:	9307      	str	r3, [sp, #28]
 802124a:	680b      	ldr	r3, [r1, #0]
 802124c:	9201      	str	r2, [sp, #4]
 802124e:	9003      	str	r0, [sp, #12]
 8021250:	9106      	str	r1, [sp, #24]
 8021252:	1c9a      	adds	r2, r3, #2
 8021254:	0011      	movs	r1, r2
 8021256:	3201      	adds	r2, #1
 8021258:	1e50      	subs	r0, r2, #1
 802125a:	7800      	ldrb	r0, [r0, #0]
 802125c:	2830      	cmp	r0, #48	@ 0x30
 802125e:	d0f9      	beq.n	8021254 <__gethex+0x10>
 8021260:	1acb      	subs	r3, r1, r3
 8021262:	3b02      	subs	r3, #2
 8021264:	9305      	str	r3, [sp, #20]
 8021266:	9100      	str	r1, [sp, #0]
 8021268:	f7ff ffd7 	bl	802121a <__hexdig_fun>
 802126c:	2300      	movs	r3, #0
 802126e:	001d      	movs	r5, r3
 8021270:	9302      	str	r3, [sp, #8]
 8021272:	4298      	cmp	r0, r3
 8021274:	d11e      	bne.n	80212b4 <__gethex+0x70>
 8021276:	2201      	movs	r2, #1
 8021278:	49a6      	ldr	r1, [pc, #664]	@ (8021514 <__gethex+0x2d0>)
 802127a:	9800      	ldr	r0, [sp, #0]
 802127c:	f7fe ffd8 	bl	8020230 <strncmp>
 8021280:	0007      	movs	r7, r0
 8021282:	42a8      	cmp	r0, r5
 8021284:	d000      	beq.n	8021288 <__gethex+0x44>
 8021286:	e06a      	b.n	802135e <__gethex+0x11a>
 8021288:	9b00      	ldr	r3, [sp, #0]
 802128a:	7858      	ldrb	r0, [r3, #1]
 802128c:	1c5c      	adds	r4, r3, #1
 802128e:	f7ff ffc4 	bl	802121a <__hexdig_fun>
 8021292:	2301      	movs	r3, #1
 8021294:	9302      	str	r3, [sp, #8]
 8021296:	42a8      	cmp	r0, r5
 8021298:	d02f      	beq.n	80212fa <__gethex+0xb6>
 802129a:	9400      	str	r4, [sp, #0]
 802129c:	9b00      	ldr	r3, [sp, #0]
 802129e:	7818      	ldrb	r0, [r3, #0]
 80212a0:	2830      	cmp	r0, #48	@ 0x30
 80212a2:	d009      	beq.n	80212b8 <__gethex+0x74>
 80212a4:	f7ff ffb9 	bl	802121a <__hexdig_fun>
 80212a8:	4242      	negs	r2, r0
 80212aa:	4142      	adcs	r2, r0
 80212ac:	2301      	movs	r3, #1
 80212ae:	0025      	movs	r5, r4
 80212b0:	9202      	str	r2, [sp, #8]
 80212b2:	9305      	str	r3, [sp, #20]
 80212b4:	9c00      	ldr	r4, [sp, #0]
 80212b6:	e004      	b.n	80212c2 <__gethex+0x7e>
 80212b8:	9b00      	ldr	r3, [sp, #0]
 80212ba:	3301      	adds	r3, #1
 80212bc:	9300      	str	r3, [sp, #0]
 80212be:	e7ed      	b.n	802129c <__gethex+0x58>
 80212c0:	3401      	adds	r4, #1
 80212c2:	7820      	ldrb	r0, [r4, #0]
 80212c4:	f7ff ffa9 	bl	802121a <__hexdig_fun>
 80212c8:	1e07      	subs	r7, r0, #0
 80212ca:	d1f9      	bne.n	80212c0 <__gethex+0x7c>
 80212cc:	2201      	movs	r2, #1
 80212ce:	0020      	movs	r0, r4
 80212d0:	4990      	ldr	r1, [pc, #576]	@ (8021514 <__gethex+0x2d0>)
 80212d2:	f7fe ffad 	bl	8020230 <strncmp>
 80212d6:	2800      	cmp	r0, #0
 80212d8:	d10d      	bne.n	80212f6 <__gethex+0xb2>
 80212da:	2d00      	cmp	r5, #0
 80212dc:	d106      	bne.n	80212ec <__gethex+0xa8>
 80212de:	3401      	adds	r4, #1
 80212e0:	0025      	movs	r5, r4
 80212e2:	7820      	ldrb	r0, [r4, #0]
 80212e4:	f7ff ff99 	bl	802121a <__hexdig_fun>
 80212e8:	2800      	cmp	r0, #0
 80212ea:	d102      	bne.n	80212f2 <__gethex+0xae>
 80212ec:	1b2d      	subs	r5, r5, r4
 80212ee:	00af      	lsls	r7, r5, #2
 80212f0:	e003      	b.n	80212fa <__gethex+0xb6>
 80212f2:	3401      	adds	r4, #1
 80212f4:	e7f5      	b.n	80212e2 <__gethex+0x9e>
 80212f6:	2d00      	cmp	r5, #0
 80212f8:	d1f8      	bne.n	80212ec <__gethex+0xa8>
 80212fa:	2220      	movs	r2, #32
 80212fc:	7823      	ldrb	r3, [r4, #0]
 80212fe:	0026      	movs	r6, r4
 8021300:	4393      	bics	r3, r2
 8021302:	2b50      	cmp	r3, #80	@ 0x50
 8021304:	d11d      	bne.n	8021342 <__gethex+0xfe>
 8021306:	7863      	ldrb	r3, [r4, #1]
 8021308:	2b2b      	cmp	r3, #43	@ 0x2b
 802130a:	d02d      	beq.n	8021368 <__gethex+0x124>
 802130c:	2b2d      	cmp	r3, #45	@ 0x2d
 802130e:	d02f      	beq.n	8021370 <__gethex+0x12c>
 8021310:	2300      	movs	r3, #0
 8021312:	1c66      	adds	r6, r4, #1
 8021314:	9304      	str	r3, [sp, #16]
 8021316:	7830      	ldrb	r0, [r6, #0]
 8021318:	f7ff ff7f 	bl	802121a <__hexdig_fun>
 802131c:	1e43      	subs	r3, r0, #1
 802131e:	b2db      	uxtb	r3, r3
 8021320:	0005      	movs	r5, r0
 8021322:	2b18      	cmp	r3, #24
 8021324:	d82a      	bhi.n	802137c <__gethex+0x138>
 8021326:	7870      	ldrb	r0, [r6, #1]
 8021328:	f7ff ff77 	bl	802121a <__hexdig_fun>
 802132c:	1e43      	subs	r3, r0, #1
 802132e:	b2db      	uxtb	r3, r3
 8021330:	3601      	adds	r6, #1
 8021332:	3d10      	subs	r5, #16
 8021334:	2b18      	cmp	r3, #24
 8021336:	d91d      	bls.n	8021374 <__gethex+0x130>
 8021338:	9b04      	ldr	r3, [sp, #16]
 802133a:	2b00      	cmp	r3, #0
 802133c:	d000      	beq.n	8021340 <__gethex+0xfc>
 802133e:	426d      	negs	r5, r5
 8021340:	197f      	adds	r7, r7, r5
 8021342:	9b06      	ldr	r3, [sp, #24]
 8021344:	601e      	str	r6, [r3, #0]
 8021346:	9b02      	ldr	r3, [sp, #8]
 8021348:	2b00      	cmp	r3, #0
 802134a:	d019      	beq.n	8021380 <__gethex+0x13c>
 802134c:	9b05      	ldr	r3, [sp, #20]
 802134e:	2606      	movs	r6, #6
 8021350:	425a      	negs	r2, r3
 8021352:	4153      	adcs	r3, r2
 8021354:	425b      	negs	r3, r3
 8021356:	401e      	ands	r6, r3
 8021358:	0030      	movs	r0, r6
 802135a:	b009      	add	sp, #36	@ 0x24
 802135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802135e:	2301      	movs	r3, #1
 8021360:	2700      	movs	r7, #0
 8021362:	9c00      	ldr	r4, [sp, #0]
 8021364:	9302      	str	r3, [sp, #8]
 8021366:	e7c8      	b.n	80212fa <__gethex+0xb6>
 8021368:	2300      	movs	r3, #0
 802136a:	9304      	str	r3, [sp, #16]
 802136c:	1ca6      	adds	r6, r4, #2
 802136e:	e7d2      	b.n	8021316 <__gethex+0xd2>
 8021370:	2301      	movs	r3, #1
 8021372:	e7fa      	b.n	802136a <__gethex+0x126>
 8021374:	230a      	movs	r3, #10
 8021376:	435d      	muls	r5, r3
 8021378:	182d      	adds	r5, r5, r0
 802137a:	e7d4      	b.n	8021326 <__gethex+0xe2>
 802137c:	0026      	movs	r6, r4
 802137e:	e7e0      	b.n	8021342 <__gethex+0xfe>
 8021380:	9b00      	ldr	r3, [sp, #0]
 8021382:	9902      	ldr	r1, [sp, #8]
 8021384:	1ae3      	subs	r3, r4, r3
 8021386:	3b01      	subs	r3, #1
 8021388:	2b07      	cmp	r3, #7
 802138a:	dc0a      	bgt.n	80213a2 <__gethex+0x15e>
 802138c:	9803      	ldr	r0, [sp, #12]
 802138e:	f000 fb19 	bl	80219c4 <_Balloc>
 8021392:	1e05      	subs	r5, r0, #0
 8021394:	d108      	bne.n	80213a8 <__gethex+0x164>
 8021396:	002a      	movs	r2, r5
 8021398:	21e4      	movs	r1, #228	@ 0xe4
 802139a:	4b5f      	ldr	r3, [pc, #380]	@ (8021518 <__gethex+0x2d4>)
 802139c:	485f      	ldr	r0, [pc, #380]	@ (802151c <__gethex+0x2d8>)
 802139e:	f001 fbf1 	bl	8022b84 <__assert_func>
 80213a2:	3101      	adds	r1, #1
 80213a4:	105b      	asrs	r3, r3, #1
 80213a6:	e7ef      	b.n	8021388 <__gethex+0x144>
 80213a8:	0003      	movs	r3, r0
 80213aa:	3314      	adds	r3, #20
 80213ac:	9302      	str	r3, [sp, #8]
 80213ae:	9305      	str	r3, [sp, #20]
 80213b0:	2300      	movs	r3, #0
 80213b2:	001e      	movs	r6, r3
 80213b4:	9304      	str	r3, [sp, #16]
 80213b6:	9b00      	ldr	r3, [sp, #0]
 80213b8:	42a3      	cmp	r3, r4
 80213ba:	d338      	bcc.n	802142e <__gethex+0x1ea>
 80213bc:	9c05      	ldr	r4, [sp, #20]
 80213be:	9b02      	ldr	r3, [sp, #8]
 80213c0:	c440      	stmia	r4!, {r6}
 80213c2:	1ae4      	subs	r4, r4, r3
 80213c4:	10a4      	asrs	r4, r4, #2
 80213c6:	0030      	movs	r0, r6
 80213c8:	612c      	str	r4, [r5, #16]
 80213ca:	f000 fbf3 	bl	8021bb4 <__hi0bits>
 80213ce:	9b01      	ldr	r3, [sp, #4]
 80213d0:	0164      	lsls	r4, r4, #5
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	1a26      	subs	r6, r4, r0
 80213d6:	9300      	str	r3, [sp, #0]
 80213d8:	429e      	cmp	r6, r3
 80213da:	dd52      	ble.n	8021482 <__gethex+0x23e>
 80213dc:	1af6      	subs	r6, r6, r3
 80213de:	0031      	movs	r1, r6
 80213e0:	0028      	movs	r0, r5
 80213e2:	f000 ff96 	bl	8022312 <__any_on>
 80213e6:	1e04      	subs	r4, r0, #0
 80213e8:	d00f      	beq.n	802140a <__gethex+0x1c6>
 80213ea:	2401      	movs	r4, #1
 80213ec:	231f      	movs	r3, #31
 80213ee:	0020      	movs	r0, r4
 80213f0:	1e72      	subs	r2, r6, #1
 80213f2:	4013      	ands	r3, r2
 80213f4:	4098      	lsls	r0, r3
 80213f6:	0003      	movs	r3, r0
 80213f8:	1151      	asrs	r1, r2, #5
 80213fa:	9802      	ldr	r0, [sp, #8]
 80213fc:	0089      	lsls	r1, r1, #2
 80213fe:	5809      	ldr	r1, [r1, r0]
 8021400:	4219      	tst	r1, r3
 8021402:	d002      	beq.n	802140a <__gethex+0x1c6>
 8021404:	42a2      	cmp	r2, r4
 8021406:	dc34      	bgt.n	8021472 <__gethex+0x22e>
 8021408:	2402      	movs	r4, #2
 802140a:	0031      	movs	r1, r6
 802140c:	0028      	movs	r0, r5
 802140e:	f7ff feb1 	bl	8021174 <rshift>
 8021412:	19bf      	adds	r7, r7, r6
 8021414:	9b01      	ldr	r3, [sp, #4]
 8021416:	689b      	ldr	r3, [r3, #8]
 8021418:	42bb      	cmp	r3, r7
 802141a:	da42      	bge.n	80214a2 <__gethex+0x25e>
 802141c:	0029      	movs	r1, r5
 802141e:	9803      	ldr	r0, [sp, #12]
 8021420:	f000 fb14 	bl	8021a4c <_Bfree>
 8021424:	2300      	movs	r3, #0
 8021426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021428:	26a3      	movs	r6, #163	@ 0xa3
 802142a:	6013      	str	r3, [r2, #0]
 802142c:	e794      	b.n	8021358 <__gethex+0x114>
 802142e:	3c01      	subs	r4, #1
 8021430:	7823      	ldrb	r3, [r4, #0]
 8021432:	2b2e      	cmp	r3, #46	@ 0x2e
 8021434:	d012      	beq.n	802145c <__gethex+0x218>
 8021436:	9b04      	ldr	r3, [sp, #16]
 8021438:	2b20      	cmp	r3, #32
 802143a:	d104      	bne.n	8021446 <__gethex+0x202>
 802143c:	9b05      	ldr	r3, [sp, #20]
 802143e:	c340      	stmia	r3!, {r6}
 8021440:	2600      	movs	r6, #0
 8021442:	9305      	str	r3, [sp, #20]
 8021444:	9604      	str	r6, [sp, #16]
 8021446:	7820      	ldrb	r0, [r4, #0]
 8021448:	f7ff fee7 	bl	802121a <__hexdig_fun>
 802144c:	230f      	movs	r3, #15
 802144e:	4018      	ands	r0, r3
 8021450:	9b04      	ldr	r3, [sp, #16]
 8021452:	4098      	lsls	r0, r3
 8021454:	3304      	adds	r3, #4
 8021456:	4306      	orrs	r6, r0
 8021458:	9304      	str	r3, [sp, #16]
 802145a:	e7ac      	b.n	80213b6 <__gethex+0x172>
 802145c:	9b00      	ldr	r3, [sp, #0]
 802145e:	42a3      	cmp	r3, r4
 8021460:	d8e9      	bhi.n	8021436 <__gethex+0x1f2>
 8021462:	2201      	movs	r2, #1
 8021464:	0020      	movs	r0, r4
 8021466:	492b      	ldr	r1, [pc, #172]	@ (8021514 <__gethex+0x2d0>)
 8021468:	f7fe fee2 	bl	8020230 <strncmp>
 802146c:	2800      	cmp	r0, #0
 802146e:	d1e2      	bne.n	8021436 <__gethex+0x1f2>
 8021470:	e7a1      	b.n	80213b6 <__gethex+0x172>
 8021472:	0028      	movs	r0, r5
 8021474:	1eb1      	subs	r1, r6, #2
 8021476:	f000 ff4c 	bl	8022312 <__any_on>
 802147a:	2800      	cmp	r0, #0
 802147c:	d0c4      	beq.n	8021408 <__gethex+0x1c4>
 802147e:	2403      	movs	r4, #3
 8021480:	e7c3      	b.n	802140a <__gethex+0x1c6>
 8021482:	9b00      	ldr	r3, [sp, #0]
 8021484:	2400      	movs	r4, #0
 8021486:	429e      	cmp	r6, r3
 8021488:	dac4      	bge.n	8021414 <__gethex+0x1d0>
 802148a:	1b9e      	subs	r6, r3, r6
 802148c:	0029      	movs	r1, r5
 802148e:	0032      	movs	r2, r6
 8021490:	9803      	ldr	r0, [sp, #12]
 8021492:	f000 fd05 	bl	8021ea0 <__lshift>
 8021496:	0003      	movs	r3, r0
 8021498:	3314      	adds	r3, #20
 802149a:	0005      	movs	r5, r0
 802149c:	1bbf      	subs	r7, r7, r6
 802149e:	9302      	str	r3, [sp, #8]
 80214a0:	e7b8      	b.n	8021414 <__gethex+0x1d0>
 80214a2:	9b01      	ldr	r3, [sp, #4]
 80214a4:	685e      	ldr	r6, [r3, #4]
 80214a6:	42be      	cmp	r6, r7
 80214a8:	dd6f      	ble.n	802158a <__gethex+0x346>
 80214aa:	9b00      	ldr	r3, [sp, #0]
 80214ac:	1bf6      	subs	r6, r6, r7
 80214ae:	42b3      	cmp	r3, r6
 80214b0:	dc36      	bgt.n	8021520 <__gethex+0x2dc>
 80214b2:	9b01      	ldr	r3, [sp, #4]
 80214b4:	68db      	ldr	r3, [r3, #12]
 80214b6:	2b02      	cmp	r3, #2
 80214b8:	d024      	beq.n	8021504 <__gethex+0x2c0>
 80214ba:	2b03      	cmp	r3, #3
 80214bc:	d026      	beq.n	802150c <__gethex+0x2c8>
 80214be:	2b01      	cmp	r3, #1
 80214c0:	d117      	bne.n	80214f2 <__gethex+0x2ae>
 80214c2:	9b00      	ldr	r3, [sp, #0]
 80214c4:	42b3      	cmp	r3, r6
 80214c6:	d114      	bne.n	80214f2 <__gethex+0x2ae>
 80214c8:	2b01      	cmp	r3, #1
 80214ca:	d10b      	bne.n	80214e4 <__gethex+0x2a0>
 80214cc:	9b01      	ldr	r3, [sp, #4]
 80214ce:	9a07      	ldr	r2, [sp, #28]
 80214d0:	685b      	ldr	r3, [r3, #4]
 80214d2:	2662      	movs	r6, #98	@ 0x62
 80214d4:	6013      	str	r3, [r2, #0]
 80214d6:	2301      	movs	r3, #1
 80214d8:	9a02      	ldr	r2, [sp, #8]
 80214da:	612b      	str	r3, [r5, #16]
 80214dc:	6013      	str	r3, [r2, #0]
 80214de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214e0:	601d      	str	r5, [r3, #0]
 80214e2:	e739      	b.n	8021358 <__gethex+0x114>
 80214e4:	9900      	ldr	r1, [sp, #0]
 80214e6:	0028      	movs	r0, r5
 80214e8:	3901      	subs	r1, #1
 80214ea:	f000 ff12 	bl	8022312 <__any_on>
 80214ee:	2800      	cmp	r0, #0
 80214f0:	d1ec      	bne.n	80214cc <__gethex+0x288>
 80214f2:	0029      	movs	r1, r5
 80214f4:	9803      	ldr	r0, [sp, #12]
 80214f6:	f000 faa9 	bl	8021a4c <_Bfree>
 80214fa:	2300      	movs	r3, #0
 80214fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214fe:	2650      	movs	r6, #80	@ 0x50
 8021500:	6013      	str	r3, [r2, #0]
 8021502:	e729      	b.n	8021358 <__gethex+0x114>
 8021504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021506:	2b00      	cmp	r3, #0
 8021508:	d1f3      	bne.n	80214f2 <__gethex+0x2ae>
 802150a:	e7df      	b.n	80214cc <__gethex+0x288>
 802150c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802150e:	2b00      	cmp	r3, #0
 8021510:	d1dc      	bne.n	80214cc <__gethex+0x288>
 8021512:	e7ee      	b.n	80214f2 <__gethex+0x2ae>
 8021514:	08025bac 	.word	0x08025bac
 8021518:	08025db9 	.word	0x08025db9
 802151c:	08025dca 	.word	0x08025dca
 8021520:	1e77      	subs	r7, r6, #1
 8021522:	2c00      	cmp	r4, #0
 8021524:	d12f      	bne.n	8021586 <__gethex+0x342>
 8021526:	2f00      	cmp	r7, #0
 8021528:	d004      	beq.n	8021534 <__gethex+0x2f0>
 802152a:	0039      	movs	r1, r7
 802152c:	0028      	movs	r0, r5
 802152e:	f000 fef0 	bl	8022312 <__any_on>
 8021532:	0004      	movs	r4, r0
 8021534:	231f      	movs	r3, #31
 8021536:	117a      	asrs	r2, r7, #5
 8021538:	401f      	ands	r7, r3
 802153a:	3b1e      	subs	r3, #30
 802153c:	40bb      	lsls	r3, r7
 802153e:	9902      	ldr	r1, [sp, #8]
 8021540:	0092      	lsls	r2, r2, #2
 8021542:	5852      	ldr	r2, [r2, r1]
 8021544:	421a      	tst	r2, r3
 8021546:	d001      	beq.n	802154c <__gethex+0x308>
 8021548:	2302      	movs	r3, #2
 802154a:	431c      	orrs	r4, r3
 802154c:	9b00      	ldr	r3, [sp, #0]
 802154e:	0031      	movs	r1, r6
 8021550:	1b9b      	subs	r3, r3, r6
 8021552:	2602      	movs	r6, #2
 8021554:	0028      	movs	r0, r5
 8021556:	9300      	str	r3, [sp, #0]
 8021558:	f7ff fe0c 	bl	8021174 <rshift>
 802155c:	9b01      	ldr	r3, [sp, #4]
 802155e:	685f      	ldr	r7, [r3, #4]
 8021560:	2c00      	cmp	r4, #0
 8021562:	d03f      	beq.n	80215e4 <__gethex+0x3a0>
 8021564:	9b01      	ldr	r3, [sp, #4]
 8021566:	68db      	ldr	r3, [r3, #12]
 8021568:	2b02      	cmp	r3, #2
 802156a:	d010      	beq.n	802158e <__gethex+0x34a>
 802156c:	2b03      	cmp	r3, #3
 802156e:	d012      	beq.n	8021596 <__gethex+0x352>
 8021570:	2b01      	cmp	r3, #1
 8021572:	d106      	bne.n	8021582 <__gethex+0x33e>
 8021574:	07a2      	lsls	r2, r4, #30
 8021576:	d504      	bpl.n	8021582 <__gethex+0x33e>
 8021578:	9a02      	ldr	r2, [sp, #8]
 802157a:	6812      	ldr	r2, [r2, #0]
 802157c:	4314      	orrs	r4, r2
 802157e:	421c      	tst	r4, r3
 8021580:	d10c      	bne.n	802159c <__gethex+0x358>
 8021582:	2310      	movs	r3, #16
 8021584:	e02d      	b.n	80215e2 <__gethex+0x39e>
 8021586:	2401      	movs	r4, #1
 8021588:	e7d4      	b.n	8021534 <__gethex+0x2f0>
 802158a:	2601      	movs	r6, #1
 802158c:	e7e8      	b.n	8021560 <__gethex+0x31c>
 802158e:	2301      	movs	r3, #1
 8021590:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021592:	1a9b      	subs	r3, r3, r2
 8021594:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021598:	2b00      	cmp	r3, #0
 802159a:	d0f2      	beq.n	8021582 <__gethex+0x33e>
 802159c:	692b      	ldr	r3, [r5, #16]
 802159e:	2000      	movs	r0, #0
 80215a0:	9302      	str	r3, [sp, #8]
 80215a2:	009b      	lsls	r3, r3, #2
 80215a4:	9304      	str	r3, [sp, #16]
 80215a6:	002b      	movs	r3, r5
 80215a8:	9a04      	ldr	r2, [sp, #16]
 80215aa:	3314      	adds	r3, #20
 80215ac:	1899      	adds	r1, r3, r2
 80215ae:	681a      	ldr	r2, [r3, #0]
 80215b0:	1c54      	adds	r4, r2, #1
 80215b2:	d01c      	beq.n	80215ee <__gethex+0x3aa>
 80215b4:	3201      	adds	r2, #1
 80215b6:	601a      	str	r2, [r3, #0]
 80215b8:	002b      	movs	r3, r5
 80215ba:	3314      	adds	r3, #20
 80215bc:	2e02      	cmp	r6, #2
 80215be:	d13f      	bne.n	8021640 <__gethex+0x3fc>
 80215c0:	9a01      	ldr	r2, [sp, #4]
 80215c2:	9900      	ldr	r1, [sp, #0]
 80215c4:	6812      	ldr	r2, [r2, #0]
 80215c6:	3a01      	subs	r2, #1
 80215c8:	428a      	cmp	r2, r1
 80215ca:	d109      	bne.n	80215e0 <__gethex+0x39c>
 80215cc:	000a      	movs	r2, r1
 80215ce:	201f      	movs	r0, #31
 80215d0:	4010      	ands	r0, r2
 80215d2:	2201      	movs	r2, #1
 80215d4:	4082      	lsls	r2, r0
 80215d6:	1149      	asrs	r1, r1, #5
 80215d8:	0089      	lsls	r1, r1, #2
 80215da:	58cb      	ldr	r3, [r1, r3]
 80215dc:	4213      	tst	r3, r2
 80215de:	d13d      	bne.n	802165c <__gethex+0x418>
 80215e0:	2320      	movs	r3, #32
 80215e2:	431e      	orrs	r6, r3
 80215e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80215e6:	601d      	str	r5, [r3, #0]
 80215e8:	9b07      	ldr	r3, [sp, #28]
 80215ea:	601f      	str	r7, [r3, #0]
 80215ec:	e6b4      	b.n	8021358 <__gethex+0x114>
 80215ee:	c301      	stmia	r3!, {r0}
 80215f0:	4299      	cmp	r1, r3
 80215f2:	d8dc      	bhi.n	80215ae <__gethex+0x36a>
 80215f4:	68ab      	ldr	r3, [r5, #8]
 80215f6:	9a02      	ldr	r2, [sp, #8]
 80215f8:	429a      	cmp	r2, r3
 80215fa:	db18      	blt.n	802162e <__gethex+0x3ea>
 80215fc:	6869      	ldr	r1, [r5, #4]
 80215fe:	9803      	ldr	r0, [sp, #12]
 8021600:	3101      	adds	r1, #1
 8021602:	f000 f9df 	bl	80219c4 <_Balloc>
 8021606:	1e04      	subs	r4, r0, #0
 8021608:	d104      	bne.n	8021614 <__gethex+0x3d0>
 802160a:	0022      	movs	r2, r4
 802160c:	2184      	movs	r1, #132	@ 0x84
 802160e:	4b1d      	ldr	r3, [pc, #116]	@ (8021684 <__gethex+0x440>)
 8021610:	481d      	ldr	r0, [pc, #116]	@ (8021688 <__gethex+0x444>)
 8021612:	e6c4      	b.n	802139e <__gethex+0x15a>
 8021614:	0029      	movs	r1, r5
 8021616:	692a      	ldr	r2, [r5, #16]
 8021618:	310c      	adds	r1, #12
 802161a:	3202      	adds	r2, #2
 802161c:	0092      	lsls	r2, r2, #2
 802161e:	300c      	adds	r0, #12
 8021620:	f7fe fecc 	bl	80203bc <memcpy>
 8021624:	0029      	movs	r1, r5
 8021626:	9803      	ldr	r0, [sp, #12]
 8021628:	f000 fa10 	bl	8021a4c <_Bfree>
 802162c:	0025      	movs	r5, r4
 802162e:	692b      	ldr	r3, [r5, #16]
 8021630:	1c5a      	adds	r2, r3, #1
 8021632:	612a      	str	r2, [r5, #16]
 8021634:	2201      	movs	r2, #1
 8021636:	3304      	adds	r3, #4
 8021638:	009b      	lsls	r3, r3, #2
 802163a:	18eb      	adds	r3, r5, r3
 802163c:	605a      	str	r2, [r3, #4]
 802163e:	e7bb      	b.n	80215b8 <__gethex+0x374>
 8021640:	692a      	ldr	r2, [r5, #16]
 8021642:	9902      	ldr	r1, [sp, #8]
 8021644:	428a      	cmp	r2, r1
 8021646:	dd0b      	ble.n	8021660 <__gethex+0x41c>
 8021648:	2101      	movs	r1, #1
 802164a:	0028      	movs	r0, r5
 802164c:	f7ff fd92 	bl	8021174 <rshift>
 8021650:	9b01      	ldr	r3, [sp, #4]
 8021652:	3701      	adds	r7, #1
 8021654:	689b      	ldr	r3, [r3, #8]
 8021656:	42bb      	cmp	r3, r7
 8021658:	da00      	bge.n	802165c <__gethex+0x418>
 802165a:	e6df      	b.n	802141c <__gethex+0x1d8>
 802165c:	2601      	movs	r6, #1
 802165e:	e7bf      	b.n	80215e0 <__gethex+0x39c>
 8021660:	221f      	movs	r2, #31
 8021662:	9c00      	ldr	r4, [sp, #0]
 8021664:	9900      	ldr	r1, [sp, #0]
 8021666:	4014      	ands	r4, r2
 8021668:	4211      	tst	r1, r2
 802166a:	d0f7      	beq.n	802165c <__gethex+0x418>
 802166c:	9a04      	ldr	r2, [sp, #16]
 802166e:	189b      	adds	r3, r3, r2
 8021670:	3b04      	subs	r3, #4
 8021672:	6818      	ldr	r0, [r3, #0]
 8021674:	f000 fa9e 	bl	8021bb4 <__hi0bits>
 8021678:	2320      	movs	r3, #32
 802167a:	1b1b      	subs	r3, r3, r4
 802167c:	4298      	cmp	r0, r3
 802167e:	dbe3      	blt.n	8021648 <__gethex+0x404>
 8021680:	e7ec      	b.n	802165c <__gethex+0x418>
 8021682:	46c0      	nop			@ (mov r8, r8)
 8021684:	08025db9 	.word	0x08025db9
 8021688:	08025dca 	.word	0x08025dca

0802168c <L_shift>:
 802168c:	2308      	movs	r3, #8
 802168e:	b570      	push	{r4, r5, r6, lr}
 8021690:	2520      	movs	r5, #32
 8021692:	1a9a      	subs	r2, r3, r2
 8021694:	0092      	lsls	r2, r2, #2
 8021696:	1aad      	subs	r5, r5, r2
 8021698:	6843      	ldr	r3, [r0, #4]
 802169a:	6804      	ldr	r4, [r0, #0]
 802169c:	001e      	movs	r6, r3
 802169e:	40ae      	lsls	r6, r5
 80216a0:	40d3      	lsrs	r3, r2
 80216a2:	4334      	orrs	r4, r6
 80216a4:	6004      	str	r4, [r0, #0]
 80216a6:	6043      	str	r3, [r0, #4]
 80216a8:	3004      	adds	r0, #4
 80216aa:	4288      	cmp	r0, r1
 80216ac:	d3f4      	bcc.n	8021698 <L_shift+0xc>
 80216ae:	bd70      	pop	{r4, r5, r6, pc}

080216b0 <__match>:
 80216b0:	b530      	push	{r4, r5, lr}
 80216b2:	6803      	ldr	r3, [r0, #0]
 80216b4:	780c      	ldrb	r4, [r1, #0]
 80216b6:	3301      	adds	r3, #1
 80216b8:	2c00      	cmp	r4, #0
 80216ba:	d102      	bne.n	80216c2 <__match+0x12>
 80216bc:	6003      	str	r3, [r0, #0]
 80216be:	2001      	movs	r0, #1
 80216c0:	bd30      	pop	{r4, r5, pc}
 80216c2:	781a      	ldrb	r2, [r3, #0]
 80216c4:	0015      	movs	r5, r2
 80216c6:	3d41      	subs	r5, #65	@ 0x41
 80216c8:	2d19      	cmp	r5, #25
 80216ca:	d800      	bhi.n	80216ce <__match+0x1e>
 80216cc:	3220      	adds	r2, #32
 80216ce:	3101      	adds	r1, #1
 80216d0:	42a2      	cmp	r2, r4
 80216d2:	d0ef      	beq.n	80216b4 <__match+0x4>
 80216d4:	2000      	movs	r0, #0
 80216d6:	e7f3      	b.n	80216c0 <__match+0x10>

080216d8 <__hexnan>:
 80216d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216da:	680b      	ldr	r3, [r1, #0]
 80216dc:	b08b      	sub	sp, #44	@ 0x2c
 80216de:	9201      	str	r2, [sp, #4]
 80216e0:	9901      	ldr	r1, [sp, #4]
 80216e2:	115a      	asrs	r2, r3, #5
 80216e4:	0092      	lsls	r2, r2, #2
 80216e6:	188a      	adds	r2, r1, r2
 80216e8:	9202      	str	r2, [sp, #8]
 80216ea:	0019      	movs	r1, r3
 80216ec:	221f      	movs	r2, #31
 80216ee:	4011      	ands	r1, r2
 80216f0:	9008      	str	r0, [sp, #32]
 80216f2:	9106      	str	r1, [sp, #24]
 80216f4:	4213      	tst	r3, r2
 80216f6:	d002      	beq.n	80216fe <__hexnan+0x26>
 80216f8:	9b02      	ldr	r3, [sp, #8]
 80216fa:	3304      	adds	r3, #4
 80216fc:	9302      	str	r3, [sp, #8]
 80216fe:	9b02      	ldr	r3, [sp, #8]
 8021700:	2500      	movs	r5, #0
 8021702:	1f1f      	subs	r7, r3, #4
 8021704:	003e      	movs	r6, r7
 8021706:	003c      	movs	r4, r7
 8021708:	9b08      	ldr	r3, [sp, #32]
 802170a:	603d      	str	r5, [r7, #0]
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	9507      	str	r5, [sp, #28]
 8021710:	9305      	str	r3, [sp, #20]
 8021712:	9503      	str	r5, [sp, #12]
 8021714:	9b05      	ldr	r3, [sp, #20]
 8021716:	3301      	adds	r3, #1
 8021718:	9309      	str	r3, [sp, #36]	@ 0x24
 802171a:	9b05      	ldr	r3, [sp, #20]
 802171c:	785b      	ldrb	r3, [r3, #1]
 802171e:	9304      	str	r3, [sp, #16]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d028      	beq.n	8021776 <__hexnan+0x9e>
 8021724:	9804      	ldr	r0, [sp, #16]
 8021726:	f7ff fd78 	bl	802121a <__hexdig_fun>
 802172a:	2800      	cmp	r0, #0
 802172c:	d155      	bne.n	80217da <__hexnan+0x102>
 802172e:	9b04      	ldr	r3, [sp, #16]
 8021730:	2b20      	cmp	r3, #32
 8021732:	d819      	bhi.n	8021768 <__hexnan+0x90>
 8021734:	9b03      	ldr	r3, [sp, #12]
 8021736:	9a07      	ldr	r2, [sp, #28]
 8021738:	4293      	cmp	r3, r2
 802173a:	dd12      	ble.n	8021762 <__hexnan+0x8a>
 802173c:	42b4      	cmp	r4, r6
 802173e:	d206      	bcs.n	802174e <__hexnan+0x76>
 8021740:	2d07      	cmp	r5, #7
 8021742:	dc04      	bgt.n	802174e <__hexnan+0x76>
 8021744:	002a      	movs	r2, r5
 8021746:	0031      	movs	r1, r6
 8021748:	0020      	movs	r0, r4
 802174a:	f7ff ff9f 	bl	802168c <L_shift>
 802174e:	9b01      	ldr	r3, [sp, #4]
 8021750:	2508      	movs	r5, #8
 8021752:	429c      	cmp	r4, r3
 8021754:	d905      	bls.n	8021762 <__hexnan+0x8a>
 8021756:	1f26      	subs	r6, r4, #4
 8021758:	2500      	movs	r5, #0
 802175a:	0034      	movs	r4, r6
 802175c:	9b03      	ldr	r3, [sp, #12]
 802175e:	6035      	str	r5, [r6, #0]
 8021760:	9307      	str	r3, [sp, #28]
 8021762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021764:	9305      	str	r3, [sp, #20]
 8021766:	e7d5      	b.n	8021714 <__hexnan+0x3c>
 8021768:	9b04      	ldr	r3, [sp, #16]
 802176a:	2b29      	cmp	r3, #41	@ 0x29
 802176c:	d15a      	bne.n	8021824 <__hexnan+0x14c>
 802176e:	9b05      	ldr	r3, [sp, #20]
 8021770:	9a08      	ldr	r2, [sp, #32]
 8021772:	3302      	adds	r3, #2
 8021774:	6013      	str	r3, [r2, #0]
 8021776:	9b03      	ldr	r3, [sp, #12]
 8021778:	2b00      	cmp	r3, #0
 802177a:	d053      	beq.n	8021824 <__hexnan+0x14c>
 802177c:	42b4      	cmp	r4, r6
 802177e:	d206      	bcs.n	802178e <__hexnan+0xb6>
 8021780:	2d07      	cmp	r5, #7
 8021782:	dc04      	bgt.n	802178e <__hexnan+0xb6>
 8021784:	002a      	movs	r2, r5
 8021786:	0031      	movs	r1, r6
 8021788:	0020      	movs	r0, r4
 802178a:	f7ff ff7f 	bl	802168c <L_shift>
 802178e:	9b01      	ldr	r3, [sp, #4]
 8021790:	429c      	cmp	r4, r3
 8021792:	d936      	bls.n	8021802 <__hexnan+0x12a>
 8021794:	001a      	movs	r2, r3
 8021796:	0023      	movs	r3, r4
 8021798:	cb02      	ldmia	r3!, {r1}
 802179a:	c202      	stmia	r2!, {r1}
 802179c:	429f      	cmp	r7, r3
 802179e:	d2fb      	bcs.n	8021798 <__hexnan+0xc0>
 80217a0:	9b02      	ldr	r3, [sp, #8]
 80217a2:	1c61      	adds	r1, r4, #1
 80217a4:	1eda      	subs	r2, r3, #3
 80217a6:	2304      	movs	r3, #4
 80217a8:	4291      	cmp	r1, r2
 80217aa:	d805      	bhi.n	80217b8 <__hexnan+0xe0>
 80217ac:	9b02      	ldr	r3, [sp, #8]
 80217ae:	3b04      	subs	r3, #4
 80217b0:	1b1b      	subs	r3, r3, r4
 80217b2:	089b      	lsrs	r3, r3, #2
 80217b4:	3301      	adds	r3, #1
 80217b6:	009b      	lsls	r3, r3, #2
 80217b8:	9a01      	ldr	r2, [sp, #4]
 80217ba:	18d3      	adds	r3, r2, r3
 80217bc:	2200      	movs	r2, #0
 80217be:	c304      	stmia	r3!, {r2}
 80217c0:	429f      	cmp	r7, r3
 80217c2:	d2fc      	bcs.n	80217be <__hexnan+0xe6>
 80217c4:	683b      	ldr	r3, [r7, #0]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d104      	bne.n	80217d4 <__hexnan+0xfc>
 80217ca:	9b01      	ldr	r3, [sp, #4]
 80217cc:	429f      	cmp	r7, r3
 80217ce:	d127      	bne.n	8021820 <__hexnan+0x148>
 80217d0:	2301      	movs	r3, #1
 80217d2:	603b      	str	r3, [r7, #0]
 80217d4:	2005      	movs	r0, #5
 80217d6:	b00b      	add	sp, #44	@ 0x2c
 80217d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217da:	9b03      	ldr	r3, [sp, #12]
 80217dc:	3501      	adds	r5, #1
 80217de:	3301      	adds	r3, #1
 80217e0:	9303      	str	r3, [sp, #12]
 80217e2:	2d08      	cmp	r5, #8
 80217e4:	dd06      	ble.n	80217f4 <__hexnan+0x11c>
 80217e6:	9b01      	ldr	r3, [sp, #4]
 80217e8:	429c      	cmp	r4, r3
 80217ea:	d9ba      	bls.n	8021762 <__hexnan+0x8a>
 80217ec:	2300      	movs	r3, #0
 80217ee:	2501      	movs	r5, #1
 80217f0:	3c04      	subs	r4, #4
 80217f2:	6023      	str	r3, [r4, #0]
 80217f4:	220f      	movs	r2, #15
 80217f6:	6823      	ldr	r3, [r4, #0]
 80217f8:	4010      	ands	r0, r2
 80217fa:	011b      	lsls	r3, r3, #4
 80217fc:	4303      	orrs	r3, r0
 80217fe:	6023      	str	r3, [r4, #0]
 8021800:	e7af      	b.n	8021762 <__hexnan+0x8a>
 8021802:	9b06      	ldr	r3, [sp, #24]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d0dd      	beq.n	80217c4 <__hexnan+0xec>
 8021808:	2320      	movs	r3, #32
 802180a:	9a06      	ldr	r2, [sp, #24]
 802180c:	9902      	ldr	r1, [sp, #8]
 802180e:	1a9b      	subs	r3, r3, r2
 8021810:	2201      	movs	r2, #1
 8021812:	4252      	negs	r2, r2
 8021814:	40da      	lsrs	r2, r3
 8021816:	3904      	subs	r1, #4
 8021818:	680b      	ldr	r3, [r1, #0]
 802181a:	4013      	ands	r3, r2
 802181c:	600b      	str	r3, [r1, #0]
 802181e:	e7d1      	b.n	80217c4 <__hexnan+0xec>
 8021820:	3f04      	subs	r7, #4
 8021822:	e7cf      	b.n	80217c4 <__hexnan+0xec>
 8021824:	2004      	movs	r0, #4
 8021826:	e7d6      	b.n	80217d6 <__hexnan+0xfe>

08021828 <malloc>:
 8021828:	b510      	push	{r4, lr}
 802182a:	4b03      	ldr	r3, [pc, #12]	@ (8021838 <malloc+0x10>)
 802182c:	0001      	movs	r1, r0
 802182e:	6818      	ldr	r0, [r3, #0]
 8021830:	f000 f826 	bl	8021880 <_malloc_r>
 8021834:	bd10      	pop	{r4, pc}
 8021836:	46c0      	nop			@ (mov r8, r8)
 8021838:	200003d4 	.word	0x200003d4

0802183c <sbrk_aligned>:
 802183c:	b570      	push	{r4, r5, r6, lr}
 802183e:	4e0f      	ldr	r6, [pc, #60]	@ (802187c <sbrk_aligned+0x40>)
 8021840:	000d      	movs	r5, r1
 8021842:	6831      	ldr	r1, [r6, #0]
 8021844:	0004      	movs	r4, r0
 8021846:	2900      	cmp	r1, #0
 8021848:	d102      	bne.n	8021850 <sbrk_aligned+0x14>
 802184a:	f001 f989 	bl	8022b60 <_sbrk_r>
 802184e:	6030      	str	r0, [r6, #0]
 8021850:	0029      	movs	r1, r5
 8021852:	0020      	movs	r0, r4
 8021854:	f001 f984 	bl	8022b60 <_sbrk_r>
 8021858:	1c43      	adds	r3, r0, #1
 802185a:	d103      	bne.n	8021864 <sbrk_aligned+0x28>
 802185c:	2501      	movs	r5, #1
 802185e:	426d      	negs	r5, r5
 8021860:	0028      	movs	r0, r5
 8021862:	bd70      	pop	{r4, r5, r6, pc}
 8021864:	2303      	movs	r3, #3
 8021866:	1cc5      	adds	r5, r0, #3
 8021868:	439d      	bics	r5, r3
 802186a:	42a8      	cmp	r0, r5
 802186c:	d0f8      	beq.n	8021860 <sbrk_aligned+0x24>
 802186e:	1a29      	subs	r1, r5, r0
 8021870:	0020      	movs	r0, r4
 8021872:	f001 f975 	bl	8022b60 <_sbrk_r>
 8021876:	3001      	adds	r0, #1
 8021878:	d1f2      	bne.n	8021860 <sbrk_aligned+0x24>
 802187a:	e7ef      	b.n	802185c <sbrk_aligned+0x20>
 802187c:	200037b0 	.word	0x200037b0

08021880 <_malloc_r>:
 8021880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021882:	2203      	movs	r2, #3
 8021884:	1ccb      	adds	r3, r1, #3
 8021886:	4393      	bics	r3, r2
 8021888:	3308      	adds	r3, #8
 802188a:	0005      	movs	r5, r0
 802188c:	001f      	movs	r7, r3
 802188e:	2b0c      	cmp	r3, #12
 8021890:	d234      	bcs.n	80218fc <_malloc_r+0x7c>
 8021892:	270c      	movs	r7, #12
 8021894:	42b9      	cmp	r1, r7
 8021896:	d833      	bhi.n	8021900 <_malloc_r+0x80>
 8021898:	0028      	movs	r0, r5
 802189a:	f000 f883 	bl	80219a4 <__malloc_lock>
 802189e:	4e37      	ldr	r6, [pc, #220]	@ (802197c <_malloc_r+0xfc>)
 80218a0:	6833      	ldr	r3, [r6, #0]
 80218a2:	001c      	movs	r4, r3
 80218a4:	2c00      	cmp	r4, #0
 80218a6:	d12f      	bne.n	8021908 <_malloc_r+0x88>
 80218a8:	0039      	movs	r1, r7
 80218aa:	0028      	movs	r0, r5
 80218ac:	f7ff ffc6 	bl	802183c <sbrk_aligned>
 80218b0:	0004      	movs	r4, r0
 80218b2:	1c43      	adds	r3, r0, #1
 80218b4:	d15f      	bne.n	8021976 <_malloc_r+0xf6>
 80218b6:	6834      	ldr	r4, [r6, #0]
 80218b8:	9400      	str	r4, [sp, #0]
 80218ba:	9b00      	ldr	r3, [sp, #0]
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d14a      	bne.n	8021956 <_malloc_r+0xd6>
 80218c0:	2c00      	cmp	r4, #0
 80218c2:	d052      	beq.n	802196a <_malloc_r+0xea>
 80218c4:	6823      	ldr	r3, [r4, #0]
 80218c6:	0028      	movs	r0, r5
 80218c8:	18e3      	adds	r3, r4, r3
 80218ca:	9900      	ldr	r1, [sp, #0]
 80218cc:	9301      	str	r3, [sp, #4]
 80218ce:	f001 f947 	bl	8022b60 <_sbrk_r>
 80218d2:	9b01      	ldr	r3, [sp, #4]
 80218d4:	4283      	cmp	r3, r0
 80218d6:	d148      	bne.n	802196a <_malloc_r+0xea>
 80218d8:	6823      	ldr	r3, [r4, #0]
 80218da:	0028      	movs	r0, r5
 80218dc:	1aff      	subs	r7, r7, r3
 80218de:	0039      	movs	r1, r7
 80218e0:	f7ff ffac 	bl	802183c <sbrk_aligned>
 80218e4:	3001      	adds	r0, #1
 80218e6:	d040      	beq.n	802196a <_malloc_r+0xea>
 80218e8:	6823      	ldr	r3, [r4, #0]
 80218ea:	19db      	adds	r3, r3, r7
 80218ec:	6023      	str	r3, [r4, #0]
 80218ee:	6833      	ldr	r3, [r6, #0]
 80218f0:	685a      	ldr	r2, [r3, #4]
 80218f2:	2a00      	cmp	r2, #0
 80218f4:	d133      	bne.n	802195e <_malloc_r+0xde>
 80218f6:	9b00      	ldr	r3, [sp, #0]
 80218f8:	6033      	str	r3, [r6, #0]
 80218fa:	e019      	b.n	8021930 <_malloc_r+0xb0>
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	dac9      	bge.n	8021894 <_malloc_r+0x14>
 8021900:	230c      	movs	r3, #12
 8021902:	602b      	str	r3, [r5, #0]
 8021904:	2000      	movs	r0, #0
 8021906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021908:	6821      	ldr	r1, [r4, #0]
 802190a:	1bc9      	subs	r1, r1, r7
 802190c:	d420      	bmi.n	8021950 <_malloc_r+0xd0>
 802190e:	290b      	cmp	r1, #11
 8021910:	d90a      	bls.n	8021928 <_malloc_r+0xa8>
 8021912:	19e2      	adds	r2, r4, r7
 8021914:	6027      	str	r7, [r4, #0]
 8021916:	42a3      	cmp	r3, r4
 8021918:	d104      	bne.n	8021924 <_malloc_r+0xa4>
 802191a:	6032      	str	r2, [r6, #0]
 802191c:	6863      	ldr	r3, [r4, #4]
 802191e:	6011      	str	r1, [r2, #0]
 8021920:	6053      	str	r3, [r2, #4]
 8021922:	e005      	b.n	8021930 <_malloc_r+0xb0>
 8021924:	605a      	str	r2, [r3, #4]
 8021926:	e7f9      	b.n	802191c <_malloc_r+0x9c>
 8021928:	6862      	ldr	r2, [r4, #4]
 802192a:	42a3      	cmp	r3, r4
 802192c:	d10e      	bne.n	802194c <_malloc_r+0xcc>
 802192e:	6032      	str	r2, [r6, #0]
 8021930:	0028      	movs	r0, r5
 8021932:	f000 f83f 	bl	80219b4 <__malloc_unlock>
 8021936:	0020      	movs	r0, r4
 8021938:	2207      	movs	r2, #7
 802193a:	300b      	adds	r0, #11
 802193c:	1d23      	adds	r3, r4, #4
 802193e:	4390      	bics	r0, r2
 8021940:	1ac2      	subs	r2, r0, r3
 8021942:	4298      	cmp	r0, r3
 8021944:	d0df      	beq.n	8021906 <_malloc_r+0x86>
 8021946:	1a1b      	subs	r3, r3, r0
 8021948:	50a3      	str	r3, [r4, r2]
 802194a:	e7dc      	b.n	8021906 <_malloc_r+0x86>
 802194c:	605a      	str	r2, [r3, #4]
 802194e:	e7ef      	b.n	8021930 <_malloc_r+0xb0>
 8021950:	0023      	movs	r3, r4
 8021952:	6864      	ldr	r4, [r4, #4]
 8021954:	e7a6      	b.n	80218a4 <_malloc_r+0x24>
 8021956:	9c00      	ldr	r4, [sp, #0]
 8021958:	6863      	ldr	r3, [r4, #4]
 802195a:	9300      	str	r3, [sp, #0]
 802195c:	e7ad      	b.n	80218ba <_malloc_r+0x3a>
 802195e:	001a      	movs	r2, r3
 8021960:	685b      	ldr	r3, [r3, #4]
 8021962:	42a3      	cmp	r3, r4
 8021964:	d1fb      	bne.n	802195e <_malloc_r+0xde>
 8021966:	2300      	movs	r3, #0
 8021968:	e7da      	b.n	8021920 <_malloc_r+0xa0>
 802196a:	230c      	movs	r3, #12
 802196c:	0028      	movs	r0, r5
 802196e:	602b      	str	r3, [r5, #0]
 8021970:	f000 f820 	bl	80219b4 <__malloc_unlock>
 8021974:	e7c6      	b.n	8021904 <_malloc_r+0x84>
 8021976:	6007      	str	r7, [r0, #0]
 8021978:	e7da      	b.n	8021930 <_malloc_r+0xb0>
 802197a:	46c0      	nop			@ (mov r8, r8)
 802197c:	200037b4 	.word	0x200037b4

08021980 <__ascii_mbtowc>:
 8021980:	b082      	sub	sp, #8
 8021982:	2900      	cmp	r1, #0
 8021984:	d100      	bne.n	8021988 <__ascii_mbtowc+0x8>
 8021986:	a901      	add	r1, sp, #4
 8021988:	1e10      	subs	r0, r2, #0
 802198a:	d006      	beq.n	802199a <__ascii_mbtowc+0x1a>
 802198c:	2b00      	cmp	r3, #0
 802198e:	d006      	beq.n	802199e <__ascii_mbtowc+0x1e>
 8021990:	7813      	ldrb	r3, [r2, #0]
 8021992:	600b      	str	r3, [r1, #0]
 8021994:	7810      	ldrb	r0, [r2, #0]
 8021996:	1e43      	subs	r3, r0, #1
 8021998:	4198      	sbcs	r0, r3
 802199a:	b002      	add	sp, #8
 802199c:	4770      	bx	lr
 802199e:	2002      	movs	r0, #2
 80219a0:	4240      	negs	r0, r0
 80219a2:	e7fa      	b.n	802199a <__ascii_mbtowc+0x1a>

080219a4 <__malloc_lock>:
 80219a4:	b510      	push	{r4, lr}
 80219a6:	4802      	ldr	r0, [pc, #8]	@ (80219b0 <__malloc_lock+0xc>)
 80219a8:	f7fe fcfb 	bl	80203a2 <__retarget_lock_acquire_recursive>
 80219ac:	bd10      	pop	{r4, pc}
 80219ae:	46c0      	nop			@ (mov r8, r8)
 80219b0:	200037ac 	.word	0x200037ac

080219b4 <__malloc_unlock>:
 80219b4:	b510      	push	{r4, lr}
 80219b6:	4802      	ldr	r0, [pc, #8]	@ (80219c0 <__malloc_unlock+0xc>)
 80219b8:	f7fe fcf4 	bl	80203a4 <__retarget_lock_release_recursive>
 80219bc:	bd10      	pop	{r4, pc}
 80219be:	46c0      	nop			@ (mov r8, r8)
 80219c0:	200037ac 	.word	0x200037ac

080219c4 <_Balloc>:
 80219c4:	b570      	push	{r4, r5, r6, lr}
 80219c6:	69c5      	ldr	r5, [r0, #28]
 80219c8:	0006      	movs	r6, r0
 80219ca:	000c      	movs	r4, r1
 80219cc:	2d00      	cmp	r5, #0
 80219ce:	d10e      	bne.n	80219ee <_Balloc+0x2a>
 80219d0:	2010      	movs	r0, #16
 80219d2:	f7ff ff29 	bl	8021828 <malloc>
 80219d6:	1e02      	subs	r2, r0, #0
 80219d8:	61f0      	str	r0, [r6, #28]
 80219da:	d104      	bne.n	80219e6 <_Balloc+0x22>
 80219dc:	216b      	movs	r1, #107	@ 0x6b
 80219de:	4b19      	ldr	r3, [pc, #100]	@ (8021a44 <_Balloc+0x80>)
 80219e0:	4819      	ldr	r0, [pc, #100]	@ (8021a48 <_Balloc+0x84>)
 80219e2:	f001 f8cf 	bl	8022b84 <__assert_func>
 80219e6:	6045      	str	r5, [r0, #4]
 80219e8:	6085      	str	r5, [r0, #8]
 80219ea:	6005      	str	r5, [r0, #0]
 80219ec:	60c5      	str	r5, [r0, #12]
 80219ee:	69f5      	ldr	r5, [r6, #28]
 80219f0:	68eb      	ldr	r3, [r5, #12]
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	d013      	beq.n	8021a1e <_Balloc+0x5a>
 80219f6:	69f3      	ldr	r3, [r6, #28]
 80219f8:	00a2      	lsls	r2, r4, #2
 80219fa:	68db      	ldr	r3, [r3, #12]
 80219fc:	189b      	adds	r3, r3, r2
 80219fe:	6818      	ldr	r0, [r3, #0]
 8021a00:	2800      	cmp	r0, #0
 8021a02:	d118      	bne.n	8021a36 <_Balloc+0x72>
 8021a04:	2101      	movs	r1, #1
 8021a06:	000d      	movs	r5, r1
 8021a08:	40a5      	lsls	r5, r4
 8021a0a:	1d6a      	adds	r2, r5, #5
 8021a0c:	0030      	movs	r0, r6
 8021a0e:	0092      	lsls	r2, r2, #2
 8021a10:	f001 f8d6 	bl	8022bc0 <_calloc_r>
 8021a14:	2800      	cmp	r0, #0
 8021a16:	d00c      	beq.n	8021a32 <_Balloc+0x6e>
 8021a18:	6044      	str	r4, [r0, #4]
 8021a1a:	6085      	str	r5, [r0, #8]
 8021a1c:	e00d      	b.n	8021a3a <_Balloc+0x76>
 8021a1e:	2221      	movs	r2, #33	@ 0x21
 8021a20:	2104      	movs	r1, #4
 8021a22:	0030      	movs	r0, r6
 8021a24:	f001 f8cc 	bl	8022bc0 <_calloc_r>
 8021a28:	69f3      	ldr	r3, [r6, #28]
 8021a2a:	60e8      	str	r0, [r5, #12]
 8021a2c:	68db      	ldr	r3, [r3, #12]
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d1e1      	bne.n	80219f6 <_Balloc+0x32>
 8021a32:	2000      	movs	r0, #0
 8021a34:	bd70      	pop	{r4, r5, r6, pc}
 8021a36:	6802      	ldr	r2, [r0, #0]
 8021a38:	601a      	str	r2, [r3, #0]
 8021a3a:	2300      	movs	r3, #0
 8021a3c:	6103      	str	r3, [r0, #16]
 8021a3e:	60c3      	str	r3, [r0, #12]
 8021a40:	e7f8      	b.n	8021a34 <_Balloc+0x70>
 8021a42:	46c0      	nop			@ (mov r8, r8)
 8021a44:	08025d4a 	.word	0x08025d4a
 8021a48:	08025e2a 	.word	0x08025e2a

08021a4c <_Bfree>:
 8021a4c:	b570      	push	{r4, r5, r6, lr}
 8021a4e:	69c6      	ldr	r6, [r0, #28]
 8021a50:	0005      	movs	r5, r0
 8021a52:	000c      	movs	r4, r1
 8021a54:	2e00      	cmp	r6, #0
 8021a56:	d10e      	bne.n	8021a76 <_Bfree+0x2a>
 8021a58:	2010      	movs	r0, #16
 8021a5a:	f7ff fee5 	bl	8021828 <malloc>
 8021a5e:	1e02      	subs	r2, r0, #0
 8021a60:	61e8      	str	r0, [r5, #28]
 8021a62:	d104      	bne.n	8021a6e <_Bfree+0x22>
 8021a64:	218f      	movs	r1, #143	@ 0x8f
 8021a66:	4b09      	ldr	r3, [pc, #36]	@ (8021a8c <_Bfree+0x40>)
 8021a68:	4809      	ldr	r0, [pc, #36]	@ (8021a90 <_Bfree+0x44>)
 8021a6a:	f001 f88b 	bl	8022b84 <__assert_func>
 8021a6e:	6046      	str	r6, [r0, #4]
 8021a70:	6086      	str	r6, [r0, #8]
 8021a72:	6006      	str	r6, [r0, #0]
 8021a74:	60c6      	str	r6, [r0, #12]
 8021a76:	2c00      	cmp	r4, #0
 8021a78:	d007      	beq.n	8021a8a <_Bfree+0x3e>
 8021a7a:	69eb      	ldr	r3, [r5, #28]
 8021a7c:	6862      	ldr	r2, [r4, #4]
 8021a7e:	68db      	ldr	r3, [r3, #12]
 8021a80:	0092      	lsls	r2, r2, #2
 8021a82:	189b      	adds	r3, r3, r2
 8021a84:	681a      	ldr	r2, [r3, #0]
 8021a86:	6022      	str	r2, [r4, #0]
 8021a88:	601c      	str	r4, [r3, #0]
 8021a8a:	bd70      	pop	{r4, r5, r6, pc}
 8021a8c:	08025d4a 	.word	0x08025d4a
 8021a90:	08025e2a 	.word	0x08025e2a

08021a94 <__multadd>:
 8021a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a96:	000f      	movs	r7, r1
 8021a98:	9001      	str	r0, [sp, #4]
 8021a9a:	000c      	movs	r4, r1
 8021a9c:	001e      	movs	r6, r3
 8021a9e:	2000      	movs	r0, #0
 8021aa0:	690d      	ldr	r5, [r1, #16]
 8021aa2:	3714      	adds	r7, #20
 8021aa4:	683b      	ldr	r3, [r7, #0]
 8021aa6:	3001      	adds	r0, #1
 8021aa8:	b299      	uxth	r1, r3
 8021aaa:	4351      	muls	r1, r2
 8021aac:	0c1b      	lsrs	r3, r3, #16
 8021aae:	4353      	muls	r3, r2
 8021ab0:	1989      	adds	r1, r1, r6
 8021ab2:	0c0e      	lsrs	r6, r1, #16
 8021ab4:	199b      	adds	r3, r3, r6
 8021ab6:	0c1e      	lsrs	r6, r3, #16
 8021ab8:	b289      	uxth	r1, r1
 8021aba:	041b      	lsls	r3, r3, #16
 8021abc:	185b      	adds	r3, r3, r1
 8021abe:	c708      	stmia	r7!, {r3}
 8021ac0:	4285      	cmp	r5, r0
 8021ac2:	dcef      	bgt.n	8021aa4 <__multadd+0x10>
 8021ac4:	2e00      	cmp	r6, #0
 8021ac6:	d022      	beq.n	8021b0e <__multadd+0x7a>
 8021ac8:	68a3      	ldr	r3, [r4, #8]
 8021aca:	42ab      	cmp	r3, r5
 8021acc:	dc19      	bgt.n	8021b02 <__multadd+0x6e>
 8021ace:	6861      	ldr	r1, [r4, #4]
 8021ad0:	9801      	ldr	r0, [sp, #4]
 8021ad2:	3101      	adds	r1, #1
 8021ad4:	f7ff ff76 	bl	80219c4 <_Balloc>
 8021ad8:	1e07      	subs	r7, r0, #0
 8021ada:	d105      	bne.n	8021ae8 <__multadd+0x54>
 8021adc:	003a      	movs	r2, r7
 8021ade:	21ba      	movs	r1, #186	@ 0xba
 8021ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8021b14 <__multadd+0x80>)
 8021ae2:	480d      	ldr	r0, [pc, #52]	@ (8021b18 <__multadd+0x84>)
 8021ae4:	f001 f84e 	bl	8022b84 <__assert_func>
 8021ae8:	0021      	movs	r1, r4
 8021aea:	6922      	ldr	r2, [r4, #16]
 8021aec:	310c      	adds	r1, #12
 8021aee:	3202      	adds	r2, #2
 8021af0:	0092      	lsls	r2, r2, #2
 8021af2:	300c      	adds	r0, #12
 8021af4:	f7fe fc62 	bl	80203bc <memcpy>
 8021af8:	0021      	movs	r1, r4
 8021afa:	9801      	ldr	r0, [sp, #4]
 8021afc:	f7ff ffa6 	bl	8021a4c <_Bfree>
 8021b00:	003c      	movs	r4, r7
 8021b02:	1d2b      	adds	r3, r5, #4
 8021b04:	009b      	lsls	r3, r3, #2
 8021b06:	18e3      	adds	r3, r4, r3
 8021b08:	3501      	adds	r5, #1
 8021b0a:	605e      	str	r6, [r3, #4]
 8021b0c:	6125      	str	r5, [r4, #16]
 8021b0e:	0020      	movs	r0, r4
 8021b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021b12:	46c0      	nop			@ (mov r8, r8)
 8021b14:	08025db9 	.word	0x08025db9
 8021b18:	08025e2a 	.word	0x08025e2a

08021b1c <__s2b>:
 8021b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021b1e:	0007      	movs	r7, r0
 8021b20:	0018      	movs	r0, r3
 8021b22:	000c      	movs	r4, r1
 8021b24:	3008      	adds	r0, #8
 8021b26:	2109      	movs	r1, #9
 8021b28:	9301      	str	r3, [sp, #4]
 8021b2a:	0015      	movs	r5, r2
 8021b2c:	f7de fbc4 	bl	80002b8 <__divsi3>
 8021b30:	2301      	movs	r3, #1
 8021b32:	2100      	movs	r1, #0
 8021b34:	4283      	cmp	r3, r0
 8021b36:	db0a      	blt.n	8021b4e <__s2b+0x32>
 8021b38:	0038      	movs	r0, r7
 8021b3a:	f7ff ff43 	bl	80219c4 <_Balloc>
 8021b3e:	1e01      	subs	r1, r0, #0
 8021b40:	d108      	bne.n	8021b54 <__s2b+0x38>
 8021b42:	000a      	movs	r2, r1
 8021b44:	4b19      	ldr	r3, [pc, #100]	@ (8021bac <__s2b+0x90>)
 8021b46:	481a      	ldr	r0, [pc, #104]	@ (8021bb0 <__s2b+0x94>)
 8021b48:	31d3      	adds	r1, #211	@ 0xd3
 8021b4a:	f001 f81b 	bl	8022b84 <__assert_func>
 8021b4e:	005b      	lsls	r3, r3, #1
 8021b50:	3101      	adds	r1, #1
 8021b52:	e7ef      	b.n	8021b34 <__s2b+0x18>
 8021b54:	9b08      	ldr	r3, [sp, #32]
 8021b56:	6143      	str	r3, [r0, #20]
 8021b58:	2301      	movs	r3, #1
 8021b5a:	6103      	str	r3, [r0, #16]
 8021b5c:	2d09      	cmp	r5, #9
 8021b5e:	dd18      	ble.n	8021b92 <__s2b+0x76>
 8021b60:	0023      	movs	r3, r4
 8021b62:	3309      	adds	r3, #9
 8021b64:	001e      	movs	r6, r3
 8021b66:	9300      	str	r3, [sp, #0]
 8021b68:	1964      	adds	r4, r4, r5
 8021b6a:	7833      	ldrb	r3, [r6, #0]
 8021b6c:	220a      	movs	r2, #10
 8021b6e:	0038      	movs	r0, r7
 8021b70:	3b30      	subs	r3, #48	@ 0x30
 8021b72:	f7ff ff8f 	bl	8021a94 <__multadd>
 8021b76:	3601      	adds	r6, #1
 8021b78:	0001      	movs	r1, r0
 8021b7a:	42a6      	cmp	r6, r4
 8021b7c:	d1f5      	bne.n	8021b6a <__s2b+0x4e>
 8021b7e:	002c      	movs	r4, r5
 8021b80:	9b00      	ldr	r3, [sp, #0]
 8021b82:	3c08      	subs	r4, #8
 8021b84:	191c      	adds	r4, r3, r4
 8021b86:	002e      	movs	r6, r5
 8021b88:	9b01      	ldr	r3, [sp, #4]
 8021b8a:	429e      	cmp	r6, r3
 8021b8c:	db04      	blt.n	8021b98 <__s2b+0x7c>
 8021b8e:	0008      	movs	r0, r1
 8021b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021b92:	2509      	movs	r5, #9
 8021b94:	340a      	adds	r4, #10
 8021b96:	e7f6      	b.n	8021b86 <__s2b+0x6a>
 8021b98:	1b63      	subs	r3, r4, r5
 8021b9a:	5d9b      	ldrb	r3, [r3, r6]
 8021b9c:	220a      	movs	r2, #10
 8021b9e:	0038      	movs	r0, r7
 8021ba0:	3b30      	subs	r3, #48	@ 0x30
 8021ba2:	f7ff ff77 	bl	8021a94 <__multadd>
 8021ba6:	3601      	adds	r6, #1
 8021ba8:	0001      	movs	r1, r0
 8021baa:	e7ed      	b.n	8021b88 <__s2b+0x6c>
 8021bac:	08025db9 	.word	0x08025db9
 8021bb0:	08025e2a 	.word	0x08025e2a

08021bb4 <__hi0bits>:
 8021bb4:	2280      	movs	r2, #128	@ 0x80
 8021bb6:	0003      	movs	r3, r0
 8021bb8:	0252      	lsls	r2, r2, #9
 8021bba:	2000      	movs	r0, #0
 8021bbc:	4293      	cmp	r3, r2
 8021bbe:	d201      	bcs.n	8021bc4 <__hi0bits+0x10>
 8021bc0:	041b      	lsls	r3, r3, #16
 8021bc2:	3010      	adds	r0, #16
 8021bc4:	2280      	movs	r2, #128	@ 0x80
 8021bc6:	0452      	lsls	r2, r2, #17
 8021bc8:	4293      	cmp	r3, r2
 8021bca:	d201      	bcs.n	8021bd0 <__hi0bits+0x1c>
 8021bcc:	3008      	adds	r0, #8
 8021bce:	021b      	lsls	r3, r3, #8
 8021bd0:	2280      	movs	r2, #128	@ 0x80
 8021bd2:	0552      	lsls	r2, r2, #21
 8021bd4:	4293      	cmp	r3, r2
 8021bd6:	d201      	bcs.n	8021bdc <__hi0bits+0x28>
 8021bd8:	3004      	adds	r0, #4
 8021bda:	011b      	lsls	r3, r3, #4
 8021bdc:	2280      	movs	r2, #128	@ 0x80
 8021bde:	05d2      	lsls	r2, r2, #23
 8021be0:	4293      	cmp	r3, r2
 8021be2:	d201      	bcs.n	8021be8 <__hi0bits+0x34>
 8021be4:	3002      	adds	r0, #2
 8021be6:	009b      	lsls	r3, r3, #2
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	db03      	blt.n	8021bf4 <__hi0bits+0x40>
 8021bec:	3001      	adds	r0, #1
 8021bee:	4213      	tst	r3, r2
 8021bf0:	d100      	bne.n	8021bf4 <__hi0bits+0x40>
 8021bf2:	2020      	movs	r0, #32
 8021bf4:	4770      	bx	lr

08021bf6 <__lo0bits>:
 8021bf6:	6803      	ldr	r3, [r0, #0]
 8021bf8:	0001      	movs	r1, r0
 8021bfa:	2207      	movs	r2, #7
 8021bfc:	0018      	movs	r0, r3
 8021bfe:	4010      	ands	r0, r2
 8021c00:	4213      	tst	r3, r2
 8021c02:	d00d      	beq.n	8021c20 <__lo0bits+0x2a>
 8021c04:	3a06      	subs	r2, #6
 8021c06:	2000      	movs	r0, #0
 8021c08:	4213      	tst	r3, r2
 8021c0a:	d105      	bne.n	8021c18 <__lo0bits+0x22>
 8021c0c:	3002      	adds	r0, #2
 8021c0e:	4203      	tst	r3, r0
 8021c10:	d003      	beq.n	8021c1a <__lo0bits+0x24>
 8021c12:	40d3      	lsrs	r3, r2
 8021c14:	0010      	movs	r0, r2
 8021c16:	600b      	str	r3, [r1, #0]
 8021c18:	4770      	bx	lr
 8021c1a:	089b      	lsrs	r3, r3, #2
 8021c1c:	600b      	str	r3, [r1, #0]
 8021c1e:	e7fb      	b.n	8021c18 <__lo0bits+0x22>
 8021c20:	b29a      	uxth	r2, r3
 8021c22:	2a00      	cmp	r2, #0
 8021c24:	d101      	bne.n	8021c2a <__lo0bits+0x34>
 8021c26:	2010      	movs	r0, #16
 8021c28:	0c1b      	lsrs	r3, r3, #16
 8021c2a:	b2da      	uxtb	r2, r3
 8021c2c:	2a00      	cmp	r2, #0
 8021c2e:	d101      	bne.n	8021c34 <__lo0bits+0x3e>
 8021c30:	3008      	adds	r0, #8
 8021c32:	0a1b      	lsrs	r3, r3, #8
 8021c34:	071a      	lsls	r2, r3, #28
 8021c36:	d101      	bne.n	8021c3c <__lo0bits+0x46>
 8021c38:	3004      	adds	r0, #4
 8021c3a:	091b      	lsrs	r3, r3, #4
 8021c3c:	079a      	lsls	r2, r3, #30
 8021c3e:	d101      	bne.n	8021c44 <__lo0bits+0x4e>
 8021c40:	3002      	adds	r0, #2
 8021c42:	089b      	lsrs	r3, r3, #2
 8021c44:	07da      	lsls	r2, r3, #31
 8021c46:	d4e9      	bmi.n	8021c1c <__lo0bits+0x26>
 8021c48:	3001      	adds	r0, #1
 8021c4a:	085b      	lsrs	r3, r3, #1
 8021c4c:	d1e6      	bne.n	8021c1c <__lo0bits+0x26>
 8021c4e:	2020      	movs	r0, #32
 8021c50:	e7e2      	b.n	8021c18 <__lo0bits+0x22>
	...

08021c54 <__i2b>:
 8021c54:	b510      	push	{r4, lr}
 8021c56:	000c      	movs	r4, r1
 8021c58:	2101      	movs	r1, #1
 8021c5a:	f7ff feb3 	bl	80219c4 <_Balloc>
 8021c5e:	2800      	cmp	r0, #0
 8021c60:	d107      	bne.n	8021c72 <__i2b+0x1e>
 8021c62:	2146      	movs	r1, #70	@ 0x46
 8021c64:	4c05      	ldr	r4, [pc, #20]	@ (8021c7c <__i2b+0x28>)
 8021c66:	0002      	movs	r2, r0
 8021c68:	4b05      	ldr	r3, [pc, #20]	@ (8021c80 <__i2b+0x2c>)
 8021c6a:	0020      	movs	r0, r4
 8021c6c:	31ff      	adds	r1, #255	@ 0xff
 8021c6e:	f000 ff89 	bl	8022b84 <__assert_func>
 8021c72:	2301      	movs	r3, #1
 8021c74:	6144      	str	r4, [r0, #20]
 8021c76:	6103      	str	r3, [r0, #16]
 8021c78:	bd10      	pop	{r4, pc}
 8021c7a:	46c0      	nop			@ (mov r8, r8)
 8021c7c:	08025e2a 	.word	0x08025e2a
 8021c80:	08025db9 	.word	0x08025db9

08021c84 <__multiply>:
 8021c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c86:	0014      	movs	r4, r2
 8021c88:	690a      	ldr	r2, [r1, #16]
 8021c8a:	6923      	ldr	r3, [r4, #16]
 8021c8c:	000d      	movs	r5, r1
 8021c8e:	b08b      	sub	sp, #44	@ 0x2c
 8021c90:	429a      	cmp	r2, r3
 8021c92:	db02      	blt.n	8021c9a <__multiply+0x16>
 8021c94:	0023      	movs	r3, r4
 8021c96:	000c      	movs	r4, r1
 8021c98:	001d      	movs	r5, r3
 8021c9a:	6927      	ldr	r7, [r4, #16]
 8021c9c:	692e      	ldr	r6, [r5, #16]
 8021c9e:	6861      	ldr	r1, [r4, #4]
 8021ca0:	19bb      	adds	r3, r7, r6
 8021ca2:	9303      	str	r3, [sp, #12]
 8021ca4:	68a3      	ldr	r3, [r4, #8]
 8021ca6:	19ba      	adds	r2, r7, r6
 8021ca8:	4293      	cmp	r3, r2
 8021caa:	da00      	bge.n	8021cae <__multiply+0x2a>
 8021cac:	3101      	adds	r1, #1
 8021cae:	f7ff fe89 	bl	80219c4 <_Balloc>
 8021cb2:	9002      	str	r0, [sp, #8]
 8021cb4:	2800      	cmp	r0, #0
 8021cb6:	d106      	bne.n	8021cc6 <__multiply+0x42>
 8021cb8:	21b1      	movs	r1, #177	@ 0xb1
 8021cba:	4b49      	ldr	r3, [pc, #292]	@ (8021de0 <__multiply+0x15c>)
 8021cbc:	4849      	ldr	r0, [pc, #292]	@ (8021de4 <__multiply+0x160>)
 8021cbe:	9a02      	ldr	r2, [sp, #8]
 8021cc0:	0049      	lsls	r1, r1, #1
 8021cc2:	f000 ff5f 	bl	8022b84 <__assert_func>
 8021cc6:	9b02      	ldr	r3, [sp, #8]
 8021cc8:	2200      	movs	r2, #0
 8021cca:	3314      	adds	r3, #20
 8021ccc:	469c      	mov	ip, r3
 8021cce:	19bb      	adds	r3, r7, r6
 8021cd0:	009b      	lsls	r3, r3, #2
 8021cd2:	4463      	add	r3, ip
 8021cd4:	9304      	str	r3, [sp, #16]
 8021cd6:	4663      	mov	r3, ip
 8021cd8:	9904      	ldr	r1, [sp, #16]
 8021cda:	428b      	cmp	r3, r1
 8021cdc:	d32a      	bcc.n	8021d34 <__multiply+0xb0>
 8021cde:	0023      	movs	r3, r4
 8021ce0:	00bf      	lsls	r7, r7, #2
 8021ce2:	3314      	adds	r3, #20
 8021ce4:	3514      	adds	r5, #20
 8021ce6:	9308      	str	r3, [sp, #32]
 8021ce8:	00b6      	lsls	r6, r6, #2
 8021cea:	19db      	adds	r3, r3, r7
 8021cec:	9305      	str	r3, [sp, #20]
 8021cee:	19ab      	adds	r3, r5, r6
 8021cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8021cf2:	2304      	movs	r3, #4
 8021cf4:	9306      	str	r3, [sp, #24]
 8021cf6:	0023      	movs	r3, r4
 8021cf8:	9a05      	ldr	r2, [sp, #20]
 8021cfa:	3315      	adds	r3, #21
 8021cfc:	9501      	str	r5, [sp, #4]
 8021cfe:	429a      	cmp	r2, r3
 8021d00:	d305      	bcc.n	8021d0e <__multiply+0x8a>
 8021d02:	1b13      	subs	r3, r2, r4
 8021d04:	3b15      	subs	r3, #21
 8021d06:	089b      	lsrs	r3, r3, #2
 8021d08:	3301      	adds	r3, #1
 8021d0a:	009b      	lsls	r3, r3, #2
 8021d0c:	9306      	str	r3, [sp, #24]
 8021d0e:	9b01      	ldr	r3, [sp, #4]
 8021d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d12:	4293      	cmp	r3, r2
 8021d14:	d310      	bcc.n	8021d38 <__multiply+0xb4>
 8021d16:	9b03      	ldr	r3, [sp, #12]
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	dd05      	ble.n	8021d28 <__multiply+0xa4>
 8021d1c:	9b04      	ldr	r3, [sp, #16]
 8021d1e:	3b04      	subs	r3, #4
 8021d20:	9304      	str	r3, [sp, #16]
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d056      	beq.n	8021dd6 <__multiply+0x152>
 8021d28:	9b02      	ldr	r3, [sp, #8]
 8021d2a:	9a03      	ldr	r2, [sp, #12]
 8021d2c:	0018      	movs	r0, r3
 8021d2e:	611a      	str	r2, [r3, #16]
 8021d30:	b00b      	add	sp, #44	@ 0x2c
 8021d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d34:	c304      	stmia	r3!, {r2}
 8021d36:	e7cf      	b.n	8021cd8 <__multiply+0x54>
 8021d38:	9b01      	ldr	r3, [sp, #4]
 8021d3a:	6818      	ldr	r0, [r3, #0]
 8021d3c:	b280      	uxth	r0, r0
 8021d3e:	2800      	cmp	r0, #0
 8021d40:	d01e      	beq.n	8021d80 <__multiply+0xfc>
 8021d42:	4667      	mov	r7, ip
 8021d44:	2500      	movs	r5, #0
 8021d46:	9e08      	ldr	r6, [sp, #32]
 8021d48:	ce02      	ldmia	r6!, {r1}
 8021d4a:	683b      	ldr	r3, [r7, #0]
 8021d4c:	9307      	str	r3, [sp, #28]
 8021d4e:	b28b      	uxth	r3, r1
 8021d50:	4343      	muls	r3, r0
 8021d52:	001a      	movs	r2, r3
 8021d54:	466b      	mov	r3, sp
 8021d56:	0c09      	lsrs	r1, r1, #16
 8021d58:	8b9b      	ldrh	r3, [r3, #28]
 8021d5a:	4341      	muls	r1, r0
 8021d5c:	18d3      	adds	r3, r2, r3
 8021d5e:	9a07      	ldr	r2, [sp, #28]
 8021d60:	195b      	adds	r3, r3, r5
 8021d62:	0c12      	lsrs	r2, r2, #16
 8021d64:	1889      	adds	r1, r1, r2
 8021d66:	0c1a      	lsrs	r2, r3, #16
 8021d68:	188a      	adds	r2, r1, r2
 8021d6a:	b29b      	uxth	r3, r3
 8021d6c:	0c15      	lsrs	r5, r2, #16
 8021d6e:	0412      	lsls	r2, r2, #16
 8021d70:	431a      	orrs	r2, r3
 8021d72:	9b05      	ldr	r3, [sp, #20]
 8021d74:	c704      	stmia	r7!, {r2}
 8021d76:	42b3      	cmp	r3, r6
 8021d78:	d8e6      	bhi.n	8021d48 <__multiply+0xc4>
 8021d7a:	4663      	mov	r3, ip
 8021d7c:	9a06      	ldr	r2, [sp, #24]
 8021d7e:	509d      	str	r5, [r3, r2]
 8021d80:	9b01      	ldr	r3, [sp, #4]
 8021d82:	6818      	ldr	r0, [r3, #0]
 8021d84:	0c00      	lsrs	r0, r0, #16
 8021d86:	d020      	beq.n	8021dca <__multiply+0x146>
 8021d88:	4663      	mov	r3, ip
 8021d8a:	0025      	movs	r5, r4
 8021d8c:	4661      	mov	r1, ip
 8021d8e:	2700      	movs	r7, #0
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	3514      	adds	r5, #20
 8021d94:	682a      	ldr	r2, [r5, #0]
 8021d96:	680e      	ldr	r6, [r1, #0]
 8021d98:	b292      	uxth	r2, r2
 8021d9a:	4342      	muls	r2, r0
 8021d9c:	0c36      	lsrs	r6, r6, #16
 8021d9e:	1992      	adds	r2, r2, r6
 8021da0:	19d2      	adds	r2, r2, r7
 8021da2:	0416      	lsls	r6, r2, #16
 8021da4:	b29b      	uxth	r3, r3
 8021da6:	431e      	orrs	r6, r3
 8021da8:	600e      	str	r6, [r1, #0]
 8021daa:	cd40      	ldmia	r5!, {r6}
 8021dac:	684b      	ldr	r3, [r1, #4]
 8021dae:	0c36      	lsrs	r6, r6, #16
 8021db0:	4346      	muls	r6, r0
 8021db2:	b29b      	uxth	r3, r3
 8021db4:	0c12      	lsrs	r2, r2, #16
 8021db6:	18f3      	adds	r3, r6, r3
 8021db8:	189b      	adds	r3, r3, r2
 8021dba:	9a05      	ldr	r2, [sp, #20]
 8021dbc:	0c1f      	lsrs	r7, r3, #16
 8021dbe:	3104      	adds	r1, #4
 8021dc0:	42aa      	cmp	r2, r5
 8021dc2:	d8e7      	bhi.n	8021d94 <__multiply+0x110>
 8021dc4:	4662      	mov	r2, ip
 8021dc6:	9906      	ldr	r1, [sp, #24]
 8021dc8:	5053      	str	r3, [r2, r1]
 8021dca:	9b01      	ldr	r3, [sp, #4]
 8021dcc:	3304      	adds	r3, #4
 8021dce:	9301      	str	r3, [sp, #4]
 8021dd0:	2304      	movs	r3, #4
 8021dd2:	449c      	add	ip, r3
 8021dd4:	e79b      	b.n	8021d0e <__multiply+0x8a>
 8021dd6:	9b03      	ldr	r3, [sp, #12]
 8021dd8:	3b01      	subs	r3, #1
 8021dda:	9303      	str	r3, [sp, #12]
 8021ddc:	e79b      	b.n	8021d16 <__multiply+0x92>
 8021dde:	46c0      	nop			@ (mov r8, r8)
 8021de0:	08025db9 	.word	0x08025db9
 8021de4:	08025e2a 	.word	0x08025e2a

08021de8 <__pow5mult>:
 8021de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021dea:	2303      	movs	r3, #3
 8021dec:	0015      	movs	r5, r2
 8021dee:	0007      	movs	r7, r0
 8021df0:	000e      	movs	r6, r1
 8021df2:	401a      	ands	r2, r3
 8021df4:	421d      	tst	r5, r3
 8021df6:	d008      	beq.n	8021e0a <__pow5mult+0x22>
 8021df8:	4925      	ldr	r1, [pc, #148]	@ (8021e90 <__pow5mult+0xa8>)
 8021dfa:	3a01      	subs	r2, #1
 8021dfc:	0092      	lsls	r2, r2, #2
 8021dfe:	5852      	ldr	r2, [r2, r1]
 8021e00:	2300      	movs	r3, #0
 8021e02:	0031      	movs	r1, r6
 8021e04:	f7ff fe46 	bl	8021a94 <__multadd>
 8021e08:	0006      	movs	r6, r0
 8021e0a:	10ad      	asrs	r5, r5, #2
 8021e0c:	d03d      	beq.n	8021e8a <__pow5mult+0xa2>
 8021e0e:	69fc      	ldr	r4, [r7, #28]
 8021e10:	2c00      	cmp	r4, #0
 8021e12:	d10f      	bne.n	8021e34 <__pow5mult+0x4c>
 8021e14:	2010      	movs	r0, #16
 8021e16:	f7ff fd07 	bl	8021828 <malloc>
 8021e1a:	1e02      	subs	r2, r0, #0
 8021e1c:	61f8      	str	r0, [r7, #28]
 8021e1e:	d105      	bne.n	8021e2c <__pow5mult+0x44>
 8021e20:	21b4      	movs	r1, #180	@ 0xb4
 8021e22:	4b1c      	ldr	r3, [pc, #112]	@ (8021e94 <__pow5mult+0xac>)
 8021e24:	481c      	ldr	r0, [pc, #112]	@ (8021e98 <__pow5mult+0xb0>)
 8021e26:	31ff      	adds	r1, #255	@ 0xff
 8021e28:	f000 feac 	bl	8022b84 <__assert_func>
 8021e2c:	6044      	str	r4, [r0, #4]
 8021e2e:	6084      	str	r4, [r0, #8]
 8021e30:	6004      	str	r4, [r0, #0]
 8021e32:	60c4      	str	r4, [r0, #12]
 8021e34:	69fb      	ldr	r3, [r7, #28]
 8021e36:	689c      	ldr	r4, [r3, #8]
 8021e38:	9301      	str	r3, [sp, #4]
 8021e3a:	2c00      	cmp	r4, #0
 8021e3c:	d108      	bne.n	8021e50 <__pow5mult+0x68>
 8021e3e:	0038      	movs	r0, r7
 8021e40:	4916      	ldr	r1, [pc, #88]	@ (8021e9c <__pow5mult+0xb4>)
 8021e42:	f7ff ff07 	bl	8021c54 <__i2b>
 8021e46:	9b01      	ldr	r3, [sp, #4]
 8021e48:	0004      	movs	r4, r0
 8021e4a:	6098      	str	r0, [r3, #8]
 8021e4c:	2300      	movs	r3, #0
 8021e4e:	6003      	str	r3, [r0, #0]
 8021e50:	2301      	movs	r3, #1
 8021e52:	421d      	tst	r5, r3
 8021e54:	d00a      	beq.n	8021e6c <__pow5mult+0x84>
 8021e56:	0031      	movs	r1, r6
 8021e58:	0022      	movs	r2, r4
 8021e5a:	0038      	movs	r0, r7
 8021e5c:	f7ff ff12 	bl	8021c84 <__multiply>
 8021e60:	0031      	movs	r1, r6
 8021e62:	9001      	str	r0, [sp, #4]
 8021e64:	0038      	movs	r0, r7
 8021e66:	f7ff fdf1 	bl	8021a4c <_Bfree>
 8021e6a:	9e01      	ldr	r6, [sp, #4]
 8021e6c:	106d      	asrs	r5, r5, #1
 8021e6e:	d00c      	beq.n	8021e8a <__pow5mult+0xa2>
 8021e70:	6820      	ldr	r0, [r4, #0]
 8021e72:	2800      	cmp	r0, #0
 8021e74:	d107      	bne.n	8021e86 <__pow5mult+0x9e>
 8021e76:	0022      	movs	r2, r4
 8021e78:	0021      	movs	r1, r4
 8021e7a:	0038      	movs	r0, r7
 8021e7c:	f7ff ff02 	bl	8021c84 <__multiply>
 8021e80:	2300      	movs	r3, #0
 8021e82:	6020      	str	r0, [r4, #0]
 8021e84:	6003      	str	r3, [r0, #0]
 8021e86:	0004      	movs	r4, r0
 8021e88:	e7e2      	b.n	8021e50 <__pow5mult+0x68>
 8021e8a:	0030      	movs	r0, r6
 8021e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021e8e:	46c0      	nop			@ (mov r8, r8)
 8021e90:	08025e84 	.word	0x08025e84
 8021e94:	08025d4a 	.word	0x08025d4a
 8021e98:	08025e2a 	.word	0x08025e2a
 8021e9c:	00000271 	.word	0x00000271

08021ea0 <__lshift>:
 8021ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ea2:	000c      	movs	r4, r1
 8021ea4:	0016      	movs	r6, r2
 8021ea6:	6923      	ldr	r3, [r4, #16]
 8021ea8:	1157      	asrs	r7, r2, #5
 8021eaa:	b085      	sub	sp, #20
 8021eac:	18fb      	adds	r3, r7, r3
 8021eae:	9301      	str	r3, [sp, #4]
 8021eb0:	3301      	adds	r3, #1
 8021eb2:	9300      	str	r3, [sp, #0]
 8021eb4:	6849      	ldr	r1, [r1, #4]
 8021eb6:	68a3      	ldr	r3, [r4, #8]
 8021eb8:	9002      	str	r0, [sp, #8]
 8021eba:	9a00      	ldr	r2, [sp, #0]
 8021ebc:	4293      	cmp	r3, r2
 8021ebe:	db10      	blt.n	8021ee2 <__lshift+0x42>
 8021ec0:	9802      	ldr	r0, [sp, #8]
 8021ec2:	f7ff fd7f 	bl	80219c4 <_Balloc>
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	0001      	movs	r1, r0
 8021eca:	0005      	movs	r5, r0
 8021ecc:	001a      	movs	r2, r3
 8021ece:	3114      	adds	r1, #20
 8021ed0:	4298      	cmp	r0, r3
 8021ed2:	d10c      	bne.n	8021eee <__lshift+0x4e>
 8021ed4:	21ef      	movs	r1, #239	@ 0xef
 8021ed6:	002a      	movs	r2, r5
 8021ed8:	4b25      	ldr	r3, [pc, #148]	@ (8021f70 <__lshift+0xd0>)
 8021eda:	4826      	ldr	r0, [pc, #152]	@ (8021f74 <__lshift+0xd4>)
 8021edc:	0049      	lsls	r1, r1, #1
 8021ede:	f000 fe51 	bl	8022b84 <__assert_func>
 8021ee2:	3101      	adds	r1, #1
 8021ee4:	005b      	lsls	r3, r3, #1
 8021ee6:	e7e8      	b.n	8021eba <__lshift+0x1a>
 8021ee8:	0098      	lsls	r0, r3, #2
 8021eea:	500a      	str	r2, [r1, r0]
 8021eec:	3301      	adds	r3, #1
 8021eee:	42bb      	cmp	r3, r7
 8021ef0:	dbfa      	blt.n	8021ee8 <__lshift+0x48>
 8021ef2:	43fb      	mvns	r3, r7
 8021ef4:	17db      	asrs	r3, r3, #31
 8021ef6:	401f      	ands	r7, r3
 8021ef8:	00bf      	lsls	r7, r7, #2
 8021efa:	0023      	movs	r3, r4
 8021efc:	201f      	movs	r0, #31
 8021efe:	19c9      	adds	r1, r1, r7
 8021f00:	0037      	movs	r7, r6
 8021f02:	6922      	ldr	r2, [r4, #16]
 8021f04:	3314      	adds	r3, #20
 8021f06:	0092      	lsls	r2, r2, #2
 8021f08:	189a      	adds	r2, r3, r2
 8021f0a:	4007      	ands	r7, r0
 8021f0c:	4206      	tst	r6, r0
 8021f0e:	d029      	beq.n	8021f64 <__lshift+0xc4>
 8021f10:	3001      	adds	r0, #1
 8021f12:	1bc0      	subs	r0, r0, r7
 8021f14:	9003      	str	r0, [sp, #12]
 8021f16:	468c      	mov	ip, r1
 8021f18:	2000      	movs	r0, #0
 8021f1a:	681e      	ldr	r6, [r3, #0]
 8021f1c:	40be      	lsls	r6, r7
 8021f1e:	4306      	orrs	r6, r0
 8021f20:	4660      	mov	r0, ip
 8021f22:	c040      	stmia	r0!, {r6}
 8021f24:	4684      	mov	ip, r0
 8021f26:	9e03      	ldr	r6, [sp, #12]
 8021f28:	cb01      	ldmia	r3!, {r0}
 8021f2a:	40f0      	lsrs	r0, r6
 8021f2c:	429a      	cmp	r2, r3
 8021f2e:	d8f4      	bhi.n	8021f1a <__lshift+0x7a>
 8021f30:	0026      	movs	r6, r4
 8021f32:	3615      	adds	r6, #21
 8021f34:	2304      	movs	r3, #4
 8021f36:	42b2      	cmp	r2, r6
 8021f38:	d304      	bcc.n	8021f44 <__lshift+0xa4>
 8021f3a:	1b13      	subs	r3, r2, r4
 8021f3c:	3b15      	subs	r3, #21
 8021f3e:	089b      	lsrs	r3, r3, #2
 8021f40:	3301      	adds	r3, #1
 8021f42:	009b      	lsls	r3, r3, #2
 8021f44:	50c8      	str	r0, [r1, r3]
 8021f46:	2800      	cmp	r0, #0
 8021f48:	d002      	beq.n	8021f50 <__lshift+0xb0>
 8021f4a:	9b01      	ldr	r3, [sp, #4]
 8021f4c:	3302      	adds	r3, #2
 8021f4e:	9300      	str	r3, [sp, #0]
 8021f50:	9b00      	ldr	r3, [sp, #0]
 8021f52:	9802      	ldr	r0, [sp, #8]
 8021f54:	3b01      	subs	r3, #1
 8021f56:	0021      	movs	r1, r4
 8021f58:	612b      	str	r3, [r5, #16]
 8021f5a:	f7ff fd77 	bl	8021a4c <_Bfree>
 8021f5e:	0028      	movs	r0, r5
 8021f60:	b005      	add	sp, #20
 8021f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f64:	cb01      	ldmia	r3!, {r0}
 8021f66:	c101      	stmia	r1!, {r0}
 8021f68:	429a      	cmp	r2, r3
 8021f6a:	d8fb      	bhi.n	8021f64 <__lshift+0xc4>
 8021f6c:	e7f0      	b.n	8021f50 <__lshift+0xb0>
 8021f6e:	46c0      	nop			@ (mov r8, r8)
 8021f70:	08025db9 	.word	0x08025db9
 8021f74:	08025e2a 	.word	0x08025e2a

08021f78 <__mcmp>:
 8021f78:	b530      	push	{r4, r5, lr}
 8021f7a:	690b      	ldr	r3, [r1, #16]
 8021f7c:	6904      	ldr	r4, [r0, #16]
 8021f7e:	0002      	movs	r2, r0
 8021f80:	1ae0      	subs	r0, r4, r3
 8021f82:	429c      	cmp	r4, r3
 8021f84:	d10f      	bne.n	8021fa6 <__mcmp+0x2e>
 8021f86:	3214      	adds	r2, #20
 8021f88:	009b      	lsls	r3, r3, #2
 8021f8a:	3114      	adds	r1, #20
 8021f8c:	0014      	movs	r4, r2
 8021f8e:	18c9      	adds	r1, r1, r3
 8021f90:	18d2      	adds	r2, r2, r3
 8021f92:	3a04      	subs	r2, #4
 8021f94:	3904      	subs	r1, #4
 8021f96:	6815      	ldr	r5, [r2, #0]
 8021f98:	680b      	ldr	r3, [r1, #0]
 8021f9a:	429d      	cmp	r5, r3
 8021f9c:	d004      	beq.n	8021fa8 <__mcmp+0x30>
 8021f9e:	2001      	movs	r0, #1
 8021fa0:	429d      	cmp	r5, r3
 8021fa2:	d200      	bcs.n	8021fa6 <__mcmp+0x2e>
 8021fa4:	3802      	subs	r0, #2
 8021fa6:	bd30      	pop	{r4, r5, pc}
 8021fa8:	4294      	cmp	r4, r2
 8021faa:	d3f2      	bcc.n	8021f92 <__mcmp+0x1a>
 8021fac:	e7fb      	b.n	8021fa6 <__mcmp+0x2e>
	...

08021fb0 <__mdiff>:
 8021fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fb2:	000c      	movs	r4, r1
 8021fb4:	b087      	sub	sp, #28
 8021fb6:	9000      	str	r0, [sp, #0]
 8021fb8:	0011      	movs	r1, r2
 8021fba:	0020      	movs	r0, r4
 8021fbc:	0017      	movs	r7, r2
 8021fbe:	f7ff ffdb 	bl	8021f78 <__mcmp>
 8021fc2:	1e05      	subs	r5, r0, #0
 8021fc4:	d110      	bne.n	8021fe8 <__mdiff+0x38>
 8021fc6:	0001      	movs	r1, r0
 8021fc8:	9800      	ldr	r0, [sp, #0]
 8021fca:	f7ff fcfb 	bl	80219c4 <_Balloc>
 8021fce:	1e02      	subs	r2, r0, #0
 8021fd0:	d104      	bne.n	8021fdc <__mdiff+0x2c>
 8021fd2:	4b40      	ldr	r3, [pc, #256]	@ (80220d4 <__mdiff+0x124>)
 8021fd4:	4840      	ldr	r0, [pc, #256]	@ (80220d8 <__mdiff+0x128>)
 8021fd6:	4941      	ldr	r1, [pc, #260]	@ (80220dc <__mdiff+0x12c>)
 8021fd8:	f000 fdd4 	bl	8022b84 <__assert_func>
 8021fdc:	2301      	movs	r3, #1
 8021fde:	6145      	str	r5, [r0, #20]
 8021fe0:	6103      	str	r3, [r0, #16]
 8021fe2:	0010      	movs	r0, r2
 8021fe4:	b007      	add	sp, #28
 8021fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fe8:	2600      	movs	r6, #0
 8021fea:	42b0      	cmp	r0, r6
 8021fec:	da03      	bge.n	8021ff6 <__mdiff+0x46>
 8021fee:	0023      	movs	r3, r4
 8021ff0:	003c      	movs	r4, r7
 8021ff2:	001f      	movs	r7, r3
 8021ff4:	3601      	adds	r6, #1
 8021ff6:	6861      	ldr	r1, [r4, #4]
 8021ff8:	9800      	ldr	r0, [sp, #0]
 8021ffa:	f7ff fce3 	bl	80219c4 <_Balloc>
 8021ffe:	1e02      	subs	r2, r0, #0
 8022000:	d103      	bne.n	802200a <__mdiff+0x5a>
 8022002:	4b34      	ldr	r3, [pc, #208]	@ (80220d4 <__mdiff+0x124>)
 8022004:	4834      	ldr	r0, [pc, #208]	@ (80220d8 <__mdiff+0x128>)
 8022006:	4936      	ldr	r1, [pc, #216]	@ (80220e0 <__mdiff+0x130>)
 8022008:	e7e6      	b.n	8021fd8 <__mdiff+0x28>
 802200a:	6923      	ldr	r3, [r4, #16]
 802200c:	3414      	adds	r4, #20
 802200e:	9300      	str	r3, [sp, #0]
 8022010:	009b      	lsls	r3, r3, #2
 8022012:	18e3      	adds	r3, r4, r3
 8022014:	0021      	movs	r1, r4
 8022016:	9401      	str	r4, [sp, #4]
 8022018:	003c      	movs	r4, r7
 802201a:	9302      	str	r3, [sp, #8]
 802201c:	693b      	ldr	r3, [r7, #16]
 802201e:	3414      	adds	r4, #20
 8022020:	009b      	lsls	r3, r3, #2
 8022022:	18e3      	adds	r3, r4, r3
 8022024:	9303      	str	r3, [sp, #12]
 8022026:	0003      	movs	r3, r0
 8022028:	60c6      	str	r6, [r0, #12]
 802202a:	468c      	mov	ip, r1
 802202c:	2000      	movs	r0, #0
 802202e:	3314      	adds	r3, #20
 8022030:	9304      	str	r3, [sp, #16]
 8022032:	9305      	str	r3, [sp, #20]
 8022034:	4663      	mov	r3, ip
 8022036:	cb20      	ldmia	r3!, {r5}
 8022038:	b2a9      	uxth	r1, r5
 802203a:	000e      	movs	r6, r1
 802203c:	469c      	mov	ip, r3
 802203e:	cc08      	ldmia	r4!, {r3}
 8022040:	0c2d      	lsrs	r5, r5, #16
 8022042:	b299      	uxth	r1, r3
 8022044:	1a71      	subs	r1, r6, r1
 8022046:	1809      	adds	r1, r1, r0
 8022048:	0c1b      	lsrs	r3, r3, #16
 802204a:	1408      	asrs	r0, r1, #16
 802204c:	1aeb      	subs	r3, r5, r3
 802204e:	181b      	adds	r3, r3, r0
 8022050:	1418      	asrs	r0, r3, #16
 8022052:	b289      	uxth	r1, r1
 8022054:	041b      	lsls	r3, r3, #16
 8022056:	4319      	orrs	r1, r3
 8022058:	9b05      	ldr	r3, [sp, #20]
 802205a:	c302      	stmia	r3!, {r1}
 802205c:	9305      	str	r3, [sp, #20]
 802205e:	9b03      	ldr	r3, [sp, #12]
 8022060:	42a3      	cmp	r3, r4
 8022062:	d8e7      	bhi.n	8022034 <__mdiff+0x84>
 8022064:	0039      	movs	r1, r7
 8022066:	9c03      	ldr	r4, [sp, #12]
 8022068:	3115      	adds	r1, #21
 802206a:	2304      	movs	r3, #4
 802206c:	428c      	cmp	r4, r1
 802206e:	d304      	bcc.n	802207a <__mdiff+0xca>
 8022070:	1be3      	subs	r3, r4, r7
 8022072:	3b15      	subs	r3, #21
 8022074:	089b      	lsrs	r3, r3, #2
 8022076:	3301      	adds	r3, #1
 8022078:	009b      	lsls	r3, r3, #2
 802207a:	9901      	ldr	r1, [sp, #4]
 802207c:	18cd      	adds	r5, r1, r3
 802207e:	9904      	ldr	r1, [sp, #16]
 8022080:	002e      	movs	r6, r5
 8022082:	18cb      	adds	r3, r1, r3
 8022084:	001f      	movs	r7, r3
 8022086:	9902      	ldr	r1, [sp, #8]
 8022088:	428e      	cmp	r6, r1
 802208a:	d311      	bcc.n	80220b0 <__mdiff+0x100>
 802208c:	9c02      	ldr	r4, [sp, #8]
 802208e:	1ee9      	subs	r1, r5, #3
 8022090:	2000      	movs	r0, #0
 8022092:	428c      	cmp	r4, r1
 8022094:	d304      	bcc.n	80220a0 <__mdiff+0xf0>
 8022096:	0021      	movs	r1, r4
 8022098:	3103      	adds	r1, #3
 802209a:	1b49      	subs	r1, r1, r5
 802209c:	0889      	lsrs	r1, r1, #2
 802209e:	0088      	lsls	r0, r1, #2
 80220a0:	181b      	adds	r3, r3, r0
 80220a2:	3b04      	subs	r3, #4
 80220a4:	6819      	ldr	r1, [r3, #0]
 80220a6:	2900      	cmp	r1, #0
 80220a8:	d010      	beq.n	80220cc <__mdiff+0x11c>
 80220aa:	9b00      	ldr	r3, [sp, #0]
 80220ac:	6113      	str	r3, [r2, #16]
 80220ae:	e798      	b.n	8021fe2 <__mdiff+0x32>
 80220b0:	4684      	mov	ip, r0
 80220b2:	ce02      	ldmia	r6!, {r1}
 80220b4:	b288      	uxth	r0, r1
 80220b6:	4460      	add	r0, ip
 80220b8:	1400      	asrs	r0, r0, #16
 80220ba:	0c0c      	lsrs	r4, r1, #16
 80220bc:	1904      	adds	r4, r0, r4
 80220be:	4461      	add	r1, ip
 80220c0:	1420      	asrs	r0, r4, #16
 80220c2:	b289      	uxth	r1, r1
 80220c4:	0424      	lsls	r4, r4, #16
 80220c6:	4321      	orrs	r1, r4
 80220c8:	c702      	stmia	r7!, {r1}
 80220ca:	e7dc      	b.n	8022086 <__mdiff+0xd6>
 80220cc:	9900      	ldr	r1, [sp, #0]
 80220ce:	3901      	subs	r1, #1
 80220d0:	9100      	str	r1, [sp, #0]
 80220d2:	e7e6      	b.n	80220a2 <__mdiff+0xf2>
 80220d4:	08025db9 	.word	0x08025db9
 80220d8:	08025e2a 	.word	0x08025e2a
 80220dc:	00000237 	.word	0x00000237
 80220e0:	00000245 	.word	0x00000245

080220e4 <__ulp>:
 80220e4:	b510      	push	{r4, lr}
 80220e6:	2400      	movs	r4, #0
 80220e8:	4b0c      	ldr	r3, [pc, #48]	@ (802211c <__ulp+0x38>)
 80220ea:	4a0d      	ldr	r2, [pc, #52]	@ (8022120 <__ulp+0x3c>)
 80220ec:	400b      	ands	r3, r1
 80220ee:	189b      	adds	r3, r3, r2
 80220f0:	42a3      	cmp	r3, r4
 80220f2:	dc06      	bgt.n	8022102 <__ulp+0x1e>
 80220f4:	425b      	negs	r3, r3
 80220f6:	151a      	asrs	r2, r3, #20
 80220f8:	2a13      	cmp	r2, #19
 80220fa:	dc05      	bgt.n	8022108 <__ulp+0x24>
 80220fc:	2380      	movs	r3, #128	@ 0x80
 80220fe:	031b      	lsls	r3, r3, #12
 8022100:	4113      	asrs	r3, r2
 8022102:	0019      	movs	r1, r3
 8022104:	0020      	movs	r0, r4
 8022106:	bd10      	pop	{r4, pc}
 8022108:	3a14      	subs	r2, #20
 802210a:	2401      	movs	r4, #1
 802210c:	2a1e      	cmp	r2, #30
 802210e:	dc02      	bgt.n	8022116 <__ulp+0x32>
 8022110:	2480      	movs	r4, #128	@ 0x80
 8022112:	0624      	lsls	r4, r4, #24
 8022114:	40d4      	lsrs	r4, r2
 8022116:	2300      	movs	r3, #0
 8022118:	e7f3      	b.n	8022102 <__ulp+0x1e>
 802211a:	46c0      	nop			@ (mov r8, r8)
 802211c:	7ff00000 	.word	0x7ff00000
 8022120:	fcc00000 	.word	0xfcc00000

08022124 <__b2d>:
 8022124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022126:	0006      	movs	r6, r0
 8022128:	6903      	ldr	r3, [r0, #16]
 802212a:	3614      	adds	r6, #20
 802212c:	009b      	lsls	r3, r3, #2
 802212e:	18f3      	adds	r3, r6, r3
 8022130:	1f1d      	subs	r5, r3, #4
 8022132:	682c      	ldr	r4, [r5, #0]
 8022134:	000f      	movs	r7, r1
 8022136:	0020      	movs	r0, r4
 8022138:	9301      	str	r3, [sp, #4]
 802213a:	f7ff fd3b 	bl	8021bb4 <__hi0bits>
 802213e:	2220      	movs	r2, #32
 8022140:	1a12      	subs	r2, r2, r0
 8022142:	603a      	str	r2, [r7, #0]
 8022144:	0003      	movs	r3, r0
 8022146:	4a1c      	ldr	r2, [pc, #112]	@ (80221b8 <__b2d+0x94>)
 8022148:	280a      	cmp	r0, #10
 802214a:	dc15      	bgt.n	8022178 <__b2d+0x54>
 802214c:	210b      	movs	r1, #11
 802214e:	0027      	movs	r7, r4
 8022150:	1a09      	subs	r1, r1, r0
 8022152:	40cf      	lsrs	r7, r1
 8022154:	433a      	orrs	r2, r7
 8022156:	468c      	mov	ip, r1
 8022158:	0011      	movs	r1, r2
 802215a:	2200      	movs	r2, #0
 802215c:	42ae      	cmp	r6, r5
 802215e:	d202      	bcs.n	8022166 <__b2d+0x42>
 8022160:	9a01      	ldr	r2, [sp, #4]
 8022162:	3a08      	subs	r2, #8
 8022164:	6812      	ldr	r2, [r2, #0]
 8022166:	3315      	adds	r3, #21
 8022168:	409c      	lsls	r4, r3
 802216a:	4663      	mov	r3, ip
 802216c:	0027      	movs	r7, r4
 802216e:	40da      	lsrs	r2, r3
 8022170:	4317      	orrs	r7, r2
 8022172:	0038      	movs	r0, r7
 8022174:	b003      	add	sp, #12
 8022176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022178:	2700      	movs	r7, #0
 802217a:	42ae      	cmp	r6, r5
 802217c:	d202      	bcs.n	8022184 <__b2d+0x60>
 802217e:	9d01      	ldr	r5, [sp, #4]
 8022180:	3d08      	subs	r5, #8
 8022182:	682f      	ldr	r7, [r5, #0]
 8022184:	210b      	movs	r1, #11
 8022186:	4249      	negs	r1, r1
 8022188:	468c      	mov	ip, r1
 802218a:	449c      	add	ip, r3
 802218c:	2b0b      	cmp	r3, #11
 802218e:	d010      	beq.n	80221b2 <__b2d+0x8e>
 8022190:	4661      	mov	r1, ip
 8022192:	2320      	movs	r3, #32
 8022194:	408c      	lsls	r4, r1
 8022196:	1a5b      	subs	r3, r3, r1
 8022198:	0039      	movs	r1, r7
 802219a:	40d9      	lsrs	r1, r3
 802219c:	430c      	orrs	r4, r1
 802219e:	4322      	orrs	r2, r4
 80221a0:	0011      	movs	r1, r2
 80221a2:	2200      	movs	r2, #0
 80221a4:	42b5      	cmp	r5, r6
 80221a6:	d901      	bls.n	80221ac <__b2d+0x88>
 80221a8:	3d04      	subs	r5, #4
 80221aa:	682a      	ldr	r2, [r5, #0]
 80221ac:	4664      	mov	r4, ip
 80221ae:	40a7      	lsls	r7, r4
 80221b0:	e7dd      	b.n	802216e <__b2d+0x4a>
 80221b2:	4322      	orrs	r2, r4
 80221b4:	0011      	movs	r1, r2
 80221b6:	e7dc      	b.n	8022172 <__b2d+0x4e>
 80221b8:	3ff00000 	.word	0x3ff00000

080221bc <__d2b>:
 80221bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221be:	2101      	movs	r1, #1
 80221c0:	0016      	movs	r6, r2
 80221c2:	001f      	movs	r7, r3
 80221c4:	f7ff fbfe 	bl	80219c4 <_Balloc>
 80221c8:	1e04      	subs	r4, r0, #0
 80221ca:	d105      	bne.n	80221d8 <__d2b+0x1c>
 80221cc:	0022      	movs	r2, r4
 80221ce:	4b25      	ldr	r3, [pc, #148]	@ (8022264 <__d2b+0xa8>)
 80221d0:	4825      	ldr	r0, [pc, #148]	@ (8022268 <__d2b+0xac>)
 80221d2:	4926      	ldr	r1, [pc, #152]	@ (802226c <__d2b+0xb0>)
 80221d4:	f000 fcd6 	bl	8022b84 <__assert_func>
 80221d8:	033b      	lsls	r3, r7, #12
 80221da:	007d      	lsls	r5, r7, #1
 80221dc:	0b1b      	lsrs	r3, r3, #12
 80221de:	0d6d      	lsrs	r5, r5, #21
 80221e0:	d002      	beq.n	80221e8 <__d2b+0x2c>
 80221e2:	2280      	movs	r2, #128	@ 0x80
 80221e4:	0352      	lsls	r2, r2, #13
 80221e6:	4313      	orrs	r3, r2
 80221e8:	9301      	str	r3, [sp, #4]
 80221ea:	2e00      	cmp	r6, #0
 80221ec:	d025      	beq.n	802223a <__d2b+0x7e>
 80221ee:	4668      	mov	r0, sp
 80221f0:	9600      	str	r6, [sp, #0]
 80221f2:	f7ff fd00 	bl	8021bf6 <__lo0bits>
 80221f6:	9b01      	ldr	r3, [sp, #4]
 80221f8:	9900      	ldr	r1, [sp, #0]
 80221fa:	2800      	cmp	r0, #0
 80221fc:	d01b      	beq.n	8022236 <__d2b+0x7a>
 80221fe:	2220      	movs	r2, #32
 8022200:	001e      	movs	r6, r3
 8022202:	1a12      	subs	r2, r2, r0
 8022204:	4096      	lsls	r6, r2
 8022206:	0032      	movs	r2, r6
 8022208:	40c3      	lsrs	r3, r0
 802220a:	430a      	orrs	r2, r1
 802220c:	6162      	str	r2, [r4, #20]
 802220e:	9301      	str	r3, [sp, #4]
 8022210:	9e01      	ldr	r6, [sp, #4]
 8022212:	61a6      	str	r6, [r4, #24]
 8022214:	1e73      	subs	r3, r6, #1
 8022216:	419e      	sbcs	r6, r3
 8022218:	3601      	adds	r6, #1
 802221a:	6126      	str	r6, [r4, #16]
 802221c:	2d00      	cmp	r5, #0
 802221e:	d014      	beq.n	802224a <__d2b+0x8e>
 8022220:	2635      	movs	r6, #53	@ 0x35
 8022222:	4b13      	ldr	r3, [pc, #76]	@ (8022270 <__d2b+0xb4>)
 8022224:	18ed      	adds	r5, r5, r3
 8022226:	9b08      	ldr	r3, [sp, #32]
 8022228:	182d      	adds	r5, r5, r0
 802222a:	601d      	str	r5, [r3, #0]
 802222c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802222e:	1a36      	subs	r6, r6, r0
 8022230:	601e      	str	r6, [r3, #0]
 8022232:	0020      	movs	r0, r4
 8022234:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022236:	6161      	str	r1, [r4, #20]
 8022238:	e7ea      	b.n	8022210 <__d2b+0x54>
 802223a:	a801      	add	r0, sp, #4
 802223c:	f7ff fcdb 	bl	8021bf6 <__lo0bits>
 8022240:	9b01      	ldr	r3, [sp, #4]
 8022242:	2601      	movs	r6, #1
 8022244:	6163      	str	r3, [r4, #20]
 8022246:	3020      	adds	r0, #32
 8022248:	e7e7      	b.n	802221a <__d2b+0x5e>
 802224a:	4b0a      	ldr	r3, [pc, #40]	@ (8022274 <__d2b+0xb8>)
 802224c:	18c0      	adds	r0, r0, r3
 802224e:	9b08      	ldr	r3, [sp, #32]
 8022250:	6018      	str	r0, [r3, #0]
 8022252:	4b09      	ldr	r3, [pc, #36]	@ (8022278 <__d2b+0xbc>)
 8022254:	18f3      	adds	r3, r6, r3
 8022256:	009b      	lsls	r3, r3, #2
 8022258:	18e3      	adds	r3, r4, r3
 802225a:	6958      	ldr	r0, [r3, #20]
 802225c:	f7ff fcaa 	bl	8021bb4 <__hi0bits>
 8022260:	0176      	lsls	r6, r6, #5
 8022262:	e7e3      	b.n	802222c <__d2b+0x70>
 8022264:	08025db9 	.word	0x08025db9
 8022268:	08025e2a 	.word	0x08025e2a
 802226c:	0000030f 	.word	0x0000030f
 8022270:	fffffbcd 	.word	0xfffffbcd
 8022274:	fffffbce 	.word	0xfffffbce
 8022278:	3fffffff 	.word	0x3fffffff

0802227c <__ratio>:
 802227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802227e:	b087      	sub	sp, #28
 8022280:	000f      	movs	r7, r1
 8022282:	a904      	add	r1, sp, #16
 8022284:	0006      	movs	r6, r0
 8022286:	f7ff ff4d 	bl	8022124 <__b2d>
 802228a:	9000      	str	r0, [sp, #0]
 802228c:	9101      	str	r1, [sp, #4]
 802228e:	9b00      	ldr	r3, [sp, #0]
 8022290:	9c01      	ldr	r4, [sp, #4]
 8022292:	0038      	movs	r0, r7
 8022294:	a905      	add	r1, sp, #20
 8022296:	9302      	str	r3, [sp, #8]
 8022298:	9403      	str	r4, [sp, #12]
 802229a:	f7ff ff43 	bl	8022124 <__b2d>
 802229e:	000d      	movs	r5, r1
 80222a0:	0002      	movs	r2, r0
 80222a2:	000b      	movs	r3, r1
 80222a4:	6930      	ldr	r0, [r6, #16]
 80222a6:	6939      	ldr	r1, [r7, #16]
 80222a8:	9e04      	ldr	r6, [sp, #16]
 80222aa:	1a40      	subs	r0, r0, r1
 80222ac:	9905      	ldr	r1, [sp, #20]
 80222ae:	0140      	lsls	r0, r0, #5
 80222b0:	1a71      	subs	r1, r6, r1
 80222b2:	1841      	adds	r1, r0, r1
 80222b4:	0508      	lsls	r0, r1, #20
 80222b6:	2900      	cmp	r1, #0
 80222b8:	dd08      	ble.n	80222cc <__ratio+0x50>
 80222ba:	9901      	ldr	r1, [sp, #4]
 80222bc:	1841      	adds	r1, r0, r1
 80222be:	9103      	str	r1, [sp, #12]
 80222c0:	9802      	ldr	r0, [sp, #8]
 80222c2:	9903      	ldr	r1, [sp, #12]
 80222c4:	f7df fd76 	bl	8001db4 <__aeabi_ddiv>
 80222c8:	b007      	add	sp, #28
 80222ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222cc:	1a2b      	subs	r3, r5, r0
 80222ce:	e7f7      	b.n	80222c0 <__ratio+0x44>

080222d0 <__copybits>:
 80222d0:	b570      	push	{r4, r5, r6, lr}
 80222d2:	0014      	movs	r4, r2
 80222d4:	0005      	movs	r5, r0
 80222d6:	3901      	subs	r1, #1
 80222d8:	6913      	ldr	r3, [r2, #16]
 80222da:	1149      	asrs	r1, r1, #5
 80222dc:	3101      	adds	r1, #1
 80222de:	0089      	lsls	r1, r1, #2
 80222e0:	3414      	adds	r4, #20
 80222e2:	009b      	lsls	r3, r3, #2
 80222e4:	1841      	adds	r1, r0, r1
 80222e6:	18e3      	adds	r3, r4, r3
 80222e8:	42a3      	cmp	r3, r4
 80222ea:	d80d      	bhi.n	8022308 <__copybits+0x38>
 80222ec:	0014      	movs	r4, r2
 80222ee:	3411      	adds	r4, #17
 80222f0:	2500      	movs	r5, #0
 80222f2:	429c      	cmp	r4, r3
 80222f4:	d803      	bhi.n	80222fe <__copybits+0x2e>
 80222f6:	1a9b      	subs	r3, r3, r2
 80222f8:	3b11      	subs	r3, #17
 80222fa:	089b      	lsrs	r3, r3, #2
 80222fc:	009d      	lsls	r5, r3, #2
 80222fe:	2300      	movs	r3, #0
 8022300:	1940      	adds	r0, r0, r5
 8022302:	4281      	cmp	r1, r0
 8022304:	d803      	bhi.n	802230e <__copybits+0x3e>
 8022306:	bd70      	pop	{r4, r5, r6, pc}
 8022308:	cc40      	ldmia	r4!, {r6}
 802230a:	c540      	stmia	r5!, {r6}
 802230c:	e7ec      	b.n	80222e8 <__copybits+0x18>
 802230e:	c008      	stmia	r0!, {r3}
 8022310:	e7f7      	b.n	8022302 <__copybits+0x32>

08022312 <__any_on>:
 8022312:	0002      	movs	r2, r0
 8022314:	6900      	ldr	r0, [r0, #16]
 8022316:	b510      	push	{r4, lr}
 8022318:	3214      	adds	r2, #20
 802231a:	114b      	asrs	r3, r1, #5
 802231c:	4298      	cmp	r0, r3
 802231e:	db13      	blt.n	8022348 <__any_on+0x36>
 8022320:	dd0c      	ble.n	802233c <__any_on+0x2a>
 8022322:	241f      	movs	r4, #31
 8022324:	0008      	movs	r0, r1
 8022326:	4020      	ands	r0, r4
 8022328:	4221      	tst	r1, r4
 802232a:	d007      	beq.n	802233c <__any_on+0x2a>
 802232c:	0099      	lsls	r1, r3, #2
 802232e:	588c      	ldr	r4, [r1, r2]
 8022330:	0021      	movs	r1, r4
 8022332:	40c1      	lsrs	r1, r0
 8022334:	4081      	lsls	r1, r0
 8022336:	2001      	movs	r0, #1
 8022338:	428c      	cmp	r4, r1
 802233a:	d104      	bne.n	8022346 <__any_on+0x34>
 802233c:	009b      	lsls	r3, r3, #2
 802233e:	18d3      	adds	r3, r2, r3
 8022340:	4293      	cmp	r3, r2
 8022342:	d803      	bhi.n	802234c <__any_on+0x3a>
 8022344:	2000      	movs	r0, #0
 8022346:	bd10      	pop	{r4, pc}
 8022348:	0003      	movs	r3, r0
 802234a:	e7f7      	b.n	802233c <__any_on+0x2a>
 802234c:	3b04      	subs	r3, #4
 802234e:	6819      	ldr	r1, [r3, #0]
 8022350:	2900      	cmp	r1, #0
 8022352:	d0f5      	beq.n	8022340 <__any_on+0x2e>
 8022354:	2001      	movs	r0, #1
 8022356:	e7f6      	b.n	8022346 <__any_on+0x34>

08022358 <__ascii_wctomb>:
 8022358:	0003      	movs	r3, r0
 802235a:	1e08      	subs	r0, r1, #0
 802235c:	d005      	beq.n	802236a <__ascii_wctomb+0x12>
 802235e:	2aff      	cmp	r2, #255	@ 0xff
 8022360:	d904      	bls.n	802236c <__ascii_wctomb+0x14>
 8022362:	228a      	movs	r2, #138	@ 0x8a
 8022364:	2001      	movs	r0, #1
 8022366:	601a      	str	r2, [r3, #0]
 8022368:	4240      	negs	r0, r0
 802236a:	4770      	bx	lr
 802236c:	2001      	movs	r0, #1
 802236e:	700a      	strb	r2, [r1, #0]
 8022370:	e7fb      	b.n	802236a <__ascii_wctomb+0x12>
	...

08022374 <__ssputs_r>:
 8022374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022376:	688e      	ldr	r6, [r1, #8]
 8022378:	b085      	sub	sp, #20
 802237a:	001f      	movs	r7, r3
 802237c:	000c      	movs	r4, r1
 802237e:	680b      	ldr	r3, [r1, #0]
 8022380:	9002      	str	r0, [sp, #8]
 8022382:	9203      	str	r2, [sp, #12]
 8022384:	42be      	cmp	r6, r7
 8022386:	d830      	bhi.n	80223ea <__ssputs_r+0x76>
 8022388:	210c      	movs	r1, #12
 802238a:	5e62      	ldrsh	r2, [r4, r1]
 802238c:	2190      	movs	r1, #144	@ 0x90
 802238e:	00c9      	lsls	r1, r1, #3
 8022390:	420a      	tst	r2, r1
 8022392:	d028      	beq.n	80223e6 <__ssputs_r+0x72>
 8022394:	2003      	movs	r0, #3
 8022396:	6921      	ldr	r1, [r4, #16]
 8022398:	1a5b      	subs	r3, r3, r1
 802239a:	9301      	str	r3, [sp, #4]
 802239c:	6963      	ldr	r3, [r4, #20]
 802239e:	4343      	muls	r3, r0
 80223a0:	9801      	ldr	r0, [sp, #4]
 80223a2:	0fdd      	lsrs	r5, r3, #31
 80223a4:	18ed      	adds	r5, r5, r3
 80223a6:	1c7b      	adds	r3, r7, #1
 80223a8:	181b      	adds	r3, r3, r0
 80223aa:	106d      	asrs	r5, r5, #1
 80223ac:	42ab      	cmp	r3, r5
 80223ae:	d900      	bls.n	80223b2 <__ssputs_r+0x3e>
 80223b0:	001d      	movs	r5, r3
 80223b2:	0552      	lsls	r2, r2, #21
 80223b4:	d528      	bpl.n	8022408 <__ssputs_r+0x94>
 80223b6:	0029      	movs	r1, r5
 80223b8:	9802      	ldr	r0, [sp, #8]
 80223ba:	f7ff fa61 	bl	8021880 <_malloc_r>
 80223be:	1e06      	subs	r6, r0, #0
 80223c0:	d02c      	beq.n	802241c <__ssputs_r+0xa8>
 80223c2:	9a01      	ldr	r2, [sp, #4]
 80223c4:	6921      	ldr	r1, [r4, #16]
 80223c6:	f7fd fff9 	bl	80203bc <memcpy>
 80223ca:	89a2      	ldrh	r2, [r4, #12]
 80223cc:	4b18      	ldr	r3, [pc, #96]	@ (8022430 <__ssputs_r+0xbc>)
 80223ce:	401a      	ands	r2, r3
 80223d0:	2380      	movs	r3, #128	@ 0x80
 80223d2:	4313      	orrs	r3, r2
 80223d4:	81a3      	strh	r3, [r4, #12]
 80223d6:	9b01      	ldr	r3, [sp, #4]
 80223d8:	6126      	str	r6, [r4, #16]
 80223da:	18f6      	adds	r6, r6, r3
 80223dc:	6026      	str	r6, [r4, #0]
 80223de:	003e      	movs	r6, r7
 80223e0:	6165      	str	r5, [r4, #20]
 80223e2:	1aed      	subs	r5, r5, r3
 80223e4:	60a5      	str	r5, [r4, #8]
 80223e6:	42be      	cmp	r6, r7
 80223e8:	d900      	bls.n	80223ec <__ssputs_r+0x78>
 80223ea:	003e      	movs	r6, r7
 80223ec:	0032      	movs	r2, r6
 80223ee:	9903      	ldr	r1, [sp, #12]
 80223f0:	6820      	ldr	r0, [r4, #0]
 80223f2:	f000 fb7e 	bl	8022af2 <memmove>
 80223f6:	2000      	movs	r0, #0
 80223f8:	68a3      	ldr	r3, [r4, #8]
 80223fa:	1b9b      	subs	r3, r3, r6
 80223fc:	60a3      	str	r3, [r4, #8]
 80223fe:	6823      	ldr	r3, [r4, #0]
 8022400:	199b      	adds	r3, r3, r6
 8022402:	6023      	str	r3, [r4, #0]
 8022404:	b005      	add	sp, #20
 8022406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022408:	002a      	movs	r2, r5
 802240a:	9802      	ldr	r0, [sp, #8]
 802240c:	f000 fc05 	bl	8022c1a <_realloc_r>
 8022410:	1e06      	subs	r6, r0, #0
 8022412:	d1e0      	bne.n	80223d6 <__ssputs_r+0x62>
 8022414:	6921      	ldr	r1, [r4, #16]
 8022416:	9802      	ldr	r0, [sp, #8]
 8022418:	f7fe fe62 	bl	80210e0 <_free_r>
 802241c:	230c      	movs	r3, #12
 802241e:	2001      	movs	r0, #1
 8022420:	9a02      	ldr	r2, [sp, #8]
 8022422:	4240      	negs	r0, r0
 8022424:	6013      	str	r3, [r2, #0]
 8022426:	89a2      	ldrh	r2, [r4, #12]
 8022428:	3334      	adds	r3, #52	@ 0x34
 802242a:	4313      	orrs	r3, r2
 802242c:	81a3      	strh	r3, [r4, #12]
 802242e:	e7e9      	b.n	8022404 <__ssputs_r+0x90>
 8022430:	fffffb7f 	.word	0xfffffb7f

08022434 <_svfiprintf_r>:
 8022434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022436:	b0a1      	sub	sp, #132	@ 0x84
 8022438:	9003      	str	r0, [sp, #12]
 802243a:	001d      	movs	r5, r3
 802243c:	898b      	ldrh	r3, [r1, #12]
 802243e:	000f      	movs	r7, r1
 8022440:	0016      	movs	r6, r2
 8022442:	061b      	lsls	r3, r3, #24
 8022444:	d511      	bpl.n	802246a <_svfiprintf_r+0x36>
 8022446:	690b      	ldr	r3, [r1, #16]
 8022448:	2b00      	cmp	r3, #0
 802244a:	d10e      	bne.n	802246a <_svfiprintf_r+0x36>
 802244c:	2140      	movs	r1, #64	@ 0x40
 802244e:	f7ff fa17 	bl	8021880 <_malloc_r>
 8022452:	6038      	str	r0, [r7, #0]
 8022454:	6138      	str	r0, [r7, #16]
 8022456:	2800      	cmp	r0, #0
 8022458:	d105      	bne.n	8022466 <_svfiprintf_r+0x32>
 802245a:	230c      	movs	r3, #12
 802245c:	9a03      	ldr	r2, [sp, #12]
 802245e:	6013      	str	r3, [r2, #0]
 8022460:	2001      	movs	r0, #1
 8022462:	4240      	negs	r0, r0
 8022464:	e0cf      	b.n	8022606 <_svfiprintf_r+0x1d2>
 8022466:	2340      	movs	r3, #64	@ 0x40
 8022468:	617b      	str	r3, [r7, #20]
 802246a:	2300      	movs	r3, #0
 802246c:	ac08      	add	r4, sp, #32
 802246e:	6163      	str	r3, [r4, #20]
 8022470:	3320      	adds	r3, #32
 8022472:	7663      	strb	r3, [r4, #25]
 8022474:	3310      	adds	r3, #16
 8022476:	76a3      	strb	r3, [r4, #26]
 8022478:	9507      	str	r5, [sp, #28]
 802247a:	0035      	movs	r5, r6
 802247c:	782b      	ldrb	r3, [r5, #0]
 802247e:	2b00      	cmp	r3, #0
 8022480:	d001      	beq.n	8022486 <_svfiprintf_r+0x52>
 8022482:	2b25      	cmp	r3, #37	@ 0x25
 8022484:	d148      	bne.n	8022518 <_svfiprintf_r+0xe4>
 8022486:	1bab      	subs	r3, r5, r6
 8022488:	9305      	str	r3, [sp, #20]
 802248a:	42b5      	cmp	r5, r6
 802248c:	d00b      	beq.n	80224a6 <_svfiprintf_r+0x72>
 802248e:	0032      	movs	r2, r6
 8022490:	0039      	movs	r1, r7
 8022492:	9803      	ldr	r0, [sp, #12]
 8022494:	f7ff ff6e 	bl	8022374 <__ssputs_r>
 8022498:	3001      	adds	r0, #1
 802249a:	d100      	bne.n	802249e <_svfiprintf_r+0x6a>
 802249c:	e0ae      	b.n	80225fc <_svfiprintf_r+0x1c8>
 802249e:	6963      	ldr	r3, [r4, #20]
 80224a0:	9a05      	ldr	r2, [sp, #20]
 80224a2:	189b      	adds	r3, r3, r2
 80224a4:	6163      	str	r3, [r4, #20]
 80224a6:	782b      	ldrb	r3, [r5, #0]
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d100      	bne.n	80224ae <_svfiprintf_r+0x7a>
 80224ac:	e0a6      	b.n	80225fc <_svfiprintf_r+0x1c8>
 80224ae:	2201      	movs	r2, #1
 80224b0:	2300      	movs	r3, #0
 80224b2:	4252      	negs	r2, r2
 80224b4:	6062      	str	r2, [r4, #4]
 80224b6:	a904      	add	r1, sp, #16
 80224b8:	3254      	adds	r2, #84	@ 0x54
 80224ba:	1852      	adds	r2, r2, r1
 80224bc:	1c6e      	adds	r6, r5, #1
 80224be:	6023      	str	r3, [r4, #0]
 80224c0:	60e3      	str	r3, [r4, #12]
 80224c2:	60a3      	str	r3, [r4, #8]
 80224c4:	7013      	strb	r3, [r2, #0]
 80224c6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80224c8:	4b54      	ldr	r3, [pc, #336]	@ (802261c <_svfiprintf_r+0x1e8>)
 80224ca:	2205      	movs	r2, #5
 80224cc:	0018      	movs	r0, r3
 80224ce:	7831      	ldrb	r1, [r6, #0]
 80224d0:	9305      	str	r3, [sp, #20]
 80224d2:	f7fd ff68 	bl	80203a6 <memchr>
 80224d6:	1c75      	adds	r5, r6, #1
 80224d8:	2800      	cmp	r0, #0
 80224da:	d11f      	bne.n	802251c <_svfiprintf_r+0xe8>
 80224dc:	6822      	ldr	r2, [r4, #0]
 80224de:	06d3      	lsls	r3, r2, #27
 80224e0:	d504      	bpl.n	80224ec <_svfiprintf_r+0xb8>
 80224e2:	2353      	movs	r3, #83	@ 0x53
 80224e4:	a904      	add	r1, sp, #16
 80224e6:	185b      	adds	r3, r3, r1
 80224e8:	2120      	movs	r1, #32
 80224ea:	7019      	strb	r1, [r3, #0]
 80224ec:	0713      	lsls	r3, r2, #28
 80224ee:	d504      	bpl.n	80224fa <_svfiprintf_r+0xc6>
 80224f0:	2353      	movs	r3, #83	@ 0x53
 80224f2:	a904      	add	r1, sp, #16
 80224f4:	185b      	adds	r3, r3, r1
 80224f6:	212b      	movs	r1, #43	@ 0x2b
 80224f8:	7019      	strb	r1, [r3, #0]
 80224fa:	7833      	ldrb	r3, [r6, #0]
 80224fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80224fe:	d016      	beq.n	802252e <_svfiprintf_r+0xfa>
 8022500:	0035      	movs	r5, r6
 8022502:	2100      	movs	r1, #0
 8022504:	200a      	movs	r0, #10
 8022506:	68e3      	ldr	r3, [r4, #12]
 8022508:	782a      	ldrb	r2, [r5, #0]
 802250a:	1c6e      	adds	r6, r5, #1
 802250c:	3a30      	subs	r2, #48	@ 0x30
 802250e:	2a09      	cmp	r2, #9
 8022510:	d950      	bls.n	80225b4 <_svfiprintf_r+0x180>
 8022512:	2900      	cmp	r1, #0
 8022514:	d111      	bne.n	802253a <_svfiprintf_r+0x106>
 8022516:	e017      	b.n	8022548 <_svfiprintf_r+0x114>
 8022518:	3501      	adds	r5, #1
 802251a:	e7af      	b.n	802247c <_svfiprintf_r+0x48>
 802251c:	9b05      	ldr	r3, [sp, #20]
 802251e:	6822      	ldr	r2, [r4, #0]
 8022520:	1ac0      	subs	r0, r0, r3
 8022522:	2301      	movs	r3, #1
 8022524:	4083      	lsls	r3, r0
 8022526:	4313      	orrs	r3, r2
 8022528:	002e      	movs	r6, r5
 802252a:	6023      	str	r3, [r4, #0]
 802252c:	e7cc      	b.n	80224c8 <_svfiprintf_r+0x94>
 802252e:	9b07      	ldr	r3, [sp, #28]
 8022530:	1d19      	adds	r1, r3, #4
 8022532:	681b      	ldr	r3, [r3, #0]
 8022534:	9107      	str	r1, [sp, #28]
 8022536:	2b00      	cmp	r3, #0
 8022538:	db01      	blt.n	802253e <_svfiprintf_r+0x10a>
 802253a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802253c:	e004      	b.n	8022548 <_svfiprintf_r+0x114>
 802253e:	425b      	negs	r3, r3
 8022540:	60e3      	str	r3, [r4, #12]
 8022542:	2302      	movs	r3, #2
 8022544:	4313      	orrs	r3, r2
 8022546:	6023      	str	r3, [r4, #0]
 8022548:	782b      	ldrb	r3, [r5, #0]
 802254a:	2b2e      	cmp	r3, #46	@ 0x2e
 802254c:	d10c      	bne.n	8022568 <_svfiprintf_r+0x134>
 802254e:	786b      	ldrb	r3, [r5, #1]
 8022550:	2b2a      	cmp	r3, #42	@ 0x2a
 8022552:	d134      	bne.n	80225be <_svfiprintf_r+0x18a>
 8022554:	9b07      	ldr	r3, [sp, #28]
 8022556:	3502      	adds	r5, #2
 8022558:	1d1a      	adds	r2, r3, #4
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	9207      	str	r2, [sp, #28]
 802255e:	2b00      	cmp	r3, #0
 8022560:	da01      	bge.n	8022566 <_svfiprintf_r+0x132>
 8022562:	2301      	movs	r3, #1
 8022564:	425b      	negs	r3, r3
 8022566:	9309      	str	r3, [sp, #36]	@ 0x24
 8022568:	4e2d      	ldr	r6, [pc, #180]	@ (8022620 <_svfiprintf_r+0x1ec>)
 802256a:	2203      	movs	r2, #3
 802256c:	0030      	movs	r0, r6
 802256e:	7829      	ldrb	r1, [r5, #0]
 8022570:	f7fd ff19 	bl	80203a6 <memchr>
 8022574:	2800      	cmp	r0, #0
 8022576:	d006      	beq.n	8022586 <_svfiprintf_r+0x152>
 8022578:	2340      	movs	r3, #64	@ 0x40
 802257a:	1b80      	subs	r0, r0, r6
 802257c:	4083      	lsls	r3, r0
 802257e:	6822      	ldr	r2, [r4, #0]
 8022580:	3501      	adds	r5, #1
 8022582:	4313      	orrs	r3, r2
 8022584:	6023      	str	r3, [r4, #0]
 8022586:	7829      	ldrb	r1, [r5, #0]
 8022588:	2206      	movs	r2, #6
 802258a:	4826      	ldr	r0, [pc, #152]	@ (8022624 <_svfiprintf_r+0x1f0>)
 802258c:	1c6e      	adds	r6, r5, #1
 802258e:	7621      	strb	r1, [r4, #24]
 8022590:	f7fd ff09 	bl	80203a6 <memchr>
 8022594:	2800      	cmp	r0, #0
 8022596:	d038      	beq.n	802260a <_svfiprintf_r+0x1d6>
 8022598:	4b23      	ldr	r3, [pc, #140]	@ (8022628 <_svfiprintf_r+0x1f4>)
 802259a:	2b00      	cmp	r3, #0
 802259c:	d122      	bne.n	80225e4 <_svfiprintf_r+0x1b0>
 802259e:	2207      	movs	r2, #7
 80225a0:	9b07      	ldr	r3, [sp, #28]
 80225a2:	3307      	adds	r3, #7
 80225a4:	4393      	bics	r3, r2
 80225a6:	3308      	adds	r3, #8
 80225a8:	9307      	str	r3, [sp, #28]
 80225aa:	6963      	ldr	r3, [r4, #20]
 80225ac:	9a04      	ldr	r2, [sp, #16]
 80225ae:	189b      	adds	r3, r3, r2
 80225b0:	6163      	str	r3, [r4, #20]
 80225b2:	e762      	b.n	802247a <_svfiprintf_r+0x46>
 80225b4:	4343      	muls	r3, r0
 80225b6:	0035      	movs	r5, r6
 80225b8:	2101      	movs	r1, #1
 80225ba:	189b      	adds	r3, r3, r2
 80225bc:	e7a4      	b.n	8022508 <_svfiprintf_r+0xd4>
 80225be:	2300      	movs	r3, #0
 80225c0:	200a      	movs	r0, #10
 80225c2:	0019      	movs	r1, r3
 80225c4:	3501      	adds	r5, #1
 80225c6:	6063      	str	r3, [r4, #4]
 80225c8:	782a      	ldrb	r2, [r5, #0]
 80225ca:	1c6e      	adds	r6, r5, #1
 80225cc:	3a30      	subs	r2, #48	@ 0x30
 80225ce:	2a09      	cmp	r2, #9
 80225d0:	d903      	bls.n	80225da <_svfiprintf_r+0x1a6>
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d0c8      	beq.n	8022568 <_svfiprintf_r+0x134>
 80225d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80225d8:	e7c6      	b.n	8022568 <_svfiprintf_r+0x134>
 80225da:	4341      	muls	r1, r0
 80225dc:	0035      	movs	r5, r6
 80225de:	2301      	movs	r3, #1
 80225e0:	1889      	adds	r1, r1, r2
 80225e2:	e7f1      	b.n	80225c8 <_svfiprintf_r+0x194>
 80225e4:	aa07      	add	r2, sp, #28
 80225e6:	9200      	str	r2, [sp, #0]
 80225e8:	0021      	movs	r1, r4
 80225ea:	003a      	movs	r2, r7
 80225ec:	4b0f      	ldr	r3, [pc, #60]	@ (802262c <_svfiprintf_r+0x1f8>)
 80225ee:	9803      	ldr	r0, [sp, #12]
 80225f0:	f7fc ffd4 	bl	801f59c <_printf_float>
 80225f4:	9004      	str	r0, [sp, #16]
 80225f6:	9b04      	ldr	r3, [sp, #16]
 80225f8:	3301      	adds	r3, #1
 80225fa:	d1d6      	bne.n	80225aa <_svfiprintf_r+0x176>
 80225fc:	89bb      	ldrh	r3, [r7, #12]
 80225fe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022600:	065b      	lsls	r3, r3, #25
 8022602:	d500      	bpl.n	8022606 <_svfiprintf_r+0x1d2>
 8022604:	e72c      	b.n	8022460 <_svfiprintf_r+0x2c>
 8022606:	b021      	add	sp, #132	@ 0x84
 8022608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802260a:	aa07      	add	r2, sp, #28
 802260c:	9200      	str	r2, [sp, #0]
 802260e:	0021      	movs	r1, r4
 8022610:	003a      	movs	r2, r7
 8022612:	4b06      	ldr	r3, [pc, #24]	@ (802262c <_svfiprintf_r+0x1f8>)
 8022614:	9803      	ldr	r0, [sp, #12]
 8022616:	f7fd fa6f 	bl	801faf8 <_printf_i>
 802261a:	e7eb      	b.n	80225f4 <_svfiprintf_r+0x1c0>
 802261c:	08025f80 	.word	0x08025f80
 8022620:	08025f86 	.word	0x08025f86
 8022624:	08025f8a 	.word	0x08025f8a
 8022628:	0801f59d 	.word	0x0801f59d
 802262c:	08022375 	.word	0x08022375

08022630 <__sfputc_r>:
 8022630:	6893      	ldr	r3, [r2, #8]
 8022632:	b510      	push	{r4, lr}
 8022634:	3b01      	subs	r3, #1
 8022636:	6093      	str	r3, [r2, #8]
 8022638:	2b00      	cmp	r3, #0
 802263a:	da04      	bge.n	8022646 <__sfputc_r+0x16>
 802263c:	6994      	ldr	r4, [r2, #24]
 802263e:	42a3      	cmp	r3, r4
 8022640:	db07      	blt.n	8022652 <__sfputc_r+0x22>
 8022642:	290a      	cmp	r1, #10
 8022644:	d005      	beq.n	8022652 <__sfputc_r+0x22>
 8022646:	6813      	ldr	r3, [r2, #0]
 8022648:	1c58      	adds	r0, r3, #1
 802264a:	6010      	str	r0, [r2, #0]
 802264c:	7019      	strb	r1, [r3, #0]
 802264e:	0008      	movs	r0, r1
 8022650:	bd10      	pop	{r4, pc}
 8022652:	f7fd fd37 	bl	80200c4 <__swbuf_r>
 8022656:	0001      	movs	r1, r0
 8022658:	e7f9      	b.n	802264e <__sfputc_r+0x1e>

0802265a <__sfputs_r>:
 802265a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802265c:	0006      	movs	r6, r0
 802265e:	000f      	movs	r7, r1
 8022660:	0014      	movs	r4, r2
 8022662:	18d5      	adds	r5, r2, r3
 8022664:	42ac      	cmp	r4, r5
 8022666:	d101      	bne.n	802266c <__sfputs_r+0x12>
 8022668:	2000      	movs	r0, #0
 802266a:	e007      	b.n	802267c <__sfputs_r+0x22>
 802266c:	7821      	ldrb	r1, [r4, #0]
 802266e:	003a      	movs	r2, r7
 8022670:	0030      	movs	r0, r6
 8022672:	f7ff ffdd 	bl	8022630 <__sfputc_r>
 8022676:	3401      	adds	r4, #1
 8022678:	1c43      	adds	r3, r0, #1
 802267a:	d1f3      	bne.n	8022664 <__sfputs_r+0xa>
 802267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022680 <_vfiprintf_r>:
 8022680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022682:	b0a1      	sub	sp, #132	@ 0x84
 8022684:	000f      	movs	r7, r1
 8022686:	0015      	movs	r5, r2
 8022688:	001e      	movs	r6, r3
 802268a:	9003      	str	r0, [sp, #12]
 802268c:	2800      	cmp	r0, #0
 802268e:	d004      	beq.n	802269a <_vfiprintf_r+0x1a>
 8022690:	6a03      	ldr	r3, [r0, #32]
 8022692:	2b00      	cmp	r3, #0
 8022694:	d101      	bne.n	802269a <_vfiprintf_r+0x1a>
 8022696:	f7fd fbcd 	bl	801fe34 <__sinit>
 802269a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802269c:	07db      	lsls	r3, r3, #31
 802269e:	d405      	bmi.n	80226ac <_vfiprintf_r+0x2c>
 80226a0:	89bb      	ldrh	r3, [r7, #12]
 80226a2:	059b      	lsls	r3, r3, #22
 80226a4:	d402      	bmi.n	80226ac <_vfiprintf_r+0x2c>
 80226a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80226a8:	f7fd fe7b 	bl	80203a2 <__retarget_lock_acquire_recursive>
 80226ac:	89bb      	ldrh	r3, [r7, #12]
 80226ae:	071b      	lsls	r3, r3, #28
 80226b0:	d502      	bpl.n	80226b8 <_vfiprintf_r+0x38>
 80226b2:	693b      	ldr	r3, [r7, #16]
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d113      	bne.n	80226e0 <_vfiprintf_r+0x60>
 80226b8:	0039      	movs	r1, r7
 80226ba:	9803      	ldr	r0, [sp, #12]
 80226bc:	f7fd fd44 	bl	8020148 <__swsetup_r>
 80226c0:	2800      	cmp	r0, #0
 80226c2:	d00d      	beq.n	80226e0 <_vfiprintf_r+0x60>
 80226c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80226c6:	07db      	lsls	r3, r3, #31
 80226c8:	d503      	bpl.n	80226d2 <_vfiprintf_r+0x52>
 80226ca:	2001      	movs	r0, #1
 80226cc:	4240      	negs	r0, r0
 80226ce:	b021      	add	sp, #132	@ 0x84
 80226d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80226d2:	89bb      	ldrh	r3, [r7, #12]
 80226d4:	059b      	lsls	r3, r3, #22
 80226d6:	d4f8      	bmi.n	80226ca <_vfiprintf_r+0x4a>
 80226d8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80226da:	f7fd fe63 	bl	80203a4 <__retarget_lock_release_recursive>
 80226de:	e7f4      	b.n	80226ca <_vfiprintf_r+0x4a>
 80226e0:	2300      	movs	r3, #0
 80226e2:	ac08      	add	r4, sp, #32
 80226e4:	6163      	str	r3, [r4, #20]
 80226e6:	3320      	adds	r3, #32
 80226e8:	7663      	strb	r3, [r4, #25]
 80226ea:	3310      	adds	r3, #16
 80226ec:	76a3      	strb	r3, [r4, #26]
 80226ee:	9607      	str	r6, [sp, #28]
 80226f0:	002e      	movs	r6, r5
 80226f2:	7833      	ldrb	r3, [r6, #0]
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d001      	beq.n	80226fc <_vfiprintf_r+0x7c>
 80226f8:	2b25      	cmp	r3, #37	@ 0x25
 80226fa:	d148      	bne.n	802278e <_vfiprintf_r+0x10e>
 80226fc:	1b73      	subs	r3, r6, r5
 80226fe:	9305      	str	r3, [sp, #20]
 8022700:	42ae      	cmp	r6, r5
 8022702:	d00b      	beq.n	802271c <_vfiprintf_r+0x9c>
 8022704:	002a      	movs	r2, r5
 8022706:	0039      	movs	r1, r7
 8022708:	9803      	ldr	r0, [sp, #12]
 802270a:	f7ff ffa6 	bl	802265a <__sfputs_r>
 802270e:	3001      	adds	r0, #1
 8022710:	d100      	bne.n	8022714 <_vfiprintf_r+0x94>
 8022712:	e0ae      	b.n	8022872 <_vfiprintf_r+0x1f2>
 8022714:	6963      	ldr	r3, [r4, #20]
 8022716:	9a05      	ldr	r2, [sp, #20]
 8022718:	189b      	adds	r3, r3, r2
 802271a:	6163      	str	r3, [r4, #20]
 802271c:	7833      	ldrb	r3, [r6, #0]
 802271e:	2b00      	cmp	r3, #0
 8022720:	d100      	bne.n	8022724 <_vfiprintf_r+0xa4>
 8022722:	e0a6      	b.n	8022872 <_vfiprintf_r+0x1f2>
 8022724:	2201      	movs	r2, #1
 8022726:	2300      	movs	r3, #0
 8022728:	4252      	negs	r2, r2
 802272a:	6062      	str	r2, [r4, #4]
 802272c:	a904      	add	r1, sp, #16
 802272e:	3254      	adds	r2, #84	@ 0x54
 8022730:	1852      	adds	r2, r2, r1
 8022732:	1c75      	adds	r5, r6, #1
 8022734:	6023      	str	r3, [r4, #0]
 8022736:	60e3      	str	r3, [r4, #12]
 8022738:	60a3      	str	r3, [r4, #8]
 802273a:	7013      	strb	r3, [r2, #0]
 802273c:	65a3      	str	r3, [r4, #88]	@ 0x58
 802273e:	4b59      	ldr	r3, [pc, #356]	@ (80228a4 <_vfiprintf_r+0x224>)
 8022740:	2205      	movs	r2, #5
 8022742:	0018      	movs	r0, r3
 8022744:	7829      	ldrb	r1, [r5, #0]
 8022746:	9305      	str	r3, [sp, #20]
 8022748:	f7fd fe2d 	bl	80203a6 <memchr>
 802274c:	1c6e      	adds	r6, r5, #1
 802274e:	2800      	cmp	r0, #0
 8022750:	d11f      	bne.n	8022792 <_vfiprintf_r+0x112>
 8022752:	6822      	ldr	r2, [r4, #0]
 8022754:	06d3      	lsls	r3, r2, #27
 8022756:	d504      	bpl.n	8022762 <_vfiprintf_r+0xe2>
 8022758:	2353      	movs	r3, #83	@ 0x53
 802275a:	a904      	add	r1, sp, #16
 802275c:	185b      	adds	r3, r3, r1
 802275e:	2120      	movs	r1, #32
 8022760:	7019      	strb	r1, [r3, #0]
 8022762:	0713      	lsls	r3, r2, #28
 8022764:	d504      	bpl.n	8022770 <_vfiprintf_r+0xf0>
 8022766:	2353      	movs	r3, #83	@ 0x53
 8022768:	a904      	add	r1, sp, #16
 802276a:	185b      	adds	r3, r3, r1
 802276c:	212b      	movs	r1, #43	@ 0x2b
 802276e:	7019      	strb	r1, [r3, #0]
 8022770:	782b      	ldrb	r3, [r5, #0]
 8022772:	2b2a      	cmp	r3, #42	@ 0x2a
 8022774:	d016      	beq.n	80227a4 <_vfiprintf_r+0x124>
 8022776:	002e      	movs	r6, r5
 8022778:	2100      	movs	r1, #0
 802277a:	200a      	movs	r0, #10
 802277c:	68e3      	ldr	r3, [r4, #12]
 802277e:	7832      	ldrb	r2, [r6, #0]
 8022780:	1c75      	adds	r5, r6, #1
 8022782:	3a30      	subs	r2, #48	@ 0x30
 8022784:	2a09      	cmp	r2, #9
 8022786:	d950      	bls.n	802282a <_vfiprintf_r+0x1aa>
 8022788:	2900      	cmp	r1, #0
 802278a:	d111      	bne.n	80227b0 <_vfiprintf_r+0x130>
 802278c:	e017      	b.n	80227be <_vfiprintf_r+0x13e>
 802278e:	3601      	adds	r6, #1
 8022790:	e7af      	b.n	80226f2 <_vfiprintf_r+0x72>
 8022792:	9b05      	ldr	r3, [sp, #20]
 8022794:	6822      	ldr	r2, [r4, #0]
 8022796:	1ac0      	subs	r0, r0, r3
 8022798:	2301      	movs	r3, #1
 802279a:	4083      	lsls	r3, r0
 802279c:	4313      	orrs	r3, r2
 802279e:	0035      	movs	r5, r6
 80227a0:	6023      	str	r3, [r4, #0]
 80227a2:	e7cc      	b.n	802273e <_vfiprintf_r+0xbe>
 80227a4:	9b07      	ldr	r3, [sp, #28]
 80227a6:	1d19      	adds	r1, r3, #4
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	9107      	str	r1, [sp, #28]
 80227ac:	2b00      	cmp	r3, #0
 80227ae:	db01      	blt.n	80227b4 <_vfiprintf_r+0x134>
 80227b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80227b2:	e004      	b.n	80227be <_vfiprintf_r+0x13e>
 80227b4:	425b      	negs	r3, r3
 80227b6:	60e3      	str	r3, [r4, #12]
 80227b8:	2302      	movs	r3, #2
 80227ba:	4313      	orrs	r3, r2
 80227bc:	6023      	str	r3, [r4, #0]
 80227be:	7833      	ldrb	r3, [r6, #0]
 80227c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80227c2:	d10c      	bne.n	80227de <_vfiprintf_r+0x15e>
 80227c4:	7873      	ldrb	r3, [r6, #1]
 80227c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80227c8:	d134      	bne.n	8022834 <_vfiprintf_r+0x1b4>
 80227ca:	9b07      	ldr	r3, [sp, #28]
 80227cc:	3602      	adds	r6, #2
 80227ce:	1d1a      	adds	r2, r3, #4
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	9207      	str	r2, [sp, #28]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	da01      	bge.n	80227dc <_vfiprintf_r+0x15c>
 80227d8:	2301      	movs	r3, #1
 80227da:	425b      	negs	r3, r3
 80227dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80227de:	4d32      	ldr	r5, [pc, #200]	@ (80228a8 <_vfiprintf_r+0x228>)
 80227e0:	2203      	movs	r2, #3
 80227e2:	0028      	movs	r0, r5
 80227e4:	7831      	ldrb	r1, [r6, #0]
 80227e6:	f7fd fdde 	bl	80203a6 <memchr>
 80227ea:	2800      	cmp	r0, #0
 80227ec:	d006      	beq.n	80227fc <_vfiprintf_r+0x17c>
 80227ee:	2340      	movs	r3, #64	@ 0x40
 80227f0:	1b40      	subs	r0, r0, r5
 80227f2:	4083      	lsls	r3, r0
 80227f4:	6822      	ldr	r2, [r4, #0]
 80227f6:	3601      	adds	r6, #1
 80227f8:	4313      	orrs	r3, r2
 80227fa:	6023      	str	r3, [r4, #0]
 80227fc:	7831      	ldrb	r1, [r6, #0]
 80227fe:	2206      	movs	r2, #6
 8022800:	482a      	ldr	r0, [pc, #168]	@ (80228ac <_vfiprintf_r+0x22c>)
 8022802:	1c75      	adds	r5, r6, #1
 8022804:	7621      	strb	r1, [r4, #24]
 8022806:	f7fd fdce 	bl	80203a6 <memchr>
 802280a:	2800      	cmp	r0, #0
 802280c:	d040      	beq.n	8022890 <_vfiprintf_r+0x210>
 802280e:	4b28      	ldr	r3, [pc, #160]	@ (80228b0 <_vfiprintf_r+0x230>)
 8022810:	2b00      	cmp	r3, #0
 8022812:	d122      	bne.n	802285a <_vfiprintf_r+0x1da>
 8022814:	2207      	movs	r2, #7
 8022816:	9b07      	ldr	r3, [sp, #28]
 8022818:	3307      	adds	r3, #7
 802281a:	4393      	bics	r3, r2
 802281c:	3308      	adds	r3, #8
 802281e:	9307      	str	r3, [sp, #28]
 8022820:	6963      	ldr	r3, [r4, #20]
 8022822:	9a04      	ldr	r2, [sp, #16]
 8022824:	189b      	adds	r3, r3, r2
 8022826:	6163      	str	r3, [r4, #20]
 8022828:	e762      	b.n	80226f0 <_vfiprintf_r+0x70>
 802282a:	4343      	muls	r3, r0
 802282c:	002e      	movs	r6, r5
 802282e:	2101      	movs	r1, #1
 8022830:	189b      	adds	r3, r3, r2
 8022832:	e7a4      	b.n	802277e <_vfiprintf_r+0xfe>
 8022834:	2300      	movs	r3, #0
 8022836:	200a      	movs	r0, #10
 8022838:	0019      	movs	r1, r3
 802283a:	3601      	adds	r6, #1
 802283c:	6063      	str	r3, [r4, #4]
 802283e:	7832      	ldrb	r2, [r6, #0]
 8022840:	1c75      	adds	r5, r6, #1
 8022842:	3a30      	subs	r2, #48	@ 0x30
 8022844:	2a09      	cmp	r2, #9
 8022846:	d903      	bls.n	8022850 <_vfiprintf_r+0x1d0>
 8022848:	2b00      	cmp	r3, #0
 802284a:	d0c8      	beq.n	80227de <_vfiprintf_r+0x15e>
 802284c:	9109      	str	r1, [sp, #36]	@ 0x24
 802284e:	e7c6      	b.n	80227de <_vfiprintf_r+0x15e>
 8022850:	4341      	muls	r1, r0
 8022852:	002e      	movs	r6, r5
 8022854:	2301      	movs	r3, #1
 8022856:	1889      	adds	r1, r1, r2
 8022858:	e7f1      	b.n	802283e <_vfiprintf_r+0x1be>
 802285a:	aa07      	add	r2, sp, #28
 802285c:	9200      	str	r2, [sp, #0]
 802285e:	0021      	movs	r1, r4
 8022860:	003a      	movs	r2, r7
 8022862:	4b14      	ldr	r3, [pc, #80]	@ (80228b4 <_vfiprintf_r+0x234>)
 8022864:	9803      	ldr	r0, [sp, #12]
 8022866:	f7fc fe99 	bl	801f59c <_printf_float>
 802286a:	9004      	str	r0, [sp, #16]
 802286c:	9b04      	ldr	r3, [sp, #16]
 802286e:	3301      	adds	r3, #1
 8022870:	d1d6      	bne.n	8022820 <_vfiprintf_r+0x1a0>
 8022872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022874:	07db      	lsls	r3, r3, #31
 8022876:	d405      	bmi.n	8022884 <_vfiprintf_r+0x204>
 8022878:	89bb      	ldrh	r3, [r7, #12]
 802287a:	059b      	lsls	r3, r3, #22
 802287c:	d402      	bmi.n	8022884 <_vfiprintf_r+0x204>
 802287e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022880:	f7fd fd90 	bl	80203a4 <__retarget_lock_release_recursive>
 8022884:	89bb      	ldrh	r3, [r7, #12]
 8022886:	065b      	lsls	r3, r3, #25
 8022888:	d500      	bpl.n	802288c <_vfiprintf_r+0x20c>
 802288a:	e71e      	b.n	80226ca <_vfiprintf_r+0x4a>
 802288c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802288e:	e71e      	b.n	80226ce <_vfiprintf_r+0x4e>
 8022890:	aa07      	add	r2, sp, #28
 8022892:	9200      	str	r2, [sp, #0]
 8022894:	0021      	movs	r1, r4
 8022896:	003a      	movs	r2, r7
 8022898:	4b06      	ldr	r3, [pc, #24]	@ (80228b4 <_vfiprintf_r+0x234>)
 802289a:	9803      	ldr	r0, [sp, #12]
 802289c:	f7fd f92c 	bl	801faf8 <_printf_i>
 80228a0:	e7e3      	b.n	802286a <_vfiprintf_r+0x1ea>
 80228a2:	46c0      	nop			@ (mov r8, r8)
 80228a4:	08025f80 	.word	0x08025f80
 80228a8:	08025f86 	.word	0x08025f86
 80228ac:	08025f8a 	.word	0x08025f8a
 80228b0:	0801f59d 	.word	0x0801f59d
 80228b4:	0802265b 	.word	0x0802265b

080228b8 <__sflush_r>:
 80228b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80228ba:	220c      	movs	r2, #12
 80228bc:	5e8b      	ldrsh	r3, [r1, r2]
 80228be:	0005      	movs	r5, r0
 80228c0:	000c      	movs	r4, r1
 80228c2:	071a      	lsls	r2, r3, #28
 80228c4:	d456      	bmi.n	8022974 <__sflush_r+0xbc>
 80228c6:	684a      	ldr	r2, [r1, #4]
 80228c8:	2a00      	cmp	r2, #0
 80228ca:	dc02      	bgt.n	80228d2 <__sflush_r+0x1a>
 80228cc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80228ce:	2a00      	cmp	r2, #0
 80228d0:	dd4e      	ble.n	8022970 <__sflush_r+0xb8>
 80228d2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80228d4:	2f00      	cmp	r7, #0
 80228d6:	d04b      	beq.n	8022970 <__sflush_r+0xb8>
 80228d8:	2200      	movs	r2, #0
 80228da:	2080      	movs	r0, #128	@ 0x80
 80228dc:	682e      	ldr	r6, [r5, #0]
 80228de:	602a      	str	r2, [r5, #0]
 80228e0:	001a      	movs	r2, r3
 80228e2:	0140      	lsls	r0, r0, #5
 80228e4:	6a21      	ldr	r1, [r4, #32]
 80228e6:	4002      	ands	r2, r0
 80228e8:	4203      	tst	r3, r0
 80228ea:	d033      	beq.n	8022954 <__sflush_r+0x9c>
 80228ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80228ee:	89a3      	ldrh	r3, [r4, #12]
 80228f0:	075b      	lsls	r3, r3, #29
 80228f2:	d506      	bpl.n	8022902 <__sflush_r+0x4a>
 80228f4:	6863      	ldr	r3, [r4, #4]
 80228f6:	1ad2      	subs	r2, r2, r3
 80228f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d001      	beq.n	8022902 <__sflush_r+0x4a>
 80228fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022900:	1ad2      	subs	r2, r2, r3
 8022902:	2300      	movs	r3, #0
 8022904:	0028      	movs	r0, r5
 8022906:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022908:	6a21      	ldr	r1, [r4, #32]
 802290a:	47b8      	blx	r7
 802290c:	89a2      	ldrh	r2, [r4, #12]
 802290e:	1c43      	adds	r3, r0, #1
 8022910:	d106      	bne.n	8022920 <__sflush_r+0x68>
 8022912:	6829      	ldr	r1, [r5, #0]
 8022914:	291d      	cmp	r1, #29
 8022916:	d846      	bhi.n	80229a6 <__sflush_r+0xee>
 8022918:	4b29      	ldr	r3, [pc, #164]	@ (80229c0 <__sflush_r+0x108>)
 802291a:	410b      	asrs	r3, r1
 802291c:	07db      	lsls	r3, r3, #31
 802291e:	d442      	bmi.n	80229a6 <__sflush_r+0xee>
 8022920:	2300      	movs	r3, #0
 8022922:	6063      	str	r3, [r4, #4]
 8022924:	6923      	ldr	r3, [r4, #16]
 8022926:	6023      	str	r3, [r4, #0]
 8022928:	04d2      	lsls	r2, r2, #19
 802292a:	d505      	bpl.n	8022938 <__sflush_r+0x80>
 802292c:	1c43      	adds	r3, r0, #1
 802292e:	d102      	bne.n	8022936 <__sflush_r+0x7e>
 8022930:	682b      	ldr	r3, [r5, #0]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d100      	bne.n	8022938 <__sflush_r+0x80>
 8022936:	6560      	str	r0, [r4, #84]	@ 0x54
 8022938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802293a:	602e      	str	r6, [r5, #0]
 802293c:	2900      	cmp	r1, #0
 802293e:	d017      	beq.n	8022970 <__sflush_r+0xb8>
 8022940:	0023      	movs	r3, r4
 8022942:	3344      	adds	r3, #68	@ 0x44
 8022944:	4299      	cmp	r1, r3
 8022946:	d002      	beq.n	802294e <__sflush_r+0x96>
 8022948:	0028      	movs	r0, r5
 802294a:	f7fe fbc9 	bl	80210e0 <_free_r>
 802294e:	2300      	movs	r3, #0
 8022950:	6363      	str	r3, [r4, #52]	@ 0x34
 8022952:	e00d      	b.n	8022970 <__sflush_r+0xb8>
 8022954:	2301      	movs	r3, #1
 8022956:	0028      	movs	r0, r5
 8022958:	47b8      	blx	r7
 802295a:	0002      	movs	r2, r0
 802295c:	1c43      	adds	r3, r0, #1
 802295e:	d1c6      	bne.n	80228ee <__sflush_r+0x36>
 8022960:	682b      	ldr	r3, [r5, #0]
 8022962:	2b00      	cmp	r3, #0
 8022964:	d0c3      	beq.n	80228ee <__sflush_r+0x36>
 8022966:	2b1d      	cmp	r3, #29
 8022968:	d001      	beq.n	802296e <__sflush_r+0xb6>
 802296a:	2b16      	cmp	r3, #22
 802296c:	d11a      	bne.n	80229a4 <__sflush_r+0xec>
 802296e:	602e      	str	r6, [r5, #0]
 8022970:	2000      	movs	r0, #0
 8022972:	e01e      	b.n	80229b2 <__sflush_r+0xfa>
 8022974:	690e      	ldr	r6, [r1, #16]
 8022976:	2e00      	cmp	r6, #0
 8022978:	d0fa      	beq.n	8022970 <__sflush_r+0xb8>
 802297a:	680f      	ldr	r7, [r1, #0]
 802297c:	600e      	str	r6, [r1, #0]
 802297e:	1bba      	subs	r2, r7, r6
 8022980:	9201      	str	r2, [sp, #4]
 8022982:	2200      	movs	r2, #0
 8022984:	079b      	lsls	r3, r3, #30
 8022986:	d100      	bne.n	802298a <__sflush_r+0xd2>
 8022988:	694a      	ldr	r2, [r1, #20]
 802298a:	60a2      	str	r2, [r4, #8]
 802298c:	9b01      	ldr	r3, [sp, #4]
 802298e:	2b00      	cmp	r3, #0
 8022990:	ddee      	ble.n	8022970 <__sflush_r+0xb8>
 8022992:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022994:	0032      	movs	r2, r6
 8022996:	001f      	movs	r7, r3
 8022998:	0028      	movs	r0, r5
 802299a:	9b01      	ldr	r3, [sp, #4]
 802299c:	6a21      	ldr	r1, [r4, #32]
 802299e:	47b8      	blx	r7
 80229a0:	2800      	cmp	r0, #0
 80229a2:	dc07      	bgt.n	80229b4 <__sflush_r+0xfc>
 80229a4:	89a2      	ldrh	r2, [r4, #12]
 80229a6:	2340      	movs	r3, #64	@ 0x40
 80229a8:	2001      	movs	r0, #1
 80229aa:	4313      	orrs	r3, r2
 80229ac:	b21b      	sxth	r3, r3
 80229ae:	81a3      	strh	r3, [r4, #12]
 80229b0:	4240      	negs	r0, r0
 80229b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80229b4:	9b01      	ldr	r3, [sp, #4]
 80229b6:	1836      	adds	r6, r6, r0
 80229b8:	1a1b      	subs	r3, r3, r0
 80229ba:	9301      	str	r3, [sp, #4]
 80229bc:	e7e6      	b.n	802298c <__sflush_r+0xd4>
 80229be:	46c0      	nop			@ (mov r8, r8)
 80229c0:	dfbffffe 	.word	0xdfbffffe

080229c4 <_fflush_r>:
 80229c4:	690b      	ldr	r3, [r1, #16]
 80229c6:	b570      	push	{r4, r5, r6, lr}
 80229c8:	0005      	movs	r5, r0
 80229ca:	000c      	movs	r4, r1
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d102      	bne.n	80229d6 <_fflush_r+0x12>
 80229d0:	2500      	movs	r5, #0
 80229d2:	0028      	movs	r0, r5
 80229d4:	bd70      	pop	{r4, r5, r6, pc}
 80229d6:	2800      	cmp	r0, #0
 80229d8:	d004      	beq.n	80229e4 <_fflush_r+0x20>
 80229da:	6a03      	ldr	r3, [r0, #32]
 80229dc:	2b00      	cmp	r3, #0
 80229de:	d101      	bne.n	80229e4 <_fflush_r+0x20>
 80229e0:	f7fd fa28 	bl	801fe34 <__sinit>
 80229e4:	220c      	movs	r2, #12
 80229e6:	5ea3      	ldrsh	r3, [r4, r2]
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d0f1      	beq.n	80229d0 <_fflush_r+0xc>
 80229ec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80229ee:	07d2      	lsls	r2, r2, #31
 80229f0:	d404      	bmi.n	80229fc <_fflush_r+0x38>
 80229f2:	059b      	lsls	r3, r3, #22
 80229f4:	d402      	bmi.n	80229fc <_fflush_r+0x38>
 80229f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80229f8:	f7fd fcd3 	bl	80203a2 <__retarget_lock_acquire_recursive>
 80229fc:	0028      	movs	r0, r5
 80229fe:	0021      	movs	r1, r4
 8022a00:	f7ff ff5a 	bl	80228b8 <__sflush_r>
 8022a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022a06:	0005      	movs	r5, r0
 8022a08:	07db      	lsls	r3, r3, #31
 8022a0a:	d4e2      	bmi.n	80229d2 <_fflush_r+0xe>
 8022a0c:	89a3      	ldrh	r3, [r4, #12]
 8022a0e:	059b      	lsls	r3, r3, #22
 8022a10:	d4df      	bmi.n	80229d2 <_fflush_r+0xe>
 8022a12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022a14:	f7fd fcc6 	bl	80203a4 <__retarget_lock_release_recursive>
 8022a18:	e7db      	b.n	80229d2 <_fflush_r+0xe>
	...

08022a1c <__swhatbuf_r>:
 8022a1c:	b570      	push	{r4, r5, r6, lr}
 8022a1e:	000e      	movs	r6, r1
 8022a20:	001d      	movs	r5, r3
 8022a22:	230e      	movs	r3, #14
 8022a24:	5ec9      	ldrsh	r1, [r1, r3]
 8022a26:	0014      	movs	r4, r2
 8022a28:	b096      	sub	sp, #88	@ 0x58
 8022a2a:	2900      	cmp	r1, #0
 8022a2c:	da0c      	bge.n	8022a48 <__swhatbuf_r+0x2c>
 8022a2e:	89b2      	ldrh	r2, [r6, #12]
 8022a30:	2380      	movs	r3, #128	@ 0x80
 8022a32:	0011      	movs	r1, r2
 8022a34:	4019      	ands	r1, r3
 8022a36:	421a      	tst	r2, r3
 8022a38:	d114      	bne.n	8022a64 <__swhatbuf_r+0x48>
 8022a3a:	2380      	movs	r3, #128	@ 0x80
 8022a3c:	00db      	lsls	r3, r3, #3
 8022a3e:	2000      	movs	r0, #0
 8022a40:	6029      	str	r1, [r5, #0]
 8022a42:	6023      	str	r3, [r4, #0]
 8022a44:	b016      	add	sp, #88	@ 0x58
 8022a46:	bd70      	pop	{r4, r5, r6, pc}
 8022a48:	466a      	mov	r2, sp
 8022a4a:	f000 f865 	bl	8022b18 <_fstat_r>
 8022a4e:	2800      	cmp	r0, #0
 8022a50:	dbed      	blt.n	8022a2e <__swhatbuf_r+0x12>
 8022a52:	23f0      	movs	r3, #240	@ 0xf0
 8022a54:	9901      	ldr	r1, [sp, #4]
 8022a56:	021b      	lsls	r3, r3, #8
 8022a58:	4019      	ands	r1, r3
 8022a5a:	4b04      	ldr	r3, [pc, #16]	@ (8022a6c <__swhatbuf_r+0x50>)
 8022a5c:	18c9      	adds	r1, r1, r3
 8022a5e:	424b      	negs	r3, r1
 8022a60:	4159      	adcs	r1, r3
 8022a62:	e7ea      	b.n	8022a3a <__swhatbuf_r+0x1e>
 8022a64:	2100      	movs	r1, #0
 8022a66:	2340      	movs	r3, #64	@ 0x40
 8022a68:	e7e9      	b.n	8022a3e <__swhatbuf_r+0x22>
 8022a6a:	46c0      	nop			@ (mov r8, r8)
 8022a6c:	ffffe000 	.word	0xffffe000

08022a70 <__smakebuf_r>:
 8022a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a72:	2602      	movs	r6, #2
 8022a74:	898b      	ldrh	r3, [r1, #12]
 8022a76:	0005      	movs	r5, r0
 8022a78:	000c      	movs	r4, r1
 8022a7a:	b085      	sub	sp, #20
 8022a7c:	4233      	tst	r3, r6
 8022a7e:	d007      	beq.n	8022a90 <__smakebuf_r+0x20>
 8022a80:	0023      	movs	r3, r4
 8022a82:	3347      	adds	r3, #71	@ 0x47
 8022a84:	6023      	str	r3, [r4, #0]
 8022a86:	6123      	str	r3, [r4, #16]
 8022a88:	2301      	movs	r3, #1
 8022a8a:	6163      	str	r3, [r4, #20]
 8022a8c:	b005      	add	sp, #20
 8022a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a90:	ab03      	add	r3, sp, #12
 8022a92:	aa02      	add	r2, sp, #8
 8022a94:	f7ff ffc2 	bl	8022a1c <__swhatbuf_r>
 8022a98:	9f02      	ldr	r7, [sp, #8]
 8022a9a:	9001      	str	r0, [sp, #4]
 8022a9c:	0039      	movs	r1, r7
 8022a9e:	0028      	movs	r0, r5
 8022aa0:	f7fe feee 	bl	8021880 <_malloc_r>
 8022aa4:	2800      	cmp	r0, #0
 8022aa6:	d108      	bne.n	8022aba <__smakebuf_r+0x4a>
 8022aa8:	220c      	movs	r2, #12
 8022aaa:	5ea3      	ldrsh	r3, [r4, r2]
 8022aac:	059a      	lsls	r2, r3, #22
 8022aae:	d4ed      	bmi.n	8022a8c <__smakebuf_r+0x1c>
 8022ab0:	2203      	movs	r2, #3
 8022ab2:	4393      	bics	r3, r2
 8022ab4:	431e      	orrs	r6, r3
 8022ab6:	81a6      	strh	r6, [r4, #12]
 8022ab8:	e7e2      	b.n	8022a80 <__smakebuf_r+0x10>
 8022aba:	2380      	movs	r3, #128	@ 0x80
 8022abc:	89a2      	ldrh	r2, [r4, #12]
 8022abe:	6020      	str	r0, [r4, #0]
 8022ac0:	4313      	orrs	r3, r2
 8022ac2:	81a3      	strh	r3, [r4, #12]
 8022ac4:	9b03      	ldr	r3, [sp, #12]
 8022ac6:	6120      	str	r0, [r4, #16]
 8022ac8:	6167      	str	r7, [r4, #20]
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	d00c      	beq.n	8022ae8 <__smakebuf_r+0x78>
 8022ace:	0028      	movs	r0, r5
 8022ad0:	230e      	movs	r3, #14
 8022ad2:	5ee1      	ldrsh	r1, [r4, r3]
 8022ad4:	f000 f832 	bl	8022b3c <_isatty_r>
 8022ad8:	2800      	cmp	r0, #0
 8022ada:	d005      	beq.n	8022ae8 <__smakebuf_r+0x78>
 8022adc:	2303      	movs	r3, #3
 8022ade:	89a2      	ldrh	r2, [r4, #12]
 8022ae0:	439a      	bics	r2, r3
 8022ae2:	3b02      	subs	r3, #2
 8022ae4:	4313      	orrs	r3, r2
 8022ae6:	81a3      	strh	r3, [r4, #12]
 8022ae8:	89a3      	ldrh	r3, [r4, #12]
 8022aea:	9a01      	ldr	r2, [sp, #4]
 8022aec:	4313      	orrs	r3, r2
 8022aee:	81a3      	strh	r3, [r4, #12]
 8022af0:	e7cc      	b.n	8022a8c <__smakebuf_r+0x1c>

08022af2 <memmove>:
 8022af2:	b510      	push	{r4, lr}
 8022af4:	4288      	cmp	r0, r1
 8022af6:	d806      	bhi.n	8022b06 <memmove+0x14>
 8022af8:	2300      	movs	r3, #0
 8022afa:	429a      	cmp	r2, r3
 8022afc:	d008      	beq.n	8022b10 <memmove+0x1e>
 8022afe:	5ccc      	ldrb	r4, [r1, r3]
 8022b00:	54c4      	strb	r4, [r0, r3]
 8022b02:	3301      	adds	r3, #1
 8022b04:	e7f9      	b.n	8022afa <memmove+0x8>
 8022b06:	188b      	adds	r3, r1, r2
 8022b08:	4298      	cmp	r0, r3
 8022b0a:	d2f5      	bcs.n	8022af8 <memmove+0x6>
 8022b0c:	3a01      	subs	r2, #1
 8022b0e:	d200      	bcs.n	8022b12 <memmove+0x20>
 8022b10:	bd10      	pop	{r4, pc}
 8022b12:	5c8b      	ldrb	r3, [r1, r2]
 8022b14:	5483      	strb	r3, [r0, r2]
 8022b16:	e7f9      	b.n	8022b0c <memmove+0x1a>

08022b18 <_fstat_r>:
 8022b18:	2300      	movs	r3, #0
 8022b1a:	b570      	push	{r4, r5, r6, lr}
 8022b1c:	4d06      	ldr	r5, [pc, #24]	@ (8022b38 <_fstat_r+0x20>)
 8022b1e:	0004      	movs	r4, r0
 8022b20:	0008      	movs	r0, r1
 8022b22:	0011      	movs	r1, r2
 8022b24:	602b      	str	r3, [r5, #0]
 8022b26:	f7eb f877 	bl	800dc18 <_fstat>
 8022b2a:	1c43      	adds	r3, r0, #1
 8022b2c:	d103      	bne.n	8022b36 <_fstat_r+0x1e>
 8022b2e:	682b      	ldr	r3, [r5, #0]
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d000      	beq.n	8022b36 <_fstat_r+0x1e>
 8022b34:	6023      	str	r3, [r4, #0]
 8022b36:	bd70      	pop	{r4, r5, r6, pc}
 8022b38:	200037a8 	.word	0x200037a8

08022b3c <_isatty_r>:
 8022b3c:	2300      	movs	r3, #0
 8022b3e:	b570      	push	{r4, r5, r6, lr}
 8022b40:	4d06      	ldr	r5, [pc, #24]	@ (8022b5c <_isatty_r+0x20>)
 8022b42:	0004      	movs	r4, r0
 8022b44:	0008      	movs	r0, r1
 8022b46:	602b      	str	r3, [r5, #0]
 8022b48:	f7eb f874 	bl	800dc34 <_isatty>
 8022b4c:	1c43      	adds	r3, r0, #1
 8022b4e:	d103      	bne.n	8022b58 <_isatty_r+0x1c>
 8022b50:	682b      	ldr	r3, [r5, #0]
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d000      	beq.n	8022b58 <_isatty_r+0x1c>
 8022b56:	6023      	str	r3, [r4, #0]
 8022b58:	bd70      	pop	{r4, r5, r6, pc}
 8022b5a:	46c0      	nop			@ (mov r8, r8)
 8022b5c:	200037a8 	.word	0x200037a8

08022b60 <_sbrk_r>:
 8022b60:	2300      	movs	r3, #0
 8022b62:	b570      	push	{r4, r5, r6, lr}
 8022b64:	4d06      	ldr	r5, [pc, #24]	@ (8022b80 <_sbrk_r+0x20>)
 8022b66:	0004      	movs	r4, r0
 8022b68:	0008      	movs	r0, r1
 8022b6a:	602b      	str	r3, [r5, #0]
 8022b6c:	f7eb f876 	bl	800dc5c <_sbrk>
 8022b70:	1c43      	adds	r3, r0, #1
 8022b72:	d103      	bne.n	8022b7c <_sbrk_r+0x1c>
 8022b74:	682b      	ldr	r3, [r5, #0]
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d000      	beq.n	8022b7c <_sbrk_r+0x1c>
 8022b7a:	6023      	str	r3, [r4, #0]
 8022b7c:	bd70      	pop	{r4, r5, r6, pc}
 8022b7e:	46c0      	nop			@ (mov r8, r8)
 8022b80:	200037a8 	.word	0x200037a8

08022b84 <__assert_func>:
 8022b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022b86:	0014      	movs	r4, r2
 8022b88:	001a      	movs	r2, r3
 8022b8a:	4b09      	ldr	r3, [pc, #36]	@ (8022bb0 <__assert_func+0x2c>)
 8022b8c:	0005      	movs	r5, r0
 8022b8e:	681b      	ldr	r3, [r3, #0]
 8022b90:	000e      	movs	r6, r1
 8022b92:	68d8      	ldr	r0, [r3, #12]
 8022b94:	4b07      	ldr	r3, [pc, #28]	@ (8022bb4 <__assert_func+0x30>)
 8022b96:	2c00      	cmp	r4, #0
 8022b98:	d101      	bne.n	8022b9e <__assert_func+0x1a>
 8022b9a:	4b07      	ldr	r3, [pc, #28]	@ (8022bb8 <__assert_func+0x34>)
 8022b9c:	001c      	movs	r4, r3
 8022b9e:	4907      	ldr	r1, [pc, #28]	@ (8022bbc <__assert_func+0x38>)
 8022ba0:	9301      	str	r3, [sp, #4]
 8022ba2:	9402      	str	r4, [sp, #8]
 8022ba4:	002b      	movs	r3, r5
 8022ba6:	9600      	str	r6, [sp, #0]
 8022ba8:	f000 f866 	bl	8022c78 <fiprintf>
 8022bac:	f000 f874 	bl	8022c98 <abort>
 8022bb0:	200003d4 	.word	0x200003d4
 8022bb4:	08025f91 	.word	0x08025f91
 8022bb8:	08025fcc 	.word	0x08025fcc
 8022bbc:	08025f9e 	.word	0x08025f9e

08022bc0 <_calloc_r>:
 8022bc0:	b570      	push	{r4, r5, r6, lr}
 8022bc2:	0c0b      	lsrs	r3, r1, #16
 8022bc4:	0c15      	lsrs	r5, r2, #16
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d11e      	bne.n	8022c08 <_calloc_r+0x48>
 8022bca:	2d00      	cmp	r5, #0
 8022bcc:	d10c      	bne.n	8022be8 <_calloc_r+0x28>
 8022bce:	b289      	uxth	r1, r1
 8022bd0:	b294      	uxth	r4, r2
 8022bd2:	434c      	muls	r4, r1
 8022bd4:	0021      	movs	r1, r4
 8022bd6:	f7fe fe53 	bl	8021880 <_malloc_r>
 8022bda:	1e05      	subs	r5, r0, #0
 8022bdc:	d01a      	beq.n	8022c14 <_calloc_r+0x54>
 8022bde:	0022      	movs	r2, r4
 8022be0:	2100      	movs	r1, #0
 8022be2:	f7fd fb0f 	bl	8020204 <memset>
 8022be6:	e016      	b.n	8022c16 <_calloc_r+0x56>
 8022be8:	1c2b      	adds	r3, r5, #0
 8022bea:	1c0c      	adds	r4, r1, #0
 8022bec:	b289      	uxth	r1, r1
 8022bee:	b292      	uxth	r2, r2
 8022bf0:	434a      	muls	r2, r1
 8022bf2:	b29b      	uxth	r3, r3
 8022bf4:	b2a1      	uxth	r1, r4
 8022bf6:	4359      	muls	r1, r3
 8022bf8:	0c14      	lsrs	r4, r2, #16
 8022bfa:	190c      	adds	r4, r1, r4
 8022bfc:	0c23      	lsrs	r3, r4, #16
 8022bfe:	d107      	bne.n	8022c10 <_calloc_r+0x50>
 8022c00:	0424      	lsls	r4, r4, #16
 8022c02:	b292      	uxth	r2, r2
 8022c04:	4314      	orrs	r4, r2
 8022c06:	e7e5      	b.n	8022bd4 <_calloc_r+0x14>
 8022c08:	2d00      	cmp	r5, #0
 8022c0a:	d101      	bne.n	8022c10 <_calloc_r+0x50>
 8022c0c:	1c14      	adds	r4, r2, #0
 8022c0e:	e7ed      	b.n	8022bec <_calloc_r+0x2c>
 8022c10:	230c      	movs	r3, #12
 8022c12:	6003      	str	r3, [r0, #0]
 8022c14:	2500      	movs	r5, #0
 8022c16:	0028      	movs	r0, r5
 8022c18:	bd70      	pop	{r4, r5, r6, pc}

08022c1a <_realloc_r>:
 8022c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022c1c:	0006      	movs	r6, r0
 8022c1e:	000c      	movs	r4, r1
 8022c20:	0015      	movs	r5, r2
 8022c22:	2900      	cmp	r1, #0
 8022c24:	d105      	bne.n	8022c32 <_realloc_r+0x18>
 8022c26:	0011      	movs	r1, r2
 8022c28:	f7fe fe2a 	bl	8021880 <_malloc_r>
 8022c2c:	0004      	movs	r4, r0
 8022c2e:	0020      	movs	r0, r4
 8022c30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022c32:	2a00      	cmp	r2, #0
 8022c34:	d103      	bne.n	8022c3e <_realloc_r+0x24>
 8022c36:	f7fe fa53 	bl	80210e0 <_free_r>
 8022c3a:	2400      	movs	r4, #0
 8022c3c:	e7f7      	b.n	8022c2e <_realloc_r+0x14>
 8022c3e:	f000 f832 	bl	8022ca6 <_malloc_usable_size_r>
 8022c42:	0007      	movs	r7, r0
 8022c44:	4285      	cmp	r5, r0
 8022c46:	d802      	bhi.n	8022c4e <_realloc_r+0x34>
 8022c48:	0843      	lsrs	r3, r0, #1
 8022c4a:	42ab      	cmp	r3, r5
 8022c4c:	d3ef      	bcc.n	8022c2e <_realloc_r+0x14>
 8022c4e:	0029      	movs	r1, r5
 8022c50:	0030      	movs	r0, r6
 8022c52:	f7fe fe15 	bl	8021880 <_malloc_r>
 8022c56:	9001      	str	r0, [sp, #4]
 8022c58:	2800      	cmp	r0, #0
 8022c5a:	d0ee      	beq.n	8022c3a <_realloc_r+0x20>
 8022c5c:	002a      	movs	r2, r5
 8022c5e:	42bd      	cmp	r5, r7
 8022c60:	d900      	bls.n	8022c64 <_realloc_r+0x4a>
 8022c62:	003a      	movs	r2, r7
 8022c64:	0021      	movs	r1, r4
 8022c66:	9801      	ldr	r0, [sp, #4]
 8022c68:	f7fd fba8 	bl	80203bc <memcpy>
 8022c6c:	0021      	movs	r1, r4
 8022c6e:	0030      	movs	r0, r6
 8022c70:	f7fe fa36 	bl	80210e0 <_free_r>
 8022c74:	9c01      	ldr	r4, [sp, #4]
 8022c76:	e7da      	b.n	8022c2e <_realloc_r+0x14>

08022c78 <fiprintf>:
 8022c78:	b40e      	push	{r1, r2, r3}
 8022c7a:	b517      	push	{r0, r1, r2, r4, lr}
 8022c7c:	4c05      	ldr	r4, [pc, #20]	@ (8022c94 <fiprintf+0x1c>)
 8022c7e:	ab05      	add	r3, sp, #20
 8022c80:	cb04      	ldmia	r3!, {r2}
 8022c82:	0001      	movs	r1, r0
 8022c84:	6820      	ldr	r0, [r4, #0]
 8022c86:	9301      	str	r3, [sp, #4]
 8022c88:	f7ff fcfa 	bl	8022680 <_vfiprintf_r>
 8022c8c:	bc1e      	pop	{r1, r2, r3, r4}
 8022c8e:	bc08      	pop	{r3}
 8022c90:	b003      	add	sp, #12
 8022c92:	4718      	bx	r3
 8022c94:	200003d4 	.word	0x200003d4

08022c98 <abort>:
 8022c98:	2006      	movs	r0, #6
 8022c9a:	b510      	push	{r4, lr}
 8022c9c:	f000 f834 	bl	8022d08 <raise>
 8022ca0:	2001      	movs	r0, #1
 8022ca2:	f7ea ff85 	bl	800dbb0 <_exit>

08022ca6 <_malloc_usable_size_r>:
 8022ca6:	1f0b      	subs	r3, r1, #4
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	1f18      	subs	r0, r3, #4
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	da01      	bge.n	8022cb4 <_malloc_usable_size_r+0xe>
 8022cb0:	580b      	ldr	r3, [r1, r0]
 8022cb2:	18c0      	adds	r0, r0, r3
 8022cb4:	4770      	bx	lr

08022cb6 <_raise_r>:
 8022cb6:	b570      	push	{r4, r5, r6, lr}
 8022cb8:	0004      	movs	r4, r0
 8022cba:	000d      	movs	r5, r1
 8022cbc:	291f      	cmp	r1, #31
 8022cbe:	d904      	bls.n	8022cca <_raise_r+0x14>
 8022cc0:	2316      	movs	r3, #22
 8022cc2:	6003      	str	r3, [r0, #0]
 8022cc4:	2001      	movs	r0, #1
 8022cc6:	4240      	negs	r0, r0
 8022cc8:	bd70      	pop	{r4, r5, r6, pc}
 8022cca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d004      	beq.n	8022cda <_raise_r+0x24>
 8022cd0:	008a      	lsls	r2, r1, #2
 8022cd2:	189b      	adds	r3, r3, r2
 8022cd4:	681a      	ldr	r2, [r3, #0]
 8022cd6:	2a00      	cmp	r2, #0
 8022cd8:	d108      	bne.n	8022cec <_raise_r+0x36>
 8022cda:	0020      	movs	r0, r4
 8022cdc:	f000 f830 	bl	8022d40 <_getpid_r>
 8022ce0:	002a      	movs	r2, r5
 8022ce2:	0001      	movs	r1, r0
 8022ce4:	0020      	movs	r0, r4
 8022ce6:	f000 f819 	bl	8022d1c <_kill_r>
 8022cea:	e7ed      	b.n	8022cc8 <_raise_r+0x12>
 8022cec:	2a01      	cmp	r2, #1
 8022cee:	d009      	beq.n	8022d04 <_raise_r+0x4e>
 8022cf0:	1c51      	adds	r1, r2, #1
 8022cf2:	d103      	bne.n	8022cfc <_raise_r+0x46>
 8022cf4:	2316      	movs	r3, #22
 8022cf6:	6003      	str	r3, [r0, #0]
 8022cf8:	2001      	movs	r0, #1
 8022cfa:	e7e5      	b.n	8022cc8 <_raise_r+0x12>
 8022cfc:	2100      	movs	r1, #0
 8022cfe:	0028      	movs	r0, r5
 8022d00:	6019      	str	r1, [r3, #0]
 8022d02:	4790      	blx	r2
 8022d04:	2000      	movs	r0, #0
 8022d06:	e7df      	b.n	8022cc8 <_raise_r+0x12>

08022d08 <raise>:
 8022d08:	b510      	push	{r4, lr}
 8022d0a:	4b03      	ldr	r3, [pc, #12]	@ (8022d18 <raise+0x10>)
 8022d0c:	0001      	movs	r1, r0
 8022d0e:	6818      	ldr	r0, [r3, #0]
 8022d10:	f7ff ffd1 	bl	8022cb6 <_raise_r>
 8022d14:	bd10      	pop	{r4, pc}
 8022d16:	46c0      	nop			@ (mov r8, r8)
 8022d18:	200003d4 	.word	0x200003d4

08022d1c <_kill_r>:
 8022d1c:	2300      	movs	r3, #0
 8022d1e:	b570      	push	{r4, r5, r6, lr}
 8022d20:	4d06      	ldr	r5, [pc, #24]	@ (8022d3c <_kill_r+0x20>)
 8022d22:	0004      	movs	r4, r0
 8022d24:	0008      	movs	r0, r1
 8022d26:	0011      	movs	r1, r2
 8022d28:	602b      	str	r3, [r5, #0]
 8022d2a:	f7ea ff31 	bl	800db90 <_kill>
 8022d2e:	1c43      	adds	r3, r0, #1
 8022d30:	d103      	bne.n	8022d3a <_kill_r+0x1e>
 8022d32:	682b      	ldr	r3, [r5, #0]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d000      	beq.n	8022d3a <_kill_r+0x1e>
 8022d38:	6023      	str	r3, [r4, #0]
 8022d3a:	bd70      	pop	{r4, r5, r6, pc}
 8022d3c:	200037a8 	.word	0x200037a8

08022d40 <_getpid_r>:
 8022d40:	b510      	push	{r4, lr}
 8022d42:	f7ea ff1f 	bl	800db84 <_getpid>
 8022d46:	bd10      	pop	{r4, pc}

08022d48 <expf>:
 8022d48:	b570      	push	{r4, r5, r6, lr}
 8022d4a:	1c04      	adds	r4, r0, #0
 8022d4c:	f000 f8e6 	bl	8022f1c <__ieee754_expf>
 8022d50:	1c05      	adds	r5, r0, #0
 8022d52:	1c20      	adds	r0, r4, #0
 8022d54:	f000 f83c 	bl	8022dd0 <finitef>
 8022d58:	2800      	cmp	r0, #0
 8022d5a:	d00b      	beq.n	8022d74 <expf+0x2c>
 8022d5c:	490c      	ldr	r1, [pc, #48]	@ (8022d90 <expf+0x48>)
 8022d5e:	1c20      	adds	r0, r4, #0
 8022d60:	f7dd fbfa 	bl	8000558 <__aeabi_fcmpgt>
 8022d64:	2800      	cmp	r0, #0
 8022d66:	d007      	beq.n	8022d78 <expf+0x30>
 8022d68:	f7fd faf0 	bl	802034c <__errno>
 8022d6c:	25ff      	movs	r5, #255	@ 0xff
 8022d6e:	2322      	movs	r3, #34	@ 0x22
 8022d70:	05ed      	lsls	r5, r5, #23
 8022d72:	6003      	str	r3, [r0, #0]
 8022d74:	1c28      	adds	r0, r5, #0
 8022d76:	bd70      	pop	{r4, r5, r6, pc}
 8022d78:	4906      	ldr	r1, [pc, #24]	@ (8022d94 <expf+0x4c>)
 8022d7a:	1c20      	adds	r0, r4, #0
 8022d7c:	f7dd fbd8 	bl	8000530 <__aeabi_fcmplt>
 8022d80:	2800      	cmp	r0, #0
 8022d82:	d0f7      	beq.n	8022d74 <expf+0x2c>
 8022d84:	f7fd fae2 	bl	802034c <__errno>
 8022d88:	2322      	movs	r3, #34	@ 0x22
 8022d8a:	2500      	movs	r5, #0
 8022d8c:	6003      	str	r3, [r0, #0]
 8022d8e:	e7f1      	b.n	8022d74 <expf+0x2c>
 8022d90:	42b17217 	.word	0x42b17217
 8022d94:	c2cff1b5 	.word	0xc2cff1b5

08022d98 <sqrtf>:
 8022d98:	b570      	push	{r4, r5, r6, lr}
 8022d9a:	1c05      	adds	r5, r0, #0
 8022d9c:	f000 f822 	bl	8022de4 <__ieee754_sqrtf>
 8022da0:	1c29      	adds	r1, r5, #0
 8022da2:	1c04      	adds	r4, r0, #0
 8022da4:	1c28      	adds	r0, r5, #0
 8022da6:	f7de fbdd 	bl	8001564 <__aeabi_fcmpun>
 8022daa:	2800      	cmp	r0, #0
 8022dac:	d10e      	bne.n	8022dcc <sqrtf+0x34>
 8022dae:	2100      	movs	r1, #0
 8022db0:	1c28      	adds	r0, r5, #0
 8022db2:	f7dd fbbd 	bl	8000530 <__aeabi_fcmplt>
 8022db6:	2800      	cmp	r0, #0
 8022db8:	d008      	beq.n	8022dcc <sqrtf+0x34>
 8022dba:	f7fd fac7 	bl	802034c <__errno>
 8022dbe:	2321      	movs	r3, #33	@ 0x21
 8022dc0:	2100      	movs	r1, #0
 8022dc2:	6003      	str	r3, [r0, #0]
 8022dc4:	1c08      	adds	r0, r1, #0
 8022dc6:	f7dd ff05 	bl	8000bd4 <__aeabi_fdiv>
 8022dca:	1c04      	adds	r4, r0, #0
 8022dcc:	1c20      	adds	r0, r4, #0
 8022dce:	bd70      	pop	{r4, r5, r6, pc}

08022dd0 <finitef>:
 8022dd0:	22ff      	movs	r2, #255	@ 0xff
 8022dd2:	0043      	lsls	r3, r0, #1
 8022dd4:	085b      	lsrs	r3, r3, #1
 8022dd6:	2001      	movs	r0, #1
 8022dd8:	05d2      	lsls	r2, r2, #23
 8022dda:	4293      	cmp	r3, r2
 8022ddc:	db00      	blt.n	8022de0 <finitef+0x10>
 8022dde:	2000      	movs	r0, #0
 8022de0:	4770      	bx	lr
	...

08022de4 <__ieee754_sqrtf>:
 8022de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022de6:	0003      	movs	r3, r0
 8022de8:	0042      	lsls	r2, r0, #1
 8022dea:	1c04      	adds	r4, r0, #0
 8022dec:	20ff      	movs	r0, #255	@ 0xff
 8022dee:	0852      	lsrs	r2, r2, #1
 8022df0:	05c0      	lsls	r0, r0, #23
 8022df2:	4282      	cmp	r2, r0
 8022df4:	d30a      	bcc.n	8022e0c <__ieee754_sqrtf+0x28>
 8022df6:	1c21      	adds	r1, r4, #0
 8022df8:	1c20      	adds	r0, r4, #0
 8022dfa:	f7de f8d1 	bl	8000fa0 <__aeabi_fmul>
 8022dfe:	1c01      	adds	r1, r0, #0
 8022e00:	1c20      	adds	r0, r4, #0
 8022e02:	f7dd fd5d 	bl	80008c0 <__aeabi_fadd>
 8022e06:	1c04      	adds	r4, r0, #0
 8022e08:	1c20      	adds	r0, r4, #0
 8022e0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022e0c:	2a00      	cmp	r2, #0
 8022e0e:	d0fb      	beq.n	8022e08 <__ieee754_sqrtf+0x24>
 8022e10:	2c00      	cmp	r4, #0
 8022e12:	da07      	bge.n	8022e24 <__ieee754_sqrtf+0x40>
 8022e14:	1c21      	adds	r1, r4, #0
 8022e16:	1c20      	adds	r0, r4, #0
 8022e18:	f7de fa00 	bl	800121c <__aeabi_fsub>
 8022e1c:	1c01      	adds	r1, r0, #0
 8022e1e:	f7dd fed9 	bl	8000bd4 <__aeabi_fdiv>
 8022e22:	e7f0      	b.n	8022e06 <__ieee754_sqrtf+0x22>
 8022e24:	0022      	movs	r2, r4
 8022e26:	15e1      	asrs	r1, r4, #23
 8022e28:	4002      	ands	r2, r0
 8022e2a:	4204      	tst	r4, r0
 8022e2c:	d046      	beq.n	8022ebc <__ieee754_sqrtf+0xd8>
 8022e2e:	2280      	movs	r2, #128	@ 0x80
 8022e30:	000f      	movs	r7, r1
 8022e32:	025b      	lsls	r3, r3, #9
 8022e34:	0a5b      	lsrs	r3, r3, #9
 8022e36:	0412      	lsls	r2, r2, #16
 8022e38:	3f7f      	subs	r7, #127	@ 0x7f
 8022e3a:	4313      	orrs	r3, r2
 8022e3c:	07c9      	lsls	r1, r1, #31
 8022e3e:	d400      	bmi.n	8022e42 <__ieee754_sqrtf+0x5e>
 8022e40:	005b      	lsls	r3, r3, #1
 8022e42:	2400      	movs	r4, #0
 8022e44:	2180      	movs	r1, #128	@ 0x80
 8022e46:	2019      	movs	r0, #25
 8022e48:	0026      	movs	r6, r4
 8022e4a:	107f      	asrs	r7, r7, #1
 8022e4c:	005b      	lsls	r3, r3, #1
 8022e4e:	0449      	lsls	r1, r1, #17
 8022e50:	1875      	adds	r5, r6, r1
 8022e52:	001a      	movs	r2, r3
 8022e54:	429d      	cmp	r5, r3
 8022e56:	dc02      	bgt.n	8022e5e <__ieee754_sqrtf+0x7a>
 8022e58:	186e      	adds	r6, r5, r1
 8022e5a:	1b5a      	subs	r2, r3, r5
 8022e5c:	1864      	adds	r4, r4, r1
 8022e5e:	3801      	subs	r0, #1
 8022e60:	0053      	lsls	r3, r2, #1
 8022e62:	0849      	lsrs	r1, r1, #1
 8022e64:	2800      	cmp	r0, #0
 8022e66:	d1f3      	bne.n	8022e50 <__ieee754_sqrtf+0x6c>
 8022e68:	2a00      	cmp	r2, #0
 8022e6a:	d019      	beq.n	8022ea0 <__ieee754_sqrtf+0xbc>
 8022e6c:	4d17      	ldr	r5, [pc, #92]	@ (8022ecc <__ieee754_sqrtf+0xe8>)
 8022e6e:	4e18      	ldr	r6, [pc, #96]	@ (8022ed0 <__ieee754_sqrtf+0xec>)
 8022e70:	6828      	ldr	r0, [r5, #0]
 8022e72:	6831      	ldr	r1, [r6, #0]
 8022e74:	682b      	ldr	r3, [r5, #0]
 8022e76:	9301      	str	r3, [sp, #4]
 8022e78:	f7de f9d0 	bl	800121c <__aeabi_fsub>
 8022e7c:	1c01      	adds	r1, r0, #0
 8022e7e:	9801      	ldr	r0, [sp, #4]
 8022e80:	f7dd fb60 	bl	8000544 <__aeabi_fcmple>
 8022e84:	2800      	cmp	r0, #0
 8022e86:	d00b      	beq.n	8022ea0 <__ieee754_sqrtf+0xbc>
 8022e88:	6828      	ldr	r0, [r5, #0]
 8022e8a:	6831      	ldr	r1, [r6, #0]
 8022e8c:	f7dd fd18 	bl	80008c0 <__aeabi_fadd>
 8022e90:	682d      	ldr	r5, [r5, #0]
 8022e92:	1c01      	adds	r1, r0, #0
 8022e94:	1c28      	adds	r0, r5, #0
 8022e96:	f7dd fb4b 	bl	8000530 <__aeabi_fcmplt>
 8022e9a:	2800      	cmp	r0, #0
 8022e9c:	d011      	beq.n	8022ec2 <__ieee754_sqrtf+0xde>
 8022e9e:	3402      	adds	r4, #2
 8022ea0:	23fc      	movs	r3, #252	@ 0xfc
 8022ea2:	1064      	asrs	r4, r4, #1
 8022ea4:	059b      	lsls	r3, r3, #22
 8022ea6:	18e3      	adds	r3, r4, r3
 8022ea8:	05fc      	lsls	r4, r7, #23
 8022eaa:	18e4      	adds	r4, r4, r3
 8022eac:	e7ac      	b.n	8022e08 <__ieee754_sqrtf+0x24>
 8022eae:	005b      	lsls	r3, r3, #1
 8022eb0:	3201      	adds	r2, #1
 8022eb2:	4203      	tst	r3, r0
 8022eb4:	d0fb      	beq.n	8022eae <__ieee754_sqrtf+0xca>
 8022eb6:	3a01      	subs	r2, #1
 8022eb8:	1a89      	subs	r1, r1, r2
 8022eba:	e7b8      	b.n	8022e2e <__ieee754_sqrtf+0x4a>
 8022ebc:	2080      	movs	r0, #128	@ 0x80
 8022ebe:	0400      	lsls	r0, r0, #16
 8022ec0:	e7f7      	b.n	8022eb2 <__ieee754_sqrtf+0xce>
 8022ec2:	2301      	movs	r3, #1
 8022ec4:	3401      	adds	r4, #1
 8022ec6:	439c      	bics	r4, r3
 8022ec8:	e7ea      	b.n	8022ea0 <__ieee754_sqrtf+0xbc>
 8022eca:	46c0      	nop			@ (mov r8, r8)
 8022ecc:	20000428 	.word	0x20000428
 8022ed0:	20000424 	.word	0x20000424

08022ed4 <roundf>:
 8022ed4:	0dc3      	lsrs	r3, r0, #23
 8022ed6:	b2db      	uxtb	r3, r3
 8022ed8:	3b7f      	subs	r3, #127	@ 0x7f
 8022eda:	0002      	movs	r2, r0
 8022edc:	b510      	push	{r4, lr}
 8022ede:	2b16      	cmp	r3, #22
 8022ee0:	dc13      	bgt.n	8022f0a <roundf+0x36>
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	da07      	bge.n	8022ef6 <roundf+0x22>
 8022ee6:	0fc2      	lsrs	r2, r0, #31
 8022ee8:	07d0      	lsls	r0, r2, #31
 8022eea:	3301      	adds	r3, #1
 8022eec:	d102      	bne.n	8022ef4 <roundf+0x20>
 8022eee:	23fe      	movs	r3, #254	@ 0xfe
 8022ef0:	059b      	lsls	r3, r3, #22
 8022ef2:	4318      	orrs	r0, r3
 8022ef4:	bd10      	pop	{r4, pc}
 8022ef6:	4908      	ldr	r1, [pc, #32]	@ (8022f18 <roundf+0x44>)
 8022ef8:	4119      	asrs	r1, r3
 8022efa:	4208      	tst	r0, r1
 8022efc:	d0fa      	beq.n	8022ef4 <roundf+0x20>
 8022efe:	2080      	movs	r0, #128	@ 0x80
 8022f00:	03c0      	lsls	r0, r0, #15
 8022f02:	4118      	asrs	r0, r3
 8022f04:	1880      	adds	r0, r0, r2
 8022f06:	4388      	bics	r0, r1
 8022f08:	e7f4      	b.n	8022ef4 <roundf+0x20>
 8022f0a:	2b80      	cmp	r3, #128	@ 0x80
 8022f0c:	d1f2      	bne.n	8022ef4 <roundf+0x20>
 8022f0e:	1c01      	adds	r1, r0, #0
 8022f10:	f7dd fcd6 	bl	80008c0 <__aeabi_fadd>
 8022f14:	e7ee      	b.n	8022ef4 <roundf+0x20>
 8022f16:	46c0      	nop			@ (mov r8, r8)
 8022f18:	007fffff 	.word	0x007fffff

08022f1c <__ieee754_expf>:
 8022f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022f1e:	21ff      	movs	r1, #255	@ 0xff
 8022f20:	0043      	lsls	r3, r0, #1
 8022f22:	1c04      	adds	r4, r0, #0
 8022f24:	085b      	lsrs	r3, r3, #1
 8022f26:	05c9      	lsls	r1, r1, #23
 8022f28:	428b      	cmp	r3, r1
 8022f2a:	d904      	bls.n	8022f36 <__ieee754_expf+0x1a>
 8022f2c:	1c01      	adds	r1, r0, #0
 8022f2e:	1c20      	adds	r0, r4, #0
 8022f30:	f7dd fcc6 	bl	80008c0 <__aeabi_fadd>
 8022f34:	e00d      	b.n	8022f52 <__ieee754_expf+0x36>
 8022f36:	0fc6      	lsrs	r6, r0, #31
 8022f38:	428b      	cmp	r3, r1
 8022f3a:	d104      	bne.n	8022f46 <__ieee754_expf+0x2a>
 8022f3c:	2e00      	cmp	r6, #0
 8022f3e:	d000      	beq.n	8022f42 <__ieee754_expf+0x26>
 8022f40:	e0ba      	b.n	80230b8 <__ieee754_expf+0x19c>
 8022f42:	1c20      	adds	r0, r4, #0
 8022f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022f46:	495d      	ldr	r1, [pc, #372]	@ (80230bc <__ieee754_expf+0x1a0>)
 8022f48:	4288      	cmp	r0, r1
 8022f4a:	dd04      	ble.n	8022f56 <__ieee754_expf+0x3a>
 8022f4c:	2000      	movs	r0, #0
 8022f4e:	f000 f8f1 	bl	8023134 <__math_oflowf>
 8022f52:	1c04      	adds	r4, r0, #0
 8022f54:	e7f5      	b.n	8022f42 <__ieee754_expf+0x26>
 8022f56:	2800      	cmp	r0, #0
 8022f58:	da06      	bge.n	8022f68 <__ieee754_expf+0x4c>
 8022f5a:	4a59      	ldr	r2, [pc, #356]	@ (80230c0 <__ieee754_expf+0x1a4>)
 8022f5c:	4293      	cmp	r3, r2
 8022f5e:	d903      	bls.n	8022f68 <__ieee754_expf+0x4c>
 8022f60:	2000      	movs	r0, #0
 8022f62:	f000 f8e1 	bl	8023128 <__math_uflowf>
 8022f66:	e7f4      	b.n	8022f52 <__ieee754_expf+0x36>
 8022f68:	4a56      	ldr	r2, [pc, #344]	@ (80230c4 <__ieee754_expf+0x1a8>)
 8022f6a:	4293      	cmp	r3, r2
 8022f6c:	d96e      	bls.n	802304c <__ieee754_expf+0x130>
 8022f6e:	4a56      	ldr	r2, [pc, #344]	@ (80230c8 <__ieee754_expf+0x1ac>)
 8022f70:	00b5      	lsls	r5, r6, #2
 8022f72:	4293      	cmp	r3, r2
 8022f74:	d84e      	bhi.n	8023014 <__ieee754_expf+0xf8>
 8022f76:	4b55      	ldr	r3, [pc, #340]	@ (80230cc <__ieee754_expf+0x1b0>)
 8022f78:	1c20      	adds	r0, r4, #0
 8022f7a:	5959      	ldr	r1, [r3, r5]
 8022f7c:	f7de f94e 	bl	800121c <__aeabi_fsub>
 8022f80:	4b53      	ldr	r3, [pc, #332]	@ (80230d0 <__ieee754_expf+0x1b4>)
 8022f82:	1c07      	adds	r7, r0, #0
 8022f84:	595b      	ldr	r3, [r3, r5]
 8022f86:	2501      	movs	r5, #1
 8022f88:	1bad      	subs	r5, r5, r6
 8022f8a:	9300      	str	r3, [sp, #0]
 8022f8c:	1bad      	subs	r5, r5, r6
 8022f8e:	9900      	ldr	r1, [sp, #0]
 8022f90:	1c38      	adds	r0, r7, #0
 8022f92:	f7de f943 	bl	800121c <__aeabi_fsub>
 8022f96:	1c04      	adds	r4, r0, #0
 8022f98:	1c21      	adds	r1, r4, #0
 8022f9a:	1c20      	adds	r0, r4, #0
 8022f9c:	f7de f800 	bl	8000fa0 <__aeabi_fmul>
 8022fa0:	494c      	ldr	r1, [pc, #304]	@ (80230d4 <__ieee754_expf+0x1b8>)
 8022fa2:	1c06      	adds	r6, r0, #0
 8022fa4:	f7dd fffc 	bl	8000fa0 <__aeabi_fmul>
 8022fa8:	494b      	ldr	r1, [pc, #300]	@ (80230d8 <__ieee754_expf+0x1bc>)
 8022faa:	f7de f937 	bl	800121c <__aeabi_fsub>
 8022fae:	1c31      	adds	r1, r6, #0
 8022fb0:	f7dd fff6 	bl	8000fa0 <__aeabi_fmul>
 8022fb4:	4949      	ldr	r1, [pc, #292]	@ (80230dc <__ieee754_expf+0x1c0>)
 8022fb6:	f7dd fc83 	bl	80008c0 <__aeabi_fadd>
 8022fba:	1c31      	adds	r1, r6, #0
 8022fbc:	f7dd fff0 	bl	8000fa0 <__aeabi_fmul>
 8022fc0:	4947      	ldr	r1, [pc, #284]	@ (80230e0 <__ieee754_expf+0x1c4>)
 8022fc2:	f7de f92b 	bl	800121c <__aeabi_fsub>
 8022fc6:	1c31      	adds	r1, r6, #0
 8022fc8:	f7dd ffea 	bl	8000fa0 <__aeabi_fmul>
 8022fcc:	4945      	ldr	r1, [pc, #276]	@ (80230e4 <__ieee754_expf+0x1c8>)
 8022fce:	f7dd fc77 	bl	80008c0 <__aeabi_fadd>
 8022fd2:	1c31      	adds	r1, r6, #0
 8022fd4:	f7dd ffe4 	bl	8000fa0 <__aeabi_fmul>
 8022fd8:	1c01      	adds	r1, r0, #0
 8022fda:	1c20      	adds	r0, r4, #0
 8022fdc:	f7de f91e 	bl	800121c <__aeabi_fsub>
 8022fe0:	1c01      	adds	r1, r0, #0
 8022fe2:	1c06      	adds	r6, r0, #0
 8022fe4:	1c20      	adds	r0, r4, #0
 8022fe6:	f7dd ffdb 	bl	8000fa0 <__aeabi_fmul>
 8022fea:	9001      	str	r0, [sp, #4]
 8022fec:	2d00      	cmp	r5, #0
 8022fee:	d140      	bne.n	8023072 <__ieee754_expf+0x156>
 8022ff0:	2180      	movs	r1, #128	@ 0x80
 8022ff2:	1c30      	adds	r0, r6, #0
 8022ff4:	05c9      	lsls	r1, r1, #23
 8022ff6:	f7de f911 	bl	800121c <__aeabi_fsub>
 8022ffa:	1c01      	adds	r1, r0, #0
 8022ffc:	9801      	ldr	r0, [sp, #4]
 8022ffe:	f7dd fde9 	bl	8000bd4 <__aeabi_fdiv>
 8023002:	1c21      	adds	r1, r4, #0
 8023004:	f7de f90a 	bl	800121c <__aeabi_fsub>
 8023008:	1c01      	adds	r1, r0, #0
 802300a:	20fe      	movs	r0, #254	@ 0xfe
 802300c:	0580      	lsls	r0, r0, #22
 802300e:	f7de f905 	bl	800121c <__aeabi_fsub>
 8023012:	e79e      	b.n	8022f52 <__ieee754_expf+0x36>
 8023014:	4934      	ldr	r1, [pc, #208]	@ (80230e8 <__ieee754_expf+0x1cc>)
 8023016:	1c20      	adds	r0, r4, #0
 8023018:	f7dd ffc2 	bl	8000fa0 <__aeabi_fmul>
 802301c:	4b33      	ldr	r3, [pc, #204]	@ (80230ec <__ieee754_expf+0x1d0>)
 802301e:	5959      	ldr	r1, [r3, r5]
 8023020:	f7dd fc4e 	bl	80008c0 <__aeabi_fadd>
 8023024:	f7de fab4 	bl	8001590 <__aeabi_f2iz>
 8023028:	0005      	movs	r5, r0
 802302a:	f7de fad1 	bl	80015d0 <__aeabi_i2f>
 802302e:	4930      	ldr	r1, [pc, #192]	@ (80230f0 <__ieee754_expf+0x1d4>)
 8023030:	1c06      	adds	r6, r0, #0
 8023032:	f7dd ffb5 	bl	8000fa0 <__aeabi_fmul>
 8023036:	1c01      	adds	r1, r0, #0
 8023038:	1c20      	adds	r0, r4, #0
 802303a:	f7de f8ef 	bl	800121c <__aeabi_fsub>
 802303e:	492d      	ldr	r1, [pc, #180]	@ (80230f4 <__ieee754_expf+0x1d8>)
 8023040:	1c07      	adds	r7, r0, #0
 8023042:	1c30      	adds	r0, r6, #0
 8023044:	f7dd ffac 	bl	8000fa0 <__aeabi_fmul>
 8023048:	9000      	str	r0, [sp, #0]
 802304a:	e7a0      	b.n	8022f8e <__ieee754_expf+0x72>
 802304c:	22d0      	movs	r2, #208	@ 0xd0
 802304e:	0592      	lsls	r2, r2, #22
 8023050:	4293      	cmp	r3, r2
 8023052:	d20c      	bcs.n	802306e <__ieee754_expf+0x152>
 8023054:	4928      	ldr	r1, [pc, #160]	@ (80230f8 <__ieee754_expf+0x1dc>)
 8023056:	1c20      	adds	r0, r4, #0
 8023058:	f7dd fc32 	bl	80008c0 <__aeabi_fadd>
 802305c:	21fe      	movs	r1, #254	@ 0xfe
 802305e:	0589      	lsls	r1, r1, #22
 8023060:	f7dd fa7a 	bl	8000558 <__aeabi_fcmpgt>
 8023064:	1e05      	subs	r5, r0, #0
 8023066:	d097      	beq.n	8022f98 <__ieee754_expf+0x7c>
 8023068:	21fe      	movs	r1, #254	@ 0xfe
 802306a:	0589      	lsls	r1, r1, #22
 802306c:	e75f      	b.n	8022f2e <__ieee754_expf+0x12>
 802306e:	2500      	movs	r5, #0
 8023070:	e792      	b.n	8022f98 <__ieee754_expf+0x7c>
 8023072:	2080      	movs	r0, #128	@ 0x80
 8023074:	1c31      	adds	r1, r6, #0
 8023076:	05c0      	lsls	r0, r0, #23
 8023078:	f7de f8d0 	bl	800121c <__aeabi_fsub>
 802307c:	1c01      	adds	r1, r0, #0
 802307e:	9801      	ldr	r0, [sp, #4]
 8023080:	f7dd fda8 	bl	8000bd4 <__aeabi_fdiv>
 8023084:	1c01      	adds	r1, r0, #0
 8023086:	9800      	ldr	r0, [sp, #0]
 8023088:	f7de f8c8 	bl	800121c <__aeabi_fsub>
 802308c:	1c39      	adds	r1, r7, #0
 802308e:	f7de f8c5 	bl	800121c <__aeabi_fsub>
 8023092:	1c01      	adds	r1, r0, #0
 8023094:	20fe      	movs	r0, #254	@ 0xfe
 8023096:	0580      	lsls	r0, r0, #22
 8023098:	f7de f8c0 	bl	800121c <__aeabi_fsub>
 802309c:	002b      	movs	r3, r5
 802309e:	337d      	adds	r3, #125	@ 0x7d
 80230a0:	db02      	blt.n	80230a8 <__ieee754_expf+0x18c>
 80230a2:	05ec      	lsls	r4, r5, #23
 80230a4:	1824      	adds	r4, r4, r0
 80230a6:	e74c      	b.n	8022f42 <__ieee754_expf+0x26>
 80230a8:	21d8      	movs	r1, #216	@ 0xd8
 80230aa:	3564      	adds	r5, #100	@ 0x64
 80230ac:	05ed      	lsls	r5, r5, #23
 80230ae:	1828      	adds	r0, r5, r0
 80230b0:	0509      	lsls	r1, r1, #20
 80230b2:	f7dd ff75 	bl	8000fa0 <__aeabi_fmul>
 80230b6:	e74c      	b.n	8022f52 <__ieee754_expf+0x36>
 80230b8:	2400      	movs	r4, #0
 80230ba:	e742      	b.n	8022f42 <__ieee754_expf+0x26>
 80230bc:	42b17217 	.word	0x42b17217
 80230c0:	42cff1b5 	.word	0x42cff1b5
 80230c4:	3eb17218 	.word	0x3eb17218
 80230c8:	3f851591 	.word	0x3f851591
 80230cc:	08025fd8 	.word	0x08025fd8
 80230d0:	08025fd0 	.word	0x08025fd0
 80230d4:	3331bb4c 	.word	0x3331bb4c
 80230d8:	35ddea0e 	.word	0x35ddea0e
 80230dc:	388ab355 	.word	0x388ab355
 80230e0:	3b360b61 	.word	0x3b360b61
 80230e4:	3e2aaaab 	.word	0x3e2aaaab
 80230e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80230ec:	08025fe0 	.word	0x08025fe0
 80230f0:	3f317180 	.word	0x3f317180
 80230f4:	3717f7d1 	.word	0x3717f7d1
 80230f8:	7149f2ca 	.word	0x7149f2ca

080230fc <with_errnof>:
 80230fc:	b570      	push	{r4, r5, r6, lr}
 80230fe:	000d      	movs	r5, r1
 8023100:	1c04      	adds	r4, r0, #0
 8023102:	f7fd f923 	bl	802034c <__errno>
 8023106:	6005      	str	r5, [r0, #0]
 8023108:	1c20      	adds	r0, r4, #0
 802310a:	bd70      	pop	{r4, r5, r6, pc}

0802310c <xflowf>:
 802310c:	b510      	push	{r4, lr}
 802310e:	1c0b      	adds	r3, r1, #0
 8023110:	2800      	cmp	r0, #0
 8023112:	d002      	beq.n	802311a <xflowf+0xe>
 8023114:	2380      	movs	r3, #128	@ 0x80
 8023116:	061b      	lsls	r3, r3, #24
 8023118:	18cb      	adds	r3, r1, r3
 802311a:	1c18      	adds	r0, r3, #0
 802311c:	f7dd ff40 	bl	8000fa0 <__aeabi_fmul>
 8023120:	2122      	movs	r1, #34	@ 0x22
 8023122:	f7ff ffeb 	bl	80230fc <with_errnof>
 8023126:	bd10      	pop	{r4, pc}

08023128 <__math_uflowf>:
 8023128:	2180      	movs	r1, #128	@ 0x80
 802312a:	b510      	push	{r4, lr}
 802312c:	0549      	lsls	r1, r1, #21
 802312e:	f7ff ffed 	bl	802310c <xflowf>
 8023132:	bd10      	pop	{r4, pc}

08023134 <__math_oflowf>:
 8023134:	21e0      	movs	r1, #224	@ 0xe0
 8023136:	b510      	push	{r4, lr}
 8023138:	05c9      	lsls	r1, r1, #23
 802313a:	f7ff ffe7 	bl	802310c <xflowf>
 802313e:	bd10      	pop	{r4, pc}

08023140 <_init>:
 8023140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023142:	46c0      	nop			@ (mov r8, r8)
 8023144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023146:	bc08      	pop	{r3}
 8023148:	469e      	mov	lr, r3
 802314a:	4770      	bx	lr

0802314c <_fini>:
 802314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802314e:	46c0      	nop			@ (mov r8, r8)
 8023150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023152:	bc08      	pop	{r3}
 8023154:	469e      	mov	lr, r3
 8023156:	4770      	bx	lr
